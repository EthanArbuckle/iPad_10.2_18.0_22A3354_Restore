void _AddItemToArray(void *value, CFMutableArrayRef theArray)
{
  CFArrayAppendValue(theArray, value);
}

uint64_t CalDatabaseGetAuxilliaryDatabaseID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 172);
}

BOOL CalEntityIsDeleted(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsDeleted;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsDeleted = _CalEntityIsDeleted(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsDeleted;
}

BOOL _CalEntityIsDeleted(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordIsDeleted() != 0;
}

uint64_t CalRelationGetTypeID()
{
  pthread_once(&__CalRelationRegisterOnce, (void (*)(void))CalRelationRegisterClass);
  return __CalRelationTypeID;
}

uint64_t CalCalendarItemGetStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Status;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Status = _CalCalendarItemGetStatus(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Status;
}

__CFArray *_CalDatabaseCopyEventOccurrencesInDateRangeInternal(os_unfair_lock_s *a1, void *a2, void *a3, void *a4, void *a5, int a6, void *a7)
{
  id v11;
  id v12;
  id v13;
  int AppBooleanValue;
  uint64_t v15;
  const void *v16;
  unsigned int (**v17)(id, uint64_t);
  int v18;
  const __CFArray *v19;
  const __CFArray *v20;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex v23;
  CFIndex v24;
  int v25;
  _QWORD *ValueAtIndex;
  uint64_t v27;
  BOOL v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  os_unfair_lock_s *v34;
  uint64_t RecordStore;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v38;
  uint64_t v39;
  uint64_t v40;
  const os_unfair_lock *v41;
  const __CFArray *v42;
  const os_unfair_lock *v43;
  CFIndex v44;
  CFIndex v45;
  CFIndex v46;
  int v47;
  const void *v48;
  double v49;
  const void *v50;
  const void *v51;
  void *v52;
  void *v53;
  const __CFString *v54;
  uint64_t v55;
  BOOL v56;
  const os_unfair_lock *v57;
  uint64_t v58;
  BOOL v59;
  const os_unfair_lock *v60;
  uint64_t v61;
  uint64_t v62;
  const os_unfair_lock *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  const os_unfair_lock *v71;
  CFIndex v72;
  const __CFArray *v73;
  CFIndex v74;
  CFIndex i;
  const void *v76;
  __CFArray *v77;
  const __CFArray *v78;
  CFIndex v79;
  CFIndex v80;
  uint64_t v81;
  const void *v82;
  double v83;
  uint64_t v84;
  const void *v85;
  void *v88;
  void *v90;
  os_unfair_lock_t lock;
  const __CFString *cf;
  void *v93;
  void *v94;
  const __CFArray *theArraya;
  void *v98;
  void *v99;
  id v100;
  id v101;
  Boolean keyExistsAndHasValidFormat;

  v11 = a3;
  v12 = a4;
  v101 = a5;
  v13 = a7;
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("DisableOccurrenceCache"), (CFStringRef)*MEMORY[0x1E0C9B248], &keyExistsAndHasValidFormat);
  v99 = v11;
  v100 = v13;
  v98 = v12;
  if (keyExistsAndHasValidFormat && AppBooleanValue)
    goto LABEL_24;
  v15 = CalDatabaseCopyEventOccurrenceCache(a1);
  if (!v15)
    goto LABEL_24;
  v16 = (const void *)v15;
  v17 = (unsigned int (**)(id, uint64_t))v13;
  v18 = v17 ? 0 : a6;
  v19 = (const __CFArray *)CalEventOccurrenceCacheCopyEventOccurrencesInDateRangeWithLimit((uint64_t)v16, (uint64_t)a2, v11, v12, v101, 0, v18, 0);
  if (v19)
  {
    v20 = v19;
    Count = CFArrayGetCount(v19);
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v23 = Count - 1;
    if (Count >= 1)
    {
      v24 = 0;
      v25 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v20, v24);
        v27 = ValueAtIndex[2];
        if (CalEventIsDisplayable(v27) && (!v17 || v17[2](v17, v27)))
        {
          CFArrayAppendValue(Mutable, ValueAtIndex);
          ++v25;
        }
        v28 = v25 != a6 || a6 <= 0;
        if (!v28)
          break;
        v56 = v23 == v24++;
      }
      while (!v56);
    }
    CFRelease(v20);
    v12 = v98;
    v11 = v99;
    v13 = v100;
  }
  else
  {
    Mutable = 0;
  }

  CFRelease(v16);
  if (!Mutable)
  {
LABEL_24:
    objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianGMTCalendar");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "timeZone");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "dateInTimeZone:fromTimeZone:", v30, v101);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v29, "timeZone");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "dateInTimeZone:fromTimeZone:", v32, v101);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    cf = (const __CFString *)CalCFTimeZoneCopyCalTimeZone();
    v34 = a1 + 20;
    os_unfair_lock_lock(a1 + 20);
    RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
    Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
    {
      if (Database)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v38)
            os_unfair_lock_assert_owner(v38 + 20);
        }
      }
    }
    v39 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
    v40 = v39;
    if (CDBLockingAssertionsEnabled)
    {
      if (v39)
      {
        if (*(_QWORD *)v39)
        {
          if (*(_QWORD *)(*(_QWORD *)v39 + 104))
          {
            v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v41)
              os_unfair_lock_assert_owner(v41 + 20);
          }
        }
      }
    }
    CPSqliteConnectionBegin();
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    objc_msgSend(v12, "timeIntervalSinceReferenceDate");
    v94 = v31;
    objc_msgSend(v31, "timeIntervalSinceReferenceDate");
    v93 = v33;
    objc_msgSend(v33, "timeIntervalSinceReferenceDate");
    v42 = (const __CFArray *)_CalDatabaseCopyNonRecurringEventsInDateRange((uint64_t)a1, v40, a2);
    if (CDBLockingAssertionsEnabled)
    {
      if (v40)
      {
        if (*(_QWORD *)v40)
        {
          if (*(_QWORD *)(*(_QWORD *)v40 + 104))
          {
            v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v43)
              os_unfair_lock_assert_owner(v43 + 20);
          }
        }
      }
    }
    CPSqliteConnectionRollback();
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v34);
    os_unfair_lock_unlock(v34);
    v90 = v29;
    lock = a1 + 20;
    if (v42)
    {
      v44 = CFArrayGetCount(v42);
      if (v44 >= 1)
      {
        v45 = v44;
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        v46 = 0;
        v47 = 0;
        while (1)
        {
          v48 = CFArrayGetValueAtIndex(v42, v46);
          if (CalEventIsDisplayable((uint64_t)v48)
            && (!v13 || (*((unsigned int (**)(id, const void *))v13 + 2))(v13, v48)))
          {
            CalEventCopyStartDate((uint64_t)v48);
            CalDateTimeGetAbsoluteTime();
            v50 = (const void *)CalEventOccurrenceCreate(v48, v101, v49);
            if (v50)
            {
              v51 = v50;
              CFArrayAppendValue(Mutable, v50);
              CFRelease(v51);
              ++v47;
            }
            CalDateTimeRelease();
            if (a6 < 1)
            {
              v13 = v100;
            }
            else
            {
              v13 = v100;
              if (v47 == a6)
              {
                v47 = a6;
                goto LABEL_63;
              }
            }
          }
          if (v45 == ++v46)
            goto LABEL_63;
        }
      }
      Mutable = 0;
      v47 = 0;
LABEL_63:
      CFRelease(v42);
    }
    else
    {
      Mutable = 0;
      v47 = 0;
    }
    v12 = v98;
    v11 = v99;
    v53 = v93;
    v52 = v94;
    v54 = cf;
    if (a6 >= 1 && v47 >= a6)
      goto LABEL_121;
    os_unfair_lock_lock(lock);
    v55 = _CalDatabaseGetRecordStore((uint64_t)a1);
    if (CDBLockingAssertionsEnabled)
      v56 = v55 == 0;
    else
      v56 = 1;
    if (!v56)
    {
      v57 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v57)
        os_unfair_lock_assert_owner(v57 + 20);
    }
    v58 = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
      v59 = v58 == 0;
    else
      v59 = 1;
    if (!v59)
    {
      if (*(_QWORD *)(v58 + 104))
      {
        v60 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v60)
          os_unfair_lock_assert_owner(v60 + 20);
      }
    }
    v61 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
    v62 = v61;
    if (CDBLockingAssertionsEnabled)
    {
      if (v61)
      {
        if (*(_QWORD *)v61)
        {
          if (*(_QWORD *)(*(_QWORD *)v61 + 104))
          {
            v63 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v63)
              os_unfair_lock_assert_owner(v63 + 20);
          }
        }
      }
    }
    CPSqliteConnectionBegin();
    objc_msgSend(v99, "timeIntervalSinceReferenceDate");
    v65 = v64;
    objc_msgSend(v98, "timeIntervalSinceReferenceDate");
    v67 = v66;
    objc_msgSend(v94, "timeIntervalSinceReferenceDate");
    v69 = v68;
    objc_msgSend(v93, "timeIntervalSinceReferenceDate");
    theArraya = (const __CFArray *)_CalDatabaseCopyRecurringEventsPossiblyOccurringInDateRange((uint64_t)a1, a2, cf, v65, v67, v69, v70);
    if (CDBLockingAssertionsEnabled)
    {
      if (v62)
      {
        if (*(_QWORD *)v62)
        {
          if (*(_QWORD *)(*(_QWORD *)v62 + 104))
          {
            v71 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v71)
              os_unfair_lock_assert_owner(v71 + 20);
          }
        }
      }
    }
    CPSqliteConnectionRollback();
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(lock);
    os_unfair_lock_unlock(lock);
    if (theArraya)
    {
      v72 = CFArrayGetCount(theArraya);
      v73 = theArraya;
      if (v72 >= 1)
      {
        v74 = v72;
        for (i = 0; i != v74; ++i)
        {
          v76 = CFArrayGetValueAtIndex(v73, i);
          if (CalEventIsDisplayable((uint64_t)v76)
            && (!v13 || (*((unsigned int (**)(id, const void *))v13 + 2))(v13, v76)))
          {
            v77 = CalEventCopyOccurrenceDatesInDateRange((uint64_t)v76, v99, v98, v101);
            if (v77)
            {
              v78 = v77;
              v79 = CFArrayGetCount(v77);
              if (v79 >= 1)
              {
                v80 = v79;
                v81 = 1;
                do
                {
                  v82 = CFArrayGetValueAtIndex(v78, v81 - 1);
                  v83 = MEMORY[0x1A85B424C](v82);
                  v84 = CalEventOccurrenceCreate(v76, v101, v83);
                  if (v84)
                  {
                    v85 = (const void *)v84;
                    if (!Mutable)
                      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                    CFArrayAppendValue(Mutable, v85);
                    CFRelease(v85);
                    ++v47;
                  }
                  if (v47 == a6 && a6 >= 1)
                    break;
                  v28 = v81++ < v80;
                }
                while (v28);
              }
              CFRelease(v78);
              v13 = v100;
              v73 = theArraya;
            }
          }
          if (v47 == a6 && a6 > 0)
            break;
        }
      }
      CFRelease(v73);
      v12 = v98;
      v11 = v99;
      v88 = v90;
      v53 = v93;
      v52 = v94;
      v54 = cf;
      if (!cf)
        goto LABEL_123;
    }
    else
    {
LABEL_121:
      v88 = v90;
      if (!cf)
      {
LABEL_123:

        goto LABEL_124;
      }
    }
    CFRelease(v54);
    goto LABEL_123;
  }
LABEL_124:

  return Mutable;
}

uint64_t CalEventIsDisplayable(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t IsDisplayable;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsDisplayable = _CalEventIsDisplayable(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsDisplayable;
}

uint64_t _CalEventIsDisplayable(uint64_t a1)
{
  uint64_t result;
  CFTypeRef Organizer;
  uint64_t Calendar;
  CFTypeRef Store;
  _BOOL4 IsReminderIntegrationEvent;
  uint64_t v7;
  uint64_t v8;

  if (_CalEventIsHidden(a1))
    return 0;
  if (_CalCalendarItemGetStatus(a1) == 3)
  {
    Organizer = _CalCalendarItemGetOrganizer(a1);
    if (Organizer)
    {
      if (_CalOrganizerIsSelf((uint64_t)Organizer))
        return 0;
    }
  }
  if (_CalEventGetParticipationStatus(a1) == 2
    && (!CalShowDeclinedEvents()
     || (Calendar = _CalEventGetCalendar(a1)) != 0
     && (Store = _CalCalendarGetStore(Calendar)) != 0
     && _CalStoreGetType((uint64_t)Store) == 1)
    && _CalEventGetProposedStartDate(a1) == *MEMORY[0x1E0D0C490])
  {
    return 0;
  }
  if ((CalShowCompletedReminders() & 1) == 0)
  {
    if (_CalCalendarItemGetIsCompleted(a1))
    {
      IsReminderIntegrationEvent = _CalEventIsReminderIntegrationEvent(a1);
      if (IsReminderIntegrationEvent)
        return !IsReminderIntegrationEvent;
    }
  }
  v7 = _CalEventGetCalendar(a1);
  if (!v7)
    return 1;
  v8 = v7;
  result = _CalCalendarCanContainEntityType(v7, 2);
  if ((_DWORD)result)
  {
    IsReminderIntegrationEvent = _CalCalendarIsHidden(v8);
    return !IsReminderIntegrationEvent;
  }
  return result;
}

uint64_t _CalCalendarItemGetStatus(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalGetCalendarWithUID(uint64_t result)
{
  const os_unfair_lock *Context;

  if (result)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return CPRecordStoreGetInstanceOfClassWithUID();
  }
  return result;
}

uint64_t _CalEventGetCalendar(uint64_t a1)
{
  uint64_t Store;

  _CalEventGetCalendarId(a1);
  Store = CPRecordGetStore();
  return _CalGetCalendarWithUID(Store);
}

uint64_t _CalEventGetCalendarId(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

BOOL _CalEventIsHidden(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL _CalCalendarIsHidden(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 2);
}

uint64_t CalEventOccurrenceCacheCopyEventOccurrencesInDateRangeWithLimit(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, char a6, int a7, _QWORD *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _QWORD v23[5];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = v15;
  v19 = v16;
  v20 = v17;
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = ___CalEventOccurrenceCacheCopyEventOccurrencesInDateRange_block_invoke;
  v23[3] = &unk_1E4F8EF20;
  v23[4] = &v24;
  _CalEventOccurrenceCacheProcessEventOccurrencesInDateRange(a1, a2, v18, v19, v20, a6, a7, 0, a8, v23);
  v21 = v25[3];
  _Block_object_dispose(&v24, 8);

  return v21;
}

void sub_1A5CCE06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _CalEventOccurrenceCacheProcessEventOccurrencesInDateRange(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, char a6, int a7, int a8, _QWORD *a9, void *a10)
{
  id v16;
  id v17;
  id v18;
  id v19;
  void (**v20)(_QWORD);
  int v21;
  uint64_t *v22;
  const __CFArray *v23;
  CFIndex Count;
  CFIndex v25;
  void *v26;
  const __CFArray *v27;
  CFIndex v28;
  CFIndex i;
  void *ValueAtIndex;
  void *context;
  id v33;
  id v34;
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  CFIndex v44;
  int v45;
  _QWORD v46[4];
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  void (*v66)(uint64_t);
  id v67;
  _QWORD v68[5];
  id v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[4];
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;

  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a10;
  v75 = 0;
  v76 = &v75;
  v77 = 0x2020000000;
  v78 = 0;
  v74[0] = 0;
  v74[1] = v74;
  v74[2] = 0x2020000000;
  v74[3] = 0;
  v70 = 0;
  v71 = &v70;
  v72 = 0x2020000000;
  v73 = 0;
  v68[0] = 0;
  v68[1] = v68;
  v68[2] = 0x3032000000;
  v68[3] = __Block_byref_object_copy__2;
  v68[4] = __Block_byref_object_dispose__2;
  v69 = 0;
  v62 = 0;
  v63 = &v62;
  v64 = 0x3032000000;
  v65 = __Block_byref_object_copy__2;
  v66 = __Block_byref_object_dispose__2;
  v67 = 0;
  context = (void *)MEMORY[0x1A85B514C]();
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v46[2] = ___CalEventOccurrenceCacheProcessEventOccurrencesInDateRange_block_invoke;
  v46[3] = &unk_1E4F8EF48;
  v60 = a9 != 0;
  v56 = a1;
  v51 = &v62;
  v61 = a6;
  v35 = v16;
  v47 = v35;
  v34 = v17;
  v48 = v34;
  v33 = v18;
  v49 = v33;
  v20 = (void (**)(_QWORD))v19;
  v58 = a7;
  v21 = a8;
  v59 = a8;
  v50 = v20;
  v52 = v74;
  v53 = &v75;
  v54 = v68;
  v57 = a2;
  v55 = &v70;
  _CalEventOccurrenceCachePerformWithLock(a1, v46);
  if (v71[3])
  {
    v20[2](v20);
    CFRelease((CFTypeRef)v71[3]);
  }

  objc_autoreleasePoolPop(context);
  if (a9)
    *a9 = objc_retainAutorelease((id)v63[5]);
  v22 = v76;
  if (a8)
  {
    v23 = (const __CFArray *)v76[3];
    if (v23)
    {
      Count = CFArrayGetCount(v23);
      v25 = a8;
      while (v25 < Count)
      {
        v26 = (void *)MEMORY[0x1A85B514C]();
        CalDatabaseReset(*(os_unfair_lock_s **)(a1 + 24));
        v36[0] = MEMORY[0x1E0C809B0];
        v36[1] = 3221225472;
        v36[2] = ___CalEventOccurrenceCacheProcessEventOccurrencesInDateRange_block_invoke_314;
        v36[3] = &unk_1E4F8EF70;
        v40 = &v70;
        v41 = &v75;
        v43 = a1;
        v44 = v25;
        v45 = v21;
        v37 = v35;
        v38 = v34;
        v42 = v68;
        v39 = v33;
        _CalEventOccurrenceCachePerformWithLock(a1, v36);
        if (v71[3])
        {
          v20[2](v20);
          CFRelease((CFTypeRef)v71[3]);
        }
        v25 += v21;

        objc_autoreleasePoolPop(v26);
      }
      v22 = v76;
    }
  }
  v27 = (const __CFArray *)v22[3];
  if (v27)
  {
    v28 = CFArrayGetCount(v27);
    if (v28 >= 1)
    {
      for (i = 0; i != v28; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v76[3], i);
        free(ValueAtIndex);
      }
    }
    CFRelease((CFTypeRef)v76[3]);
  }
  _Block_object_dispose(&v62, 8);

  _Block_object_dispose(v68, 8);
  _Block_object_dispose(&v70, 8);
  _Block_object_dispose(v74, 8);
  _Block_object_dispose(&v75, 8);

}

void sub_1A5CCE450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  _Block_object_dispose(&a46, 8);
  _Block_object_dispose((const void *)(v46 - 248), 8);
  _Block_object_dispose((const void *)(v46 - 200), 8);
  _Block_object_dispose((const void *)(v46 - 168), 8);
  _Block_object_dispose((const void *)(v46 - 136), 8);
  _Unwind_Resume(a1);
}

CFTypeRef CalFilterCreateWithDatabaseShowingCalendarsWithUIDs(uint64_t a1, uint64_t a2)
{
  EKCalendarFilter *v2;
  CFTypeRef v3;

  v2 = -[EKCalendarFilter initWithDatabase:showingCalendarsWithUIDs:]([EKCalendarFilter alloc], "initWithDatabase:showingCalendarsWithUIDs:", a1, a2);
  v3 = CFRetain(v2);

  return v3;
}

void *_CalFilterCopyQuery(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "filterQueryForQueryString:creator:userInfo:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
    CFRetain(v1);

  return v2;
}

__CFString *_CalEventOccurrenceCacheCreateCalendarIdQueryForFilterIncludingNullId(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  const __CFString *v8;
  __CFString *MutableCopy;
  void *v10;
  const void *v11;
  const __CFString *v12;

  if ((CalFilterIncludeDisableStores() & 1) != 0)
    v8 = 0;
  else
    v8 = _CalDatabaseCopyDisabledStoresClause(a2);
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFStringRef *)a3);
  v10 = _CalFilterCopyCalendarIDClauseForQuery(a1, (uint64_t)CFSTR("calendar_id"));
  v11 = v10;
  if (!a4 && !v10 && !v8)
  {
    if (!*(_QWORD *)(a3 + 8))
      goto LABEL_17;
    v12 = CFSTR(" WHERE ");
    goto LABEL_16;
  }
  if (v10)
  {
    CFStringAppendFormat(MutableCopy, 0, CFSTR(" WHERE %@ AND calendar_id != -2"), v10);
    CFRelease(v11);
  }
  else if (v8)
  {
    CFStringAppend(MutableCopy, CFSTR(" WHERE store_id != -2 AND store_id NOT IN "));
    CFStringAppend(MutableCopy, v8);
  }
  else
  {
    CFStringAppendFormat(MutableCopy, 0, CFSTR(" WHERE calendar_id = -2"));
  }
  if (*(_QWORD *)(a3 + 8))
  {
    v12 = CFSTR(" AND ");
LABEL_16:
    CFStringAppend(MutableCopy, v12);
  }
LABEL_17:
  if (*(_QWORD *)(a3 + 8))
    CFStringAppendFormat(MutableCopy, 0, CFSTR(" %@"), *(_QWORD *)(a3 + 8));
  if (*(_QWORD *)(a3 + 16))
    CFStringAppendFormat(MutableCopy, 0, CFSTR(" %@"), *(_QWORD *)(a3 + 16));
  if (*(int *)(a3 + 24) >= 1)
    CFStringAppendFormat(MutableCopy, 0, CFSTR(" LIMIT %d"), *(unsigned int *)(a3 + 24));
  if (v8)
    CFRelease(v8);
  return MutableCopy;
}

CFMutableStringRef _CalDatabaseCopyDisabledStoresClause(uint64_t a1)
{
  const void *v2;
  CFTypeID v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  const os_unfair_lock *v11;
  uint64_t v12;
  const os_unfair_lock *v13;
  CFMutableStringRef theString;

  v2 = *(const void **)(a1 + 104);
  if (v2)
  {
    v3 = CFGetTypeID(v2);
    if (v3 == CFNullGetTypeID())
      return 0;
    else
      return (CFMutableStringRef)CFRetain(*(CFTypeRef *)(a1 + 104));
  }
  else
  {
    theString = 0;
    if (*(_QWORD *)(a1 + 24))
    {
      if (CDBLockingAssertionsEnabled)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      Database = CPRecordStoreGetDatabase();
      if (Database)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)(Database + 104))
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
        v8 = (uint64_t **)CPSqliteDatabaseStatementForReading();
        if (v8)
        {
          v9 = v8;
          if (CDBLockingAssertionsEnabled)
          {
            if (*v8)
            {
              v10 = **v8;
              if (v10)
              {
                if (*(_QWORD *)(v10 + 104))
                {
                  v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v11)
                    os_unfair_lock_assert_owner(v11 + 20);
                }
              }
            }
          }
          CPSqliteStatementSendResults();
          if (CDBLockingAssertionsEnabled)
          {
            if (*v9)
            {
              v12 = **v9;
              if (v12)
              {
                if (*(_QWORD *)(v12 + 104))
                {
                  v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v13)
                    os_unfair_lock_assert_owner(v13 + 20);
                }
              }
            }
          }
          CPSqliteStatementReset();
          *(_QWORD *)(a1 + 104) = CFRetain((CFTypeRef)*MEMORY[0x1E0C9B0D0]);
        }
      }
    }
    return theString;
  }
}

void *_CalFilterCopyCalendarIDClauseForQuery(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a1, "calendarIDClauseForQueryWithVariableName:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    CFRetain(v2);

  return v3;
}

__CFString *_CalEventOccurrenceCacheCreateCalendarIdQueryForFilter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _CalEventOccurrenceCacheCreateCalendarIdQueryForFilterIncludingNullId(a1, a2, a4, 0);
}

void _CalEventOccurrenceCachePerformWithLock(uint64_t a1, void *a2)
{
  void (**v3)(void);

  v3 = a2;
  if (CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
  {
    v3[2]();
    CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  }

}

void CalDatabaseUnlockForThread(const os_unfair_lock *a1)
{
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)&a1[20];
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(a1 + 20);
  os_unfair_lock_unlock(v1);
}

uint64_t CalDatabaseLockForThread(os_unfair_lock_s *a1)
{
  os_unfair_lock_lock(a1 + 20);
  return 1;
}

uint64_t _CalCalendarCanContainEntityType(uint64_t a1, int a2)
{
  _BOOL4 v2;
  _BOOL4 v3;
  const os_unfair_lock *Context;
  int Property;
  unsigned int v6;

  v2 = a2 == 2;
  v3 = a2 == 3;
  if ((a2 & 0xFFFFFFFE) != 2)
    return 0;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  v6 = Property == 4 && v2;
  if (Property == 8)
    v6 = v3;
  if (Property)
    return v6;
  else
    return 1;
}

__CFString *_CalEventOccurrenceCacheCreateDaysCalendarIdQueryForFilter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _CalEventOccurrenceCacheCreateCalendarIdQueryForFilterIncludingNullId(a1, a2, a4, 1);
}

__CFArray *_CalEventOccurrenceCacheCopyBatchOfEvents(uint64_t a1, const __CFSet *a2, const __CFArray *a3, CFIndex a4, int a5, void *a6, void *a7, void *a8, void *a9)
{
  id v15;
  CFIndex Count;
  CFIndex v17;
  __CFSet *Mutable;
  CFIndex v19;
  int *ValueAtIndex;
  CFIndex v21;
  const void **v22;
  CFArrayRef v23;
  uint64_t RecordStore;
  BOOL v25;
  const os_unfair_lock *Context;
  const __CFArray *v27;
  void *v28;
  id v29;
  double *v30;
  double *v31;
  const __CFArray *v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t EventWithUID;
  const void *v40;
  void *v41;
  void *v42;
  _BOOL4 IsFloating;
  uint64_t v44;
  double v45;
  const void *v46;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  const __CFArray *v51;
  __CFSet *cf;
  __CFArray *theArray;
  id v54;
  CFIndex v55;
  id v56;
  id v57;
  id v59;

  v56 = a6;
  v15 = a7;
  v57 = a8;
  v59 = a9;
  Count = CFArrayGetCount(a3);
  if (!a5 || (v17 = a4 + a5, Count < v17))
    v17 = Count;
  v54 = v15;
  if (a2)
  {
    Mutable = 0;
  }
  else
  {
    Mutable = CFSetCreateMutable(0, 0, 0);
    if (v17 > a4)
    {
      v19 = a4;
      do
      {
        ValueAtIndex = (int *)CFArrayGetValueAtIndex(a3, v19);
        CFSetAddValue(Mutable, (const void *)*ValueAtIndex);
        ++v19;
      }
      while (v17 != v19);
    }
    a2 = Mutable;
  }
  cf = Mutable;
  v21 = CFSetGetCount(a2);
  v22 = (const void **)malloc_type_malloc(8 * v21, 0x100004000313F17uLL);
  CFSetGetValues(a2, v22);
  v23 = CFArrayCreate(0, v22, v21, 0);
  free(v22);
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
    v25 = RecordStore == 0;
  else
    v25 = 1;
  if (!v25)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v27 = (const __CFArray *)CPRecordStoreCopyInstancesOfClassWithUIDs();
  CFRelease(v23);
  v51 = v27;
  _CalDatabaseFaultDefaultRelationsForEvents(*(_QWORD *)(a1 + 24), v27);
  theArray = CFArrayCreateMutable(0, v17 - a4, MEMORY[0x1E0C9B378]);
  v28 = v54;
  if (v17 > a4)
  {
    v29 = v57;
    if (v59)
      v29 = v59;
    v49 = v29;
    v55 = v17;
    do
    {
      v30 = (double *)CFArrayGetValueAtIndex(a3, a4);
      if (v30)
      {
        v31 = v30;
        v32 = a3;
        v33 = *(_QWORD *)(a1 + 24);
        v34 = v56;
        v35 = v28;
        v36 = v57;
        v37 = v59;
        if (v57)
        {
          v38 = _CalDatabaseGetRecordStore(v33);
          EventWithUID = _CalGetEventWithUID(v38, *(unsigned int *)v31);
          if (EventWithUID)
          {
            v40 = (const void *)EventWithUID;
            objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v31[1]);
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v31[2]);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            IsFloating = _CalCalendarItemIsFloating((uint64_t)v40);
            if (v59 && IsFloating && (objc_msgSend(v37, "isEqualToTimeZone:", v36) & 1) == 0)
            {
              objc_msgSend(v41, "dateInTimeZone:fromTimeZone:", v37, v36);
              v50 = objc_claimAutoreleasedReturnValue();

              objc_msgSend(v42, "dateInTimeZone:fromTimeZone:", v37, v36);
              v44 = objc_claimAutoreleasedReturnValue();

              v41 = (void *)v50;
              v42 = (void *)v44;
            }
            if (objc_msgSend(v42, "CalIsAfterOrSameAsDate:", v34, v48)
              && objc_msgSend(v41, "CalIsBeforeDate:", v35))
            {
              objc_msgSend(v41, "timeIntervalSinceReferenceDate");
              v46 = (const void *)CalEventOccurrenceCreate(v40, v49, v45);
              CFArrayAppendValue(theArray, v46);
              CFRelease(v46);
            }

            v28 = v54;
          }
          else
          {
            v48 = *(unsigned int *)v31;
            CFLog();
          }
        }

        a3 = v32;
        v17 = v55;
      }
      ++a4;
    }
    while (v17 != a4);
  }
  if (cf)
    CFRelease(cf);
  if (v51)
    CFRelease(v51);

  return theArray;
}

uint64_t _CalDatabaseGetRecordStore(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t _CalGetCalendarItemWithRowID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t CalEventOccurrenceCreate(const void *a1, const void *a2, double a3)
{
  uint64_t Instance;

  pthread_once(&__CalEventOccurrenceRegisterOnce, (void (*)(void))CalEventOccurrenceRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = CFRetain(a1);
  *(double *)(Instance + 24) = a3;
  *(_QWORD *)(Instance + 32) = CFRetain(a2);
  return Instance;
}

BOOL _CalCalendarItemIsFloating(uint64_t a1)
{
  const os_unfair_lock *Context;
  const __CFString *Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFString *)CPRecordGetProperty();
  return !Property || CFStringCompare(Property, CFSTR("_float"), 0) == kCFCompareEqualTo;
}

void _CalDatabaseFaultDefaultRelationsForEvents(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  char v4;
  char v5;
  __CFSet *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  BOOL v9;
  const os_unfair_lock *Context;
  int Property;
  CFIndex v12;
  unint64_t v13;
  const void **v14;
  size_t v15;
  CFArrayRef v16;
  uint64_t RecordStore;
  BOOL v18;
  const os_unfair_lock *v19;
  const void *v20;
  uint64_t v21[2];

  v21[0] = a1;
  v21[1] = *MEMORY[0x1E0C80C00];
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v4 = 1;
  do
  {
    v5 = v4;
    Mutable = CFSetCreateMutable(0, 0, 0);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        if (CDBLockingAssertionsEnabled)
          v9 = ValueAtIndex == 0;
        else
          v9 = 1;
        if (!v9)
        {
          if (CPRecordGetStore())
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
        Property = CPRecordGetProperty();
        if (Property >= 1)
          CFSetAddValue(Mutable, (const void *)Property);
      }
    }
    v12 = CFSetGetCount(Mutable);
    MEMORY[0x1E0C80A78]();
    v14 = (const void **)((char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v13 >= 0x200)
      v15 = 512;
    else
      v15 = v13;
    bzero((char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
    CFSetGetValues(Mutable, v14);
    v16 = CFArrayCreate(0, v14, v12, 0);
    RecordStore = _CalDatabaseGetRecordStore(v21[0]);
    if (CDBLockingAssertionsEnabled)
      v18 = RecordStore == 0;
    else
      v18 = 1;
    if (!v18)
    {
      v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v19)
        os_unfair_lock_assert_owner(v19 + 20);
    }
    v20 = (const void *)CPRecordStoreCopyInstancesOfClassWithUIDs();
    if (v20)
      CFRelease(v20);
    CFRelease(v16);
    CFRelease(Mutable);
    v4 = 0;
  }
  while ((v5 & 1) != 0);
}

BOOL isValidEntityType(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 + 1) <= 0x1E)
  {
    if (((1 << (a1 + 1)) & 0x7F7FFFFC) != 0)
      return result;
    if (a1 == -1)
      return 0;
  }
  return (a1 - 100) >= 2 && a1 == 102;
}

__CFArray *_CalDatabaseCopyOfAllCalendarsInStoreWithOptions(uint64_t a1, uint64_t a2, char a3)
{
  __CFArray *Mutable;
  __CFArray *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v14;
  const __CFArray *v15;
  const __CFArray *v16;
  CFIndex v17;
  CFIndex v18;
  CFIndex j;
  const void *v20;
  const void *v21;
  int v22;
  CFTypeRef Store;
  _BOOL4 IsEnabled;
  char v25;
  CFRange v27;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (a2)
  {
    v7 = _CalStoreCopyCalendars(a2);
  }
  else
  {
    v7 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v8 = (const __CFArray *)_CalDatabaseCopyOfAllStores(a1);
    if (v8)
    {
      v9 = v8;
      Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        v11 = Count;
        for (i = 0; i != v11; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
          v14 = (uint64_t)ValueAtIndex;
          if (((a3 & 8) == 0 || _CalStoreGetType((uint64_t)ValueAtIndex) != 6)
            && ((a3 & 2) == 0 || _CalStoreIsEnabled(v14)))
          {
            v15 = _CalStoreCopyCalendars(v14);
            if (v15)
            {
              v16 = v15;
              v27.length = CFArrayGetCount(v15);
              v27.location = 0;
              CFArrayAppendArray(v7, v16, v27);
              CFRelease(v16);
            }
          }
        }
      }
      CFRelease(v9);
    }
  }
  if (v7)
  {
    v17 = CFArrayGetCount(v7);
    if (v17 >= 1)
    {
      v18 = v17;
      for (j = 0; v18 != j; ++j)
      {
        v20 = CFArrayGetValueAtIndex(v7, j);
        v21 = v20;
        if ((a3 & 2) != 0)
        {
          Store = _CalCalendarGetStore((uint64_t)v20);
          if (Store)
            IsEnabled = _CalStoreIsEnabled((uint64_t)Store);
          else
            IsEnabled = 0;
          v22 = IsEnabled & !_CalCalendarGetFlag((uint64_t)v21, 2);
          if ((a3 & 1) != 0)
LABEL_24:
            v22 &= !_CalCalendarGetFlag((uint64_t)v21, 1);
        }
        else
        {
          v22 = 1;
          if ((a3 & 1) != 0)
            goto LABEL_24;
        }
        if ((a3 & 4) != 0)
        {
          if (!_CalCalendarGetFlag((uint64_t)v21, 128))
            continue;
          v25 = _CalCalendarGetSharingInvitationResponse((uint64_t)v21) ? 0 : v22;
          if ((v25 & 1) == 0)
            continue;
        }
        else if (!v22)
        {
          continue;
        }
        CFArrayAppendValue(Mutable, v21);
      }
    }
    CFRelease(v7);
  }
  return Mutable;
}

CFTypeRef CalRelationGetRelatedObject(uint64_t a1)
{
  _EnsureLoaded_0(a1);
  return CalRelationRawGetRelatedObject(a1);
}

BOOL _CalStoreIsEnabled(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() == 0;
}

BOOL _CalCalendarGetFlag(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return (CPRecordGetProperty() & a2) != 0;
}

CFTypeRef _CalCalendarGetStore(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

uint64_t CalEntityGetID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t CalEntityGetType(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Type;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Type = _CalEntityGetType(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Type;
}

void *CalGetRecordLock()
{
  void *v0;
  uint64_t Context;

  v0 = &__GlobalLock;
  if (CPRecordGetStore())
  {
    Context = CPRecordStoreGetContext();
    if (Context)
      return (void *)(Context + 80);
  }
  return v0;
}

uint64_t _CalEntityGetType(const void *a1)
{
  uint64_t result;

  result = CalEntityGetRawType(a1);
  if ((int)result > 100)
  {
    if ((_DWORD)result == 101)
    {
      return _CalCalendarItemGetEntityType((uint64_t)a1);
    }
    else if ((_DWORD)result == 102)
    {
      return _CalNotificationGetEntityType((uint64_t)a1);
    }
  }
  else if ((_DWORD)result)
  {
    if ((_DWORD)result == 100)
      return _CalParticipantGetEntityType((uint64_t)a1);
  }
  else
  {
    CPRecordGetClass();
    CFGetTypeID(a1);
    CFLog();
    return 0;
  }
  return result;
}

uint64_t CalEntityGetRawType(const void *a1)
{
  CFTypeID v1;
  void *v3;
  NSObject *v4;
  int v5;
  uint64_t TypeID;
  __int16 v7;
  CFTypeID v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = CFGetTypeID(a1);
    if (CPRecordGetTypeID() == v1)
      return *(unsigned int *)(CPRecordGetClass() + 64);
    v3 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v4 = v3;
      v5 = 134218240;
      TypeID = CPRecordGetTypeID();
      v7 = 2048;
      v8 = v1;
      _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_ERROR, "typeId != CPRecordGetTypeID(), CPRecordGetTypeID(): %lu, typeId: %lu", (uint8_t *)&v5, 0x16u);

    }
  }
  return 0xFFFFFFFFLL;
}

void _EnsureLoaded(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex v3;
  __CFArray *MutableCopy;
  const __CFNumber *ValueAtIndex;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  CFStringRef v12;
  CFStringRef v13;
  uint64_t Store;
  const os_unfair_lock *Context;
  const __CFArray *v16;
  const __CFArray *v17;
  CFIndex Count;
  CFIndex v19;
  CFIndex v20;
  CFIndex i;
  __CFSet *v22;
  const void *v23;
  const __CFSet *v24;
  const __CFSet *v25;
  uint64_t v26;
  uint64_t v27;
  int valuePtr;
  CFRange v29;

  if (*(_QWORD *)(a1 + 80))
    return;
  if (CPRecordGetID() == -1 || (v2 = *(const __CFArray **)(a1 + 32)) == 0 || CFArrayGetCount(v2) <= 0)
  {
    *(_QWORD *)(a1 + 80) = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
    goto LABEL_37;
  }
  v3 = 0;
  MutableCopy = 0;
  do
  {
    valuePtr = -1;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v3);
    CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 80);
    if (*(_UNKNOWN **)(v6 + 40 * valuePtr + 16) != &kCalRelationMethods)
    {
      v26 = *(_QWORD *)CPRecordGetPropertyDescriptor();
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 80) + 40 * valuePtr);
LABEL_8:
      CFLog();
      goto LABEL_30;
    }
    v7 = *(int **)(v6 + 40 * valuePtr + 32);
    if (!v7)
      goto LABEL_8;
    v8 = *v7;
    if (v8 == -1)
      _EnsureLoaded_cold_1();
    v9 = *(_QWORD *)(v6 + 40 * v8);
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(_DWORD *)(a1 + 48);
    if (v10)
    {
      if (v11 == -1)
        v12 = CFStringCreateWithFormat(0, 0, CFSTR("WHERE %s = ? AND (%@)"), v9, v10, v27);
      else
        v12 = CFStringCreateWithFormat(0, 0, CFSTR("WHERE %s = ? AND entity_type = ? AND (%@)"), v9, v10, v27);
    }
    else if (v11 == -1)
    {
      v12 = CFStringCreateWithFormat(0, 0, CFSTR("WHERE %s = ?"), v9, v26, v27);
    }
    else
    {
      v12 = CFStringCreateWithFormat(0, 0, CFSTR("WHERE %s = ? AND entity_type = ?"), v9, v26, v27);
    }
    v13 = v12;
    Store = CPRecordGetStore();
    if (CDBLockingAssertionsEnabled)
    {
      if (Store)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
    v16 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
    v17 = v16;
    if (!MutableCopy && v16)
    {
      Count = CFArrayGetCount(v16);
      MutableCopy = CFArrayCreateMutableCopy(0, Count, v17);
LABEL_28:
      CFRelease(v17);
      goto LABEL_29;
    }
    if (v16)
    {
      v29.length = CFArrayGetCount(v16);
      v29.location = 0;
      CFArrayAppendArray(MutableCopy, v17, v29);
      goto LABEL_28;
    }
LABEL_29:
    CFRelease(v13);
LABEL_30:
    ++v3;
  }
  while (CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) > v3);
  *(_QWORD *)(a1 + 80) = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
  if (MutableCopy)
  {
    v19 = CFArrayGetCount(MutableCopy);
    if (v19 >= 1)
    {
      v20 = v19;
      for (i = 0; i != v20; ++i)
      {
        v22 = *(__CFSet **)(a1 + 80);
        v23 = CFArrayGetValueAtIndex(MutableCopy, i);
        CFSetAddValue(v22, v23);
      }
    }
    CFRelease(MutableCopy);
  }
LABEL_37:
  v24 = *(const __CFSet **)(a1 + 88);
  if (v24)
    CFSetApplyFunction(v24, (CFSetApplierFunction)_AddItemToSet, *(void **)(a1 + 80));
  v25 = *(const __CFSet **)(a1 + 96);
  if (v25)
    CFSetApplyFunction(v25, (CFSetApplierFunction)_RemoveItemFromSet, *(void **)(a1 + 80));
}

void _EnsureLoaded_0(uint64_t a1)
{
  BOOL v2;
  const os_unfair_lock *Context;
  uint64_t Store;
  BOOL v5;
  const os_unfair_lock *v6;
  const void *InstanceOfClassWithUID;

  if (!CalRelationRawGetRelatedObject(a1))
  {
    if (CDBLockingAssertionsEnabled)
      v2 = *(_QWORD *)(a1 + 16) == 0;
    else
      v2 = 1;
    if (!v2)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
    if ((int)CPRecordGetProperty() >= 1)
    {
      Store = CPRecordGetStore();
      if (CDBLockingAssertionsEnabled)
        v5 = Store == 0;
      else
        v5 = 1;
      if (!v5)
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
      InstanceOfClassWithUID = (const void *)CPRecordStoreGetInstanceOfClassWithUID();
      if (InstanceOfClassWithUID)
        CalRelationSetAndLoadRawRelatedObject(a1, InstanceOfClassWithUID);
    }
  }
}

CFTypeRef CalRelationRawGetRelatedObject(uint64_t a1)
{
  pthread_mutex_t *v2;
  const void *v3;
  CFTypeRef v4;
  CFTypeRef v5;
  NSObject *v6;
  uint8_t v8[16];

  if (a1)
  {
    v2 = (pthread_mutex_t *)(a1 + 72);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
    v3 = *(const void **)(a1 + 56);
    if (v3)
    {
      v4 = CFRetain(v3);
      v5 = CFAutorelease(v4);
    }
    else
    {
      v5 = 0;
    }
    pthread_mutex_unlock(v2);
  }
  else
  {
    v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "Given 'relation' is NULL.  Will not get related object reference.", v8, 2u);
    }
    return 0;
  }
  return v5;
}

uint64_t _DayAndOccurrenceCountLoadHandler(uint64_t a1, CFMutableArrayRef *a2)
{
  double v4;
  CFDateRef v5;
  CFNumberRef v6;
  __CFDictionary *Mutable;
  int valuePtr;

  v4 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 0);
  valuePtr = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  if (valuePtr)
  {
    v5 = CFDateCreate(0, v4);
    v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(Mutable, CFSTR("day"), v5);
    CFDictionaryAddValue(Mutable, CFSTR("occurrenceCount"), v6);
    CFArrayAppendValue(*a2, Mutable);
    CFRelease(Mutable);
    CFRelease(v5);
    CFRelease(v6);
  }
  return 0;
}

uint64_t _CalCalendarItemGetEntityType(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if ((Property - 4) <= 0xFFFFFFFD)
  {
    CPRecordGetID();
    CFLog();
  }
  return Property;
}

CFMutableArrayRef CalToManyRelationCopyObjects(uint64_t a1)
{
  CFMutableArrayRef Mutable;

  _EnsureLoaded(a1);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
    CFSetApplyFunction(*(CFSetRef *)(a1 + 80), (CFSetApplierFunction)_AddItemToArray, Mutable);
  return Mutable;
}

CFMutableArrayRef _CalStoreCopyCalendars(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

void CalRelationSetAndLoadRawRelatedObject(uint64_t a1, const void *a2)
{
  id v4;

  CalRelationRawSetRelatedObject(a1, a2);
  if (!*(_BYTE *)(a1 + 40))
  {
    CDBGetCommonEntityFunctionalityHandler(a2, 1, 0);
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addDestructionObserver:", a1);

  }
}

void CalRelationRawSetRelatedObject(uint64_t a1, CFTypeRef a2)
{
  pthread_mutex_t *v4;
  CFTypeRef v5;
  NSObject *v6;
  uint8_t v7[16];

  if (a1)
  {
    v4 = (pthread_mutex_t *)(a1 + 72);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
    v5 = *(CFTypeRef *)(a1 + 56);
    if (v5 != a2)
    {
      if (*(_BYTE *)(a1 + 40))
      {
        if (a2)
          a2 = CFRetain(a2);
        if (v5)
          CFRelease(v5);
      }
      *(_QWORD *)(a1 + 56) = a2;
    }
    pthread_mutex_unlock(v4);
  }
  else
  {
    v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "Given 'relation' is NULL.  Will not set related object reference.", v7, 2u);
    }
  }
}

const void *_CalDatabaseCopyOfAllStores(uint64_t a1)
{
  const void *v1;
  uint64_t RecordStore;
  const os_unfair_lock *Context;

  v1 = *(const void **)(a1 + 96);
  if (v1)
    goto LABEL_9;
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled && RecordStore != 0)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v1 = (const void *)CPRecordStoreCopyAllInstancesOfClass();
  *(_QWORD *)(a1 + 96) = v1;
  if (v1)
LABEL_9:
    CFRetain(v1);
  return v1;
}

id CDBGetCommonEntityFunctionalityHandler(const void *a1, int a2, int a3)
{
  os_unfair_lock_s *RecordLock;
  NSObject *v7;
  uint64_t RawType;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  id v16;
  const os_unfair_lock *Context;
  void *Property;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a3)
    {
      RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
      os_unfair_lock_lock(RecordLock);
    }
    else
    {
      RecordLock = 0;
    }
    RawType = CalEntityGetRawType(a1);
    v10 = RawType;
    if ((int)RawType <= 99)
    {
      switch((int)RawType)
      {
        case -1:
          v15 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v19) = 0;
            _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_ERROR, "Could not find the raw type of the given entity.  Will not get a common entity functionality handler property ID.", (uint8_t *)&v19, 2u);
          }
          goto LABEL_19;
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
          goto LABEL_20;
        default:
          goto LABEL_13;
      }
    }
    if ((_DWORD)RawType == 100 || (_DWORD)RawType == 101 || (_DWORD)RawType == 102)
    {
LABEL_20:
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
        Property = (void *)CPRecordGetProperty();
      }
      else
      {
        Property = (void *)CPRecordGetCachedProperty();
      }
      v16 = Property;
    }
    else
    {
LABEL_13:
      v11 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v12 = (void *)MEMORY[0x1E0CB37E8];
        v13 = v11;
        objc_msgSend(v12, "numberWithInt:", v10);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138412290;
        v20 = v14;
        _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "Could not find the property ID for the entity with raw type [%@].  Will not get a common entity functionality handler.", (uint8_t *)&v19, 0xCu);

      }
LABEL_19:
      v16 = 0;
    }
    if (a3)
    {
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner(RecordLock);
      os_unfair_lock_unlock(RecordLock);
    }
    return v16;
  }
  else
  {
    v7 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v19) = 0;
      _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_ERROR, "NULL 'entity' given.  Will not acquire a common entity functionality handler.", (uint8_t *)&v19, 2u);
    }
    return 0;
  }
}

uint64_t _CalParticipantGetEntityType(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if ((Property - 9) <= 0xFFFFFFFD)
    CFLog();
  return Property;
}

uint64_t CalEventGetJunkStatus(uint64_t a1)
{
  return _CalEventGetJunkStatusWhileLocked(a1, 0);
}

uint64_t CalToManyRelationGetTypeID()
{
  pthread_once(&__CalToManyRelationRegisterOnce, (void (*)(void))CalToManyRelationRegisterClass);
  return __CalToManyRelationTypeID;
}

uint64_t CalEventOccurrenceGetTypeID()
{
  pthread_once(&__CalEventOccurrenceRegisterOnce, (void (*)(void))CalEventOccurrenceRegisterClass);
  return __CalEventOccurrenceTypeID;
}

uint64_t _DayAndOccurrenceLoadHandler(uint64_t a1, CFMutableArrayRef *a2)
{
  double v4;
  int v5;
  double v6;
  int v7;
  double v8;
  CFDateRef v9;
  CFNumberRef v10;
  CFDateRef v11;
  CFDateRef v12;
  CFIndex v13;
  NSObject *v14;
  CFDictionaryRef v15;
  int valuePtr;
  void *values[3];
  uint8_t buf[16];
  const __CFString *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!*a2)
    *a2 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v4 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  valuePtr = v5;
  v6 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 2);
  v7 = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), 3);
  v8 = 0.0;
  if (v7 != 5)
    v8 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 3);
  if (v5 == -1)
  {
    v14 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v6;
      _os_log_impl(&dword_1A5CCB000, v14, OS_LOG_TYPE_ERROR, "Skipping invalid entry in occurrence cache occurring at %f with eventID -1", buf, 0xCu);
    }
  }
  else
  {
    v9 = CFDateCreate(0, v4);
    v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v11 = CFDateCreate(0, v6);
    if (v7 == 5)
    {
      v12 = 0;
      v13 = 2;
    }
    else
    {
      v12 = CFDateCreate(0, v8);
      v13 = 3;
    }
    *(_OWORD *)buf = xmmword_1E4F8EF00;
    v20 = CFSTR("nextReminderDate");
    values[0] = v10;
    values[1] = v11;
    values[2] = v12;
    v15 = CFDictionaryCreate(0, (const void **)buf, (const void **)values, v13, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFArrayAppendValue(*a2, v15);
    CFRelease(v15);
    CFRelease(v11);
    if (v12)
      CFRelease(v12);
    CFRelease(v10);
    CFRelease(v9);
  }
  return 0;
}

void _CalLoadRelation(uint64_t a1, int a2)
{
  uint64_t PropertyDescriptor;
  uint64_t v5;
  CFIndex v6;
  __CFArray *Mutable;
  uint64_t v8;
  uint64_t v9;
  CFNumberRef v10;
  const __CFString *v11;
  const os_unfair_lock *v12;
  const char *v13;
  const void *v14;
  const os_unfair_lock *Context;

  PropertyDescriptor = CPRecordGetPropertyDescriptor();
  if (PropertyDescriptor)
  {
    if (*(_UNKNOWN **)(PropertyDescriptor + 16) == &kCalRelationMethods)
    {
      v5 = *(_QWORD *)(PropertyDescriptor + 32);
      if (v5)
      {
        v6 = *(unsigned int *)(v5 + 32);
        if ((int)v6 < 1)
        {
          Mutable = 0;
        }
        else
        {
          Mutable = CFArrayCreateMutable(0, v6, MEMORY[0x1E0C9B378]);
          if (*(int *)(v5 + 32) >= 1)
          {
            v8 = 0;
            v9 = 0;
            do
            {
              v10 = CFNumberCreate(0, kCFNumberIntType, (const void *)(*(_QWORD *)(v5 + 24) + v8));
              CFArrayAppendValue(Mutable, v10);
              CFRelease(v10);
              ++v9;
              v8 += 4;
            }
            while (v9 < *(int *)(v5 + 32));
          }
        }
        if (*(_DWORD *)v5 == -1)
        {
          v13 = *(const char **)(v5 + 8);
          if (v13)
            v11 = CFStringCreateWithCString(0, v13, 0x8000100u);
          else
            v11 = 0;
          v14 = (const void *)CalToManyRelationCreateWithEntityTypeAndFilter(a1, a2, *(_QWORD *)(v5 + 16), Mutable, *(_DWORD *)(v5 + 4), v11);
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (Context)
                  os_unfair_lock_assert_owner(Context + 20);
              }
            }
          }
          CPRecordInitializeProperty();
          CFRelease(v14);
          if (!v11)
            goto LABEL_28;
        }
        else
        {
          v11 = (const __CFString *)CalRelationCreate(a1, a2, *(_QWORD *)(v5 + 16), Mutable, *(_BYTE *)(v5 + 36), *(_QWORD *)(v5 + 40));
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v12)
                  os_unfair_lock_assert_owner(v12 + 20);
              }
            }
          }
          CPRecordInitializeProperty();
        }
        CFRelease(v11);
LABEL_28:
        if (Mutable)
          CFRelease(Mutable);
      }
    }
  }
}

uint64_t CalRelationCreate(uint64_t a1, int a2, uint64_t a3, const __CFArray *a4, char a5, uint64_t a6)
{
  uint64_t Instance;
  _DWORD *v13;
  CFArrayRef Copy;

  pthread_once(&__CalRelationRegisterOnce, (void (*)(void))CalRelationRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  v13 = *(_DWORD **)(CPRecordGetPropertyDescriptor() + 32);
  *(_QWORD *)(Instance + 16) = a1;
  LODWORD(v13) = *v13;
  *(_DWORD *)(Instance + 24) = a2;
  *(_DWORD *)(Instance + 28) = (_DWORD)v13;
  *(_QWORD *)(Instance + 48) = a3;
  *(_QWORD *)(Instance + 56) = 0;
  *(_BYTE *)(Instance + 40) = a5;
  *(_QWORD *)(Instance + 64) = a6;
  pthread_mutex_init((pthread_mutex_t *)(Instance + 72), 0);
  Copy = 0;
  if (a4)
    Copy = CFArrayCreateCopy(0, a4);
  *(_QWORD *)(Instance + 32) = Copy;
  return Instance;
}

uint64_t CalToManyRelationCreateWithEntityTypeAndFilter(uint64_t a1, int a2, uint64_t a3, const __CFArray *a4, int a5, const __CFString *a6)
{
  uint64_t Instance;
  CFStringRef Copy;
  CFArrayRef v14;

  pthread_once(&__CalToManyRelationRegisterOnce, (void (*)(void))CalToManyRelationRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = a1;
  *(_DWORD *)(Instance + 24) = a2;
  *(_QWORD *)(Instance + 56) = a3;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_QWORD *)(Instance + 96) = 0;
  *(_DWORD *)(Instance + 48) = a5;
  Copy = 0;
  if (a6)
    Copy = CFStringCreateCopy(0, a6);
  *(_QWORD *)(Instance + 40) = Copy;
  v14 = 0;
  if (a4)
    v14 = CFArrayCreateCopy(0, a4);
  *(_QWORD *)(Instance + 32) = v14;
  return Instance;
}

void CalEventOccurrenceDestroy(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 16));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t _CompareCalEventOccurrences(uint64_t a1, uint64_t a2)
{
  uint64_t Event;
  uint64_t v5;
  double Date;
  double v7;
  CFComparisonResult v8;
  _BOOL4 IsAllDay;
  _BOOL4 v11;
  uint64_t Calendar;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef Store;
  CFTypeRef v17;
  unsigned int Type;
  unsigned int v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int DisplayOrder;
  int v26;
  int v27;
  int v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;

  if (!a1)
    return -1;
  if (!a2)
    return 1;
  Event = CalEventOccurrenceGetEvent(a1);
  v5 = CalEventOccurrenceGetEvent(a2);
  Date = CalEventOccurrenceGetDate(a1);
  v7 = CalEventOccurrenceGetDate(a2);
  if (Date < v7)
    return -1;
  if (Date > v7)
    return 1;
  IsAllDay = _CalEventIsAllDay(Event);
  v11 = _CalEventIsAllDay(v5);
  if (IsAllDay && !v11)
    return -1;
  if (!IsAllDay && v11)
    return 1;
  Calendar = _CalEventGetCalendar(Event);
  v13 = _CalEventGetCalendar(v5);
  if (Calendar | v13)
    v14 = -1;
  else
    v14 = 0;
  if (Calendar)
    v8 = kCFCompareGreaterThan;
  else
    v8 = v14;
  if (!Calendar)
    goto LABEL_52;
  v15 = v13;
  if (!v13)
    goto LABEL_52;
  Store = _CalCalendarGetStore(Calendar);
  v17 = _CalCalendarGetStore(v15);
  Type = _CalStoreGetType((uint64_t)Store);
  v19 = _CalStoreGetType((uint64_t)v17);
  if (Type == v19)
  {
    v20 = (void *)_CalStoreCopyUUID((uint64_t)Store);
    v21 = (const void *)_CalStoreCopyUUID((uint64_t)v17);
    v22 = objc_msgSend(v20, "compare:", v21);
    if (v20)
      CFRelease(v20);
    if (v21)
      CFRelease(v21);
    if (v22)
    {
      if (v22 == -1)
        return -1;
      else
        return 1;
    }
    DisplayOrder = _CalCalendarGetDisplayOrder(Calendar);
    v26 = _CalCalendarGetDisplayOrder(v15);
    if (DisplayOrder == -1)
      v27 = 0x7FFFFFFF;
    else
      v27 = DisplayOrder;
    if (v26 == -1)
      v28 = 0x7FFFFFFF;
    else
      v28 = v26;
    if (v27 < v28)
      return -1;
    if (v27 <= v28)
    {
      v29 = (const __CFString *)_CalCalendarCopyTitle(Calendar);
      v30 = (const __CFString *)_CalCalendarCopyTitle(v15);
      v31 = v30;
      if (v29 && v30)
      {
        v8 = CFStringCompare(v29, v30, 0);
        goto LABEL_50;
      }
      if (v29)
      {
        v8 = kCFCompareLessThan;
LABEL_50:
        CFRelease(v29);
        if (!v31)
          goto LABEL_52;
        goto LABEL_51;
      }
      v8 = kCFCompareGreaterThan;
      if (v30)
LABEL_51:
        CFRelease(v31);
LABEL_52:
      if (v8)
        return v8;
      v32 = _CalEventCopySummary(Event);
      v33 = _CalEventCopySummary(v5);
      if (!(v32 | v33))
        return 0;
      v34 = (const void *)v33;
      if (!v32 && v33)
      {
        v8 = kCFCompareLessThan;
        goto LABEL_64;
      }
      if (!v32 || v33)
      {
        v8 = CFStringCompare((CFStringRef)v32, (CFStringRef)v33, 0x81uLL);
        if (!v32)
          goto LABEL_63;
      }
      else
      {
        v8 = kCFCompareGreaterThan;
      }
      CFRelease((CFTypeRef)v32);
LABEL_63:
      if (!v34)
        return v8;
LABEL_64:
      CFRelease(v34);
      return v8;
    }
    return 1;
  }
  if (Type > 5)
    v23 = 1;
  else
    v23 = dword_1A5DBB0AC[Type];
  if (v19 > 5)
    v24 = 1;
  else
    v24 = dword_1A5DBB0AC[v19];
  if (v23 < v24)
    return -1;
  else
    return 1;
}

uint64_t CalEventOccurrenceGetEvent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

double CalEventOccurrenceGetDate(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t CalDatabaseSetIsUnitTesting(uint64_t result, char a2)
{
  *(_BYTE *)(result + 272) = a2;
  return result;
}

uint64_t CalCalendarItemGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  __CFString *v9;
  int v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  int v14;
  __CFString *v15;
  int v16;
  __CFString *v17;
  int v18;
  __CFString *v19;
  int v20;
  __CFString *v21;
  int v22;
  __CFString *v23;
  int v24;
  __CFString *v25;
  int v26;
  __CFString *v27;
  int v28;
  __CFString *v29;
  int v30;
  __CFString *v31;
  int v32;
  __CFString *v33;
  int v34;
  __CFString *v35;
  int v36;
  __CFString *v37;
  int v38;
  __CFString *v39;
  int v40;
  __CFString *v41;
  int v42;
  __CFString *v43;
  int v44;
  __CFString *v45;
  int v46;
  __CFString *v47;
  int v48;
  __CFString *v49;
  int v50;
  __CFString *v51;
  int v52;
  __CFString *v53;
  int v54;
  __CFString *v55;
  int v56;
  __CFString *v57;
  int v58;
  __CFString *v59;
  int v60;
  __CFString *v61;
  int v62;
  __CFString *v63;
  int v64;
  __CFString *v65;
  int v66;
  __CFString *v67;
  int v68;
  __CFString *v69;
  int v70;
  __CFString *v71;
  int v72;
  __CFString *v73;
  int v74;
  __CFString *v75;
  int v76;
  __CFString *v77;
  int v78;
  __CFString *v79;
  int v80;
  __CFString *v81;
  int v82;
  __CFString *v83;
  int v84;
  __CFString *v85;
  int v86;
  __CFString *v87;
  int v88;
  __CFString *v89;
  int v90;
  __CFString *v91;
  int v92;
  __CFString *v93;
  int v94;
  __CFString *v95;
  int v96;
  __CFString *v97;
  int v98;
  __CFString *v99;
  int v100;
  __CFString *v101;
  int v102;
  __CFString *v103;
  int v104;
  __CFString *v105;
  int v106;
  __CFString *v107;
  int v108;
  __CFString *v109;
  int v110;
  __CFString *v111;
  int v112;
  __CFString *v113;
  int v114;
  __CFString *v115;
  int v116;
  __CFString *v117;
  int v118;
  __CFString *v119;
  int v120;
  __CFString *v121;
  int v122;
  __CFString *v123;
  int v124;
  __CFString *v125;
  int v126;
  __CFString *v127;
  int v128;
  __CFString *v129;
  int v130;
  __CFString *v131;
  int v132;
  __CFString *v133;
  int v134;
  __CFString *v135;
  int v136;
  __CFString *v137;
  int v138;
  __CFString *v139;
  int v140;
  __CFString *v141;
  int v142;
  __CFString *v143;
  int v144;
  __CFString *v145;
  int v146;
  __CFString *v147;
  int v148;
  __CFString *v149;
  int v150;
  __CFString *v151;
  int v152;
  __CFString *v153;
  int v154;
  __CFString *v155;
  int v156;
  __CFString *v157;
  int v158;
  __CFString *v159;
  int v160;
  __CFString *v161;
  int v162;
  __CFString *v163;
  int v164;
  __CFString *v165;
  int v166;
  __CFString *v167;
  int v168;
  __CFString *v169;
  int v170;
  __CFString *v171;
  int v172;
  __CFString *v173;
  int v174;
  __CFString *v175;
  int v176;
  __CFString *v177;
  int v178;
  __CFString *v179;
  int v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalCalendarItemGetPropertyIDWithPropertyName_sPropDict;
  if (!CalCalendarItemGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalCalendarItemGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalCalendarItemGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("UUID");
      v6 = 34;
      v7 = CFSTR("externalID");
      v8 = 24;
      v9 = CFSTR("unlocalizedTitle");
      v10 = 0;
      v11 = CFSTR("notes");
      v12 = 3;
      v13 = CFSTR("startDateRaw");
      v14 = 4;
      v15 = CFSTR("isAllDay");
      v16 = 8;
      v17 = CFSTR("uniqueID");
      v18 = 26;
      v19 = CFSTR("URLString");
      v20 = 18;
      v21 = CFSTR("sequenceNumber");
      v22 = 20;
      v23 = CFSTR("hasRecurrenceRules");
      v24 = 32;
      v25 = CFSTR("hasAttendees");
      v26 = 33;
      v27 = CFSTR("priority");
      v28 = 36;
      v29 = CFSTR("creationDate");
      v30 = 41;
      v31 = CFSTR("actionString");
      v32 = 42;
      v33 = CFSTR("lastModifiedDate");
      v34 = 19;
      v35 = CFSTR("externalScheduleID");
      v36 = 27;
      v37 = CFSTR("externalModificationTag");
      v38 = 25;
      v39 = CFSTR("externalData");
      v40 = 28;
      v41 = CFSTR("phantomMaster");
      v42 = 53;
      v43 = CFSTR("participationStatusModifiedDate");
      v44 = 54;
      v45 = CFSTR("calendarScale");
      v46 = 55;
      v47 = CFSTR("startTimeZoneName");
      v48 = 5;
      v49 = CFSTR("endTimeZoneName");
      v50 = 7;
      v51 = CFSTR("structuredData");
      v52 = 67;
      v53 = CFSTR("localStructuredData");
      v54 = 68;
      v55 = CFSTR("suppressNotificationForChanges");
      v56 = 124;
      v57 = CFSTR("travelTime");
      v58 = 56;
      v59 = CFSTR("travelAdvisoryBehavior");
      v60 = 57;
      v61 = CFSTR("status");
      v62 = 14;
      v63 = CFSTR("availability");
      v64 = 16;
      v65 = CFSTR("privacyLevel");
      v66 = 17;
      v67 = CFSTR("originalStartDate");
      v68 = 11;
      v69 = CFSTR("birthdayID");
      v70 = 21;
      v71 = CFSTR("responseComment");
      v72 = 29;
      v73 = CFSTR("proposedStartDate");
      v74 = 62;
      v75 = CFSTR("canForward");
      v76 = 63;
      v77 = CFSTR("locationPredictionState");
      v78 = 64;
      v79 = CFSTR("firedTTL");
      v80 = 65;
      v81 = CFSTR("disallowProposeNewTime");
      v82 = 66;
      v83 = CFSTR("junkStatus");
      v84 = 69;
      v85 = CFSTR("conferenceURLString");
      v86 = 70;
      v87 = CFSTR("birthdayContactIdentifier");
      v88 = 71;
      v89 = CFSTR("recurrenceSet");
      v90 = 72;
      v91 = CFSTR("birthdayContactName");
      v92 = 74;
      v93 = CFSTR("endDateRaw");
      v94 = 6;
      v95 = CFSTR("invitationStatus");
      v96 = 15;
      v97 = CFSTR("specialDayString");
      v98 = 125;
      v99 = CFSTR("creatorIdentityString");
      v100 = 116;
      v101 = CFSTR("creatorTeamIdentityString");
      v102 = 117;
      v103 = CFSTR("hasNotes");
      v104 = 119;
      v105 = CFSTR("selfParticipantStatusRaw");
      v106 = 120;
      v107 = CFSTR("sharedItemCreatedDate");
      v108 = 47;
      v109 = CFSTR("sharedItemCreatedTimeZoneName");
      v110 = 48;
      v111 = CFSTR("sharedItemModifiedDate");
      v112 = 49;
      v113 = CFSTR("sharedItemModifiedTimeZoneName");
      v114 = 50;
      v115 = CFSTR("defaultAlarmWasDeleted");
      v116 = 52;
      v117 = CFSTR("modifiedProperties");
      v118 = 22;
      v119 = CFSTR("conferenceURLDetectedString");
      v120 = 115;
      v121 = CFSTR("externalTrackingStatus");
      v122 = 23;
      v123 = CFSTR("calendar");
      v124 = 96;
      v125 = CFSTR("organizer");
      v126 = 83;
      v127 = CFSTR("selfAttendee");
      v128 = 85;
      v129 = CFSTR("originalItem");
      v130 = 95;
      v131 = CFSTR("allAlarmsSet");
      v132 = 78;
      v133 = CFSTR("recurrenceRulesSet");
      v134 = 80;
      v135 = CFSTR("attendeesRaw");
      v136 = 81;
      v137 = CFSTR("detachedItems");
      v138 = 94;
      v139 = CFSTR("ekExceptionDates");
      v140 = 79;
      v141 = CFSTR("flags");
      v142 = 73;
      v143 = CFSTR("attachmentsSet");
      v144 = 98;
      v145 = CFSTR("structuredLocationWithoutPrediction");
      v146 = 99;
      v147 = CFSTR("clientLocation");
      v148 = 100;
      v149 = CFSTR("travelStartLocation");
      v150 = 101;
      v151 = CFSTR("endLocation");
      v152 = 102;
      v153 = CFSTR("image");
      v154 = 106;
      v155 = CFSTR("color");
      v156 = 118;
      v157 = CFSTR("sharedItemCreatedByDisplayName");
      v158 = 107;
      v159 = CFSTR("sharedItemCreatedByAddressString");
      v160 = 108;
      v161 = CFSTR("sharedItemCreatedByFirstName");
      v162 = 111;
      v163 = CFSTR("sharedItemCreatedByLastName");
      v164 = 112;
      v165 = CFSTR("sharedItemModifiedByDisplayName");
      v166 = 109;
      v167 = CFSTR("sharedItemModifiedByAddressString");
      v168 = 110;
      v169 = CFSTR("sharedItemModifiedByFirstName");
      v170 = 113;
      v171 = CFSTR("sharedItemModifiedByLastName");
      v172 = 114;
      v173 = CFSTR("actions");
      v174 = 93;
      v175 = CFSTR("invitationChangedProperties");
      v176 = 51;
      v177 = CFSTR("suggestionInfo");
      v178 = 104;
      v179 = CFSTR("syncError");
      v180 = 123;
      CalCalendarItemGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 88);
      for (i = 1392; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalCalendarItemGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalCalendarItemGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5CD2BDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 1392; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t CalCalendarGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t _CalDatabaseRollbackHook(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 328), "removeAllObjects");
}

void sub_1A5CD2E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL CalStoreIsFacebook(uint64_t a1)
{
  return CalStoreGetFlag(a1, 64);
}

uint64_t CalCalendarItemCopySummary(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalEventGetJunkStatusWhileLocked(uint64_t a1, char a2)
{
  os_unfair_lock_s *RecordLock;
  os_unfair_lock_s *v5;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  v5 = RecordLock;
  if ((a2 & 1) == 0)
    os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if ((a2 & 1) == 0)
  {
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v5);
    os_unfair_lock_unlock(v5);
  }
  return Property;
}

void _CalLoadLazyString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *v5;
  uint64_t v6;
  _QWORD *Class;
  CFStringRef v8;
  const os_unfair_lock *Context;
  uint64_t v10;
  uint64_t **v11;
  sqlite3_stmt *v12;
  int ID;
  uint64_t v14;
  const os_unfair_lock *v15;
  uint64_t v16;
  const void *v17;
  const os_unfair_lock *v18;
  uint64_t v19;
  const os_unfair_lock *v20;

  if (a3)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = *(_QWORD *)CPRecordGetPropertyDescriptor();
    Class = (_QWORD *)CPRecordGetClass();
    v8 = CFStringCreateWithFormat(v5, 0, CFSTR("SELECT %s FROM %s WHERE ROWID = ?"), v6, *Class);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a3)
      {
        if (*(_QWORD *)(*(_QWORD *)a3 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    v10 = CPSqliteConnectionStatementForSQL();
    if (v10)
    {
      v11 = (uint64_t **)v10;
      v12 = *(sqlite3_stmt **)(v10 + 8);
      ID = CPRecordGetID();
      sqlite3_bind_int(v12, 1, ID);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v11)
        {
          v14 = **v11;
          if (v14)
          {
            if (*(_QWORD *)(v14 + 104))
            {
              v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v15)
                os_unfair_lock_assert_owner(v15 + 20);
            }
          }
        }
      }
      v16 = CPSqliteStatementCopyStringResult();
      if (v16)
      {
        v17 = (const void *)v16;
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v18)
                os_unfair_lock_assert_owner(v18 + 20);
            }
          }
        }
        CPRecordInitializeProperty();
        CFRelease(v17);
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*v11)
        {
          v19 = **v11;
          if (v19)
          {
            if (*(_QWORD *)(v19 + 104))
            {
              v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20)
                os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    if (v8)
      CFRelease(v8);
  }
}

uint64_t CalEventOccurrenceCreateForInitialOccurrence(const void *a1)
{
  return CalEventOccurrenceCreateForInitialOccurrenceWithTimeZone(a1, 0);
}

CFArrayRef CalDatabaseCopyOfAllNotifiableEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  return CalDatabaseCopyOfAllNotifiableOrRepliedEventsInStore(a1, a2, 0);
}

const __CFString *CalEntityTypeGetName(int a1)
{
  const __CFString *result;
  const __CFString *v3;
  const __CFString *v4;

  result = 0;
  if (a1 > 99)
  {
    v3 = CFSTR("CalendarItem");
    v4 = CFSTR("Notification");
    if (a1 != 102)
      v4 = 0;
    if (a1 != 101)
      v3 = v4;
    if (a1 == 100)
      return CFSTR("Participant");
    else
      return v3;
  }
  else
  {
    switch(a1)
    {
      case -1:
        result = CFSTR("Undefined");
        break;
      case 1:
        result = CFSTR("Calendar");
        break;
      case 2:
        result = CFSTR("Event");
        break;
      case 3:
        result = CFSTR("Task");
        break;
      case 4:
        result = CFSTR("Alarm");
        break;
      case 5:
        result = CFSTR("RecurrenceRule");
        break;
      case 6:
        result = CFSTR("Source");
        break;
      case 7:
        result = CFSTR("Attendee");
        break;
      case 8:
        result = CFSTR("Organizer");
        break;
      case 9:
        result = CFSTR("EventAction");
        break;
      case 10:
        result = CFSTR("ExceptionDate");
        break;
      case 11:
        result = CFSTR("Attachment");
        break;
      case 12:
        result = CFSTR("Category");
        break;
      case 13:
        result = CFSTR("CategoryLink");
        break;
      case 14:
        result = CFSTR("Location");
        break;
      case 15:
        result = CFSTR("Sharee");
        break;
      case 16:
        result = CFSTR("InviteReplyNotification");
        break;
      case 17:
        result = CFSTR("ResourceChangeNotification");
        break;
      case 18:
        result = CFSTR("ResourceChange");
        break;
      case 19:
        result = CFSTR("SuggestionNotification");
        break;
      case 20:
        result = CFSTR("SuggestedEventInfo");
        break;
      case 21:
        result = CFSTR("Contact");
        break;
      case 23:
        result = CFSTR("Conference");
        break;
      case 24:
        result = CFSTR("Error");
        break;
      case 25:
        result = CFSTR("AttachmentFile");
        break;
      case 26:
        result = CFSTR("AuxDatabase");
        break;
      case 27:
        result = CFSTR("AuxDatabaseAccount");
        break;
      case 28:
        result = CFSTR("Image");
        break;
      case 29:
        result = CFSTR("Color");
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t _FastOccurrenceLoadHandler(uint64_t a1, uint64_t a2)
{
  int v4;
  double v5;
  double v6;
  _DWORD *v7;
  const void *v8;

  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 1);
  v6 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 2);
  if (v6 >= *(double *)(a2 + 16) && v5 < *(double *)(a2 + 24))
  {
    v7 = malloc_type_malloc(0x18uLL, 0x1000040D315E998uLL);
    v8 = v7;
    if (v7)
    {
      *v7 = v4;
      *((double *)v7 + 1) = v5;
      *((double *)v7 + 2) = v6;
    }
    else
    {
      CFLog();
    }
    if (*(_QWORD *)a2)
      CFSetAddValue(*(CFMutableSetRef *)a2, (const void *)v4);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), v8);
  }
  return 0;
}

void CDBLoadCommonEntityFunctionalityHandlerProperty(uint64_t a1)
{
  const os_unfair_lock *Context;
  CDBCommonEntityFunctionalityHandler *v3;

  v3 = objc_alloc_init(CDBCommonEntityFunctionalityHandler);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();

}

uint64_t CalAttendeeGetPropertyIDWithPropertyName(void *key)
{
  void *value;

  if (CalAttendeeGetPropertyIDWithPropertyName_onceToken != -1)
    dispatch_once(&CalAttendeeGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_27);
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalAttendeeGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t CalCalendarGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  __CFString *v9;
  int v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  int v14;
  __CFString *v15;
  int v16;
  __CFString *v17;
  int v18;
  __CFString *v19;
  int v20;
  __CFString *v21;
  int v22;
  __CFString *v23;
  int v24;
  __CFString *v25;
  int v26;
  __CFString *v27;
  int v28;
  __CFString *v29;
  int v30;
  __CFString *v31;
  int v32;
  __CFString *v33;
  int v34;
  __CFString *v35;
  int v36;
  __CFString *v37;
  int v38;
  __CFString *v39;
  int v40;
  __CFString *v41;
  int v42;
  __CFString *v43;
  int v44;
  __CFString *v45;
  int v46;
  __CFString *v47;
  int v48;
  __CFString *v49;
  int v50;
  __CFString *v51;
  int v52;
  __CFString *v53;
  int v54;
  __CFString *v55;
  int v56;
  __CFString *v57;
  int v58;
  __CFString *v59;
  int v60;
  __CFString *v61;
  int v62;
  __CFString *v63;
  int v64;
  __CFString *v65;
  int v66;
  __CFString *v67;
  int v68;
  __CFString *v69;
  int v70;
  __CFString *v71;
  int v72;
  __CFString *v73;
  int v74;
  __CFString *v75;
  int v76;
  __CFString *v77;
  int v78;
  __CFString *v79;
  int v80;
  __CFString *v81;
  int v82;
  __CFString *v83;
  int v84;
  __CFString *v85;
  int v86;
  __CFString *v87;
  int v88;
  __CFString *v89;
  int v90;
  __CFString *v91;
  int v92;
  __CFString *v93;
  int v94;
  __CFString *v95;
  int v96;
  __CFString *v97;
  int v98;
  __CFString *v99;
  int v100;
  __CFString *v101;
  int v102;
  __CFString *v103;
  int v104;
  __CFString *v105;
  int v106;
  __CFString *v107;
  int v108;
  __CFString *v109;
  int v110;
  __CFString *v111;
  int v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalCalendarGetPropertyIDWithPropertyName_sPropDict;
  if (!CalCalendarGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalCalendarGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalCalendarGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("UUID");
      v6 = 14;
      v7 = CFSTR("externalID");
      v8 = 8;
      v9 = CFSTR("unlocalizedTitle");
      v10 = 1;
      v11 = CFSTR("colorStringRaw");
      v12 = 3;
      v13 = CFSTR("symbolicColorName");
      v14 = 4;
      v15 = CFSTR("colorDisplayOnly");
      v16 = 5;
      v17 = CFSTR("externalModificationTag");
      v18 = 9;
      v19 = CFSTR("externalIDTag");
      v20 = 10;
      v21 = CFSTR("externalRepresentation");
      v22 = 11;
      v23 = CFSTR("displayOrder");
      v24 = 12;
      v25 = CFSTR("source");
      v26 = 50;
      v27 = CFSTR("flags");
      v28 = 2;
      v29 = CFSTR("allowedEntities");
      v30 = 7;
      v31 = CFSTR("sharedOwnerName");
      v32 = 15;
      v33 = CFSTR("sharedOwnerURLString");
      v34 = 16;
      v35 = CFSTR("cachedExternalInfoData");
      v36 = 17;
      v37 = CFSTR("sharingStatus");
      v38 = 18;
      v39 = CFSTR("sharingInvitationResponse");
      v40 = 19;
      v41 = CFSTR("publishURLString");
      v42 = 20;
      v43 = CFSTR("isPublished");
      v44 = 21;
      v45 = CFSTR("invitationStatus");
      v46 = 22;
      v47 = CFSTR("syncToken");
      v48 = 23;
      v49 = CFSTR("selfIdentityEmail");
      v50 = 27;
      v51 = CFSTR("selfIdentityPhoneNumber");
      v52 = 28;
      v53 = CFSTR("ownerIdentityEmail");
      v54 = 30;
      v55 = CFSTR("ownerIdentityPhoneNumber");
      v56 = 31;
      v57 = CFSTR("notes");
      v58 = 32;
      v59 = CFSTR("subcalAccountID");
      v60 = 34;
      v61 = CFSTR("pushKey");
      v62 = 35;
      v63 = CFSTR("digest");
      v64 = 36;
      v65 = CFSTR("refreshDate");
      v66 = 37;
      v67 = CFSTR("subscriptionID");
      v68 = 38;
      v69 = CFSTR("lastSyncStartDate");
      v70 = 39;
      v71 = CFSTR("lastSyncEndDate");
      v72 = 40;
      v73 = CFSTR("subcalURL");
      v74 = 41;
      v75 = CFSTR("refreshInterval");
      v76 = 42;
      v77 = CFSTR("pubcalAccountID");
      v78 = 43;
      v79 = CFSTR("sharees");
      v80 = 52;
      v81 = CFSTR("notifications");
      v82 = 53;
      v83 = CFSTR("selfIdentityDisplayName");
      v84 = 55;
      v85 = CFSTR("ownerIdentityId");
      v86 = 29;
      v87 = CFSTR("selfIdentityAddressString");
      v88 = 56;
      v89 = CFSTR("ownerIdentityDisplayName");
      v90 = 57;
      v91 = CFSTR("ownerIdentityAddressString");
      v92 = 58;
      v93 = CFSTR("selfIdentityFirstName");
      v94 = 59;
      v95 = CFSTR("selfIdentityLastName");
      v96 = 60;
      v97 = CFSTR("ownerIdentityFirstName");
      v98 = 61;
      v99 = CFSTR("ownerIdentityLastName");
      v100 = 62;
      v101 = CFSTR("allAlarms");
      v102 = 63;
      v103 = CFSTR("syncError");
      v104 = 65;
      v105 = CFSTR("maxAttendees");
      v106 = 46;
      v107 = CFSTR("lastSyncTitle");
      v108 = 47;
      v109 = CFSTR("locale");
      v110 = 48;
      v111 = CFSTR("image");
      v112 = 66;
      CalCalendarGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 54);
      for (i = 848; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalCalendarGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalCalendarGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5CD3D60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 848; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t CalEventOccurrenceCacheCopyOccurrencesOnDay(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  _QWORD v5[8];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __CalEventOccurrenceCacheCopyOccurrencesOnDay_block_invoke;
  v5[3] = &unk_1E4F88F40;
  v5[5] = a1;
  v5[6] = a2;
  *(double *)&v5[7] = a3;
  v5[4] = &v6;
  _CalEventOccurrenceCachePerformWithLock(a1, v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1A5CD3E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

BOOL CalStoreGetFlag2(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  int Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return (Property & a2) != 0;
}

uint64_t CalOrganizerGetPropertyIDWithPropertyName(void *key)
{
  void *value;

  if (CalOrganizerGetPropertyIDWithPropertyName_onceToken != -1)
    dispatch_once(&CalOrganizerGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_31_0);
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalOrganizerGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t CalLocationGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  __CFString *v9;
  int v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  int v14;
  __CFString *v15;
  int v16;
  __CFString *v17;
  int v18;
  __CFString *v19;
  int v20;
  __CFString *v21;
  int v22;
  __CFString *v23;
  int v24;
  __CFString *v25;
  int v26;
  __CFString *v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalLocationGetPropertyIDWithPropertyName_sPropDict;
  if (!CalLocationGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalLocationGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalLocationGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("title");
      v6 = 0;
      v7 = CFSTR("address");
      v8 = 1;
      v9 = CFSTR("latitude");
      v10 = 2;
      v11 = CFSTR("longitude");
      v12 = 3;
      v13 = CFSTR("referenceFrame");
      v14 = 4;
      v15 = CFSTR("contactLabel");
      v16 = 5;
      v17 = CFSTR("mapKitHandle");
      v18 = 6;
      v19 = CFSTR("radius");
      v20 = 7;
      v21 = CFSTR("routing");
      v22 = 8;
      v23 = CFSTR("derivedFrom");
      v24 = 9;
      v25 = CFSTR("calendarItemOwner");
      v26 = 15;
      v27 = CFSTR("alarmOwner");
      v28 = 16;
      CalLocationGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 12);
      for (i = 176; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalLocationGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalLocationGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5CD4160(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 176; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

const void *CalRecurrenceCopyOwner(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Owner;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = (const void *)_CalRecurrenceGetOwner(a1, 0);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalEventOccurrenceCreateForInitialOccurrenceWithTimeZone(const void *a1, void *a2)
{
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  double v7;
  id v8;
  const void *v9;
  double v10;
  uint64_t v11;

  *(double *)&v4 = COERCE_DOUBLE(CalEventCopyStartDate((uint64_t)a1));
  v6 = v5;
  v7 = *(double *)&v4;
  v8 = a2;
  if (v8)
  {
    if (!v6)
      goto LABEL_7;
  }
  else
  {
    v8 = (id)CalCopyTimeZone();
    if (!v6)
      goto LABEL_7;
  }
  if (CFStringCompare(v6, CFSTR("_float"), 0) == kCFCompareEqualTo)
  {
    v9 = (const void *)CalTimeZoneCopyCFTimeZone();
    CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
    v7 = v10;
    CFRelease(v9);
  }
LABEL_7:
  v11 = CalEventOccurrenceCreate(a1, v8, v7);
  CalDateTimeRelease();

  return v11;
}

uint64_t _CalEventCopyStartDateWhileLocked(uint64_t a1, char a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  double DateProperty;

  RecordLock = 0;
  if ((a2 & 1) == 0)
  {
    RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
  }
  DateProperty = _CalRecordGetDateProperty(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetProperty();
  CalDateTimeSetTimeZone();
  if ((a2 & 1) == 0)
  {
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(RecordLock);
    os_unfair_lock_unlock(RecordLock);
  }
  return *(_QWORD *)&DateProperty;
}

uint64_t CalEventCopyStartDate(uint64_t a1)
{
  return _CalEventCopyStartDateWhileLocked(a1, 0);
}

double CalRecurrenceGetEffectiveEndDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;
  double v4;
  uint64_t DatabaseForRecord;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  v4 = *MEMORY[0x1E0D0C490];
  if (vabdd_f64(DateProperty, *MEMORY[0x1E0D0C490]) < 2.22044605e-16)
  {
    DatabaseForRecord = CalGetDatabaseForRecord();
    __CalDatabaseBeginReadTransaction(DatabaseForRecord, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalRecurrence.m:1057");
    _CalRecurrenceGenerateCachedEndDate(a1);
    __CalDatabaseRollbackTransaction(DatabaseForRecord, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalRecurrence.m:1059");
    DateProperty = COERCE_DOUBLE(_CalRecurrenceCopyCachedEndDate(a1));
    CalDateTimeRelease();
    if (vabdd_f64(DateProperty, v4) < 2.22044605e-16)
      DateProperty = v4;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

uint64_t CalGetDatabaseForRecord()
{
  uint64_t result;

  result = CPRecordGetStore();
  if (result)
    return CPRecordStoreGetContext();
  return result;
}

void CalEventGetProposedStartDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventGetProposedStartDate(a1);
  _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

double _CalRecordGetDateProperty(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetProperty())
    JUMPOUT(0x1A85B424CLL);
  return *MEMORY[0x1E0D0C490];
}

double _CalEventGetProposedStartDate(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    return _CFDateRefToCalDate(Property);
  else
    return *MEMORY[0x1E0D0C490];
}

BOOL __CalDatabaseRollbackTransaction(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  int v11;
  void *v13;
  void *v14;

  if (*(_DWORD *)(a1 + 352) == 0xFFFF)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL __CalDatabaseRollbackTransaction(CalDatabaseRef, const char *)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("CalDatabase.m"), 1081, CFSTR("Tried to roll back a transaction (%s) when no transaction was open (%s)"), a2, *(_QWORD *)(a1 + 344));

  }
  if (CDBLockingAssertionsEnabled)
    v4 = *(_QWORD *)(a1 + 24) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (CDBLockingAssertionsEnabled)
  {
    if (v9)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  v11 = CPSqliteConnectionRollback();
  if (*(_DWORD *)(a1 + 352) == 1)
    objc_msgSend(*(id *)(a1 + 336), "unlock");
  *(_DWORD *)(a1 + 352) = 0xFFFF;
  *(_QWORD *)(a1 + 344) = a2;
  return v11 != 1;
}

BOOL __CalDatabaseBeginReadTransaction(uint64_t a1, uint64_t a2)
{
  return _CalDatabaseBeginTransactionOfType(a1, 0, a2);
}

BOOL _CalDatabaseBeginTransactionOfType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v9;
  const os_unfair_lock *v10;
  uint64_t v11;
  const os_unfair_lock *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  NSObject *v19;
  void *v20;
  void *v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 352) != 0xFFFF)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _CalDatabaseBeginTransactionOfType(CalDatabaseRef, CPSqliteTransactionType, const char *)");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", v21, CFSTR("CalDatabase.m"), 1036, CFSTR("Tried to begin a transaction of type %i (%s) when there's already an open transaction of type %i (%s)"), a2, a3, *(unsigned int *)(a1 + 352), *(_QWORD *)(a1 + 344));

  }
  if (CDBLockingAssertionsEnabled)
    v6 = *(_QWORD *)(a1 + 24) == 0;
  else
    v6 = 1;
  if (!v6)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v9 = Database == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
  }
  v11 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (CDBLockingAssertionsEnabled)
  {
    if (v11)
    {
      if (*(_QWORD *)v11)
      {
        if (*(_QWORD *)(*(_QWORD *)v11 + 104))
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
  v13 = CPSqliteConnectionBeginTransactionType();
  v14 = v13;
  if (v13 && v13 != 101)
  {
    v19 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v23 = a3;
      v24 = 1024;
      v25 = v14;
      _os_log_impl(&dword_1A5CCB000, v19, OS_LOG_TYPE_ERROR, "Begin transaction (%{public}s) failed with error %i", buf, 0x12u);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 352) = a2;
    v15 = *(_DWORD *)(a1 + 356);
    if ((v15 + 1) > 1)
      v16 = v15 + 1;
    else
      v16 = 1;
    *(_DWORD *)(a1 + 356) = v16;
    *(_QWORD *)(a1 + 344) = a3;
  }
  return v14 == 101 || v14 == 0;
}

void _CalRecurrenceGenerateCachedEndDate(uint64_t a1)
{
  uint64_t Context;
  uint64_t v3;
  const void *v4;
  const void *TimeZone;
  const void *v6;
  const void *Owner;
  uint64_t v8;
  int Count;
  int v10;
  double DateProperty;
  const os_unfair_lock *v12;
  const __CFString *Property;
  CFComparisonResult v14;
  const void *v15;
  const void *v16;
  _BOOL4 v17;
  const void *v18;

  if (!CPRecordGetStore())
    goto LABEL_8;
  Context = CPRecordStoreGetContext();
  if (!Context)
    goto LABEL_8;
  v3 = _CalDatabaseCopyEventOccurrenceCache(Context);
  if (!v3)
    goto LABEL_8;
  v4 = (const void *)v3;
  TimeZone = (const void *)_CalEventOccurrenceCacheGetTimeZone(v3);
  if (!TimeZone)
  {
    CFRelease(v4);
LABEL_8:
    v6 = (const void *)CalCopyTimeZone();
    goto LABEL_9;
  }
  v6 = CFRetain(TimeZone);
  CFRelease(v4);
  if (!v6)
    goto LABEL_8;
LABEL_9:
  Owner = (const void *)_CalRecurrenceGetOwner(a1, 0);
  if (!Owner)
    goto LABEL_24;
  v8 = (uint64_t)Owner;
  if (!_CalEntityIsOfType(Owner, 2))
    goto LABEL_24;
  Count = _CalRecurrenceGetCount(a1);
  if (Count < 1)
    goto LABEL_24;
  v10 = Count;
  DateProperty = _CalRecordGetDateProperty(v8);
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  Property = (const __CFString *)CPRecordGetProperty();
  v14 = CFStringCompare(Property, CFSTR("_float"), 0);
  v15 = (const void *)CalTimeZoneCopyCFTimeZone();
  v16 = v15;
  if (v6 && v15)
  {
    v17 = v14 == kCFCompareEqualTo;
    if (CFEqual(v6, v15))
      v18 = v6;
    else
      v18 = v16;
    _CalRecurrenceGetOrComputeCachedEndDate(a1, v10, v17, v18, DateProperty);
  }
  else
  {
    _CalRecurrenceGetOrComputeCachedEndDate(a1, v10, v14 == kCFCompareEqualTo, v6, DateProperty);
    if (!v16)
      goto LABEL_24;
  }
  CFRelease(v16);
LABEL_24:
  if (v6)
    CFRelease(v6);
}

uint64_t CalDatabaseCopyEventOccurrenceCache(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalDatabaseCopyEventOccurrenceCache((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalDatabaseCopyEventOccurrenceCache(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    CFRetain(*(CFTypeRef *)(a1 + 32));
  return v1;
}

uint64_t _CalRecurrenceGetOwner(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;
  uint64_t result;
  const os_unfair_lock *v6;
  uint64_t Store;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
    result = (uint64_t)CalRelationGetRelatedObject(result);
  if (!result && a2)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6)
            os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
    if ((int)CPRecordGetIntegerProperty() < 1)
    {
      return 0;
    }
    else
    {
      Store = CPRecordGetStore();
      return _CalGetCalendarItemWithRowID(Store);
    }
  }
  return result;
}

uint64_t _CalRecurrenceGetCount(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetIntegerProperty();
}

uint64_t _CalRecurrenceCopyCachedEndDate(uint64_t a1)
{
  double DateProperty;
  const os_unfair_lock *Context;
  uint64_t Property;
  _QWORD *v6;
  _QWORD v8[2];

  v8[1] = 0;
  DateProperty = _CalRecordGetDateProperty(a1);
  *(double *)v8 = DateProperty;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (fabs(DateProperty) < 2.22044605e-16 && Property == 0)
  {
    v6 = (_QWORD *)MEMORY[0x1E0D0C490];
  }
  else
  {
    v6 = v8;
    CalDateTimeSetTimeZone();
  }
  return *v6;
}

uint64_t _CalEventOccurrenceCacheGetTimeZone(uint64_t a1)
{
  _CalEventOccurrenceCacheLoadInfo(a1);
  return *(_QWORD *)(a1 + 32);
}

void _CalEventOccurrenceCacheLoadInfo(uint64_t a1)
{
  int CurrentTransactionID;
  int v3;
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v8;
  const os_unfair_lock *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  const os_unfair_lock *v13;
  const void *v14;
  uint64_t v15;
  void *v16;
  const os_unfair_lock *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const os_unfair_lock *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const os_unfair_lock *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const os_unfair_lock *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const os_unfair_lock *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  const os_unfair_lock *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;

  CurrentTransactionID = _CalDatabaseGetCurrentTransactionID(*(_QWORD *)(a1 + 24));
  if (CurrentTransactionID != *(_DWORD *)(a1 + 20))
  {
    v3 = CurrentTransactionID;
    if (!CurrentTransactionID)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _CalEventOccurrenceCacheLoadInfo(CalEventOccurrenceCacheRef)");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "handleFailureInFunction:file:lineNumber:description:", v49, CFSTR("CalEventOccurrenceCache.m"), 202, CFSTR("No transaction when accessing time zone."));

    }
    RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
    if (CDBLockingAssertionsEnabled)
      v5 = RecordStore == 0;
    else
      v5 = 1;
    if (!v5)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
      v8 = Database == 0;
    else
      v8 = 1;
    if (!v8)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9)
          os_unfair_lock_assert_owner(v9 + 20);
      }
    }
    v10 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
    v11 = v10;
    if (CDBLockingAssertionsEnabled)
      v12 = v10 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      if (*(_QWORD *)v10)
      {
        if (*(_QWORD *)(*(_QWORD *)v10 + 104))
        {
          v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13)
            os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
    v14 = (const void *)CPSqliteConnectionCopyValueForProperty();
    v15 = CalTimeZoneCopyCFTimeZone();
    v16 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v15;

    if (v14)
      CFRelease(v14);
    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(_QWORD *)v11)
        {
          if (*(_QWORD *)(*(_QWORD *)v11 + 104))
          {
            v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17)
              os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
    }
    v18 = (void *)CPSqliteConnectionCopyValueForProperty();
    v50 = v18;
    if (v18)
    {
      v19 = objc_msgSend(v18, "integerValue");
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)v19);
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v20;
    }
    else
    {
      v21 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
    }

    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(_QWORD *)v11)
        {
          if (*(_QWORD *)(*(_QWORD *)v11 + 104))
          {
            v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v22)
              os_unfair_lock_assert_owner(v22 + 20);
          }
        }
      }
    }
    v23 = (void *)CPSqliteConnectionCopyValueForProperty();
    v24 = v23;
    if (v23)
    {
      v25 = objc_msgSend(v23, "integerValue");
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)v25);
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v26;
    }
    else
    {
      v27 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
    }

    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(_QWORD *)v11)
        {
          if (*(_QWORD *)(*(_QWORD *)v11 + 104))
          {
            v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v28)
              os_unfair_lock_assert_owner(v28 + 20);
          }
        }
      }
    }
    v29 = (void *)CPSqliteConnectionCopyValueForProperty();
    v30 = v29;
    if (v29)
    {
      v31 = objc_msgSend(v29, "integerValue");
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)v31);
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v32;
    }
    else
    {
      v33 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
    }

    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(_QWORD *)v11)
        {
          if (*(_QWORD *)(*(_QWORD *)v11 + 104))
          {
            v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v34)
              os_unfair_lock_assert_owner(v34 + 20);
          }
        }
      }
    }
    v35 = (void *)CPSqliteConnectionCopyValueForProperty();
    v36 = v35;
    if (v35)
    {
      v37 = objc_msgSend(v35, "integerValue");
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)v37);
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v38;
    }
    else
    {
      v39 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;
    }

    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(_QWORD *)v11)
        {
          if (*(_QWORD *)(*(_QWORD *)v11 + 104))
          {
            v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v40)
              os_unfair_lock_assert_owner(v40 + 20);
          }
        }
      }
    }
    v41 = (void *)CPSqliteConnectionCopyValueForProperty();
    v42 = v41;
    if (v41)
      v43 = objc_msgSend(v41, "integerValue");
    else
      v43 = 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(a1 + 72) = v43;
    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(_QWORD *)v11)
        {
          if (*(_QWORD *)(*(_QWORD *)v11 + 104))
          {
            v44 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v44)
              os_unfair_lock_assert_owner(v44 + 20);
          }
        }
      }
    }
    v45 = (void *)CPSqliteConnectionCopyValueForProperty();
    v46 = v45;
    if (v45)
      v47 = objc_msgSend(v45, "integerValue");
    else
      v47 = 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(a1 + 80) = v47;
    *(_DWORD *)(a1 + 20) = v3;

  }
}

uint64_t _CalDatabaseGetCurrentTransactionID(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 352) == 0xFFFF)
    return 0;
  else
    return *(unsigned int *)(a1 + 356);
}

uint64_t _CalEntityIsOfType(const void *a1, int a2)
{
  uint64_t TypeID;
  int v5;
  uint64_t result;
  int EntityType;
  BOOL v8;

  TypeID = CPRecordGetTypeID();
  if (TypeID != CFGetTypeID(a1))
    return 0;
  v5 = *(_DWORD *)(CPRecordGetClass() + 64);
  if (v5 == a2)
    return 1;
  if ((a2 - 7) <= 1)
  {
    if (v5 == 100)
    {
      EntityType = _CalParticipantGetEntityType((uint64_t)a1);
      return EntityType == a2;
    }
    return 0;
  }
  if ((a2 & 0xFFFFFFFE) == 2)
  {
    if (v5 == 101)
    {
      EntityType = _CalCalendarItemGetEntityType((uint64_t)a1);
      return EntityType == a2;
    }
    return 0;
  }
  result = 0;
  v8 = (a2 & 0xFFFFFFFE) == 0x10 || a2 == 19;
  if (v8 && v5 == 102)
  {
    EntityType = _CalNotificationGetEntityType((uint64_t)a1);
    return EntityType == a2;
  }
  return result;
}

id _CalEventOccurrenceCacheGetCacheCalendar(uint64_t a1)
{
  _CalEventOccurrenceCacheLoadInfo(a1);
  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianCalendarForTimeZone:");
  else
    CalCopyCalendar();
  return (id)objc_claimAutoreleasedReturnValue();
}

void CDBEntityDestroy(const void *a1)
{
  id v1;

  CDBGetCommonEntityFunctionalityHandler(a1, 0, 0);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "notifyOfEntityDestruction");

}

void sub_1A5CD5ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CDBRelationEliminateRelatedObjectReference(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    CalRelationRawSetRelatedObject(a1, 0);
  }
  else
  {
    v5 = v1;
    v6 = v2;
    v3 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_ERROR, "Given 'relation' is NULL.  Will not eliminate related object reference.", v4, 2u);
    }
  }
}

BOOL CalEntityIsVirtual(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsVirtual;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsVirtual = _CalEntityIsVirtual(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsVirtual;
}

BOOL _CalEntityIsVirtual(const void *a1)
{
  uint64_t RecordID;
  void *v4;
  NSObject *v5;
  int ID;
  const os_unfair_lock *Context;
  _DWORD v8[2];
  __int16 v9;
  int IsDeleted;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  RecordID = _CalEntityGetRecordID(a1);
  if (RecordID)
    return CalRecordIDIsVirtual(RecordID);
  v4 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    v5 = v4;
    ID = CPRecordGetID();
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    v8[0] = 67109376;
    v8[1] = ID;
    v9 = 1024;
    IsDeleted = CPRecordIsDeleted();
    _os_log_impl(&dword_1A5CCB000, v5, OS_LOG_TYPE_DEBUG, "_CalEntityIsVirtual: failed to get recordID for record with rowid [%d], deleted: %d", (uint8_t *)v8, 0xEu);

  }
  return 0;
}

uint64_t _CalEntityGetRecordID(const void *a1)
{
  int Type;

  Type = _CalEntityGetType(a1);
  switch(Type)
  {
    case 1:
      return _CalCalendarGetRecordID((uint64_t)a1);
    case 2:
    case 3:
      return _CalCalendarItemGetRecordID((uint64_t)a1);
    case 4:
      return _CalAlarmGetRecordID((uint64_t)a1);
    case 5:
      return _CalRecurrenceGetRecordID((uint64_t)a1);
    case 6:
      return _CalStoreGetRecordID((uint64_t)a1);
    case 7:
    case 8:
      return _CalParticipantGetRecordID((uint64_t)a1);
    case 9:
      return _CalEventActionGetRecordID((uint64_t)a1);
    case 10:
      return _CalExceptionDateGetRecordID((uint64_t)a1);
    case 11:
      return _CalAttachmentGetRecordID((uint64_t)a1);
    case 12:
      return _CalCategoryGetRecordID((uint64_t)a1);
    case 13:
      return _CalCategoryLinkGetRecordID((uint64_t)a1);
    case 14:
      return _CalLocationGetRecordID((uint64_t)a1);
    case 15:
      return _CalShareeGetRecordID((uint64_t)a1);
    case 16:
    case 17:
    case 19:
      return _CalNotificationGetRecordID((uint64_t)a1);
    case 18:
      return _CalResourceChangeGetRecordID((uint64_t)a1);
    case 20:
      return _CalSuggestedEventInfoGetRecordID((uint64_t)a1);
    case 21:
      return _CalContactGetRecordID((uint64_t)a1);
    case 22:
      return 0;
    case 23:
    case 29:
      return _CalColorGetRecordID((uint64_t)a1);
    case 24:
      return _CalErrorGetRecordID((uint64_t)a1);
    case 25:
      return _CalAttachmentFileGetRecordID((uint64_t)a1);
    case 26:
    case 27:
      return _CalCalendarItemGetDescription((uint64_t)a1);
    case 28:
      return _CalImageGetRecordID((uint64_t)a1);
    default:
      if (Type == 102)
        return _CalNotificationGetRecordID((uint64_t)a1);
      else
        return 0;
  }
}

BOOL CalRecordIDIsVirtual(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) == 0x7FFFFFFF;
}

uint64_t _CalCalendarItemGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalStoreGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalGetStoreWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t _CalParticipantLoadIsSelfAttendee(const void *a1)
{
  CFTypeRef Owner;
  uint64_t v3;
  const os_unfair_lock *Context;

  Owner = _CalParticipantGetOwner(a1);
  v3 = (uint64_t)Owner;
  if (Owner && _CalCalendarItemGetEntityType((uint64_t)Owner) == 2 && _CalCalendarItemGetSelfAttendee(v3))
  {
    CPRecordGetID();
    CPRecordGetID();
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordInitializeProperty();
}

CFTypeRef CalParticipantCopyOwner(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Owner;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalParticipantGetOwner(a1);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef _CalParticipantGetOwner(const void *a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  _CalEntityGetType(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

void _CalEventLoadSelfParticipantStatus(uint64_t a1)
{
  CFTypeRef Organizer;
  uint64_t Calendar;
  CFTypeRef Store;
  CFNumberRef v5;
  const os_unfair_lock *Context;
  int valuePtr;

  valuePtr = 7;
  Organizer = _CalCalendarItemGetOrganizer(a1);
  if (Organizer)
  {
    if (_CalOrganizerIsSelf((uint64_t)Organizer))
    {
      valuePtr = 1;
    }
    else
    {
      Calendar = _CalEventGetCalendar(a1);
      if (Calendar)
      {
        Store = _CalCalendarGetStore(Calendar);
        if (Store)
        {
          if (_CalStoreGetBoolConstraintValue((uint64_t)Store, CFSTR("StatusIsAccurate"), 0, 1))
            valuePtr = _CalEventGetParticipationStatus(a1);
        }
      }
    }
  }
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v5);
}

uint64_t CalEventGetParticipationStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t ParticipationStatus;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ParticipationStatus = _CalEventGetParticipationStatus(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ParticipationStatus;
}

uint64_t _CalEventGetParticipationStatus(uint64_t a1)
{
  CFTypeRef SelfAttendee;

  SelfAttendee = _CalCalendarItemGetSelfAttendee(a1);
  if (SelfAttendee)
    return _CalRecurrenceGetWeekStartRaw((uint64_t)SelfAttendee);
  if (_CalCalendarItemIsInvite(a1))
    return 1;
  return 7;
}

CFTypeRef _CalCalendarItemGetSelfAttendee(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

BOOL _CalCalendarItemIsInvite(uint64_t a1)
{
  CFTypeRef Organizer;

  Organizer = _CalCalendarItemGetOrganizer(a1);
  return Organizer && !_CalOrganizerIsSelf((uint64_t)Organizer) && CalCalendarItemHasAttendees(a1, 0);
}

CFTypeRef _CalCalendarItemGetOrganizer(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

BOOL _CalOrganizerIsSelf(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

uint64_t _CalRecurrenceGetWeekStartRaw(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

BOOL CalEventGetDeliverySourceOrExternalIDRequiredForResponseInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("ResponseRequiresDeliverySourceOrExternalID"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetOccurrenceOrderEnforcedAfterDetachmentInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("OccurrenceOrderEnforcedAfterDetachment"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventResponseCommentsSupportedInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("SupportsResponseComment"), 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalStoreRequiresSeparateFilesForAllAttachments(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalAttachment"), CFSTR("RequiresSeparateFilesForAllAttachments"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventDeclineDeletedInvitationsInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("DeclineDeletedInvitations"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventDurationConstrainedToRecurrenceIntervalInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("DurationConstrainedToRecurrenceInterval"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalStoreRequiresMSFormattedUIDKey(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("RequiresMSFormattedUID"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetFutureStartDateLimitedToOccurrenceCacheBoundsInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("FutureStartLimitedToOccurrenceCache"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

uint64_t CalCalendarItemGetAvailabilitySupportedByStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("SupportsLimitedAvailability"), 0))
    BoolConstraintValue = 2;
  else
    BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("SupportsAvailability"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetProposedStatusRequiredForResponseInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("ResponseRequiresProposedStatus"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetStatusIsAccurateInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("StatusIsAccurate"), 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetOccurrencesMustOccurOnSeparateDaysInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("OccurrencesMustOccurOnSeparateDays"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventGetRejectedStatusChangeRequiresNoExternalStatusInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("RejectedStatusChangeRequiresNoExternalStatus"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventURLFieldSupportedInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("SupportsURL"), 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalStoreMustAcknowledgeMasterEvent(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("MustAcknowledgeMasterEvent"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalTaskAllDayDueDatesSupportedInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalTask"), CFSTR("supportsAllDayDueDates"), 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalStoreAreRecurrencesPinnedToMonthDays(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("RecurrencesPinnedToMonthDays"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventRequiresOutgoingInvitationsInDefaultCalendarInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("RequiresOutgoingInvitationsInDefaultCalendar"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalEventCancelDeletedEventsInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("CancelDeletedEvents"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

BOOL CalStoreGetSupportsOutgoingInvitations(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalStoreGetBoolConstraintValueForStore(a1, CFSTR("SupportsOutgoingInvitations"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreGetSupportsInvitationModifications(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalStoreGetBoolConstraintValueForStore(a1, CFSTR("SupportsInvitationModifications"), 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreSupportsAutoGeocodingStructuredLocations(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalStoreGetBoolConstraintValueForStore(a1, CFSTR("SupportsAutoGeocodingStructuredLocations"), 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreSupportsStructuredLocations(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalStoreGetBoolConstraintValueForStore(a1, CFSTR("SupportsStructuredLocations"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreRecurrenceSeriesMustIncludeMoreThanFirstOccurrence(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalStoreGetBoolConstraintValueForStore(a1, CFSTR("RecurrenceSeriesMustIncludeMoreThanFirstOccurrence"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreSupportsReminderActions(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalStoreGetBoolConstraintValueForStore(a1, CFSTR("SupportsReminderActions"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreSupportsReminderLocations(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalStoreGetBoolConstraintValueForStore(a1, CFSTR("SupportsReminderLocations"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalStoreSupportsAlarmProximity(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalStoreGetBoolConstraintValueForStore(a1, CFSTR("SupportsAlarmProximity"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalAttendeeGetUseDeletedByOrganizerStatusInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalAttendeeGetBoolConstraintValueForStore(a1, CFSTR("UseDeletedByOrganizerStatus"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalAttendeeIsStatusKnownForInvitedEventsInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalAttendeeGetBoolConstraintValueForStore(a1, CFSTR("StatusIsKnownForInvitedEvents"), 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalAttendeeIsStatusKnownForOrganizedEventsInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalAttendeeGetBoolConstraintValueForStore(a1, CFSTR("StatusIsKnownForOrganizedEvents"), 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL CalAttendeeRequireSearchInSingleAccountInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalAttendeeGetBoolConstraintValueForStore(a1, CFSTR("RequireAttendeeSearchInSingleAccount"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

uint64_t CalStoreGetMaxRecurrencesSupported(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t IntConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IntConstraintValue = _CalStoreGetIntConstraintValue(a1, CFSTR("CalEvent"), CFSTR("MaximumNumberOfRecurrences"));
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntConstraintValue;
}

uint64_t CalStoreGetMaxAlarmsSupported(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t IntConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IntConstraintValue = _CalStoreGetIntConstraintValue(a1, CFSTR("CalEvent"), CFSTR("MaximumNumberOfAlarms"));
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntConstraintValue;
}

uint64_t _CalStoreGetIntConstraintValue(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v3;
  const __CFNumber *v4;
  const __CFNumber *v5;
  CFTypeID v6;
  unsigned int valuePtr;

  v3 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v4 = (const __CFNumber *)_CalStoreCopyConstraintValue(a1, a2, a3);
  if (v4)
  {
    v5 = v4;
    v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
    CFRelease(v5);
    return valuePtr;
  }
  return v3;
}

uint64_t CalStoreSupportsAlarmsTriggeringAfterStartDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const __CFDictionary *v3;
  const __CFBoolean *Value;
  const __CFBoolean *v5;
  CFTypeID v6;
  _BOOL8 v7;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = (const __CFDictionary *)_CalAlarmCopyConstraintsForStore(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  if (!v3)
    return 1;
  Value = (const __CFBoolean *)CFDictionaryGetValue(v3, CFSTR("SupportsAlarmsTriggeringAfterStartDate"));
  v7 = !Value || (v5 = Value, v6 = CFGetTypeID(Value), v6 != CFBooleanGetTypeID()) || CFBooleanGetValue(v5) != 0;
  CFRelease(v3);
  return v7;
}

uint64_t CalStoreSupportsAlarmTriggerKey(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v5 = _CalStoreSupportsAlarmTriggerKey(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

uint64_t _CalStoreSupportsAlarmTriggerKey(uint64_t a1, const void *a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  _BOOL8 v8;
  CFRange v10;

  v3 = (const __CFDictionary *)_CalAlarmCopyConstraintsForStore(a1);
  if (!v3)
    return 1;
  v4 = v3;
  Value = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("SupportedTriggers"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFArrayGetTypeID()))
  {
    v10.length = CFArrayGetCount(v6);
    v10.location = 0;
    v8 = CFArrayContainsValue(v6, v10, a2) != 0;
  }
  else
  {
    v8 = 1;
  }
  CFRelease(v4);
  return v8;
}

const void *_CalAlarmCopyConstraintsForStore(uint64_t a1)
{
  const void *v1;
  CFTypeID TypeID;
  CFTypeID v3;
  const void *Value;
  const void *v5;

  v1 = (const void *)_CalParticipantCopyPhoneNumber(a1);
  TypeID = CFDictionaryGetTypeID();
  if (!v1)
    return 0;
  v3 = TypeID;
  if (CFGetTypeID(v1) != TypeID)
    goto LABEL_6;
  Value = CFDictionaryGetValue((CFDictionaryRef)v1, CFSTR("CalAlarm"));
  v5 = Value;
  if (Value)
  {
    if (CFGetTypeID(Value) == v3)
    {
      CFRetain(v5);
      goto LABEL_7;
    }
LABEL_6:
    v5 = 0;
  }
LABEL_7:
  CFRelease(v1);
  return v5;
}

BOOL CalStoreGetSupportsIncomingInvitations(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalStoreGetBoolConstraintValueForStore(a1, CFSTR("SupportsIncomingInvitations"), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

BOOL _CalAttendeeGetBoolConstraintValueForStore(uint64_t a1, const void *a2, _BOOL8 a3)
{
  const void *v5;
  CFTypeID TypeID;
  CFTypeID v7;
  const __CFDictionary *Value;
  const __CFDictionary *v9;
  const void *v10;
  const void *v11;
  CFTypeID v12;

  v5 = (const void *)_CalParticipantCopyPhoneNumber(a1);
  TypeID = CFDictionaryGetTypeID();
  if (v5)
  {
    v7 = TypeID;
    if (CFGetTypeID(v5) == TypeID
      && (Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v5, CFSTR("CalAttendee"))) != 0
      && (v9 = Value, CFGetTypeID(Value) == v7)
      && (v10 = CFDictionaryGetValue(v9, a2)) != 0)
    {
      v11 = v10;
      CFRetain(v10);
      CFRelease(v5);
      v12 = CFGetTypeID(v11);
      if (v12 == CFBooleanGetTypeID())
        a3 = CFBooleanGetValue((CFBooleanRef)v11) != 0;
    }
    else
    {
      v11 = v5;
    }
    CFRelease(v11);
  }
  return a3;
}

BOOL _CalStoreGetBoolConstraintValueForStore(uint64_t a1, const void *a2, _BOOL8 a3)
{
  const void *v5;
  CFTypeID TypeID;
  CFTypeID v7;
  const __CFDictionary *Value;
  const __CFDictionary *v9;
  const void *v10;
  const void *v11;
  CFTypeID v12;

  v5 = (const void *)_CalParticipantCopyPhoneNumber(a1);
  TypeID = CFDictionaryGetTypeID();
  if (v5)
  {
    v7 = TypeID;
    if (CFGetTypeID(v5) == TypeID
      && (Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v5, CFSTR("CalStore"))) != 0
      && (v9 = Value, CFGetTypeID(Value) == v7)
      && (v10 = CFDictionaryGetValue(v9, a2)) != 0)
    {
      v11 = v10;
      CFRetain(v10);
      CFRelease(v5);
      v12 = CFGetTypeID(v11);
      if (v12 == CFBooleanGetTypeID())
        a3 = CFBooleanGetValue((CFBooleanRef)v11) != 0;
    }
    else
    {
      v11 = v5;
    }
    CFRelease(v11);
  }
  return a3;
}

BOOL _CalStoreGetBoolConstraintValue(uint64_t a1, const void *a2, const void *a3, _BOOL8 a4)
{
  const __CFBoolean *v5;
  const __CFBoolean *v6;
  CFTypeID v7;

  v5 = (const __CFBoolean *)_CalStoreCopyConstraintValue(a1, a2, a3);
  if (v5)
  {
    v6 = v5;
    v7 = CFGetTypeID(v5);
    if (v7 == CFBooleanGetTypeID())
      a4 = CFBooleanGetValue(v6) != 0;
    CFRelease(v6);
  }
  return a4;
}

const void *_CalStoreCopyConstraintValue(uint64_t a1, const void *a2, const void *a3)
{
  const void *v5;
  CFTypeID TypeID;
  CFTypeID v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const void *Value;
  const void *v11;

  v5 = (const void *)_CalParticipantCopyPhoneNumber(a1);
  TypeID = CFDictionaryGetTypeID();
  if (!v5)
    return 0;
  v7 = TypeID;
  if (CFGetTypeID(v5) == TypeID
    && (v8 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v5, a2)) != 0
    && (v9 = v8, CFGetTypeID(v8) == v7))
  {
    Value = CFDictionaryGetValue(v9, a3);
    v11 = Value;
    if (Value)
      CFRetain(Value);
  }
  else
  {
    v11 = 0;
  }
  CFRelease(v5);
  return v11;
}

uint64_t _CalParticipantCopyPhoneNumber(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

void _CalEventLoadHasDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *v5;
  _QWORD *Class;
  CFStringRef v7;
  const os_unfair_lock *Context;
  uint64_t v9;
  uint64_t **v10;
  sqlite3_stmt *v11;
  int ID;
  uint64_t v13;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  uint64_t v16;
  const os_unfair_lock *v17;

  if (a3)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Class = (_QWORD *)CPRecordGetClass();
    v7 = CFStringCreateWithFormat(v5, 0, CFSTR("SELECT (description != '') FROM %s WHERE ROWID = ?"), *Class);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a3)
      {
        if (*(_QWORD *)(*(_QWORD *)a3 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    v9 = CPSqliteConnectionStatementForSQL();
    if (v9)
    {
      v10 = (uint64_t **)v9;
      v11 = *(sqlite3_stmt **)(v9 + 8);
      ID = CPRecordGetID();
      sqlite3_bind_int(v11, 1, ID);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v10)
        {
          v13 = **v10;
          if (v13)
          {
            if (*(_QWORD *)(v13 + 104))
            {
              v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v14)
                os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
      }
      CPSqliteStatementIntegerResult();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15)
              os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
      CPRecordInitializeProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v10)
        {
          v16 = **v10;
          if (v16)
          {
            if (*(_QWORD *)(v16 + 104))
            {
              v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v17)
                os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    if (v7)
      CFRelease(v7);
  }
}

void *CalDatabaseCopyOrCreateDefaultCalendarForNewEvents(os_unfair_lock_s *a1)
{
  void *CalendarForEntityType;
  NSObject *v3;
  const void *v4;
  const void *v5;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  CalendarForEntityType = (void *)CalDatabaseCopyDefaultOrAnyReadWriteCalendarForNewEvents(a1, 0);
  if (!CalendarForEntityType)
  {
    v3 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
    {
      v7 = 136315138;
      v8 = "CalCalendarRef CalDatabaseCopyOrCreateDefaultCalendarForNewEvents(CalDatabaseRef)";
      _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_INFO, "%s: Failed to find either default or suitable read-write calendar. Making one.", (uint8_t *)&v7, 0xCu);
    }
    v4 = CalDatabaseCopyLocalStore((uint64_t)a1);
    if (v4)
    {
      v5 = v4;
      if (CalStoreAllowsEvents((uint64_t)v4))
      {
        CalendarForEntityType = (void *)CalDatabaseCreateCalendarForEntityType(a1, 2);
        CalCalendarSetTitle((uint64_t)CalendarForEntityType);
        CalStoreAddCalendar((uint64_t)v5, CalendarForEntityType);
        CalDatabaseSave((uint64_t)a1);
      }
      else
      {
        CalendarForEntityType = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return CalendarForEntityType;
}

CFTypeRef CalDatabaseCopyDefaultOrAnyReadWriteCalendarForNewEvents(void *a1, uint64_t a2)
{
  CFTypeRef result;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = CalDatabaseCopyDefaultCalendarForNewEventsInStore((uint64_t)a1, a2);
  if (!result)
  {
    v5 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
    {
      v6 = 136315138;
      v7 = "CalCalendarRef CalDatabaseCopyDefaultOrAnyReadWriteCalendarForNewEvents(CalDatabaseRef, CalStoreRef)";
      _os_log_impl(&dword_1A5CCB000, v5, OS_LOG_TYPE_INFO, "%s: No default set. Getting first suitable read-write calendar.", (uint8_t *)&v6, 0xCu);
    }
    return CalDatabaseCopyFirstReadWriteCalendarThatSupportsEntityType(a1, 2, a2);
  }
  return result;
}

BOOL CalStoreSupportsDelegateEnumeration(uint64_t a1)
{
  _BOOL8 result;

  result = CalStoreGetFlag(a1, 0x40000000);
  if (result)
    return !CalStoreGetFlag(a1, 2);
  return result;
}

BOOL CalStoreSupportsDelegation(uint64_t a1)
{
  _BOOL8 result;

  result = CalStoreGetFlag(a1, 0x20000000);
  if (result)
    return !CalStoreGetFlag(a1, 2);
  return result;
}

BOOL CalStoreAllowsCalendarAddDeleteModify(uint64_t a1)
{
  return !CalStoreGetFlag(a1, 4);
}

CFTypeRef CalDatabaseCopyDefaultCalendarForNewEventsInStore(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  CFTypeRef v4;
  const void *v5;
  BOOL v6;

  v3 = CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore(a1, 2, a2, 0);
  if (v3 || (v3 = CalDatabaseCopyDefaultLocalCalendar(a1)) != 0)
  {
    if (CalCalendarGetFlag((uint64_t)v3, 2)
      || CalCalendarGetFlag((uint64_t)v3, 1)
      || (v4 = CalCalendarCopyStore((uint64_t)v3)) != 0
      && (v5 = v4, v6 = CalStoreAllowsEvents((uint64_t)v4), CFRelease(v5), !v6))
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

BOOL CalCalendarGetFlag(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  int Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return (Property & a2) != 0;
}

CFTypeRef CalEventCopyStore(uint64_t a1)
{
  CFTypeRef result;
  const void *v2;
  CFTypeRef v3;

  result = CalCalendarItemCopyCalendar(a1);
  if (result)
  {
    v2 = result;
    v3 = CalCalendarCopyStore((uint64_t)result);
    CFRelease(v2);
    return v3;
  }
  return result;
}

CFTypeRef CalCalendarItemCopyCalendar(uint64_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  CFTypeRef Calendar;
  CFTypeRef v5;

  v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  v3 = v2 + 20;
  os_unfair_lock_lock(v2 + 20);
  Calendar = _CalCalendarItemGetCalendar(a1);
  v5 = Calendar;
  if (Calendar)
    CFRetain(Calendar);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3);
  os_unfair_lock_unlock(v3);
  CFRelease(v2);
  return v5;
}

CFTypeRef _CalCalendarItemGetCalendar(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

const void *CalCopyDatabaseForRecord()
{
  const void *Context;
  const void *v1;

  if (!CPRecordGetStore())
    return 0;
  Context = (const void *)CPRecordStoreGetContext();
  v1 = Context;
  if (Context)
    CFRetain(Context);
  return v1;
}

uint64_t CalCalendarCanContainEntityTypeAndStoreAllowsIt(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t CanContainEntityTypeAndStoreAllowsIt;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CanContainEntityTypeAndStoreAllowsIt = _CalCalendarCanContainEntityTypeAndStoreAllowsIt(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return CanContainEntityTypeAndStoreAllowsIt;
}

BOOL CalStoreAllowsEvents(uint64_t a1)
{
  return !CalStoreGetFlag(a1, 2);
}

BOOL CalStoreGetFlag(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 Flag;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Flag = _CalStoreGetFlag(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

BOOL _CalStoreGetFlag(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return (CPRecordGetProperty() & a2) != 0;
}

CFTypeRef CalCalendarCopyStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Store;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Store = _CalCalendarGetStore(a1);
  v4 = Store;
  if (Store)
    CFRetain(Store);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarCanContainEntityType(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t CanContainEntityType;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CanContainEntityType = _CalCalendarCanContainEntityType(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return CanContainEntityType;
}

CFTypeRef CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore(uint64_t a1, int a2, uint64_t a3, char a4)
{
  os_unfair_lock_s *v8;
  const __CFString *v9;
  int v10;
  uint64_t RecordStore;
  BOOL v12;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v15;
  const os_unfair_lock *v16;
  uint64_t v17;
  uint64_t v18;
  const os_unfair_lock *v19;
  const os_unfair_lock *v20;
  const os_unfair_lock *v21;
  CFTypeRef v22;
  const void *v23;
  const void *v24;
  const void *v25;
  CFTypeRef v26;

  if (a3)
    return CalStoreCopyDelegatedAccountDefaultCalendarForNewEvents(a3);
  v8 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (a2 == 2)
  {
    objc_msgSend(*(id *)(a1 + 296), "get_defaultCalendarID");
    v9 = (const __CFString *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(*(id *)(a1 + 296), "get_defaultCalendarStoreUID");
  }
  else
  {
    RecordStore = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
      v12 = RecordStore == 0;
    else
      v12 = 1;
    if (!v12)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
      v15 = Database == 0;
    else
      v15 = 1;
    if (!v15)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
    v17 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
    if (v17)
    {
      v18 = v17;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v17)
        {
          if (*(_QWORD *)(*(_QWORD *)v17 + 104))
          {
            v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v19)
              os_unfair_lock_assert_owner(v19 + 20);
          }
        }
      }
      v9 = (const __CFString *)CPSqliteConnectionCopyValueForProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v18)
        {
          if (*(_QWORD *)(*(_QWORD *)v18 + 104))
          {
            v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20)
              os_unfair_lock_assert_owner(v20 + 20);
          }
        }
      }
      v10 = CPSqliteConnectionIntegerForProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v18)
        {
          if (*(_QWORD *)(*(_QWORD *)v18 + 104))
          {
            v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21)
              os_unfair_lock_assert_owner(v21 + 20);
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
    }
    else
    {
      v9 = 0;
      v10 = -1;
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v8);
  os_unfair_lock_unlock(v8);
  v22 = 0;
  if (v10 < 1 || !v9)
  {
LABEL_42:
    if (v22)
      goto LABEL_45;
    goto LABEL_43;
  }
  v23 = CalDatabaseCopyStoreWithUID((os_unfair_lock_s *)a1);
  if (v23)
  {
    v24 = v23;
    v22 = CalDatabaseCopyCalendarWithExternalIDInStore((const void *)a1, v9, (uint64_t)v23);
    CFRelease(v24);
    goto LABEL_42;
  }
  v22 = 0;
LABEL_43:
  if (v9)
    v22 = CalDatabaseCopyCalendarWithUUID((os_unfair_lock_s *)a1, v9);
LABEL_45:
  if (!v22 || (a4 & 1) != 0)
  {
    if (!v22)
      goto LABEL_55;
  }
  else if ((CalCalendarCanContainEntityTypeAndStoreAllowsIt((uint64_t)v22, a2) & 1) == 0)
  {
    v25 = v22;
    goto LABEL_53;
  }
  v26 = CalCalendarCopyStore((uint64_t)v22);
  if (v26)
  {
    v25 = v26;
    if (CalStoreGetType((uint64_t)v26) != 6)
    {
LABEL_54:
      CFRelease(v25);
      goto LABEL_55;
    }
    CFRelease(v22);
LABEL_53:
    v22 = 0;
    goto LABEL_54;
  }
LABEL_55:
  if (v9)
    CFRelease(v9);
  return v22;
}

const void *CalDatabaseCopyStoreWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalDatabaseCopyStoreWithUID((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

const void *_CalDatabaseCopyStoreWithUID(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;
  const void *InstanceOfClassWithUID;
  const void *v5;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  InstanceOfClassWithUID = (const void *)CPRecordStoreGetInstanceOfClassWithUID();
  v5 = InstanceOfClassWithUID;
  if (InstanceOfClassWithUID)
    CFRetain(InstanceOfClassWithUID);
  return v5;
}

CFTypeRef CalDatabaseCopyCalendarWithUUID(os_unfair_lock_s *a1, const void *a2)
{
  CFTypeRef v2;
  os_unfair_lock_s *v4;
  uint64_t RecordStore;
  BOOL v6;
  const os_unfair_lock *Context;
  const __CFArray *v8;
  const __CFArray *v9;
  const void *ValueAtIndex;

  v2 = a2;
  if (a2)
  {
    v4 = a1 + 20;
    os_unfair_lock_lock(a1 + 20);
    RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
    if (CDBLockingAssertionsEnabled)
      v6 = RecordStore == 0;
    else
      v6 = 1;
    if (!v6)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    v8 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
    if (v8)
    {
      v9 = v8;
      if (CFArrayGetCount(v8) < 1)
      {
        v2 = 0;
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v9, 0);
        v2 = CFRetain(ValueAtIndex);
      }
      CFRelease(v9);
    }
    else
    {
      v2 = 0;
    }
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v4);
    os_unfair_lock_unlock(v4);
  }
  return v2;
}

CFTypeRef CalDatabaseCopyCalendarWithExternalIDInStore(const void *a1, const __CFString *a2, uint64_t a3)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFString *v10;
  const __CFString *v11;
  CFTypeRef v12;

  if (!a2)
    return 0;
  v4 = a3 ? CalStoreCopyCalendars(a3) : CalDatabaseCopyOfAllCalendarsInStoreWithOptions(a1, 0, 0);
  v5 = v4;
  if (!v4)
    return 0;
  Count = CFArrayGetCount(v4);
  if (Count >= 1)
  {
    v7 = Count;
    for (i = 0; i != v7; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
      v10 = (const __CFString *)CalCalendarCopyExternalID((uint64_t)ValueAtIndex);
      if (v10)
      {
        v11 = v10;
        if (CFStringCompare(v10, a2, 0))
        {
          CFRelease(v11);
        }
        else
        {
          v12 = CFRetain(ValueAtIndex);
          CFRelease(v11);
          if (v12)
            goto LABEL_14;
        }
      }
    }
  }
  v12 = 0;
LABEL_14:
  CFRelease(v5);
  return v12;
}

uint64_t CalCalendarCopyExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFMutableArrayRef CalStoreCopyCalendars(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalStoreCopyCalendars(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t CalStoreGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  __CFString *v9;
  int v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  int v14;
  __CFString *v15;
  int v16;
  __CFString *v17;
  int v18;
  __CFString *v19;
  int v20;
  __CFString *v21;
  int v22;
  __CFString *v23;
  int v24;
  __CFString *v25;
  int v26;
  __CFString *v27;
  int v28;
  __CFString *v29;
  int v30;
  __CFString *v31;
  int v32;
  __CFString *v33;
  int v34;
  __CFString *v35;
  int v36;
  __CFString *v37;
  int v38;
  __CFString *v39;
  int v40;
  __CFString *v41;
  int v42;
  __CFString *v43;
  int v44;
  __CFString *v45;
  int v46;
  __CFString *v47;
  int v48;
  __CFString *v49;
  int v50;
  __CFString *v51;
  int v52;
  __CFString *v53;
  int v54;
  __CFString *v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalStoreGetPropertyIDWithPropertyName_sPropDict;
  if (!CalStoreGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalStoreGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalStoreGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("UUID");
      v6 = 7;
      v7 = CFSTR("externalID");
      v8 = 6;
      v9 = CFSTR("title");
      v10 = 0;
      v11 = CFSTR("notes");
      v12 = 1;
      v13 = CFSTR("defaultAlarmOffset");
      v14 = 2;
      v15 = CFSTR("sourceTypeRaw");
      v16 = 3;
      v17 = CFSTR("disabled");
      v18 = 5;
      v19 = CFSTR("flags");
      v20 = 8;
      v21 = CFSTR("flags2");
      v22 = 28;
      v23 = CFSTR("creatorBundleID");
      v24 = 13;
      v25 = CFSTR("creatorCodeSigningIdentity");
      v26 = 14;
      v27 = CFSTR("onlyCreatorCanModify");
      v28 = 15;
      v29 = CFSTR("externalModificationTag");
      v30 = 16;
      v31 = CFSTR("preferredEventPrivateValueRaw");
      v32 = 18;
      v33 = CFSTR("strictestEventPrivateValueRaw");
      v34 = 19;
      v35 = CFSTR("constraintsName");
      v36 = 4;
      v37 = CFSTR("lastSyncStartDate");
      v38 = 20;
      v39 = CFSTR("lastSyncEndDate");
      v40 = 21;
      v41 = CFSTR("delegatedAccountOwnerStoreID");
      v42 = 24;
      v43 = CFSTR("showsNotifications");
      v44 = 27;
      v45 = CFSTR("displayOrder");
      v46 = 29;
      v47 = CFSTR("ownerName");
      v48 = 30;
      v49 = CFSTR("defaultAllDayAlarmOffset");
      v50 = 31;
      v51 = CFSTR("syncError");
      v52 = 33;
      v53 = CFSTR("cachedExternalInfoData");
      v54 = 34;
      v55 = CFSTR("appGroupIdentifier");
      v56 = 35;
      CalStoreGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 26);
      for (i = 400; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalStoreGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalStoreGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5CD8E6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 400; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

BOOL CalStoreSupportsTravelTime(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 0x8000);
}

BOOL CalStoreSupportsSubscriptionMirroring(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 4096);
}

BOOL CalStoreSupportsSubscriptionCalendars(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 8);
}

BOOL CalStoreSupportsSharedCalendars(uint64_t a1)
{
  return CalStoreGetFlag(a1, 32);
}

BOOL CalStoreSupportsRecurrenceSplit(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 1);
}

BOOL CalStoreSupportsPush(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 0x4000);
}

BOOL CalStoreSupportsPrivateEvents(uint64_t a1)
{
  return CalStoreGetFlag(a1, 1024);
}

BOOL CalStoreSupportsParticipantRoles(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 0x2000);
}

BOOL CalStoreSupportsManagedSubscriptionCalendars(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 1024);
}

BOOL CalStoreSupportsLocationDirectorySearches(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x20000);
}

BOOL CalStoreSupportsInvitationModificationsWithoutNotification(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 128);
}

BOOL CalStoreSupportsInboxAvailability(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 4);
}

BOOL CalStoreSupportsIgnoringEventsInAvailabilityRequests(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x80000);
}

BOOL CalStoreSupportsFloatingTimeZone(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 2);
}

BOOL CalStoreSupportsEventForwarding(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x200000);
}

BOOL CalStoreSupportsAvailabilityRequests(uint64_t a1)
{
  return CalStoreGetFlag(a1, 4096);
}

BOOL CalStoreSupportsAttachments(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x10000000);
}

BOOL CalStoreSnoozeAlarmRequiresDetach(uint64_t a1)
{
  return CalStoreGetFlag(a1, 256);
}

BOOL CalStoreShouldUseDeleteAndAddInsteadOfMoveBetweenCalendars(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 64);
}

BOOL CalStoreRequiresSamePrivacyLevelAcrossRecurrenceSeries(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x2000);
}

BOOL CalStoreRequiresOpeningAttachmentAsLink(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 32);
}

BOOL CalStoreRequiresOccurrencesConformToRecurrenceRule(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x100000);
}

BOOL CalStoreProhibitsYearlyRecurrenceInterval(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x10000);
}

BOOL CalStoreProhibitsUsingEventOrganizerEmailWhenComposingMail(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 16);
}

BOOL CalStoreProhibitsSlicingEventsWithAttendees(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x8000000);
}

BOOL CalStoreProhibitsPrivateEventsWithAttendees(uint64_t a1)
{
  return CalStoreGetFlag(a1, 2048);
}

BOOL CalStoreProhibitsMultipleMonthsInYearlyRecurrence(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x4000);
}

BOOL CalStoreProhibitsMultipleDaysInMonthlyRecurrence(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x8000);
}

BOOL CalStoreProhibitsDetachmentOnCommentChange(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x40000);
}

BOOL CalStoreGetSupportsPhoneNumbers(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x4000000);
}

BOOL CalStoreGetSupportsJunkReporting(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x2000000);
}

BOOL CalStoreGetProhibitsICSImport(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x800000);
}

BOOL CalStoreAllowsProposeNewTime(uint64_t a1)
{
  return CalStoreGetFlag(a1, 0x400000);
}

BOOL CalStoreAllowsPrivateEventAccessByDelegate(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 0x10000);
}

uint64_t _CalParticipantGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t CalCalendarItemGetRowID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

const __CFString *CalDatabaseGetAuxDatabaseChangesSequence(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const __CFString *IntegerProperty;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  IntegerProperty = _CalDatabaseGetIntegerProperty((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return IntegerProperty;
}

const __CFString *CalDatabaseSetRestoreGenerationChangedDelegate(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id WeakRetained;
  void *v6;
  const __CFString *IntegerProperty;

  v3 = a2;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], CFSTR("delegate must not be nil"), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "raise");

  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 304));

  if (WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("Attempting to register a restore generation delegate when there is already a registered delegate"), 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "raise");

  }
  objc_storeWeak((id *)(a1 + 304), v3);
  IntegerProperty = _CalDatabaseGetIntegerProperty(a1);
  *(_DWORD *)(a1 + 312) = (_DWORD)IntegerProperty;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));

  return IntegerProperty;
}

void sub_1A5CD920C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1A5CD9220(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1A5CD91C8);
}

const __CFString *_CalDatabaseGetIntegerProperty(uint64_t a1)
{
  const __CFString *result;
  const __CFString *v2;
  uint64_t IntValue;

  result = (const __CFString *)_CalDatabaseCopyProperty(a1);
  if (result)
  {
    v2 = result;
    IntValue = CFStringGetIntValue(result);
    CFRelease(v2);
    return (const __CFString *)IntValue;
  }
  return result;
}

uint64_t _CalDatabaseCopyProperty(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (!*(_QWORD *)(a1 + 24))
    return 0;
  if (CDBLockingAssertionsEnabled)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreCopyValueForProperty();
}

uint64_t CalStoreCopyDelegatedAccountOwnerStoreID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalStoreCopyDelegatedAccountOwnerStoreID(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalStoreCopyDelegatedAccountOwnerStoreID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalDatabaseCopyAllAuxDatabases(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalDatabaseCopyAllAuxDatabases((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalDatabaseCopyAllAuxDatabases(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreCopyAllInstancesOfClass();
}

void CalDatabaseSetPropertyModificationLoggingEnabled(uint64_t a1, char a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  *(_BYTE *)(a1 + 256) = a2;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
}

void CalScheduledTaskCacheDestroy(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  CFRelease(*(CFTypeRef *)(a1 + 32));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 56);
  if (v4)
    CFRelease(v4);
}

uint64_t CalShowDeclinedEvents()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = objc_alloc(MEMORY[0x1E0D0C368]);
  v1 = (void *)objc_msgSend(v0, "initWithDomain:", *MEMORY[0x1E0D0C508]);
  v2 = objc_msgSend(v1, "getBooleanPreference:defaultValue:", CFSTR("ShowDeclinedEvents"), 0);

  return v2;
}

void _CalDatabaseDestroy(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const os_unfair_lock *Context;
  uint64_t Database;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *LocalCenter;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  _CalDatabaseTrimConsumedSequences(a1);
  if (*(_QWORD *)(a1 + 24))
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    _CalDatabaseReportIntegrityErrors(Database);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, (const void *)a1);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, (const void *)a1);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
  {
    CalEventOccurrenceCacheInvalidate(v7);
    CFRelease(*(CFTypeRef *)(a1 + 32));
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    CalScheduledTaskCacheInvalidate(v8);
    CFRelease(*(CFTypeRef *)(a1 + 40));
  }
  v9 = *(const void **)(a1 + 104);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 96);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(a1 + 64);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 264);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 72);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 128);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(a1 + 48);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(a1 + 56);
  if (v16)
    CFRelease(v16);
  if (*(_QWORD *)(a1 + 24))
    CPRecordStoreDestroy();
  v17 = *(const void **)(a1 + 136);
  if (v17)
  {
    if (*(_BYTE *)(a1 + 380))
    {
      MEMORY[0x1A85B4648]();
      v17 = *(const void **)(a1 + 136);
    }
    CFRelease(v17);
  }
  v18 = *(const void **)(a1 + 144);
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(a1 + 152);
  if (v19)
    CFRelease(v19);
  v20 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;

  v21 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;

  v22 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;

  v23 = *(void **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = 0;

  pthread_mutex_lock((pthread_mutex_t *)(a1 + 192));
  if (*(_QWORD *)(a1 + 184))
  {
    v24 = (void *)MEMORY[0x1A85B52F0]();
    *(_QWORD *)(a1 + 184) = 0;
    CFRelease(v24);

  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 192));
  objc_storeWeak((id *)(a1 + 304), 0);
  objc_storeWeak((id *)(a1 + 320), 0);
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 192));
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

void _CalDatabaseTrimConsumedSequences(uint64_t a1)
{
  BOOL v2;
  const os_unfair_lock *Context;
  uint64_t Database;
  id v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  BOOL v9;
  const os_unfair_lock *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t RecordStore;
  const os_unfair_lock *v15;
  int SequenceNumber;
  NSObject *v17;
  _BOOL4 v18;
  id obj;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  _BYTE v30[128];
  _BYTE buf[24];
  void *v32;
  uint64_t *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 280))
  {
    if (CDBLockingAssertionsEnabled)
      v2 = *(_QWORD *)(a1 + 24) == 0;
    else
      v2 = 1;
    if (!v2)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    v5 = *(id *)(a1 + 280);
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    obj = v5;
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    if (v6)
    {
      v20 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v23 != v20)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
          if (CDBLockingAssertionsEnabled)
            v9 = Database == 0;
          else
            v9 = 1;
          if (!v9)
          {
            if (*(_QWORD *)(Database + 104))
            {
              v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10)
                os_unfair_lock_assert_owner(v10 + 20);
            }
          }
          v11 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
          v21 = -2;
          _CalDatabaseGetLatestConsumedSequenceNumberForClient(v11, v8, &v21);
          v12 = v21;
          v26 = 0;
          v27 = &v26;
          v28 = 0x2020000000;
          v29 = 0x7FFFFFFF;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___CalDatabaseGetLastSequenceNumberWithAllChangesConsumed_block_invoke;
          v32 = &unk_1E4F906B0;
          v33 = &v26;
          _CalDatabaseEnumerateUnconsumedObjectChangesForClient(a1, v8, v21, 1, buf);
          v13 = *((_DWORD *)v27 + 6);
          if (v13 == 0x7FFFFFFF)
          {
            RecordStore = _CalDatabaseGetRecordStore(a1);
            if (CDBLockingAssertionsEnabled)
            {
              if (RecordStore)
              {
                v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v15)
                  os_unfair_lock_assert_owner(v15 + 20);
              }
            }
            SequenceNumber = CPRecordStoreGetSequenceNumber();
          }
          else
          {
            SequenceNumber = v13 - 1;
          }
          _Block_object_dispose(&v26, 8);
          v17 = CDBLogHandle;
          v18 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
          if (SequenceNumber <= v12)
          {
            if (v18)
            {
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)&buf[4] = v8;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              _os_log_impl(&dword_1A5CCB000, v17, OS_LOG_TYPE_DEBUG, "Client cursor for %@ is still %i.", buf, 0x12u);
            }
          }
          else
          {
            if (v18)
            {
              *(_DWORD *)buf = 138412802;
              *(_QWORD *)&buf[4] = v8;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v12;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = SequenceNumber;
              _os_log_impl(&dword_1A5CCB000, v17, OS_LOG_TYPE_DEBUG, "Moving client cursor for %@ forward from %i to %i because all changes in those sequences have been individually consumed.", buf, 0x18u);
            }
            _CalDatabaseClearChangedObjectIDsUpToSequenceNumberForClient(a1, v8, SequenceNumber);
          }
        }
        v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      }
      while (v6);
    }

    CFRelease(*(CFTypeRef *)(a1 + 280));
    *(_QWORD *)(a1 + 280) = 0;

  }
}

void sub_1A5CD9A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _CalDatabaseReportIntegrityErrors(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  unint64_t v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  objc_class *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[2];
  _QWORD v37[2];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  _CalDatabaseGetErrorsForDatabase(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "errors");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    _CalDatabaseSetErrorsForDatabase(a1, 0);
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v4, "count"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
    if (v7)
    {
      v8 = v7;
      v29 = v3;
      v9 = 0;
      v31 = 0;
      v10 = *(_QWORD *)v33;
      v11 = *MEMORY[0x1E0DB0010];
      v12 = *MEMORY[0x1E0DB0018];
      v30 = v5;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v33 != v10)
            objc_enumerationMutation(v6);
          v14 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
          v15 = v6;
          v16 = objc_msgSend(v6, "countForObject:", v14);
          if (v16 > v9)
          {
            v17 = v14;

            v9 = v16;
            v31 = v17;
            v5 = v30;
          }
          v36[1] = v12;
          v37[0] = v14;
          v36[0] = v11;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v16);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v37[1] = v18;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, v36, 2);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "addObject:", v19);

          v6 = v15;
        }
        v8 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
      }
      while (v8);

      v20 = v31;
      if (!v31)
      {
        v3 = v29;
LABEL_19:

        goto LABEL_20;
      }
      v3 = v29;
      objc_msgSend(v29, "delegate");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (v21)
      {
        v22 = v5;
        v23 = v31;
        objc_msgSend(v21, "reportIntegrityErrors:", v22);
      }
      else
      {
        v24 = (objc_class *)MEMORY[0x1E0D0C230];
        v25 = v5;
        v26 = v31;
        v27 = [v24 alloc];
        v28 = v26;
        v5 = v30;
        v22 = (id)objc_msgSend(v27, "initWithType:subtype:context:", CFSTR("Database"), CFSTR("Integrity"), v28);
        objc_msgSend(v22, "setEvents:", v25);

        v6 = v15;
        objc_msgSend(v22, "report");
      }

    }
    else
    {
      v20 = 0;
      v21 = v6;
    }

    goto LABEL_19;
  }
LABEL_20:

}

id _CalDatabaseGetErrorsForDatabase(uint64_t a1)
{
  void *v2;

  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  objc_msgSend((id)table, "objectForKey:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);
  return v2;
}

uint64_t CalEventOccurrenceCacheInvalidate(uint64_t result)
{
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t CalScheduledTaskCacheInvalidate(uint64_t result)
{
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t CalDatabaseCreateWithConfiguration(void *a1)
{
  id v1;
  NSObject *v2;
  uint64_t Instance;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  NSObject *v13;
  int v14;
  void *v15;
  void *IfNeeded;
  void *v17;
  uint64_t v18;
  void *v19;
  const __CFString *v20;
  __CFString *MutableCopy;
  __CFString *v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v28;
  const os_unfair_lock *v29;
  _BOOL4 v30;
  const os_unfair_lock *v31;
  _BOOL4 v32;
  const os_unfair_lock *v33;
  const os_unfair_lock *v34;
  const os_unfair_lock *v35;
  _BOOL4 v36;
  const os_unfair_lock *v37;
  _BOOL4 v38;
  const os_unfair_lock *v39;
  _BOOL4 v40;
  const os_unfair_lock *v41;
  _BOOL4 v42;
  const os_unfair_lock *v43;
  _BOOL4 v44;
  const os_unfair_lock *v45;
  void *v46;
  void *v47;
  void *v48;
  char v49;
  const os_unfair_lock *v50;
  const os_unfair_lock *v51;
  uint64_t v52;
  const os_unfair_lock *v53;
  _BOOL4 v54;
  const os_unfair_lock *v55;
  _BOOL4 v56;
  const os_unfair_lock *v57;
  uint64_t v58;
  int v59;
  _BOOL4 v60;
  const os_unfair_lock *v61;
  _BOOL4 v62;
  const os_unfair_lock *v63;
  uint64_t v64;
  int v65;
  NSObject *v66;
  uint64_t v67;
  const os_unfair_lock *v68;
  const os_unfair_lock *v69;
  const os_unfair_lock *v70;
  NSObject *v71;
  const os_unfair_lock *v72;
  uint64_t v73;
  uint64_t v74;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *LocalCenter;
  uint64_t v77;
  void *v78;
  void *v79;
  const void *v80;
  void *v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  NSObject *v86;
  NSObject *v87;
  NSObject *v88;
  int v90;
  void *v91;
  id obj;
  void *v93;
  id v94;
  id location;
  uint8_t buf[4];
  _DWORD v97[7];

  *(_QWORD *)&v97[5] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  CDBLogInitIfNeeded();
  if (CalDatabaseCreateWithConfiguration_onceToken != -1)
    dispatch_once(&CalDatabaseCreateWithConfiguration_onceToken, &__block_literal_global_57);
  v2 = (id)CDBLogHandle;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v97 = v1;
    _os_log_impl(&dword_1A5CCB000, v2, OS_LOG_TYPE_DEBUG, "Creating database with configuration: [%@]", buf, 0xCu);
  }

  pthread_once(&__CalDatabaseRegisterOnce, (void (*)(void))CalDatabaseRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  v4 = objc_msgSend(v1, "options");
  if ((v4 & 0x30) == 0x10)
    v5 = v4 & 0xFFFFFFEF;
  else
    v5 = v4;
  if ((v5 & 0x81) == 0)
  {
    if (CalDatabaseIsCurrentProcessCalaccessd_onceToken != -1)
      dispatch_once(&CalDatabaseIsCurrentProcessCalaccessd_onceToken, &__block_literal_global_49);
    if (CalDatabaseIsCurrentProcessCalaccessd_isCalaccessd)
      CalDatabasePerformMigrationIfNeeded();
    else
      CalDatabaseMigrateIfNeededOutOfProcess();
  }
  *(_DWORD *)(Instance + 80) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(Instance + 80));
  *(_QWORD *)(Instance + 24) = 0;
  v6 = (uint64_t *)(Instance + 24);
  *(_DWORD *)(Instance + 84) = 0;
  *(_DWORD *)(Instance + 88) = 0;
  *(_QWORD *)(Instance + 32) = 0;
  *(_QWORD *)(Instance + 40) = 0;
  *(_QWORD *)(Instance + 120) = 0xFFFFFFFF00000000;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_QWORD *)(Instance + 96) = 0;
  *(_QWORD *)(Instance + 104) = 0;
  *(_DWORD *)(Instance + 176) = -1;
  *(_DWORD *)(Instance + 16) = v5;
  *(_OWORD *)(Instance + 200) = 0u;
  *(_OWORD *)(Instance + 216) = 0u;
  *(_OWORD *)(Instance + 232) = 0u;
  *(_QWORD *)(Instance + 248) = 0;
  *(_QWORD *)(Instance + 184) = 0;
  *(_QWORD *)(Instance + 192) = 850045858;
  *(_BYTE *)(Instance + 256) = 1;
  *(_WORD *)(Instance + 376) = 0;
  objc_storeWeak((id *)(Instance + 304), 0);
  objc_storeWeak((id *)(Instance + 320), 0);
  *(_DWORD *)(Instance + 312) = -1;
  *(_QWORD *)(Instance + 160) = CalMonotonicTime();
  *(_DWORD *)(Instance + 168) = 0;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = *(void **)(Instance + 328);
  *(_QWORD *)(Instance + 328) = v7;

  *(_BYTE *)(Instance + 378) = (v5 & 0x800) != 0;
  *(_QWORD *)(Instance + 352) = 0xFFFFLL;
  *(_DWORD *)(Instance + 360) = -1;
  objc_msgSend(v1, "directoryURL");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = v9;
  v10 = v9;
  if (v9)
  {
    v11 = objc_msgSend(v9, "startAccessingSecurityScopedResource");
    v10 = v93;
  }
  else
  {
    v11 = 0;
  }
  *(_BYTE *)(Instance + 380) = v11;
  objc_msgSend(v10, "path");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringByAppendingString:", CFSTR("/"));
  v91 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(MEMORY[0x1E0D0C3D0], "isRunningAsSetupUser"))
  {
    v13 = (id)CDBLogHandle;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "Forcing in-memory database because we are running as the setup user. No changes will be saved.", buf, 2u);
    }

    v14 = 1;
  }
  else
  {
    v14 = (v5 >> 5) & 1;
  }
  objc_msgSend(v1, "preferences");
  obj = (id)objc_claimAutoreleasedReturnValue();
  if (!obj)
  {
    if ((v14 & 1) == 0)
    {
      +[CDBPreferences sharedReadWrite](CDBPreferences, "sharedReadWrite");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      obj = v17;

      objc_storeStrong((id *)(Instance + 296), v17);
      goto LABEL_29;
    }
    +[CDBPreferences sharedReadOnly](CDBPreferences, "sharedReadOnly");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    obj = v15;

    objc_storeStrong((id *)(Instance + 296), v15);
LABEL_27:
    IfNeeded = (void *)CFRetain(CFSTR(":memory:"));
LABEL_33:
    *(_QWORD *)(Instance + 128) = IfNeeded;
    goto LABEL_34;
  }
  objc_storeStrong((id *)(Instance + 296), obj);
  if (v14)
    goto LABEL_27;
LABEL_29:
  if (!v91)
  {
    IfNeeded = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(0, 1);
    goto LABEL_33;
  }
  *(_QWORD *)(Instance + 128) = v91;
  if ((v5 & 0x1000) != 0)
  {
    objc_msgSend(v93, "URLByAppendingPathComponent:", *MEMORY[0x1E0D0C470]);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "path");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = objc_msgSend(v47, "fileExistsAtPath:", v48);

    if ((v49 & 1) == 0)
    {
      v88 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v97 = v93;
        _os_log_impl(&dword_1A5CCB000, v88, OS_LOG_TYPE_DEFAULT, "Failing to create with path %@ because no database exists at that location and we were told not to make one.", buf, 0xCu);
      }
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner((const os_unfair_lock *)(Instance + 80));
      os_unfair_lock_unlock((os_unfair_lock_t)(Instance + 80));
      CFRelease((CFTypeRef)Instance);

      goto LABEL_222;
    }

  }
  else
  {
    CPFileBuildDirectoriesToPath();
  }
LABEL_34:
  +[CalDatabaseWriteLock writeLockForDatabasePath:](CalDatabaseWriteLock, "writeLockForDatabasePath:", *(_QWORD *)(Instance + 128));
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = *(void **)(Instance + 336);
  *(_QWORD *)(Instance + 336) = v18;

  v20 = *(const __CFString **)(Instance + 128);
  if (!v20)
  {
    v24 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      goto LABEL_186;
    *(_WORD *)buf = 0;
    v25 = "Couldn't get the path to the calendar database.";
LABEL_185:
    _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_ERROR, v25, buf, 2u);
    goto LABEL_186;
  }
  if (CFStringCompare(v20, CFSTR(":memory:"), 0) == kCFCompareEqualTo)
  {
    v23 = CPRecordStoreCreateWithPathAndOptions();
    if (!v23)
      goto LABEL_186;
    goto LABEL_42;
  }
  MutableCopy = CFStringCreateMutableCopy(0, 0, *(CFStringRef *)(Instance + 128));
  v22 = MutableCopy;
  if (!MutableCopy)
  {
    v24 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      goto LABEL_186;
    *(_WORD *)buf = 0;
    v25 = "Couldn't construct a path to the calendar database.";
    goto LABEL_185;
  }
  CFStringAppend(MutableCopy, (CFStringRef)*MEMORY[0x1E0D0C470]);
  v23 = CPRecordStoreCreateWithPathAndOptions();
  CFRelease(v22);
  if (!v23)
  {
LABEL_186:
    *v6 = 0;
    v71 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v71, OS_LOG_TYPE_ERROR, "Couldn't create calendar database at default path.", buf, 2u);
    }
    goto LABEL_188;
  }
LABEL_42:
  if (CDBLockingAssertionsEnabled)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  v28 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29)
          os_unfair_lock_assert_owner(v29 + 20);
      }
    }
  }
  CPSqliteDatabaseSetShouldMigrateInProcess();
  if (CDBLockingAssertionsEnabled)
    v30 = v28 != 0;
  else
    v30 = 0;
  if (v30)
  {
    if (*(_QWORD *)(v28 + 104))
    {
      v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v31)
        os_unfair_lock_assert_owner(v31 + 20);
    }
  }
  CPSqliteDatabaseSetMigrationPluginBundleID();
  CPRecordStoreLogChanges();
  CPRecordStoreSetSetupHandler();
  if (CDBLockingAssertionsEnabled)
    v32 = v28 != 0;
  else
    v32 = 0;
  if (v32)
  {
    if (*(_QWORD *)(v28 + 104))
    {
      v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v33)
        os_unfair_lock_assert_owner(v33 + 20);
    }
  }
  CPSqliteDatabaseSetMigrationHandlers();
  if ((v5 & 0x400) != 0)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (v28)
      {
        if (*(_QWORD *)(v28 + 104))
        {
          v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v34)
            os_unfair_lock_assert_owner(v34 + 20);
        }
      }
    }
    CPSqliteDatabaseSetExternalConversionChecker();
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (v28)
    {
      if (*(_QWORD *)(v28 + 104))
      {
        v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35)
          os_unfair_lock_assert_owner(v35 + 20);
      }
    }
  }
  CPSqliteDatabaseSetVersion();
  if (CDBLockingAssertionsEnabled)
    v36 = v28 != 0;
  else
    v36 = 0;
  if (v36)
  {
    if (*(_QWORD *)(v28 + 104))
    {
      v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v37)
        os_unfair_lock_assert_owner(v37 + 20);
    }
  }
  CPSqliteDatabaseSetAutoVacuumLevel();
  if (CDBLockingAssertionsEnabled)
    v38 = v28 != 0;
  else
    v38 = 0;
  if (v38)
  {
    if (*(_QWORD *)(v28 + 104))
    {
      v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v39)
        os_unfair_lock_assert_owner(v39 + 20);
    }
  }
  CPSqliteDatabaseSetJournalModeWAL();
  if (CDBLockingAssertionsEnabled)
    v40 = v28 != 0;
  else
    v40 = 0;
  if (v40)
  {
    if (*(_QWORD *)(v28 + 104))
    {
      v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v41)
        os_unfair_lock_assert_owner(v41 + 20);
    }
  }
  CPSqliteDatabaseSetStatementCacheLimit();
  if (CDBLockingAssertionsEnabled)
    v42 = v28 != 0;
  else
    v42 = 0;
  if (v42)
  {
    if (*(_QWORD *)(v28 + 104))
    {
      v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v43)
        os_unfair_lock_assert_owner(v43 + 20);
    }
  }
  CPSqliteDatabaseSetDataProtectionLevel();
  if (CDBLockingAssertionsEnabled)
    v44 = v28 != 0;
  else
    v44 = 0;
  if ((v5 & 2) != 0)
  {
    if (v44)
    {
      if (*(_QWORD *)(v28 + 104))
      {
        v50 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v50)
          os_unfair_lock_assert_owner(v50 + 20);
      }
    }
    CPSqliteDatabaseSetShouldYieldWhenRequested();
  }
  else
  {
    if (v44)
    {
      if (*(_QWORD *)(v28 + 104))
      {
        v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v45)
          os_unfair_lock_assert_owner(v45 + 20);
      }
    }
    CPSqliteDatabaseSetShouldRequestUnlock();
  }
  *v6 = v23;
  if (CDBLockingAssertionsEnabled)
  {
    v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v51)
      os_unfair_lock_assert_owner(v51 + 20);
  }
  v52 = CPRecordStoreGetDatabase();
  CPRecordStoreSetContext();
  if (CDBLockingAssertionsEnabled)
  {
    if (v52)
    {
      if (*(_QWORD *)(v52 + 104))
      {
        v53 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v53)
          os_unfair_lock_assert_owner(v53 + 20);
      }
    }
  }
  CPSqliteDatabaseSetCorruptionHandler();
  if (CDBLockingAssertionsEnabled)
    v54 = v52 != 0;
  else
    v54 = 0;
  if (v54)
  {
    if (*(_QWORD *)(v52 + 104))
    {
      v55 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v55)
        os_unfair_lock_assert_owner(v55 + 20);
    }
  }
  CPSqliteDatabaseSetCommitHookCallback();
  if (CDBLockingAssertionsEnabled)
    v56 = v52 != 0;
  else
    v56 = 0;
  if ((v5 & 0x40) != 0)
  {
    if (v56)
    {
      if (*(_QWORD *)(v52 + 104))
      {
        v70 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v70)
          os_unfair_lock_assert_owner(v70 + 20);
      }
    }
    CPSqliteDatabaseSetSupportsReadOnlyConnections();
  }
  else
  {
    if (v56)
    {
      if (*(_QWORD *)(v52 + 104))
      {
        v57 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v57)
          os_unfair_lock_assert_owner(v57 + 20);
      }
    }
    CPSqliteDatabaseSetDatabaseDeletedCallback();
    v58 = objc_msgSend(*(id *)(Instance + 296), "get_sqlProfileLoggingEnabled");
    v59 = ct_green_tea_logging_enabled();
    CalDatabaseSetProfilingEnabled(Instance, v58, v59, 0);
    objc_initWeak(&location, (id)Instance);
    if (CDBLockingAssertionsEnabled)
      v60 = v52 != 0;
    else
      v60 = 0;
    if (v60)
    {
      if (*(_QWORD *)(v52 + 104))
      {
        v61 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v61)
          os_unfair_lock_assert_owner(v61 + 20);
      }
    }
    objc_copyWeak(&v94, &location);
    CPSqliteRegisterYieldNotifyBlock();
    objc_destroyWeak(&v94);
    if (CDBLockingAssertionsEnabled)
      v62 = v52 != 0;
    else
      v62 = 0;
    if (v62)
    {
      if (*(_QWORD *)(v52 + 104))
      {
        v63 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v63)
          os_unfair_lock_assert_owner(v63 + 20);
      }
    }
    v64 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlagsAndReturnError();
    v65 = (*(_BYTE *)(Instance + 377) != 0) & (v5 >> 8);
    if (v64)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v64)
        {
          if (*(_QWORD *)(*(_QWORD *)v64 + 104))
          {
            v68 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v68)
              os_unfair_lock_assert_owner(v68 + 20);
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
    }
    else
    {
      v90 = (*(_BYTE *)(Instance + 377) != 0) & (v5 >> 8);
      v66 = (id)CDBLogHandle;
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        v67 = *(_QWORD *)(Instance + 128);
        *(_DWORD *)buf = 67109378;
        v97[0] = 0;
        LOWORD(v97[1]) = 2112;
        *(_QWORD *)((char *)&v97[1] + 2) = v67;
        _os_log_impl(&dword_1A5CCB000, v66, OS_LOG_TYPE_ERROR, "Error [%d] opening a connection to the calendar database at [%@]", buf, 0x12u);
      }

      v65 = v90;
      if ((v5 & 0x200) != 0)
        v65 = 1;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (v52)
      {
        if (*(_QWORD *)(v52 + 104))
        {
          v69 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v69)
            os_unfair_lock_assert_owner(v69 + 20);
        }
      }
    }
    CPSqliteDatabaseSetStatementCompileErrorCallback();
    objc_destroyWeak(&location);
    if (v65)
    {
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner((const os_unfair_lock *)(Instance + 80));
      os_unfair_lock_unlock((os_unfair_lock_t)(Instance + 80));
      CFRelease((CFTypeRef)Instance);
LABEL_222:
      Instance = 0;
LABEL_223:
      v85 = obj;
      goto LABEL_224;
    }
  }
LABEL_188:
  if (CDBLockingAssertionsEnabled)
  {
    if (*v6)
    {
      v72 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v72)
        os_unfair_lock_assert_owner(v72 + 20);
    }
  }
  v73 = CPRecordStoreGetDatabase();
  v74 = *(_QWORD *)(v73 + 8);
  if (v74 || (v74 = *(_QWORD *)(v73 + 280)) != 0)
  {
    sqlite3_rollback_hook(*(sqlite3 **)(v74 + 8), (void (__cdecl *)(void *))_CalDatabaseRollbackHook, (void *)Instance);
  }
  else
  {
    v87 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v87, OS_LOG_TYPE_ERROR, "No existing database handle while setting rollback hook callback.", buf, 2u);
    }
  }
  _CalAttachmentFileRegisterFunctionsWithDatabase(Instance);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  if (!_CalDatabaseShouldPostInProcessChangeNotification(Instance))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, (const void *)Instance, (CFNotificationCallback)_CalDatabaseChangedExternally, CFSTR("_CalDatabaseChangedNotification"), 0, CFNotificationSuspensionBehaviorDrop);
    CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)Instance, (CFNotificationCallback)_CalDatabaseChangedExternally, CFSTR("_CalDatabaseChangedNotification"), 0, CFNotificationSuspensionBehaviorDrop);
  }
  CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)Instance, (CFNotificationCallback)CalDatabaseReceivedSQLProfileLoggingEnabledNotification, CFSTR("com.apple.calendar.database.preference.notification.sqlProfileLoggingEnabled"), 0, CFNotificationSuspensionBehaviorDrop);
  CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)Instance, (CFNotificationCallback)CalDatabaseReceivedGreenTeaLoggingEnabledNotification, CFSTR("com.apple.ManagedConfiguration.profileListChanged"), 0, CFNotificationSuspensionBehaviorDrop);
  os_unfair_lock_lock((os_unfair_lock_t)&__GlobalLock);
  if (!__ValidDatabases)
  {
    v77 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3690]), "initWithOptions:capacity:", 261, 16);
    v78 = (void *)__ValidDatabases;
    __ValidDatabases = v77;

  }
  v79 = (void *)MEMORY[0x1A85B514C]();
  objc_msgSend((id)__ValidDatabases, "addObject:", Instance);
  objc_autoreleasePoolPop(v79);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner((const os_unfair_lock *)&__GlobalLock);
  os_unfair_lock_unlock((os_unfair_lock_t)&__GlobalLock);
  if ((v5 & 0x10) == 0)
  {
    v80 = (const void *)CalCopyTimeZone();
    *(_QWORD *)(Instance + 32) = CalEventOccurrenceCacheCreateForDatabase(Instance);
    *(_QWORD *)(Instance + 40) = CalScheduledTaskCacheCreateForDatabase(Instance, v80);
    CFRelease(v80);
  }
  objc_msgSend(v1, "dataContainerProvider");
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v82 = v81;
  if (v81)
  {
    v83 = v81;
    v84 = *(void **)(Instance + 288);
    *(_QWORD *)(Instance + 288) = v83;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D0C3E0], "sharedInstance");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)(Instance + 288), v84);
  }

  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner((const os_unfair_lock *)(Instance + 80));
  os_unfair_lock_unlock((os_unfair_lock_t)(Instance + 80));
  v85 = obj;
  if ((v5 & 1) != 0)
  {
    if (CalDatabaseCleanUpAttachmentsRemovedDuringMigration_onceToken != -1)
      dispatch_once(&CalDatabaseCleanUpAttachmentsRemovedDuringMigration_onceToken, &__block_literal_global_287);
    if (CalDatabaseCleanUpAttachmentsRemovedDuringMigration_cleanupRequired)
    {
      v86 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A5CCB000, v86, OS_LOG_TYPE_DEFAULT, "Migration caused some attachments to be removed from the database. Going to try to find any leftover files and remove them now.", buf, 2u);
      }
      CalDatabaseCleanUpOrphanedLocalAttachments((os_unfair_lock_s *)Instance);
      goto LABEL_223;
    }
  }
LABEL_224:

  return Instance;
}

void sub_1A5CDAEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void CalDatabaseSetProfilingEnabled(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL v7;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v10;
  NSObject *v11;
  uint8_t v12[16];

  if (a1)
  {
    if (a4)
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
    if (CDBLockingAssertionsEnabled)
      v7 = *(_QWORD *)(a1 + 24) == 0;
    else
      v7 = 1;
    if (!v7)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (a3)
      CalDatabaseCopyClientName(a1, 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (Database)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPSqliteDatabaseSetProfileCallbackWithContext();
    if (a4)
      CalDatabaseUnlockForThread((const os_unfair_lock *)a1);
  }
  else
  {
    v11 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1A5CCB000, v11, OS_LOG_TYPE_ERROR, "No 'database' given.  Will not adjust profile logging.", v12, 2u);
    }
  }
}

__CFString *CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(uint64_t a1, int a2)
{
  const void *v3;
  const __CFString *v5;
  __CFString *MutableCopy;

  if (a1)
  {
    v3 = *(const void **)(a1 + 128);
    if (v3)
      return (__CFString *)CFRetain(v3);
  }
  v5 = (const __CFString *)CPSharedResourcesDirectory();
  if (!v5)
    return 0;
  MutableCopy = CFStringCreateMutableCopy(0, 0, v5);
  CFStringAppend(MutableCopy, (CFStringRef)*MEMORY[0x1E0D0C478]);
  if (a2)
    CPFileBuildDirectoriesToPath();
  return MutableCopy;
}

uint64_t CalScheduledTaskCacheCreateForDatabase(uint64_t a1, const void *a2)
{
  uint64_t Instance;
  CFTypeRef v5;

  pthread_once(&__CalScheduledTaskCacheRegisterOnce, (void (*)(void))CalScheduledTaskCacheRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 24) = a1;
  v5 = CFRetain(a2);
  *(_BYTE *)(Instance + 16) = 1;
  *(_QWORD *)(Instance + 32) = v5;
  *(_QWORD *)(Instance + 40) = 0;
  *(_QWORD *)(Instance + 48) = 0;
  *(_QWORD *)(Instance + 56) = 0;
  return Instance;
}

uint64_t CalEventOccurrenceCacheCreateForDatabase(uint64_t a1)
{
  uint64_t result;

  pthread_once(&__CalEventOccurrenceCacheRegisterOnce, (void (*)(void))CalEventOccurrenceCacheRegisterClass);
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  *(_BYTE *)(result + 16) = 1;
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  return result;
}

uint64_t CalDatabasePerformMigrationIfNeeded()
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0D0C2D8], "hasBeenUnlockedSinceBoot");
  if ((_DWORD)result)
  {
    if ((objc_msgSend(MEMORY[0x1E0D0C3D0], "isRunningAsSetupUser") & 1) != 0)
    {
      return 0;
    }
    else
    {
      if (CalDatabasePerformMigrationIfNeeded_onceToken != -1)
        dispatch_once(&CalDatabasePerformMigrationIfNeeded_onceToken, &__block_literal_global_97);
      return 1;
    }
  }
  return result;
}

void CDBLogInitIfNeeded()
{
  if (CDBLogInitIfNeeded_onceToken != -1)
    dispatch_once(&CDBLogInitIfNeeded_onceToken, &__block_literal_global_6);
}

void _CalAttachmentFileRegisterFunctionsWithDatabase(uint64_t a1)
{
  uint64_t RecordStore;
  uint64_t v2;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v6;
  const os_unfair_lock *v7;
  uint64_t v8;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  v2 = RecordStore;
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v6 = Database == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  v8 = CPSqliteDatabaseConnectionForReading();
  if (v8)
    _CalAttachmentFileRegisterFunctions(v2, v8);
}

void CalDatabaseSetClientName(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;
  const void *v5;
  CFTypeRef v6;
  uint64_t v7;
  int v8;

  v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v5 = *(const void **)(a1 + 152);
  if (v5 != a2)
  {
    if (v5)
      CFRelease(v5);
    if (a2)
      v6 = CFRetain(a2);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 152) = v6;
  }
  v7 = objc_msgSend(*(id *)(a1 + 296), "get_sqlProfileLoggingEnabled");
  v8 = ct_green_tea_logging_enabled();
  CalDatabaseSetProfilingEnabled(a1, v7, v8, 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
}

uint64_t CalDatabaseNextInMemoryChangeTrackingClientID()
{
  unsigned int v0;

  do
    v0 = __ldxr((unsigned int *)&CalDatabaseNextInMemoryChangeTrackingClientID_sNextID);
  while (__stxr(v0 + 1, (unsigned int *)&CalDatabaseNextInMemoryChangeTrackingClientID_sNextID));
  return v0 & 0x1FFFFF;
}

__CFString *CalDatabaseCopyDirectoryPathForDatabase(uint64_t a1)
{
  return CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(a1, 1);
}

void _CalAttachmentFileRegisterFunctions(uint64_t a1, uint64_t a2)
{
  void *Context;
  int function;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  Context = (void *)CPRecordStoreGetContext();
  function = sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalNoteAttachmentDeleted", 2, 1, Context, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalAttachmentFileNoteAttachmentDeleted, 0, 0);
  if (function)
  {
    v5 = function;
    v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v10 = 67109120;
      v11 = v5;
      _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "Error adding CalNoteAttachmentDeleted function: %i", (uint8_t *)&v10, 8u);
    }
  }
  v7 = sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalNoteStoreDeleted", 3, 1, Context, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalAttachmentFileNoteStoreDeleted, 0, 0);
  if (v7)
  {
    v8 = v7;
    v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v10 = 67109120;
      v11 = v8;
      _os_log_impl(&dword_1A5CCB000, v9, OS_LOG_TYPE_ERROR, "Error adding CalNoteStoreDeleted function: %i", (uint8_t *)&v10, 8u);
    }
  }
}

__CFArray *CalDatabaseCopyEventOccurrencesInDateRangeEx(os_unfair_lock_s *a1, void *a2, void *a3, void *a4, void *a5)
{
  return _CalDatabaseCopyEventOccurrencesInDateRangeInternal(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t CalStoreGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalDatabaseSetClientIdentifier(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;
  const void *v5;
  CFTypeRef v6;

  v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v5 = *(const void **)(a1 + 144);
  if (v5 != a2)
  {
    if (v5)
      CFRelease(v5);
    if (a2)
      v6 = CFRetain(a2);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 144) = v6;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
}

void CalToManyRelationDestroy(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = (const void *)a1[10];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[11];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[12];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[4];
  if (v6)
    CFRelease(v6);
}

uint64_t CalStoreSupportsAlarmTriggerIntervals(uint64_t a1)
{
  return CalStoreSupportsAlarmTriggerKey(a1, CFSTR("Interval"));
}

uint64_t CalStoreSupportsAlarmTriggerDates(uint64_t a1)
{
  return CalStoreSupportsAlarmTriggerKey(a1, CFSTR("Absolute"));
}

void CalEventOccurrenceCacheDestroy(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  v2 = (void *)a1[4];
  a1[4] = 0;

  v3 = (void *)a1[5];
  a1[5] = 0;

  v4 = (void *)a1[6];
  a1[6] = 0;

  v5 = (void *)a1[7];
  a1[7] = 0;

  v6 = (void *)a1[8];
  a1[8] = 0;

  v7 = (const void *)a1[11];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)a1[12];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)a1[13];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)a1[14];
  if (v10)
    CFRelease(v10);
  v11 = (const void *)a1[15];
  if (v11)
    CFRelease(v11);
  v12 = (const void *)a1[16];
  if (v12)
    CFRelease(v12);
  v13 = (const void *)a1[17];
  if (v13)
    CFRelease(v13);
}

uint64_t CalStoreGetType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

uint64_t CalEventGetInvitationChangedProperties(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t InvitationChangedProperties;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  InvitationChangedProperties = _CalEventGetInvitationChangedProperties(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return InvitationChangedProperties;
}

uint64_t _CalEventGetInvitationChangedProperties(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

void CalRelationDestroy(uint64_t a1)
{
  const void *v2;
  void *v3;
  const void *v4;

  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 72));
  *(_QWORD *)(a1 + 16) = 0;
  v2 = *(const void **)(a1 + 56);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      CFRelease(v2);
    }
    else
    {
      CDBGetCommonEntityFunctionalityHandler(v2, 0, 0);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "removeDestructionObserver:", a1);

    }
    *(_QWORD *)(a1 + 56) = 0;
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

const void *CalEventCopyUniqueIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *UniqueIdentifier;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  UniqueIdentifier = (const void *)_CalEventGetUniqueIdentifier(a1);
  v4 = UniqueIdentifier;
  if (UniqueIdentifier)
    CFRetain(UniqueIdentifier);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalEventGetUniqueIdentifier(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

void _CalParticipantLoadIdentityProperties(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Store;
  uint64_t IdentityWithRowID;
  uint64_t v5;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const void *v10;
  const os_unfair_lock *v11;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    Store = CPRecordGetStore();
    IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      v9 = _CalIdentityCopyAddress(v5);
      if (v9)
      {
        v10 = (const void *)v9;
        if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
        CPRecordInitializeProperty();
        CFRelease(v10);
      }
    }
  }
}

uint64_t _CalIdentityGetLastName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalIdentityGetFirstName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalIdentityGetDisplayName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalIdentityCopyAddress(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t _CalGetIdentityWithRowID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

CFMutableArrayRef CalCalendarItemCopyRecurrences(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyRecurrences(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFMutableArrayRef _CalCalendarItemCopyRecurrences(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

uint64_t CalRecurrenceGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  __CFString *v9;
  int v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  int v14;
  __CFString *v15;
  int v16;
  __CFString *v17;
  int v18;
  __CFString *v19;
  int v20;
  __CFString *v21;
  int v22;
  __CFString *v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalRecurrenceGetPropertyIDWithPropertyName_sPropDict;
  if (!CalRecurrenceGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalRecurrenceGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalRecurrenceGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("UUID");
      v6 = 26;
      v7 = CFSTR("owner");
      v8 = 24;
      v9 = CFSTR("frequencyRaw");
      v10 = 0;
      v11 = CFSTR("interval");
      v12 = 1;
      v13 = CFSTR("endDate");
      v14 = 6;
      v15 = CFSTR("count");
      v16 = 3;
      v17 = CFSTR("cachedEndDate");
      v18 = 4;
      v19 = CFSTR("cachedEndDateTimeZone");
      v20 = 5;
      v21 = CFSTR("specifier");
      v22 = 7;
      v23 = CFSTR("firstDayOfTheWeekRaw");
      v24 = 2;
      CalRecurrenceGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 10);
      for (i = 144; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalRecurrenceGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalRecurrenceGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5CDC4D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 144; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t _DisabledStoreRowidHandler(uint64_t a1, CFMutableStringRef *a2)
{
  uint64_t v3;
  __CFString *Mutable;

  v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  if (*a2)
  {
    CFStringAppendFormat(*a2, 0, CFSTR(", %d"), v3);
  }
  else
  {
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    *a2 = Mutable;
    CFStringAppendFormat(Mutable, 0, CFSTR("(%d"), v3);
  }
  return 0;
}

const void *CalDatabaseCopyNaturalLanguageSuggestionsCalendar(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *NaturalLanguageSuggestionsCalendar;
  const void *v4;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  NaturalLanguageSuggestionsCalendar = (const void *)_CalDatabaseGetNaturalLanguageSuggestionsCalendar((uint64_t)a1);
  v4 = NaturalLanguageSuggestionsCalendar;
  if (NaturalLanguageSuggestionsCalendar)
    CFRetain(NaturalLanguageSuggestionsCalendar);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t _CalDatabaseGetNaturalLanguageSuggestionsCalendar(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v6;
  const os_unfair_lock *v7;
  uint64_t v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  const os_unfair_lock *v11;
  uint64_t v12;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v6 = Database == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v8)
  {
    v9 = v8;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v8)
      {
        if (*(_QWORD *)(*(_QWORD *)v8 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  v12 = _CalDatabaseGetRecordStore(a1);
  return _CalGetCalendarWithUID(v12);
}

__CFArray *CalDatabaseCopyOfAllCalendarsInStoreWithOptions(CFTypeRef cf, uint64_t a2, char a3)
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  __CFArray *v8;

  if (a2)
    v6 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  else
    v6 = (os_unfair_lock_s *)CFRetain(cf);
  v7 = v6;
  if (!v6)
    return 0;
  os_unfair_lock_lock(v6 + 20);
  v8 = _CalDatabaseCopyOfAllCalendarsInStoreWithOptions((uint64_t)cf, a2, a3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7 + 20);
  os_unfair_lock_unlock(v7 + 20);
  CFRelease(v7);
  return v8;
}

uint64_t CalStoreCopyUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalDatabaseCopyOfAllNotifications(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t v6;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreCopyAllInstancesOfClass();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v6;
}

void _CalStoreLoadConstraints(uint64_t a1)
{
  const os_unfair_lock *Context;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const os_unfair_lock *v11;
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v3 = (void *)CPRecordCopyProperty();
  if (!v3)
  {
    v6 = 0;
    if (!a1)
      goto LABEL_27;
    goto LABEL_23;
  }
  objc_msgSend(MEMORY[0x1E0D0C260], "constraintsURLForName:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v12 = 0;
      objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v5, 0, 0, &v12);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v12;
      if (!v6)
      {
        v8 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138543618;
          v14 = v4;
          v15 = 2112;
          v16 = v7;
          _os_log_impl(&dword_1A5CCB000, v8, OS_LOG_TYPE_FAULT, "Failed to load constraints plist (%{public}@): %@", buf, 0x16u);
        }
      }

    }
    else
    {
      v10 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138543362;
        v14 = v4;
        _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_FAULT, "Failed to load constraints data (%{public}@)", buf, 0xCu);
      }
      v6 = 0;
    }

  }
  else
  {
    v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543362;
      v14 = v3;
      _os_log_impl(&dword_1A5CCB000, v9, OS_LOG_TYPE_FAULT, "Failed to get URL for stored constraints name: %{public}@", buf, 0xCu);
    }
    v6 = 0;
  }

  if (a1)
  {
LABEL_23:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
LABEL_27:
  CPRecordInitializeProperty();

}

const void *CalDatabaseCopySuggestionsCalendar(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *SuggestionsCalendar;
  const void *v4;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  SuggestionsCalendar = (const void *)_CalDatabaseGetSuggestionsCalendar((uint64_t)a1);
  v4 = SuggestionsCalendar;
  if (SuggestionsCalendar)
    CFRetain(SuggestionsCalendar);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t _CalDatabaseGetSuggestionsCalendar(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v6;
  const os_unfair_lock *v7;
  uint64_t v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  const os_unfair_lock *v11;
  uint64_t v12;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v6 = Database == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v8)
  {
    v9 = v8;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v8)
      {
        if (*(_QWORD *)(*(_QWORD *)v8 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  v12 = _CalDatabaseGetRecordStore(a1);
  return _CalGetCalendarWithUID(v12);
}

CFTypeRef CalFilterCreateWithDatabaseShowingCalendarsWithUIDsAndEntityType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  EKCalendarFilter *v3;
  CFTypeRef v4;

  v3 = -[EKCalendarFilter initWithDatabase:entityType:showingCalendarsWithUIDs:]([EKCalendarFilter alloc], "initWithDatabase:entityType:showingCalendarsWithUIDs:", a1, a3, a2);
  v4 = CFRetain(v3);

  return v4;
}

id CalDatabaseGetPreferences(uint64_t a1)
{
  os_unfair_lock_s *v2;
  id v3;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(id *)(a1 + 296);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

void _CalRecordIDLoad(const void *a1)
{
  int ID;
  int v3;
  int Type;
  _DWORD *Instance;
  const os_unfair_lock *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  const os_unfair_lock *Context;
  int IsDeleted;
  NSObject *v13;
  _BOOL4 v14;
  int v15;
  void *v16;
  __int16 v17;
  const void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  ID = CPRecordGetID();
  if (ID == -1)
  {
    v7 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v8 = (void *)MEMORY[0x1E0CB37E8];
      v9 = v7;
      objc_msgSend(v8, "numberWithInt:", 0xFFFFFFFFLL);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138412546;
      v16 = v10;
      v17 = 2048;
      v18 = a1;
      _os_log_impl(&dword_1A5CCB000, v9, OS_LOG_TYPE_ERROR, "Record with a rowID of [%@] found.  Record pointer address: [%p].  Will not load record ID.", (uint8_t *)&v15, 0x16u);

    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    IsDeleted = CPRecordIsDeleted();
    v13 = CDBLogHandle;
    v14 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (!IsDeleted)
      _CalRecordIDLoad_cold_1(v14, (uint64_t)a1, v13);
    if (v14)
    {
      v15 = 134217984;
      v16 = (void *)a1;
      _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "Record with pointer address of [%p] was marked as being deleted.", (uint8_t *)&v15, 0xCu);
    }
    if (os_variant_has_internal_diagnostics())
      objc_msgSend(MEMORY[0x1E0D0C2A0], "simulateCrashWithMessage:", CFSTR("<rdar://problem/27536217>"));
  }
  else
  {
    v3 = ID;
    Type = _CalEntityGetType(a1);
    pthread_once(&__CalRecordIDRegisterOnce, (void (*)(void))CalRecordIDRegisterClass);
    Instance = (_DWORD *)_CFRuntimeCreateInstance();
    Instance[4] = Type;
    Instance[5] = v3;
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6)
        os_unfair_lock_assert_owner(v6 + 20);
    }
    CPRecordInitializeProperty();
    CFRelease(Instance);
  }
}

uint64_t CalStoreSupportsRecurrencesOnDetachedEvents()
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return 0;
}

uint64_t CalStoreAllowsTasks(uint64_t a1)
{
  if ((CalIsReminderBridgeEnabled() & 1) != 0)
    return 0;
  else
    return CalStoreAllowsTasksPrivate(a1);
}

uint64_t CalStoreGetStrictestEventPrivateValue(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t StrictestEventPrivateValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  StrictestEventPrivateValue = _CalStoreGetStrictestEventPrivateValue(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return StrictestEventPrivateValue;
}

uint64_t _CalStoreGetStrictestEventPrivateValue(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

const void *CalDatabaseCopyOfAllStores(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalDatabaseCopyOfAllStores((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalRecurrenceGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

void *CalCreateCStringFromCFString(const __CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  void *v4;

  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v4 = malloc_type_calloc(v3, 1uLL, 0xF6156127uLL);
  if (v4 && !CFStringGetCString(a1, (char *)v4, v3, 0x8000100u))
  {
    free(v4);
    return 0;
  }
  return v4;
}

CFArrayRef CalDatabaseCopyOfAllNotifiableOrRepliedEventsInStore(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  const __CFString *SelectPrefix;
  const __CFString *v7;
  const __CFArray *v8;
  uint64_t RecordStore;
  BOOL v10;
  const os_unfair_lock *Context;
  const __CFString *v12;
  const __CFArray *v13;
  uint64_t Count;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  CFIndex i;
  void *v19;
  CFIndex j;
  const void *ValueAtIndex;
  const void *v22;
  void *v23;
  char v24;
  void *v25;
  CFArrayRef Copy;
  __CFArray *theArray;
  CFRange v29;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  SelectPrefix = (const __CFString *)CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    v7 = SelectPrefix;
    v8 = (const __CFArray *)_CalEventPrepareNotifiableStatusStatement((uint64_t)v5, SelectPrefix, a2, 0, a3);
    if (v8)
    {
      RecordStore = _CalDatabaseGetRecordStore((uint64_t)v5);
      if (CDBLockingAssertionsEnabled)
        v10 = RecordStore == 0;
      else
        v10 = 1;
      if (!v10)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      v8 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
    }
    CFRelease(v7);
  }
  else
  {
    v8 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  v12 = CalDatabaseCopyOfAllEventsWithParticipantsWithProposedNewTimes(v5, a2, a3);
  v13 = (const __CFArray *)v12;
  if (!v12)
    goto LABEL_31;
  Count = CFArrayGetCount((CFArrayRef)v12);
  if (Count < 1)
    goto LABEL_31;
  v15 = Count;
  theArray = CFArrayCreateMutable(0, Count, MEMORY[0x1E0C9B378]);
  v16 = (void *)objc_opt_new();
  v17 = CFArrayGetCount(v8);
  if (v17 >= 1)
  {
    for (i = 0; i != v17; ++i)
    {
      CFArrayGetValueAtIndex(v8, i);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CalCalendarItemGetRowID());
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "addObject:", v19);

    }
  }
  for (j = 0; j != v15; ++j)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v13, j);
    if (ValueAtIndex)
    {
      v22 = ValueAtIndex;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CalCalendarItemGetRowID());
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v16, "containsObject:", v23);

      if ((v24 & 1) == 0)
      {
        CFArrayAppendValue(theArray, v22);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CalCalendarItemGetRowID());
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "addObject:", v25);

      }
    }
  }
  Copy = theArray;
  if (CFArrayGetCount(theArray) < 1)
  {
    CFRelease(theArray);

LABEL_31:
    if (!v8)
    {
      Copy = 0;
      if (!v13)
        return Copy;
      goto LABEL_35;
    }
    Copy = CFArrayCreateCopy(0, v8);
    goto LABEL_33;
  }
  v29.location = 0;
  v29.length = v17;
  CFArrayAppendArray(theArray, v8, v29);

  if (v8)
LABEL_33:
    CFRelease(v8);
  if (v13)
LABEL_35:
    CFRelease(v13);
  return Copy;
}

uint64_t _CalEventPrepareNotifiableStatusStatement(uint64_t a1, const __CFString *a2, uint64_t a3, int a4, int a5)
{
  uint64_t RecordStore;
  BOOL v11;
  const os_unfair_lock *Context;
  uint64_t Database;
  __CFString *MutableCopy;
  __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  CFMutableStringRef v19;
  const __CFString *v20;
  const os_unfair_lock *v21;
  uint64_t v22;
  int v23;
  sqlite3_stmt *v24;
  int ID;
  void *v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  const void *v31;
  double v32;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v11 = RecordStore == 0;
  else
    v11 = 1;
  if (!v11)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
    if (MutableCopy)
    {
      v15 = MutableCopy;
      if ((a4 | a5) == 1)
      {
        CFStringAppend(MutableCopy, CFSTR(" JOIN Participant ON ci.self_attendee_id = Participant.rowid"));
        if (a4)
          v16 = CFSTR(" WHERE (Participant.entity_type = ? AND Participant.status NOT IN (?, ?, ?))");
        else
          v16 = CFSTR(" WHERE (Participant.entity_type = ? AND Participant.status IN (?, ?, ?)) AND Participant.is_self = 0");
        CFStringAppend(v15, v16);
        v17 = CFSTR(" AND");
      }
      else
      {
        v17 = CFSTR(" WHERE");
      }
      CFStringAppend(v15, v17);
      if (a5 ^ 1 | a4)
        v18 = CFSTR(" (ci.invitation_status IN (1, 2, 3)");
      else
        v18 = CFSTR(" (ci.invitation_status IN (0, 1, 2, 3)");
      CFStringAppend(v15, v18);
      CFStringAppend(v15, CFSTR(")"));
      if (a3)
      {
        CFStringAppend(v15, CFSTR(" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)"));
      }
      else
      {
        v19 = _CalDatabaseCopyDisabledStoresClause(a1);
        if (v19)
        {
          v20 = v19;
          CFStringAppend(v15, CFSTR(" AND calendar_id NOT IN (SELECT ROWID FROM Calendar WHERE store_id IN "));
          CFStringAppend(v15, v20);
          CFStringAppend(v15, CFSTR(")"));
          CFRelease(v20);
        }
      }
      CFStringAppend(v15, CFSTR(" AND(                ((start_tz = ? AND end_date > ?) OR (start_tz != ? AND end_date > ?))                     OR                 (ci.has_recurrences AND(                      (ci.ROWID IN (SELECT owner_id FROM Recurrence WHERE owner_id = ci.ROWID AND(                            cached_end_date + ci.end_date - ci.start_date > ? OR                             end_date + ci.end_date - ci.start_date > ? OR                             (count = 0 AND end_date IS NULL)                       ))                    ))                )            );"));
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v21)
            os_unfair_lock_assert_owner(v21 + 20);
        }
      }
      v22 = CPSqliteDatabaseStatementForReading();
      Database = v22;
      if (!v22)
        goto LABEL_36;
      if (a4 | a5)
      {
        sqlite3_bind_int(*(sqlite3_stmt **)(v22 + 8), 1, 7);
        sqlite3_bind_int(*(sqlite3_stmt **)(Database + 8), 2, 1);
        sqlite3_bind_int(*(sqlite3_stmt **)(Database + 8), 3, 3);
        v23 = 4;
        sqlite3_bind_int(*(sqlite3_stmt **)(Database + 8), 4, 2);
        if (!a3)
          goto LABEL_33;
      }
      else
      {
        v23 = 0;
        if (!a3)
        {
LABEL_33:
          objc_msgSend(MEMORY[0x1E0C99D68], "CalDateForNow");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "timeIntervalSinceReferenceDate");
          v28 = v27;

          v29 = CalTimeZoneCopyCFTimeZone();
          v30 = v28;
          if (v29)
          {
            v31 = (const void *)v29;
            CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
            CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
            v30 = v32;
            CFRelease(v31);
          }
          sqlite3_bind_text(*(sqlite3_stmt **)(Database + 8), v23 + 1, "_float", -1, 0);
          sqlite3_bind_double(*(sqlite3_stmt **)(Database + 8), v23 + 2, v30);
          sqlite3_bind_text(*(sqlite3_stmt **)(Database + 8), v23 + 3, "_float", -1, 0);
          sqlite3_bind_double(*(sqlite3_stmt **)(Database + 8), v23 + 4, v28);
          sqlite3_bind_double(*(sqlite3_stmt **)(Database + 8), v23 + 5, v28);
          sqlite3_bind_double(*(sqlite3_stmt **)(Database + 8), v23 + 6, v28);
LABEL_36:
          CFRelease(v15);
          return Database;
        }
      }
      v24 = *(sqlite3_stmt **)(Database + 8);
      v23 |= 1u;
      ID = CPRecordGetID();
      sqlite3_bind_int(v24, v23, ID);
      goto LABEL_33;
    }
    return 0;
  }
  return Database;
}

const __CFString *CalDatabaseCopyOfAllEventsWithParticipantsWithProposedNewTimes(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v4;
  uint64_t RecordStore;
  BOOL v6;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v9;
  const __CFAllocator *v10;
  const __CFString *v11;
  __CFString *MutableCopy;
  __CFString *v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  uint64_t v16;
  double Current;
  uint64_t v18;
  const os_unfair_lock *v19;

  if (a2)
  {
    v4 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v4 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v4 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)v4);
  if (CDBLockingAssertionsEnabled)
    v6 = RecordStore == 0;
  else
    v6 = 1;
  if (!v6)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_27;
  v9 = Database;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT CalendarItem.* FROM CalendarItem JOIN Participant As organizerParticipant ON CalendarItem.organizer_id = organizerParticipant.rowid JOIN Participant AS otherParticipant ON CalendarItem.ROWID = otherParticipant.owner_id WHERE (CalendarItem.invitation_changed_properties & %i) != 0 AND otherParticipant.is_self = 0 AND otherParticipant.proposed_start_date > 0 AND (otherParticipant.proposed_start_date + (CalendarItem.end_date - CalendarItem.start_date) > ?) AND organizerParticipant.is_self = 1"), 240);
  if (!v11)
    goto LABEL_28;
  MutableCopy = CFStringCreateMutableCopy(v10, 0, v11);
  if (!MutableCopy)
  {
LABEL_26:
    CFRelease(v11);
LABEL_27:
    v11 = 0;
    goto LABEL_28;
  }
  v13 = MutableCopy;
  if (a3)
    CFStringAppend(MutableCopy, CFSTR(" AND otherParticipant.proposed_start_date_status != 1"));
  CFStringAppend(v13, CFSTR(" GROUP BY CalendarItem.ROWID;"));
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(v9 + 104))
    {
      v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v14)
        os_unfair_lock_assert_owner(v14 + 20);
    }
  }
  v15 = CPSqliteDatabaseStatementForReading();
  if (!v15)
  {
    CFRelease(v13);
    goto LABEL_26;
  }
  v16 = v15;
  Current = CFAbsoluteTimeGetCurrent();
  sqlite3_bind_double(*(sqlite3_stmt **)(v16 + 8), 1, Current);
  CFRelease(v13);
  CFRelease(v11);
  v18 = _CalDatabaseGetRecordStore((uint64_t)v4);
  if (CDBLockingAssertionsEnabled)
  {
    if (v18)
    {
      v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v19)
        os_unfair_lock_assert_owner(v19 + 20);
    }
  }
  v11 = (const __CFString *)CPRecordStoreProcessStatement();
LABEL_28:
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4 + 20);
  os_unfair_lock_unlock(v4 + 20);
  CFRelease(v4);
  return v11;
}

uint64_t CalAlertInviteeDeclines()
{
  _CalGetPrefValue((int *)&CalAlertInviteeDeclines___AlertInviteeDeclinesValue, CFSTR("InviteeDeclineAlerts"), (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))_CalEventAlertInviteeDeclinesPrefChanged);
  return CalAlertInviteeDeclines___AlertInviteeDeclinesValue;
}

int *_CalGetPrefValue(int *result, const __CFString *a2, void (__cdecl *a3)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))
{
  int *v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  const __CFString *v7;
  BOOL v8;
  int v9;
  Boolean keyExistsAndHasValidFormat;

  if (result)
  {
    v5 = result;
    pthread_mutex_lock(&_CalGetPrefValue___PrefLock);
    if (a3 && *v5 == -1)
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, a3, CFSTR("com.apple.mobilecal.invitationalertschanged"), 0, CFNotificationSuspensionBehaviorDrop);
      v7 = (const __CFString *)*MEMORY[0x1E0D0C508];
      CFPreferencesAppSynchronize((CFStringRef)*MEMORY[0x1E0D0C508]);
    }
    else
    {
      v7 = (const __CFString *)*MEMORY[0x1E0D0C508];
    }
    keyExistsAndHasValidFormat = 0;
    if (CFPreferencesGetAppBooleanValue(a2, v7, &keyExistsAndHasValidFormat))
      v8 = 1;
    else
      v8 = keyExistsAndHasValidFormat == 0;
    v9 = v8;
    *v5 = v9;
    return (int *)pthread_mutex_unlock(&_CalGetPrefValue___PrefLock);
  }
  return result;
}

BOOL CalStoreShowsNotifications(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

uint64_t CalEventOccurrenceCacheCopyAllDaysAndOccurrenceCounts(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  CFMutableArrayRef Mutable;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __CalEventOccurrenceCacheCopyAllDaysAndOccurrenceCounts_block_invoke;
  v6[3] = &unk_1E4F84C18;
  v6[5] = a1;
  v6[6] = a2;
  v6[4] = &v7;
  _CalEventOccurrenceCachePerformWithLock(a1, v6);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1A5CDDD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id CalInvalidAlarmDate()
{
  if (CalInvalidAlarmDate_onceToken != -1)
    dispatch_once(&CalInvalidAlarmDate_onceToken, &__block_literal_global);
  return (id)CalInvalidAlarmDate_sInvalidDate;
}

uint64_t CalIsInvalidAlarmDate(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  v1 = a1;
  CalInvalidAlarmDate();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isEqual:", v1) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v4 = objc_msgSend(v2, "year");
    if (v4 == objc_msgSend(v1, "year")
      && (v5 = objc_msgSend(v2, "month"), v5 == objc_msgSend(v1, "month"))
      && (v6 = objc_msgSend(v2, "day"), v6 == objc_msgSend(v1, "day"))
      && (v7 = objc_msgSend(v2, "hour"), v7 == objc_msgSend(v1, "hour"))
      && (v8 = objc_msgSend(v2, "minute"), v8 == objc_msgSend(v1, "minute"))
      && (v9 = objc_msgSend(v2, "second"), v9 == objc_msgSend(v1, "second")))
    {
      objc_msgSend(v1, "timeZone");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        objc_msgSend(v2, "timeZone");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1, "timeZone");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v3 = objc_msgSend(v11, "isEquivalentTo:", v12);

      }
      else
      {
        v3 = 1;
      }

    }
    else
    {
      v3 = 0;
    }
  }

  return v3;
}

uint64_t _CalDatabaseExternalConversionCheckerForRestore(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  int v3;
  int v4;
  NSObject *v5;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a2)
      {
        if (*(_QWORD *)(*(_QWORD *)a2 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v3 = CPSqliteConnectionDatabaseVersion();
  if (v3 > 15013)
    return 0;
  v4 = v3;
  v5 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_impl(&dword_1A5CCB000, v5, OS_LOG_TYPE_ERROR, "Refusing to open DB with version %d for restoring", (uint8_t *)v7, 8u);
  }
  return 2;
}

__CFString *CalDatabaseCopyDirectoryPath()
{
  return CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(0, 1);
}

void CalDatabaseMultiLock(os_unfair_lock_s *a1, os_unfair_lock_s *a2)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;

  v2 = a1;
  if (a1 != a2)
  {
    if ((uint64_t)a1 >= (uint64_t)a2)
      v3 = a2;
    else
      v3 = a1;
    if ((uint64_t)a1 < (uint64_t)a2)
      v2 = a2;
    os_unfair_lock_lock(v3 + 20);
  }
  os_unfair_lock_lock(v2 + 20);
}

void CalDatabaseMultiUnlock(const os_unfair_lock *a1, const os_unfair_lock *a2)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;

  v4 = (os_unfair_lock_s *)&a1[20];
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(a1 + 20);
  os_unfair_lock_unlock(v4);
  if (a1 != a2)
  {
    v5 = (os_unfair_lock_s *)&a2[20];
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v5);
    os_unfair_lock_unlock(v5);
  }
}

uint64_t _CalDatabaseLockForWriteTransaction(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 336), "performWithWriteLock:", a2);
}

uint64_t _CalDatabasePerformStatementWithWriteLock(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(void **)(a1 + 336);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___CalDatabasePerformStatementWithWriteLock_block_invoke;
  v5[3] = &unk_1E4F83DE8;
  v5[4] = &v6;
  v5[5] = a2;
  objc_msgSend(v2, "performWithWriteLock:", v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1A5CDE2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __CalDatabaseBeginWriteTransaction(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;

  objc_msgSend(*(id *)(a1 + 336), "lock");
  v4 = _CalDatabaseBeginTransactionOfType(a1, 1, a2);
  if (!v4)
    objc_msgSend(*(id *)(a1 + 336), "unlock");
  return v4;
}

BOOL __CalDatabaseCommitTransaction(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  int v11;
  void *v13;
  void *v14;

  if (*(_DWORD *)(a1 + 352) == 0xFFFF)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL __CalDatabaseCommitTransaction(CalDatabaseRef, const char *)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("CalDatabase.m"), 1066, CFSTR("Tried to commit a transaction (%s) when no transaction was open (%s)"), a2, *(_QWORD *)(a1 + 344));

  }
  if (CDBLockingAssertionsEnabled)
    v4 = *(_QWORD *)(a1 + 24) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (CDBLockingAssertionsEnabled)
  {
    if (v9)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  v11 = CPSqliteConnectionCommit();
  if (*(_DWORD *)(a1 + 352) == 1)
    objc_msgSend(*(id *)(a1 + 336), "unlock");
  *(_DWORD *)(a1 + 352) = 0xFFFF;
  *(_QWORD *)(a1 + 344) = a2;
  return v11 != 1;
}

uint64_t _CalDatbaseCreateTemporaryRecordIDForEntity(uint64_t a1, int a2)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 176);
  *(_DWORD *)(a1 + 176) = v3 - 1;
  return CalRecordIDCreate(a2, v3);
}

uint64_t _CalDatbaseCreateLimitedAccessVirtualRecordIDForEntity(int a1)
{
  return CalRecordIDCreate(a1, 0x7FFFFFFF);
}

void CalDatabaseSetIntegrityErrorReportingDelegate(uint64_t a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;

  v3 = (os_unfair_lock_s *)(a1 + 80);
  v4 = a2;
  os_unfair_lock_lock(v3);
  objc_storeWeak((id *)(a1 + 320), v4);

  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3);
  os_unfair_lock_unlock(v3);
}

const __CFString *_CalDatabaseGetRestoreGeneration(uint64_t a1)
{
  const __CFString *result;

  result = _CalDatabaseGetIntegerProperty(a1);
  *(_DWORD *)(a1 + 312) = (_DWORD)result;
  return result;
}

const __CFString *CalDatabaseGetRestoreGeneration(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const __CFString *IntegerProperty;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  IntegerProperty = _CalDatabaseGetIntegerProperty((uint64_t)a1);
  a1[78]._os_unfair_lock_opaque = IntegerProperty;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return IntegerProperty;
}

void _CalDatabaseSetRestoreGeneration(uint64_t a1, int a2)
{
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  uint64_t v10;
  const os_unfair_lock *v11;
  NSObject *v12;
  _QWORD v13[5];
  int v14;
  uint8_t buf[16];

  if (CDBLockingAssertionsEnabled)
    v4 = *(_QWORD *)(a1 + 24) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPSqliteDatabaseConnectionForWriting();
  if (v9)
  {
    v10 = v9;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___CalDatabaseSetRestoreGeneration_block_invoke;
    v13[3] = &__block_descriptor_44_e5_v8__0l;
    v13[4] = v9;
    v14 = a2;
    objc_msgSend(*(id *)(a1 + 336), "performWithWriteLock:", v13);
    if (CDBLockingAssertionsEnabled && *(_QWORD *)v10 && *(_QWORD *)(*(_QWORD *)v10 + 104))
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    *(_DWORD *)(a1 + 312) = a2;
  }
  else
  {
    v12 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_ERROR, "Failed to get connection for writing to database to update its restore generation", buf, 2u);
    }
  }
}

void sub_1A5CDE78C(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void sub_1A5CDE7B0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1A5CDE6ECLL);
}

void CalDatabaseSetRestoreGeneration(os_unfair_lock_s *a1, int a2)
{
  os_unfair_lock_s *v4;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseSetRestoreGeneration((uint64_t)a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
}

void CalDatabaseClearRestoreGenerationChangedDelegate(uint64_t a1)
{
  os_unfair_lock_s *v2;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  objc_storeWeak((id *)(a1 + 304), 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

id CalDatabaseSetDarwinNotificationPoster(id obj)
{
  return objc_storeWeak(&calDatabaseDarwinNotificationPoster, obj);
}

void _CalDatabasePostDBOrSyncStatusChangeNotification(void *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, void *a7, void *a8, char a9)
{
  id v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  id v23;
  _QWORD block[4];
  id v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD *, void *);
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;

  v15 = a7;
  v16 = a8;
  v17 = a1;
  v18 = v17;
  v19 = MEMORY[0x1E0C809B0];
  if (a4)
  {
    v20 = MEMORY[0x1E0C809B0];
    _CalDatabasePostDBOrSyncStatusChangeNotificationSync((uint64_t)v17, a2, a3, a5);
    if ((a9 & 1) != 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (_CalDatabasePostDBOrSyncStatusChangeNotification_onceToken != -1)
    dispatch_once(&_CalDatabasePostDBOrSyncStatusChangeNotification_onceToken, &__block_literal_global_0);
  v21 = _CalDatabasePostDBOrSyncStatusChangeNotification_queue;
  v20 = v19;
  block[0] = v19;
  block[1] = 3221225472;
  block[2] = ___CalDatabasePostDBOrSyncStatusChangeNotification_block_invoke_2;
  block[3] = &unk_1E4F83E30;
  v28 = a2;
  v29 = a3;
  v26 = v18;
  v27 = a5;
  dispatch_async(v21, block);

  if ((a9 & 1) == 0)
  {
LABEL_7:
    v22 = v15;
    v23 = v16;
    v30 = v20;
    v31 = 3221225472;
    v32 = ___CalDatabaseSendAnalyticsEventForChange_block_invoke;
    v33 = &unk_1E4F83F98;
    v34 = v22;
    v35 = v23;
    v36 = a5;
    v37 = a6;
    CalAnalyticsSendEventLazy();

  }
LABEL_8:

}

void _CalDatabasePostDBOrSyncStatusChangeNotificationSync(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  void *v5;
  const __CFDictionary *v6;
  NSObject *v7;
  __CFNotificationCenter *LocalCenter;
  const __CFString *v9;
  const __CFString *v10;
  id WeakRetained;
  void *v12;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint8_t v14[8];
  _QWORD v15[2];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a1)
    {
      v15[0] = CFSTR("path");
      v15[1] = CFSTR("auxDBID");
      v16[0] = a1;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v16[1] = v5;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 2);
      v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v7 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_ERROR, "When posting a notification, the path should be included.", v14, 2u);
      }
      v6 = 0;
    }
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, CFSTR("_CalDatabaseChangedNotification"), 0, v6, 1u);

  }
  v9 = CFSTR("_CalDatabaseChangedNotification");
  if (a4 == 1)
    v9 = CFSTR("_CalDatabaseStoreSyncStatusChangedNotification");
  if (a4 == 2)
    v10 = CFSTR("_CalDatabaseIntegrationDataChangedNotification");
  else
    v10 = v9;
  WeakRetained = objc_loadWeakRetained(&calDatabaseDarwinNotificationPoster);
  v12 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "postDarwinNotificationNamed:", v10);
  }
  else
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, v10, 0, 0, 1u);
  }

}

void _CalDatabasePostDBOrSyncStatusChangeNotificationForDatabase(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  id v13;
  id v14;
  __CFString *IfNeeded;

  v13 = a7;
  v14 = a6;
  IfNeeded = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(a1, 1);
  _CalDatabasePostDBOrSyncStatusChangeNotification(IfNeeded, *(unsigned int *)(a1 + 172), a2, a3, a4, a5, v14, v13, *(_BYTE *)(a1 + 272));

}

void _CalDatabasePostChangeNotificationToExternalClients(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;

  ++*(_DWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 368);
  v5 = (id)CalDatabaseCopyClientName(a1, 0);
  _CalDatabasePostDBOrSyncStatusChangeNotificationForDatabase(a1, 0, 0, a2, v4, v5, 0);

}

CFTypeRef _CalDatabaseCopyClientName(uint64_t a1)
{
  return CalDatabaseCopyClientName(a1, 0);
}

void _CalDatabasePostDBChangeNotificationToInternalAndExternalClients(uint64_t a1)
{
  _BOOL4 v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = _CalDatabaseShouldPostInProcessChangeNotification(a1);
  if (v2)
  {
    +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:](CalDatabaseInMemoryChangeTracking, "changeTrackingForDatabase:", a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "clearAllChangesets");

  }
  v4 = *(_QWORD *)(a1 + 368);
  v5 = (id)CalDatabaseCopyClientName(a1, 1);
  _CalDatabasePostDBOrSyncStatusChangeNotificationForDatabase(a1, v2, 0, 0, v4, v5, 0);

}

BOOL _CalDatabaseShouldPostInProcessChangeNotification(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  CFTypeRef v4;
  _BOOL8 v5;

  WeakRetained = objc_loadWeakRetained(&calDatabaseDarwinNotificationPoster);
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = CFRetain(WeakRetained);
    CFAutorelease(v4);
LABEL_7:
    v5 = 1;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(a1 + 17) & 0x20) != 0)
    goto LABEL_7;
  if (CalDatabaseIsCurrentProcessCalaccessd_onceToken != -1)
    dispatch_once(&CalDatabaseIsCurrentProcessCalaccessd_onceToken, &__block_literal_global_49);
  v5 = CalDatabaseIsCurrentProcessCalaccessd_isCalaccessd != 0;
LABEL_8:

  return v5;
}

CFTypeRef CalDatabaseCopyClientName(uint64_t a1, char a2)
{
  os_unfair_lock_s *v3;
  void *v4;
  CFTypeRef v5;

  if ((a2 & 1) != 0)
  {
    v3 = (os_unfair_lock_s *)(a1 + 80);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
    v4 = (void *)objc_msgSend(*(id *)(a1 + 152), "copy");
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v3);
    os_unfair_lock_unlock(v3);
    if (!v4)
      goto LABEL_7;
  }
  else
  {
    v4 = (void *)objc_msgSend(*(id *)(a1 + 152), "copy");
    if (!v4)
    {
LABEL_7:
      CalDatabaseGetProcessName();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  v5 = CFRetain(v4);

  return v5;
}

void CalDatabaseRequestApplicationSnapshotUpdateWithRateLimiter()
{
  void *v0;
  double v1;
  double v2;
  double v3;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "timeIntervalSinceReferenceDate");
  v2 = v1;

  v3 = 3.40282347e38;
  if (*(double *)&CalDatabaseRequestApplicationSnapshotUpdateWithRateLimiter_lastBackBoardOpenApplicationRequestTimestamp > 0.0)
    v3 = v2
       - *(double *)&CalDatabaseRequestApplicationSnapshotUpdateWithRateLimiter_lastBackBoardOpenApplicationRequestTimestamp;
  if (v3 > 5.0)
  {
    CalDatabaseRequestApplicationSnapshotUpdateWithRateLimiter_lastBackBoardOpenApplicationRequestTimestamp = *(_QWORD *)&v2;
    if (_CalDatabaseRequestApplicationSnapshotUpdate_once_token != -1)
      dispatch_once(&_CalDatabaseRequestApplicationSnapshotUpdate_once_token, &__block_literal_global_188);
    objc_msgSend((id)_CalDatabaseRequestApplicationSnapshotUpdate_systemService, "openApplication:withOptions:completion:", CFSTR("com.apple.mobilecal"), _CalDatabaseRequestApplicationSnapshotUpdate_options, &__block_literal_global_192);
  }
}

BOOL _CalDatabaseShouldContinueExaminingChangesForRanges(uint64_t a1)
{
  return *(_BYTE *)(a1 + 1) == 0;
}

_BYTE *_CalDatabaseMarkRangeAsImpacted(_BYTE *result)
{
  unsigned __int8 *v1;
  int v2;

  if (*result)
  {
    v1 = result + 16;
    do
    {
      *(v1 - 15) = 1;
      v2 = *v1;
      v1 += 16;
    }
    while (v2);
  }
  return result;
}

void CalDatabaseRequestWidgetRefreshWithRateLimiter()
{
  void *v0;
  double v1;
  double v2;
  int64_t v4;
  dispatch_time_t v5;

  if (CalDatabaseRequestWidgetRefreshWithRateLimiter_onceToken != -1)
    dispatch_once(&CalDatabaseRequestWidgetRefreshWithRateLimiter_onceToken, &__block_literal_global_31);
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "timeIntervalSinceReferenceDate");
  v2 = v1;

  os_unfair_lock_lock((os_unfair_lock_t)&CalDatabaseRequestWidgetRefreshWithRateLimiter_lock);
  if (CalDatabaseRequestWidgetRefreshWithRateLimiter_refreshPending == 1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&CalDatabaseRequestWidgetRefreshWithRateLimiter_lock);
  }
  else
  {
    CalDatabaseRequestWidgetRefreshWithRateLimiter_refreshPending = 1;
    if (v2 - *(double *)&CalDatabaseRequestWidgetRefreshWithRateLimiter_lastRefreshTimestamp >= 3.0
      || *(double *)&CalDatabaseRequestWidgetRefreshWithRateLimiter_lastRefreshTimestamp < 0.0)
    {
      v4 = 0;
    }
    else
    {
      v4 = 3000000000;
    }
    v5 = dispatch_time(0, v4);
    os_unfair_lock_unlock((os_unfair_lock_t)&CalDatabaseRequestWidgetRefreshWithRateLimiter_lock);
    dispatch_after(v5, (dispatch_queue_t)CalDatabaseRequestWidgetRefreshWithRateLimiter_refreshQueue, &__block_literal_global_33);
  }
}

void CalDatabaseCleanupDanglers(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  _QWORD *v9;
  _QWORD *v10;
  const os_unfair_lock *v11;
  NSObject *v12;
  uint8_t v13[16];

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 24);
  if (CDBLockingAssertionsEnabled)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = (_QWORD *)CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v9)
  {
    v10 = v9;
    _CalDatabaseCleanupDanglers(v3, v9);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v10)
      {
        if (*(_QWORD *)(*v10 + 104))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
    v12 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_DEFAULT, "Unable to get database connection to clean up danglers.", v13, 2u);
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

void _CalDatabaseCleanupDanglers(uint64_t a1, _QWORD *a2)
{
  uint64_t Context;
  uint64_t v4;

  Context = CPRecordStoreGetContext();
  if (a2)
  {
    v4 = Context;
    if (Context)
    {
      _CalCalendarCleanUpDanglingEntities(Context, a2);
      _CalCalendarItemCleanUpDanglingEntities(v4, a2);
      _CalAlarmCleanUpDanglingEntities(v4, a2);
      _CalRecurrenceCleanUpDanglingEntities(v4, a2);
      _CalParticipantCleanUpDanglingEntities(v4, a2);
      _CalEventActionCleanUpDanglingEntities(v4, a2);
      _CalAttachmentCleanUpDanglingEntities(v4, a2);
      _CalLocationCleanUpDanglingEntities(v4, a2);
      _CalShareeCleanUpDanglingEntities(v4, a2);
      _CalNotificationCleanUpDanglingEntities(v4, a2);
      _CalResourceChangeCleanUpDanglingEntities(v4, a2);
      _CalContactCleanUpDanglingEntities(v4, a2);
      _CalConferenceCleanUpDanglingEntities(v4, a2);
      _CalErrorCleanUpDanglingEntities(v4, a2);
      _CalAttachmentFileCleanUpDanglingEntities(v4, a2);
      _CalImageCleanUpDanglingEntities(v4, a2);
      _CalColorCleanUpDanglingEntities(v4, a2);
    }
  }
}

uint64_t CalDatabaseIsCurrentProcessCalaccessd()
{
  if (CalDatabaseIsCurrentProcessCalaccessd_onceToken != -1)
    dispatch_once(&CalDatabaseIsCurrentProcessCalaccessd_onceToken, &__block_literal_global_49);
  return CalDatabaseIsCurrentProcessCalaccessd_isCalaccessd;
}

void _CalDatabaseNoteUntrackedChange(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  if (_CalDatabaseShouldPostInProcessChangeNotification(a1))
  {
    +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:](CalDatabaseInMemoryChangeTracking, "changeTrackingForDatabase:", a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "clearAllChangesets");

    ++*(_DWORD *)(a1 + 120);
    v3 = *(_QWORD *)(a1 + 368);
    v4 = (void *)CalDatabaseCopyClientName(a1, 0);
    _CalDatabasePostDBOrSyncStatusChangeNotificationForDatabase(a1, 1, 0, 0, v3, v4, 0);

    _CalDatabaseRevertInternal(a1, 1);
  }
  else
  {
    _CalDatabaseSendChangeNotificationWithNoObjectIdsToCalaccessd(a1, 0);
  }
}

BOOL _CalDatabaseSendChangeNotificationWithNoObjectIdsToCalaccessd(uint64_t a1, int64_t a2)
{
  _xpc_connection_s *v4;
  xpc_object_t v5;
  __CFString *v6;
  void *v7;
  xpc_object_t v8;
  void *v9;
  _BOOL8 v10;

  _CalDatabaseCalaccessdXPCConnection();
  v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v5, "function", "postchangenote");
    v6 = objc_retainAutorelease(CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(a1, 1));
    xpc_dictionary_set_string(v5, "databasePath", (const char *)-[__CFString UTF8String](v6, "UTF8String"));
    xpc_dictionary_set_int64(v5, "changeType", a2);
    xpc_dictionary_set_int64(v5, "changeReason", *(_QWORD *)(a1 + 368));
    v7 = objc_retainAutorelease((id)CalDatabaseCopyClientName(a1, 0));
    xpc_dictionary_set_string(v5, "clientName", (const char *)objc_msgSend(v7, "UTF8String"));
    v8 = xpc_connection_send_message_with_reply_sync(v4, v5);
    v9 = v8;
    v10 = v8
       && object_getClass(v8) == (Class)MEMORY[0x1E0C812F8]
       && xpc_dictionary_get_BOOL(v9, "notificationwasposted");

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void _CalDatabaseRevertInternal(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;
  int LastSequenceNumber;
  _QWORD *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const os_unfair_lock *v13;
  uint64_t Database;
  const os_unfair_lock *v15;
  uint64_t v16;
  uint64_t v17;
  const os_unfair_lock *v18;
  const os_unfair_lock *v19;
  BOOL v20;
  int v21;
  const os_unfair_lock *v22;
  const os_unfair_lock *v23;
  const void *v24;

  if (*(_QWORD *)(a1 + 24))
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    LastSequenceNumber = CPRecordStoreGetLastSequenceNumber();
  }
  else
  {
    LastSequenceNumber = -1;
  }
  *(_DWORD *)(a1 + 124) = LastSequenceNumber;
  v6 = *(_QWORD **)(a1 + 32);
  if (v6)
    _CalEventOccurrenceCacheRevert(v6);
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    CalScheduledTaskCacheInvalidate(v7);
    CFRelease(*(CFTypeRef *)(a1 + 40));
    *(_QWORD *)(a1 + 40) = 0;
  }
  v8 = *(const void **)(a1 + 104);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v9 = *(const void **)(a1 + 96);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v10 = *(const void **)(a1 + 64);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v11 = *(const void **)(a1 + 72);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v12 = *(const void **)(a1 + 264);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 264) = 0;
  }
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  if (a2)
    *(_DWORD *)(a1 + 176) = -1;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v13)
        os_unfair_lock_assert_owner(v13 + 20);
    }
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  v16 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (v16)
  {
    v17 = v16;
    if (*(_BYTE *)(a1 + 381))
    {
      __CalDatabaseRollbackTransaction(a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabase.m:4709");
      *(_BYTE *)(a1 + 381) = 0;
    }
    else
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v16)
        {
          if (*(_QWORD *)(*(_QWORD *)v16 + 104))
          {
            v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18)
              os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
      CPSqliteConnectionRollback();
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v17)
      {
        if (*(_QWORD *)(*(_QWORD *)v17 + 104))
        {
          v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v19)
            os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    if (CDBLockingAssertionsEnabled)
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    v21 = !v20;
    if (a2)
    {
      if (v21)
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
      CPRecordStoreInvalidateCaches();
    }
    else
    {
      if (v21)
      {
        v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23)
          os_unfair_lock_assert_owner(v23 + 20);
      }
      CPRecordStoreRevert();
    }
    *(_QWORD *)(a1 + 160) = CalMonotonicTime();
  }
  if ((*(_BYTE *)(a1 + 16) & 0x10) == 0)
  {
    v24 = (const void *)CalCopyTimeZone();
    *(_QWORD *)(a1 + 40) = CalScheduledTaskCacheCreateForDatabase(a1, v24);
    CFRelease(v24);
  }
}

void CalDatabaseSetChangeReason(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  *(_QWORD *)(a1 + 368) = a2;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
}

uint64_t CalDatabaseGetChangeReason(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 368);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalDatabaseGetChangeReason(uint64_t a1)
{
  return *(_QWORD *)(a1 + 368);
}

__CFDictionary *CalDatabaseCopyChangesSinceSequenceNumber(os_unfair_lock_s *a1, signed int a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  signed int valuePtr;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v6 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("CalLastCalendarChanges"), v6);
    CFRelease(v6);
  }
  valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v7 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("CalLastEventRecurrenceChanges"), v7);
    CFRelease(v7);
  }
  valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v8 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("CalLastEventAlarmChanges"), v8);
    CFRelease(v8);
  }
  valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v9 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("CalLastCategoryChanges"), v9);
    CFRelease(v9);
  }
  valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v10 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("CalChangesAffectingNearbyEvents24hr"), v10);
    CFRelease(v10);
  }
  valuePtr = CalDatabaseGetIntegerProperty(a1);
  if (valuePtr > a2)
  {
    v11 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, CFSTR("CalChangesAffectingNearbyEventsWidgetRange"), v11);
    CFRelease(v11);
  }
  return Mutable;
}

const __CFString *CalDatabaseGetIntegerProperty(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const __CFString *IntegerProperty;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  IntegerProperty = _CalDatabaseGetIntegerProperty((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return IntegerProperty;
}

uint64_t _CalDatabaseSetDeletionFlags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) |= a2;
  return result;
}

uint64_t _CalDatabaseGetDeletionFlags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t _CalDatabaseSetChangeFlags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 84) |= a2;
  return result;
}

uint64_t _CalDatabaseGetChangeFlags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

void CalPerformSQLWithConnection(_QWORD *a1, uint64_t a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a1, 0, a2, 0);
}

void CalPerformSQLWithConnectionAndBindBlock(_QWORD *a1, int a2, uint64_t a3, void *a4)
{
  void (**v7)(id, uint64_t);
  const os_unfair_lock *Context;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  void *v13;
  sqlite3 *v14;
  NSObject *v15;
  uint64_t v16;
  const os_unfair_lock *v17;
  int v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  NSObject *v21;
  int v22;
  _BYTE v23[18];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(_QWORD *)(*a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v9 = CPSqliteConnectionStatementForSQL();
  if (v9)
  {
    v10 = (uint64_t **)v9;
    if (v7)
      v7[2](v7, v9);
    if (a2)
    {
      v11 = CPRecordStoreGetContext();
      v12 = _CalDatabasePerformStatementWithWriteLock(v11, (uint64_t)v10);
    }
    else
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*v10)
        {
          v16 = **v10;
          if (v16)
          {
            if (*(_QWORD *)(v16 + 104))
            {
              v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v17)
                os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
      }
      v12 = CPSqliteStatementPerform();
    }
    v18 = v12;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v10)
      {
        v19 = **v10;
        if (v19)
        {
          if (*(_QWORD *)(v19 + 104))
          {
            v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20)
              os_unfair_lock_assert_owner(v20 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    if (v18)
    {
      if (v18 != 101)
      {
        v21 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          v22 = 67109378;
          *(_DWORD *)v23 = v18;
          *(_WORD *)&v23[4] = 2112;
          *(_QWORD *)&v23[6] = a3;
          _os_log_impl(&dword_1A5CCB000, v21, OS_LOG_TYPE_ERROR, "Bad result %i for query \"%@\"", (uint8_t *)&v22, 0x12u);
        }
      }
    }
  }
  else
  {
    v13 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v14 = (sqlite3 *)a1[1];
      v15 = v13;
      v22 = 138412546;
      *(_QWORD *)v23 = a3;
      *(_WORD *)&v23[8] = 2080;
      *(_QWORD *)&v23[10] = sqlite3_errmsg(v14);
      _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_ERROR, "Couldn't get statement for SQL \"%@\"; Error: %s",
        (uint8_t *)&v22,
        0x16u);

    }
  }

}

uint64_t sendResultsWithBlock(uint64_t a1, uint64_t a2)
{
  uint64_t (**v3)(_QWORD, _QWORD);
  uint64_t v4;

  v3 = (uint64_t (**)(_QWORD, _QWORD))MEMORY[0x1A85B52F0](a2);
  v4 = v3[2](v3, a1);

  return v4;
}

void CalSendResults(uint64_t **a1, void *a2)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  id v5;

  v5 = a2;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        v3 = **a1;
        if (v3)
        {
          if (*(_QWORD *)(v3 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementSendResults();

}

void _CalDatabaseAddEntity(uint64_t a1, const void *a2)
{
  BOOL v4;
  const os_unfair_lock *Context;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  unsigned int ValueAtIndex;
  CFIndex v11;
  CFIndex v12;
  unsigned int v13;
  int ID;
  BOOL v15;
  const os_unfair_lock *v16;
  const void *Type;
  void *Value;
  const void *RecordID;
  int v20;
  int v21;

  if (CPRecordGetID() != 0x7FFFFFFF)
  {
    if ((CPRecordGetID() & 0x80000000) != 0)
      goto LABEL_18;
    if (CDBLockingAssertionsEnabled)
      v4 = *(_QWORD *)(a1 + 24) == 0;
    else
      v4 = 1;
    if (!v4)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    CPRecordGetClass();
    v6 = (const __CFArray *)CPRecordStoreCopyDeletedRecordIDsOfClass();
    if (v6)
    {
      v7 = v6;
      Count = CFArrayGetCount(v6);
      if (Count < 1)
      {
        CFRelease(v7);
        return;
      }
      v9 = Count;
      ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
      if (CPRecordGetID() == ValueAtIndex)
      {
        CFRelease(v7);
        goto LABEL_18;
      }
      v11 = 1;
      do
      {
        v12 = v11;
        if (v9 == v11)
          break;
        v13 = CFArrayGetValueAtIndex(v7, v11);
        ID = CPRecordGetID();
        v11 = v12 + 1;
      }
      while (ID != v13);
      CFRelease(v7);
      if (v12 < v9)
      {
LABEL_18:
        if (CDBLockingAssertionsEnabled)
          v15 = *(_QWORD *)(a1 + 24) == 0;
        else
          v15 = 1;
        if (!v15)
        {
          v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16)
            os_unfair_lock_assert_owner(v16 + 20);
        }
        CPRecordStoreAddRecord();
        if (!*(_QWORD *)(a1 + 64))
          *(_QWORD *)(a1 + 64) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
        Type = (const void *)(int)_CalEntityGetType(a2);
        Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), Type);
        if (!Value)
        {
          Value = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), Type, Value);
          CFRelease(Value);
        }
        CFSetAddValue((CFMutableSetRef)Value, a2);
        if (!*(_QWORD *)(a1 + 72))
          *(_QWORD *)(a1 + 72) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        RecordID = (const void *)_CalEntityGetRecordID(a2);
        if (RecordID)
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 72), RecordID, a2);
        v20 = _CalEntityGetType(a2);
        if (v20 <= 11)
        {
          if (v20 == 1)
          {
            v21 = *(_DWORD *)(a1 + 84) | 2;
            goto LABEL_42;
          }
          if (v20 != 4)
            return;
        }
        else
        {
          if (v20 == 12)
          {
            v21 = *(_DWORD *)(a1 + 84) | 0x10;
            goto LABEL_42;
          }
          if (v20 != 14)
          {
            if (v20 != 26)
              return;
            v21 = *(_DWORD *)(a1 + 84) | 0x20;
            goto LABEL_42;
          }
        }
        v21 = *(_DWORD *)(a1 + 84) | 8;
LABEL_42:
        *(_DWORD *)(a1 + 84) = v21;
      }
    }
  }
}

uint64_t _CalDatabaseRemoveEntity(uint64_t result, const void *a2)
{
  uint64_t v3;
  int Type;
  int v5;
  int v6;
  int v7;
  __CFSet *Value;
  const void *RecordID;
  uint64_t Store;
  const os_unfair_lock *Context;

  if (*(_QWORD *)(result + 24))
  {
    v3 = result;
    Type = _CalEntityGetType(a2);
    v5 = 1;
    switch(Type)
    {
      case 1:
        *(_DWORD *)(v3 + 84) |= 2u;
        v5 = 2;
        goto LABEL_20;
      case 2:
        v5 = 4;
        goto LABEL_20;
      case 3:
        _CalTaskPrepareForRemove((uint64_t)a2);
        v5 = 8;
        goto LABEL_20;
      case 4:
      case 14:
        v6 = *(_DWORD *)(v3 + 84) | 8;
        goto LABEL_22;
      case 5:
        _CalRecurrencePrepareForRemove((uint64_t)a2);
        v5 = 32;
        goto LABEL_20;
      case 6:
        goto LABEL_20;
      case 7:
        v5 = 64;
        goto LABEL_20;
      case 8:
      case 10:
      case 13:
      case 22:
      case 23:
      case 24:
      case 25:
        break;
      case 9:
        v5 = 128;
        goto LABEL_20;
      case 11:
        v5 = 256;
        goto LABEL_20;
      case 12:
        v6 = *(_DWORD *)(v3 + 84) | 0x10;
        goto LABEL_22;
      case 15:
        v5 = 512;
        goto LABEL_20;
      case 16:
      case 17:
      case 19:
        goto LABEL_3;
      case 18:
        v5 = 2048;
        goto LABEL_20;
      case 20:
        v5 = 4096;
        goto LABEL_20;
      case 21:
        v5 = 0x2000;
        goto LABEL_20;
      case 26:
        v6 = *(_DWORD *)(v3 + 84) | 0x20;
LABEL_22:
        *(_DWORD *)(v3 + 84) = v6;
        break;
      default:
        if (Type == 102)
        {
LABEL_3:
          v5 = 1024;
LABEL_20:
          *(_DWORD *)(v3 + 88) |= v5;
        }
        break;
    }
    if (*(_QWORD *)(v3 + 64))
    {
      v7 = _CalEntityGetType(a2);
      Value = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 64), (const void *)v7);
      if (Value)
        CFSetRemoveValue(Value, a2);
    }
    if (*(_QWORD *)(v3 + 72))
    {
      RecordID = (const void *)_CalEntityGetRecordID(a2);
      if (RecordID)
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 72), RecordID);
    }
    Store = CPRecordGetStore();
    if (CDBLockingAssertionsEnabled && Store)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

void _CalDatabaseAddPostCommitActionWithBlock(uint64_t a1, void *a2)
{
  id v3;
  __CFArray *Mutable;
  void *v5;
  id v6;

  v3 = a2;
  Mutable = *(__CFArray **)(a1 + 112);
  v6 = v3;
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v3 = v6;
    *(_QWORD *)(a1 + 112) = Mutable;
  }
  v5 = (void *)objc_msgSend(v3, "copy");
  CFArrayAppendValue(Mutable, v5);

}

const void *CalDatabaseCopyEntityWithRecordID(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;
  const __CFDictionary *v5;
  const void *Value;
  const void *v7;
  const void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (CalRecordIDIsTemporary((uint64_t)a2) && (v5 = *(const __CFDictionary **)(a1 + 72)) != 0)
  {
    Value = CFDictionaryGetValue(v5, a2);
    v7 = Value;
    if (Value)
      CFRetain(Value);
  }
  else
  {
    v7 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  if (v7)
    return v7;
  switch(CalRecordIDGetEntityType((uint64_t)a2))
  {
    case 1u:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyCalendarWithUID((os_unfair_lock_s *)a1);
      break;
    case 2u:
      v9 = CalRecordIDGetRowID((uint64_t)a2);
      result = (const void *)CalDatabaseCopyEventWithUID(a1, v9);
      break;
    case 3u:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyCalendarItemWithRowID((os_unfair_lock_s *)a1);
      break;
    case 4u:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyAlarmWithUID((os_unfair_lock_s *)a1);
      break;
    case 5u:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyRecurrenceWithUID((os_unfair_lock_s *)a1);
      break;
    case 6u:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyStoreWithUID((os_unfair_lock_s *)a1);
      break;
    case 7u:
      v10 = CalRecordIDGetRowID((uint64_t)a2);
      result = (const void *)CalDatabaseCopyAttendeeWithUID(a1, v10);
      break;
    case 8u:
      v11 = CalRecordIDGetRowID((uint64_t)a2);
      result = (const void *)CalDatabaseCopyOrganizerWithUID(a1, v11);
      break;
    case 9u:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyEventActionWithUID((os_unfair_lock_s *)a1);
      break;
    case 0xAu:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyExceptionDateWithUID((os_unfair_lock_s *)a1);
      break;
    case 0xBu:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyAttachmentWithUID((os_unfair_lock_s *)a1);
      break;
    case 0xCu:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyCategoryWithUID((os_unfair_lock_s *)a1);
      break;
    case 0xFu:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyShareeWithUID((os_unfair_lock_s *)a1);
      break;
    case 0x10u:
      v12 = CalRecordIDGetRowID((uint64_t)a2);
      result = (const void *)CalDatabaseCopyInviteReplyNotificationWithUID(a1, v12);
      break;
    case 0x11u:
      v13 = CalRecordIDGetRowID((uint64_t)a2);
      result = (const void *)CalDatabaseCopyResourceChangeNotificationWithUID(a1, v13);
      break;
    case 0x12u:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyResourceChangeWithUID((os_unfair_lock_s *)a1);
      break;
    case 0x13u:
      v14 = CalRecordIDGetRowID((uint64_t)a2);
      result = (const void *)CalDatabaseCopySuggestionNotificationWithUID(a1, v14);
      break;
    case 0x15u:
      CalRecordIDGetRowID((uint64_t)a2);
      result = CalDatabaseCopyContactWithUID((os_unfair_lock_s *)a1);
      break;
    default:
      return v7;
  }
  return result;
}

uint64_t _CalDatabaseCopyScheduledTaskCache(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
    CFRetain(*(CFTypeRef *)(a1 + 40));
  return v1;
}

void CalDatabaseRegisterYieldBlock(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *cf;

  v3 = a2;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 192));
  v4 = MEMORY[0x1A85B52F0](*(_QWORD *)(a1 + 184));
  cf = (void *)v4;
  if (v3)
  {
    v5 = (void *)objc_msgSend(v3, "copy");
    CFRetain(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = (uint64_t)cf;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(a1 + 184) = v6;
  if (v4)
    CFRelease(cf);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 192));

}

uint64_t _CalDatabaseUnlockRequested(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v6;
  const os_unfair_lock *v7;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
      v6 = Database == 0;
    else
      v6 = 1;
    if (!v6)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
    v3 = CPSqliteDatabaseUnlockRequested();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t CalDatabaseMigrateIfNeededOutOfProcess()
{
  NSObject *v0;
  void *v1;
  id v2;
  uint64_t v3;
  const char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[16];
  Class (*v14)(uint64_t);
  void *v15;
  uint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(MEMORY[0x1E0D0C2D8], "hasBeenUnlockedSinceBoot"))
  {
    os_unfair_lock_lock(&CalDatabaseMigrateIfNeededOutOfProcess_lock);
    if ((CalDatabaseMigrateIfNeededOutOfProcess_haveMigrated & 1) != 0)
      goto LABEL_20;
    if (!CalendarMigrationLibraryCore_frameworkLibrary)
    {
      *(_OWORD *)buf = xmmword_1E4F84058;
      v14 = 0;
      CalendarMigrationLibraryCore_frameworkLibrary = _sl_dlopen();
    }
    v0 = CDBLogHandle;
    if (CalendarMigrationLibraryCore_frameworkLibrary)
    {
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A5CCB000, v0, OS_LOG_TYPE_INFO, "Requesting out-of-process migration", buf, 2u);
      }
      v9 = 0;
      v10 = &v9;
      v11 = 0x2050000000;
      v1 = (void *)getCalOutOfProcessMigratorClass_softClass;
      v12 = getCalOutOfProcessMigratorClass_softClass;
      if (!getCalOutOfProcessMigratorClass_softClass)
      {
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        v14 = __getCalOutOfProcessMigratorClass_block_invoke;
        v15 = &unk_1E4F84078;
        v16 = &v9;
        __getCalOutOfProcessMigratorClass_block_invoke((uint64_t)buf);
        v1 = (void *)v10[3];
      }
      v2 = objc_retainAutorelease(v1);
      _Block_object_dispose(&v9, 8);
      if ((objc_msgSend(v2, "performMigrationIfNeeded", v9) & 1) != 0)
      {
        CalDatabaseMigrateIfNeededOutOfProcess_haveMigrated = 1;
        v3 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          v4 = "Out-of-process migration complete";
          v5 = v3;
          v6 = OS_LOG_TYPE_INFO;
LABEL_19:
          _os_log_impl(&dword_1A5CCB000, v5, v6, v4, buf, 2u);
        }
LABEL_20:
        v7 = CalDatabaseMigrateIfNeededOutOfProcess_haveMigrated;
        os_unfair_lock_unlock(&CalDatabaseMigrateIfNeededOutOfProcess_lock);
        return v7;
      }
      v0 = CDBLogHandle;
      if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_WORD *)buf = 0;
      v4 = "Out of process migration failed! This may cause the database to get deleted!";
    }
    else
    {
      if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_WORD *)buf = 0;
      v4 = "Skipping out of process migration because CalendarMigration.framework is not available";
    }
    v5 = v0;
    v6 = OS_LOG_TYPE_ERROR;
    goto LABEL_19;
  }
  return 0;
}

void sub_1A5CE0BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCreateWithOptionsDatabaseDirectoryURLAndContainerProvider(uint64_t a1, void *a2, void *a3)
{
  CalDatabaseInitializationConfiguration *v5;
  id v6;
  id v7;
  uint64_t v8;

  if ((_DWORD)a1 || a2 || a3)
  {
    v6 = a3;
    v7 = a2;
    v5 = objc_alloc_init(CalDatabaseInitializationConfiguration);
    -[CalDatabaseInitializationConfiguration setOptions:](v5, "setOptions:", a1);
    -[CalDatabaseInitializationConfiguration setDirectoryURL:](v5, "setDirectoryURL:", v7);

    -[CalDatabaseInitializationConfiguration setDataContainerProvider:](v5, "setDataContainerProvider:", v6);
  }
  else
  {
    v5 = 0;
  }
  v8 = CalDatabaseCreateWithConfiguration(v5);

  return v8;
}

uint64_t _CalDatabaseCorruptionHandler(_QWORD *a1)
{
  uint64_t v2;
  sqlite3 *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  uint32_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  uint64_t Context;
  uint64_t v21;
  void *v22;
  char v23;
  NSObject *v24;
  uint64_t v25;
  __CFString *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v32;
  int v33;
  void *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  _BYTE buf[108];
  _QWORD v40[2];

  v40[1] = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  if (!v2)
  {
    v2 = a1[35];
    if (!v2)
    {
      v16 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_ERROR, "No existing database handle while handling corrupt database error.", buf, 2u);
      }
      goto LABEL_14;
    }
  }
  v3 = *(sqlite3 **)(v2 + 8);
  if (!v3)
  {
LABEL_14:
    v4 = 0xFFFFFFFFLL;
    goto LABEL_19;
  }
  v4 = sqlite3_extended_errcode(*(sqlite3 **)(v2 + 8));
  v40[0] = 0;
  v5 = sqlite3_file_control(v3, 0, 7, v40);
  if (v40[0])
  {
    v6 = (*(uint64_t (**)(_QWORD, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v40[0] + 16))(v40[0], buf, 100, 0);
    if (!v6)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", buf, 100);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_16;
    }
    v7 = v6;
    v33 = 0;
    v8 = sqlite3_file_control(v3, 0, 4, &v33);
    v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v34) = 67109632;
      HIDWORD(v34) = v7;
      v35 = 1024;
      v36 = v33;
      v37 = 1024;
      v38 = v8;
      v10 = "Reading sqlite database header failed; sqlitecode=%i, sqlite_last_errno=%i, sqlite3_file_control return value=%i";
      v11 = (uint8_t *)&v34;
      v12 = v9;
      v13 = 20;
LABEL_10:
      _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_ERROR, v10, v11, v13);
    }
  }
  else
  {
    v14 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v5;
      v10 = "Unable to get sqlite3_file: %i";
      v11 = buf;
      v12 = v14;
      v13 = 8;
      goto LABEL_10;
    }
  }
  v15 = 0;
LABEL_16:
  v17 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    v18 = v17;
    objc_msgSend(v15, "base64EncodedStringWithOptions:", 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v4;
    *(_WORD *)&buf[8] = 2112;
    *(_QWORD *)&buf[10] = v19;
    _os_log_impl(&dword_1A5CCB000, v18, OS_LOG_TYPE_ERROR, "Calendar database corrupted with extended sqlite code %i; header from corrupt database=%@",
      buf,
      0x12u);

  }
LABEL_19:
  if (!a1[13] || (Context = CPRecordStoreGetContext()) == 0 || (v21 = Context, !*(_BYTE *)(Context + 378)))
  {
LABEL_25:
    if ((_DWORD)v4 == -1)
    {
      v26 = CFSTR("UNKNOWN");
    }
    else
    {
      v26 = CFSTR("SQLITE_OK");
      switch((char)v4)
      {
        case 0:
          break;
        case 1:
          v26 = CFSTR("SQLITE_ERROR");
          break;
        case 2:
          v26 = CFSTR("SQLITE_INTERNAL");
          break;
        case 3:
          v26 = CFSTR("SQLITE_PERM");
          break;
        case 4:
          v26 = CFSTR("SQLITE_ABORT");
          break;
        case 5:
          v26 = CFSTR("SQLITE_BUSY");
          break;
        case 6:
          v26 = CFSTR("SQLITE_LOCKED");
          break;
        case 7:
          v26 = CFSTR("SQLITE_NOMEM");
          break;
        case 8:
          v26 = CFSTR("SQLITE_READONLY");
          break;
        case 9:
          v26 = CFSTR("SQLITE_INTERRUPT");
          break;
        case 10:
          v26 = CFSTR("SQLITE_IOERR");
          break;
        case 11:
          v26 = CFSTR("SQLITE_CORRUPT");
          break;
        case 12:
          v26 = CFSTR("SQLITE_NOTFOUND");
          break;
        case 13:
          v26 = CFSTR("SQLITE_FULL");
          break;
        case 14:
          v26 = CFSTR("SQLITE_CANTOPEN");
          break;
        case 15:
          v26 = CFSTR("SQLITE_PROTOCOL");
          break;
        case 16:
          v26 = CFSTR("SQLITE_EMPTY");
          break;
        case 17:
          v26 = CFSTR("SQLITE_SCHEMA");
          break;
        case 18:
          v26 = CFSTR("SQLITE_TOOBIG");
          break;
        case 19:
          v26 = CFSTR("SQLITE_CONSTRAINT");
          break;
        case 20:
          v26 = CFSTR("SQLITE_MISMATCH");
          break;
        case 21:
          v26 = CFSTR("SQLITE_MISUSE");
          break;
        case 22:
          v26 = CFSTR("SQLITE_NOLFS");
          break;
        case 23:
          v26 = CFSTR("SQLITE_AUTH");
          break;
        case 24:
          v26 = CFSTR("SQLITE_FORMAT");
          break;
        case 25:
          v26 = CFSTR("SQLITE_RANGE");
          break;
        case 26:
          v26 = CFSTR("SQLITE_NOTADB");
          break;
        case 27:
          v26 = CFSTR("SQLITE_NOTICE");
          break;
        case 28:
          v26 = CFSTR("SQLITE_WARNING");
          break;
        default:
          if (v4 == 100)
          {
            v26 = CFSTR("SQLITE_ROW");
          }
          else if (v4 == 101)
          {
            v26 = CFSTR("SQLITE_DONE");
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_errstr(v4));
            v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          break;
      }
    }
    v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0C230]), "initWithType:subtype:context:", CFSTR("Database"), CFSTR("SQLCorruption"), v26);
    v40[0] = CFSTR("com.apple.calendardatabase.sqlite_error_code");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v4);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v28;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v34, v40, 1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = v29;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, 1);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v27, "setEvents:", v30);
    objc_msgSend(v27, "setIgnoreRateLimiting:", 1);
    objc_msgSend(v27, "report");

    return 0;
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "fileExistsAtPath:", *(_QWORD *)(v21 + 128));

  v24 = CDBLogHandle;
  if ((v23 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v25 = *(_QWORD *)(v21 + 128);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_ERROR, "The aux database at path \"%@\" is corrupt.", buf, 0xCu);
    }
    goto LABEL_25;
  }
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *(_QWORD *)(v21 + 128);
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v32;
    _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_DEFAULT, "The aux database at path \"%@\" no longer exists. Since this is an aux database, assuming that the volume was removed and ignoring.", buf, 0xCu);
  }
  return 1;
}

uint64_t _CalDatabaseCommitHook(uint64_t a1)
{
  uint64_t Context;
  uint64_t v3;
  id v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v9;
  __int16 v10;

  _CalDatabaseReportIntegrityErrors(a1);
  if (!*(_QWORD *)(a1 + 104))
  {
    v5 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return 0;
    v10 = 0;
    v6 = "The calendar database was committed, but we can't find the CPRecordStoreRef on it.";
    v7 = (uint8_t *)&v10;
LABEL_9:
    _os_log_impl(&dword_1A5CCB000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    return 0;
  }
  Context = CPRecordStoreGetContext();
  if (!Context)
  {
    v5 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return 0;
    v9 = 0;
    v6 = "The calendar database was committed, but we can't find the CalDatabaseRef on the record store.";
    v7 = (uint8_t *)&v9;
    goto LABEL_9;
  }
  v3 = Context;
  if (!*(_BYTE *)(Context + 379))
  {
    v4 = *(id *)(Context + 328);
    objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", &__block_literal_global_438);
    objc_msgSend(*(id *)(v3 + 328), "removeAllObjects");

  }
  return 0;
}

void CalDatabaseDatabaseDeletedHandler(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t Context;
  NSObject *v6;
  const char *v7;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_ERROR, "Opening the database caused it to be deleted for reason: %d", (uint8_t *)v8, 8u);
  }
  if (!*(_QWORD *)(a1 + 104))
  {
    v6 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    LOWORD(v8[0]) = 0;
    v7 = "The calendar database was deleted when opened, but we can't find the CPRecordStoreRef to notify!";
    goto LABEL_10;
  }
  Context = CPRecordStoreGetContext();
  if (Context)
  {
    *(_BYTE *)(Context + 377) = 1;
    return;
  }
  v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v8[0]) = 0;
    v7 = "The calendar database was deleted when opened, but we can't find the CalDatabaseRef to notify!";
LABEL_10:
    _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)v8, 2u);
  }
}

void _CalDatabaseStatementCompilationFailureHandler(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  NSObject *v5;
  const char *v6;
  NSObject *v12;
  uint64_t Context;
  void *v14;
  NSObject *v15;
  int v16;
  _BYTE v17[18];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 8) != a2)
  {
    v5 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    LOWORD(v16) = 0;
    v6 = "Ignoring statement creation failure because the connection is read-only";
    goto LABEL_4;
  }
  if (a3 == 1)
  {
    if ((objc_msgSend(MEMORY[0x1E0D0C2D8], "hasBeenUnlockedSinceBoot") & 1) != 0)
    {
      _CalDatabaseValidateSchemaDeleteDBAndAbortOnFailure(a1, a2);
      v12 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
      {
        v16 = 136315394;
        *(_QWORD *)v17 = a4;
        *(_WORD *)&v17[8] = 2080;
        *(_QWORD *)&v17[10] = a5;
        _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_FAULT, "Failed to compile sql statement \"%s\": %s", (uint8_t *)&v16, 0x16u);
      }
      if (*(_QWORD *)(a1 + 104))
      {
        Context = CPRecordStoreGetContext();
        if (Context)
          _CalDatabaseIntegrityError(Context, CFSTR("SQL Compile Error"));
      }
    }
    else
    {
      v5 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v16) = 0;
        v6 = "Ignoring statement creation failure because device has never unlocked.";
LABEL_4:
        _os_log_impl(&dword_1A5CCB000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v16, 2u);
      }
    }
  }
  else
  {
    v14 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v15 = v14;
      v16 = 67109378;
      *(_DWORD *)v17 = a3;
      *(_WORD *)&v17[4] = 2082;
      *(_QWORD *)&v17[6] = sqlite3_errstr(a3);
      _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_ERROR, "Ignoring statement creation failure for error %i (%{public}s)", (uint8_t *)&v16, 0x12u);

    }
  }
}

void _CalDatabaseChangedExternally(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  const os_unfair_lock *Context;
  int LastSequenceNumber;
  const os_unfair_lock *v11;
  int v12;
  const __CFString *IntegerProperty;
  id WeakRetained;
  __CFNotificationCenter *LocalCenter;

  v2 = (os_unfair_lock_s *)_CalDatabaseCopyDatabaseIfValid(a2);
  if (v2)
  {
    v3 = (uint64_t)v2;
    v4 = v2 + 20;
    os_unfair_lock_lock(v2 + 20);
    v5 = *(_DWORD *)(v3 + 120);
    v6 = __OFSUB__(v5, 1);
    v7 = v5 - 1;
    if (v7 < 0 == v6)
    {
      *(_DWORD *)(v3 + 120) = v7;
      if (CDBLockingAssertionsEnabled)
        v8 = *(_QWORD *)(v3 + 24) == 0;
      else
        v8 = 1;
      if (!v8)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      LastSequenceNumber = CPRecordStoreGetLastSequenceNumber();
      if (LastSequenceNumber == -1)
        LastSequenceNumber = *(_DWORD *)(v3 + 124);
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(v3 + 24))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
      if (CPRecordStoreGetSequenceNumber() == LastSequenceNumber)
      {
        if (CDBLockingAssertionsEnabled)
          os_unfair_lock_assert_owner(v4);
        os_unfair_lock_unlock(v4);
LABEL_29:
        CFRelease((CFTypeRef)v3);
        return;
      }
      *(_DWORD *)(v3 + 120) = 0;
    }
    v12 = *(_DWORD *)(v3 + 312);
    IntegerProperty = _CalDatabaseGetIntegerProperty(v3);
    *(_DWORD *)(v3 + 312) = (_DWORD)IntegerProperty;
    if ((*(_BYTE *)(v3 + 16) & 4) == 0)
      _CalDatabaseRevertInternal(v3, 0);
    WeakRetained = objc_loadWeakRetained((id *)(v3 + 304));
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v4);
    os_unfair_lock_unlock(v4);
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCalDatabaseChangedExternallyNotification"), (const void *)v3, 0, 1u);
    if (v12 != -1 && v12 != (_DWORD)IntegerProperty)
      objc_msgSend(WeakRetained, "database:restoreGenerationChangedExternally:", v3, IntegerProperty);

    goto LABEL_29;
  }
}

void CalDatabaseReceivedSQLProfileLoggingEnabledNotification(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  NSObject *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const __CFString *v11;
  int v12;
  const __CFString *v13;
  __int16 v14;
  const void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    v12 = 138412290;
    v13 = a3;
    _os_log_impl(&dword_1A5CCB000, v5, OS_LOG_TYPE_DEBUG, "Received notification: [%@]", (uint8_t *)&v12, 0xCu);
  }
  v6 = _CalDatabaseCopyDatabaseIfValid(a2);
  if (v6)
  {
    v7 = (const void *)v6;
    v8 = objc_msgSend(*(id *)(v6 + 296), "get_sqlProfileLoggingEnabled");
    v9 = ct_green_tea_logging_enabled();
    v10 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      v11 = CFSTR("Disabling");
      if ((_DWORD)v8)
        v11 = CFSTR("Enabling");
      v12 = 138412546;
      v13 = v11;
      v14 = 2048;
      v15 = v7;
      _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_DEBUG, "[%@] profile logging for database: [%p]", (uint8_t *)&v12, 0x16u);
    }
    CalDatabaseSetProfilingEnabled((uint64_t)v7, v8, v9, 1);
    CFRelease(v7);
  }
}

void CalDatabaseReceivedGreenTeaLoggingEnabledNotification(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  NSObject *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const __CFString *v11;
  int v12;
  const __CFString *v13;
  __int16 v14;
  const void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    v12 = 138412290;
    v13 = a3;
    _os_log_impl(&dword_1A5CCB000, v5, OS_LOG_TYPE_DEBUG, "Received notification: [%@]", (uint8_t *)&v12, 0xCu);
  }
  v6 = _CalDatabaseCopyDatabaseIfValid(a2);
  if (v6)
  {
    v7 = (const void *)v6;
    v8 = objc_msgSend(*(id *)(v6 + 296), "get_sqlProfileLoggingEnabled");
    v9 = ct_green_tea_logging_enabled();
    v10 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      v11 = CFSTR("Disabling");
      if (v9)
        v11 = CFSTR("Enabling");
      v12 = 138412546;
      v13 = v11;
      v14 = 2048;
      v15 = v7;
      _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_DEBUG, "[%@] greentea logging for database: [%p]", (uint8_t *)&v12, 0x16u);
    }
    CalDatabaseSetProfilingEnabled((uint64_t)v7, v8, v9, 1);
    CFRelease(v7);
  }
}

uint64_t CalDatabaseCreateWithOptions(uint64_t a1)
{
  return CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(a1, 0);
}

uint64_t CalDatabaseCreateWithOptionsAndDatabaseDirectory(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;

  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", a2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }
  v4 = CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(a1, v3);

  return v4;
}

uint64_t CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(uint64_t a1, void *a2)
{
  id v3;
  __CFString *IfNeeded;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v3 = a2;
  IfNeeded = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(0, 0);
  if ((a1 & 0x800) != 0
    || !v3
    || (objc_msgSend(v3, "path"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "isEqualToString:", IfNeeded),
        v5,
        v6))
  {
    objc_msgSend(MEMORY[0x1E0D0C3E0], "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v3, "URLByAppendingPathComponent:isDirectory:", *MEMORY[0x1E0D0C4A0], 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0C348]), "initWithCalendarDataContainerURL:", v8);

  }
  v9 = CalDatabaseCreateWithOptionsDatabaseDirectoryURLAndContainerProvider(a1, v3, v7);

  return v9;
}

CalDatabaseInitializationConfiguration *CalDatabaseCopyInitializationConfiguration(uint64_t a1)
{
  CalDatabaseInitializationConfiguration *v2;
  id v3;

  v2 = objc_alloc_init(CalDatabaseInitializationConfiguration);
  -[CalDatabaseInitializationConfiguration setOptions:](v2, "setOptions:", *(unsigned int *)(a1 + 16));
  v3 = *(id *)(a1 + 136);
  if (!v3)
  {
    if (*(_QWORD *)(a1 + 128))
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:");
      v3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v3 = 0;
    }
  }
  -[CalDatabaseInitializationConfiguration setDirectoryURL:](v2, "setDirectoryURL:", v3);
  -[CalDatabaseInitializationConfiguration setDataContainerProvider:](v2, "setDataContainerProvider:", *(_QWORD *)(a1 + 288));
  -[CalDatabaseInitializationConfiguration setPreferences:](v2, "setPreferences:", *(_QWORD *)(a1 + 296));

  return v2;
}

CFTypeRef CalDatabaseCopyClientIdentifier(uint64_t a1)
{
  return CalDatabaseCopyClientIdentifierOptionalLock(a1, 1);
}

CFTypeRef CalDatabaseCopyClientIdentifierOptionalLock(uint64_t a1, char a2)
{
  os_unfair_lock_s *v3;
  void *v4;
  CFTypeRef v5;

  if ((a2 & 1) != 0)
  {
    v3 = (os_unfair_lock_s *)(a1 + 80);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
    v4 = (void *)objc_msgSend(*(id *)(a1 + 144), "copy");
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v3);
    os_unfair_lock_unlock(v3);
    if (!v4)
      goto LABEL_7;
  }
  else
  {
    v4 = (void *)objc_msgSend(*(id *)(a1 + 144), "copy");
    if (!v4)
    {
LABEL_7:
      CalDatabaseGetProcessName();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  v5 = CFRetain(v4);

  return v5;
}

CFTypeRef _CalDatabaseCopyClientIdentifier(uint64_t a1)
{
  return CalDatabaseCopyClientIdentifierOptionalLock(a1, 0);
}

id CalDatabaseGetProcessName()
{
  pid_t v0;
  _BYTE buffer[1024];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  buffer[0] = 0;
  v0 = getpid();
  proc_name(v0, buffer, 0x400u);
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", buffer);
}

uint64_t CalDatabaseSaveAndFlushCaches(uint64_t a1)
{
  uint64_t v1;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 1;
  v1 = 1;
  CalDatabaseSaveInternalWithOptions(a1, 1, 0, &cf, 4);
  if (cf)
  {
    CFRelease(cf);
    return 0;
  }
  return v1;
}

CFTypeRef CalDatabaseSaveAndFlushCachesWithConflictPolicy(CFTypeRef result, unsigned __int16 a2)
{
  CFTypeRef v2;

  v2 = 0;
  if (result)
  {
    CalDatabaseSaveInternalWithOptions((uint64_t)result, 1, a2, &v2, 4);
    return v2;
  }
  return result;
}

void CalDatabaseSaveInternalWithOptions(uint64_t a1, int a2, int a3, CFTypeRef *a4, char a5)
{
  char v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  const os_unfair_lock *Context;
  const __CFArray *v11;
  const os_unfair_lock *v12;
  const __CFArray *v13;
  const os_unfair_lock *v14;
  const __CFArray *v15;
  NSObject *v16;
  CFIndex Count;
  CFIndex i;
  void *v19;
  const void *ValueAtIndex;
  void *v21;
  NSObject *v22;
  CFTypeRef DebugDescription;
  CFIndex v24;
  CFIndex j;
  void *v26;
  const void *v27;
  void *v28;
  NSObject *v29;
  CFTypeRef v30;
  CFIndex v31;
  CFIndex k;
  void *v33;
  const void *v34;
  void *v35;
  NSObject *v36;
  CFTypeRef v37;
  NSObject *v38;
  uint64_t m;
  int v40;
  void *v41;
  NSObject *v42;
  const __CFString *Name;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  NSObject *v49;
  NSObject *v50;
  const void *v51;
  const void *v52;
  const os_unfair_lock *v53;
  const __CFArray *v54;
  const __CFArray *v55;
  CFIndex v56;
  CFIndex v57;
  const void *v58;
  int Type;
  uint64_t v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  void (**v64)(_QWORD, _QWORD);
  uint64_t v65;
  const os_unfair_lock *v66;
  const __CFArray *v67;
  const os_unfair_lock *v68;
  const os_unfair_lock *v69;
  uint64_t v70;
  const __CFArray *v71;
  const __CFArray *v72;
  void *v73;
  id v74;
  void *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  NSObject *v83;
  uint64_t n;
  BOOL v85;
  int v86;
  const __CFDictionary *v87;
  CFMutableSetRef Mutable;
  const __CFSet *Value;
  const __CFSet *v90;
  CFMutableStringRef v91;
  CFMutableArrayRef v92;
  CFMutableArrayRef v93;
  CFIndex Length;
  const os_unfair_lock *v95;
  uint64_t Database;
  __CFString *v97;
  const os_unfair_lock *v98;
  uint64_t **v99;
  uint64_t **v100;
  uint64_t v101;
  const os_unfair_lock *v102;
  uint64_t v103;
  const os_unfair_lock *v104;
  const os_unfair_lock *v105;
  const __CFArray *v106;
  const __CFArray *v107;
  CFIndex v108;
  CFIndex ii;
  const void *v110;
  uint64_t v111;
  const os_unfair_lock *v112;
  const __CFArray *v113;
  const __CFArray *v114;
  CFIndex v115;
  CFIndex jj;
  const void *v117;
  const os_unfair_lock *v118;
  const __CFArray *v119;
  const __CFArray *v120;
  CFIndex v121;
  CFIndex kk;
  const void *v123;
  const os_unfair_lock *v124;
  const __CFArray *v125;
  const __CFArray *v126;
  CFIndex v127;
  CFIndex mm;
  const void *v129;
  const __CFArray *v130;
  CFTypeRef v131;
  void *v132;
  BOOL v133;
  int64_t v134;
  _BOOL4 v135;
  CFTypeRef v136;
  BOOL v137;
  CFIndex v138;
  NSObject *v139;
  id v140;
  const __CFArray *v141;
  CFIndex v142;
  uint64_t v143;
  void *v144;
  void *v145;
  BOOL v146;
  int v147;
  void *v148;
  void *v149;
  uint64_t v150;
  double Current;
  const os_unfair_lock *v152;
  uint64_t v153;
  const os_unfair_lock *v154;
  uint64_t v155;
  _QWORD *v156;
  const os_unfair_lock *v157;
  uint64_t **v158;
  const os_unfair_lock *v159;
  uint64_t v160;
  uint64_t **v161;
  uint64_t v162;
  const os_unfair_lock *v163;
  int v164;
  uint64_t v165;
  const os_unfair_lock *v166;
  uint64_t v167;
  const os_unfair_lock *v168;
  int v169;
  uint64_t v170;
  const os_unfair_lock *v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  CFStringRef v175;
  const os_unfair_lock *v176;
  uint64_t **v177;
  uint64_t v178;
  const os_unfair_lock *v179;
  void *v180;
  sqlite3 *v181;
  NSObject *v182;
  const char *v183;
  const void *v184;
  os_unfair_lock_s *v185;
  NSObject *v186;
  id v187;
  void *v188;
  const void *v189;
  const void *v190;
  const void *v191;
  CFIndex v192;
  CFIndex v193;
  uint64_t v194;
  const void *v195;
  BOOL HasDirtyInstanceAttributes;
  _BOOL4 HasDirtySyncAttributes;
  _BOOL4 v198;
  _BOOL4 v199;
  NSObject *v200;
  int v201;
  const os_unfair_lock *v202;
  int v203;
  BOOL v204;
  _BOOL4 v205;
  BOOL HasDirtyNotifiableAttributes;
  CFIndex v207;
  CFIndex nn;
  const void *v209;
  uint64_t RecordID;
  const void *v211;
  NSObject *v212;
  int ID;
  const os_unfair_lock *v214;
  int IsDeleted;
  BOOL v216;
  int v217;
  const os_unfair_lock *v218;
  int v219;
  int v220;
  const __CFString *Domain;
  const os_unfair_lock *v222;
  const os_unfair_lock *v223;
  CFIndex i1;
  const void *v225;
  uint64_t v226;
  const void *v227;
  NSObject *v228;
  int v229;
  const os_unfair_lock *v230;
  int v231;
  const void *v232;
  _BOOL4 v233;
  const __CFArray *v234;
  CFIndex v236;
  const __CFArray *v238;
  __CFSet *v239;
  __CFSet *v240;
  void *v241;
  void *v242;
  id v244;
  const __CFArray *v246;
  uint64_t v247;
  _QWORD v248[7];
  CFArrayRef theArray;
  CFTypeRef cf;
  int v251;
  uint8_t v252[16];
  _BYTE v253[24];
  __int16 v254;
  int v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  int v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  int v271;
  uint8_t buf[32];
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  int v278;
  uint64_t v279;
  CFRange v280;

  v279 = *MEMORY[0x1E0C80C00];
  v6 = (a5 & 2) == 0;
  v241 = (void *)CalDatabaseCopyClientIdentifierOptionalLock(a1, v6);
  v247 = a1;
  v242 = (void *)CalDatabaseCopyClientName(a1, v6);
  v7 = (id)CDBLogHandle;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    CalBooleanAsString();
    v8 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v241;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v242;
    *(_WORD *)&buf[22] = 2114;
    *(_QWORD *)&buf[24] = v8;
    _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_DEFAULT, "Commencing database save for client with identifier [%{public}@], name [%{public}@].  Commit: [%{public}@]", buf, 0x20u);

  }
  v244 = objc_alloc_init(MEMORY[0x1E0D0C3B0]);
  objc_msgSend(v244, "start");
  cf = 0;
  if ((a5 & 2) == 0)
    os_unfair_lock_lock((os_unfair_lock_t)(v247 + 80));
  *(_BYTE *)(v247 + 382) = (a5 & 4) != 0;
  _CalDatabaseTrimConsumedSequences(v247);
  v9 = v247;
  if (*(_QWORD *)(v247 + 24))
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    v11 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
    if (CDBLockingAssertionsEnabled)
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
    v13 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
    if (CDBLockingAssertionsEnabled)
    {
      v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v14)
        os_unfair_lock_assert_owner(v14 + 20);
    }
    v15 = (const __CFArray *)CPRecordStoreCopyDeletedRecords();
    v16 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_DEBUG, "Commencing log of changes to be saved.", buf, 2u);
      if (v11)
      {
        Count = CFArrayGetCount(v11);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            v19 = (void *)MEMORY[0x1A85B514C]();
            ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
            v21 = (void *)CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
            {
              v22 = v21;
              DebugDescription = _CalEntityGetDebugDescription(ValueAtIndex);
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = DebugDescription;
              _os_log_impl(&dword_1A5CCB000, v22, OS_LOG_TYPE_DEBUG, "Added entity: [%@]", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v19);
          }
        }
      }
      if (v13)
      {
        v24 = CFArrayGetCount(v13);
        if (v24 >= 1)
        {
          for (j = 0; j != v24; ++j)
          {
            v26 = (void *)MEMORY[0x1A85B514C]();
            v27 = CFArrayGetValueAtIndex(v13, j);
            v28 = (void *)CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
            {
              v29 = v28;
              v30 = _CalEntityGetDebugDescription(v27);
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v30;
              _os_log_impl(&dword_1A5CCB000, v29, OS_LOG_TYPE_DEBUG, "Updated entity: [%@]", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v26);
          }
        }
      }
      if (v15)
      {
        v31 = CFArrayGetCount(v15);
        if (v31 >= 1)
        {
          for (k = 0; k != v31; ++k)
          {
            v33 = (void *)MEMORY[0x1A85B514C]();
            v34 = CFArrayGetValueAtIndex(v15, k);
            v35 = (void *)CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
            {
              v36 = v35;
              v37 = _CalEntityGetDebugDescription(v34);
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v37;
              _os_log_impl(&dword_1A5CCB000, v36, OS_LOG_TYPE_DEBUG, "Deleted entity: [%@]", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v33);
          }
        }
      }
      v38 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A5CCB000, v38, OS_LOG_TYPE_DEBUG, "Completed log of changes to be saved.", buf, 2u);
      }
    }
    v278 = 0;
    v276 = 0u;
    v277 = 0u;
    v274 = 0u;
    v275 = 0u;
    v273 = 0u;
    memset(buf, 0, sizeof(buf));
    v271 = 0;
    v269 = 0u;
    v270 = 0u;
    v267 = 0u;
    v268 = 0u;
    v265 = 0u;
    v266 = 0u;
    v264 = 0u;
    v263 = 0;
    v261 = 0u;
    v262 = 0u;
    v259 = 0u;
    v260 = 0u;
    v257 = 0u;
    v258 = 0u;
    v256 = 0u;
    LODWORD(theArray) = 0;
    v251 = 0;
    *(_DWORD *)v252 = 0;
    if (v11)
    {
      _CalDatabaseCountEntitiesByType(v11, (uint64_t)buf, &theArray);
      CFRelease(v11);
    }
    if (v13)
    {
      _CalDatabaseCountEntitiesByType(v13, (uint64_t)&v264, v252);
      CFRelease(v13);
    }
    if (v15)
    {
      _CalDatabaseCountEntitiesByType(v15, (uint64_t)&v256, &v251);
      CFRelease(v15);
    }
    for (m = 0; m != 29; ++m)
    {
      v40 = *(_DWORD *)&buf[4 * m];
      if (v40 || *((_DWORD *)&v264 + m) || *((_DWORD *)&v256 + m))
      {
        v41 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
        {
          v42 = v41;
          Name = CalEntityTypeGetName((int)m + 1);
          v44 = *((_DWORD *)&v264 + m);
          v45 = *((_DWORD *)&v256 + m);
          *(_DWORD *)v253 = 138544130;
          *(_QWORD *)&v253[4] = Name;
          *(_WORD *)&v253[12] = 1024;
          *(_DWORD *)&v253[14] = v40;
          *(_WORD *)&v253[18] = 1024;
          *(_DWORD *)&v253[20] = v44;
          v254 = 1024;
          v255 = v45;
          _os_log_impl(&dword_1A5CCB000, v42, OS_LOG_TYPE_DEFAULT, "Summary of changes being saved: %{public}@ (add: %i mod: %i del: %i)", v253, 0x1Eu);

        }
      }
    }
    v46 = (int)theArray;
    v47 = v251;
    v48 = *(_DWORD *)v252;
    if ((_DWORD)theArray || *(_DWORD *)v252 || v251)
    {
      v49 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v253 = 67109632;
        *(_DWORD *)&v253[4] = v46;
        *(_WORD *)&v253[8] = 1024;
        *(_DWORD *)&v253[10] = v48;
        *(_WORD *)&v253[14] = 1024;
        *(_DWORD *)&v253[16] = v47;
        _os_log_impl(&dword_1A5CCB000, v49, OS_LOG_TYPE_DEFAULT, "Summary of changes being saved: Unknown (add: %i mod: %i del: %i)", v253, 0x14u);
      }
    }
    v9 = v247;
  }
  else
  {
    v50 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      goto LABEL_61;
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v50, OS_LOG_TYPE_ERROR, "No recordStore found.  Will not log database changes to be saved.", buf, 2u);
  }
  if (*(_QWORD *)(v9 + 24))
  {
    v51 = *(const void **)(v9 + 32);
    if (v51)
    {
      v240 = (__CFSet *)CFRetain(v51);
      _CalEventOccurrenceCacheBeginTrackingUpdates(v240);
      v9 = v247;
    }
    else
    {
      v240 = 0;
    }
    v52 = *(const void **)(v9 + 40);
    if (v52)
    {
      v239 = (__CFSet *)CFRetain(v52);
      _CalScheduledTaskCacheBeginTrackingUpdates(v239);
      v9 = v247;
    }
    else
    {
      v239 = 0;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v9 + 24))
      {
        v53 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v53)
          os_unfair_lock_assert_owner(v53 + 20);
      }
    }
    v54 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
    v55 = v54;
    if (v54)
    {
      v56 = CFArrayGetCount(v54);
      if (v56 >= 1)
      {
        v57 = 0;
        while (1)
        {
          v58 = CFArrayGetValueAtIndex(v55, v57);
          Type = _CalEntityGetType(v58);
          if (Type != 7)
            break;
          if (!_CalParticipantGetOwner(v58))
          {
            v63 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              v61 = v63;
              v62 = "Attendee has no owner. We need to remove it.";
LABEL_85:
              _os_log_impl(&dword_1A5CCB000, v61, OS_LOG_TYPE_DEBUG, v62, buf, 2u);
            }
LABEL_86:
            _CalDatabaseRemoveEntity(v247, v58);
          }
LABEL_87:
          if (v56 == ++v57)
            goto LABEL_88;
        }
        if (Type != 8 || _CalParticipantGetOwner(v58))
          goto LABEL_87;
        v60 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          v61 = v60;
          v62 = "Organizer has no owner.  We need to remove it.";
          goto LABEL_85;
        }
        goto LABEL_86;
      }
LABEL_88:
      CFRelease(v55);
    }
    theArray = 0;
    *(_QWORD *)&v264 = 0;
    *((_QWORD *)&v264 + 1) = &v264;
    *(_QWORD *)&v265 = 0x2020000000;
    BYTE8(v265) = 0;
    *(_QWORD *)&v256 = 0;
    *((_QWORD *)&v256 + 1) = &v256;
    *(_QWORD *)&v257 = 0x2020000000;
    BYTE8(v257) = 0;
    *(_QWORD *)v253 = 0;
    *(_QWORD *)&v253[8] = v253;
    *(_QWORD *)&v253[16] = 0x2020000000;
    LOBYTE(v254) = 0;
    v248[0] = MEMORY[0x1E0C809B0];
    v248[1] = 3221225472;
    v248[2] = __CalDatabaseSaveInternalWithOptions_block_invoke;
    v248[3] = &unk_1E4F84180;
    v248[4] = &v264;
    v248[5] = &v256;
    v248[6] = v253;
    v64 = (void (**)(_QWORD, _QWORD))MEMORY[0x1A85B52F0](v248);
    v65 = v247;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v247 + 24))
      {
        v66 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v66)
          os_unfair_lock_assert_owner(v66 + 20);
      }
    }
    v67 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v247 + 24))
      {
        v68 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v68)
          os_unfair_lock_assert_owner(v68 + 20);
      }
    }
    v238 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v247 + 24))
      {
        v69 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v69)
          os_unfair_lock_assert_owner(v69 + 20);
      }
    }
    v246 = (const __CFArray *)CPRecordStoreCopyDeletedRecords();
    v70 = *(_QWORD *)(v247 + 264);
    if ((a2 & 1) != 0)
    {
      if (v67)
      {
        v234 = v67;
        if (v70)
          v234 = (const __CFArray *)-[__CFArray arrayByAddingObjectsFromArray:](v67, "arrayByAddingObjectsFromArray:");
      }
      else
      {
        v234 = *(const __CFArray **)(v247 + 264);
      }
      v273 = 0u;
      memset(buf, 0, sizeof(buf));
      objc_msgSend(MEMORY[0x1E0C99D68], "CalSimulatedDateForNow");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      *(_WORD *)buf = 1;
      v74 = v73;
      objc_msgSend(v74, "dateByAddingTimeInterval:", 86400.0);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      v76 = objc_msgSend(objc_alloc(MEMORY[0x1E0D0C2B8]), "initWithStartDate:endDate:", v74, v75);
      v77 = *(void **)&buf[8];
      *(_QWORD *)&buf[8] = v76;

      *(_WORD *)&buf[16] = 1;
      CalCopyCalendar();
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "startOfDayForDate:", v74);
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D0C408], "lookaheadIntervalForDaysPerEntry:", *MEMORY[0x1E0D0BF48]);
      objc_msgSend(v79, "dateByAddingTimeInterval:");
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      v81 = objc_msgSend(objc_alloc(MEMORY[0x1E0D0C2B8]), "initWithStartDate:endDate:", v79, v80);
      v82 = *(void **)&buf[24];
      *(_QWORD *)&buf[24] = v81;

      LOBYTE(v273) = 0;
      _CalDatabaseChangesOfTypeMayAffectWidgets(v247, v234, 0, buf);
      if (!buf[1])
      {
        _CalDatabaseChangesOfTypeMayAffectWidgets(v247, v238, 1uLL, buf);
        if (!buf[1])
          _CalDatabaseChangesOfTypeMayAffectWidgets(v247, v246, 2uLL, buf);
      }
      v233 = buf[17] != 0;
      if (buf[17])
      {
        *(_DWORD *)(v247 + 84) |= 0x80u;
      }
      else
      {
        v83 = (id)CDBWidgetReloadHandle;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v252 = 0;
          _os_log_impl(&dword_1A5CCB000, v83, OS_LOG_TYPE_DEFAULT, "Disallowing reload for changes because they don't affect the widget", v252, 2u);
        }

      }
      if (buf[1])
        *(_DWORD *)(v247 + 84) |= 0x40u;

      for (n = 40; n != -8; n -= 16)
      v65 = v247;
      goto LABEL_129;
    }
    v71 = v67;
    if (v70)
    {
      if (!v67)
      {
        v234 = 0;
        v233 = 0;
LABEL_129:
        if (*(_BYTE *)(v65 + 381)
          || (v85 = __CalDatabaseBeginWriteTransaction(v65, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabase.m:2739"), v65 = v247, v85))
        {
          *(_BYTE *)(v65 + 381) = a2 ^ 1;
          v86 = 1;
        }
        else
        {
          v139 = (id)CDBLogHandle;
          if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A5CCB000, v139, OS_LOG_TYPE_ERROR, "Couldn't begin a transaction. Won't save the database", buf, 2u);
          }

          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CalDatabaseErrorDomain"), 1, 0);
          v140 = (id)objc_claimAutoreleasedReturnValue();

          cf = v140;
          v86 = 0;
          v65 = v247;
        }
        if (cf)
          goto LABEL_226;
        cf = (CFTypeRef)_CalStoreSaveAddedRecords(v65);
        v65 = v247;
        if (cf)
          goto LABEL_226;
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 1, _CalCalendarHasValidParent);
        cf = (CFTypeRef)_CalCalendarSaveAddedRecords(v247);
        v65 = v247;
        if (cf)
          goto LABEL_226;
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 28, _CalImageHasValidParent);
        cf = (CFTypeRef)_CalImageSaveAddedRecords(v247);
        v65 = v247;
        if (cf)
          goto LABEL_226;
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 29, _CalColorHasValidParent);
        cf = (CFTypeRef)_CalColorSaveAddedRecords(v247);
        v65 = v247;
        if (cf)
          goto LABEL_226;
        v87 = *(const __CFDictionary **)(v247 + 64);
        if (v87)
        {
          Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
          Value = (const __CFSet *)CFDictionaryGetValue(v87, (const void *)2);
          if (Value)
            CFSetApplyFunction(Value, (CFSetApplierFunction)_CalendarItemSetUnion, Mutable);
          v90 = (const __CFSet *)CFDictionaryGetValue(v87, (const void *)3);
          if (v90)
            CFSetApplyFunction(v90, (CFSetApplierFunction)_CalendarItemSetUnion, Mutable);
          if (Mutable)
          {
            if (CFSetGetCount(Mutable) >= 1)
            {
              v91 = CFStringCreateMutable(0, 0);
              v92 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
              v93 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
              *(_QWORD *)buf = v247;
              *(_QWORD *)&buf[8] = v91;
              *(_QWORD *)&buf[16] = v92;
              *(_QWORD *)&buf[24] = v93;
              CFSetApplyFunction(Mutable, (CFSetApplierFunction)_CalGatherAddedDetachedItemDetails, buf);
              Length = CFStringGetLength(v91);
              if (Length >= 1)
              {
                v280.length = 1;
                v280.location = Length - 1;
                CFStringDelete(v91, v280);
                if (CDBLockingAssertionsEnabled)
                {
                  if (*(_QWORD *)(v247 + 24))
                  {
                    v95 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v95)
                      os_unfair_lock_assert_owner(v95 + 20);
                  }
                }
                Database = CPRecordStoreGetDatabase();
                v97 = CFStringCreateMutable(0, 0);
                CFStringAppendFormat(v97, 0, CFSTR("SELECT ROWID, orig_item_id, orig_date FROM CalendarItem WHERE orig_date IN (%@)"), v91);
                if (CDBLockingAssertionsEnabled)
                {
                  if (Database)
                  {
                    if (*(_QWORD *)(Database + 104))
                    {
                      v98 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v98)
                        os_unfair_lock_assert_owner(v98 + 20);
                    }
                  }
                }
                v99 = (uint64_t **)CPSqliteDatabaseStatementForReading();
                v100 = v99;
                if (v99)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*v99)
                    {
                      v101 = **v99;
                      if (v101)
                      {
                        if (*(_QWORD *)(v101 + 104))
                        {
                          v102 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v102)
                            os_unfair_lock_assert_owner(v102 + 20);
                        }
                      }
                    }
                  }
                  CPSqliteStatementSendResults();
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*v100)
                    {
                      v103 = **v100;
                      if (v103)
                      {
                        if (*(_QWORD *)(v103 + 104))
                        {
                          v104 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v104)
                            os_unfair_lock_assert_owner(v104 + 20);
                        }
                      }
                    }
                  }
                  CPSqliteStatementReset();
                }
                CFRelease(v97);
              }
              CFRelease(v93);
              CFRelease(v92);
              CFRelease(v91);
            }
            CFRelease(Mutable);
          }
        }
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 2, _CalCalendarItemHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 3, _CalCalendarItemHasValidParent);
        v65 = v247;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)(v247 + 24))
          {
            v105 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v105)
              os_unfair_lock_assert_owner(v105 + 20);
          }
        }
        v106 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
        v107 = v106;
        if (v106)
        {
          v108 = CFArrayGetCount(v106);
          if (v108 >= 1)
          {
            for (ii = 0; ii != v108; ++ii)
            {
              v110 = CFArrayGetValueAtIndex(v107, ii);
              if (_CalEntityIsOfType(v110, 2))
                _CalEventRectifyRecurrenceSeriesPrivacyLevels(v110);
            }
          }
          CFRelease(v107);
        }
        cf = (CFTypeRef)_CalEventSaveAddedRecords(v247);
        if (cf)
          goto LABEL_226;
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 4, _CalAlarmHasValidParent);
        cf = (CFTypeRef)_CalAlarmSaveAddedRecords(v247);
        v65 = v247;
        if (cf)
          goto LABEL_226;
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 25, _CalAttachmentFileHasValidParent);
        cf = (CFTypeRef)_CalAttachmentFileSaveAddedRecords(v247);
        v65 = v247;
        if (cf)
          goto LABEL_226;
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 11, _CalAttachmentHasValidParent);
        cf = (CFTypeRef)_CalAttachmentSaveAddedRecords(v247);
        v65 = v247;
        if (cf)
          goto LABEL_226;
        v111 = *(_QWORD *)(v247 + 24);
        if (CDBLockingAssertionsEnabled)
        {
          if (v111)
          {
            v112 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v112)
              os_unfair_lock_assert_owner(v112 + 20);
          }
        }
        v113 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
        v114 = v113;
        if (v113)
        {
          v115 = CFArrayGetCount(v113);
          if (v115 >= 1)
          {
            for (jj = 0; jj != v115; ++jj)
            {
              v117 = CFArrayGetValueAtIndex(v114, jj);
              if (_CalEntityIsOfType(v117, 20))
                _CalSuggestedEventInfoInsertAndUpdateNotificationsForInfo((uint64_t)v117);
            }
          }
          CFRelease(v114);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (v111)
          {
            v118 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v118)
              os_unfair_lock_assert_owner(v118 + 20);
          }
        }
        v119 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
        v120 = v119;
        if (v119)
        {
          v121 = CFArrayGetCount(v119);
          if (v121 >= 1)
          {
            for (kk = 0; kk != v121; ++kk)
            {
              v123 = CFArrayGetValueAtIndex(v120, kk);
              if (_CalEntityIsOfType(v123, 20))
              {
                _CalSuggestedEventInfoInsertAndUpdateNotificationsForInfo((uint64_t)v123);
              }
              else if (_CalEntityIsOfType(v123, 2)
                     && _CalCalendarItemGetStatus((uint64_t)v123) == 3
                     && _CalEventIsSuggestedEvent((uint64_t)v123))
              {
                _CalSuggestedEventInfoInsertAndUpdateNotificationsForEvent((uint64_t)v123);
              }
            }
          }
          CFRelease(v120);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (v111)
          {
            v124 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v124)
              os_unfair_lock_assert_owner(v124 + 20);
          }
        }
        v125 = (const __CFArray *)CPRecordStoreCopyDeletedRecords();
        v126 = v125;
        if (v125)
        {
          v127 = CFArrayGetCount(v125);
          if (v127 >= 1)
          {
            for (mm = 0; mm != v127; ++mm)
            {
              v129 = CFArrayGetValueAtIndex(v126, mm);
              if (_CalEntityIsOfType(v129, 20))
                _CalSuggestedEventInfoRemoveNotificationsForInfo((uint64_t)v129);
            }
          }
          CFRelease(v126);
        }
        v65 = v247;
        if (cf
          || (_CalDatabaseRemoveOrphanedEntitiesOfType(v247, 102, _CalNotificationHasValidParent),
              cf = (CFTypeRef)_CalNotificationSaveAddedRecords(v247),
              v65 = v247,
              cf)
          || (cf = (CFTypeRef)_CalAuxDatabaseSaveAddedRecords(v247), v65 = v247, cf))
        {
LABEL_226:
          if ((v86 & a2) != 1)
          {
            v130 = 0;
            goto LABEL_230;
          }
          __CalDatabaseRollbackTransaction(v65, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabase.m:3004");
          v130 = 0;
LABEL_228:
          v65 = v247;
LABEL_230:
          v131 = cf;
          if (*(_QWORD *)(v65 + 32) && cf)
          {
            _CalEventOccurrenceCacheStopTrackingAndRevert();
            v131 = cf;
            v65 = v247;
          }
          v132 = *(void **)(v65 + 40);
          if (v132)
          {
            if (v131)
            {
              _CalScheduledTaskCacheStopTrackingUpdates(v132);
              _CalScheduledTaskCacheRevert(*(_QWORD *)(v247 + 40));
              if (a2)
                _CalScheduledTaskCacheFinishSave(*(_QWORD *)(v247 + 40));
            }
          }
          v133 = _CalDatabaseShouldPostInProcessChangeNotification(v247);
          v134 = 0;
          v135 = 0;
          v136 = cf;
          if (a2 && !cf)
          {
            if ((*(_BYTE *)(v247 + 16) & 8) == 0)
            {
              v137 = v133;
              if (v130)
                v138 = CFArrayGetCount(v130);
              else
                v138 = 0;
              v141 = theArray;
              if (theArray)
              {
                v142 = CFArrayGetCount(theArray);
                if (v130)
                {
                  if (*(_BYTE *)(*((_QWORD *)&v264 + 1) + 24))
                    goto LABEL_251;
                  if (*(_BYTE *)(*((_QWORD *)&v256 + 1) + 24))
                  {
                    if (!*(_BYTE *)(*(_QWORD *)&v253[8] + 24))
                    {
                      v134 = 1;
                      goto LABEL_252;
                    }
LABEL_251:
                    v134 = 0;
LABEL_252:
                    v143 = v142 + v138;
                    if (v137)
                    {
                      +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:](CalDatabaseInMemoryChangeTracking, "changeTrackingForDatabase:", v247);
                      v144 = (void *)objc_claimAutoreleasedReturnValue();
                      v145 = v144;
                      if (v143 > 512)
                        objc_msgSend(v144, "clearAllChangesets");
                      else
                        objc_msgSend(v144, "addChangeset:deletes:clientID:changeType:", v130, v141, *(unsigned int *)(v247 + 168), v134);

                      v147 = 1;
                    }
                    else
                    {
                      if (v143 > 512)
                        v146 = _CalDatabaseSendChangeNotificationWithNoObjectIdsToCalaccessd(v247, v134);
                      else
                        v146 = _CalDatabaseSendChangeNotificationAndObjectIdsToCalaccessd(v247, v130, v141, v134, a5 & 1, v242);
                      if (!v146)
                        _CalDatabasePostChangeNotificationToExternalClients(v247, v134);
                      v147 = 0;
                    }
                    CalDatabaseRequestApplicationSnapshotUpdateWithRateLimiter();
                    if (v233)
                      CalDatabaseRequestWidgetRefreshWithRateLimiter();
                    goto LABEL_271;
                  }
                  if (*(_BYTE *)(*(_QWORD *)&v253[8] + 24))
                  {
                    v134 = 2;
                    goto LABEL_252;
                  }
                }
              }
              v134 = 0;
              v147 = 0;
LABEL_271:
              v135 = v147 != 0;
              v136 = cf;
              goto LABEL_272;
            }
            v136 = 0;
            v135 = 0;
            v134 = 0;
          }
LABEL_272:
          if (*(unsigned __int8 *)(v247 + 272) | _IsUnitTesting && a2 && !v136)
          {
            if ((*(_BYTE *)(v247 + 16) & 8) == 0)
              goto LABEL_284;
            +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:](CalDatabaseInMemoryChangeTracking, "changeTrackingForDatabase:", v247);
            v148 = (void *)objc_claimAutoreleasedReturnValue();
            v149 = v148;
            if (v130 && theArray)
              objc_msgSend(v148, "addChangeset:deletes:clientID:changeType:", v130, theArray, *(unsigned int *)(v247 + 168), v134);
            else
              objc_msgSend(v148, "clearAllChangesets");

            v136 = cf;
          }
          if (v136)
          {
            v150 = v247;
            if (!a2)
            {
LABEL_365:
              if (*(_BYTE *)(v150 + 382))
              {
                _CalDatabaseRevertInternal(v150, 1);
                v150 = v247;
                *(_BYTE *)(v247 + 382) = 0;
              }
              v185 = (os_unfair_lock_s *)(v150 + 80);
              if (CDBLockingAssertionsEnabled)
                os_unfair_lock_assert_owner((const os_unfair_lock *)(v150 + 80));
              os_unfair_lock_unlock(v185);
              if (v135)
                _CalDatabasePostDBOrSyncStatusChangeNotificationToInternalAndExternalClients(v247, v134, a5 & 1);
              if (cf)
              {
                if (a4)
                  *a4 = cf;
                else
                  CFRelease(cf);
              }
              if (v130)
                CFRelease(v130);
              if (theArray)
                CFRelease(theArray);
              if (v67)
                CFRelease(v67);
              if (v238)
                CFRelease(v238);
              if (v246)
                CFRelease(v246);
              if (v240)
                CFRelease(v240);
              if (v239)
                CFRelease(v239);
              objc_msgSend(v244, "stop");
              v186 = (id)CDBLogHandle;
              if (os_log_type_enabled(v186, OS_LOG_TYPE_DEBUG))
              {
                CalBooleanAsString();
                v187 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v244, "elapsedTimeAsNumber:", 1));
                v188 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412546;
                *(_QWORD *)&buf[4] = v187;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v188;
                _os_log_impl(&dword_1A5CCB000, v186, OS_LOG_TYPE_DEBUG, "Database save complete.  Commit: [%@].  Total time spent: [%@] milliseconds.", buf, 0x16u);

              }
              _Block_object_dispose(v253, 8);
              _Block_object_dispose(&v256, 8);
              _Block_object_dispose(&v264, 8);
              goto LABEL_392;
            }
LABEL_363:
            v184 = *(const void **)(v150 + 264);
            if (v184)
            {
              CFRelease(v184);
              v150 = v247;
              *(_QWORD *)(v247 + 264) = 0;
            }
            goto LABEL_365;
          }
LABEL_284:
          if (v246 && CFArrayGetCount(v246) >= 1)
          {
            if (CalDatabaseIsCurrentProcessCalaccessd_onceToken != -1)
              dispatch_once(&CalDatabaseIsCurrentProcessCalaccessd_onceToken, &__block_literal_global_49);
            if (CalDatabaseIsCurrentProcessCalaccessd_isCalaccessd)
            {
              if (_CalDatabaseVacuumIfNeeded_onceToken != -1)
                dispatch_once(&_CalDatabaseVacuumIfNeeded_onceToken, &__block_literal_global_315);
              Current = CFAbsoluteTimeGetCurrent();
              if (Current - *(double *)&_CalDatabaseVacuumIfNeeded___LastVacuumTimestamp > 3.0)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (*(_QWORD *)(v247 + 24))
                  {
                    v152 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v152)
                      os_unfair_lock_assert_owner(v152 + 20);
                  }
                }
                v153 = CPRecordStoreGetDatabase();
                if (CDBLockingAssertionsEnabled)
                {
                  if (v153)
                  {
                    if (*(_QWORD *)(v153 + 104))
                    {
                      v154 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v154)
                        os_unfair_lock_assert_owner(v154 + 20);
                    }
                  }
                }
                v155 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
                v156 = (_QWORD *)v155;
                if (v155)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*(_QWORD *)v155)
                    {
                      if (*(_QWORD *)(*(_QWORD *)v155 + 104))
                      {
                        v157 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v157)
                          os_unfair_lock_assert_owner(v157 + 20);
                      }
                    }
                  }
                  v158 = (uint64_t **)CPSqliteConnectionStatementForSQL();
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*v156)
                    {
                      if (*(_QWORD *)(*v156 + 104))
                      {
                        v159 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v159)
                          os_unfair_lock_assert_owner(v159 + 20);
                      }
                    }
                  }
                  v160 = CPSqliteConnectionStatementForSQL();
                  if (v158)
                  {
                    v161 = (uint64_t **)v160;
                    if (v160)
                    {
                      *(_DWORD *)v252 = 0;
                      if (CDBLockingAssertionsEnabled)
                      {
                        if (*v158)
                        {
                          v162 = **v158;
                          if (v162)
                          {
                            if (*(_QWORD *)(v162 + 104))
                            {
                              v163 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v163)
                                os_unfair_lock_assert_owner(v163 + 20);
                            }
                          }
                        }
                      }
                      v164 = CPSqliteStatementIntegerResult();
                      if (CDBLockingAssertionsEnabled)
                      {
                        if (*v158)
                        {
                          v165 = **v158;
                          if (v165)
                          {
                            if (*(_QWORD *)(v165 + 104))
                            {
                              v166 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v166)
                                os_unfair_lock_assert_owner(v166 + 20);
                            }
                          }
                        }
                      }
                      CPSqliteStatementReset();
                      if (CDBLockingAssertionsEnabled)
                      {
                        if (*v161)
                        {
                          v167 = **v161;
                          if (v167)
                          {
                            if (*(_QWORD *)(v167 + 104))
                            {
                              v168 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v168)
                                os_unfair_lock_assert_owner(v168 + 20);
                            }
                          }
                        }
                      }
                      v169 = CPSqliteStatementIntegerResult();
                      if (CDBLockingAssertionsEnabled)
                      {
                        if (*v161)
                        {
                          v170 = **v161;
                          if (v170)
                          {
                            if (*(_QWORD *)(v170 + 104))
                            {
                              v171 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v171)
                                os_unfair_lock_assert_owner(v171 + 20);
                            }
                          }
                        }
                      }
                      CPSqliteStatementReset();
                      if (*(_DWORD *)v252 != 1)
                      {
                        v172 = v164 - (uint64_t)v169;
                        v173 = (double)v172 / (double)v164;
                        if (v173 <= 0.85 || v169 >= 512)
                        {
                          v174 = v169 - v172;
                          if (v173 >= 0.4)
                            v174 = (uint64_t)((double)v169 * 0.2);
                          v175 = CFStringCreateWithFormat(0, 0, CFSTR("pragma incremental_vacuum(%d);"), v174);
                          if (v175)
                          {
                            if (CDBLockingAssertionsEnabled)
                            {
                              if (*v156)
                              {
                                if (*(_QWORD *)(*v156 + 104))
                                {
                                  v176 = (const os_unfair_lock *)CPRecordStoreGetContext();
                                  if (v176)
                                    os_unfair_lock_assert_owner(v176 + 20);
                                }
                              }
                            }
                            v177 = (uint64_t **)CPSqliteConnectionStatementForSQL();
                            if (v177)
                            {
                              if (CDBLockingAssertionsEnabled)
                              {
                                if (*v177)
                                {
                                  v178 = **v177;
                                  if (v178)
                                  {
                                    if (*(_QWORD *)(v178 + 104))
                                    {
                                      v179 = (const os_unfair_lock *)CPRecordStoreGetContext();
                                      if (v179)
                                        os_unfair_lock_assert_owner(v179 + 20);
                                    }
                                  }
                                }
                              }
                              CPSqliteStatementSendResults();
                            }
                            else
                            {
                              v180 = (void *)CDBLogHandle;
                              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                              {
                                v181 = (sqlite3 *)v156[1];
                                v182 = v180;
                                v183 = sqlite3_errmsg(v181);
                                *(_DWORD *)buf = 138412546;
                                *(_QWORD *)&buf[4] = v175;
                                *(_WORD *)&buf[12] = 2080;
                                *(_QWORD *)&buf[14] = v183;
                                _os_log_impl(&dword_1A5CCB000, v182, OS_LOG_TYPE_ERROR, "Couldn't get statement for SQL \"%@\"\nError: %s", buf, 0x16u);

                              }
                            }
                            CFRelease(v175);
                          }
                        }
                      }
                    }
                  }
                }
                _CalDatabaseVacuumIfNeeded___LastVacuumTimestamp = *(_QWORD *)&Current;
              }
            }
          }
          v150 = v247;
          if (!a2)
            goto LABEL_365;
          *(_DWORD *)(v247 + 84) = 0;
          *(_DWORD *)(v247 + 88) = 0;
          goto LABEL_363;
        }
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 7, _CalParticipantHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 8, _CalParticipantHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 9, _CalEventActionHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 5, _CalRecurrenceHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 10, _CalExceptionDateHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 14, _CalLocationHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 15, _CalShareeHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 16, _CalNotificationHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 18, _CalResourceChangeHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 20, _CalSuggestedEventInfoHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 21, _CalContactHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 23, _CalConferenceHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 24, _CalErrorHasValidParent);
        _CalDatabaseRemoveOrphanedEntitiesOfType(v247, 27, _CalAuxDatabaseAccountHasValidParent);
        v189 = *(const void **)(v247 + 64);
        if (v189)
        {
          CFRelease(v189);
          *(_QWORD *)(v247 + 64) = 0;
        }
        v190 = *(const void **)(v247 + 72);
        if (v190)
        {
          CFRelease(v190);
          *(_QWORD *)(v247 + 72) = 0;
        }
        v191 = *(const void **)(v247 + 96);
        if (v191)
        {
          CFRelease(v191);
          *(_QWORD *)(v247 + 96) = 0;
        }
        v130 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        if (!v238 || (v192 = CFArrayGetCount(v238), v192 < 1))
        {
LABEL_434:
          if (v246)
          {
            v207 = CFArrayGetCount(v246);
            if (v207 >= 1)
            {
              for (nn = 0; nn != v207; ++nn)
              {
                v209 = CFArrayGetValueAtIndex(v246, nn);
                RecordID = _CalEntityGetRecordID(v209);
                v211 = (const void *)RecordID;
                if (RecordID)
                {
                  if (!CalDatabaseChangesToRecordIDShouldBeIgnoredByEventKit(RecordID))
                  {
                    if (_CalEntityIsOfType(v209, 24))
                    {
                      *(_BYTE *)(*((_QWORD *)&v256 + 1) + 24) = 1;
                      validateAndAddObjectID(theArray, v211);
                    }
                    else
                    {
                      ((void (**)(_QWORD, const void *))v64)[2](v64, v209);
                      validateAndAddObjectID(theArray, v211);
                      addRelatedObjectIDsForDeletedRecord(v209, (CFTypeRef *)&theArray);
                    }
                  }
                }
                else
                {
                  v212 = (id)CDBLogHandle;
                  if (os_log_type_enabled(v212, OS_LOG_TYPE_ERROR))
                  {
                    ID = CPRecordGetID();
                    if (CDBLockingAssertionsEnabled)
                    {
                      if (v209)
                      {
                        if (CPRecordGetStore())
                        {
                          v214 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v214)
                            os_unfair_lock_assert_owner(v214 + 20);
                        }
                      }
                    }
                    IsDeleted = CPRecordIsDeleted();
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&buf[4] = ID;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = IsDeleted;
                    _os_log_impl(&dword_1A5CCB000, v212, OS_LOG_TYPE_ERROR, "CalDatabaseSaveInternal: failed to get recordID for deleted record with rowid [%d], deleted: %d", buf, 0xEu);
                  }

                }
              }
            }
          }
          if (CDBLockingAssertionsEnabled)
            v216 = *(_QWORD *)(v247 + 24) == 0;
          else
            v216 = 1;
          v217 = !v216;
          if ((a2 & 1) != 0)
          {
            if (v217)
            {
              v218 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v218)
                os_unfair_lock_assert_owner(v218 + 20);
            }
            v219 = CPRecordStoreSaveWithPreAndPostCallbacksAndTransactionType();
            v220 = v219;
            if (a3 != 1 && v219 != 1)
            {
              if (cf)
              {
                Domain = CFErrorGetDomain((CFErrorRef)cf);
                if (Domain)
                {
                  if (CFStringCompare(Domain, (CFStringRef)*MEMORY[0x1E0CFAA40], 0) == kCFCompareEqualTo
                    && CFErrorGetCode((CFErrorRef)cf) == 2)
                  {
                    CFRelease(cf);
                    cf = 0;
                    if (CDBLockingAssertionsEnabled)
                    {
                      if (*(_QWORD *)(v247 + 24))
                      {
                        v222 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v222)
                          os_unfair_lock_assert_owner(v222 + 20);
                      }
                    }
                    v220 = CPRecordStoreSaveWithPreAndPostCallbacksAndTransactionType();
                  }
                }
              }
            }
            if (v220)
              __CalDatabaseCommitTransaction(v247, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabase.m:2976");
            else
              __CalDatabaseRollbackTransaction(v247, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabase.m:2978");
          }
          else
          {
            if (v217)
            {
              v223 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v223)
                os_unfair_lock_assert_owner(v223 + 20);
            }
            CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionType();
          }
          if (v234)
          {
            v236 = CFArrayGetCount(v234);
            if (v236 >= 1)
            {
              for (i1 = 0; i1 != v236; ++i1)
              {
                v225 = CFArrayGetValueAtIndex(v234, i1);
                v226 = _CalEntityGetRecordID(v225);
                v227 = (const void *)v226;
                if (v226)
                {
                  if (!CalDatabaseChangesToRecordIDShouldBeIgnoredByEventKit(v226))
                  {
                    if (_CalEntityIsOfType(v225, 24))
                      *(_BYTE *)(*((_QWORD *)&v256 + 1) + 24) = 1;
                    else
                      ((void (**)(_QWORD, const void *))v64)[2](v64, v225);
                    validateAndAddObjectID(v130, v227);
                  }
                }
                else
                {
                  v228 = (id)CDBLogHandle;
                  if (os_log_type_enabled(v228, OS_LOG_TYPE_ERROR))
                  {
                    v229 = CPRecordGetID();
                    if (CDBLockingAssertionsEnabled)
                    {
                      if (v225)
                      {
                        if (CPRecordGetStore())
                        {
                          v230 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v230)
                            os_unfair_lock_assert_owner(v230 + 20);
                        }
                      }
                    }
                    v231 = CPRecordIsDeleted();
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&buf[4] = v229;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v231;
                    _os_log_impl(&dword_1A5CCB000, v228, OS_LOG_TYPE_ERROR, "CalDatabaseSaveInternal: failed to get recordID for added record with rowid [%d], deleted: %d", buf, 0xEu);
                  }

                }
              }
            }
          }
          goto LABEL_228;
        }
        v193 = 0;
        while (1)
        {
          v232 = CFArrayGetValueAtIndex(v238, v193);
          v194 = _CalEntityGetRecordID(v232);
          v195 = (const void *)v194;
          if (!v194)
          {
            v200 = (id)CDBLogHandle;
            if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
            {
              v201 = CPRecordGetID();
              if (CDBLockingAssertionsEnabled)
              {
                if (v232)
                {
                  if (CPRecordGetStore())
                  {
                    v202 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v202)
                      os_unfair_lock_assert_owner(v202 + 20);
                  }
                }
              }
              v203 = CPRecordIsDeleted();
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&buf[4] = v201;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v203;
              _os_log_impl(&dword_1A5CCB000, v200, OS_LOG_TYPE_ERROR, "CalDatabaseSaveInternal: failed to get recordID for updated record with rowid [%d], deleted: %d", buf, 0xEu);
            }

            goto LABEL_433;
          }
          if (!CalDatabaseChangesToRecordIDShouldBeIgnoredByEventKit(v194))
          {
            if (CalRecordIDGetEntityType((uint64_t)v195) == 6)
            {
              HasDirtyInstanceAttributes = _CalStoreHasDirtyInstanceAttributes((uint64_t)v232);
              HasDirtySyncAttributes = _CalStoreHasDirtySyncAttributes((uint64_t)v232);
              _CalStoreClearDirtyAttributes((uint64_t)v232);
              if (!HasDirtyInstanceAttributes)
              {
                if (!HasDirtySyncAttributes)
                  goto LABEL_433;
LABEL_420:
                *(_BYTE *)(*((_QWORD *)&v256 + 1) + 24) = 1;
                validateAndAddObjectID(v130, v195);
                goto LABEL_433;
              }
              v198 = _CalStoreAllowsEvents((uint64_t)v232);
              v199 = _CalStoreAllowedEvents((uint64_t)v232);
              if (v198 || v199)
              {
                if (!v199 || v198)
                  goto LABEL_431;
                ((void (**)(_QWORD, const void *))v64)[2](v64, v232);
                validateAndAddObjectID(theArray, v195);
                addRelatedObjectIDsForDeletedRecord(v232, (CFTypeRef *)&theArray);
              }
            }
            else
            {
              if (CalRecordIDGetEntityType((uint64_t)v195) != 1)
              {
                if (_CalEntityIsOfType(v232, 11))
                {
                  HasDirtyNotifiableAttributes = _CalAttachmentHasDirtyInstanceAttributes((uint64_t)v232);
LABEL_427:
                  if (!HasDirtyNotifiableAttributes)
                    goto LABEL_433;
                  goto LABEL_431;
                }
                if (_CalEntityIsOfType(v232, 101))
                {
                  HasDirtyNotifiableAttributes = _CalCalendarItemHasDirtyNotifiableAttributes((uint64_t)v232);
                  goto LABEL_427;
                }
                if (_CalEntityIsOfType(v232, 24))
                  *(_BYTE *)(*((_QWORD *)&v256 + 1) + 24) = 1;
                else
LABEL_431:
                  ((void (**)(_QWORD, const void *))v64)[2](v64, v232);
                validateAndAddObjectID(v130, v195);
                goto LABEL_433;
              }
              v204 = _CalCalendarHasDirtyInstanceAttributes((uint64_t)v232);
              v205 = _CalCalendarHasDirtySyncAttributes((uint64_t)v232);
              if (v204)
                goto LABEL_431;
              if (v205)
                goto LABEL_420;
            }
          }
LABEL_433:
          if (v192 == ++v193)
            goto LABEL_434;
        }
      }
      v71 = (const __CFArray *)objc_msgSend(*(id *)(v247 + 264), "arrayByAddingObjectsFromArray:", v67);
    }
    if (!v71 || (v72 = *(const __CFArray **)(v247 + 264), v71 == v72))
    {
      v233 = 0;
    }
    else
    {
      if (v72)
        CFRelease(v72);
      v233 = 0;
      *(_QWORD *)(v247 + 264) = CFRetain(v71);
    }
    v234 = v67;
    goto LABEL_129;
  }
  v50 = CDBLogHandle;
LABEL_61:
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v50, OS_LOG_TYPE_DEBUG, "No record store found.  Will not proceed with saving the database.", buf, 2u);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner((const os_unfair_lock *)(v9 + 80));
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 80));
LABEL_392:

}

void sub_1A5CE4350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a63, 8);
  _Unwind_Resume(a1);
}

void CalDatabaseSetStatementCacheLimit(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 24);
  if (CDBLockingAssertionsEnabled)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  CPSqliteDatabaseSetStatementCacheLimit();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

uint64_t CalDatabaseStatementCacheLimit(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t StatementCacheLimit;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 24);
  if (CDBLockingAssertionsEnabled)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  StatementCacheLimit = CPSqliteDatabaseGetStatementCacheLimit();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return StatementCacheLimit;
}

uint64_t CalDatabaseCopyAddedRecords(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t v6;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 24);
  if (CDBLockingAssertionsEnabled)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreCopyAddedRecords();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v6;
}

CFTypeRef CalDatabaseSaveWithConflictPolicy(CFTypeRef result, unsigned __int16 a2)
{
  CFTypeRef v2;

  v2 = 0;
  if (result)
  {
    CalDatabaseSaveInternalWithOptions((uint64_t)result, 1, a2, &v2, 0);
    return v2;
  }
  return result;
}

uint64_t CalDatabaseSaveWithOptions(uint64_t a1, char a2)
{
  uint64_t v2;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 1;
  v2 = 1;
  CalDatabaseSaveInternalWithOptions(a1, 1, 0, &cf, a2);
  if (cf)
  {
    CFRelease(cf);
    return 0;
  }
  return v2;
}

uint64_t CalDatabaseSave(uint64_t a1)
{
  return CalDatabaseSaveWithOptions(a1, 0);
}

void CalDatabaseProcessAddedRecords(uint64_t a1)
{
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    CalDatabaseSaveInternalWithOptions(a1, 0, 0, &cf, 0);
    if (cf)
      CFRelease(cf);
  }
}

CFTypeRef CalDatabaseProcessAddedRecordsWithConflictPolicy(CFTypeRef result, unsigned __int16 a2)
{
  CFTypeRef v2;

  v2 = 0;
  if (result)
  {
    CalDatabaseSaveInternalWithOptions((uint64_t)result, 0, a2, &v2, 0);
    return v2;
  }
  return result;
}

void CalDatabaseSetProperty(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseSetProperty((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

uint64_t _CalDatabaseSetProperty(uint64_t result)
{
  const os_unfair_lock *Context;

  if (*(_QWORD *)(result + 24))
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return CPRecordStoreSetValueForProperty();
  }
  return result;
}

uint64_t CalDatabaseCopyProperty(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalDatabaseCopyProperty((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

void CalDatabaseRemoveProperty(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD v6[6];

  v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __CalDatabaseRemoveProperty_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = v5;
    v6[5] = a2;
    objc_msgSend(*(id *)(a1 + 336), "performWithWriteLock:", v6);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
}

void CalDatabaseSetIntegerProperty(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseSetIntegerProperty((uint64_t)a1, a2, a3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
}

void _CalDatabaseSetIntegerProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v4;
  CFStringRef v5;

  v4 = CFStringCreateWithFormat(0, 0, CFSTR("%d"), a3);
  if (v4)
  {
    v5 = v4;
    _CalDatabaseSetProperty(a1);
    CFRelease(v5);
  }
}

uint64_t CalDatabaseCopyUniqueIdentifier(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v6;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    v3 = Database;
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6)
            os_unfair_lock_assert_owner(v6 + 20);
        }
      }
      v3 = CPSqliteDatabaseCopyUniqueIdentifier();
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

void CalDatabaseSetChangeLoggingEnabled(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v1;

  v1 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CPRecordStoreLogChanges();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v1);
  os_unfair_lock_unlock(v1);
}

uint64_t CalDatabaseIsChangeLoggingEnabled(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v1;
  uint64_t IsLoggingChanges;

  v1 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  IsLoggingChanges = CPRecordStoreIsLoggingChanges();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v1);
  os_unfair_lock_unlock(v1);
  return IsLoggingChanges;
}

uint64_t _CalDatabaseIsPropertyModificationLoggingEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

BOOL CalDatabaseIsPropertyModificationLoggingEnabled(uint64_t a1)
{
  os_unfair_lock_s *v2;
  int v3;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(unsigned __int8 *)(a1 + 256);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3 != 0;
}

uint64_t CalDatabaseGetSequenceNumber(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t SequenceNumber;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 24);
  if (CDBLockingAssertionsEnabled)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  SequenceNumber = CPRecordStoreGetSequenceNumber();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return SequenceNumber;
}

void CalDatabaseRevert(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseRevertInternal((uint64_t)a1, 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

void CalDatabaseReset(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseRevertInternal((uint64_t)a1, 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

void CalDatabaseInvalidateCaches(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const os_unfair_lock *Context;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (*(_QWORD *)(a1 + 24))
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    CPRecordStoreInvalidateCaches();
    *(_QWORD *)(a1 + 160) = CalMonotonicTime();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

uint64_t CalDatabaseGetLastCacheInvalidationTimestamp(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 160);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t CalDatabaseCountCachedRecords(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t v6;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 24);
  if (CDBLockingAssertionsEnabled)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreCountCachedRecords();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t CalDatabaseFlushStatementCache(uint64_t a1)
{
  BOOL v1;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v4;
  const os_unfair_lock *v5;
  uint64_t v6;
  const os_unfair_lock *v7;

  if (!a1)
    return CFLog();
  if (CDBLockingAssertionsEnabled)
    v1 = *(_QWORD *)(a1 + 24) == 0;
  else
    v1 = 1;
  if (!v1)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v4 = Database == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5)
        os_unfair_lock_assert_owner(v5 + 20);
    }
  }
  v6 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (CDBLockingAssertionsEnabled && v6 && *(_QWORD *)v6 && *(_QWORD *)(*(_QWORD *)v6 + 104))
  {
    v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v7)
      os_unfair_lock_assert_owner(v7 + 20);
  }
  return CPSqliteConnectionFlushStatementCache();
}

uint64_t CalDatabaseSetInMemoryChangeTrackingID(uint64_t result, int a2)
{
  *(_DWORD *)(result + 168) = a2;
  return result;
}

uint64_t CalDatabaseGetInMemoryChangeTrackingID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

void _CalDatabasePerformPreferenceMigrationIfNeeded(void *a1, int a2, int a3)
{
  id v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint8_t v22[16];

  v5 = a1;
  v6 = objc_msgSend(v5, "getIntegerPreference:defaultValue:", CFSTR("PrefMigrationSeed"), 0);
  if (v6 >= 5 && a3 == 0)
    goto LABEL_28;
  v8 = v6;
  if (v6 < 1)
  {
    v9 = *MEMORY[0x1E0D0C4E0];
    objc_msgSend(v5, "getValueForPreference:expectedClass:", *MEMORY[0x1E0D0C4E0], 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_msgSend(v10, "BOOLValue") & 1) == 0)
        objc_msgSend(v5, "setBooleanPreference:value:notificationName:", v9, 1, 0);
    }
    v11 = *MEMORY[0x1E0D0C4D8];
    objc_msgSend(v5, "getValueForPreference:expectedClass:", *MEMORY[0x1E0D0C4D8], objc_opt_class());
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      objc_msgSend(v5, "setValueForPreference:value:notificationName:", *MEMORY[0x1E0D0C4E8], v12, 0);
      objc_msgSend(v5, "removePreference:notificationName:", v11, 0);
    }

  }
  if (v8 <= 1 && a2)
  {
    v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_DEFAULT, "Cleaning up plist...", v22, 2u);
    }
    objc_msgSend(v5, "removePreference:notificationName:", CFSTR("DefaultCalendarUID"), 0);
    objc_msgSend(v5, "removePreference:notificationName:", CFSTR("DefaultCalendarDatabaseID"), 0);
    objc_msgSend(v5, "removePreference:notificationName:", CFSTR("DefaultCalendarStoreUID"), 0);
    objc_msgSend(v5, "removePreference:notificationName:", CFSTR("DefaultCalendarName"), 0);
    goto LABEL_19;
  }
  if (v8 <= 3)
LABEL_19:
    objc_msgSend(v5, "removePreference:notificationName:", CFSTR("BirthdayEventsGenerationVersion"), 0);
  if (a3)
  {
    v14 = v5;
    v15 = (id)objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", &unk_1E4FA3E68);
    _overrideTimezoneName(v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16 && objc_msgSend(v15, "containsObject:", v16))
    {
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("Asia/Shanghai"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setValueForPreference:value:notificationName:", *MEMORY[0x1E0D0C4E8], CFSTR("Asia/Shanghai"), 0);
      CalSetDefaultTimeZone();
      objc_msgSend(MEMORY[0x1E0CFA978], "sharedManager");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "defaultCityForTimeZone:", v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      v20 = *MEMORY[0x1E0D0C4D0];
      objc_msgSend(v19, "properties");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setValueForPreference:value:notificationName:", v20, v21, 0);

    }
  }
  if (v8 <= 4)
  {
    objc_msgSend(v5, "removePreference:notificationName:", CFSTR("OwnerEmailAddress"), 0);
    objc_msgSend(v5, "removePreference:notificationName:", CFSTR("defaultCalendarName"), 0);
  }
  objc_msgSend(v5, "setIntegerPreference:value:notificationName:", CFSTR("PrefMigrationSeed"), 5, 0);
LABEL_28:

}

const __CFString *CalDatabaseRequestSpotlightReindexNotificationName()
{
  return CFSTR("CalDatabaseRequestSpotlightReindexNotificationName");
}

uint64_t CalDatabaseMovedAsideDatabaseFilePathInDirectory(void *a1, const char *a2)
{
  return objc_msgSend(a1, "stringByAppendingPathComponent:", CFSTR("Calendar-unableToMigrate.sqlitedb"));
}

void sub_1A5CE6910(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void CalDatabaseCleanupStoresWithoutIdentifiers(os_unfair_lock_s *a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  char v7;
  const void *ValueAtIndex;
  const __CFString *v9;
  const __CFString *v10;
  const __CFUUID *v11;
  CFStringRef v12;
  void *v13;
  NSObject *v14;
  int ID;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  CFStringRef v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFArray *)CalDatabaseCopyOfAllStores(a1);
  if (!v2)
    return;
  v3 = v2;
  v18 = (uint64_t)a1;
  Count = CFArrayGetCount(v2);
  if (!Count)
    goto LABEL_20;
  v5 = Count;
  v6 = 0;
  v7 = 0;
  do
  {
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
      v9 = (const __CFString *)CalStoreCopyUUID((uint64_t)ValueAtIndex);
      v10 = v9;
      if (v9)
      {
        if (CFStringGetLength(v9))
          break;
      }
      v11 = CFUUIDCreate(0);
      v12 = CFUUIDCreateString(0, v11);
      v13 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        v14 = v13;
        ID = CPRecordGetID();
        *(_DWORD *)buf = 67109378;
        v20 = ID;
        v21 = 2114;
        v22 = v12;
        _os_log_impl(&dword_1A5CCB000, v14, OS_LOG_TYPE_DEFAULT, "Found a store with no identifier at ROWID %d. Setting identifier to %{public}@", buf, 0x12u);

      }
      CalStoreSetUUID((uint64_t)ValueAtIndex, (uint64_t)v12);
      CFRelease(v12);
      CFRelease(v11);
      if (v10)
      {
        v7 = 1;
        break;
      }
      ++v6;
      v7 = 1;
      if (v6 == v5)
        goto LABEL_15;
    }
    CFRelease(v10);
    ++v6;
  }
  while (v6 != v5);
  if ((v7 & 1) == 0)
    goto LABEL_20;
LABEL_15:
  v16 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_DEFAULT, "Saving database after cleaning up stores without identifiers", buf, 2u);
  }
  if ((CalDatabaseSaveWithOptions(v18, 0) & 1) == 0)
  {
    v17 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v17, OS_LOG_TYPE_ERROR, "Failed to save database after cleaning up stores with missing identifiers", buf, 2u);
    }
  }
LABEL_20:
  CFRelease(v3);
}

void _CalDatabasePerformSchemaMigrationIfNeededOnDatabase(os_unfair_lock_s *a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int IntegerProperty;
  void *v12;
  void *v13;
  const void *v14;
  int shouldMigrateChinaTimezones;
  NSObject *v16;
  uint8_t v17[16];
  uint8_t buf[16];

  if (!a1)
  {
    v4 = 0;
    LODWORD(v12) = 0;
    goto LABEL_24;
  }
  v2 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v2, OS_LOG_TYPE_DEFAULT, "****** [CDB MIGRATION] Beginning schema migration", buf, 2u);
  }
  CalDatabaseGetPreferences((uint64_t)a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferences");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  _CalDatabaseMigrateSchemaCheckIntegrityAndCleanUp((uint64_t)a1);
  objc_msgSend(v4, "getValueForPreference:expectedClass:", CFSTR("DefaultCalendarUID"), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
    goto LABEL_15;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = v5;
    objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "rangeOfCharacterFromSet:", v7);
    v10 = v9;

    if (v8 || v10 != objc_msgSend(v6, "length"))
      IntegerProperty = -1;
    else
      IntegerProperty = objc_msgSend(v6, "intValue");

  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_15:
      IntegerProperty = CalDatabaseGetIntegerProperty(a1);
      goto LABEL_16;
    }
    IntegerProperty = objc_msgSend(v5, "intValue");
  }
  if (IntegerProperty == -1)
    goto LABEL_15;
LABEL_16:
  if (IntegerProperty < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v12 = (void *)CalDatabaseCopyCalendarWithUID(a1);
    if (v12)
    {
      CalDatabaseSetDefaultCalendarForNewEventsWithReason(a1, v12, 0, CFSTR("migration"));
      CalDatabaseRemoveProperty((uint64_t)a1, (uint64_t)CFSTR("DefaultCalendarUID"));
      CFRelease(v12);
      LODWORD(v12) = 1;
    }
  }
  if ((int)CalDatabaseGetIntegerProperty(a1) >= 1)
  {
    v13 = (void *)CalDatabaseCopyCalendarWithUID(a1);
    if (v13)
    {
      v14 = v13;
      CalDatabaseSetDefaultCalendarForNewTasks(a1, v13, 0);
      CalDatabaseRemoveProperty((uint64_t)a1, (uint64_t)CFSTR("DefaultTaskCalendarUID"));
      CFRelease(v14);
    }
  }

LABEL_24:
  shouldMigrateChinaTimezones = _shouldMigrateChinaTimezones(v4);
  _CalDatabasePerformPreferenceMigrationIfNeeded(v4, (int)v12, shouldMigrateChinaTimezones);
  v16 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_DEFAULT, "****** [CDB MIGRATION] Finished all schema migration tasks", v17, 2u);
  }

}

void _CalDatabaseMigrateSchemaCheckIntegrityAndCleanUp(uint64_t a1)
{
  const void *v2;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v5;
  const os_unfair_lock *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;

  v2 = (const void *)CalDatabaseCopyUniqueIdentifier(a1);
  if (v2)
    CFRelease(v2);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (*(_QWORD *)(a1 + 24))
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      v5 = Database;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6)
            os_unfair_lock_assert_owner(v6 + 20);
        }
      }
      v7 = CPSqliteDatabaseConnectionForWriting();
      _CalDatabaseValidateSchemaDeleteDBAndAbortOnFailure(v5, v7);
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  v8 = CalDatabaseCopyEventOccurrenceCache((os_unfair_lock_s *)a1);
  if (v8)
  {
    v9 = (const void *)v8;
    if ((CalEventOccurrenceCacheRebuildIfNeeded(v8) & 1) == 0)
    {
      CalEventOccurrenceCacheCleanOrphans((uint64_t)v9);
      CalEventOccurrenceCacheTrimExtendAndUpdate((uint64_t)v9, 0);
    }
    CFRelease(v9);
  }
  CalDatabaseClearSuperfluousChanges((os_unfair_lock_s *)a1);
}

uint64_t _shouldMigrateChinaTimezones(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  _QWORD block[4];
  id v7;

  v1 = a1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___shouldMigrateChinaTimezones_block_invoke;
  block[3] = &unk_1E4F841C8;
  v7 = v1;
  v2 = _shouldMigrateChinaTimezones_onceToken;
  v3 = v1;
  if (v2 != -1)
    dispatch_once(&_shouldMigrateChinaTimezones_onceToken, block);
  v4 = _shouldMigrateChinaTimezones_shouldMigrate;

  return v4;
}

uint64_t CalDatabaseSizeInBytes()
{
  __CFString *IfNeeded;
  __CFString *MutableCopy;
  uint64_t v2;
  char *v3;
  stat v5;

  IfNeeded = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(0, 1);
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, IfNeeded);
  CFStringAppend(MutableCopy, (CFStringRef)*MEMORY[0x1E0D0C470]);
  v2 = 0;
  if (CPSqliteUtilitiesGetSchemaVersionAtPath() != 25)
  {
    v3 = (char *)_CPCreateUTF8StringFromCFString();
    memset(&v5, 0, sizeof(v5));
    if (!stat(v3, &v5))
    {
      if ((v5.st_size & 0x8000000000000000) == 0)
      {
        v2 = -1;
        CFLog();
        goto LABEL_6;
      }
      CFLog();
    }
    v2 = 0;
LABEL_6:
    free(v3);
  }
  CFRelease(IfNeeded);
  CFRelease(MutableCopy);
  return v2;
}

uint64_t CalDatabaseSetAuxilliaryDatabaseID(uint64_t result, int a2)
{
  *(_DWORD *)(result + 172) = a2;
  return result;
}

void *CalDatabaseCopySourceStats(os_unfair_lock_s *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  __CFString *v9;
  CFMutableArrayRef v10;
  uint64_t CountOfCalendarItemsInStore;
  void *v12;
  void *v13;
  void *v14;
  id obj;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[3];
  _QWORD v23[3];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = (void *)CalDatabaseCopyOfAllStores(a1);
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  obj = v1;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v19 != v5)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * i);
        v8 = CalStoreCopyUUID(v7);
        if (v8)
          v9 = (__CFString *)v8;
        else
          v9 = CFSTR("(missing persistent ID)");
        v10 = CalStoreCopyCalendars(v7);
        CountOfCalendarItemsInStore = CalDatabaseGetCountOfCalendarItemsInStore(a1, 0, v7);
        v23[0] = v9;
        v22[0] = CFSTR("UUID");
        v22[1] = CFSTR("numCalendars");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[__CFArray count](v10, "count"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v23[1] = v12;
        v22[2] = CFSTR("numEvents");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CountOfCalendarItemsInStore);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v23[2] = v13;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 3);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v2, "addObject:", v14);
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    }
    while (v4);
  }

  return v2;
}

uint64_t SetCalDatabaseIsUnitTesting(uint64_t result)
{
  _IsUnitTesting = result;
  return result;
}

uint64_t IsCalDatabaseUnitTesting()
{
  return _IsUnitTesting;
}

BOOL CalDatabaseGetIsUnitTesting(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 272) | _IsUnitTesting) != 0;
}

void CalDatabaseSetPreferences(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v4 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v3;

  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
}

void CalDatabaseSetCalendarDataContainerProvider(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v4 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v3;

  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
}

id CalDatabaseGetCalendarDataContainerProvider(uint64_t a1)
{
  os_unfair_lock_s *v2;
  id v3;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(id *)(a1 + 288);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

id _CalDatabaseGetCalendarDataContainerProvider(uint64_t a1)
{
  return *(id *)(a1 + 288);
}

uint64_t CalDatabaseRebuildOccurrenceCache(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  NSObject *v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  void *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  int v15;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v15) = 0;
    _os_log_impl(&dword_1A5CCB000, v2, OS_LOG_TYPE_DEBUG, "Attempting to rebuild the occurrence cache.", (uint8_t *)&v15, 2u);
  }
  if (!a1)
  {
    v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v15) = 0;
      v10 = "No database provided.  Will not rebuild the occurrence cache.";
      v11 = v9;
      v12 = OS_LOG_TYPE_ERROR;
LABEL_14:
      _os_log_impl(&dword_1A5CCB000, v11, v12, v10, (uint8_t *)&v15, 2u);
    }
    return 0;
  }
  v3 = CalDatabaseCopyEventOccurrenceCache(a1);
  if (!v3)
  {
    v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v15) = 0;
      v10 = "Could not acquire the occurrence cache.  Will not rebuild the occurrence cache.";
      v11 = v13;
      v12 = OS_LOG_TYPE_DEBUG;
      goto LABEL_14;
    }
    return 0;
  }
  v4 = (const void *)v3;
  v5 = _CalEventOccurrenceCacheForceRebuild(v3);
  if ((_DWORD)v5)
  {
    v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      v15 = 138412290;
      v16 = CFSTR("kCalEventOccurrenceCacheChangedNotification");
      _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_DEBUG, "Posting Darwin notification: [%@].", (uint8_t *)&v15, 0xCu);
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kCalEventOccurrenceCacheChangedNotification"), a1, 0, 1u);
    +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:](CalDatabaseInMemoryChangeTracking, "changeTrackingForDatabase:", a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearAllChangesets");

    _CalDatabasePostDBOrSyncStatusChangeNotificationToInternalAndExternalClients((uint64_t)a1, 0, 0);
  }
  CFRelease(v4);
  return v5;
}

void _CalDatabasePostDBOrSyncStatusChangeNotificationToInternalAndExternalClients(uint64_t a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v6;
  id v7;

  v6 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  ++*(_DWORD *)(a1 + 120);
  v7 = (id)CalDatabaseCopyClientName(a1, 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  _CalDatabasePostDBOrSyncStatusChangeNotificationForDatabase(a1, 1, a3, a2, *(_QWORD *)(a1 + 368), v7, 0);

}

uint64_t CalDatabaseCopyEntitiesWhere(uint64_t a1, int a2, void *a3, void *a4, void *a5, uint64_t a6, int a7)
{
  id v13;
  id v14;
  id v15;
  void *SelectPrefix;
  uint64_t v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  unint64_t v23;
  unint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  int v36;
  sqlite3_stmt *v37;
  double v38;
  uint64_t v39;
  NSObject *v40;
  const char *v41;
  uint32_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const os_unfair_lock *v46;
  os_unfair_lock *lock;
  id v49;
  uint64_t v50;
  uint8_t buf[4];
  _BYTE v52[18];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a4;
  v15 = a5;
  if ((a2 - 2) < 2 || a2 == 101)
  {
    SelectPrefix = (void *)CPRecordStoreCreateSelectPrefix();
    if (SelectPrefix)
    {
      if (objc_msgSend(v13, "length"))
        objc_msgSend(SelectPrefix, "appendFormat:", CFSTR(" WHERE %@"), v13);
      if (a7)
        objc_msgSend(SelectPrefix, "appendString:", CFSTR(" ORDER BY random()"));
      if ((int)a6 >= 1)
        objc_msgSend(SelectPrefix, "appendFormat:", CFSTR(" LIMIT %i"), a6);
      v17 = objc_msgSend(v14, "count");
      if (v17 == objc_msgSend(v15, "count"))
      {
        v18 = objc_msgSend(v14, "count");
      }
      else
      {
        v21 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          v22 = v21;
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)v52 = objc_msgSend(v14, "count");
          *(_WORD *)&v52[8] = 2048;
          *(_QWORD *)&v52[10] = objc_msgSend(v15, "count");
          _os_log_impl(&dword_1A5CCB000, v22, OS_LOG_TYPE_ERROR, "Passed in %lu values but %lu value types.", buf, 0x16u);

        }
        v23 = objc_msgSend(v14, "count");
        v24 = objc_msgSend(v15, "count");
        if (v23 >= v24)
          v18 = v24;
        else
          v18 = v23;
      }
      v25 = (os_unfair_lock_s *)(a1 + 80);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
      v26 = *(_QWORD *)(a1 + 24);
      if (CDBLockingAssertionsEnabled)
      {
        if (v26)
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
      v50 = v26;
      Database = CPRecordStoreGetDatabase();
      if (CDBLockingAssertionsEnabled)
      {
        if (Database)
        {
          if (*(_QWORD *)(Database + 104))
          {
            v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v29)
              os_unfair_lock_assert_owner(v29 + 20);
          }
        }
      }
      v30 = CPSqliteDatabaseStatementForReading();
      if (v30)
      {
        v31 = v30;
        lock = v25;
        v49 = v13;
        if (v18 >= 1)
        {
          v32 = 0;
          v33 = v18;
          do
          {
            objc_msgSend(v14, "objectAtIndexedSubscript:", v32);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "objectAtIndexedSubscript:", v32);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            v36 = objc_msgSend(v35, "intValue");

            switch(v36)
            {
              case 7:
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v37 = *(sqlite3_stmt **)(v31 + 8);
                  objc_msgSend(v34, "timeIntervalSinceReferenceDate");
                  sqlite3_bind_double(v37, v32 + 1, v38);
                }
                else
                {
                  v45 = CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67109378;
                    *(_DWORD *)v52 = v32;
                    *(_WORD *)&v52[4] = 2112;
                    *(_QWORD *)&v52[6] = v34;
                    v40 = v45;
                    v41 = "Wrong type for parameter %i; expected date but got %@";
LABEL_50:
                    v42 = 18;
LABEL_51:
                    _os_log_impl(&dword_1A5CCB000, v40, OS_LOG_TYPE_ERROR, v41, buf, v42);
                  }
                }
                break;
              case 2:
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  sqlite3_bind_text(*(sqlite3_stmt **)(v31 + 8), v32 + 1, (const char *)objc_msgSend(objc_retainAutorelease(v34), "UTF8String"), -1, 0);
                }
                else
                {
                  v43 = CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67109378;
                    *(_DWORD *)v52 = v32;
                    *(_WORD *)&v52[4] = 2112;
                    *(_QWORD *)&v52[6] = v34;
                    v40 = v43;
                    v41 = "Wrong type for parameter %i; expected string but got %@";
                    goto LABEL_50;
                  }
                }
                break;
              case 1:
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  sqlite3_bind_int(*(sqlite3_stmt **)(v31 + 8), v32 + 1, objc_msgSend(v34, "intValue"));
                }
                else
                {
                  v44 = CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67109378;
                    *(_DWORD *)v52 = v32;
                    *(_WORD *)&v52[4] = 2112;
                    *(_QWORD *)&v52[6] = v34;
                    v40 = v44;
                    v41 = "Wrong type for parameter %i; expected int but got %@";
                    goto LABEL_50;
                  }
                }
                break;
              default:
                v39 = CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)v52 = v36;
                  v40 = v39;
                  v41 = "Unsupported property type %i";
                  v42 = 8;
                  goto LABEL_51;
                }
                break;
            }

            ++v32;
          }
          while (v33 != v32);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (v50)
          {
            v46 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v46)
              os_unfair_lock_assert_owner(v46 + 20);
          }
        }
        v19 = CPRecordStoreProcessStatementWithPropertyIndices();
        v13 = v49;
        v25 = lock;
      }
      else
      {
        v19 = 0;
      }
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner(v25);
      os_unfair_lock_unlock(v25);
    }
    else
    {
      v19 = 0;
    }

  }
  else
  {
    v20 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v52 = a2;
      _os_log_impl(&dword_1A5CCB000, v20, OS_LOG_TYPE_ERROR, "Unsupported entity type %i", buf, 8u);
    }
    v19 = 0;
  }

  return v19;
}

void _CALDatabaseSetShouldBackupToiCloud(uint64_t a1, int a2)
{
  __CFString *IfNeeded;
  void *v4;
  void *v5;
  uint64_t v6;
  char v7;
  id v8;
  NSObject *v9;
  const __CFString *v10;
  id v11;
  uint8_t buf[4];
  const __CFString *v13;
  __int16 v14;
  __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  IfNeeded = CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(a1, 1);
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", IfNeeded);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2 ^ 1u);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *MEMORY[0x1E0C999D8];
  v11 = 0;
  v7 = objc_msgSend(v4, "setResourceValue:forKey:error:", v5, v6, &v11);
  v8 = v11;

  if ((v7 & 1) == 0)
  {
    v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v10 = CFSTR("YES");
      if (a2)
        v10 = CFSTR("NO");
      *(_DWORD *)buf = 138412546;
      v13 = v10;
      v14 = 2112;
      v15 = IfNeeded;
      _os_log_impl(&dword_1A5CCB000, v9, OS_LOG_TYPE_ERROR, "Failed to set resource value NSURLIsExcludedFromBackupKey to %@ for database directory %@", buf, 0x16u);
    }
  }

}

uint64_t CalDatabaseGetIsSafeForUseInDataMigration(uint64_t a1)
{
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v2 = *(unsigned __int8 *)(a1 + 376);
  CalDatabaseUnlockForThread((const os_unfair_lock *)a1);
  return v2;
}

uint64_t _CalDatabaseGetIsSafeForUseInDataMigration(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 376);
}

void CalDatabaseSetIsSafeForUseInDataMigration(uint64_t a1, char a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  *(_BYTE *)(a1 + 376) = a2;
  CalDatabaseUnlockForThread((const os_unfair_lock *)a1);
}

uint64_t _CalDatabaseSetIsSafeForUseInDataMigration(uint64_t result, char a2)
{
  *(_BYTE *)(result + 376) = a2;
  return result;
}

void _CalDatabaseEnumerateAddedEntitiesOfType(uint64_t a1, int a2, void *a3)
{
  void (**v5)(id, _QWORD, char *);
  const __CFDictionary *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = *(const __CFDictionary **)(a1 + 64);
  if (v6)
  {
    v16 = 0;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = (id)CFDictionaryGetValue(v6, (const void *)a2);
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v13;
LABEL_4:
      v11 = 0;
      while (1)
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        v5[2](v5, *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v11), &v16);
        if (v16)
          break;
        if (v9 == ++v11)
        {
          v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
          if (v9)
            goto LABEL_4;
          break;
        }
      }
    }

  }
}

uint64_t CalDatabaseIsAuxiliaryDatabase(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 378);
}

void CalDatabaseVacuum(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  _QWORD *v9;
  _QWORD *v10;
  const os_unfair_lock *v11;
  NSObject *v12;
  uint8_t v13[16];

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 24);
  if (CDBLockingAssertionsEnabled)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = (_QWORD *)CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (v9)
  {
    v10 = v9;
    CalPerformSQLWithConnectionAndBindBlock(v9, 0, (uint64_t)CFSTR("VACUUM"), 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v10)
      {
        if (*(_QWORD *)(*v10 + 104))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v2);
    os_unfair_lock_unlock(v2);
  }
  else
  {
    v12 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_ERROR, "Unable to get database connection to run vacuum.", v13, 2u);
    }
  }
}

id _CalDatabaseCalaccessdXPCConnection()
{
  void *v0;
  NSObject *v1;
  xpc_connection_t mach_service;
  void *v3;
  id v4;

  pthread_mutex_lock(&_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnectionLock);
  v0 = (void *)_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection;
  if (!_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection)
  {
    dispatch_get_global_queue(0, 0);
    v1 = objc_claimAutoreleasedReturnValue();
    mach_service = xpc_connection_create_mach_service("com.apple.calaccessd.xpc", v1, 0);
    v3 = (void *)_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection;
    _CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection = (uint64_t)mach_service;

    xpc_connection_set_event_handler((xpc_connection_t)_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection, &__block_literal_global_204);
    xpc_connection_resume((xpc_connection_t)_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection);

    v0 = (void *)_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnection;
  }
  v4 = v0;
  pthread_mutex_unlock(&_CalDatabaseCalaccessdXPCConnection___CalaccessdXPCConnectionLock);
  return v4;
}

Class __getCalOutOfProcessMigratorClass_block_invoke(uint64_t a1)
{
  Class result;

  CalendarMigrationLibrary();
  result = objc_getClass("CalOutOfProcessMigrator");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCalOutOfProcessMigratorClass_block_invoke_cold_1();
  getCalOutOfProcessMigratorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void CalendarMigrationLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!CalendarMigrationLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E4F84058;
    v2 = 0;
    CalendarMigrationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CalendarMigrationLibraryCore_frameworkLibrary)
    CalendarMigrationLibrary_cold_1(&v0);
}

uint64_t CalDatabaseRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  __CalDatabaseTypeID = result;
  return result;
}

BOOL _CalDatabaseEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void _CalDatabaseSetupHandler(uint64_t a1, _QWORD *a2)
{
  uint64_t Context;
  uint64_t v5;
  const os_unfair_lock *v6;

  CalStoreInitializeTables(a1, a2, 0);
  CalCalendarInitializeTables(a1, a2);
  CalRecurrenceInitializeTables(a1, a2);
  CalAlarmInitializeTables(a1, a2);
  CalAttendeeInitializeTables(a1, a2);
  CalIdentityInitializeTables(a1, a2);
  CalEventActionInitializeTables(a1, a2);
  CalEventInitializeTables(a1, a2);
  CalExceptionDateInitializeTables(a1, a2);
  CalAttachmentFileInitializeTables(a1, a2);
  CalAttachmentInitializeTables(a1, a2);
  CalCategoryInitializeTables(a1, a2);
  CalCategoryLinkInitializeTables(a1, a2);
  CalLocationInitializeTables(a1, a2);
  CalShareeInitializeTables(a1, a2);
  CalNotificationInitializeTables(a1, a2);
  CalResourceChangeInitializeTables(a1, a2);
  CalSuggestedEventInfoInitializeTables(a1, a2);
  CalContactInitializeTables(a1, a2);
  CalConferenceInitializeTables(a1, a2);
  CalErrorInitializeTables(a1, a2);
  CalAuxDatabaseInitializeTables(a1, a2);
  CalAuxDatabaseAccountInitializeTables();
  CalImageInitializeTables(a1, a2);
  CalColorInitializeTables(a1, a2);
  Context = CPRecordStoreGetContext();
  if (*(_BYTE *)(Context + 378))
  {
    v5 = Context;
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a2)
        {
          if (*(_QWORD *)(*a2 + 104))
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    _CALDatabaseSetShouldBackupToiCloud(v5, 0);
  }
  _CalDatabaseInitializeSchemaDuringMigration(a1, a2, -1);
}

BOOL _CalDatabaseMigrationHandler(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v4;
  NSObject *v7;
  int function;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  NSObject *v13;
  const os_unfair_lock *Context;
  const os_unfair_lock *v15;
  CFStringRef v16;
  const os_unfair_lock *v17;
  uint64_t **v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  uint64_t v21;
  const os_unfair_lock *v22;
  const os_unfair_lock *v23;
  const os_unfair_lock *v24;
  uint64_t **v25;
  CFIndex v26;
  const os_unfair_lock *v27;
  uint64_t **v28;
  const os_unfair_lock *v29;
  uint64_t v30;
  uint64_t **v31;
  CFIndex v32;
  const void *ValueAtIndex;
  CFStringRef v34;
  const os_unfair_lock *v35;
  uint64_t **v36;
  uint64_t v37;
  const os_unfair_lock *v38;
  uint64_t v39;
  const os_unfair_lock *v40;
  CFIndex v41;
  CFIndex v42;
  CFIndex i;
  const void *v44;
  CFStringRef v45;
  const os_unfair_lock *v46;
  uint64_t **v47;
  uint64_t v48;
  const os_unfair_lock *v49;
  uint64_t v50;
  const os_unfair_lock *v51;
  CFArrayRef v52;
  CFIndex v53;
  CFIndex v54;
  CFIndex j;
  CFStringRef v56;
  const os_unfair_lock *v57;
  uint64_t **v58;
  uint64_t v59;
  const os_unfair_lock *v60;
  uint64_t v61;
  const os_unfair_lock *v62;
  CFArrayRef v63;
  CFIndex v64;
  CFIndex v65;
  CFIndex k;
  uint64_t v67;
  int v68;
  const os_unfair_lock *v69;
  int v70;
  const os_unfair_lock *v71;
  const os_unfair_lock *v72;
  void *v73;
  const os_unfair_lock *v74;
  int v75;
  const os_unfair_lock *v76;
  const os_unfair_lock *v77;
  const os_unfair_lock *v78;
  const os_unfair_lock *v79;
  uint64_t v81;
  int v82;
  const void *v83;
  uint64_t **v84;
  CFIndex Count;
  CFArrayRef v86[2];
  CFTypeRef cf[2];
  uint64_t v88;
  CFArrayRef v89[2];
  CFTypeRef v90[2];
  uint64_t v91;
  uint8_t buf[16];
  CFArrayRef theArray[2];
  uint64_t v94;
  uint64_t v95;

  v4 = a3;
  v95 = *MEMORY[0x1E0C80C00];
  if (a3 <= 18009)
  {
    CFAbsoluteTimeGetCurrent();
    v7 = (id)CDBLogHandle;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = 18010;
      _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_DEBUG, "Migrating Calendar database from version %d to version %d...", buf, 0xEu);
    }

    function = sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalNoteAttachmentDeleted", 2, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalDatabaseAttachmentDeletedDuringMigration, 0, 0);
    if (function)
    {
      v9 = function;
      v10 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v9;
        _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_ERROR, "Error adding CalNoteAttachmentDeleted function before migration: %i", buf, 8u);
      }
    }
    v11 = sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalNoteStoreDeleted", 3, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalDatabaseAttachmentDeletedDuringMigration, 0, 0);
    if (v11)
    {
      v12 = v11;
      v13 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v12;
        _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "Error adding CalNoteStoreDeleted function before migration: %i", buf, 8u);
      }
    }
    CalErrorMigrateTables(a4, (_QWORD *)a2, v4);
    CalStoreMigrateTables(a4, (_QWORD *)a2, v4);
    CalCalendarMigrateTables(a4, (_QWORD *)a2, v4);
    CalIdentityMigrateTables(a4, (_QWORD *)a2, v4);
    CalAttendeeMigrateTables(a4, a2, v4);
    CalLocationMigrateTables(a4, (_QWORD *)a2, v4);
    CalEventMigrateTables(a4, a2, v4);
    CalAlarmMigrateTables(a4, a2, v4);
    CalRecurrenceMigrateTables(a4, (_QWORD *)a2, v4);
    CalEventActionMigrateTables(a4, (_QWORD *)a2, v4);
    CalExceptionDateMigrateTables(a4, (_QWORD *)a2, v4);
    CalAttachmentFileMigrateTables(a4, (_QWORD *)a2, v4);
    CalAttachmentMigrateTables(a4, (_QWORD *)a2, v4);
    CalCategoryMigrateTables(a4, (_QWORD *)a2, v4);
    CalCategoryLinkMigrateTables(a4, (_QWORD *)a2, v4);
    CalShareeMigrateTables(a4, (_QWORD *)a2, v4);
    CalNotificationMigrateTables(a4, (_QWORD *)a2, v4);
    CalResourceChangeMigrateTables(a4, (_QWORD *)a2, v4);
    CalSuggestedEventInfoMigrateTables(a4, (_QWORD *)a2, v4);
    CalContactMigrateTables(a4, (_QWORD *)a2, v4);
    CalConferenceMigrateTables(a4, (_QWORD *)a2, v4);
    CalAuxDatabaseMigrateTables(a4, (_QWORD *)a2, v4);
    CalAuxDatabaseAccountMigrateTables(a4, a2, v4);
    CalImageMigrateTables(a4, (_QWORD *)a2, v4);
    CalColorMigrateTables(a4, (_QWORD *)a2, v4);
    CalEventOccurrenceCachePrepareForDBMigration(a4, (_QWORD *)a2, v4);
    _CalDatabaseInitializeSchemaDuringMigration(a4, (_QWORD *)a2, v4);
    _CalResourceChangeCleanUpDanglingEntities(a4, a2);
    _CalDatabaseCleanupDanglers(a4, (_QWORD *)a2);
    if (v4 > 55)
    {
      if (v4 > 0x68)
        goto LABEL_164;
    }
    else
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
      CPSqliteConnectionPerformSQL();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15)
              os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
      CPSqliteConnectionPerformSQL();
    }
    v16 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT ROWID, flags, external_id from Calendar WHERE store_id IN (SELECT ROWID from Store where Type = %d)"), 2);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a2)
      {
        if (*(_QWORD *)(*(_QWORD *)a2 + 104))
        {
          v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17)
            os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
    v18 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    CFRelease(v16);
    if (!v18)
      goto LABEL_165;
    v94 = 0;
    *(_OWORD *)buf = 0u;
    *(_OWORD *)theArray = 0u;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v18)
      {
        v19 = **v18;
        if (v19)
        {
          if (*(_QWORD *)(v19 + 104))
          {
            v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20)
              os_unfair_lock_assert_owner(v20 + 20);
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v18)
      {
        v21 = **v18;
        if (v21)
        {
          if (*(_QWORD *)(v21 + 104))
          {
            v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v22)
              os_unfair_lock_assert_owner(v22 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    if (*(_QWORD *)&buf[8])
    {
      Count = CFArrayGetCount(*(CFArrayRef *)&buf[8]);
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v23)
              os_unfair_lock_assert_owner(v23 + 20);
          }
        }
      }
      v81 = a4;
      v82 = v4;
      v84 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v24)
              os_unfair_lock_assert_owner(v24 + 20);
          }
        }
      }
      v25 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      v26 = Count;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v27)
              os_unfair_lock_assert_owner(v27 + 20);
          }
        }
      }
      v28 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v29)
              os_unfair_lock_assert_owner(v29 + 20);
          }
        }
      }
      v30 = CPSqliteConnectionStatementForSQL();
      if (Count >= 1)
      {
        v31 = (uint64_t **)v30;
        v32 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)&buf[8], v32);
          if ((CFArrayGetValueAtIndex(theArray[0], v32) & 8) == 0)
          {
            if (v84)
              _runTrimForResult((uint64_t)buf, v32, v84);
            v34 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT rowid, calendar_id, external_id from CalendarItem where calendar_id = %d"), ValueAtIndex);
            if (CDBLockingAssertionsEnabled)
            {
              if (*(_QWORD *)a2)
              {
                if (*(_QWORD *)(*(_QWORD *)a2 + 104))
                {
                  v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v35)
                    os_unfair_lock_assert_owner(v35 + 20);
                }
              }
            }
            v36 = (uint64_t **)CPSqliteConnectionStatementForSQL();
            CFRelease(v34);
            if (v36)
            {
              v91 = 0;
              *(_OWORD *)v89 = 0u;
              *(_OWORD *)v90 = 0u;
              if (CDBLockingAssertionsEnabled)
              {
                if (*v36)
                {
                  v37 = **v36;
                  if (v37)
                  {
                    if (*(_QWORD *)(v37 + 104))
                    {
                      v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v38)
                        os_unfair_lock_assert_owner(v38 + 20);
                    }
                  }
                }
              }
              CPSqliteStatementSendResults();
              if (CDBLockingAssertionsEnabled)
              {
                if (*v36)
                {
                  v39 = **v36;
                  if (v39)
                  {
                    if (*(_QWORD *)(v39 + 104))
                    {
                      v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v40)
                        os_unfair_lock_assert_owner(v40 + 20);
                    }
                  }
                }
              }
              CPSqliteStatementReset();
              if (v89[1])
              {
                v83 = ValueAtIndex;
                v41 = CFArrayGetCount(v89[1]);
                if (v41 >= 1)
                {
                  v42 = v41;
                  for (i = 0; i != v42; ++i)
                  {
                    v44 = CFArrayGetValueAtIndex(v89[1], i);
                    if (v25)
                      _runTrimForResult((uint64_t)v89, i, v25);
                    v45 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT rowid, event_id, external_id from EventAction where event_id = %d"), v44);
                    if (CDBLockingAssertionsEnabled)
                    {
                      if (*(_QWORD *)a2)
                      {
                        if (*(_QWORD *)(*(_QWORD *)a2 + 104))
                        {
                          v46 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v46)
                            os_unfair_lock_assert_owner(v46 + 20);
                        }
                      }
                    }
                    v47 = (uint64_t **)CPSqliteConnectionStatementForSQL();
                    CFRelease(v45);
                    if (v47)
                    {
                      v88 = 0;
                      *(_OWORD *)v86 = 0u;
                      *(_OWORD *)cf = 0u;
                      if (CDBLockingAssertionsEnabled)
                      {
                        if (*v47)
                        {
                          v48 = **v47;
                          if (v48)
                          {
                            if (*(_QWORD *)(v48 + 104))
                            {
                              v49 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v49)
                                os_unfair_lock_assert_owner(v49 + 20);
                            }
                          }
                        }
                      }
                      CPSqliteStatementSendResults();
                      if (CDBLockingAssertionsEnabled)
                      {
                        if (*v47)
                        {
                          v50 = **v47;
                          if (v50)
                          {
                            if (*(_QWORD *)(v50 + 104))
                            {
                              v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
                              if (v51)
                                os_unfair_lock_assert_owner(v51 + 20);
                            }
                          }
                        }
                      }
                      CPSqliteStatementReset();
                      v52 = v86[1];
                      if (v86[1] && v28)
                      {
                        v53 = CFArrayGetCount(v86[1]);
                        if (v53 >= 1)
                        {
                          v54 = v53;
                          for (j = 0; j != v54; ++j)
                            _runTrimForResult((uint64_t)v86, j, v28);
                        }
                        v52 = v86[1];
                      }
                      if (v52)
                        CFRelease(v52);
                      if (cf[0])
                        CFRelease(cf[0]);
                      if (cf[1])
                        CFRelease(cf[1]);
                    }
                  }
                }
                ValueAtIndex = v83;
                if (v89[1])
                  CFRelease(v89[1]);
              }
              if (v90[0])
                CFRelease(v90[0]);
              if (v90[1])
                CFRelease(v90[1]);
            }
            v56 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT rowid, calendar_id, external_id, host_url from Notification where calendar_id = %d"), ValueAtIndex);
            if (CDBLockingAssertionsEnabled)
            {
              if (*(_QWORD *)a2)
              {
                if (*(_QWORD *)(*(_QWORD *)a2 + 104))
                {
                  v57 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v57)
                    os_unfair_lock_assert_owner(v57 + 20);
                }
              }
            }
            v58 = (uint64_t **)CPSqliteConnectionStatementForSQL();
            CFRelease(v56);
            v26 = Count;
            if (v58)
            {
              v91 = 0;
              *(_OWORD *)v89 = 0u;
              *(_OWORD *)v90 = 0u;
              LOBYTE(v89[0]) = 1;
              if (CDBLockingAssertionsEnabled)
              {
                if (*v58)
                {
                  v59 = **v58;
                  if (v59)
                  {
                    if (*(_QWORD *)(v59 + 104))
                    {
                      v60 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v60)
                        os_unfair_lock_assert_owner(v60 + 20);
                    }
                  }
                }
              }
              CPSqliteStatementSendResults();
              if (CDBLockingAssertionsEnabled)
              {
                if (*v58)
                {
                  v61 = **v58;
                  if (v61)
                  {
                    if (*(_QWORD *)(v61 + 104))
                    {
                      v62 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v62)
                        os_unfair_lock_assert_owner(v62 + 20);
                    }
                  }
                }
              }
              CPSqliteStatementReset();
              v63 = v89[1];
              if (v89[1] && v31)
              {
                v64 = CFArrayGetCount(v89[1]);
                if (v64 >= 1)
                {
                  v65 = v64;
                  for (k = 0; k != v65; ++k)
                    _runTrimForResult((uint64_t)v89, k, v31);
                }
                v63 = v89[1];
              }
              if (v63)
                CFRelease(v63);
              if (v90[0])
                CFRelease(v90[0]);
              if (v90[1])
                CFRelease(v90[1]);
            }
          }
          ++v32;
        }
        while (v32 != v26);
      }
      v4 = v82;
      a4 = v81;
      if (*(_QWORD *)&buf[8])
        CFRelease(*(CFTypeRef *)&buf[8]);
    }
    if (theArray[0])
      CFRelease(theArray[0]);
    if (theArray[1])
      CFRelease(theArray[1]);
LABEL_164:
    if (v4 > 16036)
    {
LABEL_224:
      CFAbsoluteTimeGetCurrent();
      CFLog();
      _CalAttachmentFileRegisterFunctions(a4, a2);
      return v4 > 18009;
    }
LABEL_165:
    v67 = CPRecordStoreGetContext();
    v68 = *(_DWORD *)(v67 + 172);
    if (!v68)
    {
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)a2)
          {
            if (*(_QWORD *)(*(_QWORD *)a2 + 104))
            {
              v69 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v69)
                os_unfair_lock_assert_owner(v69 + 20);
            }
          }
        }
      }
      v70 = CPSqliteConnectionIntegerForPropertyWithDefaultValue();
      if (v70 != -1)
        objc_msgSend(*(id *)(v67 + 296), "set_defaultCalendarDatabaseID:", v70);
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)a2)
          {
            if (*(_QWORD *)(*(_QWORD *)a2 + 104))
            {
              v71 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v71)
                os_unfair_lock_assert_owner(v71 + 20);
            }
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
      v68 = *(_DWORD *)(v67 + 172);
    }
    if (objc_msgSend(*(id *)(v67 + 296), "get_defaultCalendarDatabaseID") == v68)
    {
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)a2)
          {
            if (*(_QWORD *)(*(_QWORD *)a2 + 104))
            {
              v72 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v72)
                os_unfair_lock_assert_owner(v72 + 20);
            }
          }
        }
      }
      v73 = (void *)CPSqliteConnectionCopyValueForProperty();
      if (v73)
        objc_msgSend(*(id *)(v67 + 296), "set_defaultCalendarID:", v73);
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)a2)
          {
            if (*(_QWORD *)(*(_QWORD *)a2 + 104))
            {
              v74 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v74)
                os_unfair_lock_assert_owner(v74 + 20);
            }
          }
        }
      }
      v75 = CPSqliteConnectionIntegerForProperty();
      if (v75 >= 1)
        objc_msgSend(*(id *)(v67 + 296), "set_defaultCalendarStoreUID:", v75);

    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v76 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v76)
              os_unfair_lock_assert_owner(v76 + 20);
          }
        }
      }
    }
    CPSqliteConnectionRemoveProperty();
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v77 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v77)
              os_unfair_lock_assert_owner(v77 + 20);
          }
        }
      }
    }
    CPSqliteConnectionRemoveProperty();
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v78 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v78)
              os_unfair_lock_assert_owner(v78 + 20);
          }
        }
      }
    }
    CPSqliteConnectionRemoveProperty();
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v79 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v79)
              os_unfair_lock_assert_owner(v79 + 20);
          }
        }
      }
    }
    CPSqliteConnectionRemoveProperty();
    goto LABEL_224;
  }
  return v4 > 18009;
}

uint64_t _CalDatabaseAlwaysFailingMigrationHandler()
{
  NSObject *v0;
  uint8_t v2[16];

  v0 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1A5CCB000, v0, OS_LOG_TYPE_ERROR, "Asked to migrate when the database should already be migrated. Failing.", v2, 2u);
  }
  return 2;
}

BOOL _CalDatabaseMigrationChecker(uint64_t a1, uint64_t a2, int a3)
{
  return a3 < 18010;
}

void _CalDatabaseInitializeSchemaDuringMigration(uint64_t a1, _QWORD *a2, int a3)
{
  CalEventOccurrenceCacheInitializeDB(a1, a2, a3);
  CalScheduledTaskCacheInitializeDB(a1, a2, a3);
  CalDatabasePersistentChangeTrackingInitializeDB(a1, a2, a3);
}

void _CalDatabaseAttachmentDeletedDuringMigration(sqlite3_context *a1)
{
  attachmentsDeletedDuringMigration = 1;
  sqlite3_result_null(a1);
}

uint64_t _CalCalendarGatherRowsToTrimURLs(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;

  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  if (a2)
  {
    v6 = v5;
    if (!*(_QWORD *)(a2 + 8))
      *(_QWORD *)(a2 + 8) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    if (!*(_QWORD *)(a2 + 16))
      *(_QWORD *)(a2 + 16) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    if (!*(_QWORD *)(a2 + 24))
      *(_QWORD *)(a2 + 24) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (*(_BYTE *)a2 && !*(_QWORD *)(a2 + 32))
      *(_QWORD *)(a2 + 32) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), (const void *)v4);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), (const void *)v6);
    _appendURLFromSQLResult(a1, 2, *(__CFArray **)(a2 + 24));
    if (*(_BYTE *)a2)
      _appendURLFromSQLResult(a1, 3, *(__CFArray **)(a2 + 32));
  }
  return 0;
}

void _runTrimForResult(uint64_t a1, CFIndex a2, uint64_t **a3)
{
  int ValueAtIndex;
  const __CFString *v7;
  const __CFString *v8;
  const __CFURL *v9;
  const __CFURL *v10;
  CFStringRef v11;
  const __CFString *v12;
  const __CFURL *v13;
  const __CFURL *v14;
  CFStringRef v15;
  const __CFString *v16;
  sqlite3_stmt *v17;
  const char *CStringFromCFString;
  sqlite3_stmt *v19;
  const char *v20;
  int v21;
  uint64_t v22;
  const os_unfair_lock *Context;
  uint64_t v24;
  const os_unfair_lock *v25;

  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a2);
  v7 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), a2);
  CFRetain(v7);
  if (*(_BYTE *)a1)
  {
    v8 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a2);
    CFRetain(v8);
    if (!v7)
      goto LABEL_10;
  }
  else
  {
    v8 = 0;
    if (!v7)
      goto LABEL_10;
  }
  if (CFStringGetLength(v7))
  {
    v9 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, 0);
    if (v9)
    {
      v10 = v9;
      v11 = CFURLCopyPath(v9);
      if (v11)
      {
        v12 = v11;
        CFRelease(v7);
        v7 = v12;
      }
      CFRelease(v10);
    }
  }
LABEL_10:
  if (v8)
  {
    if (*(_BYTE *)a1)
    {
      if (CFStringGetLength(v8))
      {
        v13 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, 0);
        if (v13)
        {
          v14 = v13;
          v15 = CFURLCopyPath(v13);
          if (v15)
          {
            v16 = v15;
            CFRelease(v8);
            v8 = v16;
          }
          CFRelease(v14);
        }
      }
    }
  }
  v17 = (sqlite3_stmt *)a3[1];
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(v7);
  sqlite3_bind_text(v17, 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  if (*(_BYTE *)a1)
  {
    v19 = (sqlite3_stmt *)a3[1];
    v20 = (const char *)CalCreateCStringFromCFString(v8);
    sqlite3_bind_text(v19, 2, v20, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    v21 = 3;
  }
  else
  {
    v21 = 2;
  }
  sqlite3_bind_int((sqlite3_stmt *)a3[1], v21, ValueAtIndex);
  if (CDBLockingAssertionsEnabled)
  {
    if (*a3)
    {
      v22 = **a3;
      if (v22)
      {
        if (*(_QWORD *)(v22 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (CDBLockingAssertionsEnabled)
  {
    if (*a3)
    {
      v24 = **a3;
      if (v24)
      {
        if (*(_QWORD *)(v24 + 104))
        {
          v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v25)
            os_unfair_lock_assert_owner(v25 + 20);
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
}

void _appendURLFromSQLResult(uint64_t a1, int a2, __CFArray *a3)
{
  const unsigned __int8 *v4;
  CFStringRef v5;
  CFStringRef v6;

  v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), a2);
  if (v4 && (v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v4, 0x8000100u)) != 0)
  {
    v6 = v5;
    CFArrayAppendValue(a3, v5);
    CFRelease(v6);
  }
  else
  {
    CFArrayAppendValue(a3, &stru_1E4F941C0);
  }
}

void CalDatabaseProfileAndGreenTeaCallback(void *a1, const char *a2, unint64_t a3)
{
  CalDatabaseProfileCallback((uint64_t)a1, (uint64_t)a2, a3);
  CalDatabaseGreenTeaCallback(a1, a2);
}

void CalDatabaseProfileCallback(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", a2);
    v5 = (void *)CDBSQLProfileHandle;
    if (os_log_type_enabled((os_log_t)CDBSQLProfileHandle, OS_LOG_TYPE_DEBUG))
    {
      v6 = (void *)MEMORY[0x1E0CB37E8];
      v7 = v5;
      objc_msgSend(v6, "numberWithUnsignedLongLong:", (unint64_t)((double)a3 / 1000000.0));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138412546;
      v10 = v8;
      v11 = 2112;
      v12 = v4;
      _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_DEBUG, "Execution time was [%@] milliseconds for statement: [%@]", (uint8_t *)&v9, 0x16u);

    }
  }
}

void CalDatabaseGreenTeaCallback(void *a1, const char *a2)
{
  __CFString *v3;
  const __CFString *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  __CFString *v8;
  __int16 v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a1)
      v3 = a1;
    else
      v3 = &stru_1E4F941C0;
    if (!strncmp("SELECT", a2, 6uLL))
    {
      v4 = CFSTR("read Calendar data");
    }
    else if (!strncmp("INSERT", a2, 6uLL) || !strncmp("UPDATE", a2, 6uLL))
    {
      v4 = CFSTR("modified Calendar data");
    }
    else
    {
      if (strncmp("DELETE", a2, 6uLL))
      {
LABEL_16:

        return;
      }
      v4 = CFSTR("deleted Calendar data");
    }
    ct_green_tea_logger_create_static();
    getCTGreenTeaOsLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v7 = 138412546;
        v8 = v3;
        v9 = 2112;
        v10 = v4;
        _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_INFO, "%@ %@", (uint8_t *)&v7, 0x16u);
      }
    }

    goto LABEL_16;
  }
}

void _CalDatabaseValidateSchemaDeleteDBAndAbortOnFailure(uint64_t a1, uint64_t a2)
{
  uint64_t Context;
  uint64_t v4;
  char **v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  char *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  sqlite3 *v20;
  int v21;
  NSObject *v22;
  _BOOL4 v23;
  uint64_t v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  id WeakRetained;
  uint8_t v31[2];
  uint8_t buf[4];
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 104) && (Context = CPRecordStoreGetContext()) != 0)
    v4 = 2 * *(unsigned __int8 *)(Context + 378);
  else
    v4 = 2;
  do
  {
    v5 = off_1E4F84098[v4];
    v6 = (void *)objc_msgSend(CFSTR("SELECT ROWID"), "mutableCopy");
    if (((_BYTE)v5[7] & 2) != 0)
    {
      v8 = (void *)objc_msgSend(CFSTR("SELECT ROWID"), "mutableCopy");
      v7 = v8;
      if (((_BYTE)v5[7] & 0x10) != 0)
        objc_msgSend(v8, "appendString:", CFSTR(", sequence_number"));
    }
    else
    {
      v7 = 0;
    }
    if (*((int *)v5 + 18) >= 1)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = v5[10];
        v12 = &v11[v9];
        v13 = *(_DWORD *)&v11[v9 + 24];
        if ((v13 & 4) == 0 && *((_DWORD *)v12 + 2))
        {
          objc_msgSend(v6, "appendFormat:", CFSTR(", %s"), *(_QWORD *)&v11[v9]);
          v13 = *((_DWORD *)v12 + 6);
        }
        if ((v13 & 8) != 0 || (v13 & 2) != 0 && *(_DWORD *)&v11[v9 + 8])
          objc_msgSend(v7, "appendFormat:", CFSTR(", %s"), *(_QWORD *)&v11[v9]);
        ++v10;
        v9 += 40;
      }
      while (v10 < *((int *)v5 + 18));
    }
    objc_msgSend(v6, "appendFormat:", CFSTR(" FROM %s"), *v5);
    objc_msgSend(v7, "appendFormat:", CFSTR(" FROM %sChanges"), *v5);
    if ((_CalDatabaseDoesStatementFailToCompile(a2, v6) & 1) != 0)
    {
      v15 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v16 = *v5;
        *(_DWORD *)buf = 136315138;
        v33 = v16;
        v17 = "Main table failure for %s";
        goto LABEL_30;
      }
LABEL_31:

      goto LABEL_32;
    }
    if (v7 && _CalDatabaseDoesStatementFailToCompile(a2, v7))
    {
      v15 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v18 = *v5;
        *(_DWORD *)buf = 136315138;
        v33 = v18;
        v17 = "Change table failure for %s";
LABEL_30:
        _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);
      }
      goto LABEL_31;
    }

    ++v4;
  }
  while (v4 != 24);
  if (!_CalDatabaseDoesStatementFailToCompile(a2, CFSTR("SELECT key, value FROM _SqliteDatabaseProperties")))return;
  v14 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v14, OS_LOG_TYPE_ERROR, "Failure for _SqliteDatabaseProperties", buf, 2u);
  }
LABEL_32:
  v19 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v19, OS_LOG_TYPE_ERROR, "Schema validation failed. Deleting calendar database and aborting.", buf, 2u);
  }
  v20 = *(sqlite3 **)(a2 + 8);
  if (v20)
  {
    *(_DWORD *)buf = 141;
    v21 = sqlite3_file_control(v20, 0, 101, buf);
    v22 = CDBLogHandle;
    v23 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (v21)
    {
      v24 = a1;
      if (!v23)
        goto LABEL_44;
      *(_WORD *)v31 = 0;
      v25 = "Failed to delete database with invalid schema.";
    }
    else
    {
      v24 = a1;
      if (!v23)
        goto LABEL_44;
      *(_WORD *)v31 = 0;
      v25 = "Successfully deleted database. Aborting.";
    }
    v26 = v31;
  }
  else
  {
    v22 = CDBLogHandle;
    v24 = a1;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      goto LABEL_44;
    *(_WORD *)buf = 0;
    v25 = "Failed to delete database due to no connection to database";
    v26 = buf;
  }
  _os_log_impl(&dword_1A5CCB000, v22, OS_LOG_TYPE_ERROR, v25, v26, 2u);
LABEL_44:
  if (!*(_QWORD *)(v24 + 104)
    || (v27 = CPRecordStoreGetContext()) == 0
    || (v28 = v27, WeakRetained = objc_loadWeakRetained((id *)(v27 + 320)), WeakRetained, !WeakRetained))
  {
    _CalDatabaseValidateSchemaDeleteDBAndAbortOnFailure_cold_1();
  }
  _CalDatabaseIntegrityError(v28, CFSTR("Schema"));
}

uint64_t _CalDatabaseDoesStatementFailToCompile(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  sqlite3 *v5;
  int v6;
  int v7;
  sqlite3_stmt *v8;
  NSObject *v9;
  _BOOL4 v10;
  sqlite3 *v11;
  NSObject *v12;
  const char *v13;
  sqlite3_stmt *ppStmt;
  uint8_t buf[4];
  sqlite3_stmt *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_15;
  v5 = *(sqlite3 **)(a1 + 8);
  if (!v5)
  {
    a1 = 0;
    goto LABEL_15;
  }
  ppStmt = 0;
  v6 = sqlite3_prepare_v2(v5, (const char *)objc_msgSend(objc_retainAutorelease(v3), "UTF8String"), -1, &ppStmt, 0);
  if (v6)
  {
    v7 = v6;
    v8 = ppStmt;
    v9 = CDBLogHandle;
    v10 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (v7 == 1 && !v8)
    {
      if (v10)
      {
        v11 = *(sqlite3 **)(a1 + 8);
        v12 = v9;
        v13 = sqlite3_errmsg(v11);
        *(_DWORD *)buf = 136446210;
        v17 = (sqlite3_stmt *)v13;
        _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_ERROR, "Compilation failure: %{public}s", buf, 0xCu);

      }
      a1 = 1;
      goto LABEL_13;
    }
    if (v10)
    {
      *(_DWORD *)buf = 134218240;
      v17 = ppStmt;
      v18 = 1024;
      v19 = v7;
      _os_log_impl(&dword_1A5CCB000, v9, OS_LOG_TYPE_ERROR, "Unexpected compilation failure: statement is %p and error is %i", buf, 0x12u);
    }
  }
  a1 = 0;
LABEL_13:
  if (ppStmt)
    sqlite3_finalize(ppStmt);
LABEL_15:

  return a1;
}

uint64_t _CalDatabaseCopyDatabaseIfValid(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  os_unfair_lock_lock((os_unfair_lock_t)&__GlobalLock);
  if (__ValidDatabases)
  {
    v2 = (void *)MEMORY[0x1A85B514C]();
    objc_msgSend((id)__ValidDatabases, "member:", a1);
    v3 = objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v2);
  }
  else
  {
    v3 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner((const os_unfair_lock *)&__GlobalLock);
  os_unfair_lock_unlock((os_unfair_lock_t)&__GlobalLock);
  return v3;
}

uint64_t _CalDatabaseIsIntegrationRecord(const void *a1)
{
  uint64_t result;

  result = _CalEntityGetStore(a1);
  if (result)
    return _CalStoreGetType(result) == 6;
  return result;
}

void _CalDatabaseRemoveOrphanedEntitiesOfType(uint64_t a1, int a2, void *a3)
{
  const __CFDictionary *v4;
  const void *v6;
  const __CFSet *Value;

  v4 = *(const __CFDictionary **)(a1 + 64);
  if (v4)
  {
    v6 = (const void *)a2;
    Value = (const __CFSet *)CFDictionaryGetValue(v4, (const void *)a2);
    if (Value)
    {
      CFSetApplyFunction(Value, (CFSetApplierFunction)_CalDatabaseRemoveOrphanedEntities, a3);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 64), v6);
    }
  }
}

BOOL CalDatabaseChangesToRecordIDShouldBeIgnoredByEventKit(uint64_t a1)
{
  uint64_t v3;

  if ((CalRecordIDIsTemporary(a1) & 1) != 0)
    return 1;
  v3 = CalRecordIDGetEntityType(a1);
  return !CalDatabaseEntityTypeParticipatesInInMemoryChangeTracking(v3);
}

void validateAndAddObjectID(__CFArray *a1, const void *a2)
{
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  const char *v8;
  int v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = CalRecordIDGetEntityType((uint64_t)a2);
    v5 = CalRecordIDGetRowID((uint64_t)a2);
    if (v4 <= 0)
    {
      v7 = CDBLogHandle;
      if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
        return;
      v9 = 67109120;
      v10 = v4;
      v8 = "Attempt to add record with invalid entity type %i";
      goto LABEL_9;
    }
    v6 = v5;
    if (v5 > 0)
    {
      CFArrayAppendValue(a1, a2);
      return;
    }
    v7 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
    {
      v9 = 67109120;
      v10 = v6;
      v8 = "Attempt to add record with invalid row ID %i";
LABEL_9:
      _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_FAULT, v8, (uint8_t *)&v9, 8u);
    }
  }
}

void addRelatedObjectIDsForDeletedRecord(const void *a1, CFTypeRef *a2)
{
  uint64_t Store;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  const void *RecordID;
  char v11;

  Store = CPRecordGetStore();
  if (Store)
    Store = CPRecordStoreGetContext();
  v11 = 0;
  v5 = _CalEntityCopyRelatedEntitiesDeletedByTriggers(Store, a1, &v11);
  if (v11 && *a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
        RecordID = (const void *)_CalEntityGetRecordID(ValueAtIndex);
        validateAndAddObjectID((__CFArray *)*a2, RecordID);
      }
    }
    CFRelease(v5);
  }
}

void _CalDatabasePreCommitSaveCallback(uint64_t a1, uint64_t a2)
{
  uint64_t Context;
  uint64_t v5;
  int v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  BOOL v16;
  const os_unfair_lock *v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFIndex Count;
  CFIndex v21;
  CFIndex i;
  const void *ValueAtIndex;

  Context = CPRecordStoreGetContext();
  if (!Context)
    return;
  v5 = Context;
  v6 = *(_DWORD *)(Context + 84);
  if ((v6 & 0xFE) != 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
    CPRecordStoreGetSequenceNumber();
    if ((v6 & 2) != 0)
    {
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)a2)
          {
            if (*(_QWORD *)(*(_QWORD *)a2 + 104))
            {
              v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v8)
                os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      CPSqliteConnectionSetIntegerForProperty();
      *(_DWORD *)(v5 + 84) &= ~2u;
      if ((v6 & 4) == 0)
      {
LABEL_9:
        if ((v6 & 8) == 0)
          goto LABEL_10;
        goto LABEL_29;
      }
    }
    else if ((v6 & 4) == 0)
    {
      goto LABEL_9;
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9)
              os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    *(_DWORD *)(v5 + 84) &= ~4u;
    if ((v6 & 8) == 0)
    {
LABEL_10:
      if ((v6 & 0x10) == 0)
        goto LABEL_11;
      goto LABEL_36;
    }
LABEL_29:
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10)
              os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    *(_DWORD *)(v5 + 84) &= ~8u;
    if ((v6 & 0x10) == 0)
    {
LABEL_11:
      if ((v6 & 0x20) == 0)
        goto LABEL_12;
      goto LABEL_43;
    }
LABEL_36:
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11)
              os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    *(_DWORD *)(v5 + 84) &= ~0x10u;
    if ((v6 & 0x20) == 0)
    {
LABEL_12:
      if ((v6 & 0x40) == 0)
        goto LABEL_13;
      goto LABEL_50;
    }
LABEL_43:
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12)
              os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    *(_DWORD *)(v5 + 84) &= ~0x20u;
    if ((v6 & 0x40) == 0)
    {
LABEL_13:
      if ((v6 & 0x80) == 0)
        goto LABEL_64;
LABEL_57:
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)a2)
          {
            if (*(_QWORD *)(*(_QWORD *)a2 + 104))
            {
              v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v14)
                os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
      }
      CPSqliteConnectionSetIntegerForProperty();
      *(_DWORD *)(v5 + 84) &= ~0x80u;
      goto LABEL_64;
    }
LABEL_50:
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13)
              os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    *(_DWORD *)(v5 + 84) &= ~0x40u;
    if ((v6 & 0x80) == 0)
      goto LABEL_64;
    goto LABEL_57;
  }
LABEL_64:
  v15 = *(_QWORD *)(v5 + 24);
  if (CDBLockingAssertionsEnabled)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v17)
      os_unfair_lock_assert_owner(v17 + 20);
  }
  v18 = (const __CFArray *)CPRecordStoreCopyChangedRecords();
  if (v18)
  {
    v19 = v18;
    Count = CFArrayGetCount(v18);
    if (Count >= 1)
    {
      v21 = Count;
      for (i = 0; i != v21; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v19, i);
        if (_CalEntityIsOfType(ValueAtIndex, 101))
          _CalCalendarItemFixupParticipantsOnEvent((uint64_t)ValueAtIndex);
        if (_CalEntityIsOfType(ValueAtIndex, 2))
          _CalEventRectifyRecurrenceSeriesPrivacyLevels(ValueAtIndex);
      }
    }
    CFRelease(v19);
  }
}

void _CalDatabaseCompleteSave(uint64_t a1, _QWORD *a2)
{
  uint64_t Context;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  void (**v9)(void);
  CFDictionaryRef *v10;
  void *v11;
  const os_unfair_lock *v12;
  int SequenceNumber;
  void *v14;

  Context = CPRecordStoreGetContext();
  v5 = *(const __CFArray **)(Context + 112);
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(Context + 112), i);
        v9 = (void (**)(void))objc_claimAutoreleasedReturnValue();
        v9[2]();

      }
    }
    CFRelease(*(CFTypeRef *)(Context + 112));
    *(_QWORD *)(Context + 112) = 0;
  }
  if (a2)
  {
    v10 = *(CFDictionaryRef **)(Context + 32);
    if (v10)
      _CalEventOccurrenceCacheStopTrackingUpdatesAndSave(v10, a2);
  }
  if (a2 && (v11 = *(void **)(Context + 40)) != 0)
  {
    _CalScheduledTaskCacheStopTrackingUpdates(v11);
    _CalScheduledTaskCacheSave(*(_QWORD *)(Context + 40), (uint64_t)a2);
    _CalScheduledTaskCacheFinishSave(*(_QWORD *)(Context + 40));
  }
  else if (!a2)
  {
    return;
  }
  if (a1 && CDBLockingAssertionsEnabled)
  {
    v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v12)
      os_unfair_lock_assert_owner(v12 + 20);
  }
  SequenceNumber = CPRecordStoreGetSequenceNumber();
  v14 = (void *)CalDatabaseCopyClientIdentifierOptionalLock(Context, 0);
  _CalDatabaseAssociateSequenceNumberWithClient((uint64_t)a2, v14, SequenceNumber);
  CFRelease(v14);
}

BOOL _CalDatabaseSendChangeNotificationAndObjectIdsToCalaccessd(uint64_t a1, const __CFArray *a2, const __CFArray *a3, int64_t a4, BOOL a5, void *a6)
{
  id v11;
  _xpc_connection_s *v12;
  void *v13;
  void *v14;
  xpc_object_t v15;
  __CFString *v16;
  xpc_object_t v17;
  void *v18;
  _BOOL8 v19;

  v11 = a6;
  _CalDatabaseCalaccessdXPCConnection();
  v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    _CalDatabaseCreateXPCArrayOfChangedObjectIDs(a2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    _CalDatabaseCreateXPCArrayOfChangedObjectIDs(a3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v15, "function", "postchangenote");
    v16 = objc_retainAutorelease(CalDatabaseCopyDirectoryPathForDatabaseCreateIfNeeded(a1, 1));
    xpc_dictionary_set_string(v15, "databasePath", (const char *)-[__CFString UTF8String](v16, "UTF8String"));
    xpc_dictionary_set_BOOL(v15, "postnotificationsynchronously", a5);
    if (v13 && v14)
    {
      xpc_dictionary_set_value(v15, "changes", v13);
      xpc_dictionary_set_value(v15, "deletes", v14);
    }
    xpc_dictionary_set_int64(v15, "changeType", a4);
    xpc_dictionary_set_int64(v15, "changeReason", *(_QWORD *)(a1 + 368));
    xpc_dictionary_set_string(v15, "clientName", (const char *)objc_msgSend(objc_retainAutorelease(v11), "UTF8String"));
    v17 = xpc_connection_send_message_with_reply_sync(v12, v15);
    v18 = v17;
    v19 = v17
       && object_getClass(v17) == (Class)MEMORY[0x1E0C812F8]
       && xpc_dictionary_get_BOOL(v18, "notificationwasposted");

  }
  else
  {
    v19 = 0;
  }

  return v19;
}

CFIndex _CalDatabaseCountEntitiesByType(const __CFArray *a1, uint64_t a2, _DWORD *a3)
{
  CFIndex result;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  _DWORD *v10;

  result = CFArrayGetCount(a1);
  if (result >= 1)
  {
    v7 = result;
    for (i = 0; i != v7; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      result = _CalEntityGetType(ValueAtIndex);
      if ((result - 1) >= 0x1D)
        v10 = a3;
      else
        v10 = (_DWORD *)(a2 + 4 * (result - 1));
      ++*v10;
    }
  }
  return result;
}

void _CalDatabaseChangesOfTypeMayAffectWidgets(uint64_t a1, CFArrayRef theArray, unint64_t a3, _BYTE *a4)
{
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const __CFString *v11;
  const __CFString *v12;
  const void *ValueAtIndex;
  uint64_t RecordID;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  int ID;
  const os_unfair_lock *Context;
  int IsDeleted;
  const os_unfair_lock *v21;
  const __CFArray *v22;
  const __CFArray *v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex i;
  int v27;
  NSObject *v28;
  NSObject *v29;
  _QWORD *PropertyDescriptor;
  __CFString *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  id *v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t GregorianDateWithFallbackToDefaultTimeZone;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  void *v50;
  int v51;
  uint64_t v52;
  const void *v53;
  __CFString *v54;
  NSObject *v55;
  NSObject *v56;
  const char *v57;
  void *v58;
  const void *v59;
  CFTypeRef v60;
  int v61;
  __CFArray *Mutable;
  double v63;
  const __CFArray *v64;
  const void *v65;
  double Date;
  double v67;
  void *v68;
  __CFString *v69;
  NSObject *v70;
  int v71;
  BOOL v72;
  void *v73;
  __CFString *v75;
  NSObject *v76;
  unsigned __int8 *v77;
  int v78;
  void *v79;
  __CFString *v81;
  NSObject *v82;
  unsigned __int8 *v83;
  int v84;
  void *v85;
  __CFString *v87;
  NSObject *v88;
  unsigned __int8 *v89;
  int v90;
  __CFString *v91;
  unsigned __int8 *v92;
  CFIndex v93;
  const __CFArray *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __CFString *v98;
  _BYTE *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  const void *v108;
  uint8_t buf[4];
  _BYTE v110[10];
  int v111;
  __int16 v112;
  int v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  if (!theArray)
    return;
  v6 = theArray;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    return;
  v9 = Count;
  v10 = 0;
  v97 = a3 & 0xFFFFFFFFFFFFFFFDLL;
  v11 = CFSTR("ChangeTypeUpdated");
  if (a3 != 1)
    v11 = CFSTR("ChangeTypeAdded");
  v12 = CFSTR("ChangeTypeDeleted");
  v91 = (__CFString *)v11;
  if (a3 != 2)
    v12 = v11;
  v98 = (__CFString *)v12;
  v92 = a4 + 16;
  v96 = a1;
  while (1)
  {
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v10);
      RecordID = _CalEntityGetRecordID(ValueAtIndex);
      if (!RecordID)
      {
        v16 = (void *)CDBWidgetReloadHandle;
        if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_ERROR))
        {
          v17 = v16;
          ID = CPRecordGetID();
          if (ValueAtIndex)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (Context)
                  os_unfair_lock_assert_owner(Context + 20);
              }
            }
          }
          IsDeleted = CPRecordIsDeleted();
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v110 = ID;
          *(_WORD *)&v110[4] = 1024;
          *(_DWORD *)&v110[6] = IsDeleted;
          _os_log_impl(&dword_1A5CCB000, v17, OS_LOG_TYPE_ERROR, "_CalDatabaseChangesInArrayMayAffectWidgets: failed to get recordID for updated record with rowid [%d], deleted: %{BOOL}d", buf, 0xEu);

        }
        goto LABEL_47;
      }
      v15 = RecordID;
      if (CalRecordIDGetEntityType(RecordID) != 6)
        break;
      if (_CalStoreHasDirtyInstanceAttributes((uint64_t)ValueAtIndex))
      {
        v73 = (void *)CDBWidgetReloadHandle;
        if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
        {
          v75 = v98;
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)v110 = v98;
          v76 = v73;
          _os_log_impl(&dword_1A5CCB000, v76, OS_LOG_TYPE_DEFAULT, "Allowing reload for changeType %{public}@ because store has dirty instance attributes", buf, 0xCu);

        }
        if (*a4)
        {
          v77 = a4 + 16;
          do
          {
            *(v77 - 15) = 1;
            v78 = *v77;
            v77 += 16;
          }
          while (v78);
        }
        return;
      }
LABEL_47:
      if (++v10 >= v9)
        return;
    }
    if (CalRecordIDGetEntityType(v15) == 1)
      break;
    if (CalRecordIDGetEntityType(v15) == 5)
    {
      if (a3 > 1)
        goto LABEL_47;
      v85 = (void *)CDBWidgetReloadHandle;
      if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
      {
        v87 = v91;
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)v110 = v87;
        v88 = v85;
        _os_log_impl(&dword_1A5CCB000, v88, OS_LOG_TYPE_DEFAULT, "Allowing reload because of changeType %{public}@ for recurrence rule", buf, 0xCu);

      }
      if (*a4)
      {
        v89 = a4 + 16;
        do
        {
          *(v89 - 15) = 1;
          v90 = *v89;
          v89 += 16;
        }
        while (v90);
      }
      return;
    }
    if (!_CalEntityIsOfType(ValueAtIndex, 2))
      goto LABEL_47;
    v94 = v6;
    v95 = a3;
    v93 = v9;
    if (v97)
    {
      if (ValueAtIndex)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21)
              os_unfair_lock_assert_owner(v21 + 20);
          }
        }
      }
      v22 = (const __CFArray *)CPRecordCopyChangedProperties();
      if (v22)
      {
        v23 = v22;
        v24 = CFArrayGetCount(v22);
        if (v24 >= 1)
        {
          v25 = v24;
          for (i = 0; v25 != i; ++i)
          {
            v27 = CFArrayGetValueAtIndex(v23, i);
            if (v27 <= 72)
            {
              if (v27 <= 0x38 && ((1 << v27) & 0x1400001000083FFLL) != 0)
              {
LABEL_51:
                v29 = (id)CDBWidgetReloadHandle;
                if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                {
                  PropertyDescriptor = (_QWORD *)CPRecordGetPropertyDescriptor();
                  if (PropertyDescriptor && *PropertyDescriptor)
                  {
                    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
                    v31 = (__CFString *)objc_claimAutoreleasedReturnValue();
                  }
                  else
                  {
                    v31 = &stru_1E4F941C0;
                  }
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)v110 = v31;
                  _os_log_impl(&dword_1A5CCB000, v29, OS_LOG_TYPE_DEFAULT, "ChangeTypeUpdated contains changed property (%{public}@), which may affect the widget view if it's in the time range", buf, 0xCu);

                }
                CFRelease(v23);
                goto LABEL_58;
              }
            }
            else if (v27 == 73)
            {
              if (_CalDatabaseIsIntegrationRecord(ValueAtIndex))
                goto LABEL_51;
            }
            else if ((v27 - 79) < 2 || v27 == 94)
            {
              goto LABEL_51;
            }
          }
        }
        CFRelease(v23);
      }
      v100 = 0;
    }
    else
    {
      v28 = CDBWidgetReloadHandle;
      if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A5CCB000, v28, OS_LOG_TYPE_DEFAULT, "Event was added or removed which may affect the widget view if it's in the time range", buf, 2u);
      }
LABEL_58:
      v100 = 1;
    }
    if (*a4)
    {
      v32 = 0;
      v33 = v92;
      v99 = a4;
      while (1)
      {
        v34 = (id *)&a4[16 * v32];
        if (*((_BYTE *)v34 + 1))
          goto LABEL_94;
        v105 = v32;
        v35 = v34[1];
        objc_msgSend(v35, "startDate");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "endDate");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = CalCopyTimeZone();
        v107 = v36;
        objc_msgSend(v36, "timeIntervalSinceReferenceDate");
        GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
        v103 = v40;
        v104 = GregorianDateWithFallbackToDefaultTimeZone;
        v106 = v37;
        objc_msgSend(v37, "timeIntervalSinceReferenceDate");
        v108 = (const void *)v38;
        v41 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
        v101 = v42;
        v102 = v41;
        v43 = (void *)MEMORY[0x1E0C99D68];
        v44 = v35;
        objc_msgSend(v43, "dateWithTimeIntervalSinceReferenceDate:", COERCE_DOUBLE(_CalEventGetStartDate((uint64_t)ValueAtIndex)));
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", _CalRecurrenceGetEndDate((uint64_t)ValueAtIndex));
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v36) = objc_msgSend(v44, "intersectsRangeWithStartDate:endDate:allowSinglePointIntersection:", v45, v46, 0);
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", _CalRecordGetOriginalDateProperty((uint64_t)ValueAtIndex));
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", _CalRecordGetOriginalDateProperty((uint64_t)ValueAtIndex));
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = objc_msgSend(v44, "intersectsRangeWithStartDate:endDate:allowSinglePointIntersection:", v47, v48, 0);

        if ((v100 & (v36 | v49)) == 1)
          break;
        if (v100)
        {
          v53 = v108;
          if (_CalEventOccurrencesExistInDateRange((uint64_t)ValueAtIndex, v104, v103, v102, v101, 0, v108))
          {
            v58 = (void *)CDBWidgetReloadHandle;
            v51 = 1;
            v52 = v105;
            if (!os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
              goto LABEL_84;
            *(_DWORD *)buf = 138543874;
            *(_QWORD *)v110 = v98;
            *(_WORD *)&v110[8] = 1024;
            v111 = 1;
            v112 = 1024;
            v113 = v105;
            v54 = v98;
            v55 = v58;
            v56 = v55;
            v57 = "Allowing reload for %{public}@ because changedPropertiesShowInWidget (%{BOOL}d), post-save event occur"
                  "rences exist in range %i)";
            goto LABEL_65;
          }
          v59 = *(const void **)(v96 + 32);
          if (!v59)
            goto LABEL_83;
          CFRetain(*(CFTypeRef *)(v96 + 32));
          v60 = CalFilterCreateWithDatabaseShowingAll(v96);
          v61 = CPRecordGetID();
          Mutable = CFArrayCreateMutable(0, 1, 0);
          CFArrayAppendValue(Mutable, (const void *)v61);
          objc_msgSend(v107, "timeIntervalSinceReferenceDate");
          v64 = (const __CFArray *)CalEventOccurrenceCacheCopyEventOccurrencesWithIDsAfterDate((uint64_t)v59, (uint64_t)v60, Mutable, 1, 0, 0, *(_BYTE *)(v96 + 381) == 0, 0, v63 + -1.0);
          if (v60)
            CFRelease(v60);
          CFRelease(v59);
          if (Mutable)
            CFRelease(Mutable);
          v53 = v108;
          if (!v64)
          {
LABEL_83:
            v51 = 0;
            v52 = v105;
LABEL_84:
            if (!v53)
              goto LABEL_86;
LABEL_85:
            CFRelease(v53);
            goto LABEL_86;
          }
          if (CFArrayGetCount(v64) == 1
            && (v65 = CFArrayGetValueAtIndex(v64, 0),
                Date = CalEventOccurrenceGetDate((uint64_t)v65),
                objc_msgSend(v106, "timeIntervalSinceReferenceDate"),
                Date < v67))
          {
            v68 = (void *)CDBWidgetReloadHandle;
            v51 = 1;
            v52 = v105;
            if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543874;
              *(_QWORD *)v110 = v98;
              *(_WORD *)&v110[8] = 1024;
              v111 = 1;
              v112 = 1024;
              v113 = v105;
              v69 = v98;
              v70 = v68;
              _os_log_impl(&dword_1A5CCB000, v70, OS_LOG_TYPE_DEFAULT, "Allowing reload for %{public}@ because changedPropertiesShowInWidget (%{BOOL}d), pre-save event occurrences exist in range %i)", buf, 0x18u);

              v53 = v108;
            }
          }
          else
          {
            v51 = 0;
            v52 = v105;
          }
          CFRelease(v64);
          if (v53)
            goto LABEL_85;
        }
        else
        {
          v51 = 0;
          v52 = v105;
          v53 = v108;
          if (v108)
            goto LABEL_85;
        }
LABEL_86:

        if (v51)
        {
          a4 = v99;
          if (v99[16 * v52])
          {
            do
            {
              *(v33 - 15) = 1;
              v71 = *v33;
              v33 += 16;
            }
            while (v71);
          }
          goto LABEL_94;
        }
        v32 = v52 + 1;
        a4 = v99;
        v33 += 16;
        if (!v99[16 * v32])
          goto LABEL_94;
      }
      v50 = (void *)CDBWidgetReloadHandle;
      v51 = 1;
      v52 = v105;
      v53 = v108;
      if (!os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
        goto LABEL_84;
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)v110 = v98;
      *(_WORD *)&v110[8] = 1024;
      v111 = 1;
      v112 = 1024;
      v113 = v105;
      v54 = v98;
      v55 = v50;
      v56 = v55;
      v57 = "Allowing reload for %{public}@ because changedPropertiesShowInWidget (%{BOOL}d) and its in range %i.";
LABEL_65:
      _os_log_impl(&dword_1A5CCB000, v56, OS_LOG_TYPE_DEFAULT, v57, buf, 0x18u);

      if (v53)
        goto LABEL_85;
      goto LABEL_86;
    }
LABEL_94:
    ++v10;
    v9 = v93;
    v6 = v94;
    if (a4[1])
      v72 = 0;
    else
      v72 = v10 < v93;
    a3 = v95;
    if (!v72)
      return;
  }
  if (!_CalCalendarHasDirtyInstanceAttributes((uint64_t)ValueAtIndex))
    goto LABEL_47;
  v79 = (void *)CDBWidgetReloadHandle;
  if (os_log_type_enabled((os_log_t)CDBWidgetReloadHandle, OS_LOG_TYPE_DEFAULT))
  {
    v81 = v98;
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)v110 = v98;
    v82 = v79;
    _os_log_impl(&dword_1A5CCB000, v82, OS_LOG_TYPE_DEFAULT, "Allowing reload for changeType %{public}@ because calendar has dirty instance attributes", buf, 0xCu);

  }
  if (*a4)
  {
    v83 = a4 + 16;
    do
    {
      *(v83 - 15) = 1;
      v84 = *v83;
      v83 += 16;
    }
    while (v84);
  }
}

uint64_t _CalDatabaseRemoveOrphanedEntities(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result;
  uint64_t Context;
  uint64_t v4;
  const os_unfair_lock *v5;

  result = a2();
  if ((result & 1) == 0)
  {
    if (CPRecordGetStore())
    {
      Context = CPRecordStoreGetContext();
      result = CFLog();
      if (Context)
      {
        v4 = *(_QWORD *)(Context + 24);
        if (CDBLockingAssertionsEnabled && v4)
        {
          v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5)
            os_unfair_lock_assert_owner(v5 + 20);
        }
        return CPRecordStoreRemoveRecord();
      }
    }
    else
    {
      return CFLog();
    }
  }
  return result;
}

void _CalendarItemSetUnion(void *value, CFMutableSetRef theSet)
{
  CFSetAddValue(theSet, value);
}

void _CalGatherAddedDetachedItemDetails(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  const void *v6;
  double v7;
  const os_unfair_lock *v8;
  CFNumberRef v9;
  int valuePtr;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
  {
    v6 = (const void *)Property;
    v7 = MEMORY[0x1A85B424C]();
    CFStringAppendFormat(*(CFMutableStringRef *)(a2 + 8), 0, CFSTR("%f,"), *(_QWORD *)&v7);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), v6);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
    valuePtr = CPRecordGetProperty();
    v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), v9);
    CFRelease(v9);
  }
}

uint64_t _CalAnalyzeExistingDetachedItemsAndRemoveIfNeeded(uint64_t a1, uint64_t *a2)
{
  int v4;
  double v5;
  const __CFArray *v6;
  double v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  const __CFNumber *v15;
  uint64_t CalendarItemWithRowID;
  const void *v17;
  uint64_t v19;
  uint64_t v20;
  int valuePtr;

  sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  v5 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 2);
  v6 = (const __CFArray *)a2[2];
  if (v6)
  {
    v7 = v5;
    v8 = (const __CFArray *)a2[3];
    v19 = *a2;
    v20 = *(_QWORD *)(*a2 + 24);
    Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      v10 = Count;
      for (i = 0; i != v10; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
        if (vabdd_f64(MEMORY[0x1A85B424C](ValueAtIndex, v13, v14), v7) < 2.22044605e-16)
        {
          v15 = (const __CFNumber *)CFArrayGetValueAtIndex(v8, i);
          valuePtr = -1;
          if (CFNumberGetValue(v15, kCFNumberIntType, &valuePtr))
          {
            if (valuePtr == v4)
            {
              CalendarItemWithRowID = _CalGetCalendarItemWithRowID(v20);
              if (CalendarItemWithRowID)
              {
                v17 = (const void *)CalendarItemWithRowID;
                CFLog();
                if (_CalEntityIsOfType(v17, 2))
                {
                  _CalRemoveEvent(v17, 0, 0);
                }
                else if (_CalEntityIsOfType(v17, 3))
                {
                  _CalRemoveTask(v19, v17);
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

id _CalDatabaseCreateXPCArrayOfChangedObjectIDs(const __CFArray *a1)
{
  xpc_object_t v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  const void *ValueAtIndex;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  xpc_object_t v12;
  NSObject *v13;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = xpc_array_create(0, 0);
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        v7 = CalRecordIDGetEntityType((uint64_t)ValueAtIndex);
        v8 = CalRecordIDGetRowID((uint64_t)ValueAtIndex);
        v9 = v8;
        if (v7 < 0 || v8 < 0)
        {
          v13 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109376;
            v16 = v7;
            v17 = 1024;
            v18 = v9;
            _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "Unexpected entity type: %i row ID: %i", buf, 0xEu);
          }
        }
        else
        {
          v10 = CalRecordIDGetEntityType((uint64_t)ValueAtIndex);
          v11 = CalRecordIDGetRowID((uint64_t)ValueAtIndex);
          v12 = xpc_uint64_create(v11 | (unint64_t)(v10 << 32));
          xpc_array_append_value(v2, v12);

        }
      }
    }
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

uint64_t _doNothingHandler()
{
  return 0;
}

id _overrideTimezoneName(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = *MEMORY[0x1E0D0C4E8];
  v2 = a1;
  objc_msgSend(v2, "getValueForPreference:expectedClass:", v1, objc_opt_class());
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void _CalDatabaseDeleteDatabaseBecauseOfExcessiveFailedMigrationAttempts(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  int v9;
  id v10;
  NSObject *v11;
  _BOOL4 v12;
  char v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  char v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  id v34;
  id v35;
  _QWORD v36[3];
  uint8_t v37[128];
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "stringByAppendingPathComponent:", *MEMORY[0x1E0D0C470]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingString:", CFSTR("-wal"));
  v3 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingString:", CFSTR("-shm"));
  v4 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (os_variant_has_internal_diagnostics())
  {
    objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("Calendar-unableToMigrate.sqlitedb"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringByAppendingString:", CFSTR("-wal"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v5, "fileExistsAtPath:", v6) & 1) != 0 || objc_msgSend(v5, "fileExistsAtPath:", v7))
    {
      v8 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v39 = v6;
        _os_log_impl(&dword_1A5CCB000, v8, OS_LOG_TYPE_ERROR, "File already exists at path %{public}@; not keeping database.",
          buf,
          0xCu);
      }
    }
    else
    {
      v35 = 0;
      v9 = objc_msgSend(v5, "moveItemAtPath:toPath:error:", v2, v6, &v35);
      v10 = v35;
      v11 = CDBLogHandle;
      v12 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
      if (v9)
      {
        if (v12)
        {
          *(_DWORD *)buf = 138543362;
          v39 = v6;
          _os_log_impl(&dword_1A5CCB000, v11, OS_LOG_TYPE_ERROR, "Keeping database that could not be migrated at %{public}@.", buf, 0xCu);
        }
        v34 = v10;
        v13 = objc_msgSend(v5, "moveItemAtPath:toPath:error:", v3, v7, &v34);
        v14 = v34;

        if ((v13 & 1) == 0)
        {
          v15 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543618;
            v39 = v7;
            v40 = 2112;
            v41 = v14;
            _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_ERROR, "Unable to move database-wal that failed to migrate to %{public}@: %@", buf, 0x16u);
          }
        }
      }
      else
      {
        if (v12)
        {
          *(_DWORD *)buf = 138543618;
          v39 = v6;
          v40 = 2112;
          v41 = v10;
          _os_log_impl(&dword_1A5CCB000, v11, OS_LOG_TYPE_ERROR, "Unable to move database that failed to migrate to %{public}@: %@", buf, 0x16u);
        }
        v14 = v10;
      }

    }
  }
  v27 = v2;
  v28 = v1;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v36[0] = v2;
  v36[1] = v3;
  v26 = (void *)v3;
  v36[2] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v36, 3, v4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v37, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v31 != v19)
          objc_enumerationMutation(v16);
        v21 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
        if (objc_msgSend(v5, "fileExistsAtPath:", v21))
        {
          v29 = 0;
          v22 = objc_msgSend(v5, "removeItemAtPath:error:", v21, &v29);
          v23 = v29;
          if ((v22 & 1) == 0)
          {
            v24 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v39 = v21;
              _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_ERROR, "Error removing file at path: %{public}@", buf, 0xCu);
            }
          }

        }
      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v37, 16);
    }
    while (v18);
  }

}

uint64_t _CalDatabaseTargetBirthdayMigrationState()
{
  uint64_t result;

  if ((_os_feature_enabled_impl() & 1) != 0)
    return 1;
  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
    return 1;
  return result;
}

void _CalDatabaseCleanUpMovedAsideDatabaseFilesInDirectory(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  int v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  __int128 v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  void *v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "stringByAppendingPathComponent:", CFSTR("Calendar-unableToMigrate.sqlitedb"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v3 = objc_msgSend(&unk_1E4FA3E80, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v23;
    *(_QWORD *)&v4 = 138412290;
    v20 = v4;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(&unk_1E4FA3E80);
        objc_msgSend(v1, "stringByAppendingString:", *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * i), v20);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "attributesOfItemAtPath:error:", v8, 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = v9;
        if (v9)
        {
          objc_msgSend(v9, "fileModificationDate");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "timeIntervalSinceNow");
          v13 = v12;

          if (v13 < -31536000.0)
          {
            v21 = 0;
            v14 = objc_msgSend(v2, "removeItemAtPath:error:", v8, &v21);
            v15 = v21;
            v16 = CDBLogHandle;
            if (v14)
            {
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = v20;
                v27 = v8;
                v17 = v16;
                v18 = OS_LOG_TYPE_DEFAULT;
                v19 = "Cleaned up moved aside file at path %@";
                goto LABEL_13;
              }
            }
            else if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v20;
              v27 = v8;
              v17 = v16;
              v18 = OS_LOG_TYPE_ERROR;
              v19 = "Error removing moved aside file at path %@";
LABEL_13:
              _os_log_impl(&dword_1A5CCB000, v17, v18, v19, buf, 0xCu);
            }

          }
        }

      }
      v5 = objc_msgSend(&unk_1E4FA3E80, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    }
    while (v5);
  }

}

Class __getCalDefaultReminderKitProviderClass_block_invoke(uint64_t a1)
{
  Class result;

  CalendarMigrationLibrary();
  result = objc_getClass("CalDefaultReminderKitProvider");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCalDefaultReminderKitProviderClass_block_invoke_cold_1();
  getCalDefaultReminderKitProviderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCalDefaultReminderMigrationDefaultsProviderClass_block_invoke(uint64_t a1)
{
  Class result;

  CalendarMigrationLibrary();
  result = objc_getClass("CalDefaultReminderMigrationDefaultsProvider");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCalDefaultReminderMigrationDefaultsProviderClass_block_invoke_cold_1();
  getCalDefaultReminderMigrationDefaultsProviderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

Class __getCalCalendarDatabaseReminderMigratorClass_block_invoke(uint64_t a1)
{
  Class result;

  CalendarMigrationLibrary();
  result = objc_getClass("CalCalendarDatabaseReminderMigrator");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCalCalendarDatabaseReminderMigratorClass_block_invoke_cold_1();
  getCalCalendarDatabaseReminderMigratorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void CalDatabaseDeleteFile(void *a1)
{
  id v1;
  void *v2;
  char v3;
  id v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint32_t v9;
  id v10;
  uint8_t buf[4];
  id v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "fileExistsAtPath:", v1))
  {
    v10 = 0;
    v3 = objc_msgSend(v2, "removeItemAtPath:error:", v1, &v10);
    v4 = v10;
    v5 = CDBLogHandle;
    if ((v3 & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543362;
        v12 = v1;
        v6 = "Removed %{public}@";
        v7 = v5;
        v8 = OS_LOG_TYPE_INFO;
        v9 = 12;
LABEL_7:
        _os_log_impl(&dword_1A5CCB000, v7, v8, v6, buf, v9);
      }
    }
    else if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      v12 = v1;
      v13 = 2112;
      v14 = v4;
      v6 = "Unable to remove %{public}@: %@";
      v7 = v5;
      v8 = OS_LOG_TYPE_ERROR;
      v9 = 22;
      goto LABEL_7;
    }

  }
}

void ___shouldMigrateChinaTimezones_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  if (objc_msgSend(MEMORY[0x1E0CFA978], "willApplyTimeZoneChanges1"))
  {
    v4 = (id)objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", &unk_1E4FA3E68);
    _overrideTimezoneName(*(void **)(a1 + 32));
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = (void *)v2;
    if (v2)
      LOBYTE(v2) = objc_msgSend(v4, "containsObject:", v2);
    _shouldMigrateChinaTimezones_shouldMigrate = v2;

  }
}

void CalScheduledTaskCacheInitializeDB(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3 <= 112)
  {
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE ScheduledTaskCache (day REAL, date_for_sorting REAL, completed INTEGER, task_id INTEGER, count INTEGER, PRIMARY KEY (day, task_id));"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER update_task_cache_count_after_insert AFTER INSERT ON ScheduledTaskCache\nBEGIN\n    REPLACE INTO ScheduledTaskCache VALUES (NEW.day, NULL, NULL, -2, 1 + IFNULL((SELECT count FROM ScheduledTaskCache WHERE day = NEW.day AND task_id = -2), 0));\nEND;\n"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER update_task_cache_count_after_update AFTER UPDATE OF day ON ScheduledTaskCache\nBEGIN\n    UPDATE ScheduledTaskCache SET count = count - 1 WHERE day = OLD.day AND task_id = -2;\n    REPLACE INTO ScheduledTaskCache VALUES (NEW.day, NULL, NULL, -2, IFNULL((SELECT count FROM ScheduledTaskCache WHERE day = NEW.day AND task_id = -2), 0));\n    DELETE FROM ScheduledTaskCache WHERE day = OLD.day AND count = 0;\nEND;\n"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER update_task_cache_days_after_delete AFTER DELETE ON ScheduledTaskCache\nBEGIN\n    UPDATE ScheduledTaskCache SET count = count - 1 WHERE day = OLD.day AND task_id = -2;\n    DELETE FROM ScheduledTaskCache WHERE day = OLD.day AND count = 0;\nEND;\n"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX ScheduledTaskCacheDayTaskId on ScheduledTaskCache(day);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX ScheduledTaskCacheTaskId on ScheduledTaskCache(task_id);"));
  }
}

uint64_t CalDatabaseCopyScheduledTaskCache(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalDatabaseCopyScheduledTaskCache((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

id CalScheduledTaskCacheCopyAllDaysAndTaskCounts(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v6;
  uint64_t v7;
  uint64_t **v8;
  id v9;
  uint64_t v10;
  const os_unfair_lock *v11;

  if (!CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
    return 0;
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_24;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6)
        os_unfair_lock_assert_owner(v6 + 20);
    }
  }
  v7 = CPSqliteDatabaseStatementForReading();
  if (!v7)
  {
LABEL_24:
    CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
    return 0;
  }
  v8 = (uint64_t **)v7;
  v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (CDBLockingAssertionsEnabled)
  {
    if (*v8)
    {
      v10 = **v8;
      if (v10)
      {
        if (*(_QWORD *)(v10 + 104))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
  }
  if (CPSqliteStatementSendResults() != 101)
  {

    goto LABEL_24;
  }
  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  if (v9)
  {
    CFRetain(v9);

  }
  return v9;
}

uint64_t _CopyAllDaysAndTaskCountsResultHandler(uint64_t a1, void *a2)
{
  sqlite3_stmt *v3;
  id v4;
  double v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = *(sqlite3_stmt **)(a1 + 8);
  v4 = a2;
  v5 = (double)sqlite3_column_int(v3, 0);
  v6 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  v7 = (void *)MEMORY[0x1E0C99E08];
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "dictionaryWithObjectsAndKeys:", v8, CFSTR("day"), v9, CFSTR("count"), 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "addObject:", v10);
  return 0;
}

CFMutableArrayRef CalScheduledTaskCacheCopyTaskRowIDsOnDay(uint64_t a1, double a2)
{
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t Database;
  CFMutableArrayRef Mutable;
  const os_unfair_lock *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  const os_unfair_lock *v13;

  if (!CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
    return 0;
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  Mutable = (CFMutableArrayRef)Database;
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9)
          os_unfair_lock_assert_owner(v9 + 20);
      }
    }
    v10 = CPSqliteDatabaseStatementForReading();
    if (v10)
    {
      v11 = (uint64_t **)v10;
      sqlite3_bind_int(*(sqlite3_stmt **)(v10 + 8), 1, (int)a2);
      Mutable = CFArrayCreateMutable(0, 0, 0);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v11)
        {
          v12 = **v11;
          if (v12)
          {
            if (*(_QWORD *)(v12 + 104))
            {
              v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v13)
                os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
      }
      if (CPSqliteStatementSendResults() == 101)
        goto LABEL_23;
      CFRelease(Mutable);
    }
    Mutable = 0;
  }
LABEL_23:
  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  return Mutable;
}

uint64_t _CopyTaskRowIDsOnDayResultHandler(uint64_t a1, __CFArray *a2)
{
  int v3;

  v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFArrayAppendValue(a2, (const void *)v3);
  return 0;
}

CFMutableArrayRef CalScheduledTaskCacheCopyTaskRowIDsOnRange(uint64_t a1, double a2, double a3)
{
  uint64_t RecordStore;
  BOOL v7;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v10;
  uint64_t v11;
  uint64_t v12;
  CFMutableArrayRef Mutable;
  uint64_t v14;
  const os_unfair_lock *v15;

  if (!CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
    return 0;
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
    v7 = RecordStore == 0;
  else
    v7 = 1;
  if (!v7)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
    v11 = CPSqliteDatabaseStatementForReading();
    if (v11)
    {
      v12 = v11;
      sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 1, (int)a2);
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 2, (int)a3);
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v12)
        {
          v14 = **(_QWORD **)v12;
          if (v14)
          {
            if (*(_QWORD *)(v14 + 104))
            {
              v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v15)
                os_unfair_lock_assert_owner(v15 + 20);
            }
          }
        }
      }
      if (CPSqliteStatementSendResults() == 101)
        goto LABEL_23;
      CFRelease(Mutable);
    }
  }
  Mutable = 0;
LABEL_23:
  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  return Mutable;
}

uint64_t _CopyTaskRowIDsOnRangeResultHandler(uint64_t a1, __CFArray *a2)
{
  int v3;
  const void *v4;

  v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v4 = (const void *)CalRecordIDCreate(3, v3);
  CFArrayAppendValue(a2, v4);
  CFRelease(v4);
  return 0;
}

uint64_t CalScheduledTaskCacheUpdateIfNeededForTimeZoneChange(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  CFComparisonResult v8;
  uint64_t v9;
  uint64_t v10;
  const os_unfair_lock *v11;
  uint64_t Database;
  const os_unfair_lock *v13;
  uint64_t v14;
  uint64_t v15;
  const os_unfair_lock *v16;
  int v17;
  uint64_t v18;
  const os_unfair_lock *v19;
  void *v20;
  void *v21;
  void *v22;
  const os_unfair_lock *v23;
  uint64_t v24;
  uint64_t **v25;
  const __CFDictionary *Mutable;
  CalScheduledTaskCache_TimeZoneFetchContext *v27;
  uint64_t v28;
  const os_unfair_lock *v29;
  uint64_t v30;
  const os_unfair_lock *v31;
  const os_unfair_lock *v32;
  void *v33;
  const void *v34;
  const os_unfair_lock *v35;
  const void *v36;
  const os_unfair_lock *v37;

  if (*(_BYTE *)(a1 + 16) && CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
  {
    RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
    if (CDBLockingAssertionsEnabled)
      v3 = RecordStore == 0;
    else
      v3 = 1;
    if (!v3)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    v5 = (const __CFString *)CPRecordStoreCopyValueForProperty();
    CFAbsoluteTimeGetCurrent();
    v6 = (const __CFString *)CalCFTimeZoneCopyCalTimeZone();
    v7 = v6;
    if (v5)
    {
      v8 = CFStringCompare(v5, v6, 0);
      CFRelease(v7);
      CFRelease(v5);
      if (v8 == kCFCompareEqualTo)
      {
        v9 = 0;
LABEL_80:
        CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
        return v9;
      }
    }
    else
    {
      CFRelease(v6);
    }
    v10 = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
    if (CDBLockingAssertionsEnabled)
    {
      if (v10)
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
    Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13)
            os_unfair_lock_assert_owner(v13 + 20);
        }
      }
      v14 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v14)
      {
        v15 = v14;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v14)
          {
            if (*(_QWORD *)(*(_QWORD *)v14 + 104))
            {
              v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v16)
                os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
        v17 = CPSqliteConnectionBeginTransactionType();
        if (!v17 || v17 == 101)
        {
          v18 = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
          if (CDBLockingAssertionsEnabled)
          {
            if (v18)
            {
              v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v19)
                os_unfair_lock_assert_owner(v19 + 20);
            }
          }
          v20 = (void *)CPRecordStoreCopyValueForProperty();
          if (v20)
          {
            v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E80]), "initWithName:", v20);
            v22 = (void *)CalCopyTimeZone();
            if (v21 && (objc_msgSend(v21, "isEquivalentTo:", v22) & 1) != 0)
            {
LABEL_73:
              if (CDBLockingAssertionsEnabled)
              {
                if (*(_QWORD *)v15)
                {
                  if (*(_QWORD *)(*(_QWORD *)v15 + 104))
                  {
                    v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v37)
                      os_unfair_lock_assert_owner(v37 + 20);
                  }
                }
              }
              CPSqliteConnectionCommit();

              goto LABEL_79;
            }
          }
          else
          {
            v22 = (void *)CalCopyTimeZone();
            v21 = 0;
          }
          if (CDBLockingAssertionsEnabled)
          {
            if (*(_QWORD *)v15)
            {
              if (*(_QWORD *)(*(_QWORD *)v15 + 104))
              {
                v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v23)
                  os_unfair_lock_assert_owner(v23 + 20);
              }
            }
          }
          v24 = CPSqliteConnectionStatementForSQL();
          if (v24)
          {
            v25 = (uint64_t **)v24;
            Mutable = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
            v27 = objc_alloc_init(CalScheduledTaskCache_TimeZoneFetchContext);
            -[CalScheduledTaskCache_TimeZoneFetchContext setPreviousTimeZone:](v27, "setPreviousTimeZone:", v21);
            -[CalScheduledTaskCache_TimeZoneFetchContext setNextTimeZone:](v27, "setNextTimeZone:", v22);
            -[CalScheduledTaskCache_TimeZoneFetchContext setDict:](v27, "setDict:", Mutable);
            if (CDBLockingAssertionsEnabled)
            {
              if (*v25)
              {
                v28 = **v25;
                if (v28)
                {
                  if (*(_QWORD *)(v28 + 104))
                  {
                    v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v29)
                      os_unfair_lock_assert_owner(v29 + 20);
                  }
                }
              }
            }
            CPSqliteStatementSendResults();
            if (CDBLockingAssertionsEnabled)
            {
              if (*v25)
              {
                v30 = **v25;
                if (v30)
                {
                  if (*(_QWORD *)(v30 + 104))
                  {
                    v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v31)
                      os_unfair_lock_assert_owner(v31 + 20);
                  }
                }
              }
            }
            CPSqliteStatementReset();
            if (CDBLockingAssertionsEnabled)
            {
              if (*(_QWORD *)v15)
              {
                if (*(_QWORD *)(*(_QWORD *)v15 + 104))
                {
                  v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v32)
                    os_unfair_lock_assert_owner(v32 + 20);
                }
              }
            }
            v33 = (void *)CPSqliteConnectionStatementForSQL();
            CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)_UpdateDay, v33);
            CFRelease(Mutable);

          }
          CFAbsoluteTimeGetCurrent();
          v34 = (const void *)CalCFTimeZoneCopyCalTimeZone();
          if (CDBLockingAssertionsEnabled)
          {
            if (*(_QWORD *)v15)
            {
              if (*(_QWORD *)(*(_QWORD *)v15 + 104))
              {
                v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v35)
                  os_unfair_lock_assert_owner(v35 + 20);
              }
            }
          }
          CPSqliteConnectionSetValueForProperty();
          CFRelease(v34);
          v36 = *(const void **)(a1 + 32);
          if (v36)
            CFRelease(v36);
          *(_QWORD *)(a1 + 32) = CFRetain(v22);
          goto LABEL_73;
        }
        CFLog();
      }
    }
LABEL_79:
    v9 = 1;
    goto LABEL_80;
  }
  return 0;
}

BOOL CalScheduledTaskCacheRebuildIfNeeded(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v6;
  uint64_t v7;
  uint64_t v8;
  const os_unfair_lock *v9;
  _BOOL8 v10;
  const os_unfair_lock *v11;
  int v12;
  const os_unfair_lock *v14;
  const void *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;

  if (!*(_BYTE *)(a1 + 16) || !CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
    return 0;
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_51;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6)
        os_unfair_lock_assert_owner(v6 + 20);
    }
  }
  v7 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (v7)
  {
    v8 = v7;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v7)
      {
        if (*(_QWORD *)(*(_QWORD *)v7 + 104))
        {
          v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9)
            os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
    v10 = 0;
    if (CPSqliteConnectionIntegerForPropertyWithDefaultValue() != 1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v8)
        {
          if (*(_QWORD *)(*(_QWORD *)v8 + 104))
          {
            v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11)
              os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
      v12 = CPSqliteConnectionBeginTransactionType();
      v10 = v12 == 101 || v12 == 0;
      if (v12 && v12 != 101)
      {
        CFLog();
      }
      else
      {
        _RebuildCache(a1, v8);
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v8)
          {
            if (*(_QWORD *)(*(_QWORD *)v8 + 104))
            {
              v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v14)
                os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
        CPSqliteConnectionSetIntegerForProperty();
        CFAbsoluteTimeGetCurrent();
        v15 = (const void *)CalCFTimeZoneCopyCalTimeZone();
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v8)
          {
            if (*(_QWORD *)(*(_QWORD *)v8 + 104))
            {
              v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v16)
                os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
        CPSqliteConnectionSetValueForProperty();
        CFRelease(v15);
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v8)
          {
            if (*(_QWORD *)(*(_QWORD *)v8 + 104))
            {
              v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v17)
                os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
        CPSqliteConnectionCommit();
      }
    }
  }
  else
  {
LABEL_51:
    v10 = 0;
  }
  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  return v10;
}

void _RebuildCache(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v11;

  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)a2)
    {
      if (*(_QWORD *)(*(_QWORD *)a2 + 104))
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPSqliteConnectionPerformSQL();
  v5 = (const __CFArray *)_CalDatabaseCopyScheduledTasks(*(_QWORD *)(a1 + 24));
  if (v5)
  {
    v6 = v5;
    Count = CFArrayGetCount(v5);
    v11 = 0;
    if (Count >= 1)
    {
      v8 = Count;
      for (i = 0; i != v8; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
        _CalScheduledTaskCacheInsertTaskIfScheduled(a1, a2, &v11, (uint64_t)ValueAtIndex);
      }
    }
    CFRelease(v6);
  }
}

void CalScheduledTaskCacheTrimAndExtendAndUpdateOverdue(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  const void *v6;
  const os_unfair_lock *v7;
  uint64_t v8;
  sqlite3 **v9;
  const os_unfair_lock *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  const os_unfair_lock *v17;
  const __CFString *v18;
  double IntValue;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  char v29;
  _BOOL4 updated;
  char v31;
  const os_unfair_lock *v32;
  __CFNotificationCenter *DarwinNotifyCenter;

  if (!*(_BYTE *)(a1 + 16) || !CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
    return;
  NSLog(CFSTR("25534103: Beginning CalScheduledTaskCacheTrimAndExtendAndUpdateOverdue"));
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_35;
  v6 = (const void *)Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  v8 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (!v8)
  {
LABEL_35:
    CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
    return;
  }
  v9 = (sqlite3 **)v8;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)v8)
    {
      if (*(_QWORD *)(*(_QWORD *)v8 + 104))
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  v11 = CPSqliteConnectionBeginTransactionType();
  if (v11 && v11 != 101)
  {
    CFLog();
    goto LABEL_35;
  }
  v12 = (void *)MEMORY[0x1E0D0C420];
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E80], "systemTimeZone");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "calendarDateWithDate:timeZone:", v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "calendarDateForDay");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (CDBLockingAssertionsEnabled)
  {
    if (*v9)
    {
      if (*((_QWORD *)*v9 + 13))
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
  }
  v18 = (const __CFString *)CPSqliteConnectionCopyValueForProperty();
  NSLog(CFSTR("25534103: ScheduledTaskCache last saved %@"), v18);
  if (!v18)
  {
    NSLog(CFSTR("25534103: today is %@, comparisonResult is %ld"), v16, 1);
    goto LABEL_37;
  }
  IntValue = (double)CFStringGetIntValue(v18);
  v20 = (void *)MEMORY[0x1E0D0C420];
  objc_msgSend(MEMORY[0x1E0C99E80], "systemTimeZone");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "calendarDateWithAbsoluteTime:timeZone:", v21, IntValue);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v23 = objc_msgSend(v22, "compare:", v16);
  CFRelease(v18);

  NSLog(CFSTR("25534103: today is %@, comparisonResult is %ld"), v16, v23);
  if (v23 == 1)
  {
LABEL_37:
    _RebuildCache(a1, (uint64_t)v9);
LABEL_38:
    _CalScheduledTaskCacheUpdateLastSavedDate(a1, (uint64_t)v9);
    v31 = 0;
    goto LABEL_41;
  }
  if (v23 == -1)
  {
    v24 = (void *)objc_opt_new();
    objc_msgSend(v24, "setYear:", -1);
    objc_msgSend(v16, "calendarDateByAddingComponents:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "absoluteTime");
    v27 = v26;
    objc_msgSend(v25, "absoluteTime");
    if (*v9)
    {
      v29 = _CalScheduledTaskCacheTrimAndExtendCore(a1, (uint64_t)v9, v28, v27, IntValue);
      updated = _CalScheduledTaskCacheUpdateOverdueCore(v9, v27);

      if ((v29 & 1) != 0 || updated)
        goto LABEL_38;
    }
    else
    {

    }
  }
  v31 = 1;
LABEL_41:
  if (CDBLockingAssertionsEnabled)
  {
    if (*v9)
    {
      if (*((_QWORD *)*v9 + 13))
      {
        v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v32)
          os_unfair_lock_assert_owner(v32 + 20);
      }
    }
  }
  CPSqliteConnectionCommit();

  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  if ((v31 & 1) == 0)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kCalScheduledTaskCacheChangedNotification"), v6, 0, 1u);
  }
}

uint64_t _CalScheduledTaskCacheTrimAndExtendCore(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  const os_unfair_lock *v15;
  uint64_t v16;
  uint64_t v17;
  const os_unfair_lock *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  const __CFArray *v30;
  const __CFArray *v31;
  CFIndex Count;
  CFIndex v33;
  CFIndex i;
  const void *ValueAtIndex;
  void *v37;
  unsigned int v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;

  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)a2)
    {
      if (*(_QWORD *)(*(_QWORD *)a2 + 104))
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF)
    NSLog(CFSTR("EventKitSTC: *** ERROR *** No transaction is in effect! This may end poorly."));
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)a2)
    {
      if (*(_QWORD *)(*(_QWORD *)a2 + 104))
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  v12 = CPSqliteConnectionStatementForSQL();
  if (v12)
  {
    v13 = (uint64_t **)v12;
    sqlite3_bind_double(*(sqlite3_stmt **)(v12 + 8), 1, a3);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        v14 = **v13;
        if (v14)
        {
          if (*(_QWORD *)(v14 + 104))
          {
            v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15)
              os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
    }
    CPSqliteStatementPerform();
    v16 = sqlite3_changes((sqlite3 *)(*v13)[1]) > 0;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        v17 = **v13;
        if (v17)
        {
          if (*(_QWORD *)(v17 + 104))
          {
            v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18)
              os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    v16 = 0;
  }
  objc_msgSend(MEMORY[0x1E0D0C420], "calendarDateWithAbsoluteTime:timeZone:", *(_QWORD *)(a1 + 32), a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D0C420], "calendarDateWithAbsoluteTime:timeZone:", *(_QWORD *)(a1 + 32), a5);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)objc_opt_new();
  objc_msgSend(v21, "setYear:", 2);
  objc_msgSend(v19, "calendarDateByAddingComponents:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = v20;
  objc_msgSend(v20, "calendarDateByAddingComponents:", v21);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = v22;
  objc_msgSend(v22, "absoluteTime");
  v25 = v24;
  v39 = v23;
  objc_msgSend(v23, "absoluteTime");
  objc_msgSend(MEMORY[0x1E0D0C420], "calendarDateWithAbsoluteTime:timeZone:", *(_QWORD *)(a1 + 32));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D0C420], "calendarDateWithAbsoluteTime:timeZone:", *(_QWORD *)(a1 + 32), v25);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "calendarDateInTimeZone:", 0);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "calendarDateInTimeZone:", 0);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "absoluteTime");
  objc_msgSend(v29, "absoluteTime");
  v30 = (const __CFArray *)_CalDatabaseCopyScheduledTasksInDateRange(*(_QWORD *)(a1 + 24));
  if (v30)
  {
    v31 = v30;
    v37 = v19;
    v38 = v16;
    Count = CFArrayGetCount(v30);
    if (Count >= 1)
    {
      v33 = Count;
      for (i = 0; i != v33; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v31, i);
        v42 = 0;
        _CalScheduledTaskCacheInsertTaskIfScheduled(a1, a2, &v42, (uint64_t)ValueAtIndex);
      }
    }
    CFRelease(v31);
    v16 = v38;
    v19 = v37;
  }

  if ((_DWORD)v16)
    _CalScheduledTaskCacheUpdateLastSavedDate(a1, a2);

  return v16;
}

BOOL _CalScheduledTaskCacheUpdateOverdueCore(sqlite3 **a1, double a2)
{
  const os_unfair_lock *Context;
  uint64_t **v5;
  uint64_t v6;
  const os_unfair_lock *v7;
  int v8;
  _BOOL8 v9;
  uint64_t v10;
  const os_unfair_lock *v11;

  NSLog(CFSTR("25534103: Updating overdue with today %f"), *(_QWORD *)&a2);
  if (CDBLockingAssertionsEnabled)
  {
    if (*a1)
    {
      if (*((_QWORD *)*a1 + 13))
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v5 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  sqlite3_bind_double((sqlite3_stmt *)v5[1], 1, a2);
  sqlite3_bind_double((sqlite3_stmt *)v5[1], 2, a2);
  sqlite3_bind_double((sqlite3_stmt *)v5[1], 3, a2);
  if (v5)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v5)
      {
        v6 = **v5;
        if (v6)
        {
          if (*(_QWORD *)(v6 + 104))
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
  }
  v8 = CPSqliteStatementPerform();
  if (v8 != 101 && v8)
    return 0;
  v9 = sqlite3_changes(a1[1]) > 0;
  if (v5)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v5)
      {
        v10 = **v5;
        if (v10)
        {
          if (*(_QWORD *)(v10 + 104))
          {
            v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11)
              os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  return v9;
}

void _CalScheduledTaskCacheUpdateLastSavedDate(uint64_t a1, uint64_t a2)
{
  double v3;
  CFStringRef v4;
  const os_unfair_lock *Context;

  CFAbsoluteTimeGetCurrent();
  CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
  CalGregorianDateGetGregorianDateForDay();
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  v4 = CFStringCreateWithFormat(0, 0, CFSTR("%d"), (int)v3);
  NSLog(CFSTR("25534103: Updating last saved to %@"), v4);
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)a2)
    {
      if (*(_QWORD *)(*(_QWORD *)a2 + 104))
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPSqliteConnectionSetValueForProperty();
  CFRelease(v4);
}

double CalSchedueldTaskCacheGetLastSavedDate(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;
  const __CFString *v4;
  const __CFString *v5;
  double IntValue;

  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v4 = (const __CFString *)CPRecordStoreCopyValueForProperty();
  if (!v4)
    return 0.0;
  v5 = v4;
  IntValue = (double)CFStringGetIntValue(v4);
  CFRelease(v5);
  return IntValue;
}

void _CalScheduledTaskCacheMarkTaskForUpdate(uint64_t a1, void *value)
{
  const __CFSet *v4;
  int ID;
  __CFDictionary *v6;
  __CFSet *Mutable;
  __CFSet *v8;

  if (*(_BYTE *)(a1 + 16))
  {
    v4 = *(const __CFSet **)(a1 + 56);
    if (!v4 || !CFSetContainsValue(v4, value))
    {
      if ((int)CPRecordGetID() >= 1)
      {
        ID = CPRecordGetID();
        v6 = *(__CFDictionary **)(a1 + 40);
        if (v6)
          CFDictionaryRemoveValue(v6, value);
        if (ID >= 1)
        {
          Mutable = *(__CFSet **)(a1 + 48);
          if (!Mutable)
          {
            Mutable = CFSetCreateMutable(0, 0, 0);
            *(_QWORD *)(a1 + 48) = Mutable;
          }
          CFSetAddValue(Mutable, (const void *)ID);
        }
      }
      v8 = *(__CFSet **)(a1 + 56);
      if (v8)
        CFSetAddValue(v8, value);
    }
  }
}

CFMutableSetRef _CalScheduledTaskCacheBeginTrackingUpdates(CFMutableSetRef result)
{
  CFMutableSetRef v1;

  if (!*((_QWORD *)result + 7))
  {
    v1 = result;
    result = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
    *((_QWORD *)v1 + 7) = result;
  }
  return result;
}

void _CalScheduledTaskCacheStopTrackingUpdates(void *context)
{
  const __CFSet *v2;

  v2 = (const __CFSet *)*((_QWORD *)context + 7);
  if (v2)
  {
    CFSetApplyFunction(v2, (CFSetApplierFunction)_GenerateDates, context);
    CFRelease(*((CFTypeRef *)context + 7));
    *((_QWORD *)context + 7) = 0;
  }
}

void _GenerateDates(const void *a1, uint64_t a2)
{
  uint64_t DueDate;
  uint64_t CompletionDate;
  const void *v6;
  __CFDictionary *Mutable;
  const void *v8;

  DueDate = _CalTaskGetDueDate((uint64_t)a1);
  CompletionDate = _CalTaskGetCompletionDate((uint64_t)a1);
  if (DueDate | CompletionDate)
  {
    v6 = (const void *)CompletionDate;
    Mutable = *(__CFDictionary **)(a2 + 40);
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(a2 + 40) = Mutable;
    }
    if (v6)
      v8 = v6;
    else
      v8 = (const void *)DueDate;
    CFDictionarySetValue(Mutable, a1, v8);
  }
}

void _CalScheduledTaskCacheRevert(uint64_t a1)
{
  __CFDictionary *v2;
  __CFSet *v3;

  v2 = *(__CFDictionary **)(a1 + 40);
  if (v2)
    CFDictionaryRemoveAllValues(v2);
  v3 = *(__CFSet **)(a1 + 48);
  if (v3)
    CFSetRemoveAllValues(v3);
}

void _CalScheduledTaskCacheSave(uint64_t a1, uint64_t a2)
{
  const __CFSet *v4;
  const os_unfair_lock *v5;
  void *v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *v9;
  const void *v10;
  uint64_t v11;
  const os_unfair_lock *v12;
  const __CFDictionary *v13;
  _QWORD context[3];
  CFTypeRef cf;
  uint64_t v16;

  v4 = *(const __CFSet **)(a1 + 48);
  if (v4 && CFSetGetCount(v4) >= 1)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5)
              os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
    }
    v6 = (void *)CPSqliteConnectionStatementForSQL();
    if (v6)
      CFSetApplyFunction(*(CFSetRef *)(a1 + 48), (CFSetApplierFunction)_CalScheduledTaskCacheProcessDeletes, v6);
    CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 48));
  }
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v9)
      os_unfair_lock_assert_owner(v9 + 20);
  }
  v10 = (const void *)CPRecordStoreCopyValueForProperty();
  if (!v10)
  {
    CFAbsoluteTimeGetCurrent();
    v11 = CalCFTimeZoneCopyCalTimeZone();
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12)
              os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();
    v10 = (const void *)v11;
  }
  CFRelease(v10);
  v13 = *(const __CFDictionary **)(a1 + 40);
  if (v13 && CFDictionaryGetCount(v13) >= 1)
  {
    cf = 0;
    v16 = 0;
    context[0] = a1;
    context[1] = &v16;
    context[2] = a2;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)_CalScheduledTaskCacheProcessAdds, context);
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 40));
    if (cf)
      CFRelease(cf);
  }
}

uint64_t _CalScheduledTaskCacheProcessDeletes(int a1, uint64_t **a2)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  uint64_t v5;
  const os_unfair_lock *v6;

  sqlite3_bind_int((sqlite3_stmt *)a2[1], 1, a1);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        v3 = **a2;
        if (v3)
        {
          if (*(_QWORD *)(v3 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        v5 = **a2;
        if (v5)
        {
          if (*(_QWORD *)(v5 + 104))
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
  }
  return CPSqliteStatementReset();
}

void _CalScheduledTaskCacheProcessAdds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _CalScheduledTaskCacheInsertTaskIfScheduled(*(_QWORD *)a3, *(_QWORD *)(a3 + 16), *(uint64_t **)(a3 + 8), a1);
}

uint64_t CalScheduledTaskCacheRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  __CalScheduledTaskCacheTypeID = result;
  return result;
}

BOOL CalScheduledTaskCacheEqual(_QWORD *a1, _QWORD *a2)
{
  CFTypeID v4;

  v4 = CFGetTypeID(a1);
  return v4 == CFGetTypeID(a2) && a1[3] == a2[3] && a1[4] == a2[4];
}

uint64_t _CalScheduledTaskCacheProcessRecordForTimeZoneChange(uint64_t a1, void *a2)
{
  sqlite3_stmt *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  __CFDictionary *v18;
  _QWORD v20[3];
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  v3 = *(sqlite3_stmt **)(a1 + 8);
  v4 = a2;
  sqlite3_column_double(v3, 0);
  sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 1);
  v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
  objc_msgSend(v4, "previousTimeZone");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "nextTimeZone");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
  v9 = v8;

  objc_msgSend(v4, "previousTimeZone");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "nextTimeZone");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
  v13 = v12;

  v20[0] = CFSTR("day");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v9);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v14;
  v20[1] = CFSTR("dateForSorting");
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v21[1] = v15;
  v20[2] = CFSTR("taskId");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v5);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v21[2] = v16;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "dict");
  v18 = (__CFDictionary *)objc_claimAutoreleasedReturnValue();
  CFDictionaryAddValue(v18, (const void *)(int)v5, v17);

  return 0;
}

void _UpdateDay(uint64_t a1, void *a2, uint64_t **a3)
{
  id v4;
  void *v5;
  void *v6;
  sqlite3_stmt *v7;
  double v8;
  sqlite3_stmt *v9;
  double v10;
  uint64_t v11;
  const os_unfair_lock *Context;
  uint64_t v13;
  const os_unfair_lock *v14;
  id v15;

  v4 = a2;
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("day"));
  v15 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("dateForSorting"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("taskId"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (sqlite3_stmt *)a3[1];
  objc_msgSend(v15, "timeIntervalSinceReferenceDate");
  sqlite3_bind_double(v7, 1, v8);
  v9 = (sqlite3_stmt *)a3[1];
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  sqlite3_bind_double(v9, 2, v10);
  sqlite3_bind_int((sqlite3_stmt *)a3[1], 3, objc_msgSend(v6, "intValue"));
  if (a3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a3)
      {
        v11 = **a3;
        if (v11)
        {
          if (*(_QWORD *)(v11 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (a3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a3)
      {
        v13 = **a3;
        if (v13)
        {
          if (*(_QWORD *)(v13 + 104))
          {
            v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14)
              os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();

}

void _CalScheduledTaskCacheInsertTaskIfScheduled(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t DueDate;
  uint64_t CompletionDate;
  uint64_t v10;
  int ID;
  _BOOL4 IsDueDateAllDay;
  CFTypeRef v13;
  uint64_t started;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  const os_unfair_lock *Context;
  uint64_t v29;
  const os_unfair_lock *v30;
  uint64_t **v31;
  uint64_t v32;
  const os_unfair_lock *v33;
  uint64_t **v34;
  uint64_t v35;
  const os_unfair_lock *v36;
  int v37;
  void *v38;
  id v39;

  DueDate = _CalTaskGetDueDate(a4);
  CompletionDate = _CalTaskGetCompletionDate(a4);
  if (DueDate | CompletionDate)
  {
    v10 = CompletionDate;
    ID = CPRecordGetID();
    IsDueDateAllDay = _CalTaskIsDueDateAllDay(a4);
    if (v10)
    {
      v13 = CFRetain(*(CFTypeRef *)(a1 + 32));
      DueDate = v10;
    }
    else
    {
      if (IsDueDateAllDay)
      {
        started = (uint64_t)CFTimeZoneCreateWithName(0, CFSTR("GMT"), 1u);
      }
      else
      {
        started = _CalCalendarItemCopyStartTimeZone(a4);
        if (!started)
          started = (uint64_t)CFRetain(*(CFTypeRef *)(a1 + 32));
      }
      v13 = (CFTypeRef)started;
    }
    objc_msgSend(MEMORY[0x1E0D0C420], "calendarDateWithDate:timeZone:", DueDate, v13);
    v39 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "calendarDateInTimeZone:", *(_QWORD *)(a1 + 32));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "calendarDateForDay");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      v37 = ID;
      v38 = v15;
      v17 = (void *)MEMORY[0x1E0D0C420];
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E80], "systemTimeZone");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "calendarDateWithDate:timeZone:", v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "calendarDateInTimeZone:", *(_QWORD *)(a1 + 32));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "calendarDateForDay");
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v16, "compare:", v22) == -1)
      {
        v23 = v22;

        v16 = v23;
      }
      v15 = v38;
      ID = v37;

    }
    objc_msgSend(v16, "absoluteTime");
    v25 = v24;
    objc_msgSend(v15, "absoluteTime");
    v27 = v26;
    if (v13)
      CFRelease(v13);
    if (!v10)
      NSLog(CFSTR("25534103: Inserting item due at %@ at %@"), v39, v16);
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF)
      NSLog(CFSTR("EventKitSTC: *** ERROR *** No transaction is in effect! This may end poorly."));
    v29 = *a3;
    if (*a3)
      goto LABEL_34;
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v30)
              os_unfair_lock_assert_owner(v30 + 20);
          }
        }
      }
    }
    v29 = CPSqliteConnectionStatementForSQL();
    *a3 = v29;
    if (v29)
    {
LABEL_34:
      sqlite3_bind_double(*(sqlite3_stmt **)(v29 + 8), 1, v25);
      sqlite3_bind_double(*(sqlite3_stmt **)(*a3 + 8), 2, v27);
      sqlite3_bind_int(*(sqlite3_stmt **)(*a3 + 8), 3, v10 != 0);
      sqlite3_bind_int(*(sqlite3_stmt **)(*a3 + 8), 4, ID);
      v31 = (uint64_t **)*a3;
      if (CDBLockingAssertionsEnabled)
      {
        if (v31)
        {
          if (*v31)
          {
            v32 = **v31;
            if (v32)
            {
              if (*(_QWORD *)(v32 + 104))
              {
                v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v33)
                  os_unfair_lock_assert_owner(v33 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementPerform();
      v34 = (uint64_t **)*a3;
      if (CDBLockingAssertionsEnabled)
      {
        if (v34)
        {
          if (*v34)
          {
            v35 = **v34;
            if (v35)
            {
              if (*(_QWORD *)(v35 + 104))
              {
                v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v36)
                  os_unfair_lock_assert_owner(v36 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }

  }
}

void _CalRecurrencePrepareForSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableStringRef Mutable;
  const os_unfair_lock *v4;
  const __CFArray *Property;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  uint64_t v9;
  unsigned int *ValueAtIndex;
  const __CFString *v11;
  const char *v12;
  const os_unfair_lock *v13;
  const __CFArray *v14;
  const __CFArray *v15;
  const os_unfair_lock *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  const os_unfair_lock *v19;
  const __CFArray *v20;
  const __CFArray *v21;
  const os_unfair_lock *v22;
  const __CFArray *v23;
  const __CFArray *v24;
  const os_unfair_lock *v25;
  const __CFArray *v26;
  const __CFArray *v27;
  const os_unfair_lock *v28;
  const os_unfair_lock *v29;
  uint64_t v30;
  uint64_t v31;
  const os_unfair_lock *v32;
  CFTypeRef RelatedObject;
  NSObject *v34;
  CFTypeRef DebugDescription;
  uint64_t DatabaseForRecord;
  const os_unfair_lock *v37;
  const os_unfair_lock *v38;
  void *Owner;
  void *v40;
  UniChar chars[2];
  uint64_t v42;
  __int16 v43;
  CFTypeRef v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if ((int)CPRecordGetIntegerProperty() >= 2)
  {
    Mutable = CFStringCreateMutable(0, 0);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v4)
            os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
    Property = (const __CFArray *)CPRecordGetProperty();
    if (Property)
    {
      v6 = Property;
      if (CFArrayGetCount(Property) >= 1)
      {
        Count = CFArrayGetCount(v6);
        chars[0] = 68;
        if (CFStringGetLength(Mutable) >= 1)
          CFStringAppendCString(Mutable, ";", 0x8000100u);
        CFStringAppendCharacters(Mutable, chars, 1);
        CFStringAppendCString(Mutable, "=", 0x8000100u);
        if (Count >= 1)
        {
          v8 = 0;
          v9 = MEMORY[0x1E0D0C498];
          do
          {
            ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(v6, v8);
            if (v8)
              v11 = CFSTR(",%s%d%s");
            else
              v11 = CFSTR("%s%d%s");
            if ((int)*ValueAtIndex <= 0)
              v12 = "";
            else
              v12 = "+";
            CFStringAppendFormat(Mutable, 0, v11, v12, *ValueAtIndex, *(_QWORD *)(v9 + 8 * ValueAtIndex[1]));
            ++v8;
          }
          while (Count != v8);
        }
      }
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13)
            os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
    v14 = (const __CFArray *)CPRecordGetProperty();
    if (v14)
    {
      v15 = v14;
      if (CFArrayGetCount(v14) >= 1)
        _CalRecurrenceAppendIndexListForSubproperty(Mutable, v15, 11);
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16)
            os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
    v17 = (const __CFArray *)CPRecordGetProperty();
    if (v17)
    {
      v18 = v17;
      if (CFArrayGetCount(v17) >= 1)
        _CalRecurrenceAppendIndexListForSubproperty(Mutable, v18, 12);
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v19)
            os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
    v20 = (const __CFArray *)CPRecordGetProperty();
    if (v20)
    {
      v21 = v20;
      if (CFArrayGetCount(v20) >= 1)
        _CalRecurrenceAppendIndexListForSubproperty(Mutable, v21, 13);
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v22)
            os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
    v23 = (const __CFArray *)CPRecordGetProperty();
    if (v23)
    {
      v24 = v23;
      if (CFArrayGetCount(v23) >= 1)
        _CalRecurrenceAppendIndexListForSubproperty(Mutable, v24, 14);
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v25)
            os_unfair_lock_assert_owner(v25 + 20);
        }
      }
    }
    v26 = (const __CFArray *)CPRecordGetProperty();
    if (v26)
    {
      v27 = v26;
      if (CFArrayGetCount(v26) >= 1)
        _CalRecurrenceAppendIndexListForSubproperty(Mutable, v27, 15);
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v28)
            os_unfair_lock_assert_owner(v28 + 20);
        }
      }
    }
    CPRecordSetProperty();
    if (Mutable)
      CFRelease(Mutable);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29)
          os_unfair_lock_assert_owner(v29 + 20);
      }
    }
  }
  v30 = CPRecordGetProperty();
  v31 = v30;
  if (v30)
    CalRelationOwnerWillSave(v30);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v32)
          os_unfair_lock_assert_owner(v32 + 20);
      }
    }
  }
  if (!CPRecordGetProperty())
  {
    if (v31)
      RelatedObject = CalRelationGetRelatedObject(v31);
    else
      RelatedObject = 0;
    v34 = (id)CDBLogHandle;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      DebugDescription = _CalEntityGetDebugDescription(RelatedObject);
      *(_DWORD *)chars = 134218242;
      v42 = v31;
      v43 = 2112;
      v44 = DebugDescription;
      _os_log_impl(&dword_1A5CCB000, v34, OS_LOG_TYPE_ERROR, "saving a recurrence with owner_id 0: relation=%p, owner=%@", (uint8_t *)chars, 0x16u);
    }

    DatabaseForRecord = CalGetDatabaseForRecord();
    _CalDatabaseIntegrityError(DatabaseForRecord, CFSTR("Recurrence without owner"));
  }
  _CalRecurrenceGenerateCachedEndDate(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v37)
          os_unfair_lock_assert_owner(v37 + 20);
      }
    }
  }
  if (CPRecordGetIntegerProperty() != -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v38)
            os_unfair_lock_assert_owner(v38 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
  }
  Owner = (void *)_CalRecurrenceGetOwner(a1, 0);
  if (Owner)
  {
    v40 = Owner;
    if (_CalEntityIsOfType(Owner, 2))
      _CalEventUpdateOccurrenceCache(v40);
  }
}

uint64_t _CalRecurrencePropertyDidChange(uint64_t result, int a2)
{
  uint64_t v2;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;
  const os_unfair_lock *v5;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  const os_unfair_lock *v9;

  if (a2 == 7)
  {
    v2 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    CPRecordUnloadProperty();
    if (v2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v4)
            os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
    CPRecordUnloadProperty();
    if (v2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5)
            os_unfair_lock_assert_owner(v5 + 20);
        }
      }
    }
    CPRecordUnloadProperty();
    if (v2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6)
            os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
    CPRecordUnloadProperty();
    if (v2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7)
            os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
    CPRecordUnloadProperty();
    if (v2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8)
            os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
    CPRecordUnloadProperty();
    if (v2 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
    return CPRecordUnloadProperty();
  }
  return result;
}

uint64_t _CalRecurrencePropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  const os_unfair_lock *v9;
  uint64_t Owner;
  _BOOL4 v11;
  const os_unfair_lock *v12;
  uint64_t Property;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;

  v4 = result;
  if (a2 > 5)
  {
    if (a2 != 6)
    {
      if (a2 != 16)
        goto LABEL_62;
      v5 = a3;
      if (a3 == -1)
      {
        if (result)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context)
                os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
        CPRecordGetProperty();
        if (v4)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v7)
                os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
        CPRecordGetProperty();
        if (v4)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v8)
                os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
        if (CPRecordGetProperty() != -1)
        {
          if (v4)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v9)
                  os_unfair_lock_assert_owner(v9 + 20);
              }
            }
          }
          CPRecordInitializeProperty();
        }
      }
      Owner = _CalRecurrenceGetOwner(v4, 0);
      result = CPRecordGetID();
      v11 = result == v5;
      if (Owner)
      {
LABEL_63:
        result = _CalEntityIsNew(Owner);
        if (((result | v11) & 1) == 0)
          return _CalEventMarkAsModifiedForChangeTracking(Owner);
        return result;
      }
      return result;
    }
  }
  else
  {
    if ((a2 - 4) < 2)
      return result;
    if (a2 != 3)
    {
LABEL_62:
      result = _CalRecurrenceGetOwner(v4, 0);
      Owner = result;
      v11 = 0;
      if (!result)
        return result;
      goto LABEL_63;
    }
  }
  if (result)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (a2 != 3 && Property)
    goto LABEL_68;
  if (v4)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
  {
LABEL_68:
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v15)
            os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
    CPRecordSetProperty();
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16)
            os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
    CPRecordSetProperty();
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17)
            os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
    result = CPRecordSetProperty();
  }
  if ((a2 & 0xFFFFFFFE) != 4)
    goto LABEL_62;
  return result;
}

void CalRecurrenceInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalRecurrenceClass, (const char **)&kCalRecurrenceIndexes, (const char **)&kCalRecurrenceChangesIndexes);
}

void CalRecurrenceMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  if (a3 <= 18001)
  {
    CalMigrateTableFull(a2, (const char **)&kCalRecurrenceClass, 0, (const char **)&kCalRecurrenceUpgradeInfo, (const char **)&kCalRecurrenceChangesUpgradeInfo, (const char **)&kCalRecurrenceIndexes, (const char **)&kCalRecurrenceChangesIndexes, 0, a3);
    if (a3 > 48)
    {
      if (a3 > 0x34)
        return;
    }
    else
    {
      CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("UPDATE Recurrence SET end_date = NULL WHERE end_date = 0"));
      CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("UPDATE Recurrence SET cached_end_date = NULL WHERE cached_end_date = 0"));
    }
    _CalDBFillInUUIDColumn((uint64_t)a2, (uint64_t)CFSTR("Recurrence"));
  }
}

uint64_t _CalRecurrenceHasValidParent(uint64_t a1)
{
  uint64_t result;

  result = _CalRecurrenceGetOwner(a1, 0);
  if (result)
    return _CalRecordStillExists();
  return result;
}

void _CalRecurrenceCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Recurrence WHERE owner_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
}

const void *_CalDatabaseCreateRecurrence(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;
  BOOL v6;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  BOOL v10;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;
  const __CFUUID *v13;
  CFStringRef v14;
  const os_unfair_lock *v15;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 5);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v2 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v10 = v2 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v2)
    {
      if (CPRecordGetStore())
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  v13 = CFUUIDCreate(0);
  v14 = CFUUIDCreateString(0, v13);
  if (CDBLockingAssertionsEnabled)
  {
    if (v2)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v13);
  CFRelease(v14);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateRecurrence(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Recurrence;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Recurrence = _CalDatabaseCreateRecurrence((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Recurrence;
}

uint64_t CalDatabaseCopyOfAllRecurrencesInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  int UID;
  int v4;
  uint64_t RecordStore;
  uint64_t v6;
  BOOL v7;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v10;
  uint64_t v11;
  const os_unfair_lock *v12;
  uint64_t v13;
  os_unfair_lock_s *v15;
  uint64_t v16;
  BOOL v17;
  const os_unfair_lock *v18;

  if (a2)
  {
    v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    UID = CalStoreGetUID();
    if (v2)
    {
      v4 = UID;
      os_unfair_lock_lock(v2 + 20);
      RecordStore = _CalDatabaseGetRecordStore((uint64_t)v2);
      v6 = RecordStore;
      if (CDBLockingAssertionsEnabled)
        v7 = RecordStore == 0;
      else
        v7 = 1;
      if (!v7)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      Database = CPRecordStoreGetDatabase();
      if (!Database)
        goto LABEL_30;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
      v11 = CPSqliteDatabaseStatementForReading();
      if (v11)
      {
        sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 1, v4);
        if (CDBLockingAssertionsEnabled)
        {
          if (v6)
          {
            v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12)
              os_unfair_lock_assert_owner(v12 + 20);
          }
        }
        v13 = CPRecordStoreProcessStatement();
      }
      else
      {
LABEL_30:
        v13 = 0;
      }
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner(v2 + 20);
      os_unfair_lock_unlock(v2 + 20);
      CFRelease(v2);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v15 = a1 + 20;
    os_unfair_lock_lock(a1 + 20);
    v16 = _CalDatabaseGetRecordStore((uint64_t)a1);
    if (CDBLockingAssertionsEnabled)
      v17 = v16 == 0;
    else
      v17 = 1;
    if (!v17)
    {
      v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v18)
        os_unfair_lock_assert_owner(v18 + 20);
    }
    v13 = CPRecordStoreCopyAllInstancesOfClass();
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v15);
    os_unfair_lock_unlock(v15);
  }
  return v13;
}

const void *_CalRecurrenceCopy(uint64_t a1, uint64_t a2)
{
  const void *Recurrence;
  const void *v4;
  BOOL v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  BOOL v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;
  const os_unfair_lock *v18;
  const os_unfair_lock *v19;
  const os_unfair_lock *v20;
  const os_unfair_lock *v21;
  const os_unfair_lock *v22;
  const os_unfair_lock *v23;
  const os_unfair_lock *v24;
  const os_unfair_lock *v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;
  const os_unfair_lock *v28;
  const os_unfair_lock *v29;
  const os_unfair_lock *v30;
  const os_unfair_lock *v31;
  const os_unfair_lock *v32;
  const os_unfair_lock *v33;
  const os_unfair_lock *v34;

  Recurrence = _CalDatabaseCreateRecurrence(a1);
  v4 = Recurrence;
  if (CDBLockingAssertionsEnabled)
    v5 = Recurrence == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v11 = v4 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18)
          os_unfair_lock_assert_owner(v18 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20)
          os_unfair_lock_assert_owner(v20 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21)
          os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23)
          os_unfair_lock_assert_owner(v23 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24)
          os_unfair_lock_assert_owner(v24 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25)
          os_unfair_lock_assert_owner(v25 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26)
          os_unfair_lock_assert_owner(v26 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27)
          os_unfair_lock_assert_owner(v27 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v28)
          os_unfair_lock_assert_owner(v28 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29)
          os_unfair_lock_assert_owner(v29 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v30)
          os_unfair_lock_assert_owner(v30 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31)
          os_unfair_lock_assert_owner(v31 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v32)
          os_unfair_lock_assert_owner(v32 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33)
          os_unfair_lock_assert_owner(v33 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v34)
          os_unfair_lock_assert_owner(v34 + 20);
      }
    }
  }
  CPRecordSetProperty();
  return v4;
}

uint64_t _CalRecurrencePrepareForRemove(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;
  const os_unfair_lock *v4;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetIntegerProperty();
  if ((_DWORD)result != -1)
  {
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v4)
        os_unfair_lock_assert_owner(v4 + 20);
    }
    return CPRecordInitializeProperty();
  }
  return result;
}

void _CalRemoveRecurrence(void *a1)
{
  uint64_t Owner;
  uint64_t DatabaseForRecord;

  Owner = _CalRecurrenceGetOwner((uint64_t)a1, 0);
  if (Owner)
  {
    _CalCalendarItemRemoveRecurrence(Owner, a1, 0);
  }
  else
  {
    DatabaseForRecord = CalGetDatabaseForRecord();
    _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
}

void CalRemoveRecurrence(void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveRecurrence(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalInvalidateRecurrencesWithOwnerID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t _CalRecurrenceGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalRecurrenceGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

const void *CalDatabaseCopyRecurrenceWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalRecurrenceGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalRecurrenceCopyUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalDatabaseCopyRecurrenceWithUUID(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  CFStringRef v5;
  uint64_t RecordStore;
  BOOL v7;
  const os_unfair_lock *Context;
  const __CFArray *v9;
  const __CFArray *v10;
  const void *ValueAtIndex;
  CFTypeRef v12;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v5 = CFStringCreateWithFormat(0, 0, CFSTR("UUID = '%@'"), a2);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v7 = RecordStore == 0;
  else
    v7 = 1;
  if (!v7)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v9 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhere();
  if (v9)
  {
    v10 = v9;
    if (CFArrayGetCount(v9) < 1)
    {
      v12 = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v10, 0);
      v12 = CFRetain(ValueAtIndex);
    }
    CFRelease(v10);
  }
  else
  {
    v12 = 0;
  }
  CFRelease(v5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v12;
}

void CalRecurrenceClearExternalProperties(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;
  const os_unfair_lock *v5;
  const os_unfair_lock *v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v5)
          os_unfair_lock_assert_owner(v5 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalRecurrenceSetExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceCopyExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

const void *CalDatabaseCopyRecurrenceWithExternalIDInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  void *CStringFromCFString;
  void *v7;
  __CFString *SelectPrefix;
  __CFString *v9;
  uint64_t RecordStore;
  uint64_t v11;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v14;
  uint64_t v15;
  const os_unfair_lock *v16;
  const __CFArray *v17;
  const void *v18;
  CFIndex Count;
  int ID;
  uint64_t v22;
  const void *ValueAtIndex;
  const os_unfair_lock *v25;

  if (a3)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v5)
      return 0;
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
    if (!v5)
      return 0;
  }
  if (!a2 || (CStringFromCFString = CalCreateCStringFromCFString(a2)) == 0)
  {
    CFRelease(v5);
    return 0;
  }
  v7 = CStringFromCFString;
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
  {
    free(v7);
    CFRelease(v5);
    return 0;
  }
  v9 = SelectPrefix;
  CFStringAppend(SelectPrefix, CFSTR(" WHERE external_id = ?"));
  os_unfair_lock_lock(v5 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)v5);
  v11 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  v15 = CPSqliteDatabaseStatementForReading();
  if (v15)
  {
    sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, (const char *)v7, -1, 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
    v17 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
  }
  else
  {
    v17 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v9);
  free(v7);
  if (v17)
  {
    Count = CFArrayGetCount(v17);
    if (a3)
      ID = CPRecordGetID();
    else
      ID = -1;
    if (Count < 1)
    {
      v18 = 0;
    }
    else
    {
      v22 = 1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v17, v22 - 1);
        v18 = ValueAtIndex;
        if (!a3)
          goto LABEL_46;
        if (CDBLockingAssertionsEnabled && ValueAtIndex != 0)
        {
          if (CPRecordGetStore())
          {
            v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v25)
              os_unfair_lock_assert_owner(v25 + 20);
          }
        }
        if (ID != CPRecordGetIntegerProperty())
        {
          v18 = 0;
        }
        else
        {
LABEL_46:
          CFRetain(v18);
          if (v18)
            break;
        }
      }
      while (v22++ < Count);
    }
    CFRelease(v17);
  }
  else
  {
    v18 = 0;
  }
  CFRelease(v5);
  return v18;
}

void CalRecurrenceSetExternalModificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceCopyExternalModificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalRecurrenceSetExternalIdentificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceCopyExternalIdentificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalRecurrenceSetExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceCopyExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalRecurrenceSetFrequency(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecurrenceGetFrequency(a1) != a2)
    _CalRecurrenceSetProperty(a1, 0, a2, 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceGetFrequency(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

void _CalRecurrenceSetProperty(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  uint64_t Owner;
  uint64_t v10;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (vabdd_f64(_CalRecordGetDateProperty(a1), *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7)
            os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
    CPRecordSetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8)
            os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
    CPRecordSetProperty();
  }
  Owner = _CalRecurrenceGetOwner(a1, 0);
  v10 = Owner;
  if (a4 && Owner)
  {
    _CalCalendarItemRemoveAllExceptionDates(Owner);
  }
  else if (!Owner)
  {
    return;
  }
  _CalEventUpdateLastModifiedDate(v10);
}

uint64_t CalRecurrenceGetFrequency(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Frequency;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Frequency = _CalRecurrenceGetFrequency(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Frequency;
}

void CalRecurrenceSetInterval(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecurrenceGetInterval(a1) != a2)
    _CalRecurrenceSetProperty(a1, 1, a2, 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceGetInterval(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetIntegerProperty();
}

uint64_t CalRecurrenceGetInterval(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Interval;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Interval = _CalRecurrenceGetInterval(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Interval;
}

void CalRecurrenceSetWeekStart(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecurrenceGetWeekStartRaw(a1) != a2)
    _CalRecurrenceSetProperty(a1, 2, a2, 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceGetWeekStart(uint64_t a1)
{
  uint64_t result;

  LODWORD(result) = _CalRecurrenceGetWeekStartRaw(a1);
  if ((_DWORD)result == 7)
    return 1;
  else
    return result;
}

uint64_t CalRecurrenceGetWeekStart(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  LODWORD(a1) = _CalRecurrenceGetWeekStartRaw(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  if ((_DWORD)a1 == 7)
    a1 = 1;
  else
    a1 = a1;
  os_unfair_lock_unlock(RecordLock);
  return a1;
}

uint64_t CalRecurrenceGetWeekStartDirectly(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalRecurrenceSetCount(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecurrenceGetCount(a1) != a2)
  {
    _CalRecurrenceSetProperty(a1, 3, a2, 0);
    _CalRecurrenceSetProperty(a1, 6, 0, 0);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceGetCount(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Count;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Count = _CalRecurrenceGetCount(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Count;
}

void CalRecurrenceInvalidateCachedEndDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecurrenceSetCachedEndDate(a1, *MEMORY[0x1E0D0C490]);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void _CalRecurrenceSetCachedEndDate(uint64_t a1, uint64_t a2)
{
  uint64_t Store;
  char v5;
  CFDateRef CFDateRefFromCalDate;
  const os_unfair_lock *Context;
  const os_unfair_lock *v8;
  char v9;

  Store = CPRecordGetStore();
  if (Store && CPRecordStoreIsLoggingChanges())
  {
    CPRecordStoreLogChanges();
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  CFDateRefFromCalDate = _CreateCFDateRefFromCalDate(*(CFAbsoluteTime *)&a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CFDateRefFromCalDate)
    CFRelease(CFDateRefFromCalDate);
  if (Store)
    v9 = v5;
  else
    v9 = 1;
  if ((v9 & 1) == 0)
    CPRecordStoreLogChanges();
}

void _CalRecurrenceSetEndDate(uint64_t a1, CFAbsoluteTime a2)
{
  CFDateRef CFDateRefFromCalDate;

  CFDateRefFromCalDate = _CreateCFDateRefFromCalDate(a2);
  _CalRecurrenceSetProperty(a1, 6, (uint64_t)CFDateRefFromCalDate, 0);
  _CalRecurrenceSetProperty(a1, 3, 0, 0);
  if (CFDateRefFromCalDate)
    CFRelease(CFDateRefFromCalDate);
}

void CalRecurrenceSetEndDate(uint64_t a1, CFAbsoluteTime a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (vabdd_f64(_CalRecordGetDateProperty(a1), a2) >= 2.22044605e-16)
    _CalRecurrenceSetEndDate(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

double _CalRecurrenceGetEndDate(uint64_t a1)
{
  return _CalRecordGetDateProperty(a1);
}

double CalRecurrenceGetEndDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void CalRecurrenceSetByDayDays(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v5 = _CalRecurrenceCopyByDayDays(a1);
  if (a2 | v5 && (objc_msgSend((id)v5, "isEqual:", a2) & 1) == 0)
  {
    _CalRecurrenceSetProperty(a1, 9, a2, 1);
    _CalRecurrenceSpecifierIncrementChangeCount(a1);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);

}

uint64_t _CalRecurrenceCopyByDayDays(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t _CalRecurrenceSpecifierIncrementChangeCount(uint64_t a1)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetIntegerProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3)
          os_unfair_lock_assert_owner(v3 + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalRecurrenceCopyByDayDays(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalRecurrenceCopyByDayDays(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetByMonth(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecurrenceSetProperty(a1, 15, a2, 1);
  _CalRecurrenceSpecifierIncrementChangeCount(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalRecurrenceCopyByMonth(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalRecurrenceCopyByMonth(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalRecurrenceCopyByMonth(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalRecurrenceSetByMonthMonths(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v5;
  __CFArray *Mutable;
  uint64_t v7;
  void *v8;
  const os_unfair_lock *Context;
  const os_unfair_lock *v10;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    v5 = 0;
    Mutable = 0;
    do
    {
      if (((a2 >> v5) & 1) != 0)
      {
        if (!Mutable)
          Mutable = CFArrayCreateMutable(0, 0, 0);
        CFArrayAppendValue(Mutable, (const void *)++v5);
      }
      else
      {
        ++v5;
      }
    }
    while (v5 != 12);
    v7 = _CalRecurrenceCopyByMonth(a1);
    v8 = (void *)v7;
    if (v7 | (unint64_t)Mutable)
    {
      if ((objc_msgSend((id)v7, "isEqual:", Mutable) & 1) == 0)
      {
        _CalRecurrenceSetProperty(a1, 15, (uint64_t)Mutable, 1);
        _CalRecurrenceSpecifierIncrementChangeCount(a1);
      }
      if (Mutable)
        CFRelease(Mutable);
    }

  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetProperty())
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPRecordSetProperty();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRecurrenceGetByMonthMonths(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex v4;
  uint64_t v5;
  const os_unfair_lock *Context;

  v2 = (const __CFArray *)_CalRecurrenceCopyByMonth(a1);
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2) < 1)
    {
      v5 = 0;
    }
    else
    {
      v4 = 0;
      LODWORD(v5) = 0;
      do
        v5 = (1 << (CFArrayGetValueAtIndex(v3, v4++) - 1)) | v5;
      while (CFArrayGetCount(v3) > v4);
    }
    CFRelease(v3);
    return v5;
  }
  else
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    return CPRecordGetIntegerProperty();
  }
}

uint64_t CalRecurrenceGetByMonthMonths(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalRecurrenceGetByMonthMonths(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetByMonthDayDays(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v5 = _CalRecurrenceCopyByMonthDayDays(a1);
  if (a2 | v5 && (objc_msgSend((id)v5, "isEqual:", a2) & 1) == 0)
  {
    _CalRecurrenceSetProperty(a1, 11, a2, 1);
    _CalRecurrenceSpecifierIncrementChangeCount(a1);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);

}

uint64_t _CalRecurrenceCopyByMonthDayDays(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalRecurrenceCopyByMonthDayDays(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalRecurrenceCopyByMonthDayDays(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetByWeekWeeks(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v5 = _CalRecurrenceCopyByWeekWeeks(a1);
  if (a2 | v5 && (objc_msgSend((id)v5, "isEqual:", a2) & 1) == 0)
  {
    _CalRecurrenceSetProperty(a1, 12, a2, 1);
    _CalRecurrenceSpecifierIncrementChangeCount(a1);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);

}

uint64_t _CalRecurrenceCopyByWeekWeeks(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalRecurrenceCopyByWeekWeeks(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalRecurrenceCopyByWeekWeeks(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetByYearDayDays(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v5 = _CalRecurrenceCopyByYearDayDays(a1);
  if (a2 | v5 && (objc_msgSend((id)v5, "isEqual:", a2) & 1) == 0)
  {
    _CalRecurrenceSetProperty(a1, 13, a2, 1);
    _CalRecurrenceSpecifierIncrementChangeCount(a1);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);

}

uint64_t _CalRecurrenceCopyByYearDayDays(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalRecurrenceCopyByYearDayDays(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalRecurrenceCopyByYearDayDays(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetBySetPos(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v5 = _CalRecurrenceCopyBySetPos(a1);
  if (a2 | v5 && (objc_msgSend((id)v5, "isEqual:", a2) & 1) == 0)
  {
    _CalRecurrenceSetProperty(a1, 14, a2, 1);
    _CalRecurrenceSpecifierIncrementChangeCount(a1);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);

}

uint64_t _CalRecurrenceCopyBySetPos(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalRecurrenceCopyBySetPos(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalRecurrenceCopyBySetPos(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalRecurrenceSetOwner(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalRelationSetRelatedObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalRecurrenceIsSimpleYearly(uint64_t a1)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v3;
  const os_unfair_lock *v4;
  const os_unfair_lock *v5;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;

  if (_CalRecurrenceGetFrequency(a1) != 4 || _CalRecurrenceGetInterval(a1) != 1)
    return 0;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetProperty())
    return 0;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3)
          os_unfair_lock_assert_owner(v3 + 20);
      }
    }
  }
  if (CPRecordGetProperty())
    return 0;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  if (CPRecordGetProperty())
    return 0;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v5)
          os_unfair_lock_assert_owner(v5 + 20);
      }
    }
  }
  if (CPRecordGetProperty())
    return 0;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  if (CPRecordGetProperty())
    return 0;
  if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
  {
    v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v7)
      os_unfair_lock_assert_owner(v7 + 20);
  }
  return !CPRecordGetProperty();
}

uint64_t _CalRecurrenceSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t CalDatabaseCopyRecurrenceChangesInStore(os_unfair_lock_s *cf, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v5)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v5 = cf;
    if (!cf)
      return 0xFFFFFFFFLL;
    CFRetain(cf);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalRecurrenceCopyChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  v7 = _CalDatabaseCopyRecurrenceChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  return v7;
}

CFStringRef _CalRecurrenceCopyChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  uint64_t DatabaseForRecord;
  CFTypeRef v4;
  uint64_t ID;
  CFStringRef v7;

  v7 = 0;
  if (a2)
  {
    DatabaseForRecord = CalGetDatabaseForRecord();
    v4 = _CalDatabaseCopyClientIdentifier(DatabaseForRecord);
    ID = CPRecordGetID();
    v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v4, v4, 5, v4);
    CFRelease(v4);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v7);
  return v7;
}

uint64_t _CalDatabaseCopyRecurrenceChangesWithWhereClauseNoLock(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

uint64_t CalDatabaseRemoveRecurrenceChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  uint64_t v6;
  _QWORD v8[7];
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __CalDatabaseRemoveRecurrenceChangesInStoreToIndex_block_invoke;
  v8[3] = &unk_1E4F84BF0;
  v8[4] = &v10;
  v8[5] = v5;
  v8[6] = a2;
  v9 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1A5CF3EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalDatabaseRemoveRecurrenceChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3;
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t v7;

  v3 = _CalRecurrenceCopyChangeHistoryWhereClauseForStore(a1, a2);
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3)
    CFRelease(v3);
  return v7;
}

uint64_t CalDatabaseCopyRecurrenceChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalRecurrenceCopyChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v7 = _CalDatabaseCopyRecurrenceChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  if (v5)
    CFRelease(v5);
  return v7;
}

CFStringRef _CalRecurrenceCopyChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  uint64_t DatabaseForRecord;
  CFTypeRef v4;
  uint64_t ID;
  CFStringRef v7;

  v7 = 0;
  if (a2)
  {
    DatabaseForRecord = CalGetDatabaseForRecord();
    v4 = _CalDatabaseCopyClientIdentifier(DatabaseForRecord);
    ID = CPRecordGetID();
    v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v4, v4, 5, v4);
    CFRelease(v4);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v7);
  return v7;
}

uint64_t CalDatabaseRemoveRecurrenceChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalRecurrenceCopyChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveRecurrenceChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E4F84BF0;
  v9[4] = &v11;
  v9[5] = v5;
  v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A5CF4224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseRemoveRecurrenceChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __CalDatabaseRemoveRecurrenceChangesWithIndices_block_invoke;
  v7[3] = &unk_1E4F84C18;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A5CF4384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _CalRecurrenceShouldPinMonthDays(uint64_t a1)
{
  uint64_t Owner;
  CFTypeRef Calendar;
  CFTypeRef Store;

  Owner = _CalRecurrenceGetOwner(a1, 0);
  return Owner
      && (Calendar = _CalCalendarItemGetCalendar(Owner)) != 0
      && (Store = _CalCalendarGetStore((uint64_t)Calendar)) != 0
      && _CalStoreAreRecurrencesPinnedToMonthDays((uint64_t)Store);
}

uint64_t _CalDatabasePrepareRecurrencesInStoreForMigration(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t ID;
  uint64_t result;
  const void *v8;

  ID = CPRecordGetID();
  result = _CalDatabaseRemoveRecurrenceChangesInStoreToIndex(a1, a3);
  if ((_DWORD)result)
  {
    result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE Recurrence SET external_id = NULL, external_mod_tag = NULL, external_id_tag = NULL, external_rep = NULL WHERE owner_id IN (SELECT CalendarItem.ROWID FROM CalendarItem JOIN Calendar ON calendar_id = Calendar.ROWID WHERE store_id = %d);"),
                        ID);
    if (result)
    {
      v8 = (const void *)result;
      CalPerformSQLWithConnection(a2, result);
      CFRelease(v8);
      return 1;
    }
  }
  return result;
}

uint64_t _CalRecurrenceSpecifierParse(uint64_t a1)
{
  uint64_t v1;
  const os_unfair_lock *Context;
  const __CFString *Property;
  const __CFString *v4;
  CFIndex Length;
  CFIndex v6;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  CFIndex v9;
  UniChar v10;
  CFIndex v11;
  int v12;
  CFIndex v13;
  UniChar *v14;
  CFIndex v15;
  UniChar v16;
  uint64_t v18;
  CFIndex v19;
  int64_t v20;
  int64_t v22;
  int64_t v23;
  int64_t v24;
  __CFArray *Mutable;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFIndex v32;
  UniChar *v33;
  uint64_t v34;
  UniChar v35;
  uint64_t v36;
  CFIndex v37;
  UniChar *v38;
  uint64_t v39;
  UniChar v40;
  int v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  __CFArray *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CFIndex v54;
  UniChar v55;
  int64_t v56;
  uint64_t v57;
  CFIndex v58;
  uint64_t v59;
  int64_t v60;
  CFIndex v61;
  int v62;
  int v63;
  int64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  CFIndex v70;
  UniChar v71;
  int64_t v72;
  uint64_t v73;
  CFIndex v74;
  int64_t v75;
  CFIndex v76;
  unsigned int v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  int v81;
  int v82;
  int v83;
  __CFArray *v84;
  int v85;
  const os_unfair_lock *v86;
  const os_unfair_lock *v87;
  uint64_t v89;
  CFIndex v90;
  CFMutableArrayRef theArray;
  UniChar buffer[8];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  CFStringRef theString;
  UniChar *v101;
  const char *v102;
  uint64_t v103;
  CFIndex v104;
  int64_t v105;
  int64_t v106;
  unint64_t value;
  CFRange v108;
  CFRange v109;
  CFRange v110;
  CFRange v111;
  CFRange v112;
  CFRange v113;

  v1 = a1;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFString *)CPRecordGetProperty();
  if (!Property)
    goto LABEL_233;
  v4 = Property;
  Length = CFStringGetLength(Property);
  if (Length < 1)
    goto LABEL_233;
  v6 = Length;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  *(_OWORD *)buffer = 0u;
  v93 = 0u;
  theString = v4;
  v103 = 0;
  v104 = Length;
  CharactersPtr = CFStringGetCharactersPtr(v4);
  CStringPtr = 0;
  v101 = (UniChar *)CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v4, 0x600u);
  v9 = 0;
  v10 = 0;
  LODWORD(v11) = 0;
  v12 = 0;
  v105 = 0;
  v106 = 0;
  v102 = CStringPtr;
  v90 = v6;
  v89 = v1;
  do
  {
    if ((v11 & 0x80000000) != 0 || (v13 = v104, v104 <= v9))
    {
      v16 = 0;
      goto LABEL_17;
    }
    v14 = v101;
    if (v101)
    {
      v15 = v103 + v9;
    }
    else
    {
      if (v102)
      {
        v16 = v102[v103 + v9];
        goto LABEL_23;
      }
      if (v106 <= v9 || (v23 = v105, v105 > v9))
      {
        v24 = v9 - 4;
        if (v11 < 4)
          v24 = 0;
        if (v24 + 64 < v104)
          v13 = v24 + 64;
        v105 = v24;
        v106 = v13;
        v109.location = v103 + v24;
        v109.length = v13 - v24;
        CFStringGetCharacters(theString, v109, buffer);
        v23 = v105;
      }
      v15 = v9 - v23;
      v14 = buffer;
    }
    v16 = v14[v15];
LABEL_23:
    if (v16 != 61)
      goto LABEL_17;
    if ((_DWORD)v11 - v12 != 1 && (int)v11 - v12 < 3)
      v10 = 0;
    v18 = (v11 + 1);
    if (v6 <= v18)
    {
      v16 = 61;
      LODWORD(v11) = v11 + 1;
      goto LABEL_60;
    }
    v11 = (v11 + 1);
    while (1)
    {
      v19 = v104;
      if (v104 > v11)
        break;
      v16 = 0;
LABEL_48:
      if (v6 <= ++v11)
        goto LABEL_60;
    }
    if (v101)
    {
      v16 = v101[v11 + v103];
    }
    else if (v102)
    {
      v16 = v102[v103 + v11];
    }
    else
    {
      v20 = v105;
      if (v106 <= v11 || v105 > v11)
      {
        v22 = v11 - 4;
        if ((v11 & 0xFFFFFFFC) == 0)
          v22 = 0;
        if (v22 + 64 < v104)
          v19 = v22 + 64;
        v105 = v22;
        v106 = v19;
        v108.location = v103 + v22;
        v108.length = v19 - v22;
        CFStringGetCharacters(theString, v108, buffer);
        v20 = v105;
      }
      v16 = buffer[v11 - v20];
    }
    if (v16 != 59)
      goto LABEL_48;
    v16 = 59;
LABEL_60:
    if (v10 > 0x52u)
    {
      if (v10 != 83 && v10 != 89 && v10 != 87)
        goto LABEL_232;
LABEL_165:
      if ((int)v11 - (int)v18 < 1)
      {
        Mutable = 0;
        if (v1)
          goto LABEL_226;
      }
      else
      {
        v62 = 0;
        v63 = 0;
        Mutable = 0;
        v64 = v18 + (int)v11 - (int)v18;
        while (2)
        {
          theArray = Mutable;
          v65 = 0;
          v66 = -v18;
          v67 = v18 + 64;
          v68 = v18;
          while (1)
          {
            if ((unint64_t)v68 >= 4)
              v69 = 4;
            else
              v69 = v68;
            if (v18 < 0 || (v70 = v104, v104 <= v68))
            {
              v71 = 0;
LABEL_190:
              v77 = v71;
              v78 = 1 << v71;
              v79 = (v78 & 0x280100000000) == 0;
              if ((v78 & 0x280100000000) != 0)
                v80 = v63 | (v77 == 45);
              else
                v80 = 0;
              if (v79)
                v81 = 0;
              else
                v81 = v62;
              if (v77 <= 0x2D)
              {
                v82 = v81;
              }
              else
              {
                v80 = 0;
                v82 = 0;
              }
              if ((v65 & 1) != 0)
                v63 = 0;
              else
                v63 = v80;
              if ((v65 & 1) != 0)
                v62 = 0;
              else
                v62 = v82;
              Mutable = theArray;
              goto LABEL_212;
            }
            if (v101)
            {
              v71 = v101[v68 + v103];
            }
            else if (v102)
            {
              v71 = v102[v103 + v68];
            }
            else
            {
              if (v106 <= v68 || (v72 = v105, v105 > v68))
              {
                v73 = v69 + v66;
                v74 = v67 - v69;
                v75 = v68 - v69;
                v76 = v75 + 64;
                if (v75 + 64 >= v104)
                  v76 = v104;
                v105 = v75;
                v106 = v76;
                if (v104 >= v74)
                  v70 = v74;
                v113.length = v70 + v73;
                v113.location = v75 + v103;
                CFStringGetCharacters(theString, v113, buffer);
                v72 = v105;
              }
              v71 = buffer[v68 - v72];
            }
            if (v71 == 44 && (v65 & 1) != 0)
              break;
            if ((unsigned __int16)(v71 - 48) >= 0xAu)
              goto LABEL_190;
            v62 = v71 + 10 * v62 - 48;
            ++v68;
            --v66;
            ++v67;
            v65 = 1;
            if (v68 >= v64)
            {
              if ((v63 & 1) != 0)
                v85 = -v62;
              else
                v85 = v62;
              Mutable = theArray;
              if (!theArray)
                Mutable = CFArrayCreateMutable(0, 0, 0);
              CFArrayAppendValue(Mutable, (const void *)v85);
              v1 = v89;
              goto LABEL_220;
            }
          }
          if ((v63 & 1) != 0)
            v83 = -v62;
          else
            v83 = v62;
          v84 = theArray;
          if (!theArray)
            v84 = CFArrayCreateMutable(0, 0, 0);
          CFArrayAppendValue(v84, (const void *)v83);
          v63 = 0;
          v62 = 0;
          Mutable = v84;
LABEL_212:
          v18 = v68 + 1;
          if (v68 + 1 < v64)
            continue;
          break;
        }
        v1 = v89;
LABEL_220:
        v6 = v90;
        if (!v1)
          goto LABEL_230;
LABEL_226:
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v86 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v86)
              os_unfair_lock_assert_owner(v86 + 20);
          }
        }
      }
LABEL_230:
      CPRecordInitializeProperty();
      if (Mutable)
        CFRelease(Mutable);
      goto LABEL_232;
    }
    if (v10 == 68)
    {
      value = 0xFFFFFFFF00000000;
      if ((int)v11 - (int)v18 < 1)
      {
        Mutable = 0;
LABEL_225:
        v1 = v89;
        if (!v89)
          goto LABEL_230;
        goto LABEL_226;
      }
      Mutable = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = v18 + (int)v11 - (int)v18;
      v30 = (int)v18 - (uint64_t)(int)v11 - v18;
      v31 = v29;
      while (2)
      {
        if (v18 < 0 || (v32 = v104, v104 <= v18))
        {
          v35 = 0;
        }
        else
        {
          v33 = v101;
          if (v101)
          {
            v34 = v103 + v18;
            goto LABEL_75;
          }
          if (v102)
          {
            v35 = v102[v103 + v18];
          }
          else
          {
            if (v106 <= v18 || (v42 = v105, v105 > v18))
            {
              v43 = v18 - 4;
              if ((unint64_t)v18 < 4)
                v43 = 0;
              if (v43 + 64 < v104)
                v32 = v43 + 64;
              v105 = v43;
              v106 = v32;
              v110.location = v103 + v43;
              v110.length = v32 - v43;
              v44 = v26;
              CFStringGetCharacters(theString, v110, buffer);
              v26 = v44;
              v29 = v31;
              v42 = v105;
            }
            v34 = v18 - v42;
            v33 = buffer;
LABEL_75:
            v35 = v33[v34];
          }
          if ((unsigned __int16)(v35 - 48) <= 9u)
          {
            v26 = 10 * (_DWORD)v26 + v35 - 48;
            v27 = 1;
            goto LABEL_163;
          }
        }
        if ((v27 & 1) == 0 && v35 <= 0x2Du && ((1 << v35) & 0x280100000000) != 0)
        {
          v27 = 0;
          v28 |= v35 == 45;
          goto LABEL_163;
        }
        v36 = v18 + 1;
        if (v18 < -1)
          goto LABEL_131;
        if (v36 >= v29)
          goto LABEL_131;
        v37 = v104;
        if (v104 <= v36)
          goto LABEL_131;
        v38 = v101;
        if (v101)
        {
          v39 = v103 + v36;
          goto LABEL_83;
        }
        if (v102)
        {
          v40 = v102[v103 + v36];
        }
        else
        {
          if (v106 <= v36 || (v45 = v105, v105 > v36))
          {
            v46 = v18 - 3;
            if ((unint64_t)v36 < 4)
              v46 = 0;
            if (v46 + 64 < v104)
              v37 = v46 + 64;
            v105 = v46;
            v106 = v37;
            v111.location = v103 + v46;
            v111.length = v37 - v46;
            v47 = v26;
            CFStringGetCharacters(theString, v111, buffer);
            LODWORD(v26) = v47;
            v29 = v31;
            v45 = v105;
          }
          v39 = v36 - v45;
          v38 = buffer;
LABEL_83:
          v40 = v38[v39];
        }
        if (v35 == 77 && v40 == 79)
        {
          v41 = 1;
          goto LABEL_130;
        }
        if (v35 == 84 && v40 == 85)
        {
          v41 = 2;
          goto LABEL_130;
        }
        if (v35 == 87 && v40 == 69)
        {
          v41 = 3;
          goto LABEL_130;
        }
        if (v35 == 84 && v40 == 72)
        {
          v41 = 4;
          goto LABEL_130;
        }
        if (v35 == 70 && v40 == 82)
        {
          v41 = 5;
          goto LABEL_130;
        }
        if (v35 == 83 && v40 == 65)
        {
          v41 = 6;
          goto LABEL_130;
        }
        if (v35 == 83 && v40 == 85)
        {
          v41 = 0;
LABEL_130:
          HIDWORD(value) = v41;
LABEL_132:
          if ((v28 & 1) != 0)
            v48 = -(int)v26;
          else
            v48 = v26;
          LODWORD(value) = v48;
          if (!Mutable)
            Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0D0C4A8]);
          CFArrayAppendValue(Mutable, &value);
          v29 = v31;
        }
        else
        {
LABEL_131:
          if (HIDWORD(value) != -1)
            goto LABEL_132;
        }
        if (v36 < v29)
        {
          v49 = Mutable;
          v50 = ~v18;
          v51 = v18 + 65;
          while (1)
          {
            v52 = v18 + 1;
            v53 = (unint64_t)v36 >= 4 ? 4 : v36;
            if ((v52 & 0x8000000000000000) == 0)
            {
              v54 = v104;
              if (v104 > v52)
              {
                if (v101)
                {
                  v55 = v101[v18 + 1 + v103];
                }
                else if (v102)
                {
                  v55 = v102[v103 + 1 + v18];
                }
                else
                {
                  if (v106 <= v52 || (v56 = v105, v105 > v52))
                  {
                    v57 = v53 + v50;
                    v58 = v51 - v53;
                    v59 = v18 - v53;
                    v60 = v59 + 1;
                    v61 = v59 + 65;
                    if (v61 >= v104)
                      v61 = v104;
                    v105 = v60;
                    v106 = v61;
                    if (v104 >= v58)
                      v54 = v58;
                    v112.length = v54 + v57;
                    v112.location = v60 + v103;
                    CFStringGetCharacters(theString, v112, buffer);
                    v29 = v31;
                    v56 = v105;
                  }
                  v55 = buffer[v18 + 1 - v56];
                }
                if (v55 == 44)
                  break;
              }
            }
            ++v36;
            --v50;
            ++v51;
            ++v18;
            if (v30 + v52 == -1)
            {
              v36 = v29;
              goto LABEL_161;
            }
          }
          v36 = v18 + 1;
LABEL_161:
          Mutable = v49;
        }
        v28 = 0;
        v27 = 0;
        v26 = 0;
        value = 0xFFFFFFFF00000000;
        v18 = v36;
        v6 = v90;
LABEL_163:
        if (++v18 >= v29)
          goto LABEL_225;
        continue;
      }
    }
    if (v10 == 77 || v10 == 79)
      goto LABEL_165;
LABEL_232:
    v10 = 0;
    v12 = v11 + 1;
LABEL_17:
    LODWORD(v11) = v11 + 1;
    if ((((_DWORD)v11 - v12) | 2) == 3)
      v10 = v16;
    v9 = (int)v11;
  }
  while (v6 > (int)v11);
LABEL_233:
  if (v1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v87 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v87)
          os_unfair_lock_assert_owner(v87 + 20);
      }
    }
  }
  return CPRecordInitializeProperty();
}

uint64_t _CalRecurrenceSpecifierDerivedLoad(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalRecurrenceLoadStoreId(uint64_t a1)
{
  uint64_t result;
  const os_unfair_lock *Context;

  result = _CalRecurrenceGetOwner(a1, 1);
  if (result)
  {
    _CalCalendarItemGetStoreId(result);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return CPRecordInitializeProperty();
  }
  return result;
}

uint64_t _CalRecurrenceLoadCalendarId(uint64_t a1)
{
  uint64_t result;
  const os_unfair_lock *Context;

  result = _CalRecurrenceGetOwner(a1, 1);
  if (result)
  {
    result = (uint64_t)_CalCalendarItemGetCalendar(result);
    if (result)
    {
      CPRecordGetID();
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      return CPRecordInitializeProperty();
    }
  }
  return result;
}

void _CalRecurrenceAppendIndexListForSubproperty(__CFString *a1, CFArrayRef theArray, int a3)
{
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  UniChar chars;

  Count = CFArrayGetCount(theArray);
  chars = _CalRecurrenceSubpropertyNameForProperty___SubpropertyNames[a3 - 11];
  if (CFStringGetLength(a1) >= 1)
    CFStringAppendCString(a1, ";", 0x8000100u);
  CFStringAppendCharacters(a1, &chars, 1);
  CFStringAppendCString(a1, "=", 0x8000100u);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (i)
        CFStringAppendFormat(a1, 0, CFSTR(",%d"), ValueAtIndex);
      else
        CFStringAppendFormat(a1, 0, CFSTR("%d"), ValueAtIndex);
    }
  }
}

uint64_t ICSStatusFromCalCalendarItemStatus(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 5)
    return dword_1A5DBAABC[a1];
  v3 = CDBiCalendarConversionHandle;
  result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalEventStatus: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalCalendarItemStatusFromICSStatus(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  int v5;
  int v6;
  uint64_t v7;

  v1 = a1;
  v7 = *MEMORY[0x1E0C80C00];
  switch((int)a1)
  {
    case 0:
      return v1;
    case 1:
      v1 = 2;
      break;
    case 2:
      v1 = 1;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      v2 = CDBiCalendarConversionHandle;
      if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        goto LABEL_5;
      v5 = 67109120;
      v6 = v1;
      v3 = "Encountered an unhandled ICSStatus: %d";
      goto LABEL_4;
    case 8:
      v1 = 3;
      break;
    default:
      v2 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        v5 = 67109120;
        v6 = v1;
        v3 = "Encountered an unknown ICSStatus: %d";
LABEL_4:
        _os_log_impl(&dword_1A5CCB000, v2, OS_LOG_TYPE_DEBUG, v3, (uint8_t *)&v5, 8u);
      }
LABEL_5:
      v1 = 0;
      break;
  }
  return v1;
}

uint64_t ICSCalendarServerAccessFromCalEventPrivacyLevel(unsigned int a1)
{
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 4)
    return dword_1A5DBABC0[a1];
  v3 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalEventPrivacyLevel: %d", (uint8_t *)v4, 8u);
  }
  return 1;
}

uint64_t CalEventPrivacyLevelFromICSCalendarServerAccess(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 5)
    return dword_1A5DBAAD0[a1];
  v3 = CDBiCalendarConversionHandle;
  result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSCalendarServerAccess: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t ICSActionFromCalAlarmType(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 5)
    return dword_1A5DBAAE4[a1];
  v3 = CDBiCalendarConversionHandle;
  result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalAlarmType: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalAlarmTypeFromICSAction(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 5)
    return dword_1A5DBAAF8[a1];
  v3 = CDBiCalendarConversionHandle;
  result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSAction: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalAlarmProximityFromICSProximityString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0DDBC00]) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0DDBC10]) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0DDBC08]) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0DDBC18]))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id ICSProximityStringFromCalAlarmProximity(int a1)
{
  if ((a1 - 1) > 3)
    return 0;
  else
    return **((id **)&unk_1E4F84C68 + a1 - 1);
}

uint64_t ICSFrequencyFromCalRecurrenceFrequency(int a1)
{
  uint64_t v1;
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = (a1 - 1);
  if (v1 < 4)
    return v1 + 4;
  v4 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    v5[0] = 67109120;
    v5[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_DEBUG, "Encountered an unknown calendar frequency: %d", (uint8_t *)v5, 8u);
  }
  return 4;
}

uint64_t CalRecurrenceFrequencyFromICSFrequency(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t result;
  NSObject *v4;
  const char *v5;
  int v6;
  int v7;
  uint64_t v8;

  v1 = a1;
  v8 = *MEMORY[0x1E0C80C00];
  v2 = a1 - 1;
  result = 1;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
      v4 = CDBiCalendarConversionHandle;
      if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        goto LABEL_7;
      v6 = 67109120;
      v7 = v1;
      v5 = "Encountered an ICS frequency that the calendar database doesn't handle: %d. Defaulting to daily";
      goto LABEL_6;
    case 3:
      return result;
    case 4:
      result = 2;
      break;
    case 5:
      result = 3;
      break;
    case 6:
      result = 4;
      break;
    default:
      v4 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        v6 = 67109120;
        v7 = v1;
        v5 = "Encountered an unknown ICS frequency: %d";
LABEL_6:
        _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_DEBUG, v5, (uint8_t *)&v6, 8u);
      }
LABEL_7:
      result = 1;
      break;
  }
  return result;
}

uint64_t ICSWeekdayFromCalDayOfWeek(unsigned int a1)
{
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 7)
    return a1 + 1;
  v3 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalDayOfWeek: %d", (uint8_t *)v4, 8u);
  }
  return 1;
}

unint64_t CalDayOfWeekFromICSWeekday(uint64_t a1)
{
  int v1;
  unint64_t result;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v1 = a1;
  v5 = *MEMORY[0x1E0C80C00];
  result = a1 - 1;
  if (result >= 7)
  {
    v3 = CDBiCalendarConversionHandle;
    result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      v4[0] = 67109120;
      v4[1] = v1;
      _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSWeekday: %d", (uint8_t *)v4, 8u);
      return 0;
    }
  }
  return result;
}

uint64_t ICSMonthFromCalMonthOfYear(uint64_t result)
{
  int v1;
  NSObject *v2;
  _DWORD v3[2];
  uint64_t v4;

  v1 = result;
  v4 = *MEMORY[0x1E0C80C00];
  if ((int)result > 63)
  {
    if ((int)result > 511)
    {
      switch((_DWORD)result)
      {
        case 0x200:
          return 10;
        case 0x400:
          return 11;
        case 0x800:
          return 12;
      }
    }
    else
    {
      switch((_DWORD)result)
      {
        case 0x40:
          return 7;
        case 0x80:
          return 8;
        case 0x100:
          return 9;
      }
    }
LABEL_16:
    v2 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      v3[0] = 67109120;
      v3[1] = v1;
      _os_log_impl(&dword_1A5CCB000, v2, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalMonthOfYear: %d", (uint8_t *)v3, 8u);
    }
    return 1;
  }
  else
  {
    result = result;
    switch((int)result)
    {
      case 1:
        return result;
      case 2:
        return 2;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_16;
      case 4:
        return 3;
      case 8:
        return 4;
      default:
        if ((_DWORD)result == 16)
        {
          result = 5;
        }
        else
        {
          if ((_DWORD)result != 32)
            goto LABEL_16;
          result = 6;
        }
        break;
    }
  }
  return result;
}

uint64_t CalMonthOfYearFromICSMonth(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a1 - 1) < 0xC)
    return dword_1A5DBAB0C[a1 - 1];
  v2 = a1;
  v3 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSMonth: %d", (uint8_t *)v4, 8u);
  }
  return 1;
}

uint64_t ICSCalendarUserFromCalAttendeeType(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 5)
    return dword_1A5DBAB3C[a1];
  v3 = CDBiCalendarConversionHandle;
  result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalAttendeeType: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalAttendeeTypeFromICSCalendarUser(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 6)
    return dword_1A5DBAB50[a1];
  v3 = CDBiCalendarConversionHandle;
  result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSCalendarUser: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t ICSRoleFromCalAttendeeRole(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 6)
    return dword_1A5DBAB68[a1];
  v3 = CDBiCalendarConversionHandle;
  result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalAttendeeRole: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalAttendeeRoleFromICSRole(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 6)
    return dword_1A5DBAB80[a1];
  v3 = CDBiCalendarConversionHandle;
  result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSRole: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t ICSParticipationStatusFromCalAttendeeStatus(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 8)
    return dword_1A5DBAB98[a1];
  v3 = CDBiCalendarConversionHandle;
  result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Encountered an unknown CalAttendeeStatus: %d", (uint8_t *)v4, 8u);
    return 0;
  }
  return result;
}

uint64_t CalAttendeeStatusFromICSParticipationStatus(int a1)
{
  uint64_t result;
  NSObject *v4;
  const char *v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = 7;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      return 0;
    case 2:
      return 1;
    case 3:
      return 2;
    case 4:
      return 3;
    case 5:
      return 4;
    case 6:
      return 5;
    case 7:
      return 6;
    case 8:
    case 9:
      v4 = CDBiCalendarConversionHandle;
      result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
      if (!(_DWORD)result)
        return result;
      v6 = 67109120;
      v7 = a1;
      v5 = "Encountered an unhandled ICSParticipationStatus: %d";
      break;
    default:
      v4 = CDBiCalendarConversionHandle;
      result = os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG);
      if (!(_DWORD)result)
        return result;
      v6 = 67109120;
      v7 = a1;
      v5 = "Encountered an unknown ICSParticipationStatus: %d";
      break;
  }
  _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_DEBUG, v5, (uint8_t *)&v6, 8u);
  return 0;
}

uint64_t ICSScheduleAgentFromCalScheduleAgent(int a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (a1 == 2)
    return 0;
  else
    return v1;
}

uint64_t CalScheduleAgentFromICSScheduleAgent(int a1)
{
  if (a1)
    return a1 == 1;
  else
    return 2;
}

void CalCalendarItemSetSummary(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 0, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemSetDescription(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecordSetPropertyIfDifferent(a1, 3, a2))
    _CalEventInvalidateDetectedConferenceURL(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarItemGetDescription(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalCalendarItemCopyDescription(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

BOOL CalCalendarItemHasPreferredLocation(uint64_t a1)
{
  _BOOL8 result;
  NSObject *v3;
  uint8_t v4[16];

  if (a1)
  {
    return CalCalendarItemHasLocation(a1) || CalCalendarItemHasClientLocation(a1);
  }
  else
  {
    v3 = CDBLogHandle;
    result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_ERROR, "NULL 'item' given.  Will not determine if there is a preferred location.", v4, 2u);
      return 0;
    }
  }
  return result;
}

BOOL CalCalendarItemHasLocation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Location;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Location = _CalCalendarItemGetLocation(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Location != 0;
}

BOOL CalCalendarItemHasClientLocation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef ClientLocation;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ClientLocation = _CalCalendarItemGetClientLocation(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ClientLocation != 0;
}

CFTypeRef CalCalendarItemCopyPreferredLocation(uint64_t a1)
{
  CFTypeRef result;
  NSObject *v3;
  uint8_t v4[16];

  if (a1)
  {
    result = CalCalendarItemCopyClientLocation(a1);
    if (!result)
      return CalCalendarItemCopyLocation(a1);
  }
  else
  {
    v3 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_ERROR, "NULL 'item' given.  Will not return a preferred location.", v4, 2u);
    }
    return 0;
  }
  return result;
}

CFTypeRef CalCalendarItemCopyClientLocation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef ClientLocation;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ClientLocation = _CalCalendarItemGetClientLocation(a1);
  v4 = ClientLocation;
  if (ClientLocation)
    CFRetain(ClientLocation);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalCalendarItemCopyLocation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Location;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Location = _CalCalendarItemGetLocation(a1);
  v4 = Location;
  if (Location)
    CFRetain(Location);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef _CalCalendarItemGetLocation(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

_QWORD *_CalCalendarItemSetLocation(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
  {
    CalRelationSetRelatedObject(result, a2);
    return (_QWORD *)_CalEventInvalidateDetectedConferenceURL(a1);
  }
  return result;
}

void CalCalendarItemSetLocation(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetLocation(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef _CalCalendarItemGetClientLocation(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

_QWORD *_CalCalendarItemSetClientLocation(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
  {
    CalRelationSetRelatedObject(result, a2);
    return (_QWORD *)_CalEventInvalidateDetectedConferenceURL(a1);
  }
  return result;
}

void CalCalendarItemSetClientLocation(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetClientLocation(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

_QWORD *_CalCalendarItemSetStartLocation(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

CFTypeRef _CalCalendarItemGetStartLocation(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

void CalCalendarItemSetStartLocation(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetStartLocation(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarItemCopyStartLocation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef StartLocation;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  StartLocation = _CalCalendarItemGetStartLocation(a1);
  v4 = StartLocation;
  if (StartLocation)
    CFRetain(StartLocation);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

_QWORD *_CalCalendarItemSetEndLocation(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

CFTypeRef _CalCalendarItemGetEndLocation(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

void CalCalendarItemSetEndLocation(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetEndLocation(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarItemCopyEndLocation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef EndLocation;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  EndLocation = _CalCalendarItemGetEndLocation(a1);
  v4 = EndLocation;
  if (EndLocation)
    CFRetain(EndLocation);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarItemCopyCreationDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetCreationDate(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 41, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyLastModifiedDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalCalendarItemSetLastModifiedDateWhileLocked(uint64_t a1, uint64_t a2)
{
  return _CalCalendarItemSetRecordProperty(a1, 19, a2);
}

void CalCalendarItemSetLastModifiedDate(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetRecordProperty(a1, 19, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyStartDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void _CalCalendarItemInvalidateAllRecurrenceRuleCachedEndDates(uint64_t a1)
{
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  uint64_t v6;
  const void *ValueAtIndex;

  v1 = _CalCalendarItemCopyRecurrences(a1);
  if (v1)
  {
    v2 = v1;
    Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      v4 = Count;
      v5 = 0;
      v6 = *MEMORY[0x1E0D0C490];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
        _CalRecurrenceSetCachedEndDate((uint64_t)ValueAtIndex, v6);
        ++v5;
      }
      while (v4 != v5);
    }
    CFRelease(v2);
  }
}

CFMutableArrayRef _CalCalendarItemCopyRecurrencesWhileLocked(uint64_t a1, int a2)
{
  if (a2)
    return _CalCalendarItemCopyRecurrences(a1);
  else
    return CalCalendarItemCopyRecurrences(a1);
}

void CalCalendarItemSetStartDate(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecordSetPropertyIfDifferent(a1, 4, a2))
    _CalCalendarItemInvalidateAllRecurrenceRuleCachedEndDates(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarItemCopyStartTimeZone(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (_CalCalendarItemIsFloating(a1))
    return 0;
  if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordGetProperty();
  return CalTimeZoneCopyCFTimeZone();
}

uint64_t CalCalendarItemCopyStartTimeZone(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t started;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  started = _CalCalendarItemCopyStartTimeZone(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return started;
}

void CalCalendarItemSetStartTimeZone(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    v5 = (const __CFString *)MEMORY[0x1A85B45C4](a2);
  else
    v5 = CFSTR("_float");
  _CalRecordSetPropertyIfDifferent(a1, 5, v5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarItemCopyEndTimeZone(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (_CalCalendarItemIsFloating(a1))
    return 0;
  if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  if (!CPRecordGetProperty())
    return 0;
  else
    return CalTimeZoneCopyCFTimeZone();
}

uint64_t CalCalendarItemCopyEndTimeZone(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyEndTimeZone(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemSetEndTimeZone(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    v5 = (const __CFString *)MEMORY[0x1A85B45C4](a2);
  else
    v5 = CFSTR("_float");
  _CalRecordSetPropertyIfDifferent(a1, 7, v5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemIsFloating(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsFloating;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsFloating = _CalCalendarItemIsFloating(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsFloating;
}

BOOL CalCalendarItemIsAllDay(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsAllDay;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsAllDay = _CalCalendarItemIsAllDay(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsAllDay;
}

BOOL _CalCalendarItemIsAllDay(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetIntegerProperty() != 0;
}

void CalCalendarItemSetAllDay(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetRecordProperty(a1, 8, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemSetAvailability(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 16, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemGetAvailability(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalCalendarItemSetPrivacyLevel(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 17, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemGetPrivacyLevel(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalCalendarItemSetPriority(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2 <= 9)
    v5 = (const __CFString *)a2;
  else
    v5 = 0;
  _CalRecordSetPropertyIfDifferent(a1, 36, v5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemGetPriority(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  unsigned __int16 IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalCalendarItemSetAction(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    v5 = CFURLGetString(a2);
  else
    v5 = 0;
  _CalRecordSetPropertyIfDifferent(a1, 42, v5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalCalendarItemCopyAction(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *v4;
  CFURLRef result;
  CFURLRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (const __CFString *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  result = 0;
  if (v4)
  {
    v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

uint64_t CalCalendarItemCopyAppLink(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarItemGetSequenceNumber(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalCalendarItemSetSequenceNumber(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 20, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

__CFArray *CalCalendarItemCopyCategories(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;
  CFMutableArrayRef v5;
  const __CFArray *v6;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeRef Category;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property && (v5 = CalToManyRelationCopyObjects(Property)) != 0)
  {
    v6 = v5;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      v9 = Count;
      for (i = 0; i != v9; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
        Category = _CalCategoryLinkGetCategory((uint64_t)ValueAtIndex);
        CFArrayAppendValue(Mutable, Category);
      }
    }
    CFRelease(v6);
  }
  else
  {
    Mutable = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Mutable;
}

void CalCalendarItemRemoveAllCategories(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationRemoveAllObjects(Property);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemAddCategory(const void *a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddCategory(a1, a2, 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void _CalCalendarItemAddCategory(const void *a1, CFTypeRef a2, int a3)
{
  int EntityType;
  const os_unfair_lock *Context;
  uint64_t Property;
  _QWORD *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex v14;
  const void *ValueAtIndex;
  uint64_t DatabaseForRecord;
  void *CategoryLinkWithOwnerAndCategory;
  const __CFArray *v18;

  EntityType = _CalCategoryGetEntityType((uint64_t)a2);
  if (EntityType == _CalEntityGetType(a1))
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    Property = CPRecordGetProperty();
    if (Property)
    {
      v9 = (_QWORD *)Property;
      v10 = CalToManyRelationCopyObjects(Property);
      if (v10)
      {
        v11 = v10;
        Count = CFArrayGetCount(v10);
        if (Count < 1)
        {
LABEL_14:
          CFRelease(v11);
          DatabaseForRecord = CalGetDatabaseForRecord();
          CategoryLinkWithOwnerAndCategory = (void *)_CalDatabaseCreateCategoryLinkWithOwnerAndCategory(DatabaseForRecord, a1, a2);
          _CalCategoryLinkSetGroup((uint64_t)CategoryLinkWithOwnerAndCategory);
          CalToManyRelationAddObject(v9, CategoryLinkWithOwnerAndCategory);
          v18 = (const __CFArray *)CategoryLinkWithOwnerAndCategory;
        }
        else
        {
          v13 = Count;
          v14 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v11, v14);
            if (_CalCategoryLinkGetCategory((uint64_t)ValueAtIndex) == a2
              && _CalRecurrenceGetWeekStartRaw((uint64_t)ValueAtIndex) == a3)
            {
              break;
            }
            if (v13 == ++v14)
              goto LABEL_14;
          }
          v18 = v11;
        }
        CFRelease(v18);
      }
    }
  }
}

void _CalCalendarItemRemoveCategory(const void *a1, CFTypeRef a2)
{
  int EntityType;
  const os_unfair_lock *Context;
  uint64_t Property;
  _QWORD *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  void *ValueAtIndex;

  EntityType = _CalCategoryGetEntityType((uint64_t)a2);
  if (EntityType == _CalEntityGetType(a1))
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    Property = CPRecordGetProperty();
    if (Property)
    {
      v7 = (_QWORD *)Property;
      v8 = CalToManyRelationCopyObjects(Property);
      if (v8)
      {
        v9 = v8;
        Count = CFArrayGetCount(v8);
        if (Count >= 1)
        {
          v11 = Count;
          v12 = 0;
          while (1)
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(v9, v12);
            if (_CalCategoryLinkGetCategory((uint64_t)ValueAtIndex) == a2)
              break;
            if (v11 == ++v12)
              goto LABEL_16;
          }
          CalToManyRelationRemoveObject(v7, ValueAtIndex);
        }
LABEL_16:
        CFRelease(v9);
      }
    }
  }
}

void CalCalendarItemRemoveCategory(const void *a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveCategory(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemAddGroupedCategory(const void *a1, const void *a2, int a3)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddCategory(a1, a2, a3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

id CalCalendarItemCopyGroupedCategories(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;
  CFMutableArrayRef v5;
  id v6;
  __CFArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  CFTypeRef Category;
  CFTypeRef v14;
  void *v15;
  id v16;
  __CFArray *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    v5 = CalToManyRelationCopyObjects(Property);
  else
    v5 = 0;
  if (-[__CFArray count](v5, "count"))
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v18 = v5;
    v7 = v5;
    v8 = -[__CFArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v20 != v10)
            objc_enumerationMutation(v7);
          v12 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i);
          Category = _CalCategoryLinkGetCategory(v12);
          if (Category)
          {
            v14 = Category;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", _CalRecurrenceGetWeekStartRaw(v12));
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "objectForKeyedSubscript:", v15);
            v16 = (id)objc_claimAutoreleasedReturnValue();
            if (!v16)
            {
              v16 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              objc_msgSend(v6, "setObject:forKeyedSubscript:", v16, v15);
            }
            objc_msgSend(v16, "addObject:", v14, v18);

          }
        }
        v9 = -[__CFArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v9);
    }

    v5 = v18;
  }
  else
  {
    v6 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);

  return v6;
}

uint64_t _CalCalendarItemCopyURL(uint64_t a1)
{
  const os_unfair_lock *Context;
  void *v2;
  uint64_t v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v2 = (void *)CPRecordCopyProperty();
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "_lp_URLWithUserTypedString:relativeToURL:", v2, 0);
    v3 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t CalCalendarItemCopyURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyURL(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemSetURL(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  CFStringRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    v5 = CFURLGetString(a2);
  else
    v5 = 0;
  if (_CalCalendarItemSetRecordProperty(a1, 18, v5))
    _CalEventInvalidateDetectedConferenceURL(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemSetStatus(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalCalendarItemGetStatus(a1) != a2)
    _CalCalendarItemSetRecordProperty(a1, 14, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemStillExists()
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 v1;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v1 = _CalRecordStillExists();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v1;
}

void CalCalendarItemSetSuppressNotificationForChanges(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetRecordProperty(a1, 124, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemSuppressNotificationForChanges(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  int Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

_QWORD *_CalCalendarItemSetOrganizer(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

void CalCalendarItemSetOrganizer(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetOrganizer(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarItemCopyOrganizer(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Organizer;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Organizer = _CalCalendarItemGetOrganizer(a1);
  v4 = Organizer;
  if (Organizer)
    CFRetain(Organizer);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarItemIsSelfOrganizedWithScheduleAgentClient(uint64_t a1, void *a2)
{
  id v3;
  CFTypeRef v4;
  uint64_t v5;
  int ScheduleAgent;
  void *v7;
  void *v8;

  v3 = a2;
  v4 = CalCalendarItemCopyOrganizer(a1);
  v5 = (uint64_t)v4;
  if (v4)
  {
    ScheduleAgent = CalParticipantGetScheduleAgent((uint64_t)v4);
    CFRelease((CFTypeRef)v5);
    if (ScheduleAgent == 1)
    {
      if (v3)
      {
        v7 = (void *)CalOrganizerCopyAddress(v5);
        objc_msgSend(v7, "absoluteString");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = objc_msgSend(v3, "addressIsAccountOwner:", v8);

      }
      else
      {
        v5 = 1;
      }
    }
    else
    {
      v5 = 0;
    }
  }

  return v5;
}

void CalCalendarItemSetupOrganizerAndSelfAttendeeForImportedItem(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  CFMutableArrayRef v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  CFTypeRef v27;
  const void *v28;
  void *v29;
  unsigned int v30;
  void *v31;
  double ProposedStartDate;
  uint64_t v33;
  __CFArray *obj;
  void *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (CalCalendarGetSharingStatus(a2) != 2)
  {
    v19 = v5;
    if (!a1)
    {
      v6 = 0;
      goto LABEL_47;
    }
    v6 = (void *)CalCalendarItemCopySelfAttendee(a1);
    if (!v6)
    {
      v20 = CalCalendarItemCopyAttendees(a1);
      if (!-[__CFArray count](v20, "count"))
      {
        v6 = 0;
        goto LABEL_46;
      }
      v21 = 0;
      while (1)
      {
        -[__CFArray objectAtIndexedSubscript:](v20, "objectAtIndexedSubscript:", v21);
        v6 = (void *)objc_claimAutoreleasedReturnValue();

        v22 = (void *)CalAttendeeCopyAddress(v6);
        if (objc_msgSend(v19, "addressURLIsAccountOwner:", v22))
        {
          CFRetain(v6);
          goto LABEL_45;
        }
        v23 = (void *)CalAttendeeCopyEmailAddress(v6);
        if (v23)
        {
          v24 = (void *)MEMORY[0x1E0C99E98];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("mailto:%@"), v23);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "URLWithString:", v25);
          v26 = objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v19, "addressURLIsAccountOwner:", v26))
          {
            CFRetain(v6);

            v22 = (void *)v26;
LABEL_45:

LABEL_46:
            break;
          }
          v22 = (void *)v26;
        }

        if (++v21 >= (unint64_t)-[__CFArray count](v20, "count"))
        {
          v6 = 0;
          goto LABEL_46;
        }
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  if (!a1)
  {
    v6 = 0;
    goto LABEL_48;
  }
  v6 = (void *)CalCalendarItemCopySelfAttendee(a1);
  if (v6)
    goto LABEL_48;
  v35 = (void *)CalCalendarCopySharedOwnerAddresses(a2);
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  obj = CalCalendarItemCopyAttendees(a1);
  v7 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
  if (!v7)
  {
    v6 = 0;
    goto LABEL_41;
  }
  v8 = v7;
  v33 = a1;
  v36 = *(_QWORD *)v42;
  while (2)
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v42 != v36)
        objc_enumerationMutation(obj);
      v6 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
      v10 = (void *)CalAttendeeCopyEmailAddress(v6);
      if (v10)
      {
        v11 = (void *)MEMORY[0x1E0C99E98];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("mailto:%@"), v10);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "URLWithString:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v13)
          goto LABEL_23;
      }
      else
      {
        v13 = (void *)CalAttendeeCopyAddress(v6);
        if (!v13)
          goto LABEL_23;
      }
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v14 = v35;
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v38;
LABEL_15:
        v18 = 0;
        while (1)
        {
          if (*(_QWORD *)v38 != v17)
            objc_enumerationMutation(v14);
          if ((objc_msgSend(MEMORY[0x1E0D09C10], "compareAddressURL:localString:", v13, *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * v18)) & 1) != 0)break;
          if (v16 == ++v18)
          {
            v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
            if (v16)
              goto LABEL_15;
            goto LABEL_21;
          }
        }
        CFRetain(v6);

        if (!v6)
          goto LABEL_23;

        goto LABEL_39;
      }
LABEL_21:

LABEL_23:
    }
    v8 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
    if (v8)
      continue;
    break;
  }
  v6 = 0;
LABEL_39:
  a1 = v33;
LABEL_41:

LABEL_48:
  v27 = CalCalendarItemCopyOrganizer(a1);
  if (v27)
  {
    v28 = v27;
    v29 = (void *)CalOrganizerCopyAddress(v27);
    if ((objc_msgSend(v5, "addressURLIsAccountOwner:", v29) & 1) != 0)
    {
      v30 = 1;
    }
    else
    {
      v31 = (void *)CalOrganizerCopyEmailAddress(v28);
      v30 = objc_msgSend(v5, "addressIsAccountOwner:", v31);

    }
    CalOrganizerSetIsSelf(v28, v30);
    CalCalendarItemSetOrganizer(a1, v28);
    CFRelease(v28);

  }
  CalCalendarItemSetSelfAttendee(a1, v6);
  ProposedStartDate = CalAttendeeGetProposedStartDate((uint64_t)v6);
  CalEventSetProposedStartDate(a1, ProposedStartDate);
  if (v6)
    CFRelease(v6);

}

void CalCalendarItemSetSelfAttendee(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetSelfAttendee(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemSetHidden(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 31, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemIsHidden(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

uint64_t _CalCalendarItemSetIsPhantomMaster(uint64_t a1, unsigned int a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 53, (const __CFString *)a2);
}

void CalCalendarItemSetIsPhantomMaster(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 53, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalCalendarItemIsPhantomMaster(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL CalCalendarItemIsPhantomMaster(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsPhantomMaster;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsPhantomMaster = _CalCalendarItemIsPhantomMaster(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsPhantomMaster;
}

uint64_t _CalCalendarItemSetCalendarScale(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 55, a2);
}

uint64_t _CalCalendarItemCopyCalendarScale(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalCalendarItemSetCalendarScale(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 55, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCalendarScale(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyCalendarScale(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemSetCreatedByDisplayName(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 107, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCreatedByDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetCreatedByAddress(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    v5 = CFURLGetString(a2);
  else
    v5 = 0;
  _CalRecordSetPropertyIfDifferent(a1, 108, v5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalCalendarItemCopyCreatedByAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *Property;
  CFURLRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFString *)CPRecordGetProperty();
  if (Property)
    v5 = CFURLCreateWithString(0, Property, 0);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalCalendarItemSetCreatedByFirstName(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 111, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCreatedByFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetCreatedByLastName(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 112, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCreatedByLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetCreatedDate(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 47, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCreatedDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetCreatedTimezone(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v5 = (const __CFString *)MEMORY[0x1A85B45C4](a2);
  _CalRecordSetPropertyIfDifferent(a1, 48, v5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyCreatedTimezone(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetProperty();
  v4 = CalTimeZoneCopyCFTimeZone();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetModifiedByDisplayName(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 109, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyModifiedByDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetModifiedByAddress(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    v5 = CFURLGetString(a2);
  else
    v5 = 0;
  _CalRecordSetPropertyIfDifferent(a1, 110, v5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalCalendarItemCopyModifiedByAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *v4;
  const __CFString *v5;
  CFURLRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (const __CFString *)CPRecordCopyProperty();
  if (v4)
  {
    v5 = v4;
    v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

void CalCalendarItemSetModifiedByFirstName(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 113, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyModifiedByFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetModifiedByLastName(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 114, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyModifiedByLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetModifiedDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyModifiedDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetModifiedTimezone(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  MEMORY[0x1A85B45C4](a2);
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyModifiedTimezone(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetProperty();
  v4 = CalTimeZoneCopyCFTimeZone();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalCalendarItemClearExternalProperties(uint64_t a1)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v3;
  const os_unfair_lock *v4;

  _CalRecordSetPropertyIfDifferent(a1, 24, 0);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3)
          os_unfair_lock_assert_owner(v3 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalCalendarItemClearExternalProperties(const void *a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFArray *v11;
  const __CFArray *v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex j;
  const void *v16;
  os_unfair_lock_s *v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFIndex v20;
  CFIndex v21;
  CFIndex k;
  const void *v23;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemClearExternalProperties((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  if (a2)
  {
    v5 = CalCalendarItemCopyAlarms((uint64_t)a1);
    if (v5)
    {
      v6 = v5;
      Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        v8 = Count;
        for (i = 0; i != v8; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
          CalAlarmClearExternalProperties((uint64_t)ValueAtIndex);
        }
      }
      CFRelease(v6);
    }
    v11 = CalCalendarItemCopyRecurrences((uint64_t)a1);
    if (v11)
    {
      v12 = v11;
      v13 = CFArrayGetCount(v11);
      if (v13 >= 1)
      {
        v14 = v13;
        for (j = 0; j != v14; ++j)
        {
          v16 = CFArrayGetValueAtIndex(v12, j);
          CalRecurrenceClearExternalProperties((uint64_t)v16);
        }
      }
      CFRelease(v12);
    }
    v17 = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(v17);
    if (_CalEntityGetType(a1) == 2)
    {
      v18 = _CalEventCopyDetachedEvents((uint64_t)a1);
      if (v18)
      {
        v19 = v18;
        v20 = CFArrayGetCount(v18);
        if (v20 >= 1)
        {
          v21 = v20;
          for (k = 0; k != v21; ++k)
          {
            v23 = CFArrayGetValueAtIndex(v19, k);
            _CalCalendarItemClearExternalProperties((uint64_t)v23);
          }
        }
        CFRelease(v19);
      }
    }
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v17);
    os_unfair_lock_unlock(v17);
  }
}

CFMutableArrayRef CalCalendarItemCopyAlarms(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyAlarms(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemSetExternalID(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 24, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarItemCopyExternalID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarItemCopyExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyExternalID(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemSetExternalScheduleID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyExternalScheduleID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetExternalModificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyExternalModificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetExternalRepresentation(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 28, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarItemCopyUniqueIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetUniqueIdentifier(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetRecordProperty(a1, 26, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef _CalCalendarItemCopyExceptionDates(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

const __CFArray *_CalCalendarItemAddExceptionDate(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

_QWORD *_CalCalendarItemRemoveExceptionDate(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

void _CalCalendarItemRemoveAllExceptionDates(uint64_t a1)
{
  const os_unfair_lock *Context;
  _QWORD *Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationRemoveAllObjects(Property);
}

void _CalCalendarItemAddExceptionDateWithCalDate(uint64_t a1, CFAbsoluteTime a2)
{
  CFDateRef v3;

  v3 = CFDateCreate(0, a2);
  _CalCalendarItemAddExceptionDateWithCFDate(a1, (uint64_t)v3);
  CFRelease(v3);
}

void _CalCalendarItemAddExceptionDateWithCFDate(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *ExceptionDateWithDateAndOrder;

  v4 = (const void *)CalCopyDatabaseForEntity();
  ExceptionDateWithDateAndOrder = (void *)_CalDatabaseCreateExceptionDateWithDateAndOrder(v4, a2, 0);
  _CalCalendarItemAddExceptionDate(a1, ExceptionDateWithDateAndOrder);
  CFRelease(ExceptionDateWithDateAndOrder);
  CFRelease(v4);
}

void _CalCalendarItemRemoveExceptionDateWithCalDate(uint64_t a1, double a2)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  void *ValueAtIndex;

  v4 = _CalCalendarItemCopyExceptionDates(a1);
  if (v4)
  {
    v5 = v4;
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v5, i);
        if (_CalExceptionDateGetDate((uint64_t)ValueAtIndex))
        {
          if (vabdd_f64(MEMORY[0x1A85B424C](), a2) < 2.22044605e-16)
            _CalCalendarItemRemoveExceptionDate(a1, ValueAtIndex);
        }
      }
    }
    CFRelease(v5);
  }
}

__CFArray *_CalCalendarItemCopyExceptionDatesForRecurrences(uint64_t a1)
{
  __CFArray *Mutable;
  const __CFArray *v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const void *ValueAtIndex;
  const void *Date;
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  double v15;
  const void *v16;
  double OriginalStartDate;
  CFDateRef v18;
  double ProposedStartDate;
  CFDateRef v20;
  CFRange v22;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = _CalCalendarItemCopyExceptionDates(a1);
  if (v3)
  {
    v4 = v3;
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v6 = Count;
      for (i = 0; i != v6; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
        Date = (const void *)_CalExceptionDateGetDate((uint64_t)ValueAtIndex);
        if (Date)
          CFArrayAppendValue(Mutable, Date);
      }
    }
    CFRelease(v4);
  }
  v10 = _CalEventCopyDetachedEvents(a1);
  if (v10)
  {
    v11 = v10;
    v12 = CFArrayGetCount(v10);
    if (v12 >= 1)
    {
      v13 = v12;
      v14 = 0;
      v15 = *MEMORY[0x1E0D0C490];
      do
      {
        v16 = CFArrayGetValueAtIndex(v11, v14);
        OriginalStartDate = _CalEventGetOriginalStartDate((uint64_t)v16);
        v18 = CFDateCreate(0, OriginalStartDate);
        CFArrayAppendValue(Mutable, v18);
        CFRelease(v18);
        ProposedStartDate = _CalEventGetProposedStartDate((uint64_t)v16);
        if (ProposedStartDate != v15)
        {
          v20 = CFDateCreate(0, ProposedStartDate);
          CFArrayAppendValue(Mutable, v20);
          CFRelease(v20);
        }
        ++v14;
      }
      while (v13 != v14);
    }
    CFRelease(v11);
  }
  v22.length = CFArrayGetCount(Mutable);
  v22.location = 0;
  CFArraySortValues(Mutable, v22, (CFComparatorFunction)MEMORY[0x1E0C98440], 0);
  return Mutable;
}

__CFArray *CalCalendarItemCopyExceptionDatesForRecurrences(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  __CFArray *v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyExceptionDatesForRecurrences(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFMutableArrayRef CalCalendarItemCopyExceptionDates(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyExceptionDates(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemAddExceptionDate(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddExceptionDate(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveExceptionDate(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveExceptionDate(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void _CalCalendarItemRemoveExceptionDatesBeyondDate(uint64_t a1, const __CFDate *a2)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  void *ValueAtIndex;
  const __CFDate *Date;

  if (a2)
  {
    v4 = _CalCalendarItemCopyExceptionDates(a1);
    if (v4)
    {
      v5 = v4;
      Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        v7 = Count;
        for (i = 0; i != v7; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v5, i);
          Date = (const __CFDate *)_CalExceptionDateGetDate((uint64_t)ValueAtIndex);
          if (Date)
          {
            if (CFDateCompare(Date, a2, 0) == kCFCompareLessThan)
              _CalCalendarItemRemoveExceptionDate(a1, ValueAtIndex);
          }
        }
      }
      CFRelease(v5);
    }
  }
}

void CalCalendarItemRemoveExceptionDatesBeyondDate(uint64_t a1, const __CFDate *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveExceptionDatesBeyondDate(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveAllExceptionDates(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAllExceptionDates(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

__CFArray *CalCalendarItemCopyExceptionDatesAsCFDates(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  __CFArray *Mutable;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const void *ValueAtIndex;
  const void *Date;
  CFRange v14;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v6 = _CalCalendarItemCopyExceptionDates(a1);
  if (v6)
  {
    v7 = v6;
    Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      v9 = Count;
      for (i = 0; i != v9; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
        Date = (const void *)_CalExceptionDateGetDate((uint64_t)ValueAtIndex);
        if (Date)
          CFArrayAppendValue(Mutable, Date);
      }
    }
    CFRelease(v7);
  }
  if (a2)
  {
    v14.length = CFArrayGetCount(Mutable);
    v14.location = 0;
    CFArraySortValues(Mutable, v14, (CFComparatorFunction)MEMORY[0x1E0C98440], 0);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Mutable;
}

void CalCalendarItemAddExceptionDateWithCFDate(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddExceptionDateWithCFDate(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveExceptionDateWithCFDate(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  double v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    v5 = MEMORY[0x1A85B424C](a2);
    _CalCalendarItemRemoveExceptionDateWithCalDate(a1, v5);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

__CFArray *CalCalendarItemCopyExceptionDatesAsCFDatesInSyncOrder(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  __CFArray *Mutable;
  const __CFArray *v4;
  const __CFArray *v5;
  const __CFArray *MutableCopy;
  __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const void *ValueAtIndex;
  const void *Date;
  CFRange v14;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v4 = _CalCalendarItemCopyExceptionDates(a1);
  if (v4)
  {
    v5 = v4;
    MutableCopy = CFArrayCreateMutableCopy(0, 0, v4);
    if (MutableCopy)
    {
      v7 = MutableCopy;
      v14.length = CFArrayGetCount(MutableCopy);
      v14.location = 0;
      CFArraySortValues(v7, v14, (CFComparatorFunction)_CompareExceptionDatesBySyncOrder, 0);
      Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        v9 = Count;
        for (i = 0; i != v9; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
          Date = (const void *)_CalExceptionDateGetDate((uint64_t)ValueAtIndex);
          if (Date)
            CFArrayAppendValue(Mutable, Date);
        }
      }
      CFRelease(v7);
    }
    CFRelease(v5);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Mutable;
}

void CalCalendarItemSetExceptionDatesAsCFDatesInSyncOrder(uint64_t a1, const __CFArray *a2)
{
  os_unfair_lock_s *RecordLock;
  CFIndex Count;
  const void *v6;
  CFIndex i;
  const void *ValueAtIndex;
  CFNumberRef v9;
  void *ExceptionDateWithDateAndOrder;
  int valuePtr;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAllExceptionDates(a1);
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    v6 = (const void *)CalCopyDatabaseForEntity(a1);
    valuePtr = 0;
    if (Count >= 1)
    {
      for (i = 0; i < Count; i = ++valuePtr)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
        v9 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        ExceptionDateWithDateAndOrder = (void *)_CalDatabaseCreateExceptionDateWithDateAndOrder(v6, ValueAtIndex, v9);
        _CalCalendarItemAddExceptionDate(a1, ExceptionDateWithDateAndOrder);
        CFRelease(ExceptionDateWithDateAndOrder);
        CFRelease(v9);
      }
    }
    CFRelease(v6);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef _CalCalendarItemCopyAlarms(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

const __CFArray *_CalCalendarItemAddAlarm(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

_QWORD *_CalCalendarItemRemoveAlarm(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (_CalAlarmIsDefaultAlarm((uint64_t)a2))
    _CalCalendarItemSetRecordProperty(a1, 52, 1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

uint64_t _CalCalendarItemSetDefaultAlarmRemoved(uint64_t a1, unsigned int a2)
{
  return _CalCalendarItemSetRecordProperty(a1, 52, a2);
}

uint64_t CalCalendarItemHasAlarms(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t HasAlarms;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  HasAlarms = _CalCalendarItemHasAlarms(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return HasAlarms;
}

uint64_t _CalCalendarItemHasAlarms(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
    return CalToManyRelationHasObjects(result);
  return result;
}

void CalCalendarItemAddAlarm(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveAlarm(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemIsDefaultAlarmRemoved(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  int IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty != 0;
}

void CalCalendarItemSetDefaultAlarmRemoved(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetRecordProperty(a1, 52, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef _CalCalendarItemCopyAttachments(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

const __CFArray *_CalCalendarItemAddAttachment(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

_QWORD *_CalCalendarItemRemoveAttachment(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

CFMutableArrayRef CalCalendarItemCopyAttachments(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyAttachments(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemAddAttachment(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddAttachment(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveAttachment(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAttachment(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef _CalCalendarItemCopyContacts(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

const __CFArray *_CalCalendarItemAddContact(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

_QWORD *_CalCalendarItemRemoveContact(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

CFMutableArrayRef CalCalendarItemCopyContacts(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyContacts(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarItemAddContact(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddContact(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveContact(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveContact(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarItemHasAttendees(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;
  _BOOL8 HasObjects;

  if (a2)
  {
    RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
  }
  else
  {
    RecordLock = 0;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
  {
    HasObjects = CalToManyRelationHasObjects(Property);
    if (!a2)
      return HasObjects;
  }
  else
  {
    HasObjects = 0;
    if (!a2)
      return HasObjects;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return HasObjects;
}

_QWORD *_CalCalendarItemSetSelfAttendee(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

CFMutableArrayRef _CalCalendarItemCopyAttendees(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

CFMutableArrayRef _CalCalendarItemCopyAttendeesPendingDeletion(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

const __CFArray *_CalCalendarItemAddAttendee(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

_QWORD *_CalCalendarItemRemoveAttendeeImmediate(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

const __CFArray *_CalCalendarItemAddPendingDeleteAttendee(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

CFMutableArrayRef CalCalendarItemCopyAttendees(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyAttendees(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFMutableArrayRef CalCalendarItemCopyAttendeesPendingDeletion(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyAttendeesPendingDeletion(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void _CalCalendarItemFixupParticipantsOnEvent(uint64_t a1)
{
  uint64_t v1;
  CFTypeRef Calendar;
  uint64_t DatabaseForRecord;
  uint64_t v4;
  void *SelfAttendee;
  const __CFArray *v6;
  char *v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  char v12;
  const void *ValueAtIndex;
  const os_unfair_lock *Context;
  int IntegerProperty;
  const os_unfair_lock *v16;
  int v17;
  _BOOL4 v18;
  int v19;
  int v20;
  CFIndex v21;
  char *v22;
  int v23;
  int v24;
  BOOL v25;
  BOOL v27;
  const os_unfair_lock *v29;
  uint64_t Property;
  uint64_t Store;
  uint64_t StoreWithUID;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  const __CFString *v36;
  uint64_t Name;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFTypeRef Organizer;
  const void *v42;
  const void *v43;
  const void *v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  void *Attendee;
  void *v50;
  uint64_t v51;
  const __CFString *v52;
  const __CFString *v53;
  const __CFString *v54;
  const __CFString *v55;
  _BOOL4 v56;
  CFTypeRef v57;
  uint64_t v58;
  double ParticipationStatusModifiedDate;
  double LastModified;
  _BOOL4 v61;
  uint64_t v62;
  _BOOL4 v63;
  CFTypeRef cf;
  const __CFString *cfa;
  uint64_t v66;
  void *v67;
  int v68;
  uint64_t v69;

  v1 = a1;
  Calendar = _CalCalendarItemGetCalendar(a1);
  DatabaseForRecord = CalGetDatabaseForRecord();
  cf = Calendar;
  if (!Calendar)
    return;
  v4 = DatabaseForRecord;
  SelfAttendee = (void *)_CalCalendarItemGetSelfAttendee(v1);
  v6 = _CalCalendarItemCopyAttendees(v1);
  v7 = &CDBLockingAssertionsEnabled;
  v66 = v1;
  v67 = SelfAttendee;
  v62 = v4;
  if (!v6)
  {
    v10 = 0;
    v63 = 0;
    v61 = SelfAttendee != 0;
    if (!v1)
      goto LABEL_49;
    goto LABEL_45;
  }
  v8 = v6;
  Count = CFArrayGetCount(v6);
  v10 = Count;
  v61 = SelfAttendee != 0;
  if (SelfAttendee)
  {
    if (Count < 1)
      goto LABEL_39;
    v11 = 0;
    v12 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
      if (ValueAtIndex)
      {
        if (*v7)
        {
          if (CPRecordGetStore())
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
      IntegerProperty = CPRecordGetIntegerProperty();
      if (ValueAtIndex)
      {
        if (*v7)
        {
          if (CPRecordGetStore())
          {
            v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16)
              os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
      v17 = CPRecordGetIntegerProperty();
      if (IntegerProperty == -1 || v17 == -1)
      {
        v68 = _CompareAttendeeStringProperties((uint64_t)ValueAtIndex);
        v19 = _CompareAttendeeStringProperties((uint64_t)ValueAtIndex);
        v20 = _CompareAttendeeStringProperties((uint64_t)ValueAtIndex);
        v21 = v10;
        v22 = v7;
        v23 = _CompareAttendeeStringProperties((uint64_t)ValueAtIndex);
        v24 = _CompareAttendeeStringProperties((uint64_t)ValueAtIndex);
        if (v20)
          v25 = v68 == 0;
        else
          v25 = 1;
        v27 = v25 || v19 == 0 || v23 == 0;
        v7 = v22;
        v10 = v21;
        v18 = !v27 && v24 != 0;
      }
      else
      {
        v18 = IntegerProperty == v17;
      }
      if (v18)
        v12 = 1;
      ++v11;
    }
    while (v10 != v11);
    v25 = v12 == 0;
    v1 = v66;
    SelfAttendee = v67;
    if (v25)
    {
LABEL_39:
      _CalCalendarItemAddAttendee(v1, SelfAttendee);
      ++v10;
    }
    v63 = v10 == 1;
  }
  else
  {
    v63 = 0;
  }
  CFRelease(v8);
  if (v1)
  {
LABEL_45:
    if (*v7)
    {
      if (CPRecordGetStore())
      {
        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29)
          os_unfair_lock_assert_owner(v29 + 20);
      }
    }
  }
LABEL_49:
  Property = CPRecordGetProperty();
  CalToManyRelationUnload(Property);
  _CalCalendarItemGetStoreId(v1);
  Store = CPRecordGetStore();
  StoreWithUID = _CalGetStoreWithUID(Store);
  if (StoreWithUID)
    v33 = _CalStoreUsesSelfAttendee(StoreWithUID);
  else
    v33 = 1;
  v34 = (uint64_t)cf;
  v35 = _CalCalendarCopyOwnerIdentityDisplayName((uint64_t)cf);
  v36 = _CalCalendarCopyOwnerIdentityAddress((uint64_t)cf);
  Name = _CalCalendarCopyOwnerIdentityFirstName((uint64_t)cf);
  v38 = _CalCalendarCopyOwnerIdentityLastName((uint64_t)cf);
  v39 = _CalCalendarCopySelfIdentityDisplayName((uint64_t)cf);
  cfa = _CalCalendarCopySelfIdentityAddress((uint64_t)cf);
  v69 = _CalCalendarCopySelfIdentityFirstName(v34);
  v40 = _CalCalendarCopySelfIdentityLastName(v34);
  Organizer = _CalCalendarItemGetOrganizer(v66);
  v42 = Organizer;
  if (!Organizer)
  {
    if (!v10 || v63)
      goto LABEL_77;
    if (v35 | Name | v38)
    {
      if (v36)
      {
        v43 = _CalDatabaseCreateOrganizer(v62);
        if (v43)
        {
          v44 = v43;
          _CalAttendeeSetDisplayName((uint64_t)v43, (const __CFString *)v35);
          _CalAttendeeSetFirstName((uint64_t)v44, (const __CFString *)Name);
          _CalAttendeeSetLastName((uint64_t)v44, (const __CFString *)v38);
          v45 = (const __CFString *)_CalCalendarCopyOwnerIdentityEmail(v34);
          if (v45)
          {
            v46 = v45;
            _CalAttendeeSetEmailAddress((uint64_t)v44, v45);
            CFRelease(v46);
          }
          v47 = (const __CFString *)_CalCalendarCopyOwnerIdentityPhoneNumber(v34);
          if (v47)
          {
            v48 = v47;
            _CalAttendeeSetPhoneNumber((uint64_t)v44, v47);
            CFRelease(v48);
          }
          _CalAttendeeSetAddress(v44, v36);
          _CalOrganizerSetIsSelf((uint64_t)v44, 1u);
          _CalCalendarItemSetOrganizer(v66, v44);
          CFRelease(v44);
        }
      }
    }
    goto LABEL_67;
  }
  if (_CalOrganizerIsSelf((uint64_t)Organizer))
  {
    if (!v10 || v63)
    {
LABEL_77:
      if (v35 | Name | v38 && v36 && v42)
      {
        _CalCalendarItemSetOrganizer(v66, 0);
        _CalDatabaseRemoveEntity(v62, v42);
      }
      v56 = v61;
      if (!v33)
        v56 = 0;
      if (v56 && v39 | v69 | v40 && cfa)
      {
        _CalCalendarItemRemoveAttendeeImmediate(v66, v67);
        _CalCalendarItemSetSelfAttendee(v66, 0);
      }
      goto LABEL_87;
    }
LABEL_67:
    if (!v67 && v33)
    {
      if (v39 | v69 | v40)
      {
        if (cfa)
        {
          Attendee = (void *)_CalDatabaseCreateAttendee(v62);
          if (Attendee)
          {
            v50 = Attendee;
            _CalAttendeeSetDisplayName((uint64_t)Attendee, (const __CFString *)v39);
            _CalAttendeeSetFirstName((uint64_t)v50, (const __CFString *)v69);
            v51 = v40;
            _CalAttendeeSetLastName((uint64_t)v50, (const __CFString *)v40);
            v52 = (const __CFString *)_CalCalendarCopySelfIdentityEmail(v34);
            if (v52)
            {
              v53 = v52;
              _CalAttendeeSetEmailAddress((uint64_t)v50, v52);
              CFRelease(v53);
            }
            v54 = (const __CFString *)_CalCalendarCopySelfIdentityPhoneNumber(v34);
            if (v54)
            {
              v55 = v54;
              _CalAttendeeSetPhoneNumber((uint64_t)v50, v54);
              CFRelease(v55);
            }
            _CalAttendeeSetAddress(v50, cfa);
            _CalAttendeeSetStatus(v50, 1);
            _CalAttendeeSetType((uint64_t)v50, 1u);
            _CalCalendarItemAddAttendee(v66, v50);
            _CalCalendarItemSetSelfAttendee(v66, v50);
            CFRelease(v50);
            v40 = v51;
          }
        }
      }
    }
  }
LABEL_87:
  if (v35)
    CFRelease((CFTypeRef)v35);
  if (v36)
    CFRelease(v36);
  if (Name)
    CFRelease((CFTypeRef)Name);
  if (v38)
    CFRelease((CFTypeRef)v38);
  if (v39)
    CFRelease((CFTypeRef)v39);
  if (cfa)
    CFRelease(cfa);
  if (v69)
    CFRelease((CFTypeRef)v69);
  if (v40)
    CFRelease((CFTypeRef)v40);
  v57 = _CalCalendarItemGetSelfAttendee(v66);
  if (v57)
  {
    v58 = (uint64_t)v57;
    ParticipationStatusModifiedDate = _CalEventGetParticipationStatusModifiedDate(v66);
    LastModified = _CalAttendeeGetLastModified(v58);
    if (LastModified > ParticipationStatusModifiedDate)
      _CalEventSetParticipationStatusModifiedDate(v66, LastModified);
  }
}

void CalCalendarItemAddAttendee(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalRecurrenceGetWeekStartRaw((uint64_t)a2) == -1)
    _CalCalendarItemAddPendingDeleteAttendee(a1, a2);
  else
    _CalCalendarItemAddAttendee(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const __CFArray *_CalCalendarItemRemoveAttendee(uint64_t a1, const __CFArray *a2)
{
  uint64_t Store;
  uint64_t StoreWithUID;
  CFTypeRef Organizer;
  _BOOL4 v7;
  const os_unfair_lock *Context;
  _QWORD *Property;
  const __CFArray *result;

  _CalCalendarItemGetStoreId(a1);
  Store = CPRecordGetStore();
  StoreWithUID = _CalGetStoreWithUID(Store);
  v7 = StoreWithUID
    && _CalAttendeeGetUseDeletedByOrganizerStatusInStore(StoreWithUID)
    && (Organizer = _CalCalendarItemGetOrganizer(a1)) != 0
    && _CalOrganizerIsSelf((uint64_t)Organizer);
  if (_CalRecurrenceGetWeekStartRaw((uint64_t)a2) == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    Property = (_QWORD *)CPRecordGetProperty();
    if (Property)
      CalToManyRelationRemoveObject(Property, a2);
    _CalAttendeeSetStatus(a2, 7);
  }
  else
  {
    _CalCalendarItemRemoveAttendeeImmediate(a1, a2);
    if (v7)
    {
      _CalAttendeeSetStatus(a2, -1);
      return _CalCalendarItemAddPendingDeleteAttendee(a1, a2);
    }
  }
  result = (const __CFArray *)_CalCalendarItemGetSelfAttendee(a1);
  if (result == a2)
    return (const __CFArray *)_CalCalendarItemSetSelfAttendee(a1, 0);
  return result;
}

void CalCalendarItemRemoveAttendee(uint64_t a1, const __CFArray *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAttendee(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarItemCopySelfAttendee(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef SelfAttendee;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  SelfAttendee = _CalCalendarItemGetSelfAttendee(a1);
  v4 = SelfAttendee;
  if (SelfAttendee)
    CFRetain(SelfAttendee);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalCalendarItemGetFlags(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalCalendarItemGetIsCompleted(uint64_t a1)
{
  return _CalCalendarItemGetFlags(a1) & 1;
}

const __CFArray *_CalCalendarItemAddRecurrence(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

void _CalCalendarItemRemoveRecurrence(uint64_t a1, void *a2, int a3)
{
  const os_unfair_lock *Context;
  _QWORD *Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
  {
    CalToManyRelationRemoveObject(Property, a2);
    if (a3)
    {
      _CalCalendarItemRemoveAllExceptionDates(a1);
      _CalEventDeleteAllDetachedEvents(a1);
    }
  }
}

_QWORD *_CalCalendarItemRemoveAllRecurrences(uint64_t a1)
{
  const os_unfair_lock *Context;
  _QWORD *result;
  const os_unfair_lock *v4;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationRemoveAllObjects(result);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v4)
        os_unfair_lock_assert_owner(v4 + 20);
    }
    return (_QWORD *)CPRecordSetProperty();
  }
  return result;
}

BOOL _CalCalendarItemHasRecurrenceRules(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL CalCalendarItemHasRecurrenceRules(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 HasRecurrenceRules;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  HasRecurrenceRules = _CalCalendarItemHasRecurrenceRules(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return HasRecurrenceRules;
}

void CalCalendarItemAddRecurrence(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddRecurrence(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemAddRecurrenceDirectly(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemAddRecurrence(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveRecurrence(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveRecurrence(a1, a2, 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveRecurrenceDirectly(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveRecurrence(a1, a2, 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarItemCopyFirstRecurrence(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const __CFArray *v3;
  const __CFArray *v4;
  const void *ValueAtIndex;
  CFTypeRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyRecurrences(a1);
  if (v3)
  {
    v4 = v3;
    if (CFArrayGetCount(v3) < 1)
    {
      v6 = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, 0);
      v6 = CFRetain(ValueAtIndex);
    }
    CFRelease(v4);
  }
  else
  {
    v6 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

void CalCalendarItemSetRecurrence(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Owner;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  char v12;
  void *ValueAtIndex;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalRecurrenceGetOwner((uint64_t)a2, 0);
  if (Owner && Owner != a1)
    _CalCalendarItemRemoveRecurrence(Owner, a2, 1);
  v6 = _CalCalendarItemCopyRecurrences(a1);
  if (v6)
  {
    v7 = v6;
    Count = CFArrayGetCount(v6);
    v9 = Count - 1;
    if (Count < 1)
      goto LABEL_14;
    v10 = Count;
    v11 = 0;
    v12 = 0;
    do
    {
      while (1)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v7, v11);
        if (ValueAtIndex != a2)
          break;
        v12 = 1;
        if (v9 == v11++)
          goto LABEL_15;
      }
      _CalCalendarItemRemoveRecurrence(a1, ValueAtIndex, 0);
      ++v11;
    }
    while (v10 != v11);
    if ((v12 & 1) == 0)
LABEL_14:
      _CalCalendarItemAddRecurrence(a1, a2);
LABEL_15:
    CFRelease(v7);
  }
  _CalCalendarItemRemoveAllExceptionDates(a1);
  _CalEventDeleteAllDetachedEvents(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveAllRecurrences(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveAllRecurrences(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalCalendarItemHasDirtyNotifiableAttributes(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

uint64_t _CalCalendarItemClearDirtyAttributes(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordUnloadProperty();
}

void CalDatabaseRemoveAllCalendarItemsWithCalendarAndEntityType(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;

  v4 = (const __CFArray *)CalDatabaseCopyCalendarItemsWithCalendar(a1);
  if (v4)
  {
    v5 = v4;
    Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
        if (a3 == 2)
          CalRemoveEventAndDetachedEvents(ValueAtIndex);
        else
          CalRemoveTask(ValueAtIndex);
      }
    }
    CFRelease(v5);
  }
}

uint64_t CalDatabaseCopyCalendarItemsWithCalendar(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalDatabaseCopyCalendarItemsWithCalendar((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

CFMutableArrayRef _CalCalendarItemCopyRelatedResourceChanges(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

CFMutableArrayRef CalCalendarItemCopyRelatedResourceChanges(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarItemCopyRelatedResourceChanges(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t CalCalendarItemCopyStructuredData(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetStructuredData(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 67, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarItemCopyLocalStructuredData(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetLocalStructuredData(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalCalendarItemCopyConferences(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;
  CFMutableArrayRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    v5 = CalToManyRelationCopyObjects(Property);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalCalendarItemAddConference(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationAddObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

_QWORD *_CalCalendarItemRemoveConference(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

void CalCalendarItemRemoveConference(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemRemoveConference(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarItemRemoveAllConferences(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationRemoveAllObjects(Property);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

_QWORD *_CalCalendarItemSetError(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

void CalCalendarItemSetError(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemSetError(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef _CalCalendarItemGetError(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

CFTypeRef CalCalendarItemCopyError(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Error;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Error = _CalCalendarItemGetError(a1);
  if (Error)
    v4 = CFRetain(Error);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarItemSetErrorCodeAndUserInfo(uint64_t a1, uint64_t a2, unint64_t a3)
{
  os_unfair_lock_s *v6;
  const void *Error;

  if ((CalCalendarItemHasErrorCodeAndMaybeUserInfo(a1, a2, 1, a3) & 1) == 0)
  {
    v6 = (os_unfair_lock_s *)CalCopyDatabaseForEntity(a1);
    Error = CalDatabaseCreateError(v6);
    CalErrorSetCalendarItemErrorCode((uint64_t)Error, a2, a3);
    CalCalendarItemSetError(a1, Error);
    CFRelease(Error);
    CFRelease(v6);
  }
}

uint64_t CalCalendarItemHasErrorCode(uint64_t a1, uint64_t a2)
{
  return CalCalendarItemHasErrorCodeAndMaybeUserInfo(a1, a2, 0, 0);
}

uint64_t CalCalendarItemHasErrorCodeAndMaybeUserInfo(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  CFTypeRef v7;
  const void *v8;
  uint64_t ErrorType;
  uint64_t ErrorCode;
  uint64_t v12;
  void *v14;
  unint64_t v15;

  v7 = CalCalendarItemCopyError(a1);
  if (!v7)
    return 0;
  v8 = v7;
  ErrorType = CalErrorGetErrorType((uint64_t)v7);
  ErrorCode = CalErrorGetErrorCode((uint64_t)v8);
  v12 = ErrorType == 1 && ErrorCode == a2;
  if ((_DWORD)v12 == 1 && a3 != 0)
  {
    v14 = (void *)CalErrorCopyUserInfo((uint64_t)v8);
    v15 = (unint64_t)CalErrorDecodeUserInfo((uint64_t)v14);
    if (a4 | v15)
      v12 = objc_msgSend((id)a4, "isEqual:", v15);
    else
      v12 = 1;

  }
  CFRelease(v8);
  return v12;
}

CFTypeRef CalDatabaseCopyCalendarItemWithUUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  const __CFArray *v6;
  const __CFArray *v7;
  const void *ValueAtIndex;
  CFTypeRef v9;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (v6)
  {
    v7 = v6;
    if (CFArrayGetCount(v6) < 1)
    {
      v9 = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
      v9 = CFRetain(ValueAtIndex);
    }
    CFRelease(v7);
  }
  else
  {
    v9 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v9;
}

uint64_t CalDatabaseCopyCalendarItemsWithUUIDs(os_unfair_lock_s *a1, const __CFArray *a2, const __CFArray *a3)
{
  __CFString *Mutable;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  CFIndex i;
  const void *ValueAtIndex;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex j;
  void *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t RecordStore;
  BOOL v20;
  const os_unfair_lock *Context;
  uint64_t v22;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("WHERE UUID IN ("));
  Count = CFArrayGetCount(a2);
  v8 = Count - 1;
  if (Count >= 1)
  {
    v9 = Count;
    for (i = 0; i != v9; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      if (v8 == i)
        CFStringAppendFormat(Mutable, 0, CFSTR("'%@')"), ValueAtIndex);
      else
        CFStringAppendFormat(Mutable, 0, CFSTR("'%@',"), ValueAtIndex);
    }
  }
  if (a3)
  {
    v12 = CFArrayGetCount(a3);
    v13 = v12 - 1;
    if (v12 >= 1)
    {
      v14 = v12;
      CFStringAppendFormat(Mutable, 0, CFSTR(" AND calendar_id IN ("));
      for (j = 0; j != v14; ++j)
      {
        CFArrayGetValueAtIndex(a3, j);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "intValue");
        if (v13 == j)
          CFStringAppendFormat(Mutable, 0, CFSTR("'%i')"), v17);
        else
          CFStringAppendFormat(Mutable, 0, CFSTR("'%i',"), v17);

      }
    }
  }
  v18 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v20 = RecordStore == 0;
  else
    v20 = 1;
  if (!v20)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v22 = CPRecordStoreCopyAllInstancesOfClassWhere();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v18);
  os_unfair_lock_unlock(v18);
  CFRelease(Mutable);
  return v22;
}

uint64_t CalDatabaseCopyCalendarItemsWithCalendarFilter(os_unfair_lock_s *a1, int a2, void *a3)
{
  os_unfair_lock_s *v5;
  __CFString *Mutable;
  void *v7;
  const void *v8;
  uint64_t RecordStore;
  BOOL v10;
  const os_unfair_lock *Context;
  uint64_t v12;

  if ((a2 & 0xFFFFFFFE) != 2)
    CalDatabaseCopyCalendarItemsWithCalendarFilter_cold_1();
  v5 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("WHERE entity_type = ?"));
  if (a3)
  {
    v7 = _CalFilterCopyCalendarIDClauseForQuery(a3, (uint64_t)CFSTR("calendar_id"));
    if (v7)
    {
      v8 = v7;
      CFStringAppendFormat(Mutable, 0, CFSTR(" AND %@"), v7);
      CFRelease(v8);
    }
  }
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v10 = RecordStore == 0;
  else
    v10 = 1;
  if (!v10)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v12 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5);
  os_unfair_lock_unlock(v5);
  if (Mutable)
    CFRelease(Mutable);
  return v12;
}

id CalDatabaseCopyCalendarItemUUIDs(os_unfair_lock_s *a1, int a2)
{
  void *v5;
  void *v6;
  id v7;
  os_unfair_lock_s *v8;
  uint64_t RecordStore;
  BOOL v10;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *MutableCopy;
  __CFString *v17;
  const os_unfair_lock *v18;
  uint64_t **v19;
  uint64_t v20;
  const os_unfair_lock *v21;
  uint64_t v22;
  const os_unfair_lock *v23;
  const os_unfair_lock *v24;
  void *v25;

  if ((a2 + 1) > 4 || ((1 << (a2 + 1)) & 0x19) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSArray<NSString *> *CalDatabaseCopyCalendarItemUUIDs(CalDatabaseRef, CalEntityType)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("CalCalendarItem.m"), 3247, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("entityType == CalEventEntity || entityType == CalTaskEntity || entityType == CalUndefinedEntity"));

  }
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v8 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v10 = RecordStore == 0;
  else
    v10 = 1;
  if (!v10)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
    v14 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
    if (v14)
    {
      v15 = v14;
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT UUID FROM CalendarItem"));
      v17 = MutableCopy;
      if (a2 != -1)
        CFStringAppend(MutableCopy, CFSTR(" WHERE entity_type = ?"));
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v15)
        {
          if (*(_QWORD *)(*(_QWORD *)v15 + 104))
          {
            v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18)
              os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
      v19 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      CFRelease(v17);
      if (v19)
      {
        if (a2 != -1)
          sqlite3_bind_int((sqlite3_stmt *)v19[1], 1, a2);
        if (CDBLockingAssertionsEnabled)
        {
          if (*v19)
          {
            v20 = **v19;
            if (v20)
            {
              if (*(_QWORD *)(v20 + 104))
              {
                v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v21)
                  os_unfair_lock_assert_owner(v21 + 20);
              }
            }
          }
        }
        CPSqliteStatementSendResults();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v19)
          {
            v22 = **v19;
            if (v22)
            {
              if (*(_QWORD *)(v22 + 104))
              {
                v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v23)
                  os_unfair_lock_assert_owner(v23 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v15)
        {
          if (*(_QWORD *)(*(_QWORD *)v15 + 104))
          {
            v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v24)
              os_unfair_lock_assert_owner(v24 + 20);
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v8);
  os_unfair_lock_unlock(v8);
  v25 = (void *)objc_msgSend(v7, "copy");

  return v25;
}

uint64_t __CalendarItemUUIDRowHandler(uint64_t a1, void *a2)
{
  id v3;
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  int v12;
  const unsigned __int8 *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
    if (v4)
    {
      v5 = v4;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6)
      {
        objc_msgSend(v3, "addObject:", v6);
      }
      else
      {
        v10 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          v12 = 136315138;
          v13 = v5;
          _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_ERROR, "Could not get uuid string from utf8 string = %s", (uint8_t *)&v12, 0xCu);
        }
      }

    }
    else
    {
      v9 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v12) = 0;
        _os_log_impl(&dword_1A5CCB000, v9, OS_LOG_TYPE_ERROR, "Could not get uuid column text for sqlite statement", (uint8_t *)&v12, 2u);
      }
    }
    v8 = 0;
  }
  else
  {
    v7 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_ERROR, "Calendar item row handler has no uuid context. Aborting sqlite statement.", (uint8_t *)&v12, 2u);
    }
    v8 = 1;
  }

  return v8;
}

uint64_t CalDatabaseCopyCalendarItems(os_unfair_lock_s *a1, int a2)
{
  return CalDatabaseCopyCalendarItemsWithCalendarFilter(a1, a2, 0);
}

uint64_t CalDatabaseCopyCalendarItemsWithStoreID(os_unfair_lock_s *a1, int a2)
{
  os_unfair_lock_s *v3;
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t v7;

  if ((a2 & 0xFFFFFFFE) != 2)
    CalDatabaseCopyCalendarItemsWithStoreID_cold_1();
  v3 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v7 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3);
  os_unfair_lock_unlock(v3);
  return v7;
}

uint64_t _CalDatabaseCopyCalendarItemsWithCalendar(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
}

BOOL _CalDatabaseCalendarHasCalendarItemsWithEntityType(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v8;
  int v9;
  const os_unfair_lock *v10;
  uint64_t v11;
  uint64_t v12;
  sqlite3_stmt *v13;
  int v14;
  _BOOL8 v15;
  int ID;
  uint64_t v17;
  const os_unfair_lock *v18;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v8 = Database == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (a3 == 101)
  {
    if (!v9)
      goto LABEL_22;
    if (!*(_QWORD *)(Database + 104))
      goto LABEL_22;
    v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!v10)
      goto LABEL_22;
LABEL_21:
    os_unfair_lock_assert_owner(v10 + 20);
    goto LABEL_22;
  }
  if (v9)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        goto LABEL_21;
    }
  }
LABEL_22:
  v11 = CPSqliteDatabaseStatementForReading();
  if (!v11)
    return 0;
  v12 = v11;
  v13 = *(sqlite3_stmt **)(v11 + 8);
  if (v13)
  {
    if (a3 == 101)
    {
      v14 = 1;
    }
    else
    {
      sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 1, a3);
      v13 = *(sqlite3_stmt **)(v12 + 8);
      v14 = 2;
    }
    ID = CPRecordGetID();
    sqlite3_bind_int(v13, v14, ID);
    v15 = sqlite3_step(*(sqlite3_stmt **)(v12 + 8)) == 100;
  }
  else
  {
    v15 = 0;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)v12)
    {
      v17 = **(_QWORD **)v12;
      if (v17)
      {
        if (*(_QWORD *)(v17 + 104))
        {
          v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18)
            os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
  }
  CPSqliteStatementReset();
  return v15;
}

uint64_t CalDatabaseGetCountOfCalendarItemsInStore(const void *a1, int a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  __CFString *Mutable;
  uint64_t RecordStore;
  BOOL v9;
  const os_unfair_lock *Context;
  int CountOfInstancesOfClassWithFilterAndBindBlock;

  if (a3)
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  else
    v5 = (os_unfair_lock_s *)CFRetain(a1);
  v6 = v5;
  Mutable = CFStringCreateMutable(0, 0);
  os_unfair_lock_lock(v6 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)v6);
  if (a2 == 101)
    a2 = 0;
  if (a3)
  {
    CFStringAppend(Mutable, CFSTR("JOIN Calendar ON calendar_id = Calendar.ROWID WHERE store_id = ?"));
    if (a2 < 1)
      goto LABEL_9;
    goto LABEL_8;
  }
  CFStringAppend(Mutable, CFSTR("WHERE 1=1"));
  if (a2 > 0)
LABEL_8:
    CFStringAppend(Mutable, CFSTR(" AND entity_type = ?"));
LABEL_9:
  if (CDBLockingAssertionsEnabled)
    v9 = RecordStore == 0;
  else
    v9 = 1;
  if (!v9)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CountOfInstancesOfClassWithFilterAndBindBlock = CPRecordStoreGetCountOfInstancesOfClassWithFilterAndBindBlock();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6 + 20);
  os_unfair_lock_unlock(v6 + 20);
  CFRelease(v6);
  CFRelease(Mutable);
  return CountOfInstancesOfClassWithFilterAndBindBlock & ~(CountOfInstancesOfClassWithFilterAndBindBlock >> 31);
}

CFTypeRef CalDatabaseCopyEntityWithPropertyInCalendarOrStore(os_unfair_lock_s *a1, int a2, uint64_t a3, const __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const __CFArray *v7;
  const __CFArray *v8;
  const void *ValueAtIndex;
  CFTypeRef v10;

  v7 = (const __CFArray *)CalDatabaseCopyAllEntitiesWithPropertyInCalendarOrStore(a1, a2, a3, a4, a5, a6, a7, 1);
  if (!v7)
    return 0;
  v8 = v7;
  if (CFArrayGetCount(v7) < 1)
  {
    v10 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v8, 0);
    v10 = CFRetain(ValueAtIndex);
  }
  CFRelease(v8);
  return v10;
}

uint64_t CalDatabaseCopyAllEntitiesWithPropertyInCalendarOrStore(os_unfair_lock_s *cf, int a2, uint64_t a3, const __CFString *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  os_unfair_lock_s *v14;
  void *CStringFromCFString;
  void *v16;
  __CFString *SelectPrefix;
  __CFString *v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t RecordStore;
  uint64_t v23;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  sqlite3_stmt *v31;
  int ID;
  const os_unfair_lock *v33;

  v14 = cf;
  if (!a5 && !a6)
  {
    if (cf)
    {
      CFRetain(cf);
      if (!a4)
        goto LABEL_13;
      goto LABEL_5;
    }
    return 0;
  }
  v14 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v14)
    return 0;
  if (!a4)
  {
LABEL_13:
    CFRelease(v14);
    return 0;
  }
LABEL_5:
  CStringFromCFString = CalCreateCStringFromCFString(a4);
  if (!CStringFromCFString)
    goto LABEL_13;
  v16 = CStringFromCFString;
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
  {
    free(v16);
    CFRelease(v14);
    return 0;
  }
  v18 = SelectPrefix;
  CFStringAppendFormat(SelectPrefix, 0, CFSTR(" WHERE"));
  if (a2 != -1)
    CFStringAppendFormat(v18, 0, CFSTR(" entity_type = ? AND"));
  CFStringAppendFormat(v18, 0, CFSTR(" %@ = ?"), a3);
  if (a5)
  {
    v19 = CFSTR(" AND calendar_id = ?");
LABEL_19:
    CFStringAppend(v18, v19);
    goto LABEL_20;
  }
  if (a6)
  {
    v19 = CFSTR(" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)");
    goto LABEL_19;
  }
LABEL_20:
  if (a8)
    CFStringAppend(v18, CFSTR(" LIMIT 1"));
  os_unfair_lock_lock(v14 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)v14);
  v23 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26)
          os_unfair_lock_assert_owner(v26 + 20);
      }
    }
  }
  v27 = CPSqliteDatabaseStatementForReading();
  if (v27)
  {
    v28 = v27;
    if (a2 == -1)
    {
      v29 = 1;
    }
    else
    {
      sqlite3_bind_int(*(sqlite3_stmt **)(v27 + 8), 1, a2);
      v29 = 2;
    }
    sqlite3_bind_text(*(sqlite3_stmt **)(v28 + 8), v29, (const char *)v16, -1, 0);
    if (a5 || a6)
    {
      v30 = v29 + 1;
      v31 = *(sqlite3_stmt **)(v28 + 8);
      ID = CPRecordGetID();
      sqlite3_bind_int(v31, v30, ID);
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (v23)
      {
        v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33)
          os_unfair_lock_assert_owner(v33 + 20);
      }
    }
    v20 = CPRecordStoreProcessStatementWithPropertyIndices();
  }
  else
  {
    v20 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v14 + 20);
  os_unfair_lock_unlock(v14 + 20);
  CFRelease(v18);
  free(v16);
  CFRelease(v14);
  return v20;
}

CFTypeRef CalDatabaseCopyCalendarItemWithUniqueIdentifierInCalendarOrStore(os_unfair_lock_s *a1, int a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  return CalDatabaseCopyEntityWithPropertyInCalendarOrStore(a1, a2, (uint64_t)CFSTR("unique_identifier"), a3, a4, a5, (uint64_t)&kCalEventClass);
}

uint64_t CalDatabaseCopyAllCalendarItemsWithUniqueIdentifierInCalendarOrStore(os_unfair_lock_s *a1, int a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  return CalDatabaseCopyAllEntitiesWithPropertyInCalendarOrStore(a1, a2, (uint64_t)CFSTR("unique_identifier"), a3, a4, a5, (uint64_t)&kCalEventClass, 0);
}

uint64_t CalDatabaseCopyCalendarItemsWithUniqueIdentifier(uint64_t a1)
{
  uint64_t RecordStore;
  os_unfair_lock_s *v3;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t v6;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  v3 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock(v3);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3);
  os_unfair_lock_unlock(v3);
  return v6;
}

CFTypeRef CalDatabaseCopyCalendarItemWithExternalIDInCalendarOrStore(os_unfair_lock_s *a1, int a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  return CalDatabaseCopyEntityWithPropertyInCalendarOrStore(a1, a2, (uint64_t)CFSTR("external_id"), a3, a4, a5, (uint64_t)&kCalEventClass);
}

uint64_t _CompareAttendeeStringProperties(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t v2;
  const os_unfair_lock *v3;
  uint64_t v4;
  const __CFString *v5;
  _BOOL8 v6;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v2 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v3)
        os_unfair_lock_assert_owner(v3 + 20);
    }
  }
  v4 = CPRecordCopyProperty();
  if (!(v2 | v4))
    return 1;
  v5 = (const __CFString *)v4;
  if (v2 && v4)
  {
    v6 = CFStringGetLength((CFStringRef)v2) >= 1
      && CFStringGetLength(v5) >= 1
      && CFStringCompare((CFStringRef)v2, v5, 0) == kCFCompareEqualTo;
LABEL_22:
    CFRelease((CFTypeRef)v2);
    if (!v5)
      return v6;
    goto LABEL_19;
  }
  v6 = 0;
  if (v2)
    goto LABEL_22;
  if (v4)
LABEL_19:
    CFRelease(v5);
  return v6;
}

void CalMigrateTableFull(_QWORD *a1, const char **a2, uint64_t a3, const char **a4, const char **a5, const char **a6, const char **a7, const char **a8, unsigned int a9)
{
  CFStringRef v15;
  CFStringRef v16;
  uint64_t v17;
  CFStringRef v18;
  CFStringRef v19;

  v15 = CFStringCreateWithCStringNoCopy(0, *a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v16 = v15;
  if (a3)
    v17 = a3;
  else
    v17 = (uint64_t)v15;
  if (a5)
  {
    v18 = CFStringCreateWithFormat(0, 0, CFSTR("%@Changes"), v17);
    v19 = CFStringCreateWithFormat(0, 0, CFSTR("%@Changes"), v16);
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  CalMigrationDropIndexes(a1, a6);
  CalMigrationDropIndexes(a1, a7);
  CalMigrationDropTriggers(a1, a8);
  RenameTableToTemp(a1, v17);
  if (v18)
    RenameTableToTemp(a1, (uint64_t)v18);
  CPRecordStoreCreateTablesForClass();
  MoveTableData(a1, v17, (uint64_t)v16, a4, a9);
  if (a5)
  {
    MoveTableData(a1, (uint64_t)v18, (uint64_t)v19, a5, a9);
    DropTempTable(a1, v17);
    v17 = (uint64_t)v18;
  }
  DropTempTable(a1, v17);
  CalMigrationCreateIndexes(a1, a2, a6, a7);
  CalMigrationCreateTriggers(a1, a2, a8);
  if (v18)
    CFRelease(v18);
  if (v19)
    CFRelease(v19);
  CFRelease(v16);
}

void CalMigrationDropIndexes(_QWORD *a1, const char **a2)
{
  const char *v3;
  const char **v5;
  CFStringRef v6;
  CFStringRef v7;
  CFStringRef v8;
  CFStringRef v9;
  const char *v10;

  if (a2)
  {
    v3 = *a2;
    if (v3)
    {
      v5 = a2 + 5;
      do
      {
        v6 = CFStringCreateWithCString(0, v3, 0x600u);
        if (v6)
        {
          v7 = v6;
          v8 = CFStringCreateWithFormat(0, 0, CFSTR("DROP INDEX IF EXISTS %@;"), v6);
          if (v8)
          {
            v9 = v8;
            CalPerformSQLWithConnection(a1, (uint64_t)v8);
            CFRelease(v9);
          }
          CFRelease(v7);
        }
        v10 = *v5;
        v5 += 5;
        v3 = v10;
      }
      while (v10);
    }
  }
}

void CalMigrationDropTriggers(_QWORD *a1, const char **a2)
{
  const char *v3;
  const char **v5;
  CFStringRef v6;
  CFStringRef v7;
  CFStringRef v8;
  CFStringRef v9;
  const char *v10;

  if (a2)
  {
    v3 = *a2;
    if (v3)
    {
      v5 = a2 + 4;
      do
      {
        v6 = CFStringCreateWithCString(0, v3, 0x600u);
        if (v6)
        {
          v7 = v6;
          v8 = CFStringCreateWithFormat(0, 0, CFSTR("DROP TRIGGER IF EXISTS %@;"), v6);
          if (v8)
          {
            v9 = v8;
            CalPerformSQLWithConnection(a1, (uint64_t)v8);
            CFRelease(v9);
          }
          CFRelease(v7);
        }
        v10 = *v5;
        v5 += 4;
        v3 = v10;
      }
      while (v10);
    }
  }
}

void RenameTableToTemp(_QWORD *a1, uint64_t a2)
{
  CFStringRef v4;
  CFStringRef v5;

  DropTempTable(a1, a2);
  v4 = CFStringCreateWithFormat(0, 0, CFSTR("ALTER TABLE %@ RENAME TO %@_;"), a2, a2);
  if (v4)
  {
    v5 = v4;
    CalPerformSQLWithConnection(a1, (uint64_t)v4);
    CFRelease(v5);
  }
}

void MoveTableData(_QWORD *a1, uint64_t a2, uint64_t a3, const char **a4, uint64_t a5)
{
  __CFString *Mutable;
  __CFString *v8;
  const char *v9;
  uint64_t v10;
  __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  const char **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  const char **v20;
  const char **v21;
  __CFDictionary *v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFStringRef v25;
  const char *v26;
  CFStringRef v27;
  CFStringRef v28;
  const char *v29;
  CFStringRef v30;
  int v31;
  const __CFDictionary *Value;
  const __CFNumber *v33;
  int v34;
  const __CFDictionary *v35;
  const __CFNumber *v36;
  const char *v37;
  const __CFString *v38;
  CFStringRef v39;
  __CFString *v40;
  __CFString *theString;
  int valuePtr;
  int v46;

  Mutable = CFStringCreateMutable(0, 0);
  v8 = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, CFSTR("ROWID"));
  theString = v8;
  CFStringAppend(v8, CFSTR("ROWID"));
  v9 = *a4;
  if (*a4)
  {
    v10 = 0;
    v11 = 0;
    v40 = Mutable;
    v12 = 1;
    while (1)
    {
      v13 = v10;
      v10 = v12;
      v14 = CFStringCreateWithCString(0, v9, 0x600u);
      v15 = &a4[4 * v13];
      v17 = *((_DWORD *)v15 + 3);
      v16 = (_DWORD *)v15 + 3;
      if (v17 == -1)
      {
        CFStringAppend(theString, CFSTR(", "));
        CFStringAppend(theString, v14);
        if (SLODWORD(a4[4 * v13 + 1]) > (int)a5 || (*v16 != -1 ? (v18 = *v16 < (int)a5) : (v18 = 0), v18))
        {
          v19 = a5;
          v20 = &a4[4 * v13];
          if (!v20[2])
            goto LABEL_33;
          if (!v11)
          {
            v11 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (*a4)
            {
              v21 = a4 + 2;
              do
              {
                v22 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                v23 = CFNumberCreate(0, kCFNumberIntType, v21 - 1);
                CFDictionaryAddValue(v22, CFSTR("firstVersion"), v23);
                CFRelease(v23);
                if (*((_DWORD *)v21 - 1) != -1)
                {
                  v24 = CFNumberCreate(0, kCFNumberIntType, (char *)v21 - 4);
                  CFDictionaryAddValue(v22, CFSTR("lastVersion"), v24);
                  CFRelease(v24);
                }
                if (*v21)
                {
                  v25 = CFStringCreateWithCString(0, *v21, 0x600u);
                  CFDictionaryAddValue(v22, CFSTR("oldName"), v25);
                  CFRelease(v25);
                }
                v26 = v21[1];
                if (v26)
                {
                  v27 = CFStringCreateWithCString(0, v26, 0x600u);
                  CFDictionaryAddValue(v22, CFSTR("defaultText"), v27);
                  CFRelease(v27);
                }
                v28 = CFStringCreateWithCString(0, *(v21 - 2), 0x600u);
                CFDictionaryAddValue(v11, v28, v22);
                CFRelease(v28);
                CFRelease(v22);
                v29 = v21[2];
                v21 += 4;
              }
              while (v29);
              Mutable = v40;
            }
          }
          v30 = CFStringCreateWithCString(0, v20[2], 0x600u);
          v31 = -1;
          valuePtr = -1;
          Value = (const __CFDictionary *)CFDictionaryGetValue(v11, v30);
          if (Value && (v33 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("firstVersion"))) != 0)
          {
            CFNumberGetValue(v33, kCFNumberIntType, &valuePtr);
            v34 = valuePtr;
          }
          else
          {
            v34 = -1;
          }
          v46 = -1;
          v35 = (const __CFDictionary *)CFDictionaryGetValue(v11, v30);
          if (v35)
          {
            v36 = (const __CFNumber *)CFDictionaryGetValue(v35, CFSTR("lastVersion"));
            if (v36)
            {
              CFNumberGetValue(v36, kCFNumberIntType, &v46);
              v31 = v46;
            }
          }
          if (v34 > (int)v19 || v31 != -1 && v31 < (int)v19)
          {
            CFRelease(v30);
LABEL_33:
            v37 = v20[3];
            if (v37)
              v38 = CFStringCreateWithCString(0, v37, 0x600u);
            else
              v38 = CFSTR("NULL");
            a5 = v19;
            CFStringAppend(Mutable, CFSTR(", "));
            CFStringAppend(Mutable, v38);
            CFRelease(v38);
            goto LABEL_37;
          }
          CFStringAppend(Mutable, CFSTR(", "));
          CFStringAppend(Mutable, v30);
          CFRelease(v30);
          a5 = v19;
        }
        else
        {
          CFStringAppend(Mutable, CFSTR(", "));
          CFStringAppend(Mutable, v14);
        }
      }
LABEL_37:
      CFRelease(v14);
      v12 = v10 + 1;
      v9 = a4[4 * v10];
      if (!v9)
        goto LABEL_41;
    }
  }
  v11 = 0;
LABEL_41:
  v39 = CFStringCreateWithFormat(0, 0, CFSTR("INSERT INTO %@ (%@) SELECT %@ FROM %@_;"), a3, theString, Mutable, a2);
  CFRelease(Mutable);
  CFRelease(theString);
  if (v11)
    CFRelease(v11);
  if (v39)
  {
    CalPerformSQLWithConnection(a1, (uint64_t)v39);
    CFRelease(v39);
  }
}

void DropTempTable(_QWORD *a1, uint64_t a2)
{
  CFStringRef v3;
  CFStringRef v4;

  v3 = CFStringCreateWithFormat(0, 0, CFSTR("DROP TABLE IF EXISTS %@_;"), a2);
  if (v3)
  {
    v4 = v3;
    CalPerformSQLWithConnection(a1, (uint64_t)v3);
    CFRelease(v4);
  }
}

void CalMigrationCreateIndexes(_QWORD *a1, const char **a2, const char **a3, const char **a4)
{
  void *v7;
  __CFString *v8;

  v8 = (__CFString *)CFStringCreateWithCStringNoCopy(0, *a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  _CalMigrationCreateIndexes(a1, (uint64_t)v8, a3);
  if (a4)
  {
    -[__CFString stringByAppendingString:](v8, "stringByAppendingString:", CFSTR("Changes"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    _CalMigrationCreateIndexes(a1, (uint64_t)v7, a4);

  }
}

void CalMigrationCreateTriggers(_QWORD *a1, const char **a2, const char **a3)
{
  CFStringRef v5;
  const char *v6;
  const char **v7;
  CFStringRef v8;
  CFStringRef v9;
  CFStringRef v10;
  CFStringRef v11;

  v5 = CFStringCreateWithCStringNoCopy(0, *a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (a3)
  {
    v6 = *a3;
    if (*a3)
    {
      v7 = a3 + 2;
      do
      {
        if (*((_DWORD *)v7 - 1) == -1 && !*(_DWORD *)v7)
        {
          v8 = CFStringCreateWithCString(0, v6, 0x600u);
          v9 = CFStringCreateWithCString(0, v7[1], 0x600u);
          v10 = CFStringCreateWithFormat(0, 0, CFSTR("CREATE TRIGGER %@ %@ ON %@\nBEGIN\n%@\nEND;"),
                  v8,
                  CFSTR("AFTER DELETE"),
                  v5,
                  v9);
          if (v10)
          {
            v11 = v10;
            CalPerformSQLWithConnection(a1, (uint64_t)v10);
            CFRelease(v11);
          }
          CFRelease(v8);
          CFRelease(v9);
        }
        v6 = v7[2];
        v7 += 4;
      }
      while (v6);
    }
  }
  CFRelease(v5);
}

void CalMigrateTableFull2(_QWORD *a1, const char **a2, uint64_t a3, const char **a4, void *a5, const char **a6, void *a7, void *a8, const char **a9, const char **a10, const char **a11, int a12)
{
  void (**v18)(_QWORD);
  const char *v19;
  const __CFAllocator *v20;
  id v21;
  CFStringRef v22;
  CFStringRef v23;
  CFStringRef v24;
  CFStringRef v25;
  const char **v26;
  id v27;
  const char **v28;
  const char **v29;
  const char **v30;

  v26 = a4;
  v30 = a11;
  v29 = a10;
  v28 = a9;
  v27 = a7;
  v18 = a8;
  v19 = *a2;
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  v21 = a5;
  v22 = CFStringCreateWithCStringNoCopy(0, v19, 0x8000100u, v20);
  v23 = v22;
  if (!a3)
    a3 = (uint64_t)v22;
  if (a6)
  {
    v24 = CFStringCreateWithFormat(0, 0, CFSTR("%@Changes"), a3, v26, v27, a9, a10, a11);
    v25 = CFStringCreateWithFormat(0, 0, CFSTR("%@Changes"), v23);
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  CalMigrationDropIndexes(a1, v28);
  CalMigrationDropIndexes(a1, v29);
  CalMigrationDropTriggers(a1, v30);
  RenameTableToTemp(a1, a3);
  if (v24)
    RenameTableToTemp(a1, (uint64_t)v24);
  CPRecordStoreCreateTablesForClass();
  MoveTableData2((uint64_t)a1, a3, (uint64_t)v23, v26, v21, a12);

  if (a6)
    MoveTableData2((uint64_t)a1, (uint64_t)v24, (uint64_t)v25, a6, v27, a12);
  if (v18)
    v18[2](v18);
  DropTempTable(a1, a3);
  if (a6)
    DropTempTable(a1, (uint64_t)v24);
  CalMigrationCreateIndexes(a1, a2, v28, v29);
  CalMigrationCreateTriggers(a1, a2, v30);
  if (v24)
    CFRelease(v24);
  if (v25)
    CFRelease(v25);
  CFRelease(v23);

}

void MoveTableData2(uint64_t a1, uint64_t a2, uint64_t a3, const char **a4, void *a5, int a6)
{
  __CFString *Mutable;
  const char *v11;
  _QWORD *v12;
  int v13;
  CFStringRef v15;
  const char *v16;
  __CFString *v17;
  __CFString *v18;
  const char *v19;
  const __CFAllocator *v20;
  _QWORD *v21;
  CFStringRef v22;
  const char *v23;
  CFStringRef v24;
  const os_unfair_lock *Context;
  const os_unfair_lock *v26;
  uint64_t v27;
  __CFDictionary *v28;
  const char **v29;
  const CFDictionaryKeyCallBacks *v30;
  const CFDictionaryValueCallBacks *v31;
  __CFDictionary *v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFStringRef v35;
  const char *v36;
  CFStringRef v37;
  CFStringRef v38;
  const char *v39;
  uint64_t v40;
  const os_unfair_lock *v41;
  uint64_t v42;
  const os_unfair_lock *v43;
  uint64_t **v44;
  const __CFString *v46;
  id v47;
  CFStringRef v48;

  v47 = a5;
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, CFSTR("ROWID"));
  v11 = *a4;
  if (*a4)
  {
    v12 = a4 + 6;
    do
    {
      if (*((_DWORD *)v12 - 9) <= a6)
      {
        v13 = *((_DWORD *)v12 - 8);
        if (v13 == -1 || v13 >= a6)
        {
          v15 = CFStringCreateWithCString(0, v11, 0x600u);
          CFStringAppendFormat(Mutable, 0, CFSTR(", %@"), v15);
          CFRelease(v15);
        }
      }
      v16 = (const char *)*v12;
      v12 += 6;
      v11 = v16;
    }
    while (v16);
  }
  v48 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT %@ FROM %@_;"), Mutable, a2);
  CFRelease(Mutable);
  v17 = CFStringCreateMutable(0, 0);
  v18 = CFStringCreateMutable(0, 0);
  CFStringAppend(v17, CFSTR("ROWID"));
  CFStringAppend(v18, CFSTR("?"));
  v19 = *a4;
  if (*a4)
  {
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v21 = a4 + 6;
    do
    {
      if (*((_DWORD *)v21 - 8) == -1)
      {
        v22 = CFStringCreateWithCStringNoCopy(0, v19, 0x600u, v20);
        CFStringAppendFormat(v17, 0, CFSTR(", %@"), v22);
        CFStringAppend(v18, CFSTR(", ?"));
        CFRelease(v22);
      }
      v23 = (const char *)*v21;
      v21 += 6;
      v19 = v23;
    }
    while (v23);
  }
  v24 = CFStringCreateWithFormat(0, 0, CFSTR("INSERT INTO %@ (%@) VALUES(%@);"), a3, v17, v18);
  CFRelease(v17);
  CFRelease(v18);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)(*(_QWORD *)a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (CPSqliteConnectionStatementForSQL())
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a1)
        {
          if (*(_QWORD *)(*(_QWORD *)a1 + 104))
          {
            v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v26)
              os_unfair_lock_assert_owner(v26 + 20);
          }
        }
      }
    }
    v27 = CPSqliteConnectionStatementForSQL();
    if (v27)
    {
      v44 = (uint64_t **)v27;
      v46 = v24;
      v28 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (*a4)
      {
        v29 = a4 + 3;
        v30 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
        v31 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        do
        {
          v32 = CFDictionaryCreateMutable(0, 0, v30, v31);
          v33 = CFNumberCreate(0, kCFNumberIntType, (char *)v29 - 12);
          CFDictionaryAddValue(v32, CFSTR("firstVersion"), v33);
          CFRelease(v33);
          if (*((_DWORD *)v29 - 2) != -1)
          {
            v34 = CFNumberCreate(0, kCFNumberIntType, v29 - 1);
            CFDictionaryAddValue(v32, CFSTR("lastVersion"), v34);
            CFRelease(v34);
          }
          if (*v29)
          {
            v35 = CFStringCreateWithCString(0, *v29, 0x600u);
            CFDictionaryAddValue(v32, CFSTR("oldName"), v35);
            CFRelease(v35);
          }
          v36 = v29[1];
          if (v36)
          {
            v37 = CFStringCreateWithCString(0, v36, 0x600u);
            CFDictionaryAddValue(v32, CFSTR("defaultText"), v37);
            CFRelease(v37);
          }
          v38 = CFStringCreateWithCString(0, *(v29 - 3), 0x600u);
          CFDictionaryAddValue(v28, v38, v32);
          CFRelease(v38);
          CFRelease(v32);
          v39 = v29[3];
          v29 += 6;
        }
        while (v39);
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*v44)
        {
          v40 = **v44;
          if (v40)
          {
            if (*(_QWORD *)(v40 + 104))
            {
              v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v41)
                os_unfair_lock_assert_owner(v41 + 20);
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      v24 = v46;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v44)
        {
          v42 = **v44;
          if (v42)
          {
            if (*(_QWORD *)(v42 + 104))
            {
              v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v43)
                os_unfair_lock_assert_owner(v43 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
      CFRelease(v28);
    }
  }
  CFRelease(v48);
  CFRelease(v24);

}

void CalMigrateTable(_QWORD *a1, uint64_t a2, uint64_t a3, const char **a4, uint64_t a5)
{
  uint64_t v6;

  if (a2)
    v6 = a2;
  else
    v6 = a3;
  MoveTableData(a1, v6, a3, a4, a5);
  DropTempTable(a1, v6);
}

void _CalMigrationCreateIndexes(_QWORD *a1, uint64_t a2, const char **a3)
{
  const char *v4;
  _QWORD *v6;
  CFStringRef v7;
  CFStringRef v8;
  const char *v9;
  void *v10;
  const void *v11;
  const __CFString *v12;
  const __CFString *v13;
  CFStringRef v14;
  CFStringRef v15;
  const char *v16;

  if (a3)
  {
    v4 = *a3;
    if (*a3)
    {
      v6 = a3 + 5;
      do
      {
        if (*((_DWORD *)v6 - 6) == -1)
        {
          v7 = CFStringCreateWithCString(0, v4, 0x600u);
          v8 = CFStringCreateWithCString(0, (const char *)*(v6 - 2), 0x600u);
          v9 = (const char *)*(v6 - 1);
          if (v9)
            v10 = (void *)CFStringCreateWithCString(0, v9, 0x600u);
          else
            v10 = (void *)CFRetain(&stru_1E4F941C0);
          v11 = v10;
          v12 = CFSTR("UNIQUE ");
          if (!*((_BYTE *)v6 - 32))
            v12 = &stru_1E4F941C0;
          if (*(v6 - 1))
            v13 = CFSTR(" WHERE ");
          else
            v13 = &stru_1E4F941C0;
          v14 = CFStringCreateWithFormat(0, 0, CFSTR("CREATE %@INDEX %@ on %@(%@)%@%@;"), v12, v7, a2, v8, v13, v10);
          if (v14)
          {
            v15 = v14;
            CalPerformSQLWithConnection(a1, (uint64_t)v14);
            CFRelease(v15);
          }
          CFRelease(v7);
          CFRelease(v8);
          CFRelease(v11);
        }
        v16 = (const char *)*v6;
        v6 += 5;
        v4 = v16;
      }
      while (v16);
    }
  }
}

uint64_t MigrateRow(uint64_t a1, uint64_t a2)
{
  __CFDictionary *Mutable;
  int v5;
  int v6;
  int v7;
  const void *v8;
  const char *v9;
  CFStringRef v10;
  const void *v11;
  CFNumberType v12;
  void *v13;
  const unsigned __int8 *v14;
  unsigned int v15;
  const UInt8 *v16;
  sqlite3_stmt *v17;
  int v18;
  const char **v19;
  const char *v20;
  uint64_t v21;
  const __CFAllocator *v22;
  int v23;
  CFStringRef v24;
  const void *Value;
  CFTypeID v26;
  int v27;
  CFTypeID v28;
  const char *v29;
  uint64_t v30;
  const char **v31;
  const char *v32;
  CFStringRef v33;
  const char *v34;
  CFTypeID v35;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFTypeID v38;
  double v39;
  int v40;
  sqlite3_stmt *v41;
  int v42;
  int v43;
  uint64_t **v44;
  BOOL v45;
  uint64_t v46;
  const os_unfair_lock *Context;
  uint64_t **v48;
  BOOL v49;
  uint64_t v50;
  const os_unfair_lock *v51;
  double valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8));
  if (v5 >= 1)
  {
    v6 = v5;
    v7 = 0;
    v8 = (const void *)*MEMORY[0x1E0C9B0D0];
    do
    {
      v9 = sqlite3_column_name(*(sqlite3_stmt **)(a1 + 8), v7);
      v10 = CFStringCreateWithCString(0, v9, 0x8000100u);
      v11 = v8;
      switch(sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), v7))
      {
        case 1:
          LODWORD(valuePtr) = 0;
          LODWORD(valuePtr) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), v7);
          v12 = kCFNumberIntType;
          goto LABEL_6;
        case 2:
          valuePtr = 0.0;
          valuePtr = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), v7);
          v12 = kCFNumberDoubleType;
LABEL_6:
          v13 = CFNumberCreate(0, v12, &valuePtr);
          break;
        case 3:
          v14 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), v7);
          v11 = v8;
          if (!v14)
            goto LABEL_12;
          v13 = (void *)CFStringCreateWithCString(0, (const char *)v14, 0x8000100u);
          break;
        case 4:
          v15 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), v7);
          v16 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 8), v7);
          v11 = v8;
          if (!v16)
            goto LABEL_12;
          v13 = CFDataCreate(0, v16, v15);
          break;
        case 5:
          goto LABEL_12;
        default:
          goto LABEL_14;
      }
      v11 = v13;
LABEL_12:
      if (v11)
      {
        CFDictionarySetValue(Mutable, v10, v11);
        CFRelease(v11);
      }
LABEL_14:
      CFRelease(v10);
      ++v7;
    }
    while (v6 != v7);
  }
  v17 = *(sqlite3_stmt **)(*(_QWORD *)(a2 + 24) + 8);
  v18 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  sqlite3_bind_int(v17, 1, v18);
  v19 = *(const char ***)(a2 + 8);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v23 = 2;
    while (LODWORD(v19[v21 + 2]) != -1)
    {
LABEL_43:
      v20 = v19[v21 + 6];
      v21 += 6;
      if (!v20)
        goto LABEL_54;
    }
    v24 = CFStringCreateWithCStringNoCopy(0, v20, 0x8000100u, v22);
    Value = CFDictionaryGetValue(Mutable, v24);
    if (Value)
      goto LABEL_19;
    v30 = *(_QWORD *)(a2 + 40);
    if (v30)
    {
      Value = (const void *)(*(uint64_t (**)(uint64_t, CFStringRef, __CFDictionary *))(v30 + 16))(v30, v24, Mutable);
      if (Value)
      {
LABEL_20:
        v26 = CFGetTypeID(Value);
        if (v26 == CFNumberGetTypeID())
        {
          v27 = (int)v19[v21 + 1];
          if (v27 == 1)
          {
            LODWORD(valuePtr) = 0;
            CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr);
            sqlite3_bind_int(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 24) + 8), v23, SLODWORD(valuePtr));
          }
          else if (v27 == 2)
          {
            valuePtr = 0.0;
            CFNumberGetValue((CFNumberRef)Value, kCFNumberDoubleType, &valuePtr);
            sqlite3_bind_double(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 24) + 8), v23, valuePtr);
          }
          goto LABEL_41;
        }
        v28 = CFGetTypeID(Value);
        if (v28 == CFStringGetTypeID())
        {
          v29 = (const char *)_CPCreateUTF8StringFromCFString();
          sqlite3_bind_text(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 24) + 8), v23, v29, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
LABEL_41:
          CFRelease(Value);
          goto LABEL_42;
        }
        v35 = CFGetTypeID(Value);
        if (v35 == CFDataGetTypeID())
        {
          BytePtr = CFDataGetBytePtr((CFDataRef)Value);
          Length = CFDataGetLength((CFDataRef)Value);
          if (Length == (int)Length)
          {
            sqlite3_bind_blob(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 24) + 8), v23, BytePtr, Length, 0);
            goto LABEL_41;
          }
        }
        else
        {
          v38 = CFGetTypeID(Value);
          if (v38 != CFNullGetTypeID())
            goto LABEL_41;
        }
        sqlite3_bind_null(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 24) + 8), v23);
        goto LABEL_41;
      }
    }
    v31 = &v19[v21];
    v32 = v19[v21 + 3];
    if (!v32)
      goto LABEL_33;
    if (*((_DWORD *)v31 + 3) > *(_DWORD *)(a2 + 16))
    {
      v33 = CFStringCreateWithCStringNoCopy(0, v32, 0x8000100u, v22);
      Value = CFDictionaryGetValue(Mutable, v33);
      CFRelease(v33);
      if (Value)
      {
LABEL_19:
        CFRetain(Value);
        goto LABEL_20;
      }
      if (!v31[3])
        goto LABEL_33;
    }
    if (*((_DWORD *)v31 + 3) <= *(_DWORD *)(a2 + 16))
    {
LABEL_33:
      v34 = v31[4];
      if (v34)
      {
        sqlite3_bind_text(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 24) + 8), v23, v34, -1, 0);
        goto LABEL_42;
      }
      v39 = *(double *)&v19[v21 + 5];
      v40 = (int)v19[v21 + 1];
      if (fabs(v39) >= 2.22044605e-16)
      {
        v41 = *(sqlite3_stmt **)(*(_QWORD *)(a2 + 24) + 8);
        if (v40 != 1)
        {
          sqlite3_bind_double(v41, v23, v39);
          goto LABEL_42;
        }
        v43 = (int)v39;
        v42 = v23;
        goto LABEL_51;
      }
      if ((v40 - 3) < 2)
      {
        sqlite3_bind_null(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 24) + 8), v23);
        goto LABEL_42;
      }
      if ((v40 - 1) <= 1)
      {
        v41 = *(sqlite3_stmt **)(*(_QWORD *)(a2 + 24) + 8);
        v42 = v23;
        v43 = 0;
LABEL_51:
        sqlite3_bind_int(v41, v42, v43);
      }
    }
LABEL_42:
    CFRelease(v24);
    ++v23;
    v19 = *(const char ***)(a2 + 8);
    goto LABEL_43;
  }
LABEL_54:
  v44 = *(uint64_t ***)(a2 + 24);
  if (CDBLockingAssertionsEnabled)
    v45 = v44 == 0;
  else
    v45 = 1;
  if (!v45)
  {
    if (*v44)
    {
      v46 = **v44;
      if (v46)
      {
        if (*(_QWORD *)(v46 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPSqliteStatementPerform();
  v48 = *(uint64_t ***)(a2 + 24);
  if (CDBLockingAssertionsEnabled)
    v49 = v48 == 0;
  else
    v49 = 1;
  if (!v49)
  {
    if (*v48)
    {
      v50 = **v48;
      if (v50)
      {
        if (*(_QWORD *)(v50 + 104))
        {
          v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v51)
            os_unfair_lock_assert_owner(v51 + 20);
        }
      }
    }
  }
  CPSqliteStatementReset();
  CFRelease(Mutable);
  return 0;
}

void _CalDatabaseRestoreNotification()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("kCalDatabaseRestoredNotification"), 0);

}

uint64_t CalDatabaseBackupDatabaseFile(os_unfair_lock *a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412290;
    v9 = v3;
    _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_DEFAULT, "Beginning backup of database file to %@", (uint8_t *)&v8, 0xCu);
  }
  v5 = CalDatabaseBackupCore(a1, v3, 0);
  v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 67109120;
    LODWORD(v9) = v5;
    _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_DEFAULT, "Finished backup of database file with result = %{BOOL}d", (uint8_t *)&v8, 8u);
  }

  return v5;
}

uint64_t CalDatabaseBackupCore(os_unfair_lock *a1, void *a2, int a3)
{
  id v4;
  void *v5;
  int v6;
  uint64_t v7;
  id v8;
  uint64_t RecordStore;
  BOOL v10;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  id v27;
  id v28;
  id v29;
  int v30;
  void *v31;
  sqlite3 *v32;
  NSObject *v33;
  const char *v34;
  char v35;
  NSObject *v36;
  NSObject *v37;
  BOOL v38;
  NSObject *v39;
  NSObject *v40;
  const os_unfair_lock *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  char v46;
  id v47;
  NSObject *v48;
  void *v49;
  void *v50;
  char v51;
  char v52;
  void *v53;
  char v54;
  id v55;
  NSObject *v56;
  id obj;
  id v59;
  sqlite3 **v60;
  void *v61;
  int v62;
  void *v63;
  id v65;
  char v66;
  id v67;
  id v68;
  sqlite3 *ppDb[2];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint8_t v73[4];
  id v74;
  __int16 v75;
  id v76;
  uint8_t buf[4];
  const char *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (!CalDatabaseValidateBackupDestinationURLForDatabaseFile(v4))
  {
    v7 = 0;
    goto LABEL_82;
  }
  v62 = a3;
  if (a3)
  {
    objc_msgSend(v4, "URLByDeletingLastPathComponent");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D0C258], "attachmentContainerWithBaseURL:", v5);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = CalDatabaseValidateBackupDestinationURLForDatabaseFile(v63);

    if (!v6)
      goto LABEL_80;
  }
  else
  {
    v63 = 0;
  }
  CalDatabaseLockForThread(a1);
  v8 = v4;
  v61 = v8;
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v10 = RecordStore == 0;
  else
    v10 = 1;
  if (!v10)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v13 = Database == 0;
  else
    v13 = 1;
  if (!v13)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v14)
        os_unfair_lock_assert_owner(v14 + 20);
    }
  }
  v60 = (sqlite3 **)CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (!v60)
  {
    v36 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v36, OS_LOG_TYPE_ERROR, "Failed to open database connection for source database while attempting to backup", buf, 2u);
    }
    v35 = 0;
    goto LABEL_60;
  }
  if (!__CalDatabaseBeginReadTransaction((uint64_t)a1, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabaseBackup.m:224"))
  {
    v37 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v37, OS_LOG_TYPE_ERROR, "Failed to start transaction while attempting to backup", buf, 2u);
    }
    v35 = 0;
    goto LABEL_54;
  }
  if (!v62)
    goto LABEL_35;
  objc_msgSend(v8, "URLByDeletingLastPathComponent");
  v59 = (id)objc_claimAutoreleasedReturnValue();
  v71 = 0u;
  v72 = 0u;
  *(_OWORD *)ppDb = 0u;
  v70 = 0u;
  obj = (id)_CalDatabaseCopyOfAllAttachmentFilesInStore((uint64_t)a1);
  v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", ppDb, buf, 16);
  if (!v15)
    goto LABEL_34;
  v16 = *(_QWORD *)v70;
  while (2)
  {
    for (i = 0; i != v15; ++i)
    {
      if (*(_QWORD *)v70 != v16)
        objc_enumerationMutation(obj);
      v18 = (void *)*((_QWORD *)ppDb[1] + i);
      _CalColorGetRecordID((uint64_t)v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v19)
      {
        v20 = (void *)_CalAttachmentFileCopyLocalURL(v18);
        objc_msgSend(v59, "URLByAppendingPathComponent:", v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "URLByDeletingLastPathComponent");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "path");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = CPFileBuildDirectoriesToPath();

        if ((v24 & 1) != 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v68 = 0;
          v26 = objc_msgSend(v25, "copyItemAtURL:toURL:error:", v20, v21, &v68);
          v27 = v68;

          if ((v26 & 1) != 0)
          {

            continue;
          }
          v40 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v73 = 138412546;
            v74 = v20;
            v75 = 2112;
            v76 = v27;
            _os_log_impl(&dword_1A5CCB000, v40, OS_LOG_TYPE_ERROR, "Failed to copy attachment (%@): %@", v73, 0x16u);
          }

        }
        else
        {
          v39 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v73 = 138412290;
            v74 = v21;
            _os_log_impl(&dword_1A5CCB000, v39, OS_LOG_TYPE_ERROR, "Failed to create a directory for copying attachment: %@.", v73, 0xCu);
          }
        }

        v35 = 0;
        goto LABEL_53;
      }
    }
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", ppDb, buf, 16);
    if (v15)
      continue;
    break;
  }
LABEL_34:

  v8 = v61;
LABEL_35:
  v28 = v8;
  ppDb[0] = 0;
  objc_msgSend(v28, "path");
  v29 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v30 = sqlite3_open_v2((const char *)objc_msgSend(v29, "UTF8String"), ppDb, 6, 0);

  if (v30)
  {
    v31 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v32 = ppDb[0];
      v33 = v31;
      v34 = sqlite3_errmsg(v32);
      *(_DWORD *)buf = 136446210;
      v78 = v34;
      _os_log_impl(&dword_1A5CCB000, v33, OS_LOG_TYPE_ERROR, "Failed to open destination database for backup: %{public}s", buf, 0xCu);

    }
    sqlite3_close(ppDb[0]);
    v35 = 0;
  }
  else
  {
    v38 = _CalDatabaseBackupDatabaseFileWithSourceAndDestinationConnections(v60[1], ppDb[0]);
    v35 = _CalDatabaseVacuumAndCloseDBConnection(ppDb[0], v28, 1) & v38;
  }

LABEL_53:
  v8 = v61;
  __CalDatabaseRollbackTransaction((uint64_t)a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabaseBackup.m:241");
LABEL_54:
  if (CDBLockingAssertionsEnabled)
  {
    if (*v60)
    {
      if (*((_QWORD *)*v60 + 13))
      {
        v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v41)
          os_unfair_lock_assert_owner(v41 + 20);
      }
    }
  }
  CPSqliteDatabaseReleaseSqliteConnection();
LABEL_60:

  CalDatabaseUnlockForThread(a1);
  if ((v35 & 1) != 0)
  {
    v7 = 1;
    goto LABEL_81;
  }
  v42 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v73 = 0;
    _os_log_impl(&dword_1A5CCB000, v42, OS_LOG_TYPE_DEFAULT, "Cleaning up failed backup database output", v73, 2u);
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "path");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v43, "fileExistsAtPath:", v44) & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = 0;
    v46 = objc_msgSend(v45, "removeItemAtURL:error:", v61, &v67);
    v47 = v67;

    if ((v46 & 1) == 0)
    {
      v48 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v73 = 138412290;
        v74 = v47;
        _os_log_impl(&dword_1A5CCB000, v48, OS_LOG_TYPE_ERROR, "Failed to clean up backup database output: %@", v73, 0xCu);
      }
    }
  }
  else
  {

    v47 = 0;
  }
  v66 = 0;
  if (v62)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "path");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = objc_msgSend(v49, "fileExistsAtPath:isDirectory:", v50, &v66);
    if (v66)
      v52 = v51;
    else
      v52 = 0;
    if ((v52 & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = v47;
      v54 = objc_msgSend(v53, "removeItemAtURL:error:", v63, &v65);
      v55 = v65;

      if ((v54 & 1) == 0)
      {
        v56 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v73 = 138412290;
          v74 = v55;
          _os_log_impl(&dword_1A5CCB000, v56, OS_LOG_TYPE_ERROR, "Failed to clean up backup attachments output: %@", v73, 0xCu);
        }
      }
      v47 = v55;
    }
    else
    {

    }
  }

LABEL_80:
  v7 = 0;
LABEL_81:

LABEL_82:
  return v7;
}

void sub_1A5D010D0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1A5D00DF4);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t CalDatabaseBackupDatabaseFileAndAttachments(os_unfair_lock *a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412290;
    v9 = v3;
    _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_DEFAULT, "Beginning backup of database file and attachments to %@", (uint8_t *)&v8, 0xCu);
  }
  v5 = CalDatabaseBackupCore(a1, v3, 1);
  v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 67109120;
    LODWORD(v9) = v5;
    _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_DEFAULT, "Finished backup of database file and attachments with result = %{BOOL}d", (uint8_t *)&v8, 8u);
  }

  return v5;
}

uint64_t CalDatabaseBackupToICBU(os_unfair_lock_s *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  BOOL v24;
  id v25;
  const void *v26;
  CFMutableArrayRef v27;
  __CFArray *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  BOOL v36;
  void *v37;
  NSObject *v38;
  int UID;
  void *v40;
  NSObject *v41;
  int v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  char v59;
  NSObject *v60;
  NSObject *v61;
  void *v62;
  void *v63;
  void *v64;
  char v65;
  id v66;
  NSObject *v67;
  NSObject *v68;
  CFTypeRef cf;
  void *v70;
  uint64_t v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  _BYTE *v81;
  id v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _QWORD v87[4];
  _QWORD v88[4];
  uint8_t v89[4];
  void *v90;
  _BYTE v91[24];
  char v92;
  uint8_t buf[4];
  id v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v73 = a3;
  v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v94 = v5;
    _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_DEFAULT, "Beginning ICBU backup to %@", buf, 0xCu);
  }
  v7 = v5;
  v8 = v7;
  if (!v7)
  {
    v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v91 = 0;
      v16 = "Nil path given for backup destination";
      v17 = v15;
      v18 = 2;
LABEL_15:
      _os_log_impl(&dword_1A5CCB000, v17, OS_LOG_TYPE_ERROR, v16, v91, v18);
    }
LABEL_16:

    goto LABEL_23;
  }
  v71 = (uint64_t)a1;
  if ((objc_msgSend(v7, "isFileURL") & 1) == 0)
  {
    v19 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v91 = 138412290;
      *(_QWORD *)&v91[4] = v8;
      v16 = "Backup destination URL is not a file URL: %@";
      v17 = v19;
      v18 = 12;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = 0;
  objc_msgSend(v8, "path");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v9, "fileExistsAtPath:isDirectory:", v10, &v76);

  if ((v11 & 1) == 0)
  {
    v20 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v91 = 138412290;
      *(_QWORD *)&v91[4] = v8;
      v21 = "Backup destination URL does not exist: %@";
LABEL_21:
      _os_log_impl(&dword_1A5CCB000, v20, OS_LOG_TYPE_ERROR, v21, v91, 0xCu);
    }
LABEL_22:

    goto LABEL_23;
  }
  if (!v76)
  {
    v20 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v91 = 138412290;
      *(_QWORD *)&v91[4] = v8;
      v21 = "Backup destination URL is not a directory: %@";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  *(_QWORD *)v91 = 0;
  *(_QWORD *)&v91[8] = v91;
  *(_QWORD *)&v91[16] = 0x2020000000;
  v92 = 0;
  v77 = MEMORY[0x1E0C809B0];
  v78 = 3221225472;
  v79 = __CalDatabaseValidateBackupDestinationURLForICBU_block_invoke;
  v80 = &unk_1E4F84D60;
  v81 = v91;
  objc_msgSend(v9, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v8, 0, 0, &v77);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v13 = v12;
  if (objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v83, buf, 16))
  {
    v14 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v89 = 138412290;
      v90 = v8;
      _os_log_impl(&dword_1A5CCB000, v14, OS_LOG_TYPE_ERROR, "Destination directory is not empty: %@", v89, 0xCu);
    }

    _Block_object_dispose(v91, 8);
    goto LABEL_23;
  }

  v24 = *(_BYTE *)(*(_QWORD *)&v91[8] + 24) == 0;
  _Block_object_dispose(v91, 8);

  if (!v24)
  {
LABEL_23:
    v22 = 0;
    goto LABEL_24;
  }
  objc_msgSend(v8, "URLByAppendingPathComponent:", CFSTR("Calendar.sqlitedb"));
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  if (!CalDatabaseBackupDatabaseFileAndAttachments(a1, v70))
  {
    v48 = 0;
LABEL_57:
    v61 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v61, OS_LOG_TYPE_DEFAULT, "Cleaning up failed backup output", buf, 2u);
    }
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "path");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v62, "fileExistsAtPath:", v63) & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v74 = v48;
      v65 = objc_msgSend(v64, "removeItemAtURL:error:", v8, &v74);
      v66 = v74;

      if ((v65 & 1) == 0)
      {
        v67 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v94 = v66;
          _os_log_impl(&dword_1A5CCB000, v67, OS_LOG_TYPE_ERROR, "Failed to clean up backup output: %@", buf, 0xCu);
        }
      }
      v22 = 0;
      v48 = v66;
    }
    else
    {

      v22 = 0;
    }
    goto LABEL_65;
  }
  v25 = v73;
  v26 = CalDatabaseCopySubscribedCalendarStore(a1);
  cf = v26;
  if (v26)
  {
    v27 = CalStoreCopyCalendars((uint64_t)v26);
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", -[__CFArray count](v27, "count"));
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v28 = v27;
    v29 = -[__CFArray countByEnumeratingWithState:objects:count:](v28, "countByEnumeratingWithState:objects:count:", &v83, buf, 16);
    if (v29)
    {
      v30 = *(_QWORD *)v84;
      do
      {
        for (i = 0; i != v29; ++i)
        {
          if (*(_QWORD *)v84 != v30)
            objc_enumerationMutation(v28);
          v32 = *(_QWORD *)(*((_QWORD *)&v83 + 1) + 8 * i);
          if (!CalCalendarIsHolidaySubscribedCalendar(v32))
          {
            v33 = (void *)CalCalendarCopySubCalAccountID(v32);
            objc_msgSend(v25, "accountWithIdentifier:", v33, cf, v70);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            if (v34)
            {
              objc_msgSend(v72, "objectForKeyedSubscript:", v33);
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              v36 = v35 == 0;

              if (v36)
              {
                v43 = (void *)objc_opt_new();
                CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup();
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                v77 = MEMORY[0x1E0C809B0];
                v78 = 3221225472;
                v79 = __CalDatabaseBackupLocalSubscribedAccountInfos_block_invoke;
                v80 = &unk_1E4F84D88;
                v81 = v34;
                v82 = v43;
                v45 = v43;
                objc_msgSend(v44, "enumerateKeysAndObjectsUsingBlock:", &v77);

                v46 = (void *)objc_msgSend(v45, "copy");
                objc_msgSend(v72, "setObject:forKeyedSubscript:", v46, v33);

              }
              else
              {
                v37 = (void *)CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  v38 = v37;
                  UID = CalCalendarGetUID();
                  *(_DWORD *)v91 = 138543618;
                  *(_QWORD *)&v91[4] = v33;
                  *(_WORD *)&v91[12] = 1024;
                  *(_DWORD *)&v91[14] = UID;
                  _os_log_impl(&dword_1A5CCB000, v38, OS_LOG_TYPE_ERROR, "Multiple local subscribed calendar accounts have the same account identifier (%{public}@). This one (ROWID=%d) will not be included in the Info.plist for backup", v91, 0x12u);

                }
              }
            }
            else
            {
              v40 = (void *)CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                v41 = v40;
                v42 = CalCalendarGetUID();
                *(_DWORD *)v91 = 67109378;
                *(_DWORD *)&v91[4] = v42;
                *(_WORD *)&v91[8] = 2114;
                *(_QWORD *)&v91[10] = v33;
                _os_log_impl(&dword_1A5CCB000, v41, OS_LOG_TYPE_ERROR, "Account not found for subscribed calendar (ROWID=%d): %{public}@. Will not be included in Info.plist for backup", v91, 0x12u);

              }
            }

          }
        }
        v29 = -[__CFArray countByEnumeratingWithState:objects:count:](v28, "countByEnumeratingWithState:objects:count:", &v83, buf, 16);
      }
      while (v29);
    }

    CFRelease(cf);
    v47 = (void *)objc_msgSend(v72, "copy");

  }
  else
  {
    v47 = 0;
  }

  CalDatabaseGetPreferences(v71);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = objc_msgSend(v49, "get_defaultCalendarDatabaseID");
  v51 = (void *)MEMORY[0x1E0C9AA70];
  v52 = (void *)MEMORY[0x1E0C9AA70];
  if (!v50)
  {
    v52 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 3);
    objc_msgSend(v49, "get_defaultCalendarID");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v53, CFSTR("defaultCalendarID"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v49, "get_defaultCalendarStoreUID"));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "setObject:forKeyedSubscript:", v54, CFSTR("defaultCalendarStoreUID"));

  }
  v88[0] = CFSTR("3.0");
  v87[0] = CFSTR("version");
  v87[1] = CFSTR("date");
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v88[1] = v55;
  if (v47)
    v56 = v47;
  else
    v56 = v51;
  v87[2] = CFSTR("LocalSubscribedCalendarAccounts");
  v87[3] = CFSTR("preferences");
  v88[2] = v56;
  v88[3] = v52;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v88, v87, 4, cf);
  v57 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "URLByAppendingPathComponent:", CFSTR("Info.plist"));
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = 0;
  v59 = objc_msgSend(v57, "writeToURL:error:", v58, &v75);
  v48 = v75;
  if ((v59 & 1) == 0)
  {
    v60 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v94 = v48;
      _os_log_impl(&dword_1A5CCB000, v60, OS_LOG_TYPE_ERROR, "Failed to create destination .icbu Info.plist file: %@", buf, 0xCu);
    }

    goto LABEL_57;
  }

  v22 = 1;
LABEL_65:
  v68 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v94) = v22;
    _os_log_impl(&dword_1A5CCB000, v68, OS_LOG_TYPE_DEFAULT, "Finished ICBU backup with result = %{BOOL}d", buf, 8u);
  }

LABEL_24:
  return v22;
}

void sub_1A5D01D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseRestoreFromBackupDatabaseFile(uint64_t a1, void *a2, void *a3, int *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  int v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 138412290;
    v15 = v7;
    _os_log_impl(&dword_1A5CCB000, v9, OS_LOG_TYPE_DEFAULT, "Beginning restore of database file from %@", (uint8_t *)&v14, 0xCu);
  }
  if (v8)
    v10 = 3;
  else
    v10 = 0;
  v11 = CalDatabaseRestoreDatabaseCore(a1, v7, 0, v8, v10, a4);
  v12 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 67109120;
    LODWORD(v15) = v11;
    _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_DEFAULT, "Finished restore of database file with result = %{BOOL}d", (uint8_t *)&v14, 8u);
  }

  return v11;
}

uint64_t CalDatabaseRestoreDatabaseCore(uint64_t a1, void *a2, void *a3, void *a4, char a5, int *a6)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  void *v25;
  id v26;
  char *v27;
  char *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  char v38;
  id v39;
  os_unfair_lock_s *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  char v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t j;
  uint64_t v58;
  int Type;
  void *v60;
  void *v61;
  _BOOL4 v62;
  NSObject *v63;
  CFMutableArrayRef v64;
  __CFArray *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t k;
  void *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  _BOOL4 v73;
  NSObject *v74;
  NSObject *v75;
  const char *v76;
  NSObject *v77;
  char v78;
  id v79;
  id v80;
  int v81;
  void *v82;
  sqlite3 *v83;
  NSObject *v84;
  const char *v85;
  uint64_t v86;
  const char *v87;
  NSObject *v88;
  uint32_t v89;
  NSObject *v90;
  void *v91;
  sqlite3 *v92;
  NSObject *v93;
  const char *v94;
  int v95;
  void *v96;
  NSObject *v97;
  const char *v98;
  uint64_t v99;
  NSObject *v100;
  void *v101;
  char v102;
  sqlite3 *v103;
  NSObject *v104;
  const os_unfair_lock *Context;
  int LastSequenceNumber;
  int v107;
  id v108;
  __CFString *v109;
  void *v110;
  uint64_t v111;
  void *v112;
  void *v113;
  int *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t m;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  char v126;
  void *v127;
  char v128;
  id v129;
  void *v130;
  NSObject *v131;
  NSObject *v132;
  char v133;
  uint64_t v134;
  NSObject *v135;
  const char *v136;
  uint32_t v137;
  uint64_t v138;
  NSObject *v139;
  NSObject *v140;
  void *v141;
  char v142;
  id v143;
  NSObject *v144;
  const os_unfair_lock *v145;
  uint64_t Database;
  const os_unfair_lock *v147;
  uint64_t v148;
  uint64_t v149;
  const os_unfair_lock *v150;
  int v151;
  NSObject *v152;
  NSObject *v153;
  const char *v154;
  int RestoreGeneration;
  int v156;
  int v157;
  id v158;
  id v159;
  os_unfair_lock_s *cf;
  id v161;
  void *v162;
  void *v163;
  id v164;
  id v167;
  void *v168;
  id v169;
  id v170;
  id obj;
  char obja;
  id objb;
  id v174;
  char v175;
  void *v176;
  id v177;
  id v178;
  id v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  id v184;
  sqlite3 *ppDb[2];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  _BYTE v189[12];
  uint8_t v190[32];
  __int128 v191;
  __int128 v192;
  __int128 buf;
  uint64_t (*v194)(uint64_t);
  void *v195;
  uint64_t v196;
  int v197;
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v169 = a3;
  v170 = a4;
  v10 = v9;
  v11 = v10;
  v176 = v10;
  if (!v10)
  {
    v17 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(buf) = 0;
    v18 = "Nil path given for restore database";
    v19 = v17;
    v20 = 2;
LABEL_11:
    _os_log_impl(&dword_1A5CCB000, v19, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&buf, v20);
    goto LABEL_12;
  }
  if ((objc_msgSend(v10, "isFileURL") & 1) == 0)
  {
    v21 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v11;
    v18 = "Restore database backup URL is not a file URL: %@";
    v19 = v21;
    v20 = 12;
    goto LABEL_11;
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(ppDb[0]) = 0;
  objc_msgSend(v176, "path");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v12, "fileExistsAtPath:isDirectory:", v13, ppDb);

  if ((v14 & 1) == 0)
  {
    v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v176;
      v16 = "Restore database backup URL is not an existing file: %@";
      goto LABEL_15;
    }
LABEL_16:

    v22 = 0;
    v11 = v176;
    goto LABEL_17;
  }
  if (LOBYTE(ppDb[0]))
  {
    v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v176;
      v16 = "Restore database backup URL is a directory: %@";
LABEL_15:
      _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&buf, 0xCu);
      goto LABEL_16;
    }
    goto LABEL_16;
  }

  v167 = v176;
  v174 = v169;
  v164 = v170;
  CalTemporaryDirectory();
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "stringByAppendingPathComponent:", CFSTR("StagedBackup.XXXXXXXX"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v26 = objc_retainAutorelease(v25);
  v27 = strdup((const char *)objc_msgSend(v26, "fileSystemRepresentation"));
  if (!v27)
    goto LABEL_80;
  v28 = v27;
  if (!mkdtemp(v27))
  {
    free(v28);
LABEL_80:

LABEL_81:
    v77 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A5CCB000, v77, OS_LOG_TYPE_ERROR, "Failed to create temp directory for staging backup for restore", (uint8_t *)&buf, 2u);
    }
    goto LABEL_108;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "stringByAppendingString:", CFSTR("/"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  free(v28);
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v30);
  v163 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v163)
    goto LABEL_81;
  v31 = *MEMORY[0x1E0D0C470];
  v32 = v167;
  objc_msgSend(v163, "URLByAppendingPathComponent:", v31);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  CalDatabaseURLByAddingSuffix(v32, CFSTR("-wal"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "path");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend(v34, "fileExistsAtPath:", v36);

  if (v37)
  {
    v38 = CalDatabaseBackupRawDatabase(v32, v33);

    if ((v38 & 1) == 0)
      goto LABEL_102;
    goto LABEL_23;
  }
  *(_QWORD *)v190 = 0;
  v78 = objc_msgSend(v34, "copyItemAtURL:toURL:error:", v32, v33, v190);

  v79 = *(id *)v190;
  if ((v78 & 1) == 0)
  {
    v86 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v79;
      v87 = "Failed to copy backup database to staged location: %@";
      v88 = v86;
      v89 = 12;
LABEL_100:
      _os_log_impl(&dword_1A5CCB000, v88, OS_LOG_TYPE_ERROR, v87, (uint8_t *)&buf, v89);
    }
LABEL_101:

    goto LABEL_102;
  }
  ppDb[0] = 0;
  objc_msgSend(v33, "path");
  v80 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v81 = sqlite3_open_v2((const char *)objc_msgSend(v80, "UTF8String"), ppDb, 2, 0);

  if (v81)
  {
    v82 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v83 = ppDb[0];
      v84 = v82;
      v85 = sqlite3_errmsg(v83);
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v85;
      _os_log_impl(&dword_1A5CCB000, v84, OS_LOG_TYPE_ERROR, "Failed to open database when attempting to validate it: %{public}s", (uint8_t *)&buf, 0xCu);

    }
    goto LABEL_95;
  }
  if (sqlite3_exec(ppDb[0], "VACUUM", 0, 0, 0))
  {
    v91 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v92 = ppDb[0];
      v93 = v91;
      v94 = sqlite3_errmsg(v92);
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v94;
      _os_log_impl(&dword_1A5CCB000, v93, OS_LOG_TYPE_ERROR, "Failed to execute vacuum on database when attempting to validate it: %{public}s", (uint8_t *)&buf, 0xCu);

    }
LABEL_95:
    v95 = sqlite3_close(ppDb[0]);
    if (!v95)
      goto LABEL_98;
    goto LABEL_96;
  }
  v95 = sqlite3_close(ppDb[0]);
  if (v95)
  {
LABEL_96:
    v96 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v97 = v96;
      v98 = sqlite3_errstr(v95);
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v98;
      _os_log_impl(&dword_1A5CCB000, v97, OS_LOG_TYPE_ERROR, "Failed to close database when attempting to validate it: %{public}s", (uint8_t *)&buf, 0xCu);

    }
LABEL_98:
    v99 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      v87 = "Backup file is not a valid database!";
      v88 = v99;
      v89 = 2;
      goto LABEL_100;
    }
    goto LABEL_101;
  }

LABEL_23:
  v39 = v163;
  v158 = v174;
  obj = v164;
  v162 = v39;
  v40 = (os_unfair_lock_s *)CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(1805, v39);
  cf = v40;
  if (!v40)
  {
    v90 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A5CCB000, v90, OS_LOG_TYPE_ERROR, "Failed to open staged backup database for schema migration", (uint8_t *)&buf, 2u);
    }

    goto LABEL_102;
  }
  _CalDatabasePerformSchemaMigrationIfNeededOnDatabase(v40);
  CalDatabaseCleanupStoresWithoutIdentifiers(cf);
  CalDatabaseClearAllChangeHistoryForAllClients(cf);
  if (!v158)
    goto LABEL_37;
  v177 = v158;
  v41 = (void *)CalDatabaseCopyOfAllAttachmentsInStore(cf, 0);
  v187 = 0u;
  v188 = 0u;
  *(_OWORD *)ppDb = 0u;
  v186 = 0u;
  v42 = v41;
  v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", ppDb, &buf, 16);
  if (!v43)
    goto LABEL_36;
  v44 = *(_QWORD *)v186;
  while (2)
  {
    for (i = 0; i != v43; ++i)
    {
      if (*(_QWORD *)v186 != v44)
        objc_enumerationMutation(v42);
      v46 = (void *)CalAttachmentCopyLocalRelativePath(*((_QWORD *)ppDb[1] + i));
      if (v46)
      {
        objc_msgSend(v177, "URLByAppendingPathComponent:", v46);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v180) = 0;
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "path");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v50 = objc_msgSend(v48, "fileExistsAtPath:isDirectory:", v49, &v180);

        if ((v50 & 1) != 0)
        {
          if (!(_BYTE)v180)
          {

            continue;
          }
          v153 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v190 = 138412290;
            *(_QWORD *)&v190[4] = v47;
            v154 = "Attachment in backup is directory when a file was expected: %@";
            goto LABEL_196;
          }
        }
        else
        {
          v153 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v190 = 138412290;
            *(_QWORD *)&v190[4] = v47;
            v154 = "Failed to find expected attachment in backup: %@";
LABEL_196:
            _os_log_impl(&dword_1A5CCB000, v153, OS_LOG_TYPE_ERROR, v154, v190, 0xCu);
          }
        }

        CFRelease(cf);
        goto LABEL_102;
      }
    }
    v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", ppDb, &buf, 16);
    if (v43)
      continue;
    break;
  }
LABEL_36:

LABEL_37:
  v178 = obj;
  v51 = (void *)CalDatabaseCopyOfAllStores(cf);
  v191 = 0u;
  v192 = 0u;
  memset(v190, 0, sizeof(v190));
  v52 = v51;
  v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", v190, &buf, 16);
  if (!v53)
  {

    goto LABEL_189;
  }
  v54 = 0;
  v55 = 0;
  obja = 0;
  v56 = **(_QWORD **)&v190[16];
  do
  {
    for (j = 0; j != v53; ++j)
    {
      if (**(_QWORD **)&v190[16] != v56)
        objc_enumerationMutation(v52);
      v58 = *(_QWORD *)(*(_QWORD *)&v190[8] + 8 * j);
      Type = CalStoreGetType(v58);
      if ((Type - 5) >= 2)
      {
        if (Type == 4)
        {
          v54 = v58;
        }
        else if (Type)
        {
          if ((a5 & 1) != 0)
          {
            v60 = (void *)CalStoreCopyExternalID(v58);
            if (v60
              && (objc_msgSend(v178, "accountWithIdentifier:", v60),
                  v61 = (void *)objc_claimAutoreleasedReturnValue(),
                  v62 = v61 == 0,
                  v61,
                  v62))
            {
              v63 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v189 = 138543362;
                *(_QWORD *)&v189[4] = v60;
                _os_log_impl(&dword_1A5CCB000, v63, OS_LOG_TYPE_DEFAULT, "Removing store for non-existent account %{public}@ from backup during restore", v189, 0xCu);
              }
              CalRemoveStore();
              obja = 1;
            }
            else
            {
              v55 = 1;
            }

          }
          else
          {
            v55 = 1;
          }
        }
        else
        {
          v55 |= CalStoreAllowsEvents(v58);
        }
      }
    }
    v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", v190, &buf, 16);
  }
  while (v53);

  if (v54)
  {
    v64 = CalStoreCopyCalendars(v54);
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v65 = v64;
    v66 = -[__CFArray countByEnumeratingWithState:objects:count:](v65, "countByEnumeratingWithState:objects:count:", &v180, ppDb, 16);
    if (v66)
    {
      v67 = *(_QWORD *)v181;
      do
      {
        for (k = 0; k != v66; ++k)
        {
          if (*(_QWORD *)v181 != v67)
            objc_enumerationMutation(v65);
          v69 = *(void **)(*((_QWORD *)&v180 + 1) + 8 * k);
          v70 = CalCalendarCopySubCalAccountID((uint64_t)v69);
          v71 = (void *)v70;
          if ((a5 & 2) != 0
            && (!v70
             || (objc_msgSend(v178, "accountWithIdentifier:", v70),
                 v72 = (void *)objc_claimAutoreleasedReturnValue(),
                 v73 = v72 == 0,
                 v72,
                 v73)))
          {
            v74 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v189 = 138543362;
              *(_QWORD *)&v189[4] = v71;
              _os_log_impl(&dword_1A5CCB000, v74, OS_LOG_TYPE_DEFAULT, "Removing subscribed calendar for non-existent account %{public}@ from backup during restore", v189, 0xCu);
            }
            CalRemoveCalendar(v69);
            obja = 1;
          }
          else
          {
            LOBYTE(v55) = 1;
          }

        }
        v66 = -[__CFArray countByEnumeratingWithState:objects:count:](v65, "countByEnumeratingWithState:objects:count:", &v180, ppDb, 16);
      }
      while (v66);
    }

  }
  if ((obja & 1) != 0)
  {
    if ((CalDatabaseSave((uint64_t)cf) & 1) != 0)
    {
      if ((v55 & 1) == 0)
      {
        v75 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v189 = 0;
          v76 = "Attempted to restore from a database in which all data belonged to accounts not signed in. Failing the r"
                "estore to prevent wiping all useful data.";
          goto LABEL_200;
        }
        goto LABEL_201;
      }
      goto LABEL_189;
    }
    v75 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v189 = 0;
      v76 = "Failed to save database to remove stores/calendars for non-existent accounts";
LABEL_200:
      _os_log_impl(&dword_1A5CCB000, v75, OS_LOG_TYPE_ERROR, v76, v189, 2u);
    }
LABEL_201:

    CFRelease(cf);
LABEL_102:
    v100 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A5CCB000, v100, OS_LOG_TYPE_DEFAULT, "Cleaning up staged temp directory", (uint8_t *)&buf, 2u);
    }
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    ppDb[0] = 0;
    v102 = objc_msgSend(v101, "removeItemAtURL:error:", v163, ppDb);
    v103 = ppDb[0];

    if ((v102 & 1) == 0)
    {
      v104 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v103;
        _os_log_impl(&dword_1A5CCB000, v104, OS_LOG_TYPE_ERROR, "Failed to clean up staged temp directory: %@", (uint8_t *)&buf, 0xCu);
      }
    }

LABEL_108:
    v162 = 0;
  }
  else
  {
LABEL_189:

    CFRelease(cf);
  }

  v11 = v162;
  if (!v162)
  {
LABEL_12:
    v22 = 0;
    goto LABEL_17;
  }
  v161 = v162;
  v159 = v174;
  CalDatabaseLockForThread((os_unfair_lock_s *)a1);
  v157 = *(_DWORD *)(a1 + 16);
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  LastSequenceNumber = CPRecordStoreGetLastSequenceNumber();
  if (LastSequenceNumber == -1)
    LastSequenceNumber = *(_DWORD *)(a1 + 124);
  v107 = LastSequenceNumber + 1;
  if (LastSequenceNumber == -1)
    v107 = 1;
  v156 = v107;
  RestoreGeneration = _CalDatabaseGetRestoreGeneration(a1);
  v108 = v161;
  v109 = CalDatabaseCopyDirectoryPathForDatabase(a1);
  if (!-[__CFString length](v109, "length"))
  {
    v139 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1A5CCB000, v139, OS_LOG_TYPE_ERROR, "Failed to get destination path for restore", (uint8_t *)&buf, 2u);
    }

    goto LABEL_156;
  }
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v109);
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  v111 = *MEMORY[0x1E0D0C470];
  objc_msgSend(v108, "URLByAppendingPathComponent:", *MEMORY[0x1E0D0C470]);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v110, "URLByAppendingPathComponent:", v111);
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v111) = CalDatabaseBackupRawDatabase(v112, v113);

  if ((v111 & 1) == 0)
    goto LABEL_156;
  _CalDatabaseRevertInternal(a1, 1);
  v114 = a6;
  v179 = v159;
  if (!v179)
    goto LABEL_168;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  v115 = (void *)_CalDatabaseCopyOfAllAttachmentFilesInStore(a1);
  v187 = 0u;
  v188 = 0u;
  *(_OWORD *)ppDb = 0u;
  v186 = 0u;
  objb = v115;
  v116 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", ppDb, &buf, 16);
  if (!v116)
  {

    v114 = a6;
LABEL_168:
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(a1 + 24))
      {
        v145 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v145)
          os_unfair_lock_assert_owner(v145 + 20);
      }
    }
    Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
    {
      if (Database)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v147 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v147)
            os_unfair_lock_assert_owner(v147 + 20);
        }
      }
    }
    v148 = CPSqliteDatabaseConnectionForWriting();
    v149 = v148;
    if (!v148)
    {
      v152 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        LOWORD(ppDb[0]) = 0;
        _os_log_impl(&dword_1A5CCB000, v152, OS_LOG_TYPE_ERROR, "Failed to get connection for writing to database to update its sequence number after restoring", (uint8_t *)ppDb, 2u);
      }
      goto LABEL_156;
    }
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v194 = ___CalDatabaseSetSequenceNumberAfterRestore_block_invoke;
    v195 = &__block_descriptor_44_e5_v8__0l;
    v196 = v148;
    v197 = v156;
    _CalDatabaseLockForWriteTransaction(a1, (uint64_t)&buf);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v149)
      {
        if (*(_QWORD *)(*(_QWORD *)v149 + 104))
        {
          v150 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v150)
            os_unfair_lock_assert_owner(v150 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    v151 = (RestoreGeneration & ~(RestoreGeneration >> 31)) + 1;
    _CalDatabaseSetRestoreGeneration(a1, v151);
    if (v114)
      *v114 = v151;
    v22 = 1;
    goto LABEL_157;
  }
  v117 = *(_QWORD *)v186;
  v175 = 1;
  do
  {
    for (m = 0; m != v116; ++m)
    {
      if (*(_QWORD *)v186 != v117)
        objc_enumerationMutation(objb);
      v119 = (void *)*((_QWORD *)ppDb[1] + m);
      _CalColorGetRecordID((uint64_t)v119);
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      if (v120)
      {
        objc_msgSend(v179, "URLByAppendingPathComponent:", v120);
        v121 = (void *)objc_claimAutoreleasedReturnValue();
        v122 = (void *)_CalAttachmentFileCopyLocalURL(v119);
        v123 = v122;
        if (v122)
        {
          objc_msgSend(v122, "URLByDeletingLastPathComponent");
          v124 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v123, "path");
          v125 = (void *)objc_claimAutoreleasedReturnValue();
          v126 = CPFileBuildDirectoriesToPath();

          if ((v126 & 1) != 0)
          {
            objc_msgSend(v123, "path");
            v127 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v168, "fileExistsAtPath:", v127))
            {
              *(_QWORD *)&v180 = 0;
              v128 = objc_msgSend(v168, "removeItemAtURL:error:", v123, &v180);
              v129 = (id)v180;

              if ((v128 & 1) != 0)
              {
                v130 = v129;
                goto LABEL_139;
              }
              v138 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v190 = 138412802;
                *(_QWORD *)&v190[4] = v120;
                *(_WORD *)&v190[12] = 2112;
                *(_QWORD *)&v190[14] = v123;
                *(_WORD *)&v190[22] = 2112;
                *(_QWORD *)&v190[24] = v129;
                v135 = v138;
                v136 = "Attachment from backup (%@) already exists in destination (%@), but we could not replace it: %@";
                v137 = 32;
LABEL_144:
                _os_log_impl(&dword_1A5CCB000, v135, OS_LOG_TYPE_ERROR, v136, v190, v137);
              }
              goto LABEL_145;
            }

            v130 = 0;
LABEL_139:
            *(_QWORD *)v189 = v130;
            v133 = objc_msgSend(v168, "copyItemAtURL:toURL:error:", v121, v123, v189);
            v129 = *(id *)v189;

            if ((v133 & 1) == 0)
            {
              v134 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v190 = 138412546;
                *(_QWORD *)&v190[4] = v120;
                *(_WORD *)&v190[12] = 2112;
                *(_QWORD *)&v190[14] = v129;
                v135 = v134;
                v136 = "Failed to copy attachment (%@) when restoring backup: %@";
                v137 = 22;
                goto LABEL_144;
              }
LABEL_145:
              v175 = 0;
            }

          }
          else
          {
            v132 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v190 = 138412290;
              *(_QWORD *)&v190[4] = v124;
              _os_log_impl(&dword_1A5CCB000, v132, OS_LOG_TYPE_ERROR, "Failed to create directory for attachment when restoring backup: %@", v190, 0xCu);
            }
            v175 = 0;
          }

        }
        else
        {
          v131 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v190 = 138412290;
            *(_QWORD *)&v190[4] = v120;
            _os_log_impl(&dword_1A5CCB000, v131, OS_LOG_TYPE_ERROR, "Failed to get destination URL for attachment: %@", v190, 0xCu);
          }
          v175 = 0;
        }

      }
    }
    v116 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", ppDb, &buf, 16);
  }
  while (v116);

  v114 = a6;
  if ((v175 & 1) != 0)
    goto LABEL_168;
LABEL_156:
  v22 = 0;
LABEL_157:
  CalDatabaseUnlockForThread((const os_unfair_lock *)a1);
  if ((_DWORD)v22)
  {
    if ((v157 & 8) == 0)
    {
      _CalDatabasePostDBChangeNotificationToInternalAndExternalClients(a1);
      _CalDatabaseRestoreNotification();
    }
    CalDatabaseCleanUpOrphanedLocalAttachments((os_unfair_lock_s *)a1);
  }
  v140 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v190 = 0;
    _os_log_impl(&dword_1A5CCB000, v140, OS_LOG_TYPE_DEFAULT, "Cleaning up staged backup directory", v190, 2u);
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  v184 = 0;
  v142 = objc_msgSend(v141, "removeItemAtURL:error:", v161, &v184);
  v143 = v184;

  if ((v142 & 1) == 0)
  {
    v144 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v190 = 138412290;
      *(_QWORD *)&v190[4] = v143;
      _os_log_impl(&dword_1A5CCB000, v144, OS_LOG_TYPE_ERROR, "Failed to clean up staged backup directory: %@", v190, 0xCu);
    }
  }

  v11 = v162;
LABEL_17:

  return v22;
}

void sub_1A5D03490(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v24;

  if (a2)
  {
    if (v24)
      objc_end_catch();
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1A5D0304CLL);
  }
  _Unwind_Resume(exc_buf);
}

uint64_t CalDatabaseRestoreFromBackupDatabaseFileAndAttachments(uint64_t a1, void *a2, void *a3, int *a4)
{
  id v7;
  id v8;
  void *v9;
  NSObject *v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  int v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  objc_msgSend(v7, "URLByDeletingLastPathComponent");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 138412290;
    v16 = v7;
    _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_DEFAULT, "Beginning restore of database file and attachments from %@", (uint8_t *)&v15, 0xCu);
  }
  if (v8)
    v11 = 3;
  else
    v11 = 0;
  v12 = CalDatabaseRestoreDatabaseCore(a1, v7, v9, v8, v11, a4);

  v13 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 67109120;
    LODWORD(v16) = v12;
    _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_DEFAULT, "Finished restore of database file with result = %{BOOL}d", (uint8_t *)&v15, 8u);
  }

  return v12;
}

uint64_t CalDatabaseRestoreFromICBU(os_unfair_lock_s *a1, void *a2, void *a3, int *a4)
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  int v29;
  _BOOL4 v30;
  NSObject *v31;
  uint32_t v32;
  NSObject *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  const void *v52;
  const void *v53;
  CFMutableArrayRef v54;
  __CFArray *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  NSObject *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  CFTypeRef v71;
  void *v72;
  int v73;
  void *v74;
  NSObject *v75;
  int v76;
  id v77;
  void *v78;
  void *v79;
  NSObject *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t j;
  void *v89;
  void *v90;
  uint64_t v91;
  id v92;
  NSObject *v93;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t k;
  void *v100;
  char v101;
  id v102;
  NSObject *v103;
  void *v104;
  void *v105;
  void *v106;
  NSObject *v107;
  int UID;
  CFTypeRef v109;
  NSObject *v110;
  NSObject *v111;
  void *v112;
  uint64_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  void *v117;
  void *v118;
  double v119;
  NSObject *v120;
  id v122;
  void *v123;
  unsigned int v124;
  void *v125;
  void *v126;
  id v127;
  void *v128;
  void *v129;
  id v130;
  id v131;
  char v132;
  uint64_t v134;
  void *v135;
  void *v136;
  __CFArray *v137;
  id v138;
  void *v139;
  char v140;
  void *v141;
  id v142;
  id v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  id v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _QWORD v153[4];
  id v154;
  id v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  _BYTE v165[128];
  _BYTE v166[128];
  uint8_t v167[128];
  _BYTE buf[24];
  void *v169;
  id v170;
  id v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl(&dword_1A5CCB000, v8, OS_LOG_TYPE_DEFAULT, "Beginning restore of database file and attachments from %@", buf, 0xCu);
  }
  v9 = v6;
  v10 = v7;
  objc_msgSend(v9, "URLByAppendingPathComponent:", CFSTR("Info.plist"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    v25 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl(&dword_1A5CCB000, v25, OS_LOG_TYPE_ERROR, "Could not open Info.plist from .icbu (%@) for restore", buf, 0xCu);
    }
    v26 = 0;
    goto LABEL_129;
  }
  objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("version"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (!v13)
  {
    v27 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v9;
    v28 = "Could not find version key in Info.plist for .icbu (%@)";
    goto LABEL_21;
  }
  if (!objc_msgSend(v13, "isEqualToString:", CFSTR("3.0")))
  {
    v29 = objc_msgSend(v14, "isEqualToString:", CFSTR("2.0"));
    v27 = CDBLogHandle;
    v30 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (v29)
    {
      if (v30)
      {
        *(_WORD *)buf = 0;
        v28 = "Restoring from a 2.0 .icbu is not supported on this platform";
        v31 = v27;
        v32 = 2;
LABEL_22:
        _os_log_impl(&dword_1A5CCB000, v31, OS_LOG_TYPE_ERROR, v28, buf, v32);
      }
LABEL_23:
      v26 = 0;
      goto LABEL_128;
    }
    if (!v30)
      goto LABEL_23;
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v14;
    v28 = "Could not restore from unsupported .icbu version: \"%{public}@\"";
LABEL_21:
    v31 = v27;
    v32 = 12;
    goto LABEL_22;
  }
  v15 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_DEFAULT, "Restoring from version 3.0 .icbu", buf, 2u);
  }
  v16 = v9;
  v17 = v12;
  v131 = v10;
  objc_msgSend(v16, "URLByAppendingPathComponent:", CFSTR("Calendar.sqlitedb"));
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  v130 = v16;
  v128 = v17;
  objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("LocalSubscribedCalendarAccounts"));
  v18 = (id)objc_claimAutoreleasedReturnValue();
  v126 = v12;
  v127 = v10;
  v125 = v14;
  if (v18)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v18, "count"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __CalDatabaseSanitizeLocalSubscribedCalendarInfosDictionary_block_invoke;
      v169 = &unk_1E4F84DB0;
      v170 = v19;
      v171 = v20;
      v21 = v19;
      v22 = v20;
      objc_msgSend(v18, "enumerateKeysAndObjectsUsingBlock:", buf);
      v23 = objc_msgSend(v22, "copy");

      v24 = (void *)v23;
      goto LABEL_27;
    }
    v33 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v33, OS_LOG_TYPE_ERROR, "Local subscribed calendar info from backup Info.plist was not a dictionary. Ignoring", buf, 2u);
    }
  }
  v24 = 0;
LABEL_27:

  v34 = CalDatabaseRestoreDatabaseCore((uint64_t)a1, v129, v130, v131, 1, a4);
  v26 = v34;
  if (!(_DWORD)v34 || !v24)
    goto LABEL_122;
  v122 = v9;
  v123 = v24;
  v124 = v34;
  v138 = v24;
  v35 = v131;
  v36 = *MEMORY[0x1E0C8F140];
  v164 = 0;
  v142 = v35;
  v134 = v36;
  objc_msgSend(v35, "topLevelAccountsWithAccountTypeIdentifier:error:");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0;
  v39 = v38;
  if (v37 || !v38)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v37, "count"));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v160 = 0u;
    v161 = 0u;
    v162 = 0u;
    v163 = 0u;
    v43 = v37;
    v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v160, buf, 16);
    if (v44)
    {
      v45 = v44;
      v46 = *(_QWORD *)v161;
      do
      {
        for (i = 0; i != v45; ++i)
        {
          if (*(_QWORD *)v161 != v46)
            objc_enumerationMutation(v43);
          v48 = *(void **)(*((_QWORD *)&v160 + 1) + 8 * i);
          objc_msgSend(v48, "identifier");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "setObject:forKeyedSubscript:", v48, v49);

        }
        v45 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v160, buf, 16);
      }
      while (v45);
    }

    v41 = v42;
  }
  else
  {
    v40 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v39;
      _os_log_impl(&dword_1A5CCB000, v40, OS_LOG_TYPE_ERROR, "Failed to get existing subscribed calendar accounts when attempting to update subscribed calendars for .icbu restore: %@", buf, 0xCu);
    }
    v41 = 0;
  }

  v26 = v124;
  v24 = v123;
  if (!v41)
  {

    goto LABEL_120;
  }
  v50 = (void *)MEMORY[0x1E0C99E20];
  objc_msgSend(v41, "allKeys");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "setWithArray:", v51);
  v136 = (void *)objc_claimAutoreleasedReturnValue();

  v135 = (void *)objc_opt_new();
  v141 = (void *)objc_opt_new();
  v52 = CalDatabaseCopySubscribedCalendarStore(a1);
  if (v52)
  {
    v53 = v52;
    v54 = CalStoreCopyCalendars((uint64_t)v52);
    CFRelease(v53);
  }
  else
  {
    v54 = 0;
  }
  v158 = 0u;
  v159 = 0u;
  v156 = 0u;
  v157 = 0u;
  v55 = v54;
  v56 = -[__CFArray countByEnumeratingWithState:objects:count:](v55, "countByEnumeratingWithState:objects:count:", &v156, v167, 16);
  v139 = v41;
  v137 = v55;
  if (!v56)
  {

    v140 = 0;
LABEL_80:
    v152 = 0u;
    v150 = 0u;
    v151 = 0u;
    v149 = 0u;
    v82 = v136;
    v83 = objc_msgSend(v82, "countByEnumeratingWithState:objects:count:", &v149, v166, 16);
    if (v83)
    {
      v84 = v83;
      v85 = *(_QWORD *)v150;
      v86 = *MEMORY[0x1E0C8EF48];
      v87 = 1;
      do
      {
        for (j = 0; j != v84; ++j)
        {
          if (*(_QWORD *)v150 != v85)
            objc_enumerationMutation(v82);
          objc_msgSend(v41, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v149 + 1) + 8 * j));
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v89, "accountPropertyForKey:", v86);
          v90 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v90)
          {
            v148 = 0;
            v91 = objc_msgSend(v142, "removeAccount:error:", v89, &v148);
            v92 = v148;
            if ((v91 & 1) == 0)
            {
              v93 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v92;
                _os_log_impl(&dword_1A5CCB000, v93, OS_LOG_TYPE_ERROR, "Failed to remove subscribed calendar account after restore: %@", buf, 0xCu);
              }
              v87 = 0;
              v41 = v139;
            }

          }
        }
        v84 = objc_msgSend(v82, "countByEnumeratingWithState:objects:count:", &v149, v166, 16);
      }
      while (v84);
    }
    else
    {
      v87 = 1;
    }

    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v95 = v135;
    v96 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v144, v165, 16);
    if (v96)
    {
      v97 = v96;
      v98 = *(_QWORD *)v145;
      v9 = v122;
      do
      {
        for (k = 0; k != v97; ++k)
        {
          if (*(_QWORD *)v145 != v98)
            objc_enumerationMutation(v95);
          v100 = *(void **)(*((_QWORD *)&v144 + 1) + 8 * k);
          v143 = 0;
          v101 = objc_msgSend(v142, "saveAccount:withError:", v100, &v143);
          v102 = v143;
          if ((v101 & 1) == 0)
          {
            v103 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v102;
              _os_log_impl(&dword_1A5CCB000, v103, OS_LOG_TYPE_ERROR, "Failed to save subscribed calendar account after restore: %@", buf, 0xCu);
            }
            objc_msgSend(v100, "identifier");
            v104 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v141, "objectForKeyedSubscript:", v104);
            v105 = (void *)objc_claimAutoreleasedReturnValue();

            if (v105)
            {
              v106 = (void *)CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                v107 = v106;
                UID = CalCalendarGetUID();
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = UID;
                _os_log_impl(&dword_1A5CCB000, v107, OS_LOG_TYPE_ERROR, "Removing subscribed calendar %d because we failed to save its account", buf, 8u);

              }
              v109 = CalCalendarCopyStore((uint64_t)v105);
              CalStoreRemoveCalendar((uint64_t)v109, v105);
              CFRelease(v109);
              v140 = 1;
            }

            v87 = 0;
          }

        }
        v97 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v144, v165, 16);
      }
      while (v97);
    }
    else
    {
      v9 = v122;
    }

    v26 = v124;
    v24 = v123;
    v94 = v139;
    v55 = v137;
    goto LABEL_114;
  }
  v57 = v56;
  v140 = 0;
  v58 = *(_QWORD *)v157;
  v59 = *MEMORY[0x1E0C8F0B0];
  v132 = 1;
  v60 = *MEMORY[0x1E0C8F0B0];
  do
  {
    v61 = 0;
    do
    {
      if (*(_QWORD *)v157 != v58)
        objc_enumerationMutation(v55);
      v62 = *(void **)(*((_QWORD *)&v156 + 1) + 8 * v61);
      v63 = (void *)CalCalendarCopySubCalAccountID((uint64_t)v62);
      if (CalCalendarIsHolidaySubscribedCalendar((uint64_t)v62))
      {
        objc_msgSend(v142, "topLevelAccountsWithAccountTypeIdentifier:error:", v59, 0);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "firstObject");
        v65 = objc_claimAutoreleasedReturnValue();

        if (v65)
        {
          -[NSObject identifier](v65, "identifier");
          v66 = (void *)objc_claimAutoreleasedReturnValue();

          if (v63 != v66)
          {
            -[NSObject identifier](v65, "identifier");
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            CalCalendarSetSubCalAccountID((uint64_t)v62);

          }
        }
        else
        {
          v71 = CalCalendarCopyStore((uint64_t)v62);
          CalStoreRemoveCalendar((uint64_t)v71, v62);
          CFRelease(v71);
          v140 = 1;
        }
LABEL_63:

        goto LABEL_71;
      }
      if (!objc_msgSend(v63, "length"))
      {
        v72 = (void *)CDBLogHandle;
        if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
          goto LABEL_71;
        v65 = v72;
        v73 = CalCalendarGetUID();
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v73;
        _os_log_impl(&dword_1A5CCB000, v65, OS_LOG_TYPE_DEFAULT, "Local subscribed calendar in database (ROWID=%d) has no account ID. Will not update account for this subscription", buf, 8u);
        goto LABEL_63;
      }
      objc_msgSend(v138, "objectForKeyedSubscript:", v63);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v68)
      {
        v74 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
        {
          v75 = v74;
          v76 = CalCalendarGetUID();
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v76;
          *(_WORD *)&buf[8] = 2114;
          *(_QWORD *)&buf[10] = v63;
          _os_log_impl(&dword_1A5CCB000, v75, OS_LOG_TYPE_DEFAULT, "Did not find subscription account info for local subscribed calendar in database (ROWID=%d, accountId= %{public}@). Will not update account for this subscription", buf, 0x12u);

        }
        goto LABEL_70;
      }
      objc_msgSend(v139, "objectForKeyedSubscript:", v63);
      v69 = objc_claimAutoreleasedReturnValue();
      if (v69)
      {
        v70 = (void *)v69;
      }
      else
      {
        v155 = 0;
        objc_msgSend(v142, "createAccountWithAccountTypeIdentifier:error:", v134, &v155);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v77 = v155;
        if (!v70)
        {
          v80 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v77;
            _os_log_impl(&dword_1A5CCB000, v80, OS_LOG_TYPE_ERROR, "Failed to create subscription account after restore: %@", buf, 0xCu);
          }
          v132 = 0;
          goto LABEL_69;
        }
        objc_msgSend(v70, "identifier");
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        CalCalendarSetSubCalAccountID((uint64_t)v62);

        v140 = 1;
      }
      objc_msgSend(v70, "identifier");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v141, "setObject:forKeyedSubscript:", v62, v79);

      v153[0] = MEMORY[0x1E0C809B0];
      v153[1] = 3221225472;
      v153[2] = __CalDatabaseUpdateSubscribedCalendarAccountsAfterRestore_block_invoke;
      v153[3] = &unk_1E4F84DD8;
      v154 = v70;
      v77 = v70;
      objc_msgSend(v68, "enumerateKeysAndObjectsUsingBlock:", v153);
      objc_msgSend(v135, "addObject:", v77);
      objc_msgSend(v136, "removeObject:", v63);

      v59 = v60;
LABEL_69:

      v55 = v137;
LABEL_70:

LABEL_71:
      ++v61;
    }
    while (v57 != v61);
    v81 = -[__CFArray countByEnumeratingWithState:objects:count:](v55, "countByEnumeratingWithState:objects:count:", &v156, v167, 16);
    v57 = v81;
  }
  while (v81);

  if ((v132 & 1) != 0)
  {
    v41 = v139;
    goto LABEL_80;
  }
  v87 = 0;
  v26 = v124;
  v9 = v122;
  v24 = v123;
  v94 = v139;
LABEL_114:
  if ((v140 & 1) != 0 && (CalDatabaseSave((uint64_t)a1) & 1) == 0)
  {
    v110 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v110, OS_LOG_TYPE_ERROR, "Failed to save local subscribed calendar changes to database after restoring from .icbu", buf, 2u);
    }
    v87 = 0;
  }

  if ((v87 & 1) == 0)
  {
LABEL_120:
    v111 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v111, OS_LOG_TYPE_ERROR, "Failed to update subscribed calendars after restore.", buf, 2u);
    }
  }
LABEL_122:
  v12 = v126;
  v10 = v127;
  v14 = v125;
  if ((_DWORD)v26)
  {
    v112 = v24;
    v113 = v26;
    objc_msgSend(v128, "objectForKeyedSubscript:", CFSTR("preferences"));
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "objectForKeyedSubscript:", CFSTR("defaultCalendarID"));
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "objectForKeyedSubscript:", CFSTR("defaultCalendarStoreUID"));
    v116 = objc_claimAutoreleasedReturnValue();
    v117 = (void *)v116;
    if (v115 && v116)
    {
      CalDatabaseGetPreferences((uint64_t)a1);
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v118, "set_defaultCalendarID:", v115);
      objc_msgSend(v118, "set_defaultCalendarStoreUID:", objc_msgSend(v117, "integerValue"));
      objc_msgSend(v118, "set_defaultCalendarDatabaseID:", 0);
      objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
      objc_msgSend(v118, "set_defaultCalendarChangedTimestamp:", (uint64_t)v119);
      objc_msgSend(v118, "set_defaultCalendarChangedReason:", CFSTR("restore"));

    }
    v26 = v113;
    v24 = v112;
  }

LABEL_128:
LABEL_129:

  v120 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v26;
    _os_log_impl(&dword_1A5CCB000, v120, OS_LOG_TYPE_DEFAULT, "Finished restore of database file with result = %{BOOL}d", buf, 8u);
  }

  return v26;
}

uint64_t CalDatabaseValidateBackupDestinationURLForDatabaseFile(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;
  NSObject *v16;
  const char *v17;
  char v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((objc_msgSend(v1, "isFileURL") & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "path");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v3, "fileExistsAtPath:", v4);

      if (v5)
      {
        v6 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v21 = v2;
          _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "Backup destination URL is an existing file: %@", buf, 0xCu);
        }
        v7 = 0;
        goto LABEL_23;
      }
      v19 = 0;
      objc_msgSend(v2, "URLByDeletingLastPathComponent");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "path");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v3, "fileExistsAtPath:isDirectory:", v14, &v19);

      if ((v15 & 1) != 0)
      {
        if (v19)
        {
          v7 = 1;
LABEL_22:

LABEL_23:
          goto LABEL_24;
        }
        v16 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v21 = v2;
          v17 = "Backup destination URL has a parent that is not a directory: %@";
          goto LABEL_20;
        }
      }
      else
      {
        v16 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v21 = v2;
          v17 = "Backup destination URL has non-existent parent directory: %@";
LABEL_20:
          _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);
        }
      }
      v7 = 0;
      goto LABEL_22;
    }
    v12 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v2;
      v9 = "Backup destination URL is not a file URL: %@";
      v10 = v12;
      v11 = 12;
      goto LABEL_11;
    }
  }
  else
  {
    v8 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v9 = "Nil path given for backup destination";
      v10 = v8;
      v11 = 2;
LABEL_11:
      _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    }
  }
  v7 = 0;
LABEL_24:

  return v7;
}

BOOL _CalDatabaseBackupDatabaseFileWithSourceAndDestinationConnections(sqlite3 *pSource, sqlite3 *pDest)
{
  sqlite3_backup *v3;
  sqlite3_backup *v4;
  int v5;
  int v6;
  _BOOL8 result;
  void *v8;
  NSObject *v9;
  const char *v10;
  void *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = sqlite3_backup_init(pDest, "main", pSource, "main");
  if (!v3)
  {
    v8 = (void *)CDBLogHandle;
    result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = v8;
    v12 = 136446210;
    v13 = sqlite3_errmsg(pDest);
    v10 = "Failed to initialize backup: %{public}s";
    goto LABEL_10;
  }
  v4 = v3;
  do
    v5 = sqlite3_backup_step(v4, -1);
  while (!v5);
  v6 = v5;
  sqlite3_backup_finish(v4);
  if (v6 == 101)
    return 1;
  v11 = (void *)CDBLogHandle;
  result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v9 = v11;
    v12 = 136446210;
    v13 = sqlite3_errmsg(pDest);
    v10 = "Failure while performing backup: %{public}s";
LABEL_10:
    _os_log_impl(&dword_1A5CCB000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v12, 0xCu);

    return 0;
  }
  return result;
}

uint64_t _CalDatabaseVacuumAndCloseDBConnection(sqlite3 *a1, void *a2, int a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  char v14;
  char *v15;
  char *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  char v21;
  id v22;
  NSObject *v23;
  id v25;
  id v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (sqlite3_exec(a1, "VACUUM", 0, 0, 0))
  {
    v6 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v7 = v6;
      *(_DWORD *)buf = 136446210;
      v28 = sqlite3_errmsg(a1);
      v8 = "Failed to vacuum DB: %{public}s";
LABEL_7:
      _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_ERROR, v8, buf, 0xCu);

      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if (sqlite3_wal_checkpoint_v2(a1, 0, 3, 0, 0))
  {
    v9 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v7 = v9;
      *(_DWORD *)buf = 136446210;
      v28 = sqlite3_errmsg(a1);
      v8 = "Failed to checkpoint DB: %{public}s";
      goto LABEL_7;
    }
LABEL_8:
    v10 = 0;
    goto LABEL_9;
  }
  v10 = 1;
LABEL_9:
  if (sqlite3_close(a1))
  {
    v11 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v12 = v11;
      v13 = sqlite3_errmsg(a1);
      *(_DWORD *)buf = 136446210;
      v28 = v13;
      _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_ERROR, "Failed to close DB: %{public}s", buf, 0xCu);

    }
    v10 = 0;
  }
  else
  {
    v14 = v10 ^ 1;
    if (a3 != 1)
      v14 = 1;
    if ((v14 & 1) == 0)
    {
      CalDatabaseURLByAddingSuffix(v5, CFSTR("-wal"));
      v15 = (char *)objc_claimAutoreleasedReturnValue();
      CalDatabaseURLByAddingSuffix(v5, CFSTR("-shm"));
      v16 = (char *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 0;
      v10 = objc_msgSend(v17, "removeItemAtURL:error:", v15, &v26);
      v18 = v26;

      if ((v10 & 1) == 0)
      {
        v19 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v28 = v15;
          v29 = 2112;
          v30 = v18;
          _os_log_impl(&dword_1A5CCB000, v19, OS_LOG_TYPE_ERROR, "Failed to remove backup -wal file (%@): %@", buf, 0x16u);
        }
      }
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = v18;
      v21 = objc_msgSend(v20, "removeItemAtURL:error:", v16, &v25);
      v22 = v25;

      if ((v21 & 1) == 0)
      {
        v23 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v28 = v16;
          v29 = 2112;
          v30 = v22;
          _os_log_impl(&dword_1A5CCB000, v23, OS_LOG_TYPE_ERROR, "Failed to remove backup -shm file (%@): %@", buf, 0x16u);
        }
        v10 = 0;
      }

    }
  }

  return v10;
}

id CalDatabaseURLByAddingSuffix(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v4, "URLByDeletingLastPathComponent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "lastPathComponent");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "stringByAppendingString:", v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "URLByAppendingPathComponent:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup()
{
  if (CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup_onceToken != -1)
    dispatch_once(&CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup_onceToken, &__block_literal_global_1);
  return (id)CalDatabaseGetSubscribedCalendarAccountPropertiesIncludedInBackup_properties;
}

uint64_t CalDatabaseBackupRawDatabase(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  int v6;
  NSObject *v7;
  const char *v8;
  id v9;
  int v10;
  NSObject *v11;
  const char *v12;
  char v13;
  sqlite3 *v15;
  sqlite3 *ppDb;
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v15 = 0;
  ppDb = 0;
  objc_msgSend(v3, "path");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v6 = sqlite3_open_v2((const char *)objc_msgSend(v5, "UTF8String"), &ppDb, 1, 0);

  if (v6)
  {
    v7 = (id)CDBLogHandle;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = sqlite3_errmsg(ppDb);
      *(_DWORD *)buf = 136446210;
      v18 = v8;
      _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_ERROR, "Failed to open source database for restore: %{public}s", buf, 0xCu);
    }

    goto LABEL_11;
  }
  objc_msgSend(v4, "path");
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v10 = sqlite3_open_v2((const char *)objc_msgSend(v9, "UTF8String"), &v15, 6, 0);

  if (v10)
  {
    v11 = (id)CDBLogHandle;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = sqlite3_errmsg(v15);
      *(_DWORD *)buf = 136446210;
      v18 = v12;
      _os_log_impl(&dword_1A5CCB000, v11, OS_LOG_TYPE_ERROR, "Failed to open destination database for staging restore: %{public}s", buf, 0xCu);
    }

    goto LABEL_11;
  }
  if (!_CalDatabaseBackupDatabaseFileWithSourceAndDestinationConnections(ppDb, v15))
  {
LABEL_11:
    v13 = 0;
    goto LABEL_12;
  }
  v13 = _CalDatabaseVacuumAndCloseDBConnection(v15, v4, 0);
  v15 = 0;
LABEL_12:
  sqlite3_close(ppDb);
  sqlite3_close(v15);

  return v13 & 1;
}

void sub_1A5D0538C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1A5D05334);
  }
  _Unwind_Resume(exception_object);
}

void _CalColorPrepareForSave(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  if (!_CalColorGetStoreID(a1))
  {
    v1 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_1A5CCB000, v1, OS_LOG_TYPE_ERROR, "Attempting to save an color that is not in any store", v2, 2u);
    }
  }
}

void CalColorInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalColorClass, (const char **)&kCalColorIndexes, 0);
  CalMigrationCreateTriggers(a2, (const char **)&kCalColorClass, (const char **)&kCalColorTriggers);
}

void CalColorMigrateTables(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3 <= 18006)
    CalColorInitializeTables(a1, a2);
}

uint64_t CalColorGetPropertyIDWithPropertyName(void *key)
{
  void *value;

  if (CalColorGetPropertyIDWithPropertyName_onceToken != -1)
    dispatch_once(&CalColorGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_2);
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalColorGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A5D05E7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 64; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

const void *_CalDatabaseCreateColor(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 29);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateColor(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Color;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Color = _CalDatabaseCreateColor((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Color;
}

uint64_t _CalRemoveColor(const void *a1)
{
  uint64_t DatabaseForRecord;

  DatabaseForRecord = CalGetDatabaseForRecord();
  return _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

void CalRemoveColor(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t DatabaseForRecord;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DatabaseForRecord = CalGetDatabaseForRecord();
  _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorHasValidParent(uint64_t a1)
{
  __CFArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = _CalColorCopyEvents(a1);
  v2 = -[__CFArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v7;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v7 != v3)
          objc_enumerationMutation(v1);
        if ((_CalCalendarItemHasValidParent(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * i)) & 1) != 0)
        {
          v2 = 1;
          goto LABEL_11;
        }
      }
      v2 = -[__CFArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_11:

  return v2;
}

CFMutableArrayRef _CalColorCopyEvents(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

BOOL _CalColorIsUnused(uint64_t a1)
{
  CFMutableArrayRef v1;
  _BOOL8 v2;

  v1 = _CalColorCopyEvents(a1);
  v2 = -[__CFArray count](v1, "count") == 0;

  return v2;
}

void _CalColorCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Color WHERE (NOT EXISTS (SELECT 1 FROM CalendarItem where color_id > 0 AND color_id=Color.ROWID));"),
    0);
}

uint64_t _CalColorSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t _CalColorGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyColorWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalColorGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

const void *CalDatabaseCopyColorWithProviderAndExternalID(os_unfair_lock_s *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_unfair_lock_s *v7;
  uint64_t RecordStore;
  BOOL v9;
  const os_unfair_lock *Context;
  id v11;
  id v12;
  const __CFArray *v13;
  const void *ValueAtIndex;
  void *v16;
  void *v17;

  v5 = a2;
  v6 = a3;
  v7 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v9 = RecordStore == 0;
  else
    v9 = 1;
  if (!v9)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v16 = v5;
  v17 = v6;
  v11 = v6;
  v12 = v5;
  v13 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();

  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7);
  os_unfair_lock_unlock(v7);
  if (!v13)
    return 0;
  if (CFArrayGetCount(v13) < 1)
  {
    ValueAtIndex = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v13, 0);
    CFRetain(ValueAtIndex);
  }
  CFRelease(v13);
  return ValueAtIndex;
}

CFMutableArrayRef CalColorCopyEvents(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalColorCopyEvents(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

_QWORD *_CalColorAddEvent(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;
  uint64_t Store;
  BOOL v6;
  const os_unfair_lock *v7;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationAddObject(result, a2);
    Store = CPRecordGetStore();
    if (CDBLockingAssertionsEnabled)
      v6 = Store == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
    return (_QWORD *)CPRecordStoreAddRecord();
  }
  return result;
}

void CalColorAddEvent(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalColorAddEvent(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorRemoveEvent(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  uint64_t result;
  uint64_t Store;
  BOOL v7;
  const os_unfair_lock *v8;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationRemoveObject((_QWORD *)result, a2);
    result = _CalColorIsUnused(a1);
    if ((_DWORD)result)
    {
      Store = CPRecordGetStore();
      if (CDBLockingAssertionsEnabled)
        v7 = Store == 0;
      else
        v7 = 1;
      if (!v7)
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
      return CPRecordStoreRemoveRecord();
    }
  }
  return result;
}

void CalColorRemoveEvent(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalColorRemoveEvent(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalColorGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalColorSetStoreID(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 0, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorGetStoreID(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  __CFArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if ((int)Property <= 0)
  {
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v4 = _CalColorCopyEvents(a1);
    v5 = -[__CFArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v11;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(v4);
          Property = _CalCalendarItemGetStoreId(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i));
          if ((int)Property > 0)
          {

            _CalRecordSetPropertyIfDifferent(a1, 0, (const __CFString *)Property);
            goto LABEL_19;
          }
        }
        v6 = -[__CFArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v6)
          continue;
        break;
      }
    }
    else
    {
      Property = 0;
    }

LABEL_19:
  }
  return Property;
}

uint64_t CalColorGetStoreID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t StoreID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  StoreID = _CalColorGetStoreID(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return StoreID;
}

uint64_t _CalColorGetStore(uint64_t a1)
{
  uint64_t Store;

  if ((int)_CalColorGetStoreID(a1) < 1)
    return 0;
  Store = CPRecordGetStore();
  return _CalGetStoreWithUID(Store);
}

CFTypeRef CalColorCopyStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Store;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Store = (const void *)_CalColorGetStore(a1);
  if (Store)
    v4 = CFRetain(Store);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalColorSetData(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorGetData(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

const void *CalColorCopyData(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Data;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Data = (const void *)_CalColorGetData(a1);
  v4 = Data;
  if (Data)
    CFRetain(Data);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalColorSetProviderIdentifier(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 2, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorGetProviderIdentifier(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

const void *CalColorCopyProviderIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *ProviderIdentifier;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ProviderIdentifier = (const void *)_CalColorGetProviderIdentifier(a1);
  v4 = ProviderIdentifier;
  if (ProviderIdentifier)
    CFRetain(ProviderIdentifier);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalColorSetUUID(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 3, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const void *CalColorCopyUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Description;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Description = (const void *)_CalCalendarItemGetDescription(a1);
  v4 = Description;
  if (Description)
    CFRetain(Description);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalColorSetExternalIdentifier(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 4, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalColorGetExternalIdentifier(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

const void *CalColorCopyExternalIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *ExternalIdentifier;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ExternalIdentifier = (const void *)_CalColorGetExternalIdentifier(a1);
  v4 = ExternalIdentifier;
  if (ExternalIdentifier)
    CFRetain(ExternalIdentifier);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalDatabaseMigrateToMultipleDatabases(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  char v16;
  id v17;
  CFTypeRef v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  int v25;
  void *v26;
  void *v27;
  int v28;
  NSObject *v29;
  char v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  char v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  char v44;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v47;
  uint64_t v48;
  _QWORD *v49;
  const void *v50;
  const os_unfair_lock *v51;
  uint64_t RowidForRecordID;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CFTypeRef v58;
  CFTypeRef v59;
  os_unfair_lock_s *v60;
  const void *v61;
  id *v62;
  uint64_t v63;
  NSObject *v64;
  const char *v65;
  uint32_t v66;
  uint64_t v67;
  NSObject *v68;
  const char *v69;
  uint64_t v70;
  uint32_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  const char *v76;
  uint32_t v77;
  uint64_t v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  uint64_t v82;
  void *v84;
  id v85;
  void *v86;
  void *v87;
  id v88;
  void *v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  id v95;
  void *v96;
  void *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _QWORD v103[4];
  _QWORD v104[2];
  _QWORD v105[5];
  _QWORD v106[4];
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  uint8_t v112[128];
  _BYTE buf[24];
  void *v114;
  id v115;
  id v116;
  _BYTE v117[24];
  void *v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  _CalDatabaseGetCalendarDataContainerProvider(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v92 = a1;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v3 = (id)_CalDatabaseCopyOfAllStores(a1);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v99, v112, 16);
  if (v4)
  {
    v5 = v4;
    v98 = *(_QWORD *)v100;
    v90 = *MEMORY[0x1E0D0C470];
    v84 = v2;
    v93 = v3;
    do
    {
      v6 = 0;
      v94 = v5;
      do
      {
        if (*(_QWORD *)v100 != v98)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * v6);
        _CalErrorGetRecordID(v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          objc_msgSend(v2, "containerInfoForAccountIdentifier:", v8);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v9, "usesDataSeparatedContainer"))
          {
            objc_msgSend(v9, "containerURL");
            v10 = objc_claimAutoreleasedReturnValue();
            v11 = CDBLogHandle;
            if (v10)
            {
              v12 = (void *)v10;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138543618;
                *(_QWORD *)&buf[4] = v8;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v12;
                _os_log_impl(&dword_1A5CCB000, v11, OS_LOG_TYPE_DEFAULT, "Account ID %{public}@ will be migrated to %@", buf, 0x16u);
              }
              objc_msgSend(v9, "personaID");
              v13 = (id)objc_claimAutoreleasedReturnValue();
              v14 = v12;
              _CalErrorGetRecordID(v7);
              v97 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              v111 = 0;
              v96 = v15;
              v16 = objc_msgSend(v15, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v14, 1, 0, &v111);
              v17 = v111;
              if ((v16 & 1) == 0)
              {
                v24 = CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v117 = 138543874;
                  *(_QWORD *)&v117[4] = v97;
                  *(_WORD *)&v117[12] = 2112;
                  *(_QWORD *)&v117[14] = v14;
                  *(_WORD *)&v117[22] = 2112;
                  v118 = v17;
                  _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_ERROR, "Can't create directories for new separated database for account %{public}@ at path %@: %@", v117, 0x20u);
                }
                v25 = 0;
                v26 = v96;
                goto LABEL_74;
              }
              v18 = _CalDatabaseCopyAuxDatabaseForPersonaID(v92);
              if (v18)
              {
                CFRelease(v18);
                objc_msgSend(v14, "URLByAppendingPathComponent:", v90);
                v95 = (id)objc_claimAutoreleasedReturnValue();
                v19 = CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v117 = 138543618;
                  *(_QWORD *)&v117[4] = v13;
                  *(_WORD *)&v117[12] = 2114;
                  *(_QWORD *)&v117[14] = v97;
                  _os_log_impl(&dword_1A5CCB000, v19, OS_LOG_TYPE_DEFAULT, "Database already exists for persona %{public}@; also migrating account %{public}@ to the same database",
                    v117,
                    0x16u);
                }
                v20 = v92;
LABEL_38:
                if (_CalDatabaseGetRecordStore(v20))
                {
                  v91 = v17;
                  if (CDBLockingAssertionsEnabled)
                  {
                    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (Context)
                      os_unfair_lock_assert_owner(Context + 20);
                  }
                  Database = CPRecordStoreGetDatabase();
                  if (Database)
                  {
                    if (CDBLockingAssertionsEnabled)
                    {
                      if (*(_QWORD *)(Database + 104))
                      {
                        v47 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v47)
                          os_unfair_lock_assert_owner(v47 + 20);
                      }
                    }
                    v48 = CPSqliteDatabaseConnectionForWriting();
                    if (v48)
                    {
                      v49 = (_QWORD *)v48;
                      v50 = (const void *)CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(2688, v14);
                      if (v50)
                      {
                        v89 = v13;
                        CFRelease(v50);
                        v106[0] = MEMORY[0x1E0C809B0];
                        v106[1] = 3221225472;
                        v106[2] = ___CalDatabaseMigrateStoreToSeparateDB_block_invoke;
                        v106[3] = &unk_1E4F85040;
                        v95 = v95;
                        v107 = v95;
                        CalPerformSQLWithConnectionAndBindBlock(v49, 0, (uint64_t)CFSTR("ATTACH DATABASE ? AS aux"), v106);
                        CPRecordGetID();
                        if (CDBLockingAssertionsEnabled)
                        {
                          v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v51)
                            os_unfair_lock_assert_owner(v51 + 20);
                        }
                        RowidForRecordID = CPRecordStoreGetRowidForRecordID();
                        v53 = MEMORY[0x1E0C809B0];
                        v105[0] = MEMORY[0x1E0C809B0];
                        v105[1] = 3221225472;
                        v105[2] = ___CalDatabaseMigrateStoreToSeparateDB_block_invoke_2;
                        v105[3] = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v105[4] = RowidForRecordID;
                        v54 = (void *)MEMORY[0x1A85B52F0](v105);
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalStoreClass, CFSTR("WHERE ROWID = ?"), v54, CFSTR("WHERE record = ?"), v54);
                        *(_QWORD *)v117 = v53;
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalCalendarClass, CFSTR("WHERE store_id = ?"), v54, CFSTR("WHERE store_id = ?"), v117);
                        v55 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalEventClass, CFSTR("WHERE calendar_id IN (SELECT ROWID FROM aux.Calendar)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = v55;
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalAlarmClass, CFSTR("WHERE calendaritem_owner_id IN (SELECT ROWID FROM aux.CalendarItem) OR calendar_owner_id IN (SELECT ROWID FROM aux.Calendar)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = v55;
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalLocationClass, CFSTR("WHERE item_owner_id IN (SELECT ROWID FROM aux.CalendarItem) OR client_loc_owner_id IN (SELECT ROWID FROM aux.CalendarItem) OR start_loc_owner_id IN (SELECT ROWID FROM aux.CalendarItem) OR end_loc_owner_id IN (SELECT ROWID FROM aux.CalendarItem) OR alarm_owner_id IN (SELECT ROWID FROM aux.Alarm)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = v55;
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalParticipantClass, CFSTR("WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = v55;
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalErrorClass, CFSTR("WHERE store_owner_id = ? OR calendar_owner_id IN (SELECT ROWID FROM aux.Calendar) OR calendaritem_owner_id IN (SELECT ROWID FROM aux.CalendarItem)"), v54, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = v55;
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalRecurrenceClass, CFSTR("WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = v55;
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalEventActionClass, CFSTR("WHERE event_id IN (SELECT ROWID FROM aux.CalendarItem)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalExceptionDateClass, CFSTR("WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        v87 = v54;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalAttachmentFileClass, CFSTR("WHERE store_id = ?"), v54, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalAttachmentClass, CFSTR("WHERE file_id IN (SELECT ROWID FROM aux.AttachmentFile)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalCategoryLinkClass, CFSTR("WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalCategoryClass, CFSTR("WHERE ROWID IN (SELECT category_id FROM aux.CategoryLink)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalShareeClass, CFSTR("WHERE owner_id IN (SELECT ROWID FROM aux.Calendar)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalNotificationClass, CFSTR("WHERE calendar_id IN (SELECT ROWID FROM aux.Calendar) OR invite_reply_calendar_id IN (SELECT ROWID FROM aux.Calendar)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalResourceChangeClass, CFSTR("WHERE notification_id IN (SELECT ROWID FROM aux.Notification)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalSuggestedEventInfoClass, CFSTR("WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalContactClass, CFSTR("WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        v56 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)v117 = MEMORY[0x1E0C809B0];
                        *(_QWORD *)&v117[8] = 3221225472;
                        *(_QWORD *)&v117[16] = ___CalDatabaseCopyToAuxDatabase_block_invoke;
                        v118 = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
                        v119 = RowidForRecordID;
                        _CalDatabaseCopyToAuxDatabaseWithChanges(v49, &kCalConferenceClass, CFSTR("WHERE owner_id IN (SELECT ROWID FROM aux.CalendarItem)"), 0, CFSTR("WHERE store_id = ?"), v117);
                        v57 = v92;
                        CalIdentityCopyDataToAuxDatabase(v92, RowidForRecordID, v49);
                        CalDatabasePersistentChangeTrackingCopyToAuxDatabase(v49, RowidForRecordID);
                        CalPerformSQLWithConnection(v49, (uint64_t)CFSTR("INSERT OR REPLACE INTO aux._SqliteDatabaseProperties SELECT * FROM _SqliteDatabaseProperties WHERE key IN (\"CalLastCategoryChanges\", \"CalLastCalendarChanges\", \"CalLastEventRecurrenceChanges\", \"CalLastEventAlarmChanges\", \"__CPRecordSequenceNumber\")"));
                        CalPerformSQLWithConnection(v49, (uint64_t)CFSTR("DETACH DATABASE aux"));
                        v58 = _CalDatabaseCopyAuxDatabaseForPersonaID(v92);
                        v2 = v84;
                        if (v58)
                        {
LABEL_55:
                          v103[0] = v56;
                          v103[1] = 3221225472;
                          v103[2] = ___CalDatabaseMigrateStoreToSeparateDB_block_invoke_43;
                          v103[3] = &unk_1E4F85068;
                          v104[0] = v97;
                          v104[1] = v58;
                          CalPerformSQLWithConnectionAndBindBlock(v49, 0, (uint64_t)CFSTR("INSERT OR REPLACE INTO AuxDatabaseAccount (account_id, database_id) VALUES (?, ?)"), v103);
                          CFRelease(v58);
                          v25 = 1;
                          *(_BYTE *)(v57 + 379) = 1;
                          CalPerformSQLWithConnectionAndBindBlock(v49, 0, (uint64_t)CFSTR("DELETE FROM Store WHERE ROWID = ?"), v87);
                          *(_BYTE *)(v57 + 379) = 0;
                          objc_msgSend(*(id *)(v57 + 328), "removeAllObjects");
                          v60 = (os_unfair_lock_s *)CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(2176, v14);
                          v61 = (const void *)CalDatabaseCopyEventOccurrenceCache(v60);
                          _CalEventOccurrenceCacheForceRebuild((uint64_t)v61);
                          CFRelease(v61);
                          CFRelease(v60);
                          v62 = (id *)v104;
                        }
                        else
                        {
                          *(_QWORD *)buf = v56;
                          *(_QWORD *)&buf[8] = 3221225472;
                          *(_QWORD *)&buf[16] = ___CalDatabaseMigrateStoreToSeparateDB_block_invoke_3;
                          v114 = &unk_1E4F84FB8;
                          v115 = v14;
                          v116 = v89;
                          CalPerformSQLWithConnectionAndBindBlock(v49, 0, (uint64_t)CFSTR("INSERT INTO AuxDatabase (path, persona_id) VALUES (?, ?)"), buf);
                          v59 = _CalDatabaseCopyAuxDatabaseForPersonaID(v92);
                          if (v59)
                          {
                            v58 = v59;

                            v57 = v92;
                            goto LABEL_55;
                          }
                          v81 = CDBLogHandle;
                          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                          {
                            *(_WORD *)v117 = 0;
                            _os_log_impl(&dword_1A5CCB000, v81, OS_LOG_TYPE_ERROR, "Couldn't insert aux db reference into main db", v117, 2u);
                          }

                          v25 = 0;
                          v62 = &v115;
                        }
                        v13 = v89;
                        v17 = v91;

LABEL_72:
                        v26 = v96;
LABEL_73:

LABEL_74:
                        v73 = CDBLogHandle;
                        if (v25)
                        {
                          v3 = v93;
                          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)buf = 138543618;
                            *(_QWORD *)&buf[4] = v8;
                            *(_WORD *)&buf[12] = 2112;
                            *(_QWORD *)&buf[14] = v14;
                            v74 = v73;
                            v75 = OS_LOG_TYPE_DEFAULT;
                            v76 = "Account ID %{public}@ successfully migrated to %@";
                            v77 = 22;
                            goto LABEL_79;
                          }
                        }
                        else
                        {
                          v3 = v93;
                          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 138543362;
                            *(_QWORD *)&buf[4] = v8;
                            v74 = v73;
                            v75 = OS_LOG_TYPE_ERROR;
                            v76 = "Account ID %{public}@ NOT migrated. Migration failed.";
                            v77 = 12;
LABEL_79:
                            _os_log_impl(&dword_1A5CCB000, v74, v75, v76, buf, v77);
                          }
                        }

                        v5 = v94;
LABEL_81:

                        goto LABEL_82;
                      }
                      v78 = CDBLogHandle;
                      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v117 = 138543618;
                        *(_QWORD *)&v117[4] = v97;
                        *(_WORD *)&v117[12] = 2112;
                        *(_QWORD *)&v117[14] = v14;
                        v68 = v78;
                        v69 = "Couldn't create database for account %{public}@ in directory %@";
                        v71 = 22;
LABEL_64:
                        _os_log_impl(&dword_1A5CCB000, v68, OS_LOG_TYPE_ERROR, v69, v117, v71);
                      }
LABEL_65:
                      v25 = 0;
LABEL_66:
                      v26 = v96;
LABEL_67:
                      v17 = v91;
                      goto LABEL_73;
                    }
                    v70 = CDBLogHandle;
                    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                      goto LABEL_65;
                    *(_WORD *)v117 = 0;
                    v68 = v70;
                    v69 = "Couldn't get writer connection to database";
                  }
                  else
                  {
                    v67 = CDBLogHandle;
                    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                      goto LABEL_65;
                    *(_WORD *)v117 = 0;
                    v68 = v67;
                    v69 = "No sqliteDB";
                  }
                  v71 = 2;
                  goto LABEL_64;
                }
                v63 = CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v117 = 0;
                  v64 = v63;
                  v65 = "No record store.";
                  v66 = 2;
                  goto LABEL_70;
                }
                goto LABEL_71;
              }
              objc_msgSend(v14, "URLByAppendingPathComponent:", v90);
              v95 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v95, "path");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v28 = objc_msgSend(v96, "fileExistsAtPath:", v27);

              if (v28)
              {
                v29 = CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v117 = 138543618;
                  *(_QWORD *)&v117[4] = v97;
                  *(_WORD *)&v117[12] = 2112;
                  *(_QWORD *)&v117[14] = v14;
                  _os_log_impl(&dword_1A5CCB000, v29, OS_LOG_TYPE_ERROR, "Found old database file in directory for account %{public}@ to be migrated to (%@). Deleting it.", v117, 0x16u);
                }
                v110 = v17;
                v30 = objc_msgSend(v96, "removeItemAtURL:error:", v95, &v110);
                v31 = v110;

                if ((v30 & 1) == 0)
                {
                  v17 = v31;
                  v72 = CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v117 = 138543618;
                    *(_QWORD *)&v117[4] = v97;
                    *(_WORD *)&v117[12] = 2112;
                    *(_QWORD *)&v117[14] = v31;
                    v64 = v72;
                    v65 = "Unable to remove old database for account %{public}@: %@";
                    v66 = 22;
LABEL_70:
                    _os_log_impl(&dword_1A5CCB000, v64, OS_LOG_TYPE_ERROR, v65, v117, v66);
                  }
LABEL_71:
                  v25 = 0;
                  goto LABEL_72;
                }
                v85 = v14;
                v17 = v31;
              }
              else
              {
                v85 = v14;
              }
              v32 = (void *)MEMORY[0x1E0C99E98];
              objc_msgSend(v95, "path");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "stringByAppendingString:", CFSTR("-shm"));
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v32, "fileURLWithPath:", v34);
              v35 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v35, "path");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              v26 = v96;
              LODWORD(v33) = objc_msgSend(v96, "fileExistsAtPath:", v36);

              v86 = v35;
              if ((_DWORD)v33)
              {
                v109 = v17;
                v37 = objc_msgSend(v96, "removeItemAtURL:error:", v35, &v109);
                v38 = v109;

                if ((v37 & 1) == 0)
                {
                  v91 = v38;
                  v79 = CDBLogHandle;
                  v14 = v85;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v117 = 138543618;
                    *(_QWORD *)&v117[4] = v97;
                    *(_WORD *)&v117[12] = 2112;
                    *(_QWORD *)&v117[14] = v38;
                    _os_log_impl(&dword_1A5CCB000, v79, OS_LOG_TYPE_ERROR, "Unable to remove old database-shm for account %{public}@: %@", v117, 0x16u);
                  }

                  v25 = 0;
                  v2 = v84;
                  goto LABEL_67;
                }
                v88 = v13;
                v17 = v38;
              }
              else
              {
                v88 = v13;
              }
              v14 = v85;
              v39 = (void *)MEMORY[0x1E0C99E98];
              objc_msgSend(v95, "path");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "stringByAppendingString:", CFSTR("-wal"));
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v39, "fileURLWithPath:", v41);
              v42 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v42, "path");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              LODWORD(v41) = objc_msgSend(v96, "fileExistsAtPath:", v43);

              if ((_DWORD)v41)
              {
                v108 = v17;
                v44 = objc_msgSend(v96, "removeItemAtURL:error:", v42, &v108);
                v91 = v108;

                v2 = v84;
                if ((v44 & 1) == 0)
                {
                  v80 = CDBLogHandle;
                  v13 = v88;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v117 = 138543618;
                    *(_QWORD *)&v117[4] = v97;
                    *(_WORD *)&v117[12] = 2112;
                    *(_QWORD *)&v117[14] = v91;
                    _os_log_impl(&dword_1A5CCB000, v80, OS_LOG_TYPE_ERROR, "Unable to remove old database-shm for account %{public}@: %@", v117, 0x16u);
                  }

                  v25 = 0;
                  goto LABEL_66;
                }
                v13 = v88;
                v17 = v91;
              }
              else
              {
                v2 = v84;
                v13 = v88;
              }

              v20 = v92;
              goto LABEL_38;
            }
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              v21 = v11;
              objc_msgSend(v9, "personaID");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              *(_QWORD *)&buf[4] = v8;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v22;
              _os_log_impl(&dword_1A5CCB000, v21, OS_LOG_TYPE_ERROR, "Account ID %{public}@ with persona ID %@{public}@ is data separated, but we couldn't get a container for it.", buf, 0x16u);

            }
          }
          v23 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v8;
            _os_log_impl(&dword_1A5CCB000, v23, OS_LOG_TYPE_DEFAULT, "Account ID %{public}@ does not need to be migrated out of the main database", buf, 0xCu);
          }
          goto LABEL_81;
        }
LABEL_82:

        ++v6;
      }
      while (v5 != v6);
      v82 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v99, v112, 16);
      v5 = v82;
    }
    while (v82);
  }

  return 1;
}

void _CalDatabaseCopyToAuxDatabaseWithChanges(_QWORD *a1, _QWORD *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  __CFString *v12;
  id v13;
  id v14;
  int v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  const __CFString *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  const __CFString *v27;
  void *v28;
  void *v29;
  __CFString *v30;

  v30 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  objc_msgSend(v14, "appendString:", CFSTR("ROWID"));
  v15 = *((_DWORD *)a2 + 18);
  if (v15 >= 1)
  {
    v16 = 0;
    for (i = 0; i < v15; ++i)
    {
      v18 = a2[10];
      if ((*(_BYTE *)(v18 + v16 + 24) & 4) == 0 && *(_DWORD *)(v18 + v16 + 8))
      {
        objc_msgSend(v14, "appendFormat:", CFSTR(", %s"), *(_QWORD *)(v18 + v16));
        v15 = *((_DWORD *)a2 + 18);
      }
      v16 += 40;
    }
  }
  v19 = &stru_1E4F941C0;
  if (v30)
    v19 = v30;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("INSERT INTO aux.%s (%@) SELECT %@ FROM %s %@"), *a2, v14, v14, *a2, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  CalPerformSQLWithConnectionAndBindBlock(a1, 0, (uint64_t)v20, v11);
  if ((a2[7] & 2) != 0)
  {
    v29 = v13;
    v21 = (void *)objc_msgSend(CFSTR("ROWID, record, type"), "mutableCopy");
    v22 = v21;
    if ((a2[7] & 0x10) != 0)
      objc_msgSend(v21, "appendString:", CFSTR(", sequence_number"));
    v23 = *((_DWORD *)a2 + 18);
    if (v23 >= 1)
    {
      v24 = 0;
      for (j = 0; j < v23; ++j)
      {
        v26 = a2[10];
        if ((*(_BYTE *)(v26 + v24 + 24) & 0xA) != 0)
        {
          objc_msgSend(v22, "appendFormat:", CFSTR(", %s"), *(_QWORD *)(v26 + v24));
          v23 = *((_DWORD *)a2 + 18);
        }
        v24 += 40;
      }
    }
    v27 = &stru_1E4F941C0;
    if (v12)
      v27 = v12;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("INSERT INTO aux.%sChanges (%@) SELECT %@ FROM %sChanges %@"), *a2, v22, v22, *a2, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v29;
    CalPerformSQLWithConnectionAndBindBlock(a1, 0, (uint64_t)v28, v29);

  }
}

void sub_1A5D09384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void CalErrorInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalErrorClass, (const char **)&kCalErrorIndexes, 0);
}

void CalErrorMigrateTables(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3 <= 16004)
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalErrorClass, (const char **)&kCalErrorIndexes, 0);
  }
}

uint64_t CalErrorGetPropertyIDWithPropertyName(void *key)
{
  void *value;

  if (CalErrorGetPropertyIDWithPropertyName_onceToken != -1)
    dispatch_once(&CalErrorGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_3);
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalErrorGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A5D09EE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 80; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

const void *_CalDatabaseCreateError(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 24);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateError(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Error;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Error = _CalDatabaseCreateError((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Error;
}

_QWORD *_CalRemoveError(const void *a1)
{
  CFTypeRef Owner;
  const void *v3;
  uint64_t DatabaseForRecord;

  Owner = _CalErrorGetOwner((uint64_t)a1);
  if (Owner)
  {
    v3 = Owner;
    if (_CalEntityIsOfType(Owner, 6))
    {
      return _CalStoreSetError((uint64_t)v3, 0);
    }
    else if (_CalEntityIsOfType(v3, 1))
    {
      return _CalCalendarSetError((uint64_t)v3, 0);
    }
    else
    {
      return _CalCalendarItemSetError((uint64_t)v3, 0);
    }
  }
  else
  {
    DatabaseForRecord = CalGetDatabaseForRecord();
    return (_QWORD *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
}

CFTypeRef _CalErrorGetOwner(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  uint64_t v4;
  const os_unfair_lock *v5;
  uint64_t v6;
  const os_unfair_lock *v7;
  uint64_t v8;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
  {
    v4 = Property;
    if (CalRelationGetRelatedObject(Property))
      return CalRelationGetRelatedObject(v4);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v5)
          os_unfair_lock_assert_owner(v5 + 20);
      }
    }
  }
  v6 = CPRecordGetProperty();
  if (v6)
  {
    v4 = v6;
    if (CalRelationGetRelatedObject(v6))
      return CalRelationGetRelatedObject(v4);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  v8 = CPRecordGetProperty();
  if (v8 && (v4 = v8, CalRelationGetRelatedObject(v8)))
    return CalRelationGetRelatedObject(v4);
  else
    return 0;
}

void CalRemoveError(const void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveError(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalErrorCopyOwner(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Owner;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalErrorGetOwner(a1);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef _CalErrorHasValidParent(uint64_t a1)
{
  CFTypeRef result;

  result = _CalErrorGetOwner(a1);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

void _CalErrorCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Error WHERE calendaritem_owner_id NOT IN (SELECT ROWID FROM CalendarItem) AND calendar_owner_id NOT IN (SELECT ROWID FROM Calendar) AND store_owner_id NOT IN (SELECT ROWID FROM Store);"),
    0);
}

uint64_t _CalErrorGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t CalDatabaseCopyAllErrors(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const os_unfair_lock *Context;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    RecordStore = CPRecordStoreCopyAllInstancesOfClass();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return RecordStore;
}

id CalDatabaseGetIDOfOneEventWithAnErrorPerSource(int a1, os_unfair_lock_s *a2)
{
  os_unfair_lock_s *v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v7;
  uint64_t v8;
  const os_unfair_lock *v9;
  uint64_t v10;
  uint64_t **v11;
  void *v12;
  uint64_t v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  const os_unfair_lock *v16;
  void *v17;
  id v18;
  _QWORD v20[4];
  id v21;
  int v22;

  v4 = a2 + 20;
  os_unfair_lock_lock(a2 + 20);
  if (!_CalDatabaseGetRecordStore((uint64_t)a2))
    goto LABEL_30;
  if (CDBLockingAssertionsEnabled)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_30;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (!v8)
    goto LABEL_30;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)v8)
    {
      if (*(_QWORD *)(*(_QWORD *)v8 + 104))
      {
        v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9)
          os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    v11 = (uint64_t **)v10;
    v12 = (void *)objc_opt_new();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        v13 = **v11;
        if (v13)
        {
          if (*(_QWORD *)(v13 + 104))
          {
            v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14)
              os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        v15 = **v11;
        if (v15)
        {
          if (*(_QWORD *)(v15 + 104))
          {
            v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16)
              os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v12, "count"));
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = ___CalDatabaseGetIDOfOneEventWithAnErrorPerSource_block_invoke;
    v20[3] = &unk_1E4F85338;
    v22 = a1;
    v18 = v17;
    v21 = v18;
    objc_msgSend(v12, "enumerateKeysAndObjectsUsingBlock:", v20);

  }
  else
  {
LABEL_30:
    v18 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v18;
}

uint64_t _CalErrorGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalErrorGetErrorType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

uint64_t CalErrorGetErrorCode(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

CFTypeRef CalErrorCopyUserInfo(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const void *Property;
  CFTypeRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const void *)CPRecordGetProperty();
  if (Property)
    v5 = CFRetain(Property);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalErrorSetUserInfo(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetUserInfo(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalErrorSetUserInfo(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalErrorSetAccountErrorCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorType(a1);
  _CalErrorSetErrorCode(a1);
  CalErrorEncodeUserInfo(a3);
  _CalErrorSetUserInfo(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalErrorSetErrorType(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t _CalErrorSetErrorCode(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

CFTypeRef CalErrorEncodeUserInfo(uint64_t a1)
{
  void *v1;
  id v2;
  CFTypeRef v3;
  NSObject *v4;
  id v6;
  uint8_t buf[4];
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v6 = 0;
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a1, 1, &v6);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v6;
  if (v1)
  {
    v3 = CFAutorelease(v1);
  }
  else
  {
    v4 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v8 = v2;
      _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_ERROR, "Error encoding user info: %@", buf, 0xCu);
    }
    v3 = 0;
  }

  return v3;
}

void CalErrorSetCalendarErrorCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorType(a1);
  _CalErrorSetErrorCode(a1);
  CalErrorEncodeUserInfo(a3);
  _CalErrorSetUserInfo(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalErrorSetCalendarItemErrorCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorType(a1);
  _CalErrorSetErrorCode(a1);
  CalErrorEncodeUserInfo(a3);
  _CalErrorSetUserInfo(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalErrorDecodeUserInfo(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  CFTypeRef v12;
  NSObject *v13;
  id v15;
  uint8_t buf[4];
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v2 = (void *)MEMORY[0x1E0C99E60];
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  objc_msgSend(v2, "setWithObjects:", v3, v4, v5, v6, v7, v8, objc_opt_class(), 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0;
  objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v9, a1, &v15);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v15;
  if (v10)
  {
    v12 = CFAutorelease(v10);
  }
  else
  {
    v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v11;
      _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "Error decoding user info: %@", buf, 0xCu);
    }
    v12 = 0;
  }

  return v12;
}

uint64_t eventWithErrorAndSouceHandler(uint64_t a1, void *a2)
{
  sqlite3_stmt *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v3 = *(sqlite3_stmt **)(a1 + 8);
  v4 = a2;
  v5 = sqlite3_column_int(v3, 0);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, v6);

  return 0;
}

os_unfair_lock *CalDatabaseCreateWithAuxDatabaseRef(os_unfair_lock *a1, const void *a2, int a3)
{
  return CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(a1, a2, 0, a3);
}

os_unfair_lock *CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(os_unfair_lock *a1, const void *a2, void *a3, int a4)
{
  id v7;
  int UID;
  CFTypeRef v9;
  void *v10;
  CalDatabaseInitializationConfiguration *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  os_unfair_lock *v15;
  const void *v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  id v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  CFTypeRef v26;
  void *v27;
  uint64_t v28;
  NSObject *v30;
  NSObject *v31;
  id v32;
  id v33;
  uint8_t buf[4];
  _BYTE v35[18];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  UID = CalAuxDatabaseGetUID();
  v9 = CalAuxDatabaseCopyPath((uint64_t)a2);
  if (v9)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_alloc_init(CalDatabaseInitializationConfiguration);
    -[CalDatabaseInitializationConfiguration setOptions:](v11, "setOptions:", a4 | 0x1A00u);
    -[CalDatabaseInitializationConfiguration setDirectoryURL:](v11, "setDirectoryURL:", v10);
    CalDatabaseGetCalendarDataContainerProvider((uint64_t)a1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[CalDatabaseInitializationConfiguration setDataContainerProvider:](v11, "setDataContainerProvider:", v12);

    CalDatabaseGetPreferences((uint64_t)a1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[CalDatabaseInitializationConfiguration setPreferences:](v11, "setPreferences:", v13);

    v14 = CalDatabaseCreateWithConfiguration(v11);
    if (v14)
    {
      v15 = (os_unfair_lock *)v14;
      CalDatabaseSetAuxilliaryDatabaseID(v14, UID);

      v16 = 0;
      v17 = 0;
LABEL_27:
      CFRelease(v9);
      goto LABEL_28;
    }
    v19 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v35 = UID;
      *(_WORD *)&v35[4] = 2112;
      *(_QWORD *)&v35[6] = v9;
      _os_log_impl(&dword_1A5CCB000, v19, OS_LOG_TYPE_DEFAULT, "Failed to open aux db [%d] with cached path %@", buf, 0x12u);
    }

  }
  else
  {
    v18 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v35 = UID;
      _os_log_impl(&dword_1A5CCB000, v18, OS_LOG_TYPE_ERROR, "Unexpected NULL path for auxDatabase [%d]", buf, 8u);
    }
  }
  v20 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v35 = UID;
    *(_WORD *)&v35[4] = 2114;
    *(_QWORD *)&v35[6] = 0;
    _os_log_impl(&dword_1A5CCB000, v20, OS_LOG_TYPE_DEFAULT, "Attempting to derive path for auxDatabase [%d], persona: %{public}@", buf, 0x12u);
  }
  if (!v7)
  {
    v26 = CalAuxDatabaseCopyPersonaID((uint64_t)a2);
    if (v26)
    {
      v16 = v26;
      CalDatabaseGetCalendarDataContainerProvider((uint64_t)a1);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "containerInfoForPersonaIdentifier:", v16);
      v28 = objc_claimAutoreleasedReturnValue();
      if (v28)
      {
        v7 = (id)v28;

        goto LABEL_13;
      }
      v31 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)v35 = v16;
        _os_log_impl(&dword_1A5CCB000, v31, OS_LOG_TYPE_ERROR, "Couldn't look up persona ID %{public}@", buf, 0xCu);
      }
      CalRemoveAuxDatabase(a2);
      CalDatabaseSave((uint64_t)a1);

      v17 = 0;
    }
    else
    {
      v30 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v35 = UID;
        _os_log_impl(&dword_1A5CCB000, v30, OS_LOG_TYPE_ERROR, "AuxDatabase entry [%d] missing persona ID", buf, 8u);
      }
      v17 = 0;
      v16 = 0;
    }
    v15 = 0;
    v7 = 0;
    if (v9)
      goto LABEL_27;
    goto LABEL_28;
  }
  v16 = 0;
LABEL_13:
  if ((objc_msgSend(v7, "usesDataSeparatedContainer") & 1) != 0)
  {
    v33 = 0;
    v15 = (os_unfair_lock *)CalDatabaseDeriveAuxDatabaseForContainerInfo((uint64_t)a1, a4 | 0x1201u, v7, &v33);
    v21 = v33;
    v22 = v21;
    if (v15)
    {
      v17 = v21;
    }
    else
    {
      v32 = v21;
      v15 = (os_unfair_lock *)CalDatabaseDeriveAuxDatabaseForContainerInfo((uint64_t)a1, a4 | 0x201u, v7, &v32);
      v17 = v32;

      if (!v15)
        goto LABEL_26;
      CalDatabaseSetupNewlyCreatedAuxDatabase(a1, v15);
    }
    CalDatabaseSetAuxilliaryDatabaseID((uint64_t)v15, UID);
    CalAuxDatabaseSetPath((uint64_t)a2);
    CalDatabaseSave((uint64_t)a1);
LABEL_26:
    if (!v9)
      goto LABEL_28;
    goto LABEL_27;
  }
  v23 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    v24 = v23;
    objc_msgSend(v7, "accountID");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)v35 = v25;
    *(_WORD *)&v35[8] = 2114;
    *(_QWORD *)&v35[10] = v16;
    _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_ERROR, "Account [%{public}@] with persona [%{public}@] is not data-separated, but we have an aux db entry in the main db. Removing the aux entry", buf, 0x16u);

  }
  CalRemoveAuxDatabase(a2);
  CalDatabaseSave((uint64_t)a1);
  v17 = 0;
  v15 = 0;
  if (v9)
    goto LABEL_27;
LABEL_28:
  if (v16)
    CFRelease(v16);

  return v15;
}

os_unfair_lock *CalDatabaseCreateWithOptionsForAccountID(uint64_t a1, __CFString *a2)
{
  CalDatabaseInitializationConfiguration *v4;
  os_unfair_lock *v5;

  if ((_DWORD)a1)
  {
    v4 = objc_alloc_init(CalDatabaseInitializationConfiguration);
    -[CalDatabaseInitializationConfiguration setOptions:](v4, "setOptions:", a1);
  }
  else
  {
    v4 = 0;
  }
  v5 = CalDatabaseCreateWithConfigurationForAccountOrAccountID(v4, 0, a2);

  return v5;
}

os_unfair_lock *CalDatabaseCreateWithConfigurationForAccountID(void *a1, __CFString *a2)
{
  return CalDatabaseCreateWithConfigurationForAccountOrAccountID(a1, 0, a2);
}

os_unfair_lock *CalDatabaseCreateWithOptionsMainDatabaseDirectoryAndContainerProviderForAccountID(uint64_t a1, __CFString *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  CalDatabaseInitializationConfiguration *v9;
  id v10;
  os_unfair_lock *v11;

  v7 = a4;
  v8 = v7;
  if ((_DWORD)a1 || a3 || v7)
  {
    v10 = a3;
    v9 = -[CalDatabaseInitializationConfiguration initWithDirectoryURL:]([CalDatabaseInitializationConfiguration alloc], "initWithDirectoryURL:", v10);

    -[CalDatabaseInitializationConfiguration setOptions:](v9, "setOptions:", a1);
    if (v8)
      -[CalDatabaseInitializationConfiguration setDataContainerProvider:](v9, "setDataContainerProvider:", v8);
  }
  else
  {
    v9 = 0;
  }
  v11 = CalDatabaseCreateWithConfigurationForAccountOrAccountID(v9, 0, a2);

  return v11;
}

os_unfair_lock *CalDatabaseCreateWithConfigurationForPersonaID(void *a1, uint64_t a2)
{
  id v3;
  os_unfair_lock *v4;
  CFTypeRef v5;
  const void *v6;
  os_unfair_lock *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  NSObject *v12;
  _BOOL4 v13;
  id v14;
  const void *AuxDatabase;
  void *v16;
  int UID;
  const char *v18;
  id v20;
  uint8_t buf[4];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (os_unfair_lock *)CalDatabaseCreateWithConfiguration(v3);
  v5 = CalDatabaseCopyAuxDatabaseForPersonaID(v4);
  if (!v5)
  {
    CalDatabaseGetCalendarDataContainerProvider((uint64_t)v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "containerInfoForPersonaIdentifier:", a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
    {
      v11 = objc_msgSend(v9, "usesDataSeparatedContainer");
      v12 = CDBLogHandle;
      v13 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT);
      if ((v11 & 1) != 0)
      {
        if (v13)
        {
          *(_DWORD *)buf = 138543362;
          v22 = a2;
          _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_DEFAULT, "Attempting to create aux DB for persona %{public}@", buf, 0xCu);
        }
        v20 = 0;
        v7 = (os_unfair_lock *)CalDatabaseDeriveAuxDatabaseForContainerInfo((uint64_t)v4, objc_msgSend(v3, "options") | 1, v10, &v20);
        v14 = v20;
        if (v7)
        {
          AuxDatabase = CalDatabaseCreateAuxDatabase(v4);
          objc_msgSend(v10, "personaID");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          CalAuxDatabaseSetPersonaID((uint64_t)AuxDatabase);

          CalAuxDatabaseSetPath((uint64_t)AuxDatabase);
          CalDatabaseSave((uint64_t)v4);
          UID = CalAuxDatabaseGetUID();
          CalDatabaseSetAuxilliaryDatabaseID((uint64_t)v7, UID);
          CalDatabaseSetupNewlyCreatedAuxDatabase(v4, v7);
          CFRelease(AuxDatabase);
        }
        CFRelease(v4);

        goto LABEL_16;
      }
      if (v13)
      {
        *(_DWORD *)buf = 138543362;
        v22 = a2;
        v18 = "Persona %{public}@ is not data separated. Using main database.";
        goto LABEL_14;
      }
    }
    else
    {
      v12 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        v22 = a2;
        v18 = "Couldn't get container info for persona %{public}@. Using main database for this persona.";
LABEL_14:
        _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_DEFAULT, v18, buf, 0xCu);
      }
    }
    v7 = v4;
LABEL_16:

    goto LABEL_17;
  }
  v6 = v5;
  v7 = CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(v4, v5, 0, objc_msgSend(v3, "options"));
  CFRelease(v6);
  CFRelease(v4);
LABEL_17:

  return v7;
}

uint64_t CalDatabaseDeriveAuxDatabaseForContainerInfo(uint64_t a1, int a2, void *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  void *v18;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  objc_msgSend(v7, "containerURL");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    v11 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v12 = v11;
      objc_msgSend(v7, "accountID");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "personaID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v13;
      v22 = 2114;
      v23 = v14;
      v15 = "Unexpected nil auxURL for account %{public}@ with persona %{public}@.  Giving up.";
      v16 = v12;
      v17 = 22;
LABEL_9:
      _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v20, v17);

    }
LABEL_10:
    v10 = 0;
    goto LABEL_11;
  }
  v9 = CalDatabaseCreateWithOptionsAndDatabaseDirectoryURL(a2 | 0x800u, v8);
  if (!v9)
  {
    v18 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v12 = v18;
      objc_msgSend(v7, "accountID");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "personaID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138412802;
      v21 = v8;
      v22 = 2114;
      v23 = v13;
      v24 = 2114;
      v25 = v14;
      v15 = "Failed to create aux db with derived path [%@] for account: %{public}@ persona=%{public}@.  Giving up.";
      v16 = v12;
      v17 = 32;
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  v10 = v9;
  objc_storeStrong((id *)(v9 + 288), *(id *)(a1 + 288));
  if (a4)
  {
    objc_msgSend(v8, "path");
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_11:

  return v10;
}

void CalDatabaseSetupNewlyCreatedAuxDatabase(os_unfair_lock *a1, os_unfair_lock *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  CalDatabaseMultiLock(a1, a2);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = (id)_CalDatabaseCopyRegisteredClientIdentifiersForPersistentChangeTrackingWithStoreUID((uint64_t)a1, 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        _CalDatabaseRegisterClientForPersistentChangeTracking((uint64_t)a2, *(void **)(*((_QWORD *)&v9 + 1) + 8 * v8++), 0);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

  CalDatabaseMultiUnlock(a1, a2);
}

os_unfair_lock *CalDatabaseCreateWithConfigurationForAccountOrAccountID(void *a1, void *a2, __CFString *a3)
{
  id v5;
  id v6;
  int v7;
  os_unfair_lock *v8;
  void *v9;
  const void *v10;
  id v11;
  NSObject *v12;
  CFTypeRef v14;
  void *AuxDatabaseAccount;
  CFTypeRef AuxDatabase;
  os_unfair_lock *v17;
  os_unfair_lock *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  _BOOL4 v23;
  NSObject *v24;
  __CFString *v25;
  void *v26;
  NSObject *v27;
  __CFString *v28;
  NSObject *v29;
  __CFString *v30;
  void *v31;
  int UID;
  id v33;
  uint8_t buf[4];
  __CFString *v35;
  __int16 v36;
  __CFString *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a1;
  v7 = objc_msgSend(v6, "options");
  v8 = (os_unfair_lock *)CalDatabaseCreateWithConfiguration(v6);

  if (v8)
  {
    CalDatabaseGetCalendarDataContainerProvider((uint64_t)v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!a3)
    {
      objc_msgSend(v5, "identifier");
      a3 = (__CFString *)objc_claimAutoreleasedReturnValue();

      if (!a3)
        goto LABEL_7;
    }
    if (!_os_feature_enabled_impl())
      goto LABEL_7;
    v10 = CalDatabaseCopyStoreWithExternalID(v8, a3);
    if (v10)
    {
      CFRelease(v10);
LABEL_7:
      v11 = 0;
      goto LABEL_11;
    }
    v14 = CalDatabaseCopyAuxDatabaseAccountForAccountID(v8);
    if (v14)
    {
      AuxDatabaseAccount = (void *)v14;
      AuxDatabase = CalAuxDatabaseAccountCopyAuxDatabase((uint64_t)v14);
      v17 = CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(v8, AuxDatabase, 0, v7);
      v18 = 0;
      v11 = 0;
LABEL_14:
      CFRelease(AuxDatabaseAccount);
LABEL_15:
      if (AuxDatabase)
        CFRelease(AuxDatabase);
      if (v17 != v18 && v18)
        CFRelease(v18);
      goto LABEL_34;
    }
    v19 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v35 = a3;
      _os_log_impl(&dword_1A5CCB000, v19, OS_LOG_TYPE_DEFAULT, "No store or aux db entry for account: %@.", buf, 0xCu);
    }
    if (v5)
      objc_msgSend(v9, "containerInfoForAccount:", v5);
    else
      objc_msgSend(v9, "containerInfoForAccountIdentifier:", a3);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v20, "usesDataSeparatedContainer") & 1) != 0)
    {
      objc_msgSend(v20, "personaID");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      AuxDatabase = CalDatabaseCopyAuxDatabaseForPersonaID(v8);

      v22 = (void *)CDBLogHandle;
      v23 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT);
      if (AuxDatabase)
      {
        if (v23)
        {
          v24 = v22;
          objc_msgSend(v20, "personaID");
          v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v35 = v25;
          v36 = 2114;
          v37 = a3;
          _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_DEFAULT, "Found existing aux database with persona [%{public}@] for account [%{public}@]. Attaching account to existing auxiliary database.", buf, 0x16u);

        }
        AuxDatabaseAccount = (void *)CalDatabaseCreateAuxDatabaseAccount(v8);
        CalAuxDatabaseAccountSetAccountID((uint64_t)AuxDatabaseAccount);
        CalAuxDatabaseAddAccount((uint64_t)AuxDatabase, AuxDatabaseAccount);
        CalDatabaseSave((uint64_t)v8);
        v17 = CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(v8, AuxDatabase, v20, v7);
        v11 = 0;
        v18 = 0;
LABEL_40:

        if (!AuxDatabaseAccount)
          goto LABEL_15;
        goto LABEL_14;
      }
      if (v23)
      {
        v29 = v22;
        objc_msgSend(v20, "personaID");
        v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v35 = a3;
        v36 = 2114;
        v37 = v30;
        _os_log_impl(&dword_1A5CCB000, v29, OS_LOG_TYPE_DEFAULT, "Account [%{public}@, persona=%{public}@] is data-separated. Attempting to create aux DB", buf, 0x16u);

      }
      v33 = 0;
      v18 = (os_unfair_lock *)CalDatabaseDeriveAuxDatabaseForContainerInfo((uint64_t)v8, v7 | 1u, v20, &v33);
      v11 = v33;
      if (v18)
      {
        AuxDatabase = CalDatabaseCreateAuxDatabase(v8);
        objc_msgSend(v20, "personaID");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        CalAuxDatabaseSetPersonaID((uint64_t)AuxDatabase);

        CalAuxDatabaseSetPath((uint64_t)AuxDatabase);
        AuxDatabaseAccount = (void *)CalDatabaseCreateAuxDatabaseAccount(v8);
        CalAuxDatabaseAccountSetAccountID((uint64_t)AuxDatabaseAccount);
        CalAuxDatabaseAddAccount((uint64_t)AuxDatabase, AuxDatabaseAccount);
        CalDatabaseSave((uint64_t)v8);
        UID = CalAuxDatabaseGetUID();
        CalDatabaseSetAuxilliaryDatabaseID((uint64_t)v18, UID);
        CalDatabaseSetupNewlyCreatedAuxDatabase(v8, v18);
        v17 = v18;
        goto LABEL_40;
      }
      v17 = 0;
    }
    else
    {
      v26 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      {
        v27 = v26;
        objc_msgSend(v20, "personaID");
        v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v35 = a3;
        v36 = 2114;
        v37 = v28;
        _os_log_impl(&dword_1A5CCB000, v27, OS_LOG_TYPE_DEFAULT, "Account [%{public}@, persona=%{public}@] is not data-separated. Using main DB.", buf, 0x16u);

      }
      v11 = 0;
      v17 = v8;
    }

LABEL_34:
    if (v17 != v8)
    {
      CFRelease(v8);
      v8 = v17;
    }
    goto LABEL_11;
  }
  v12 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_ERROR, "Failed to open main db.", buf, 2u);
  }
  v8 = 0;
  v11 = 0;
  v9 = 0;
LABEL_11:

  return v8;
}

os_unfair_lock *CalDatabaseCreateWithConfigurationForAccount(void *a1, void *a2)
{
  return CalDatabaseCreateWithConfigurationForAccountOrAccountID(a1, a2, 0);
}

uint64_t CalDatabaseCopyDirectoryPathForAccountID(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v7 = a2;
  v8 = a3;
  if (!_os_feature_enabled_impl())
    goto LABEL_8;
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0D0C3E0], "sharedInstance");
    v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  v9 = objc_msgSend(v8, "accountUsesDataSeparatedContainer:", a1);
  if (a4)
    *a4 = v9;
  if (v9)
  {
    objc_msgSend(v8, "containerForAccountIdentifier:", a1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "path");
    v11 = objc_claimAutoreleasedReturnValue();

  }
  else
  {
LABEL_8:
    if (v7)
    {
      objc_msgSend(v7, "path");
      v12 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v12 = (uint64_t)CalDatabaseCopyDirectoryPath();
    }
    v11 = v12;
  }

  return v11;
}

uint64_t CalDatabaseCopyDirectoryPathForAuxDatabaseRef(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a2;
  v8 = a3;
  if (_os_feature_enabled_impl())
  {
    if (!v8)
    {
      objc_msgSend(MEMORY[0x1E0D0C3E0], "sharedInstance");
      v8 = (id)objc_claimAutoreleasedReturnValue();
    }
    v9 = (void *)CalAuxDatabaseCopyPersonaID(a1);
    objc_msgSend(v8, "containerInfoForPersonaIdentifier:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (a4)
      *a4 = objc_msgSend(v10, "usesDataSeparatedContainer");
    if (objc_msgSend(v11, "usesDataSeparatedContainer"))
    {
      objc_msgSend(v11, "containerURL");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "path");
      v13 = objc_claimAutoreleasedReturnValue();

      goto LABEL_13;
    }

  }
  if (v7)
  {
    objc_msgSend(v7, "path");
    v14 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v14 = (uint64_t)CalDatabaseCopyDirectoryPath();
  }
  v13 = v14;
LABEL_13:

  return v13;
}

void CalDatabaseEnumerateDatabases(uint64_t a1, void *a2)
{
  id v3;
  CalDatabaseInitializationConfiguration *v4;

  v3 = a2;
  v4 = objc_alloc_init(CalDatabaseInitializationConfiguration);
  -[CalDatabaseInitializationConfiguration setOptions:](v4, "setOptions:", a1);
  CalDatabaseEnumerateDatabasesWithConfiguration(v4, v3);

}

void CalDatabaseEnumerateDatabasesWithConfiguration(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, uint64_t, _QWORD, char *);
  uint64_t v5;
  os_unfair_lock *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  os_unfair_lock *v13;
  os_unfair_lock *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = CalDatabaseCreateWithConfiguration(v3);
  if (v5)
  {
    v6 = (os_unfair_lock *)v5;
    v19 = 0;
    v4[2](v4, v5, 0, &v19);
    if (!v19)
    {
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v7 = (id)CalDatabaseCopyAllAuxDatabases(v6);
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v16;
LABEL_5:
        v11 = 0;
        while (1)
        {
          if (*(_QWORD *)v16 != v10)
            objc_enumerationMutation(v7);
          v12 = *(const void **)(*((_QWORD *)&v15 + 1) + 8 * v11);
          v13 = CalDatabaseCreateWithAuxDatabaseRefAndAccountInfo(v6, v12, 0, objc_msgSend(v3, "options", (_QWORD)v15) | 0x1000);
          if (v13)
          {
            v14 = v13;
            ((void (**)(id, uint64_t, const void *, char *))v4)[2](v4, (uint64_t)v13, v12, &v19);
            CFRelease(v14);
            if (v19)
              break;
          }
          if (v9 == ++v11)
          {
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
            if (v9)
              goto LABEL_5;
            break;
          }
        }
      }

    }
    CFRelease(v6);
  }

}

uint64_t _applicationOccurrencesCancellationCallback(void *a1)
{
  id *v1;
  id *v2;
  id WeakRetained;
  int v4;
  uint64_t v5;

  v1 = a1;
  v2 = v1;
  if (v1
    && *((_BYTE *)v1 + 184)
    && (WeakRetained = objc_loadWeakRetained(v1 + 5),
        v4 = objc_msgSend(WeakRetained, "calSearchShouldStopSearching:", v2),
        WeakRetained,
        v4))
  {
    objc_msgSend(v2, "stopSearching");
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void *_EKCreateMSUIDStringForEvent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (a1)
  {
    _CalEventGetStartDate(a1);
    v5 = v4;
    if (!a2)
    {
      v6 = 0;
      if (v4)
        goto LABEL_19;
      goto LABEL_9;
    }
    if (a2 != a1)
    {
      _CalEventGetUniqueIdentifier(a2);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6)
      {
        if (v5)
          goto LABEL_19;
        goto LABEL_18;
      }
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef _EKCreateMSUIDStringForEvent(CalEventRef, CalEventRef)");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("EKMSUID.m"), 99, CFSTR("You must set a parent event's unique id before constructing one for a detached event"));

    }
    v6 = 0;
    if (v5)
      goto LABEL_19;
LABEL_18:
    _CalEventGetStartDate(a2);
    v5 = v17;
    if (v17)
    {
LABEL_19:
      if (objc_msgSend(CFSTR("_float"), "isEqualToString:", v5))
        objc_msgSend(MEMORY[0x1E0C99E80], "defaultTimeZone");
      else
        objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", v5);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v6)
        goto LABEL_23;
      goto LABEL_10;
    }
LABEL_9:
    if (!v6)
    {
LABEL_23:
      _create64ByteGUID();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_24:

      return v7;
    }
LABEL_10:
    if (vabdd_f64(_CalEventGetOriginalStartDate(a1), *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", _CalEventGetOriginalStartDate(a1));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef _EKCreateMSUIDStringForEvent(CalEventRef, CalEventRef)");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("EKMSUID.m"), 120, CFSTR("Event has no original start date?"));

      v10 = 0;
    }
    objc_msgSend(v10, "dateWithCalendarFormat:timeZone:", 0, v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (_CalEventIsAllDay(a2))
    {
      objc_msgSend(v11, "ekmsuidGMTDateToDateInTimeZone:", v5);
      v12 = objc_claimAutoreleasedReturnValue();

      v11 = (void *)v12;
    }
    v13 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(v11, "ekmsuidStringForYearMonthDay");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v13, "initWithFormat:", CFSTR("%@%@%@"), v6, CFSTR("<!ExceptionDate!>"), v14);

    CFRetain(v7);
    goto LABEL_24;
  }
  return 0;
}

id _create64ByteGUID()
{
  const __CFUUID *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v0 = CFUUIDCreate(0);
  CFUUIDCreateString(0, v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  CFRelease(v0);
  v2 = (void *)objc_msgSend(v1, "mutableCopy");
  CFRelease(v1);
  objc_msgSend(v2, "replaceOccurrencesOfString:withString:options:range:", CFSTR("-"), &stru_1E4F941C0, 0, 0, objc_msgSend(v2, "length"));
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%%0.%ld"), 64 - objc_msgSend(v2, "length"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingFormat:", v3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  CFRetain(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

CFTypeRef _EKMSUUIDString()
{
  id v0;

  v0 = _create64ByteGUID();
  return CFAutorelease(v0);
}

id _EKMSUUIDStringForDetachedEvent(void *a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v17;
  void *v18;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0C99E80], "defaultTimeZone");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (v7)
      goto LABEL_3;
LABEL_9:
    _create64ByteGUID();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
  if (!v7)
    goto LABEL_9;
LABEL_3:
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *_EKMSUUIDStringForDetachedEvent(NSString *__strong, NSDate *__strong, NSTimeZone *__strong, BOOL)");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("EKMSUID.m"), 152, CFSTR("Event has no original start date?"));

  }
  objc_msgSend(v8, "dateWithCalendarFormat:timeZone:", 0, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (a4)
  {
    objc_msgSend(v10, "ekmsuidGMTDateToDateInTimeZone:", v9);
    v12 = objc_claimAutoreleasedReturnValue();

    v11 = (void *)v12;
  }
  v13 = objc_alloc(MEMORY[0x1E0CB3940]);
  objc_msgSend(v11, "ekmsuidStringForYearMonthDay");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v13, "initWithFormat:", CFSTR("%@%@%@"), v7, CFSTR("<!ExceptionDate!>"), v14);

  CFRetain(v15);
LABEL_10:

  return v15;
}

uint64_t CalToManyRelationRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  __CalToManyRelationTypeID = result;
  return result;
}

uint64_t CalToManyRelationCreate(uint64_t a1, int a2, uint64_t a3, const __CFArray *a4)
{
  uint64_t Instance;
  CFArrayRef Copy;

  pthread_once(&__CalToManyRelationRegisterOnce, (void (*)(void))CalToManyRelationRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = a1;
  *(_DWORD *)(Instance + 24) = a2;
  *(_QWORD *)(Instance + 56) = a3;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_QWORD *)(Instance + 96) = 0;
  *(_DWORD *)(Instance + 48) = -1;
  *(_QWORD *)(Instance + 40) = 0;
  Copy = 0;
  if (a4)
    Copy = CFArrayCreateCopy(0, a4);
  *(_QWORD *)(Instance + 32) = Copy;
  return Instance;
}

uint64_t CalToManyRelationGetOwner(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t CalToManyRelationSetAddedHook(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 64) = a2;
  return result;
}

uint64_t CalToManyRelationSetRemovedHook(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 72) = a2;
  return result;
}

BOOL CalToManyRelationHasObjects(uint64_t a1)
{
  const __CFSet *v2;

  _EnsureLoaded(a1);
  v2 = *(const __CFSet **)(a1 + 80);
  if (!v2)
    CalToManyRelationHasObjects_cold_1();
  return CFSetGetCount(v2) > 0;
}

uint64_t _CalToManyRelationAddObject(_QWORD *a1, void *value)
{
  __CFSet *v4;
  __CFSet *Mutable;
  __CFSet *v6;
  uint64_t Context;
  BOOL v8;
  const os_unfair_lock *v9;

  v4 = (__CFSet *)a1[10];
  if (v4)
    CFSetAddValue(v4, value);
  Mutable = (__CFSet *)a1[11];
  if (!Mutable)
  {
    Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
    a1[11] = Mutable;
  }
  CFSetAddValue(Mutable, value);
  v6 = (__CFSet *)a1[12];
  if (v6)
    CFSetRemoveValue(v6, value);
  CPRecordGetStore();
  Context = CPRecordStoreGetContext();
  _CalDatabaseAddEntity(Context, value);
  if (CDBLockingAssertionsEnabled)
    v8 = a1[2] == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  return CPRecordMarkPropertyChanged();
}

uint64_t _CalToManyRelationRemoveObject(_QWORD *a1, void *value)
{
  __CFSet *v4;
  __CFSet *Mutable;
  __CFSet *v6;
  BOOL v7;
  const os_unfair_lock *Context;

  v4 = (__CFSet *)a1[10];
  if (v4)
  {
    CFSetRemoveValue(v4, value);
  }
  else
  {
    Mutable = (__CFSet *)a1[12];
    if (!Mutable)
    {
      Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
      a1[12] = Mutable;
    }
    CFSetAddValue(Mutable, value);
  }
  v6 = (__CFSet *)a1[11];
  if (v6)
    CFSetRemoveValue(v6, value);
  if (CDBLockingAssertionsEnabled)
    v7 = a1[2] == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordMarkPropertyChanged();
}

const __CFArray *CalToManyRelationAddObject(_QWORD *a1, void *a2)
{
  void (*v4)(void *, _QWORD);

  _CalToManyRelationAddObject(a1, a2);
  v4 = (void (*)(void *, _QWORD))a1[8];
  if (v4)
    v4(a2, a1[2]);
  return _UpdateInverseRelation((uint64_t)a1, (uint64_t)a2, 1);
}

const __CFArray *_UpdateInverseRelation(uint64_t a1, uint64_t a2, int a3)
{
  const __CFArray *result;
  CFIndex v7;
  const __CFNumber *ValueAtIndex;
  uint64_t PropertyDescriptor;
  const os_unfair_lock *Context;
  const void *Property;
  uint64_t v12;
  CFTypeID v13;
  const void *v14;
  int valuePtr;

  result = *(const __CFArray **)(a1 + 32);
  if (result)
  {
    v7 = 0;
    do
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result <= v7)
        break;
      valuePtr = -1;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v7);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      PropertyDescriptor = CPRecordGetPropertyDescriptor();
      if (PropertyDescriptor && !*(_DWORD *)(PropertyDescriptor + 8))
      {
        if (a2)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context)
                os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
        Property = (const void *)CPRecordGetProperty();
        if (Property)
        {
          v12 = (uint64_t)Property;
          v13 = CFGetTypeID(Property);
          if (v13 == CalRelationGetTypeID())
          {
            if (a3)
              v14 = *(const void **)(a1 + 16);
            else
              v14 = 0;
            _CalRelationUpdateSetRelationProperties(v12, v14);
          }
        }
      }
      else
      {
        CFLog();
      }
      ++v7;
      result = *(const __CFArray **)(a1 + 32);
    }
    while (result);
  }
  return result;
}

uint64_t CalToManyRelationRemoveObject(_QWORD *a1, void *a2)
{
  void (*v4)(void *);
  uint64_t Context;

  _CalToManyRelationRemoveObject(a1, a2);
  v4 = (void (*)(void *))a1[9];
  if (v4)
    v4(a2);
  _UpdateInverseRelation((uint64_t)a1, (uint64_t)a2, 0);
  CPRecordGetStore();
  Context = CPRecordStoreGetContext();
  return _CalDatabaseRemoveEntity(Context, a2);
}

void CalToManyRelationRemoveAllObjects(_QWORD *a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  void *ValueAtIndex;

  v2 = CalToManyRelationCopyObjects((uint64_t)a1);
  if (v2)
  {
    v3 = v2;
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v5 = Count;
      for (i = 0; i != v5; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, i);
        CalToManyRelationRemoveObject(a1, ValueAtIndex);
      }
    }
    CFRelease(v3);
  }
}

void CalToManyRelationSave(void *context)
{
  const void *v2;
  const __CFSet *v3;
  const void *v4;

  v2 = (const void *)*((_QWORD *)context + 10);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)context + 10) = 0;
  }
  v3 = (const __CFSet *)*((_QWORD *)context + 11);
  if (v3)
  {
    CFSetApplyFunction(v3, (CFSetApplierFunction)_UpdateOwnerID, context);
    CFRelease(*((CFTypeRef *)context + 11));
    *((_QWORD *)context + 11) = 0;
  }
  v4 = (const void *)*((_QWORD *)context + 12);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)context + 12) = 0;
  }
}

const __CFArray *_UpdateOwnerID(uint64_t a1, uint64_t a2)
{
  const __CFArray *result;
  CFIndex v5;
  const __CFNumber *ValueAtIndex;
  int v7;
  BOOL v8;
  _BOOL4 v9;
  const os_unfair_lock *Context;
  const os_unfair_lock *v11;
  const void *Property;
  uint64_t v13;
  CFTypeID v14;
  int valuePtr;

  result = *(const __CFArray **)(a2 + 32);
  if (result)
  {
    v5 = 0;
    do
    {
      result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result <= v5)
        break;
      valuePtr = -1;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 32), v5);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      v7 = *(_DWORD *)(CPRecordGetPropertyDescriptor() + 8);
      v8 = !a1 || CDBLockingAssertionsEnabled == 0;
      v9 = !v8;
      if (v7)
      {
        if (v9 && CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
        CPRecordGetID();
        CPRecordSetProperty();
      }
      else
      {
        if (v9)
        {
          if (CPRecordGetStore())
          {
            v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11)
              os_unfair_lock_assert_owner(v11 + 20);
          }
        }
        Property = (const void *)CPRecordGetProperty();
        if (Property)
        {
          v13 = (uint64_t)Property;
          v14 = CFGetTypeID(Property);
          if (v14 == CalRelationGetTypeID())
          {
            CPRecordGetID();
            _CalRelationUpdateSetRelationID(v13);
          }
        }
      }
      ++v5;
      result = *(const __CFArray **)(a2 + 32);
    }
    while (result);
  }
  return result;
}

void CalToManyRelationUnload(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 80);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 80) = 0;
  }
}

const __CFSet *CalToManyRelationIsDirty(uint64_t a1)
{
  const __CFSet *v2;
  const __CFSet *result;

  v2 = *(const __CFSet **)(a1 + 88);
  if (!v2 || CFSetGetCount(v2) <= 0)
  {
    result = *(const __CFSet **)(a1 + 96);
    if (!result)
      return result;
    if (CFSetGetCount(result) < 1)
      return 0;
  }
  return (const __CFSet *)1;
}

CFStringRef CalToManyRelationCopyDescription(_QWORD *a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<CalToManyRelation: %p> loaded: %@; added: %@; deleted %@"),
           a1,
           a1[10],
           a1[11],
           a1[12]);
}

void _AddItemToSet(void *value, CFMutableSetRef theSet)
{
  CFSetAddValue(theSet, value);
}

void _RemoveItemFromSet(void *value, CFMutableSetRef theSet)
{
  CFSetRemoveValue(theSet, value);
}

id ICSRecurrenceRuleFromCalRecurrence(uint64_t a1, uint64_t a2)
{
  id v4;
  int Frequency;
  void *v6;
  uint64_t Interval;
  void *v8;
  unsigned int WeekStart;
  void *v10;
  double EndDate;
  uint64_t Count;
  void *v13;
  CFDateRef v14;
  void *v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  CFIndex v23;
  CFIndex v24;
  id v25;
  CFIndex i;
  unsigned int *ValueAtIndex;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  NSObject *v32;
  int v33;
  int v34;
  id v35;
  uint64_t j;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  const __CFArray *v40;
  void *v41;
  NSObject *v42;
  const __CFArray *v43;
  void *v44;
  NSObject *v45;
  const __CFArray *v46;
  void *v47;
  NSObject *v48;
  const __CFArray *v49;
  void *v50;
  NSObject *v51;
  void *v53;
  uint8_t buf[4];
  id v55;
  __int16 v56;
  double v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v6 = 0;
    return v6;
  }
  v4 = objc_alloc(MEMORY[0x1E0DDB850]);
  Frequency = CalRecurrenceGetFrequency(a1);
  v6 = (void *)objc_msgSend(v4, "initWithFrequency:", ICSFrequencyFromCalRecurrenceFrequency(Frequency));
  Interval = CalRecurrenceGetInterval(a1);
  if ((int)Interval >= 2)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", Interval);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setInterval:", v8);

  }
  WeekStart = CalRecurrenceGetWeekStart(a1);
  if (WeekStart != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", ICSWeekdayFromCalDayOfWeek(WeekStart));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setWkst:", v10);

  }
  EndDate = CalRecurrenceGetEndDate(a1);
  Count = CalRecurrenceGetCount(a1);
  if ((_DWORD)Count)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", Count);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setCount:", v13);
LABEL_21:

    goto LABEL_22;
  }
  if (vabdd_f64(EndDate, *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
  {
    v14 = CFDateCreate(0, EndDate);
    if (CalEventIsFloating(a2))
    {
      if (CalEventIsAllDay(a2))
      {
        ICSFloatingDateOnlyFromCFDate((uint64_t)v14, 0);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_16:
        if (v14)
          CFRelease(v14);
        v17 = (void *)CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        {
          v18 = v17;
          objc_msgSend(v13, "value");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v55 = v19;
          v56 = 2048;
          v57 = EndDate;
          _os_log_impl(&dword_1A5CCB000, v18, OS_LOG_TYPE_DEBUG, "Setting until date: %@ (%f)", buf, 0x16u);

        }
        objc_msgSend(v13, "value");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setUntil:", v20);

        goto LABEL_21;
      }
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      ICSFloatingDateTimeFromCFDateInTimezone((uint64_t)v14, v15);
      v16 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      ICSDateFromCFDateInTimezone((uint64_t)v14, v15);
      v16 = objc_claimAutoreleasedReturnValue();
    }
    v13 = (void *)v16;

    goto LABEL_16;
  }
LABEL_22:
  v21 = (const __CFArray *)CalRecurrenceCopyByDayDays(a1);
  if (v21)
  {
    v22 = v21;
    v23 = CFArrayGetCount(v21);
    if (v23 >= 1)
    {
      v24 = v23;
      v53 = v6;
      v25 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      for (i = 0; i != v24; ++i)
      {
        ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(v22, i);
        v28 = objc_alloc(MEMORY[0x1E0DDB7D0]);
        v29 = ICSWeekdayFromCalDayOfWeek(ValueAtIndex[1]);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *ValueAtIndex);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = (void *)objc_msgSend(v28, "initWithWeekday:number:", v29, v30);

        objc_msgSend(v25, "addObject:", v31);
      }
      v32 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v55 = v25;
        _os_log_impl(&dword_1A5CCB000, v32, OS_LOG_TYPE_DEBUG, "Setting by day days array: %@", buf, 0xCu);
      }
      v6 = v53;
      objc_msgSend(v53, "setByday:", v25);

    }
    CFRelease(v22);
  }
  v33 = CalRecurrenceGetByMonthMonths(a1);
  if (v33)
  {
    v34 = v33;
    v35 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    for (j = 0; j != 12; ++j)
    {
      v37 = (1 << j);
      if ((v37 & v34) != 0)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", ICSMonthFromCalMonthOfYear(v37));
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "addObject:", v38);

      }
    }
    if (objc_msgSend(v35, "count"))
    {
      v39 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v55 = v35;
        _os_log_impl(&dword_1A5CCB000, v39, OS_LOG_TYPE_DEBUG, "Setting by month array: %@", buf, 0xCu);
      }
      objc_msgSend(v6, "setBymonth:", v35);
    }

  }
  v40 = (const __CFArray *)CalRecurrenceCopyByMonthDayDays(a1);
  _NSNumberArrayFromIntArray(v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v41, "count"))
  {
    v42 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v55 = v41;
      _os_log_impl(&dword_1A5CCB000, v42, OS_LOG_TYPE_DEBUG, "setting by month day array: %@", buf, 0xCu);
    }
    objc_msgSend(v6, "setBymonthday:", v41);
  }
  if (v40)
    CFRelease(v40);
  v43 = (const __CFArray *)CalRecurrenceCopyByWeekWeeks(a1);
  _NSNumberArrayFromIntArray(v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v44, "count"))
  {
    v45 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v55 = v44;
      _os_log_impl(&dword_1A5CCB000, v45, OS_LOG_TYPE_DEBUG, "Setting by weekno array: %@", buf, 0xCu);
    }
    objc_msgSend(v6, "setByweekno:", v44);
  }
  if (v43)
    CFRelease(v43);
  v46 = (const __CFArray *)CalRecurrenceCopyByYearDayDays(a1);
  _NSNumberArrayFromIntArray(v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v47, "count"))
  {
    v48 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v55 = v47;
      _os_log_impl(&dword_1A5CCB000, v48, OS_LOG_TYPE_DEBUG, "Setting by year day array: %@", buf, 0xCu);
    }
    objc_msgSend(v6, "setByyearday:", v47);
  }
  if (v46)
    CFRelease(v46);
  v49 = (const __CFArray *)CalRecurrenceCopyBySetPos(a1);
  _NSNumberArrayFromIntArray(v49);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v50, "count"))
  {
    v51 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v55 = v50;
      _os_log_impl(&dword_1A5CCB000, v51, OS_LOG_TYPE_DEBUG, "Setting by set pos array: %@", buf, 0xCu);
    }
    objc_msgSend(v6, "setBysetpos:", v50);
  }
  if (v49)
    CFRelease(v49);

  return v6;
}

id _NSNumberArrayFromIntArray(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  id v4;
  CFIndex i;
  void *v6;

  if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
  {
    v3 = Count;
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    for (i = 0; i != v3; ++i)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CFArrayGetValueAtIndex(a1, i));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v6);

    }
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

BOOL CalRecurrenceUpdateFromICSRecurrenceRule(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  int v7;
  unsigned int v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;
  double v14;
  char isKindOfClass;
  double v16;
  void *v17;
  void *v18;
  CFIndex v19;
  __CFArray *Mutable;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t j;
  void *v34;
  __CFArray *IntArrayFromNSNumberArray;
  void *v36;
  __CFArray *v37;
  void *v38;
  __CFArray *v39;
  void *v40;
  __CFArray *v41;
  void *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t value;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!a2)
    goto LABEL_45;
  v5 = CalRecurrenceFrequencyFromICSFrequency(objc_msgSend(v3, "freq"));
  CalRecurrenceSetFrequency(a2, v5);
  objc_msgSend(v4, "interval");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "intValue");

  if (v7 <= 1)
    v8 = 1;
  else
    v8 = v7;
  CalRecurrenceSetInterval(a2, v8);
  objc_msgSend(v4, "wkst");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9 && objc_msgSend(v9, "intValue") != 2)
    v11 = CalDayOfWeekFromICSWeekday((int)objc_msgSend(v10, "intValue"));
  else
    v11 = 7;
  CalRecurrenceSetWeekStart(a2, v11);
  objc_msgSend(v4, "until");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB800]), "initWithValue:", v12);
    v14 = CalDateFromICSDateAsUTC(v13);
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v16 = v14 + 86399.0;
    if ((isKindOfClass & 1) != 0)
      v16 = v14;
    CalRecurrenceSetEndDate(a2, v16);
  }
  else
  {
    objc_msgSend(v4, "count");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v17)
    {
      CalRecurrenceSetEndDate(a2, 0.0);
      CalRecurrenceSetCount(a2, 0);
      goto LABEL_16;
    }
    objc_msgSend(v4, "count");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    CalRecurrenceSetCount(a2, objc_msgSend(v13, "intValue"));
  }

LABEL_16:
  objc_msgSend(v4, "byday");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v18, "count"))
  {
    v43 = v10;
    v19 = objc_msgSend(v18, "count");
    Mutable = CFArrayCreateMutable(0, v19, MEMORY[0x1E0D0C4A8]);
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v21 = v18;
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v49, v54, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v50;
      do
      {
        for (i = 0; i != v23; ++i)
        {
          if (*(_QWORD *)v50 != v24)
            objc_enumerationMutation(v21);
          v26 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * i);
          value = 0;
          HIDWORD(value) = CalDayOfWeekFromICSWeekday(objc_msgSend(v26, "weekday"));
          objc_msgSend(v26, "number");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(value) = objc_msgSend(v27, "intValue");

          CFArrayAppendValue(Mutable, &value);
        }
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v49, v54, 16);
      }
      while (v23);
    }

    CalRecurrenceSetByDayDays(a2, (uint64_t)Mutable);
    v10 = v43;
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    CalRecurrenceSetByDayDays(a2, 0);
  }
  objc_msgSend(v4, "bymonth");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
  if (v29)
  {
    v30 = v29;
    v31 = 0;
    v32 = *(_QWORD *)v45;
    do
    {
      for (j = 0; j != v30; ++j)
      {
        if (*(_QWORD *)v45 != v32)
          objc_enumerationMutation(v28);
        v31 |= CalMonthOfYearFromICSMonth((int)objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * j), "intValue"));
      }
      v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
    }
    while (v30);
  }
  else
  {
    v31 = 0;
  }
  CalRecurrenceSetByMonthMonths(a2, v31);
  objc_msgSend(v4, "bymonthday");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  IntArrayFromNSNumberArray = _CreateIntArrayFromNSNumberArray(v34);

  CalRecurrenceSetByMonthDayDays(a2, (uint64_t)IntArrayFromNSNumberArray);
  if (IntArrayFromNSNumberArray)
    CFRelease(IntArrayFromNSNumberArray);
  objc_msgSend(v4, "byweekno");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = _CreateIntArrayFromNSNumberArray(v36);

  CalRecurrenceSetByWeekWeeks(a2, (uint64_t)v37);
  if (v37)
    CFRelease(v37);
  objc_msgSend(v4, "byyearday");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = _CreateIntArrayFromNSNumberArray(v38);

  CalRecurrenceSetByYearDayDays(a2, (uint64_t)v39);
  if (v39)
    CFRelease(v39);
  objc_msgSend(v4, "bysetpos");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = _CreateIntArrayFromNSNumberArray(v40);

  CalRecurrenceSetBySetPos(a2, (uint64_t)v41);
  if (v41)
    CFRelease(v41);

LABEL_45:
  return a2 != 0;
}

__CFArray *_CreateIntArrayFromNSNumberArray(void *a1)
{
  id v1;
  void *v2;
  __CFArray *Mutable;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    Mutable = CFArrayCreateMutable(0, objc_msgSend(v1, "count"), 0);
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v4 = v2;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v11;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(v4);
          CFArrayAppendValue(Mutable, (const void *)(int)objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "intValue", (_QWORD)v10));
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v6);
    }

  }
  else
  {
    Mutable = 0;
  }

  return Mutable;
}

uint64_t CalRecurrenceUpdateFromVCal10String(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  double v23;
  void *v25;
  uint64_t v26;

  v5 = a3;
  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(" "));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "count");
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v6, "objectAtIndex:", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "length");
    if (v10)
    {
      objc_msgSend(v9, "substringToIndex:", 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v11 = 0;
    }
    if (objc_msgSend(v11, "isEqualToString:", CFSTR("Y")))
      v12 = 4;
    else
      v12 = 1;
    CalRecurrenceSetFrequency(a2, v12);
    if (v10 < 2)
    {
      v13 = 0;
    }
    else
    {
      objc_msgSend(v9, "substringWithRange:", 1, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (objc_msgSend(v13, "isEqualToString:", CFSTR("M")))
    {
      v26 = a2;
      if (v10 < 3)
      {
        v14 = 0;
      }
      else
      {
        objc_msgSend(v9, "substringFromIndex:", 2);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v15 = objc_msgSend(v14, "intValue", v11);
      v16 = 0;
      if (v15 >= 1 && v8 >= 2)
      {
        v16 = 0;
        if (v8 - 2 >= (v15 - 1))
          v17 = (v15 - 1);
        else
          v17 = v8 - 2;
        v18 = -1;
        do
        {
          objc_msgSend(v6, "objectAtIndex:", v18 + 2);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v16 |= CalMonthOfYearFromICSMonth((int)objc_msgSend(v19, "intValue"));

          ++v18;
        }
        while (v17 != v18);
      }
      a2 = v26;
      CalRecurrenceSetByMonthMonths(v26, v16);

      v11 = v25;
    }
    if (v8 < 2)
    {
      v20 = 0;
    }
    else
    {
      objc_msgSend(v6, "lastObject");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (objc_msgSend(v20, "length"))
    {
      v21 = objc_msgSend(v20, "rangeOfString:", CFSTR("#"));
      if (v21 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(v20, "substringWithRange:", v21 + 1, objc_msgSend(v20, "length") + ~v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v22, "length"))
          CalRecurrenceSetCount(a2, objc_msgSend(v22, "intValue"));

      }
    }
    if (v5)
    {
      v23 = CalDateFromICSDateAsUTC(v5);
      CalRecurrenceSetEndDate(a2, v23);
    }

  }
  return 1;
}

uint64_t _CalResourceChangePrepareForSave(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  const os_unfair_lock *v6;
  uint64_t result;
  const os_unfair_lock *v8;
  const __CFString *v9;
  const os_unfair_lock *v10;
  const __CFString *v11;
  const os_unfair_lock *v12;
  const __CFString *v13;
  const os_unfair_lock *v14;
  const __CFString *v15;
  const os_unfair_lock *v16;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    CalRelationOwnerWillSave(Property);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  result = CPRecordGetIntegerProperty();
  if ((_DWORD)result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8)
            os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
    v9 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    v11 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    v13 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14)
            os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
    result = CPRecordGetProperty();
    v15 = (const __CFString *)result;
    if (v9 && (result = CFStringGetLength(v9)) != 0
      || v11 && (result = CFStringGetLength(v11)) != 0
      || v13 && (result = CFStringGetLength(v13)) != 0)
    {
      if (!a2)
        return result;
    }
    else
    {
      if (!v15)
        return result;
      result = CFStringGetLength(v15);
      if (!a2 || !result)
        return result;
    }
    result = _CalIdentityGetID(v9, v11, v13, v15, a2);
    if ((_DWORD)result != -1)
    {
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t _CalResourceChangePropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  const os_unfair_lock *Context;

  if (a2 == 1)
  {
    if (a3 != -1)
      return result;
    if (!result)
      return CPRecordGetProperty();
    goto LABEL_12;
  }
  if (!a2)
  {
    if (a3 != -1)
      return result;
    if (!result)
      return CPRecordGetProperty();
    goto LABEL_12;
  }
  if (a2 == 2 && a3 == -1)
  {
    if (!result)
      return CPRecordGetProperty();
LABEL_12:
    if (CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return CPRecordGetProperty();
  }
  return result;
}

void CalResourceChangeInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalResourceChangeClass, (const char **)&kCalResourceChangeIndexes, 0);
  CalMigrationCreateTriggers(a2, (const char **)&kCalResourceChangeClass, (const char **)&kCalResourceChangeTriggers);
}

void CalResourceChangeMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  if (a3 > 82)
  {
    if (a3 <= 0x64)
      CalMigrateTableFull(a2, (const char **)&kCalResourceChangeClass, 0, (const char **)&kCalResourceChangeUpgradeInfo, 0, (const char **)&kCalResourceChangeIndexes, 0, (const char **)&kCalResourceChangeTriggers, a3);
  }
  else
  {
    CalResourceChangeInitializeTables(a1, a2);
  }
}

CFTypeRef _CalResourceChangeHasValidParent(uint64_t a1)
{
  CFTypeRef result;

  result = _CalResourceChangeGetNotification(a1);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

CFTypeRef _CalResourceChangeGetNotification(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

const void *_CalCreateResourceChangeOfType(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;
  BOOL v6;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  BOOL v10;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 18);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v2 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v10 = v2 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v2)
    {
      if (CPRecordGetStore())
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateResourceChangeOfType(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalCreateResourceChangeOfType((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalResourceChangeGetType(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetIntegerProperty();
}

uint64_t _CalRemoveResourceChange(void *a1)
{
  uint64_t result;
  uint64_t Context;
  uint64_t v4;
  CFTypeRef v5;
  const void *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex Count;
  const os_unfair_lock *v10;

  result = CPRecordGetStore();
  if (result)
  {
    Context = CPRecordStoreGetContext();
    if (Context)
    {
      v4 = Context;
      v5 = _CalResourceChangeGetNotification((uint64_t)a1);
      if (v5)
      {
        v6 = v5;
        v7 = _CalResourceChangeNotificationCopyChanges((uint64_t)v5);
        if (v7)
        {
          v8 = v7;
          Count = CFArrayGetCount(v7);
          CFRelease(v8);
          _CalResourceChangeNotificationRemoveChange((uint64_t)v6, a1);
          if (Count == 1)
            _CalRemoveNotification(v6);
        }
        else
        {
          _CalResourceChangeNotificationRemoveChange((uint64_t)v6, a1);
        }
      }
      else
      {
        _CalDatabaseRemoveEntity(v4, a1);
      }
    }
    if (CDBLockingAssertionsEnabled)
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

void CalRemoveResourceChange(void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveResourceChange(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalResourceChangeCopyNotification(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef v3;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalResourceChangeGetNotification(a1);
  v4 = v3;
  if (v3)
    CFRetain(v3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

_QWORD *_CalResourceChangeSetCalendar(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

void CalResourceChangeSetCalendar(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeSetCalendar(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalResourceChangeCopyCalendar(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;
  CFTypeRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    v5 = CalRelationCopyRelatedObject(Property);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

_QWORD *_CalResourceChangeSetCalendarItem(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

void CalResourceChangeSetCalendarItem(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeSetCalendarItem(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalResourceChangeCopyCalendarItem(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;
  CFTypeRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    v5 = CalRelationCopyRelatedObject(Property);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalResourceChangeSetChangedByDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyChangedByDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalResourceChangeSetChangedByAddress(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    CFURLGetString(a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalResourceChangeCopyChangedByAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *Property;
  CFURLRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFString *)CPRecordGetProperty();
  if (Property)
    v5 = CFURLCreateWithString(0, Property, 0);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalResourceChangeSetChangedByFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyChangedByFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalResourceChangeSetChangedByLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyChangedByLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalResourceChangeGetType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalResourceChangeSetTimestamp(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetUserInfo(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyTimestamp(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalResourceChangeSetChangedProperties(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalResourceChangeSetChangedProperties(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeSetChangedProperties(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeGetChangedProperties(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalResourceChangeSetCreateCount(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeGetCreateCount(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalResourceChangeSetUpdateCount(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeGetUpdateCount(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalResourceChangeSetDeleteCount(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeGetDeleteCount(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalResourceChangeSetDeletedSummary(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyDeletedSummary(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalResourceChangeSetDeletedStartDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalResourceChangeCopyDeletedStartDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalResourceChangeSetAlerted(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalResourceChangeSetAlerted(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeSetAlerted(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalResourceChangeIsAlerted(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  int IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty != 0;
}

void CalResourceChangeSetPublicStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalResourceChangeGetPublicStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  int IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty != 0;
}

uint64_t _CalResourceChangeGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyResourceChangeWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalResourceChangeGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalResourceChangeGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t CalDatabaseCopyOfAllResourceChanges(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t v6;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreCopyAllInstancesOfClass();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t _CalResourceChangeGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalResourceChangeGetPropertyIDWithPropertyName(void *key)
{
  void *value;

  if (CalResourceChangeGetPropertyIDWithPropertyName_onceToken != -1)
    dispatch_once(&CalResourceChangeGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_7);
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalResourceChangeGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A5D11EEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 240; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

void _CalResourceChangeLoadIdentityProperties(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Store;
  uint64_t IdentityWithRowID;
  uint64_t v5;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const void *v10;
  const os_unfair_lock *v11;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetIntegerProperty() != -1)
  {
    Store = CPRecordGetStore();
    IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      v9 = _CalIdentityCopyAddress(v5);
      if (v9)
      {
        v10 = (const void *)v9;
        if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
        CPRecordInitializeProperty();
        CFRelease(v10);
      }
    }
  }
}

void sub_1A5D12154(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1A5D12168(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t CalLocationSuggestionsEnabled()
{
  void *v0;
  uint64_t v1;

  +[CDBPreferences shared](CDBPreferences, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "get_suggestEventLocations");

  return v1;
}

uint64_t CalDaysToSync()
{
  void *v0;
  uint64_t v1;

  +[CDBPreferences shared](CDBPreferences, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "get_kCalPreferredDaysToSyncKey");

  return v1;
}

void CalSetLocationSuggestionsEnabled(uint64_t a1)
{
  id v2;

  +[CDBPreferences shared](CDBPreferences, "shared");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "set_suggestEventLocations:", a1);

}

void CalSetDaysToSync(uint64_t a1)
{
  id v2;

  +[CDBPreferences shared](CDBPreferences, "shared");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "set_kCalPreferredDaysToSyncKey:", a1);

}

void _CalAttachmentFilePrepareForSave(void *a1)
{
  const __CFURL *v2;
  const __CFURL *v3;
  void *v4;
  const os_unfair_lock *Context;
  char v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  _DWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (_CalAttachmentFileGetStoreID((uint64_t)a1))
  {
    if (!_CalColorGetRecordID((uint64_t)a1))
    {
      v2 = (const __CFURL *)_CalAttachmentFileCopyURLForPendingFileCopy((uint64_t)a1);
      if (v2)
      {
        v3 = v2;
        CFURLStartAccessingSecurityScopedResource(v2);
        -[__CFURL path](v3, "path");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        if (v4)
        {
          if (a1)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (Context)
                  os_unfair_lock_assert_owner(Context + 20);
              }
            }
          }
          CPRecordGetProperty();
          v6 = _CalAttachmentFileSetFileData(a1, (uint64_t)v4);
          _CalAttachmentFileSetURLForPendingFileCopy((uint64_t)a1, 0);
          MEMORY[0x1A85B4648](v3);
          CFRelease(v3);
          if ((v6 & 1) != 0)
            goto LABEL_17;
        }
        else
        {
          MEMORY[0x1A85B4648](v3);
          CFRelease(v3);
        }
        v8 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          v9 = v8;
          v10[0] = 67109120;
          v10[1] = CPRecordGetID();
          _os_log_impl(&dword_1A5CCB000, v9, OS_LOG_TYPE_ERROR, "Attachment failed to copy to local storage: %d", (uint8_t *)v10, 8u);

        }
LABEL_17:

      }
    }
  }
  else
  {
    v7 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_ERROR, "Attempting to save an attachment file that is not in any store", (uint8_t *)v10, 2u);
    }
  }
}

void CalAttachmentFilePropertyWillChange(uint64_t a1, unsigned int a2)
{
  __CFArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2 < 9 || a2 == 12)
  {
    v7 = 0u;
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    v2 = _CalAttachmentFileCopyAttachments(a1);
    v3 = -[__CFArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v8;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v8 != v5)
            objc_enumerationMutation(v2);
          _CalAttachmentMarkDirty(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i), 1);
        }
        v4 = -[__CFArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      }
      while (v4);
    }

  }
}

void CalAttachmentFileInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalAttachmentFileClass, (const char **)&kCalAttachmentFileIndexes, 0);
  _CalAttachmentFileRegisterFunctions(a1, (uint64_t)a2);
  CalMigrationCreateTriggers(a2, (const char **)&kCalAttachmentFileClass, (const char **)&kCalAttachmentFileTriggers);
}

void CalAttachmentFileMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  if (a3 > 16008)
  {
    if (a3 <= 0x4651)
      CalMigrateTableFull(a2, (const char **)&kCalAttachmentFileClass, 0, (const char **)&kCalAttachmentFileUpgradeInfo, 0, (const char **)&kCalAttachmentFileIndexes, 0, (const char **)&kCalAttachmentFileTriggers, a3);
  }
  else
  {
    CalAttachmentFileInitializeTables(a1, a2);
  }
}

void _CalAttachmentFileNoteAttachmentDeleted(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t RecordStore;
  void *v8;
  void *v9;
  CalAttachmentFileCleanupContext *v10;
  void *v11;
  NSObject *v12;
  uint64_t StoreWithUID;
  void *v14;
  void *v15;
  NSObject *v16;
  _DWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
  {
    v5 = sqlite3_user_data(a1);
    v6 = sqlite3_value_int(*a3);
    RecordStore = _CalDatabaseGetRecordStore((uint64_t)v5);
    v8 = (void *)v5[41];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKeyedSubscript:", v9);
    v10 = (CalAttachmentFileCleanupContext *)objc_claimAutoreleasedReturnValue();

    if (v10)
      goto LABEL_3;
    StoreWithUID = _CalGetStoreWithUID(RecordStore);
    if (!StoreWithUID)
    {
      v16 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v17[0] = 67109120;
        v17[1] = v6;
        _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_ERROR, "Unable to find store with storeUID when attachment deleted: %d", (uint8_t *)v17, 8u);
      }
      goto LABEL_4;
    }
    v10 = -[CalAttachmentFileCleanupContext initWithStore:]([CalAttachmentFileCleanupContext alloc], "initWithStore:", StoreWithUID);
    v14 = (void *)v5[41];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v10, v15);

    if (v10)
    {
LABEL_3:
      v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", sqlite3_value_text(a3[1]));
      -[CalAttachmentFileCleanupContext addAttachmentToDelete:](v10, "addAttachmentToDelete:", v11);

    }
LABEL_4:
    sqlite3_result_null(a1);
    return;
  }
  v12 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v17[0]) = 0;
    _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_ERROR, "Wrong number of arguments for CalNoteAttachmentDeleted", (uint8_t *)v17, 2u);
  }
}

void _CalAttachmentFileNoteStoreDeleted(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  void *v10;
  void *v11;
  CalAttachmentFileCleanupContext *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  unsigned __int8 *v16;
  uint8_t buf[16];

  if (a2 == 3)
  {
    v5 = sqlite3_user_data(a1);
    v6 = sqlite3_value_int(*a3);
    v7 = (unsigned __int8 *)sqlite3_value_text(a3[1]);
    v8 = (unsigned __int8 *)sqlite3_value_text(a3[2]);
    if (v7)
      v7 = (unsigned __int8 *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v7, strlen((const char *)v7), 4, 0);
    if (v8)
      v8 = (unsigned __int8 *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v8, strlen((const char *)v8), 4, 0);
    v16 = v7;
    v9 = v8;
    v10 = (void *)v5[41];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", v11);
    v12 = (CalAttachmentFileCleanupContext *)objc_claimAutoreleasedReturnValue();

    if (!v12)
    {
      v12 = -[CalAttachmentFileCleanupContext initWithExternalID:storeUUID:database:]([CalAttachmentFileCleanupContext alloc], "initWithExternalID:storeUUID:database:", v16, v9, v5);
      v13 = (void *)v5[41];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, v14);

    }
    -[CalAttachmentFileCleanupContext markStoreAsDeleted](v12, "markStoreAsDeleted");
    sqlite3_result_null(a1);

  }
  else
  {
    v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_ERROR, "Wrong number of arguments for CalNoteStoreDeleted", buf, 2u);
    }
  }
}

const void *_CalDatabaseCreateAttachmentFile(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;
  BOOL v6;
  const os_unfair_lock *v7;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 25);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  CalGenerateUUID();
  CPRecordInitializeProperty();
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateAttachmentFile(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *AttachmentFile;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  AttachmentFile = _CalDatabaseCreateAttachmentFile((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return AttachmentFile;
}

const void *_CalAttachmentFileCopy(uint64_t a1, void *a2)
{
  const void *AttachmentFile;
  const void *v4;
  BOOL v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  BOOL v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;
  const os_unfair_lock *v18;
  const os_unfair_lock *v19;
  const os_unfair_lock *v20;
  const os_unfair_lock *v21;
  const os_unfair_lock *v22;
  const os_unfair_lock *v23;
  const os_unfair_lock *v24;
  const os_unfair_lock *v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;
  const os_unfair_lock *v28;
  const os_unfair_lock *v29;
  id v30;
  void *v31;
  const os_unfair_lock *v32;

  AttachmentFile = _CalDatabaseCreateAttachmentFile(a1);
  v4 = AttachmentFile;
  if (CDBLockingAssertionsEnabled)
    v5 = AttachmentFile == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v11 = v4 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18)
          os_unfair_lock_assert_owner(v18 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20)
          os_unfair_lock_assert_owner(v20 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21)
          os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23)
          os_unfair_lock_assert_owner(v23 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24)
          os_unfair_lock_assert_owner(v24 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25)
          os_unfair_lock_assert_owner(v25 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26)
          os_unfair_lock_assert_owner(v26 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27)
          os_unfair_lock_assert_owner(v27 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v28)
          os_unfair_lock_assert_owner(v28 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29)
          os_unfair_lock_assert_owner(v29 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  v30 = _CalAttachmentFileCopyLocalURLForArchivedData(a2);
  if (v30)
  {
    v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3910]), "initWithURL:readonly:", v30, 1);
    if (CDBLockingAssertionsEnabled)
    {
      if (v4)
      {
        if (CPRecordGetStore())
        {
          v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v32)
            os_unfair_lock_assert_owner(v32 + 20);
        }
      }
    }
    CPRecordSetProperty();

  }
  return v4;
}

id _CalAttachmentFileCopyLocalURLForArchivedData(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  id v13;
  NSObject *v14;
  id v16;
  uint8_t buf[4];
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  _CalColorGetRecordID((uint64_t)a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    _CalAttachmentFileGetCalendarDataContainerForAttachmentFile(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_msgSend(MEMORY[0x1E0D0C258], "localURLForAttachmentWithRelativePath:baseURL:", v2, v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (_CalAttachmentFileGetFlag((uint64_t)a1, 2))
      {
        objc_msgSend(v4, "URLByAppendingPathExtension:", CFSTR("zip"));
        v5 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "path");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v6, "fileExistsAtPath:", v7);

        if ((v8 & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "path");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "path");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = 0;
          v12 = objc_msgSend(v9, "archivePathToFile:toFile:createPKZipArchive:error:", v10, v11, 1, &v16);
          v13 = v16;

          if ((v12 & 1) == 0)
          {
            v14 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v18 = v13;
              _os_log_impl(&dword_1A5CCB000, v14, OS_LOG_TYPE_ERROR, "Unable to archive data: %@", buf, 0xCu);
            }
          }

        }
      }
      else
      {
        v5 = v4;
      }

    }
    else
    {
      v5 = 0;
    }

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t _CalRemoveAttachmentFile(const void *a1)
{
  uint64_t DatabaseForRecord;

  DatabaseForRecord = CalGetDatabaseForRecord();
  return _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

id _CalAttachmentFileAccountIdentifierForAttachmentFile(void *StoreWithUID)
{
  uint64_t Store;

  if (StoreWithUID)
  {
    _CalAttachmentFileGetStoreID((uint64_t)StoreWithUID);
    Store = CPRecordGetStore();
    StoreWithUID = (void *)_CalGetStoreWithUID(Store);
    if (StoreWithUID)
    {
      _CalErrorGetRecordID((uint64_t)StoreWithUID);
      StoreWithUID = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  return StoreWithUID;
}

uint64_t _CalAttachmentFileGetStoreID(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  __CFArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  CFTypeRef Owner;
  const os_unfair_lock *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if ((int)Property <= 0)
  {
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = _CalAttachmentFileCopyAttachments(a1);
    v5 = -[__CFArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      Property = 0;
      v7 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          Owner = _CalAttachmentGetOwner(*(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i));
          if (Owner)
          {
            Property = _CalCalendarItemGetStoreId((uint64_t)Owner);
            if ((int)Property >= 1)
            {

              if (a1)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (CPRecordGetStore())
                  {
                    v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v10)
                      os_unfair_lock_assert_owner(v10 + 20);
                  }
                }
              }
              CPRecordSetProperty();
              goto LABEL_26;
            }
          }
        }
        v6 = -[__CFArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v6)
          continue;
        break;
      }

    }
    else
    {

      Property = 0;
    }
LABEL_26:

  }
  return Property;
}

id CalAttachmentFileCopyAttachmentContainerForStore(uint64_t a1, os_unfair_lock_s *a2)
{
  os_unfair_lock_s *v4;
  void *v5;

  v4 = a2 + 20;
  os_unfair_lock_lock(a2 + 20);
  _CalAttachmentFileCopyAttachmentContainerForStore(a1, (uint64_t)a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v5;
}

id _CalAttachmentFileCopyAttachmentContainerForStore(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = 0;
  _CalAttachmentFileGetAttachmentContainerURLsForStore(a1, a2, &v3, 0);
  return v3;
}

id _CalAttachmentFileCopyAttachmentContainerForStoreProperties(void *a1, void *a2, uint64_t a3)
{
  id v4;

  v4 = 0;
  _CalAttachmentFileGetAttachmentContainerURLsForStoreProperties(a1, a2, a3, &v4, 0);
  return v4;
}

void _CalAttachmentFileGetAttachmentContainerURLsForStoreProperties(void *a1, void *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v16 = a1;
  v9 = a2;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  _CalDatabaseGetCalendarDataContainerProvider(a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, "containerForAccountIdentifier:", v16);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12)
    {
      if (a5)
        *a5 = objc_retainAutorelease(v12);
      if (v9
        && (objc_msgSend(v9, "containsString:", CFSTR("/")) & 1) == 0
        && (objc_msgSend(v9, "containsString:", CFSTR("..")) & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0D0C258], "attachmentContainerForSourceIdentifier:calendarDataContainer:", v9, v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v14;
        if (a4)
          *a4 = objc_retainAutorelease(v14);

      }
    }

  }
}

void _CalAttachmentFileGetAttachmentContainerURLsForStore(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  void *v8;
  id v9;

  _CalErrorGetRecordID(a1);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v8 = (void *)_CalStoreCopyUUID(a1);
  _CalAttachmentFileGetAttachmentContainerURLsForStoreProperties(v9, v8, a2, a3, a4);

}

void CalAttachmentFileSetDataProtection(void *a1)
{
  id v1;
  void *v2;
  char v3;
  id v4;
  NSObject *v5;
  id v6;
  uint8_t buf[4];
  id v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (CalAttachmentFileSetDataProtection_onceToken != -1)
    dispatch_once(&CalAttachmentFileSetDataProtection_onceToken, &__block_literal_global_9);
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 0;
  v3 = objc_msgSend(v2, "setAttributes:ofItemAtPath:error:", CalAttachmentFileSetDataProtection_classBDataProtection, v1, &v6);
  v4 = v6;

  if ((v3 & 1) == 0)
  {
    v5 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v8 = v1;
      v9 = 2112;
      v10 = v4;
      _os_log_impl(&dword_1A5CCB000, v5, OS_LOG_TYPE_ERROR, "Failed to change dataclass of attachment at path %@. Error = %@", buf, 0x16u);
    }
  }

}

void CalAttachmentPrepareFileForDownload(void *a1)
{
  void *v1;
  id v2;

  objc_msgSend(a1, "absoluteURL");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "path");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  CalAttachmentFileSetDataProtection(v1);

}

uint64_t _CalAttachmentFileSetFileData(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  const __CFURL *v6;
  uint64_t Store;
  uint64_t StoreWithUID;
  __CFString *v9;
  const __CFURL *v10;
  CFStringRef v11;
  CFStringRef v12;
  NSObject *v13;
  const __CFString *Description;
  CFURLRef v15;
  const __CFURL *v16;
  uint64_t v17;
  __CFString *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  __CFString *v22;
  __CFString *v23;
  id v24;
  NSObject *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  char v30;
  __CFString *v31;
  void *v32;
  NSObject *v33;
  int v34;
  uint64_t v35;
  char v36;
  CFURLRef v37;
  CFURLRef v38;
  void *v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  NSObject *v44;
  uint64_t v45;
  __CFString *v46;
  void *v47;
  void *v48;
  __CFString *v49;
  NSObject *v50;
  void *v51;
  NSObject *v52;
  int ID;
  const __CFURL *v55;
  CFURLRef v56;
  const __CFString *v57;
  const __CFString *v58;
  CFURLRef v59;
  const __CFString *v60;
  const __CFString *v61;
  CFURLRef v62;
  uint64_t v63;
  void *v64;
  CFURLRef url;
  const __CFString *pathComponent;
  id v67;
  char v68;
  id v69;
  uint8_t buf[4];
  CFStringRef v71;
  __int16 v72;
  _BYTE v73[18];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  _CalAttachmentFileGetCalendarDataContainerForAttachmentFile(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4
    || (objc_msgSend(MEMORY[0x1E0D0C258], "attachmentContainerWithBaseURL:", v4),
        (v5 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    v24 = 0;
    v9 = 0;
    goto LABEL_23;
  }
  v6 = (const __CFURL *)v5;
  _CalAttachmentFileGetStoreID((uint64_t)a1);
  Store = CPRecordGetStore();
  StoreWithUID = _CalGetStoreWithUID(Store);
  v9 = (__CFString *)_CalStoreCopyUUID(StoreWithUID);
  if (!v9)
    goto LABEL_19;
  v10 = CFURLCreateCopyAppendingPathComponent(0, v6, v9, 0);
  CFRelease(v9);
  if (!v10)
    goto LABEL_18;
  v11 = CFURLCopyFileSystemPath(v10, kCFURLPOSIXPathStyle);
  if (!v11)
    goto LABEL_17;
  v12 = v11;
  if ((CPFileBuildDirectoriesToPath() & 1) == 0)
  {
    v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v71 = v12;
      _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "Unable to create directories to attachment directory \"%{public}@\"", buf, 0xCu);
    }
  }
  CFRelease(v12);
  Description = (const __CFString *)_CalCalendarItemGetDescription((uint64_t)a1);
  v15 = CFURLCreateCopyAppendingPathComponent(0, v10, Description, 1u);
  if (!v15)
  {
LABEL_17:
    CFRelease(v10);
LABEL_18:
    v9 = 0;
LABEL_19:
    v25 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v71 = 0;
      v72 = 2112;
      *(_QWORD *)v73 = v4;
      _os_log_impl(&dword_1A5CCB000, v25, OS_LOG_TYPE_ERROR, "Could not get local url for components. local absolute url = %@, calendar data container url = %@", buf, 0x16u);
    }
    v24 = 0;
    goto LABEL_22;
  }
  v16 = v15;
  pathComponent = Description;
  v17 = _CalAttachmentFileCopyURLForPendingFileCopy((uint64_t)a1);
  if (v17
    || (v60 = _CalAttachmentFileCopyFilename((uint64_t)a1)) != 0
    && (v61 = v60, v17 = (uint64_t)CFURLCreateWithFileSystemPath(0, v60, kCFURLPOSIXPathStyle, 0), CFRelease(v61), v17))
  {
    url = (CFURLRef)v17;
    v18 = (id)(id)_CalAttachmentFileCopyFilename((uint64_t)a1);
    v19 = v18;
    if ((unint64_t)-[__CFString length](v18, "length") >= 0x101)
    {
      v20 = -[__CFString rangeOfComposedCharacterSequenceAtIndex:](v18, "rangeOfComposedCharacterSequenceAtIndex:", -[__CFString length](v18, "length") - 256);
      -[__CFString substringFromIndex:](v18, "substringFromIndex:", v20 + v21);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend(v19, "stringByReplacingOccurrencesOfString:withString:", CFSTR("/"), CFSTR("_"));
    v22 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (-[__CFString hasPrefix:](v22, "hasPrefix:", CFSTR(".")))
    {
      do
      {
        -[__CFString substringFromIndex:](v22, "substringFromIndex:", 1);
        v23 = (__CFString *)objc_claimAutoreleasedReturnValue();

        v22 = v23;
      }
      while ((-[__CFString hasPrefix:](v23, "hasPrefix:", CFSTR(".")) & 1) != 0);
    }
    else
    {
      v23 = v22;
    }

    if (v23 && -[__CFString length](v23, "length"))
    {
      v55 = CFURLCreateCopyAppendingPathComponent(0, v16, v23, 0);
      if (!v55)
      {
LABEL_65:
        v9 = 0;
LABEL_66:
        CFRelease(url);

        if (v9)
          goto LABEL_69;
        goto LABEL_67;
      }
    }
    else
    {
      v56 = CFURLCreateCopyAppendingPathComponent(0, v16, pathComponent, 0);
      if (!v56)
        goto LABEL_65;
      v55 = v56;
      v57 = CFURLCopyPathExtension(url);
      if (v57)
      {
        v58 = v57;
        v59 = CFURLCreateCopyAppendingPathExtension(0, v55, v57);
        CFRelease(v58);
        CFRelease(v55);
        v55 = v59;
        if (!v59)
          goto LABEL_65;
      }
    }
    v9 = (__CFString *)CFURLCopyFileSystemPath(v55, kCFURLPOSIXPathStyle);
    CFRelease(v55);
    goto LABEL_66;
  }
LABEL_67:
  v62 = CFURLCreateCopyAppendingPathComponent(0, v16, pathComponent, 0);
  v9 = (__CFString *)CFURLCopyFileSystemPath(v16, kCFURLPOSIXPathStyle);
  if (v62)
    CFRelease(v62);
LABEL_69:
  CFRelease(v16);
  CFRelease(v10);
  if (!v9)
    goto LABEL_19;
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v9);
  v63 = objc_claimAutoreleasedReturnValue();
  if (!v63)
    goto LABEL_19;
  v64 = (void *)v63;
  objc_msgSend(MEMORY[0x1E0D0C258], "localRelativePathForLocalAbsoluteURL:localBaseURL:", v63, v4);
  v24 = (id)objc_claimAutoreleasedReturnValue();

LABEL_22:
  CFRelease(v6);
LABEL_23:

  v26 = v24;
  if (v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString stringByDeletingLastPathComponent](v9, "stringByDeletingLastPathComponent");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v28, 1, 0, 0);

    LODWORD(v28) = _CalAttachmentFileGetFlag((uint64_t)a1, 2);
    v68 = 0;
    objc_msgSend(v27, "fileExistsAtPath:isDirectory:", a2, &v68);
    if (!(_DWORD)v28 || v68)
    {
      v67 = 0;
      v36 = objc_msgSend(v27, "copyItemAtPath:toPath:error:", a2, v9, &v67);
      v31 = (__CFString *)v67;
      if ((v36 & 1) != 0)
        goto LABEL_32;
      v42 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v71 = v31;
        _os_log_impl(&dword_1A5CCB000, v42, OS_LOG_TYPE_ERROR, "Failed to copy attachment (error: %@).", buf, 0xCu);
      }

    }
    else
    {
      -[__CFString stringByDeletingLastPathComponent](v9, "stringByDeletingLastPathComponent");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = UnzipArchive();

      if ((v30 & 1) != 0)
      {
        v31 = 0;
LABEL_32:
        v37 = CFURLCreateWithFileSystemPath(0, v9, kCFURLPOSIXPathStyle, 0);
        v38 = v37;
        if (v26 && v37)
        {
          _CalAttachmentFileSetLocalRelativePath((uint64_t)a1);
          v39 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
          {
            v40 = v39;
            v41 = _CalCalendarItemGetDescription((uint64_t)a1);
            *(_DWORD *)buf = 138543874;
            v71 = (CFStringRef)v41;
            v72 = 2112;
            *(_QWORD *)v73 = v26;
            *(_WORD *)&v73[8] = 2112;
            *(_QWORD *)&v73[10] = v38;
            _os_log_impl(&dword_1A5CCB000, v40, OS_LOG_TYPE_INFO, "Set local relative path for attachment. file UUID = %{public}@, local relative path = %@, local absolute url = %@", buf, 0x20u);

          }
        }
        else
        {
          v43 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            v44 = v43;
            v45 = _CalCalendarItemGetDescription((uint64_t)a1);
            *(_DWORD *)buf = 138543874;
            v71 = (CFStringRef)v45;
            v72 = 2112;
            *(_QWORD *)v73 = v26;
            *(_WORD *)&v73[8] = 2112;
            *(_QWORD *)&v73[10] = v38;
            _os_log_impl(&dword_1A5CCB000, v44, OS_LOG_TYPE_ERROR, "Could not set local relative path for attachment. file UUID = %{public}@, local relative path = %@, local absolute url = %@", buf, 0x20u);

          }
          if (!v38)
            goto LABEL_43;
        }
        CFRelease(v38);
LABEL_43:
        CalAttachmentFileSetDataProtection(v9);
        v46 = v9;
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v69 = 0;
        objc_msgSend(MEMORY[0x1E0D0C258], "getFileSizeForPath:fileManager:error:", v46, v47, &v69);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = (__CFString *)v69;
        if (v48)
        {
          _CalAttachmentFileSetFileSize((uint64_t)a1);
        }
        else
        {
          v51 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            v52 = v51;
            ID = CPRecordGetID();
            *(_DWORD *)buf = 138412802;
            v71 = v49;
            v72 = 1024;
            *(_DWORD *)v73 = ID;
            *(_WORD *)&v73[4] = 2112;
            *(_QWORD *)&v73[6] = v46;
            _os_log_impl(&dword_1A5CCB000, v52, OS_LOG_TYPE_ERROR, "Could not set file size for attachment. error = %@, file uid = %d, local absolute path = %@", buf, 0x1Cu);

          }
        }

        v35 = 1;
        goto LABEL_51;
      }
      v50 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v71 = 0;
        _os_log_impl(&dword_1A5CCB000, v50, OS_LOG_TYPE_ERROR, "Failed to unzip attachment (error: %@).", buf, 0xCu);
      }
    }
    v35 = 0;
LABEL_51:

    goto LABEL_52;
  }
  v32 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    v33 = v32;
    v34 = CPRecordGetID();
    *(_DWORD *)buf = 67109120;
    LODWORD(v71) = v34;
    _os_log_impl(&dword_1A5CCB000, v33, OS_LOG_TYPE_ERROR, "Couldn't create a local attachment path for the attachment file %d", buf, 8u);

  }
  v35 = 0;
LABEL_52:

  return v35;
}

BOOL _CalAttachmentFileIsAutoArchived(uint64_t a1)
{
  return _CalAttachmentFileGetFlag(a1, 2);
}

uint64_t _CalAttachmentFileSetLocalRelativePath(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalAttachmentFileSetFileData(void *a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v5 = _CalAttachmentFileSetFileData(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

uint64_t CalAttachmentFileCopyLocalURL(void *a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalAttachmentFileCopyLocalURL(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalAttachmentFileCopyLocalURL(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  _CalColorGetRecordID((uint64_t)a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    _CalAttachmentFileGetCalendarDataContainerForAttachmentFile(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_msgSend(MEMORY[0x1E0D0C258], "localURLForAttachmentWithRelativePath:baseURL:", v2, v3);
      v4 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v4 = 0;
    }

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id _CalAttachmentFileGetCalendarDataContainerForAttachmentFile(void *a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = CalCopyDatabaseForEntity(a1);
  if (v2)
  {
    v3 = (const void *)v2;
    _CalDatabaseGetCalendarDataContainerProvider(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    CFRelease(v3);
    if (v4)
    {
      _CalAttachmentFileAccountIdentifierForAttachmentFile(a1);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "containerForAccountIdentifier:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v6 = 0;
    }

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

id CalAttachmentFileCopyURLAppropriateForFile(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Store;
  uint64_t DatabaseForRecord;
  id v5;
  void *v6;
  id v8;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Store = _CalAttachmentFileGetStore(a1);
  DatabaseForRecord = CalGetDatabaseForRecord();
  v8 = 0;
  _CalAttachmentFileGetAttachmentContainerURLsForStore(Store, DatabaseForRecord, &v8, 0);
  v5 = v8;
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v5, 1, 0, 0);

  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

uint64_t _CalAttachmentFileGetStore(uint64_t a1)
{
  uint64_t Store;

  if ((int)_CalAttachmentFileGetStoreID(a1) < 1)
    return 0;
  Store = CPRecordGetStore();
  return _CalGetStoreWithUID(Store);
}

void _CalAttachmentFileMigrateAttachmentsInStoreFromOldPersistentIDToNewPersistentID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DatabaseForRecord;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  uint64_t RecordStore;
  uint64_t v21;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v24;
  uint64_t v25;
  void *v26;
  const os_unfair_lock *v27;
  uint64_t v28;
  uint64_t v29;
  sqlite3_stmt *v30;
  const os_unfair_lock *v31;
  sqlite3_int64 RowidForRecordID;
  uint64_t v33;
  const os_unfair_lock *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  NSObject *v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  uint8_t buf[4];
  _BYTE v46[28];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  DatabaseForRecord = CalGetDatabaseForRecord();
  _CalDatabaseGetCalendarDataContainerProvider(DatabaseForRecord);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  _CalErrorGetRecordID(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "containerForAccountIdentifier:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D0C258], "attachmentContainerWithBaseURL:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    v41 = DatabaseForRecord;
    v42 = v8;
    v43 = v7;
    objc_msgSend(v10, "URLByAppendingPathComponent:", a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "path");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v13, "fileExistsAtPath:", v14);

    v16 = v12;
    if (v15)
    {
      objc_msgSend(v11, "URLByAppendingPathComponent:", a3);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = 0;
      v18 = objc_msgSend(v13, "moveItemAtURL:toURL:error:", v16, v17, &v44);
      v40 = v44;
      if ((v18 & 1) != 0)
      {
        objc_msgSend(MEMORY[0x1E0D0C258], "localRelativePathForLocalAbsoluteURL:localBaseURL:", v16, v9);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0D0C258], "localRelativePathForLocalAbsoluteURL:localBaseURL:", v17, v9);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        RecordStore = _CalDatabaseGetRecordStore(v41);
        v21 = RecordStore;
        if (CDBLockingAssertionsEnabled)
        {
          if (RecordStore)
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
        Database = CPRecordStoreGetDatabase();
        if (CDBLockingAssertionsEnabled)
        {
          if (Database)
          {
            if (*(_QWORD *)(Database + 104))
            {
              v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v24)
                os_unfair_lock_assert_owner(v24 + 20);
            }
          }
        }
        v25 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
        v26 = v19;
        if (v25)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (*(_QWORD *)v25)
            {
              if (*(_QWORD *)(*(_QWORD *)v25 + 104))
              {
                v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v27)
                  os_unfair_lock_assert_owner(v27 + 20);
              }
            }
          }
          v28 = CPSqliteConnectionStatementForSQL();
          if (v28)
          {
            v29 = v28;
            sqlite3_bind_text(*(sqlite3_stmt **)(v28 + 8), 1, (const char *)objc_msgSend(v39, "UTF8String"), -1, 0);
            sqlite3_bind_int64(*(sqlite3_stmt **)(v29 + 8), 2, objc_msgSend(v19, "length") + 1);
            v30 = *(sqlite3_stmt **)(v29 + 8);
            if (CDBLockingAssertionsEnabled)
            {
              if (v21)
              {
                v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v31)
                  os_unfair_lock_assert_owner(v31 + 20);
              }
            }
            CPRecordGetID();
            RowidForRecordID = CPRecordStoreGetRowidForRecordID();
            sqlite3_bind_int64(v30, 3, RowidForRecordID);
            sqlite3_bind_int64(*(sqlite3_stmt **)(v29 + 8), 4, objc_msgSend(v26, "length"));
            sqlite3_bind_text(*(sqlite3_stmt **)(v29 + 8), 5, (const char *)objc_msgSend(v26, "UTF8String"), -1, 0);
            _CalDatabasePerformStatementWithWriteLock(v41, v29);
            if (CDBLockingAssertionsEnabled)
            {
              if (*(_QWORD *)v29)
              {
                v33 = **(_QWORD **)v29;
                if (v33)
                {
                  if (*(_QWORD *)(v33 + 104))
                  {
                    v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v34)
                      os_unfair_lock_assert_owner(v34 + 20);
                  }
                }
              }
            }
            CPSqliteStatementReset();
          }
        }

        v35 = v40;
      }
      else
      {
        v38 = CDBLogHandle;
        v35 = v40;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543874;
          *(_QWORD *)v46 = a2;
          *(_WORD *)&v46[8] = 2114;
          *(_QWORD *)&v46[10] = a3;
          *(_WORD *)&v46[18] = 2112;
          *(_QWORD *)&v46[20] = v40;
          _os_log_impl(&dword_1A5CCB000, v38, OS_LOG_TYPE_ERROR, "Couldn't rename attachment directory from %{public}@ to %{public}@: %@", buf, 0x20u);
        }
      }

    }
    v8 = v42;
    v7 = v43;
  }
  else
  {
    v36 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v37 = v36;
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)v46 = CPRecordGetID();
      *(_WORD *)&v46[4] = 2114;
      *(_QWORD *)&v46[6] = a2;
      *(_WORD *)&v46[14] = 2114;
      *(_QWORD *)&v46[16] = a3;
      _os_log_impl(&dword_1A5CCB000, v37, OS_LOG_TYPE_ERROR, "Changing store uid %d persistent id from %{public}@ to %{public}@: couldn't get attachment base URL, so won't migrate any attachments.", buf, 0x1Cu);

    }
  }

}

uint64_t CalDatabaseDeleteOrphanedAttachmentsInDirectory(void *a1, void *a2, uint64_t a3)
{
  id v4;
  unint64_t v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t i;
  void *v17;
  void *v18;
  CFTypeRef v19;
  char v20;
  id v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  CFTypeRef v30;
  const void *v31;
  id v32;
  double v33;
  double v34;
  NSObject *v35;
  void *v36;
  int v37;
  id v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  uint32_t v43;
  uint64_t v44;
  void *v45;
  int v46;
  id v47;
  uint64_t v48;
  const char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint32_t v52;
  id v54;
  uint64_t v55;
  int loga;
  NSObject *log;
  id v58;
  id v59;
  id v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint8_t buf[4];
  id v76;
  __int16 v77;
  id v78;
  _BYTE v79[128];
  _QWORD v80[3];

  v80[1] = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v59 = a2;
  v5 = 0x1E0CB3000uLL;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "path");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "fileExistsAtPath:", v7);

  if (!v8)
  {
    v44 = 1;
    v15 = v59;
    goto LABEL_50;
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = *MEMORY[0x1E0C999D0];
  v80[0] = *MEMORY[0x1E0C999D0];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v80, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v4, v10, 1, &__block_literal_global_12);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v12 = v11;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v71, v79, 16);
  v60 = v12;
  if (!v13)
  {

    v15 = v59;
    goto LABEL_42;
  }
  v14 = v13;
  v54 = v4;
  v62 = *(_QWORD *)v72;
  v55 = *MEMORY[0x1E0C998E8];
  v61 = 1;
  v15 = v59;
  do
  {
    for (i = 0; i != v14; ++i)
    {
      if (*(_QWORD *)v72 != v62)
        objc_enumerationMutation(v12);
      v17 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * i);
      objc_msgSend(MEMORY[0x1E0D0C258], "localRelativePathForLocalAbsoluteURL:localBaseURL:", v17, v15, v54);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = CalDatabaseCopyAttachmentFileInStoreWithLocalPath();
      v69 = 0;
      v70 = 0;
      v20 = objc_msgSend(v17, "getResourceValue:forKey:error:", &v70, v63, &v69);
      v21 = v70;
      v22 = v69;
      if ((v20 & 1) != 0)
      {
        if (objc_msgSend(v21, "BOOLValue"))
        {
          if (!v19)
          {
            v61 &= CalDatabaseDeleteOrphanedAttachmentsInDirectory(v17, v15, a3);
            goto LABEL_36;
          }
LABEL_16:
          CFRelease(v19);
          v61 = 0;
          goto LABEL_36;
        }
        if (v19)
          goto LABEL_16;
        objc_msgSend(v17, "pathExtension");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "lowercaseString");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v25, "isEqualToString:", CFSTR("zip"));

        if (!v26)
          goto LABEL_29;
        v27 = (void *)MEMORY[0x1E0D0C258];
        objc_msgSend(v17, "URLByDeletingPathExtension");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "localRelativePathForLocalAbsoluteURL:localBaseURL:", v28, v15);
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        v30 = CalDatabaseCopyAttachmentFileInStoreWithLocalPath();
        if (!v30)
          goto LABEL_28;
        v31 = v30;
        if (!CalAttachmentFileIsAutoArchived((uint64_t)v30))
          goto LABEL_27;
        v67 = 0;
        v68 = 0;
        loga = objc_msgSend(v17, "getResourceValue:forKey:error:", &v68, v55, &v67);
        v32 = v68;
        v58 = v67;
        if (!loga)
        {
          log = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v76 = v17;
            v77 = 2112;
            v78 = v58;
            _os_log_impl(&dword_1A5CCB000, log, OS_LOG_TYPE_ERROR, "Error checking creation date for %@: %@", buf, 0x16u);
          }

LABEL_27:
          CFRelease(v31);
LABEL_28:

LABEL_29:
          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v66 = 0;
          v37 = objc_msgSend(v36, "removeItemAtURL:error:", v17, &v66);
          v38 = v66;

          v39 = CDBLogHandle;
          if (v37)
          {
            v12 = v60;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v76 = v17;
              v40 = v39;
              v41 = OS_LOG_TYPE_DEFAULT;
              v42 = "Attachment cleanup: removed orphaned file %@";
              v43 = 12;
              goto LABEL_34;
            }
          }
          else
          {
            v12 = v60;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v76 = v17;
              v77 = 2112;
              v78 = v38;
              v40 = v39;
              v41 = OS_LOG_TYPE_ERROR;
              v42 = "Attachment cleanup: failed to remove orphaned file %@: %@";
              v43 = 22;
LABEL_34:
              _os_log_impl(&dword_1A5CCB000, v40, v41, v42, buf, v43);
            }
          }

          v15 = v59;
          goto LABEL_36;
        }
        objc_msgSend(v32, "timeIntervalSinceNow");
        v34 = fabs(v33);

        CFRelease(v31);
        if (v34 >= 86400.0)
          goto LABEL_29;
        v35 = CDBLogHandle;
        v12 = v60;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v76 = v17;
          _os_log_impl(&dword_1A5CCB000, v35, OS_LOG_TYPE_DEFAULT, "Attachment cleanup: skipping removing file because it is archived and is too young: %@", buf, 0xCu);
        }
      }
      else
      {
        v23 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v76 = v17;
          v77 = 2112;
          v78 = v22;
          _os_log_impl(&dword_1A5CCB000, v23, OS_LOG_TYPE_ERROR, "Error checking if %@ is a directory: %@", buf, 0x16u);
        }
        if (v19)
          CFRelease(v19);
      }
LABEL_36:

    }
    v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v71, v79, 16);
  }
  while (v14);

  v4 = v54;
  v5 = 0x1E0CB3000;
  if ((v61 & 1) == 0)
  {
    v44 = 0;
    goto LABEL_49;
  }
LABEL_42:
  objc_msgSend(*(id *)(v5 + 1568), "defaultManager");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = 0;
  v46 = objc_msgSend(v45, "removeItemAtURL:error:", v4, &v65);
  v47 = v65;

  v48 = CDBLogHandle;
  if (v46)
  {
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v76 = v4;
      v49 = "Attachment cleanup: removed empty directory %@";
      v50 = v48;
      v51 = OS_LOG_TYPE_DEFAULT;
      v52 = 12;
      goto LABEL_47;
    }
  }
  else if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412546;
    v76 = v4;
    v77 = 2112;
    v78 = v47;
    v49 = "Attachment cleanup: failed to remove empty store directory %@: %@";
    v50 = v48;
    v51 = OS_LOG_TYPE_ERROR;
    v52 = 22;
LABEL_47:
    _os_log_impl(&dword_1A5CCB000, v50, v51, v49, buf, v52);
  }

  v44 = 1;
  v12 = v60;
LABEL_49:

LABEL_50:
  return v44;
}

CFTypeRef CalDatabaseCopyAttachmentFileInStoreWithLocalPath()
{
  os_unfair_lock_s *RecordLock;
  uint64_t DatabaseForRecord;
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  const __CFArray *v5;
  const void *ValueAtIndex;
  CFTypeRef v7;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DatabaseForRecord = CalGetDatabaseForRecord();
  RecordStore = _CalDatabaseGetRecordStore(DatabaseForRecord);
  CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v5 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  if (!v5)
    return 0;
  if (CFArrayGetCount(v5) < 1)
  {
    v7 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
    v7 = CFRetain(ValueAtIndex);
  }
  CFRelease(v5);
  return v7;
}

BOOL CalAttachmentFileIsAutoArchived(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 Flag;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Flag = _CalAttachmentFileGetFlag(a1, 2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalDatabaseCleanUpOrphanedLocalAttachments(os_unfair_lock_s *a1)
{
  uint64_t v1;
  const __CFArray *v2;
  const __CFArray *v3;
  void *v4;
  CFIndex v5;
  os_unfair_lock_s *v6;
  const void *ValueAtIndex;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const __CFArray *v15;
  int UID;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  id v30;
  id v31;
  char v32;
  id v33;
  void *v34;
  int v35;
  NSObject *v36;
  _BOOL4 v37;
  NSObject *v38;
  NSObject *v39;
  void *v40;
  NSObject *v41;
  int v42;
  void *v43;
  id obj;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *log;
  CFIndex Count;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  id v68;
  id v69;
  uint8_t buf[4];
  _BYTE v71[18];
  _BYTE v72[128];
  _QWORD v73[2];
  _BYTE v74[128];
  uint64_t v75;

  v1 = (uint64_t)a1;
  v75 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFArray *)CalDatabaseCopyOfAllStores(a1);
  if (v2)
  {
    v3 = v2;
    v4 = (void *)objc_opt_new();
    v50 = (void *)objc_opt_new();
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v5 = 0;
      v6 = (os_unfair_lock_s *)(v1 + 80);
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, v5);
        v8 = CalStoreCopyUUID((uint64_t)ValueAtIndex);
        if (!v8)
          break;
        v9 = (void *)v8;
        objc_msgSend(v50, "addObject:", v8);
        v68 = 0;
        v69 = 0;
        os_unfair_lock_lock(v6);
        _CalAttachmentFileGetAttachmentContainerURLsForStore((uint64_t)ValueAtIndex, v1, &v69, &v68);
        if (CDBLockingAssertionsEnabled)
          os_unfair_lock_assert_owner(v6);
        os_unfair_lock_unlock(v6);
        v10 = v69;
        v11 = v68;
        if (v11 && v10)
        {
          objc_msgSend(v4, "addObject:", v11);
          CalDatabaseDeleteOrphanedAttachmentsInDirectory(v10, v11, (uint64_t)ValueAtIndex);
        }
        else
        {
          v12 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            log = v12;
            v13 = v1;
            v14 = v4;
            v15 = v3;
            UID = CalStoreGetUID();
            v17 = (void *)CalStoreCopyName((uint64_t)ValueAtIndex);
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)v71 = UID;
            v3 = v15;
            v4 = v14;
            v1 = v13;
            *(_WORD *)&v71[4] = 2112;
            *(_QWORD *)&v71[6] = v17;
            _os_log_impl(&dword_1A5CCB000, log, OS_LOG_TYPE_ERROR, "Attachment cleanup: Unable to get URLs for store %d (%@). Skipping cleanup for it", buf, 0x12u);

          }
        }

        if (Count == ++v5)
          goto LABEL_13;
      }

      v40 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v41 = v40;
        v42 = CalStoreGetUID();
        v43 = (void *)CalStoreCopyName((uint64_t)ValueAtIndex);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v71 = v42;
        *(_WORD *)&v71[4] = 2112;
        *(_QWORD *)&v71[6] = v43;
        _os_log_impl(&dword_1A5CCB000, v41, OS_LOG_TYPE_ERROR, "Attachment cleanup: Unable to get persistent ID for store %d (%@). Aborting cleanup.", buf, 0x12u);

      }
      v50 = 0;
      v4 = 0;
    }
LABEL_13:
    CFRelease(v3);
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    obj = v4;
    v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v74, 16);
    if (!v46)
      goto LABEL_43;
    v45 = *(_QWORD *)v65;
    v18 = *MEMORY[0x1E0C999D0];
    v51 = *MEMORY[0x1E0C99A90];
    v52 = *MEMORY[0x1E0C999D0];
LABEL_15:
    v19 = 0;
    while (1)
    {
      if (*(_QWORD *)v65 != v45)
        objc_enumerationMutation(obj);
      v48 = v19;
      objc_msgSend(MEMORY[0x1E0D0C258], "attachmentContainerWithBaseURL:", *(_QWORD *)(*((_QWORD *)&v64 + 1) + 8 * v19));
      v20 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v73[0] = v18;
      v73[1] = v51;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v73, 2);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = (void *)v20;
      objc_msgSend(v21, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v20, v22, 1, &__block_literal_global_14);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = v52;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v55 = v23;
      v24 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v60, v72, 16);
      if (v24)
        break;
LABEL_41:

      v19 = v48 + 1;
      if (v48 + 1 == v46)
      {
        v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v74, 16);
        if (!v46)
        {
LABEL_43:

          return;
        }
        goto LABEL_15;
      }
    }
    v25 = v24;
    v26 = *(_QWORD *)v61;
LABEL_20:
    v27 = 0;
    while (1)
    {
      if (*(_QWORD *)v61 != v26)
        objc_enumerationMutation(v55);
      v28 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * v27);
      v58 = 0;
      v59 = 0;
      v29 = objc_msgSend(v28, "getResourceValue:forKey:error:", &v59, v18, &v58);
      v30 = v59;
      v31 = v58;
      if ((v29 & 1) == 0)
      {
        v38 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v71 = v28;
          *(_WORD *)&v71[8] = 2112;
          *(_QWORD *)&v71[10] = v31;
          _os_log_impl(&dword_1A5CCB000, v38, OS_LOG_TYPE_ERROR, "Error checking if %@ is a directory: %@", buf, 0x16u);
        }
        goto LABEL_39;
      }
      if (objc_msgSend(v30, "BOOLValue"))
        break;
LABEL_39:

      if (v25 == ++v27)
      {
        v25 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v60, v72, 16);
        if (!v25)
          goto LABEL_41;
        goto LABEL_20;
      }
    }
    v57 = 0;
    v32 = objc_msgSend(v28, "getResourceValue:forKey:error:", &v57, v51, 0);
    v33 = v57;
    if ((v32 & 1) != 0)
    {
      if ((objc_msgSend(v50, "containsObject:", v33) & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v56 = v31;
        v35 = objc_msgSend(v34, "removeItemAtURL:error:", v28, &v56);
        v49 = v56;

        v36 = CDBLogHandle;
        v37 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
        if (v35)
        {
          v18 = v52;
          if (v37)
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v71 = v28;
            _os_log_impl(&dword_1A5CCB000, v36, OS_LOG_TYPE_ERROR, "Attachment cleanup: found and removed orphaned store directory %@", buf, 0xCu);
          }
          goto LABEL_37;
        }
        v18 = v52;
        if (!v37)
        {
LABEL_37:
          v31 = v49;
          goto LABEL_38;
        }
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v71 = v28;
        *(_WORD *)&v71[8] = 2112;
        *(_QWORD *)&v71[10] = v49;
        _os_log_impl(&dword_1A5CCB000, v36, OS_LOG_TYPE_ERROR, "Attachment cleanup: failed to remove orphaned store directory %@: %@", buf, 0x16u);
        v31 = v49;
LABEL_38:

        goto LABEL_39;
      }
    }
    else
    {
      v39 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v71 = v28;
        *(_WORD *)&v71[8] = 2112;
        *(_QWORD *)&v71[10] = v31;
        _os_log_impl(&dword_1A5CCB000, v39, OS_LOG_TYPE_ERROR, "Error getting name of %@: %@", buf, 0x16u);
      }
    }
    v18 = v52;
    goto LABEL_38;
  }
}

CFMutableArrayRef _CalAttachmentFileCopyAttachments(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

const __CFArray *_CalAttachmentFileAddAttachment(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

_QWORD *_CalAttachmentFileRemoveAttachment(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

CFMutableArrayRef CalAttachmentFileCopyAttachments(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalAttachmentFileCopyAttachments(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalAttachmentFileAddAttachment(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileAddAttachment(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalAttachmentFileRemoveAttachment(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileRemoveAttachment(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAttachmentFileHasValidParent(uint64_t a1)
{
  __CFArray *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = _CalAttachmentFileCopyAttachments(a1);
  v2 = -[__CFArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v7;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v7 != v3)
          objc_enumerationMutation(v1);
        if ((_CalAttachmentHasValidParent(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * i)) & 1) != 0)
        {
          v2 = 1;
          goto LABEL_11;
        }
      }
      v2 = -[__CFArray countByEnumeratingWithState:objects:count:](v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_11:

  return v2;
}

void _CalAttachmentFileCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM AttachmentFile WHERE ROWID NOT IN (SELECT file_id FROM Attachment);"),
    0);
}

uint64_t _CalAttachmentFileSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t _CalAttachmentFileGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t CalDatabaseCopyAttachmentFileInStoreWithURL(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t RecordStore;
  uint64_t v6;
  BOOL v7;
  const os_unfair_lock *Context;
  uint64_t RowidForRecordID;
  void *v10;
  BOOL v11;
  const os_unfair_lock *v12;
  uint64_t v13;
  id v14;
  const __CFArray *v15;
  const void *ValueAtIndex;
  CFTypeRef v17;
  uint64_t v18;
  _QWORD v20[4];
  id v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 0;
  v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  v4 = v3 + 20;
  os_unfair_lock_lock(v3 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)v3);
  v6 = RecordStore;
  if (CDBLockingAssertionsEnabled)
    v7 = RecordStore == 0;
  else
    v7 = 1;
  if (!v7)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordGetID();
  RowidForRecordID = CPRecordStoreGetRowidForRecordID();
  CFURLGetString(a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (CDBLockingAssertionsEnabled)
    v11 = v6 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v12)
      os_unfair_lock_assert_owner(v12 + 20);
  }
  v13 = MEMORY[0x1E0C809B0];
  v24 = MEMORY[0x1E0C809B0];
  v25 = 3221225472;
  v26 = __CalDatabaseCopyAttachmentFileInStoreWithURL_block_invoke;
  v27 = &unk_1E4F85068;
  v29 = RowidForRecordID;
  v14 = v10;
  v28 = v14;
  v15 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();

  if (v15)
  {
    if (CFArrayGetCount(v15) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v15, 0);
      v17 = CFRetain(ValueAtIndex);
      v31[3] = (uint64_t)v17;
    }
    CFRelease(v15);
  }
  if (!v31[3])
  {
    v20[0] = v13;
    v20[1] = 3221225472;
    v20[2] = __CalDatabaseCopyAttachmentFileInStoreWithURL_block_invoke_2;
    v20[3] = &unk_1E4F86130;
    v21 = v14;
    v22 = &v30;
    v23 = RowidForRecordID;
    _CalDatabaseEnumerateAddedEntitiesOfType((uint64_t)v3, 25, v20);

  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  CFRelease(v3);
  v18 = v31[3];

  _Block_object_dispose(&v30, 8);
  return v18;
}

void sub_1A5D16BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalDatabaseGetAttachmentFileWithUUID(uint64_t a1, uint64_t a2)
{
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const void *ValueAtIndex;
  uint64_t v11;
  _QWORD v13[11];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v7 = MEMORY[0x1E0C809B0];
  v13[6] = MEMORY[0x1E0C809B0];
  v13[7] = 3221225472;
  v13[8] = ___CalDatabaseGetAttachmentFileWithUUID_block_invoke;
  v13[9] = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  v13[10] = a2;
  v8 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  v9 = v8;
  if (v8)
  {
    if (CFArrayGetCount(v8) >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v9, 0);
      v15[3] = (uint64_t)ValueAtIndex;
    }
    CFRelease(v9);
  }
  v11 = v15[3];
  if (!v11)
  {
    v13[0] = v7;
    v13[1] = 3221225472;
    v13[2] = ___CalDatabaseGetAttachmentFileWithUUID_block_invoke_2;
    v13[3] = &unk_1E4F86158;
    v13[4] = &v14;
    v13[5] = a2;
    _CalDatabaseEnumerateAddedEntitiesOfType(a1, 25, v13);
    v11 = v15[3];
  }
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_1A5D16E80(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

CFTypeRef CalDatabaseCopyAttachmentFileWithUUID(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  const void *AttachmentFileWithUUID;
  CFTypeRef v6;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  AttachmentFileWithUUID = (const void *)_CalDatabaseGetAttachmentFileWithUUID((uint64_t)a1, a2);
  if (AttachmentFileWithUUID)
    v6 = CFRetain(AttachmentFileWithUUID);
  else
    v6 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v6;
}

uint64_t CalDatabaseCopyAttachmentFileWithExternalIDInStore(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  void *v6;
  uint64_t v7;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = (void *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  objc_msgSend(v6, "firstObject");
  v7 = objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t _CalDatabaseCopyOfAllAttachmentFilesInStore(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
}

uint64_t CalDatabaseCopyOfAllAttachmentFilesInStoreWithoutLocalFilesAndDownloadAttemptsBelow(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t v6;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t _CalAttachmentFileGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef CalAttachmentFileCopyLocalRelativePath(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *RecordID;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  RecordID = (const void *)_CalColorGetRecordID(a1);
  if (RecordID)
    v4 = CFRetain(RecordID);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentFileSetLocalRelativePath(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetLocalRelativePath(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAttachmentFileCopyURLForPendingFileCopy(uint64_t a1)
{
  const os_unfair_lock *Context;
  void *v2;
  uint64_t v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v2 = (void *)CPRecordCopyProperty();
  objc_msgSend(v2, "url");
  v3 = objc_claimAutoreleasedReturnValue();

  return v3;
}

void _CalAttachmentFileSetURLForPendingFileCopy(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  id v4;

  if (a2)
  {
    v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3910]), "initWithURL:readonly:", a2, 1);
    if (!a1)
      goto LABEL_9;
  }
  else
  {
    v4 = 0;
    if (!a1)
      goto LABEL_9;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
LABEL_9:
  CPRecordSetProperty();

}

uint64_t _CalAttachmentFileSetExternalModTag(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalAttachmentFileSetExternalModTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetExternalModTag(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAttachmentFileCopyExternalModTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Data;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Data = (const void *)_CalColorGetData(a1);
  if (Data)
    v4 = CFRetain(Data);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalAttachmentFileCopyUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Description;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Description = (const void *)_CalCalendarItemGetDescription(a1);
  if (Description)
    v4 = CFRetain(Description);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalAttachmentFileSetFilename(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

const __CFString *_CalAttachmentFileCopyFilename(uint64_t a1)
{
  const os_unfair_lock *Context;
  const __CFString *result;
  const os_unfair_lock *v4;
  const __CFString *v5;
  CFStringRef PathComponent;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFString *)CPRecordCopyProperty();
  if (!result)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v4)
            os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
    result = (const __CFString *)CPRecordGetProperty();
    if (result)
    {
      result = (const __CFString *)CFURLCreateWithString(0, result, 0);
      if (result)
      {
        v5 = result;
        PathComponent = CFURLCopyLastPathComponent((CFURLRef)result);
        CFRelease(v5);
        return PathComponent;
      }
    }
  }
  return result;
}

const __CFString *CalAttachmentFileCopyFilename(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalAttachmentFileCopyFilename(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalAttachmentFileSetFilename(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetFilename(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalAttachmentFileIsBinary(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 Flag;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Flag = _CalAttachmentFileGetFlag(a1, 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalAttachmentFileSetAutoArchived(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalAttachmentFileGetFlag(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return (CPRecordGetProperty() & a2) != 0;
}

void CalAttachmentFileSetFormat(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorCode(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const __CFString *CalAttachmentFileCopyURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalAttachmentFileCopyURL(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

const __CFString *_CalAttachmentFileCopyURL(uint64_t a1)
{
  const os_unfair_lock *Context;
  const __CFString *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFString *)CPRecordGetProperty();
  if (result)
    return (const __CFString *)CFURLCreateWithString(0, result, 0);
  return result;
}

void CalAttachmentFileSetFileSize(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetFileSize(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAttachmentFileSetFileSize(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalAttachmentFileSetDownloadTries(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentFileGetDownloadTries(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalAttachmentFileSetDownloadStart(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAttachmentFileCopyDownloadStart(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const void *Property;
  CFTypeRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const void *)CPRecordGetProperty();
  if (Property)
    v5 = CFRetain(Property);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

CFTypeRef CalAttachmentFileCopyStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Store;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Store = (const void *)_CalAttachmentFileGetStore(a1);
  if (Store)
    v4 = CFRetain(Store);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalCalendarLoad(uint64_t a1)
{
  uint64_t result;
  const os_unfair_lock *Context;
  uint64_t Store;
  const os_unfair_lock *v5;

  result = CPRecordGetPropertyDescriptor();
  if (result)
  {
    if (!*(_QWORD *)(result + 32))
      _CalCalendarLoad_cold_1();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    CPRecordGetProperty();
    Store = CPRecordGetStore();
    _CalGetCalendarWithUID(Store);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5)
        os_unfair_lock_assert_owner(v5 + 20);
    }
    return CPRecordInitializeProperty();
  }
  return result;
}

uint64_t _CalCalendarLoadOldFlags(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordInitializeProperty();
}

void _CalCalendarInvalidateSubentities(int a1, uint64_t a2, _QWORD *a3)
{
  uint64_t Store;
  int StoreId;

  if ((a1 & 0x80000000) == 0)
  {
    Store = CPRecordGetStore();
    StoreId = _CalCalendarGetStoreId(a2);
    if (!*(_BYTE *)(CPRecordStoreGetContext() + 382))
    {
      _CalInvalidateCalendarItemsForCalendarId(Store);
      _CalInvalidateShareesWithOwnerID(Store);
      _CalInvalidateNotificationsWithCalendarID(Store);
    }
    if (a1 == 1 && StoreId == 1)
      _CalCalendarInsertNewDefault(a3);
  }
}

void _CalCalendarPrepareForSave(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  CFTypeRef Store;
  const os_unfair_lock *v6;
  uint64_t DatabaseForRecord;
  const void *AssignableColor;
  const void *v9;
  const os_unfair_lock *v10;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;
  int v13;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  int Property;
  const os_unfair_lock *v17;
  const os_unfair_lock *v18;
  unsigned int OriginalProperty;
  const os_unfair_lock *v20;
  const os_unfair_lock *v21;
  uint64_t v22;
  const os_unfair_lock *v23;
  uint64_t v24;
  const os_unfair_lock *v25;
  uint64_t v26;
  const os_unfair_lock *v27;
  uint64_t v28;
  const os_unfair_lock *v29;
  uint64_t v30;
  const os_unfair_lock *v31;
  int ID;
  void *v33;
  const os_unfair_lock *v34;
  id v35;
  const os_unfair_lock *v36;
  id v37;
  const os_unfair_lock *v38;
  id v39;
  const os_unfair_lock *v40;
  id v41;
  const os_unfair_lock *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __CFString *v47;
  NSObject *v48;
  int v49;
  void *v50;
  __int16 v51;
  __CFString *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  id v58;
  __int16 v59;
  id v60;
  __int16 v61;
  id v62;
  __int16 v63;
  id v64;
  __int16 v65;
  id v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (!CPRecordGetProperty())
  {
    Store = _CalCalendarGetStore(a1);
    if (Store && _CalStoreIsFacebook((uint64_t)Store))
    {
      EKGetFacebookCalendarColor();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      CPRecordSetProperty();
    }
    else
    {
      DatabaseForRecord = CalGetDatabaseForRecord();
      AssignableColor = _CalCalendarCopyNextAssignableColor(DatabaseForRecord);
      if (AssignableColor)
      {
        v9 = AssignableColor;
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10)
                os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
        CPRecordSetProperty();
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v11)
                os_unfair_lock_assert_owner(v11 + 20);
            }
          }
        }
        CPRecordSetProperty();
        CFRelease(v9);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a2)
      {
        if (*(_QWORD *)(*(_QWORD *)a2 + 104))
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
  }
  v13 = CPSqliteConnectionIntegerForProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  if (v13 == CPRecordGetProperty())
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v15)
            os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
    Property = CPRecordGetProperty();
    if ((Property | 5) != Property)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17)
              os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
      CPRecordSetProperty();
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18)
          os_unfair_lock_assert_owner(v18 + 20);
      }
    }
  }
  OriginalProperty = CPRecordGetOriginalProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20)
          os_unfair_lock_assert_owner(v20 + 20);
      }
    }
  }
  if (OriginalProperty != CPRecordGetProperty())
    _CalRecordSetPropertyIfDifferent(a1, 45, (const __CFString *)OriginalProperty);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21)
          os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  v22 = CPRecordGetProperty();
  if (v22)
    CalRelationOwnerWillSave(v22);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23)
          os_unfair_lock_assert_owner(v23 + 20);
      }
    }
  }
  v24 = CPRecordGetProperty();
  if (v24)
    CalRelationOwnerWillSave(v24);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25)
          os_unfair_lock_assert_owner(v25 + 20);
      }
    }
  }
  v26 = CPRecordGetProperty();
  if (v26)
    CalRelationOwnerWillSave(v26);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27)
          os_unfair_lock_assert_owner(v27 + 20);
      }
    }
  }
  v28 = CPRecordGetProperty();
  if (v28)
    CalRelationOwnerWillSave(v28);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29)
          os_unfair_lock_assert_owner(v29 + 20);
      }
    }
  }
  v30 = CPRecordGetProperty();
  if (v30)
    CalRelationOwnerWillSave(v30);
  _CalCalendarValidateIdentityForProperties(a1, a2);
  _CalCalendarValidateIdentityForProperties(a1, a2);
  _CalCalendarClearDirtyAttributes(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31)
          os_unfair_lock_assert_owner(v31 + 20);
      }
    }
  }
  if (CPRecordIsPendingAdd())
  {
    ID = CPRecordGetID();
    _CalCalendarGetTitle(a1);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v34)
            os_unfair_lock_assert_owner(v34 + 20);
        }
      }
    }
    v35 = (id)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v36)
            os_unfair_lock_assert_owner(v36 + 20);
        }
      }
    }
    v37 = (id)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v38)
            os_unfair_lock_assert_owner(v38 + 20);
        }
      }
    }
    v39 = (id)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v40)
            os_unfair_lock_assert_owner(v40 + 20);
        }
      }
    }
    v41 = (id)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v42 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v42)
            os_unfair_lock_assert_owner(v42 + 20);
        }
      }
    }
    v43 = (id)CPRecordGetProperty();
    v44 = CalGetDatabaseForRecord();
    if (v44)
    {
      v45 = v44;
      v46 = (void *)_CalDatabaseCopyClientName(v44);
      v47 = (__CFString *)_CalDatabaseCopyClientIdentifier(v45);
    }
    else
    {
      v46 = 0;
      v47 = CFSTR("Database null during saving?");
    }
    v48 = (id)CDBLogHandle;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      v49 = 138545410;
      v50 = v46;
      v51 = 2114;
      v52 = v47;
      v53 = 1024;
      v54 = ID;
      v55 = 2112;
      v56 = v33;
      v57 = 2112;
      v58 = v35;
      v59 = 2114;
      v60 = v37;
      v61 = 2114;
      v62 = v39;
      v63 = 2114;
      v64 = v41;
      v65 = 2114;
      v66 = v43;
      _os_log_impl(&dword_1A5CCB000, v48, OS_LOG_TYPE_DEFAULT, "Client %{public}@ (%{public}@) is adding a calendar with properties: [rowid=%i, title=%@, external_id=%@, external_mod_tag=%{public}@, external_id_tag=%{public}@, UUID=%{public}@, sync_token=%{public}@]", (uint8_t *)&v49, 0x58u);
    }

  }
}

uint64_t _CalCalendarPropertyChanged(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t DatabaseForRecord;
  const os_unfair_lock *Context;

  if (a2 <= 0x3F)
  {
    v2 = result;
    if (((1 << a2) & 0xFFF00E01D87FD0EFLL) != 0)
    {
      result = _CalRecordHasValueChangedForProperty(result, a2);
      if (!(_DWORD)result)
        return result;
      DatabaseForRecord = CalGetDatabaseForRecord();
      _CalDatabaseSetChangeFlags(DatabaseForRecord, 2);
      if (!v2)
        return CPRecordSetProperty();
      goto LABEL_5;
    }
    if (((1 << a2) & 0x118000000000) != 0)
    {
      result = _CalRecordHasValueChangedForProperty(result, a2);
      if ((_DWORD)result)
      {
        if (!v2)
          return CPRecordSetProperty();
LABEL_5:
        if (CDBLockingAssertionsEnabled && CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
        return CPRecordSetProperty();
      }
    }
  }
  return result;
}

uint64_t _CalCalendarGetBirthdayCalendarId(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)(*(_QWORD *)a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPSqliteConnectionIntegerForProperty();
}

uint64_t CalCalendarInsertBirthdayCalendar(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  uint64_t v10;
  const os_unfair_lock *v11;
  uint64_t os_unfair_lock_opaque;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = -1;
  if (v9)
  {
    v10 = v9;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __CalCalendarInsertBirthdayCalendar_block_invoke;
    v18[3] = &unk_1E4F83DE8;
    v18[4] = &v19;
    v18[5] = v9;
    _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v18);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v10)
      {
        if (*(_QWORD *)(*(_QWORD *)v10 + 104))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  os_unfair_lock_opaque = a1[42]._os_unfair_lock_opaque;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  v13 = *((unsigned int *)v20 + 6);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = (void *)CalRecordIDCreate(1, *((_DWORD *)v20 + 6));
    v23[0] = v14;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:](CalDatabaseInMemoryChangeTracking, "changeTrackingForDatabase:", a1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "addChangeset:deletes:clientID:changeType:", v15, MEMORY[0x1E0C9AA60], os_unfair_lock_opaque, 0);
    _CalDatabasePostDBChangeNotificationToInternalAndExternalClients((uint64_t)a1);
    CalDatabaseReset(a1);

    v13 = *((unsigned int *)v20 + 6);
  }
  _Block_object_dispose(&v19, 8);
  return v13;
}

void sub_1A5D192D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalCalendarInsertBirthdayCalendar(_QWORD *a1, int a2)
{
  const os_unfair_lock *Context;
  uint64_t v5;
  uint64_t v6;
  const __CFUUID *v7;
  CFStringRef v8;
  const __CFString *v9;
  uint64_t v10;
  CFStringRef v11;
  CFStringRef v12;
  const os_unfair_lock *v13;
  uint64_t Insert;
  const os_unfair_lock *v15;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(_QWORD *)(*a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v5 = CPSqliteConnectionIntegerForProperty();
  if ((int)v5 < 1)
    return 0xFFFFFFFFLL;
  v6 = v5;
  v7 = CFUUIDCreate(0);
  v8 = CFUUIDCreateString(0, v7);
  CFRelease(v7);
  v9 = CFSTR("Birthdays");
  if (a2 == 1)
    v9 = CFSTR("Facebook Birthdays");
  v10 = 5;
  if (a2 == 1)
    v10 = 519;
  v11 = CFStringCreateWithFormat(0, 0, CFSTR("INSERT INTO Calendar (store_id, title, flags, supported_entity_types, UUID, color, self_identity_id, owner_identity_id) VALUES (%d, '%@', %d, %ld, '%@', '%@', -1, -1);"),
          v6,
          v9,
          v10,
          4,
          v8,
          CFSTR("#8295AF"));
  if (v11)
  {
    v12 = v11;
    CalPerformSQLWithConnection(a1, (uint64_t)v11);
    CFRelease(v12);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a1)
        {
          if (*(_QWORD *)(*a1 + 104))
          {
            v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13)
              os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
    }
    Insert = CPSqliteConnectionRowidOfLastInsert();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a1)
        {
          if (*(_QWORD *)(*a1 + 104))
          {
            v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15)
              os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
  }
  else
  {
    Insert = 0xFFFFFFFFLL;
  }
  CFRelease(v8);
  return Insert;
}

void CalDatabaseInsertSuggestionsCalendar(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  _QWORD v11[5];

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __CalDatabaseInsertSuggestionsCalendar_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = v9;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v11);
  if (v9)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  _CalDatabasePostDBChangeNotificationToInternalAndExternalClients((uint64_t)a1);
}

void _CalCalendarInsertSuggestionsCalendar(_QWORD *a1, char a2)
{
  const os_unfair_lock *Context;
  uint64_t v5;
  BOOL v6;
  const os_unfair_lock *v7;
  const __CFUUID *v8;
  CFStringRef v9;
  CFStringRef v10;
  CFStringRef v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(_QWORD *)(*a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v5 = CPSqliteConnectionIntegerForProperty();
  if ((a2 & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a1)
        {
          if (*(_QWORD *)(*a1 + 104))
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
    v6 = CPSqliteConnectionIntegerForPropertyWithDefaultValue() != -1;
  }
  if ((int)v5 >= 1 && !v6)
  {
    v8 = CFUUIDCreate(0);
    v9 = CFUUIDCreateString(0, v8);
    CFRelease(v8);
    v10 = CFStringCreateWithFormat(0, 0, CFSTR("INSERT INTO Calendar (store_id, title, flags, supported_entity_types, UUID, color, symbolic_color_name, self_identity_id, owner_identity_id) VALUES (%d, '%@', %d, %ld, '%@', '%@', '%@', -1, -1);"),
            v5,
            CFSTR("Found in Mail"),
            262149,
            4,
            v9,
            CFSTR("#8295AF"),
            *MEMORY[0x1E0DDBBD0]);
    if (v10)
    {
      v11 = v10;
      CalPerformSQLWithConnection(a1, (uint64_t)v10);
      CFRelease(v11);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*a1)
          {
            if (*(_QWORD *)(*a1 + 104))
            {
              v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v12)
                os_unfair_lock_assert_owner(v12 + 20);
            }
          }
        }
      }
      CPSqliteConnectionRowidOfLastInsert();
      if (a1 && CDBLockingAssertionsEnabled && *a1 && *(_QWORD *)(*a1 + 104))
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
      CPSqliteConnectionSetIntegerForProperty();
    }
    CFRelease(v9);
  }
}

void CalDatabaseRemoveSuggestionsCalendar(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  _QWORD v11[5];

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __CalDatabaseRemoveSuggestionsCalendar_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = v9;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v11);
  if (v9)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  CalDatabaseSave((uint64_t)a1);
  _CalDatabasePostDBChangeNotificationToInternalAndExternalClients((uint64_t)a1);
}

uint64_t _CalCalendarRemoveAllPossibleSuggestionsCalendars(_QWORD *a1)
{
  CFStringRef v2;
  CFStringRef v3;
  CFStringRef v4;
  CFStringRef v5;
  CFStringRef v6;
  CFStringRef v7;
  const os_unfair_lock *Context;

  v2 = CFStringCreateWithFormat(0, 0, CFSTR("DELETE FROM Notification WHERE calendar_id IN (SELECT ROWID FROM Calendar WHERE (flags & %d));"),
         0x40000);
  if (v2)
  {
    v3 = v2;
    CalPerformSQLWithConnection(a1, (uint64_t)v2);
    CFRelease(v3);
  }
  v4 = CFStringCreateWithFormat(0, 0, CFSTR("DELETE FROM NotificationChanges WHERE calendar_id IN (SELECT ROWID FROM Calendar WHERE (flags & %d));"),
         0x40000);
  if (v4)
  {
    v5 = v4;
    CalPerformSQLWithConnection(a1, (uint64_t)v4);
    CFRelease(v5);
  }
  v6 = CFStringCreateWithFormat(0, 0, CFSTR("DELETE FROM Calendar WHERE ROWID IN (SELECT ROWID FROM Calendar WHERE (flags & %d));"),
         0x40000);
  if (v6)
  {
    v7 = v6;
    CalPerformSQLWithConnection(a1, (uint64_t)v6);
    CFRelease(v7);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(_QWORD *)(*a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  return CPSqliteConnectionRemoveProperty();
}

void CalDatabaseInsertNaturalLanguageSuggestionsCalendar(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  _QWORD v11[5];

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __CalDatabaseInsertNaturalLanguageSuggestionsCalendar_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = v9;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v11);
  if (v9)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  _CalDatabasePostDBChangeNotificationToInternalAndExternalClients((uint64_t)a1);
}

void _CalCalendarInsertNaturalLanguageSuggestionsCalendar(_QWORD *a1)
{
  const os_unfair_lock *Context;
  uint64_t v3;
  const os_unfair_lock *v4;
  int v5;
  const __CFUUID *v6;
  CFStringRef v7;
  CFStringRef v8;
  CFStringRef v9;
  const os_unfair_lock *v10;
  const os_unfair_lock *v11;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(_QWORD *)(*a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v3 = CPSqliteConnectionIntegerForProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(_QWORD *)(*a1 + 104))
        {
          v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v4)
            os_unfair_lock_assert_owner(v4 + 20);
        }
      }
    }
  }
  v5 = CPSqliteConnectionIntegerForPropertyWithDefaultValue();
  if ((int)v3 >= 1 && v5 == -1)
  {
    v6 = CFUUIDCreate(0);
    v7 = CFUUIDCreateString(0, v6);
    CFRelease(v6);
    v8 = CFStringCreateWithFormat(0, 0, CFSTR("INSERT INTO Calendar (store_id, title, flags, supported_entity_types, UUID, color, symbolic_color_name, self_identity_id, owner_identity_id) VALUES (%d, '%@', %d, %ld, '%@', '%@', '%@', -1, -1);"),
           v3,
           CFSTR("Found in Natural Language"),
           524295,
           4,
           v7,
           CFSTR("#8295AF"),
           *MEMORY[0x1E0DDBBD0]);
    if (v8)
    {
      v9 = v8;
      CalPerformSQLWithConnection(a1, (uint64_t)v8);
      CFRelease(v9);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*a1)
          {
            if (*(_QWORD *)(*a1 + 104))
            {
              v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10)
                os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
      CPSqliteConnectionRowidOfLastInsert();
      if (a1 && CDBLockingAssertionsEnabled && *a1 && *(_QWORD *)(*a1 + 104))
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
      CPSqliteConnectionSetIntegerForProperty();
    }
    CFRelease(v7);
  }
}

void CalDatabaseRemoveNaturalLanguageSuggestionsCalendar(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  _QWORD v11[5];

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __CalDatabaseRemoveNaturalLanguageSuggestionsCalendar_block_invoke;
  v11[3] = &__block_descriptor_40_e5_v8__0l;
  v11[4] = v9;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v11);
  if (v9)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  _CalDatabasePostDBChangeNotificationToInternalAndExternalClients((uint64_t)a1);
}

const void *CalDatabaseCopyBirthdayCalendar(os_unfair_lock_s *a1, int a2)
{
  os_unfair_lock_s *v4;
  uint64_t RecordStore;
  BOOL v6;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v9;
  BOOL v10;
  const os_unfair_lock *v11;
  uint64_t v12;
  uint64_t v13;
  const os_unfair_lock *v14;
  int v15;
  const os_unfair_lock *v16;
  uint64_t v17;
  const void *CalendarWithUID;
  const void *v19;
  CFTypeRef Store;
  const os_unfair_lock *v21;
  int Property;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  uint64_t v27;
  NSObject *v28;
  const os_unfair_lock *v29;
  uint64_t v30;
  uint64_t v31;
  const os_unfair_lock *v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  const os_unfair_lock *v36;
  NSObject *v37;
  NSObject *v38;
  const os_unfair_lock *v39;
  int v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v6 = RecordStore == 0;
  else
    v6 = 1;
  if (!v6)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  v9 = Database;
  if (CDBLockingAssertionsEnabled)
    v10 = Database == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  v12 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v12)
  {
    v13 = v12;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v12)
      {
        if (*(_QWORD *)(*(_QWORD *)v12 + 104))
        {
          v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14)
            os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
    v15 = CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v13)
      {
        if (*(_QWORD *)(*(_QWORD *)v13 + 104))
        {
          v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16)
            os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
    v15 = -1;
  }
  v17 = _CalDatabaseGetRecordStore((uint64_t)a1);
  CalendarWithUID = (const void *)_CalGetCalendarWithUID(v17);
  v19 = CalendarWithUID;
  if (!CalendarWithUID)
    goto LABEL_76;
  CFRetain(CalendarWithUID);
  if (a2)
    goto LABEL_76;
  Store = _CalCalendarGetStore((uint64_t)v19);
  if (!Store)
  {
    v27 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      goto LABEL_44;
    LOWORD(v41) = 0;
    v24 = "Birthday calendar is invalid because it does not have a store";
LABEL_42:
    v25 = v27;
    v26 = 2;
    goto LABEL_43;
  }
  if (_CalStoreGetType((uint64_t)Store) != 5)
  {
    v27 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      goto LABEL_44;
    LOWORD(v41) = 0;
    v24 = "Birthday calendar is invalid because its store is not the native store";
    goto LABEL_42;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v21)
        os_unfair_lock_assert_owner(v21 + 20);
    }
  }
  Property = CPRecordGetProperty();
  if ((Property & 0xFFFEFFFF) != 5)
  {
    v23 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v41 = 67109120;
      v42 = Property;
      v24 = "Birthday calendar is invalid because its flags are set incorrectly (%i)";
      v25 = v23;
      v26 = 8;
LABEL_43:
      _os_log_impl(&dword_1A5CCB000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&v41, v26);
    }
LABEL_44:
    v28 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v41 = 67109120;
      v42 = v15;
      _os_log_impl(&dword_1A5CCB000, v28, OS_LOG_TYPE_ERROR, "Birthday calendar is not a birthday calendar. Deleting calendar with UID %i", (uint8_t *)&v41, 8u);
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (v9)
      {
        if (*(_QWORD *)(v9 + 104))
        {
          v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v29)
            os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
    v30 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (v30)
    {
      v31 = v30;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v30)
        {
          if (*(_QWORD *)(*(_QWORD *)v30 + 104))
          {
            v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v32)
              os_unfair_lock_assert_owner(v32 + 20);
          }
        }
      }
      v33 = CPSqliteConnectionStatementForSQL();
      if (v33)
      {
        v34 = (uint64_t **)v33;
        sqlite3_bind_int(*(sqlite3_stmt **)(v33 + 8), 1, v15);
        _CalDatabasePerformStatementWithWriteLock((uint64_t)a1, (uint64_t)v34);
        if (CDBLockingAssertionsEnabled)
        {
          if (*v34)
          {
            v35 = **v34;
            if (v35)
            {
              if (*(_QWORD *)(v35 + 104))
              {
                v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v36)
                  os_unfair_lock_assert_owner(v36 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      else
      {
        v38 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v41) = 0;
          _os_log_impl(&dword_1A5CCB000, v38, OS_LOG_TYPE_ERROR, "Failed to create statement", (uint8_t *)&v41, 2u);
        }
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v31)
        {
          if (*(_QWORD *)(*(_QWORD *)v31 + 104))
          {
            v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v39)
              os_unfair_lock_assert_owner(v39 + 20);
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
    }
    else
    {
      v37 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v41) = 0;
        _os_log_impl(&dword_1A5CCB000, v37, OS_LOG_TYPE_ERROR, "Failed to create write connection", (uint8_t *)&v41, 2u);
      }
    }
    _CalDatabaseNoteUntrackedChange((uint64_t)a1);
    CFRelease(v19);
    v19 = 0;
  }
LABEL_76:
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v19;
}

BOOL CalCalendarIsBirthdayCalendar()
{
  os_unfair_lock_s *DatabaseForRecord;
  os_unfair_lock_s *v1;
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v6;
  const os_unfair_lock *v7;
  uint64_t v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  int v11;
  const os_unfair_lock *v12;
  _BOOL8 v13;

  DatabaseForRecord = (os_unfair_lock_s *)CalGetDatabaseForRecord();
  v1 = DatabaseForRecord + 20;
  os_unfair_lock_lock(DatabaseForRecord + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)DatabaseForRecord);
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v6 = Database == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v8)
  {
    v9 = v8;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v8)
      {
        if (*(_QWORD *)(*(_QWORD *)v8 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    v11 = CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    v13 = CPRecordGetID() == v11;
  }
  else
  {
    v13 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v1);
  os_unfair_lock_unlock(v1);
  return v13;
}

uint64_t CalCalendarGetBirthdayCalendarVersion(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  uint64_t v10;
  const os_unfair_lock *v11;
  uint64_t v12;
  const os_unfair_lock *v13;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v9)
  {
    v10 = v9;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    v12 = CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v10)
      {
        if (*(_QWORD *)(*(_QWORD *)v10 + 104))
        {
          v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13)
            os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
    v12 = 0xFFFFFFFFLL;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v12;
}

void CalCalendarSetBirthdayCalendarVersion(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  uint64_t v10;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (v9)
  {
    v10 = v9;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    CPSqliteConnectionSetIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v10)
      {
        if (*(_QWORD *)(*(_QWORD *)v10 + 104))
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

BOOL CalCalendarIsFacebookBirthdayCalendar()
{
  os_unfair_lock_s *DatabaseForRecord;
  os_unfair_lock_s *v1;
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v6;
  const os_unfair_lock *v7;
  uint64_t v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  int v11;
  const os_unfair_lock *v12;
  _BOOL8 v13;

  DatabaseForRecord = (os_unfair_lock_s *)CalGetDatabaseForRecord();
  v1 = DatabaseForRecord + 20;
  os_unfair_lock_lock(DatabaseForRecord + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)DatabaseForRecord);
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v6 = Database == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v8)
  {
    v9 = v8;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v8)
      {
        if (*(_QWORD *)(*(_QWORD *)v8 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    v11 = CPSqliteConnectionIntegerForProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v9)
      {
        if (*(_QWORD *)(*(_QWORD *)v9 + 104))
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
    v13 = CPRecordGetID() == v11;
  }
  else
  {
    v13 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v1);
  os_unfair_lock_unlock(v1);
  return v13;
}

CFTypeRef CalDatabaseCopyStoreForBirthdayCalendar(os_unfair_lock_s *a1, int a2)
{
  CFTypeRef result;
  const void *v3;
  CFTypeRef v4;

  result = CalDatabaseCopyBirthdayCalendar(a1, a2);
  if (result)
  {
    v3 = result;
    v4 = CalCalendarCopyStore((uint64_t)result);
    CFRelease(v3);
    return v4;
  }
  return result;
}

void _CalCalendarInsertNewDefault(_QWORD *a1)
{
  const __CFUUID *v2;
  CFStringRef v3;
  CFStringRef v4;
  CFStringRef v5;

  v2 = CFUUIDCreate(0);
  v3 = CFUUIDCreateString(0, v2);
  CFRelease(v2);
  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("INSERT INTO Calendar (ROWID, store_id, title, flags, UUID, self_identity_id, owner_identity_id) VALUES (1, 1, 'Default', %u, '%@', -1, -1);"),
         2,
         v3);
  if (v4)
  {
    v5 = v4;
    CalPerformSQLWithConnection(a1, (uint64_t)v4);
    CFRelease(v5);
  }
  CFRelease(v3);
}

void CalCalendarInsertInitialLocalCalendar(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const __CFString *AssignableColor;
  void *CalendarForEntityType;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  AssignableColor = (const __CFString *)_CalCalendarCopyNextAssignableColor((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  if (AssignableColor)
  {
    CalendarForEntityType = (void *)CalDatabaseCreateCalendarForEntityType(a1, 2);
    v5 = CalDatabaseCopyLocalStore((uint64_t)a1);
    CalStoreAddCalendar((uint64_t)v5, CalendarForEntityType);
    CFRelease(v5);
    CalCalendarSetTitle((uint64_t)CalendarForEntityType);
    CalCalendarSetColorStringInternal((uint64_t)CalendarForEntityType, AssignableColor);
    CFRelease(AssignableColor);
  }
}

const void *_CalCalendarCopyNextAssignableColor(uint64_t a1)
{
  const __CFDictionary *Mutable;
  const __CFArray *v3;
  const __CFArray *MutableCopy;
  uint64_t RecordStore;
  BOOL v6;
  const os_unfair_lock *Context;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v14;
  BOOL v15;
  const os_unfair_lock *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex j;
  const void *v22;
  const void *v23;
  CFRange v25;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  v3 = (const __CFArray *)EKGetDefaultCalendarColors();
  MutableCopy = CFArrayCreateMutableCopy(0, 0, v3);
  if (a1)
  {
    RecordStore = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
      v6 = RecordStore == 0;
    else
      v6 = 1;
    if (!v6)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    v8 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClass();
    if (v8)
    {
      v9 = v8;
      Count = CFArrayGetCount(v8);
      if (Count >= 1)
      {
        v11 = Count;
        for (i = 0; i != v11; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
          _UpdateColorCountsWithCalendar((uint64_t)ValueAtIndex, Mutable);
        }
      }
      CFRelease(v9);
    }
    v14 = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
      v15 = v14 == 0;
    else
      v15 = 1;
    if (!v15)
    {
      v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v16)
        os_unfair_lock_assert_owner(v16 + 20);
    }
    v17 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
    if (v17)
    {
      v18 = v17;
      v19 = CFArrayGetCount(v17);
      if (v19 >= 1)
      {
        v20 = v19;
        for (j = 0; j != v20; ++j)
        {
          v22 = CFArrayGetValueAtIndex(v18, j);
          if (_CalEntityGetType(v22) == 1)
            _UpdateColorCountsWithCalendar((uint64_t)v22, Mutable);
        }
      }
      CFRelease(v18);
    }
  }
  v25.length = CFArrayGetCount(MutableCopy);
  v25.location = 0;
  CFArraySortValues(MutableCopy, v25, (CFComparatorFunction)_CompareColorFrequencies, Mutable);
  CFRelease(Mutable);
  if (!MutableCopy)
    return 0;
  if (CFArrayGetCount(MutableCopy) < 1)
  {
    v23 = 0;
  }
  else
  {
    v23 = CFArrayGetValueAtIndex(MutableCopy, 0);
    CFRetain(v23);
    CFArrayRemoveValueAtIndex(MutableCopy, 0);
    CFArrayAppendValue(MutableCopy, v23);
  }
  CFRelease(MutableCopy);
  return v23;
}

const void *CalDatabaseCreateCalendarForEntityType(os_unfair_lock_s *a1, int a2)
{
  os_unfair_lock_s *v4;
  const void *CalendarForEntityType;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CalendarForEntityType = _CalDatabaseCreateCalendarForEntityType((uint64_t)a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return CalendarForEntityType;
}

void CalCalendarSetTitle(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetColorStringForDisplay(uint64_t a1, const __CFString *a2)
{
  CalCalendarSetColorStringInternal(a1, a2);
}

uint64_t _CalDatabaseCreateCalendarInStoreImmediately(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t ID;
  const __CFUUID *v5;
  CFStringRef v6;
  CFStringRef v7;
  CFStringRef v8;
  const os_unfair_lock *Context;
  uint64_t Insert;

  ID = CPRecordGetID();
  v5 = CFUUIDCreate(0);
  v6 = CFUUIDCreateString(0, v5);
  CFRelease(v5);
  v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("INSERT INTO Calendar (store_id, title, UUID, self_identity_id, owner_identity_id) VALUES (%d, 'Default', '%@', -1, -1);"),
         ID,
         v6);
  if (v7)
  {
    v8 = v7;
    CalPerformSQLWithConnection(a3, (uint64_t)v7);
    if (a3)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a3)
        {
          if (*(_QWORD *)(*a3 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    Insert = CPSqliteConnectionRowidOfLastInsert();
    CFRelease(v8);
  }
  else
  {
    Insert = 0xFFFFFFFFLL;
  }
  CFRelease(v6);
  return Insert;
}

void CalCalendarInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalCalendarClass, (const char **)&kCalCalendarIndexes, (const char **)&kCalCalendarChangesIndexes);
  _CalCalendarInsertNewDefault(a2);
  if (*(_BYTE *)(CPRecordStoreGetContext() + 378))
  {
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DELETE FROM Calendar WHERE ROWID = 1"));
  }
  else
  {
    _CalCalendarInsertInitialLocalCalendar(a2, 4);
    _CalCalendarInsertInitialLocalCalendar(a2, 8);
    _CalCalendarInsertBirthdayCalendar(a2, 0);
    _CalCalendarInsertBirthdayCalendar(a2, 1);
    _CalCalendarInsertSuggestionsCalendar(a2, 0);
    _CalCalendarInsertNaturalLanguageSuggestionsCalendar(a2);
  }
  CalMigrationCreateTriggers(a2, (const char **)&kCalCalendarClass, (const char **)&kCalCalendarTriggers);
}

void _CalCalendarInsertInitialLocalCalendar(_QWORD *a1, uint64_t a2)
{
  const __CFUUID *v4;
  CFStringRef v5;
  const void *AssignableColor;
  const void *v7;
  const __CFString *v8;
  CFStringRef v9;

  v4 = CFUUIDCreate(0);
  v5 = CFUUIDCreateString(0, v4);
  CFRelease(v4);
  AssignableColor = _CalCalendarCopyNextAssignableColor(0);
  if (AssignableColor)
  {
    v7 = AssignableColor;
    v8 = CFSTR("DEFAULT_TASK_CALENDAR_NAME");
    if ((_DWORD)a2 == 4)
      v8 = CFSTR("DEFAULT_CALENDAR_NAME");
    v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("INSERT INTO Calendar (store_id, title, flags, supported_entity_types, UUID, color, color_is_display, self_identity_id, owner_identity_id) VALUES (1, '%@', 0, %d, '%@', '%@', 1, -1, -1);"),
           v8,
           a2,
           v5,
           AssignableColor);
    CFRelease(v7);
    if (v9)
    {
      CalPerformSQLWithConnection(a1, (uint64_t)v9);
      CFRelease(v9);
    }
  }
  CFRelease(v5);
}

void CalCalendarMigrateTables(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  _QWORD *v4;
  void *v5;
  const os_unfair_lock *Context;
  uint64_t v7;
  CFStringRef v8;
  CFStringRef v9;
  const os_unfair_lock *v10;
  uint64_t **v11;
  const os_unfair_lock *v12;
  uint64_t v13;
  CFMutableDictionaryRef Mutable;
  const __CFArray *v15;
  const __CFArray *MutableCopy;
  const os_unfair_lock *v17;
  uint64_t **v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  uint64_t v21;
  const os_unfair_lock *v22;
  const __CFArray *v23;
  CFIndex Count;
  const __CFArray *v25;
  const __CFArray *v26;
  const __CFArray *v27;
  CFIndex v28;
  CFIndex v29;
  CFIndex v30;
  const void *ValueAtIndex;
  const void *v32;
  const void *v33;
  const void *v34;
  CFStringRef v35;
  CFStringRef v36;
  CFStringRef v37;
  CFStringRef v38;
  void *v39;
  int v40;
  void *v41;
  _QWORD *v42;
  _QWORD v43[5];
  unsigned int v44;
  CFRange v45;

  v4 = a2;
  if (a3 - 14008 <= 0x7CC)
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("INSERT INTO Error (calendar_owner_id, error_code, user_info) SELECT ROWID, last_sync_error, last_sync_error_data FROM Calendar WHERE last_sync_error != 0"));
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 3221225472;
  v43[2] = __CalCalendarMigrateTables_block_invoke;
  v43[3] = &__block_descriptor_44_e42__v24__0____CFString__8____CFDictionary__16l;
  v44 = a3;
  v43[4] = v4;
  v5 = (void *)MEMORY[0x1A85B52F0](v43);
  if ((int)a3 < 9013)
  {
    _CalCalendarRemoveAllPossibleSuggestionsCalendars(v4);
    CalMigrateTableFull2(v4, (const char **)&kCalCalendarClass, 0, (const char **)&kCalCalendarUpgradeInfo, v5, (const char **)&kCalCalendarChangesUpgradeInfo, &__block_literal_global_10, 0, (const char **)&kCalCalendarIndexes, (const char **)&kCalCalendarChangesIndexes, (const char **)&kCalCalendarTriggers, a3);
    v41 = v5;
    v42 = v4;
    v40 = a3;
    if ((int)a3 > 31)
    {
      if (a3 > 0x3D)
      {
        if (a3 > 0x41)
          goto LABEL_61;
        goto LABEL_55;
      }
    }
    else
    {
      _CalCalendarInsertBirthdayCalendar(v4, 0);
    }
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*v4)
        {
          if (*(_QWORD *)(*v4 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    v7 = CPSqliteConnectionIntegerForProperty();
    if ((int)v7 >= 1)
    {
      v8 = CFStringCreateWithFormat(0, 0, CFSTR("UPDATE Calendar SET supported_entity_types = %ld, color = '%@' WHERE ROWID = %d;"),
             4,
             CFSTR("#8295AF"),
             v7);
      if (v8)
      {
        v9 = v8;
        CalPerformSQLWithConnection(v4, (uint64_t)v8);
        CFRelease(v9);
      }
    }
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*v4)
        {
          if (*(_QWORD *)(*v4 + 104))
          {
            v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10)
              os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    v11 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (v4)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*v4)
        {
          if (*(_QWORD *)(*v4 + 104))
          {
            v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12)
              os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    v13 = CPSqliteConnectionStatementForSQL();
    if (v11 && v13)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
      v15 = (const __CFArray *)EKGetDefaultCalendarColors();
      MutableCopy = CFArrayCreateMutableCopy(0, 0, v15);
      if (v4)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v4)
          {
            if (*(_QWORD *)(*v4 + 104))
            {
              v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v17)
                os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
      }
      v18 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (CDBLockingAssertionsEnabled)
      {
        if (v18)
        {
          if (*v18)
          {
            v19 = **v18;
            if (v19)
            {
              if (*(_QWORD *)(v19 + 104))
              {
                v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v20)
                  os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      v45.length = CFArrayGetCount(MutableCopy);
      v45.location = 0;
      CFArraySortValues(MutableCopy, v45, (CFComparatorFunction)_CompareColorFrequencies, Mutable);
      CFRelease(Mutable);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v11)
        {
          v21 = **v11;
          if (v21)
          {
            if (*(_QWORD *)(v21 + 104))
            {
              v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v22)
                os_unfair_lock_assert_owner(v22 + 20);
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      CFRelease(MutableCopy);
    }
LABEL_55:
    v23 = (const __CFArray *)EKGetBrightonCalendarColors();
    Count = CFArrayGetCount(v23);
    v25 = (const __CFArray *)EKGetWildcatDefaultCalendarColors();
    v26 = (const __CFArray *)EKGetApexDefaultCalendarColors();
    v27 = (const __CFArray *)EKGetSnowLeopardDefaultCalendarColors();
    v28 = CFArrayGetCount(v25);
    if (Count < v28)
      goto LABEL_62;
    v29 = v28;
    if (v28 < 1)
      goto LABEL_62;
    v30 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v23, v30);
      v32 = CFArrayGetValueAtIndex(v25, v30);
      v33 = CFArrayGetValueAtIndex(v26, v30);
      v34 = CFArrayGetValueAtIndex(v27, v30);
      v35 = CFStringCreateWithFormat(0, 0, CFSTR("UPDATE Calendar SET color = '%@' WHERE color in ('%@', '%@', '%@');"),
              ValueAtIndex,
              v32,
              v33,
              v34);
      if (v35)
      {
        v36 = v35;
        CalPerformSQLWithConnection(v42, (uint64_t)v35);
        CFRelease(v36);
      }
      ++v30;
    }
    while (v29 != v30);
LABEL_61:
    if (v40 > 67)
    {
      v5 = v41;
      v4 = v42;
      if (v40 > 0x57)
      {
        if (v40 > 0x59)
        {
LABEL_67:
          if (_CalDatabaseIsSuggestionsEnabled())
            _CalCalendarInsertSuggestionsCalendar(v4, 0);
          goto LABEL_69;
        }
LABEL_66:
        CalPerformSQLWithConnection(v4, (uint64_t)CFSTR("UPDATE Calendar SET invitation_status = 3 WHERE invitation_status = 2"));
        CalPerformSQLWithConnection(v4, (uint64_t)CFSTR("UPDATE Calendar SET invitation_status = 2 WHERE invitation_status = 1"));
        goto LABEL_67;
      }
LABEL_65:
      _CalCalendarInsertBirthdayCalendar(v4, 1);
      goto LABEL_66;
    }
LABEL_62:
    v37 = CFStringCreateWithFormat(0, 0, CFSTR("UPDATE Calendar SET supported_entity_types = %ld WHERE (supported_entity_types = 0 OR supported_entity_types IS NULL);"),
            4);
    v5 = v41;
    v4 = v42;
    if (v37)
    {
      v38 = v37;
      CalPerformSQLWithConnection(v42, (uint64_t)v37);
      CFRelease(v38);
    }
    goto LABEL_65;
  }
  if (a3 <= 0x4653)
  {
    CalMigrateTableFull2(v4, (const char **)&kCalCalendarClass, 0, (const char **)&kCalCalendarUpgradeInfo, v5, (const char **)&kCalCalendarChangesUpgradeInfo, &__block_literal_global_10, 0, (const char **)&kCalCalendarIndexes, (const char **)&kCalCalendarChangesIndexes, (const char **)&kCalCalendarTriggers, a3);
    if (a3 >> 8 >= 0x2B)
    {
      if (a3 > 0x3EE4)
        goto LABEL_72;
      goto LABEL_71;
    }
LABEL_69:
    if (_CalDatabaseIsSuggestionsEnabled())
      _CalCalendarInsertNaturalLanguageSuggestionsCalendar(v4);
LABEL_71:
    sqlite3_create_function((sqlite3 *)v4[1], "CalMigrateSubcalExternalID", 1, 526337, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalCalendarMigrateSubscribedCalendarExternalID, 0, 0);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE Calendar SET external_id = CalMigrateSubcalExternalID(external_id) WHERE (Calendar.flags & %i) != 0 AND EXISTS (SELECT Store.ROWID FROM Store WHERE Store.ROWID = store_id AND Store.type == %i)"), 8, 2);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    CalPerformSQLWithConnection(v4, (uint64_t)v39);
    sqlite3_create_function((sqlite3 *)v4[1], "CalMigrateSubcalExternalID", 1, 526337, 0, 0, 0, 0);

  }
LABEL_72:

}

uint64_t _CalCalendarAssignColorDuringMigration(uint64_t a1, CFArrayRef *a2)
{
  int v4;
  const __CFString *ValueAtIndex;
  sqlite3_stmt *v6;
  const char *CStringFromCFString;
  _QWORD **v8;
  BOOL v9;
  uint64_t v10;
  const os_unfair_lock *Context;
  _QWORD **v12;
  uint64_t v13;
  const os_unfair_lock *v14;

  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  if ((sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1) & 2) == 0)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2[1], 0);
    CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(a2[1], 0);
    CFArrayAppendValue(a2[1], ValueAtIndex);
    CFRelease(ValueAtIndex);
    v6 = (sqlite3_stmt *)*((_QWORD *)*a2 + 1);
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(ValueAtIndex);
    sqlite3_bind_text(v6, 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    sqlite3_bind_int(*((sqlite3_stmt **)*a2 + 1), 2, v4);
    v8 = (_QWORD **)*a2;
    if (CDBLockingAssertionsEnabled)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
    {
      if (*v8)
      {
        v10 = **v8;
        if (v10)
        {
          if (*(_QWORD *)(v10 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPSqliteStatementPerform();
    v12 = (_QWORD **)*a2;
    if (CDBLockingAssertionsEnabled)
    {
      if (v12)
      {
        if (*v12)
        {
          v13 = **v12;
          if (v13)
          {
            if (*(_QWORD *)(v13 + 104))
            {
              v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v14)
                os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  return 0;
}

uint64_t _CalDatabaseIsSuggestionsEnabled()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  __CFNotificationCenter *DarwinNotifyCenter;
  void *v6;
  uint64_t v7;

  v0 = *MEMORY[0x1E0D0C508];
  v1 = (void *)CFPreferencesCopyAppValue(CFSTR("SiriCanLearnFromAppBlacklist"), CFSTR("com.apple.suggestions"));
  v2 = v1;
  if (v1)
    v3 = (void *)objc_msgSend(v1, "mutableCopy");
  else
    v3 = (void *)objc_opt_new();
  v4 = v3;
  if ((objc_msgSend(v3, "containsObject:", v0) & 1) == 0)
    objc_msgSend(v4, "addObject:", v0);
  CFPreferencesSetAppValue(CFSTR("SiriCanLearnFromAppBlacklist"), v4, CFSTR("com.apple.suggestions"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.suggestions.settingsChanged"), 0, 0, 1u);

  v6 = (void *)CFPreferencesCopyAppValue(CFSTR("AppCanShowSiriSuggestionsBlacklist"), CFSTR("com.apple.suggestions"));
  v7 = objc_msgSend(v6, "containsObject:", v0) ^ 1;

  return v7;
}

BOOL _CalCalendarHasValidParent(uint64_t a1)
{
  unsigned int StoreId;
  unsigned int v2;
  uint64_t Store;

  StoreId = _CalCalendarGetStoreId(a1);
  if ((StoreId & 0x80000000) != 0)
    return 0;
  v2 = StoreId;
  Store = CPRecordGetStore();
  return _CalRecordOfClassStillExists((uint64_t)&kCalStoreClass, Store, v2);
}

uint64_t _CalCalendarGetStoreId(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

BOOL _CalCalendarHasDirtyInstanceAttributes(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL _CalCalendarHasDirtySyncAttributes(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

uint64_t _CalCalendarClearDirtyAttributes(uint64_t a1)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordUnloadProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3)
          os_unfair_lock_assert_owner(v3 + 20);
      }
    }
  }
  return CPRecordUnloadProperty();
}

void _CalCalendarCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Calendar WHERE store_id NOT IN (SELECT ROWID FROM Store);"),
    0);
}

uint64_t _CalCalendarSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

CFTypeRef _CalCalendarCopyRelatedEntitiesDeletedByTriggers(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const __CFArray *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFTypeRef Error;
  CFTypeRef v16;

  v16 = 0;
  v6 = _CalCalendarCopySharees(a2);
  if (v6)
  {
    v7 = v6;
    CalDatabaseAddChangesToArray((CFMutableArrayRef *)&v16, v6, a3);
    CFRelease(v7);
  }
  v8 = _CalCalendarCopyNotifications(a2);
  if (v8)
  {
    v9 = v8;
    CalDatabaseAddChangesToArray((CFMutableArrayRef *)&v16, v8, a3);
    CFRelease(v9);
  }
  v10 = _CalCalendarCopyResourceChanges(a2);
  if (v10)
  {
    v11 = v10;
    CalDatabaseAddChangesToArray((CFMutableArrayRef *)&v16, v10, a3);
    CFRelease(v11);
  }
  v12 = (const __CFArray *)_CalDatabaseCopyCalendarItemsWithCalendar(a1);
  if (v12)
  {
    v13 = v12;
    CalDatabaseAddChangesToArray((CFMutableArrayRef *)&v16, v12, a3);
    CFRelease(v13);
  }
  Error = _CalCalendarGetError(a2);
  if (Error)
    CalDatabaseAddChangeToArray(&v16, Error, a3);
  return v16;
}

CFMutableArrayRef _CalCalendarCopySharees(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

CFMutableArrayRef _CalCalendarCopyNotifications(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

CFMutableArrayRef _CalCalendarCopyResourceChanges(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

CFTypeRef _CalCalendarGetError(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

const void *_CalDatabaseCreateCalendarForEntityType(uint64_t a1, int a2)
{
  uint64_t v4;
  const void *v5;
  BOOL v6;
  const os_unfair_lock *Context;
  BOOL v8;
  const os_unfair_lock *v9;
  BOOL v10;
  const os_unfair_lock *v11;
  BOOL v12;
  const os_unfair_lock *v13;
  const void *TemporaryRecordIDForEntity;
  const os_unfair_lock *v15;
  CFStringRef v16;
  const os_unfair_lock *v17;
  const os_unfair_lock *v18;

  v4 = CPRecordCreate();
  v5 = (const void *)v4;
  if (CDBLockingAssertionsEnabled)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v5 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v10 = v5 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v12 = v5 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    if (CPRecordGetStore())
    {
      v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v13)
        os_unfair_lock_assert_owner(v13 + 20);
    }
  }
  CPRecordInitializeProperty();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 1);
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  v16 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v16);
  _CalDatabaseAddEntity(a1, v5);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (v5)
      {
        if (CPRecordGetStore())
        {
          v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18)
            os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
    CPRecordSetProperty();
  }
  return v5;
}

const void *CalDatabaseCreateCalendar(os_unfair_lock_s *a1)
{
  return CalDatabaseCreateCalendarForEntityType(a1, 0);
}

const void *CalDatabaseCopyCalendar(os_unfair_lock *a1, uint64_t a2)
{
  os_unfair_lock *DatabaseForRecord;
  const void *v5;

  DatabaseForRecord = (os_unfair_lock *)CalGetDatabaseForRecord();
  CalDatabaseMultiLock(DatabaseForRecord, a1);
  v5 = _CalDatabaseCopyCalendar((uint64_t)a1, a2);
  CalDatabaseMultiUnlock(DatabaseForRecord, a1);
  return v5;
}

const void *_CalDatabaseCopyCalendar(uint64_t a1, uint64_t a2)
{
  const void *CalendarForEntityType;
  const void *v4;
  BOOL v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  BOOL v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;
  const os_unfair_lock *v18;
  const os_unfair_lock *v19;
  const os_unfair_lock *v20;
  const os_unfair_lock *v21;
  const os_unfair_lock *v22;
  const os_unfair_lock *v23;
  const os_unfair_lock *v24;
  const os_unfair_lock *v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;
  const os_unfair_lock *v28;
  const os_unfair_lock *v29;
  const os_unfair_lock *v30;
  const os_unfair_lock *v31;
  const os_unfair_lock *v32;
  const os_unfair_lock *v33;
  const os_unfair_lock *v34;
  const os_unfair_lock *v35;
  const os_unfair_lock *v36;
  const os_unfair_lock *v37;
  const os_unfair_lock *v38;
  const os_unfair_lock *v39;

  CalendarForEntityType = _CalDatabaseCreateCalendarForEntityType(a1, 0);
  v4 = CalendarForEntityType;
  if (CDBLockingAssertionsEnabled)
    v5 = CalendarForEntityType == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v11 = v4 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18)
          os_unfair_lock_assert_owner(v18 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20)
          os_unfair_lock_assert_owner(v20 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21)
          os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23)
          os_unfair_lock_assert_owner(v23 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24)
          os_unfair_lock_assert_owner(v24 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25)
          os_unfair_lock_assert_owner(v25 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26)
          os_unfair_lock_assert_owner(v26 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27)
          os_unfair_lock_assert_owner(v27 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v28)
          os_unfair_lock_assert_owner(v28 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29)
          os_unfair_lock_assert_owner(v29 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v30)
          os_unfair_lock_assert_owner(v30 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31)
          os_unfair_lock_assert_owner(v31 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v32)
          os_unfair_lock_assert_owner(v32 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33)
          os_unfair_lock_assert_owner(v33 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v34)
          os_unfair_lock_assert_owner(v34 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35)
          os_unfair_lock_assert_owner(v35 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v36)
          os_unfair_lock_assert_owner(v36 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v37)
          os_unfair_lock_assert_owner(v37 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v38)
          os_unfair_lock_assert_owner(v38 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v39)
          os_unfair_lock_assert_owner(v39 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v4;
}

uint64_t _CalCalendarGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalInvalidateCalendarsForStoreId(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClass();
}

BOOL _CalCalendarInvalidateWithStoreId(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;
  int Property;
  uint64_t Store;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property == a2 && (CPRecordGetID() & 0x80000000) == 0)
  {
    Store = CPRecordGetStore();
    _CalInvalidateCalendarItemsForCalendarId(Store);
    _CalInvalidateShareesWithOwnerID(Store);
    _CalInvalidateNotificationsWithCalendarID(Store);
  }
  return Property == a2;
}

BOOL _CalCalendarGetCalendarSupportsExactlyOneEntityTypeInStore(uint64_t a1)
{
  return _CalCalendarGetBoolConstraintValueForStore(a1, CFSTR("SupportsExactlyOneEntityType"));
}

BOOL _CalCalendarGetBoolConstraintValueForStore(uint64_t a1, const void *a2)
{
  const void *v3;
  CFTypeID TypeID;
  CFTypeID v5;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  const void *v8;
  const void *v9;
  CFTypeID v10;
  _BOOL8 v11;

  v3 = (const void *)_CalParticipantCopyPhoneNumber(a1);
  TypeID = CFDictionaryGetTypeID();
  if (!v3)
    return 0;
  v5 = TypeID;
  if (CFGetTypeID(v3) == TypeID
    && (Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v3, CFSTR("CalCalendar"))) != 0
    && (v7 = Value, CFGetTypeID(Value) == v5)
    && (v8 = CFDictionaryGetValue(v7, a2)) != 0)
  {
    v9 = v8;
    CFRetain(v8);
    CFRelease(v3);
    v10 = CFGetTypeID(v9);
    v11 = v10 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)v9) != 0;
    v3 = v9;
  }
  else
  {
    v11 = 0;
  }
  CFRelease(v3);
  return v11;
}

BOOL CalCalendarGetCalendarSupportsExactlyOneEntityTypeInStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValueForStore;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValueForStore = _CalCalendarGetBoolConstraintValueForStore(a1, CFSTR("SupportsExactlyOneEntityType"));
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValueForStore;
}

__CFArray *CalDatabaseCopyOfAllCalendarsInStore(const void *a1, uint64_t a2)
{
  return CalDatabaseCopyOfAllCalendarsInStoreWithOptions(a1, a2, 0);
}

BOOL _CalCalendarIsReadOnly(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 1);
}

BOOL _CalCalendarIsSharingInvitation(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 128);
}

uint64_t _CalCalendarGetSharingInvitationResponse(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

const void *CalDatabaseCopyCalendarWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  const void *InstanceOfClassWithUID;
  const void *v7;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  InstanceOfClassWithUID = (const void *)CPRecordStoreGetInstanceOfClassWithUID();
  v7 = InstanceOfClassWithUID;
  if (InstanceOfClassWithUID)
    CFRetain(InstanceOfClassWithUID);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v7;
}

uint64_t _CalCalendarCopyUUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalCalendarSetUUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalCalendarSetUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarSetUUID(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

__CFArray *_CalDatabaseCopyCalendarsWithUIDs(os_unfair_lock_s *a1, const __CFArray *a2)
{
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  const void *v9;
  const void *v10;
  int valuePtr;

  Mutable = CFArrayCreateMutable(0, 0, 0);
  Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    v6 = Count;
    for (i = 0; i != v6; ++i)
    {
      valuePtr = 0;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a2, i);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      v9 = CalDatabaseCopyCalendarWithUID(a1);
      if (v9)
      {
        v10 = v9;
        CFArrayAppendValue(Mutable, v9);
        CFRelease(v10);
      }
    }
  }
  return Mutable;
}

CFURLRef CalCalendarCopyURI(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;
  const __CFString *v5;
  CFURLRef v6;

  v1 = (void *)CalCalendarCopyUUID(a1);
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("/?&:$+,;=@"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "stringByAddingPercentEncodingWithAllowedCharacters:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = CFStringCreateWithFormat(0, 0, CFSTR("x-apple-calendar://%@"), v3);
    if (v4)
    {
      v5 = v4;
      v6 = CFURLCreateWithString(0, v4, 0);
      CFRelease(v5);
    }
    else
    {
      v6 = 0;
    }

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

const void *CalDatabaseCopyDefaultLocalCalendar(uint64_t a1)
{
  const void *InstanceOfClassWithUID;
  os_unfair_lock_s *v3;
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v8;
  uint64_t Database;
  const os_unfair_lock *v10;
  uint64_t v11;
  uint64_t v12;
  const os_unfair_lock *v13;
  _QWORD v14[5];

  if (*(_BYTE *)(a1 + 378))
    return 0;
  v3 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  InstanceOfClassWithUID = (const void *)CPRecordStoreGetInstanceOfClassWithUID();
  if (!InstanceOfClassWithUID)
  {
    InstanceOfClassWithUID = (const void *)_CalDatabaseGetRecordStore(a1);
    if (!InstanceOfClassWithUID)
      goto LABEL_11;
    if (CDBLockingAssertionsEnabled)
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
    Database = CPRecordStoreGetDatabase();
    InstanceOfClassWithUID = (const void *)Database;
    if (!Database)
      goto LABEL_11;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
    v11 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (!v11)
    {
      InstanceOfClassWithUID = 0;
      goto LABEL_11;
    }
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __CalDatabaseCopyDefaultLocalCalendar_block_invoke;
    v14[3] = &__block_descriptor_40_e5_v8__0l;
    v14[4] = v11;
    _CalDatabaseLockForWriteTransaction(a1, (uint64_t)v14);
    v12 = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
    {
      if (v12)
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
    InstanceOfClassWithUID = (const void *)CPRecordStoreGetInstanceOfClassWithUID();
    if (!InstanceOfClassWithUID)
      goto LABEL_11;
  }
  CFRetain(InstanceOfClassWithUID);
LABEL_11:
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3);
  os_unfair_lock_unlock(v3);
  return InstanceOfClassWithUID;
}

const void *CalDatabaseCopyNextAssignableColor(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *AssignableColor;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  AssignableColor = _CalCalendarCopyNextAssignableColor((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return AssignableColor;
}

void *CalDatabaseCopyFirstReadWriteCalendarThatSupportsEntityType(void *a1, int a2, uint64_t a3)
{
  __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  CFIndex v13;
  const void *v14;
  int v15;
  const void *ValueAtIndex;
  CFTypeRef v17;
  const void *v18;
  int v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  id *v25;
  uint64_t v26;
  void *v27;

  v6 = CalDatabaseCopyOfAllCalendarsInStoreWithOptions(a1, a3, 11);
  if (!v6)
    return 0;
  v7 = v6;
  Count = CFArrayGetCount(v6);
  CalDatabaseGetPreferences((uint64_t)a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "get_defaultCalendarDatabaseID");
  if (v10 == (int)CalDatabaseGetAuxilliaryDatabaseID((uint64_t)a1))
    v11 = objc_msgSend(v9, "get_defaultCalendarStoreUID");
  else
    v11 = -1;
  if (Count < 1)
    goto LABEL_17;
  v25 = (id *)a1;
  v26 = a3;
  v27 = v9;
  v13 = 0;
  v14 = 0;
  v15 = -1;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v7, v13);
    if (CalCalendarCanContainEntityTypeAndStoreAllowsIt((uint64_t)ValueAtIndex, a2))
    {
      v17 = CalCalendarCopyStore((uint64_t)ValueAtIndex);
      if (v17)
      {
        v18 = v17;
        v19 = 2 * (CalStoreGetUID() == v11);
        CFRelease(v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = v19 | (CalCalendarGetSharingStatus((uint64_t)ValueAtIndex) == 0);
      if (v20 > v15)
      {
        v15 = v20;
        v14 = ValueAtIndex;
      }
    }
    ++v13;
  }
  while (Count != v13);
  v9 = v27;
  if (v14)
  {
    v12 = (void *)CFRetain(v14);
    v21 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v25[37], "get_defaultCalendarID");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "stringWithFormat:", CFSTR("Old default (%@) not valid"), v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    CalDatabaseSetDefaultCalendarForEntityType(v25, v12, a2, 1, v26, v23);

  }
  else
  {
LABEL_17:
    v12 = 0;
  }
  CFRelease(v7);

  return v12;
}

void CalDatabaseCreateWritableCalendarForEntityTypeInStoreIfNeeded(os_unfair_lock_s *a1, int a2, uint64_t a3)
{
  __CFArray *v6;
  __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  int v11;
  const void *ValueAtIndex;
  NSObject *v13;
  const char *v14;
  void *CalendarForEntityType;
  int v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = CalDatabaseCopyOfAllCalendarsInStoreWithOptions(a1, a3, 1);
  if (!v6)
    goto LABEL_10;
  v7 = v6;
  Count = CFArrayGetCount(v6);
  if (Count < 1)
  {
    CFRelease(v7);
LABEL_10:
    v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
    {
      v14 = "reminders";
      if (a2 == 2)
        v14 = "events";
      v16 = 136315394;
      v17 = "void CalDatabaseCreateWritableCalendarForEntityTypeInStoreIfNeeded(CalDatabaseRef, CalEntityType, CalStoreRef)";
      v18 = 2080;
      v19 = v14;
      _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_INFO, "%s: Failed to find a non-hidden calendar for %s. Making one", (uint8_t *)&v16, 0x16u);
    }
    CalendarForEntityType = (void *)CalDatabaseCreateCalendarForEntityType(a1, a2);
    CalCalendarSetTitle((uint64_t)CalendarForEntityType);
    CalStoreAddCalendar(a3, CalendarForEntityType);
    CFRelease(CalendarForEntityType);
    return;
  }
  v9 = Count;
  v10 = 0;
  v11 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v7, v10);
    if (!CalCalendarGetFlag((uint64_t)ValueAtIndex, 2))
      v11 += CalCalendarCanContainEntityType((uint64_t)ValueAtIndex, a2);
    ++v10;
  }
  while (v9 != v10);
  CFRelease(v7);
  if (!v11)
    goto LABEL_10;
}

BOOL CalCalendarIsHidden(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 2);
}

uint64_t _CalDatabaseCreateLimitedAccessVirtualCalendar(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  const os_unfair_lock *Context;
  BOOL v6;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  BOOL v10;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;
  const os_unfair_lock *v18;
  const os_unfair_lock *v19;
  const void *LimitedAccessVirtualRecordIDForEntity;
  const os_unfair_lock *v21;
  const os_unfair_lock *v22;
  uint64_t Property;
  const void *LimitedAccessVirtualStore;

  v2 = CPRecordCreateWithRecordID();
  v3 = v2;
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v3 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v10 = v3 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18)
          os_unfair_lock_assert_owner(v18 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  LimitedAccessVirtualRecordIDForEntity = (const void *)_CalDatbaseCreateLimitedAccessVirtualRecordIDForEntity(1);
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21)
          os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(LimitedAccessVirtualRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
  {
    if (v3)
    {
      if (CPRecordGetStore())
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  LimitedAccessVirtualStore = (const void *)_CalDatabaseGetLimitedAccessVirtualStore(a1);
  CalRelationSetAndLoadRawRelatedObject(Property, LimitedAccessVirtualStore);
  return v3;
}

uint64_t _CalDatabaseGetLimitedAccessVirtualCalendar(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (!result)
  {
    result = _CalDatabaseCreateLimitedAccessVirtualCalendar(a1);
    *(_QWORD *)(a1 + 48) = result;
  }
  return result;
}

const void *CalDatabaseCopyLimitedAccessVirtualCalendar(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const void *LimitedAccessVirtualCalendar;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  LimitedAccessVirtualCalendar = *(const void **)(a1 + 48);
  if (LimitedAccessVirtualCalendar
    || (LimitedAccessVirtualCalendar = (const void *)_CalDatabaseCreateLimitedAccessVirtualCalendar(a1),
        (*(_QWORD *)(a1 + 48) = LimitedAccessVirtualCalendar) != 0))
  {
    CFRetain(LimitedAccessVirtualCalendar);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return LimitedAccessVirtualCalendar;
}

BOOL CalCalendarIsReadOnly(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 1);
}

CFTypeRef CalDatabaseCopyDefaultCalendarForNewEvents(uint64_t a1)
{
  return CalDatabaseCopyDefaultCalendarForNewEventsInStore(a1, 0);
}

void CalDatabaseSetDefaultCalendarForNewEventsInStore(const void *a1, void *a2, int a3, uint64_t a4, void *a5)
{
  CalDatabaseSetDefaultCalendarForEntityType(a1, a2, 2, a3, a4, a5);
}

void CalDatabaseSetDefaultCalendarForEntityType(const void *a1, void *a2, int a3, int a4, uint64_t a5, void *a6)
{
  void *v6;
  void *v7;
  id v13;
  CFTypeRef v14;
  const void *v15;
  int Type;
  NSObject *v17;
  CFTypeRef v18;
  uint64_t v19;
  CFTypeRef v20;
  const os_unfair_lock *Context;
  void *v22;
  const os_unfair_lock *v23;
  int StoreId;
  uint64_t RecordStore;
  const os_unfair_lock *v26;
  uint64_t Database;
  const os_unfair_lock *v28;
  uint64_t v29;
  uint64_t v30;
  const os_unfair_lock *v31;
  int v32;
  int v33;
  _BOOL4 v34;
  NSObject *v35;
  double v36;
  NSObject *v37;
  __CFNotificationCenter *DarwinNotifyCenter;
  int ID;
  int v40;
  _QWORD v41[4];
  id v42;
  void *v43;
  uint64_t v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  id v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v13 = a6;
  if (!a2)
  {
    v18 = CFRetain(a1);
    goto LABEL_8;
  }
  v14 = CalCalendarCopyStore((uint64_t)a2);
  if (!v14 || (v15 = v14, Type = CalStoreGetType((uint64_t)v14), CFRelease(v15), Type != 6))
  {
    v18 = CalCopyDatabaseForRecord();
LABEL_8:
    v19 = (uint64_t)v18;
    if (a4)
    {
      v20 = CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore((uint64_t)v18, a3, a5, 0);
      if (v20)
      {
        CFRelease(v20);
LABEL_68:
        CFRelease((CFTypeRef)v19);
        goto LABEL_69;
      }
    }
    if (a5)
    {
      CalStoreSetDelegatedAccountDefaultCalendarForNewEvents(a5, a2);
      CalDatabaseSave(v19);
LABEL_67:
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, (CFNotificationName)kCalDefaultCalendarChangedNotification, 0, 0, 1u);
      goto LABEL_68;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v19 + 80));
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    v22 = (void *)CPRecordCopyProperty();
    if (!v22)
    {
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v23)
              os_unfair_lock_assert_owner(v23 + 20);
          }
        }
      }
      v22 = (void *)CPRecordCopyProperty();
    }
    if (a3 != 2)
    {
      RecordStore = _CalDatabaseGetRecordStore(v19);
      if (CDBLockingAssertionsEnabled)
      {
        if (RecordStore)
        {
          v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v26)
            os_unfair_lock_assert_owner(v26 + 20);
        }
      }
      Database = CPRecordStoreGetDatabase();
      if (CDBLockingAssertionsEnabled)
      {
        if (Database)
        {
          if (*(_QWORD *)(Database + 104))
          {
            v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v28)
              os_unfair_lock_assert_owner(v28 + 20);
          }
        }
      }
      v29 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (!v29)
      {
        v32 = 1;
        goto LABEL_64;
      }
      v30 = v29;
      v41[0] = MEMORY[0x1E0C809B0];
      v41[1] = 3221225472;
      v41[2] = __CalDatabaseSetDefaultCalendarForEntityType_block_invoke;
      v41[3] = &unk_1E4F87DB8;
      v43 = a2;
      v44 = v29;
      v45 = CFSTR("DefaultTaskCalendarID");
      v42 = v22;
      v46 = CFSTR("DefaultTaskCalendarStoreUID");
      v47 = CFSTR("DefaultTaskCalendarName");
      _CalDatabaseLockForWriteTransaction(v19, (uint64_t)v41);
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v30)
        {
          if (*(_QWORD *)(*(_QWORD *)v30 + 104))
          {
            v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v31)
              os_unfair_lock_assert_owner(v31 + 20);
          }
        }
      }
      CPSqliteDatabaseReleaseSqliteConnection();
      v32 = 1;
      a2 = v42;
LABEL_63:

LABEL_64:
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner((const os_unfair_lock *)(v19 + 80));
      os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 80));

      if (!v32)
        goto LABEL_68;
      goto LABEL_67;
    }
    if (a2)
    {
      ID = CPRecordGetID();
      StoreId = _CalCalendarGetStoreId((uint64_t)a2);
      _CalCalendarGetTitle((uint64_t)a2);
      a2 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = *(_DWORD *)(v19 + 172);
      if (v22)
        goto LABEL_47;
    }
    else
    {
      ID = 0;
      StoreId = 0;
      v40 = 0;
      if (v22)
        goto LABEL_47;
    }
    objc_msgSend(*(id *)(v19 + 296), "get_defaultCalendarID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      v33 = 0;
LABEL_51:
      if (objc_msgSend(*(id *)(v19 + 296), "get_defaultCalendarStoreUID") == StoreId)
      {
        v34 = objc_msgSend(*(id *)(v19 + 296), "get_defaultCalendarDatabaseID") != v40;
        if ((v33 & 1) == 0)
          goto LABEL_54;
      }
      else
      {
        v34 = 1;
        if (!v33)
        {
LABEL_54:
          if (v22)
          {
            if (v34)
            {
LABEL_56:
              v35 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67110402;
                v49 = ID;
                v50 = 2112;
                v51 = v22;
                v52 = 2112;
                v53 = a2;
                v54 = 1024;
                v55 = StoreId;
                v56 = 1024;
                v57 = v40;
                v58 = 2114;
                v59 = v13;
                _os_log_impl(&dword_1A5CCB000, v35, OS_LOG_TYPE_DEFAULT, "Setting default calendar to %i (%@, \"%@\" in store %i db %i). Reason: %{public}@", buf, 0x32u);
              }
              objc_msgSend(*(id *)(v19 + 296), "set_defaultCalendarID:", v22);
              objc_msgSend(*(id *)(v19 + 296), "set_defaultCalendarStoreUID:", StoreId);
              objc_msgSend(*(id *)(v19 + 296), "set_defaultCalendarDatabaseID:", v40);
              objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
              objc_msgSend(*(id *)(v19 + 296), "set_defaultCalendarChangedTimestamp:", (uint64_t)v36);
              objc_msgSend(*(id *)(v19 + 296), "set_defaultCalendarChangedReason:", v13);
              v32 = 1;
              goto LABEL_63;
            }
          }
          else
          {

            if (v34)
              goto LABEL_56;
          }
          v37 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A5CCB000, v37, OS_LOG_TYPE_INFO, "Ignoring request to set default calendar as the new value is the same as the old value", buf, 2u);
          }
          v32 = 0;
          goto LABEL_63;
        }
      }
LABEL_53:

      goto LABEL_54;
    }
LABEL_47:
    objc_msgSend(*(id *)(v19 + 296), "get_defaultCalendarID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = 1;
    v34 = 1;
    if (!objc_msgSend(v22, "isEqual:", v7))
      goto LABEL_53;
    goto LABEL_51;
  }
  v17 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v17, OS_LOG_TYPE_ERROR, "Can't set the default calendar to an integration calendar.", buf, 2u);
  }
LABEL_69:

}

void CalDatabaseSetDefaultCalendarForNewEvents(const void *a1, void *a2, int a3)
{
  CalDatabaseSetDefaultCalendarForEntityType(a1, a2, 2, a3, 0, CFSTR("No reason provided"));
}

void CalDatabaseSetDefaultCalendarForNewEventsWithReason(const void *a1, void *a2, int a3, void *a4)
{
  CalDatabaseSetDefaultCalendarForEntityType(a1, a2, 2, a3, 0, a4);
}

CFTypeRef CalDatabaseCopyDefaultCalendarForNewTasksForReminderMigration(uint64_t a1)
{
  return CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore(a1, 3, 0, 1);
}

CFTypeRef CalDatabaseCopySelectedDefaultCalendarForNewTasks(uint64_t a1)
{
  return CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore(a1, 3, 0, 0);
}

void CalDatabaseSetDefaultCalendarForNewTasks(const void *a1, void *a2, int a3)
{
  CalDatabaseSetDefaultCalendarForEntityType(a1, a2, 3, a3, 0, CFSTR("vestigial"));
}

void CalDatabaseEnsureDefaultCalendarForNewTasksExists(os_unfair_lock_s *a1)
{
  const void *v2;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v5;
  uint64_t v6;
  uint64_t v7;
  const os_unfair_lock *v8;
  CFTypeRef v9;
  const void *v10;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;
  const void *v13;
  NSObject *v14;
  void *CalendarForEntityType;
  const os_unfair_lock *v16;
  int v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = CalDatabaseCopyDefaultCalendarForNewTasks(a1);
  if (v2)
  {
    CFRelease(v2);
    return;
  }
  if (_CalDatabaseGetRecordStore((uint64_t)a1))
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5)
            os_unfair_lock_assert_owner(v5 + 20);
        }
      }
      v6 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v6)
      {
        v7 = v6;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v6)
          {
            if (*(_QWORD *)(*(_QWORD *)v6 + 104))
            {
              v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v8)
                os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
        CPSqliteConnectionBeginTransactionType();
        v9 = CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore((uint64_t)a1, 3, 0, 0);
        if (v9)
        {
          v10 = v9;
          if (CDBLockingAssertionsEnabled)
          {
            if (*(_QWORD *)v7)
            {
              if (*(_QWORD *)(*(_QWORD *)v7 + 104))
              {
                v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v11)
                  os_unfair_lock_assert_owner(v11 + 20);
              }
            }
          }
          CPSqliteConnectionRollback();
        }
        else
        {
          v13 = CalDatabaseCopyLocalStore((uint64_t)a1);
          if (!v13)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (*(_QWORD *)v7)
              {
                if (*(_QWORD *)(*(_QWORD *)v7 + 104))
                {
                  v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v16)
                    os_unfair_lock_assert_owner(v16 + 20);
                }
              }
            }
            CPSqliteConnectionRollback();
            goto LABEL_26;
          }
          v10 = v13;
          if (CalStoreAllowsTasks((uint64_t)v13))
          {
            v14 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
            {
              v17 = 136315138;
              v18 = "void CalDatabaseEnsureDefaultCalendarForNewTasksExists(CalDatabaseRef)";
              _os_log_impl(&dword_1A5CCB000, v14, OS_LOG_TYPE_INFO, "%s: Failed to get default calendar for reminders. Making one", (uint8_t *)&v17, 0xCu);
            }
            CalendarForEntityType = (void *)CalDatabaseCreateCalendarForEntityType(a1, 3);
            CalCalendarSetTitle((uint64_t)CalendarForEntityType);
            CalStoreAddCalendar((uint64_t)v10, CalendarForEntityType);
            CalDatabaseSave((uint64_t)a1);
            CalDatabaseSetDefaultCalendarForEntityType(a1, CalendarForEntityType, 3, 0, 0, CFSTR("vestigial"));
            CFRelease(CalendarForEntityType);
          }
        }
        CFRelease(v10);
LABEL_26:
        if (CDBLockingAssertionsEnabled && *(_QWORD *)v7 && *(_QWORD *)(*(_QWORD *)v7 + 104))
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
        CPSqliteDatabaseReleaseSqliteConnection();
      }
    }
  }
}

const void *CalDatabaseCopyDefaultCalendarForNewTasks(void *a1)
{
  const void *v2;
  CFTypeRef v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v6;
  uint64_t v7;
  uint64_t v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  const os_unfair_lock *v11;

  v2 = CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore((uint64_t)a1, 3, 0, 0);
  if (!v2)
  {
    v3 = CalDatabaseCopyDefaultCalendarForNewEventsInStore((uint64_t)a1, 0);
    if (v3)
    {
      v2 = v3;
      if ((CalCalendarCanContainEntityTypeAndStoreAllowsIt((uint64_t)v3, 3) & 1) != 0)
        return v2;
      CFRelease(v2);
    }
    v2 = CalDatabaseCopyFirstReadWriteCalendarThatSupportsEntityType(a1, 3, 0);
    if (!v2)
    {
      if (!_CalDatabaseGetRecordStore((uint64_t)a1))
        return 0;
      if (CDBLockingAssertionsEnabled)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      Database = CPRecordStoreGetDatabase();
      if (!Database)
        return 0;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6)
            os_unfair_lock_assert_owner(v6 + 20);
        }
      }
      v7 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v7)
      {
        v8 = v7;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v7)
          {
            if (*(_QWORD *)(*(_QWORD *)v7 + 104))
            {
              v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v9)
                os_unfair_lock_assert_owner(v9 + 20);
            }
          }
        }
        CPSqliteConnectionBeginTransactionType();
        v2 = CalDatabaseCopyDefaultSelectedCalendarForEntityTypeCore((uint64_t)a1, 3, 0, 0);
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v8)
          {
            if (*(_QWORD *)(*(_QWORD *)v8 + 104))
            {
              v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10)
                os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
        CPSqliteConnectionRollback();
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v8)
          {
            if (*(_QWORD *)(*(_QWORD *)v8 + 104))
            {
              v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v11)
                os_unfair_lock_assert_owner(v11 + 20);
            }
          }
        }
        CPSqliteDatabaseReleaseSqliteConnection();
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

void CalCalendarSetExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetExternalModificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyExternalModificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetExternalIdentificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyExternalIdentificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetSyncToken(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopySyncToken(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAddCalendarToStore(const void *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  const os_unfair_lock *Context;
  const os_unfair_lock *v8;

  v4 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (v4)
  {
    v5 = v4;
    v6 = v4 + 20;
    os_unfair_lock_lock(v4 + 20);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    CPRecordGetID();
    CPRecordSetProperty();
    if (CPRecordGetID() == -1
      && _CalCalendarGetBoolConstraintValueForStore(a2, CFSTR("SupportsExactlyOneEntityType")))
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
      if (CPRecordGetProperty())
        _CalDatabaseAddEntity((uint64_t)v5, a1);
      else
        CFLog();
    }
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v6);
    os_unfair_lock_unlock(v6);
    CFRelease(v5);
  }
}

_QWORD *_CalRemoveCalendar(void *a1)
{
  CFTypeRef Store;
  const os_unfair_lock *Context;
  uint64_t DatabaseForRecord;

  Store = _CalCalendarGetStore((uint64_t)a1);
  if ((_CalCalendarCanContainEntityType((uint64_t)a1, 2) & 1) == 0 && (CalShouldSyncReminders() & 1) == 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    CPRecordInitializeProperty();
  }
  if (Store)
    return _CalStoreRemoveCalendar((uint64_t)Store, a1);
  DatabaseForRecord = CalGetDatabaseForRecord();
  return (_QWORD *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

void CalRemoveCalendar(void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveCalendar(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalRemoveCalendarIfEmpty(void *a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  _BOOL4 HasCalendarItemsWithEntityType;
  _BOOL8 v6;

  v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v2)
    return 0;
  v3 = v2;
  v4 = v2 + 20;
  os_unfair_lock_lock(v2 + 20);
  HasCalendarItemsWithEntityType = _CalDatabaseCalendarHasCalendarItemsWithEntityType((uint64_t)v3, (uint64_t)a1, 101);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  v6 = !HasCalendarItemsWithEntityType;
  if (!HasCalendarItemsWithEntityType)
    CalRemoveCalendar(a1);
  CFRelease(v3);
  return v6;
}

void CalCalendarRemoveAllRecords(uint64_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  void *RecordStore;
  const os_unfair_lock *Context;
  const __CFArray *Property;
  const __CFArray *v8;
  const os_unfair_lock *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;
  CFRange v21;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (v2)
  {
    v3 = v2;
    v4 = v2 + 20;
    os_unfair_lock_lock(v2 + 20);
    RecordStore = (void *)_CalDatabaseGetRecordStore((uint64_t)v3);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    Property = (const __CFArray *)CPRecordGetProperty();
    if (Property)
    {
      v8 = Property;
      v21.length = CFArrayGetCount(Property);
      v21.location = 0;
      CFArrayApplyFunction(v8, v21, (CFArrayApplierFunction)_CalCalendarRemoveAddedSubentity, RecordStore);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9)
              os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
      CPRecordSetProperty();
    }
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v10 = (id)_CalDatabaseCopyCalendarItemsWithCalendar((uint64_t)v3);
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v16;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v16 != v13)
            objc_enumerationMutation(v10);
          _CalRemoveEvent(*(const void **)(*((_QWORD *)&v15 + 1) + 8 * v14++), 0, 0);
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v12);
    }

    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v4);
    os_unfair_lock_unlock(v4);
    CFRelease(v3);

  }
}

uint64_t _CalCalendarSetStoreId(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;
  uint64_t result;
  const os_unfair_lock *v6;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if ((_DWORD)result != a2)
  {
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6)
        os_unfair_lock_assert_owner(v6 + 20);
    }
    return CPRecordSetProperty();
  }
  return result;
}

uint64_t _CalCalendarGetTitle(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalCalendarCopyUnlocalizedTitle(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarCopyTitle(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  void *v4;
  CFTypeRef Store;
  int Type;
  void *v7;
  _BOOL8 Flag;
  _BOOL8 IsBirthdayCalendar;
  uint64_t v10;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (void *)CPRecordCopyProperty();
  Store = _CalCalendarGetStore(a1);
  Type = _CalStoreGetType((uint64_t)Store);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  v7 = (void *)MEMORY[0x1E0D0C320];
  Flag = CalCalendarGetFlag(a1, 0x40000);
  IsBirthdayCalendar = CalCalendarIsBirthdayCalendar();
  objc_msgSend(v7, "localizedTitleForTitle:isSuggestedEventCalendar:isBirthdayCalendar:allowsReminders:isIntegrationCalendar:", v4, Flag, IsBirthdayCalendar, CalCalendarCanContainEntityType(a1, 3), Type == 6);
  v10 = objc_claimAutoreleasedReturnValue();

  return v10;
}

BOOL CalCalendarIsSuggestionsCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x40000);
}

void CalCalendarSetLastSyncTitle(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyLastSyncTitle(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalCalendarDefaultReminderListTitleLocalized()
{
  return objc_msgSend(MEMORY[0x1E0D0C320], "localizedDefaultReminderListTitle");
}

uint64_t _CalCalendarCopyTitle(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalCalendarSetReadOnly(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

void CalCalendarSetFlag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarSetFlag(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetHidden(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

void CalCalendarSetImmutable(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsImmutable(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 4);
}

void CalCalendarSetIsInbox(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsInbox(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 32);
}

void CalCalendarSetIsNotificationsCollection(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsNotificationsCollection(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 64);
}

void CalCalendarSetIsSharingInvitation(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsSharingInvitation(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 128);
}

void CalCalendarSetSubscribed(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

void CalCalendarSetRefreshDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarCopyRefreshDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const void *Property;
  CFTypeRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const void *)CPRecordGetProperty();
  if (Property)
    v5 = CFRetain(Property);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

BOOL CalCalendarIsSubscribed(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 8);
}

BOOL _CalCalendarIsSubscribed(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 8);
}

void CalCalendarSetSchedulingProhibited(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsSchedulingProhibited(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 16);
}

void CalCalendarSetDefaultCalendarForStore(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsDefaultCalendarForStore(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 1024);
}

void CalCalendarSetIsHolidaySubscribedCalendar(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsHolidaySubscribedCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 4096);
}

BOOL CalCalendarIsHolidaySyncedCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x1000000);
}

BOOL CalCalendarIsFamilyCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x2000);
}

void CalCalendarSetIsFamilyCalendar(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

void CalCalendarSetIsFoundInMailCalendar(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsFoundInMailCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x40000);
}

BOOL _CalCalendarIsSuggestionsCalendar(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 0x40000);
}

BOOL CalCalendarIsMarkedUndeletable(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x4000);
}

void CalCalendarSetIsMarkedUndeletable(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsMarkedImmutableSharees(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x8000);
}

void CalCalendarSetIsMarkedImmutableSharees(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

void CalCalendarSetMaxAttendees(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarGetMaxAttendees(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

BOOL CalCalendarIsIgnoringEventAlerts(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x10000);
}

BOOL _CalCalendarIsIgnoringEventAlerts(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 0x10000);
}

void CalCalendarSetIsIgnoringEventAlerts(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsIgnoringSharedCalendarNotifications(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x20000);
}

void CalCalendarSetIsIgnoringSharedCalendarNotifications(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

void CalCalendarSetSharingStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarGetSharingStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalCalendarSetSharedOwnerName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopySharedOwnerName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetSharedOwnerAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopySharedOwnerAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetCachedExternalInfo(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  unint64_t v9;
  void *v10;
  const os_unfair_lock *v11;
  id v12;
  uint8_t buf[4];
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v12 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v3, 200, 0, &v12);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = v12;
    if (!v4)
    {
      v6 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v5;
        _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "Couldn't serialize external info: %@", buf, 0xCu);
      }
    }

  }
  else
  {
    v4 = 0;
  }
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v9 = (unint64_t)(id)CPRecordGetProperty();
  v10 = (void *)v9;
  if (v4 | v9 && (objc_msgSend((id)v9, "isEqual:", v4) & 1) == 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    CPRecordSetProperty();
  }

  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);

}

id CalCalendarCopyCachedExternalInfo(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  void *v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  id v12;
  id v14;
  uint8_t buf[4];
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (void *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  if (v4)
  {
    v14 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v4, 0, 0, &v14);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v14;
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v7 = v5;
LABEL_18:

        goto LABEL_19;
      }
      v9 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v10 = v9;
        v11 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138543362;
        v16 = v11;
        v12 = v11;
        _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_ERROR, "Deserialized data wasn't a dictionary (it was a %{public}@", buf, 0xCu);

      }
    }
    else
    {
      v8 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v16 = v6;
        _os_log_impl(&dword_1A5CCB000, v8, OS_LOG_TYPE_ERROR, "Error deserializing cached external store info: %@", buf, 0xCu);
      }
    }
    v7 = 0;
    goto LABEL_18;
  }
  v7 = 0;
LABEL_19:

  return v7;
}

void CalCalendarSetSharedOwnerAddresses(uint64_t a1, const void *a2)
{
  const __CFDictionary *v4;
  const __CFAllocator *v5;
  __CFDictionary *MutableCopy;
  __CFDictionary *v7;

  v4 = (const __CFDictionary *)CalCalendarCopyCachedExternalInfo(a1);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v4)
    MutableCopy = CFDictionaryCreateMutableCopy(v5, 0, v4);
  else
    MutableCopy = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = MutableCopy;
  CFDictionarySetValue(MutableCopy, CFSTR("sharedOwnerAddresses"), a2);
  CalCalendarSetCachedExternalInfo(a1, v7);
  if (v4)
    CFRelease(v4);
  CFRelease(v7);
}

uint64_t CalCalendarCopySharedOwnerAddresses(uint64_t a1)
{
  id v1;
  uint64_t v2;

  v1 = CalCalendarCopyCachedExternalInfo(a1);
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("sharedOwnerAddresses"));
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

void CalCalendarSetSharingInvitationResponse(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarGetSharingInvitationResponse(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalCalendarSetPublishedURL(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    CFURLGetString(a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalCalendarCopyPublishedURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *v4;
  CFURLRef result;
  CFURLRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (const __CFString *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  result = 0;
  if (v4)
  {
    v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

uint64_t _CalCalendarSetCanBePublished(uint64_t a1)
{
  return _CalCalendarSetFlag(a1);
}

uint64_t _CalCalendarSetFlag(uint64_t a1)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3)
          os_unfair_lock_assert_owner(v3 + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalCalendarSetCanBePublished(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarGetCanBePublished(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 256);
}

uint64_t _CalCalendarSetCanBeShared(uint64_t a1)
{
  return _CalCalendarSetFlag(a1);
}

void CalCalendarSetCanBeShared(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarGetCanBeShared(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 2048);
}

uint64_t _CalCalendarSetIsNaturalLanguageSuggestedEventsCalendar(uint64_t a1)
{
  return _CalCalendarSetFlag(a1);
}

BOOL _CalCalendarIsNaturalLanguageSuggestedEventsCalendar(uint64_t a1)
{
  return _CalCalendarGetFlag(a1, 0x80000);
}

void CalCalendarSetIsNaturalLanguageSuggestedEventsCalendar(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsNaturalLanguageSuggestedEventsCalendar(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x80000);
}

void CalCalendarSetIsAffectingAvailability(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarIsAffectingAvailability(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x100000);
}

void CalCalendarSetIsPublished(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarGetIsPublished(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

uint64_t CalCalendarGetInvitationStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t InvitationStatus;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  InvitationStatus = _CalCalendarGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return InvitationStatus;
}

uint64_t _CalCalendarGetInvitationStatus(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

void CalCalendarSetInvitationStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetNeedsNotification(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalCalendarHasBeenAlerted(uint64_t a1)
{
  return _CalCalendarGetInvitationStatus(a1) != 3;
}

BOOL CalCalendarHasBeenAlerted(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  int InvitationStatus;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  InvitationStatus = _CalCalendarGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return InvitationStatus != 3;
}

uint64_t CalCalendarCopyNotes(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetNotes(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetBulkRequests(uint64_t a1, const void *a2)
{
  CFDataRef Data;
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  if (a2)
    Data = CFPropertyListCreateData(0, a2, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  else
    Data = 0;
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  if (Data)
    CFRelease(Data);
}

CFPropertyListRef CalCalendarCopyBulkRequests(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFData *v4;
  CFPropertyListRef result;
  CFPropertyListRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (const __CFData *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  result = 0;
  if (v4)
  {
    v6 = CFPropertyListCreateWithData(0, v4, 0, 0, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

void CalCalendarSetSubCalAccountID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarSetSubCalAccountID(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarSetSubCalAccountID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalCalendarCopySubCalAccountID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetPubCalAccountID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyPubCalAccountID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetPushKey(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyPushKey(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

BOOL CalCalendarGetColorComponents(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  return CalCalendarGetColorComponentsPossiblyForDisplay(a1, a2, a3, a4, 0);
}

BOOL CalCalendarGetColorComponentsPossiblyForDisplay(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, char a5)
{
  _BOOL8 result;
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v13;
  const __CFString *Property;
  char buffer[100];
  uint64_t v16;

  result = 0;
  v16 = *MEMORY[0x1E0C80C00];
  if (a2 && a3 && a4)
  {
    *a4 = -1;
    *a3 = -1;
    *a2 = -1;
    RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
    if ((a5 & 1) != 0)
      goto LABEL_26;
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    if (!CPRecordGetProperty())
    {
LABEL_26:
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13)
              os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
      Property = (const __CFString *)CPRecordGetProperty();
      if (Property)
      {
        CFStringGetCString(Property, buffer, 100, 0x8000100u);
        sscanf(buffer, "#%02X%02X%02X", a2, a3, a4);
      }
    }
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(RecordLock);
    os_unfair_lock_unlock(RecordLock);
    return *a2 != -1 && *a3 != -1 && *a4 != -1;
  }
  return result;
}

void CalCalendarSetColorComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_s *RecordLock;
  CFStringRef v9;
  const os_unfair_lock *Context;
  const os_unfair_lock *v11;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if ((a3 | a2 | a4) > 0xFF)
    v9 = 0;
  else
    v9 = CFStringCreateWithFormat(0, 0, CFSTR("#%02X%02X%02X"), a2, a3, a4);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (v9)
    CFRelease(v9);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCalendarGetColorComponentsForDisplay(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  return CalCalendarGetColorComponentsPossiblyForDisplay(a1, a2, a3, a4, 1);
}

void CalCalendarSetColorComponentsForDisplay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_s *RecordLock;
  CFStringRef v9;
  const os_unfair_lock *Context;
  const os_unfair_lock *v11;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if ((a3 | a2 | a4) > 0xFF)
    v9 = 0;
  else
    v9 = CFStringCreateWithFormat(0, 0, CFSTR("#%02X%02X%02X"), a2, a3, a4);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (v9)
    CFRelease(v9);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const void *CalCalendarCopySymbolicColorName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const void *Property;
  const void *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const void *)CPRecordGetProperty();
  v5 = Property;
  if (Property)
    CFRetain(Property);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalCalendarSetSymbolicColorName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const void *CalCalendarGetColorString(uint64_t a1)
{
  const void *v1;
  const void *v2;

  v1 = CalCalendarCopyColorStringPossiblyForDisplay(a1, 0);
  v2 = v1;
  if (v1)
    CFAutorelease(v1);
  return v2;
}

const void *CalCalendarCopyColorStringPossiblyForDisplay(uint64_t a1, char a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const void *v6;
  const os_unfair_lock *v7;
  const void *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if ((a2 & 1) != 0)
    goto LABEL_21;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (!CPRecordGetProperty())
  {
LABEL_21:
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7)
            os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
    Property = (const void *)CPRecordGetProperty();
    v6 = Property;
    if (Property)
      CFRetain(Property);
  }
  else
  {
    v6 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

const void *CalCalendarCopyColorString(uint64_t a1)
{
  return CalCalendarCopyColorStringPossiblyForDisplay(a1, 0);
}

void CalCalendarSetColorString(uint64_t a1, const __CFString *a2)
{
  CalCalendarSetColorStringInternal(a1, a2);
}

void CalCalendarSetColorStringInternal(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;
  const char *CStringFromCFString;
  char *v6;
  const os_unfair_lock *Context;
  const os_unfair_lock *v8;
  int v9;
  uint64_t v10;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
    if (CStringFromCFString)
    {
      v6 = (char *)CStringFromCFString;
      v10 = 0;
      v9 = 0;
      sscanf(CStringFromCFString, "#%02X%02X%02X", (char *)&v10 + 4, &v10, &v9);
      free(v6);
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const void *CalCalendarGetColorStringForDisplay(uint64_t a1)
{
  const void *v1;
  const void *v2;

  v1 = CalCalendarCopyColorStringPossiblyForDisplay(a1, 1);
  v2 = v1;
  if (v1)
    CFAutorelease(v1);
  return v2;
}

const void *CalCalendarCopyColorStringForDisplay(uint64_t a1)
{
  return CalCalendarCopyColorStringPossiblyForDisplay(a1, 1);
}

uint64_t CalCalendarGetDisplayOrder(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

uint64_t _CalCalendarGetDisplayOrder(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

void CalCalendarSetDisplayOrder(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarSetType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyType(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopyType(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetDigest(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyDigest(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetSubscriptionID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopySubscriptionID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetSubscriptionURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopySubscriptionURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetRefreshInterval(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarGetRefreshInterval(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

uint64_t CalCalendarCopyLocale(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarSetLocale(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const __CFString *CalCalendarCopyLanguage(uint64_t a1)
{
  const __CFString *v1;
  CFArrayRef ArrayBySeparatingStrings;

  v1 = (const __CFString *)CalCalendarCopyLocale(a1);
  if (v1)
  {
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v1, CFSTR("-"));
    CFRelease(v1);
    if (-[__CFArray count](ArrayBySeparatingStrings, "count"))
    {
      -[__CFArray firstObject](ArrayBySeparatingStrings, "firstObject");
      v1 = (const __CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v1 = 0;
    }

  }
  return v1;
}

const __CFString *CalCalendarCopyRegion(uint64_t a1)
{
  const __CFString *v1;
  CFArrayRef ArrayBySeparatingStrings;

  v1 = (const __CFString *)CalCalendarCopyLocale(a1);
  if (v1)
  {
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v1, CFSTR("-"));
    CFRelease(v1);
    v1 = 0;
    if ((unint64_t)-[__CFArray count](ArrayBySeparatingStrings, "count") >= 2)
    {
      -[__CFArray objectAtIndex:](ArrayBySeparatingStrings, "objectAtIndex:", 1);
      v1 = (const __CFString *)objc_claimAutoreleasedReturnValue();
    }

  }
  return v1;
}

void CalCalendarSetStripAttachments(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarGetStripAttachments(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x400000);
}

void CalCalendarSetStripAlarms(uint64_t a1)
{
  CalCalendarSetFlag(a1);
}

BOOL CalCalendarGetStripAlarms(uint64_t a1)
{
  return CalCalendarGetFlag(a1, 0x200000);
}

uint64_t CalCalendarMigrateSubscribedCalendarToStore(uint64_t a1, uint64_t a2)
{
  uint64_t DatabaseForRecord;
  os_unfair_lock_s *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t RecordStore;
  const os_unfair_lock *Context;
  NSObject *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  BOOL v20;
  const os_unfair_lock *v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t k;
  int ID;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[16];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  _BYTE v48[128];
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  DatabaseForRecord = CalGetDatabaseForRecord();
  v5 = (os_unfair_lock_s *)(DatabaseForRecord + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(DatabaseForRecord + 80));
  v6 = (void *)_CalDatabaseCopyCalendar(DatabaseForRecord, a1);
  _CalStoreAddCalendar(a2, v6);
  _CalCalendarSetSubCalAccountID((uint64_t)v6);
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v7 = (id)_CalDatabaseCopyCalendarItemsWithCalendar(DatabaseForRecord);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v44 != v10)
          objc_enumerationMutation(v7);
        _CalCalendarAddCalendarItem(v6, *(const void **)(*((_QWORD *)&v43 + 1) + 8 * i));
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
    }
    while (v9);
  }

  RecordStore = _CalDatabaseGetRecordStore(DatabaseForRecord);
  if (__CalDatabaseBeginWriteTransaction(DatabaseForRecord, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalCalendar.m:4210"))
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
    v33 = (void *)a1;
    CPRecordProcessAddImmediate();
    ID = CPRecordGetID();
    if (ID <= 0)
    {
      v14 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A5CCB000, v14, OS_LOG_TYPE_ERROR, "New calendar not assigned an ID when migrating calendar. This won't end well!", buf, 2u);
      }
    }
    _CalEventOccurrenceCacheBeginTrackingUpdates(*(CFMutableSetRef *)(DatabaseForRecord + 32));
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v15 = v7;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v39;
      do
      {
        for (j = 0; j != v17; ++j)
        {
          if (*(_QWORD *)v39 != v18)
            objc_enumerationMutation(v15);
          if (CDBLockingAssertionsEnabled)
            v20 = RecordStore == 0;
          else
            v20 = 1;
          if (!v20)
          {
            v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21)
              os_unfair_lock_assert_owner(v21 + 20);
          }
          CPRecordProcessChangesImmediate();
        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
      }
      while (v17);
    }

    _CalEventOccurrenceCacheStopTrackingUpdates(*(_QWORD *)(DatabaseForRecord + 32));
    __CalDatabaseCommitTransaction(DatabaseForRecord, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalCalendar.m:4233");
    +[CalDatabaseInMemoryChangeTracking changeTrackingForDatabase:](CalDatabaseInMemoryChangeTracking, "changeTrackingForDatabase:", DatabaseForRecord);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v15, "count") + 1;
    if (v23 < 0x201)
    {
      v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v23);
      objc_msgSend(v25, "addObject:", _CalCalendarGetRecordID((uint64_t)v6));
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v26 = v15;
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v34, v47, 16);
      if (v27)
      {
        v28 = v27;
        v29 = *(_QWORD *)v35;
        do
        {
          for (k = 0; k != v28; ++k)
          {
            if (*(_QWORD *)v35 != v29)
              objc_enumerationMutation(v26);
            objc_msgSend(v25, "addObject:", _CalCalendarItemGetRecordID(*(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * k)));
          }
          v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v34, v47, 16);
        }
        while (v28);
      }

      objc_msgSend(v22, "addChangeset:deletes:clientID:changeType:", v25, MEMORY[0x1E0C9AA60], 0, 0);
    }
    else
    {
      objc_msgSend(v22, "clearAllChangesets");
    }
    _CalRemoveCalendar(v33);
    CalDatabaseSaveWithOptions(DatabaseForRecord, 2);
    CFRelease(v6);

    v24 = ID;
  }
  else
  {
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v5);
    os_unfair_lock_unlock(v5);
    CFRelease(v6);
    v24 = 0;
  }

  return v24;
}

void _CalCalendarAddCalendarItem(const void *a1, const void *a2)
{
  const os_unfair_lock *Context;
  void *Property;
  const os_unfair_lock *v6;

  _CalCalendarItemSetCalendar((uint64_t)a2, a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (void *)CPRecordGetProperty();
  if (!Property)
  {
    Property = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6)
            os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
    CPRecordSetProperty();
    CFRelease(Property);
  }
  CFArrayAppendValue((CFMutableArrayRef)Property, a2);
}

void CalCalendarAddCalendarItem(const void *a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarAddCalendarItem(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarAddCalendarItemAndDetached(const void *a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarAddCalendarItem(a1, a2);
  if (_CalEntityGetType(a2) == 2)
  {
    v5 = _CalEventCopyDetachedEvents((uint64_t)a2);
    if (v5)
    {
      v6 = v5;
      Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        v8 = Count;
        for (i = 0; i != v8; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
          _CalCalendarAddCalendarItem(a1, ValueAtIndex);
        }
      }
      CFRelease(v6);
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCalendarCopyEvents()
{
  os_unfair_lock_s *v0;
  uint64_t v1;

  v0 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  v1 = CalDatabaseCopyCalendarItemsWithCalendar(v0);
  CFRelease(v0);
  return v1;
}

BOOL CalCalendarHasEvents(uint64_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  _BOOL8 HasEvents;

  v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v2)
    return 0;
  v3 = v2;
  v4 = v2 + 20;
  os_unfair_lock_lock(v2 + 20);
  HasEvents = _CalDatabaseCalendarHasEvents((uint64_t)v3, a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  CFRelease(v3);
  return HasEvents;
}

BOOL CalCalendarHasEventsWithRoomAsAttendee(uint64_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  _BOOL8 HasEventsWithAttendeeAsAttendeeType;

  v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v2)
    return 0;
  v3 = v2;
  v4 = v2 + 20;
  os_unfair_lock_lock(v2 + 20);
  HasEventsWithAttendeeAsAttendeeType = _CalDatabaseCalendarHasEventsWithAttendeeAsAttendeeType((uint64_t)v3, a1, 2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  CFRelease(v3);
  return HasEventsWithAttendeeAsAttendeeType;
}

BOOL CalCalendarHasTasks(uint64_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  _BOOL8 HasTasks;

  v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v2)
    return 0;
  v3 = v2;
  v4 = v2 + 20;
  os_unfair_lock_lock(v2 + 20);
  HasTasks = _CalDatabaseCalendarHasTasks((uint64_t)v3, a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  CFRelease(v3);
  return HasTasks;
}

uint64_t _CalCalendarCanContainEntityTypeAndStoreAllowsIt(uint64_t a1, int a2)
{
  uint64_t result;
  CFTypeRef Store;

  result = _CalCalendarCanContainEntityType(a1, a2);
  if ((_DWORD)result)
  {
    Store = _CalCalendarGetStore(a1);
    if (Store)
      return a2 == 2 && _CalStoreAllowsEvents((uint64_t)Store);
    else
      return 1;
  }
  return result;
}

void CalCalendarSetCanContainEntityType(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  const os_unfair_lock *Context;
  int Property;
  int v9;
  const os_unfair_lock *v10;

  if (a2 <= 3 && a2 != 1)
  {
    v4 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (v4)
    {
      v5 = v4;
      v6 = v4 + 20;
      os_unfair_lock_lock(v4 + 20);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
      Property = CPRecordGetProperty();
      if (a2)
        v9 = 1 << a2;
      else
        v9 = 0;
      if (v9 != Property)
      {
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10)
                os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
        CPRecordSetProperty();
      }
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner(v6);
      os_unfair_lock_unlock(v6);
      CFRelease(v5);
    }
  }
}

os_unfair_lock_s *CalCalendarCopyEventsWithRespondedExternalStatus()
{
  os_unfair_lock_s *result;
  os_unfair_lock_s *v1;
  int UID;
  uint64_t v3;

  result = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (result)
  {
    v1 = result;
    UID = CalCalendarGetUID();
    v3 = CalDatabaseCopyOfAllEventsWithRespondedExternalStatusAndCalendarUID(v1, UID);
    CFRelease(v1);
    return (os_unfair_lock_s *)v3;
  }
  return result;
}

os_unfair_lock_s *CalCalendarCopyEventsWithExternalTrackingStatus()
{
  os_unfair_lock_s *result;
  os_unfair_lock_s *v1;
  int UID;
  uint64_t v3;

  result = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (result)
  {
    v1 = result;
    UID = CalCalendarGetUID();
    v3 = CalDatabaseCopyOfAllEventsWithExternalTrackingStatusAndCalendarUID(v1, UID);
    CFRelease(v1);
    return (os_unfair_lock_s *)v3;
  }
  return result;
}

uint64_t CalCalendarCopyTasks()
{
  os_unfair_lock_s *v0;
  uint64_t v1;

  v0 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  v1 = CalDatabaseCopyCalendarItemsWithCalendar(v0);
  CFRelease(v0);
  return v1;
}

CFMutableArrayRef CalDatabaseCopyOfAllCalendarsWithStoreUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *v3;
  const void *v4;
  CFMutableArrayRef v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = CalDatabaseCopyStoreWithUID(a1);
  if (v3)
  {
    v4 = v3;
    v5 = CalStoreCopyCalendars((uint64_t)v3);
    CFRelease(v4);
  }
  else
  {
    v5 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

CFIndex CalDatabaseGetCountOfCalendarsInStore(uint64_t a1, uint64_t a2)
{
  return CalDatabaseGetCountOfCalendarsInStoreWithOptions(a1, a2, 0);
}

CFIndex CalDatabaseGetCountOfCalendarsInStoreWithOptions(uint64_t a1, uint64_t a2, char a3)
{
  __CFArray *v3;
  __CFArray *v4;
  CFIndex Count;

  v3 = _CalDatabaseCopyOfAllCalendarsInStoreWithOptions(a1, a2, a3);
  if (!v3)
    return 0;
  v4 = v3;
  Count = CFArrayGetCount(v3);
  CFRelease(v4);
  return Count;
}

_QWORD *_CalCalendarSetError(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

void CalCalendarSetError(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarSetError(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarCopyError(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Error;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Error = _CalCalendarGetError(a1);
  if (Error)
    v4 = CFRetain(Error);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalCalendarHasErrorTypeAndCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef result;
  const void *v6;
  uint64_t ErrorType;
  uint64_t ErrorCode;

  result = CalCalendarCopyError(a1);
  if (result)
  {
    v6 = result;
    ErrorType = CalErrorGetErrorType((uint64_t)result);
    ErrorCode = CalErrorGetErrorCode((uint64_t)v6);
    CFRelease(v6);
    return (CFTypeRef)(ErrorType == a2 && ErrorCode == a3);
  }
  return result;
}

CFTypeRef CalCalendarHasAccountErrorWithCode(uint64_t a1, uint64_t a2)
{
  return CalCalendarHasErrorTypeAndCode(a1, 0, a2);
}

CFTypeRef CalCalendarHasCalendarErrorWithCode(uint64_t a1, uint64_t a2)
{
  return CalCalendarHasErrorTypeAndCode(a1, 2, a2);
}

_QWORD *_CalCalendarSetImage(void *a1, uint64_t a2)
{
  _QWORD *result;

  result = _CalCalendarGetImage((uint64_t)a1);
  if (result != (_QWORD *)a2)
  {
    if (result)
      result = (_QWORD *)_CalImageRemoveCalendar((uint64_t)result, a1);
    if (a2)
      return _CalImageAddCalendar(a2, a1);
  }
  return result;
}

CFTypeRef _CalCalendarGetImage(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

void CalCalendarSetImage(void *a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarSetImage(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalCalendarCopyImage(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Image;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Image = _CalCalendarGetImage(a1);
  if (Image)
    v4 = CFRetain(Image);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCalendarAddSharee(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationAddObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalCalendarCopySharees(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopySharees(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

_QWORD *_CalCalendarRemoveSharee(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

void CalCalendarRemoveSharee(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarRemoveSharee(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarAddNotification(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationAddObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalCalendarCopyNotifications(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopyNotifications(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarRemoveNotification(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationRemoveObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalCalendarCopyResourceChanges(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopyResourceChanges(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalCalendarCopySelfIdentityDisplayName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopySelfIdentityDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopySelfIdentityDisplayName(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetSelfIdentityDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopySelfIdentityEmail(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopySelfIdentityEmail(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopySelfIdentityEmail(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetSelfIdentityEmail(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopySelfIdentityPhoneNumber(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopySelfIdentityPhoneNumber(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopySelfIdentityPhoneNumber(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetSelfIdentityPhoneNumber(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const __CFString *_CalCalendarCopySelfIdentityAddress(uint64_t a1)
{
  const os_unfair_lock *Context;
  const __CFString *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFString *)CPRecordGetProperty();
  if (result)
    return (const __CFString *)CFURLCreateWithString(0, result, 0);
  return result;
}

const __CFString *CalCalendarCopySelfIdentityAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopySelfIdentityAddress(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetSelfIdentityAddress(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a2)
    CFURLGetString(a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopySelfIdentityFirstName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopySelfIdentityFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Name;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Name = _CalCalendarCopySelfIdentityFirstName(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

void CalCalendarSetSelfIdentityFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopySelfIdentityLastName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopySelfIdentityLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Name;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Name = _CalCalendarCopySelfIdentityLastName(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

void CalCalendarSetSelfIdentityLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyOwnerIdentityDisplayName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyOwnerIdentityDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopyOwnerIdentityDisplayName(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetOwnerIdentityDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyOwnerIdentityEmail(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyOwnerIdentityEmail(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopyOwnerIdentityEmail(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetOwnerIdentityEmail(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyOwnerIdentityPhoneNumber(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyOwnerIdentityPhoneNumber(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopyOwnerIdentityPhoneNumber(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetOwnerIdentityPhoneNumber(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const __CFString *_CalCalendarCopyOwnerIdentityAddress(uint64_t a1)
{
  const os_unfair_lock *Context;
  const __CFString *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFString *)CPRecordGetProperty();
  if (result)
    return (const __CFString *)CFURLCreateWithString(0, result, 0);
  return result;
}

const __CFString *CalCalendarCopyOwnerIdentityAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopyOwnerIdentityAddress(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarSetOwnerIdentityAddress(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a2)
    CFURLGetString(a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyOwnerIdentityFirstName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyOwnerIdentityFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Name;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Name = _CalCalendarCopyOwnerIdentityFirstName(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

void CalCalendarSetOwnerIdentityFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCalendarCopyOwnerIdentityLastName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalCalendarCopyOwnerIdentityLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Name;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Name = _CalCalendarCopyOwnerIdentityLastName(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

void CalCalendarSetOwnerIdentityLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseCopyCalendarChangesInStore(const void *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  CFStringRef v8;
  CFMutableDictionaryRef Mutable;
  uint64_t RecordStore;
  BOOL v11;
  const os_unfair_lock *Context;
  uint64_t v13;

  if (a2)
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  else
    v5 = (os_unfair_lock_s *)CFRetain(a1);
  v6 = v5;
  v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  v8 = _CalCalendarCopyChangeHistoryWhereClauseForStore((uint64_t)v6, a2);
  if (!a3)
  {
LABEL_7:
    RecordStore = _CalDatabaseGetRecordStore((uint64_t)v6);
    if (CDBLockingAssertionsEnabled)
      v11 = RecordStore == 0;
    else
      v11 = 1;
    if (!v11)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    v13 = CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
    if (v8)
      CFRelease(v8);
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v7);
    os_unfair_lock_unlock(v7);
    CFRelease(v6);
    return v13;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    *a3 = Mutable;
    goto LABEL_7;
  }
  if (v8)
    CFRelease(v8);
  if (v6)
    CFRelease(v6);
  return 0xFFFFFFFFLL;
}

CFStringRef _CalCalendarCopyChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t ID;
  CFStringRef v6;

  v6 = 0;
  if (a2)
  {
    v3 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN     (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN     (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v3, v3, 1, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t CalDatabaseRemoveCalendarChangesInStoreToIndex(const void *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  _QWORD v10[7];
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (a2)
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  else
    v5 = (os_unfair_lock_s *)CFRetain(a1);
  v6 = v5;
  v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __CalDatabaseRemoveCalendarChangesInStoreToIndex_block_invoke;
  v10[3] = &unk_1E4F84BF0;
  v10[4] = &v12;
  v10[5] = v6;
  v10[6] = a2;
  v11 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v6, (uint64_t)v10);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7);
  os_unfair_lock_unlock(v7);
  CFRelease(v6);
  v8 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1A5D24570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalDatabaseRemoveCalendarChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3;
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t v7;

  v3 = _CalCalendarCopyChangeHistoryWhereClauseForStore(a1, a2);
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3)
    CFRelease(v3);
  return v7;
}

uint64_t CalDatabaseRemoveCalendarChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __CalDatabaseRemoveCalendarChangesWithIndices_block_invoke;
  v7[3] = &unk_1E4F84C18;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A5D24720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyCalendarChangesWithIndicesInStore(const void *a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;
  uint64_t v10;

  if (a2)
    v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  else
    v3 = (os_unfair_lock_s *)CFRetain(a1);
  v4 = v3;
  v5 = v3 + 20;
  os_unfair_lock_lock(v3 + 20);
  v6 = _CalCalendarCopyChangeHistoryWhereClauseForStore((uint64_t)v4, a2);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)v4);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v10 = CPRecordStoreGetChangesAndChangeIndicesForClassWithProperties();
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5);
  os_unfair_lock_unlock(v5);
  CFRelease(v4);
  return v10;
}

void CalCalendarClearExternalProperties(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  const __CFArray *v15;
  const __CFArray *v16;
  CFIndex Count;
  CFIndex v18;
  CFIndex i;
  const void *ValueAtIndex;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9)
          os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  if (a2)
  {
    v13 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (v13)
    {
      v14 = v13;
      v15 = (const __CFArray *)CalDatabaseCopyCalendarItemsWithCalendar(v13);
      if (v15)
      {
        v16 = v15;
        Count = CFArrayGetCount(v15);
        if (Count >= 1)
        {
          v18 = Count;
          for (i = 0; i != v18; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v16, i);
            CalCalendarItemClearExternalProperties(ValueAtIndex, 1);
          }
        }
        CFRelease(v16);
      }
      CFRelease(v14);
    }
  }
}

uint64_t _CalDatabasePrepareCalendarsInStoreForMigration(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t ID;
  uint64_t result;
  const void *v8;

  ID = CPRecordGetID();
  result = _CalDatabaseRemoveCalendarChangesInStoreToIndex(a1, a3);
  if ((_DWORD)result)
  {
    result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE Calendar SET external_id = NULL, external_mod_tag = NULL, external_id_tag = NULL, external_rep = NULL, shared_owner_name = NULL, shared_owner_address = NULL, sharing_status = 0, sync_token = NULL, is_published = 0, published_URL = NULL WHERE store_id = %d;"),
                        ID);
    if (result)
    {
      v8 = (const void *)result;
      CalPerformSQLWithConnection(a2, result);
      CFRelease(v8);
      return 1;
    }
  }
  return result;
}

BOOL _CalDatabaseMigrateCalendarsWithConnection(_QWORD *a1)
{
  uint64_t ID;
  uint64_t v3;
  CFStringRef v4;

  ID = CPRecordGetID();
  v3 = CPRecordGetID();
  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE Calendar SET store_id = %d WHERE store_id = %d AND ROWID != %d;"),
         v3,
         ID,
         1);
  if (v4)
  {
    CalPerformSQLWithConnection(a1, (uint64_t)v4);
    CFRelease(v4);
  }
  return v4 != 0;
}

BOOL _CalDatabaseMigrateCalendarWithConnection(_QWORD *a1)
{
  uint64_t ID;
  uint64_t v3;
  const __CFAllocator *v4;
  uint64_t v5;
  CFStringRef v6;

  ID = CPRecordGetID();
  v3 = CPRecordGetID();
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CPRecordGetID();
  v6 = CFStringCreateWithFormat(v4, 0, CFSTR("UPDATE Calendar SET store_id = %d WHERE store_id = %d AND ROWID = %d;"),
         v3,
         ID,
         v5);
  if (v6)
  {
    CalPerformSQLWithConnection(a1, (uint64_t)v6);
    CFRelease(v6);
  }
  return v6 != 0;
}

CFMutableArrayRef _CalCalendarCopyAlarms(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

const __CFArray *_CalCalendarAddAlarm(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

_QWORD *_CalCalendarRemoveAlarm(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

uint64_t _CalCalendarHasAlarms(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
    return CalToManyRelationHasObjects(result);
  return result;
}

uint64_t CalCalendarHasAlarms(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t HasAlarms;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  HasAlarms = _CalCalendarHasAlarms(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return HasAlarms;
}

CFMutableArrayRef CalCalendarCopyAlarms(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalCalendarCopyAlarms(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalCalendarAddAlarm(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarAddAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalCalendarRemoveAlarm(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarRemoveAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void _CalCalendarLoadSelfIdentityProperties(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Store;
  uint64_t IdentityWithRowID;
  uint64_t v5;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const void *v10;
  const os_unfair_lock *v11;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    Store = CPRecordGetStore();
    IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      v9 = _CalIdentityCopyAddress(v5);
      if (v9)
      {
        v10 = (const void *)v9;
        if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
        CPRecordInitializeProperty();
        CFRelease(v10);
      }
    }
  }
}

void _CalCalendarLoadOwnerIdentityProperties(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Store;
  uint64_t IdentityWithRowID;
  uint64_t v5;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const void *v10;
  const os_unfair_lock *v11;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    Store = CPRecordGetStore();
    IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      v9 = _CalIdentityCopyAddress(v5);
      if (v9)
      {
        v10 = (const void *)v9;
        if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
        CPRecordInitializeProperty();
        CFRelease(v10);
      }
    }
  }
}

void _CalCalendarMigrateSubscribedCalendarExternalID(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  const unsigned __int8 *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  char *v9;
  id v10;

  v4 = sqlite3_value_text(*a3);
  if (!v4)
  {
    v10 = 0;
LABEL_7:
    sqlite3_result_null(a1);
    goto LABEL_8;
  }
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v4, strlen((const char *)v4), 4, 0);
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v5);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  if (!v10
    || (objc_msgSend(v10, "path"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v6, "appendSlashIfNeeded"),
        v7 = (id)objc_claimAutoreleasedReturnValue(),
        v6,
        !v7))
  {
    v7 = v5;
    if (!v7)
      goto LABEL_7;
  }
  v8 = objc_retainAutorelease(v7);
  v9 = strdup((const char *)objc_msgSend(v8, "UTF8String"));
  sqlite3_result_text(a1, v9, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);

LABEL_8:
}

uint64_t _CalCalendarValidateIdentityForProperties(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  uint64_t result;
  const os_unfair_lock *v6;
  const __CFString *Property;
  const os_unfair_lock *v8;
  const __CFString *v9;
  const os_unfair_lock *v10;
  const __CFString *v11;
  const os_unfair_lock *v12;
  const __CFString *v13;
  const os_unfair_lock *v14;
  uint64_t DatabaseForRecord;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if ((_DWORD)result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6)
            os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
    Property = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8)
            os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
    v9 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    v11 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    result = CPRecordGetProperty();
    v13 = (const __CFString *)result;
    if (Property && (result = CFStringGetLength(Property)) != 0)
    {
      if (!a2)
        return result;
    }
    else
    {
      if (!v9)
        return result;
      result = CFStringGetLength(v9);
      if (!a2 || !result)
        return result;
    }
    result = _CalIdentityGetID(Property, v9, v11, v13, a2);
    if ((_DWORD)result != -1)
    {
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
      CPRecordSetProperty();
      DatabaseForRecord = CalGetDatabaseForRecord();
      return _CalDatabaseSetChangeFlags(DatabaseForRecord, 1);
    }
  }
  return result;
}

uint64_t _CalCalendarRemoveAddedSubentity(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;

  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreRemoveRecord();
}

uint64_t __GatherColorCounts(uint64_t a1, const __CFDictionary *a2)
{
  const unsigned __int8 *v4;
  const __CFString *v5;
  const __CFString *v6;

  v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if ((sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1) & 2) == 0)
  {
    if (v4)
    {
      v5 = CFStringCreateWithCString(0, (const char *)v4, 0x8000100u);
      if (v5)
      {
        v6 = v5;
        _UpdateColorCountsWithColorString(v5, a2);
        CFRelease(v6);
      }
    }
  }
  return 0;
}

uint64_t _CompareColorFrequencies(void *key, const void *a2, CFDictionaryRef theDict)
{
  signed int Value;
  signed int v6;

  Value = CFDictionaryGetValue(theDict, key);
  v6 = CFDictionaryGetValue(theDict, a2);
  if (Value < v6)
    return -1;
  else
    return Value > v6;
}

void _UpdateColorCountsWithColorString(const __CFString *a1, const __CFDictionary *a2)
{
  const __CFArray *v4;
  CFIndex Count;
  float HueFromColorString;
  float v7;
  uint64_t v8;
  const __CFString *ValueAtIndex;
  float v10;
  const void *v11;

  if (a1)
  {
    v4 = (const __CFArray *)EKGetDefaultCalendarColors();
    Count = CFArrayGetCount(v4);
    HueFromColorString = _GetHueFromColorString(a1);
    if (Count >= 1)
    {
      v7 = HueFromColorString;
      v8 = 1;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v4, v8 - 1);
        v10 = v7 - _GetHueFromColorString(ValueAtIndex);
        if (v10 < 0.0)
          v10 = -v10;
        if (v10 >= 0.004)
          ValueAtIndex = 0;
        if (v8 >= Count)
          break;
        ++v8;
      }
      while (!ValueAtIndex);
      if (ValueAtIndex)
      {
        v11 = (const void *)(int)(CFDictionaryGetValue(a2, ValueAtIndex) + 1);
        CFDictionarySetValue(a2, ValueAtIndex, v11);
      }
    }
  }
}

float _GetHueFromColorString(const __CFString *a1)
{
  float v1;
  float v2;
  double v3;
  float v4;
  BOOL v5;
  float v7;
  float v8;
  float result;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  char buffer[100];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v20 = 0;
  CFStringGetCString(a1, buffer, 100, 0x8000100u);
  sscanf(buffer, "#%02X%02X%02X", &v21, (char *)&v20 + 4, &v20);
  v1 = (double)v21 / 255.0;
  v2 = (double)SHIDWORD(v20) / 255.0;
  v3 = (double)(int)v20 / 255.0;
  v4 = v3;
  v5 = v1 < v2 || v1 < v4;
  if (v5)
  {
    if (v2 < v1 || v2 < v4)
    {
      if (v2 >= v1)
        v7 = (double)v21 / 255.0;
      else
        v7 = (double)SHIDWORD(v20) / 255.0;
      v8 = v3;
    }
    else
    {
      if (v1 >= v4)
        v7 = v3;
      else
        v7 = (double)v21 / 255.0;
      v8 = (double)SHIDWORD(v20) / 255.0;
    }
  }
  else
  {
    if (v2 >= v4)
      v7 = v3;
    else
      v7 = (double)SHIDWORD(v20) / 255.0;
    v8 = (double)v21 / 255.0;
  }
  result = 0.0;
  if (v8 > 0.0 && vabds_f32(v8, v7) >= 0.00000011921)
  {
    v10 = vabds_f32(v8, v1);
    v11 = vabds_f32(v8, v2);
    v5 = vabds_f32(v7, v1) < 0.00000011921;
    v12 = (float)(v8 - v1) / (float)(v8 - v7);
    v13 = 5.0 - v12;
    v14 = (float)(v8 - v2) / (float)(v8 - v7);
    if (v5)
      v13 = v14 + 3.0;
    v15 = vabds_f32(v7, v4);
    v16 = (float)(v8 - v4) / (float)(v8 - v7);
    v17 = 3.0 - v16;
    v18 = v12 + 1.0;
    if (v15 < 0.00000011921)
      v17 = v18;
    if (v11 >= 0.00000011921)
      v17 = v13;
    v19 = v16 + 5.0;
    if (vabds_f32(v7, v2) >= 0.00000011921)
      v19 = 1.0 - v14;
    if (v10 >= 0.00000011921)
      v19 = v17;
    return v19 / 6.0;
  }
  return result;
}

void _UpdateColorCountsWithCalendar(uint64_t a1, const __CFDictionary *a2)
{
  const os_unfair_lock *Context;
  const __CFString *Property;

  if (!_CalCalendarGetFlag(a1, 2))
  {
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Property = (const __CFString *)CPRecordGetProperty();
    _UpdateColorCountsWithColorString(Property, a2);
  }
}

void CalParticipantPropagateUUIDsFromMainEventToDetachments(uint64_t a1)
{
  CFMutableArrayRef v2;
  void *v3;
  void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  void *v10;
  void *v11;
  void *v12;
  int EntityType;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  const void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  id v31;
  __CFString *v32;
  void *v33;
  void *v34;
  __CFString *v35;
  CFMutableArrayRef v36;

  v2 = CalEventCopyDetachedEvents(a1);
  if (v2)
  {
    v36 = v2;
    v34 = (void *)CalEventCopyAttendees(a1);
    if (v34)
    {
      v3 = (void *)objc_opt_new();
      v4 = (void *)objc_opt_new();
      v5 = CalEventCopyOrganizer(a1);
      if (v5)
      {
        v6 = (const void *)v5;
        CalParticipantSemanticIdentifier(v5);
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = CalOrganizerCopyUUID(v6);
        v35 = (__CFString *)v8;
        if (v7 && v8)
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v8, v7);
        CFRelease(v6);
      }
      else
      {
        v35 = 0;
        v7 = 0;
      }
      if (objc_msgSend(v34, "count", v7))
      {
        for (i = 0; i < objc_msgSend(v34, "count"); ++i)
        {
          objc_msgSend(v34, "objectAtIndexedSubscript:", i);
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          CalParticipantSemanticIdentifier((uint64_t)v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = (void *)CalAttendeeCopyUUID(v10);
          EntityType = CalParticipantGetEntityType((uint64_t)v10);
          if (!v11 || !v12)
            goto LABEL_18;
          if (EntityType == 8)
          {
            objc_msgSend(v4, "objectForKeyedSubscript:", v11);
            v14 = (void *)objc_claimAutoreleasedReturnValue();

            v15 = v4;
            if (!v14)
              goto LABEL_17;
          }
          else
          {
            objc_msgSend(v3, "objectForKeyedSubscript:", v11);
            v16 = (void *)objc_claimAutoreleasedReturnValue();

            v15 = v3;
            if (!v16)
LABEL_17:
              objc_msgSend(v15, "setObject:forKeyedSubscript:", v12, v11);
          }
LABEL_18:

        }
      }
      if (-[__CFArray count](v36, "count"))
      {
        v17 = 0;
        do
        {
          -[__CFArray objectAtIndexedSubscript:](v36, "objectAtIndexedSubscript:", v17);
          v18 = (void *)objc_claimAutoreleasedReturnValue();

          v19 = CalEventCopyOrganizer(v18);
          if (v19)
          {
            v20 = (const void *)v19;
            CalParticipantSemanticIdentifier(v19);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v22 = CalOrganizerCopyUUID(v20);
            v23 = (void *)v22;
            if (v21 && v22)
            {
              if (v35)
                CalParticipantSetUUID((uint64_t)v20, v35);
              else
                objc_msgSend(v4, "setObject:forKeyedSubscript:", v22, v21);
            }
            CFRelease(v20);

          }
          v24 = (void *)CalEventCopyAttendees(v18);
          if (objc_msgSend(v24, "count"))
          {
            v25 = 0;
            do
            {
              objc_msgSend(v24, "objectAtIndexedSubscript:", v25);
              v26 = (void *)objc_claimAutoreleasedReturnValue();

              CalParticipantSemanticIdentifier((uint64_t)v26);
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v28 = (void *)CalAttendeeCopyUUID(v26);
              v29 = CalParticipantGetEntityType((uint64_t)v26);
              if (v27 && v28)
              {
                if (v29 == 8)
                  v30 = v4;
                else
                  v30 = v3;
                v31 = v30;
                objc_msgSend(v31, "objectForKeyedSubscript:", v27);
                v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
                if (v32)
                  CalParticipantSetUUID((uint64_t)v26, v32);
                else
                  objc_msgSend(v31, "setObject:forKeyedSubscript:", v28, v27);

              }
              ++v25;
            }
            while (v25 < objc_msgSend(v24, "count"));
          }

          ++v17;
        }
        while (v17 < -[__CFArray count](v36, "count"));
      }

    }
    v2 = v36;
  }

}

BOOL CalAttendeeUpdateFromICSUserAddress(void *a1, const void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  double *v19;
  id v20;
  void *v21;
  void *v22;
  double v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  double v29;
  void *v30;

  v7 = a1;
  v8 = a3;
  if (a2)
  {
    v9 = a4;
    objc_msgSend(v7, "cn");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      objc_msgSend(v7, "cn");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      CalAttendeeSetDisplayName(a2, v11);

    }
    CalAttendeeSetAddress(a2, objc_msgSend(v7, "value"));
    CalAttendeeSetEmailAddress(a2, objc_msgSend(v7, "emailAddress"));
    CalAttendeeSetPhoneNumber(a2, objc_msgSend(v7, "phoneNumber"));
    v12 = CalAttendeeTypeFromICSCalendarUser(objc_msgSend(v7, "cutype"));
    CalAttendeeSetType((uint64_t)a2, v12);
    v13 = CalAttendeeStatusFromICSParticipationStatus(objc_msgSend(v7, "partstat"));
    CalAttendeeSetStatus(a2, v13);
    v14 = CalAttendeeRoleFromICSRole(objc_msgSend(v7, "role"));
    CalAttendeeSetRole((uint64_t)a2, v14);
    objc_msgSend(v9, "valueForKey:", CFSTR("ItemBridgeOptions"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v16 = objc_msgSend(v15, "unsignedIntegerValue");
    v17 = CalScheduleAgentFromICSScheduleAgent(objc_msgSend(v7, "scheduleAgentWithDefaultValue:", 2 * ((~v16 & 2) == 0)));
    CalParticipantSetScheduleAgent((uint64_t)a2, v17);
    CalParticipantSetRSVP((uint64_t)a2, objc_msgSend(v7, "rsvp"));
    CalAttendeeSetScheduleStatus((uint64_t)a2, objc_msgSend(v7, "schedulestatus"));
    CalAttendeeSetScheduleForceSend(a2, objc_msgSend(v7, "scheduleforcesend") != 0);
    objc_msgSend(v7, "partstatModified");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (double *)MEMORY[0x1E0D0C490];
    if (v18)
    {
      v20 = objc_alloc(MEMORY[0x1E0DDB800]);
      objc_msgSend(v7, "partstatModified");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = (void *)objc_msgSend(v20, "initWithValue:", v21);

      v23 = CalDateFromICSDate(v22, v8);
      if (vabdd_f64(v23, *v19) >= 2.22044605e-16)
        CalAttendeeSetLastModified((uint64_t)a2, v23);

    }
    objc_msgSend(v7, "alternateTimeProposal");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (v24)
    {
      v25 = objc_alloc(MEMORY[0x1E0DDB800]);
      objc_msgSend(v7, "alternateTimeProposal");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "startDate");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = (void *)objc_msgSend(v25, "initWithValue:", v27);

      v29 = CalDateFromICSDateAsUTC(v28);
      CalAttendeeSetProposedStartDate((uint64_t)a2, v29);
      objc_msgSend(v7, "alternateTimeProposal");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      CalAttendeeSetProposedStartDateStatus((uint64_t)a2, objc_msgSend(v30, "status"));

    }
    else
    {
      CalAttendeeSetProposedStartDate((uint64_t)a2, *v19);
      CalAttendeeSetProposedStartDateStatus((uint64_t)a2, 0);
    }
    CalParticipantSaveUnrecognizedPararmeters(v7, (uint64_t)a2);

  }
  return a2 != 0;
}

void CalParticipantSaveUnrecognizedPararmeters(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const __CFString *v20;
  id v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v3, "allParameters");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(v10, "uppercaseString");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if ((_isSavedParameter(v11) & 1) == 0)
        {
          objc_msgSend(v5, "objectForKey:", v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12)
            objc_msgSend(v4, "setObject:forKey:", v12, v10);

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
    }
    while (v7);
  }
  if (objc_msgSend(v4, "count"))
  {
    v20 = CFSTR("extraParams");
    v21 = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 0;
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v13, 1, &v15);
    v14 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v14 = 0;
  }
  CalParticipantSetExternalRepresentation(a2, v14);

}

id ICSUserAddressFromCalAttendee(uint64_t a1)
{
  void *v2;
  const void *v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  const void *v8;
  unsigned int Type;
  unsigned int Status;
  unsigned int Role;
  int ScheduleAgent;
  double LastModified;
  double v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  double ProposedStartDate;
  double v28;
  void *v29;
  void *v30;
  void *v32;
  void *v33;
  void *v34;

  if (a1)
  {
    v2 = (void *)CalAttendeeCopyAddress(a1);
    v3 = (const void *)CalAttendeeCopyEmailAddress(a1);
    v4 = CalAttendeeCopyPhoneNumber(a1);
    v5 = (const void *)v4;
    if (v2)
    {
      v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB888]), "initWithURL:", v2);
      objc_msgSend(v6, "setEmail:", v3);
      objc_msgSend(v6, "setX_apple_telephone:", v5);
      if (!v3)
      {
        if (!v5)
          goto LABEL_11;
        goto LABEL_10;
      }
    }
    else
    {
      if (!v3)
      {
        if (!v4)
        {
          v6 = 0;
LABEL_18:

          return v6;
        }
        v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB888]), "initWithPhoneNumber:", v4);
        goto LABEL_10;
      }
      v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB888]), "initWithEmailAddress:", v3);
      objc_msgSend(v6, "setX_apple_telephone:", v5);
    }
    CFRelease(v3);
    if (!v5)
    {
LABEL_11:
      v7 = CalAttendeeCopyDisplayName(a1);
      if (v7)
      {
        v8 = (const void *)v7;
        objc_msgSend(v6, "setCn:", v7);
        CFRelease(v8);
      }
      Type = CalAttendeeGetType(a1);
      objc_msgSend(v6, "setCutype:", ICSCalendarUserFromCalAttendeeType(Type));
      Status = CalAttendeeGetStatus(a1);
      objc_msgSend(v6, "setPartstat:", ICSParticipationStatusFromCalAttendeeStatus(Status));
      Role = CalAttendeeGetRole(a1);
      objc_msgSend(v6, "setRole:", ICSRoleFromCalAttendeeRole(Role));
      ScheduleAgent = CalParticipantGetScheduleAgent(a1);
      objc_msgSend(v6, "setScheduleagent:", ICSScheduleAgentFromCalScheduleAgent(ScheduleAgent));
      objc_msgSend(v6, "setRsvp:", CalParticipantGetRSVP(a1));
      objc_msgSend(v6, "setScheduleforcesend:", CalAttendeeGetScheduleForceSend(a1));
      LastModified = CalAttendeeGetLastModified(a1);
      v14 = *MEMORY[0x1E0D0C490];
      if (vabdd_f64(LastModified, *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_alloc(MEMORY[0x1E0C99D48]);
        v32 = (void *)objc_msgSend(v15, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
        v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E80]), "initWithName:", CFSTR("GMT"));
        objc_msgSend(v32, "setTimeZone:", v33);
        objc_msgSend(v32, "components:fromDate:", 252, v34);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_alloc(MEMORY[0x1E0DDB808]);
        v18 = objc_msgSend(v16, "year");
        v19 = objc_msgSend(v16, "month");
        v20 = objc_msgSend(v16, "day");
        v21 = objc_msgSend(v16, "hour");
        v22 = v2;
        v23 = objc_msgSend(v16, "minute");
        v24 = objc_msgSend(v16, "second");
        v25 = v23;
        v2 = v22;
        v26 = (void *)objc_msgSend(v17, "initWithYear:month:day:hour:minute:second:", v18, v19, v20, v21, v25, v24);
        objc_msgSend(v6, "setPartstatModified:", v26);

      }
      ProposedStartDate = CalAttendeeGetProposedStartDate(a1);
      if (ProposedStartDate != v14)
      {
        v28 = ProposedStartDate;
        v29 = (void *)objc_opt_new();
        ICSDateTimeForCalDate(v28);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "setStartDate:", v30);

        objc_msgSend(v29, "setStatus:", CalAttendeeGetProposedStartDateStatus(a1));
        objc_msgSend(v6, "setAlternateTimeProposal:", v29);

      }
      CalParticipantApplyExternalRepresentationToICSUser(a1, v6);
      goto LABEL_18;
    }
LABEL_10:
    CFRelease(v5);
    goto LABEL_11;
  }
  v6 = 0;
  return v6;
}

void CalParticipantApplyExternalRepresentationToICSUser(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  char isSavedParameter;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  id v21;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  id v28;
  uint8_t v29[128];
  uint8_t buf[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)CalParticipantCopyExternalRepresentation(a1);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0DDB848], "valueAndParameterClasses");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 0;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v5, v4, &v28);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v28;
    v8 = v7;
    if (v6)
    {
      v21 = v7;
      v22 = v5;
      v23 = v4;
      objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("extraParams"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v25;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v25 != v12)
              objc_enumerationMutation(v9);
            v14 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
            objc_msgSend(v14, "uppercaseString");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            isSavedParameter = _isSavedParameter(v15);

            if ((isSavedParameter & 1) == 0)
            {
              objc_msgSend(v3, "parameterValueForName:", v14);
              v17 = (void *)objc_claimAutoreleasedReturnValue();

              if (v17)
              {
                v18 = CDBiCalendarConversionHandle;
                if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 138543362;
                  v31 = v14;
                  _os_log_impl(&dword_1A5CCB000, v18, OS_LOG_TYPE_FAULT, "We have a saved value for an unrecognized parameter %{public}@ on an attachment, but the property already has a parameter with that name! _isSavedParameter may be out of date.", buf, 0xCu);
                }
              }
              else
              {
                objc_msgSend(v9, "objectForKeyedSubscript:", v14);
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v3, "setParameterValue:forName:", v19, v14);

              }
            }
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
        }
        while (v11);
      }

      v5 = v22;
      v4 = v23;
      v8 = v21;
    }
    else
    {
      v20 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v31 = v8;
        _os_log_impl(&dword_1A5CCB000, v20, OS_LOG_TYPE_ERROR, "Error decoding extra parameters for attendee: %@", buf, 0xCu);
      }
    }

  }
}

id ICSAttendeeCommentFromCalAttendee(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double CommentLastModified;
  void *v9;

  v3 = a2;
  if (a1)
  {
    v4 = (void *)CalAttendeeCopyResponseComment(a1);
    if (v4)
    {
      objc_msgSend(v3, "value");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "absoluteString");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6)
      {
        v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB7B8]), "initWithComment:", v4);
        objc_msgSend(v7, "setX_calendarserver_attendee_ref:", v6);
        CommentLastModified = CalParticipantGetCommentLastModified(a1);
        ICSDateTimeForCalDate(CommentLastModified);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setX_calendarserver_dtstamp:", v9);

      }
      else
      {
        v7 = 0;
      }

    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

BOOL CalOrganizerUpdateFromICSUserAddress(void *a1, void *a2, uint64_t a3, int a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v9 = a1;
  v10 = a2;
  if (a3)
  {
    v11 = a5;
    objc_msgSend(v9, "cn");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend(v9, "cn");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      CalOrganizerSetDisplayName(a3, v13);

    }
    CalOrganizerSetAddress(a3, objc_msgSend(v9, "value"));
    objc_msgSend(v9, "emailAddress");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      v16 = v14;
    }
    else
    {
      objc_msgSend(v10, "emailAddress");
      v16 = (id)objc_claimAutoreleasedReturnValue();
    }
    v17 = v16;

    CalOrganizerSetEmailAddress(a3, v17);
    objc_msgSend(v9, "phoneNumber");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v18;
    if (v18)
    {
      v20 = v18;
    }
    else
    {
      objc_msgSend(v10, "phoneNumber");
      v20 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21 = v20;

    CalOrganizerSetPhoneNumber(a3, v21);
    objc_msgSend(v11, "valueForKey:", CFSTR("ItemBridgeOptions"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    v23 = objc_msgSend(v22, "unsignedIntegerValue");
    if (a4)
      v24 = 0;
    else
      v24 = 2 * ((~v23 & 2) == 0);
    v25 = CalScheduleAgentFromICSScheduleAgent(objc_msgSend(v9, "scheduleAgentWithDefaultValue:", v24));
    CalParticipantSetScheduleAgent(a3, v25);
    CalParticipantSetRSVP(a3, objc_msgSend(v9, "rsvp"));
    CalParticipantSetScheduleForceSend(a3, objc_msgSend(v9, "scheduleforcesend") != 0);
    CalParticipantSaveUnrecognizedPararmeters(v9, a3);

  }
  return a3 != 0;
}

id ICSUserAddressFromCalOrganizer(uint64_t a1)
{
  void *v2;
  const void *v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  const void *v8;
  int ScheduleAgent;
  uint64_t v10;

  if (!a1)
  {
    v6 = 0;
    return v6;
  }
  v2 = (void *)CalOrganizerCopyAddress(a1);
  v3 = (const void *)CalOrganizerCopyEmailAddress(a1);
  v4 = CalOrganizerCopyPhoneNumber(a1);
  v5 = (const void *)v4;
  if (v2)
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB888]), "initWithURL:", v2);
    objc_msgSend(v6, "setEmail:", v3);
    objc_msgSend(v6, "setX_apple_telephone:", v5);
    if (!v3)
    {
      if (!v5)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else
  {
    if (!v3)
    {
      if (!v4)
      {
        v6 = 0;
        goto LABEL_11;
      }
      v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB888]), "initWithPhoneNumber:", v4);
      goto LABEL_10;
    }
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB888]), "initWithEmailAddress:", v3);
    objc_msgSend(v6, "setX_apple_telephone:", v5);
  }
  CFRelease(v3);
  if (v5)
LABEL_10:
    CFRelease(v5);
LABEL_11:
  v7 = CalOrganizerCopyDisplayName(a1);
  if (v7)
  {
    v8 = (const void *)v7;
    objc_msgSend(v6, "setCn:", v7);
    CFRelease(v8);
  }
  ScheduleAgent = CalParticipantGetScheduleAgent(a1);
  objc_msgSend(v6, "setScheduleagent:", ICSScheduleAgentFromCalScheduleAgent(ScheduleAgent));
  objc_msgSend(v6, "setRsvp:", CalParticipantGetRSVP(a1));
  if (CalParticipantGetScheduleForceSend(a1))
    v10 = 2;
  else
    v10 = 0;
  objc_msgSend(v6, "setScheduleforcesend:", v10);
  CalParticipantApplyExternalRepresentationToICSUser(a1, v6);

  return v6;
}

uint64_t _isSavedParameter(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = _isSavedParameter_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&_isSavedParameter_onceToken, &__block_literal_global_11);
  v3 = objc_msgSend((id)_isSavedParameter_savedAttendeeParameters, "containsObject:", v2);

  return v3;
}

void ___isSavedParameter_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", *MEMORY[0x1E0DDBA40], *MEMORY[0x1E0DDBA98], *MEMORY[0x1E0DDB9E0], *MEMORY[0x1E0DDB898], *MEMORY[0x1E0DDBA60], *MEMORY[0x1E0DDBB00], *MEMORY[0x1E0DDBB30], *MEMORY[0x1E0DDBB48], *MEMORY[0x1E0DDBB40], *MEMORY[0x1E0DDBB58], *MEMORY[0x1E0DDBB50], *MEMORY[0x1E0DDB9D8], *MEMORY[0x1E0DDBA18], 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_isSavedParameter_savedAttendeeParameters;
  _isSavedParameter_savedAttendeeParameters = v0;

}

const void *_CalRecurrenceCopyOwningEventTimeZoneIfDifferent(uint64_t a1, const void *a2)
{
  uint64_t Owner;
  const void *started;
  const void *v5;

  Owner = _CalRecurrenceGetOwner(a1, 0);
  if (!Owner)
    return 0;
  started = (const void *)_CalCalendarItemCopyStartTimeZone(Owner);
  v5 = started;
  if (started && CFEqual(started, a2))
  {
    CFRelease(v5);
    return 0;
  }
  return v5;
}

__CFArray *_CalRecurrenceCopyOccurrenceDatesDispatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t GregorianDateWithFallbackToDefaultTimeZone, uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, CFAbsoluteTime a10, double a11, const __CFTimeZone *a12)
{
  uint64_t v23;
  unsigned int Interval;
  double v25;
  CFAbsoluteTime v26;
  CFAbsoluteTime v27;
  double v28;
  uint64_t v29;
  const __CFArray *v30;
  unsigned int v31;
  int v32;
  const __CFArray *v33;
  const __CFArray *v34;
  _BOOL4 ShouldPinMonthDays;
  BOOL (*v36)(const __CFArray *, uint64_t, uint64_t);
  unsigned int v37;
  unsigned int v38;
  unsigned int WeekStart;
  double v40;
  CFAbsoluteTime v41;
  CFAbsoluteTime v42;
  signed int v43;
  int v44;
  double v45;
  double v46;
  const __CFArray *v47;
  const void *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int8 v52;
  double v53;
  CFAbsoluteTime v54;
  CFAbsoluteTime v55;
  int v56;
  double v57;
  double v58;
  double v59;
  const void *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  double v65;
  double v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  unsigned int v75;
  _BOOL4 v76;
  id v77;
  id v78;
  id v79;
  void *v80;
  BOOL v81;
  void *v82;
  double v83;
  int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  void *v89;
  BOOL v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  double v94;
  CFAbsoluteTime v95;
  CFAbsoluteTime v96;
  int v97;
  double v98;
  double v99;
  double v100;
  unint64_t v101;
  const __CFArray *v102;
  uint64_t v103;
  const __CFArray *v104;
  const __CFArray *v105;
  const void *v106;
  unsigned int v107;
  void (*v108)(const __CFArray *, CFRange *, int, CFArrayRef, double, double, double, uint64_t, int, uint64_t);
  uint64_t (**v109);
  int v111;
  SInt32 *p_days;
  unint64_t v113;
  int v114;
  CFDateRef v115;
  CFDateRef v116;
  uint64_t v117;
  double v118;
  BOOL v119;
  char v120;
  const __CFArray *v121;
  BOOL (**v122)(double *, double);
  int v123;
  const __CFArray *v124;
  const __CFArray *v125;
  double v126;
  int v127;
  int v128;
  int v129;
  double v130;
  BOOL v132;
  double v133;
  double v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  int v138;
  double v139;
  CFAbsoluteTime v140;
  BOOL v141;
  BOOL v142;
  int v143;
  double v144;
  BOOL v145;
  char v146;
  CFIndex (*v147)(const __CFArray *, CFRange *, int, CFArrayRef, double, double, double, uint64_t, int, uint64_t);
  double *v148;
  int v149;
  BOOL (*v150)(const __CFArray *, uint64_t, uint64_t);
  BOOL (**v151)(const __CFArray *, uint64_t, uint64_t);
  BOOL (**v152)(double *, double);
  double v153;
  uint64_t v155;
  double v156;
  double v157;
  CFIndex *v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  double v162;
  unint64_t v163;
  unsigned __int8 v164;
  int DaysInMonth;
  double v166;
  _BOOL4 v167;
  double v168;
  double v169;
  _BOOL4 v170;
  CFIndex (*v171)(const __CFArray *, CFRange *, int, CFArrayRef, double, double, double, uint64_t, int, uint64_t);
  unsigned int v172;
  CFArrayRef v173;
  uint64_t (**v174)(unsigned int, uint64_t);
  int v175;
  int v176;
  char v177;
  BOOL (**v178)(uint64_t);
  BOOL (**v179)(double *, double);
  double v180;
  double v181;
  double v183;
  int *v184;
  uint64_t v185;
  uint64_t v186;
  double v187;
  double v188;
  unint64_t v189;
  unsigned __int8 v190;
  int v191;
  double v192;
  _BOOL4 v193;
  double v195;
  CFAbsoluteTime v196;
  const __CFArray *v198;
  char v199;
  const __CFArray *v200;
  CFTypeRef v201;
  const __CFArray *cf;
  CFIndex *v203;
  _BOOL4 v204;
  int v205;
  _BOOL4 v206;
  unsigned int v207;
  int v208;
  void *v210;
  unint64_t v211;
  unsigned int v212;
  __CFArray *theArray;
  void *v214;
  _BYTE values[32];
  CFIndex v216;
  uint64_t v217;
  CFAbsoluteTime v218;
  double v219;
  CFIndex v220;
  uint64_t v221;
  CFAbsoluteTime v222;
  double v223;
  int v224;
  CFGregorianUnits v225;
  CFGregorianUnits v226;
  _OWORD v227[2];
  uint64_t v228;
  CFGregorianDate v229;
  CFGregorianDate v230;

  v228 = *MEMORY[0x1E0C80C00];
  v23 = (uint64_t)a12;
  switch(_CalRecurrenceGetFrequency(a1))
  {
    case 1u:
      theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      Interval = _CalRecurrenceGetInterval(a1);
      *(_QWORD *)values = 0;
      *(_QWORD *)&values[8] = 0;
      CalGregorianDateGetGregorianDateForDay();
      CalGregorianDateGetGregorianDateForDay();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      v26 = v25;
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v226, v27, v26, a12, 4uLL);
      if ((int)(v226.days % Interval) >= 1)
      {
        *(_QWORD *)(&v225.minutes + 1) = 0;
        v225.minutes = 0;
        HIDWORD(v225.seconds) = 0;
        *(_QWORD *)&v225.years = 0;
        *(_QWORD *)&v225.days = Interval - v226.days % Interval;
        CalAbsoluteTimeAddGregorianUnits();
        a10 = v28;
        GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
        a5 = v29;
      }
      v30 = (const __CFArray *)_CalRecurrenceCopyByDayDays(a1);
      v31 = _CalRecurrenceGetByMonthMonths(a1);
      v32 = a8;
      if (v31)
      {
        *(_QWORD *)&v225.years = _CalRecurrenceByMonthFilter;
        *(_QWORD *)&v225.days = v31;
        v33 = (const __CFArray *)_CalRecurrenceCopyByMonthDayDays(a1);
        v34 = v33;
        if (v33 && CFArrayGetCount(v33) >= 1)
        {
          ShouldPinMonthDays = _CalRecurrenceShouldPinMonthDays(a1);
          v36 = _CalRecurrenceByMonthDayFilter;
          if (ShouldPinMonthDays)
            v36 = _CalRecurrenceByMonthDayFilterPinned;
          *(_QWORD *)&v225.minutes = v36;
          *(_QWORD *)&v225.seconds = v34;
          v37 = 2;
          if (!v30)
          {
LABEL_57:
            *(_QWORD *)values = GregorianDateWithFallbackToDefaultTimeZone;
            *(_QWORD *)&values[8] = a5;
            if (a8)
            {
              if (fabs(a11) < 2.22044605e-16 || a11 > 1577840000.0)
                a11 = 1577840000.0;
            }
            if (a10 < a11)
            {
              v111 = a8;
              do
              {
                if (!v37 || vabdd_f64(a10, a9) < 2.22044605e-16)
                  goto LABEL_71;
                p_days = &v225.days;
                v113 = 1;
                do
                {
                  v114 = (*((uint64_t (**)(_QWORD, _BYTE *, const __CFTimeZone *, CFAbsoluteTime))p_days - 1))(*(_QWORD *)p_days, values, a12, a10);
                  if (v113 >= v37)
                    break;
                  ++v113;
                  p_days += 4;
                }
                while ((v114 & 1) != 0);
                v32 = a8;
                if (v114)
                {
LABEL_71:
                  v115 = CFDateCreate(0, a10);
                  if (v115)
                  {
                    v116 = v115;
                    CFArrayAppendValue(theArray, v115);
                    CFRelease(v116);
                  }
                  if (v111)
                    --v111;
                  else
                    v111 = 0;
                }
                *(_QWORD *)values = CalGregorianDateAddDays();
                *(_QWORD *)&values[8] = v117;
                CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
                if (v32)
                  v119 = v111 == 0;
                else
                  v119 = 0;
                v120 = !v119;
                if (v118 >= a11)
                  break;
                a10 = v118;
              }
              while ((v120 & 1) != 0);
            }
            if (v34)
              CFRelease(v34);
            if (v30)
            {
              v121 = v30;
              goto LABEL_354;
            }
            return theArray;
          }
        }
        else
        {
          v37 = 1;
          if (!v30)
            goto LABEL_57;
        }
      }
      else
      {
        v34 = 0;
        v37 = 0;
        if (!v30)
          goto LABEL_57;
      }
      if (CFArrayGetCount(v30) >= 1)
      {
        v109 = (uint64_t (**))&v225 + 2 * v37;
        *v109 = _CalRecurrenceByDayMaskFilter;
        ++v37;
        v109[1] = (uint64_t (*))_CalRecurrenceByDayMaskFromArrayByDayItems(v30);
      }
      goto LABEL_57;
    case 2u:
      theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v38 = _CalRecurrenceGetInterval(a1);
      LODWORD(v220) = 0;
      WeekStart = _CalRecurrenceGetWeekStart(a1);
      CalAbsoluteTimeGetGregorianDateForWeek();
      CalAbsoluteTimeGetGregorianDateForWeek();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      v41 = v40;
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v225, v42, v41, a12, 4uLL);
      v43 = v225.days / 7 % v38;
      if (v43 <= 0)
        v44 = 0;
      else
        v44 = 7 * (v38 - v43);
      *(_QWORD *)(&v226.minutes + 1) = 0;
      v226.minutes = 0;
      *(_QWORD *)&v226.years = 0;
      HIDWORD(v226.seconds) = 0;
      *(_QWORD *)&v226.days = (v44 - v220);
      CalAbsoluteTimeAddGregorianUnits();
      v46 = v45;
      v47 = (const __CFArray *)_CalRecurrenceCopyByDayDays(a1);
      v48 = (const void *)_CalRecurrenceCopyBySetPos(a1);
      v49 = _CalRecurrenceGetByMonthMonths(a1);
      v222 = 0.0;
      v223 = 0.0;
      if (v49)
      {
        *(_QWORD *)&v226.years = _CalRecurrenceByMonthFilter;
        *(_QWORD *)&v226.days = v49;
        v50 = 1;
      }
      else
      {
        v50 = 0;
      }
      v227[0] = 0uLL;
      if (!v48 || !CFArrayGetCount((CFArrayRef)v48))
      {
        *(CFAbsoluteTime *)v227 = a10;
        *((double *)v227 + 1) = a11;
        v122 = (BOOL (**)(double *, double))&v226 + 2 * v50++;
        *v122 = _CalRecurrenceRangeFilter;
        v122[1] = (BOOL (*)(double *, double))v227;
        if (v48)
        {
          CFRelease(v48);
          v48 = 0;
        }
      }
      if (v47)
      {
        if (CFArrayGetCount(v47) < 1)
          v123 = 1 << CalAbsoluteTimeGetDayOfWeek();
        else
          v123 = _CalRecurrenceByDayMaskFromArrayByDayItems(v47);
        CFRelease(v47);
      }
      else
      {
        v123 = 1 << CalAbsoluteTimeGetDayOfWeek();
      }
      v128 = (v123 >> WeekStart) | (v123 << (7 - WeekStart));
      if (!WeekStart)
        v128 = v123;
      v208 = v128;
      v129 = a8;
      if (a9 >= a10)
      {
        if (a9 < a11 || (v129 = a8, fabs(a11) < 2.22044605e-16))
        {
          _CalInsertAbsoluteTimeIntoArrayAtIndex(theArray, 0, a9);
          v129 = a8 ? a8 - 1 : 0;
          if (v48)
            *(_QWORD *)&v222 = 1;
        }
      }
      v130 = a11;
      if (a8)
      {
        if (fabs(a11) >= 2.22044605e-16 && a11 <= 1577840000.0)
          v130 = a11;
        else
          v130 = 1577840000.0;
      }
      if (v129)
        v132 = 1;
      else
        v132 = a8 == 0;
      if (v132 && v46 < v130)
      {
        v205 = 7 * v38;
        if (v48)
          v133 = 0.0;
        else
          v133 = a9;
        v134 = fabs(a11);
        do
        {
          *(double *)&v135 = 0.0;
          v136 = WeekStart;
          v137 = v208;
          do
          {
            if ((v137 & 1) != 0)
            {
              v138 = v136 >= WeekStart ? 0 : 7;
              *(_DWORD *)&values[16] = 0;
              *(_QWORD *)&values[20] = 0;
              *(_DWORD *)&values[28] = 0;
              *(_QWORD *)values = 0;
              *(_QWORD *)&values[8] = v136 - WeekStart + v138;
              CalAbsoluteTimeAddGregorianUnits();
              v140 = v139;
              v141 = vabdd_f64(v139, a9) < 2.22044605e-16 && v48 == 0;
              if (!v141
                && (!v50
                 || _CalRecurrenceApplyFiltersToSingleDate(0, (uint64_t)&v226, v50, (uint64_t)a12, v139, v133)))
              {
                _CalAppendAbsoluteTimeToArray(theArray, v140);
                if (v129)
                  v142 = v48 == 0;
                else
                  v142 = 0;
                v143 = v142;
                v129 -= v143;
                ++v135;
              }
            }
            if (v137 < 2)
              break;
            v136 = (v136 + 1) % 7;
            if (v136 == WeekStart)
              break;
            v137 >>= 1;
          }
          while (v134 >= 2.22044605e-16 || v129);
          v223 = *(double *)&v135;
          if (v48 && v135 >= 1)
          {
            _CalRecurrenceApplyBySetPosToRange(theArray, (CFArrayRef)v48, (CFIndex *)&v222, v129, a10, a11, a9);
            *(double *)&v135 = v223;
            if (v129)
              v129 -= LODWORD(v223);
            else
              v129 = 0;
          }
          *(_QWORD *)values = 0;
          *(_DWORD *)&values[8] = v205;
          memset(&values[12], 0, 20);
          CalAbsoluteTimeAddGregorianUnits();
          *(_QWORD *)&v222 += v135;
          v223 = 0.0;
          if (a8)
            v145 = v129 == 0;
          else
            v145 = 0;
          v146 = !v145;
        }
        while (v144 < v130 && (v146 & 1) != 0);
      }
      if (v48)
      {
        v121 = (const __CFArray *)v48;
        goto LABEL_354;
      }
      return theArray;
    case 3u:
      LODWORD(v216) = a8;
      theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v51 = _CalRecurrenceGetInterval(a1);
      memset(v227, 0, 24);
      v52 = BYTE5(a2);
      CalGregorianDateGetGregorianDateForMonth();
      CalGregorianDateGetGregorianDateForMonth();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      v54 = v53;
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v226, v55, v54, a12, 2uLL);
      *(_QWORD *)&v225.years = 0;
      v225.days = 1 - ((int)((unint64_t)GregorianDateWithFallbackToDefaultTimeZone >> 16) >> 24);
      v56 = v226.months % v51;
      memset(&v225.hours, 0, 20);
      CalAbsoluteTimeAddGregorianUnits();
      v58 = v57;
      if (v56 >= 1)
      {
        v225.years = 0;
        v225.months = v51 - v56;
        memset(&v225.days, 0, 24);
        CalAbsoluteTimeAddGregorianUnits();
        v58 = v59;
      }
      v206 = _CalRecurrenceShouldPinMonthDays(a1);
      v60 = (const void *)_CalRecurrenceCopyBySetPos(a1);
      v61 = _CalRecurrenceGetByMonthMonths(a1);
      v62 = v61;
      v222 = 0.0;
      v223 = 0.0;
      v220 = 0;
      v221 = 0;
      if (v61)
      {
        *(_QWORD *)&v225.years = _CalRecurrenceByMonthFilter;
        *(_QWORD *)&v225.days = v61;
        v63 = 1;
      }
      else
      {
        v63 = 0;
      }
      v124 = (const __CFArray *)_CalRecurrenceCopyByMonthDayDays(a1);
      *(double *)&v125 = COERCE_DOUBLE(_CalRecurrenceCopyByDayDays(a1));
      v126 = *(double *)&v125;
      v218 = 0.0;
      v219 = 0.0;
      cf = v125;
      if (*(double *)&v125 == 0.0)
      {
        v127 = 1;
        if (!v124)
          goto LABEL_184;
      }
      else if (CFArrayGetCount(v125) < 1)
      {
        LOBYTE(v126) = 0;
        v127 = 1;
        if (!v124)
          goto LABEL_184;
      }
      else
      {
        v127 = 0;
        v218 = COERCE_DOUBLE(_CalRecurrenceByDayGenerator);
        v219 = v126;
        LOBYTE(v126) = 1;
        if (!v124)
          goto LABEL_184;
      }
      if (CFArrayGetCount(v124))
      {
        if (v127)
        {
          v212 = 0;
          v147 = _CalRecurrenceByMonthDayGenerator;
          if (v206)
            v147 = _CalRecurrenceByMonthDayGeneratorPinned;
          v218 = *(double *)&v147;
          v148 = &v219;
        }
        else
        {
          v150 = _CalRecurrenceByMonthDayFilterPinned;
          if (!v206)
            v150 = _CalRecurrenceByMonthDayFilter;
          v151 = (BOOL (**)(const __CFArray *, uint64_t, uint64_t))&v225 + 2 * v63;
          *v151 = v150;
          v148 = (double *)(v151 + 1);
          v212 = 1;
        }
        *(_QWORD *)v148 = v124;
        goto LABEL_190;
      }
LABEL_184:
      v212 = 0;
      if ((LOBYTE(v126) & 1) == 0)
      {
        v149 = 0;
        goto LABEL_195;
      }
LABEL_190:
      if (!v60 || !CFArrayGetCount((CFArrayRef)v60))
      {
        v222 = a10;
        v223 = a11;
        v152 = (BOOL (**)(double *, double))&v225 + 2 * v212++ + 2 * v63;
        *v152 = _CalRecurrenceRangeFilter;
        v152[1] = (BOOL (*)(double *, double))&v222;
        if (v60)
        {
          CFRelease(v60);
          v60 = 0;
        }
      }
      v149 = 1;
LABEL_195:
      if (a9 >= a10 && (a9 < a11 || fabs(a11) < 2.22044605e-16))
      {
        _CalInsertAbsoluteTimeIntoArrayAtIndex(theArray, 0, a9);
        if (a8)
          LODWORD(v216) = a8 - 1;
        if (v60)
          v220 = 1;
      }
      v153 = a11;
      if (a8)
      {
        if (fabs(a11) >= 2.22044605e-16 && a11 <= 1577840000.0)
          v153 = a11;
        else
          v153 = 1577840000.0;
      }
      v155 = (uint64_t)a12;
      if (v58 < v153)
      {
        v156 = fabs(a11);
        if (v60)
          v157 = 0.0;
        else
          v157 = a9;
        v158 = &v216;
        if (v60)
          v158 = 0;
        v203 = v158;
        do
        {
          if (a8 && !(_DWORD)v216)
            break;
          if (!v62
            || (v159 = 0, _CalRecurrenceApplyFiltersToSingleDate(0, (uint64_t)&v225, 1, v155, v58, a9)))
          {
            if (v149)
            {
              v159 = _CalRecurrenceApplyGenerator(theArray, (uint64_t)&v218, (uint64_t)&v225 + 16 * v63, v212, 3, v203, v155, v157, a10, a11, v58);
LABEL_222:
              v221 = v159;
              if (v60)
              {
                if (v159)
                {
                  _CalRecurrenceApplyBySetPosToRange(theArray, (CFArrayRef)v60, &v220, v216, a10, a11, a9);
                  v159 = v221;
                  if ((_DWORD)v216)
                    LODWORD(v216) = v216 - v221;
                }
              }
              goto LABEL_238;
            }
            v160 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
            v162 = v161;
            v163 = v160 & 0xFFFF00FFFFFFFFFFLL;
            v164 = v52;
            if (v206)
            {
              DaysInMonth = CalGregorianDateGetDaysInMonth();
              v164 = DaysInMonth;
              if ((char)v52 <= DaysInMonth)
                v164 = v52;
            }
            *(_QWORD *)&v229.year = ((unint64_t)v164 << 40) | v163;
            v229.second = v162;
            if (CFGregorianDateIsValid(v229, 7uLL))
            {
              v155 = (uint64_t)a12;
              CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
              v159 = 0;
              v167 = v166 < a11 || v156 < 2.22044605e-16;
              if (v166 >= a10 && v167)
              {
                if (vabdd_f64(v166, a9) >= 2.22044605e-16)
                {
                  _CalAppendAbsoluteTimeToArray(theArray, v166);
                  if (!(_DWORD)v216)
                  {
                    v159 = 1;
                    goto LABEL_222;
                  }
                  v159 = 1;
                  if (v60)
                    goto LABEL_222;
                  LODWORD(v216) = v216 - 1;
                  v159 = 1;
                }
                else
                {
                  v159 = 0;
                }
              }
            }
            else
            {
              v159 = 0;
              v155 = (uint64_t)a12;
            }
          }
LABEL_238:
          *(_DWORD *)values = 0;
          *(_DWORD *)&values[4] = v51;
          *(_OWORD *)&values[8] = v227[0];
          *(_QWORD *)&values[24] = *(_QWORD *)&v227[1];
          CalAbsoluteTimeAddGregorianUnits();
          v58 = v168;
          v220 += v159;
          v221 = 0;
        }
        while (v168 < v153);
      }
      if (cf)
        CFRelease(cf);
      if (v124)
        CFRelease(v124);
      if (v60)
      {
        v121 = (const __CFArray *)v60;
        goto LABEL_354;
      }
      return theArray;
    case 4u:
      if (_CalRecurrenceIsSimpleYearly(a1))
      {
        v64 = a2;
        v65 = *(double *)&a5;
        v66 = *(double *)&a7;
        v67 = (void *)_CalRecurrenceCopyOccurrenceDatesDispatch_sCalendar;
        if (!_CalRecurrenceCopyOccurrenceDatesDispatch_sCalendar)
        {
          objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianGMTCalendar");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          v69 = objc_msgSend(v68, "copy");
          v70 = (void *)_CalRecurrenceCopyOccurrenceDatesDispatch_sCalendar;
          _CalRecurrenceCopyOccurrenceDatesDispatch_sCalendar = v69;

          v67 = (void *)_CalRecurrenceCopyOccurrenceDatesDispatch_sCalendar;
        }
        objc_msgSend(v67, "setTimeZone:", a12);
        v71 = objc_alloc_init(MEMORY[0x1E0C99D78]);
        v72 = objc_alloc_init(MEMORY[0x1E0C99D78]);
        v73 = objc_alloc_init(MEMORY[0x1E0C99D78]);
        objc_msgSend(v71, "setYear:", (int)v64);
        objc_msgSend(v71, "setMonth:", v64 << 24 >> 56);
        objc_msgSend(v71, "setDay:", v64 << 16 >> 56);
        objc_msgSend(v71, "setHour:", v64 << 8 >> 56);
        objc_msgSend(v71, "setMinute:", v64 >> 56);
        objc_msgSend(v71, "setSecond:", (uint64_t)*(double *)&a3);
        objc_msgSend(v72, "setYear:", (int)GregorianDateWithFallbackToDefaultTimeZone);
        objc_msgSend(v72, "setMonth:", GregorianDateWithFallbackToDefaultTimeZone << 24 >> 56);
        objc_msgSend(v72, "setDay:", GregorianDateWithFallbackToDefaultTimeZone << 16 >> 56);
        objc_msgSend(v72, "setHour:", GregorianDateWithFallbackToDefaultTimeZone << 8 >> 56);
        objc_msgSend(v72, "setMinute:", GregorianDateWithFallbackToDefaultTimeZone >> 56);
        objc_msgSend(v72, "setSecond:", (uint64_t)v65);
        objc_msgSend(v73, "setYear:", (int)a6);
        objc_msgSend(v73, "setMonth:", a6 << 24 >> 56);
        objc_msgSend(v73, "setDay:", a6 << 16 >> 56);
        objc_msgSend(v73, "setHour:", a6 << 8 >> 56);
        objc_msgSend(v73, "setMinute:", a6 >> 56);
        v214 = v73;
        objc_msgSend(v73, "setSecond:", (uint64_t)v66);
        v74 = (void *)_CalRecurrenceCopyOccurrenceDatesDispatch_sCalendar;
        v75 = _CalRecurrenceGetInterval(a1);
        v76 = _CalRecurrenceShouldPinMonthDays(a1);
        v77 = v74;
        v78 = v71;
        v79 = v72;
        theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        v80 = (void *)objc_msgSend(v78, "copy");
        v210 = v79;
        objc_msgSend(v80, "setYear:", objc_msgSend(v79, "year"));
        v81 = _CalValidateCalDate(v77, v80, v76);
        objc_msgSend(v77, "dateFromComponents:", v80);
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v82, "timeIntervalSinceReferenceDate");
        if (a8)
        {
          if (fabs(a11) < 2.22044605e-16 || a11 > 1577840000.0)
            a11 = 1577840000.0;
        }
        if (v83 <= a11)
        {
          v85 = a8;
          v86 = v75;
          if (a8)
            v87 = -1;
          else
            v87 = 0;
          v88 = v86;
          do
          {
            if (v83 >= a10 && v81)
            {
              CFArrayAppendValue(theArray, v82);
              v85 += v87;
            }
            objc_msgSend(v80, "setYear:", objc_msgSend(v80, "year") + v88);
            objc_msgSend(v80, "setDay:", objc_msgSend(v78, "day"));
            v81 = _CalValidateCalDate(v77, v80, v76);
            objc_msgSend(v77, "dateFromComponents:", v80);
            v89 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v89, "timeIntervalSinceReferenceDate");
            v82 = v89;
            if (a8)
              v90 = v85 == 0;
            else
              v90 = 0;
            v91 = !v90;
          }
          while (v83 <= a11 && (v91 & 1) != 0);
        }

        return theArray;
      }
      v224 = a8;
      theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v92 = _CalRecurrenceGetInterval(a1);
      memset(v227, 0, 28);
      v93 = a2;
      CalGregorianDateGetGregorianDateForYear();
      CalGregorianDateGetGregorianDateForYear();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      v95 = v94;
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v226, v96, v95, a12, 1uLL);
      v97 = v226.years % v92;
      *(_QWORD *)&v225.years = 0;
      v225.days = 1 - CFAbsoluteTimeGetDayOfYear(a10, a12);
      memset(&v225.hours, 0, 20);
      CalAbsoluteTimeAddGregorianUnits();
      v99 = v98;
      v207 = v92;
      if (v97 >= 1)
      {
        v225.years = v92 - v97;
        memset(&v225.months, 0, 28);
        CalAbsoluteTimeAddGregorianUnits();
        v99 = v100;
      }
      v101 = v93;
      v211 = v93 >> 40;
      v204 = _CalRecurrenceShouldPinMonthDays(a1);
      v222 = 0.0;
      v223 = 0.0;
      v220 = 0;
      v221 = 0;
      v218 = 0.0;
      v219 = 0.0;
      *(double *)&v102 = COERCE_DOUBLE(_CalRecurrenceCopyByYearDayDays(a1));
      *(double *)&v103 = COERCE_DOUBLE(_CalRecurrenceCopyByDayDays(a1));
      *(double *)&v104 = COERCE_DOUBLE(_CalRecurrenceCopyByMonthDayDays(a1));
      v105 = (const __CFArray *)_CalRecurrenceCopyByWeekWeeks(a1);
      v106 = (const void *)_CalRecurrenceCopyBySetPos(a1);
      v107 = _CalRecurrenceGetByMonthMonths(a1);
      v200 = v102;
      v201 = (CFTypeRef)v103;
      if (*(double *)&v102 != 0.0 && CFArrayGetCount(v102) >= 1)
      {
        *(double *)&v103 = 0.0;
        v108 = _CalRecurrenceByYearDayGenerator;
        v222 = COERCE_DOUBLE(_CalRecurrenceByYearDayGenerator);
        v223 = *(double *)&v102;
LABEL_266:
        if (v107)
        {
          v101 = v93;
          goto LABEL_277;
        }
        if (!v105)
        {
          v172 = v207;
          if (v108 == _CalRecurrenceByYearDayGenerator)
          {
            v198 = v104;
            v177 = 1;
            v101 = v93;
            goto LABEL_285;
          }
          v101 = v93;
LABEL_276:
          v107 = 1 << (((v101 >> 8) >> 24) - 1);
          goto LABEL_277;
        }
        v172 = v207;
LABEL_270:
        if (CFArrayGetCount(v105))
        {
          v101 = v93;
          goto LABEL_279;
        }
        v90 = v108 == _CalRecurrenceByYearDayGenerator;
        v101 = v93;
        if (v90)
          goto LABEL_279;
        goto LABEL_276;
      }
      if (*(double *)&v104 != 0.0 && CFArrayGetCount(v104) >= 1)
      {
        if (_CalRecurrenceShouldPinMonthDays(a1))
          v108 = (void (*)(const __CFArray *, CFRange *, int, CFArrayRef, double, double, double, uint64_t, int, uint64_t))_CalRecurrenceByMonthDayGeneratorPinned;
        else
          v108 = (void (*)(const __CFArray *, CFRange *, int, CFArrayRef, double, double, double, uint64_t, int, uint64_t))_CalRecurrenceByMonthDayGenerator;
        v222 = *(double *)&v108;
        v223 = *(double *)&v104;
        if (*(double *)&v103 == 0.0)
        {
          v201 = 0;
        }
        else if (CFArrayGetCount((CFArrayRef)v103) < 1)
        {
          *(double *)&v103 = 0.0;
        }
        else
        {
          *(_QWORD *)&v225.years = _CalRecurrenceByDayFilter;
          *(_QWORD *)&v225.days = v103;
          v103 = 1;
        }
        goto LABEL_266;
      }
      if (*(double *)&v103 != 0.0 && CFArrayGetCount((CFArrayRef)v103) >= 1)
      {
        v169 = *(double *)&v103;
        *(double *)&v103 = 0.0;
        v108 = (void (*)(const __CFArray *, CFRange *, int, CFArrayRef, double, double, double, uint64_t, int, uint64_t))_CalRecurrenceByDayGenerator;
        v222 = COERCE_DOUBLE(_CalRecurrenceByDayGenerator);
        v223 = v169;
        goto LABEL_266;
      }
      if (!v107)
      {
        if (!v105)
        {
          v198 = v104;
          v175 = 0;
          *(double *)&v103 = 0.0;
          v199 = 1;
          v172 = v207;
          goto LABEL_290;
        }
        v172 = v207;
        if (CFArrayGetCount(v105) < 1)
        {
          v198 = v104;
          v175 = 0;
          LODWORD(v103) = 0;
          if (!CFArrayGetCount(v105))
          {
            v199 = 0;
            *(double *)&v103 = 0.0;
            goto LABEL_290;
          }
          goto LABEL_281;
        }
        if (*(double *)&v103 != 0.0)
          CFRelease((CFTypeRef)v103);
        v225.years = 0;
        v225.months = CalAbsoluteTimeGetDayOfWeek();
        *(_QWORD *)values = &v225;
        *(double *)&v173 = COERCE_DOUBLE(CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0D0C4A8]));
        *(double *)&v103 = 0.0;
        v108 = (void (*)(const __CFArray *, CFRange *, int, CFArrayRef, double, double, double, uint64_t, int, uint64_t))_CalRecurrenceByDayGenerator;
        v222 = COERCE_DOUBLE(_CalRecurrenceByDayGenerator);
        v223 = *(double *)&v173;
        v201 = v173;
        goto LABEL_270;
      }
      if (*(double *)&v104 != 0.0)
        CFRelease(v104);
      *(_QWORD *)&v225.years = SBYTE5(v93);
      *(double *)&v104 = COERCE_DOUBLE(CFArrayCreate(0, (const void **)&v225, 1, 0));
      v170 = _CalRecurrenceShouldPinMonthDays(a1);
      LODWORD(v103) = 0;
      v171 = _CalRecurrenceByMonthDayGenerator;
      if (v170)
        v171 = _CalRecurrenceByMonthDayGeneratorPinned;
      v222 = *(double *)&v171;
      v223 = *(double *)&v104;
LABEL_277:
      v174 = (uint64_t (**)(unsigned int, uint64_t))&v225 + 2 * v103;
      v103 = (v103 + 1);
      *v174 = _CalRecurrenceByMonthFilter;
      v174[1] = (uint64_t (*)(unsigned int, uint64_t))v107;
      if (!v105)
      {
        v198 = v104;
        v177 = 1;
        v172 = v207;
        goto LABEL_285;
      }
      v172 = v207;
LABEL_279:
      v198 = v104;
      if (!CFArrayGetCount(v105))
      {
        v177 = 0;
        goto LABEL_285;
      }
      v175 = 1;
LABEL_281:
      v221 = (uint64_t)v105;
      v176 = _CalRecurrenceGetWeekStart(a1);
      v177 = 0;
      LODWORD(v220) = v176;
      v178 = (BOOL (**)(uint64_t))&v225 + 2 * v103;
      v103 = (v103 + 1);
      *v178 = _CalRecurrenceByWeekNoFilter;
      v178[1] = (BOOL (*)(uint64_t))&v220;
      if (!v175)
      {
        v199 = 0;
        v175 = 0;
        goto LABEL_290;
      }
LABEL_285:
      v199 = v177;
      if (!v106 || !CFArrayGetCount((CFArrayRef)v106))
      {
        v218 = a10;
        v219 = a11;
        v179 = (BOOL (**)(double *, double))&v225 + 2 * v103;
        v103 = (v103 + 1);
        *v179 = _CalRecurrenceRangeFilter;
        v179[1] = (BOOL (*)(double *, double))&v218;
        if (v106)
        {
          CFRelease(v106);
          v106 = 0;
        }
      }
      v175 = 1;
LABEL_290:
      v216 = 0;
      v217 = 0;
      v180 = fabs(a11);
      if (a9 >= a10 && (a9 < a11 || v180 < 2.22044605e-16))
      {
        _CalInsertAbsoluteTimeIntoArrayAtIndex(theArray, 0, a9);
        if (a8)
          v224 = a8 - 1;
        if (v106)
          v216 = 1;
      }
      v181 = a11;
      if (a8)
      {
        if (v180 >= 2.22044605e-16 && a11 <= 1577840000.0)
          v181 = a11;
        else
          v181 = 1577840000.0;
      }
      if (v99 < v181)
      {
        if (v106)
          v183 = 0.0;
        else
          v183 = a9;
        if (v106)
          v184 = 0;
        else
          v184 = &v224;
        while (1)
        {
          if (a8 && !v224)
            goto LABEL_344;
          if (v175)
          {
            v185 = _CalRecurrenceApplyGenerator(theArray, (uint64_t)&v222, (uint64_t)&v225, v103, 4, v184, v23, v183, a10, a11, v99);
LABEL_315:
            v217 = v185;
            if (v106)
            {
              if (v185)
              {
                _CalRecurrenceApplyBySetPosToRange(theArray, (CFArrayRef)v106, &v216, v224, a10, a11, a9);
                v185 = v217;
                if (v224)
                  v224 -= v217;
              }
            }
            goto LABEL_334;
          }
          v186 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
          v188 = v187;
          v189 = v186 & 0xFFFF0000FFFFFFFFLL;
          v190 = v211;
          if (v204)
          {
            v191 = CalGregorianDateGetDaysInMonth();
            v190 = v191;
            if (v191 >= (char)v211)
              v190 = v211;
          }
          *(_QWORD *)&v230.year = v101 & 0xFF00000000 | ((unint64_t)v190 << 40) | v189;
          v230.second = v188;
          if (!CFGregorianDateIsValid(v230, 7uLL))
            break;
          v23 = (uint64_t)a12;
          CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
          v193 = v192 < a11 || v180 < 2.22044605e-16;
          if (v192 < a10 || !v193)
          {
            v185 = 0;
LABEL_333:
            v172 = v207;
            goto LABEL_334;
          }
          v196 = v192;
          v172 = v207;
          if (vabdd_f64(v192, a9) >= 2.22044605e-16)
          {
            if (!(_DWORD)v103
              || (v185 = 0,
                  _CalRecurrenceApplyFiltersToSingleDate(0, (uint64_t)&v225, v103, (uint64_t)a12, v192, a9)))
            {
              _CalAppendAbsoluteTimeToArray(theArray, v196);
              if (!v224)
              {
                v185 = 1;
                goto LABEL_315;
              }
              v185 = 1;
              if (v106)
                goto LABEL_315;
              --v224;
              v185 = 1;
            }
          }
          else
          {
            v185 = 0;
          }
LABEL_334:
          *(_DWORD *)values = v172;
          *(_OWORD *)&values[4] = v227[0];
          *(_OWORD *)&values[16] = *(_OWORD *)((char *)v227 + 12);
          CalAbsoluteTimeAddGregorianUnits();
          v99 = v195;
          v216 += v185;
          v217 = 0;
          if (v195 >= v181)
            goto LABEL_344;
        }
        v185 = 0;
        v23 = (uint64_t)a12;
        goto LABEL_333;
      }
LABEL_344:
      if (v201)
        CFRelease(v201);
      if (v198)
        CFRelease(v198);
      if (v200)
        CFRelease(v200);
      if ((v199 & 1) == 0)
        CFRelease(v105);
      if (v106)
      {
        v121 = (const __CFArray *)v106;
LABEL_354:
        CFRelease(v121);
      }
      return theArray;
    default:
      return 0;
  }
}

double _CalRecurrenceGetOrComputeCachedEndDate(uint64_t a1, int a2, int a3, const void *a4, double a5)
{
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  const void *v14;
  const void *v15;
  uint64_t GregorianDateWithFallbackToDefaultTimeZone;
  uint64_t v17;
  uint64_t v18;
  uint64_t Owner;
  uint64_t v20;
  _BOOL4 IsAllDay;
  CDBRecurrenceGenerator *v22;
  void *v23;
  void *v24;
  CFTypeRef v25;
  uint64_t Null;
  uint64_t v27;
  __CFArray *v28;
  const __CFArray *v29;
  CFIndex Count;
  const void *ValueAtIndex;
  const void *v32;
  uint64_t v34;

  v10 = _CalRecurrenceCopyCachedEndDate(a1);
  v11 = *(double *)&v10;
  v12 = *MEMORY[0x1E0D0C490];
  if (vabdd_f64(*(double *)&v10, *MEMORY[0x1E0D0C490]) < 2.22044605e-16)
    goto LABEL_9;
  v13 = *(double *)&v10;
  if (a3)
  {
    v14 = (const void *)CalTimeZoneCopyCFTimeZone();
    v13 = v12;
    if (v14)
    {
      v15 = v14;
      if (CFEqual(v14, a4))
        v13 = v11;
      else
        v13 = v12;
      CFRelease(v15);
    }
  }
  if (vabdd_f64(v13, v12) < 2.22044605e-16)
  {
LABEL_9:
    GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    v18 = v17;
    Owner = _CalRecurrenceGetOwner(a1, 0);
    if (Owner && (v20 = Owner, IsAllDay = _CalCalendarItemIsAllDay(Owner), a2) && IsAllDay)
    {
      v22 = objc_alloc_init(CDBRecurrenceGenerator);
      -[CDBRecurrenceGenerator computeRecurrenceEndDateForCalEvent:recurrenceRule:locked:](v22, "computeRecurrenceEndDateForCalEvent:recurrenceRule:locked:", v20, a1, 1);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v23;
      if (v23)
        v25 = CFRetain(v23);
      else
        v25 = 0;

      if (!v25)
      {
LABEL_24:
        v34 = *(_QWORD *)&a5;
        goto LABEL_25;
      }
    }
    else
    {
      Null = CalGregorianDateGetNull();
      v28 = _CalRecurrenceCopyOccurrenceDatesDispatch(a1, GregorianDateWithFallbackToDefaultTimeZone, v18, GregorianDateWithFallbackToDefaultTimeZone, v18, Null, v27, a2, a5, a5, 0.0, (const __CFTimeZone *)a4);
      if (!v28)
        goto LABEL_24;
      v29 = v28;
      Count = CFArrayGetCount(v28);
      if (Count < 1)
      {
        v25 = 0;
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v29, Count - 1);
        v25 = ValueAtIndex;
        if (ValueAtIndex)
          CFRetain(ValueAtIndex);
      }
      CFRelease(v29);
      if (!v25)
        goto LABEL_24;
    }
    a5 = MEMORY[0x1A85B424C](v25);
    v34 = *(_QWORD *)&a5;
    CFRelease(v25);
LABEL_25:
    v32 = (const void *)CalCFTimeZoneCopyCalTimeZone();
    CalDateTimeSetTimeZone();
    CFRelease(v32);
    _CalRecurrenceSetCachedEndDate(a1, v34);
    CalDateTimeRelease();
    return a5;
  }
  CalDateTimeRelease();
  return v13;
}

__CFArray *_CalRecurrenceCopyOccurrenceDatesInDateRange(uint64_t a1, uint64_t a2, const __CFString *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, char a10)
{
  os_unfair_lock_s *RecordLock;
  __CFArray *v20;

  if (a10)
    return _CalRecurrenceCopyOccurrenceDatesInDateRangeOrCountLimited(a1, a2, a3, a4, a5, a6, a7, a8, 0, a9);
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v20 = _CalRecurrenceCopyOccurrenceDatesInDateRangeOrCountLimited(a1, a2, a3, a4, a5, a6, a7, a8, 0, a9);
  if (RecordLock)
  {
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(RecordLock);
    os_unfair_lock_unlock(RecordLock);
  }
  return v20;
}

__CFArray *_CalRecurrenceCopyOccurrenceDatesInDateRangeOrCountLimited(uint64_t a1, uint64_t a2, const __CFString *a3, unsigned int a4, uint64_t GregorianDateWithFallbackToDefaultTimeZone, uint64_t a6, uint64_t a7, uint64_t a8, int a9, const void *a10)
{
  const void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  const void *v20;
  uint64_t v21;
  const void *Owner;
  uint64_t v23;
  double v24;
  double v25;
  double EndDate;
  double v27;
  int Count;
  int v29;
  _BOOL4 v30;
  const void *v31;
  double v32;
  __CFArray *v33;
  double v35;
  double v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CFAbsoluteTime v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v15 = a10;
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  v17 = v16;
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  v19 = v18;
  v20 = _CalRecurrenceCopyOwningEventTimeZoneIfDifferent(a1, a10);
  if (v20 && !CFEqual(a10, v20))
  {
    GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    a7 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    a8 = v21;
    v15 = v20;
  }
  Owner = (const void *)_CalRecurrenceGetOwner(a1, 0);
  v23 = (uint64_t)Owner;
  if (Owner && _CalEntityIsOfType(Owner, 2))
    _CalEventIsAllDay(v23);
  CalDateTimeGetAbsoluteTime();
  v25 = v24;
  EndDate = _CalRecurrenceGetEndDate(a1);
  v27 = *MEMORY[0x1E0D0C490];
  if (vabdd_f64(EndDate, *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
  {
    if (_CalCalendarItemIsFloating(v23))
    {
      v31 = (const void *)CalTimeZoneCopyCFTimeZone();
      CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
      EndDate = v32;
      CFRelease(v31);
    }
  }
  else
  {
    Count = _CalRecurrenceGetCount(a1);
    if (Count)
    {
      v29 = Count;
      v30 = CFStringCompare(a3, CFSTR("_float"), 0) == kCFCompareEqualTo;
      EndDate = _CalRecurrenceGetOrComputeCachedEndDate(a1, v29, v30, v15, v25);
    }
  }
  if (v25 > v17
    || ((v35 = vabdd_f64(EndDate, v27), v36 = (double)a4, v35 >= 2.22044605e-16)
      ? (v37 = v19 > EndDate + (double)a4)
      : (v37 = 0),
        v37))
  {
    v33 = 0;
    if (!v20)
      return v33;
LABEL_14:
    CFRelease(v20);
    return v33;
  }
  v38 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
  v40 = v38;
  v41 = v39;
  v42 = v39;
  if (v19 < v25 || v25 < v19 && v25 + v36 > v19)
  {
    v43 = v25;
    v44 = v38;
    goto LABEL_31;
  }
  v58 = v38;
  v59 = v39;
  v44 = v38 & 0xFFFF000000000000 | GregorianDateWithFallbackToDefaultTimeZone & 0xFFFFFFFFFFFFLL;
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  v43 = v45;
  v46 = v19 - v45;
  if (v46 <= 0.0)
  {
    CalAbsoluteTimeAddGregorianUnits();
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    v40 = v58;
    v41 = v59;
    if (v49 <= v19)
      goto LABEL_31;
    CalAbsoluteTimeAddGregorianUnits();
    v43 = v50;
    v51 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    v41 = v59;
    v44 = v51;
    v42 = v52;
  }
  else
  {
    if (v46 >= v36)
    {
      CalAbsoluteTimeAddGregorianUnits();
      v43 = v47;
      v44 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      v42 = v48;
    }
    v41 = v59;
  }
  v40 = v58;
LABEL_31:
  if (v35 >= 2.22044605e-16 && v17 > EndDate)
  {
    v17 = EndDate + 1.0;
    v54 = v41;
    v55 = v40;
    v56 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    v40 = v55;
    v41 = v54;
    a7 = v56;
    a8 = v57;
  }
  v33 = _CalRecurrenceCopyOccurrenceDatesDispatch(a1, v40, v41, v44, v42, a7, a8, a9, v25, v43, v17, (const __CFTimeZone *)v15);
  if (v20)
    goto LABEL_14;
  return v33;
}

void _CalEventGetLargestPossibleAlarmOffsets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  __CFArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  int TriggerInterval;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *a2 = 0x7FFFFFFFFFFFFFFFLL;
  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  if (_CalCalendarItemHasAlarms(a1))
  {
    v19 = (void *)_CalEventCopyTravelTime(a1);
    v20 = objc_msgSend(v19, "intValue");
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v6 = _CalCalendarItemCopyAlarms(a1);
    v7 = -[__CFArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (!v7)
      goto LABEL_31;
    v8 = v7;
    v9 = *(_QWORD *)v22;
    v10 = -604800 - v20;
    v11 = 32400 - v20;
    while (1)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v22 != v9)
          objc_enumerationMutation(v6);
        v13 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * i);
        if (_CalAlarmIsDefaultAlarm(v13))
        {
          if (v10 < 0)
          {
            v14 = a2;
            if (*a2 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v14 = a2;
              if (*a2 <= v10)
                goto LABEL_11;
            }
          }
          else
          {
            v14 = a3;
            if (*a3 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v14 = a3;
              if (*a3 >= v10)
              {
LABEL_11:
                if ((v11 & 0x8000000000000000) == 0)
                  goto LABEL_12;
LABEL_23:
                v15 = a2;
                if (*a2 == 0x7FFFFFFFFFFFFFFFLL || (v15 = a2, *a2 > v11))
                {
LABEL_25:
                  *v15 = v11;
                  continue;
                }
                continue;
              }
            }
          }
          *v14 = v10;
          if ((v11 & 0x8000000000000000) == 0)
          {
LABEL_12:
            v15 = a3;
            if (*a3 == 0x7FFFFFFFFFFFFFFFLL)
              goto LABEL_25;
            v15 = a3;
            if (*a3 < v11)
              goto LABEL_25;
            continue;
          }
          goto LABEL_23;
        }
        if (_CalAlarmGetTriggerDate(v13) != 1.17549435e-38)
          continue;
        TriggerInterval = _CalAlarmGetTriggerInterval(v13);
        v17 = TriggerInterval - v20;
        if (TriggerInterval - v20 < 0)
        {
          v18 = a2;
          if (*a2 == 0x7FFFFFFFFFFFFFFFLL || (v18 = a2, *a2 > v17))
          {
LABEL_28:
            *v18 = v17;
            continue;
          }
        }
        else
        {
          v18 = a3;
          if (*a3 == 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_28;
          v18 = a3;
          if (*a3 < v17)
            goto LABEL_28;
        }
      }
      v8 = -[__CFArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (!v8)
      {
LABEL_31:

        return;
      }
    }
  }
}

__CFArray *_CalEventCopyOccurrenceDatesInDateRange(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  return _CalEventCopyOccurrenceDatesInDateRangeWhileLocked(a1, a2, a3, a4, 1, 0, a5);
}

__CFArray *_CalEventCopyOccurrenceDatesInDateRangeWhileLocked(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, int a6, uint64_t a7)
{
  id v13;
  id v14;
  const __CFArray *v15;
  const __CFString *v16;
  unsigned int DurationWhileLocked;
  CFIndex Count;
  const __CFArray *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  CDBRecurrenceGenerator *v28;
  id v29;
  void *v30;
  __CFArray *Mutable;
  void *v32;
  double v33;
  double ProposedStartDate;
  const __CFArray *v35;
  void *v36;
  void *v37;
  CFIndex v38;
  CFIndex v39;
  const __CFArray *v40;
  const __CFArray *v41;
  CFIndex v42;
  CFIndex v43;
  CFComparisonResult v44;
  void *v45;
  CFIndex v46;
  CFComparisonResult (__cdecl *v47)(const void *, const void *, void *);
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  CFIndex v52;
  CFIndex v53;
  const void *ValueAtIndex;
  const __CFArray *v56;
  id v57;
  id v58;
  void *v59;
  const __CFString *theString1;
  id v61;
  uint64_t v62;
  uint64_t v63;
  CFRange v64;

  v13 = a2;
  v14 = a3;
  v61 = a4;
  v15 = _CalCalendarItemCopyRecurrencesWhileLocked(a1, a5);
  _CalEventCopyStartDateWhileLocked(a1, a5);
  theString1 = v16;
  DurationWhileLocked = _CalEventGetDurationWhileLocked(a1, a5);
  if (v15)
  {
    Count = CFArrayGetCount(v15);
    if (!a6)
      goto LABEL_22;
  }
  else
  {
    Count = 0;
    if (!a6)
      goto LABEL_22;
  }
  v62 = 0;
  v63 = 0;
  LODWORD(v59) = DurationWhileLocked;
  v19 = v15;
  v20 = v13;
  if ((a5 & 1) != 0)
  {
    _CalEventGetLargestPossibleAlarmOffsets(a1, &v63, &v62);
    if (v63 == 0x7FFFFFFFFFFFFFFFLL)
      v21 = 0;
    else
      v21 = v63;
    if (v62 == 0x7FFFFFFFFFFFFFFFLL)
      v22 = 0;
    else
      v22 = v62;
  }
  else
  {
    RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
    _CalEventGetLargestPossibleAlarmOffsets(a1, &v63, &v62);
    if (v63 == 0x7FFFFFFFFFFFFFFFLL)
      v21 = 0;
    else
      v21 = v63;
    if (v62 == 0x7FFFFFFFFFFFFFFFLL)
      v22 = 0;
    else
      v22 = v62;
    v24 = (const os_unfair_lock *)CalGetRecordLock();
    v25 = (os_unfair_lock_s *)v24;
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v24);
    os_unfair_lock_unlock(v25);
  }
  objc_msgSend(v20, "dateByAddingTimeInterval:", (double)-v22);
  v26 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "dateByAddingTimeInterval:", (double)-v21);
  v27 = objc_claimAutoreleasedReturnValue();

  v14 = (id)v27;
  v13 = (id)v26;
  v15 = v19;
  DurationWhileLocked = v59;
LABEL_22:
  if (Count < 1)
  {
    v32 = (void *)MEMORY[0x1E0C99D68];
    CalDateTimeGetAbsoluteTime();
    objc_msgSend(v32, "dateWithTimeIntervalSinceReferenceDate:");
    v28 = (CDBRecurrenceGenerator *)objc_claimAutoreleasedReturnValue();
    v33 = (double)DurationWhileLocked;
    -[CDBRecurrenceGenerator dateByAddingTimeInterval:](v28, "dateByAddingTimeInterval:", (double)DurationWhileLocked);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[CDBRecurrenceGenerator CalIsAfterOrSameAsDate:](v28, "CalIsAfterOrSameAsDate:", v13)
      && (-[CDBRecurrenceGenerator CalIsBeforeDate:](v28, "CalIsBeforeDate:", v14) & 1) != 0
      || objc_msgSend(v30, "CalIsAfterDate:", v13)
      && (objc_msgSend(v30, "CalIsBeforeOrSameAsDate:", v14) & 1) != 0
      || -[CDBRecurrenceGenerator CalIsBeforeDate:](v28, "CalIsBeforeDate:", v13)
      && objc_msgSend(v30, "CalIsAfterDate:", v14))
    {
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      CFArrayAppendValue(Mutable, v28);
    }
    else
    {
      Mutable = 0;
    }
    if ((_DWORD)a5)
      ProposedStartDate = _CalEventGetProposedStartDate(a1);
    else
      CalEventGetProposedStartDate(a1);
    if (ProposedStartDate != *MEMORY[0x1E0D0C490])
    {
      v35 = v15;
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "dateByAddingTimeInterval:", v33);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v36, "CalIsAfterOrSameAsDate:", v13)
        && (objc_msgSend(v36, "CalIsBeforeDate:", v14) & 1) != 0
        || objc_msgSend(v37, "CalIsAfterDate:", v13)
        && (objc_msgSend(v37, "CalIsBeforeOrSameAsDate:", v14) & 1) != 0
        || objc_msgSend(v36, "CalIsBeforeDate:", v13)
        && objc_msgSend(v37, "CalIsAfterDate:", v14))
      {
        if (!Mutable)
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        CFArrayAppendValue(Mutable, v36);
      }

      v15 = v35;
    }
  }
  else
  {
    v28 = objc_alloc_init(CDBRecurrenceGenerator);
    v29 = -[CDBRecurrenceGenerator copyOccurrenceDatesWithCalEvent:startDate:endDate:timeZone:includeExtraOccurrencesPastEndDate:locked:](v28, "copyOccurrenceDatesWithCalEvent:startDate:endDate:timeZone:includeExtraOccurrencesPastEndDate:locked:", a1, v13, v14, v61, a7, a5);
    v30 = (void *)objc_msgSend(v29, "mutableCopy");

    Mutable = (__CFArray *)CFRetain(v30);
  }

  if (Mutable)
  {
    v38 = CFArrayGetCount(Mutable);
    if (v38 >= 1)
    {
      v39 = v38;
      v40 = (_DWORD)a5
          ? _CalCalendarItemCopyExceptionDatesForRecurrences(a1)
          : CalCalendarItemCopyExceptionDatesForRecurrences(a1);
      v41 = v40;
      if (v40)
      {
        v58 = v14;
        v42 = CFArrayGetCount(v40);
        if (v42 >= 1)
        {
          v43 = v42;
          v56 = v15;
          v57 = v13;
          v44 = CFStringCompare(theString1, CFSTR("_float"), 0);
          v45 = 0;
          if (v44 == kCFCompareEqualTo)
            v45 = (void *)CalTimeZoneCopyCFTimeZone();
          v46 = 0;
          v47 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))MEMORY[0x1E0C98440];
          do
          {
            CFArrayGetValueAtIndex(v41, v46);
            v48 = objc_claimAutoreleasedReturnValue();
            if (v48)
            {
              v49 = (void *)v48;
              if (v44)
              {
                v50 = (void *)v48;
              }
              else
              {
                v51 = v45;
                if (!v45)
                {
                  v59 = (void *)CalCopyTimeZone();
                  v51 = v59;
                }
                objc_msgSend(v49, "dateInTimeZone:fromTimeZone:", v61, v51);
                v50 = (void *)objc_claimAutoreleasedReturnValue();

                if (!v45)
              }
              v64.location = 0;
              v64.length = v39;
              v52 = CFArrayBSearchValues(Mutable, v64, v50, v47, 0);
              if (v52 < v39)
              {
                v53 = v52;
                ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v52);
                if (CFEqual(ValueAtIndex, v50))
                {
                  CFArrayRemoveValueAtIndex(Mutable, v53);
                  --v39;
                }
              }
            }
            else
            {
              v50 = 0;
            }

            ++v46;
          }
          while (v43 != v46);
          v15 = v56;
          v13 = v57;
          if (v45)
            CFRelease(v45);
        }
        CFRelease(v41);
        v14 = v58;
      }
    }
  }
  if (v15)
    CFRelease(v15);
  CalDateTimeRelease();

  return Mutable;
}

__CFArray *_CalEventCopyOccurrenceDatesInDateRangeExpandedForAlarms(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  return _CalEventCopyOccurrenceDatesInDateRangeWhileLocked(a1, a2, a3, a4, 1, 1, a5);
}

__CFArray *CalEventCopyOccurrenceDatesInDateRange(uint64_t a1, void *a2, void *a3, void *a4)
{
  return _CalEventCopyOccurrenceDatesInDateRangeWhileLocked(a1, a2, a3, a4, 0, 0, 0);
}

uint64_t _CalEventOccurrencesExistInDateRange(uint64_t a1, uint64_t GregorianDateWithFallbackToDefaultTimeZone, uint64_t a3, uint64_t a4, uint64_t a5, int a6, const void *a7)
{
  uint64_t StartDate;
  const __CFString *v14;
  const __CFArray *v15;
  CFIndex Count;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  CFIndex v22;
  int v23;
  int v24;
  double v25;
  __CFArray *v26;
  const __CFArray *v27;
  CFIndex v28;
  CFIndex v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  const void *v33;
  uint64_t v34;
  const void *v35;
  CFAbsoluteTime v36;
  CFIndex v37;
  const void *v38;
  uint64_t v39;
  double v40;
  __CFArray *v41;
  const __CFString *v42;
  NSObject *v43;
  uint64_t v44;
  const __CFAllocator *allocator;
  int v47;
  uint64_t v48;
  const __CFArray *v49;
  CFIndex v50;
  CFIndex v51;
  const __CFString *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int Duration;
  CFIndex range;
  const void *ValueAtIndex;
  const __CFArray *theArray;
  CFTypeRef cf;
  uint8_t buf[4];
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  const void *v69;
  uint64_t v70;
  CFRange v71;

  v70 = *MEMORY[0x1E0C80C00];
  StartDate = _CalEventGetStartDate(a1);
  v53 = v14;
  v54 = StartDate;
  v15 = _CalCalendarItemCopyRecurrencesWhileLocked(a1, 1);
  Duration = _CalEventGetDuration(a1);
  if (!v15)
  {
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    return 0;
  }
  Count = CFArrayGetCount(v15);
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  v50 = Count;
  if (Count < 1)
  {
    v44 = 0;
    goto LABEL_63;
  }
  v18 = v17;
  v48 = a1;
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  v20 = v19;
  v21 = 0;
  theArray = 0;
  cf = 0;
  range = 0;
  v22 = 0;
  if (Duration)
    v23 = 1;
  else
    v23 = 2;
  v47 = v23;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v49 = v15;
  do
  {
    v51 = v22;
    ValueAtIndex = CFArrayGetValueAtIndex(v15, v22);
    if ((v21 & 1) != 0 || v20 > v18)
      goto LABEL_54;
    v24 = v47;
    v25 = v20;
    while (1)
    {
      v26 = _CalRecurrenceCopyOccurrenceDatesInDateRangeOrCountLimited((uint64_t)ValueAtIndex, v54, v53, Duration, GregorianDateWithFallbackToDefaultTimeZone, a3, a4, a5, v24, a7);
      if (!v26)
      {
        v20 = v25;
        goto LABEL_54;
      }
      v27 = v26;
      v28 = CFArrayGetCount(v26);
      if (v28 < 1)
      {
        v20 = v25;
        goto LABEL_53;
      }
      v29 = v28;
      v55 = GregorianDateWithFallbackToDefaultTimeZone;
      v56 = a3;
      v30 = a4;
      v31 = a5;
      v32 = CFArrayGetValueAtIndex(v27, 0);
      v33 = 0;
      if (v29 != 1)
        v33 = CFArrayGetValueAtIndex(v27, 1);
      if (!v32 || MEMORY[0x1A85B424C](v32) > v18)
      {
LABEL_45:
        v20 = v25;
        a5 = v31;
LABEL_46:
        a4 = v30;
        GregorianDateWithFallbackToDefaultTimeZone = v55;
        a3 = v56;
        goto LABEL_53;
      }
      if (!a6 || MEMORY[0x1A85B424C](v32) >= v25)
      {
        if (theArray)
          goto LABEL_19;
        v41 = _CalCalendarItemCopyExceptionDatesForRecurrences(v48);
        if (!v41)
          v41 = CFArrayCreate(allocator, 0, 0, MEMORY[0x1E0C9B378]);
        theArray = v41;
        range = CFArrayGetCount(v41);
        _CalEventGetStartDate(v48);
        if (!v42)
        {
LABEL_19:
          v34 = (uint64_t)cf;
        }
        else
        {
          v34 = (uint64_t)cf;
          if (CFStringCompare(v42, CFSTR("_float"), 0) == kCFCompareEqualTo && !cf)
            v34 = CalTimeZoneCopyCFTimeZone();
        }
        v35 = CFRetain(v32);
        cf = (CFTypeRef)v34;
        if (v34)
        {
          MEMORY[0x1A85B424C](v32);
          CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
          CFRelease(v35);
          v15 = v49;
          CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
          v35 = CFDateCreate(0, v36);
        }
        v71.location = 0;
        v71.length = range;
        v37 = CFArrayBSearchValues(theArray, v71, v35, (CFComparatorFunction)MEMORY[0x1E0C98440], 0);
        if (v37 < 0 || v37 >= range || (v38 = CFArrayGetValueAtIndex(theArray, v37), !CFEqual(v35, v38)))
        {
          v21 = 1;
          if (!v35)
            goto LABEL_29;
LABEL_28:
          CFRelease(v35);
          goto LABEL_29;
        }
        v21 = 0;
        if (v35)
          goto LABEL_28;
      }
LABEL_29:
      if ((v21 & 1) != 0)
        goto LABEL_45;
      if (v24 < 2)
      {
        MEMORY[0x1A85B424C](v32);
        a5 = v31;
      }
      else
      {
        a5 = v31;
        if (!v33)
        {
          v20 = v25;
          goto LABEL_46;
        }
        MEMORY[0x1A85B424C](v33);
      }
      a4 = v30;
      GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      a3 = v39;
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      v20 = v40;
      if (v40 <= v25)
        break;
LABEL_37:
      CFRelease(v27);
      v25 = v20;
      if (v20 > v18)
        goto LABEL_54;
    }
    if (v24 < 2)
    {
      v24 = 2;
      goto LABEL_37;
    }
    v43 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218754;
      v63 = v20;
      v64 = 2048;
      v65 = v25;
      v66 = 1024;
      v67 = Duration;
      v68 = 2114;
      v69 = a7;
      _os_log_impl(&dword_1A5CCB000, v43, OS_LOG_TYPE_FAULT, "_CalEventOccurrencesExistInDateRange is not making any progress. currentStartAbs=%f, lastStartAbs=%f, duration=%u, tz=%{public}@", buf, 0x26u);
    }
    v15 = v49;
LABEL_53:
    CFRelease(v27);
LABEL_54:
    v22 = v51 + 1;
  }
  while (v51 + 1 < v50 && (v21 & 1) == 0);
  if (theArray)
    CFRelease(theArray);
  if (cf)
    CFRelease(cf);
  v44 = v21 & 1;
LABEL_63:
  CFRelease(v15);
  return v44;
}

uint64_t _CalEventOccurrencesExistWithinTimeInterval(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, double a5, uint64_t a6, uint64_t a7, const void *a8)
{
  const __CFArray *v12;
  const __CFArray *v13;
  const void *v14;
  double v15;
  double v16;
  double v17;
  CFIndex v18;
  const __CFString *v19;
  const void *ValueAtIndex;
  uint64_t v21;
  uint64_t v22;
  __CFArray *v23;
  const __CFArray *v24;
  CFIndex v25;
  CFIndex v26;
  uint64_t v27;
  const __CFArray *v28;
  const void *v29;
  const void *v30;
  CFIndex v31;
  const void *v32;
  const void *v33;
  double v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v39;
  CFIndex Count;
  signed int v41;
  char v42;

  v12 = _CalCalendarItemCopyRecurrencesWhileLocked(a1, 1);
  if (!v12)
    return 0;
  v13 = v12;
  Count = CFArrayGetCount(v12);
  if (Count < 1)
  {
    v35 = 0;
  }
  else
  {
    if (!a2 || (CFStringCompare(a2, CFSTR("_float"), 0), (v14 = (const void *)CalTimeZoneCopyCFTimeZone()) == 0))
      v14 = CFRetain(a8);
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    v16 = v15;
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    v41 = (int)(v17 - v16);
    if (v14)
      CFRelease(v14);
    v42 = 0;
    v18 = 0;
    v39 = *(_QWORD *)&v16;
    v19 = a2;
    v37 = a3;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v13, v18);
      _CalRecurrenceGetFrequency((uint64_t)ValueAtIndex);
      _CalRecurrenceGetInterval((uint64_t)ValueAtIndex);
      v21 = CalGregorianDateAddUnits();
      v23 = _CalRecurrenceCopyOccurrenceDatesInDateRangeOrCountLimited((uint64_t)ValueAtIndex, v39, v19, v41, a3, a4, v21, v22, 0, a8);
      if (v23)
      {
        v24 = v23;
        v25 = CFArrayGetCount(v23);
        if (v25 >= 1 && (v42 & 1) == 0)
        {
          v26 = v25;
          v27 = a4;
          v28 = v13;
          v29 = a8;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v32 = CFArrayGetValueAtIndex(v24, v31);
            v33 = v32;
            if (v30)
            {
              v34 = MEMORY[0x1A85B424C](v32);
              if (v34 - (MEMORY[0x1A85B424C](v30) + (double)v41) < a5)
                break;
            }
            ++v31;
            v30 = v33;
            if (v31 >= v26)
              goto LABEL_18;
          }
          v42 = 1;
LABEL_18:
          a8 = v29;
          v13 = v28;
          a4 = v27;
          a3 = v37;
          v19 = a2;
        }
        CFRelease(v24);
      }
      ++v18;
      v35 = v42 & 1;
    }
    while (v18 < Count && (v42 & 1) == 0);
  }
  CFRelease(v13);
  return v35;
}

uint64_t _CalRecurrenceByMonthFilter(unsigned int a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t GregorianDateWithFallbackToDefaultTimeZone;
  uint64_t v6;

  if (*(_DWORD *)a2)
  {
    LOBYTE(v4) = *(_BYTE *)(a2 + 4);
  }
  else
  {
    GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    *(_QWORD *)a2 = GregorianDateWithFallbackToDefaultTimeZone;
    *(_QWORD *)(a2 + 8) = v6;
    v4 = HIDWORD(GregorianDateWithFallbackToDefaultTimeZone);
  }
  return (a1 >> (v4 - 1)) & 1;
}

BOOL _CalRecurrenceByMonthDayFilterPinned(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  return _CalRecurrenceByMonthDayFilterInternal(a1, a2, a3, 1);
}

BOOL _CalRecurrenceByMonthDayFilter(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  return _CalRecurrenceByMonthDayFilterInternal(a1, a2, a3, 0);
}

uint64_t _CalRecurrenceByDayMaskFilter(unsigned int a1)
{
  return (a1 >> CalAbsoluteTimeGetDayOfWeek()) & 1;
}

uint64_t _CalRecurrenceByDayMaskFromArrayByDayItems(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  _DWORD *ValueAtIndex;

  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v3 = Count;
  v4 = 0;
  v5 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
    if (*ValueAtIndex <= 1u)
      v5 = (1 << ValueAtIndex[1]) | v5;
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t _CalRecurrenceApplyFiltersToSingleDate(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6)
{
  uint64_t *p_Null;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t result;
  uint64_t Null;
  uint64_t v16;

  if (vabdd_f64(a5, a6) < 2.22044605e-16)
    return 1;
  p_Null = a1;
  Null = 0;
  v16 = 0;
  if (!a1)
  {
    Null = CalGregorianDateGetNull();
    v16 = v11;
    p_Null = &Null;
  }
  if (a3 < 1)
    return 1;
  v12 = (_QWORD *)(a2 + 8);
  v13 = 1;
  do
  {
    result = ((uint64_t (*)(_QWORD, uint64_t *, uint64_t, double))*(v12 - 1))(*v12, p_Null, a4, a5);
    if (v13 >= a3)
      break;
    v12 += 2;
    ++v13;
  }
  while ((result & 1) != 0);
  return result;
}

BOOL _CalRecurrenceByMonthDayFilterInternal(const __CFArray *a1, uint64_t a2, uint64_t a3, int a4)
{
  CFIndex Count;
  CFIndex v8;
  signed int DaysInMonth;
  uint64_t v10;
  signed int ValueAtIndex;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL8 result;

  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v8 = Count;
    DaysInMonth = 0;
    v10 = 1;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v10 - 1);
      if (ValueAtIndex < 0)
      {
        if (!DaysInMonth)
        {
          if (!*(_DWORD *)a2)
          {
            *(_QWORD *)a2 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
            *(_QWORD *)(a2 + 8) = v12;
          }
          DaysInMonth = CalGregorianDateGetDaysInMonth();
        }
        ValueAtIndex += DaysInMonth + 1;
      }
      if (*(_DWORD *)a2)
      {
        if (a4)
          goto LABEL_13;
      }
      else
      {
        *(_QWORD *)a2 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
        *(_QWORD *)(a2 + 8) = v13;
        if (a4)
        {
LABEL_13:
          if (!DaysInMonth)
            DaysInMonth = CalGregorianDateGetDaysInMonth();
          if (ValueAtIndex >= DaysInMonth)
            ValueAtIndex = DaysInMonth;
        }
      }
      v14 = *(char *)(a2 + 5);
      result = ValueAtIndex == v14;
      if (v10 < v8)
      {
        ++v10;
        if (ValueAtIndex != v14)
          continue;
      }
      return result;
    }
  }
  return 0;
}

BOOL _CalRecurrenceRangeFilter(double *a1, double a2)
{
  double v3;

  if (*a1 > a2)
    return 0;
  v3 = a1[1];
  return v3 > a2 || fabs(v3) < 2.22044605e-16;
}

void _CalRecurrenceApplyBySetPosToRange(__CFArray *a1, CFArrayRef theArray, CFIndex *a3, int a4, double a5, double a6, double a7)
{
  CFIndex Count;
  uint64_t v15;
  uint64_t v16;
  CFIndex v17;
  double v18;
  BOOL v19;
  const void *v20;
  double v21;
  double v22;
  BOOL v23;
  BOOL v24;
  CFIndex v25;
  CFIndex v26;
  CFIndex v27;
  CFIndex v28;
  unsigned int ValueAtIndex;
  uint64_t v31;
  CFIndex v32;

  v32 = a3[1];
  Count = CFArrayGetCount(theArray);
  if (a3[1] >= 1)
  {
    v15 = Count;
    v16 = 0;
    v17 = *a3;
    v18 = fabs(a6);
    do
    {
      v19 = v18 < 2.22044605e-16 && a4 == 0;
      if (v19
        || ((v20 = CFArrayGetValueAtIndex(a1, v17), v21 = MEMORY[0x1A85B424C](v20), v22 = vabdd_f64(v21, a7), v21 >= a6)
          ? (v23 = v18 >= 2.22044605e-16)
          : (v23 = 0),
            v22 >= 2.22044605e-16 ? (v24 = v21 < a5) : (v24 = 1),
            v24 || v23 || v15 < 1))
      {
LABEL_22:
        CFArrayRemoveValueAtIndex(a1, v17);
        v31 = a3[1] - 1;
        a3[1] = v31;
        --v17;
        ++v16;
      }
      else
      {
        v25 = 0;
        v26 = v17 - *a3 + v16;
        v27 = v26 + 1;
        v28 = v26 - v32;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v25);
          if (ValueAtIndex == v27 || ValueAtIndex == v28)
            break;
          if (v15 == ++v25)
            goto LABEL_22;
        }
        a4 -= a4 > 0;
        v31 = a3[1];
      }
      ++v17;
    }
    while (v17 < *a3 + v31);
  }
}

uint64_t _CalRecurrenceByDayGenerator(const __CFArray *a1, CFRange *a2, int a3, CFArrayRef theArray, double a5, double a6, double a7, uint64_t a8, int a9, uint64_t a10)
{
  CFIndex Count;
  uint64_t result;
  double v20;
  double v21;
  int v22;
  double v23;
  int v24;
  double v25;
  int DayOfWeek;
  double v27;
  CFIndex i;
  _DWORD *ValueAtIndex;
  double v30;
  BOOL v31;
  double v32;
  int v33;
  double v34;
  CFAbsoluteTime v35;
  double v36;
  int v37;
  int v38;

  Count = CFArrayGetCount(theArray);
  result = CalAbsoluteTimeAddGregorianUnits();
  if (v20 > a5)
  {
    v21 = v20;
    v38 = a9;
    v22 = 0;
    v23 = 0.0;
    v24 = 1;
    v25 = a5;
    do
    {
      DayOfWeek = CalAbsoluteTimeGetDayOfWeek();
      if (fabs(v23) < 2.22044605e-16)
        v24 = DayOfWeek;
      CalAbsoluteTimeAddGregorianUnits();
      CalAbsoluteTimeAddGregorianUnits();
      v23 = v27;
      CalAbsoluteTimeGetDayOfWeek();
      v37 = v24;
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
          if (*ValueAtIndex)
          {
            CalAbsoluteTimeAddGregorianUnits();
            v31 = v30 < v25 || v30 > v23;
            if (!v31)
              _CalRecurrenceResultsAddValueIfNotPresent(a1, a2, a8, v38, a10, v30, a7);
          }
          else
          {
            v22 |= 1 << ValueAtIndex[1];
          }
        }
      }
      result = CalAbsoluteTimeAddGregorianUnits();
      v25 = v32;
      v24 = v37;
    }
    while (v32 < v21);
    if (v22)
    {
      v33 = 0;
      do
      {
        if ((v22 & 1) != 0)
        {
          result = CalAbsoluteTimeAddGregorianUnits();
          if (v34 <= v21)
          {
            v35 = v34;
            do
            {
              _CalRecurrenceResultsAddValueIfNotPresent(a1, a2, a8, v38, a10, v35, a7);
              result = CalAbsoluteTimeAddGregorianUnits();
              v35 = v36;
            }
            while (v36 <= v21);
          }
        }
        ++v33;
        v31 = v22 > 1;
        v22 >>= 1;
      }
      while (v31);
    }
  }
  return result;
}

CFIndex _CalRecurrenceByMonthDayGeneratorPinned(const __CFArray *a1, CFRange *a2, int a3, CFArrayRef theArray, double a5, double a6, double a7, uint64_t a8, int a9, uint64_t a10)
{
  return _CalRecurrenceByMonthDayGeneratorInternal(a1, a2, theArray, a8, a9, a10, 1u, a5, a6, a7);
}

CFIndex _CalRecurrenceByMonthDayGenerator(const __CFArray *a1, CFRange *a2, int a3, CFArrayRef theArray, double a5, double a6, double a7, uint64_t a8, int a9, uint64_t a10)
{
  return _CalRecurrenceByMonthDayGeneratorInternal(a1, a2, theArray, a8, a9, a10, 0, a5, a6, a7);
}

uint64_t _CalRecurrenceApplyGenerator(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, double a8, double a9, double a10, double a11)
{
  double v22;
  uint64_t v23;
  uint64_t result;
  CFIndex Count;
  uint64_t v26;
  CFRange v27;

  Count = CFArrayGetCount(a1);
  v26 = 0;
  CalAbsoluteTimeAddGregorianUnits();
  (*(void (**)(const __CFArray *, CFIndex *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, double, double, double, double, double))a2)(a1, &Count, a5, *(_QWORD *)(a2 + 8), a3, a4, a7, a11, v22, a8, a9, a10);
  if (!a6)
    return v26;
  v23 = *a6;
  result = v26;
  if ((_DWORD)v23)
  {
    if (v23 >= v26)
    {
LABEL_6:
      *a6 = v23 - result;
      return result;
    }
    v27.length = v26 - v23;
    v27.location = Count + v23;
    CFArrayReplaceValues(a1, v27, 0, 0);
    result = *a6;
    if ((_DWORD)result)
    {
      LODWORD(v23) = *a6;
      goto LABEL_6;
    }
    return 0;
  }
  return result;
}

void _CalRecurrenceResultsAddValueIfNotPresent(const __CFArray *a1, CFRange *a2, uint64_t a3, int a4, uint64_t a5, CFAbsoluteTime a6, double a7)
{
  CFIndex location;
  CFIndex length;
  CFIndex v12;
  CFDateRef v13;
  CFIndex v14;
  CFIndex v15;
  const void *ValueAtIndex;
  CFIndex v17;

  if (vabdd_f64(a6, a7) >= 2.22044605e-16)
  {
    location = a2->location;
    length = a2->length;
    if (!a4 || _CalRecurrenceApplyFiltersToSingleDate(0, a3, a4, a5, a6, a7))
    {
      v12 = length + location;
      v13 = CFDateCreate(0, a6);
      v14 = CFArrayBSearchValues(a1, *a2, v13, (CFComparatorFunction)MEMORY[0x1E0C98440], 0);
      v15 = v14;
      if (v14 >= v12 || v14 < 0 || (ValueAtIndex = CFArrayGetValueAtIndex(a1, v14), !CFEqual(ValueAtIndex, v13)))
      {
        if (v15 >= v12)
          v17 = v12;
        else
          v17 = v15;
        CFArrayInsertValueAtIndex(a1, v17, v13);
        ++a2->length;
      }
      CFRelease(v13);
    }
  }
}

CFIndex _CalRecurrenceByMonthDayGeneratorInternal(const __CFArray *a1, CFRange *a2, CFArrayRef theArray, uint64_t a4, int a5, uint64_t a6, unsigned __int8 a7, double a8, double a9, double a10)
{
  CFIndex result;
  uint64_t v19;
  int DaysInMonth;
  int v21;
  CFIndex v22;
  int v23;
  int ValueAtIndex;
  int v25;
  CFAbsoluteTime v27;
  double v28;

  result = CFArrayGetCount(theArray);
  if (a8 < a9)
  {
    v19 = result;
    do
    {
      CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      DaysInMonth = CalGregorianDateGetDaysInMonth();
      if (v19 >= 1)
      {
        v21 = DaysInMonth;
        v22 = 0;
        v23 = DaysInMonth + 1;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v22);
          if ((a7 & ((v23 & (ValueAtIndex >> 31)) + ValueAtIndex > v21)) != 0)
            v25 = v21;
          else
            v25 = (v23 & (ValueAtIndex >> 31)) + ValueAtIndex;
          if (v25 >= 1 && v25 <= v21)
          {
            CalAbsoluteTimeAddGregorianUnits();
            _CalRecurrenceResultsAddValueIfNotPresent(a1, a2, a4, a5, a6, v27, a10);
          }
          ++v22;
        }
        while (v19 != v22);
      }
      result = CalAbsoluteTimeAddGregorianUnits();
    }
    while (v28 < a9);
  }
  return result;
}

BOOL _CalValidateCalDate(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t DaysInMonth;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;

  v5 = a1;
  v6 = a2;
  objc_msgSend(v5, "calendarIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianGMTCalendar");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "calendarIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v7, "isEqualToString:", v9);

  if (v10)
  {
    objc_msgSend(v6, "year");
    objc_msgSend(v6, "month");
    DaysInMonth = (int)CalGregorianDateGetDaysInMonth();
  }
  else
  {
    objc_msgSend(v5, "dateFromComponents:", v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "rangeOfUnit:inUnit:forDate:", 16, 8, v12);
    DaysInMonth = v13;

  }
  v14 = objc_msgSend(v6, "day");
  v15 = v14 <= DaysInMonth;
  if (v14 > DaysInMonth && a3)
  {
    objc_msgSend(v6, "setDay:", DaysInMonth);
    v15 = 1;
  }

  return v15;
}

void _CalRecurrenceByYearDayGenerator(const __CFArray *a1, CFRange *a2, int a3, CFArrayRef theArray, double a5, double a6, double a7, uint64_t a8, int a9, uint64_t a10)
{
  CFIndex Count;
  int DaysInYear;
  int v18;
  CFIndex v19;
  int v20;
  int ValueAtIndex;
  int v22;
  CFAbsoluteTime v24;

  Count = CFArrayGetCount(theArray);
  DaysInYear = CalAbsoluteTimeGetDaysInYear();
  if (Count >= 1)
  {
    v18 = DaysInYear;
    v19 = 0;
    v20 = DaysInYear + 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v19);
      v22 = (v20 & (ValueAtIndex >> 31)) + ValueAtIndex;
      if (v22 >= 1 && v22 <= v18)
      {
        CalAbsoluteTimeAddGregorianUnits();
        _CalRecurrenceResultsAddValueIfNotPresent(a1, a2, a8, a9, a10, v24, a7);
      }
      ++v19;
    }
    while (Count != v19);
  }
}

uint64_t _CalRecurrenceByDayFilter(const __CFArray *a1, uint64_t *a2, const __CFTimeZone *a3, CFAbsoluteTime a4)
{
  CFIndex Count;
  unsigned int DayOfWeek;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  int *ValueAtIndex;
  int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  CFAbsoluteTime v20;
  BOOL v21;
  uint64_t result;
  unsigned int v23;
  int v24;
  CFAbsoluteTime v25;
  CFGregorianUnits v26;
  CFGregorianUnits v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  Count = CFArrayGetCount(a1);
  DayOfWeek = CalAbsoluteTimeGetDayOfWeek();
  if (Count < 1)
    return 0;
  v10 = DayOfWeek;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  while (1)
  {
    ValueAtIndex = (int *)CFArrayGetValueAtIndex(a1, v13 - 1);
    if (ValueAtIndex[1] == v10)
      break;
    result = 0;
LABEL_24:
    if (v13 < Count)
    {
      ++v13;
      if (!(_DWORD)result)
        continue;
    }
    return result;
  }
  v15 = ValueAtIndex;
  v16 = *ValueAtIndex;
  if (*ValueAtIndex)
  {
    if (!*(_DWORD *)a2)
    {
      *a2 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      a2[1] = v17;
      v16 = *v15;
    }
    if (v16 < 1)
    {
      if (!v12)
      {
        CalGregorianDateGetDaysInMonth();
        CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
        v23 = CalAbsoluteTimeGetDayOfWeek();
        v28 = 0;
        if (v23 >= v10)
          v24 = 0;
        else
          v24 = 7;
        v29 = v23 - v10 + v24;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        CalAbsoluteTimeAddGregorianUnits();
        CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v26, v25, a4, a3, 4uLL);
        v12 = v26.days / 7 + 1;
        v16 = *v15;
      }
      v21 = v16 + v12 == 0;
    }
    else
    {
      if (!v11)
      {
        CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
        v18 = CalAbsoluteTimeGetDayOfWeek();
        v28 = 0;
        if (v10 >= v18)
          v19 = 0;
        else
          v19 = 7;
        v29 = v10 - v18 + v19;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        CalAbsoluteTimeAddGregorianUnits();
        CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v27, a4, v20, a3, 4uLL);
        v11 = v27.days / 7 + 1;
        v16 = *v15;
      }
      v21 = v16 == v11;
    }
    result = v21;
    goto LABEL_24;
  }
  return 1;
}

BOOL _CalRecurrenceByWeekNoFilter(uint64_t a1)
{
  int WeekOfYear;
  CFIndex Count;
  CFIndex v4;
  int WeeksInYear;
  uint64_t v6;
  unsigned int ValueAtIndex;
  _BOOL8 result;

  WeekOfYear = CalAbsoluteTimeGetWeekOfYear();
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  if (Count < 1)
    return 0;
  v4 = Count;
  WeeksInYear = 0;
  v6 = 1;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v6 - 1);
    if ((ValueAtIndex & 0x80000000) != 0)
    {
      if (!WeeksInYear)
        WeeksInYear = CalAbsoluteTimeGetWeeksInYear();
      ValueAtIndex += WeeksInYear + 1;
    }
    result = ValueAtIndex == WeekOfYear;
    if (v6 >= v4)
      break;
    ++v6;
  }
  while (ValueAtIndex != WeekOfYear);
  return result;
}

void CalCategoryInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalCategoryClass, (const char **)&kCalCategoryIndexes, 0);
}

void CalCategoryMigrateTables(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3 <= 58)
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalCategoryClass, (const char **)&kCalCategoryIndexes, 0);
  }
}

const void *_CalDatabaseCreateCategory(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 12);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateCategoryWithNameAndEntityType(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Category;
  const void *v4;
  BOOL v5;
  const os_unfair_lock *Context;
  BOOL v7;
  const os_unfair_lock *v8;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Category = _CalDatabaseCreateCategory((uint64_t)a1);
  v4 = Category;
  if (CDBLockingAssertionsEnabled)
    v5 = Category == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v4;
}

const void *CalDatabaseCreateCategory(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Category;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Category = _CalDatabaseCreateCategory((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Category;
}

uint64_t _CalCategoryRemove(const void *a1)
{
  uint64_t DatabaseForRecord;
  const __CFArray *v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  char v8;
  const void *ValueAtIndex;
  const os_unfair_lock *Context;
  uint64_t v12;

  DatabaseForRecord = CalGetDatabaseForRecord();
  v3 = (const __CFArray *)_CalDatabaseCopyCalendarItemsInCategory(DatabaseForRecord);
  if (!v3)
    goto LABEL_16;
  v4 = v3;
  Count = CFArrayGetCount(v3);
  if (Count < 1)
  {
    CFRelease(v4);
LABEL_16:
    v12 = CalGetDatabaseForRecord();
    return _CalDatabaseRemoveEntity(v12, a1);
  }
  v6 = Count;
  v7 = 0;
  v8 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
    if (_CalCalendarItemIsInvite((uint64_t)ValueAtIndex))
      v8 = 1;
    else
      _CalCalendarItemRemoveCategory(ValueAtIndex, a1);
    ++v7;
  }
  while (v6 != v7);
  CFRelease(v4);
  if ((v8 & 1) == 0)
    goto LABEL_16;
  if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordSetProperty();
}

uint64_t _CalDatabaseCopyCalendarItemsInCategory(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
}

void CalCategoryRemove(const void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCategoryRemove(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCategoryGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyCategoryWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalCategoryGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

const void *CalDatabaseCopyCategoryWithNameAndEntityType(os_unfair_lock_s *a1, const __CFString *a2, int a3)
{
  os_unfair_lock_s *v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t v14;
  BOOL v15;
  const os_unfair_lock *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex v19;
  CFIndex v20;
  CFIndex v21;
  const void *v22;
  const __CFString *Name;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v10 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (v10)
  {
    v11 = v10;
    Count = CFArrayGetCount(v10);
    if (Count <= 0)
    {
      CFRelease(v11);
    }
    else
    {
      if (Count != 1)
        CFLog();
      ValueAtIndex = CFArrayGetValueAtIndex(v11, 0);
      CFRetain(ValueAtIndex);
      CFRelease(v11);
      if (ValueAtIndex)
        goto LABEL_31;
    }
  }
  v14 = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v15 = v14 == 0;
  else
    v15 = 1;
  if (!v15)
  {
    v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v16)
      os_unfair_lock_assert_owner(v16 + 20);
  }
  v17 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
  if (v17)
  {
    v18 = v17;
    v19 = CFArrayGetCount(v17);
    if (v19 < 1)
    {
LABEL_28:
      ValueAtIndex = 0;
    }
    else
    {
      v20 = v19;
      v21 = 0;
      while (1)
      {
        v22 = CFArrayGetValueAtIndex(v18, v21);
        if (_CalEntityGetType(v22) == 12 && _CalCategoryGetEntityType((uint64_t)v22) == a3)
        {
          Name = (const __CFString *)_CalCategoryGetName((uint64_t)v22);
          if (Name)
          {
            if (CFStringCompare(Name, a2, 1uLL) == kCFCompareEqualTo)
              break;
          }
        }
        if (v20 == ++v21)
          goto LABEL_28;
      }
      ValueAtIndex = CFRetain(v22);
    }
    CFRelease(v18);
  }
  else
  {
    ValueAtIndex = 0;
  }
LABEL_31:
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  return ValueAtIndex;
}

uint64_t _CalCategoryGetEntityType(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalCategoryGetName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalDatabaseCopyCategoriesWithEntityType(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t v6;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t CalDatabaseCopyCalendarItemsInCategory(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalDatabaseCopyCalendarItemsInCategory((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalCategoryGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalCategoryGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalCategorySetName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCategoryCopyName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCategorySetEntityType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalCategoryGetEntityType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t EntityType;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  EntityType = _CalCategoryGetEntityType(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return EntityType;
}

void CalCategorySetHidden(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalCategoryIsHidden(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

void _CalSaveRelation(uint64_t a1)
{
  const os_unfair_lock *Context;
  void *CachedProperty;
  void *v3;
  CFTypeID v4;
  CFTypeID v5;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CachedProperty = (void *)CPRecordGetCachedProperty();
  if (CachedProperty)
  {
    v3 = CachedProperty;
    v4 = CFGetTypeID(CachedProperty);
    if (v4 == CalToManyRelationGetTypeID())
    {
      CalToManyRelationSave(v3);
    }
    else
    {
      v5 = CFGetTypeID(v3);
      pthread_once(&__CalRelationRegisterOnce, (void (*)(void))CalRelationRegisterClass);
      if (v5 == __CalRelationTypeID)
        CalRelationOwnerDidSave((uint64_t)v3);
    }
  }
}

uint64_t CalRelationRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  __CalRelationTypeID = result;
  return result;
}

uint64_t CalRelationGetOwner(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

CFTypeRef CalRelationCopyRelatedObject(uint64_t a1)
{
  CFTypeRef RelatedObject;
  CFTypeRef v3;

  _EnsureLoaded_0(a1);
  RelatedObject = CalRelationRawGetRelatedObject(a1);
  v3 = RelatedObject;
  if (RelatedObject)
    CFRetain(RelatedObject);
  return v3;
}

uint64_t _CalRelationUpdateSetRelationProperties(uint64_t a1, CFTypeRef a2)
{
  int ID;
  CFTypeRef RelatedObject;
  BOOL v6;
  const os_unfair_lock *Context;
  uint64_t result;
  BOOL v9;
  const os_unfair_lock *v10;
  uint64_t DatabaseForRecord;
  void *v12;
  void *v13;
  const os_unfair_lock *v14;

  if (a2)
    ID = CPRecordGetID();
  else
    ID = -1;
  RelatedObject = CalRelationRawGetRelatedObject(a1);
  if (CDBLockingAssertionsEnabled)
    v6 = *(_QWORD *)(a1 + 16) == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  result = CPRecordGetProperty();
  if (ID != (_DWORD)result || ID == -1 && RelatedObject != a2)
  {
    if (CDBLockingAssertionsEnabled)
      v9 = *(_QWORD *)(a1 + 16) == 0;
    else
      v9 = 1;
    if (!v9)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
    CPRecordSetProperty();
    if (RelatedObject)
    {
      if (*(_BYTE *)(a1 + 40))
      {
        if (*(_QWORD *)(a1 + 16))
        {
          DatabaseForRecord = CalGetDatabaseForRecord();
          _CalDatabaseRemoveEntity(DatabaseForRecord, RelatedObject);
        }
      }
      else
      {
        CDBGetCommonEntityFunctionalityHandler(RelatedObject, 0, 0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "removeDestructionObserver:", a1);

      }
    }
    CalRelationRawSetRelatedObject(a1, a2);
    if (a2 && !*(_BYTE *)(a1 + 40))
    {
      CDBGetCommonEntityFunctionalityHandler(a2, 1, 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "addDestructionObserver:", a1);

    }
    if (CDBLockingAssertionsEnabled && *(_QWORD *)(a1 + 16) && CPRecordGetStore())
    {
      v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v14)
        os_unfair_lock_assert_owner(v14 + 20);
    }
    return CPRecordMarkPropertyChanged();
  }
  return result;
}

uint64_t _CalRelationUpdateSetRelationID(uint64_t a1)
{
  BOOL v1;
  const os_unfair_lock *Context;

  if (CDBLockingAssertionsEnabled)
    v1 = *(_QWORD *)(a1 + 16) == 0;
  else
    v1 = 1;
  if (!v1)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordSetProperty();
}

CFTypeRef CalRelationSetRelatedObject(_QWORD *a1, CFTypeRef a2)
{
  CFTypeRef result;

  _EnsureLoaded_0((uint64_t)a1);
  result = CalRelationRawGetRelatedObject((uint64_t)a1);
  if (result != a2)
  {
    if (result)
      _CalRelationUpdateInverseProperty(a1, (uint64_t)result, 0);
    if (a2)
      _CalRelationUpdateInverseProperty(a1, (uint64_t)a2, 1);
    return (CFTypeRef)_CalRelationUpdateSetRelationProperties((uint64_t)a1, a2);
  }
  return result;
}

uint64_t _CalRelationUpdateInverseProperty(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  uint64_t (*v10)(_QWORD *, uint64_t, _QWORD);
  int v11;
  const os_unfair_lock *Context;
  _QWORD *v13;
  CFTypeID v14;
  CFTypeRef RelatedObject;
  const void *v16;
  CFTypeID v17;
  void *v18;
  unsigned int valuePtr;

  result = a1[4];
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v7 = result;
      for (i = 0; i != v7; ++i)
      {
        valuePtr = -1;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1[4], i);
        result = CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
        v10 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD))a1[8];
        if (v10)
        {
          result = v10(a1, a2, valuePtr);
          v11 = result;
        }
        else
        {
          v11 = 1;
        }
        if (valuePtr != -1)
        {
          result = CPRecordGetPropertyDescriptor();
          if (result)
          {
            if (*(_UNKNOWN **)(result + 16) == &kCalRelationMethods && *(_QWORD *)(result + 32))
            {
              if (CDBLockingAssertionsEnabled)
              {
                if (CPRecordGetStore())
                {
                  Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (Context)
                    os_unfair_lock_assert_owner(Context + 20);
                }
              }
              result = CPRecordGetProperty();
              if (result && v11)
              {
                v13 = (_QWORD *)result;
                v14 = CFGetTypeID((CFTypeRef)result);
                pthread_once(&__CalRelationRegisterOnce, (void (*)(void))CalRelationRegisterClass);
                if (v14 == __CalRelationTypeID)
                {
                  if (a3)
                  {
                    _EnsureLoaded_0((uint64_t)v13);
                    RelatedObject = CalRelationRawGetRelatedObject((uint64_t)v13);
                    if (RelatedObject)
                    {
                      v16 = RelatedObject;
                      if (RelatedObject != (CFTypeRef)a1[2])
                      {
                        _CalRelationUpdateInverseProperty(v13, RelatedObject, 0);
                        v16 = (const void *)a1[2];
                      }
                    }
                    else
                    {
                      v16 = (const void *)a1[2];
                    }
                  }
                  else
                  {
                    v16 = 0;
                  }
                  result = _CalRelationUpdateSetRelationProperties((uint64_t)v13, v16);
                }
                else
                {
                  v17 = CFGetTypeID(v13);
                  result = CalToManyRelationGetTypeID();
                  if (v17 == result)
                  {
                    v18 = (void *)a1[2];
                    if (a3)
                      result = (uint64_t)CalToManyRelationAddObject(v13, v18);
                    else
                      result = CalToManyRelationRemoveObject(v13, v18);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CalRelationOwnerWillSave(uint64_t a1)
{
  CFTypeID v2;
  uint64_t result;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Store;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;

  v2 = CFGetTypeID((CFTypeRef)a1);
  result = pthread_once(&__CalRelationRegisterOnce, (void (*)(void))CalRelationRegisterClass);
  if (v2 == __CalRelationTypeID)
  {
    if (CDBLockingAssertionsEnabled)
      v4 = *(_QWORD *)(a1 + 16) == 0;
    else
      v4 = 1;
    if (!v4)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
    result = CPRecordGetProperty();
    if ((_DWORD)result == -1)
    {
      _EnsureLoaded_0(a1);
      if (CalRelationRawGetRelatedObject(a1) && CPRecordGetID() == -1 && *(_BYTE *)(a1 + 40))
      {
        Store = CPRecordGetStore();
        if (CDBLockingAssertionsEnabled)
        {
          if (Store)
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
        if (CPRecordProcessAddImmediate())
          CPRecordGetID();
      }
      if (CDBLockingAssertionsEnabled && *(_QWORD *)(a1 + 16) && CPRecordGetStore())
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t CalRelationOwnerDidSave(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  uint64_t PropertyDescriptor;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD);
  int v9;
  const os_unfair_lock *Context;
  unsigned int valuePtr;

  result = (uint64_t)CalRelationRawGetRelatedObject(a1);
  if (result)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v3 = result;
      result = *(_QWORD *)(a1 + 32);
      if (result)
      {
        result = CFArrayGetCount((CFArrayRef)result);
        if (result >= 1)
        {
          for (i = 0; result > i; ++i)
          {
            valuePtr = -1;
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
            CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
            PropertyDescriptor = CPRecordGetPropertyDescriptor();
            if (PropertyDescriptor && *(_UNKNOWN **)(PropertyDescriptor + 16) == &kCalRelationMethods)
              v7 = *(_QWORD *)(PropertyDescriptor + 32);
            else
              v7 = 0;
            v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 64);
            if (v8)
            {
              v9 = v8(a1, v3, valuePtr);
              if (v7)
                goto LABEL_14;
            }
            else
            {
              v9 = 1;
              if (v7)
              {
LABEL_14:
                if (v9)
                {
                  if (CDBLockingAssertionsEnabled && CPRecordGetStore())
                  {
                    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (Context)
                      os_unfair_lock_assert_owner(Context + 20);
                  }
                  CPRecordGetID();
                  CPRecordSetProperty();
                }
              }
            }
            result = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
          }
        }
      }
    }
  }
  return result;
}

uint64_t CalRelationMarkDirty(uint64_t a1)
{
  BOOL v1;
  const os_unfair_lock *Context;

  if (CDBLockingAssertionsEnabled)
    v1 = *(_QWORD *)(a1 + 16) == 0;
  else
    v1 = 1;
  if (!v1)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordMarkPropertyChanged();
}

CFStringRef CalRelationCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<CalRelation: %p> owner: [%@] related object: [%@]"), a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 56));
}

CFTypeRef _CalEntityGetDebugDescription(const void *a1)
{
  int Type;
  void *v3;
  const os_unfair_lock *Context;
  const __CFArray *v5;
  id v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  _QWORD *PropertyDescriptor;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  CFTypeRef DebugDescription;
  NSObject *v17;
  CFTypeRef v19;
  void *v20;
  void *v21;
  CFTypeRef v22;
  CFTypeRef v23;
  uint8_t buf[16];

  if (a1)
  {
    Type = _CalEntityGetType(a1);
    CalEntityTypeGetName(Type);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
    v5 = (const __CFArray *)CPRecordCopyChangedProperties();
    v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (v5)
    {
      Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        v8 = Count;
        for (i = 0; i != v8; ++i)
        {
          CFArrayGetValueAtIndex(v5, i);
          PropertyDescriptor = (_QWORD *)CPRecordGetPropertyDescriptor();
          if (PropertyDescriptor && *PropertyDescriptor)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "addObject:", v11);

          }
        }
      }
      CFRelease(v5);
    }
    objc_msgSend(v6, "componentsJoinedByString:", CFSTR(", "));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CPRecordGetID());
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)objc_msgSend(v13, "initWithFormat:", CFSTR("entityType: [%@] address: [%p] row ID: [%@] changedProperties: [%@]"), v3, a1, v14, v12);

    if ((Type - 7) < 2 || Type == 100)
    {
      DebugDescription = _CalParticipantGetDebugDescription(a1);
    }
    else
    {
      if (Type != 2)
      {
        v19 = 0;
        goto LABEL_24;
      }
      DebugDescription = _CalEventGetDebugDescription((uint64_t)a1);
    }
    v19 = DebugDescription;
LABEL_24:
    v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", v15);
    v21 = v20;
    if (v19)
      objc_msgSend(v20, "appendFormat:", CFSTR(" %@"), v19);
    v22 = CFRetain(v21);
    v23 = CFAutorelease(v22);

    return v23;
  }
  v17 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v17, OS_LOG_TYPE_ERROR, "NULL 'entity' given.  Will not generate a debug description.", buf, 2u);
  }
  return 0;
}

CFTypeRef CalEntityGetDebugDescription(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef DebugDescription;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DebugDescription = _CalEntityGetDebugDescription(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DebugDescription;
}

uint64_t CalEntityIsOfType(const void *a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v5 = _CalEntityIsOfType(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

const void *CalEntityCopyRecordID(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  const void *RecordID;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  RecordID = (const void *)_CalEntityGetRecordID(a1);
  v4 = RecordID;
  if (RecordID)
    CFRetain(RecordID);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFMutableArrayRef _CalEntityCopyRelatedEntitiesDeletedByTriggers(uint64_t a1, const void *a2, _BYTE *a3)
{
  int Type;

  Type = _CalEntityGetType(a2);
  if (Type <= 16)
  {
    if ((Type - 2) >= 2)
    {
      if (Type == 1)
        return (CFMutableArrayRef)_CalCalendarCopyRelatedEntitiesDeletedByTriggers(a1, (uint64_t)a2, a3);
      if (Type == 6)
        return (CFMutableArrayRef)_CalStoreCopyRelatedEntitiesDeletedByTriggers(a1, (uint64_t)a2, a3);
      return 0;
    }
    return _CalCalendarItemCopyRelatedEntitiesDeletedByTriggers(a1, (uint64_t)a2);
  }
  if (Type == 17 || Type == 19)
    return _CalResourceChangeNotificationCopyRelatedEntitiesDeletedByTriggers(a1, (uint64_t)a2);
  if (Type == 101)
    return _CalCalendarItemCopyRelatedEntitiesDeletedByTriggers(a1, (uint64_t)a2);
  return 0;
}

uint64_t _CalEntityIsNew(_BOOL8 a1)
{
  _BOOL8 v1;
  uint64_t Store;
  BOOL v3;
  const os_unfair_lock *Context;
  const __CFArray *v5;
  const __CFArray *v6;
  CFRange v8;

  v1 = a1;
  if (a1)
  {
    if (CPRecordGetID() == -1)
    {
      return 1;
    }
    else
    {
      Store = CPRecordGetStore();
      if (CDBLockingAssertionsEnabled)
        v3 = Store == 0;
      else
        v3 = 1;
      if (!v3)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      v5 = (const __CFArray *)CPRecordStoreCopyAddedRecords();
      if (v5)
      {
        v6 = v5;
        v8.length = CFArrayGetCount(v5);
        v8.location = 0;
        v1 = CFArrayContainsValue(v6, v8, (const void *)v1) != 0;
        CFRelease(v6);
      }
      else
      {
        return 0;
      }
    }
  }
  return v1;
}

uint64_t CalEntityIsNew(_BOOL8 a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t IsNew;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsNew = _CalEntityIsNew(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsNew;
}

const void *CalEntityCopyStore(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Store;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Store = (const void *)_CalEntityGetStore(a1);
  v4 = Store;
  if (Store)
    CFRetain(Store);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalEntityGetStore(const void *a1)
{
  const void *v1;
  int RawType;
  uint64_t Owner;
  uint64_t result;

  v1 = a1;
  if (!a1)
    return (uint64_t)v1;
  while (1)
  {
    RawType = CalEntityGetRawType(v1);
    if (RawType <= 99)
      break;
    switch(RawType)
    {
      case 'd':
        Owner = (uint64_t)_CalParticipantGetOwner(v1);
        break;
      case 'e':
        Owner = (uint64_t)_CalCalendarItemGetCalendar((uint64_t)v1);
        break;
      case 'f':
LABEL_8:
        Owner = (uint64_t)_CalResourceChangeGetNotification((uint64_t)v1);
        break;
      default:
        return 0;
    }
LABEL_21:
    v1 = (const void *)Owner;
    if (!Owner)
      return (uint64_t)v1;
  }
  switch(RawType)
  {
    case 1:
      result = (uint64_t)_CalCalendarGetStore((uint64_t)v1);
      break;
    case 4:
      Owner = (uint64_t)_CalAlarmGetOwningEntity((uint64_t)v1);
      goto LABEL_21;
    case 5:
      Owner = _CalRecurrenceGetOwner((uint64_t)v1, 1);
      goto LABEL_21;
    case 6:
      return (uint64_t)v1;
    case 9:
    case 23:
      Owner = (uint64_t)_CalConferenceGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 10:
      Owner = (uint64_t)_CalExceptionDateGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 11:
      Owner = (uint64_t)_CalAttachmentGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 13:
      Owner = (uint64_t)_CalCategoryLinkGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 14:
      Owner = (uint64_t)_CalLocationGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 15:
      Owner = (uint64_t)_CalShareeGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 18:
      goto LABEL_8;
    case 20:
      Owner = (uint64_t)_CalSuggestedEventInfoGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 21:
      Owner = (uint64_t)_CalContactGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 24:
      Owner = (uint64_t)_CalErrorGetOwner((uint64_t)v1);
      goto LABEL_21;
    case 25:
      result = _CalAttachmentFileGetStore((uint64_t)v1);
      break;
    case 28:
      result = _CalImageGetStore((uint64_t)v1);
      break;
    case 29:
      result = _CalColorGetStore((uint64_t)v1);
      break;
    default:
      return 0;
  }
  return result;
}

const __CFString *CalPrivacyLevelAsString(unsigned int a1)
{
  if (a1 > 3)
    return CFSTR("Unknown");
  else
    return (const __CFString *)*((_QWORD *)&off_1E4F87EF0 + (int)a1);
}

uint64_t CalAttendeeTypeAsString(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  if (a1 < 5)
    return *((_QWORD *)&off_1E4F87F10 + (int)a1);
  v2 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "stringWithFormat:", CFSTR("Unknown (%@)"), v3);

  return v4;
}

uint64_t CalAttendeeRoleAsString(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  if (a1 < 6)
    return *((_QWORD *)&off_1E4F87F38 + (int)a1);
  v2 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "stringWithFormat:", CFSTR("Unknown (%@)"), v3);

  return v4;
}

uint64_t CalAttendeeStatusAsString(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  if (a1 < 8)
    return *((_QWORD *)&off_1E4F87F68 + (int)a1);
  v2 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "stringWithFormat:", CFSTR("Unknown (%@)"), v3);

  return v4;
}

BOOL CalCalendarFlagsAreValid(int a1)
{
  return a1 >= 0;
}

uint64_t _CalParticipantPrepareForSave(const void *a1, uint64_t a2)
{
  int Type;
  BOOL v5;
  int v6;
  const os_unfair_lock *Context;
  uint64_t Property;
  const os_unfair_lock *v9;
  uint64_t result;
  const os_unfair_lock *v11;
  const __CFString *v12;
  const os_unfair_lock *v13;
  const __CFString *v14;
  const os_unfair_lock *v15;
  const __CFString *v16;
  const os_unfair_lock *v17;
  const __CFString *v18;
  const os_unfair_lock *v19;

  Type = _CalEntityGetType(a1);
  if (a1)
    v5 = CDBLockingAssertionsEnabled == 0;
  else
    v5 = 1;
  v6 = !v5;
  if (Type == 8)
  {
    if (!v6)
      goto LABEL_16;
    if (!CPRecordGetStore())
      goto LABEL_16;
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!Context)
      goto LABEL_16;
LABEL_15:
    os_unfair_lock_assert_owner(Context + 20);
    goto LABEL_16;
  }
  if (v6)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        goto LABEL_15;
    }
  }
LABEL_16:
  Property = CPRecordGetProperty();
  CalRelationOwnerWillSave(Property);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9)
          os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if ((_DWORD)result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    v12 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13)
            os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
    v14 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v15)
            os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
    v16 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17)
            os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
    result = CPRecordGetProperty();
    v18 = (const __CFString *)result;
    if (v12 && (result = CFStringGetLength(v12)) != 0
      || v14 && (result = CFStringGetLength(v14)) != 0
      || v16 && (result = CFStringGetLength(v16)) != 0)
    {
      if (!a2)
        return result;
    }
    else
    {
      if (!v18)
        return result;
      result = CFStringGetLength(v18);
      if (!a2 || !result)
        return result;
    }
    result = _CalIdentityGetID(v12, v14, v16, v18, a2);
    if ((_DWORD)result != -1)
    {
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

const void *_CalParticipantPropertyDidChange(const void *result, unsigned int a2)
{
  CFTypeRef v2;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;
  const os_unfair_lock *v5;
  CFTypeRef Owner;
  uint64_t v7;
  const os_unfair_lock *v8;
  const os_unfair_lock *v9;
  int OriginalProperty;
  int WeekStartRaw;
  const void *v12;

  if (a2 <= 0x1D)
  {
    v2 = result;
    if (((1 << a2) & 0x30600000) != 0)
    {
      if (result)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
      result = (const void *)CPRecordGetProperty();
      if ((_DWORD)result != -1)
      {
        if (v2)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v4)
                os_unfair_lock_assert_owner(v4 + 20);
            }
          }
        }
        CPRecordSetProperty();
        result = (const void *)CPRecordGetStore();
        if (result)
        {
          result = (const void *)CPRecordStoreGetContext();
          if (result)
            return (const void *)_CalDatabaseSetChangeFlags((uint64_t)result, 1);
        }
      }
    }
    else if (a2 == 2)
    {
      Owner = _CalParticipantGetOwner(result);
      if (Owner)
      {
        v7 = (uint64_t)Owner;
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
        CPRecordUnloadProperty();
        if (_CalCalendarItemGetSelfAttendee(v7) == v2)
        {
          if (v2)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v9)
                  os_unfair_lock_assert_owner(v9 + 20);
              }
            }
          }
          OriginalProperty = CPRecordGetOriginalProperty();
          WeekStartRaw = _CalRecurrenceGetWeekStartRaw((uint64_t)v2);
          if (WeekStartRaw != OriginalProperty)
          {
            if (WeekStartRaw == 2 || OriginalProperty == 2)
            {
              v12 = (const void *)CalCopyDatabaseForEntity(v2);
              _CalDatabaseSetChangeFlags((uint64_t)v12, 8);
              CFRelease(v12);
              _CalEventSelfAttendeeDeclinedChanged(v7);
            }
            _CalEventMarkAsModifiedForChangeTracking(v7);
          }
        }
      }
      return (const void *)_CalParticipantSetFlag((uint64_t)v2, 1u, 0);
    }
    else if (a2 == 6)
    {
      if (result)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5)
              os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
      return (const void *)CPRecordUnloadProperty();
    }
  }
  return result;
}

uint64_t _CalParticipantPropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  const os_unfair_lock *v5;
  const os_unfair_lock *v6;

  if (a2 == 6 && a3 == -1)
  {
    v3 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    result = CPRecordGetProperty();
    if (result != -1)
    {
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5)
              os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
      CPRecordGetProperty();
      if (v3 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
      return CPRecordGetProperty();
    }
  }
  return result;
}

void CalAttendeeInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalParticipantClass, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes);
}

void CalAttendeeMigrateTables(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  void *v6;
  const __CFString *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  _QWORD v11[5];
  unsigned int v12;
  _QWORD v13[4];
  unsigned int v14;

  if ((int)a3 <= 6)
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes((_QWORD *)a2, (const char **)&kCalParticipantClass, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes);
    return;
  }
  if (a3 > 0x37)
  {
    if (a3 <= 0x50)
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __CalAttendeeMigrateTables_block_invoke_3;
      v10[3] = &__block_descriptor_40_e5_v8__0l;
      v10[4] = a2;
      v9 = (void *)MEMORY[0x1A85B52F0](v10);
      CalMigrateTableFull2((_QWORD *)a2, (const char **)&kCalParticipantClass, 0, (const char **)&kCalParticipantMigrationInfo, 0, (const char **)&kCalParticipantChangesMigrationInfo, 0, v9, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes, 0, a3);

      goto LABEL_16;
    }
    if (a3 <= 0x3E82)
    {
      CalMigrateTableFull2((_QWORD *)a2, (const char **)&kCalParticipantClass, 0, (const char **)&kCalParticipantMigrationInfo, 0, (const char **)&kCalParticipantChangesMigrationInfo, 0, 0, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes, 0, a3);
      CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("CREATE TEMP TABLE _MigrationParticipant (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, UUID TEXT, owner_id INTEGER, is_self INTEGER, entity_type INTEGER, identity_match_type INTEGER, identity_match_value TEXT);"));
      CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("CREATE INDEX temp._MigrationParticipantIndex on _MigrationParticipant(owner_id, is_self, entity_type, identity_match_type, identity_match_value);"));
      CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("        INSERT INTO temp._MigrationParticipant (ROWID, UUID, owner_id, is_self, entity_type, identity_match_type, identity_match_value) SELECT ROWID, UUID, owner_id, is_self, entity_type, CASE         WHEN Identity.address NOT NULL THEN 1         WHEN email NOT NULL THEN 2         WHEN phone_number NOT NULL THEN 3         WHEN Identity.display_name NOT NULL THEN 4         ELSE 5         END as identity_match_type,         CASE         WHEN Identity.address NOT NULL THEN Identity.address         WHEN email NOT NULL THEN email         WHEN phone_number NOT NULL THEN phone_number         WHEN Identity.display_name NOT NULL THEN Identity.display_name         ELSE Identity.first_name || \"_&NZB^^_\" || Identity.last_name         END as identity_match_value         FROM Participant LEFT JOIN Identity ON identity_id = Identity.ROWID;"));
      CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("        UPDATE temp._MigrationParticipant AS participantToUpdate         SET UUID = subQuery.mainParticipantUUID         FROM        (        SELECT detachedParticipant.ROWID as detachedParticipantROWID, mainParticipant.UUID AS mainParticipantUUID FROM temp._MigrationParticipant AS detachedParticipant         INNER JOIN CalendarItem AS detachedEvent ON detachedParticipant.owner_id = detachedEvent.ROWID         INNER JOIN CalendarItem AS mainEvent ON mainEvent.ROWID = detachedEvent.orig_item_id         INNER JOIN temp._MigrationParticipant AS mainParticipant ON mainEvent.ROWID = mainParticipant.owner_id         WHERE         detachedParticipant.is_self = mainParticipant.is_self AND         detachedParticipant.entity_type = mainParticipant.entity_type AND         detachedParticipant.identity_match_type = mainParticipant.identity_match_type AND         detachedParticipant.identity_match_value = mainParticipant.identity_match_value GROUP BY detachedParticipantROWID) AS subQuery         WHERE participantToUpdate.ROWID = subQuery.detachedParticipantROWID;"));
      CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE Participant SET UUID = subQuery.UUID FROM (SELECT ROWID, UUID FROM temp._MigrationParticipant) AS subQuery WHERE Participant.ROWID = subQuery.ROWID;"));
      CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("DROP TABLE _MigrationParticipant;"));
      goto LABEL_16;
    }
    if (a3 <= 0x4651)
    {
      CalMigrateTableFull2((_QWORD *)a2, (const char **)&kCalParticipantClass, 0, (const char **)&kCalParticipantMigrationInfo, 0, (const char **)&kCalParticipantChangesMigrationInfo, 0, 0, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes, 0, a3);
      goto LABEL_16;
    }
  }
  else
  {
    v5 = MEMORY[0x1E0C809B0];
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __CalAttendeeMigrateTables_block_invoke;
    v13[3] = &__block_descriptor_36_e42__v24__0____CFString__8____CFDictionary__16l;
    v14 = a3;
    v6 = (void *)MEMORY[0x1A85B52F0](v13);
    v11[0] = v5;
    v11[1] = 3221225472;
    v11[2] = __CalAttendeeMigrateTables_block_invoke_2;
    v11[3] = &__block_descriptor_44_e5_v8__0l;
    if (a3 == 55)
      v7 = 0;
    else
      v7 = CFSTR("Attendee");
    v12 = a3;
    v11[4] = a2;
    v8 = (void *)MEMORY[0x1A85B52F0](v11);
    CalMigrateTableFull2((_QWORD *)a2, (const char **)&kCalParticipantClass, (uint64_t)v7, (const char **)&kCalParticipantMigrationInfo, v6, (const char **)&kCalParticipantChangesMigrationInfo, 0, v8, (const char **)&kCalParticipantIndexes, (const char **)&kCalParticipantChangesIndexes, 0, a3);

  }
  if ((a3 - 13) >> 3 <= 0x8C8)
  {
LABEL_16:
    sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalMigrateExtractCommentLastModifiedDate", 2, 526337, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalMigrateExtractCommentLastModifiedDate, 0, 0);
    CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE Participant SET comment_last_modified = CalMigrateExtractCommentLastModifiedDate(ci.external_rep, i.address) FROM Participant p2 JOIN CalendarItem ci ON p2.owner_id = ci.ROWID JOIN Identity i ON p2.identity_id = i.ROWID WHERE Participant.ROWID = p2.ROWID AND Participant.comment IS NOT NULL AND Participant.comment_last_modified IS NULL"));
    sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalMigrateExtractCommentLastModifiedDate", 2, 526337, 0, 0, 0, 0);
  }
}

uint64_t CalParticipantGetEntityType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

CFTypeRef _CalParticipantHasValidParent(const void *a1)
{
  CFTypeRef result;

  result = _CalParticipantGetOwner(a1);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

void _CalParticipantCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Participant WHERE owner_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
}

const void *_CalDatabaseCreateAttendee(uint64_t a1)
{
  return _CalCreateParticipant(a1, 7);
}

const void *_CalCreateParticipant(uint64_t a1, int a2)
{
  uint64_t v4;
  const void *v5;
  const void *TemporaryRecordIDForEntity;
  BOOL v7;
  const os_unfair_lock *Context;
  BOOL v9;
  const os_unfair_lock *v10;
  BOOL v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;
  const os_unfair_lock *v18;
  const os_unfair_lock *v19;
  CFStringRef v20;
  const os_unfair_lock *v21;

  v4 = CPRecordCreate();
  if ((a2 - 9) <= 0xFFFFFFFD)
    _CalCreateParticipant_cold_1();
  v5 = (const void *)v4;
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, a2);
  if (CDBLockingAssertionsEnabled)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    v9 = v5 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if (CPRecordGetStore())
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v11 = v5 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (a2 == 7)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (v5)
      {
        if (CPRecordGetStore())
        {
          v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16)
            os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (v5)
      {
        if (CPRecordGetStore())
        {
          v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17)
            os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (v5)
      {
        if (CPRecordGetStore())
        {
          v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18)
            os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (v5)
      {
        if (CPRecordGetStore())
        {
          v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v19)
            os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
  }
  v20 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled)
  {
    if (v5)
    {
      if (CPRecordGetStore())
      {
        v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21)
          os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v20);
  _CalDatabaseAddEntity(a1, v5);
  return v5;
}

const void *CalDatabaseCreateAttendee(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Participant;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Participant = _CalCreateParticipant((uint64_t)a1, 7);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Participant;
}

const void *_CalParticipantCopy(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  int Property;
  const void *Participant;
  const void *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  BOOL v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;
  const os_unfair_lock *v18;
  const os_unfair_lock *v19;
  const os_unfair_lock *v20;
  const os_unfair_lock *v21;
  const os_unfair_lock *v22;
  const os_unfair_lock *v23;
  const os_unfair_lock *v24;
  const os_unfair_lock *v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;
  const os_unfair_lock *v28;
  const os_unfair_lock *v29;
  const os_unfair_lock *v30;
  const os_unfair_lock *v31;
  const os_unfair_lock *v32;
  const os_unfair_lock *v33;
  const os_unfair_lock *v34;
  const os_unfair_lock *v35;
  const os_unfair_lock *v36;
  const os_unfair_lock *v37;
  const os_unfair_lock *v38;
  const os_unfair_lock *v39;
  const os_unfair_lock *v40;
  const os_unfair_lock *v41;
  const os_unfair_lock *v42;
  const os_unfair_lock *v43;
  const os_unfair_lock *v44;
  const os_unfair_lock *v45;
  const os_unfair_lock *v46;
  const os_unfair_lock *v47;
  const os_unfair_lock *v48;
  const os_unfair_lock *v49;
  const os_unfair_lock *v50;
  const os_unfair_lock *v51;

  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  Participant = _CalCreateParticipant(a1, Property);
  v7 = Participant;
  if (CDBLockingAssertionsEnabled)
    v8 = Participant == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v11 = v7 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18)
          os_unfair_lock_assert_owner(v18 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20)
          os_unfair_lock_assert_owner(v20 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21)
          os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23)
          os_unfair_lock_assert_owner(v23 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24)
          os_unfair_lock_assert_owner(v24 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25)
          os_unfair_lock_assert_owner(v25 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26)
          os_unfair_lock_assert_owner(v26 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27)
          os_unfair_lock_assert_owner(v27 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v28)
          os_unfair_lock_assert_owner(v28 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29)
          os_unfair_lock_assert_owner(v29 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v30)
          os_unfair_lock_assert_owner(v30 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31)
          os_unfair_lock_assert_owner(v31 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v32)
          os_unfair_lock_assert_owner(v32 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33)
          os_unfair_lock_assert_owner(v33 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v34)
          os_unfair_lock_assert_owner(v34 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35)
          os_unfair_lock_assert_owner(v35 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v36)
          os_unfair_lock_assert_owner(v36 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v37)
          os_unfair_lock_assert_owner(v37 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v38)
          os_unfair_lock_assert_owner(v38 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v39)
          os_unfair_lock_assert_owner(v39 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v40)
          os_unfair_lock_assert_owner(v40 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v41)
          os_unfair_lock_assert_owner(v41 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v42 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v42)
          os_unfair_lock_assert_owner(v42 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v43)
          os_unfair_lock_assert_owner(v43 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v44 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v44)
          os_unfair_lock_assert_owner(v44 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v45)
          os_unfair_lock_assert_owner(v45 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v46 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v46)
          os_unfair_lock_assert_owner(v46 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v47 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v47)
          os_unfair_lock_assert_owner(v47 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v48 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v48)
          os_unfair_lock_assert_owner(v48 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v49 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v49)
          os_unfair_lock_assert_owner(v49 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v7)
    {
      if (CPRecordGetStore())
      {
        v50 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v50)
          os_unfair_lock_assert_owner(v50 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v51)
          os_unfair_lock_assert_owner(v51 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v7;
}

uint64_t _CalInvalidateParticipantsWithOwnerID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t CalParticipantGetUID(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  if ((CalEntityIsOfType(a1, 100) & 1) == 0)
    CalParticipantGetUID_cold_1();
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalRemoveParticipant(const void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveParticipant(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalRemoveParticipant(const void *a1)
{
  uint64_t result;
  uint64_t Context;
  uint64_t v4;
  const os_unfair_lock *v5;

  result = CPRecordGetStore();
  if (result)
  {
    Context = CPRecordStoreGetContext();
    if (Context)
    {
      v4 = Context;
      _CalDatabaseRemoveEntity(Context, a1);
      _CalDatabaseSetDeletionFlags(v4, 64);
    }
    if (CDBLockingAssertionsEnabled)
    {
      v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5)
        os_unfair_lock_assert_owner(v5 + 20);
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

uint64_t _CalParticipantGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

const __CFString *_CalParticipantSetUUID(uint64_t a1, const __CFString *a2)
{
  return _CalParticipantSetIdentityPropertyIfDifferent(a1, 8, a2);
}

const __CFString *_CalParticipantSetIdentityPropertyIfDifferent(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  const os_unfair_lock *Context;
  const __CFString *result;
  const os_unfair_lock *v7;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFString *)CPRecordGetProperty();
  if (result != a3
    && ((a3 != 0) == (result == 0) || (result = (const __CFString *)CFStringCompare(a3, result, 0)) != 0))
  {
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
    return (const __CFString *)CPRecordSetProperty();
  }
  return result;
}

void CalParticipantSetUUID(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetIdentityPropertyIfDifferent(a1, 8, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalParticipantCopyUUID(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalParticipantCopyUUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalDatabaseCopyOfAllAttendeesInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t RecordStore;
  BOOL v6;
  int v7;
  const os_unfair_lock *Context;
  const os_unfair_lock *v9;
  uint64_t v10;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v6 = RecordStore == 0;
  else
    v6 = 1;
  v7 = !v6;
  if (a2)
  {
    if (v7)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  else if (v7)
  {
    v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v9)
      os_unfair_lock_assert_owner(v9 + 20);
  }
  v10 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v10;
}

void CalParticipantSetDisplayName(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetIdentityPropertyIfDifferent(a1, 21, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalParticipantCopyDisplayName(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalParticipantCopyDisplayName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

const __CFString *_CalParticipantSetAddress(uint64_t a1, CFURLRef anURL)
{
  const __CFString *v3;

  if (anURL)
    v3 = CFURLGetString(anURL);
  else
    v3 = 0;
  return _CalParticipantSetIdentityPropertyIfDifferent(a1, 22, v3);
}

void CalParticipantSetAddress(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetAddress(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const __CFString *CalParticipantCopyAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalParticipantCopyAddress(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

const __CFString *_CalParticipantCopyAddress(uint64_t a1)
{
  const os_unfair_lock *Context;
  const __CFString *result;
  const __CFString *v3;
  CFURLRef v4;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFString *)CPRecordCopyProperty();
  if (result)
  {
    v3 = result;
    v4 = CFURLCreateWithString(0, result, 0);
    CFRelease(v3);
    return (const __CFString *)v4;
  }
  return result;
}

void CalParticipantSetEmailAddress(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 9, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyEmailAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalRecurrenceCopyByDayDays(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalParticipantSetPhoneNumber(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 10, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyPhoneNumber(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalParticipantCopyPhoneNumber(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalParticipantSetFirstName(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetIdentityPropertyIfDifferent(a1, 28, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Name;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Name = _CalParticipantCopyFirstName(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

uint64_t _CalParticipantCopyFirstName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalParticipantSetLastName(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetIdentityPropertyIfDifferent(a1, 29, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Name;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Name = _CalParticipantCopyLastName(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Name;
}

uint64_t _CalParticipantCopyLastName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalParticipantSetExternalRepresentation(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 7, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalParticipantGetScheduleAgent(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalParticipantSetScheduleAgent(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 13, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalParticipantGetRSVP(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 Flag;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Flag = _CalParticipantGetFlag(a1, 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

BOOL _CalParticipantGetFlag(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return (CPRecordGetProperty() & a2) != 0;
}

void CalParticipantSetRSVP(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetFlag(a1, 1u, a2 != 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalParticipantSetFlag(uint64_t a1, unsigned int a2, int a3)
{
  const os_unfair_lock *Context;
  int Property;
  unint64_t v8;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (a3)
    v8 = Property | a2;
  else
    v8 = Property & ~a2;
  return _CalRecordSetPropertyIfDifferent(a1, 14, (const __CFString *)v8);
}

BOOL CalParticipantGetCommentChanged(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 Flag;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Flag = _CalParticipantGetFlag(a1, 2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalParticipantSetCommentChanged(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetFlag(a1, 2u, a2 != 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalParticipantGetStatusChanged(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 Flag;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Flag = _CalParticipantGetFlag(a1, 4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalParticipantSetStatusChanged(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetFlag(a1, 4u, a2 != 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalParticipantGetProposedStartDateChanged(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 Flag;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Flag = _CalParticipantGetFlag(a1, 8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalParticipantSetProposedStartDateChanged(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetFlag(a1, 8u, a2 != 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalParticipantGetAddedByForwarding(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 Flag;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Flag = _CalParticipantGetFlag(a1, 32);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Flag;
}

void CalParticipantSetAddedByForwarding(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalParticipantSetFlag(a1, 0x20u, a2 != 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalParticipantSetResponseComment(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 12, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalParticipantCopyResponseComment(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalRecurrenceCopyByWeekWeeks(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalParticipantSetCommentLastModified(uint64_t a1, CFAbsoluteTime a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 30, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

double CalParticipantGetCommentLastModified(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

uint64_t _CalParticipantSetScheduleForceSend(uint64_t a1, unsigned int a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 20, (const __CFString *)a2);
}

BOOL _CalParticipantGetScheduleForceSend(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

void CalParticipantSetScheduleForceSend(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 20, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalParticipantGetScheduleForceSend(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 ScheduleForceSend;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ScheduleForceSend = _CalParticipantGetScheduleForceSend(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ScheduleForceSend;
}

void CalParticipantSetOwner(const void *a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEntityGetType(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalRelationSetRelatedObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseCopyParticipantChangesInStore(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return _CalDatabaseCopyParticipantOrAttendeeChangesInStore(a1, a2, 100, a3);
}

uint64_t _CalDatabaseCopyParticipantOrAttendeeChangesInStore(uint64_t a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  os_unfair_lock_s *v6;
  CFStringRef v7;
  uint64_t v8;

  v6 = (os_unfair_lock_s *)a1;
  v7 = _CalAttendeeCreateChangeHistoryWhereClauseForStore(a1, a2, a3);
  if (a2)
  {
    v6 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else if (v6)
  {
    CFRetain(v6);
  }
  v8 = _CalDatabaseCopyParticipantChangesWithWhereClause(v6, (uint64_t)v7, a4);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  return v8;
}

uint64_t CalDatabaseCopyAttendeeChangesInStore(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return _CalDatabaseCopyParticipantOrAttendeeChangesInStore(a1, a2, 7, a3);
}

uint64_t _CalDatabaseRemoveParticipantChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  uint64_t v6;
  _QWORD v8[7];
  int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___CalDatabaseRemoveParticipantChangesInStoreToIndex_block_invoke;
  v8[3] = &unk_1E4F88F40;
  v8[4] = &v11;
  v8[5] = v5;
  v8[6] = a2;
  v9 = 100;
  v10 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  v6 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1A5D31AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyAttendeeChangesInCalendar(os_unfair_lock_s *a1, const __CFString *a2, CFMutableDictionaryRef *a3)
{
  return _CalDatabaseCopyParticipantOrAttendeeChangesInCalendar(a1, a2, 7, a3);
}

uint64_t _CalDatabaseCopyParticipantOrAttendeeChangesInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  CFStringRef v7;
  uint64_t v8;

  v7 = _CalAttendeeCreateChangeHistoryWhereClauseForCalendar(a2, a3);
  if (a2)
  {
    a1 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else if (a1)
  {
    CFRetain(a1);
  }
  v8 = _CalDatabaseCopyParticipantChangesWithWhereClause(a1, (uint64_t)v7, a4);
  if (v7)
    CFRelease(v7);
  if (a1)
    CFRelease(a1);
  return v8;
}

uint64_t CalDatabaseCopyParticipantChangesInCalendar(os_unfair_lock_s *a1, const __CFString *a2, CFMutableDictionaryRef *a3)
{
  return _CalDatabaseCopyParticipantOrAttendeeChangesInCalendar(a1, a2, 100, a3);
}

uint64_t CalDatabaseCopyOrganizerChangesInCalendar(os_unfair_lock_s *a1, const __CFString *a2, CFMutableDictionaryRef *a3)
{
  return _CalDatabaseCopyParticipantOrAttendeeChangesInCalendar(a1, a2, 8, a3);
}

uint64_t _CalDatabaseRemoveAttendeeChangesInCalendarToIndex(os_unfair_lock_s *a1, const __CFString *a2, int a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalAttendeeCreateChangeHistoryWhereClauseForCalendar(a2, 100);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___CalDatabaseRemoveAttendeeChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E4F84BF0;
  v9[4] = &v11;
  v9[5] = v5;
  v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A5D31C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalDatabaseRemoveAttendeeChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___CalDatabaseRemoveAttendeeChangesWithIndices_block_invoke;
  v7[3] = &unk_1E4F84C18;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A5D31D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCreateAttendeesSearchStatement(uint64_t *a1)
{
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v6;
  os_unfair_lock_s *v7;
  const os_unfair_lock *v9;

  os_unfair_lock_lock((os_unfair_lock_t)(a1[5] + 80));
  RecordStore = _CalDatabaseGetRecordStore(a1[5]);
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (Database
    && (v6 = Database,
        !sqlite3_create_function(*(sqlite3 **)(*(_QWORD *)(Database + 8) + 8), "IDENTITY_MATCHES", 1, 1, a1, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))IdentityMatcherCallback, 0, 0)))
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v6 + 104))
      {
        v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9)
          os_unfair_lock_assert_owner(v9 + 20);
      }
    }
    return CPSqliteDatabaseStatementForReading();
  }
  else
  {
    v7 = (os_unfair_lock_s *)(a1[5] + 80);
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v7);
    os_unfair_lock_unlock(v7);
    return 0;
  }
}

void IdentityMatcherCallback(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  CFSetRef *v5;
  int v6;
  _BOOL4 v7;

  v5 = (CFSetRef *)sqlite3_user_data(a1);
  v6 = sqlite3_value_int(*a3);
  v7 = CFSetGetValueIfPresent(v5[1], (const void *)v6, 0) != 0;
  sqlite3_result_int(a1, v7);
}

void CalDatabaseDeleteAttendeesSearchStatement(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  os_unfair_lock_s *v5;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        v3 = **a1;
        if (v3)
        {
          if (*(_QWORD *)(v3 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  v5 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 40) + 80);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5);
  os_unfair_lock_unlock(v5);
}

uint64_t _CalDatabasePrepareParticipantsInStoreForMigration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _CalDatabaseRemoveParticipantChangesInStoreToIndexInternal(a1, 100, a3);
}

uint64_t _CalDatabaseRemoveParticipantChangesInStoreToIndexInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v4;
  uint64_t RecordStore;
  BOOL v6;
  const os_unfair_lock *Context;
  uint64_t v8;

  v4 = _CalAttendeeCreateChangeHistoryWhereClauseForStore(a1, a3, a2);
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v6 = RecordStore == 0;
  else
    v6 = 1;
  if (!v6)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v8 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v4)
    CFRelease(v4);
  return v8;
}

uint64_t CalAttendeeBasePropertiesMappingDict(int a1)
{
  uint64_t *v2;

  if (CalAttendeeBasePropertiesMappingDict_onceToken != -1)
    dispatch_once(&CalAttendeeBasePropertiesMappingDict_onceToken, &__block_literal_global_12);
  v2 = &CalAttendeeBasePropertiesMappingDict_sOrganizerPropDict;
  if (!a1)
    v2 = &CalAttendeeBasePropertiesMappingDict_sAttendeePropDict;
  return *v2;
}

void sub_1A5D323D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t i;
  uint64_t j;

  for (i = 160; i != -16; i -= 16)

  for (j = 160; j != -16; j -= 16)
  _Unwind_Resume(a1);
}

void sub_1A5D324EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

const __CFArray *_CalRemoveAttendee(const void *a1)
{
  CFTypeRef Owner;
  uint64_t DatabaseForRecord;

  Owner = _CalParticipantGetOwner(a1);
  if (Owner)
    return _CalCalendarItemRemoveAttendee((uint64_t)Owner, (const __CFArray *)a1);
  DatabaseForRecord = CalGetDatabaseForRecord();
  return (const __CFArray *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

void CalRemoveAttendee(const void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveAttendee(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const void *_CalDatabaseCopyParticipantWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalParticipantGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

CFTypeRef CalDatabaseCopyAttendeeWithUUID(os_unfair_lock_s *a1)
{
  return _CalDatabaseCopyParticipantWithUUID(a1);
}

CFTypeRef _CalDatabaseCopyParticipantWithUUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  const __CFArray *v6;
  const __CFArray *v7;
  const void *ValueAtIndex;
  CFTypeRef v9;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (v6)
  {
    v7 = v6;
    if (CFArrayGetCount(v6) < 1)
    {
      v9 = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
      v9 = CFRetain(ValueAtIndex);
    }
    CFRelease(v7);
  }
  else
  {
    v9 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v9;
}

CFTypeRef CalDatabaseCopyAttendeeForEventWithAddress(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  int UID;
  os_unfair_lock_s *v7;
  uint64_t RecordStore;
  BOOL v9;
  const os_unfair_lock *Context;
  const void *v11;
  const void *ValueAtIndex;
  CFTypeRef v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  const void *i;
  const void *v19;
  __CFString *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void *v29;
  uint64_t v30;
  int v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  UID = CalEventGetUID(a2);
  v7 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v9 = RecordStore == 0;
  else
    v9 = 1;
  if (!v9)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v26 = MEMORY[0x1E0C809B0];
  v27 = 3221225472;
  v28 = ___CalDatabaseCopyParticipantForEventWithAddress_block_invoke;
  v29 = &__block_descriptor_44_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  v31 = UID;
  v30 = a3;
  v11 = (const void *)CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7);
  os_unfair_lock_unlock(v7);
  if (v11)
  {
    if (CFArrayGetCount((CFArrayRef)v11) <= 0)
    {
      CFRelease(v11);
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v11, 0);
      v13 = CFRetain(ValueAtIndex);
      CFRelease(v11);
      if (v13)
        return v13;
    }
  }
  v14 = (void *)CalEventCopyAttendees(a2);
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", a3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v16 = v14;
  v13 = (CFTypeRef)objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
  if (v13)
  {
    v17 = *(_QWORD *)v23;
    while (2)
    {
      for (i = 0; i != v13; i = (char *)i + 1)
      {
        if (*(_QWORD *)v23 != v17)
          objc_enumerationMutation(v16);
        v19 = *(const void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
        v20 = (__CFString *)CalParticipantCopyAddress((uint64_t)v19);
        if (-[__CFString isEqual:](v20, "isEqual:", v15, (_QWORD)v22))
        {
          v13 = CFRetain(v19);

          goto LABEL_24;
        }

      }
      v13 = (CFTypeRef)objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
      if (v13)
        continue;
      break;
    }
  }
LABEL_24:

  return v13;
}

const __CFString *_CalAttendeeSetDisplayName(uint64_t a1, const __CFString *a2)
{
  return _CalParticipantSetIdentityPropertyIfDifferent(a1, 21, a2);
}

uint64_t _CalAttendeeSetEmailAddress(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 9, a2);
}

uint64_t _CalAttendeeSetPhoneNumber(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 10, a2);
}

const __CFString *_CalAttendeeSetFirstName(uint64_t a1, const __CFString *a2)
{
  return _CalParticipantSetIdentityPropertyIfDifferent(a1, 28, a2);
}

const __CFString *_CalAttendeeSetLastName(uint64_t a1, const __CFString *a2)
{
  return _CalParticipantSetIdentityPropertyIfDifferent(a1, 29, a2);
}

uint64_t _CalAttendeeSetType(uint64_t a1, unsigned int a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 1, (const __CFString *)a2);
}

void CalAttendeeSetType(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 1, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Type;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Type = _CalAttendeeGetType(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Type;
}

uint64_t _CalAttendeeGetType(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

void CalAttendeeSetRole(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 4, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetRole(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Role;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Role = _CalAttendeeGetRole(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Role;
}

uint64_t _CalAttendeeGetRole(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalAttendeeSetStatus(const void *a1, int a2)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  uint64_t v6;
  const os_unfair_lock *v7;
  uint64_t result;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  uint64_t v11;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property != a2)
    goto LABEL_29;
  v6 = Property;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result != v6)
  {
LABEL_29:
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9)
            os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
    CPRecordSetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPRecordSetProperty();
    result = (uint64_t)_CalParticipantGetOwner(a1);
    if (result)
    {
      v11 = result;
      result = (uint64_t)_CalCalendarItemGetSelfAttendee(result);
      if ((const void *)result == a1)
        return _CalEventMarkPropertyModified(v11);
    }
  }
  return result;
}

void CalAttendeeSetStatus(const void *a1, int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttendeeSetStatus(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t WeekStartRaw;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  WeekStartRaw = _CalRecurrenceGetWeekStartRaw(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return WeekStartRaw;
}

BOOL CalAttendeeStatusGetNeedsResponse(int a1)
{
  return a1 == 7 || a1 == 0;
}

void CalAttendeeSetPendingStatus(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 3, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetPendingStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalAttendeeSetScheduleStatus(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 19, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetScheduleStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalAttendeeSetLastModified(uint64_t a1, CFAbsoluteTime a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 15, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

double CalAttendeeGetLastModified(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

double _CalAttendeeGetLastModified(uint64_t a1)
{
  return _CalRecordGetDateProperty(a1);
}

void CalAttendeeSetProposedStartDate(uint64_t a1, CFAbsoluteTime a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 16, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

double CalAttendeeGetProposedStartDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void CalAttendeeSetProposedStartDateStatus(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 18, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeGetProposedStartDateStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalAttendeeSetInvitedBy(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 17, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttendeeCopyInvitedBy(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalAttendeeSetScheduleForceSend(uint64_t a1, unsigned int a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 20, (const __CFString *)a2);
}

CFTypeRef _CalParticipantGetDebugDescription(const void *a1)
{
  const __CFString *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t WeekStartRaw;
  uint64_t v7;
  uint64_t Type;
  uint64_t v9;
  uint64_t Role;
  uint64_t v11;
  CFTypeRef Owner;
  const void *v13;
  uint64_t ID;
  NSObject *v15;
  id v16;
  void *v17;
  void *v18;
  CFTypeRef v19;
  CFTypeRef v20;
  const void *v22;
  const void *v23;
  uint8_t buf[16];

  if (a1)
  {
    v23 = (const void *)_CalParticipantCopyUUID((uint64_t)a1);
    v22 = (const void *)_CalParticipantCopyDisplayName((uint64_t)a1);
    v2 = _CalParticipantCopyAddress((uint64_t)a1);
    v3 = (const void *)_CalRecurrenceCopyByDayDays((uint64_t)a1);
    v4 = (const void *)_CalParticipantCopyPhoneNumber((uint64_t)a1);
    v5 = (const void *)_CalRecurrenceCopyByWeekWeeks((uint64_t)a1);
    WeekStartRaw = _CalRecurrenceGetWeekStartRaw((uint64_t)a1);
    v7 = CalAttendeeStatusAsString(WeekStartRaw);
    Type = _CalAttendeeGetType((uint64_t)a1);
    v9 = CalAttendeeTypeAsString(Type);
    Role = _CalAttendeeGetRole((uint64_t)a1);
    v11 = CalAttendeeRoleAsString(Role);
    Owner = _CalParticipantGetOwner(a1);
    if (Owner)
    {
      v13 = (const void *)_CalCalendarItemCopyUUID((uint64_t)Owner);
      ID = CPRecordGetID();
    }
    else
    {
      v13 = 0;
      ID = 0xFFFFFFFFLL;
    }
    v16 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", ID);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend(v16, "initWithFormat:", CFSTR("uuid: [%@] displayName: [%@] address: [%@] emailAddress: [%@] phoneNumber: [%@] role: [%@] status: [%@] type: [%@] responseComment: [%@] calendarItemRowID: [%@] calendarItemUUID: [%@]"), v23, v22, v2, v3, v4, v11, v7, v9, v5, v17, v13);

    if (v13)
      CFRelease(v13);
    if (v5)
      CFRelease(v5);
    if (v3)
      CFRelease(v3);
    if (v4)
      CFRelease(v4);
    if (v2)
      CFRelease(v2);
    if (v22)
      CFRelease(v22);
    if (v23)
      CFRelease(v23);
    if (v18)
    {
      v19 = CFRetain(v18);
      v20 = CFAutorelease(v19);

      return v20;
    }
  }
  else
  {
    v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_ERROR, "NULL 'participant' given.  Will not generate a debug description.", buf, 2u);
    }
  }
  return 0;
}

void sub_1A5D336EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 32; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

const void *_CalDatabaseCreateOrganizer(uint64_t a1)
{
  return _CalCreateParticipant(a1, 8);
}

const void *CalDatabaseCreateOrganizer(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Participant;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Participant = _CalCreateParticipant((uint64_t)a1, 8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Participant;
}

uint64_t _CalOrganizerGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

CFTypeRef CalDatabaseCopyOrganizerWithUUID(os_unfair_lock_s *a1)
{
  return _CalDatabaseCopyParticipantWithUUID(a1);
}

uint64_t _CalOrganizerSetIsSelf(uint64_t a1, unsigned int a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 11, (const __CFString *)a2);
}

void CalOrganizerSetIsSelf(const void *a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  if (CalEntityIsOfType(a1, 8))
  {
    RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
    _CalRecordSetPropertyIfDifferent((uint64_t)a1, 11, (const __CFString *)a2);
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(RecordLock);
    os_unfair_lock_unlock(RecordLock);
  }
}

BOOL CalOrganizerIsSelf(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsSelf;

  if (!CalEntityIsOfType(a1, 8))
    return 0;
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsSelf = _CalOrganizerIsSelf((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsSelf;
}

void CalOrganizerSetOwner(const void *a1, const void *a2)
{
  if ((CalEntityIsOfType(a1, 8) & 1) == 0)
    CalOrganizerSetOwner_cold_1();
  CalParticipantSetOwner(a1, a2);
}

_QWORD *_CalRemoveOrganizer(const void *a1)
{
  CFTypeRef Owner;

  Owner = _CalParticipantGetOwner(a1);
  if (Owner)
    return _CalCalendarItemSetOrganizer((uint64_t)Owner, 0);
  else
    return (_QWORD *)_CalRemoveParticipant(a1);
}

void CalRemoveOrganizer(const void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveOrganizer(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

id CalParticipantSemanticIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  __CFString *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t Name;
  uint64_t v8;
  id v9;
  void *v10;
  void *v12;
  void *v13;

  if (a1)
  {
    RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
    v3 = (__CFString *)_CalParticipantCopyAddress(a1);
    v4 = (void *)_CalRecurrenceCopyByDayDays(a1);
    v5 = (void *)_CalParticipantCopyPhoneNumber(a1);
    v6 = (void *)_CalParticipantCopyDisplayName(a1);
    Name = _CalParticipantCopyFirstName(a1);
    v8 = _CalParticipantCopyLastName(a1);
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(RecordLock);
    os_unfair_lock_unlock(RecordLock);
    if (v3)
    {
      -[__CFString absoluteString](v3, "absoluteString");
      v9 = (id)objc_claimAutoreleasedReturnValue();
    }
    else if (v4)
    {
      v9 = v4;
    }
    else if (v5)
    {
      v9 = v5;
    }
    else
    {
      if (!v6)
      {
        if (Name | v8)
        {
          objc_msgSend(MEMORY[0x1E0CB37A0], "string");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = v12;
          if (Name)
            objc_msgSend(v12, "appendFormat:", CFSTR("FIRST=%@;"), Name);
          if (v8)
            objc_msgSend(v13, "appendFormat:", CFSTR("LAST=%@;"), v8);
          v10 = (void *)objc_msgSend(v13, "copy");

        }
        else
        {
          v10 = 0;
        }
        goto LABEL_14;
      }
      v9 = v6;
    }
    v10 = v9;
LABEL_14:

    return v10;
  }
  v10 = 0;
  return v10;
}

BOOL CalHasCurrentUserRespondedPositivelyToInvitationsFromOrganizerWithEmail(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserRespondedPositivelyToInvitationsFromOrganizerWithContactInfo(a1, (uint64_t)"email", a2);
}

BOOL CalHasCurrentUserRespondedPositivelyToInvitationsFromOrganizerWithContactInfo(os_unfair_lock_s *a1, uint64_t a2, const __CFString *a3)
{
  void *v5;
  os_unfair_lock_s *v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v11;
  const os_unfair_lock *v12;
  uint64_t **v13;
  sqlite3_stmt *v14;
  const char *CStringFromCFString;
  uint64_t v16;
  const os_unfair_lock *v17;
  int v18;
  uint64_t v19;
  const os_unfair_lock *v20;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT 1 WHERE EXISTS (SELECT CalendarItem.ROWID FROM Participant as SelfParticipant, Participant as Organizer, CalendarItem WHERE CalendarItem.organizer_id = Organizer.ROWID AND CalendarItem.self_attendee_id = SelfParticipant.ROWID AND (SelfParticipant.status = ? OR SelfParticipant.status = ?) AND Organizer.%s = ? AND SelfParticipant.ROWID != Organizer.ROWID)"), a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v11 = Database == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  v13 = (uint64_t **)CPSqliteDatabaseStatementForReading();
  sqlite3_bind_int((sqlite3_stmt *)v13[1], 1, 1);
  sqlite3_bind_int((sqlite3_stmt *)v13[1], 2, 3);
  v14 = (sqlite3_stmt *)v13[1];
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(a3);
  sqlite3_bind_text(v14, 3, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        v16 = **v13;
        if (v16)
        {
          if (*(_QWORD *)(v16 + 104))
          {
            v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17)
              os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
    }
  }
  v18 = CPSqliteStatementIntegerResult();
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        v19 = **v13;
        if (v19)
        {
          if (*(_QWORD *)(v19 + 104))
          {
            v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20)
              os_unfair_lock_assert_owner(v20 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);

  return v18 > 0;
}

BOOL CalHasCurrentUserRespondedPositivelyToInvitationsFromOrganizerWithPhoneNumber(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserRespondedPositivelyToInvitationsFromOrganizerWithContactInfo(a1, (uint64_t)"phone_number", a2);
}

BOOL CalHasCurrentUserRepondedPositivelyToInvitationsWithAttendeeWithEmail(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserRepondedPositivelyToInvitationsWithAttendeeWithContactInfo(a1, (uint64_t)"email", a2);
}

BOOL CalHasCurrentUserRepondedPositivelyToInvitationsWithAttendeeWithContactInfo(os_unfair_lock_s *a1, uint64_t a2, const __CFString *a3)
{
  void *v5;
  os_unfair_lock_s *v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v11;
  const os_unfair_lock *v12;
  uint64_t **v13;
  sqlite3_stmt *v14;
  const char *CStringFromCFString;
  uint64_t v16;
  const os_unfair_lock *v17;
  int v18;
  uint64_t v19;
  const os_unfair_lock *v20;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT 1 WHERE EXISTS (SELECT CalendarItem.ROWID FROM Participant as SelfParticipant, Participant as OtherParticipant, CalendarItem WHERE OtherParticipant.owner_id = CalendarItem.ROWID AND CalendarItem.self_attendee_id = SelfParticipant.ROWID AND (SelfParticipant.status = ? OR SelfParticipant.status = ?) AND OtherParticipant.%s = ? AND SelfParticipant.ROWID != OtherParticipant.ROWID)"), a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v11 = Database == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  v13 = (uint64_t **)CPSqliteDatabaseStatementForReading();
  sqlite3_bind_int((sqlite3_stmt *)v13[1], 1, 1);
  sqlite3_bind_int((sqlite3_stmt *)v13[1], 2, 3);
  v14 = (sqlite3_stmt *)v13[1];
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(a3);
  sqlite3_bind_text(v14, 3, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        v16 = **v13;
        if (v16)
        {
          if (*(_QWORD *)(v16 + 104))
          {
            v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17)
              os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
    }
  }
  v18 = CPSqliteStatementIntegerResult();
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        v19 = **v13;
        if (v19)
        {
          if (*(_QWORD *)(v19 + 104))
          {
            v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20)
              os_unfair_lock_assert_owner(v20 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);

  return v18 > 0;
}

BOOL CalHasCurrentUserRepondedPositivelyToInvitationsWithAttendeeWithPhoneNumber(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserRepondedPositivelyToInvitationsWithAttendeeWithContactInfo(a1, (uint64_t)"phone_number", a2);
}

BOOL CalHasCurrentUserInvitedAttendeeWithEmail(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserInvitedAttendeeWithContactInfo(a1, (uint64_t)"email", a2);
}

BOOL CalHasCurrentUserInvitedAttendeeWithContactInfo(os_unfair_lock_s *a1, uint64_t a2, const __CFString *a3)
{
  void *v5;
  os_unfair_lock_s *v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v11;
  const os_unfair_lock *v12;
  uint64_t **v13;
  sqlite3_stmt *v14;
  const char *CStringFromCFString;
  uint64_t v16;
  const os_unfair_lock *v17;
  int v18;
  uint64_t v19;
  const os_unfair_lock *v20;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT 1 WHERE EXISTS (SELECT CalendarItem.ROWID FROM Participant as SelfParticipant, Participant as OtherParticipant, CalendarItem WHERE OtherParticipant.owner_id = CalendarItem.ROWID AND CalendarItem.organizer_id = SelfParticipant.ROWID AND SelfParticipant.is_self = 1 AND OtherParticipant.%s = ? AND SelfParticipant.ROWID != OtherParticipant.ROWID)"), a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v11 = Database == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  v13 = (uint64_t **)CPSqliteDatabaseStatementForReading();
  v14 = (sqlite3_stmt *)v13[1];
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(a3);
  sqlite3_bind_text(v14, 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        v16 = **v13;
        if (v16)
        {
          if (*(_QWORD *)(v16 + 104))
          {
            v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17)
              os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
    }
  }
  v18 = CPSqliteStatementIntegerResult();
  if (v13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        v19 = **v13;
        if (v19)
        {
          if (*(_QWORD *)(v19 + 104))
          {
            v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20)
              os_unfair_lock_assert_owner(v20 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);

  return v18 > 0;
}

BOOL CalHasCurrentUserInvitedAttendeeWithPhoneNumber(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalHasCurrentUserInvitedAttendeeWithContactInfo(a1, (uint64_t)"phone_number", a2);
}

CFTypeRef _CalParticipantLoadStoreId(const void *a1)
{
  CFTypeRef result;
  const os_unfair_lock *Context;

  result = _CalParticipantGetOwner(a1);
  if (result)
  {
    _CalCalendarItemGetStoreId((uint64_t)result);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

CFTypeRef _CalParticipantLoadCalendarId(const void *a1)
{
  CFTypeRef result;
  const os_unfair_lock *Context;

  result = _CalParticipantGetOwner(a1);
  if (result)
  {
    _CalEventGetCalendarId((uint64_t)result);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

void _CalMigrateExtractCommentLastModifiedDate(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  int v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = sqlite3_value_bytes(*a3);
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", sqlite3_value_blob(*a3), v4, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[CalItemMetadata metadataWithData:](CalItemMetadata, "metadataWithData:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = sqlite3_value_bytes(a3[1]);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", sqlite3_value_text(a3[1]), v7, 4, 0);
  objc_msgSend(v6, "unrecognizedProperties");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0DDB9C8]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v11 = v10;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (!v12)
  {
LABEL_11:

LABEL_14:
    sqlite3_result_null(a1);
    goto LABEL_15;
  }
  v13 = v12;
  v14 = *(_QWORD *)v26;
LABEL_3:
  v15 = 0;
  while (1)
  {
    if (*(_QWORD *)v26 != v14)
      objc_enumerationMutation(v11);
    v16 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v15);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_9;
    v17 = v16;
    objc_msgSend(v17, "x_calendarserver_attendee_ref");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v8, "isEqualToString:", v18) & 1) != 0)
      break;

LABEL_9:
    if (v13 == ++v15)
    {
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      if (v13)
        goto LABEL_3;
      goto LABEL_11;
    }
  }
  objc_msgSend(v17, "x_calendarserver_dtstamp");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v19)
    goto LABEL_14;
  objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianGMTCalendar");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  NSDateFromICSValueInTimeZone();
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v22, "timeIntervalSinceReferenceDate");
  sqlite3_result_double(a1, v23);

LABEL_15:
}

CFStringRef _CalAttendeeCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v5;
  uint64_t ID;
  const __CFAllocator *v7;
  CFStringRef v8;
  CFStringRef v10;

  v10 = 0;
  if (a2)
  {
    v5 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if ((_DWORD)a3 == 100)
      v8 = CFStringCreateWithFormat(v7, 0, CFSTR("store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class IN (%d, %d) AND client_identifier = '%@')"), ID, v5, v5, 7, 8, v5);
    else
      v8 = CFStringCreateWithFormat(v7, 0, CFSTR("entity_type = %d  AND store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), a3, ID, v5, v5, a3, v5);
    v10 = v8;
    CFRelease(v5);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v10);
  return v10;
}

uint64_t _CalDatabaseCopyParticipantChangesWithWhereClause(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t RecordStore;
  BOOL v9;
  const os_unfair_lock *Context;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  v7 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v9 = RecordStore == 0;
  else
    v9 = 1;
  if (!v9)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7);
  os_unfair_lock_unlock(v7);
  return v6;
}

CFStringRef _CalAttendeeCreateChangeHistoryWhereClauseForCalendar(CFStringRef result, uint64_t a2)
{
  uint64_t DatabaseForRecord;
  CFTypeRef v4;
  uint64_t ID;
  const __CFAllocator *v6;
  CFStringRef v7;
  CFStringRef v8;

  if (result)
  {
    DatabaseForRecord = CalGetDatabaseForRecord();
    v4 = _CalDatabaseCopyClientIdentifier(DatabaseForRecord);
    ID = CPRecordGetID();
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if ((_DWORD)a2 == 100)
      v7 = CFStringCreateWithFormat(v6, 0, CFSTR("calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class IN (%d, %d) AND client_identifier = '%@')"), ID, v4, v4, 7, 8, v4);
    else
      v7 = CFStringCreateWithFormat(v6, 0, CFSTR("entity_type = %d  AND calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), a2, ID, v4, v4, a2, v4);
    v8 = v7;
    CFRelease(v4);
    _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(DatabaseForRecord, (id *)&v8);
    return v8;
  }
  return result;
}

uint64_t CalRecordIDGetTypeID()
{
  pthread_once(&__CalRecordIDRegisterOnce, (void (*)(void))CalRecordIDRegisterClass);
  return __CalRecordIDTypeID;
}

uint64_t CalRecordIDRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  __CalRecordIDTypeID = result;
  return result;
}

uint64_t CalRecordIDCreate(int a1, int a2)
{
  uint64_t result;

  pthread_once(&__CalRecordIDRegisterOnce, (void (*)(void))CalRecordIDRegisterClass);
  result = _CFRuntimeCreateInstance();
  *(_DWORD *)(result + 16) = a1;
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t CalRecordIDGetEntityType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t CalRecordIDGetRowID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t CalRecordIDIsTemporary(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) >> 31;
}

uint64_t _CalRecordIDSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;
  const os_unfair_lock *v4;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if ((*(_DWORD *)(result + 20) & 0x80000000) != 0)
  {
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v4)
        os_unfair_lock_assert_owner(v4 + 20);
    }
    return CPRecordUnloadProperty();
  }
  return result;
}

BOOL CalRecordIDIsEqual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

uint64_t CalRecordIDHash(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) ^ *(_DWORD *)(a1 + 16);
}

CFStringRef CalRecordIDCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("<CalRecordID: %p> { entityType = %d; rowID = %d; }"),
           a1,
           *(unsigned int *)(a1 + 16),
           *(unsigned int *)(a1 + 20));
}

void CalEntityUnloadProperties(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordInvalidateRecord();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void _CalRecordSetDateProperty(uint64_t a1, int a2, CFAbsoluteTime a3)
{
  const __CFString *v5;

  if (vabdd_f64(a3, *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
  {
    v5 = (const __CFString *)CFDateCreate(0, a3);
    _CalRecordSetPropertyIfDifferent(a1, a2, v5);
    if (v5)
      CFRelease(v5);
  }
  else
  {
    _CalRecordSetPropertyIfDifferent(a1, a2, 0);
  }
}

uint64_t _CalRecordSetPropertyIfDifferent(uint64_t result, int a2, const __CFString *a3)
{
  uint64_t v5;
  const os_unfair_lock *Context;

  if (result)
  {
    v5 = result;
    if (!*(_DWORD *)(*(_QWORD *)(CPRecordGetClass() + 80) + 40 * a2 + 8)
      || (result = _CalRecordValueIsDifferentFromCurrentPropertyValue(v5, a2, a3), (_DWORD)result))
    {
      if (CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      CPRecordSetProperty();
      return 1;
    }
  }
  return result;
}

double _CalRecordGetOriginalDateProperty(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetOriginalProperty())
    JUMPOUT(0x1A85B424CLL);
  return *MEMORY[0x1E0D0C490];
}

CFDateRef _CreateCFDateRefFromCalDate(CFAbsoluteTime a1)
{
  CFDateRef result;

  result = 0;
  if (vabdd_f64(a1, *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
    return CFDateCreate(0, a1);
  return result;
}

double _CFDateRefToCalDate(uint64_t a1)
{
  if (a1)
    JUMPOUT(0x1A85B424CLL);
  return *MEMORY[0x1E0D0C490];
}

void _CalInsertAbsoluteTimeIntoArrayAtIndex(__CFArray *a1, CFIndex a2, CFAbsoluteTime a3)
{
  CFDateRef v5;
  CFDateRef v6;

  v5 = CFDateCreate(0, a3);
  if (v5)
  {
    v6 = v5;
    CFArrayInsertValueAtIndex(a1, a2, v5);
    CFRelease(v6);
  }
}

void _CalAppendAbsoluteTimeToArray(__CFArray *a1, CFAbsoluteTime a2)
{
  CFDateRef v3;
  CFDateRef v4;

  v3 = CFDateCreate(0, a2);
  if (v3)
  {
    v4 = v3;
    CFArrayAppendValue(a1, v3);
    CFRelease(v4);
  }
}

CFStringRef _CalDBCreateUUIDString()
{
  const __CFUUID *v0;
  CFStringRef v1;

  v0 = CFUUIDCreate(0);
  v1 = CFUUIDCreateString(0, v0);
  CFRelease(v0);
  return v1;
}

void _CalDBFillInUUIDColumn(uint64_t a1, uint64_t a2)
{
  CFStringRef v4;
  const os_unfair_lock *Context;
  uint64_t v6;
  uint64_t **v7;
  CFStringRef v8;
  const os_unfair_lock *v9;
  uint64_t v10;
  const os_unfair_lock *v11;
  uint64_t v12;
  const os_unfair_lock *v13;

  v4 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT ROWID from %@ WHERE UUID IS NULL"), a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)(*(_QWORD *)a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v6 = CPSqliteConnectionStatementForSQL();
  if (v6)
  {
    v7 = (uint64_t **)v6;
    v8 = CFStringCreateWithFormat(0, 0, CFSTR("UPDATE %@ SET UUID= ? WHERE rowid = ?;"), a2);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a1)
        {
          if (*(_QWORD *)(*(_QWORD *)a1 + 104))
          {
            v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9)
              os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
    }
    CPSqliteConnectionStatementForSQL();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        v10 = **v7;
        if (v10)
        {
          if (*(_QWORD *)(v10 + 104))
          {
            v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11)
              os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        v12 = **v7;
        if (v12)
        {
          if (*(_QWORD *)(v12 + 104))
          {
            v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13)
              os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    CFRelease(v8);
  }
  CFRelease(v4);
}

uint64_t SetUUID(uint64_t a1, uint64_t ***a2)
{
  int v3;
  const __CFString *v4;
  const __CFString *v5;
  const char *CStringFromCFString;
  uint64_t **v7;
  BOOL v8;
  uint64_t v9;
  const os_unfair_lock *Context;
  uint64_t **v11;
  BOOL v12;
  uint64_t v13;
  const os_unfair_lock *v14;

  v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v4 = _CalDBCreateUUIDString();
  v5 = v4;
  if (*a2)
  {
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(v4);
    sqlite3_bind_text((sqlite3_stmt *)(*a2)[1], 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    sqlite3_bind_int((sqlite3_stmt *)(*a2)[1], 2, v3);
    v7 = *a2;
    if (CDBLockingAssertionsEnabled)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      if (*v7)
      {
        v9 = **v7;
        if (v9)
        {
          if (*(_QWORD *)(v9 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPSqliteStatementPerform();
    v11 = *a2;
    if (CDBLockingAssertionsEnabled)
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      if (*v11)
      {
        v13 = **v11;
        if (v13)
        {
          if (*(_QWORD *)(v13 + 104))
          {
            v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14)
              os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  CFRelease(v5);
  return 0;
}

__CFDictionary *_CalDBCreatePropertyMap(uint64_t a1, int a2)
{
  uint64_t v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  const void **v6;

  LODWORD(v2) = a2;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
  v5 = Mutable;
  if ((int)v2 >= 1 && Mutable)
  {
    v2 = v2;
    v6 = (const void **)(a1 + 8);
    do
    {
      CFDictionarySetValue(v5, *(v6 - 1), (const void *)*(int *)v6);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  return v5;
}

void _CalDBInsertPropertyMap(CFMutableDictionaryRef theDict, uint64_t a2, int a3)
{
  uint64_t v4;
  const void **v5;

  if (theDict && a3 >= 1)
  {
    v4 = a3;
    v5 = (const void **)(a2 + 8);
    do
    {
      CFDictionarySetValue(theDict, *(v5 - 1), (const void *)*(int *)v5);
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

uint64_t _CalRecordHasValueChangedForProperty(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;
  const __CFString *OriginalProperty;

  if (CPRecordGetID() == -1 || !*(_DWORD *)(*(_QWORD *)(CPRecordGetClass() + 80) + 40 * a2 + 8))
    return 1;
  if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  OriginalProperty = (const __CFString *)CPRecordGetOriginalProperty();
  return _CalRecordValueIsDifferentFromCurrentPropertyValue(a1, a2, OriginalProperty);
}

uint64_t _CalRecordValueIsDifferentFromCurrentPropertyValue(uint64_t a1, int a2, const __CFString *a3)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  const __CFString *v7;
  int v8;
  uint64_t result;
  CFComparisonResult v10;
  size_t Length;
  const UInt8 *BytePtr;
  const UInt8 *v13;
  BOOL v14;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if ((const __CFString *)Property == a3)
    return 0;
  v7 = (const __CFString *)Property;
  if ((a3 != 0) == (Property == 0))
    return 1;
  v8 = *(_DWORD *)(*(_QWORD *)(CPRecordGetClass() + 80) + 40 * a2 + 8);
  result = 1;
  switch(v8)
  {
    case 2:
      v10 = CFStringCompare(a3, v7, 0);
      goto LABEL_16;
    case 3:
      Length = CFDataGetLength((CFDataRef)a3);
      if (Length != CFDataGetLength((CFDataRef)v7))
        return 1;
      BytePtr = CFDataGetBytePtr((CFDataRef)a3);
      v13 = CFDataGetBytePtr((CFDataRef)v7);
      v14 = memcmp(BytePtr, v13, Length) == 0;
      goto LABEL_17;
    case 6:
      v10 = CFNumberCompare((CFNumberRef)a3, (CFNumberRef)v7, 0);
      goto LABEL_16;
    case 7:
      v10 = CFDateCompare((CFDateRef)a3, (CFDateRef)v7, 0);
LABEL_16:
      v14 = v10 == kCFCompareEqualTo;
LABEL_17:
      result = !v14;
      break;
    default:
      return result;
  }
  return result;
}

BOOL _CalRecordOfClassStillExists(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v16;
  uint64_t v17;
  uint64_t v18;
  const os_unfair_lock *v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  const os_unfair_lock *v23;
  uint64_t v24;
  uint64_t v25;
  const os_unfair_lock *v26;
  _BOOL8 v27;
  const os_unfair_lock *v28;

  v6 = *(unsigned int *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)&_CalRecordOfClassStillExists_lock);
  v7 = (void *)_CalRecordOfClassStillExists_entityTypeToSql;
  if (!_CalRecordOfClassStillExists_entityTypeToSql)
  {
    v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v9 = (void *)_CalRecordOfClassStillExists_entityTypeToSql;
    _CalRecordOfClassStillExists_entityTypeToSql = (uint64_t)v8;

    v7 = (void *)_CalRecordOfClassStillExists_entityTypeToSql;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT ROWID FROM %s WHERE ROWID = ?"), *(_QWORD *)a1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)_CalRecordOfClassStillExists_entityTypeToSql;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, v13);

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_CalRecordOfClassStillExists_lock);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_34;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v16)
        os_unfair_lock_assert_owner(v16 + 20);
    }
  }
  v17 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v17)
  {
    v18 = v17;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v17)
      {
        if (*(_QWORD *)(*(_QWORD *)v17 + 104))
        {
          v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v19)
            os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
    v20 = CPSqliteConnectionStatementForSQL();
    if (v20)
    {
      v21 = (uint64_t **)v20;
      sqlite3_bind_int64(*(sqlite3_stmt **)(v20 + 8), 1, a3);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v21)
        {
          v22 = **v21;
          if (v22)
          {
            if (*(_QWORD *)(v22 + 104))
            {
              v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v23)
                os_unfair_lock_assert_owner(v23 + 20);
            }
          }
        }
      }
      v24 = CPSqliteStatementInteger64Result();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v21)
        {
          v25 = **v21;
          if (v25)
          {
            if (*(_QWORD *)(v25 + 104))
            {
              v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v26)
                os_unfair_lock_assert_owner(v26 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
      v27 = v24 == a3;
    }
    else
    {
      v27 = 0;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v18)
      {
        if (*(_QWORD *)(*(_QWORD *)v18 + 104))
        {
          v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v28)
            os_unfair_lock_assert_owner(v28 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
LABEL_34:
    v27 = 0;
  }

  return v27;
}

BOOL _CalRecordStillExists()
{
  uint64_t Class;
  uint64_t Store;
  BOOL v2;
  const os_unfair_lock *Context;
  sqlite3_int64 RowidForRecordID;

  Class = CPRecordGetClass();
  Store = CPRecordGetStore();
  CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    v2 = Store == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  RowidForRecordID = CPRecordStoreGetRowidForRecordID();
  return _CalRecordOfClassStillExists(Class, Store, RowidForRecordID);
}

uint64_t updatedHTMLFromEventNotes(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D0C280], "updateHTML:withEventNotes:", a1, a2);
}

uint64_t CalShouldSyncReminders()
{
  return CalIsReminderBridgeEnabled() ^ 1;
}

uint64_t _CalSaveAddedCalendarItems(uint64_t a1)
{
  const os_unfair_lock *Context;
  const __CFArray *Property;
  const __CFArray *v4;
  CFIndex Count;
  int ID;
  int v7;
  CFIndex v8;
  const __CFString *v9;
  const void *ValueAtIndex;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFArray *)CPRecordGetProperty();
  if (!Property)
  {
    CPRecordGetID();
    if (!a1)
      return CPRecordInitializeProperty();
    goto LABEL_20;
  }
  v4 = Property;
  Count = CFArrayGetCount(Property);
  ID = CPRecordGetID();
  if (Count >= 1)
  {
    v7 = ID;
    v8 = 0;
    v9 = (const __CFString *)ID;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, v8);
      if (ValueAtIndex)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11)
              os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
      if (v7 != CPRecordGetProperty())
        _CalRecordSetPropertyIfDifferent((uint64_t)ValueAtIndex, 9, v9);
      ++v8;
    }
    while (Count != v8);
  }
  if (a1)
  {
LABEL_20:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  return CPRecordInitializeProperty();
}

uint64_t _CalEventRemoveLinkedEventsAndSubentities(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  const os_unfair_lock *Context;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  uint64_t Store;
  const os_unfair_lock *v12;
  uint64_t v13;

  if ((result & 0x80000000) == 0 && a2)
  {
    v3 = result;
    if (a3)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a3)
        {
          if (*(_QWORD *)(*(_QWORD *)a3 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    v5 = CPSqliteConnectionStatementForSQL();
    if (v5)
    {
      v6 = (uint64_t **)v5;
      sqlite3_bind_int(*(sqlite3_stmt **)(v5 + 8), 1, v3);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v6)
        {
          v7 = **v6;
          if (v7)
          {
            if (*(_QWORD *)(v7 + 104))
            {
              v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v8)
                os_unfair_lock_assert_owner(v8 + 20);
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v6)
        {
          v9 = **v6;
          if (v9)
          {
            if (*(_QWORD *)(v9 + 104))
            {
              v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10)
                os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    Store = CPRecordGetStore();
    if (!*(_BYTE *)(CPRecordStoreGetContext() + 382))
    {
      if (Store)
      {
        if (CDBLockingAssertionsEnabled)
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
      CPRecordStoreInvalidateCachedInstancesOfClass();
    }
    v13 = CPRecordGetStore();
    result = CPRecordStoreGetContext();
    if (!*(_BYTE *)(result + 382))
    {
      _CalInvalidateRecurrencesWithOwnerID(v13);
      _CalInvalidateParticipantsWithOwnerID(v13);
      _CalInvalidateEventActionsWithOwnerID(v13);
      _CalInvalidateExceptionDatesWithOwnerID(v13);
      _CalInvalidateAlarmsWithCalendarItemOwnerID(v13);
      _CalInvalidateAttachmentsWithOwnerID(v13);
      _CalInvalidateContactsWithOwnerID(v13);
      return _CalInvalidateConferencesWithOwnerID(v13);
    }
  }
  return result;
}

uint64_t _CalEventPrepareForSave(void *a1, uint64_t a2)
{
  uint64_t DatabaseForRecord;
  const os_unfair_lock *Context;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  int IsNew;
  int v10;
  char v11;
  char v12;
  int v13;
  uint64_t v14;
  unsigned int ValueAtIndex;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;
  const os_unfair_lock *v18;
  const os_unfair_lock *v19;
  const os_unfair_lock *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  const os_unfair_lock *v24;
  const os_unfair_lock *v25;
  uint64_t Property;
  const os_unfair_lock *v27;
  uint64_t v28;
  const os_unfair_lock *v29;
  uint64_t v30;
  const os_unfair_lock *v31;
  uint64_t v32;
  const os_unfair_lock *v33;
  uint64_t v34;
  const os_unfair_lock *v35;
  uint64_t v36;
  const os_unfair_lock *v37;
  uint64_t v38;
  const os_unfair_lock *v39;
  uint64_t v40;
  const os_unfair_lock *v41;
  uint64_t v42;
  const os_unfair_lock *v43;
  uint64_t v44;
  const os_unfair_lock *v45;
  uint64_t v46;
  const os_unfair_lock *v47;
  uint64_t v48;
  const os_unfair_lock *v49;
  uint64_t v50;
  const os_unfair_lock *v51;
  uint64_t v52;
  const os_unfair_lock *v53;
  uint64_t v54;
  const void *v55;
  const os_unfair_lock *v56;
  CFAbsoluteTime v57;
  const __CFString *v58;
  const os_unfair_lock *v59;
  CFAbsoluteTime v60;
  const __CFString *v61;
  const os_unfair_lock *v62;
  const os_unfair_lock *v63;
  const os_unfair_lock *v64;
  int v65;
  const os_unfair_lock *v66;
  int v67;
  const os_unfair_lock *v68;
  int v69;
  const os_unfair_lock *v70;
  const void *v71;
  const os_unfair_lock *v72;
  const void *v73;
  uint64_t v74;
  const os_unfair_lock *v75;
  const os_unfair_lock *v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v81;
  _QWORD v82[8];
  int v83;
  int v84;
  int v85;

  DatabaseForRecord = CalGetDatabaseForRecord();
  if (_CalDatabaseIsPropertyModificationLoggingEnabled(DatabaseForRecord))
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    v6 = (const __CFArray *)CPRecordCopyChangedProperties();
    if (v6)
    {
      v7 = v6;
      Count = CFArrayGetCount(v6);
      IsNew = _CalEntityIsNew((_BOOL8)a1);
      if (Count >= 1)
      {
        v10 = IsNew;
        v81 = a2;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 1;
        while (2)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v7, v14 - 1);
          switch(ValueAtIndex)
          {
            case 3u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
            case 0xCu:
            case 0xDu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x1Cu:
            case 0x1Du:
            case 0x24u:
            case 0x28u:
            case 0x2Au:
            case 0x2Bu:
            case 0x38u:
            case 0x39u:
            case 0x3Eu:
            case 0x43u:
            case 0x44u:
            case 0x4Fu:
            case 0x51u:
            case 0x52u:
            case 0x53u:
            case 0x54u:
            case 0x55u:
            case 0x56u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
              goto LABEL_11;
            case 4u:
            case 6u:
            case 0xEu:
            case 0x25u:
            case 0x50u:
              v11 = 1;
              goto LABEL_11;
            case 0xAu:
            case 0xBu:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x26u:
            case 0x27u:
            case 0x29u:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x57u:
            case 0x58u:
            case 0x59u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
              goto LABEL_12;
            case 0x13u:
              v13 = 1;
              goto LABEL_12;
            case 0x14u:
              v10 = 1;
              goto LABEL_11;
            default:
              if (ValueAtIndex)
                goto LABEL_12;
LABEL_11:
              v12 = 1;
LABEL_12:
              if (v14 < Count)
              {
                ++v14;
                if ((v13 & v10 & 1) == 0)
                  continue;
              }
              if (!(v13 & 1 | ((v12 & 1) == 0)))
                _CalEventUpdateLastModifiedDate((uint64_t)a1);
              a2 = v81;
              if (!(v10 & 1 | ((v11 & 1) == 0)))
              {
                if (a1)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (CPRecordGetStore())
                    {
                      v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v16)
                        os_unfair_lock_assert_owner(v16 + 20);
                    }
                  }
                }
                CPRecordGetProperty();
                if (a1)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (CPRecordGetStore())
                    {
                      v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v17)
                        os_unfair_lock_assert_owner(v17 + 20);
                    }
                  }
                }
                CPRecordSetProperty();
              }
              break;
          }
          break;
        }
      }
      CFRelease(v7);
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18)
          os_unfair_lock_assert_owner(v18 + 20);
      }
    }
  }
  if (CPRecordGetProperty())
  {
    if ((_CalEntityIsOfType(a1, 2) & 1) == 0)
      _CalEventPrepareForSave_cold_3();
    _CalEventUpdateOccurrenceCache(a1);
  }
  else
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v19)
            os_unfair_lock_assert_owner(v19 + 20);
        }
      }
    }
    if (CPRecordGetProperty())
    {
      if ((_CalEntityIsOfType(a1, 2) & 1) == 0)
        _CalEventPrepareForSave_cold_2();
      _CalEventUpdateAlarmCache(a1);
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20)
          os_unfair_lock_assert_owner(v20 + 20);
      }
    }
  }
  if (CPRecordGetProperty())
  {
    if ((_CalEntityIsOfType(a1, 3) & 1) == 0)
      _CalEventPrepareForSave_cold_1();
    if (CPRecordGetStore())
    {
      v21 = CPRecordStoreGetContext();
      if (v21)
      {
        v22 = _CalDatabaseCopyScheduledTaskCache(v21);
        if (v22)
        {
          v23 = (const void *)v22;
          _CalScheduledTaskCacheMarkTaskForUpdate(v22, a1);
          CFRelease(v23);
        }
      }
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24)
          os_unfair_lock_assert_owner(v24 + 20);
      }
    }
  }
  if ((CPRecordIsPendingChange() & 1) == 0)
    _CalCalendarItemFixupParticipantsOnEvent((uint64_t)a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25)
          os_unfair_lock_assert_owner(v25 + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    CalRelationOwnerWillSave(Property);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27)
          os_unfair_lock_assert_owner(v27 + 20);
      }
    }
  }
  v28 = CPRecordGetProperty();
  if (v28)
    CalRelationOwnerWillSave(v28);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29)
          os_unfair_lock_assert_owner(v29 + 20);
      }
    }
  }
  v30 = CPRecordGetProperty();
  if (v30)
    CalRelationOwnerWillSave(v30);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31)
          os_unfair_lock_assert_owner(v31 + 20);
      }
    }
  }
  v32 = CPRecordGetProperty();
  if (v32)
    CalRelationOwnerWillSave(v32);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33)
          os_unfair_lock_assert_owner(v33 + 20);
      }
    }
  }
  v34 = CPRecordGetProperty();
  if (v34)
    CalRelationOwnerWillSave(v34);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35)
          os_unfair_lock_assert_owner(v35 + 20);
      }
    }
  }
  v36 = CPRecordGetProperty();
  if (v36)
    CalRelationOwnerWillSave(v36);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v37)
          os_unfair_lock_assert_owner(v37 + 20);
      }
    }
  }
  v38 = CPRecordGetProperty();
  if (v38)
    CalRelationOwnerWillSave(v38);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v39)
          os_unfair_lock_assert_owner(v39 + 20);
      }
    }
  }
  v40 = CPRecordGetProperty();
  if (v40)
    CalRelationOwnerWillSave(v40);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v41)
          os_unfair_lock_assert_owner(v41 + 20);
      }
    }
  }
  v42 = CPRecordGetProperty();
  if (v42)
    CalRelationOwnerWillSave(v42);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v43)
          os_unfair_lock_assert_owner(v43 + 20);
      }
    }
  }
  v44 = CPRecordGetProperty();
  if (v44)
    CalRelationOwnerWillSave(v44);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v45)
          os_unfair_lock_assert_owner(v45 + 20);
      }
    }
  }
  v46 = CPRecordGetProperty();
  if (v46)
    CalRelationOwnerWillSave(v46);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v47 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v47)
          os_unfair_lock_assert_owner(v47 + 20);
      }
    }
  }
  v48 = CPRecordGetProperty();
  if (v48)
    CalRelationOwnerWillSave(v48);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v49 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v49)
          os_unfair_lock_assert_owner(v49 + 20);
      }
    }
  }
  v50 = CPRecordGetProperty();
  if (v50)
    CalRelationOwnerWillSave(v50);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v51)
          os_unfair_lock_assert_owner(v51 + 20);
      }
    }
  }
  v52 = CPRecordGetProperty();
  if (v52)
    CalRelationOwnerWillSave(v52);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v53 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v53)
          os_unfair_lock_assert_owner(v53 + 20);
      }
    }
  }
  v54 = CPRecordGetProperty();
  if (v54)
    CalRelationOwnerWillSave(v54);
  _CalEventValidateIdentityForProperties((uint64_t)a1, a2);
  _CalEventValidateIdentityForProperties((uint64_t)a1, a2);
  if (_CalEventIsAllDay((uint64_t)a1))
  {
    v55 = (const void *)CalTimeZoneCopyCFTimeZone();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v56 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v56)
            os_unfair_lock_assert_owner(v56 + 20);
        }
      }
    }
    if (CPRecordGetProperty())
    {
      MEMORY[0x1A85B424C]();
      CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      v58 = (const __CFString *)CFDateCreate(0, v57);
      _CalRecordSetPropertyIfDifferent((uint64_t)a1, 4, v58);
      CFRelease(v58);
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v59 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v59)
            os_unfair_lock_assert_owner(v59 + 20);
        }
      }
    }
    if (CPRecordGetProperty())
    {
      MEMORY[0x1A85B424C]();
      CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
      v61 = (const __CFString *)CFDateCreate(0, v60);
      _CalRecordSetPropertyIfDifferent((uint64_t)a1, 6, v61);
      CFRelease(v61);
    }
    if (!_CalCalendarItemIsFloating((uint64_t)a1))
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v62 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v62)
              os_unfair_lock_assert_owner(v62 + 20);
          }
        }
      }
      CPRecordSetProperty();
    }
    CFRelease(v55);
  }
  if (CPRecordGetID() != -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v63 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v63)
            os_unfair_lock_assert_owner(v63 + 20);
        }
      }
    }
    if (CPRecordGetProperty())
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v64 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v64)
              os_unfair_lock_assert_owner(v64 + 20);
          }
        }
      }
      v65 = CPRecordGetProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v66 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v66)
              os_unfair_lock_assert_owner(v66 + 20);
          }
        }
      }
      v67 = CPRecordGetProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v68 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v68)
              os_unfair_lock_assert_owner(v68 + 20);
          }
        }
      }
      v69 = CPRecordGetProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v70 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v70)
              os_unfair_lock_assert_owner(v70 + 20);
          }
        }
      }
      v71 = (const void *)CPRecordGetProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v72 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v72)
              os_unfair_lock_assert_owner(v72 + 20);
          }
        }
      }
      v73 = (const void *)CPRecordGetProperty();
      if (v71)
        CFRetain(v71);
      if (v73)
        CFRetain(v73);
      v74 = CalGetDatabaseForRecord();
      v82[0] = MEMORY[0x1E0C809B0];
      v82[1] = 3221225472;
      v82[2] = ___CalEventPrepareForSave_block_invoke;
      v82[3] = &__block_descriptor_76_e5_v8__0l;
      v82[4] = a2;
      v82[5] = v71;
      v82[6] = v73;
      v82[7] = a1;
      v83 = v65;
      v84 = v67;
      v85 = v69;
      _CalDatabaseAddPostCommitActionWithBlock(v74, v82);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v75 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v75)
              os_unfair_lock_assert_owner(v75 + 20);
          }
        }
      }
      CPRecordSetProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v76 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v76)
              os_unfair_lock_assert_owner(v76 + 20);
          }
        }
      }
      CPRecordSetProperty();
    }
  }
  _CalEventUpdateDetectedConferenceURLIfNeeded((uint64_t)a1);
  v77 = CalGetDatabaseForRecord();
  if ((unint64_t)(_CalDatabaseGetChangeReason(v77) - 1) >= 2)
  {
    v78 = COERCE_DOUBLE(_CalEventGetStartDate((uint64_t)a1));
    if (_CalRecordGetDateProperty((uint64_t)a1) - v78 > 864000000.0)
    {
      v79 = CalGetDatabaseForRecord();
      _CalDatabaseIntegrityError(v79, CFSTR("Suspiciously large event duration"));
    }
  }
  return _CalCalendarItemClearDirtyAttributes((uint64_t)a1);
}

uint64_t _CalCalendarItemDidSaveAllProperties(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordUnloadProperty();
}

void _CalCalendarItemPropertyDidChange(const void *a1, int a2)
{
  uint64_t DatabaseForRecord;
  uint64_t v5;
  const os_unfair_lock *v6;
  uint64_t v7;
  _BOOL4 v8;
  BOOL v9;
  int v10;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;
  uint64_t Context;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  uint64_t Property;
  _BOOL4 HasObjects;
  BOOL v19;
  int v20;
  const os_unfair_lock *v21;
  const os_unfair_lock *v22;
  const os_unfair_lock *v23;
  const os_unfair_lock *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  const os_unfair_lock *v30;
  const os_unfair_lock *v31;
  const os_unfair_lock *v32;
  int v33;
  const os_unfair_lock *v34;
  int v35;
  const os_unfair_lock *v36;
  int v37;
  const os_unfair_lock *v38;
  int v39;
  void *v40;
  NSObject *v41;
  int ID;
  const os_unfair_lock *v43;
  const char *v44;
  void *v45;
  int v46;
  const os_unfair_lock *v47;
  void *v48;
  int v49;
  const os_unfair_lock *v50;
  uint64_t v51;
  void *v52;
  NSObject *v53;
  int v54;
  const os_unfair_lock *v55;
  const char *v56;
  void *v57;
  int v58;
  const os_unfair_lock *v59;
  void *v60;
  int v61;
  const os_unfair_lock *v62;
  int v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int OriginalProperty;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (a2 == 90 || !_CalRecordHasValueChangedForProperty((uint64_t)a1, a2))
    return;
  DatabaseForRecord = CalGetDatabaseForRecord();
  if (!DatabaseForRecord || !_CalDatabaseIsPropertyModificationLoggingEnabled(DatabaseForRecord))
  {
    if (a2 == 12)
    {
LABEL_34:
      if (CPRecordGetStore())
      {
        Context = CPRecordStoreGetContext();
        if (Context)
          _CalDatabaseSetChangeFlags(Context, 1);
      }
      goto LABEL_97;
    }
    if (a2 != 81)
    {
      if (a2 != 80)
        goto LABEL_97;
      goto LABEL_11;
    }
LABEL_55:
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16)
            os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
    Property = CPRecordGetProperty();
    HasObjects = CalToManyRelationHasObjects(Property);
    if (a1)
      v19 = CDBLockingAssertionsEnabled == 0;
    else
      v19 = 1;
    v20 = !v19;
    if (HasObjects)
    {
      if (v20)
      {
        if (CPRecordGetStore())
        {
          v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v21)
            os_unfair_lock_assert_owner(v21 + 20);
        }
      }
      if (!CPRecordGetProperty())
      {
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v22)
                os_unfair_lock_assert_owner(v22 + 20);
            }
          }
        }
        goto LABEL_88;
      }
    }
    else
    {
      if (v20)
      {
        if (CPRecordGetStore())
        {
          v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v23)
            os_unfair_lock_assert_owner(v23 + 20);
        }
      }
      if (CPRecordGetProperty() == 1)
      {
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v24)
                os_unfair_lock_assert_owner(v24 + 20);
            }
          }
        }
        goto LABEL_88;
      }
    }
    goto LABEL_97;
  }
  if (a2 <= 77)
  {
    switch(a2)
    {
      case 3:
        v5 = (uint64_t)a1;
        goto LABEL_96;
      case 4:
        v5 = (uint64_t)a1;
        goto LABEL_96;
      case 6:
        v5 = (uint64_t)a1;
        goto LABEL_96;
      case 12:
        goto LABEL_34;
      case 15:
        if (CPRecordGetID() == -1)
          goto LABEL_97;
        v5 = (uint64_t)a1;
        break;
      case 16:
        v5 = (uint64_t)a1;
        goto LABEL_96;
      case 17:
        v5 = (uint64_t)a1;
        goto LABEL_96;
      default:
        goto LABEL_97;
    }
    goto LABEL_96;
  }
  if (a2 > 80)
  {
    if (a2 != 81)
    {
      if (a2 != 104)
        goto LABEL_97;
      v5 = (uint64_t)a1;
      goto LABEL_96;
    }
    goto LABEL_55;
  }
  if (a2 == 78)
  {
    v5 = (uint64_t)a1;
LABEL_96:
    _CalEventMarkPropertyModified(v5);
    goto LABEL_97;
  }
  if (a2 != 80)
    goto LABEL_97;
  _CalEventMarkPropertyModified((uint64_t)a1);
LABEL_11:
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  v7 = CPRecordGetProperty();
  v8 = CalToManyRelationHasObjects(v7);
  if (a1)
    v9 = CDBLockingAssertionsEnabled == 0;
  else
    v9 = 1;
  v10 = !v9;
  if (v8)
  {
    if (v10)
    {
      if (CPRecordGetStore())
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
    if (!CPRecordGetProperty())
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12)
              os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
LABEL_88:
      CPRecordSetProperty();
    }
  }
  else
  {
    if (v10)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
    if (CPRecordGetProperty() == 1)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15)
              os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
      goto LABEL_88;
    }
  }
LABEL_97:
  if (!_CalEntityIsOfType(a1, 2))
  {
    v25 = _CalEntityIsOfType(a1, 3);
    if ((a2 - 37) <= 3 && v25)
      _CalTaskMarkAsNeedingScheduledTaskCacheUpdate(a1);
    goto LABEL_105;
  }
  if (a2 <= 77)
  {
    if (a2 > 0x3E)
      goto LABEL_110;
    if (((1 << a2) & 0x41000000800063F0) == 0)
    {
      v26 = 1 << a2;
      v27 = 0x12000000000;
LABEL_107:
      if ((v26 & v27) != 0 && _CalCalendarItemHasAlarms((uint64_t)a1))
      {
        CPRecordGetStore();
        v28 = CPRecordStoreGetContext();
        _CalDatabaseSetChangeFlags(v28, 8);
      }
      goto LABEL_110;
    }
    goto LABEL_101;
  }
  if ((a2 - 79) < 2)
    goto LABEL_101;
  if (a2 == 78)
  {
    _CalEventMarkEventAsNeedingAlarmCacheUpdate(a1);
LABEL_126:
    _CalEventMarkEventAsHavingDirtyNotifiableAttributes((uint64_t)a1);
    goto LABEL_127;
  }
  if (a2 == 94)
  {
LABEL_101:
    _CalEventMarkEventAsNeedingOccurrenceCacheUpdate(a1);
LABEL_105:
    if (a2 > 0x38)
      goto LABEL_110;
    v26 = 1 << a2;
    v27 = 0x100012000000010;
    goto LABEL_107;
  }
LABEL_110:
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 20:
    case 28:
    case 29:
    case 36:
    case 37:
    case 40:
    case 42:
    case 43:
    case 56:
    case 57:
    case 62:
    case 67:
    case 68:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
      goto LABEL_111;
    case 2:
    case 10:
    case 11:
    case 16:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 38:
    case 39:
    case 41:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 58:
    case 59:
    case 60:
    case 61:
    case 63:
    case 64:
    case 65:
    case 66:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
      break;
    default:
      if ((a2 - 99) <= 0x1A && ((1 << (a2 - 99)) & 0x4070001) != 0)
LABEL_111:
        _CalEventMarkEventAsHavingDirtyInstanceAttributes((uint64_t)a1);
      break;
  }
  if ((a2 > 0x32 || ((1 << a2) & 0x600001B880000) == 0)
    && ((a2 - 87) > 0x27 || ((1 << (a2 - 87)) & 0x8000000063) == 0))
  {
    goto LABEL_126;
  }
LABEL_127:
  v29 = a2 - 58;
  if ((a2 - 58) <= 0x38)
  {
    if (((1 << v29) & 0x66000000000000) != 0)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v31)
              os_unfair_lock_assert_owner(v31 + 20);
          }
        }
      }
      goto LABEL_141;
    }
    if (((1 << v29) & 0x198000000000000) != 0)
    {
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v30)
          os_unfair_lock_assert_owner(v30 + 20);
      }
LABEL_141:
      CPRecordSetProperty();
      return;
    }
    if (((1 << v29) & 3) != 0)
      goto LABEL_224;
  }
  if ((a2 - 1) < 2)
  {
LABEL_224:
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v32)
            os_unfair_lock_assert_owner(v32 + 20);
        }
      }
    }
    v33 = CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v34)
            os_unfair_lock_assert_owner(v34 + 20);
        }
      }
    }
    v35 = CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v36)
            os_unfair_lock_assert_owner(v36 + 20);
        }
      }
    }
    v37 = CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v38)
            os_unfair_lock_assert_owner(v38 + 20);
        }
      }
    }
    v39 = CPRecordGetProperty();
    if (v33 >= 1 && v33 == v35)
    {
      v40 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v41 = v40;
        ID = CPRecordGetID();
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v43)
                os_unfair_lock_assert_owner(v43 + 20);
            }
          }
        }
        v63 = 67110144;
        v64 = ID;
        v65 = 1024;
        v66 = v33;
        v67 = 1024;
        v68 = v33;
        v69 = 1024;
        v70 = a2;
        v71 = 1024;
        OriginalProperty = CPRecordGetOriginalProperty();
        v44 = "Multiple relationships to the same location: Location is the same value as clientLocation. recordID=%i, lo"
              "cation=%i, clientLocation=%i, currently setting %i; original value for property set = %i";
LABEL_191:
        _os_log_impl(&dword_1A5CCB000, v41, OS_LOG_TYPE_ERROR, v44, (uint8_t *)&v63, 0x20u);

        goto LABEL_192;
      }
      goto LABEL_192;
    }
    if (v33 >= 1 && v33 == v37)
    {
      v45 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v41 = v45;
        v46 = CPRecordGetID();
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v47 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v47)
                os_unfair_lock_assert_owner(v47 + 20);
            }
          }
        }
        v63 = 67110144;
        v64 = v46;
        v65 = 1024;
        v66 = v33;
        v67 = 1024;
        v68 = v33;
        v69 = 1024;
        v70 = a2;
        v71 = 1024;
        OriginalProperty = CPRecordGetOriginalProperty();
        v44 = "Multiple relationships to the same location: Location is the same value as startLocation. recordID=%i, loc"
              "ation=%i, startLocation=%i, currently setting %i; original value for property set = %i";
        goto LABEL_191;
      }
LABEL_192:
      v51 = CalGetDatabaseForRecord();
      _CalDatabaseIntegrityError(v51, CFSTR("Duplicate Location Reference"));
      return;
    }
    if (v33 >= 1 && v33 == v39)
    {
      v48 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v41 = v48;
        v49 = CPRecordGetID();
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v50 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v50)
                os_unfair_lock_assert_owner(v50 + 20);
            }
          }
        }
        v63 = 67110144;
        v64 = v49;
        v65 = 1024;
        v66 = v33;
        v67 = 1024;
        v68 = v33;
        v69 = 1024;
        v70 = a2;
        v71 = 1024;
        OriginalProperty = CPRecordGetOriginalProperty();
        v44 = "Multiple relationships to the same location: Location is the same value as endLocation. recordID=%i, locat"
              "ion=%i, endLocation=%i, currently setting %i; original value for property set = %i";
        goto LABEL_191;
      }
      goto LABEL_192;
    }
    if (v37 >= 1 && v37 == v39)
    {
      v52 = (void *)CDBLogHandle;
      if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        goto LABEL_192;
      v53 = v52;
      v54 = CPRecordGetID();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v55 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v55)
              os_unfair_lock_assert_owner(v55 + 20);
          }
        }
      }
      v63 = 67110144;
      v64 = v54;
      v65 = 1024;
      v66 = v37;
      v67 = 1024;
      v68 = v37;
      v69 = 1024;
      v70 = a2;
      v71 = 1024;
      OriginalProperty = CPRecordGetOriginalProperty();
      v56 = "Multiple relationships to the same location: startLocation is the same value as endLocation. recordID=%i, st"
            "artLocation=%i, endLocation=%i, currently setting %i; original value for property set = %i";
LABEL_221:
      _os_log_impl(&dword_1A5CCB000, v53, OS_LOG_TYPE_ERROR, v56, (uint8_t *)&v63, 0x20u);

      goto LABEL_192;
    }
    if (v35 >= 1 && v35 == v37)
    {
      v57 = (void *)CDBLogHandle;
      if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        goto LABEL_192;
      v53 = v57;
      v58 = CPRecordGetID();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v59 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v59)
              os_unfair_lock_assert_owner(v59 + 20);
          }
        }
      }
      v63 = 67110144;
      v64 = v58;
      v65 = 1024;
      v66 = v35;
      v67 = 1024;
      v68 = v35;
      v69 = 1024;
      v70 = a2;
      v71 = 1024;
      OriginalProperty = CPRecordGetOriginalProperty();
      v56 = "Multiple relationships to the same location: clientLocation is the same value as startLocation. recordID=%i,"
            " clientLocation=%i, startLocation=%i, currently setting %i; original value for property set = %i";
      goto LABEL_221;
    }
    if (v35 >= 1 && v35 == v39)
    {
      v60 = (void *)CDBLogHandle;
      if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        goto LABEL_192;
      v53 = v60;
      v61 = CPRecordGetID();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v62 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v62)
              os_unfair_lock_assert_owner(v62 + 20);
          }
        }
      }
      v63 = 67110144;
      v64 = v61;
      v65 = 1024;
      v66 = v35;
      v67 = 1024;
      v68 = v35;
      v69 = 1024;
      v70 = a2;
      v71 = 1024;
      OriginalProperty = CPRecordGetOriginalProperty();
      v56 = "Multiple relationships to the same location: clientLocation is the same value as endLocation. recordID=%i, c"
            "lientLocation=%i, endLocation=%i, currently setting %i; original value for property set = %i";
      goto LABEL_221;
    }
  }
}

uint64_t _CalCalendarItemPropertyWillChange(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  const os_unfair_lock *v5;
  int v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *Context;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;

  v3 = result;
  if (a2 == 24)
  {
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    result = CPRecordGetProperty();
    if (!result)
    {
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9)
              os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10)
              os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
      CPRecordGetProperty();
      return CPRecordSetProperty();
    }
  }
  else if (a2 == 9)
  {
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5)
            os_unfair_lock_assert_owner(v5 + 20);
        }
      }
    }
    result = CPRecordGetProperty();
    v6 = result;
    if ((_DWORD)result != a3)
    {
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
      result = CPRecordGetProperty();
      if (v6 >= 1 && !(_DWORD)result)
        return _CalRecordSetPropertyIfDifferent(v3, 91, (const __CFString *)v6);
    }
  }
  return result;
}

void CalEventInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalEventClass, (const char **)&kCalEventIndexes, (const char **)&kCalEventChangesIndexes);
  CalMigrationCreateTriggers(a2, (const char **)&kCalEventClass, (const char **)&kCalEventTriggers);
}

void CalEventMigrateTables(uint64_t a1, uint64_t a2, signed int a3)
{
  const os_unfair_lock *Context;
  uint64_t **v6;
  const os_unfair_lock *v7;
  uint64_t **v8;
  const os_unfair_lock *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  const os_unfair_lock *v13;
  int v14;
  uint64_t v15;
  const os_unfair_lock *v16;
  uint64_t v17;
  const os_unfair_lock *v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  const __CFString *v21;
  CFStringRef v22;
  const os_unfair_lock *v23;
  uint64_t **v24;
  const os_unfair_lock *v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  const os_unfair_lock *v29;
  uint64_t v30;
  const os_unfair_lock *v31;
  uint64_t v32;
  const os_unfair_lock *v33;
  const __CFString *v34;
  int BirthdayCalendarId;
  const os_unfair_lock *v36;
  uint64_t **v37;
  const os_unfair_lock *v38;
  uint64_t **v39;
  const os_unfair_lock *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  const os_unfair_lock *v44;
  uint64_t v45;
  const os_unfair_lock *v46;
  uint64_t v47;
  const os_unfair_lock *v48;
  uint64_t v49;
  const os_unfair_lock *v50;
  const os_unfair_lock *v51;
  uint64_t **v52;
  const os_unfair_lock *v53;
  uint64_t v54;
  uint64_t **v55;
  uint64_t v56;
  const os_unfair_lock *v57;
  uint64_t v58;
  const os_unfair_lock *v59;
  uint64_t v60;
  const os_unfair_lock *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  void *v65;
  int v66;

  if (a3 <= 54)
  {
    if (a3 < 13)
      goto LABEL_58;
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    v6 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
    v8 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9)
              os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
    }
    v10 = CPSqliteConnectionStatementForSQL();
    v11 = (uint64_t **)v10;
    if (v6 && v8 && v10)
    {
      v62 = a2;
      v63 = (uint64_t)v8;
      v64 = (uint64_t (*)(uint64_t, uint64_t))v10;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v6)
        {
          v12 = **v6;
          if (v12)
          {
            if (*(_QWORD *)(v12 + 104))
            {
              v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v13)
                os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
      }
      CPSqliteStatementSendResults();
    }
    else if (!v6)
    {
LABEL_42:
      if (v8)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v8)
          {
            v17 = **v8;
            if (v17)
            {
              if (*(_QWORD *)(v17 + 104))
              {
                v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v18)
                  os_unfair_lock_assert_owner(v18 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      if (v11)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v11)
          {
            v19 = **v11;
            if (v19)
            {
              if (*(_QWORD *)(v19 + 104))
              {
                v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v20)
                  os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
LABEL_58:
      v21 = CFSTR("CalendarItem");
      if (a3 < 56)
        v21 = CFSTR("Event");
      v22 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT rowid, location FROM %@ WHERE location IS NOT NULL"), v21, v62, v63, v64);
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)a2)
          {
            if (*(_QWORD *)(*(_QWORD *)a2 + 104))
            {
              v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v23)
                os_unfair_lock_assert_owner(v23 + 20);
            }
          }
        }
      }
      v24 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)a2)
          {
            if (*(_QWORD *)(*(_QWORD *)a2 + 104))
            {
              v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v25)
                os_unfair_lock_assert_owner(v25 + 20);
            }
          }
        }
      }
      v26 = CPSqliteConnectionStatementForSQL();
      v27 = (uint64_t **)v26;
      if (v24 && v26)
      {
        v63 = v26;
        v64 = 0;
        v62 = a2;
        if (CDBLockingAssertionsEnabled)
        {
          if (*v24)
          {
            v28 = **v24;
            if (v28)
            {
              if (*(_QWORD *)(v28 + 104))
              {
                v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v29)
                  os_unfair_lock_assert_owner(v29 + 20);
              }
            }
          }
        }
        CPSqliteStatementSendResults();
      }
      else if (!v24)
      {
LABEL_89:
        if (v27)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (*v27)
            {
              v32 = **v27;
              if (v32)
              {
                if (*(_QWORD *)(v32 + 104))
                {
                  v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v33)
                    os_unfair_lock_assert_owner(v33 + 20);
                }
              }
            }
          }
          CPSqliteStatementReset();
        }
        if (v22)
          CFRelease(v22);
        v14 = 1;
        goto LABEL_100;
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*v24)
        {
          v30 = **v24;
          if (v30)
          {
            if (*(_QWORD *)(v30 + 104))
            {
              v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v31)
                os_unfair_lock_assert_owner(v31 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
      goto LABEL_89;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*v6)
      {
        v15 = **v6;
        if (v15)
        {
          if (*(_QWORD *)(v15 + 104))
          {
            v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16)
              os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    goto LABEL_42;
  }
  if (a3 <= 0x3E)
    goto LABEL_58;
  if (a3 <= 0x5C)
  {
    v14 = 0;
LABEL_100:
    CalMigrationDropIndexes((_QWORD *)a2, (const char **)&kCalEventIndexes);
LABEL_101:
    CalMigrationDropTriggers((_QWORD *)a2, (const char **)&kCalEventTriggers);
LABEL_102:
    if (a3 >= 56)
      v34 = 0;
    else
      v34 = CFSTR("Event");
    CalMigrateTableFull((_QWORD *)a2, (const char **)&kCalEventClass, (uint64_t)v34, (const char **)&kCalEventUpgradeInfo, (const char **)&kCalEventChangesUpgradeInfo, (const char **)&kCalEventIndexes, (const char **)&kCalEventChangesIndexes, (const char **)&kCalEventTriggers, a3);
    goto LABEL_106;
  }
  if (a3 <= 0x70)
  {
    v14 = 0;
    goto LABEL_101;
  }
  if (a3 <= 0x4656)
  {
    v14 = 0;
    goto LABEL_102;
  }
  if (a3 > 0x4659)
    return;
  v14 = 0;
LABEL_106:
  sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CalDetectedConferenceURL", 4, 526337, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalEventRedetectConferenceURLHandler, 0, 0);
  CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE CalendarItem SET conference_url_detected = (SELECT CalDetectedConferenceURL(description, url, Location.title, Location.address) FROM CalendarItem as ci LEFT JOIN Location ON Location.ROWID = IIF(client_location_id > 0, client_location_id, location_id) WHERE ci.ROWID = CalendarItem.ROWID)"));
  if (a3 >= 17202)
  {
    if ((v14 & 1) == 0)
      return;
    goto LABEL_169;
  }
  BirthdayCalendarId = _CalCalendarGetBirthdayCalendarId(a2);
  v62 = MEMORY[0x1E0C809B0];
  v63 = 3221225472;
  v64 = ___CalEventCleanupBirthdayProperties_block_invoke;
  v65 = &__block_descriptor_36_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  v66 = BirthdayCalendarId;
  CalPerformSQLWithConnectionAndBindBlock((_QWORD *)a2, 0, (uint64_t)CFSTR("UPDATE CalendarItem SET (contact_identifier, contact_name) = (NULL, NULL) WHERE calendar_id != ? AND (contact_identifier IS NOT NULL OR contact_name IS NOT NULL)"), &v62);
  if (a3 <= 36)
  {
    EnsureAllEventsHaveUIDsWithQuery(a2);
LABEL_112:
    CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE CalendarItem SET orig_date = NULL WHERE orig_date = -2147483648"));
    CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE CalendarItem SET last_modified = NULL WHERE last_modified = -2147483648"));
LABEL_113:
    _CalDBFillInUUIDColumn(a2, (uint64_t)CFSTR("CalendarItem"));
    goto LABEL_114;
  }
  if (a3 <= 0x30)
    goto LABEL_112;
  if (a3 <= 0x34)
    goto LABEL_113;
  if (a3 > 54)
    goto LABEL_168;
LABEL_114:
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)a2)
    {
      if (*(_QWORD *)(*(_QWORD *)a2 + 104))
      {
        v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v36)
          os_unfair_lock_assert_owner(v36 + 20);
      }
    }
  }
  v37 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)a2)
    {
      if (*(_QWORD *)(*(_QWORD *)a2 + 104))
      {
        v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v38)
          os_unfair_lock_assert_owner(v38 + 20);
      }
    }
  }
  v39 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)a2)
    {
      if (*(_QWORD *)(*(_QWORD *)a2 + 104))
      {
        v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v40)
          os_unfair_lock_assert_owner(v40 + 20);
      }
    }
  }
  v41 = CPSqliteConnectionStatementForSQL();
  v42 = (uint64_t **)v41;
  if (v37 && v39 && v41)
  {
    v62 = a2;
    v63 = (uint64_t)v39;
    v64 = (uint64_t (*)(uint64_t, uint64_t))v41;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v37)
      {
        v43 = **v37;
        if (v43)
        {
          if (*(_QWORD *)(v43 + 104))
          {
            v44 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v44)
              os_unfair_lock_assert_owner(v44 + 20);
          }
        }
      }
    }
    CPSqliteStatementSendResults();
  }
  else if (!v37)
  {
    goto LABEL_147;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*v37)
    {
      v45 = **v37;
      if (v45)
      {
        if (*(_QWORD *)(v45 + 104))
        {
          v46 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v46)
            os_unfair_lock_assert_owner(v46 + 20);
        }
      }
    }
  }
  CPSqliteStatementReset();
LABEL_147:
  if (v39)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v39)
      {
        v47 = **v39;
        if (v47)
        {
          if (*(_QWORD *)(v47 + 104))
          {
            v48 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v48)
              os_unfair_lock_assert_owner(v48 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (v42)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v42)
      {
        v49 = **v42;
        if (v49)
        {
          if (*(_QWORD *)(v49 + 104))
          {
            v50 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v50)
              os_unfair_lock_assert_owner(v50 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    if ((v14 & 1) == 0)
      goto LABEL_205;
LABEL_169:
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a2)
      {
        if (*(_QWORD *)(*(_QWORD *)a2 + 104))
        {
          v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v51)
            os_unfair_lock_assert_owner(v51 + 20);
        }
      }
    }
    v52 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a2)
      {
        if (*(_QWORD *)(*(_QWORD *)a2 + 104))
        {
          v53 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v53)
            os_unfair_lock_assert_owner(v53 + 20);
        }
      }
    }
    v54 = CPSqliteConnectionStatementForSQL();
    v55 = (uint64_t **)v54;
    if (v52 && v54)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*v52)
        {
          v56 = **v52;
          if (v56)
          {
            if (*(_QWORD *)(v56 + 104))
            {
              v57 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v57)
                os_unfair_lock_assert_owner(v57 + 20);
            }
          }
        }
      }
      CPSqliteStatementSendResults();
    }
    else if (!v52)
    {
LABEL_196:
      if (v55)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v55)
          {
            v60 = **v55;
            if (v60)
            {
              if (*(_QWORD *)(v60 + 104))
              {
                v61 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v61)
                  os_unfair_lock_assert_owner(v61 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      goto LABEL_204;
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*v52)
      {
        v58 = **v52;
        if (v58)
        {
          if (*(_QWORD *)(v58 + 104))
          {
            v59 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v59)
              os_unfair_lock_assert_owner(v59 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    goto LABEL_196;
  }
LABEL_168:
  if (v14)
    goto LABEL_169;
LABEL_204:
  if (a3 <= 68)
  {
LABEL_205:
    CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE CalendarItem SET has_attendees = 1 WHERE EXISTS (SELECT ROWID FROM Participant WHERE Participant.owner_id = CalendarItem.ROWID AND entity_type = 7)"));
LABEL_207:
    CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE CalendarItem SET due_tz = start_tz, due_all_day = all_day WHERE entity_type = 3 AND due_date IS NOT NULL"));
LABEL_208:
    CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE CalendarItem SET display_order = CAST(creation_date AS INT), external_mod_tag = NULL WHERE entity_type = 3"));
LABEL_209:
    CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE CalendarItem SET invitation_status = 3 WHERE invitation_status = 2"));
    CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE CalendarItem SET invitation_status = 2 WHERE invitation_status = 1"));
LABEL_210:
    CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE CalendarItem SET end_tz = start_tz WHERE entity_type = 2"));
    return;
  }
  if (a3 == 69)
    goto LABEL_207;
  if (a3 <= 0x51)
    goto LABEL_208;
  if (a3 <= 0x59)
    goto LABEL_209;
  if (a3 <= 0x7E)
    goto LABEL_210;
}

uint64_t _CalEventSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t v5;
  BOOL v6;
  const os_unfair_lock *v7;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionTypeMatchingPredicate();
  v5 = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v7)
      os_unfair_lock_assert_owner(v7 + 20);
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

const __CFSet *_CalEventAddOriginalEventFilter(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  const __CFSet *result;

  if (_CalEntityGetType(a2) != 2)
    return 0;
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFSet *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationIsDirty((uint64_t)result);
  return result;
}

CFTypeRef _CalCalendarItemHasValidParent(uint64_t a1)
{
  CFTypeRef result;

  result = _CalCalendarItemGetCalendar(a1);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

void _CalCalendarItemCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM CalendarItem WHERE calendar_id NOT IN (SELECT ROWID FROM Calendar);"),
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM CalendarItem WHERE (orig_date != 0 AND orig_item_id = 0) OR orig_item_id IN (SELECT ROWID FROM CalendarItem WHERE orig_date != 0 AND orig_item_id = 0);"),
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM CalendarItem WHERE orig_item_id = ROWID OR orig_item_id IN (SELECT ROWID FROM CalendarItem WHERE orig_item_id = ROWID);"),
    0);
}

const void *_CalCalendarItemCreate(uint64_t a1, int a2)
{
  const void *v4;
  const void *TemporaryRecordIDForEntity;
  BOOL v6;
  const os_unfair_lock *Context;
  BOOL v8;
  const os_unfair_lock *v9;
  BOOL v10;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;
  CFAbsoluteTime Current;
  CFDateRef v19;
  const os_unfair_lock *v20;
  const os_unfair_lock *v21;
  const os_unfair_lock *v22;
  const os_unfair_lock *v23;
  const os_unfair_lock *v24;
  CFStringRef v25;
  const os_unfair_lock *v26;

  if ((a2 & 0xFFFFFFFE) != 2)
    _CalCalendarItemCreate_cold_1();
  v4 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, a2);
  if (CDBLockingAssertionsEnabled)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v10 = v4 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  Current = CFAbsoluteTimeGetCurrent();
  v19 = CFDateCreate(0, Current);
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20)
          os_unfair_lock_assert_owner(v20 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21)
          os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  MEMORY[0x1A85B424C](v19);
  CPRecordInitializeProperty();
  CFRelease(v19);
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23)
          os_unfair_lock_assert_owner(v23 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24)
          os_unfair_lock_assert_owner(v24 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  v25 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26)
          os_unfair_lock_assert_owner(v26 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v25);
  _CalDatabaseAddEntity(a1, v4);
  _CalEventMarkEventAsHavingDirtyInstanceAttributes((uint64_t)v4);
  if (a2 == 2)
    _CalEventMarkEventAsNeedingOccurrenceCacheUpdate(v4);
  return v4;
}

uint64_t _CalEventMarkEventAsHavingDirtyInstanceAttributes(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t _CalEventMarkEventAsNeedingOccurrenceCacheUpdate(const void *a1)
{
  const os_unfair_lock *Context;

  if ((_CalEntityIsOfType(a1, 2) & 1) == 0)
    _CalEventMarkEventAsNeedingOccurrenceCacheUpdate_cold_1();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

CFTypeRef _CalEventGetDebugDescription(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t UniqueIdentifier;
  uint64_t v5;
  uint64_t StartDate;
  double DateProperty;
  _BOOL8 IsAllDay;
  uint64_t v9;
  CFTypeRef OriginalEvent;
  CFTypeRef Location;
  CFTypeRef v12;
  NSObject *v13;
  CFTypeRef Calendar;
  const void *v15;
  const void *v16;
  uint64_t ID;
  _BOOL8 v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  CFTypeRef v26;
  CFTypeRef v27;
  uint64_t v29;
  CFTypeRef cf;
  const void *v31;
  const void *v32;
  uint8_t buf[16];

  if (a1)
  {
    v2 = _CalCalendarItemCopyUUID(a1);
    v3 = _CalCalendarItemCopyExternalID(a1);
    UniqueIdentifier = _CalEventGetUniqueIdentifier(a1);
    v5 = _CalEventCopySummary(a1);
    StartDate = _CalEventGetStartDate(a1);
    DateProperty = _CalRecordGetDateProperty(a1);
    IsAllDay = _CalEventIsAllDay(a1);
    v9 = _CalCalendarItemCopyURL(a1);
    OriginalEvent = _CalEventGetOriginalEvent(a1);
    Location = _CalCalendarItemGetLocation(a1);
    v29 = UniqueIdentifier;
    if (Location)
      v12 = _CalLocationCopyFullDisplayString((uint64_t)Location);
    else
      v12 = 0;
    Calendar = _CalCalendarItemGetCalendar(a1);
    v31 = (const void *)v5;
    v32 = (const void *)v3;
    cf = (CFTypeRef)v9;
    v15 = (const void *)v2;
    if (Calendar)
    {
      v16 = (const void *)_CalCalendarCopyUUID((uint64_t)Calendar);
      ID = CPRecordGetID();
    }
    else
    {
      v16 = 0;
      ID = 0xFFFFFFFFLL;
    }
    v18 = OriginalEvent != 0;
    v19 = objc_alloc(MEMORY[0x1E0CB3940]);
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", *(double *)&StartDate);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", DateProperty);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", IsAllDay);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v18);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", ID);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = (void *)objc_msgSend(v19, "initWithFormat:", CFSTR("uuid: [%@] externalID: [%@] uniqueIdentifier: [%@] summary: [%@] startDate: [%@] endDate: [%@] isAllDay: [%@] url: [%@] isDetached: [%@] locationFullDisplayString: [%@] calendarUUID: [%@] calendarRowID: [%@]"), v15, v32, v29, v31, v20, v21, v22, cf, v23, v12, v16, v24);

    if (v16)
      CFRelease(v16);
    if (v12)
      CFRelease(v12);
    if (cf)
      CFRelease(cf);
    if (v31)
      CFRelease(v31);
    if (v32)
      CFRelease(v32);
    if (v15)
      CFRelease(v15);
    if (v25)
    {
      v26 = CFRetain(v25);
      v27 = CFAutorelease(v26);

      return v27;
    }
  }
  else
  {
    v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "NULL 'event' given.  Will not generate a debug description.", buf, 2u);
    }
  }
  return 0;
}

uint64_t _CalCalendarItemCopyUUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t _CalEventCopySummary(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t _CalEventGetStartDate(uint64_t a1)
{
  double DateProperty;
  const os_unfair_lock *Context;

  DateProperty = _CalRecordGetDateProperty(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetProperty();
  return *(_QWORD *)&DateProperty;
}

BOOL _CalEventIsAllDay(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL _CalEventIsDetached(uint64_t a1)
{
  return _CalEventGetOriginalEvent(a1) != 0;
}

const void *CalDatabaseCreateEvent(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalCalendarItemCreate((uint64_t)a1, 2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

const void *_CalCalendarItemCreateCopyPreservingUniqueIdentifier(const void *a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  const void *Copy;

  if (!a1)
    _CalCalendarItemCreateCopyPreservingUniqueIdentifier_cold_1();
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Copy = _CalCalendarItemCreateCopy(0, a1, 1, 1, a2, 1, -2147483650.0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Copy;
}

const void *_CalCalendarItemCreateCopy(const void *a1, const void *a2, char a3, int a4, int a5, uint64_t a6, double a7)
{
  uint64_t DatabaseForRecord;
  int EntityType;
  const void *v14;
  const os_unfair_lock *Context;
  const __CFString *Property;
  const os_unfair_lock *v17;
  const __CFString *v18;
  const os_unfair_lock *v19;
  const __CFString *v20;
  const os_unfair_lock *v21;
  const __CFString *v22;
  const os_unfair_lock *v23;
  const __CFString *v24;
  const os_unfair_lock *v25;
  const __CFString *v26;
  const os_unfair_lock *v27;
  const __CFString *v28;
  const os_unfair_lock *v29;
  const __CFString *v30;
  const os_unfair_lock *v31;
  const __CFString *v32;
  const os_unfair_lock *v33;
  const __CFString *v34;
  const os_unfair_lock *v35;
  const __CFString *v36;
  const os_unfair_lock *v37;
  const __CFString *v38;
  const os_unfair_lock *v39;
  const __CFString *v40;
  const os_unfair_lock *v41;
  const __CFString *v42;
  const os_unfair_lock *v43;
  const __CFString *v44;
  const os_unfair_lock *v45;
  const __CFString *v46;
  const os_unfair_lock *v47;
  const __CFString *v48;
  const os_unfair_lock *v49;
  const __CFString *v50;
  const os_unfair_lock *v51;
  const __CFString *v52;
  const os_unfair_lock *v53;
  const __CFString *v54;
  const os_unfair_lock *v55;
  const __CFString *v56;
  const os_unfair_lock *v57;
  const __CFString *v58;
  const os_unfair_lock *v59;
  const __CFString *v60;
  const os_unfair_lock *v61;
  const __CFString *v62;
  const os_unfair_lock *v63;
  const __CFString *v64;
  const os_unfair_lock *v65;
  const __CFString *v66;
  CFTypeRef Location;
  const void *v68;
  const void *v69;
  CFTypeRef StartLocation;
  const void *v71;
  const void *v72;
  CFTypeRef EndLocation;
  const void *v74;
  const void *v75;
  CFTypeRef ClientLocation;
  const void *v77;
  const void *v78;
  const __CFArray *v79;
  const __CFArray *v80;
  CFIndex Count;
  CFIndex v82;
  CFIndex i;
  const void *ValueAtIndex;
  void *v85;
  const __CFArray *v86;
  const __CFArray *v87;
  CFIndex v88;
  CFIndex v89;
  CFIndex j;
  const void *v91;
  uint64_t v92;
  void *v93;
  const __CFArray *v94;
  const __CFArray *v95;
  CFIndex v96;
  CFIndex v97;
  CFIndex k;
  const void *v99;
  void *v100;
  CFTypeRef Organizer;
  const void *v102;
  const void *v103;
  CFTypeRef SelfAttendee;
  const __CFArray *v105;
  const __CFArray *v106;
  CFIndex v107;
  CFIndex v108;
  CFIndex m;
  CFTypeRef v110;
  void *v111;
  const __CFArray *v112;
  const __CFArray *v113;
  CFIndex v114;
  CFIndex v115;
  CFIndex n;
  CFTypeRef v117;
  void *v118;
  CFMutableArrayRef v119;
  const __CFArray *v120;
  CFTypeRef Calendar;
  CFTypeRef Store;
  CFIndex v123;
  CFIndex v124;
  CFIndex ii;
  void *v126;
  void *v127;
  const __CFArray *v128;
  const __CFArray *v129;
  CFIndex v130;
  CFIndex v131;
  CFIndex jj;
  const void *v133;
  void *v134;
  const __CFArray *v135;
  const __CFArray *v136;
  CFIndex v137;
  CFIndex v138;
  CFIndex kk;
  const void *v140;
  void *Copy;
  double DateProperty;
  const void *v145;

  DatabaseForRecord = CalGetDatabaseForRecord();
  EntityType = _CalCalendarItemGetEntityType((uint64_t)a2);
  v14 = _CalCalendarItemCreate(DatabaseForRecord, EntityType);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 0, Property);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
  }
  v18 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 3, v18);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  v20 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 4, v20);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21)
          os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  v22 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 5, v22);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23)
          os_unfair_lock_assert_owner(v23 + 20);
      }
    }
  }
  v24 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 6, v24);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25)
          os_unfair_lock_assert_owner(v25 + 20);
      }
    }
  }
  v26 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 7, v26);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27)
          os_unfair_lock_assert_owner(v27 + 20);
      }
    }
  }
  v28 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 8, v28);
  if (!a1)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v29)
            os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
    v30 = (const __CFString *)CPRecordGetProperty();
    _CalRecordSetPropertyIfDifferent((uint64_t)v14, 9, v30);
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31)
          os_unfair_lock_assert_owner(v31 + 20);
      }
    }
  }
  v32 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 14, v32);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v33)
          os_unfair_lock_assert_owner(v33 + 20);
      }
    }
  }
  v34 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 16, v34);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35)
          os_unfair_lock_assert_owner(v35 + 20);
      }
    }
  }
  v36 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 17, v36);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v37)
          os_unfair_lock_assert_owner(v37 + 20);
      }
    }
  }
  v38 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 20, v38);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v39)
          os_unfair_lock_assert_owner(v39 + 20);
      }
    }
  }
  v40 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 56, v40);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v41)
          os_unfair_lock_assert_owner(v41 + 20);
      }
    }
  }
  v42 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 62, v42);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v43)
          os_unfair_lock_assert_owner(v43 + 20);
      }
    }
  }
  v44 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 57, v44);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v45)
          os_unfair_lock_assert_owner(v45 + 20);
      }
    }
  }
  v46 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 63, v46);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v47 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v47)
          os_unfair_lock_assert_owner(v47 + 20);
      }
    }
  }
  v48 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 64, v48);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v49 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v49)
          os_unfair_lock_assert_owner(v49 + 20);
      }
    }
  }
  v50 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 66, v50);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v51 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v51)
          os_unfair_lock_assert_owner(v51 + 20);
      }
    }
  }
  v52 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 69, v52);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v53 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v53)
          os_unfair_lock_assert_owner(v53 + 20);
      }
    }
  }
  v54 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 115, v54);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v55 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v55)
          os_unfair_lock_assert_owner(v55 + 20);
      }
    }
  }
  v56 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 125, v56);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v57 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v57)
          os_unfair_lock_assert_owner(v57 + 20);
      }
    }
  }
  v58 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 116, v58);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v59 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v59)
          os_unfair_lock_assert_owner(v59 + 20);
      }
    }
  }
  v60 = (const __CFString *)CPRecordGetProperty();
  _CalRecordSetPropertyIfDifferent((uint64_t)v14, 117, v60);
  if ((_DWORD)a6)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v61 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v61)
            os_unfair_lock_assert_owner(v61 + 20);
        }
      }
    }
    v62 = (const __CFString *)CPRecordGetProperty();
    _CalRecordSetPropertyIfDifferent((uint64_t)v14, 26, v62);
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v63 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v63)
            os_unfair_lock_assert_owner(v63 + 20);
        }
      }
    }
    v64 = (const __CFString *)CPRecordGetProperty();
    _CalRecordSetPropertyIfDifferent((uint64_t)v14, 34, v64);
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v65 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v65)
            os_unfair_lock_assert_owner(v65 + 20);
        }
      }
    }
    v66 = (const __CFString *)CPRecordGetProperty();
    _CalRecordSetPropertyIfDifferent((uint64_t)v14, 24, v66);
  }
  Location = _CalCalendarItemGetLocation((uint64_t)a2);
  if (Location)
  {
    v68 = _CalLocationCopy(DatabaseForRecord, (uint64_t)Location);
    if (v68)
    {
      v69 = v68;
      _CalCalendarItemSetLocation((uint64_t)v14, v68);
      CFRelease(v69);
    }
  }
  StartLocation = _CalCalendarItemGetStartLocation((uint64_t)a2);
  if (StartLocation)
  {
    v71 = _CalLocationCopy(DatabaseForRecord, (uint64_t)StartLocation);
    if (v71)
    {
      v72 = v71;
      _CalCalendarItemSetStartLocation((uint64_t)v14, v71);
      CFRelease(v72);
    }
  }
  EndLocation = _CalCalendarItemGetEndLocation((uint64_t)a2);
  if (EndLocation)
  {
    v74 = _CalLocationCopy(DatabaseForRecord, (uint64_t)EndLocation);
    if (v74)
    {
      v75 = v74;
      _CalCalendarItemSetEndLocation((uint64_t)v14, v74);
      CFRelease(v75);
    }
  }
  ClientLocation = _CalCalendarItemGetClientLocation((uint64_t)a2);
  if (ClientLocation)
  {
    v77 = _CalLocationCopy(DatabaseForRecord, (uint64_t)ClientLocation);
    if (v77)
    {
      v78 = v77;
      _CalCalendarItemSetClientLocation((uint64_t)v14, v77);
      CFRelease(v78);
    }
  }
  v145 = a1;
  if ((int)a7 != 0x7FFFFFFF)
  {
    v79 = _CalCalendarItemCopyExceptionDates((uint64_t)a2);
    if (v79)
    {
      v80 = v79;
      Count = CFArrayGetCount(v79);
      if (Count >= 1)
      {
        v82 = Count;
        for (i = 0; i != v82; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v80, i);
          if (_CalExceptionDateGetDate((uint64_t)ValueAtIndex) && MEMORY[0x1A85B424C]() >= a7)
          {
            v85 = (void *)_CalExceptionDateCopy(DatabaseForRecord, (uint64_t)ValueAtIndex);
            _CalCalendarItemAddExceptionDate((uint64_t)v14, v85);
            CFRelease(v85);
          }
        }
      }
      CFRelease(v80);
    }
  }
  v86 = _CalCalendarItemCopyAlarms((uint64_t)a2);
  if (v86)
  {
    v87 = v86;
    v88 = CFArrayGetCount(v86);
    if (v88 >= 1)
    {
      v89 = v88;
      for (j = 0; j != v89; ++j)
      {
        v91 = CFArrayGetValueAtIndex(v87, j);
        v92 = (uint64_t)v91;
        if ((a3 & 1) != 0 || fabs(_CalAlarmGetTriggerDate((uint64_t)v91) + -1.17549435e-38) < 2.22044605e-16)
        {
          v93 = (void *)_CalAlarmCopy(DatabaseForRecord, v92);
          _CalCalendarItemAddAlarm((uint64_t)v14, v93);
          CFRelease(v93);
        }
      }
    }
    CFRelease(v87);
  }
  if (a4)
  {
    v94 = _CalCalendarItemCopyRecurrencesWhileLocked((uint64_t)a2, 1);
    if (v94)
    {
      v95 = v94;
      v96 = CFArrayGetCount(v94);
      if (v96 >= 1)
      {
        v97 = v96;
        for (k = 0; k != v97; ++k)
        {
          v99 = CFArrayGetValueAtIndex(v95, k);
          v100 = (void *)_CalRecurrenceCopy(DatabaseForRecord, (uint64_t)v99);
          _CalCalendarItemAddRecurrence((uint64_t)v14, v100);
          CFRelease(v100);
        }
      }
      CFRelease(v95);
    }
  }
  Organizer = _CalCalendarItemGetOrganizer((uint64_t)a2);
  if (Organizer)
  {
    v102 = _CalParticipantCopy(DatabaseForRecord, (uint64_t)Organizer);
    if (v102)
    {
      v103 = v102;
      _CalCalendarItemSetOrganizer((uint64_t)v14, v102);
      CFRelease(v103);
    }
  }
  SelfAttendee = _CalCalendarItemGetSelfAttendee((uint64_t)a2);
  v105 = _CalCalendarItemCopyAttendees((uint64_t)a2);
  if (v105)
  {
    v106 = v105;
    v107 = CFArrayGetCount(v105);
    if (v107 >= 1)
    {
      v108 = v107;
      for (m = 0; m != v108; ++m)
      {
        v110 = CFArrayGetValueAtIndex(v106, m);
        v111 = (void *)_CalParticipantCopy(DatabaseForRecord, (uint64_t)v110);
        _CalCalendarItemAddAttendee((uint64_t)v14, v111);
        if (v110 == SelfAttendee)
          _CalCalendarItemSetSelfAttendee((uint64_t)v14, v111);
        CFRelease(v111);
      }
    }
    CFRelease(v106);
  }
  v112 = _CalCalendarItemCopyAttendeesPendingDeletion((uint64_t)a2);
  if (v112)
  {
    v113 = v112;
    v114 = CFArrayGetCount(v112);
    if (v114 >= 1)
    {
      v115 = v114;
      for (n = 0; n != v115; ++n)
      {
        v117 = CFArrayGetValueAtIndex(v113, n);
        v118 = (void *)_CalParticipantCopy(DatabaseForRecord, (uint64_t)v117);
        _CalCalendarItemAddPendingDeleteAttendee((uint64_t)v14, v118);
        if (v117 == SelfAttendee)
          _CalCalendarItemSetSelfAttendee((uint64_t)v14, v118);
        CFRelease(v118);
      }
    }
    CFRelease(v113);
  }
  v119 = _CalCalendarItemCopyAttachments((uint64_t)a2);
  if (v119)
  {
    v120 = v119;
    Calendar = v145;
    if (v145 || (Calendar = _CalCalendarItemGetCalendar((uint64_t)a2)) != 0)
      Store = _CalCalendarGetStore((uint64_t)Calendar);
    else
      Store = 0;
    v123 = CFArrayGetCount(v120);
    if (v123 >= 1)
    {
      v124 = v123;
      for (ii = 0; ii != v124; ++ii)
      {
        v126 = (void *)CFArrayGetValueAtIndex(v120, ii);
        v127 = _CalAttachmentCopy((uint64_t)Store, v126);
        _CalCalendarItemAddAttachment((uint64_t)v14, v127);
        CFRelease(v127);
      }
    }
    CFRelease(v120);
  }
  v128 = _CalCalendarItemCopyContacts((uint64_t)a2);
  if (v128)
  {
    v129 = v128;
    v130 = CFArrayGetCount(v128);
    if (v130 >= 1)
    {
      v131 = v130;
      for (jj = 0; jj != v131; ++jj)
      {
        v133 = CFArrayGetValueAtIndex(v129, jj);
        v134 = (void *)_CalContactCopy(DatabaseForRecord, (uint64_t)v133);
        _CalCalendarItemAddContact((uint64_t)v14, v134);
        CFRelease(v134);
      }
    }
    CFRelease(v129);
  }
  if (v145)
    _CalCalendarAddCalendarItem(v145, v14);
  if (a5)
  {
    if (_CalEntityGetType(a2) == 2)
    {
      v135 = _CalEventCopyDetachedEvents((uint64_t)a2);
      if (v135)
      {
        v136 = v135;
        v137 = CFArrayGetCount(v135);
        if (v137 >= 1)
        {
          v138 = v137;
          for (kk = 0; kk != v138; ++kk)
          {
            v140 = CFArrayGetValueAtIndex(v136, kk);
            Copy = (void *)_CalCalendarItemCreateCopy(v145, v140, 1, 1, 0, a6, -2147483650.0);
            _CalEventAddDetachedEvent((uint64_t)v14, Copy);
            DateProperty = _CalRecordGetDateProperty((uint64_t)v140);
            _CalEventSetOriginalStartDate((uint64_t)Copy, DateProperty);
            CFRelease(Copy);
          }
        }
        CFRelease(v136);
      }
    }
  }
  return v14;
}

const void *CalCalendarItemCreateCopyInCalendar(const void *a1, const void *a2, int a3, uint64_t a4)
{
  os_unfair_lock *DatabaseForRecord;
  os_unfair_lock *v9;
  const void *Copy;

  DatabaseForRecord = (os_unfair_lock *)CalGetDatabaseForRecord();
  v9 = (os_unfair_lock *)CalGetDatabaseForRecord();
  CalDatabaseMultiLock(v9, DatabaseForRecord);
  Copy = _CalCalendarItemCreateCopy(a1, a2, 1, 1, a3, a4, -2147483650.0);
  CalDatabaseMultiUnlock(v9, DatabaseForRecord);
  return Copy;
}

const void *CalCalendarItemCreateCopy(const void *a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  const void *Copy;

  if (!a1)
    CalCalendarItemCreateCopy_cold_1();
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Copy = _CalCalendarItemCreateCopy(0, a1, 1, 1, a2, 0, -2147483650.0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Copy;
}

const void *CalEventCreateCopy(const void *a1)
{
  return CalCalendarItemCreateCopy(a1, 0);
}

CFMutableArrayRef _CalEventCopyDetachedEvents(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

void _CalEventAddDetachedEvent(uint64_t a1, void *a2)
{
  int ID;
  int v5;
  void *v6;
  void *v7;
  NSObject *v8;
  const os_unfair_lock *Context;
  _QWORD *Property;
  _DWORD v11[2];
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  ID = CPRecordGetID();
  v5 = CPRecordGetID();
  if ((void *)a1 == a2 || ID != -1 && ID == v5)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", COERCE_DOUBLE(_CalEventGetStartDate(a1)));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v8 = v7;
      v11[0] = 67109378;
      v11[1] = CPRecordGetID();
      v12 = 2114;
      v13 = v6;
      _os_log_impl(&dword_1A5CCB000, v8, OS_LOG_TYPE_ERROR, "Attempting to add an event (ROWID = %d, startDate = %{public}@) as a detachment of itself. Ignoring.", (uint8_t *)v11, 0x12u);

    }
  }
  else
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    Property = (_QWORD *)CPRecordGetProperty();
    if (Property)
      CalToManyRelationAddObject(Property, a2);
  }
}

void _CalEventSetOriginalStartDate(uint64_t a1, CFAbsoluteTime a2)
{
  uint64_t Store;
  const os_unfair_lock *Context;
  int Property;
  const __CFString *CFDateRefFromCalDate;
  uint64_t v8;
  uint64_t CalendarItemWithRowID;
  uint64_t v10;
  double DateProperty;

  Store = CPRecordGetStore();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  CFDateRefFromCalDate = (const __CFString *)_CreateCFDateRefFromCalDate(a2);
  if (Property != -1)
  {
    if (Store)
    {
      v8 = CPRecordGetStore();
      CalendarItemWithRowID = _CalGetCalendarItemWithRowID(v8);
      if (CalendarItemWithRowID)
      {
        v10 = CalendarItemWithRowID;
        DateProperty = _CalRecordGetDateProperty(a1);
        if (vabdd_f64(DateProperty, *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
          _CalCalendarItemRemoveExceptionDateWithCalDate(v10, DateProperty);
      }
    }
  }
  _CalRecordSetPropertyIfDifferent(a1, 11, CFDateRefFromCalDate);
  if (CFDateRefFromCalDate)
    CFRelease(CFDateRefFromCalDate);
}

double _CalEventGetOriginalStartDate(uint64_t a1)
{
  return _CalRecordGetDateProperty(a1);
}

void _CalRemoveEvent(const void *a1, int a2, int a3)
{
  uint64_t Store;
  uint64_t v7;
  uint64_t Context;
  const __CFArray *v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  const void *ValueAtIndex;
  const os_unfair_lock *v15;
  uint64_t CalendarItemWithRowID;
  uint64_t v17;
  const __CFArray *v18;
  const __CFArray *v19;
  double DateProperty;
  const os_unfair_lock *v21;
  const void *v22;
  const void *v23;

  Store = CPRecordGetStore();
  if (Store)
  {
    v7 = Store;
    _CalEventMarkEventAsNeedingOccurrenceCacheUpdate(a1);
    _CalEventMarkEventAsHavingDirtyInstanceAttributes((uint64_t)a1);
    if (_CalCalendarItemHasAlarms((uint64_t)a1))
    {
      CPRecordGetStore();
      Context = CPRecordStoreGetContext();
      _CalDatabaseSetChangeFlags(Context, 8);
    }
    _CalEventRemoveAllEventActions((uint64_t)a1);
    if (a2)
    {
      v9 = _CalEventCopyDetachedEvents((uint64_t)a1);
      if (v9)
      {
        v10 = v9;
        Count = CFArrayGetCount(v9);
        if (Count >= 1)
        {
          v12 = Count;
          for (i = 0; i != v12; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v10, i);
            _CalRemoveEvent(ValueAtIndex, 0, 0);
          }
        }
        CFRelease(v10);
      }
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v15)
            os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
    if ((int)CPRecordGetProperty() >= 1)
    {
      CalendarItemWithRowID = _CalGetCalendarItemWithRowID(v7);
      if (CalendarItemWithRowID)
      {
        v17 = CalendarItemWithRowID;
        if (_CalCalendarItemIsPhantomMaster(CalendarItemWithRowID))
        {
          v18 = _CalEventCopyDetachedEvents(v17);
          if (v18)
          {
            v19 = v18;
            if (CFArrayGetCount(v18) <= 1)
              _CalRemoveEvent(v17, 0, 0);
            CFRelease(v19);
          }
          else
          {
            _CalRemoveEvent(v17, 0, 0);
          }
        }
        else
        {
          if (a3)
          {
            DateProperty = _CalRecordGetDateProperty((uint64_t)a1);
            if (vabdd_f64(DateProperty, *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
              _CalCalendarItemAddExceptionDateWithCalDate(v17, DateProperty);
          }
          _CalEventMarkEventAsHavingDirtyInstanceAttributes(v17);
          if ((_CalEntityIsNew(v17) & 1) == 0)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (CPRecordGetStore())
              {
                v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v21)
                  os_unfair_lock_assert_owner(v21 + 20);
              }
            }
            CPRecordMarkChanged();
          }
        }
      }
    }
    v22 = CalCopyDatabaseForRecord();
    if (v22)
    {
      v23 = v22;
      _CalDatabaseRemoveEntity((uint64_t)v22, a1);
      CFRelease(v23);
    }
  }
}

void _CalEventRemoveAllEventActions(uint64_t a1)
{
  const os_unfair_lock *Context;
  _QWORD *Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationRemoveAllObjects(Property);
}

__CFArray *_CalCalendarItemCopyRelatedEntitiesDeletedByTriggers(uint64_t a1, uint64_t a2)
{
  __CFArray *Mutable;
  CFTypeRef Location;
  CFTypeRef ClientLocation;
  CFTypeRef StartLocation;
  CFTypeRef EndLocation;
  const __CFArray *v8;
  const __CFArray *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  const __CFArray *v15;
  const __CFArray *v16;
  const __CFArray *v17;
  CFTypeRef Error;
  CFRange v20;
  CFRange v21;
  CFRange v22;
  CFRange v23;
  CFRange v24;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  Location = _CalCalendarItemGetLocation(a2);
  if (Location)
    CFArrayAppendValue(Mutable, Location);
  ClientLocation = _CalCalendarItemGetClientLocation(a2);
  if (ClientLocation)
    CFArrayAppendValue(Mutable, ClientLocation);
  StartLocation = _CalCalendarItemGetStartLocation(a2);
  if (StartLocation)
    CFArrayAppendValue(Mutable, StartLocation);
  EndLocation = _CalCalendarItemGetEndLocation(a2);
  if (EndLocation)
    CFArrayAppendValue(Mutable, EndLocation);
  v8 = _CalCalendarItemCopyAlarms(a2);
  if (v8)
  {
    v9 = v8;
    v20.length = CFArrayGetCount(v8);
    v20.location = 0;
    CFArrayAppendArray(Mutable, v9, v20);
    CFRelease(v9);
  }
  v10 = _CalCalendarItemCopyRecurrencesWhileLocked(a2, 1);
  if (v10)
  {
    v11 = v10;
    v21.length = CFArrayGetCount(v10);
    v21.location = 0;
    CFArrayAppendArray(Mutable, v11, v21);
    CFRelease(v11);
  }
  v12 = _CalCalendarItemCopyAttendees(a2);
  if (v12)
  {
    v13 = v12;
    v22.length = CFArrayGetCount(v12);
    v22.location = 0;
    CFArrayAppendArray(Mutable, v13, v22);
    CFRelease(v13);
  }
  v14 = _CalCalendarItemCopyAttachments(a2);
  if (v14)
  {
    v15 = v14;
    v23.length = CFArrayGetCount(v14);
    v23.location = 0;
    CFArrayAppendArray(Mutable, v15, v23);
    CFRelease(v15);
  }
  v16 = _CalCalendarItemCopyContacts(a2);
  if (v16)
  {
    v17 = v16;
    v24.length = CFArrayGetCount(v16);
    v24.location = 0;
    CFArrayAppendArray(Mutable, v17, v24);
    CFRelease(v17);
  }
  Error = _CalCalendarItemGetError(a2);
  if (Error)
    CFArrayAppendValue(Mutable, Error);
  return Mutable;
}

void CalRemoveEvent(const void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveEvent(a1, 0, 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventIsFloating(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsFloating;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsFloating = _CalCalendarItemIsFloating(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsFloating;
}

uint64_t _CalEventMarkPropertyModified(uint64_t a1)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3)
          os_unfair_lock_assert_owner(v3 + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalEventGetModifiedProperties(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t InvitationStatus;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  InvitationStatus = _CalCalendarGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return InvitationStatus;
}

void CalEventClearModifiedProperties(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalEventMarkAsModifiedForChangeTracking(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordMarkChanged();
  return _CalEventMarkEventAsHavingDirtyNotifiableAttributes(a1);
}

uint64_t _CalEventMarkEventAsHavingDirtyNotifiableAttributes(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalRemoveEventAndDetachedEvents(const void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveEvent(a1, 1, 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void _CalEventUpdateOccurrenceCache(void *a1)
{
  uint64_t Context;
  uint64_t v3;
  const void *v4;

  if (CPRecordGetStore())
  {
    Context = CPRecordStoreGetContext();
    if (Context)
    {
      v3 = _CalDatabaseCopyEventOccurrenceCache(Context);
      if (v3)
      {
        v4 = (const void *)v3;
        _CalEventOccurrenceCacheMarkEventForUpdate(v3, a1);
        CFRelease(v4);
      }
    }
  }
}

void _CalEventUpdateAlarmCache(void *a1)
{
  uint64_t Context;
  uint64_t v3;
  const void *v4;

  if (CPRecordGetStore())
  {
    Context = CPRecordStoreGetContext();
    if (Context)
    {
      v3 = _CalDatabaseCopyEventOccurrenceCache(Context);
      if (v3)
      {
        v4 = (const void *)v3;
        _CalEventOccurrenceCacheMarkEventForAlarmUpdate(v3, a1);
        CFRelease(v4);
      }
    }
  }
}

uint64_t _CalEventMarkEventAsNeedingAlarmCacheUpdate(const void *a1)
{
  const os_unfair_lock *Context;

  if ((_CalEntityIsOfType(a1, 2) & 1) == 0)
    _CalEventMarkEventAsNeedingAlarmCacheUpdate_cold_1();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t _CalTaskMarkAsNeedingScheduledTaskCacheUpdate(const void *a1)
{
  const os_unfair_lock *Context;

  if ((_CalEntityIsOfType(a1, 3) & 1) == 0)
    _CalTaskMarkAsNeedingScheduledTaskCacheUpdate_cold_1();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void _CalEventRectifyRecurrenceSeriesPrivacyLevels(CFTypeRef OriginalEvent)
{
  uint64_t ID;
  void *v3;
  NSObject *v4;
  void *v5;
  const os_unfair_lock *Context;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  void *v12;
  NSObject *v13;
  unsigned int PrivacyLevel;
  const __CFString *v15;
  CFTypeRef Calendar;
  CFTypeRef Store;
  _BOOL4 v18;
  void *v19;
  NSObject *v20;
  void *v21;
  unsigned int v22;
  void *v23;
  NSObject *v24;
  const __CFString *v25;
  void *v26;
  NSObject *v27;
  int v28;
  NSObject *v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  NSObject *v33;
  int v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFArray *v37;
  const __CFArray *v38;
  CFIndex v39;
  CFIndex v40;
  CFIndex v41;
  const __CFString *v42;
  const void *ValueAtIndex;
  unsigned int v44;
  unsigned int v45;
  void *v46;
  const __CFArray *v47;
  CFIndex v48;
  CFTypeRef v49;
  const __CFString *v50;
  uint64_t v51;
  int v52;
  const __CFString *v53;
  const __CFString *v54;
  NSObject *log;
  uint8_t buf[4];
  _BYTE v57[20];
  __int16 v58;
  const __CFString *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  ID = CPRecordGetID();
  v3 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    v4 = v3;
    v5 = (void *)_CalEventCopySummary((uint64_t)OriginalEvent);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v57 = ID;
    *(_WORD *)&v57[4] = 2112;
    *(_QWORD *)&v57[6] = v5;
    _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_DEBUG, "Rectifying recurrence series privacy levels for event with ID: [%d] title: [%@]", buf, 0x12u);

  }
  if (OriginalEvent)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v7 = (const __CFArray *)CPRecordCopyChangedProperties();
  if (v7)
  {
    v8 = v7;
    Count = CFArrayGetCount(v7);
    if (Count >= 1)
    {
      v10 = Count;
      v11 = 0;
      while (CFArrayGetValueAtIndex(v8, v11) != 17)
      {
        if (v10 == ++v11)
          goto LABEL_37;
      }
      v12 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
      {
        v13 = v12;
        PrivacyLevel = _CalEventGetPrivacyLevel((uint64_t)OriginalEvent);
        v15 = CalPrivacyLevelAsString(PrivacyLevel);
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v57 = v15;
        *(_WORD *)&v57[8] = 1024;
        *(_DWORD *)&v57[10] = ID;
        _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_DEBUG, "Privacy level change to [%@] detected on event with ID: [%d]", buf, 0x12u);

      }
      Calendar = _CalCalendarItemGetCalendar((uint64_t)OriginalEvent);
      Store = _CalCalendarGetStore((uint64_t)Calendar);
      v18 = _CalStoreRequiresSamePrivacyLevelAcrossRecurrenceSeries((uint64_t)Store);
      v19 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
      {
        v20 = v19;
        CalBooleanAsString();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v57 = ID;
        *(_WORD *)&v57[4] = 2112;
        *(_QWORD *)&v57[6] = v21;
        _os_log_impl(&dword_1A5CCB000, v20, OS_LOG_TYPE_DEBUG, "The store for the event with ID [%d] requires the same privacy level across the recurrence series: [%@]", buf, 0x12u);

      }
      if (v18)
      {
        v22 = _CalEventGetPrivacyLevel((uint64_t)OriginalEvent);
        v23 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          v24 = v23;
          v25 = CalPrivacyLevelAsString(v22);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v57 = ID;
          *(_WORD *)&v57[4] = 2112;
          *(_QWORD *)&v57[6] = v25;
          _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_DEBUG, "Privacy level override for event with ID [%d] is [%@].", buf, 0x12u);

        }
        if (_CalEventGetOriginalEvent((uint64_t)OriginalEvent))
        {
          OriginalEvent = _CalEventGetOriginalEvent((uint64_t)OriginalEvent);
          v26 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            v27 = v26;
            v28 = CPRecordGetID();
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v57 = ID;
            *(_WORD *)&v57[4] = 1024;
            *(_DWORD *)&v57[6] = v28;
            _os_log_impl(&dword_1A5CCB000, v27, OS_LOG_TYPE_DEBUG, "Event with ID [%d] is a detached event.  Grabbed the master event with ID [%d].", buf, 0xEu);

          }
        }
        else
        {
          v29 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v57 = ID;
            _os_log_impl(&dword_1A5CCB000, v29, OS_LOG_TYPE_DEBUG, "Event with ID [%d] is a master event.", buf, 8u);
          }
        }
        v30 = _CalEventGetPrivacyLevel((uint64_t)OriginalEvent);
        if (v30 != v22)
        {
          v31 = v30;
          _CalRecordSetPropertyIfDifferent((uint64_t)OriginalEvent, 17, (const __CFString *)v22);
          v32 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            v33 = v32;
            v34 = CPRecordGetID();
            v35 = CalPrivacyLevelAsString(v31);
            v36 = CalPrivacyLevelAsString(v22);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)v57 = v34;
            *(_WORD *)&v57[4] = 1024;
            *(_DWORD *)&v57[6] = ID;
            *(_WORD *)&v57[10] = 2112;
            *(_QWORD *)&v57[12] = v35;
            v58 = 2112;
            v59 = v36;
            _os_log_impl(&dword_1A5CCB000, v33, OS_LOG_TYPE_DEBUG, "Master event with ID [%d] for event with ID [%d] had its privacy level changed from [%@] to [%@].", buf, 0x22u);

          }
        }
        v37 = _CalEventCopyDetachedEvents((uint64_t)OriginalEvent);
        if (v37)
        {
          v38 = v37;
          v39 = CFArrayGetCount(v37);
          if (v39 >= 1)
          {
            v40 = v39;
            v41 = 0;
            v42 = (const __CFString *)v22;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v38, v41);
              v44 = _CalEventGetPrivacyLevel((uint64_t)ValueAtIndex);
              if (v44 != v22)
              {
                v45 = v44;
                _CalRecordSetPropertyIfDifferent((uint64_t)ValueAtIndex, 17, v42);
                v46 = (void *)CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
                {
                  log = v46;
                  v47 = v38;
                  v48 = v40;
                  v49 = OriginalEvent;
                  v50 = v42;
                  v51 = ID;
                  v52 = CPRecordGetID();
                  v53 = CalPrivacyLevelAsString(v45);
                  v54 = CalPrivacyLevelAsString(v22);
                  *(_DWORD *)buf = 67109890;
                  *(_DWORD *)v57 = v52;
                  ID = v51;
                  v42 = v50;
                  OriginalEvent = v49;
                  v40 = v48;
                  v38 = v47;
                  *(_WORD *)&v57[4] = 1024;
                  *(_DWORD *)&v57[6] = ID;
                  *(_WORD *)&v57[10] = 2112;
                  *(_QWORD *)&v57[12] = v53;
                  v58 = 2112;
                  v59 = v54;
                  _os_log_impl(&dword_1A5CCB000, log, OS_LOG_TYPE_DEBUG, "Detached event with ID [%d] associated with event with ID [%d] had its privacy level changed from [%@] to [%@].", buf, 0x22u);

                }
              }
              ++v41;
            }
            while (v40 != v41);
          }
          CFRelease(v38);
        }
      }
    }
LABEL_37:
    CFRelease(v8);
  }
}

uint64_t _CalEventGetPrivacyLevel(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef _CalEventGetOriginalEvent(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

uint64_t _CalInvalidateCalendarItemsForCalendarId(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClass();
}

uint64_t _CalEventInvalidateWithCalendarId(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;
  int Property;
  BOOL v5;
  uint64_t v6;
  uint64_t Store;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  v5 = a2 != -1 && Property == a2;
  v6 = v5;
  if (v5 && (CPRecordGetID() & 0x80000000) == 0)
  {
    Store = CPRecordGetStore();
    _CalInvalidateRecurrencesWithOwnerID(Store);
    _CalInvalidateParticipantsWithOwnerID(Store);
    _CalInvalidateEventActionsWithOwnerID(Store);
    _CalInvalidateAlarmsWithCalendarItemOwnerID(Store);
    _CalInvalidateExceptionDatesWithOwnerID(Store);
    _CalInvalidateAttachmentsWithOwnerID(Store);
    _CalInvalidateContactsWithOwnerID(Store);
    _CalInvalidateConferencesWithOwnerID(Store);
  }
  return v6;
}

uint64_t CalDatabaseCopyOfAllEventsInStore(const void *a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  int UID;
  __CFString *v4;
  __CFString *v5;
  uint64_t RecordStore;
  uint64_t v7;
  BOOL v8;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v11;
  const os_unfair_lock *v12;
  uint64_t v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  BOOL v18;
  const os_unfair_lock *v19;

  if (a2)
  {
    v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    UID = CalStoreGetUID();
    v4 = CalEventCopyStoreUIDQuery();
    if (v4)
    {
      v5 = v4;
      os_unfair_lock_lock(v2 + 20);
      RecordStore = _CalDatabaseGetRecordStore((uint64_t)v2);
      v7 = RecordStore;
      if (CDBLockingAssertionsEnabled)
        v8 = RecordStore == 0;
      else
        v8 = 1;
      if (!v8)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      Database = CPRecordStoreGetDatabase();
      if (CDBLockingAssertionsEnabled)
        v11 = Database == 0;
      else
        v11 = 1;
      if (!v11)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
      v13 = CPSqliteDatabaseStatementForReading();
      if (v13)
      {
        sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 1, UID);
        if (CDBLockingAssertionsEnabled)
        {
          if (v7)
          {
            v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14)
              os_unfair_lock_assert_owner(v14 + 20);
          }
        }
        v15 = CPRecordStoreProcessStatementWithPropertyIndices();
      }
      else
      {
        v15 = 0;
      }
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner(v2 + 20);
      os_unfair_lock_unlock(v2 + 20);
      CFRelease(v5);
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v2 = (os_unfair_lock_s *)CFRetain(a1);
    v16 = v2 + 20;
    os_unfair_lock_lock(v2 + 20);
    v17 = _CalDatabaseGetRecordStore((uint64_t)v2);
    if (CDBLockingAssertionsEnabled)
      v18 = v17 == 0;
    else
      v18 = 1;
    if (!v18)
    {
      v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v19)
        os_unfair_lock_assert_owner(v19 + 20);
    }
    v15 = CPRecordStoreCopyAllInstancesOfClass();
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v16);
    os_unfair_lock_unlock(v16);
  }
  CFRelease(v2);
  return v15;
}

uint64_t CalDatabaseGetCountOfEventsInStore(const void *a1, uint64_t a2)
{
  return CalDatabaseGetCountOfCalendarItemsInStore(a1, 2, a2);
}

void CalDatabaseProcessEventsWithCalendarFilter(os_unfair_lock_s *a1, void *a2, uint64_t a3, void *a4)
{
  void *SelectPrefixFromRecordDescriptor;
  void *v8;
  const void *v9;
  uint64_t RecordStore;
  uint64_t v11;
  BOOL v12;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v15;
  const os_unfair_lock *v16;
  uint64_t v17;
  const os_unfair_lock *v18;
  uint64_t v19;
  uint64_t v20;
  sqlite3_int64 RowidForRecordID;
  BOOL v22;
  const os_unfair_lock *v23;
  const __CFArray *v24;
  uint64_t v25;
  const os_unfair_lock *v26;
  CFIndex Count;
  BOOL v28;
  const os_unfair_lock *v29;
  void (**v30)(id, const __CFArray *);

  v30 = a4;
  os_unfair_lock_lock(a1 + 20);
  SelectPrefixFromRecordDescriptor = (void *)CPRecordStoreCreateSelectPrefixFromRecordDescriptor();
  objc_msgSend(SelectPrefixFromRecordDescriptor, "appendFormat:", CFSTR(" WHERE entity_type = %i AND ROWID > ?"), 2);
  if (a2)
  {
    v8 = _CalFilterCopyCalendarIDClauseForQuery(a2, (uint64_t)CFSTR("calendar_id"));
    if (v8)
    {
      v9 = v8;
      objc_msgSend(SelectPrefixFromRecordDescriptor, "appendFormat:", CFSTR(" AND %@"), v8);
      CFRelease(v9);
    }
  }
  objc_msgSend(SelectPrefixFromRecordDescriptor, "appendFormat:", CFSTR(" LIMIT %i"), a3);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v11 = RecordStore;
  if (CDBLockingAssertionsEnabled)
    v12 = RecordStore == 0;
  else
    v12 = 1;
  if (!v12)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v15 = Database == 0;
  else
    v15 = 1;
  if (!v15)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v16)
        os_unfair_lock_assert_owner(v16 + 20);
    }
  }
  v17 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v17)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v17)
      {
        if (*(_QWORD *)(*(_QWORD *)v17 + 104))
        {
          v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18)
            os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
    v19 = CPSqliteConnectionStatementForSQL();
    if (v19)
    {
      v20 = v19;
      RowidForRecordID = 0;
      do
      {
        sqlite3_bind_int64(*(sqlite3_stmt **)(v20 + 8), 1, RowidForRecordID);
        if (CDBLockingAssertionsEnabled)
          v22 = v11 == 0;
        else
          v22 = 1;
        if (!v22)
        {
          v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v23)
            os_unfair_lock_assert_owner(v23 + 20);
        }
        v24 = (const __CFArray *)CPRecordStoreProcessStatement();
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v20)
          {
            v25 = **(_QWORD **)v20;
            if (v25)
            {
              if (*(_QWORD *)(v25 + 104))
              {
                v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v26)
                  os_unfair_lock_assert_owner(v26 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
        Count = CFArrayGetCount(v24);
        if (Count >= 1)
        {
          CFArrayGetValueAtIndex(v24, Count - 1);
          CPRecordGetID();
          if (CDBLockingAssertionsEnabled)
            v28 = v11 == 0;
          else
            v28 = 1;
          if (!v28)
          {
            v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v29)
              os_unfair_lock_assert_owner(v29 + 20);
          }
          RowidForRecordID = CPRecordStoreGetRowidForRecordID();
          if (CDBLockingAssertionsEnabled)
            os_unfair_lock_assert_owner(a1 + 20);
          os_unfair_lock_unlock(a1 + 20);
          v30[2](v30, v24);
          os_unfair_lock_lock(a1 + 20);
          _CalDatabaseRevertInternal((uint64_t)a1, 1);
        }
        CFRelease(v24);
      }
      while (Count == (int)a3);
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(a1 + 20);
  os_unfair_lock_unlock(a1 + 20);

}

CFURLRef CalEventCopyURI(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  const void *v5;
  CFTypeRef v6;
  const void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  CFURLRef v18;
  const __CFString *v19;
  unint64_t v21;

  v4 = CalCalendarItemCopyCalendar(a1);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = CalCalendarCopyStore((uint64_t)v4);
  if (v6)
  {
    v7 = v6;
    v8 = (void *)CalStoreCopyUUID((uint64_t)v6);
    if (v8)
    {
      v9 = (void *)CalEventCopyUniqueIdentifier(a1);
      if (v9)
      {
        v10 = (void *)MEMORY[0x1E0CB3780];
        objc_msgSend(MEMORY[0x1E0CB3500], "URLPathAllowedCharacterSet");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "bitmapRepresentation");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "characterSetWithBitmapRepresentation:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v13, "removeCharactersInString:", CFSTR("/?&:$+,;=@"));
        objc_msgSend(v9, "stringByAddingPercentEncodingWithAllowedCharacters:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "stringByAddingPercentEncodingWithAllowedCharacters:", v13);
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = (void *)v15;
        if (a2)
        {
          v21 = (unint64_t)MEMORY[0x1A85B424C](a2);
          v17 = CFStringCreateWithFormat(0, 0, CFSTR("x-apple-calevent://%@/%@?o=%lld"), v16, v14, v21);
        }
        else
        {
          v17 = CFStringCreateWithFormat(0, 0, CFSTR("x-apple-calevent://%@/%@"), v15, v14);
        }
        v19 = v17;
        if (v17)
        {
          v18 = CFURLCreateWithString(0, v17, 0);
          CFRelease(v19);
        }
        else
        {
          v18 = 0;
        }

      }
      else
      {
        v18 = 0;
      }

    }
    else
    {
      v18 = 0;
    }
    CFRelease(v7);

  }
  else
  {
    v18 = 0;
  }
  CFRelease(v5);
  return v18;
}

CFStringRef CalEventCopyPublicID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFStringRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalEventCopyPublicID(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFStringRef _CalEventCopyPublicID(uint64_t a1)
{
  uint64_t Calendar;
  CFTypeRef Store;
  void *v4;
  uint64_t v5;
  void *v6;
  CFStringRef v7;

  Calendar = _CalEventGetCalendar(a1);
  if (!Calendar)
    return 0;
  Store = _CalCalendarGetStore(Calendar);
  if (!Store)
    return 0;
  v4 = (void *)_CalStoreCopyUUID((uint64_t)Store);
  if (v4)
  {
    _CalEventGetUniqueIdentifier(a1);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    if (v5)
      v7 = CFStringCreateWithFormat(0, 0, CFSTR("%@%@%@"), v4, *MEMORY[0x1E0D0C518], v5);
    else
      v7 = 0;

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

CFTypeRef CalDatabaseCopyEventWithPublicID(os_unfair_lock_s *a1, CFStringRef theString)
{
  const __CFString *v4;
  CFStringRef v5;
  const __CFString *v6;
  const void *v7;
  const void *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFRange v12;
  CFRange v13;

  if (!theString || CFStringGetLength(theString) < 38)
    return 0;
  v12.location = 0;
  v12.length = 36;
  v4 = CFStringCreateWithSubstring(0, theString, v12);
  v13.length = CFStringGetLength(theString) - 37;
  v13.location = 37;
  v5 = CFStringCreateWithSubstring(0, theString, v13);
  v6 = v5;
  if (v4 && v5)
  {
    v7 = CalDatabaseCopyStoreWithUUID(a1, v4);
    if (v7)
    {
      v8 = v7;
      v9 = CalDatabaseCopyCalendarItemWithUniqueIdentifierInCalendarOrStore(a1, 2, v6, 0, (uint64_t)v7);
      CFRelease(v8);
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_11;
  }
  v9 = 0;
  v10 = 0;
  if (v5)
  {
LABEL_11:
    CFRelease(v6);
    v10 = v9;
  }
  if (v4)
    CFRelease(v4);
  return v10;
}

CFTypeRef CalDatabaseCopyEventWithUniqueIdentifierInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithUniqueIdentifierInCalendarOrStore(a1, 2, a2, 0, a3);
}

CFTypeRef _CalEventGetStore(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Store;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetProperty();
  Store = CPRecordGetStore();
  result = (CFTypeRef)_CalGetCalendarWithUID(Store);
  if (result)
    return _CalCalendarGetStore((uint64_t)result);
  return result;
}

void _CalEventUpdateExternalIDWithOriginalEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef Store;
  const os_unfair_lock *Context;
  const __CFString *v7;
  uint64_t UniqueIdentifier;
  uint64_t v9;
  double DateProperty;
  const __CFUUID *v11;

  Store = _CalCalendarGetStore(a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (!CPRecordGetProperty() && Store)
  {
    if (_CalStoreRequiresMSFormattedUIDKey((uint64_t)Store))
    {
      v7 = (const __CFString *)_EKCreateMSUIDStringForEvent(a1, a3);
    }
    else if (!a3
           || vabdd_f64(_CalRecordGetDateProperty(a1), *MEMORY[0x1E0D0C490]) < 2.22044605e-16
           || (UniqueIdentifier = _CalEventGetUniqueIdentifier(a3)) == 0
           || (v9 = UniqueIdentifier,
               DateProperty = _CalRecordGetDateProperty(a1),
               (v7 = CFStringCreateWithFormat(0, 0, CFSTR("%@/RID=%llu"), v9, (unint64_t)DateProperty)) == 0))
    {
      v11 = CFUUIDCreate(0);
      v7 = CFUUIDCreateString(0, v11);
      CFRelease(v11);
    }
    _CalRecordSetPropertyIfDifferent(a1, 26, v7);
    CFRelease(v7);
  }
}

uint64_t CalEventGetCalendarId(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t CalendarId;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CalendarId = _CalEventGetCalendarId(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return CalendarId;
}

const void *CalDatabaseCopyCalendarItemWithRowID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *CalendarItemWithRowID;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  CalendarItemWithRowID = (const void *)_CalGetCalendarItemWithRowID(RecordStore);
  v5 = CalendarItemWithRowID;
  if (CalendarItemWithRowID)
    CFRetain(CalendarItemWithRowID);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalCalendarItemCopyUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v3;

  if (!a1)
    CalCalendarItemCopyUUID_cold_1();
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  v3 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t CalCalendarItemGetEntityType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t EntityType;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  EntityType = _CalCalendarItemGetEntityType(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return EntityType;
}

uint64_t _CalCalendarItemSetCalendar(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t v5;
  const os_unfair_lock *Context;
  int Property;
  int ID;
  const os_unfair_lock *v9;
  _QWORD *v10;
  const os_unfair_lock *v11;
  CFTypeRef OriginalEvent;
  uint64_t Store;
  const os_unfair_lock *v14;

  result = (uint64_t)_CalCalendarItemGetCalendar(a1);
  if ((const void *)result != a2)
  {
    v5 = result;
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    Property = CPRecordGetProperty();
    if (v5 && !Property && (int)CPRecordGetID() >= 1)
    {
      ID = CPRecordGetID();
      _CalRecordSetPropertyIfDifferent(a1, 91, (const __CFString *)ID);
    }
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9)
            os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
    v10 = (_QWORD *)CPRecordGetProperty();
    if (v10)
      CalRelationSetRelatedObject(v10, a2);
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    result = CPRecordUnloadProperty();
    if (a2)
    {
      OriginalEvent = _CalEventGetOriginalEvent(a1);
      _CalEventUpdateExternalIDWithOriginalEvent(a1, (uint64_t)a2, (uint64_t)OriginalEvent);
      result = CPRecordGetID();
      if ((_DWORD)result == -1)
      {
        Store = CPRecordGetStore();
        if (CDBLockingAssertionsEnabled && Store)
        {
          v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14)
            os_unfair_lock_assert_owner(v14 + 20);
        }
        return CPRecordStoreAddRecord();
      }
    }
  }
  return result;
}

uint64_t _CalCalendarItemClearOldCalendarId(uint64_t a1)
{
  return _CalRecordSetPropertyIfDifferent(a1, 91, 0);
}

uint64_t _CalCalendarItemGetCalendarId(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef CalDatabaseCopyEventWithExternalIDInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithExternalIDInCalendarOrStore(a1, 2, a2, 0, a3);
}

CFTypeRef CalDatabaseCopyEventWithExternalIDInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithExternalIDInCalendarOrStore(a1, 2, a2, a3, 0);
}

void CalEventSetUniqueIdentifier(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 26, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseCopyAllEventsWithUniqueIdentifierInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyAllCalendarItemsWithUniqueIdentifierInCalendarOrStore(a1, 2, a2, 0, a3);
}

uint64_t CalDatabaseCopyAllEventsWithUniqueIdentifierInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyAllCalendarItemsWithUniqueIdentifierInCalendarOrStore(a1, 2, a2, a3, 0);
}

CFTypeRef CalDatabaseCopyEventWithUniqueIdentifierInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithUniqueIdentifierInCalendarOrStore(a1, 2, a2, a3, 0);
}

uint64_t CalDatabaseCopyExternalModificationTagsForEventsWithExternalIDsInStore(os_unfair_lock_s *cf, const __CFArray *a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;
  uint64_t Database;
  CFIndex Count;
  CFAllocatorRef *v12;
  const os_unfair_lock *v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *Mutable;
  uint64_t i;
  const __CFString *v18;
  const __CFString *v19;
  const os_unfair_lock *v20;
  uint64_t v21;
  uint64_t **v22;
  CFIndex v23;
  void (__cdecl *v24)(void *);
  const __CFString *ValueAtIndex;
  CFIndex Length;
  size_t v27;
  char *v28;
  sqlite3_stmt *v29;
  int ID;
  uint64_t v31;
  const os_unfair_lock *v32;
  uint64_t v33;
  const os_unfair_lock *v34;
  os_unfair_lock_s *v36;
  os_unfair_lock_s *v37;

  if (a3)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v5)
      return 0;
  }
  else
  {
    v5 = cf;
    if (!cf)
      return 0;
    CFRetain(cf);
  }
  v6 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)v5);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (a2)
    Count = CFArrayGetCount(a2);
  else
    Count = 0;
  v12 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
    v14 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
    if (v14)
    {
      v15 = v14;
      Mutable = CFStringCreateMutable(*v12, 0);
      CFStringAppend(Mutable, CFSTR("SELECT external_id, external_mod_tag FROM CalendarItem WHERE entity_type = 2 AND external_id IN ("));
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          if (i)
            v18 = CFSTR(", ?");
          else
            v18 = CFSTR("?");
          CFStringAppend(Mutable, v18);
        }
      }
      if (a3)
        v19 = CFSTR(") AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?);");
      else
        v19 = CFSTR(");");
      CFStringAppend(Mutable, v19);
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v15)
        {
          if (*(_QWORD *)(*(_QWORD *)v15 + 104))
          {
            v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20)
              os_unfair_lock_assert_owner(v20 + 20);
          }
        }
      }
      v21 = CPSqliteConnectionStatementForSQL();
      if (v21)
      {
        v22 = (uint64_t **)v21;
        v36 = v5 + 20;
        v37 = v5;
        if (Count >= 1)
        {
          v23 = 0;
          v24 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
          do
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v23);
            Length = CFStringGetLength(ValueAtIndex);
            v27 = (int)(CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1);
            v28 = (char *)malloc_type_malloc(v27, 0x9246266CuLL);
            CFStringGetCString(ValueAtIndex, v28, v27, 0x8000100u);
            sqlite3_bind_text((sqlite3_stmt *)v22[1], ++v23, v28, -1, v24);
          }
          while (Count != v23);
        }
        if (a3)
        {
          v29 = (sqlite3_stmt *)v22[1];
          ID = CPRecordGetID();
          sqlite3_bind_int(v29, Count + 1, ID);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v22)
          {
            v31 = **v22;
            if (v31)
            {
              if (*(_QWORD *)(v31 + 104))
              {
                v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v32)
                  os_unfair_lock_assert_owner(v32 + 20);
              }
            }
          }
        }
        CPSqliteStatementSendResults();
        v6 = v36;
        v5 = v37;
        if (CDBLockingAssertionsEnabled)
        {
          if (*v22)
          {
            v33 = **v22;
            if (v33)
            {
              if (*(_QWORD *)(v33 + 104))
              {
                v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v34)
                  os_unfair_lock_assert_owner(v34 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      if (Mutable)
        CFRelease(Mutable);
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  CFRelease(v5);
  return 0;
}

uint64_t _CalEventProcessExternalTagFromIDResults(uint64_t a1, __CFDictionary **a2)
{
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  BOOL v6;
  const char *v7;
  const __CFAllocator *v8;
  CFStringRef v9;
  CFStringRef v10;
  CFStringRef v11;
  BOOL v12;
  __CFDictionary *Mutable;

  v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  v7 = (const char *)v5;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v4, 0x8000100u);
  v10 = CFStringCreateWithCString(v8, v7, 0x8000100u);
  v11 = v10;
  if (!a2 || (v9 ? (v12 = v10 == 0) : (v12 = 1), v12))
  {
    if (!v9)
      goto LABEL_15;
  }
  else
  {
    Mutable = *a2;
    if (!*a2)
    {
      Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *a2 = Mutable;
    }
    CFDictionarySetValue(Mutable, v9, v11);
  }
  CFRelease(v9);
LABEL_15:
  if (v11)
    CFRelease(v11);
  return 0;
}

uint64_t CalDatabaseCopyOfAllEventsWithRespondedExternalStatusInStore(const void *a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  __CFString *SelectPrefix;
  __CFString *v6;
  const __CFString *v7;
  uint64_t RecordStore;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v11;
  uint64_t v12;
  uint64_t v13;
  sqlite3_stmt *v14;
  int ID;
  int v16;
  const os_unfair_lock *v17;

  if (a2)
    v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  else
    v3 = (os_unfair_lock_s *)CFRetain(a1);
  v4 = v3;
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    v6 = SelectPrefix;
    CFStringAppend(SelectPrefix, CFSTR(" JOIN Participant ON self_attendee_id = Participant.rowid "));
    if (a2)
      v7 = CFSTR(" JOIN Calendar ON calendar_id = Calendar.ROWID WHERE store_id = ? AND ");
    else
      v7 = CFSTR(" WHERE ");
    CFStringAppend(v6, v7);
    CFStringAppend(v6, CFSTR("Participant.entity_type = ? AND Participant.pending_status IN (?, ?, ?)"));
    os_unfair_lock_lock(v4 + 20);
    RecordStore = _CalDatabaseGetRecordStore((uint64_t)v4);
    if (RecordStore)
    {
      if (CDBLockingAssertionsEnabled)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      Database = CPRecordStoreGetDatabase();
      if (!Database)
        goto LABEL_21;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
      v12 = CPSqliteDatabaseStatementForReading();
      if (v12)
      {
        v13 = v12;
        if (a2)
        {
          v14 = *(sqlite3_stmt **)(v12 + 8);
          ID = CPRecordGetID();
          sqlite3_bind_int(v14, 1, ID);
          v16 = 2;
        }
        else
        {
          v16 = 1;
        }
        sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), v16, 7);
        sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), v16 + 1, 1);
        sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), v16 + 2, 3);
        sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), v16 + 3, 2);
        if (CDBLockingAssertionsEnabled)
        {
          v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17)
            os_unfair_lock_assert_owner(v17 + 20);
        }
        RecordStore = CPRecordStoreProcessStatementWithPropertyIndices();
      }
      else
      {
LABEL_21:
        RecordStore = 0;
      }
    }
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v4 + 20);
    os_unfair_lock_unlock(v4 + 20);
    CFRelease(v6);
  }
  else
  {
    RecordStore = 0;
  }
  CFRelease(v4);
  return RecordStore;
}

uint64_t CalDatabaseCopyOfAllEventsWithRespondedExternalStatusAndCalendarUID(os_unfair_lock_s *a1, int a2)
{
  __CFString *SelectPrefix;
  __CFString *v5;
  os_unfair_lock_s *v6;
  uint64_t RecordStore;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v10;
  uint64_t v11;
  uint64_t v12;
  const os_unfair_lock *v13;

  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
    return 0;
  v5 = SelectPrefix;
  CFStringAppend(SelectPrefix, CFSTR(" JOIN Participant ON self_attendee_id = Participant.rowid WHERE Participant.entity_type = ? AND calendar_id = ? AND Participant.pending_status IN (?, ?, ?)"));
  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (!Database)
      goto LABEL_17;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
    v11 = CPSqliteDatabaseStatementForReading();
    if (v11)
    {
      v12 = v11;
      sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 1, 7);
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 2, a2);
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 3, 1);
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 4, 3);
      sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 5, 2);
      if (CDBLockingAssertionsEnabled)
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
      RecordStore = CPRecordStoreProcessStatementWithPropertyIndices();
    }
    else
    {
LABEL_17:
      RecordStore = 0;
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  CFRelease(v5);
  return RecordStore;
}

uint64_t CalDatabaseCopyOfAllEventsWithScheduleAgentClientAndCalendarUID(os_unfair_lock_s *a1, void *a2)
{
  __CFString *SelectPrefix;
  __CFString *v5;
  os_unfair_lock_s *v6;
  void *v7;
  const void *v8;
  uint64_t RecordStore;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v12;
  uint64_t v13;
  uint64_t v14;
  const os_unfair_lock *v15;

  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
    return 0;
  v5 = SelectPrefix;
  CFStringAppend(SelectPrefix, CFSTR(" JOIN Participant ON organizer_id = Participant.rowid JOIN Calendar ON calendar_id = Calendar.rowid JOIN Store ON Calendar.store_id = Store.rowid WHERE (Participant.schedule_agent = ? OR Store.type = ?) AND Participant.is_self = 1"));
  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  if (a2)
  {
    v7 = _CalFilterCopyCalendarIDClauseForQuery(a2, (uint64_t)CFSTR("calendar_id"));
    if (v7)
    {
      v8 = v7;
      CFStringAppendFormat(v5, 0, CFSTR(" AND %@"), v7);
      CFRelease(v8);
    }
  }
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (!Database)
      goto LABEL_20;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
    v13 = CPSqliteDatabaseStatementForReading();
    if (v13)
    {
      v14 = v13;
      sqlite3_bind_int(*(sqlite3_stmt **)(v13 + 8), 1, 1);
      sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 2, 0);
      if (CDBLockingAssertionsEnabled)
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
      RecordStore = CPRecordStoreProcessStatementWithPropertyIndices();
    }
    else
    {
LABEL_20:
      RecordStore = 0;
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  CFRelease(v5);
  return RecordStore;
}

uint64_t CalDatabaseCopyOfAllEventsWithExternalTrackingStatusInStore(const void *a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  __CFString *v4;
  __CFString *v5;
  const __CFString *v6;
  uint64_t SelectPrefix;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v10;
  uint64_t v11;
  sqlite3_stmt *v12;
  int ID;
  const os_unfair_lock *v14;
  uint64_t v15;

  if (a2)
  {
    v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    v4 = CalEventCopyStoreUIDQuery();
    if (v4)
    {
      v5 = v4;
      v6 = CFSTR(" AND ");
      goto LABEL_6;
    }
LABEL_26:
    v15 = 0;
    goto LABEL_27;
  }
  v3 = (os_unfair_lock_s *)CFRetain(a1);
  SelectPrefix = CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
    goto LABEL_26;
  v5 = (__CFString *)SelectPrefix;
  v6 = CFSTR(" WHERE ");
LABEL_6:
  CFStringAppend(v5, v6);
  CFStringAppend(v5, CFSTR("(external_tracking_status != 0)"));
  os_unfair_lock_lock(v3 + 20);
  if (!_CalDatabaseGetRecordStore((uint64_t)v3))
    goto LABEL_22;
  if (CDBLockingAssertionsEnabled)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_22;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
  }
  v11 = CPSqliteDatabaseStatementForReading();
  if (v11)
  {
    if (a2)
    {
      v12 = *(sqlite3_stmt **)(v11 + 8);
      ID = CPRecordGetID();
      sqlite3_bind_int(v12, 1, ID);
    }
    if (CDBLockingAssertionsEnabled)
    {
      v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v14)
        os_unfair_lock_assert_owner(v14 + 20);
    }
    v15 = CPRecordStoreProcessStatementWithPropertyIndices();
  }
  else
  {
LABEL_22:
    v15 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3 + 20);
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v5);
LABEL_27:
  CFRelease(v3);
  return v15;
}

__CFString *CalEventCopyStoreUIDQuery()
{
  __CFString *SelectPrefix;
  __CFString *v1;

  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  v1 = SelectPrefix;
  if (SelectPrefix)
    CFStringAppend(SelectPrefix, CFSTR(" JOIN Calendar ON calendar_id = Calendar.ROWID WHERE store_id = ?"));
  return v1;
}

uint64_t CalDatabaseCopyOfAllEventsWithExternalTrackingStatusAndCalendarUID(os_unfair_lock_s *a1, int a2)
{
  __CFString *SelectPrefix;
  __CFString *v5;
  os_unfair_lock_s *v6;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v9;
  uint64_t v10;
  const os_unfair_lock *v11;
  uint64_t v12;

  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
    return 0;
  v5 = SelectPrefix;
  CFStringAppend(SelectPrefix, CFSTR(" WHERE calendar_id = ? AND external_tracking_status != 0;"));
  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  if (!_CalDatabaseGetRecordStore((uint64_t)a1))
    goto LABEL_16;
  if (CDBLockingAssertionsEnabled)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_16;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  v10 = CPSqliteDatabaseStatementForReading();
  if (v10)
  {
    sqlite3_bind_int(*(sqlite3_stmt **)(v10 + 8), 1, a2);
    if (CDBLockingAssertionsEnabled)
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
    v12 = CPRecordStoreProcessStatementWithPropertyIndices();
  }
  else
  {
LABEL_16:
    v12 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  CFRelease(v5);
  return v12;
}

void CalEventSetAvailability(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 16, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetAvailability(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalEventSetPrivacyLevel(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 17, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetPrivacyLevel(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t PrivacyLevel;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  PrivacyLevel = _CalEventGetPrivacyLevel(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return PrivacyLevel;
}

void CalEventSetExternalTrackingStatus(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 23, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetExternalTrackingStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

CFTypeRef CalEventCopyTravelRoutingMode(uint64_t a1)
{
  CFTypeRef result;
  const void *v2;
  uint64_t v3;

  result = CalCalendarItemCopyStartLocation(a1);
  if (result)
  {
    v2 = result;
    v3 = CalLocationCopyRouting((uint64_t)result);
    CFRelease(v2);
    return (CFTypeRef)v3;
  }
  return result;
}

void CalEventSetLocation_Deprecated(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *DatabaseForRecord;
  const void *Location;
  const void *v5;

  if (a2)
  {
    DatabaseForRecord = (os_unfair_lock_s *)CalGetDatabaseForRecord();
    Location = CalDatabaseCreateLocation(DatabaseForRecord);
    if (Location)
    {
      v5 = Location;
      CalLocationSetTitle((uint64_t)Location);
      CalCalendarItemSetLocation(a1, v5);
      CFRelease(v5);
    }
  }
  else
  {
    CalCalendarItemSetLocation(a1, 0);
  }
}

CFTypeRef CalEventCopyLocation_Deprecated(uint64_t a1)
{
  CFTypeRef result;
  const void *v2;
  CFTypeRef v3;

  result = CalCalendarItemCopyLocation(a1);
  if (result)
  {
    v2 = result;
    v3 = CalLocationCopyFullDisplayString((uint64_t)result);
    CFRelease(v2);
    return v3;
  }
  return result;
}

CFTypeRef CalEventPreferredLocationIsAConferenceRoom(uint64_t a1)
{
  CFTypeRef result;
  const void *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  void *v12;
  const void *v13;
  char v14;
  int v15;

  result = CalCalendarItemCopyPreferredLocation(a1);
  if (result)
  {
    v3 = result;
    v4 = (const __CFString *)CalLocationCopyFullDisplayString((uint64_t)result);
    if (v4)
    {
      v5 = v4;
      if (CFStringGetLength(v4) >= 1 && (v6 = CalCalendarItemCopyAttendees(a1)) != 0)
      {
        v7 = v6;
        Count = CFArrayGetCount(v6);
        if (Count < 1)
        {
LABEL_11:
          v15 = 0;
        }
        else
        {
          v9 = Count;
          v10 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v7, v10);
            if (CalAttendeeGetType((uint64_t)ValueAtIndex) == 2)
            {
              v12 = (void *)CalParticipantCopyDisplayName((uint64_t)ValueAtIndex);
              if (v12)
              {
                v13 = v12;
                v14 = objc_msgSend(v12, "isEqualToString:", v5);
                CFRelease(v13);
                if ((v14 & 1) != 0)
                  break;
              }
            }
            if (v9 == ++v10)
              goto LABEL_11;
          }
          v15 = 1;
        }
        CFRelease(v7);
      }
      else
      {
        v15 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      v15 = 0;
    }
    CFRelease(v3);
    return (CFTypeRef)(v15 != 0);
  }
  return result;
}

void _CalEventSetStartDate(uint64_t a1, uint64_t a2, const __CFString *cf1, int a4, int a5)
{
  const __CFString *v7;
  double v9;
  const void *v10;
  const os_unfair_lock *Context;
  const __CFString *Property;
  const os_unfair_lock *v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *CFDateRefFromCalDate;
  uint64_t v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFIndex Count;
  CFIndex v21;
  const void *v22;
  CFIndex i;
  const void *ValueAtIndex;
  CFAbsoluteTime v25;
  double v26;
  const __CFString *v27;

  v7 = cf1;
  v26 = *(double *)&a2;
  v27 = cf1;
  v9 = *(double *)&a2;
  if (cf1 && !CFEqual(cf1, CFSTR("_float")))
  {
    v10 = (const void *)CalTimeZoneCopyCFTimeZone();
    if (v10)
    {
      CFRelease(v10);
    }
    else
    {
      CFLog();
      CFRelease(v7);
      v7 = (const __CFString *)CFRetain(CFSTR("_float"));
      v27 = v7;
    }
  }
  if (vabdd_f64(_CalRecordGetDateProperty(a1), v9) >= 2.22044605e-16)
    goto LABEL_36;
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFString *)CPRecordGetProperty();
  if (!Property || CFStringCompare(Property, v7, 0))
  {
LABEL_36:
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13)
            os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
    v14 = CPRecordGetProperty();
    v15 = v14;
    if (a5 && v14)
    {
      _CalEventPinAllDayBoundaries(a1, &v26, 0);
      v9 = v26;
    }
    CFDateRefFromCalDate = (const __CFString *)_CreateCFDateRefFromCalDate(v9);
    _CalRecordSetPropertyIfDifferent(a1, 4, CFDateRefFromCalDate);
    _CalRecordSetPropertyIfDifferent(a1, 5, v27);
    if (CFDateRefFromCalDate)
      CFRelease(CFDateRefFromCalDate);
    if (_CalCalendarItemHasAlarms(a1))
    {
      CPRecordGetStore();
      v17 = CPRecordStoreGetContext();
      _CalDatabaseSetChangeFlags(v17, 8);
    }
    _CalCalendarItemInvalidateAllRecurrenceRuleCachedEndDates(a1);
    if (a4)
    {
      _CalCalendarItemRemoveAllExceptionDates(a1);
      if (!v15)
      {
        v18 = _CalEventCopyDetachedEvents(a1);
        if (v18)
        {
          v19 = v18;
          Count = CFArrayGetCount(v18);
          if (Count >= 1)
          {
            v21 = Count;
            _CalCalendarItemIsFloating(a1);
            v22 = (const void *)CalTimeZoneCopyCFTimeZone();
            CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
            for (i = 0; i != v21; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v19, i);
              _CalRecordGetDateProperty((uint64_t)ValueAtIndex);
              CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
              CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
              _CalEventSetOriginalStartDate((uint64_t)ValueAtIndex, v25);
            }
            CFRelease(v22);
          }
          CFRelease(v19);
        }
      }
    }
  }
}

void _CalEventPinAllDayBoundaries(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  const void *v6;
  const __CFString *Property;
  const os_unfair_lock *Context;
  const void *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = (const void *)CalTimeZoneCopyCFTimeZone();
  if (a2)
  {
    Property = (const __CFString *)a2[1];
    if (!Property)
      goto LABEL_13;
  }
  else
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    Property = (const __CFString *)CPRecordGetProperty();
    if (!Property)
      goto LABEL_13;
  }
  if (CFStringCompare(CFSTR("_float"), Property, 0))
  {
    v9 = (const void *)CalTimeZoneCopyCFTimeZone();
    if (v9)
      goto LABEL_14;
    CFLog();
  }
LABEL_13:
  v9 = CFRetain(v6);
LABEL_14:
  if (a2)
  {
    CalDateTimeGetGregorianDate();
    CalGregorianDateGetGregorianDateForDay();
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    *a2 = v10;
    a2[1] = CFSTR("_float");
  }
  if (a3)
  {
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    *a3 = v11;
  }
  if (v9)
    CFRelease(v9);
  CFRelease(v6);
}

void CalEventSetStartDate(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  CalEventSetStartDate_Internal(a1, a2, a3, 1);
}

void CalEventSetStartDate_Internal(uint64_t a1, uint64_t a2, const __CFString *a3, int a4)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetStartDate(a1, a2, a3, a4, 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalEventSetStartDateDirectly(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  CalEventSetStartDate_Internal(a1, a2, a3, 0);
}

uint64_t CalEventCopyStartTimeZone(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t started;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  started = _CalCalendarItemCopyStartTimeZone(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return started;
}

double CalEventGetStartDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

const __CFString *CalDatabaseCopyEventWithSummaryAndStartDateInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, double a4)
{
  return CalDatabaseCopyEventWithSummaryAndStartDateInCalendarOrStore(a1, a2, 0, a3, a4);
}

const __CFString *CalDatabaseCopyEventWithSummaryAndStartDateInCalendarOrStore(os_unfair_lock_s *cf, const __CFString *ValueAtIndex, uint64_t a3, uint64_t a4, double a5)
{
  os_unfair_lock_s *v9;
  char *CStringFromCFString;
  __CFString *SelectPrefix;
  __CFString *v12;
  const __CFString *v13;
  uint64_t RecordStore;
  uint64_t v15;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v18;
  uint64_t v19;
  uint64_t v20;
  sqlite3_stmt *v21;
  const __CFArray *v22;
  sqlite3_stmt *v23;
  int ID;
  const os_unfair_lock *v25;

  v9 = cf;
  if (!a3 && !a4)
  {
    if (!cf)
      return 0;
    CFRetain(cf);
    if (ValueAtIndex)
      goto LABEL_5;
LABEL_50:
    CFRelease(v9);
    return ValueAtIndex;
  }
  v9 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v9)
    return 0;
  if (!ValueAtIndex)
    goto LABEL_50;
LABEL_5:
  CStringFromCFString = (char *)CalCreateCStringFromCFString(ValueAtIndex);
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    v12 = SelectPrefix;
    CFStringAppend(SelectPrefix, CFSTR(" WHERE summary = ? AND start_date = ?"));
    if (a3)
    {
      v13 = CFSTR(" AND calendar_id = ?");
    }
    else
    {
      if (!a4)
        goto LABEL_18;
      v13 = CFSTR(" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)");
    }
    CFStringAppend(v12, v13);
LABEL_18:
    os_unfair_lock_lock(v9 + 20);
    RecordStore = _CalDatabaseGetRecordStore((uint64_t)v9);
    v15 = RecordStore;
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
    Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
    {
      if (Database)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v18)
            os_unfair_lock_assert_owner(v18 + 20);
        }
      }
    }
    v19 = CPSqliteDatabaseStatementForReading();
    if (v19)
    {
      v20 = v19;
      v21 = *(sqlite3_stmt **)(v19 + 8);
      if (CStringFromCFString)
        sqlite3_bind_text(v21, 1, CStringFromCFString, -1, 0);
      else
        sqlite3_bind_null(v21, 1);
      sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 2, (int)a5);
      if (a3 || a4)
      {
        v23 = *(sqlite3_stmt **)(v20 + 8);
        ID = CPRecordGetID();
        sqlite3_bind_int(v23, 3, ID);
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (v15)
        {
          v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v25)
            os_unfair_lock_assert_owner(v25 + 20);
        }
      }
      v22 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
    }
    else
    {
      v22 = 0;
    }
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v9 + 20);
    os_unfair_lock_unlock(v9 + 20);
    CFRelease(v12);
    if (CStringFromCFString)
      free(CStringFromCFString);
    if (v22)
    {
      if (CFArrayGetCount(v22) < 1)
      {
        ValueAtIndex = 0;
      }
      else
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v22, 0);
        CFRetain(ValueAtIndex);
      }
      CFRelease(v22);
    }
    else
    {
      ValueAtIndex = 0;
    }
    goto LABEL_50;
  }
  if (CStringFromCFString)
    free(CStringFromCFString);
  CFRelease(v9);
  return 0;
}

const __CFString *CalDatabaseCopyEventWithSummaryAndStartDateInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, double a4)
{
  return CalDatabaseCopyEventWithSummaryAndStartDateInCalendarOrStore(a1, a2, a3, 0, a4);
}

void CalDatabaseCopyEventIDsThatMatchLocationOrSummary(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, pthread_cond_t *a4, pthread_mutex_t *a5, __CFArray *a6, _BYTE *a7, _BYTE *a8)
{
  CFStringRef v16;
  uint64_t RecordStore;
  BOOL v18;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v21;
  const os_unfair_lock *v22;
  uint64_t v23;
  sqlite3_stmt **v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  const os_unfair_lock *v29;
  const __CFString *v30;
  _BYTE *v31;

  CFRetain(a1);
  if (a1)
  {
    if (a2)
    {
      v31 = a7;
      v16 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT rowid FROM CalendarItem WHERE location LIKE '%%%@%%' or summary LIKE '%%%@%%';"),
              a2,
              a3);
      os_unfair_lock_lock(a1 + 20);
      RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
      if (CDBLockingAssertionsEnabled)
        v18 = RecordStore == 0;
      else
        v18 = 1;
      if (!v18)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      Database = CPRecordStoreGetDatabase();
      if (CDBLockingAssertionsEnabled)
        v21 = Database == 0;
      else
        v21 = 1;
      if (!v21)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v22)
            os_unfair_lock_assert_owner(v22 + 20);
        }
      }
      v23 = CPSqliteDatabaseStatementForReading();
      if (v23)
      {
        v24 = (sqlite3_stmt **)v23;
        v30 = v16;
        pthread_mutex_lock(a5);
        v25 = 0;
        while (1)
        {
          v26 = sqlite3_step(v24[1]);
          if (v26 == 100)
          {
            v27 = sqlite3_column_int(v24[1], 0);
            if (!v25 && CFArrayGetCount(a6))
              CFArrayRemoveAllValues(a6);
            CFArrayAppendValue(a6, (const void *)v27);
            ++v25;
          }
          if (v26 == 101 || v25 == 100)
          {
            pthread_cond_signal(a4);
            pthread_mutex_unlock(a5);
            pthread_mutex_lock(a5);
            v25 = 0;
          }
          if (v26 != 100)
            break;
          if (*a8)
            goto LABEL_32;
        }
        if ((v26 - 102) > 0xFFFFFFFD || (sqlite3_errmsg(*((sqlite3 **)*v24 + 1)), CFLog(), *a8))
        {
LABEL_32:
          *v31 = 0;
          pthread_cond_signal(a4);
          pthread_mutex_unlock(a5);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v24)
          {
            v28 = *(_QWORD *)*v24;
            if (v28)
            {
              if (*(_QWORD *)(v28 + 104))
              {
                v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v29)
                  os_unfair_lock_assert_owner(v29 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
        v16 = v30;
      }
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner(a1 + 20);
      os_unfair_lock_unlock(a1 + 20);
      if (v16)
        CFRelease(v16);
    }
    CFRelease(a1);
  }
}

CFTypeRef CalDatabaseCopyFirstNaturalLanguageSuggestedEventMatchingSummary(os_unfair_lock_s *a1, CFStringRef theString)
{
  _BOOL4 v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  const void *v9;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;

  if (theString)
    v4 = CFStringGetLength(theString) == 0;
  else
    v4 = 1;
  v5 = (const __CFArray *)CalDatabaseCopyNaturalLanguageSuggestedEventsMatchingSummary(a1, theString, 0);
  if (v5)
  {
    v6 = v5;
    Count = CFArrayGetCount(v5);
    if (Count < 1)
    {
      CFRelease(v6);
    }
    else
    {
      v8 = Count;
      v9 = 0;
      for (i = 0; i != v8; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
        v12 = (uint64_t)ValueAtIndex;
        if (v4)
        {
          CalEventGetNaturalLanguageSuggestedEventExpirationDate((uint64_t)ValueAtIndex);
          v13 = objc_claimAutoreleasedReturnValue();
          if (!v13)
            continue;
          v14 = (void *)v13;
          v15 = (void *)objc_opt_new();
          v16 = objc_msgSend(v14, "CalIsBeforeOrSameAsDate:", v15);

          if ((v16 & 1) != 0)
            continue;
        }
        if (!v9 || compareNaturalLanguageEvents(v12, (uint64_t)v9) == -1)
          v9 = (const void *)v12;
      }
      CFRelease(v6);
      if (v9)
        return CFRetain(v9);
    }
  }
  return 0;
}

uint64_t CalDatabaseCopyNaturalLanguageSuggestedEventsMatchingSummary(os_unfair_lock_s *a1, CFStringRef theString, char a3)
{
  BOOL v6;
  const void *v7;
  const void *v8;
  int UID;
  __CFString *SelectPrefix;
  const __CFString *v11;
  const __CFString *v12;
  char *CStringFromCFString;
  os_unfair_lock_s *v14;
  uint64_t RecordStore;
  uint64_t v16;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  sqlite3_stmt *v24;
  void *v25;
  double v26;
  const os_unfair_lock *v27;

  if (theString)
    v6 = CFStringGetLength(theString) == 0;
  else
    v6 = 1;
  v7 = CalDatabaseCopyNaturalLanguageSuggestionsCalendar(a1);
  if (!v7)
    return 0;
  v8 = v7;
  UID = CalCalendarGetUID();
  CFRelease(v8);
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  CFStringAppend(SelectPrefix, CFSTR(" WHERE calendar_id = ?"));
  if ((a3 & 1) == 0)
    CFStringAppend(SelectPrefix, CFSTR(" AND start_date > ? AND suggested_event_info_id > 0"));
  if (v6 || (v11 = CFStringCreateWithFormat(0, 0, CFSTR("%%%@%%"), theString)) == 0)
  {
    CStringFromCFString = 0;
  }
  else
  {
    v12 = v11;
    CStringFromCFString = (char *)CalCreateCStringFromCFString(v11);
    CFStringAppend(SelectPrefix, CFSTR(" AND summary LIKE ?"));
    CFRelease(v12);
  }
  v14 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v16 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  v20 = CPSqliteDatabaseStatementForReading();
  if (v20)
  {
    v21 = v20;
    sqlite3_bind_int(*(sqlite3_stmt **)(v20 + 8), 1, UID);
    if ((a3 & 1) != 0)
    {
      v22 = 2;
      if (!CStringFromCFString)
      {
LABEL_28:
        if (CDBLockingAssertionsEnabled)
        {
          if (v16)
          {
            v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v27)
              os_unfair_lock_assert_owner(v27 + 20);
          }
        }
        v23 = CPRecordStoreProcessStatementWithPropertyIndices();
        goto LABEL_33;
      }
    }
    else
    {
      v24 = *(sqlite3_stmt **)(v21 + 8);
      v25 = (void *)objc_opt_new();
      objc_msgSend(v25, "timeIntervalSinceReferenceDate");
      sqlite3_bind_int64(v24, 2, (uint64_t)v26);

      v22 = 3;
      if (!CStringFromCFString)
        goto LABEL_28;
    }
    sqlite3_bind_text(*(sqlite3_stmt **)(v21 + 8), v22, CStringFromCFString, -1, 0);
    goto LABEL_28;
  }
  v23 = 0;
LABEL_33:
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v14);
  os_unfair_lock_unlock(v14);
  CFRelease(SelectPrefix);
  if (CStringFromCFString)
    free(CStringFromCFString);
  return v23;
}

id CalEventGetNaturalLanguageSuggestedEventExpirationDate(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  id v7;
  uint8_t buf[4];
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = (void *)CalCalendarItemCopyLocalStructuredData(a1);
  v7 = 0;
  objc_msgSend(MEMORY[0x1E0D0C3B8], "unarchiveDictionaryFromData:error:", v1, &v7);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v7;
  if (v3)
  {
    v4 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v9 = v3;
      _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_ERROR, "Error unarchiving local structured data. Error: %@", buf, 0xCu);
    }
  }
  objc_msgSend(v2, "objectForKey:", CFSTR("EKEventNaturalLanguageSuggestedEventExpirationDate"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

uint64_t compareNaturalLanguageEvents(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  CFTypeRef v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v4 = CalEventCopySuggestedEventInfo(a1);
  v5 = CalEventCopySuggestedEventInfo(a2);
  v6 = v5;
  if (v4 && !v5)
  {
    v7 = -1;
LABEL_22:
    CFRelease(v4);
    goto LABEL_23;
  }
  if (!v4 && v5)
  {
    v7 = 1;
LABEL_24:
    CFRelease(v6);
    return v7;
  }
  CalEventGetNaturalLanguageSuggestedEventExpirationDate(a1);
  v8 = objc_claimAutoreleasedReturnValue();
  CalEventGetNaturalLanguageSuggestedEventExpirationDate(a2);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v8 && v9)
  {
    v7 = objc_msgSend((id)v9, "compare:", v8);
  }
  else
  {
    if (v8)
      v7 = -1;
    else
      v7 = 1;
    if (!(v8 | v9))
    {
      v11 = (void *)CalCalendarItemCopyCreationDate(a1);
      v12 = (void *)CalCalendarItemCopyCreationDate(a2);
      v13 = v12;
      if (v11 && v12)
      {
        v7 = objc_msgSend(v12, "compare:", v11);
      }
      else if (v11)
      {
        v7 = -1;
      }
      else
      {
        v7 = v12 != 0;
      }

    }
  }

  if (v4)
    goto LABEL_22;
LABEL_23:
  if (v6)
    goto LABEL_24;
  return v7;
}

CFMutableArrayRef CalDatabaseCopyAllNaturalLanguageSuggestedEventsMatchingSummary(os_unfair_lock_s *a1, const __CFString *a2)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  const __CFArray *MutableCopy;
  CFRange v7;

  v2 = (const __CFArray *)CalDatabaseCopyNaturalLanguageSuggestedEventsMatchingSummary(a1, a2, 1);
  if (!v2)
    return CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v3 = v2;
  Count = CFArrayGetCount(v2);
  MutableCopy = CFArrayCreateMutableCopy(0, Count, v3);
  CFRelease(v3);
  v7.length = CFArrayGetCount(MutableCopy);
  v7.location = 0;
  CFArraySortValues(MutableCopy, v7, (CFComparatorFunction)compareNaturalLanguageEvents, 0);
  return MutableCopy;
}

void _CalEventSetEndDate(uint64_t a1, int a2, double a3)
{
  double v4;
  double DateProperty;
  double v7;
  BOOL v8;
  const os_unfair_lock *Context;
  const __CFString *CFDateRefFromCalDate;
  double v11;

  v4 = a3;
  v11 = a3;
  DateProperty = _CalRecordGetDateProperty(a1);
  v8 = fabs(DateProperty) < 2.22044605e-16;
  v7 = vabdd_f64(v4, DateProperty);
  v8 = !v8 && v7 < 2.22044605e-16;
  if (!v8)
  {
    if (a2)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
      if (CPRecordGetProperty())
      {
        _CalEventPinAllDayBoundaries(a1, 0, &v11);
        v4 = v11;
      }
    }
    CFDateRefFromCalDate = (const __CFString *)_CreateCFDateRefFromCalDate(v4);
    _CalRecordSetPropertyIfDifferent(a1, 6, CFDateRefFromCalDate);
    if (CFDateRefFromCalDate)
      CFRelease(CFDateRefFromCalDate);
  }
}

void CalEventSetEndDate(uint64_t a1, double a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetEndDate(a1, 1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

double _CalEventGetEndDateWhileLocked(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;

  if (a2)
    return _CalRecordGetDateProperty(a1);
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  if (RecordLock)
  {
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(RecordLock);
    os_unfair_lock_unlock(RecordLock);
  }
  return DateProperty;
}

double CalEventGetEndDate(uint64_t a1)
{
  return _CalEventGetEndDateWhileLocked(a1, 0);
}

void _CalEventGetDurationUnitsWhileLocked(uint64_t a1@<X0>, const __CFTimeZone *a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;
  double v10;
  __int128 v11;
  CFGregorianUnits v12;

  *a4 = 0u;
  a4[1] = 0u;
  if ((a3 & 1) != 0)
  {
    RecordLock = 0;
  }
  else
  {
    RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
  }
  DateProperty = _CalRecordGetDateProperty(a1);
  v10 = _CalRecordGetDateProperty(a1);
  CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v12, v10, DateProperty, a2, 0xFFFFFFuLL);
  v11 = *(_OWORD *)&v12.minutes;
  *a4 = *(_OWORD *)&v12.years;
  a4[1] = v11;
  if ((a3 & 1) == 0)
  {
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(RecordLock);
    os_unfair_lock_unlock(RecordLock);
  }
}

void CalEventGetDurationUnits(uint64_t a1@<X0>, const __CFTimeZone *a2@<X1>, _OWORD *a3@<X8>)
{
  _CalEventGetDurationUnitsWhileLocked(a1, a2, 0, a3);
}

uint64_t _CalEventGetDurationWhileLocked(uint64_t a1, char a2)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;
  double v6;

  if ((a2 & 1) != 0)
  {
    RecordLock = 0;
  }
  else
  {
    RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
  }
  DateProperty = _CalRecordGetDateProperty(a1);
  v6 = _CalRecordGetDateProperty(a1);
  if ((a2 & 1) == 0)
  {
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(RecordLock);
    os_unfair_lock_unlock(RecordLock);
  }
  if (DateProperty <= v6)
    return 0;
  else
    return (DateProperty - v6);
}

uint64_t _CalEventGetDuration(uint64_t a1)
{
  double DateProperty;
  double v3;

  DateProperty = _CalRecordGetDateProperty(a1);
  v3 = _CalRecordGetDateProperty(a1);
  if (DateProperty <= v3)
    return 0;
  else
    return (DateProperty - v3);
}

uint64_t CalEventGetDuration(uint64_t a1)
{
  return _CalEventGetDurationWhileLocked(a1, 0);
}

void CalEventSetAllDay(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v5;
  double DateProperty;
  uint64_t StartDate;
  const __CFString *v8;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 8, (const __CFString *)a2);
  if (a2)
  {
    StartDate = _CalEventGetStartDate(a1);
    v8 = v5;
    if (v5)
    {
      DateProperty = _CalRecordGetDateProperty(a1);
      _CalEventPinAllDayBoundaries(a1, &StartDate, &DateProperty);
      _CalEventSetStartDate(a1, StartDate, v8, 0, 0);
      _CalEventSetEndDate(a1, 0, DateProperty);
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventIsAllDay(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsAllDay;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsAllDay = _CalEventIsAllDay(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsAllDay;
}

uint64_t _CalEventGetDefaultAlarmOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 IsAllDay;
  CFTypeRef Store;
  void *v8;
  void *v9;

  IsAllDay = _CalCalendarItemIsAllDay(a1);
  Store = _CalEventGetStore(a1);
  if (IsAllDay)
    v8 = (void *)_CalStoreCopyDefaultAllDayAlarmOffset((uint64_t)Store);
  else
    v8 = (void *)_CalStoreCopyDefaultAlarmOffset((uint64_t)Store);
  v9 = v8;
  if (v8)
  {
    a3 = objc_msgSend(v8, "integerValue");
  }
  else if (!IsAllDay)
  {
    a3 = a2;
  }

  return a3;
}

uint64_t CalEventCanAddRecurrence(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Store;
  uint64_t v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if ((int)CPRecordGetProperty() >= 1
    && (_CalCalendarItemGetStoreId(a1), Store = CPRecordGetStore(), _CalGetStoreWithUID(Store)))
  {
    v5 = _CalStoreSupportsRecurrencesOnDetachedEvents();
  }
  else
  {
    v5 = 1;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

uint64_t _CalCalendarItemGetStoreId(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

void CalEventAddEventAction(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationAddObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

_QWORD *_CalEventRemoveEventAction(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

void CalEventRemoveEventAction(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventRemoveEventAction(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalEventCopyEventActions(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalEventCopyEventActions(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFMutableArrayRef _CalEventCopyEventActions(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

BOOL CalEventIsInvite(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsInvite;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsInvite = _CalCalendarItemIsInvite(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsInvite;
}

BOOL CalEventHasActionWithExternalAndFolderID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const void *v4;
  const __CFArray *v5;
  BOOL v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const void *ValueAtIndex;
  const void *v11;
  const void *v12;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (const void *)CPRecordCopyProperty();
  if (v4)
    v5 = 0;
  else
    v5 = _CalEventCopyEventActions(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  if (v4)
  {
    v6 = 1;
LABEL_24:
    CFRelease(v4);
    return v6;
  }
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    if (Count < 1)
    {
      v6 = 0;
    }
    else
    {
      v8 = Count;
      v9 = 0;
      v6 = 1;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, v9);
        v11 = (const void *)CalEventActionCopyExternalID((uint64_t)ValueAtIndex);
        if (v11)
        {
          CFRelease(v11);
          v12 = (const void *)CalEventActionCopyExternalFolderID((uint64_t)ValueAtIndex);
          if (v12)
            break;
        }
        v6 = ++v9 < v8;
        if (v8 == v9)
          goto LABEL_23;
      }
      CFRelease(v12);
    }
LABEL_23:
    v4 = v5;
    goto LABEL_24;
  }
  return 0;
}

BOOL CalEventAttendeeIsSelf(uint64_t a1, CFTypeRef a2)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef SelfAttendee;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  SelfAttendee = _CalCalendarItemGetSelfAttendee(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return SelfAttendee == a2;
}

void CalEventSetParticipationStatusModifiedDate(uint64_t a1, CFAbsoluteTime a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 54, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void _CalEventSetParticipationStatusModifiedDate(uint64_t a1, CFAbsoluteTime a2)
{
  _CalRecordSetDateProperty(a1, 54, a2);
}

double CalEventGetParticipationStatusModifiedDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

double _CalEventGetParticipationStatusModifiedDate(uint64_t a1)
{
  return _CalRecordGetDateProperty(a1);
}

BOOL CalEventSetParticipationStatus(const void *a1, int a2)
{
  CFTypeRef v4;
  const void *v5;
  _BOOL4 v6;
  os_unfair_lock_s *RecordLock;
  CFTypeRef SelfAttendee;
  CFTypeRef v9;
  _BOOL4 IsAllDay;
  BOOL v11;
  int v12;
  const os_unfair_lock *Context;
  const os_unfair_lock *v14;

  if ((a2 - 1) <= 1 && (v4 = CalEventCopyStore((uint64_t)a1)) != 0)
  {
    v5 = v4;
    v6 = CalCalendarItemGetAvailabilitySupportedByStore((uint64_t)v4) != 0;
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  SelfAttendee = _CalCalendarItemGetSelfAttendee((uint64_t)a1);
  v9 = SelfAttendee;
  if (SelfAttendee)
  {
    _CalAttendeeSetStatus(SelfAttendee, a2);
    _CalEventMarkPropertyModified((uint64_t)a1);
    _CalEventMarkEventAsNeedingOccurrenceCacheUpdate(a1);
    if (v6 && (_CalCalendarGetInvitationStatus((uint64_t)a1) & 0x10) == 0)
    {
      IsAllDay = _CalEventIsAllDay((uint64_t)a1);
      if (a1)
        v11 = CDBLockingAssertionsEnabled == 0;
      else
        v11 = 1;
      v12 = !v11;
      if (IsAllDay || a2 == 2)
      {
        if (v12)
        {
          if (CPRecordGetStore())
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
      else if (v12)
      {
        if (CPRecordGetStore())
        {
          v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14)
            os_unfair_lock_assert_owner(v14 + 20);
        }
      }
      CPRecordSetProperty();
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v9 != 0;
}

uint64_t CalEventGetPendingParticipationStatus(uint64_t a1)
{
  CFTypeRef v1;
  const void *v2;
  uint64_t PendingStatus;

  v1 = CalCalendarItemCopySelfAttendee(a1);
  if (!v1)
    return 7;
  v2 = v1;
  PendingStatus = CalAttendeeGetPendingStatus((uint64_t)v1);
  CFRelease(v2);
  return PendingStatus;
}

unint64_t CalEventIsOrganizedExternally(uint64_t a1)
{
  unint64_t result;
  const void *v3;
  _BOOL4 IsSelf;

  result = CalCalendarItemHasAttendees(a1, 1);
  if ((_DWORD)result)
  {
    result = (unint64_t)CalCalendarItemCopyOrganizer(a1);
    if (result)
    {
      v3 = (const void *)result;
      IsSelf = CalOrganizerIsSelf((const void *)result);
      CFRelease(v3);
      return !IsSelf;
    }
  }
  return result;
}

uint64_t CalEventIsOnCalendarThatAllowsScheduling(uint64_t a1)
{
  CFTypeRef v1;
  const void *v2;
  _BOOL8 v3;

  v1 = CalCalendarItemCopyCalendar(a1);
  if (!v1)
    return 1;
  v2 = v1;
  v3 = !CalCalendarIsSchedulingProhibited((uint64_t)v1) && !CalCalendarIsReadOnly((uint64_t)v2);
  CFRelease(v2);
  return v3;
}

uint64_t CalEventNeedsResponse(uint64_t a1)
{
  uint64_t result;
  const void *v3;
  int ScheduleAgent;
  const void *v5;
  int Status;

  result = CalEventIsOrganizedExternally(a1);
  if ((_DWORD)result)
  {
    result = CalEventIsOnCalendarThatAllowsScheduling(a1);
    if ((_DWORD)result)
    {
      if (CalCalendarItemGetStatus(a1) == 3)
        return 0;
      result = (uint64_t)CalCalendarItemCopyOrganizer(a1);
      if (!result)
        return result;
      v3 = (const void *)result;
      ScheduleAgent = CalParticipantGetScheduleAgent(result);
      CFRelease(v3);
      if (ScheduleAgent == 1)
      {
        return 0;
      }
      else
      {
        result = (uint64_t)CalCalendarItemCopySelfAttendee(a1);
        if (result)
        {
          v5 = (const void *)result;
          Status = CalAttendeeGetStatus(result);
          CFRelease(v5);
          return Status == 7 || Status == 0;
        }
      }
    }
  }
  return result;
}

BOOL CalEventHasOccurrenceInTheFuture(uint64_t a1)
{
  CFMutableArrayRef v2;
  void *v3;
  double v4;
  double v5;
  unsigned int DurationWhileLocked;
  __CFArray *v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  char v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double EffectiveEndDate;
  const __CFTimeZone *v17;
  CFGregorianDate GregorianDate;
  CFGregorianDate v19;
  double EndDateWhileLocked;
  void *v21;
  void *v22;
  double v23;
  double v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = CalCalendarItemCopyRecurrences(a1);
  if (-[__CFArray count](v2, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "CalDateForNow");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    v5 = v4;

    DurationWhileLocked = _CalEventGetDurationWhileLocked(a1, 0);
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v7 = v2;
    v8 = -[__CFArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    v9 = v8 != 0;
    if (v8)
    {
      v10 = v8;
      v11 = 0;
      v12 = (double)DurationWhileLocked;
      v13 = *(_QWORD *)v27;
      v14 = *MEMORY[0x1E0D0C490];
LABEL_4:
      v15 = 0;
      while (1)
      {
        if (*(_QWORD *)v27 != v13)
          objc_enumerationMutation(v7);
        EffectiveEndDate = CalRecurrenceGetEffectiveEndDate(*(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v15));
        if (vabdd_f64(EffectiveEndDate, v14) < 2.22044605e-16)
          break;
        v11 |= EffectiveEndDate + v12 > v5;
        if (v10 == ++v15)
        {
          v10 = -[__CFArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
          if (v10)
            goto LABEL_4;

          if ((v11 & 1) != 0)
          {
            v17 = (const __CFTimeZone *)CalCopyDefaultTimeZone();
            GregorianDate = CFAbsoluteTimeGetGregorianDate(v5, v17);
            v19 = CFAbsoluteTimeGetGregorianDate(*MEMORY[0x1E0D0C480], v17);
            v9 = CalEventOccurrencesExistForEventInDateRange(a1, *(uint64_t *)&GregorianDate.year, *(uint64_t *)&GregorianDate.second, *(uint64_t *)&v19.year, *(uint64_t *)&v19.second, 0, v17) != 0;
            if (v17)
              CFRelease(v17);
          }
          else
          {
            v9 = 0;
          }
          goto LABEL_15;
        }
      }
    }

  }
  else
  {
    EndDateWhileLocked = _CalEventGetEndDateWhileLocked(a1, 0);
    objc_msgSend(MEMORY[0x1E0C99D68], "CalDateForNow");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", EndDateWhileLocked);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "timeIntervalSinceDate:", v21);
    v24 = v23;

    v9 = v24 >= 0.0;
  }
LABEL_15:

  return v9;
}

uint64_t CalEventIsSignificantlyDetached(uint64_t a1)
{
  return CalEventIsSignificantlyDetachedOptionallyIgnoringPartStat(a1, 0);
}

uint64_t CalEventIsSignificantlyDetachedOptionallyIgnoringPartStat(uint64_t a1, char a2)
{
  CFTypeRef v4;
  void *v5;
  uint64_t v6;
  double OriginalStartDate;
  double StartDate;
  int DurationWhileLocked;
  int v11;
  int Status;
  CFTypeRef v13;
  const void *v14;
  void *v15;
  void *v16;
  CFTypeRef v17;
  const void *v18;
  void *v19;
  void *v20;
  void *v21;
  CFTypeRef v22;
  CFTypeRef v23;
  int v24;
  int v25;
  _BOOL4 NeedsResponse;
  _BOOL4 v27;
  CFTypeRef v28;
  void *v29;
  void *v30;
  CFTypeRef v31;
  CFTypeRef v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  v4 = CalEventCopyOriginalEvent(a1);
  v5 = (void *)v4;
  if (!v4)
  {
    v6 = 0;
    goto LABEL_5;
  }
  if (CalCalendarItemIsPhantomMaster((uint64_t)v4))
  {
    v6 = 1;
    goto LABEL_5;
  }
  OriginalStartDate = CalEventGetOriginalStartDate(a1);
  StartDate = CalEventGetStartDate(a1);
  DurationWhileLocked = _CalEventGetDurationWhileLocked(a1, 0);
  v11 = _CalEventGetDurationWhileLocked((uint64_t)v5, 0);
  v6 = 1;
  if (StartDate == OriginalStartDate && DurationWhileLocked == v11)
  {
    Status = CalCalendarItemGetStatus(a1);
    if (Status == CalCalendarItemGetStatus((uint64_t)v5))
    {
      v13 = CalCalendarItemCopyPreferredLocation(a1);
      if (v13)
      {
        v14 = v13;
        v15 = (void *)CalLocationCopyTitle((uint64_t)v13);
        v16 = (void *)CalLocationCopyAddress((uint64_t)v14);
        CFRelease(v14);
      }
      else
      {
        v16 = 0;
        v15 = 0;
      }
      v17 = CalCalendarItemCopyPreferredLocation((uint64_t)v5);
      if (v17)
      {
        v18 = v17;
        v19 = (void *)CalLocationCopyTitle((uint64_t)v17);
        v20 = (void *)CalLocationCopyAddress((uint64_t)v18);
        CFRelease(v18);
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      if (!CalEqualStrings() || !CalEqualStrings())
        goto LABEL_40;
      v21 = (void *)CalCalendarItemCopySummary(a1);
      v42 = (void *)CalCalendarItemCopySummary((uint64_t)v5);
      if (!CalEqualStrings())
        goto LABEL_39;
      if ((a2 & 1) == 0 && CalEventIsOrganizedExternally(a1))
      {
        v22 = CalCalendarItemCopySelfAttendee(a1);
        v23 = CalCalendarItemCopySelfAttendee((uint64_t)v5);
        if (v22)
        {
          v24 = CalAttendeeGetStatus((uint64_t)v22);
          CFRelease(v22);
        }
        else
        {
          v24 = 7;
        }
        if (v23)
        {
          v25 = CalAttendeeGetStatus((uint64_t)v23);
          CFRelease(v23);
        }
        else
        {
          v25 = 7;
        }
        if (v24 != v25)
        {
          NeedsResponse = CalAttendeeStatusGetNeedsResponse(v24);
          v27 = CalAttendeeStatusGetNeedsResponse(v25);
          v6 = 1;
          if (!NeedsResponse || !v27)
          {
LABEL_39:

LABEL_40:
            goto LABEL_5;
          }
        }
      }
      v28 = CalCalendarItemCopyOrganizer(a1);
      v29 = (void *)v28;
      if (v28)
      {
        v30 = (void *)CalAttendeeCopyAddress(v28);
        objc_msgSend(v30, "absoluteString");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = (void *)CalAttendeeCopyEmailAddress(v29);
        v39 = (void *)CalAttendeeCopyPhoneNumber(v29);
        CFRelease(v29);

        v31 = CalCalendarItemCopyOrganizer((uint64_t)v5);
        if (!v31)
        {
          v29 = 0;
          v33 = 0;
          v37 = 0;
LABEL_35:
          v34 = v37;
          if (!doURLsEmailsPhoneNumbersMatch())
          {
            v6 = 1;
            goto LABEL_38;
          }
LABEL_36:
          v6 = 0;
LABEL_38:

          goto LABEL_39;
        }
        v32 = v31;
      }
      else
      {
        v32 = CalCalendarItemCopyOrganizer((uint64_t)v5);
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v33 = 0;
        v34 = 0;
        if (!v32)
          goto LABEL_36;
      }
      v38 = v21;
      v35 = (void *)CalAttendeeCopyAddress(v32);
      objc_msgSend(v35, "absoluteString");
      v36 = objc_claimAutoreleasedReturnValue();
      v33 = (void *)CalAttendeeCopyEmailAddress(v32);
      v29 = (void *)CalAttendeeCopyPhoneNumber(v32);
      CFRelease(v32);

      v37 = (void *)v36;
      v21 = v38;
      goto LABEL_35;
    }
  }
LABEL_5:

  return v6;
}

uint64_t CalEventIsSignificantlyDetachedIgnoringParticipation(uint64_t a1)
{
  return CalEventIsSignificantlyDetachedOptionallyIgnoringPartStat(a1, 1);
}

void CalEventNotifyInvitationIfNeededWithOptions(uint64_t a1, int a2)
{
  CFTypeRef v4;
  const void *v5;
  _BOOL4 ShouldDisplayNotification;
  int v7;
  int v8;
  _BOOL4 HasOccurrenceInTheFuture;
  int IsSignificantlyDetachedOptionallyIgnoringPartStat;
  _BOOL4 v11;
  int v12;
  int v13;
  void *v14;
  NSObject *v15;
  const char *v16;
  void *v17;
  __CFArray *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t v28[128];
  uint8_t buf[4];
  int RowID;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = CalEventCopyOriginalEvent(a1);
  v5 = v4;
  if (v4)
  {
    ShouldDisplayNotification = CalEventShouldDisplayNotification((uint64_t)v4);
    CFRelease(v5);
    v7 = !ShouldDisplayNotification;
  }
  else
  {
    v7 = 1;
  }
  v8 = CalEventNeedsResponse(a1);
  HasOccurrenceInTheFuture = CalEventHasOccurrenceInTheFuture(a1);
  if (v5)
    IsSignificantlyDetachedOptionallyIgnoringPartStat = CalEventIsSignificantlyDetachedOptionallyIgnoringPartStat(a1, 0);
  else
    IsSignificantlyDetachedOptionallyIgnoringPartStat = 1;
  v11 = CalEventShouldDisplayNotification(a1);
  v12 = v8 & HasOccurrenceInTheFuture & IsSignificantlyDetachedOptionallyIgnoringPartStat ^ 1 | v11;
  if ((v12 & 1) == 0)
  {
    v17 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      v15 = v17;
      *(_DWORD *)buf = 67109120;
      RowID = CalCalendarItemGetRowID();
      v16 = "Marking event with UID %d as needing a notification because the self attendee needs a response";
      goto LABEL_16;
    }
LABEL_17:
    CalEventSetNeedsNotification(a1, v12 ^ 1);
    goto LABEL_18;
  }
  v13 = !v11;
  if (((!v11 | v8) & 1) == 0 && !CalEventGetInvitationChangedProperties(a1))
  {
    v23 = (void *)CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
      goto LABEL_17;
    v15 = v23;
    *(_DWORD *)buf = 67109120;
    RowID = CalCalendarItemGetRowID();
    v16 = "Marking event with UID %d as no longer needing a notification because it is in the inbox, does not need a resp"
          "onse, and has no other reason for being there";
    goto LABEL_16;
  }
  if (((v13 | IsSignificantlyDetachedOptionallyIgnoringPartStat | v7) & 1) == 0
    && CalEventGetInvitationChangedProperties(a1) <= 0xF)
  {
    CalEventSetInvitationChangedProperties(a1);
    v14 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      v15 = v14;
      *(_DWORD *)buf = 67109120;
      RowID = CalCalendarItemGetRowID();
      v16 = "Marking event with UID %d as no longer needing a notification because it is detached and redundant with a no"
            "tification for its parent which is already in the inbox";
LABEL_16:
      _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 8u);

      goto LABEL_17;
    }
    goto LABEL_17;
  }
LABEL_18:
  if (!v5 && a2)
  {
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v18 = CalEventCopyDetachedEvents(a1);
    v19 = -[__CFArray countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v25 != v21)
            objc_enumerationMutation(v18);
          CalEventNotifyInvitationIfNeededWithOptions(*(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * i), 1);
        }
        v20 = -[__CFArray countByEnumeratingWithState:objects:count:](v18, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v20);
    }

  }
}

CFTypeRef CalEventCopyOriginalEvent(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef OriginalEvent;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  OriginalEvent = _CalEventGetOriginalEvent(a1);
  v4 = OriginalEvent;
  if (OriginalEvent)
    CFRetain(OriginalEvent);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

BOOL CalEventShouldDisplayNotification(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  int InvitationStatus;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  InvitationStatus = _CalEventGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return InvitationStatus != 0;
}

void CalEventSetNeedsNotification(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    v5 = 3;
  else
    v5 = 0;
  if (CPRecordGetStore() && (CPRecordStoreIsLoggingChanges() & 1) != 0)
  {
    CPRecordStoreLogChanges();
    _CalRecordSetPropertyIfDifferent(a1, 15, (const __CFString *)v5);
    CPRecordStoreLogChanges();
  }
  else
  {
    _CalRecordSetPropertyIfDifferent(a1, 15, (const __CFString *)v5);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalEventSetInvitationChangedProperties(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetInvitationChangedProperties(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalEventCopyDetachedEvents(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalEventCopyDetachedEvents(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalEventNotifyInvitationIfNeeded(uint64_t a1)
{
  CalEventNotifyInvitationIfNeededWithOptions(a1, 1);
}

void CalDatabaseCleanUpDeclinedEvents(os_unfair_lock *a1)
{
  __CFString *SelectPrefix;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;

  CalDatabaseLockForThread(a1);
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  CFAbsoluteTimeGetCurrent();
  CFStringAppend(SelectPrefix, CFSTR(" JOIN Participant ON self_attendee_id = Participant.rowid"));
  CFStringAppend(SelectPrefix, CFSTR(" WHERE Event.external_id IS NULL AND Participant.entity_type == ? AND Participant.status = ? AND end_date < ?"));
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  CPSqliteDatabaseStatementForReading();
  CFRelease(SelectPrefix);
  CalDatabaseUnlockForThread(a1);
}

uint64_t CalDatabaseGetCountOfUnacknowledgedEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t v6;
  const os_unfair_lock *Context;
  uint64_t v8;
  uint64_t v9;
  const os_unfair_lock *v10;

  if (a2)
  {
    v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v3 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v3 + 20);
  v4 = (uint64_t **)_CalEventPrepareNotifiableStatusStatement((uint64_t)v3, CFSTR("SELECT COUNT(*) FROM CalendarItem AS ci"), a2, 1, 0);
  if (v4)
  {
    v5 = v4;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v4)
      {
        v6 = **v4;
        if (v6)
        {
          if (*(_QWORD *)(v6 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    v8 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v5)
      {
        v9 = **v5;
        if (v9)
        {
          if (*(_QWORD *)(v9 + 104))
          {
            v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10)
              os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    v8 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3 + 20);
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v3);
  return v8;
}

uint64_t CalDatabaseCopyOfAllUnacknowledgedEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  const __CFString *SelectPrefix;
  const __CFString *v5;
  uint64_t v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;

  if (a2)
  {
    v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v3 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v3 + 20);
  SelectPrefix = (const __CFString *)CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    v5 = SelectPrefix;
    v6 = _CalEventPrepareNotifiableStatusStatement((uint64_t)v3, SelectPrefix, a2, 1, 0);
    if (v6)
    {
      RecordStore = _CalDatabaseGetRecordStore((uint64_t)v3);
      if (CDBLockingAssertionsEnabled)
        v8 = RecordStore == 0;
      else
        v8 = 1;
      if (!v8)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      v6 = CPRecordStoreProcessStatementWithPropertyIndices();
    }
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3 + 20);
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v3);
  return v6;
}

uint64_t CalDatabaseCopyOfAllEventsCreatedFromSuggestionsInStore(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  return _CalDatabaseCopyOfAllEventsCreatedFromSuggestionsInStore(a1, a2, a3, 0);
}

uint64_t _CalDatabaseCopyOfAllEventsCreatedFromSuggestionsInStore(os_unfair_lock_s *cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_s *v6;
  const __CFString *v7;
  __CFString *v8;
  uint64_t v9;
  uint64_t RecordStore;
  BOOL v11;
  const os_unfair_lock *Context;

  if (a2)
  {
    v6 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v6)
      return 0;
  }
  else
  {
    v6 = cf;
    if (!cf)
      return 0;
    CFRetain(cf);
  }
  os_unfair_lock_lock(v6 + 20);
  if (a3 | a4)
  {
    v7 = CFSTR("extraction_group_identifier");
    if (!a4)
      v7 = 0;
    if (a3)
      v7 = CFSTR("opaque_key");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("JOIN SuggestedEventInfo ON CalendarItem.ROWID = SuggestedEventInfo.owner_id WHERE SuggestedEventInfo.%@ = ?"), v7);
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = CFSTR("JOIN SuggestedEventInfo ON CalendarItem.ROWID = SuggestedEventInfo.owner_id");
  }
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)v6);
  if (CDBLockingAssertionsEnabled)
    v11 = RecordStore == 0;
  else
    v11 = 1;
  if (!v11)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v9 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6 + 20);
  os_unfair_lock_unlock(v6 + 20);

  CFRelease(v6);
  return v9;
}

uint64_t CalDatabaseCopyOfAllEventsCreatedFromSuggestionsWithExtractionGroupIdentifierInStore(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  return _CalDatabaseCopyOfAllEventsCreatedFromSuggestionsInStore(a1, a2, 0, a3);
}

CFArrayRef CalDatabaseCopyOfAllRepliedEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  return CalDatabaseCopyOfAllNotifiableOrRepliedEventsInStore(a1, a2, 1);
}

uint64_t CalDatabaseCopyOfAllReadCancelledEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t SelectPrefix;
  __CFString *v5;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v8;
  const os_unfair_lock *v9;
  uint64_t v10;
  uint64_t v11;
  sqlite3_stmt *v12;
  int ID;
  const os_unfair_lock *v14;
  uint64_t v15;

  if (a2)
  {
    v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v3 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v3 + 20);
  SelectPrefix = CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    v5 = (__CFString *)SelectPrefix;
    if (!_CalDatabaseGetRecordStore((uint64_t)v3))
      goto LABEL_23;
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (!Database)
      goto LABEL_23;
    v8 = Database;
    CFStringAppend(v5, CFSTR(" WHERE status = ? and invitation_status = 0"));
    if (a2)
      CFStringAppend(v5, CFSTR(" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)"));
    CFStringAppend(v5, CFSTR(";"));
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v8 + 104))
      {
        v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9)
          os_unfair_lock_assert_owner(v9 + 20);
      }
    }
    v10 = CPSqliteDatabaseStatementForReading();
    if (v10)
    {
      v11 = v10;
      sqlite3_bind_int(*(sqlite3_stmt **)(v10 + 8), 1, 3);
      if (a2)
      {
        v12 = *(sqlite3_stmt **)(v11 + 8);
        ID = CPRecordGetID();
        sqlite3_bind_int(v12, 2, ID);
      }
      if (CDBLockingAssertionsEnabled)
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
      v15 = CPRecordStoreProcessStatementWithPropertyIndices();
    }
    else
    {
LABEL_23:
      v15 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    v15 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3 + 20);
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v3);
  return v15;
}

uint64_t CalDatabaseGetCountOfNotifiableEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t v6;
  const os_unfair_lock *Context;
  uint64_t v8;
  uint64_t v9;
  const os_unfair_lock *v10;

  if (a2)
  {
    v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v3 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v3 + 20);
  v4 = (uint64_t **)_CalEventPrepareNotifiableStatusStatement((uint64_t)v3, CFSTR("SELECT COUNT(*) FROM CalendarItem AS ci"), a2, 0, 0);
  if (v4)
  {
    v5 = v4;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v4)
      {
        v6 = **v4;
        if (v6)
        {
          if (*(_QWORD *)(v6 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    v8 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v5)
      {
        v9 = **v5;
        if (v9)
        {
          if (*(_QWORD *)(v9 + 104))
          {
            v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10)
              os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    v8 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3 + 20);
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v3);
  return v8;
}

uint64_t _CalEventSetInvitationStatus(uint64_t a1, unsigned int a2)
{
  if (!a2)
    _CalEventRemoveAllEventActions(a1);
  if (!CPRecordGetStore() || (CPRecordStoreIsLoggingChanges() & 1) == 0)
    return _CalRecordSetPropertyIfDifferent(a1, 15, (const __CFString *)a2);
  CPRecordStoreLogChanges();
  _CalRecordSetPropertyIfDifferent(a1, 15, (const __CFString *)a2);
  return CPRecordStoreLogChanges();
}

void CalEventSetInvitationStatus(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetInvitationStatus(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetInvitationStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t InvitationStatus;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  InvitationStatus = _CalEventGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return InvitationStatus;
}

uint64_t _CalEventGetInvitationStatus(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

BOOL CalEventHasBeenAlerted(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  int InvitationStatus;
  _BOOL8 v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  InvitationStatus = _CalEventGetInvitationStatus(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  v5 = InvitationStatus != 3 && InvitationStatus != 0;
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

uint64_t CalDatabaseCopyOfAllUnalertedEventsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t SelectPrefix;
  const __CFString *v5;
  uint64_t RecordStore;
  uint64_t v7;
  BOOL v8;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v11;
  __CFString *MutableCopy;
  __CFString *v13;
  uint64_t v14;
  CFMutableStringRef v15;
  const __CFString *v16;
  const os_unfair_lock *v17;
  uint64_t v18;
  uint64_t v19;
  sqlite3_stmt *v20;
  int ID;
  int v22;
  double Current;
  uint64_t v24;
  double v25;
  const void *v26;
  double v27;
  const os_unfair_lock *v28;

  if (a2)
  {
    v3 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v3 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v3 + 20);
  SelectPrefix = CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    v5 = (const __CFString *)SelectPrefix;
    RecordStore = _CalDatabaseGetRecordStore((uint64_t)v3);
    v7 = RecordStore;
    if (CDBLockingAssertionsEnabled)
      v8 = RecordStore == 0;
    else
      v8 = 1;
    if (!v8)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (Database
      && (v11 = Database, (MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v5)) != 0))
    {
      v13 = MutableCopy;
      CFStringAppend(MutableCopy, CFSTR(" WHERE invitation_status = ? AND self_attendee_id != 0"));
      if (a2)
      {
        CFStringAppend(v13, CFSTR(" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)"));
      }
      else
      {
        v15 = _CalDatabaseCopyDisabledStoresClause((uint64_t)v3);
        if (v15)
        {
          v16 = v15;
          CFStringAppend(v13, CFSTR(" AND calendar_id NOT IN (SELECT ROWID FROM Calendar WHERE store_id IN "));
          CFStringAppend(v13, v16);
          CFStringAppend(v13, CFSTR(")"));
          CFRelease(v16);
        }
      }
      CFStringAppend(v13, CFSTR(" AND (has_recurrences = 1 OR (start_tz = ? AND end_date > ?) OR (start_tz != ? AND end_date > ?));"));
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(v11 + 104))
        {
          v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17)
            os_unfair_lock_assert_owner(v17 + 20);
        }
      }
      v18 = CPSqliteDatabaseStatementForReading();
      if (v18)
      {
        v19 = v18;
        sqlite3_bind_int(*(sqlite3_stmt **)(v18 + 8), 1, 3);
        if (a2)
        {
          v20 = *(sqlite3_stmt **)(v19 + 8);
          ID = CPRecordGetID();
          sqlite3_bind_int(v20, 2, ID);
          v22 = 3;
        }
        else
        {
          v22 = 2;
        }
        Current = CFAbsoluteTimeGetCurrent();
        v24 = CalTimeZoneCopyCFTimeZone();
        v25 = Current;
        if (v24)
        {
          v26 = (const void *)v24;
          CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
          CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
          v25 = v27;
          CFRelease(v26);
        }
        sqlite3_bind_text(*(sqlite3_stmt **)(v19 + 8), v22, "_float", -1, 0);
        sqlite3_bind_double(*(sqlite3_stmt **)(v19 + 8), v22 + 1, v25);
        sqlite3_bind_text(*(sqlite3_stmt **)(v19 + 8), v22 + 2, "_float", -1, 0);
        sqlite3_bind_double(*(sqlite3_stmt **)(v19 + 8), v22 + 3, Current);
        if (CDBLockingAssertionsEnabled)
        {
          if (v7)
          {
            v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v28)
              os_unfair_lock_assert_owner(v28 + 20);
          }
        }
        v14 = CPRecordStoreProcessStatementWithPropertyIndices();
      }
      else
      {
        v14 = 0;
      }
      CFRelease(v13);
    }
    else
    {
      v14 = 0;
    }
    CFRelease(v5);
  }
  else
  {
    v14 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3 + 20);
  os_unfair_lock_unlock(v3 + 20);
  CFRelease(v3);
  return v14;
}

uint64_t CalAlertUnacknowledgedInvitations()
{
  _CalGetPrefValue(&CalAlertUnacknowledgedInvitations___AlertUnacknowledgedInvitationsValue, CFSTR("InvitationAlerts"), (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))_CalEventAlertPrefChanged);
  return CalAlertUnacknowledgedInvitations___AlertUnacknowledgedInvitationsValue;
}

uint64_t _CalEventAlertPrefChanged()
{
  return CFPreferencesAppSynchronize((CFStringRef)*MEMORY[0x1E0D0C508]);
}

uint64_t CalAlertSharedEventChanges()
{
  _CalGetPrefValue(&CalAlertSharedEventChanges___AlertSharedEventChangesValue, CFSTR("SharedEventAlerts"), (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))_CalEventAlertSharedEventChangesPrefChanged);
  return CalAlertSharedEventChanges___AlertSharedEventChangesValue;
}

uint64_t _CalEventAlertSharedEventChangesPrefChanged()
{
  return CFPreferencesAppSynchronize((CFStringRef)*MEMORY[0x1E0D0C508]);
}

void CalSetAlertInviteeDeclines(int a1)
{
  CFPropertyListRef *v1;
  const __CFString *v2;
  __CFNotificationCenter *DarwinNotifyCenter;

  v1 = (CFPropertyListRef *)MEMORY[0x1E0C9AE50];
  if (!a1)
    v1 = (CFPropertyListRef *)MEMORY[0x1E0C9AE40];
  v2 = (const __CFString *)*MEMORY[0x1E0D0C508];
  CFPreferencesSetAppValue(CFSTR("InviteeDeclineAlerts"), *v1, (CFStringRef)*MEMORY[0x1E0D0C508]);
  CFPreferencesAppSynchronize(v2);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.mobilecal.invitationalertschanged"), 0, 0, 1u);
}

uint64_t _CalEventAlertInviteeDeclinesPrefChanged()
{
  return CFPreferencesAppSynchronize((CFStringRef)*MEMORY[0x1E0D0C508]);
}

BOOL CalEventCanBeMovedToAnotherCalendar(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Store;
  uint64_t StoreWithUID;
  _BOOL8 v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalCalendarItemGetStoreId(a1);
  Store = CPRecordGetStore();
  StoreWithUID = _CalGetStoreWithUID(Store);
  if (StoreWithUID)
    v5 = !_CalStoreGetBoolConstraintValue(StoreWithUID, CFSTR("CalEvent"), CFSTR("CalendarNotChangeable"), 0);
  else
    v5 = 1;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalEventSetResponseComment(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 29, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyResponseComment(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventSetLastSyncedResponseComment(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 30, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyLastSyncedResponseComment(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

BOOL CalEventCommentHasChanged(uint64_t a1)
{
  const __CFString *v2;
  const __CFString *SyncedResponseComment;
  const __CFString *v4;
  _BOOL8 v5;

  v2 = (const __CFString *)CalEventCopyResponseComment(a1);
  SyncedResponseComment = (const __CFString *)CalEventCopyLastSyncedResponseComment(a1);
  v4 = SyncedResponseComment;
  v5 = SyncedResponseComment != 0;
  if (v2 && SyncedResponseComment)
  {
    v5 = CFStringCompare(v2, SyncedResponseComment, 0) != kCFCompareEqualTo;
  }
  else
  {
    if (!v2)
      goto LABEL_7;
    v5 = 1;
  }
  CFRelease(v2);
LABEL_7:
  if (v4)
    CFRelease(v4);
  return v5;
}

void CalSetShowDeclinedEvents(uint64_t a1)
{
  CFPropertyListRef *v2;
  const __CFString *v3;
  id v4;

  v2 = (CFPropertyListRef *)MEMORY[0x1E0C9AE50];
  if (!(_DWORD)a1)
    v2 = (CFPropertyListRef *)MEMORY[0x1E0C9AE40];
  v3 = (const __CFString *)*MEMORY[0x1E0D0C508];
  CFPreferencesSetAppValue(CFSTR("ShowDeclinedEvents"), *v2, (CFStringRef)*MEMORY[0x1E0D0C508]);
  CFPreferencesAppSynchronize(v3);
  v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D0C368]), "initWithDomain:", v3);
  objc_msgSend(v4, "setBooleanPreference:value:notificationName:", CFSTR("ShowDeclinedEvents"), a1, CFSTR("com.apple.mobilecal.showdeclinedchanged"));

}

void CalSetShowCompletedReminders(uint64_t a1)
{
  CFPropertyListRef *v2;
  const __CFString *v3;
  id v4;

  v2 = (CFPropertyListRef *)MEMORY[0x1E0C9AE50];
  if (!(_DWORD)a1)
    v2 = (CFPropertyListRef *)MEMORY[0x1E0C9AE40];
  v3 = (const __CFString *)*MEMORY[0x1E0D0C508];
  CFPreferencesSetAppValue(CFSTR("ShowCompletedReminders"), *v2, (CFStringRef)*MEMORY[0x1E0D0C508]);
  CFPreferencesAppSynchronize(v3);
  v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D0C368]), "initWithDomain:", v3);
  objc_msgSend(v4, "setBooleanPreference:value:notificationName:", CFSTR("ShowCompletedReminders"), a1, CFSTR("com.apple.mobilecal.showCompletedRemindersChanged"));

}

uint64_t CalShowCompletedReminders()
{
  id v0;
  void *v1;
  uint64_t v2;

  v0 = objc_alloc(MEMORY[0x1E0D0C368]);
  v1 = (void *)objc_msgSend(v0, "initWithDomain:", *MEMORY[0x1E0D0C508]);
  v2 = objc_msgSend(v1, "getBooleanPreference:defaultValue:", CFSTR("ShowCompletedReminders"), 1);

  return v2;
}

__CFArray *CalEventCopyExceptionDates(uint64_t a1)
{
  return CalCalendarItemCopyExceptionDatesAsCFDates(a1, 1);
}

void _CalEventSetOriginalEvent(void *a1, uint64_t a2)
{
  CFTypeRef OriginalEvent;

  if (a2)
  {
    _CalEventAddDetachedEvent(a2, a1);
  }
  else
  {
    OriginalEvent = _CalEventGetOriginalEvent((uint64_t)a1);
    if (OriginalEvent)
      _CalEventRemoveDetachedEvent((uint64_t)OriginalEvent, a1);
  }
}

_QWORD *_CalEventRemoveDetachedEvent(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

void CalEventSetOriginalEvent(void *a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetOriginalEvent(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalEventAddDetachedEvent(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventAddDetachedEvent(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalEventRemoveDetachedEvent(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventRemoveDetachedEvent(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void _CalEventDeleteAllDetachedEvents(uint64_t a1)
{
  const os_unfair_lock *Context;
  _QWORD *Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationRemoveAllObjects(Property);
}

BOOL CalEventIsDetached(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef OriginalEvent;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  OriginalEvent = _CalEventGetOriginalEvent(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return OriginalEvent != 0;
}

void _CalEventUpdateDetachedEventsRelation(uint64_t a1)
{
  const os_unfair_lock *Context;
  void *Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (void *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationSave(Property);
}

void CalEventSetOriginalStartDate(uint64_t a1, CFAbsoluteTime a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetOriginalStartDate(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

double CalEventGetOriginalStartDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

uint64_t CalEventCopyUncachedCalendar(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Store;
  const os_unfair_lock *Context;
  uint64_t RowidForRecordID;
  const os_unfair_lock *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  const void *ValueAtIndex;
  NSObject *v10;
  _QWORD v12[6];

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    Store = CPRecordGetStore();
    if (!Store)
      goto LABEL_17;
    CPRecordGetID();
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    RowidForRecordID = CPRecordStoreGetRowidForRecordID();
    if (CDBLockingAssertionsEnabled)
    {
      v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6)
        os_unfair_lock_assert_owner(v6 + 20);
    }
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = ___CalEventCopyUncachedCalendar_block_invoke;
    v12[3] = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
    v12[4] = RowidForRecordID;
    v7 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
    if (v7)
    {
      v8 = v7;
      if (CFArrayGetCount(v7) < 1)
      {
        Store = 0;
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v8, 0);
        Store = (uint64_t)CFRetain(ValueAtIndex);
      }
      CFRelease(v8);
      goto LABEL_17;
    }
  }
  else
  {
    v10 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_ERROR, "_CalEventCopyUncachedCalendar: called with NULL event", (uint8_t *)v12, 2u);
    }
  }
  Store = 0;
LABEL_17:
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Store;
}

BOOL _CalDatabaseCalendarHasEvents(uint64_t a1, uint64_t a2)
{
  return _CalDatabaseCalendarHasCalendarItemsWithEntityType(a1, a2, 2);
}

BOOL _CalDatabaseCalendarHasEventsWithAttendeeAsAttendeeType(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v8;
  const os_unfair_lock *v9;
  uint64_t v10;
  uint64_t v11;
  sqlite3_stmt *v12;
  int ID;
  _BOOL8 v14;
  uint64_t v15;
  const os_unfair_lock *v16;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v8 = Database == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  v10 = CPSqliteDatabaseStatementForReading();
  if (!v10)
    return 0;
  v11 = v10;
  v12 = *(sqlite3_stmt **)(v10 + 8);
  if (v12)
  {
    ID = CPRecordGetID();
    sqlite3_bind_int(v12, 1, ID);
    sqlite3_bind_int(*(sqlite3_stmt **)(v11 + 8), 2, a3);
    v14 = sqlite3_step(*(sqlite3_stmt **)(v11 + 8)) == 100;
  }
  else
  {
    v14 = 0;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)v11)
    {
      v15 = **(_QWORD **)v11;
      if (v15)
      {
        if (*(_QWORD *)(v15 + 104))
        {
          v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16)
            os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
  }
  CPSqliteStatementReset();
  return v14;
}

BOOL _CalEventIsReminderIntegrationEvent(uint64_t a1)
{
  uint64_t Store;
  uint64_t StoreWithUID;
  _BOOL8 result;

  _CalCalendarItemGetStoreId(a1);
  Store = CPRecordGetStore();
  StoreWithUID = _CalGetStoreWithUID(Store);
  result = 0;
  if (Store)
  {
    if (StoreWithUID)
      return _CalStoreGetType(StoreWithUID) == 6;
  }
  return result;
}

uint64_t _CalDatabaseCopyNonRecurringEventsInDateRange(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t RecordStore;
  const os_unfair_lock *Context;
  const void *SelectPrefix;
  void *v9;
  const os_unfair_lock *v10;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    if (CPRecordStoreGetDatabase())
    {
      SelectPrefix = (const void *)CPRecordStoreCreateSelectPrefix();
      v9 = _CalFilterCopyQuery2(a3, a1, (uint64_t)CFSTR("_CalDatabaseCopyNonRecurringEventsInDateRange"), (uint64_t)_CalCopyEventQueryForFilter, (uint64_t)SelectPrefix, (uint64_t)CFSTR("has_recurrences = 0 AND hidden = 0 AND ((end_date > ? AND start_date < ?) OR (proposed_start_date > ? AND proposed_start_date < ?))"));
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)a2)
          {
            if (*(_QWORD *)(*(_QWORD *)a2 + 104))
            {
              v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10)
                os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
      }
      CPSqliteConnectionStatementForSQL();
      RecordStore = 0;
      CFRelease(v9);
      CFRelease(SelectPrefix);
    }
    else
    {
      return 0;
    }
  }
  return RecordStore;
}

uint64_t _CalDatabaseNonRecurringEventsInDateRangeRowHandler(uint64_t a1, uint64_t a2)
{
  sqlite3_stmt *v3;
  double v4;
  double v5;
  double v6;
  const unsigned __int8 *v7;
  int v8;
  BOOL v9;
  int v10;
  double v11;

  v3 = *(sqlite3_stmt **)(a1 + 8);
  v4 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 32));
  v5 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 36));
  v6 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 44));
  v7 = sqlite3_column_text(v3, *(_DWORD *)(a2 + 40));
  v8 = sqlite3_column_bytes(v3, *(_DWORD *)(a2 + 40));
  if (v7)
    v9 = v8 == 6;
  else
    v9 = 0;
  if (v9 && !strncmp((const char *)v7, "_float", 6uLL))
  {
    if (v4 < *(double *)(a2 + 24) && v5 > *(double *)(a2 + 16))
      return 2;
    v10 = 1;
  }
  else
  {
    if (v4 < *(double *)(a2 + 8) && v5 > *(double *)a2)
      return 2;
    v10 = 0;
  }
  if (v6 > *MEMORY[0x1E0D0C490])
  {
    v11 = v5 - v4 + v6;
    if (v10)
    {
      if (v6 < *(double *)(a2 + 24))
        return 2 * (v11 > *(double *)(a2 + 16));
      return 0;
    }
    if (v6 < *(double *)(a2 + 8) && v11 > *(double *)a2)
      return 2;
  }
  return 0;
}

uint64_t _CalDatabaseCopyRecurringEventsPossiblyOccurringInDateRange(uint64_t a1, void *a2, const __CFString *a3, double a4, double a5, double a6, double a7)
{
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v14;
  const __CFAllocator *v15;
  CFArrayRef v16;
  __CFString *ColumnListWithAliasAndExtraColumns;
  __CFString *v18;
  void *v19;
  const void *v20;
  const os_unfair_lock *v21;
  uint64_t v22;
  double v23;
  CFTimeZoneRef v24;
  uint64_t v25;
  const os_unfair_lock *v26;
  CFTypeRef cf;
  char buffer[256];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!_CalDatabaseGetRecordStore(a1))
    return 0;
  if (CDBLockingAssertionsEnabled)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    return 0;
  v14 = Database;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)_CalDatabaseCopyRecurringEventsPossiblyOccurringInDateRange_columns, 7, 0);
  ColumnListWithAliasAndExtraColumns = (__CFString *)CPRecordStoreCreateColumnListWithAliasAndExtraColumns();
  if (ColumnListWithAliasAndExtraColumns)
  {
    v18 = ColumnListWithAliasAndExtraColumns;
    CFStringAppend(ColumnListWithAliasAndExtraColumns, CFSTR(" FROM CalendarItem e JOIN Recurrence r ON r.owner_id = e.ROWID"));
    v19 = _CalFilterCopyQuery2(a2, a1, (uint64_t)CFSTR("_CalDatabaseCopyRecurringEventsPossiblyOccurringInDateRange"), (uint64_t)_CalCopyEventQueryForFilter, (uint64_t)v18, (uint64_t)CFSTR("entity_type = 2 AND has_recurrences = 1 AND hidden=0 AND start_date < ? "));
    if (v19)
    {
      v20 = v19;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(v14 + 104))
        {
          v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v21)
            os_unfair_lock_assert_owner(v21 + 20);
        }
      }
      v22 = CPSqliteDatabaseStatementForReading();
      if (v22
        && (a5 <= a7 ? (v23 = a7) : (v23 = a5),
            sqlite3_bind_int(*(sqlite3_stmt **)(v22 + 8), 1, (int)v23),
            CFStringGetCString(a3, buffer, 256, 0x8000100u)))
      {
        CFDictionaryGetCount(0);
        cf = (CFTypeRef)CalTimeZoneCopyCFTimeZone();
        v24 = CFTimeZoneCreateWithTimeIntervalFromGMT(v15, 0.0);
        CFDictionaryGetValue(0, (const void *)4);
        CFDictionaryGetValue(0, (const void *)6);
        CFDictionaryGetValue(0, (const void *)5);
        v25 = 0;
        CFDictionaryGetValue(0, (const void *)0x37);
        if (cf && v24)
        {
          if (CDBLockingAssertionsEnabled)
          {
            v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v26)
              os_unfair_lock_assert_owner(v26 + 20);
          }
          v25 = CPRecordStoreProcessStatementWithPropertyIndices();
        }
        if (v24)
          CFRelease(v24);
        if (cf)
          CFRelease(cf);
      }
      else
      {
        v25 = 0;
      }
      CFRelease(v20);
    }
    else
    {
      v25 = 0;
    }
    CFRelease(0);
    CFRelease(v18);
  }
  else
  {
    v25 = 0;
  }
  CFRelease(v16);
  return v25;
}

uint64_t _CalCopyRecurringEventQueryRowHandler(uint64_t a1, uint64_t a2)
{
  sqlite3_stmt *v3;
  const unsigned __int8 *v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  const unsigned __int8 *v10;
  int v11;
  int v12;
  const char *v13;
  _BOOL4 v14;
  uint64_t v15;
  unsigned int v16;
  double v17;
  double v18;
  int v19;
  uint64_t result;
  const unsigned __int8 *v21;
  uint64_t v22;
  double v23;
  double v24;
  int GregorianDateWithFallbackToDefaultTimeZone;
  int v26;
  double v27;
  int v28;
  double v29;

  v3 = *(sqlite3_stmt **)(a1 + 8);
  v4 = sqlite3_column_text(v3, *(_DWORD *)(a2 + 64));
  v5 = sqlite3_column_bytes(v3, *(_DWORD *)(a2 + 64));
  v6 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 56));
  v7 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 60));
  v8 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 88));
  v9 = sqlite3_column_double(v3, *(_DWORD *)(a2 + 80));
  v10 = sqlite3_column_text(v3, *(_DWORD *)(a2 + 84));
  v11 = sqlite3_column_bytes(v3, *(_DWORD *)(a2 + 84));
  v12 = sqlite3_column_int(v3, *(_DWORD *)(a2 + 76));
  if (v4)
    LODWORD(v4) = strncmp((const char *)v4, "_float", v5) == 0;
  v14 = v10 && (v13 = *(const char **)(a2 + 48)) != 0 && strncmp((const char *)v10, v13, v11) == 0;
  if ((_DWORD)v4)
    v15 = 24;
  else
    v15 = 8;
  if (v6 > *(double *)(a2 + v15))
    return 0;
  v16 = (v7 - v6);
  if (v8 != 0.0)
  {
    v17 = v8 + (double)v16;
    v18 = *(double *)(a2 + 16);
    goto LABEL_17;
  }
  if (v12 && v9 != 0.0 && v4 ^ 1 | v14)
  {
    v17 = v9 + (double)v16;
    v18 = *(double *)a2;
LABEL_17:
    if (v17 > v18)
      goto LABEL_18;
    return 0;
  }
LABEL_18:
  if (sqlite3_column_int(v3, *(_DWORD *)(a2 + 72)) != 4 || sqlite3_column_type(v3, *(_DWORD *)(a2 + 92)) != 5)
    return 2;
  v19 = sqlite3_column_int(v3, *(_DWORD *)(a2 + 96));
  result = 2;
  if (!v19 && v16)
  {
    v21 = sqlite3_column_text(v3, *(_DWORD *)(a2 + 68));
    if (v21 && strcmp((const char *)v21, "gregorian"))
      return 2;
    v22 = 16;
    if (!(_DWORD)v4)
      v22 = 0;
    v23 = *(double *)(a2 + v15);
    v24 = *(double *)(a2 + v22);
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    v26 = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    if (GregorianDateWithFallbackToDefaultTimeZone <= v26)
    {
      v27 = (double)v16;
      v28 = v26 + 1;
      while (1)
      {
        CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
        if (v29 + v27 >= v24 && v29 <= v23)
          break;
        result = 0;
        if (v28 == ++GregorianDateWithFallbackToDefaultTimeZone)
          return result;
      }
      return 2;
    }
    return 0;
  }
  return result;
}

uint64_t _CalEventSetTravelTime(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 56, a2);
}

const void *_CalEventCopyTravelTime(uint64_t a1)
{
  const os_unfair_lock *Context;
  const void *Property;
  const void *v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const void *)CPRecordGetProperty();
  v3 = Property;
  if (Property)
    CFRetain(Property);
  return v3;
}

void CalEventSetTravelTime(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 56, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const void *CalEventCopyTravelTime(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalEventCopyTravelTime(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalEventSetProposedStartDate(uint64_t a1, CFAbsoluteTime a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *CFDateRefFromCalDate;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CFDateRefFromCalDate = (const __CFString *)_CreateCFDateRefFromCalDate(a2);
  _CalRecordSetPropertyIfDifferent(a1, 62, CFDateRefFromCalDate);
  if (CFDateRefFromCalDate)
    CFRelease(CFDateRefFromCalDate);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

double CalEventGetRawProposedStartDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double ProposedStartDate;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ProposedStartDate = _CalEventGetProposedStartDate(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ProposedStartDate;
}

const void *CalEventCopyRecurrenceSet(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const void *Property;
  const void *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const void *)CPRecordGetProperty();
  v5 = Property;
  if (Property)
    CFRetain(Property);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalEventSetRecurrenceSet(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventGetFlag(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return (Property & a2) != 0;
}

void CalEventSetFlag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetTravelAdvisoryBehavior(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalEventSetTravelAdvisoryBehavior(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 57, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventIsCandidateForTravelAdvisories(uint64_t a1)
{
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;
  const char *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  CFTypeRef v11;
  const void *v12;
  _BOOL4 IsIgnoringEventAlerts;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v7 = CDBLogHandle;
    result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    LOWORD(v15) = 0;
    _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_ERROR, "No event given.  Will not determine travel advisory eligibility.", (uint8_t *)&v15, 2u);
    return 0;
  }
  if (CalCalendarItemGetStatus(a1) == 3)
  {
    v2 = (void *)CDBLogHandle;
    result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v4 = v2;
    v5 = (void *)CalCalendarItemCopySummary(a1);
    v15 = 138412290;
    v16 = v5;
    v6 = "Event is not a candidate for travel advisories because it is a cancelled event.  Summary: [%@]";
    goto LABEL_20;
  }
  if (CalEventIsAllDay(a1))
  {
    v8 = (void *)CDBLogHandle;
    result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v4 = v8;
    v5 = (void *)CalCalendarItemCopySummary(a1);
    v15 = 138412290;
    v16 = v5;
    v6 = "Event is not a candidate for travel advisories because it is an all-day event.  Summary: [%@]";
    goto LABEL_20;
  }
  if (CalEventGetParticipationStatus(a1) == 2)
  {
    v9 = (void *)CDBLogHandle;
    result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v4 = v9;
    v5 = (void *)CalCalendarItemCopySummary(a1);
    v15 = 138412290;
    v16 = v5;
    v6 = "Event is not a candidate for travel advisories because the user declined the event.  Summary: [%@]";
    goto LABEL_20;
  }
  if (CalEventGetTravelAdvisoryBehavior(a1) >= 2)
  {
    v10 = (void *)CDBLogHandle;
    result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v4 = v10;
    v5 = (void *)CalCalendarItemCopySummary(a1);
    v15 = 138412290;
    v16 = v5;
    v6 = "Event is not a candidate for travel advisories because its travel advisory behavior is not 'automatic' or 'enab"
         "led'.  Summary: [%@]";
    goto LABEL_20;
  }
  v11 = CalCalendarItemCopyCalendar(a1);
  if (!v11)
    return 1;
  v12 = v11;
  IsIgnoringEventAlerts = CalCalendarIsIgnoringEventAlerts((uint64_t)v11);
  CFRelease(v12);
  if (!IsIgnoringEventAlerts)
    return 1;
  v14 = (void *)CDBLogHandle;
  result = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v4 = v14;
    v5 = (void *)CalCalendarItemCopySummary(a1);
    v15 = 138412290;
    v16 = v5;
    v6 = "Event is not a candidate for travel advisories because its calendar has all event alerts disabled.  Summary: [%@]";
LABEL_20:
    _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_DEBUG, v6, (uint8_t *)&v15, 0xCu);

    return 0;
  }
  return result;
}

uint64_t CalEventIsImmediatelyEligibleForTravelAdvisories(uint64_t a1)
{
  CFTypeRef v2;
  const void *v3;
  uint64_t HasKnownSpatialData;
  NSObject *v6;
  uint8_t v7[16];

  if (a1)
  {
    if (CalEventIsCandidateForTravelAdvisories(a1))
    {
      v2 = CalCalendarItemCopyPreferredLocation(a1);
      if (v2)
      {
        v3 = v2;
        HasKnownSpatialData = CalLocationHasKnownSpatialData((uint64_t)v2);
        CFRelease(v3);
        return HasKnownSpatialData;
      }
    }
  }
  else
  {
    v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "NULL 'event' given.  Will not determine immediate eligibility for travel advisory", v7, 2u);
    }
  }
  return 0;
}

BOOL CalEventIsHidden(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsHidden;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsHidden = _CalEventIsHidden(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsHidden;
}

void CalEventSetHidden(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 31, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalEventSetCanForward(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 63, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventCanForward(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

void CalEventSetLocationPredictionState(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 64, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventGetLocationPredictionState(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

BOOL CalEventHasPredictedLocation(uint64_t a1)
{
  CFTypeRef v2;
  const void *v3;
  _BOOL8 v4;
  void *v6;
  __CFString *v7;
  CFTypeRef v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  __CFString *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = CalCalendarItemCopyPreferredLocation(a1);
  v3 = v2;
  if (v2 && CalLocationHasCoordinates((uint64_t)v2))
  {
    CFRelease(v3);
    return 0;
  }
  if (CalEventGetLocationPredictionState(a1))
  {
    v4 = 0;
    if (!v3)
      return v4;
LABEL_6:
    CFRelease(v3);
    return v4;
  }
  v6 = (void *)CalCalendarItemCopySummary(a1);
  if (v3)
    v7 = (__CFString *)CalLocationCopyTitle((uint64_t)v3);
  else
    v7 = &stru_1E4F941C0;
  v8 = CalCalendarItemCopyCalendar(a1);
  v9 = (void *)CalCalendarCopyUUID((uint64_t)v8);
  CFRelease(v8);
  v15 = 0;
  objc_msgSend(MEMORY[0x1E0D0C340], "predictedLocationOfInterestForEventTitle:eventLocation:calendarIdentifier:timeout:error:", v6, v7, v9, -1, &v15);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v15;
  v4 = v10 != 0;

  if (!v10)
  {
    if (v11)
    {
      v12 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v13 = v12;
        objc_msgSend(v11, "localizedDescription");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138413058;
        v17 = v6;
        v18 = 2112;
        v19 = v7;
        v20 = 2112;
        v21 = v9;
        v22 = 2112;
        v23 = v14;
        _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "Could not fetch predicted location of interest for event title: [%@], event location: [%@], calendar identifier: [%@], error: [%@]", buf, 0x2Au);

      }
    }
  }

  if (v3)
    goto LABEL_6;
  return v4;
}

void CalEventSetDisallowProposeNewTime(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 66, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalEventDisallowProposeNewTime(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

void CalEventSetJunkStatus(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 69, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void _CalEventUpdateLastModifiedDate(uint64_t a1)
{
  const void *v2;
  const void *v3;
  CFTypeRef Store;
  CFAbsoluteTime Current;
  CFDateRef v6;
  CFDateRef v7;

  v2 = CalCopyDatabaseForRecord();
  if (v2)
  {
    v3 = v2;
    if (_CalDatabaseIsPropertyModificationLoggingEnabled((uint64_t)v2))
    {
      if (!_CalCalendarItemIsInvite(a1)
        || (Store = _CalEventGetStore(a1), _CalStoreAttendeeCanUpdateLastModified((uint64_t)Store)))
      {
        Current = CFAbsoluteTimeGetCurrent();
        v6 = CFDateCreate(0, Current);
        if (v6)
        {
          v7 = v6;
          _CalCalendarItemSetLastModifiedDateWhileLocked(a1, (uint64_t)v6);
          CFRelease(v7);
        }
      }
    }
    CFRelease(v3);
  }
}

void CalEventSetLastModifiedDate(uint64_t a1, CFAbsoluteTime a2)
{
  CFDateRef CFDateRefFromCalDate;

  CFDateRefFromCalDate = _CreateCFDateRefFromCalDate(a2);
  CalCalendarItemSetLastModifiedDate(a1, (uint64_t)CFDateRefFromCalDate);
  if (CFDateRefFromCalDate)
    CFRelease(CFDateRefFromCalDate);
}

void CalEventGetLastModifiedDate(uint64_t a1)
{
  uint64_t ModifiedDate;
  const void *v2;

  ModifiedDate = CalCalendarItemCopyLastModifiedDate(a1);
  if (ModifiedDate)
  {
    v2 = (const void *)ModifiedDate;
    MEMORY[0x1A85B424C]();
    CFRelease(v2);
  }
}

void CalEventSetConferenceURL(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    v5 = CFURLGetString(a2);
  else
    v5 = 0;
  _CalRecordSetPropertyIfDifferent(a1, 70, v5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalEventCopyConferenceURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *v4;
  CFURLRef result;
  CFURLRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (const __CFString *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  result = 0;
  if (v4)
  {
    v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

uint64_t _CalEventInvalidateDetectedConferenceURL(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalEventCopyDetectedConferenceURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventUpdateDetectedConferenceURLIfNeeded(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void _CalEventUpdateDetectedConferenceURLIfNeeded(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef ClientLocation;
  void *v4;
  void *v5;
  void *Description;
  void *v7;
  void *v8;
  const void *v9;
  const os_unfair_lock *v10;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (objc_msgSend((id)CPRecordGetProperty(), "isEqualToString:", CFSTR("invalid")))
  {
    ClientLocation = _CalCalendarItemGetClientLocation(a1);
    if (ClientLocation || (ClientLocation = _CalCalendarItemGetLocation(a1)) != 0)
    {
      v4 = (void *)_CalEventCopySummary((uint64_t)ClientLocation);
      v5 = (void *)_CalLocationCopyAddress((uint64_t)ClientLocation);
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
    Description = (void *)_CalCalendarItemGetDescription(a1);
    v7 = (void *)_CalCalendarItemCopyURL(a1);
    objc_msgSend(v7, "absoluteString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (const void *)_CalEventDetectAndCopyConferenceURLFromSources(Description, (uint64_t)v8, (uint64_t)v4, (uint64_t)v5);

    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPRecordSetProperty();
    if (v9)
      CFRelease(v9);
  }
}

uint64_t _CalEventSetContactIdentifier(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 71, a2);
}

uint64_t _CalEventCopyContactIdentifier(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalEventSetContactIdentifier(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 71, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyContactIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalEventCopyContactIdentifier(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalEventSetContactName(uint64_t a1, const __CFString *a2)
{
  return _CalRecordSetPropertyIfDifferent(a1, 74, a2);
}

void CalEventSetContactName(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 74, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyContactName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalEventSetInvitationChangedProperties(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalEventAddInvitationChangedProperties(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  int InvitationChangedProperties;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  InvitationChangedProperties = _CalEventGetInvitationChangedProperties(a1);
  if ((InvitationChangedProperties | a2) != InvitationChangedProperties)
    _CalEventSetInvitationChangedProperties(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalEventRemoveInvitationChangedProperties(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  int InvitationChangedProperties;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  InvitationChangedProperties = _CalEventGetInvitationChangedProperties(a1);
  if ((InvitationChangedProperties & ~a2) != InvitationChangedProperties)
    _CalEventSetInvitationChangedProperties(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalEventSetSpecialDayString(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 125, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopySpecialDayString(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

_QWORD *_CalEventSetImage(void *a1, uint64_t a2)
{
  _QWORD *result;

  result = _CalEventGetImage((uint64_t)a1);
  if (result != (_QWORD *)a2)
  {
    if (result)
      result = (_QWORD *)_CalImageRemoveEvent((uint64_t)result, a1);
    if (a2)
      return _CalColorAddEvent(a2, a1);
  }
  return result;
}

CFTypeRef _CalEventGetImage(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

void CalEventSetImage(void *a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetImage(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalEventCopyImage(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Image;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Image = _CalEventGetImage(a1);
  if (Image)
    v4 = CFRetain(Image);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

_QWORD *_CalEventSetColor(void *a1, uint64_t a2)
{
  _QWORD *result;

  result = _CalEventGetColor((uint64_t)a1);
  if (result != (_QWORD *)a2)
  {
    if (result)
      result = (_QWORD *)_CalColorRemoveEvent((uint64_t)result, a1);
    if (a2)
      return _CalColorAddEvent(a2, a1);
  }
  return result;
}

CFTypeRef _CalEventGetColor(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

void CalEventSetColor(void *a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetColor(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalEventCopyColor(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Color;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Color = _CalEventGetColor(a1);
  if (Color)
    v4 = CFRetain(Color);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventSetCreatorTeamIdentityString(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 117, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyCreatorTeamIdentityString(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventSetCreatorIdentityString(uint64_t a1, const __CFString *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 116, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventCopyCreatorIdentityString(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalDatabaseRemoveCalendarItemChangesInCalendarToIndex(uint64_t a1, int a2, uint64_t a3, int a4)
{
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  const char *v11;
  int v12;
  _QWORD v13[7];
  int v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    v11 = "entityType == CalEventEntity || entityType == CalTaskEntity";
    v12 = 8244;
    goto LABEL_8;
  }
  if (!a3)
  {
    v11 = "calendar != NULL";
    v12 = 8245;
LABEL_8:
    __assert_rtn("CalDatabaseRemoveCalendarItemChangesInCalendarToIndex", "CalEvent.m", v12, v11);
  }
  v7 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  v8 = v7 + 20;
  os_unfair_lock_lock(v7 + 20);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __CalDatabaseRemoveCalendarItemChangesInCalendarToIndex_block_invoke;
  v13[3] = &unk_1E4F88F40;
  v13[4] = &v16;
  v13[5] = v7;
  v14 = a4;
  v15 = a2;
  v13[6] = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v7, (uint64_t)v13);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v8);
  os_unfair_lock_unlock(v8);
  CFRelease(v7);
  v9 = *((unsigned __int8 *)v17 + 24);
  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_1A5D43DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseRemoveCalendarItemChangesInStoreToIndex(uint64_t a1, int a2, uint64_t a3, int a4)
{
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;

  if ((a2 & 0xFFFFFFFE) != 2)
    CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_2();
  if (!a3)
    CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_1();
  v7 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  v8 = v7 + 20;
  os_unfair_lock_lock(v7 + 20);
  v9 = _CalDatabaseRemoveCalendarItemChangesInStoreToIndex((uint64_t)v7, a2, a3, a4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v8);
  os_unfair_lock_unlock(v8);
  CFRelease(v7);
  return v9;
}

uint64_t _CalDatabaseRemoveCalendarItemChangesInStoreToIndex(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  if ((a2 & 0xFFFFFFFE) != 2)
    _CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_2();
  if (!a3)
    _CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_1();
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___CalDatabaseRemoveCalendarItemChangesInStoreToIndex_block_invoke;
  v6[3] = &unk_1E4F88F40;
  v6[4] = &v9;
  v6[5] = a1;
  v7 = a4;
  v8 = a2;
  v6[6] = a3;
  _CalDatabaseLockForWriteTransaction(a1, (uint64_t)v6);
  v4 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1A5D4405C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseRemoveCalendarItemChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __CalDatabaseRemoveCalendarItemChangesWithIndices_block_invoke;
  v7[3] = &unk_1E4F84C18;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A5D44140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyCalendarItemChangesInCalendar(os_unfair_lock_s *a1, int a2, uint64_t a3, int a4, CFMutableDictionaryRef *a5)
{
  os_unfair_lock_s *v10;
  const __CFString *v11;
  const char *CStringPtr;
  __CFString *Mutable;
  __CFString *v14;
  const __CFString *v15;
  void *v16;
  uint64_t v17;
  _QWORD v19[7];
  int v20;

  if (!a3)
    CalDatabaseCopyCalendarItemChangesInCalendar_cold_1();
  v10 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v11 = (const __CFString *)_CalDatabaseCopyClientIdentifier((uint64_t)a1);
  CStringPtr = CFStringGetCStringPtr(v11, 0x8000100u);
  Mutable = CFStringCreateMutable(0, 0);
  v14 = Mutable;
  if (a4)
    v15 = CFSTR("entity_type = ? AND calendar_id = ? AND old_calendar_id != 0");
  else
    v15 = CFSTR("entity_type = ? AND calendar_id = ? AND old_calendar_id = 0");
  CFStringAppend(Mutable, v15);
  CFStringAppend(v14, CFSTR(" AND sequence_number > (select latest_consumed_sequence_number FROM ClientCursor WHERE client_identifier = ?)"));
  CFStringAppend(v14, CFSTR(" AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)"));
  CFStringAppend(v14, CFSTR(" AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = ? AND client_identifier = ?)"));
  if ((a1[90]._os_unfair_lock_opaque & 0x80000000) == 0)
    CFStringAppend(v14, CFSTR(" AND sequence_number <= ?"));
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __CalDatabaseCopyCalendarItemChangesInCalendar_block_invoke;
  v19[3] = &__block_descriptor_60_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  v20 = a2;
  v19[4] = a3;
  v19[5] = CStringPtr;
  v19[6] = a1;
  v16 = (void *)MEMORY[0x1A85B52F0](v19);
  CFRelease(v11);
  v17 = _CalDatabaseCopyCalendarItemChangesInternal((uint64_t)a1, 2, v14, v16, a5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v10);
  os_unfair_lock_unlock(v10);

  return v17;
}

uint64_t _CalDatabaseCopyCalendarItemChangesInternal(uint64_t a1, uint64_t a2, const void *a3, void *a4, CFMutableDictionaryRef *a5)
{
  id v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  uint64_t v11;
  uint64_t RecordStore;
  BOOL v13;
  const os_unfair_lock *Context;
  uint64_t ChangesForClassWithBindBlockAndProperties;
  uint64_t v17;
  BOOL v18;
  const os_unfair_lock *v19;

  v8 = a4;
  if (!a1)
    goto LABEL_5;
  if (!a5)
  {
    v10 = 0;
    goto LABEL_7;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
LABEL_5:
    v11 = 0xFFFFFFFFLL;
    goto LABEL_27;
  }
  v10 = Mutable;
  *a5 = Mutable;
LABEL_7:
  if (v10)
  {
    RecordStore = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
      v13 = RecordStore == 0;
    else
      v13 = 1;
    if (!v13)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    ChangesForClassWithBindBlockAndProperties = CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithBindBlockAndProperties();
  }
  else
  {
    v17 = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
      v18 = v17 == 0;
    else
      v18 = 1;
    if (!v18)
    {
      v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v19)
        os_unfair_lock_assert_owner(v19 + 20);
    }
    ChangesForClassWithBindBlockAndProperties = CPRecordStoreGetChangesForClassWithBindBlockAndProperties();
  }
  v11 = ChangesForClassWithBindBlockAndProperties;
  if (a3)
    CFRelease(a3);
LABEL_27:

  return v11;
}

uint64_t CalDatabaseCopyCalendarItemChangesInStore(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, int a4, CFMutableDictionaryRef *a5)
{
  os_unfair_lock_s *v10;
  const __CFString *v11;
  const char *CStringPtr;
  __CFString *Mutable;
  const __CFString *v14;
  void *v15;
  uint64_t v16;
  _QWORD v18[7];
  int v19;

  v10 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v11 = (const __CFString *)_CalDatabaseCopyClientIdentifier((uint64_t)a1);
  CStringPtr = CFStringGetCStringPtr(v11, 0x8000100u);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, CFSTR("entity_type = ?"));
  if (a3)
    CFStringAppend(Mutable, CFSTR(" AND store_id = ?"));
  if (a4)
    v14 = CFSTR(" AND old_calendar_id != 0");
  else
    v14 = CFSTR(" AND old_calendar_id = 0");
  CFStringAppend(Mutable, v14);
  CFStringAppend(Mutable, CFSTR(" AND sequence_number > (select latest_consumed_sequence_number FROM ClientCursor WHERE client_identifier = ?)"));
  CFStringAppend(Mutable, CFSTR(" AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)"));
  CFStringAppend(Mutable, CFSTR(" AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = ? AND client_identifier = ?)"));
  if ((a1[90]._os_unfair_lock_opaque & 0x80000000) == 0)
    CFStringAppend(Mutable, CFSTR(" AND sequence_number <= ?"));
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __CalDatabaseCopyCalendarItemChangesInStore_block_invoke;
  v18[3] = &__block_descriptor_60_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  v19 = a2;
  v18[4] = a3;
  v18[5] = CStringPtr;
  v18[6] = a1;
  v15 = (void *)MEMORY[0x1A85B52F0](v18);
  CFRelease(v11);
  v16 = _CalDatabaseCopyCalendarItemChangesInternal((uint64_t)a1, a2, Mutable, v15, a5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v10);
  os_unfair_lock_unlock(v10);

  return v16;
}

CFMutableDictionaryRef CalDatabaseCopyEventMovesInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  CFMutableDictionaryRef v3;

  v3 = 0;
  CalDatabaseCopyCalendarItemChangesInStore(a1, 2, a2, 1, &v3);
  return v3;
}

CFMutableDictionaryRef CalDatabaseCopyEventMovesInCalendar(os_unfair_lock_s *a1, uint64_t a2)
{
  CFMutableDictionaryRef v3;

  v3 = 0;
  CalDatabaseCopyCalendarItemChangesInCalendar(a1, 2, a2, 1, &v3);
  return v3;
}

uint64_t CalDatabaseCopyEventChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return CalDatabaseCopyCalendarItemChangesInCalendar(a1, 2, a2, 0, a3);
}

uint64_t CalDatabaseCopyEventChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return CalDatabaseCopyCalendarItemChangesInStore(a1, 2, a2, 0, a3);
}

uint64_t CalDatabaseRemoveEventChangesInStoreToIndex(uint64_t a1, uint64_t a2, int a3)
{
  return CalDatabaseRemoveCalendarItemChangesInStoreToIndex(a1, 2, a2, a3);
}

uint64_t CalDatabaseRemoveEventChangesInCalendarToIndex(uint64_t a1, uint64_t a2, int a3)
{
  return CalDatabaseRemoveCalendarItemChangesInCalendarToIndex(a1, 2, a2, a3);
}

uint64_t CalDatabaseRemoveEventChangesInStoreWithIndices(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  return CalDatabaseRemoveCalendarItemChangesWithIndices(a1, a3);
}

uint64_t CalDatabaseRemoveEventChangesInCalendarWithIndices(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  return CalDatabaseRemoveCalendarItemChangesWithIndices(a1, a3);
}

void CalDatabaseAmendDeleteForCalendarItemWithExternalID(os_unfair_lock_s *a1, int a2, const __CFString *a3)
{
  os_unfair_lock_s *v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v11;
  uint64_t v12;
  uint64_t v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  uint64_t v16;
  sqlite3_stmt *v17;
  char *v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  const os_unfair_lock *v21;
  NSObject *v22;
  int v23;
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  if (a3)
  {
    RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
    if (CDBLockingAssertionsEnabled)
      v8 = RecordStore == 0;
    else
      v8 = 1;
    if (!v8)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
      v12 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v12)
      {
        v13 = v12;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v12)
          {
            if (*(_QWORD *)(*(_QWORD *)v12 + 104))
            {
              v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v14)
                os_unfair_lock_assert_owner(v14 + 20);
            }
          }
        }
        v15 = CPSqliteConnectionStatementForSQL();
        if (v15)
        {
          v16 = v15;
          v17 = *(sqlite3_stmt **)(v15 + 8);
          v18 = cStringFromCFString(a3);
          sqlite3_bind_text(v17, 1, v18, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
          sqlite3_bind_int(*(sqlite3_stmt **)(v16 + 8), 2, a2);
          _CalDatabasePerformStatementWithWriteLock((uint64_t)a1, v16);
          if (CDBLockingAssertionsEnabled)
          {
            if (*(_QWORD *)v16)
            {
              v19 = **(_QWORD **)v16;
              if (v19)
              {
                if (*(_QWORD *)(v19 + 104))
                {
                  v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v20)
                    os_unfair_lock_assert_owner(v20 + 20);
                }
              }
            }
          }
          CPSqliteStatementReset();
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v13)
          {
            if (*(_QWORD *)(*(_QWORD *)v13 + 104))
            {
              v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v21)
                os_unfair_lock_assert_owner(v21 + 20);
            }
          }
        }
        CPSqliteDatabaseReleaseSqliteConnection();
      }
    }
  }
  else
  {
    v22 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v23 = 136315138;
      v24 = "_CalDatabaseAmendDeleteForCalendarItemWithExternalID";
      _os_log_impl(&dword_1A5CCB000, v22, OS_LOG_TYPE_ERROR, "%s: externalID is null and it wasn't intended to be so. exiting this function now to avoid crash.", (uint8_t *)&v23, 0xCu);
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
}

BOOL _CalDatabasePrepareCalendarItemsInStoreForMigration(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t ID;
  const __CFAllocator *v7;
  CFStringRef v8;
  _BOOL8 v9;
  CFStringRef v10;
  CFStringRef v11;
  CFStringRef v12;

  ID = CPRecordGetID();
  if (!_CalDatabaseRemoveCalendarItemChangesInStoreToIndex(a1, 2, a3, 0x7FFFFFFF))
    return 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE CalendarItem SET external_tracking_status = NULL, external_id = NULL, external_mod_tag = NULL, external_rep = NULL WHERE (calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = %d));"),
         ID);
  v9 = v8 != 0;
  if (v8)
  {
    v10 = v8;
    CalPerformSQLWithConnection(a2, (uint64_t)v8);
    CFRelease(v10);
  }
  v11 = CFStringCreateWithFormat(v7, 0, CFSTR("SELECT calendaritem.rowid, calendaritem.orig_item_id, calendaritem.orig_date, calendaritem.unique_identifier from CalendarItem, Calendar, Store WHERE calendaritem.unique_identifier IS NULL and (calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = %d));"),
          ID);
  if (v11)
  {
    v12 = v11;
    EnsureAllEventsHaveUIDsWithQuery((uint64_t)a2);
    CFRelease(v12);
  }
  return v9;
}

void EnsureAllEventsHaveUIDsWithQuery(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t v3;
  uint64_t **v4;
  const __CFDictionary *Mutable;
  uint64_t v6;
  const os_unfair_lock *v7;
  _QWORD v8[2];

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)(*(_QWORD *)a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v3 = CPSqliteConnectionStatementForSQL();
  if (v3)
  {
    v4 = (uint64_t **)v3;
    Mutable = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v4)
      {
        v6 = **v4;
        if (v6)
        {
          if (*(_QWORD *)(v6 + 104))
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CFDictionaryGetCount(Mutable) >= 1)
    {
      v8[0] = Mutable;
      v8[1] = a1;
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)ApplyUIDUpdate, v8);
    }
    CFRelease(Mutable);
  }
}

uint64_t _CalMoveCalendarItemsFromCalendarWithUIDToCalendarWithUID(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const void *v5;

  if ((_DWORD)a2 == (_DWORD)a3)
    return 0;
  result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE CalendarItem SET calendar_id = %d WHERE calendar_id = %d;"),
                      a3,
                      a2);
  if (result)
  {
    v5 = (const void *)result;
    CalPerformSQLWithConnection(a1, result);
    CFRelease(v5);
    return 1;
  }
  return result;
}

uint64_t CalDatabaseCreateEventsSearchStatement(uint64_t *a1, void *a2, char a3)
{
  uint64_t RecordStore;
  BOOL v7;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v10;
  const os_unfair_lock *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  const __CFString *SearchTerm;
  CFIndex Length;
  CFIndex v17;
  char *v18;
  void *v19;
  id v20;
  void *v21;
  CFStringRef v22;
  CFStringRef v23;
  const os_unfair_lock *v24;
  uint64_t v25;

  os_unfair_lock_lock((os_unfair_lock_t)(a1[5] + 80));
  RecordStore = _CalDatabaseGetRecordStore(a1[5]);
  if (CDBLockingAssertionsEnabled)
    v7 = RecordStore == 0;
  else
    v7 = 1;
  if (!v7)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_16;
  v10 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  if (CPSqliteDatabaseRegisterMatchesSearchStringFunction()
    || (a3 & 1) == 0
    && sqlite3_create_function(*(sqlite3 **)(*(_QWORD *)(v10 + 8) + 8), "ORGANIZER_MATCHES", 1, 1, a1, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))OrganizerMatcherCallback, 0, 0)|| sqlite3_create_function(*(sqlite3 **)(*(_QWORD *)(v10 + 8) + 8), "LOCATION_MATCHES", 1, 1, a1, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))LocationMatcherCallback, 0, 0))
  {
LABEL_16:
    v12 = (os_unfair_lock_s *)(a1[5] + 80);
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner((const os_unfair_lock *)(a1[5] + 80));
    os_unfair_lock_unlock(v12);
    return 0;
  }
  else
  {
    SearchTerm = (const __CFString *)CalFilterGetSearchTerm(a2);
    Length = CFStringGetLength(SearchTerm);
    v17 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v18 = (char *)malloc_type_malloc(v17, 0x561B1E7EuLL);
    CFStringGetCString(SearchTerm, v18, v17, 0x8000100u);
    v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("SELECT ROWID FROM CalendarItem WHERE "));
    v20 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
    v21 = v20;
    if ((a3 & 1) == 0)
      objc_msgSend(v20, "appendString:", CFSTR("STRING_MATCHES(?, IFNULL(summary, '') || ' ' || IFNULL(description,'')) OR ORGANIZER_MATCHES(organizer_id) OR "));
    objc_msgSend(v21, "appendString:", CFSTR("LOCATION_MATCHES(location_id)"));
    v22 = _CalEventCopyClauseForFilter(a2, a1[5]);
    if (v22)
    {
      v23 = v22;
      objc_msgSend(v19, "appendFormat:", CFSTR("%@ AND (%@);"), v22, v21);
      CFRelease(v23);
    }
    else
    {
      objc_msgSend(v19, "appendFormat:", CFSTR("%@;"), v21);
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v10 + 104))
      {
        v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24)
          os_unfair_lock_assert_owner(v24 + 20);
      }
    }
    v25 = CPSqliteDatabaseStatementForReading();
    v13 = v25;
    if (v25)
      sqlite3_bind_text(*(sqlite3_stmt **)(v25 + 8), 1, v18, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    else
      free(v18);

  }
  return v13;
}

void OrganizerMatcherCallback(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  CFSetRef *v5;
  int v6;
  _BOOL4 v7;

  v5 = (CFSetRef *)sqlite3_user_data(a1);
  v6 = sqlite3_value_int(*a3);
  v7 = CFSetGetValueIfPresent(v5[1], (const void *)v6, 0) != 0;
  sqlite3_result_int(a1, v7);
}

void LocationMatcherCallback(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  CFSetRef *v5;
  int v6;
  _BOOL4 v7;

  v5 = (CFSetRef *)sqlite3_user_data(a1);
  v6 = sqlite3_value_int(*a3);
  v7 = CFSetGetValueIfPresent(v5[2], (const void *)v6, 0) != 0;
  sqlite3_result_int(a1, v7);
}

CFStringRef _CalEventCopyClauseForFilter(void *a1, uint64_t a2)
{
  CFStringRef result;
  CFStringRef v5;
  CFStringRef v6;

  result = (CFStringRef)_CalFilterCopyCalendarIDClauseForQuery(a1, (uint64_t)CFSTR("calendar_id"));
  if (!result)
  {
    if ((CalFilterIncludeDisableStores(a1) & 1) != 0)
    {
      return 0;
    }
    else
    {
      result = _CalDatabaseCopyDisabledStoresClause(a2);
      if (result)
      {
        v5 = result;
        v6 = CFStringCreateWithFormat(0, 0, CFSTR("calendar_id IN (SELECT ROWID From Calendar WHERE store_id NOT IN %@)"), result);
        CFRelease(v5);
        return v6;
      }
    }
  }
  return result;
}

void CalDatabaseCopyEventIdsForSearch(sqlite3_stmt **a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  BOOL v8;

  v4 = 99;
  while (1)
  {
    v5 = sqlite3_step(a1[1]);
    if (v5 != 100)
      break;
    v6 = sqlite3_column_int(a1[1], 0);
    if (v4 == 99 && CFArrayGetCount(*(CFArrayRef *)a2))
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)a2);
    CFArrayAppendValue(*(CFMutableArrayRef *)a2, (const void *)v6);
    v8 = v4-- != 0;
    if (**(_BYTE **)(a2 + 32) || !v8)
    {
      if (!**(_BYTE **)(a2 + 32))
        return;
      goto LABEL_15;
    }
  }
  if ((v5 - 102) > 0xFFFFFFFD || (sqlite3_errmsg(*((sqlite3 **)*a1 + 1)), CFLog(), **(_BYTE **)(a2 + 32)))
LABEL_15:
    **(_BYTE **)(a2 + 24) = 0;
}

void CalDatabaseDeleteEventsSearchStatement(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  os_unfair_lock_s *v5;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        v3 = **a1;
        if (v3)
        {
          if (*(_QWORD *)(v3 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  v5 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 40) + 80);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5);
  os_unfair_lock_unlock(v5);
}

CFMutableArrayRef CalDatabaseCopyEventIDsOfEventsMatching(os_unfair_lock_s *a1, uint64_t a2, const __CFString *a3, const __CFString *a4, const __CFString *a5, const __CFString *a6)
{
  os_unfair_lock_s *v11;
  uint64_t RecordStore;
  BOOL v13;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v16;
  const os_unfair_lock *v17;
  CFMutableArrayRef v18;
  __CFString *Mutable;
  __CFString *v20;
  const __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  const os_unfair_lock *v24;
  uint64_t v25;
  uint64_t **v26;
  sqlite3_stmt *v27;
  char *v28;
  sqlite3_stmt *v29;
  char *v30;
  sqlite3_stmt *v31;
  char *v32;
  sqlite3_stmt *v33;
  char *v34;
  uint64_t v35;
  const os_unfair_lock *v36;
  uint64_t v37;
  const os_unfair_lock *v38;
  NSObject *v39;
  uint8_t v41[8];
  CFMutableArrayRef v42;

  v11 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v13 = RecordStore == 0;
  else
    v13 = 1;
  if (!v13)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    v16 = Database;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
    if (CPSqliteDatabaseRegisterMatchesSearchStringFunction())
    {
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner(v11);
      os_unfair_lock_unlock(v11);
      return 0;
    }
    Mutable = CFStringCreateMutable(0, 0);
    v20 = Mutable;
    if (a4)
      v21 = CFSTR("SELECT CalendarItem.ROWID FROM CalendarItem, Location WHERE entity_type = 2 AND Location.ROWID = CalendarItem.location_id");
    else
      v21 = CFSTR("SELECT CalendarItem.ROWID FROM CalendarItem WHERE entity_type = 2");
    CFStringAppend(Mutable, v21);
    v22 = CFStringCreateMutable(0, 0);
    v23 = v22;
    if (a3)
    {
      CFStringAppend(v22, CFSTR(" AND "));
      CFStringAppend(v23, CFSTR("STRING_MATCHES(?, IFNULL(summary, ''))"));
    }
    if (a4)
    {
      CFStringAppend(v23, CFSTR(" AND "));
      CFStringAppend(v23, CFSTR("STRING_MATCHES(?, IFNULL(location.title, ''))"));
    }
    if (a6)
    {
      CFStringAppend(v23, CFSTR(" AND "));
      CFStringAppend(v23, CFSTR("(organizer_id == 0 AND STRING_MATCHES(?, IFNULL(summary, '')))"));
    }
    if (a5)
    {
      CFStringAppend(v23, CFSTR(" AND "));
      CFStringAppend(v23, CFSTR("STRING_MATCHES(?, IFNULL(description, ''))"));
    }
    CFStringAppend(v20, v23);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v16 + 104))
      {
        v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24)
          os_unfair_lock_assert_owner(v24 + 20);
      }
    }
    v25 = CPSqliteDatabaseStatementForReading();
    if (v25)
    {
      v26 = (uint64_t **)v25;
      if (a3)
      {
        v27 = *(sqlite3_stmt **)(v25 + 8);
        v28 = cStringFromCFString(a3);
        LODWORD(a3) = 1;
        sqlite3_bind_text(v27, 1, v28, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      }
      if (a4)
      {
        v29 = (sqlite3_stmt *)v26[1];
        LODWORD(a3) = (_DWORD)a3 + 1;
        v30 = cStringFromCFString(a4);
        sqlite3_bind_text(v29, (int)a3, v30, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      }
      if (a6)
      {
        v31 = (sqlite3_stmt *)v26[1];
        LODWORD(a3) = (_DWORD)a3 + 1;
        v32 = cStringFromCFString(a6);
        sqlite3_bind_text(v31, (int)a3, v32, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      }
      if (a5)
      {
        v33 = (sqlite3_stmt *)v26[1];
        v34 = cStringFromCFString(a5);
        sqlite3_bind_text(v33, (_DWORD)a3 + 1, v34, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      }
      v18 = CFArrayCreateMutable(0, 0, 0);
      v42 = v18;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v26)
        {
          v35 = **v26;
          if (v35)
          {
            if (*(_QWORD *)(v35 + 104))
            {
              v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v36)
                os_unfair_lock_assert_owner(v36 + 20);
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v26)
        {
          v37 = **v26;
          if (v37)
          {
            if (*(_QWORD *)(v37 + 104))
            {
              v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v38)
                os_unfair_lock_assert_owner(v38 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    else
    {
      v39 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v41 = 0;
        _os_log_impl(&dword_1A5CCB000, v39, OS_LOG_TYPE_ERROR, "Unable to create statement in CalDatabaseCopyEventIDsOfEventsMatching", v41, 2u);
      }
      v18 = 0;
    }
    CFRelease(v20);
    CFRelease(v23);
  }
  else
  {
    v18 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v11);
  os_unfair_lock_unlock(v11);
  return v18;
}

char *cStringFromCFString(const __CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  char *v4;

  Length = CFStringGetLength(a1);
  v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v4 = (char *)malloc_type_malloc(v3, 0xA4F3C707uLL);
  CFStringGetCString(a1, v4, v3, 0x8000100u);
  return v4;
}

uint64_t _EventIDGatherer(uint64_t a1, CFMutableArrayRef *a2)
{
  int v3;

  v3 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFArrayAppendValue(*a2, (const void *)v3);
  return 0;
}

os_unfair_lock_s *CalEventCopyNextRecurrenceInSetForEvent(uint64_t a1, int a2)
{
  os_unfair_lock_s *ValueAtIndex;
  void *v5;
  const char *v6;
  double StartDate;
  __CFString *SelectPrefix;
  __CFString *v9;
  uint64_t RecordStore;
  uint64_t v11;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v14;
  uint64_t v15;
  uint64_t v16;
  const os_unfair_lock *v17;
  const __CFArray *v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  NSObject *v21;
  uint8_t buf[4];
  __CFString *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  ValueAtIndex = (os_unfair_lock_s *)CalCopyDatabaseForEntity(a1);
  if (ValueAtIndex)
  {
    v5 = objc_retainAutorelease((id)CalEventCopyRecurrenceSet(a1));
    v6 = (const char *)objc_msgSend(v5, "UTF8String");
    StartDate = CalEventGetStartDate(a1);
    SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
    if (SelectPrefix)
    {
      v9 = SelectPrefix;
      CFStringAppendFormat(SelectPrefix, 0, CFSTR(" WHERE recurrence_set = ? AND start_date > ?"));
      if (a2)
        CFStringAppendFormat(v9, 0, CFSTR(" AND external_id IS NOT NULL AND external_id != \"\""));
      CFStringAppendFormat(v9, 0, CFSTR(" ORDER BY start_date LIMIT 1"));
      os_unfair_lock_lock(ValueAtIndex + 20);
      RecordStore = _CalDatabaseGetRecordStore((uint64_t)ValueAtIndex);
      v11 = RecordStore;
      if (CDBLockingAssertionsEnabled)
      {
        if (RecordStore)
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
      Database = CPRecordStoreGetDatabase();
      if (CDBLockingAssertionsEnabled)
      {
        if (Database)
        {
          if (*(_QWORD *)(Database + 104))
          {
            v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14)
              os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
      v15 = CPSqliteDatabaseStatementForReading();
      v16 = v15;
      if (v15)
      {
        sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, v6, -1, 0);
        sqlite3_bind_double(*(sqlite3_stmt **)(v16 + 8), 2, StartDate);
        if (CDBLockingAssertionsEnabled)
        {
          if (v11)
          {
            v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17)
              os_unfair_lock_assert_owner(v17 + 20);
          }
        }
        v18 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v16)
          {
            v19 = **(_QWORD **)v16;
            if (v19)
            {
              if (*(_QWORD *)(v19 + 104))
              {
                v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v20)
                  os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
      }
      else
      {
        v21 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v24 = v9;
        }
        v18 = 0;
      }
      CPSqliteStatementReset();
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner(ValueAtIndex + 20);
      os_unfair_lock_unlock(ValueAtIndex + 20);
      CFRelease(v9);
      CFRelease(ValueAtIndex);
      if (v18)
      {
        if (CFArrayGetCount(v18) < 1)
        {
          ValueAtIndex = 0;
        }
        else
        {
          ValueAtIndex = (os_unfair_lock_s *)CFArrayGetValueAtIndex(v18, 0);
          CFRetain(ValueAtIndex);
        }
        CFRelease(v18);
      }
      else
      {
        ValueAtIndex = 0;
      }
    }
    else
    {
      CFRelease(ValueAtIndex);
      ValueAtIndex = 0;
    }

  }
  return ValueAtIndex;
}

id CalEventGetStartDateOfEarliestOccurrenceEndingAfterDate(uint64_t a1, void *a2, void *a3)
{
  return CalEventGetStartDateOfEarliestOccurrenceEndingAfterDateWithExclusions(a1, a2, a3, 0, 0, 0);
}

id CalEventGetStartDateOfEarliestOccurrenceEndingAfterDateWithExclusions(uint64_t a1, void *a2, void *a3, int a4, int a5, int a6)
{
  id v11;
  id v12;
  __CFArray *v13;
  void *v14;
  id v15;
  CFMutableArrayRef v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  unsigned int DurationWhileLocked;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  CFMutableArrayRef v43;
  void *v44;
  void *v45;
  void *v46;
  char v47;
  uint64_t v49;
  void *v50;
  CFMutableArrayRef v51;
  uint64_t v52;
  __CFArray *v53;
  CDBRecurrenceGenerator *v54;
  id v55;
  void *v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[4];
  id v67;
  _BYTE v68[128];
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  if (CalCalendarItemHasRecurrenceRules(a1))
  {
    v54 = objc_alloc_init(CDBRecurrenceGenerator);
    v13 = CalCalendarItemCopyExceptionDatesAsCFDates(a1, 1);
    v57 = v11;
    v53 = v13;
    if (v13)
    {
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v13);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v56 = 0;
    }
    v52 = a1;
    v16 = CalEventCopyDetachedEvents(a1);
    v66[0] = MEMORY[0x1E0C809B0];
    v66[1] = 3221225472;
    v66[2] = __CalEventGetStartDateOfEarliestOccurrenceEndingAfterDateWithExclusions_block_invoke;
    v66[3] = &unk_1E4F8B948;
    v55 = v12;
    v17 = v12;
    v67 = v17;
    v51 = v16;
    -[__CFArray sortedArrayUsingComparator:](v16, "sortedArrayUsingComparator:", v66);
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v18 = (id)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v62, v69, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v63;
      while (2)
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v63 != v21)
            objc_enumerationMutation(v18);
          v23 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * i);
          if ((!a4
             || (CalEventIsSignificantlyDetachedOptionallyIgnoringPartStat(*(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * i), 0) & 1) == 0)&& (!a5 || CalCalendarItemGetStatus(v23) != 3)&& (!a6 || CalEventGetParticipationStatus(v23) != 2))
          {
            CalEventGetEndDateInTimeZone(v23, v17);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v24, "CalIsAfterDate:", v57))
            {
              CalEventGetStartDateInTimeZone(v23, v17);
              v25 = objc_claimAutoreleasedReturnValue();

              goto LABEL_26;
            }

          }
        }
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v62, v69, 16);
        if (v20)
          continue;
        break;
      }
    }
    v25 = 0;
LABEL_26:

    v49 = v25;
    if (objc_msgSend(v18, "count"))
    {
      v26 = (void *)objc_msgSend(v56, "mutableCopy");
      if (!v26)
      {
        objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v18, "count"));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      v26 = 0;
    }
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v27 = v18;
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
    if (v28)
    {
      v29 = v28;
      v30 = *(_QWORD *)v59;
      do
      {
        for (j = 0; j != v29; ++j)
        {
          if (*(_QWORD *)v59 != v30)
            objc_enumerationMutation(v27);
          v32 = *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * j);
          v33 = v17;
          objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", CalEventGetOriginalStartDate(v32));
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          if (CalEventIsFloating(v32) || CalEventIsAllDay(v32))
          {
            objc_msgSend(v34, "dateInTimeZone:fromTimeZone:", v33, 0, v49);
            v35 = objc_claimAutoreleasedReturnValue();

            v34 = (void *)v35;
          }

          objc_msgSend(v26, "addObject:", v34);
        }
        v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
      }
      while (v29);
    }

    DurationWhileLocked = _CalEventGetDurationWhileLocked(v52, 0);
    v37 = (void *)MEMORY[0x1E0D0C420];
    objc_msgSend(v57, "dateByAddingTimeInterval:", -(double)DurationWhileLocked);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "calendarDateWithDate:timeZone:", v38, v17);
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    v40 = (void *)MEMORY[0x1E0D0C420];
    CalEventGetStartDateInTimeZone(v52, v17);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "calendarDateWithDate:timeZone:", v41, v17);
    v42 = (void *)objc_claimAutoreleasedReturnValue();

    v43 = CalCalendarItemCopyRecurrences(v52);
    if (v26)
      v44 = v26;
    else
      v44 = v56;
    -[CDBRecurrenceGenerator nextOccurrenceDateWithCalRecurrences:exceptionDates:initialDate:afterDate:](v54, "nextOccurrenceDateWithCalRecurrences:exceptionDates:initialDate:afterDate:", v43, v44, v42, v39, v49);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = v50;
    if (v45)
    {
      if (!v50 || (v47 = objc_msgSend(v50, "CalIsBeforeDate:", v45), v46 = v50, (v47 & 1) == 0))
        v46 = v45;
    }
    v15 = v46;

    v11 = v57;
    v12 = v55;
  }
  else
  {
    CalEventGetEndDateInTimeZone(a1, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v14, "CalIsAfterDate:", v11))
    {
      CalEventGetStartDateInTimeZone(a1, v12);
      v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v15 = 0;
    }

  }
  return v15;
}

id CalEventGetEndDateInTimeZone(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", _CalEventGetEndDateWhileLocked(a1, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (CalEventIsFloating(a1) || CalEventIsAllDay(a1))
  {
    objc_msgSend(v4, "dateInTimeZone:fromTimeZone:", v3, 0);
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }

  return v4;
}

id CalEventGetStartDateInTimeZone(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", CalEventGetStartDate(a1));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (CalEventIsFloating(a1) || CalEventIsAllDay(a1))
  {
    objc_msgSend(v4, "dateInTimeZone:fromTimeZone:", v3, 0);
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }

  return v4;
}

uint64_t CalDatabaseCopyEventsWithRecurrenceSet(os_unfair_lock_s *a1, const __CFString *a2)
{
  os_unfair_lock_s *v4;
  uint64_t RecordStore;
  uint64_t v6;
  BOOL v7;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t SelectStatement;
  const void *v11;
  const os_unfair_lock *v12;
  uint64_t v13;
  uint64_t **v14;
  sqlite3_stmt *v15;
  const char *CStringFromCFString;
  const os_unfair_lock *v17;
  uint64_t v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  uint64_t v21;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v6 = RecordStore;
  if (CDBLockingAssertionsEnabled)
    v7 = RecordStore == 0;
  else
    v7 = 1;
  if (!v7)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  SelectStatement = CPRecordStoreCreateSelectStatement();
  v11 = (const void *)SelectStatement;
  if (Database && SelectStatement)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
    v13 = CPSqliteDatabaseStatementForReading();
    if (v13)
    {
      v14 = (uint64_t **)v13;
      v15 = *(sqlite3_stmt **)(v13 + 8);
      CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
      sqlite3_bind_text(v15, 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      if (CDBLockingAssertionsEnabled)
      {
        if (v6)
        {
          v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17)
            os_unfair_lock_assert_owner(v17 + 20);
        }
      }
      v18 = CPRecordStoreProcessStatement();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v14)
        {
          v19 = **v14;
          if (v19)
          {
            if (*(_QWORD *)(v19 + 104))
            {
              v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20)
                os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    else
    {
      v18 = 0;
    }
    goto LABEL_28;
  }
  v18 = 0;
  v21 = 0;
  if (SelectStatement)
  {
LABEL_28:
    CFRelease(v11);
    v21 = v18;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v21;
}

uint64_t CalDatabaseCopyOriginalVisibleEventsWithDates(os_unfair_lock_s *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_unfair_lock_s *v7;
  uint64_t RecordStore;
  uint64_t v9;
  BOOL v10;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t SelectStatement;
  const void *v14;
  const os_unfair_lock *v15;
  uint64_t v16;
  uint64_t v17;
  sqlite3_stmt *v18;
  double v19;
  sqlite3_stmt *v20;
  double v21;
  const os_unfair_lock *v22;
  uint64_t v23;
  uint64_t v24;
  const os_unfair_lock *v25;
  uint64_t v26;

  v5 = a2;
  v6 = a3;
  v7 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v9 = RecordStore;
  if (CDBLockingAssertionsEnabled)
    v10 = RecordStore == 0;
  else
    v10 = 1;
  if (!v10)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  SelectStatement = CPRecordStoreCreateSelectStatement();
  v14 = (const void *)SelectStatement;
  if (Database && SelectStatement)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
    v16 = CPSqliteDatabaseStatementForReading();
    if (v16)
    {
      v17 = v16;
      v18 = *(sqlite3_stmt **)(v16 + 8);
      objc_msgSend(v6, "timeIntervalSinceReferenceDate");
      sqlite3_bind_int64(v18, 1, (uint64_t)v19);
      v20 = *(sqlite3_stmt **)(v17 + 8);
      objc_msgSend(v5, "timeIntervalSinceReferenceDate");
      sqlite3_bind_int64(v20, 2, (uint64_t)v21);
      if (CDBLockingAssertionsEnabled)
      {
        if (v9)
        {
          v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v22)
            os_unfair_lock_assert_owner(v22 + 20);
        }
      }
      v23 = CPRecordStoreProcessStatement();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v17)
        {
          v24 = **(_QWORD **)v17;
          if (v24)
          {
            if (*(_QWORD *)(v24 + 104))
            {
              v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v25)
                os_unfair_lock_assert_owner(v25 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    else
    {
      v23 = 0;
    }
    goto LABEL_28;
  }
  v23 = 0;
  v26 = 0;
  if (SelectStatement)
  {
LABEL_28:
    CFRelease(v14);
    v26 = v23;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7);
  os_unfair_lock_unlock(v7);

  return v26;
}

double CalEventNextReminderOccurrenceDateIfEventKitIsLikelyToWantIt(uint64_t a1, double a2)
{
  os_unfair_lock_s *RecordLock;
  void *v5;
  double v6;
  double v7;
  uint64_t DatabaseForRecord;
  uint64_t v9;
  const void *v10;
  int ID;
  double EventOccurrenceDateAfterDate;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (_CalEventIsReminderIntegrationEvent(a1)
    && _CalCalendarItemHasRecurrenceRules(a1)
    && (objc_msgSend(MEMORY[0x1E0C99D68], "CalSimulatedDateForNow"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v5, "timeIntervalSinceReferenceDate"),
        v7 = v6,
        v5,
        v7 >= a2)
    && (DatabaseForRecord = CalGetDatabaseForRecord()) != 0
    && (v9 = _CalDatabaseCopyEventOccurrenceCache(DatabaseForRecord)) != 0)
  {
    v10 = (const void *)v9;
    ID = CPRecordGetID();
    EventOccurrenceDateAfterDate = _CalEventOccurrenceCacheNextEventOccurrenceDateAfterDate((uint64_t)v10, ID, a2);
    CFRelease(v10);
  }
  else
  {
    EventOccurrenceDateAfterDate = *MEMORY[0x1E0D0C490];
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return EventOccurrenceDateAfterDate;
}

void CalEventCopyRowIDsAndUniqueIdentifiersInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableArrayRef *a3, CFMutableArrayRef *a4)
{
  os_unfair_lock_s *v7;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v10;
  uint64_t v11;
  uint64_t v12;
  const os_unfair_lock *v13;
  sqlite3_int64 RowidForRecordID;
  uint64_t v15;
  const os_unfair_lock *v16;
  CFMutableArrayRef cf;
  CFMutableArrayRef Mutable;

  v7 = a1 + 20;
  cf = 0;
  Mutable = 0;
  os_unfair_lock_lock(a1 + 20);
  if (_CalDatabaseGetRecordStore((uint64_t)a1))
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
      v11 = CPSqliteDatabaseStatementForReading();
      if (v11)
      {
        v12 = v11;
        cf = CFArrayCreateMutable(0, 0, 0);
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        CPRecordGetID();
        if (CDBLockingAssertionsEnabled)
        {
          v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13)
            os_unfair_lock_assert_owner(v13 + 20);
        }
        RowidForRecordID = CPRecordStoreGetRowidForRecordID();
        sqlite3_bind_int64(*(sqlite3_stmt **)(v12 + 8), 1, RowidForRecordID);
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v12)
          {
            v15 = **(_QWORD **)v12;
            if (v15)
            {
              if (*(_QWORD *)(v15 + 104))
              {
                v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v16)
                  os_unfair_lock_assert_owner(v16 + 20);
              }
            }
          }
        }
        CPSqliteStatementSendResults();
      }
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7);
  os_unfair_lock_unlock(v7);
  if (a3)
  {
    *a3 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  if (a4)
  {
    *a4 = Mutable;
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t handleRowAndUniqueIdentifier(uint64_t a1, CFMutableArrayRef *a2)
{
  int v4;
  void *v5;

  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  CFArrayAppendValue(*a2, (const void *)v4);
  CFArrayAppendValue(a2[1], v5);

  return 0;
}

uint64_t _CalCalendarItemLoadStoreId(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;
  const os_unfair_lock *v4;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if ((result & 0x80000000) == 0)
  {
    result = CPRecordGetStore();
    if (result)
    {
      result = _CalGetCalendarWithUID(result);
      if (result)
      {
        result = _CalCalendarGetStoreId(result);
        if ((_DWORD)result != -1)
        {
          if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
          {
            v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v4)
              os_unfair_lock_assert_owner(v4 + 20);
          }
          return CPRecordInitializeProperty();
        }
      }
    }
  }
  return result;
}

void _CalEventLoadCreatedByIdentityProperties(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Store;
  uint64_t IdentityWithRowID;
  uint64_t v5;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  const void *v9;
  const os_unfair_lock *v10;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    Store = CPRecordGetStore();
    IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      v9 = (const void *)_CalIdentityCopyAddress(v5);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10)
              os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
      CPRecordInitializeProperty();
      if (v9)
        CFRelease(v9);
    }
  }
}

void _CalEventLoadModifiedByIdentityProperties(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Store;
  uint64_t IdentityWithRowID;
  uint64_t v5;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  const void *v9;
  const os_unfair_lock *v10;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    Store = CPRecordGetStore();
    IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      v9 = (const void *)_CalIdentityCopyAddress(v5);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10)
              os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
      CPRecordInitializeProperty();
      if (v9)
        CFRelease(v9);
    }
  }
}

uint64_t _CalEventInsertOrganizerRow(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  int v6;
  const unsigned __int8 *v7;
  const char *v8;
  size_t v9;
  char *v10;
  const __CFString *v11;
  const char *CStringFromCFString;
  void (__cdecl *v13)(void *);
  uint64_t **v14;
  uint64_t v15;
  const os_unfair_lock *Context;
  uint64_t **v17;
  uint64_t v18;
  const os_unfair_lock *v19;
  uint64_t v20;
  const os_unfair_lock *v21;
  int Insert;
  uint64_t **v23;
  uint64_t v24;
  const os_unfair_lock *v25;
  uint64_t **v26;
  uint64_t v27;
  const os_unfair_lock *v28;

  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  v6 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 2);
  if (sqlite3_column_count(*(sqlite3_stmt **)(a1 + 8)) >= 4
    && (v7 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 3)) != 0)
  {
    v8 = (const char *)v7;
    v9 = strlen((const char *)v7) + 1;
    v10 = (char *)malloc_type_malloc(v9, 0xCBA69FD4uLL);
    strncpy(v10, v8, v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = _CalDBCreateUUIDString();
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(v11);
  CFRelease(v11);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[1] + 8), 1, 8);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[1] + 8), 2, v5);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[1] + 8), 3, v4);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[1] + 8), 4, v6);
  v13 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
  sqlite3_bind_text(*(sqlite3_stmt **)(a2[1] + 8), 5, v10, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2[1] + 8), 6, CStringFromCFString, -1, v13);
  v14 = (uint64_t **)a2[1];
  if (CDBLockingAssertionsEnabled)
  {
    if (v14)
    {
      if (*v14)
      {
        v15 = **v14;
        if (v15)
        {
          if (*(_QWORD *)(v15 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  v17 = (uint64_t **)a2[1];
  if (CDBLockingAssertionsEnabled)
  {
    if (v17)
    {
      if (*v17)
      {
        v18 = **v17;
        if (v18)
        {
          if (*(_QWORD *)(v18 + 104))
          {
            v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v19)
              os_unfair_lock_assert_owner(v19 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  v20 = *a2;
  if (CDBLockingAssertionsEnabled)
  {
    if (v20)
    {
      if (*(_QWORD *)v20)
      {
        if (*(_QWORD *)(*(_QWORD *)v20 + 104))
        {
          v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v21)
            os_unfair_lock_assert_owner(v21 + 20);
        }
      }
    }
  }
  Insert = CPSqliteConnectionRowidOfLastInsert();
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[2] + 8), 1, Insert);
  sqlite3_bind_int(*(sqlite3_stmt **)(a2[2] + 8), 2, v4);
  v23 = (uint64_t **)a2[2];
  if (CDBLockingAssertionsEnabled)
  {
    if (v23)
    {
      if (*v23)
      {
        v24 = **v23;
        if (v24)
        {
          if (*(_QWORD *)(v24 + 104))
          {
            v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v25)
              os_unfair_lock_assert_owner(v25 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  v26 = (uint64_t **)a2[2];
  if (CDBLockingAssertionsEnabled)
  {
    if (v26)
    {
      if (*v26)
      {
        v27 = **v26;
        if (v27)
        {
          if (*(_QWORD *)(v27 + 104))
          {
            v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v28)
              os_unfair_lock_assert_owner(v28 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  return 0;
}

uint64_t _CalEventInsertLocationRow(uint64_t a1, uint64_t a2)
{
  int v4;
  const unsigned __int8 *v5;
  uint64_t **v6;
  BOOL v7;
  uint64_t v8;
  const os_unfair_lock *Context;
  uint64_t **v10;
  BOOL v11;
  uint64_t v12;
  const os_unfair_lock *v13;

  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
  sqlite3_bind_text(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 8) + 8), 1, (const char *)v5, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 8) + 8), 2, v4);
  v6 = *(uint64_t ***)(a2 + 8);
  if (CDBLockingAssertionsEnabled)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*v6)
    {
      v8 = **v6;
      if (v8)
      {
        if (*(_QWORD *)(v8 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  CPSqliteStatementPerform();
  v10 = *(uint64_t ***)(a2 + 8);
  if (CDBLockingAssertionsEnabled)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (*v10)
    {
      v12 = **v10;
      if (v12)
      {
        if (*(_QWORD *)(v12 + 104))
        {
          v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13)
            os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  CPSqliteStatementReset();
  return 0;
}

uint64_t _CalEventUpdateLocationIDForRow(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  const os_unfair_lock *Context;
  uint64_t v7;
  const os_unfair_lock *v8;

  v3 = a1;
  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  LODWORD(v3) = sqlite3_column_int(*(sqlite3_stmt **)(v3 + 8), 1);
  sqlite3_bind_int((sqlite3_stmt *)a2[1], 1, v4);
  sqlite3_bind_int((sqlite3_stmt *)a2[1], 2, v3);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        v5 = **a2;
        if (v5)
        {
          if (*(_QWORD *)(v5 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        v7 = **a2;
        if (v7)
        {
          if (*(_QWORD *)(v7 + 104))
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  return 0;
}

uint64_t _CalEventUpdateStatusAndHasRecurrences(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t **v6;
  BOOL v7;
  uint64_t v8;
  const os_unfair_lock *Context;
  int v10;
  uint64_t **v11;
  BOOL v12;
  uint64_t v13;
  const os_unfair_lock *v14;
  uint64_t **v15;
  uint64_t v16;
  const os_unfair_lock *v17;
  uint64_t **v18;
  uint64_t v19;
  const os_unfair_lock *v20;

  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  sqlite3_bind_int(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 16) + 8), 1, v4);
  v6 = *(uint64_t ***)(a2 + 16);
  if (CDBLockingAssertionsEnabled)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*v6)
    {
      v8 = **v6;
      if (v8)
      {
        if (*(_QWORD *)(v8 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v10 = CPSqliteStatementIntegerResult();
  v11 = *(uint64_t ***)(a2 + 16);
  if (CDBLockingAssertionsEnabled)
    v12 = v11 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    if (*v11)
    {
      v13 = **v11;
      if (v13)
      {
        if (*(_QWORD *)(v13 + 104))
        {
          v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14)
            os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (v5 || v10 >= 1)
  {
    sqlite3_bind_int(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 8) + 8), 1, (unsigned __int16)v5);
    sqlite3_bind_int(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 8) + 8), 2, HIWORD(v5));
    sqlite3_bind_int(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 8) + 8), 3, v10 > 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(*(_QWORD *)(a2 + 8) + 8), 4, v4);
    v15 = *(uint64_t ***)(a2 + 8);
    if (CDBLockingAssertionsEnabled)
    {
      if (v15)
      {
        if (*v15)
        {
          v16 = **v15;
          if (v16)
          {
            if (*(_QWORD *)(v16 + 104))
            {
              v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v17)
                os_unfair_lock_assert_owner(v17 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementPerform();
    v18 = *(uint64_t ***)(a2 + 8);
    if (CDBLockingAssertionsEnabled)
    {
      if (v18)
      {
        if (*v18)
        {
          v19 = **v18;
          if (v19)
          {
            if (*(_QWORD *)(v19 + 104))
            {
              v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20)
                os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  return 0;
}

void _CalEventRedetectConferenceURLHandler(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  const unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  void *v9;
  id v10;
  char *v11;
  id v12;

  v5 = sqlite3_value_text(*a3);
  v6 = (unsigned __int8 *)sqlite3_value_text(a3[1]);
  v7 = (unsigned __int8 *)sqlite3_value_text(a3[2]);
  v8 = (unsigned __int8 *)sqlite3_value_text(a3[3]);
  if (v5)
  {
    v12 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v5, strlen((const char *)v5), 4, 0);
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = 0;
  if (v6)
LABEL_3:
    v6 = (unsigned __int8 *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v6, strlen((const char *)v6), 4, 0);
LABEL_4:
  if (v7)
    v7 = (unsigned __int8 *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v7, strlen((const char *)v7), 4, 0);
  if (v8)
    v8 = (unsigned __int8 *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytesNoCopy:length:encoding:freeWhenDone:", v8, strlen((const char *)v8), 4, 0);
  v9 = (void *)_CalEventDetectAndCopyConferenceURLFromSources(v12, (uint64_t)v6, (uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    v10 = objc_retainAutorelease(v9);
    v11 = strdup((const char *)objc_msgSend(v10, "UTF8String"));
    sqlite3_result_text(a1, v11, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    CFRelease(v10);
  }
  else
  {
    sqlite3_result_null(a1);
  }

}

uint64_t _CalEventDetectAndCopyConferenceURLFromSources(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v8 = (void *)objc_opt_new();
  if (a3 | a4)
  {
    objc_msgSend(MEMORY[0x1E0D0C328], "fullDisplayStringWithTitle:address:", a3, a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addObject:", v9);

  }
  v10 = a1;
  objc_msgSend(MEMORY[0x1E0D0C280], "deserializeConference:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    v13 = objc_msgSend(v11, "range");
    objc_msgSend(v10, "stringByReplacingCharactersInRange:withString:", v13, v14, &stru_1E4F941C0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v15, "hasSuffix:", CFSTR("\n\n")))
    {
      objc_msgSend(v15, "substringToIndex:", objc_msgSend(v15, "length") - 2);
      v10 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v10 = v15;
    }
  }
  objc_msgSend(v10, "CDVStringByXMLUnquoting");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
    objc_msgSend(v8, "addObject:", v16);
  if (a2)
    objc_msgSend(v8, "addObject:", a2);
  objc_msgSend(MEMORY[0x1E0D0C288], "conferenceURLFromSources:", v8);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "absoluteString");
  v18 = objc_claimAutoreleasedReturnValue();

  return v18;
}

uint64_t _CalEventRemoveOriginalEventId(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v5;
  const os_unfair_lock *v6;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetProperty() == a2)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5)
            os_unfair_lock_assert_owner(v5 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6)
            os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
  }
  return 0;
}

uint64_t _CalEventValidateIdentityForProperties(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  uint64_t result;
  const os_unfair_lock *v6;
  const __CFString *Property;
  const os_unfair_lock *v8;
  const __CFString *v9;
  const os_unfair_lock *v10;
  const __CFString *v11;
  const os_unfair_lock *v12;
  const __CFString *v13;
  const os_unfair_lock *v14;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if ((_DWORD)result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6)
            os_unfair_lock_assert_owner(v6 + 20);
        }
      }
    }
    Property = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8)
            os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
    v9 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    v11 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    result = CPRecordGetProperty();
    v13 = (const __CFString *)result;
    if (Property && (result = CFStringGetLength(Property)) != 0
      || v9 && (result = CFStringGetLength(v9)) != 0
      || v11 && (result = CFStringGetLength(v11)) != 0)
    {
      if (!a2)
        return result;
    }
    else
    {
      if (!v13)
        return result;
      result = CFStringGetLength(v13);
      if (!a2 || !result)
        return result;
    }
    result = _CalIdentityGetID(Property, v9, v11, v13, a2);
    if ((_DWORD)result != -1)
    {
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t BuildEventUIArray(uint64_t a1, __CFDictionary *a2)
{
  __CFDictionary *Mutable;
  int v5;
  int v6;
  CFNumberRef v7;
  const unsigned __int8 *v8;
  CFStringRef v9;
  int v10;
  double valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  AddIntToDictionary(v5, Mutable, CFSTR("rowid"));
  v6 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  AddIntToDictionary(v6, Mutable, CFSTR("origEventId"));
  valuePtr = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 2);
  v7 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("origStartDate"), v7);
  CFRelease(v7);
  v8 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 3);
  if (v8)
  {
    v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v8, 0x8000100u);
    CFDictionaryAddValue(Mutable, CFSTR("uniqueId"), v9);
    CFRelease(v9);
  }
  v10 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  CFDictionaryAddValue(a2, (const void *)v10, Mutable);
  CFRelease(Mutable);
  return 0;
}

uint64_t ApplyUIDUpdate(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  return UpdateUIDForRecord(*(_QWORD **)(a3 + 8), a2, *(const __CFDictionary **)a3);
}

void AddIntToDictionary(int a1, __CFDictionary *a2, const void *a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a1;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(a2, a3, v5);
  CFRelease(v5);
}

uint64_t UpdateUIDForRecord(_QWORD *a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  const __CFNumber *Value;
  const void *v7;
  const __CFNumber *v8;
  uint64_t v9;
  uint64_t result;
  const __CFDictionary *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  CFStringRef v14;
  const void *v15;
  const __CFNumber *v16;
  CFStringRef v17;
  const __CFUUID *v18;
  CFStringRef v19;
  uint64_t valuePtr;

  if (CFDictionaryGetValue(a2, CFSTR("uniqueId")))
    return 1;
  LODWORD(valuePtr) = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("origEventId"));
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  v7 = (const void *)(int)valuePtr;
  LODWORD(valuePtr) = 0;
  v8 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("rowid"));
  CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
  v9 = valuePtr;
  if (!(_DWORD)v7)
    goto LABEL_8;
  result = (uint64_t)CFDictionaryGetValue(a3, v7);
  if (!result)
    return result;
  v11 = (const __CFDictionary *)result;
  if ((const __CFDictionary *)result == a2
    || (LODWORD(valuePtr) = 0,
        v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)result, CFSTR("origEventId")),
        CFNumberGetValue(v12, kCFNumberIntType, &valuePtr),
        (_DWORD)valuePtr == (_DWORD)v9)
    && (LODWORD(valuePtr) = 0,
        v13 = (const __CFNumber *)CFDictionaryGetValue(v11, CFSTR("rowid")),
        CFNumberGetValue(v13, kCFNumberIntType, &valuePtr),
        (int)valuePtr > (int)v9))
  {
    v14 = CFStringCreateWithFormat(0, 0, CFSTR("UPDATE CalendarItem SET orig_event_id = 0, orig_start_date = 0 WHERE rowid = %d;"),
            v9);
    CalPerformSQLWithConnection(a1, (uint64_t)v14);
    CFRelease(v14);
LABEL_8:
    v15 = 0;
LABEL_9:
    valuePtr = 0;
    v16 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("origStartDate"));
    CFNumberGetValue(v16, kCFNumberDoubleType, &valuePtr);
    if (v15)
    {
      v17 = CFStringCreateWithFormat(0, 0, CFSTR("%@/RID=%.f"), v15, valuePtr);
    }
    else
    {
      v18 = CFUUIDCreate(0);
      v17 = CFUUIDCreateString(0, v18);
      CFRelease(v18);
    }
    v19 = CFStringCreateWithFormat(0, 0, CFSTR("UPDATE CalendarItem SET unique_identifier=\"%@\" WHERE rowid = %d;"),
            v17,
            v9);
    CalPerformSQLWithConnection(a1, (uint64_t)v19);
    CFRelease(v19);
    CFDictionarySetValue(a2, CFSTR("uniqueId"), v17);
    CFRelease(v17);
    return 1;
  }
  v15 = CFDictionaryGetValue(v11, CFSTR("uniqueId"));
  if (v15)
    goto LABEL_9;
  result = UpdateUIDForRecord(a1, v11, a3);
  if ((_DWORD)result)
  {
    v15 = CFDictionaryGetValue(v11, CFSTR("uniqueId"));
    goto LABEL_9;
  }
  return result;
}

uint64_t CalAttachmentUpdateFromICSAttachment(void *a1, void *a2)
{
  id v3;
  CFTypeRef v4;
  const void *v5;
  id v6;
  const __CFURL *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  char v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  void *v36;
  void *v37;
  NSObject *v38;
  uint64_t v40;
  void *v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  id v47;
  uint8_t v48[128];
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  id v52;
  uint8_t v53[4];
  void *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "filename");
  CalAttachmentSetFilename((uint64_t)a1);
  objc_msgSend(v3, "fmtype");
  CalAttachmentSetFormat((uint64_t)a1);
  objc_msgSend(v3, "x_apple_autoarchived");
  CalAttachmentSetAutoArchived((uint64_t)a1);
  if (objc_msgSend(v3, "hasSize"))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v3, "size"));
    CalAttachmentSetFileSize((uint64_t)a1);
  }
  if (!objc_msgSend(v3, "isBinary"))
  {
    CalAttachmentSetIsBinary((uint64_t)a1);
    objc_msgSend(v3, "value", a1);
    v7 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      CalAttachmentSetURL((uint64_t)a1, v7);
      objc_msgSend(v3, "managed_id");
      CalAttachmentSetExternalID((uint64_t)a1);
    }

    goto LABEL_31;
  }
  CalAttachmentSetIsBinary((uint64_t)a1);
  bzero(v53, 0x401uLL);
  v4 = CalAttachmentCopyAttachmentFile((uint64_t)a1);
  if (v4)
  {
    v5 = v4;
    v6 = CalAttachmentFileCopyURLAppropriateForFile((uint64_t)v4);
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager", a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "CalTemporaryDirectoryAppropriateForURL:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "path");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringByAppendingPathComponent:", CFSTR("CalAttachmentXXXXXX"));
  v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  objc_msgSend(v11, "UTF8String");
  objc_msgSend(v11, "length");
  __strncpy_chk();
  if (mkstemp((char *)v53) != -1)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v53);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
    {
      v25 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A5CCB000, v25, OS_LOG_TYPE_DEBUG, "Couldn't create a path to write the inline attachment into", buf, 2u);
      }
      v24 = 1;
      goto LABEL_28;
    }
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = v3;
    objc_msgSend(v3, "value");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = 0;
    objc_msgSend(v14, "writeToURL:options:error:", v13, 1, &v47);
    v15 = v47;

    objc_msgSend(v13, "path");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    CalAttachmentFileSetDataProtection(v16);

    if (v15)
    {
      v17 = (void *)CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        v18 = v17;
        objc_msgSend(v41, "filename");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v50 = v19;
        v51 = 2112;
        v52 = v15;
        v20 = "Error writing inline attachment (%@) to disk: %@";
        v21 = v18;
        v22 = 22;
LABEL_25:
        _os_log_impl(&dword_1A5CCB000, v21, OS_LOG_TYPE_DEBUG, v20, buf, v22);

      }
    }
    else
    {
      v26 = CalAttachmentSetFileDataAndQuarantine(a1, (uint64_t)v12);
      unlink((const char *)v53);
      if ((v26 & 1) != 0)
      {
        v24 = 0;
LABEL_27:

        v3 = v41;
LABEL_28:

        goto LABEL_29;
      }
      v27 = (void *)CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        v18 = v27;
        objc_msgSend(v41, "filename");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v50 = v19;
        v20 = "Error setting file data (%@) in database";
        v21 = v18;
        v22 = 12;
        goto LABEL_25;
      }
    }
    v24 = 1;
    goto LABEL_27;
  }
  v23 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v23, OS_LOG_TYPE_DEBUG, "Couldn't create a path to write the inline attachment into", buf, 2u);
  }
  v24 = 1;
LABEL_29:

  if (v24)
  {
    v28 = 0;
    goto LABEL_47;
  }
LABEL_31:
  v29 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v42 = v3;
  objc_msgSend(v3, "allParameters");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
  if (v31)
  {
    v32 = v31;
    v33 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v32; ++i)
      {
        if (*(_QWORD *)v44 != v33)
          objc_enumerationMutation(v30);
        v35 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
        objc_msgSend(v35, "uppercaseString");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        if ((_isSavedAttachmentParameter(v36) & 1) == 0)
        {
          objc_msgSend(v30, "objectForKey:", v35);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          if (v37)
          {
            v38 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v53 = 138412290;
              v54 = v35;
              _os_log_impl(&dword_1A5CCB000, v38, OS_LOG_TYPE_DEBUG, "Found an unrecognized parameter: %@", v53, 0xCu);
            }
            objc_msgSend(v29, "setObject:forKey:", v37, v35);
          }

        }
      }
      v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
    }
    while (v32);
  }
  if (objc_msgSend(v29, "count"))
    CalAttachmentSetXProperties(v40, (CFDataRef)v29);

  v28 = 1;
  v3 = v42;
LABEL_47:

  return v28;
}

uint64_t _isSavedAttachmentParameter(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = _isSavedAttachmentParameter_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&_isSavedAttachmentParameter_onceToken, &__block_literal_global_13);
  v3 = objc_msgSend((id)_isSavedAttachmentParameter_savedParameterNames, "containsObject:", v2);

  return v3;
}

const __CFURL *ICSAttachmentFromCalAttachment(uint64_t a1, int a2)
{
  const void *v4;
  int v5;
  const __CFURL *v7;
  const __CFURL *v8;
  CFStringRef v9;
  const __CFString *v10;
  NSObject *v11;
  int v12;
  int v13;
  CFDataRef v14;
  const __CFURL *v15;
  const __CFURL *v16;
  void *v17;
  id v18;
  void *v19;
  NSObject *v20;
  _BOOL8 IsAutoArchived;
  __CFString *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  char isSavedAttachmentParameter;
  void *v36;
  NSObject *v37;
  void *v38;
  const UInt8 *v39;
  const UInt8 *v40;
  const __CFAllocator *v41;
  const __CFAllocator *v42;
  CFDataRef v43;
  UInt8 *v44;
  NSObject *v45;
  void *v46;
  NSObject *v47;
  int *v48;
  char *v49;
  NSObject *v50;
  void *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t v56[128];
  uint8_t v57[4];
  const __CFString *v58;
  __int16 v59;
  off_t st_size;
  CFAllocatorContext context;
  stat buf;
  char buffer[4];
  void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return (const __CFURL *)0;
  v4 = (const void *)CalAttachmentCopyLocalURL(a1);
  if (CalAttachmentIsBinary(a1))
  {
    v5 = 1;
    if (!v4)
      goto LABEL_11;
LABEL_10:
    CFRelease(v4);
    goto LABEL_11;
  }
  if (v4)
    v5 = a2;
  else
    v5 = 0;
  if (v4)
    goto LABEL_10;
LABEL_11:
  if (!v5)
  {
    v15 = CalAttachmentCopyURL(a1);
    if (v15)
    {
      v16 = v15;
      CFURLGetString(v15);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (v17)
      {
        v18 = objc_alloc(MEMORY[0x1E0DDB7B0]);
        objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = (const __CFURL *)objc_msgSend(v18, "initWithURL:", v19);

      }
      else
      {
        v8 = 0;
      }
      CFRelease(v16);

      goto LABEL_33;
    }
    goto LABEL_32;
  }
  v7 = (const __CFURL *)CalAttachmentCopyLocalURLForArchivedData(a1);
  v8 = v7;
  if (v7)
  {
    v9 = CFURLCopyFileSystemPath(v7, kCFURLPOSIXPathStyle);
    if (!v9)
    {
      CFRelease(v8);
      goto LABEL_32;
    }
    v10 = v9;
    bzero(buffer, 0x401uLL);
    v11 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      buf.st_dev = 138412290;
      *(_QWORD *)&buf.st_mode = v10;
      _os_log_impl(&dword_1A5CCB000, v11, OS_LOG_TYPE_DEBUG, "Memory mapping the file at %@", (uint8_t *)&buf, 0xCu);
    }
    if (CFStringGetFileSystemRepresentation(v10, buffer, 1024) == 1)
    {
      v12 = open(buffer, 0, 0);
      if ((v12 & 0x80000000) == 0)
      {
        v13 = v12;
        memset(&buf, 0, sizeof(buf));
        if (!fstat(v12, &buf))
        {
          if (!buf.st_size)
          {
            v45 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(context.version) = 0;
              _os_log_impl(&dword_1A5CCB000, v45, OS_LOG_TYPE_DEBUG, "Memory mapping a zero byte file", (uint8_t *)&context, 2u);
            }
            v14 = CFDataCreate(0, 0, 0);
            goto LABEL_20;
          }
          v39 = (const UInt8 *)mmap(0, buf.st_size, 1, 1025, v13, 0);
          if (v39 != (const UInt8 *)-1)
          {
            v40 = v39;
            context.version = 0;
            memset(&context.retain, 0, 40);
            context.info = (void *)buf.st_size;
            context.deallocate = (CFAllocatorDeallocateCallBack)_mmapDeallocatorCallback;
            context.preferredSize = 0;
            v41 = CFAllocatorCreate(0, &context);
            if (v41)
            {
              v42 = v41;
              v43 = CFDataCreateWithBytesNoCopy(0, v40, buf.st_size, v41);
              v44 = (UInt8 *)v40;
              v14 = v43;
              if (!v43)
                munmap(v44, buf.st_size);
              CFRelease(v42);
            }
            else
            {
              v14 = 0;
            }
            v50 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v57 = 138412546;
              v58 = v10;
              v59 = 2048;
              st_size = buf.st_size;
              _os_log_impl(&dword_1A5CCB000, v50, OS_LOG_TYPE_DEBUG, "Successfully mapped %@ (%lld bytes)", v57, 0x16u);
            }
            goto LABEL_20;
          }
          v46 = (void *)CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            v47 = v46;
            v48 = __error();
            v49 = strerror(*v48);
            LODWORD(context.version) = 138412546;
            *(CFIndex *)((char *)&context.version + 4) = (CFIndex)v10;
            WORD2(context.info) = 2080;
            *(void **)((char *)&context.info + 6) = v49;
            _os_log_impl(&dword_1A5CCB000, v47, OS_LOG_TYPE_DEBUG, "Could not mmap %@: %s", (uint8_t *)&context, 0x16u);

          }
        }
        v14 = 0;
LABEL_20:
        close(v13);
        goto LABEL_30;
      }
    }
    else
    {
      v20 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        buf.st_dev = 138412290;
        *(_QWORD *)&buf.st_mode = v10;
        _os_log_impl(&dword_1A5CCB000, v20, OS_LOG_TYPE_DEBUG, "Can't get file system representation for backup file path %@", (uint8_t *)&buf, 0xCu);
      }
    }
    v14 = 0;
LABEL_30:
    CFRelease(v10);
    CFRelease(v8);
    if (v14)
    {
      v8 = (const __CFURL *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB7B0]), "initWithData:", v14);

      goto LABEL_33;
    }
LABEL_32:
    v8 = 0;
  }
LABEL_33:
  v51 = (void *)CalAttachmentCopyFormat(a1);
  -[__CFURL setFmtype:](v8, "setFmtype:");
  if ((a2 & 1) == 0)
  {
    IsAutoArchived = CalAttachmentIsAutoArchived(a1);
    v22 = (__CFString *)CalAttachmentCopyFilename(a1);
    v23 = v22;
    if (IsAutoArchived)
    {
      -[__CFString stringByAppendingPathExtension:](v22, "stringByAppendingPathExtension:", CFSTR("zip"));
      v24 = objc_claimAutoreleasedReturnValue();

      v23 = (void *)v24;
    }
    -[__CFURL setX_apple_filename:](v8, "setX_apple_filename:", v23);
    -[__CFURL setX_apple_autoarchived:](v8, "setX_apple_autoarchived:", IsAutoArchived);
    v25 = (void *)CalAttachmentCopyExternalID(a1);
    -[__CFURL setManaged_id:](v8, "setManaged_id:", v25);

  }
  if ((v5 & 1) == 0)
  {
    v26 = (void *)CalAttachmentCopyFileSize(a1);
    v27 = v26;
    if (v26)
      -[__CFURL setSize:](v8, "setSize:", objc_msgSend(v26, "intValue"));

  }
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v28 = (id)CalAttachmentCopyXProperties(a1);
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v52, v56, 16);
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)v53;
    do
    {
      for (i = 0; i != v30; ++i)
      {
        if (*(_QWORD *)v53 != v31)
          objc_enumerationMutation(v28);
        v33 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * i);
        objc_msgSend(v33, "uppercaseString");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        isSavedAttachmentParameter = _isSavedAttachmentParameter(v34);

        if ((isSavedAttachmentParameter & 1) == 0)
        {
          -[__CFURL parameterValueForName:](v8, "parameterValueForName:", v33);
          v36 = (void *)objc_claimAutoreleasedReturnValue();

          if (v36)
          {
            v37 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buffer = 138543362;
              v64 = v33;
              _os_log_impl(&dword_1A5CCB000, v37, OS_LOG_TYPE_FAULT, "We have a saved value for an unrecognized parameter %{public}@ on an attachment, but the property already has a parameter with that name! _isSavedAttachmentParameter may be out of date.", (uint8_t *)buffer, 0xCu);
            }
          }
          else
          {
            objc_msgSend(v28, "objectForKeyedSubscript:", v33);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            -[__CFURL setParameterValue:forName:](v8, "setParameterValue:forName:", v38, v33);

          }
        }
      }
      v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v52, v56, 16);
    }
    while (v30);
  }

  return v8;
}

void ___isSavedAttachmentParameter_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", *MEMORY[0x1E0DDBAB8], *MEMORY[0x1E0DDBAA0], *MEMORY[0x1E0DDBBB8], *MEMORY[0x1E0DDBAE0], *MEMORY[0x1E0DDBAD8], *MEMORY[0x1E0DDB910], *MEMORY[0x1E0DDBB68], *MEMORY[0x1E0DDB8A8], 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_isSavedAttachmentParameter_savedParameterNames;
  _isSavedAttachmentParameter_savedParameterNames = v0;

}

void _mmapDeallocatorCallback(void *a1, size_t a2)
{
  NSObject *v3;
  int v4;
  size_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  munmap(a1, a2);
  v3 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    v4 = 134217984;
    v5 = a2;
    _os_log_impl(&dword_1A5CCB000, v3, OS_LOG_TYPE_DEBUG, "Unmapped %zu bytes", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1A5D49368(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;

  if (a2 == 1)
  {
    v3 = objc_begin_catch(exception_object);
    objc_msgSend(v2, "logHandle");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      +[CalExchangeCalendarItemExternalRepresentation dictionaryWithExternalRepresentationData:].cold.2((uint64_t)v3, v4, v5);

    objc_end_catch();
    JUMPOUT(0x1A5D4932CLL);
  }
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

const void *CalDatabaseCopyUpdatedCalEventFromICSEventWithOptions(void *a1, void *a2, os_unfair_lock_s *a3, uint64_t a4, _BYTE *a5, unsigned __int8 *a6, uint64_t a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  __CFString *v18;
  void *v19;
  void *v20;
  double v21;
  uint64_t v22;
  __CFString *v23;
  CFTypeRef v24;
  NSObject *v25;
  const void *started;
  unsigned __int8 v27;
  int v28;
  NSObject *v29;
  const __CFString *v30;
  void *v31;
  double v32;
  void *v33;
  NSObject *v34;
  void *v35;
  int SequenceNumber;
  NSObject *v37;
  const char *v38;
  NSObject *v39;
  uint64_t ModifiedDate;
  const void *v41;
  double v42;
  double v43;
  void *v44;
  double v45;
  void *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  const void *v53;
  double v54;
  double v55;
  void *v56;
  double v57;
  void *v58;
  NSObject *v59;
  id v61;
  unsigned __int8 *v62;
  uint8_t buf[4];
  double v64;
  __int16 v65;
  double v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v16 = a2;
  v17 = a8;
  if (a5)
    *a5 = 0;
  if (!v15)
    goto LABEL_30;
  v62 = a6;
  if ((a7 & 0x2000000) != 0)
  {
    v24 = 0;
  }
  else
  {
    objc_msgSend(v15, "uid");
    v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "recurrence_id");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      objc_msgSend(v15, "recurrence_id");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = CalDateFromICSDate(v20, v16);

      CalGetRecurrenceUIDFromRealUID(v18, v21);
      v22 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(v15, "uid");
      v23 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v24 = CalDatabaseCopyEventWithUniqueIdentifierInCalendar(a3, v23, a4);

      v18 = (__CFString *)v22;
    }
    else
    {
      v24 = 0;
    }
    v29 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v64 = *(double *)&v18;
      _os_log_impl(&dword_1A5CCB000, v29, OS_LOG_TYPE_DEBUG, "Searching for an event with a unique identifier matching %@", buf, 0xCu);
    }
    started = CalDatabaseCopyEventWithUniqueIdentifierInCalendar(a3, v18, a4);

    if (!started)
    {
      if ((a7 & 0x20000000) == 0)
        goto LABEL_8;
      v30 = (const __CFString *)objc_msgSend(v15, "summary");
      objc_msgSend(v15, "dtstart");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = CalDateFromICSDate(v31, v16);
      started = CalDatabaseCopyEventWithSummaryAndStartDateInCalendar(a3, v30, a4, v32);

    }
    if ((~(_DWORD)a7 & 0x24000000) == 0 && started)
    {
      v61 = v17;
      v33 = (void *)CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        v34 = v33;
        objc_msgSend(v15, "summary");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v64 = *(double *)&v35;
        v65 = 2112;
        v66 = *(double *)&a4;
        _os_log_impl(&dword_1A5CCB000, v34, OS_LOG_TYPE_DEBUG, "Found identity match for event %@ in calendar %@", buf, 0x16u);

      }
      SequenceNumber = CalEventGetSequenceNumber(started);
      if (objc_msgSend(v15, "sequence") < (unint64_t)SequenceNumber)
      {
        v37 = CDBiCalendarConversionHandle;
        v17 = v61;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          v38 = "The local event has a greater sequence number. Refusing to update the event";
LABEL_39:
          _os_log_impl(&dword_1A5CCB000, v37, OS_LOG_TYPE_DEBUG, v38, buf, 2u);
          goto LABEL_40;
        }
        goto LABEL_40;
      }
      ModifiedDate = CalCalendarItemCopyLastModifiedDate((uint64_t)started);
      if (ModifiedDate)
      {
        v41 = (const void *)ModifiedDate;
        v42 = MEMORY[0x1A85B424C]();
        CFRelease(v41);
        v43 = *MEMORY[0x1E0D0C490];
      }
      else
      {
        v43 = *MEMORY[0x1E0D0C490];
        v42 = *MEMORY[0x1E0D0C490];
      }
      objc_msgSend(v15, "last_modified");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = CalDateFromICSDateAsUTC(v44);

      if (v45 == v43)
      {
        objc_msgSend(v15, "dtstamp");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = CalDateFromICSDateAsUTC(v46);

      }
      v17 = v61;
      if (floor(v42) > floor(v45))
      {
        v37 = CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          v38 = "The local event has a greater last modified date. Refusing to update this event";
          goto LABEL_39;
        }
LABEL_40:
        CalCalendarItemUpdateUIDFromICSComponent((uint64_t)started, v15, v16);
        goto LABEL_68;
      }
    }
    if ((a7 & 0x100000) != 0 && started)
    {
      v47 = CalEventGetSequenceNumber(started);
      v48 = objc_msgSend(v15, "sequence");
      if (v48 < v47)
      {
        v49 = v48;
        v50 = CDBiCalendarConversionHandle;
        if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEFAULT))
          goto LABEL_68;
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&v64 = v47;
        v65 = 2048;
        v66 = *(double *)&v49;
        v51 = "ignoring imported event because the local sequence number (%lu) is greater than the imported sequence number (%lu)";
LABEL_71:
        _os_log_impl(&dword_1A5CCB000, v50, OS_LOG_TYPE_DEFAULT, v51, buf, 0x16u);
        goto LABEL_68;
      }
      v52 = CalCalendarItemCopyLastModifiedDate((uint64_t)started);
      if (v52)
      {
        v53 = (const void *)v52;
        v54 = MEMORY[0x1A85B424C]();
        CFRelease(v53);
        v55 = *MEMORY[0x1E0D0C490];
      }
      else
      {
        v55 = *MEMORY[0x1E0D0C490];
        v54 = *MEMORY[0x1E0D0C490];
      }
      objc_msgSend(v15, "last_modified");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v57 = CalDateFromICSDateAsUTC(v56);

      if (v57 == v55)
      {
        objc_msgSend(v15, "dtstamp");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v57 = CalDateFromICSDateAsUTC(v58);

      }
      if (v54 >= v57)
      {
        v50 = CDBiCalendarConversionHandle;
        if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEFAULT))
          goto LABEL_68;
        *(_DWORD *)buf = 134218240;
        v64 = v54;
        v65 = 2048;
        v66 = v57;
        v51 = "ignoring imported event because the local dtstamp number (%f) is greater than the imported dtstamp (%f)";
        goto LABEL_71;
      }
      goto LABEL_54;
    }
    if (started)
    {
LABEL_54:
      v27 = 0;
      goto LABEL_55;
    }
  }
LABEL_8:
  if (objc_msgSend(v16, "method") == 3 && (kCalCalendarImportRepliesForPreview & a7) == 0)
  {
    v39 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v39, OS_LOG_TYPE_DEBUG, "Don't create a new event in case of METHOD:REPLY in ics.", buf, 2u);
    }
LABEL_30:
    started = 0;
    goto LABEL_68;
  }
  v25 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v25, OS_LOG_TYPE_DEBUG, "Couldn't find an existing event in the calendar database. Creating a new one.", buf, 2u);
  }
  started = CalDatabaseCreateEvent(a3);
  if (started)
  {
    CalCalendarAddEvent(a4, started);
    v27 = 1;
LABEL_55:
    v28 = 1;
    goto LABEL_56;
  }
  v28 = 0;
  v27 = 1;
LABEL_56:
  if ((CalEventUpdateFromICSEventWithOptions(v15, v16, started, (uint64_t)v24, a3, a7, v17, 0, v27) & 1) != 0)
  {
    if (a5)
      *a5 = 1;
    if (v62)
      *v62 = v27;
  }
  else
  {
    v59 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v64 = *(double *)&v15;
      _os_log_impl(&dword_1A5CCB000, v59, OS_LOG_TYPE_ERROR, "Couldn't update CalEvent from icsEvent %@", buf, 0xCu);
    }
    CalRemoveEvent(started);
    if (v28)
      CFRelease(started);
    started = 0;
  }
  if (v24)
    CFRelease(v24);
LABEL_68:

  return started;
}

const void *CalDatabaseCopyUpdatedCalTaskFromICSTodoWithOptions(void *a1, void *a2, os_unfair_lock_s *a3, const void *a4, _BYTE *a5, uint64_t a6)
{
  id v11;
  id v12;
  void *v13;
  __CFString *v14;
  const void *Task;
  unsigned __int8 v16;
  int v17;
  const __CFString *v18;
  void *v19;
  double v20;
  void *v21;
  NSObject *v22;
  void *v23;
  int SequenceNumber;
  NSObject *v25;
  const char *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  const void *ModifiedDate;
  double v36;
  void *v37;
  double v38;
  void *v39;
  uint8_t buf[4];
  id v41;
  __int16 v42;
  const void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = v12;
  if (a5)
    *a5 = 0;
  if (!v11)
  {
    Task = 0;
    goto LABEL_31;
  }
  v39 = v12;
  if ((a6 & 0x2000000) != 0)
    goto LABEL_16;
  objc_msgSend(v11, "uid");
  v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
  Task = CalDatabaseCopyCalendarItemWithUniqueIdentifierInCalendarOrStore(a3, 3, v14, (uint64_t)a4, 0);

  if (!Task)
  {
    if ((a6 & 0x20000000) != 0)
    {
      v18 = (const __CFString *)objc_msgSend(v11, "summary");
      objc_msgSend(v11, "due");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = CalDateFromICSDate(v19, v13);
      Task = CalDatabaseCopyTaskWithSummaryAndDueDateInCalendar(a3, v18, (uint64_t)a4, v20);

      if (Task)
      {
        v21 = (void *)CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        {
          v22 = v21;
          objc_msgSend(v11, "summary");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v41 = v23;
          v42 = 2112;
          v43 = a4;
          _os_log_impl(&dword_1A5CCB000, v22, OS_LOG_TYPE_DEBUG, "Found identity match for task %@ in calendar %@", buf, 0x16u);

          v13 = v39;
        }
        if ((a6 & 0x4000000) == 0)
          goto LABEL_6;
        SequenceNumber = CalCalendarItemGetSequenceNumber((uint64_t)Task);
        if (objc_msgSend(v11, "sequence") >= (unint64_t)SequenceNumber)
        {
          ModifiedDate = (const void *)CalCalendarItemCopyLastModifiedDate((uint64_t)Task);
          v36 = MEMORY[0x1A85B424C]();
          if (ModifiedDate)
            CFRelease(ModifiedDate);
          objc_msgSend(v11, "last_modified");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = CalDateFromICSDateAsUTC(v37);

          if (v36 <= v38)
            goto LABEL_6;
          v25 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            v26 = "The local event has a greater dtstamp. Refusing to update this event";
            goto LABEL_37;
          }
        }
        else
        {
          v25 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            v26 = "The local event has a greater sequence number. Refusing to update the event";
LABEL_37:
            _os_log_impl(&dword_1A5CCB000, v25, OS_LOG_TYPE_DEBUG, v26, buf, 2u);
          }
        }
        CalCalendarItemUpdateUIDFromICSComponent((uint64_t)Task, v11, v13);
        goto LABEL_31;
      }
    }
LABEL_16:
    v27 = (void *)CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      v28 = v27;
      objc_msgSend(v11, "uid");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v41 = v29;
      _os_log_impl(&dword_1A5CCB000, v28, OS_LOG_TYPE_DEBUG, "Couldn't find a task with external id %@ in the calendar database. Creating a new one.", buf, 0xCu);

    }
    Task = CalDatabaseCreateTask(a3);
    if (Task)
    {
      CalCalendarAddCalendarItem(a4, Task);
      v17 = 1;
    }
    else
    {
      v17 = 0;
    }
    v16 = 1;
    goto LABEL_22;
  }
LABEL_6:
  v16 = 0;
  v17 = 1;
LABEL_22:
  v30 = (void *)MEMORY[0x1E0C99D80];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a6);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "dictionaryWithObject:forKey:", v31, CFSTR("ItemBridgeOptions"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = v39;
  if ((CalTaskUpdateFromICSTodoWithOptions(Task, v11, v39, a3, v32, v16) & 1) != 0)
  {
    if (a5)
      *a5 = 1;
  }
  else
  {
    v33 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v41 = v11;
      _os_log_impl(&dword_1A5CCB000, v33, OS_LOG_TYPE_ERROR, "Couldn't update CalTask from icsEvent %@", buf, 0xCu);
    }
    CalRemoveTask(Task);
    if (v17)
      CFRelease(Task);
    Task = 0;
  }

LABEL_31:
  return Task;
}

__CFArray *CalDatabaseCopyUpdatedCalEventsFromICSDocumentWithOptionsAndBatchSize(void *a1, os_unfair_lock_s *a2, int a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t), uint64_t a7, unsigned int (*a8)(_QWORD, _QWORD, _QWORD), uint64_t a9, uint64_t (*a10)(void *, uint64_t), uint64_t a11, void *a12)
{
  id v17;
  id v18;
  const void *v19;
  const void *v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  id v26;
  __int128 v27;
  double v28;
  uint64_t (*v29)(void *, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  objc_class *v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  char isKindOfClass;
  unsigned __int8 v44;
  unsigned __int8 v45;
  NSObject *v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  uint64_t DateTimeFromICSDate;
  void *v52;
  __CFString *v53;
  void *v54;
  uint64_t v55;
  CFTypeRef v56;
  os_unfair_lock_s *v57;
  int v58;
  void *v59;
  void *v60;
  uint64_t v61;
  __CFString *v62;
  CFTypeRef v63;
  const void *v64;
  const __CFString *v65;
  const __CFString *v66;
  const __CFArray *v67;
  const __CFArray *v68;
  CFIndex Count;
  CFIndex v70;
  void *v71;
  CFIndex i;
  const void *ValueAtIndex;
  void *v74;
  void *v75;
  NSObject *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t j;
  void *v83;
  void *v84;
  void *v85;
  const void *v86;
  void *v87;
  CFTypeRef v88;
  const void *v89;
  BOOL v90;
  void *v91;
  NSObject *v92;
  int UID;
  int v94;
  uint64_t v95;
  NSObject *v96;
  id v97;
  void *v98;
  NSObject *v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t k;
  void *v106;
  const void *v107;
  uint64_t v108;
  __CFArray *v109;
  __int128 v111;
  id v112;
  __CFArray *theArray;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(void *, uint64_t);
  id obj;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v124;
  uint64_t v125;
  void *context;
  void *v127;
  void *v128;
  void *v129;
  unsigned int (*v130)(_QWORD, _QWORD, _QWORD);
  os_unfair_lock_s *v131;
  id v133;
  id v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[128];
  uint8_t v149[128];
  uint8_t buf[4];
  _BYTE v151[10];
  id v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v17 = a1;
  v18 = a12;
  if ((a3 & 0x80000000) == 0)
  {
    v19 = CalDatabaseCopyCalendarWithUID(a2);
    if (v19)
    {
      v20 = v19;
      v117 = a6;
      v21 = v17;
      objc_msgSend(v17, "calendar");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "calendar");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "method");

      theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      objc_msgSend(v22, "componentKeys");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v116 = objc_msgSend(v25, "count");
      v140 = 0u;
      v141 = 0u;
      v142 = 0u;
      v143 = 0u;
      v26 = v25;
      v120 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v140, v149, 16);
      if (!v120)
      {

        goto LABEL_130;
      }
      obj = v26;
      v121 = 0;
      v122 = 0;
      v114 = v24 > 1;
      v119 = *(_QWORD *)v141;
      v28 = *MEMORY[0x1E0D0C490];
      *(_QWORD *)&v27 = 134218242;
      v111 = v27;
      v124 = v18;
      v128 = v22;
      v130 = a8;
      v131 = a2;
      v115 = a7;
      v29 = v117;
      v112 = v17;
LABEL_5:
      v30 = 0;
      while (1)
      {
        if (*(_QWORD *)v141 != v119)
          objc_enumerationMutation(obj);
        v31 = *(void **)(*((_QWORD *)&v140 + 1) + 8 * v30);
        v32 = MEMORY[0x1A85B514C]();
        v133 = v31;
        objc_msgSend(v22, "componentForKey:", v31);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v125 = v30;
        context = (void *)v32;
        if ((a4 & 1) != 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            if (v33)
            {
              v34 = (objc_class *)MEMORY[0x1E0DDB830];
              v35 = v33;
              v36 = objc_alloc_init(v34);
              objc_msgSend(v35, "attendee");
              v37 = v21;
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v36, "setAttendee:", v38);

              objc_msgSend(v35, "due");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v36, "setDtstart:", v39);

              objc_msgSend(v35, "completed");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v36, "setDtend:", v40);

              objc_msgSend(v35, "description");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v36, "setDescription:", v41);

              objc_msgSend(v35, "summary");
              v42 = (void *)objc_claimAutoreleasedReturnValue();

              v29 = v117;
              objc_msgSend(v36, "setSummary:", v42);

              v21 = v37;
              a7 = v115;
            }
            else
            {
              v36 = 0;
            }

            v33 = v36;
          }
        }
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
        objc_opt_class();
        v127 = v33;
        v44 = objc_opt_isKindOfClass();
        v45 = v44;
        if ((isKindOfClass & 1) == 0 && (v44 & 1) == 0)
        {
          v46 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v151 = v33;
            _os_log_impl(&dword_1A5CCB000, v46, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSComponent in the calendar: %@", buf, 0xCu);
          }
LABEL_30:
          v57 = v131;
          if (!v29)
            goto LABEL_105;
          goto LABEL_31;
        }
        if ((((int)a4 >= 0) & v44) != 0)
          goto LABEL_117;
        if (a8 && !a8(v33, v133, a9))
          goto LABEL_30;
        if ((a4 & 0x8000000) != 0)
        {
          v47 = v21;
          v48 = v127;
          v49 = v22;
          objc_msgSend(v48, "recurrence_id");
          v50 = (void *)objc_claimAutoreleasedReturnValue();

          DateTimeFromICSDate = *(_QWORD *)&v28;
          if (v50)
          {
            objc_msgSend(v48, "recurrence_id");
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            DateTimeFromICSDate = CalCreateDateTimeFromICSDate(v52, v49);

            v22 = v128;
            a8 = v130;
            CalDateTimeRelease();
          }
          objc_msgSend(v48, "uid", v111);
          v53 = (__CFString *)objc_claimAutoreleasedReturnValue();
          if (vabdd_f64(*(double *)&DateTimeFromICSDate, v28) >= 2.22044605e-16
            && fabs(*(double *)&DateTimeFromICSDate) < 2.22044605e-16)
          {
            objc_msgSend(v48, "uid");
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            CalGetRecurrenceUIDFromRealUID(v54, *(double *)&DateTimeFromICSDate);
            v55 = objc_claimAutoreleasedReturnValue();

            v22 = v128;
            v53 = (__CFString *)v55;
            a8 = v130;
          }
          v56 = CalDatabaseCopyEventWithUniqueIdentifierInCalendar(v131, v53, 0);
          if (v56)
          {
            CFRelease(v56);

            a7 = v115;
            v29 = v117;
            v57 = v131;
            v21 = v47;
            if (!v117)
              goto LABEL_105;
            goto LABEL_31;
          }

          a7 = v115;
          v29 = v117;
          v21 = v47;
        }
        if ((isKindOfClass & 1) != 0)
        {
          v59 = v127;
          if ((v114 & 1) != 0)
          {
            objc_msgSend(v127, "propertiesForName:", kCalImportEventIsPhantomMaster);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            v61 = objc_msgSend(v60, "count");

            v59 = v127;
            if (v61)
            {
              objc_msgSend(v127, "uid");
              v62 = (__CFString *)objc_claimAutoreleasedReturnValue();
              v63 = CalDatabaseCopyEventWithUniqueIdentifierInCalendar(v131, v62, (uint64_t)v20);
              if (v63)
              {
                v64 = v63;
                if (!CalCalendarItemIsPhantomMaster((uint64_t)v63))
                {

                  v114 = 1;
                  goto LABEL_43;
                }
                CFRelease(v64);
              }

            }
          }
          buf[0] = 0;
          v64 = CalDatabaseCopyUpdatedCalEventFromICSEventWithOptions(v59, v22, v131, (uint64_t)v20, buf, 0, a4, v18);
          v114 |= buf[0] == 0;
        }
        else
        {
          if ((v45 & 1) == 0)
          {
            v57 = v131;
            goto LABEL_104;
          }
          v59 = v127;
          v64 = CalDatabaseCopyUpdatedCalTaskFromICSTodoWithOptions(v127, v22, v131, v20, 0, a4);
        }
LABEL_43:
        if (!a5 && v64)
          CFArrayAppendValue(theArray, v64);
        if (a10)
        {
          if (v64)
          {
            v65 = (const __CFString *)a10(v59, a11);
            if (v65)
            {
              v66 = v65;
              CalCalendarItemSetExternalID((uint64_t)v64, v65);
              CFRelease(v66);
            }
          }
        }
        if ((isKindOfClass & 1) != 0)
        {
          v67 = CalEventCopyDetachedEvents((uint64_t)v64);
          if (v67)
          {
            v68 = v67;
            Count = CFArrayGetCount(v67);
            v57 = v131;
            if (Count)
            {
              v70 = Count;
              v71 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", Count);
              for (i = 0; i != v70; ++i)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v68, i);
                v74 = (void *)CalEventCopyUniqueIdentifier((uint64_t)ValueAtIndex);
                objc_msgSend(v71, "addObject:", v74);

              }
              v22 = v128;
            }
            else
            {
              v71 = 0;
            }
            CFRelease(v68);
          }
          else
          {
            v71 = 0;
            v57 = v131;
          }
          v129 = v71;
          v135 = (uint64_t)v64;
          v75 = (void *)CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            v76 = v75;
            objc_msgSend(v22, "componentOccurrencesForKey:", v133);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            v78 = objc_msgSend(v77, "count");
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)v151 = v78;
            _os_log_impl(&dword_1A5CCB000, v76, OS_LOG_TYPE_DEBUG, "ICSEvent has %lu detached events", buf, 0xCu);

          }
          v138 = 0u;
          v139 = 0u;
          v136 = 0u;
          v137 = 0u;
          objc_msgSend(v22, "componentOccurrencesForKey:", v133, v111);
          v134 = (id)objc_claimAutoreleasedReturnValue();
          v79 = objc_msgSend(v134, "countByEnumeratingWithState:objects:count:", &v136, v148, 16);
          if (v79)
          {
            v80 = v79;
            v81 = *(_QWORD *)v137;
            do
            {
              for (j = 0; j != v80; ++j)
              {
                if (*(_QWORD *)v137 != v81)
                  objc_enumerationMutation(v134);
                v83 = *(void **)(*((_QWORD *)&v136 + 1) + 8 * j);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  if (!a8 || a8(v83, 0, a9))
                  {
                    v84 = (void *)CalDatabaseCopyUpdatedCalEventFromICSEventWithOptions(v83, v22, v57, (uint64_t)v20, 0, 0, a4, v18);
                    if (v84)
                    {
                      v85 = v84;
                      v86 = v20;
                      v87 = (void *)CalEventCopyUniqueIdentifier((uint64_t)v84);
                      objc_msgSend(v129, "removeObject:", v87);
                      v88 = CalEventCopyOriginalEvent((uint64_t)v85);
                      v89 = v88;
                      if (v88)
                        v90 = v88 == (CFTypeRef)v135;
                      else
                        v90 = 0;
                      if (v90)
                        goto LABEL_80;
                      v91 = (void *)CDBiCalendarConversionHandle;
                      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
                      {
                        v92 = v91;
                        UID = CalEventGetUID(v135);
                        v94 = CalEventGetUID(v85);
                        *(_DWORD *)buf = 67109376;
                        *(_DWORD *)v151 = UID;
                        v18 = v124;
                        *(_WORD *)&v151[4] = 1024;
                        *(_DWORD *)&v151[6] = v94;
                        _os_log_impl(&dword_1A5CCB000, v92, OS_LOG_TYPE_DEBUG, "Setting %d as the original event for %d", buf, 0xEu);

                      }
                      CalEventAddDetachedEvent(v135, v85);
                      v22 = v128;
                      if (v89)
LABEL_80:
                        CFRelease(v89);
                      if (a10)
                      {
                        v95 = a10(v83, a11);
                        if (v95)
                          CalEventSetExternalID(v85, v95);
                      }
                      CFRelease(v85);

                      v20 = v86;
                      a8 = v130;
                      v57 = v131;
                    }
                  }
                }
                else
                {
                  v96 = CDBiCalendarConversionHandle;
                  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 138412290;
                    *(_QWORD *)v151 = v83;
                    _os_log_impl(&dword_1A5CCB000, v96, OS_LOG_TYPE_DEBUG, "Encountered an unknown ICSComponent in the calendar: %@", buf, 0xCu);
                  }
                }
              }
              v80 = objc_msgSend(v134, "countByEnumeratingWithState:objects:count:", &v136, v148, 16);
            }
            while (v80);
          }

          v21 = v112;
          a7 = v115;
          if ((v114 & 1) == 0)
          {
            v97 = v129;
            v98 = (void *)CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              v99 = v98;
              v100 = objc_msgSend(v97, "count");
              *(_DWORD *)buf = v111;
              *(_QWORD *)v151 = v100;
              *(_WORD *)&v151[8] = 2112;
              v152 = v97;
              _os_log_impl(&dword_1A5CCB000, v99, OS_LOG_TYPE_DEBUG, "Removing %lu leftover detachments with unique identifiers %@", buf, 0x16u);

            }
            v146 = 0u;
            v147 = 0u;
            v144 = 0u;
            v145 = 0u;
            v101 = v97;
            v102 = objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", &v144, buf, 16);
            if (v102)
            {
              v103 = v102;
              v104 = *(_QWORD *)v145;
              do
              {
                for (k = 0; k != v103; ++k)
                {
                  if (*(_QWORD *)v145 != v104)
                    objc_enumerationMutation(v101);
                  v106 = (void *)CalDatabaseCopyEventWithUniqueIdentifierInCalendar(v57, *(const __CFString **)(*((_QWORD *)&v144 + 1) + 8 * k), (uint64_t)v20);
                  if (v106)
                  {
                    v107 = v106;
                    CalEventRemoveDetachedEvent(v135, v106);
                    CFRelease(v107);
                  }
                }
                v103 = objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", &v144, buf, 16);
              }
              while (v103);
            }

            v18 = v124;
            v22 = v128;
            v21 = v112;
          }
          v64 = (const void *)v135;
          CalParticipantPropagateUUIDsFromMainEventToDetachments(v135);

          v29 = v117;
          if (v135)
LABEL_103:
            CFRelease(v64);
        }
        else
        {
          v29 = v117;
          v57 = v131;
          if (v64)
            goto LABEL_103;
        }
LABEL_104:
        v122 += a5 != 0;
        if (!v29)
        {
LABEL_105:
          v58 = 1;
          goto LABEL_106;
        }
LABEL_31:
        v58 = v29(v21, a7);
LABEL_106:
        if (!a5 || !v58)
          goto LABEL_115;
        ++v121;
        if (v122 == a5 || v121 == v116 || v122 && _CalDatabaseUnlockRequested((uint64_t)v57))
        {
          CalDatabaseSaveAndFlushCaches((uint64_t)v57);
          if (v20)
            CFRelease(v20);
          v20 = CalDatabaseCopyCalendarWithUID(v57);
          v122 = 0;
          LOBYTE(v58) = v20 != 0;
LABEL_115:

          objc_autoreleasePoolPop(context);
          if ((v58 & 1) == 0)
          {
            if (theArray)
              CFRelease(theArray);
            theArray = 0;
            goto LABEL_127;
          }
          goto LABEL_118;
        }
LABEL_117:

        objc_autoreleasePoolPop(context);
LABEL_118:
        v30 = v125 + 1;
        if (v125 + 1 == v120)
        {
          v108 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v140, v149, 16);
          v120 = v108;
          if (v108)
            goto LABEL_5;
LABEL_127:
          v26 = obj;

          if (!v20)
          {
LABEL_131:

            v109 = theArray;
            goto LABEL_132;
          }
LABEL_130:
          CFRelease(v20);
          goto LABEL_131;
        }
      }
    }
  }
  v109 = 0;
  v21 = v17;
LABEL_132:

  return v109;
}

id componentsWithPhantomMasterForICSCalendar(void *a1, uint64_t (*a2)(_QWORD, void *, uint64_t), uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  int v21;
  NSObject *v22;
  _BOOL4 v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  id v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  uint8_t v56[128];
  uint8_t buf[4];
  uint64_t v58;
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v46 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v41 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  objc_msgSend(v5, "componentKeys");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
  v42 = v5;
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v52;
    v43 = *(_QWORD *)v52;
    v44 = v6;
    do
    {
      v10 = 0;
      v45 = v8;
      do
      {
        if (*(_QWORD *)v52 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v10);
        objc_msgSend(v5, "componentForKey:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v12)
        {
          v13 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            v58 = (uint64_t)v11;
            _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_DEBUG, "Component not found for component key: [%@].  Attempting to create a phantom master.", buf, 0xCu);
          }
          objc_msgSend(v5, "componentOccurrencesForKey:", v11);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v14, "count"))
          {
            if (a2)
            {
              v49 = 0u;
              v50 = 0u;
              v47 = 0u;
              v48 = 0u;
              v15 = v14;
              v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
              if (v16)
              {
                v17 = v16;
                v18 = *(_QWORD *)v48;
                while (2)
                {
                  for (i = 0; i != v17; ++i)
                  {
                    if (*(_QWORD *)v48 != v18)
                      objc_enumerationMutation(v15);
                    if ((a2(*(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * i), v11, a3) & 1) != 0)
                    {

                      v5 = v42;
                      goto LABEL_21;
                    }
                  }
                  v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
                  if (v17)
                    continue;
                  break;
                }
                v5 = v42;
              }
            }
            else
            {
LABEL_21:
              objc_msgSend(v14, "objectAtIndexedSubscript:", 0);
              v15 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "uid");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              v21 = objc_msgSend(v46, "containsObject:", v20);
              v22 = CDBLogHandle;
              v23 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
              if (v21)
              {
                if (v23)
                {
                  *(_DWORD *)buf = 138412290;
                  v58 = (uint64_t)v20;
                  _os_log_impl(&dword_1A5CCB000, v22, OS_LOG_TYPE_DEBUG, "Phantom master with UID [%@] is scheduled to be added already.  Will not create phantom master.", buf, 0xCu);
                }
              }
              else
              {
                if (v23)
                {
                  *(_DWORD *)buf = 138412290;
                  v58 = (uint64_t)v20;
                  _os_log_impl(&dword_1A5CCB000, v22, OS_LOG_TYPE_DEBUG, "Creating a phantom master with UID: [%@].", buf, 0xCu);
                }
                objc_msgSend(v46, "addObject:", v20);
                objc_opt_class();
                v24 = (void *)objc_opt_new();
                objc_msgSend(v24, "setUid:", v20);
                objc_msgSend(v24, "setSummary:", CFSTR("[Placeholder Item]"));
                objc_msgSend(v15, "dtstart");
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v24, "setDtstart:", v25);

                objc_msgSend(v15, "dtend");
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v24, "setDtend:", v26);

                objc_msgSend(v15, "duration");
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v24, "setDuration:", v27);

                objc_msgSend(v15, "x_apple_etag");
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v24, "setX_apple_etag:", v28);

                objc_msgSend(v15, "x_apple_scheduletag");
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v24, "setX_apple_scheduletag:", v29);

                objc_msgSend(v15, "x_apple_serverFilename");
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v24, "setX_apple_serverFilename:", v30);

                objc_msgSend(v15, "dtstart");
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                v55 = v31;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v55, 1);
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v24, "setExdate:", v32);

                objc_msgSend(v24, "setPropertyValue:type:forName:", MEMORY[0x1E0C9AAB0], 5012, kCalImportEventIsPhantomMaster);
                objc_msgSend(v41, "addObject:", v24);

                v5 = v42;
              }

            }
            v9 = v43;
            v6 = v44;
            v8 = v45;
          }

        }
        ++v10;
      }
      while (v10 != v8);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
    }
    while (v8);
  }

  if (objc_msgSend(v41, "count"))
  {
    v33 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      v34 = v33;
      v35 = objc_msgSend(v41, "count");
      *(_DWORD *)buf = 134217984;
      v58 = v35;
      _os_log_impl(&dword_1A5CCB000, v34, OS_LOG_TYPE_DEBUG, "[%lu] Phantom masters were created.  Adding them to the list of components.", buf, 0xCu);

    }
    v36 = objc_alloc(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v42, "components");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = v36;
    v5 = v42;
    v39 = (void *)objc_msgSend(v38, "initWithArray:", v37);

    objc_msgSend(v39, "addObjectsFromArray:", v41);
  }
  else
  {
    objc_msgSend(v5, "components");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v39;
}

__CFArray *CalItemsUpdateFromiCalendarDataWithOptions(const __CFData *a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4)
{
  return CalItemsUpdateFromiCalendarDataWithOptionsIncludingPhantomMaster(a1, a2, a3, a4, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

__CFArray *CalItemsUpdateFromiCalendarDataWithOptionsIncludingPhantomMaster(const __CFData *a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t), uint64_t a7, uint64_t (*a8)(_QWORD, void *, uint64_t), uint64_t a9, uint64_t (*a10)(void *, uint64_t), uint64_t a11, char a12, void *a13)
{
  id v20;
  void *v21;
  _BOOL4 v22;
  objc_class *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  BOOL v30;
  NSObject *v31;
  __CFArray *updated;
  id v35;
  uint8_t buf[4];
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v20 = a13;
  v21 = (void *)CDBLogHandle;
  v22 = os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG);
  if ((a4 & 0x80) != 0)
  {
    if (!v22)
      goto LABEL_7;
    v24 = v21;
    *(_DWORD *)buf = 67109120;
    LODWORD(v37) = CFDataGetLength(a1);
    _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_DEBUG, "Import of compressed iCalendar data requested.  DataLen: %d", buf, 8u);
  }
  else
  {
    if (!v22)
      goto LABEL_7;
    v23 = (objc_class *)MEMORY[0x1E0CB3940];
    v24 = v21;
    v25 = (void *)objc_msgSend([v23 alloc], "initWithData:encoding:", a1, 4);
    *(_DWORD *)buf = 138412290;
    v37 = v25;
    _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_DEBUG, "Import of iCalendar data requested.  Data: [%@]", buf, 0xCu);

  }
LABEL_7:
  v26 = (void *)MEMORY[0x1A85B514C]();
  v35 = 0;
  v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB820]), "initWithData:options:error:", a1, a4, &v35);
  v28 = v35;
  v29 = v28;
  if (v27)
    v30 = v28 == 0;
  else
    v30 = 0;
  if (v30)
  {
    updated = CalItemsUpdateFromiCalendarDocumentWithOptionsIncludingPhantomMaster(v27, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, v20);
  }
  else
  {
    v31 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v37 = v29;
      _os_log_impl(&dword_1A5CCB000, v31, OS_LOG_TYPE_ERROR, "Could not parse ICSDocument from data: %@", buf, 0xCu);
    }
    updated = 0;
  }

  objc_autoreleasePoolPop(v26);
  return updated;
}

__CFArray *CalItemsUpdateFromiCalendarDocumentWithOptionsIncludingPhantomMaster(void *a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t), uint64_t a7, uint64_t (*a8)(_QWORD, void *, uint64_t), uint64_t a9, uint64_t (*a10)(void *, uint64_t), uint64_t a11, char a12, void *a13)
{
  id v15;
  id v16;
  void *v17;
  void *v18;
  int UID;
  __CFArray *v20;

  v15 = a1;
  v16 = a13;
  if (a12)
  {
    objc_msgSend(v15, "calendar");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    componentsWithPhantomMasterForICSCalendar(v17, a8, a9);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setComponents:options:", v18, 2);

  }
  UID = CalCalendarGetUID();
  v20 = CalDatabaseCopyUpdatedCalEventsFromICSDocumentWithOptionsAndBatchSize(v15, a2, UID, a4, a5, a6, a7, (unsigned int (*)(_QWORD, _QWORD, _QWORD))a8, a9, a10, a11, v16);

  return v20;
}

CFTypeRef CalCreateiCalendarDataFromICSCalendar(void *a1)
{
  return _CalCreateiCalendarDataFromICSCalendarWithOptions(a1, 4);
}

CFTypeRef _CalCreateiCalendarDataFromICSCalendarWithOptions(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  size_t v8;
  uint8_t *v9;
  id v10;
  size_t v11;
  CFTypeRef v12;
  NSObject *v14;
  uint8_t v15[16];

  v3 = a1;
  v4 = (void *)MEMORY[0x1A85B514C]();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB820]), "initWithCalendar:", v3);
  objc_msgSend(v5, "ICSDataWithOptions:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v12 = 0;
    goto LABEL_7;
  }
  v7 = v6;
  if ((a2 & 0x80) == 0)
  {
LABEL_5:
    v12 = CFRetain(v7);

LABEL_7:
    objc_autoreleasePoolPop(v4);
    goto LABEL_8;
  }
  v8 = objc_msgSend(v6, "length") + 16;
  v9 = (uint8_t *)malloc_type_malloc(v8, 0xDE63BECuLL);
  v10 = objc_retainAutorelease(v7);
  v11 = compression_encode_buffer(v9, v8, (const uint8_t *)objc_msgSend(v10, "bytes"), objc_msgSend(v10, "length"), 0, COMPRESSION_LZFSE);
  if (v11)
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v9, v11, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_5;
  }
  v14 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1A5CCB000, v14, OS_LOG_TYPE_ERROR, "Compression of ICS failed. Somehow.", v15, 2u);
  }
  free(v9);

  objc_autoreleasePoolPop(v4);
  v12 = 0;
LABEL_8:

  return v12;
}

CFTypeRef CalCreateiCalendarDataFromCalEntities(const __CFArray *a1)
{
  return CalCreateiCalendarDataFromCalEntitiesWithOptions(a1, 0, 0);
}

CFTypeRef CalCreateiCalendarDataFromCalEntitiesWithOptions(const __CFArray *a1, void *a2, unint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  CFTypeRef v10;

  v5 = a2;
  v6 = (void *)MEMORY[0x1A85B514C]();
  ICSCalendarFromCalEntitiesWithTimeZoneGenerationOptions(a1, 2, v5, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  v9 = 20;
  if ((a3 & 1) == 0)
    v9 = 4;
  v10 = _CalCreateiCalendarDataFromICSCalendarWithOptions(v7, a3 & 0x80 | (((a3 >> 1) & 1) << 6) | v9);

  objc_autoreleasePoolPop(v6);
  return v10;
}

id ICSCalendarFromCalEntitiesWithTimeZoneGenerationOptions(const __CFArray *a1, uint64_t a2, void *a3, unint64_t a4)
{
  id v6;
  NSObject *v7;
  id v8;
  __CFArray *Mutable;
  void *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  const void *ValueAtIndex;
  int Type;
  CFTypeRef v16;
  void *v17;
  id v18;
  CFIndex v19;
  __int128 v20;
  CFIndex v21;
  CFIndex v22;
  void *v23;
  int v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  _BOOL8 IsAllDay;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  const __CFArray *v39;
  const __CFArray *v40;
  CFIndex v41;
  void *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  CFIndex j;
  void *v47;
  void *v48;
  void *v49;
  NSObject *v50;
  int UID;
  int RowID;
  NSObject *v53;
  id v54;
  CFIndex v55;
  CFIndex v56;
  id v57;
  uint64_t v58;
  char v59;
  CFIndex k;
  const void *v61;
  __int16 ModifiedProperties;
  unsigned int PrivacyLevel;
  uint64_t v64;
  __int128 v66;
  void *v67;
  unsigned int v68;
  id v69;
  void *v70;
  void *v71;
  CFIndex v72;
  __CFArray *v73;
  id v74;
  id v75;
  void *v76;
  uint8_t buf[4];
  id v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    v79 = v6;
    _os_log_impl(&dword_1A5CCB000, v7, OS_LOG_TYPE_DEBUG, "iCalendar items will be generated from database items.  occurrenceDate: [%@]", buf, 0xCu);
  }
  if (a1 && CFArrayGetCount(a1))
  {
    v68 = a2;
    v8 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v10 = v6;
    if ((a4 & 0x20000) == 0)
    {

      v10 = 0;
    }
    v69 = v6;
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v12 = Count;
      for (i = 0; i != v12; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (CalEntityGetType(ValueAtIndex) - 4 >= 0xFFFFFFFE)
        {
          Type = CalEntityGetType(ValueAtIndex);
          if (v10 || Type != 2 || (v16 = CalEventCopyOriginalEvent((uint64_t)ValueAtIndex)) == 0)
          {
            CFRetain(ValueAtIndex);
            v16 = ValueAtIndex;
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CalCalendarItemGetRowID());
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v8, "containsObject:", v17) & 1) == 0)
          {
            objc_msgSend(v8, "addObject:", v17);
            CFArrayAppendValue(Mutable, v16);
          }
          if (v16)
            CFRelease(v16);

        }
      }
    }
    v67 = v8;
    v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v19 = CFArrayGetCount(Mutable);
    if (v19 >= 1)
    {
      v21 = v19;
      v22 = 0;
      *(_QWORD *)&v20 = 138412290;
      v66 = v20;
      v71 = v10;
      v72 = v19;
      v73 = Mutable;
      v74 = v18;
      while (1)
      {
        v23 = (void *)CFArrayGetValueAtIndex(Mutable, v22);
        v24 = CalEntityGetType(v23);
        if (v24 != 3)
          break;
        if (!v23 || CalCalendarItemIsHidden((uint64_t)v23))
          goto LABEL_57;
        ICSTodoFromCalTask(v23, a4);
        v34 = objc_claimAutoreleasedReturnValue();
        if (!v34)
        {
          v36 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A5CCB000, v36, OS_LOG_TYPE_ERROR, "Could not convert the original calTask", buf, 2u);
          }
          v25 = 0;
          v21 = v72;
LABEL_36:

LABEL_57:
          v35 = (id)CDBiCalendarConversionHandle;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            if (v23)
              RowID = CalCalendarItemGetRowID();
            else
              RowID = -1;
            *(_DWORD *)buf = 67109120;
            LODWORD(v79) = RowID;
            _os_log_impl(&dword_1A5CCB000, v35, OS_LOG_TYPE_DEBUG, "Couldn't create ICSComponents for cal item with uid %d", buf, 8u);
          }
          goto LABEL_62;
        }
        v76 = (void *)v34;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v34);
        v35 = objc_claimAutoreleasedReturnValue();
LABEL_55:

        if (!v35)
          goto LABEL_57;
        objc_msgSend(v18, "addObjectsFromArray:", v35);
LABEL_62:

        if (++v22 == v21)
          goto LABEL_68;
      }
      if (v24 != 2)
        goto LABEL_57;
      v25 = v10;
      if (!v23)
        goto LABEL_36;
      v76 = v25;
      v26 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      if (!CalCalendarItemIsHidden((uint64_t)v23))
      {
        ICSEventFromCalEvent(v23, a4);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = v27;
        if (v10)
        {
          objc_msgSend(v27, "setRrule:", 0);
          objc_msgSend(v28, "setExdate:", 0);
          objc_msgSend(v28, "setRecurrence_id:", 0);
          objc_msgSend(v28, "setRelatedTo:", 0);
          IsAllDay = CalEventIsAllDay((uint64_t)v23);
          objc_msgSend(v76, "dateByAddingTimeInterval:", (double)CalEventGetDuration((uint64_t)v23));
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = (void *)CalCalendarItemCopyEndTimeZone((uint64_t)v23);
          v70 = v31;
          if (IsAllDay)
          {
            objc_msgSend(v30, "dateByAddingTimeInterval:", 1.0);
            v32 = objc_claimAutoreleasedReturnValue();

            ICSFloatingDateOnlyFromCFDate(v32, v31);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = (void *)v32;
          }
          else
          {
            ICSDateFromCFDate((uint64_t)v30, v31);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
          }
          objc_msgSend(v28, "setDtend:", v33, v66);
          v37 = (void *)objc_opt_new();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", IsAllDay);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "setObject:forKey:", v38, CFSTR("ItemBridgeIsAllDay"));

          CalSetStartDateOnICSComponentWithOptions((uint64_t)v23, v28, v76, v37);
          v10 = v71;
          v21 = v72;
          v18 = v74;
        }
        if (!v28)
        {
          v53 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A5CCB000, v53, OS_LOG_TYPE_ERROR, "Could not convert the original CalEvent", buf, 2u);
          }
          v35 = 0;
          Mutable = v73;
          goto LABEL_54;
        }
        objc_msgSend(v26, "addObject:", v28);

      }
      if (!v10)
      {
        v39 = CalEventCopyDetachedEvents((uint64_t)v23);
        if (v39)
        {
          v40 = v39;
          v41 = CFArrayGetCount(v39);
          v42 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            v43 = (void *)MEMORY[0x1E0CB37E8];
            v44 = v42;
            objc_msgSend(v43, "numberWithLong:", v41);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v66;
            v79 = v45;
            _os_log_impl(&dword_1A5CCB000, v44, OS_LOG_TYPE_DEBUG, "This event has %@ detached events", buf, 0xCu);

          }
          if (v41 >= 1)
          {
            for (j = 0; j != v41; ++j)
            {
              v47 = (void *)CFArrayGetValueAtIndex(v40, j);
              ICSEventFromCalEvent(v47, a4);
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              if (v48)
              {
                objc_msgSend(v26, "addObject:", v48);
              }
              else
              {
                v49 = (void *)CDBiCalendarConversionHandle;
                if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
                {
                  v50 = v49;
                  UID = CalEventGetUID(v47);
                  *(_DWORD *)buf = 67109120;
                  LODWORD(v79) = UID;
                  _os_log_impl(&dword_1A5CCB000, v50, OS_LOG_TYPE_ERROR, "Could not convert the detached event with the cal uid %d", buf, 8u);

                }
              }

            }
          }
          CFRelease(v40);
          v10 = v71;
          v21 = v72;
          v18 = v74;
        }
      }
      v35 = v26;
      Mutable = v73;
LABEL_54:

      goto LABEL_55;
    }
LABEL_68:
    v6 = v69;
    a2 = v68;
    if (Mutable)
      CFRelease(Mutable);

  }
  else
  {
    v18 = 0;
    v10 = v6;
  }

  if (_CalSetupDefaultProdID_onceToken != -1)
    dispatch_once(&_CalSetupDefaultProdID_onceToken, &__block_literal_global_15);
  v54 = objc_alloc_init(MEMORY[0x1E0DDB7D8]);
  objc_msgSend(v54, "setComponents:options:", v18, a2);
  v55 = CFArrayGetCount(a1);
  if (v55 >= 1)
  {
    v56 = v55;
    v75 = v18;
    v57 = v6;
    v58 = 0;
    v59 = 0;
    for (k = 0; k != v56; ++k)
    {
      v61 = CFArrayGetValueAtIndex(a1, k);
      ModifiedProperties = CalEventGetModifiedProperties((uint64_t)v61);
      PrivacyLevel = CalCalendarItemGetPrivacyLevel((uint64_t)v61);
      v59 |= (PrivacyLevel | ModifiedProperties & 0x100) != 0;
      v64 = ICSCalendarServerAccessFromCalEventPrivacyLevel(PrivacyLevel);
      if (objc_msgSend(MEMORY[0x1E0DDB7D8], "compareCalendarServerAccess:withAccess:", v58, v64) == -1)
        v58 = v64;
      else
        v58 = v58;
    }
    v6 = v57;
    v18 = v75;
    if ((v59 & 1) != 0)
      objc_msgSend(v54, "setX_calendarserver_access:", v58);
  }

  return v54;
}

CFTypeRef CalCreateiCalendarDataFromCalendarWithOptions(uint64_t a1, unint64_t a2, void *a3)
{
  void (**v5)(id, uint64_t);
  void *v6;
  uint64_t v7;
  const __CFArray *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  uint64_t v18;
  CFTypeRef v19;
  int v21;
  uint64_t v22;

  v5 = a3;
  v6 = (void *)MEMORY[0x1A85B514C]();
  v7 = CalCalendarCopyEvents();
  if (v7)
  {
    v8 = (const __CFArray *)v7;
    if (v5)
      v5[2](v5, v7);
    ICSCalendarFromCalEntitiesWithTimeZoneGenerationOptions(v8, 2, 0, a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    CFRelease(v8);
    v10 = (void *)CalCalendarCopyTitle(a1);
    objc_msgSend(v9, "setX_wr_calname:", v10);
    v11 = (void *)CalCalendarCopyColorString(a1);
    v12 = v11;
    v22 = 0;
    v21 = 0;
    if (v11)
    {
      sscanf((const char *)objc_msgSend(objc_retainAutorelease(v11), "UTF8String"), "#%02X%02X%02X", (char *)&v22 + 4, &v22, &v21);
      v13 = objc_alloc(MEMORY[0x1E0DDB7E8]);
      v14 = (void *)objc_msgSend(v13, "initWithRed:green:blue:", BYTE4(v22), v22, v21);
      objc_msgSend(v9, "setX_apple_calendar_color:", v14);

    }
    v15 = (void *)CalCalendarCopyNotes(a1);
    objc_msgSend(v9, "setX_wr_caldesc:", v15);
    v16 = (__CFString *)CalCalendarCopyLanguage(a1);
    v17 = (__CFString *)CalCalendarCopyRegion(a1);
    objc_msgSend(v9, "setX_apple_language:", v16);
    objc_msgSend(v9, "setX_apple_region:", v17);
    v18 = 20;
    if ((a2 & 1) == 0)
      v18 = 4;
    v19 = _CalCreateiCalendarDataFromICSCalendarWithOptions(v9, a2 & 0x80 | (((a2 >> 1) & 1) << 6) | v18);

  }
  else
  {
    v19 = 0;
  }
  objc_autoreleasePoolPop(v6);

  return v19;
}

id ICSCalendarFromCalEntityRefs(const __CFArray *a1)
{
  return ICSCalendarFromCalEntitiesWithTimeZoneGenerationOptions(a1, 2, 0, 0);
}

id ICSCalendarFromCalEventRefs(const __CFArray *a1)
{
  return ICSCalendarFromCalEntitiesWithTimeZoneGenerationOptions(a1, 2, 0, 0);
}

void _CalAlarmLoadSecurityScopedURLWrapper(uint64_t a1)
{

}

void _CalAlarmPrepareForSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  const os_unfair_lock *v4;
  uint64_t DatabaseForRecord;
  double DateProperty;
  double v7;
  CFTypeRef OwningCalendarItem;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    CalRelationOwnerWillSave(Property);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  if (_CalAlarmGetTriggerInterval(a1) != 0x7FFFFFFF)
  {
    v11 = 0;
    v12 = 0;
    CalEventOccurrenceCacheGetLongAlarmIntervals(&v12, &v11);
  }
  CPRecordSetProperty();
  DatabaseForRecord = CalGetDatabaseForRecord();
  if ((unint64_t)(_CalDatabaseGetChangeReason(DatabaseForRecord) - 1) >= 2)
  {
    DateProperty = _CalRecordGetDateProperty(a1);
    if (vabdd_f64(DateProperty, *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
      v7 = DateProperty;
    else
      v7 = 1.17549435e-38;
    if (v7 != 1.17549435e-38)
    {
      OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
      if (OwningCalendarItem)
      {
        v9 = (uint64_t)OwningCalendarItem;
        if (_CalCalendarItemGetEntityType((uint64_t)OwningCalendarItem) == 2
          && v7 - COERCE_DOUBLE(_CalEventGetStartDate(v9)) > 15552000.0)
        {
          v10 = CalGetDatabaseForRecord();
          _CalDatabaseIntegrityError(v10, CFSTR("Suspiciously large absolute alarm offset"));
        }
      }
    }
  }
}

uint64_t _CalAlarmPropertyDidChange(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t Context;
  uint64_t v4;
  uint64_t DatabaseForRecord;
  CFTypeRef OwningCalendarItem;
  const void *v7;

  if (a2 <= 0x17)
  {
    v2 = result;
    if (((1 << a2) & 0x80D804) == 0)
    {
      if (((1 << a2) & 3) == 0)
        return result;
      DatabaseForRecord = CalGetDatabaseForRecord();
      if (DatabaseForRecord)
      {
        if (_CalDatabaseIsPropertyModificationLoggingEnabled(DatabaseForRecord))
        {
          OwningCalendarItem = _CalAlarmGetOwningCalendarItem(v2);
          if (OwningCalendarItem)
          {
            v7 = OwningCalendarItem;
            _CalEventMarkPropertyModified((uint64_t)OwningCalendarItem);
            _CalEventMarkEventAsNeedingAlarmCacheUpdate(v7);
          }
        }
      }
    }
    CPRecordGetStore();
    Context = CPRecordStoreGetContext();
    _CalDatabaseSetChangeFlags(Context, 8);
    result = (uint64_t)_CalAlarmGetOwningCalendarItem(v2);
    if (result)
    {
      v4 = result;
      _CalEventUpdateLastModifiedDate(result);
      result = _CalEntityIsNew(v4);
      if ((result & 1) == 0)
        return _CalEventMarkAsModifiedForChangeTracking(v4);
    }
  }
  return result;
}

void _CalAlarmPropertyWillChange(uint64_t a1, int a2, char *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  const os_unfair_lock *Context;
  const os_unfair_lock *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((a2 == 9 || a2 == 3) && a3 + 1 == 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    CPRecordGetProperty();
  }
  else if (a2 == 27)
  {
    objc_msgSend(a3, "url");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "absoluteString");
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)_CalAlarmCopyURL(a1);
    objc_msgSend(v8, "absoluteString");
    v9 = objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend((id)v7, "isEqual:", v9) && v7 | v9)
    {
      if ((objc_msgSend(v6, "startAccessingSecurityScopedResource") & 1) == 0)
      {
        v10 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          v13 = 138412290;
          v14 = v6;
          _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_ERROR, "Failed to start accessing security scoped URL wrapper when trying to create a bookmark for it: %@", (uint8_t *)&v13, 0xCu);
        }
      }
      _CalAlarmSetBookmark(a1);
      objc_msgSend(v6, "stopAccessingSecurityScopedResource");
    }

  }
}

void CalAlarmInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalAlarmClass, (const char **)&kCalAlarmIndexes, (const char **)&kCalAlarmChangesIndexes);
  CalMigrationCreateTriggers(a2, (const char **)&kCalAlarmClass, (const char **)&kCalAlarmTriggers);
}

void CalAlarmMigrateTables(uint64_t a1, uint64_t a2, signed int a3)
{
  const os_unfair_lock *Context;
  uint64_t **v6;
  const os_unfair_lock *v7;
  BOOL v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  const os_unfair_lock *v11;
  uint64_t **v12;
  uint64_t v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  const os_unfair_lock *v16;
  double v17;
  double v18;

  if ((a3 & 0xFFFFFFFE) == 0x46)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    v6 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
    CPSqliteConnectionStatementForSQL();
    if (CDBLockingAssertionsEnabled)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      if (*v6)
      {
        v9 = **v6;
        if (v9)
        {
          if (*(_QWORD *)(v9 + 104))
          {
            v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10)
              os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    CalMigrateTableFull((_QWORD *)a2, (const char **)&kCalAlarmClass, 0, (const char **)&kCalAlarmUpgradeInfo, (const char **)&kCalAlarmChangesUpgradeInfo, (const char **)&kCalAlarmIndexes, (const char **)&kCalAlarmChangesIndexes, (const char **)&kCalAlarmTriggers, a3);
    goto LABEL_29;
  }
  if (a3 > 18002)
    return;
  CalMigrateTableFull((_QWORD *)a2, (const char **)&kCalAlarmClass, 0, (const char **)&kCalAlarmUpgradeInfo, (const char **)&kCalAlarmChangesUpgradeInfo, (const char **)&kCalAlarmIndexes, (const char **)&kCalAlarmChangesIndexes, (const char **)&kCalAlarmTriggers, a3);
  if (a3 <= 48)
  {
    CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("UPDATE Alarm SET trigger_date = NULL WHERE trigger_date = -2147483648"));
LABEL_28:
    _CalDBFillInUUIDColumn(a2, (uint64_t)CFSTR("Alarm"));
    goto LABEL_29;
  }
  if (a3 <= 0x34)
    goto LABEL_28;
  if (a3 <= 0x3E80)
  {
LABEL_29:
    if (!sqlite3_create_function(*(sqlite3 **)(a2 + 8), "CREATE_UUID", 0, 1, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))CreateUUIDCallback, 0, 0))CalPerformSQLWithConnection((_QWORD *)a2, (uint64_t)CFSTR("INSERT INTO Alarm (trigger_interval, type, calendarItem_owner_id, calendar_owner_id, UUID, proximity, disabled, location_id, default_alarm, orig_alarm_id) SELECT 0, 0, ROWID, -1, CREATE_UUID(), 0, 0, 0, 1, 0 FROM CalendarItem WHERE     entity_type = 2     AND IFNULL(default_alarm_removed, 0) = 0     AND ROWID NOT IN (SELECT DISTINCT calendaritem_owner_id FROM Alarm WHERE default_alarm = 1) "));
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a2)
      {
        if (*(_QWORD *)(*(_QWORD *)a2 + 104))
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
  }
  v12 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  v17 = 0.0;
  v18 = 0.0;
  CalEventOccurrenceCacheGetLongAlarmIntervals(&v18, &v17);
  sqlite3_bind_double((sqlite3_stmt *)v12[1], 1, v17);
  sqlite3_bind_double((sqlite3_stmt *)v12[1], 2, -v18);
  if (CDBLockingAssertionsEnabled)
  {
    if (v12)
    {
      if (*v12)
      {
        v13 = **v12;
        if (v13)
        {
          if (*(_QWORD *)(v13 + 104))
          {
            v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14)
              os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (CDBLockingAssertionsEnabled)
  {
    if (v12)
    {
      if (*v12)
      {
        v15 = **v12;
        if (v15)
        {
          if (*(_QWORD *)(v15 + 104))
          {
            v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16)
              os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
}

uint64_t _CalFloatingAlarmHandler(uint64_t a1, uint64_t **a2)
{
  const unsigned __int8 *v4;
  int v5;
  int v7;
  int v8;
  const unsigned __int8 *v9;
  const __CFString *v10;
  const __CFString *v11;
  int v12;
  double v13;
  uint64_t v14;
  const os_unfair_lock *Context;
  uint64_t v16;
  const os_unfair_lock *v17;

  if (sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), 1) != 5)
  {
    v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 2);
    v5 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 8), 2);
    if (v4)
    {
      if (!strncmp((const char *)v4, "_float", v5))
      {
        v7 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 5);
        if (v7 == 2)
        {
          v8 = 3;
        }
        else
        {
          if (v7 != 3)
            return 0;
          v8 = 4;
        }
        v9 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), v8);
        if (v9)
        {
          v10 = CFStringCreateWithCString(0, (const char *)v9, 0x8000100u);
          if (v10)
          {
            v11 = v10;
            if (CFStringCompare(v10, CFSTR("_float"), 0))
            {
              v12 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
              sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 1);
              CalAbsoluteTimeGetAbsoluteTimeInCalTimeZone();
              sqlite3_bind_double((sqlite3_stmt *)a2[1], 1, v13);
              sqlite3_bind_int((sqlite3_stmt *)a2[1], 2, v12);
              if (a2)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (*a2)
                  {
                    v14 = **a2;
                    if (v14)
                    {
                      if (*(_QWORD *)(v14 + 104))
                      {
                        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (Context)
                          os_unfair_lock_assert_owner(Context + 20);
                      }
                    }
                  }
                }
              }
              CPSqliteStatementPerform();
              if (a2)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (*a2)
                  {
                    v16 = **a2;
                    if (v16)
                    {
                      if (*(_QWORD *)(v16 + 104))
                      {
                        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v17)
                          os_unfair_lock_assert_owner(v17 + 20);
                      }
                    }
                  }
                }
              }
              CPSqliteStatementReset();
            }
            CFRelease(v11);
          }
        }
      }
    }
  }
  return 0;
}

void CreateUUIDCallback(sqlite3_context *a1)
{
  const __CFString *v2;
  const __CFString *v3;
  const char *CStringFromCFString;

  v2 = _CalDBCreateUUIDString();
  if (v2)
  {
    v3 = v2;
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(v2);
    if (CStringFromCFString)
    {
      sqlite3_result_text(a1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      CFRelease(v3);
      return;
    }
    CFRelease(v3);
  }
  sqlite3_result_null(a1);
}

uint64_t CalAlarmGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  __CFString *v9;
  int v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  int v14;
  __CFString *v15;
  int v16;
  __CFString *v17;
  int v18;
  __CFString *v19;
  int v20;
  __CFString *v21;
  int v22;
  __CFString *v23;
  int v24;
  __CFString *v25;
  int v26;
  __CFString *v27;
  int v28;
  __CFString *v29;
  int v30;
  __CFString *v31;
  int v32;
  __CFString *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalAlarmGetPropertyIDWithPropertyName_sPropDict;
  if (!CalAlarmGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalAlarmGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalAlarmGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("UUID");
      v6 = 10;
      v7 = CFSTR("absoluteDate");
      v8 = 0;
      v9 = CFSTR("relativeOffset");
      v10 = 1;
      v11 = CFSTR("type");
      v12 = 2;
      v13 = CFSTR("externalData");
      v14 = 7;
      v15 = CFSTR("proximity");
      v16 = 11;
      v17 = CFSTR("acknowledgedDate");
      v18 = 14;
      v19 = CFSTR("isDefaultAlarm");
      v20 = 15;
      v21 = CFSTR("calendarItemOwner");
      v22 = 20;
      v23 = CFSTR("calendarOwner");
      v24 = 21;
      v25 = CFSTR("structuredLocation");
      v26 = 23;
      v27 = CFSTR("originalAlarm");
      v28 = 24;
      v29 = CFSTR("snoozedAlarmsSet");
      v30 = 25;
      v31 = CFSTR("emailAddress");
      v32 = 17;
      v33 = CFSTR("urlWrapper");
      v34 = 27;
      CalAlarmGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 15);
      for (i = 224; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalAlarmGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalAlarmGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5D4CDF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 224; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

CFTypeRef _CalAlarmHasValidParent(uint64_t a1)
{
  CFTypeRef result;

  if (_CalAlarmGetOwningCalendarItem(a1))
    return (CFTypeRef)_CalRecordStillExists();
  result = _CalAlarmGetOwningCalendar(a1);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

CFTypeRef _CalAlarmGetOwningEntity(uint64_t a1)
{
  CFTypeRef result;

  result = _CalAlarmGetOwningCalendarItem(a1);
  if (!result)
    return _CalAlarmGetOwningCalendar(a1);
  return result;
}

void _CalAlarmCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CFStringRef v3;
  CFStringRef v4;

  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("DELETE FROM Alarm WHERE calendaritem_owner_id NOT IN (SELECT ROWID FROM CalendarItem)                                                                                      AND calendar_owner_id NOT IN (SELECT ROWID FROM Calendar);"));
  if (v3)
  {
    v4 = v3;
    CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)v3, 0);
    CFRelease(v4);
  }
}

const void *_CalDatabaseCreateAlarm(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;
  BOOL v6;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  const __CFUUID *v10;
  CFStringRef v11;
  BOOL v12;
  const os_unfair_lock *v13;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 4);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v2 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  CPRecordInitializeProperty();
  v10 = CFUUIDCreate(0);
  v11 = CFUUIDCreateString(0, v10);
  if (CDBLockingAssertionsEnabled)
    v12 = v2 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    if (CPRecordGetStore())
    {
      v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v13)
        os_unfair_lock_assert_owner(v13 + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v10);
  CFRelease(v11);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateAlarm(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Alarm;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Alarm = _CalDatabaseCreateAlarm((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Alarm;
}

const void *_CalAlarmCopy(uint64_t a1, uint64_t a2)
{
  const void *Alarm;
  const void *v4;
  BOOL v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  BOOL v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;
  const os_unfair_lock *v18;
  const os_unfair_lock *v19;
  const os_unfair_lock *v20;
  const os_unfair_lock *v21;
  const os_unfair_lock *v22;
  const os_unfair_lock *v23;
  const os_unfair_lock *v24;
  const os_unfair_lock *v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;
  const os_unfair_lock *v28;
  const os_unfair_lock *v29;
  const os_unfair_lock *v30;
  const os_unfair_lock *v31;

  Alarm = _CalDatabaseCreateAlarm(a1);
  v4 = Alarm;
  if (CDBLockingAssertionsEnabled)
    v5 = Alarm == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v11 = v4 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18)
          os_unfair_lock_assert_owner(v18 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20)
          os_unfair_lock_assert_owner(v20 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21)
          os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v23)
          os_unfair_lock_assert_owner(v23 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24)
          os_unfair_lock_assert_owner(v24 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v25)
          os_unfair_lock_assert_owner(v25 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26)
          os_unfair_lock_assert_owner(v26 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27)
          os_unfair_lock_assert_owner(v27 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v28)
          os_unfair_lock_assert_owner(v28 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29)
          os_unfair_lock_assert_owner(v29 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v30)
          os_unfair_lock_assert_owner(v30 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v31)
          os_unfair_lock_assert_owner(v31 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v4;
}

uint64_t _CalRemoveAlarm(void *a1)
{
  CFTypeRef OwningCalendarItem;
  uint64_t result;
  uint64_t DatabaseForRecord;

  OwningCalendarItem = _CalAlarmGetOwningCalendarItem((uint64_t)a1);
  if (OwningCalendarItem || (OwningCalendarItem = _CalAlarmGetOwningCalendar((uint64_t)a1)) != 0)
  {
    result = _CalEntityGetType(OwningCalendarItem);
    if ((result & 0xFFFFFFFE) == 2)
    {
      return (uint64_t)_CalCalendarItemRemoveAlarm((uint64_t)OwningCalendarItem, a1);
    }
    else if ((_DWORD)result == 1)
    {
      return (uint64_t)_CalCalendarRemoveAlarm((uint64_t)OwningCalendarItem, a1);
    }
  }
  else
  {
    DatabaseForRecord = CalGetDatabaseForRecord();
    return _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  }
  return result;
}

void CalRemoveAlarm(void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveAlarm(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAlarmSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t CalDatabaseCopyOfAllAlarmsInStore(const void *a1, uint64_t a2)
{
  os_unfair_lock_s *v2;
  int UID;
  int v4;
  uint64_t RecordStore;
  uint64_t v6;
  BOOL v7;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v10;
  uint64_t SelectStatement;
  const void *v12;
  const os_unfair_lock *v13;
  uint64_t v14;
  uint64_t v15;
  const os_unfair_lock *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  BOOL v20;
  const os_unfair_lock *v21;

  if (a2)
  {
    v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    UID = CalStoreGetUID();
    if (v2)
    {
      v4 = UID;
      os_unfair_lock_lock(v2 + 20);
      RecordStore = _CalDatabaseGetRecordStore((uint64_t)v2);
      v6 = RecordStore;
      if (CDBLockingAssertionsEnabled)
        v7 = RecordStore == 0;
      else
        v7 = 1;
      if (!v7)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      Database = CPRecordStoreGetDatabase();
      if (Database && (v10 = Database, (SelectStatement = CPRecordStoreCreateSelectStatement()) != 0))
      {
        v12 = (const void *)SelectStatement;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)(v10 + 104))
          {
            v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13)
              os_unfair_lock_assert_owner(v13 + 20);
          }
        }
        v14 = CPSqliteDatabaseStatementForReading();
        if (v14)
        {
          v15 = v14;
          sqlite3_bind_int(*(sqlite3_stmt **)(v14 + 8), 1, v4);
          sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 2, v4);
          if (CDBLockingAssertionsEnabled)
          {
            if (v6)
            {
              v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v16)
                os_unfair_lock_assert_owner(v16 + 20);
            }
          }
          v17 = CPRecordStoreProcessStatement();
        }
        else
        {
          v17 = 0;
        }
        CFRelease(v12);
      }
      else
      {
        v17 = 0;
      }
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner(v2 + 20);
      os_unfair_lock_unlock(v2 + 20);
LABEL_38:
      CFRelease(v2);
      return v17;
    }
    return 0;
  }
  else
  {
    v2 = (os_unfair_lock_s *)CFRetain(a1);
    v18 = v2 + 20;
    os_unfair_lock_lock(v2 + 20);
    v19 = _CalDatabaseGetRecordStore((uint64_t)v2);
    if (CDBLockingAssertionsEnabled)
      v20 = v19 == 0;
    else
      v20 = 1;
    if (!v20)
    {
      v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v21)
        os_unfair_lock_assert_owner(v21 + 20);
    }
    v17 = CPRecordStoreCopyAllInstancesOfClass();
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v18);
    os_unfair_lock_unlock(v18);
    if (v2)
      goto LABEL_38;
  }
  return v17;
}

uint64_t _CalInvalidateAlarmsWithCalendarItemOwnerID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t _CalInvalidateAlarmsWithCalendarOwnerID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t CalAlarmGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t _CalAlarmGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyAlarmWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalAlarmGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t _CalAlarmGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

void CalAlarmSetUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmCopyUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalDatabaseCopyAlarmWithUUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  const __CFArray *v6;
  const __CFArray *v7;
  const void *ValueAtIndex;
  CFTypeRef v9;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (v6)
  {
    v7 = v6;
    if (CFArrayGetCount(v6) < 1)
    {
      v9 = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
      v9 = CFRetain(ValueAtIndex);
    }
    CFRelease(v7);
  }
  else
  {
    v9 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v9;
}

uint64_t CalAlarmCopyExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAlarmSetExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmCopyExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAlarmClearExternalProperties(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalAlarmSetTriggerDate(uint64_t a1, CFAbsoluteTime a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (fabs(a2 + -1.17549435e-38) >= 2.22044605e-16)
  {
    _CalRecordSetDateProperty(a1, 0, a2);
    if (!a1)
      goto LABEL_14;
    goto LABEL_10;
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
LABEL_10:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
LABEL_14:
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

double _CalAlarmGetTriggerDate(uint64_t a1)
{
  double result;

  result = _CalRecordGetDateProperty(a1);
  if (vabdd_f64(result, *MEMORY[0x1E0D0C490]) < 2.22044605e-16)
    return 1.17549435e-38;
  return result;
}

double CalAlarmGetTriggerDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;
  double v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  v4 = *MEMORY[0x1E0D0C490];
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  if (vabdd_f64(DateProperty, v4) < 2.22044605e-16)
    DateProperty = 1.17549435e-38;
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void CalAlarmSetTriggerInterval(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  CFNumberRef v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  CFTypeRef OwningCalendarItem;
  int valuePtr;

  valuePtr = a2;
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2 == 0x7FFFFFFF)
    v5 = 0;
  else
    v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (_CalAlarmIsDefaultAlarm(a1))
  {
    _CalAlarmSetIsDefaultAlarm(a1);
    OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
    _CalCalendarItemSetDefaultAlarmRemoved((uint64_t)OwningCalendarItem, 1u);
  }
  if (v5)
    CFRelease(v5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalAlarmIsDefaultAlarm(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() == 1;
}

uint64_t _CalAlarmSetIsDefaultAlarm(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

CFTypeRef _CalAlarmGetOwningCalendarItem(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  return CalRelationGetRelatedObject(Property);
}

uint64_t _CalAlarmGetTriggerInterval(uint64_t a1)
{
  const os_unfair_lock *Context;
  const __CFNumber *Property;
  unsigned int valuePtr;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFNumber *)CPRecordGetProperty();
  if (!Property)
    return 0x7FFFFFFFLL;
  valuePtr = 0;
  CFNumberGetValue(Property, kCFNumberIntType, &valuePtr);
  return valuePtr;
}

uint64_t CalAlarmGetTriggerInterval(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t TriggerInterval;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  TriggerInterval = _CalAlarmGetTriggerInterval(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return TriggerInterval;
}

void CalAlarmSetType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmGetType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

CFTypeRef CalAlarmCopyOwningCalendarItem(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef OwningCalendarItem;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
  v4 = OwningCalendarItem;
  if (OwningCalendarItem)
    CFRetain(OwningCalendarItem);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef _CalAlarmGetOwningCalendar(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  return CalRelationGetRelatedObject(Property);
}

CFTypeRef CalAlarmCopyOwningCalendar(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef OwningCalendar;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  OwningCalendar = _CalAlarmGetOwningCalendar(a1);
  v4 = OwningCalendar;
  if (OwningCalendar)
    CFRetain(OwningCalendar);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalAlarmCopyOwningEntity(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef OwningCalendarItem;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
  if (OwningCalendarItem || (OwningCalendarItem = _CalAlarmGetOwningCalendar(a1)) != 0)
    CFRetain(OwningCalendarItem);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return OwningCalendarItem;
}

BOOL CalAlarmIsEquivalentToAlarm(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  os_unfair_lock_s *RecordLock;
  double DateProperty;
  const os_unfair_lock *Context;
  uint64_t Property;
  const os_unfair_lock *v9;

  v2 = 0;
  if (a1 && a2)
  {
    RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
    os_unfair_lock_lock(RecordLock);
    if (a1 == a2)
    {
      v2 = 1;
    }
    else
    {
      DateProperty = _CalRecordGetDateProperty(a1);
      v2 = 0;
      if (vabdd_f64(DateProperty, _CalRecordGetDateProperty(a2)) < 2.22044605e-16)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
        Property = CPRecordGetProperty();
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9)
              os_unfair_lock_assert_owner(v9 + 20);
          }
        }
        v2 = Property == CPRecordGetProperty();
      }
    }
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(RecordLock);
    os_unfair_lock_unlock(RecordLock);
  }
  return v2;
}

void CalAlarmSetEnabled(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

