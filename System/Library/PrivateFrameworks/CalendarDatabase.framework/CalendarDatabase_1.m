BOOL CalAlarmIsEnabled(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsEnabled;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsEnabled = _CalAlarmIsEnabled(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsEnabled;
}

BOOL _CalAlarmIsEnabled(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() == 0;
}

void CalAlarmSetProximity(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmGetProximity(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

_QWORD *_CalAlarmSetLocation(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

void CalAlarmSetLocation(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmSetLocation(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAlarmCopyLocation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;
  CFTypeRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    v5 = CalRelationCopyRelatedObject(Property);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalAlarmSetAcknowledgedDate(uint64_t a1, CFAbsoluteTime a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 14, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalAlarmRemoveAcknowledged(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalAlarmGetAcknowledged(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

double CalAlarmGetAcknowledgedDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void CalAlarmSetIsDefaultAlarm(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmSetIsDefaultAlarm(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalAlarmIsDefaultAlarm(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsDefaultAlarm;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsDefaultAlarm = _CalAlarmIsDefaultAlarm(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsDefaultAlarm;
}

uint64_t CalAlarmCopyEmailAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAlarmSetEmailAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmCopyBookmark(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalAlarmCopyBookmark(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalAlarmCopyBookmark(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalAlarmSetBookmark(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmSetBookmark(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAlarmSetBookmark(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void _CalAlarmSetURL(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  id v4;

  if (a2)
  {
    v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3910]), "initWithURL:readonly:", a2, 1);
    if (!a1)
      goto LABEL_9;
  }
  else
  {
    v4 = 0;
    if (!a1)
      goto LABEL_9;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
LABEL_9:
  CPRecordSetProperty();

}

void CalAlarmSetURL(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmSetURL(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAlarmCopyURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalAlarmCopyURL(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalAlarmCopyURL(uint64_t a1)
{
  const os_unfair_lock *Context;
  void *v2;
  uint64_t v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v2 = (void *)CPRecordCopyProperty();
  objc_msgSend(v2, "url");
  v3 = objc_claimAutoreleasedReturnValue();

  return v3;
}

_QWORD *_CalAlarmSetOriginalAlarm(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

void CalAlarmSetOriginalAlarm(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmSetOriginalAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef _CalAlarmGetOriginalAlarm(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

CFTypeRef CalAlarmCopyOriginalAlarm(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef OriginalAlarm;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  OriginalAlarm = _CalAlarmGetOriginalAlarm(a1);
  v4 = OriginalAlarm;
  if (OriginalAlarm)
    CFRetain(OriginalAlarm);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

const __CFArray *_CalAlarmAddSnoozedAlarm(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

void CalAlarmAddSnoozedAlarm(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmAddSnoozedAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

_QWORD *_CalAlarmRemoveSnoozedAlarm(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

void CalAlarmRemoveSnoozedAlarm(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAlarmRemoveSnoozedAlarm(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef _CalAlarmCopySnoozedAlarms(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

CFMutableArrayRef CalAlarmCopySnoozedAlarms(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalAlarmCopySnoozedAlarms(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

BOOL _CalAlarmIsDisplayable(uint64_t a1)
{
  CFTypeRef OwningCalendarItem;
  uint64_t Store;
  uint64_t v4;
  uint64_t v5;
  uint64_t CalendarWithUID;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t StoreWithUID;

  if (!_CalAlarmIsEnabled(a1))
    return 0;
  OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
  if (!OwningCalendarItem)
    OwningCalendarItem = _CalAlarmGetOwningCalendar(a1);
  Store = CPRecordGetStore();
  v4 = 1;
  if (!OwningCalendarItem)
    return v4;
  v5 = Store;
  if (!Store)
    return v4;
  if (!_CalEntityIsOfType(OwningCalendarItem, 2))
  {
    if (!_CalEntityIsOfType(OwningCalendarItem, 1))
      return v4;
    _CalCalendarGetStoreId((uint64_t)OwningCalendarItem);
    StoreWithUID = _CalGetStoreWithUID(v5);
    if (StoreWithUID)
      return _CalStoreIsEnabled(StoreWithUID);
    return 0;
  }
  if (_CalEventGetParticipationStatus((uint64_t)OwningCalendarItem) == 2
    || !_CalEventIsDisplayable((uint64_t)OwningCalendarItem)
    || _CalCalendarItemGetStatus((uint64_t)OwningCalendarItem) == 3)
  {
    return 0;
  }
  _CalEventGetCalendarId((uint64_t)OwningCalendarItem);
  CalendarWithUID = _CalGetCalendarWithUID(v5);
  if (CalendarWithUID)
  {
    v7 = CalendarWithUID;
    _CalCalendarGetStoreId(CalendarWithUID);
    v8 = _CalGetStoreWithUID(v5);
    if (!v8)
      return !_CalCalendarIsIgnoringEventAlerts(v7);
    v9 = v8;
    if (_CalStoreIsEnabled(v8) && !_CalStoreIsDelegate(v9))
      return !_CalCalendarIsIgnoringEventAlerts(v7);
    return 0;
  }
  return v4;
}

BOOL CalAlarmIsDisplayable(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsDisplayable;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsDisplayable = _CalAlarmIsDisplayable(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsDisplayable;
}

__CFString *_CreateQueryStringForCalendarIDsWithPropertyName(const __CFArray *a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const __CFAllocator *v7;
  __CFString *Mutable;
  __CFString *v9;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  const __CFString *v12;
  const __CFString *v13;
  unsigned int valuePtr;

  Count = CFArrayGetCount(a1);
  v5 = Count - 1;
  if (Count < 1)
    return 0;
  v6 = Count;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v9 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR(" AND %@ IN ("), a2);
    for (i = 0; i != v6; ++i)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
      valuePtr = -1;
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      if (valuePtr != -1)
      {
        if (v5 == i)
          v12 = CFStringCreateWithFormat(v7, 0, CFSTR("%d)"), valuePtr);
        else
          v12 = CFStringCreateWithFormat(v7, 0, CFSTR("%d, "), valuePtr);
        if (v12)
        {
          v13 = v12;
          CFStringAppend(v9, v12);
          CFRelease(v13);
        }
      }
    }
  }
  return v9;
}

uint64_t _CalCopyAbsoluteCalendarItemAlarmsInDateRange(uint64_t a1, const __CFArray *a2)
{
  uint64_t RecordStore;
  CFMutableStringRef MutableCopy;
  __CFString *v5;
  __CFString *QueryStringForCalendarIDsWithPropertyName;
  __CFString *v7;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (RecordStore)
  {
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("JOIN CalendarItem ON calendaritem_owner_id = CalendarItem.ROWID JOIN Calendar ON CalendarItem.calendar_id = Calendar.ROWID JOIN Store ON Calendar.store_id = Store.ROWID WHERE Store.delegated_account_owner_store_id IS NULL AND trigger_date IS NOT NULL AND completion_date IS NULL AND (trigger_date >= ? AND trigger_date <= ?) AND CalendarItem.has_recurrences = 0"));
    if (MutableCopy)
    {
      v5 = MutableCopy;
      if (a2)
      {
        QueryStringForCalendarIDsWithPropertyName = _CreateQueryStringForCalendarIDsWithPropertyName(a2, (uint64_t)CFSTR("CalendarItem.calendar_id"));
        if (QueryStringForCalendarIDsWithPropertyName)
        {
          v7 = QueryStringForCalendarIDsWithPropertyName;
          CFStringAppend(v5, QueryStringForCalendarIDsWithPropertyName);
          CFRelease(v7);
        }
      }
      if (CDBLockingAssertionsEnabled)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      RecordStore = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return RecordStore;
}

uint64_t _CalCopyRelativeNonRecurringEventAlarmsInDateRange(uint64_t a1, const __CFArray *a2, int a3, int a4, sqlite3 *a5, double a6, double a7, double a8, double a9)
{
  uint64_t RecordStore;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v20;
  int function;
  int v22;
  NSObject *v23;
  CFMutableStringRef MutableCopy;
  __CFString *v25;
  __CFString *QueryStringForCalendarIDsWithPropertyName;
  __CFString *v27;
  uint64_t SelectStatement;
  const void *v29;
  const os_unfair_lock *v30;
  const os_unfair_lock *v31;
  _QWORD pApp[4];
  int v34;
  int v35;
  uint8_t buf[4];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (!Database)
      return 0;
    v20 = Database;
    *(double *)pApp = a6;
    *(double *)&pApp[1] = a7;
    *(double *)&pApp[2] = a8;
    *(double *)&pApp[3] = a9;
    v34 = a3;
    v35 = a4;
    function = sqlite3_create_function(a5, "MATCH_DATE_RANGE", 11, 526337, pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))MatchDateRangeCallback, 0, 0);
    if (function)
    {
      v22 = function;
      v23 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v37 = v22;
        _os_log_impl(&dword_1A5CCB000, v23, OS_LOG_TYPE_ERROR, "Failed to create MATCH_DATE_RANGE function in CalCopyRelativeNonRecurringEventAlarmsInDateRange, with error code: %i", buf, 8u);
      }
      return 0;
    }
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("JOIN CalendarItem ON calendaritem_owner_id = CalendarItem.ROWID JOIN Calendar ON CalendarItem.calendar_id = Calendar.ROWID JOIN Store ON Calendar.store_id = Store.ROWID WHERE     Store.delegated_account_owner_store_id IS NULL     AND ((proximity = 0 OR proximity IS NULL)     AND trigger_date IS NULL     AND has_recurrences = 0     AND MATCH_DATE_RANGE(start_tz, start_date, travel_time, trigger_interval, all_day, default_all_day_alarm_offset, default_alarm_offset, default_alarm, has_recurrences, NULL, NULL) "));
    if (MutableCopy)
    {
      v25 = MutableCopy;
      if (a2)
      {
        QueryStringForCalendarIDsWithPropertyName = _CreateQueryStringForCalendarIDsWithPropertyName(a2, (uint64_t)CFSTR("CalendarItem.calendar_id"));
        if (QueryStringForCalendarIDsWithPropertyName)
        {
          v27 = QueryStringForCalendarIDsWithPropertyName;
          CFStringAppend(v25, QueryStringForCalendarIDsWithPropertyName);
          CFRelease(v27);
        }
      }
      CFStringAppend(v25, CFSTR(")"));
      SelectStatement = CPRecordStoreCreateSelectStatement();
      if (SelectStatement)
      {
        v29 = (const void *)SelectStatement;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)(v20 + 104))
          {
            v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v30)
              os_unfair_lock_assert_owner(v30 + 20);
          }
        }
        if (CPSqliteDatabaseStatementForReading())
        {
          if (CDBLockingAssertionsEnabled)
          {
            v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v31)
              os_unfair_lock_assert_owner(v31 + 20);
          }
          RecordStore = CPRecordStoreProcessStatement();
        }
        else
        {
          RecordStore = 0;
        }
        CFRelease(v29);
      }
      else
      {
        RecordStore = 0;
      }
      CFRelease(v25);
    }
    else
    {
      RecordStore = 0;
    }
    sqlite3_create_function(a5, "MATCH_DATE_RANGE", 11, 526337, 0, 0, 0, 0);
  }
  return RecordStore;
}

void MatchDateRangeCallback(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  NSObject *v6;
  void *v7;
  int v8;
  int v9;
  double v10;
  double v11;
  const unsigned __int8 *v12;
  int v13;
  double v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  int v27;
  sqlite3_context *v28;
  BOOL v29;
  double v30;
  int v31;
  sqlite3_context *v32;
  uint8_t buf[4];
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a2 != 11)
  {
    v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v34 = a2;
      _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "MatchDateRangeCallback received wrong number of args. [%i args]", buf, 8u);
    }
  }
  v32 = a1;
  v7 = sqlite3_user_data(a1);
  v9 = *((_DWORD *)v7 + 8);
  v8 = *((_DWORD *)v7 + 9);
  v10 = *(double *)v7;
  v11 = *((double *)v7 + 1);
  v12 = sqlite3_value_text(*a3);
  v13 = sqlite3_value_bytes(*a3);
  if (v12 && !strncmp((const char *)v12, "_float", v13))
  {
    v10 = *((double *)v7 + 2);
    v11 = *((double *)v7 + 3);
    v31 = 1;
  }
  else
  {
    v31 = 0;
  }
  v14 = sqlite3_value_double(a3[1]);
  v15 = sqlite3_value_int(a3[2]);
  v16 = sqlite3_value_int(a3[3]);
  v17 = sqlite3_value_int(a3[4]);
  if (sqlite3_value_type(a3[5]) != 5)
    v8 = sqlite3_value_int(a3[5]);
  if (sqlite3_value_type(a3[6]) != 5)
    v9 = sqlite3_value_int(a3[6]);
  v18 = sqlite3_value_int(a3[7]);
  v19 = sqlite3_value_int(a3[8]);
  v20 = sqlite3_value_type(a3[9]);
  v21 = 0.0;
  v22 = 0.0;
  if (v20 != 5)
    v22 = sqlite3_value_double(a3[9]);
  v23 = sqlite3_value_type(a3[10]);
  if (v23 != 5)
    v21 = sqlite3_value_double(a3[10]);
  if (v18 == 1 && (v17 != 1 ? (v16 = v9) : (v16 = v8), v16 == -1)
    || (v24 = (double)v15, v25 = (double)v16, v26 = v14 - (double)v15 + (double)v16, v26 > v11))
  {
    v27 = 0;
    v28 = v32;
  }
  else
  {
    v28 = v32;
    if (v19 == 1)
    {
      if (v20 == 5)
      {
        if (v23 == 5)
        {
          v27 = 1;
          goto LABEL_35;
        }
        v30 = v21 - v24 + v25;
        if (v31)
          v30 = v30 + 172800.0;
      }
      else
      {
        v30 = v22 - v24 + v25;
      }
      v29 = v30 < v10;
    }
    else
    {
      v29 = v26 < v10;
    }
    v27 = !v29;
  }
LABEL_35:
  sqlite3_result_int(v28, v27);
}

uint64_t _CalCopyRelativeRecurringEventAlarmsInDateRange(uint64_t a1, const __CFArray *a2, int a3, int a4, sqlite3 *a5, double a6, double a7, double a8, double a9)
{
  uint64_t RecordStore;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v20;
  int function;
  int v22;
  NSObject *v23;
  CFMutableStringRef MutableCopy;
  __CFString *v25;
  __CFString *QueryStringForCalendarIDsWithPropertyName;
  __CFString *v27;
  uint64_t SelectStatement;
  const void *v29;
  const os_unfair_lock *v30;
  const os_unfair_lock *v31;
  _QWORD pApp[4];
  int v34;
  int v35;
  uint8_t buf[4];
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (RecordStore)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (!Database)
      return 0;
    v20 = Database;
    *(double *)pApp = a6;
    *(double *)&pApp[1] = a7;
    *(double *)&pApp[2] = a8;
    *(double *)&pApp[3] = a9;
    v34 = a3;
    v35 = a4;
    function = sqlite3_create_function(a5, "MATCH_DATE_RANGE", 11, 526337, pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))MatchDateRangeCallback, 0, 0);
    if (function)
    {
      v22 = function;
      v23 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v37 = v22;
        _os_log_impl(&dword_1A5CCB000, v23, OS_LOG_TYPE_ERROR, "Failed to create MATCH_DATE_RANGE function in CalCopyRelativeRecurringEventAlarmsInDateRange, with error code: %i", buf, 8u);
      }
      return 0;
    }
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("JOIN CalendarItem ON calendaritem_owner_id = CalendarItem.ROWID JOIN Calendar ON CalendarItem.calendar_id = Calendar.ROWID JOIN Store ON Calendar.store_id = Store.ROWID JOIN Recurrence on Recurrence.owner_id = CalendarItem.ROWID WHERE     Store.delegated_account_owner_store_id IS NULL     AND ((proximity = 0 OR proximity IS NULL)     AND trigger_date IS NULL     AND has_recurrences = 1     AND MATCH_DATE_RANGE(start_tz, start_date, travel_time, trigger_interval, all_day, default_all_day_alarm_offset, default_alarm_offset, default_alarm, has_recurrences, Recurrence.end_date, Recurrence.cached_end_date) "));
    if (MutableCopy)
    {
      v25 = MutableCopy;
      if (a2)
      {
        QueryStringForCalendarIDsWithPropertyName = _CreateQueryStringForCalendarIDsWithPropertyName(a2, (uint64_t)CFSTR("CalendarItem.calendar_id"));
        if (QueryStringForCalendarIDsWithPropertyName)
        {
          v27 = QueryStringForCalendarIDsWithPropertyName;
          CFStringAppend(v25, QueryStringForCalendarIDsWithPropertyName);
          CFRelease(v27);
        }
      }
      CFStringAppend(v25, CFSTR(")"));
      SelectStatement = CPRecordStoreCreateSelectStatement();
      if (SelectStatement)
      {
        v29 = (const void *)SelectStatement;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)(v20 + 104))
          {
            v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v30)
              os_unfair_lock_assert_owner(v30 + 20);
          }
        }
        if (CPSqliteDatabaseStatementForReading())
        {
          if (CDBLockingAssertionsEnabled)
          {
            v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v31)
              os_unfair_lock_assert_owner(v31 + 20);
          }
          RecordStore = CPRecordStoreProcessStatement();
        }
        else
        {
          RecordStore = 0;
        }
        CFRelease(v29);
      }
      else
      {
        RecordStore = 0;
      }
      CFRelease(v25);
    }
    else
    {
      RecordStore = 0;
    }
    sqlite3_create_function(a5, "MATCH_DATE_RANGE", 11, 526337, 0, 0, 0, 0);
  }
  return RecordStore;
}

uint64_t CalDatabaseCopyAlarmChangesInStore(const void *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  CFStringRef v8;
  uint64_t v9;

  if (a2)
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  else
    v5 = (os_unfair_lock_s *)CFRetain(a1);
  v6 = v5;
  v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  v8 = _CalAlarmCopyChangeHistoryWhereClauseForStore((uint64_t)v6, a2);
  v9 = _CalDatabaseCopyAlarmChangesInternal((uint64_t)v6, (uint64_t)v8, a3);
  if (v8)
    CFRelease(v8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7);
  os_unfair_lock_unlock(v7);
  if (v6)
    CFRelease(v6);
  return v9;
}

CFStringRef _CalAlarmCopyChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t ID;
  CFStringRef v6;

  v6 = 0;
  if (a2)
  {
    v3 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN     (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN     (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v3, v3, 4, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t _CalDatabaseCopyAlarmChangesInternal(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

uint64_t CalDatabaseRemoveAlarmChangesInStoreToIndex(const void *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  _QWORD v10[7];
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (a2)
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  else
    v5 = (os_unfair_lock_s *)CFRetain(a1);
  v6 = v5;
  v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __CalDatabaseRemoveAlarmChangesInStoreToIndex_block_invoke;
  v10[3] = &unk_1E4F84BF0;
  v10[4] = &v12;
  v10[5] = v6;
  v10[6] = a2;
  v11 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v6, (uint64_t)v10);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7);
  os_unfair_lock_unlock(v7);
  CFRelease(v6);
  v8 = *((unsigned __int8 *)v13 + 24);
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1A5D50958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalDatabaseRemoveAlarmChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3;
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t v7;

  v3 = _CalAlarmCopyChangeHistoryWhereClauseForStore(a1, a2);
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3)
    CFRelease(v3);
  return v7;
}

uint64_t CalDatabaseRemoveAlarmChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __CalDatabaseRemoveAlarmChangesWithIndices_block_invoke;
  v7[3] = &unk_1E4F84C18;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A5D50B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyAlarmChangesInCalendar(const void *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  CFStringRef v8;
  uint64_t v9;

  if (a2)
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  else
    v5 = (os_unfair_lock_s *)CFRetain(a1);
  v6 = v5;
  v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  v8 = _CalAlarmCopyChangeHistoryWhereClauseForCalendar((uint64_t)v6, a2);
  v9 = _CalDatabaseCopyAlarmChangesInternal((uint64_t)v6, (uint64_t)v8, a3);
  if (v8)
    CFRelease(v8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7);
  os_unfair_lock_unlock(v7);
  if (v6)
    CFRelease(v6);
  return v9;
}

CFStringRef _CalAlarmCopyChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t ID;
  CFStringRef v6;

  v6 = 0;
  if (a2)
  {
    v3 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("calendar_id = %d AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@') AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@') AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v3, v3, 4, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t CalDatabaseRemoveAlarmChangesInCalendarToIndex(const void *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  CFStringRef v8;
  uint64_t v9;
  _QWORD v11[7];
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  if (a2)
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  else
    v5 = (os_unfair_lock_s *)CFRetain(a1);
  v6 = v5;
  v7 = v5 + 20;
  os_unfair_lock_lock(v5 + 20);
  v8 = _CalAlarmCopyChangeHistoryWhereClauseForCalendar((uint64_t)v6, a2);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __CalDatabaseRemoveAlarmChangesInCalendarToIndex_block_invoke;
  v11[3] = &unk_1E4F84BF0;
  v11[4] = &v13;
  v11[5] = v6;
  v12 = a3;
  v11[6] = v8;
  _CalDatabaseLockForWriteTransaction((uint64_t)v6, (uint64_t)v11);
  if (v8)
    CFRelease(v8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7);
  os_unfair_lock_unlock(v7);
  CFRelease(v6);
  v9 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_1A5D50DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalDatabasePrepareAlarmsInStoreForMigration(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t ID;
  uint64_t result;
  const void *v8;

  ID = CPRecordGetID();
  result = _CalDatabaseRemoveAlarmChangesInStoreToIndex(a1, a3);
  if ((_DWORD)result)
  {
    result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE Alarm SET external_mod_tag = NULL, external_id_tag = NULL, external_rep = NULL                                                                           WHERE calendaritem_owner_id IN (SELECT CalendarItem.ROWID FROM CalendarItem JOIN Calendar ON calendar_id = Calendar.ROWID WHERE store_id = %d)                                                                           OR calendar_owner_id IN (SELECT Calendar.ROWID FROM Calendar WHERE store_id = %d);"),
                        ID,
                        ID);
    if (result)
    {
      v8 = (const void *)result;
      CalPerformSQLWithConnection(a2, result);
      CFRelease(v8);
      return 1;
    }
  }
  return result;
}

uint64_t CalDatabaseCopyLocationBasedAlarmsForIncompleteTasks(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t v6;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t CalDatabaseCopyLocationBasedAlarmsForCalendars(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t v6;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t CalDatabaseCopyVehicleTriggerAlarmsForIncompleteTasks(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t v6;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v6;
}

uint64_t CalAlarmCopyDefaultTimedAlarmOffsetWithPreferences(void *a1)
{
  objc_msgSend(a1, "get_DefaultTimedAlarmOffset");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t CalAlarmCopyDefaultAllDayAlarmOffsetWithPreferences(void *a1)
{
  objc_msgSend(a1, "get_DefaultAllDayAlarmOffset");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t CalAlarmSetDefaultTimedAlarmOffsetWithPreferences(void *a1, const char *a2)
{
  return objc_msgSend(a1, "set_DefaultTimedAlarmOffset:", a2);
}

uint64_t CalAlarmSetDefaultAllDayAlarmOffsetWithPreferences(void *a1, const char *a2)
{
  return objc_msgSend(a1, "set_DefaultAllDayAlarmOffset:", a2);
}

uint64_t CalAlarmCopyDefaultTimedAlarmOffset()
{
  void *v0;
  uint64_t v1;

  +[CDBPreferences shared](CDBPreferences, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "get_DefaultTimedAlarmOffset");
  v1 = objc_claimAutoreleasedReturnValue();

  return v1;
}

void CalAlarmSetDefaultTimedAlarmOffset(uint64_t a1)
{
  id v2;

  +[CDBPreferences shared](CDBPreferences, "shared");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "set_DefaultTimedAlarmOffset:", a1);

}

uint64_t CalAlarmCopyDefaultAllDayAlarmOffset()
{
  void *v0;
  uint64_t v1;

  +[CDBPreferences shared](CDBPreferences, "shared");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "get_DefaultAllDayAlarmOffset");
  v1 = objc_claimAutoreleasedReturnValue();

  return v1;
}

void CalAlarmSetDefaultAllDayAlarmOffset(uint64_t a1)
{
  id v2;

  +[CDBPreferences shared](CDBPreferences, "shared");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "set_DefaultAllDayAlarmOffset:", a1);

}

CFTypeRef _CalAlarmLoadStoreId(uint64_t a1)
{
  CFTypeRef OwningCalendarItem;
  CFTypeRef result;
  int Type;
  const os_unfair_lock *Context;

  OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
  if (OwningCalendarItem || (result = _CalAlarmGetOwningCalendar(a1), (OwningCalendarItem = result) != 0))
  {
    Type = _CalEntityGetType(OwningCalendarItem);
    if ((Type & 0xFFFFFFFE) == 2)
    {
      _CalCalendarItemGetStoreId((uint64_t)OwningCalendarItem);
    }
    else
    {
      if (Type != 1)
      {
        if (!a1)
          return (CFTypeRef)CPRecordInitializeProperty();
LABEL_10:
        if (CDBLockingAssertionsEnabled && CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
        return (CFTypeRef)CPRecordInitializeProperty();
      }
      _CalCalendarGetStoreId((uint64_t)OwningCalendarItem);
    }
    if (!a1)
      return (CFTypeRef)CPRecordInitializeProperty();
    goto LABEL_10;
  }
  return result;
}

CFTypeRef _CalAlarmLoadCalendarId(uint64_t a1)
{
  CFTypeRef OwningCalendarItem;
  CFTypeRef result;
  int Type;
  const os_unfair_lock *Context;

  OwningCalendarItem = _CalAlarmGetOwningCalendarItem(a1);
  if (OwningCalendarItem || (result = _CalAlarmGetOwningCalendar(a1), (OwningCalendarItem = result) != 0))
  {
    Type = _CalEntityGetType(OwningCalendarItem);
    if ((Type & 0xFFFFFFFE) == 2)
    {
      _CalEventGetCalendarId((uint64_t)OwningCalendarItem);
    }
    else
    {
      if (Type != 1)
      {
        if (!a1)
          return (CFTypeRef)CPRecordInitializeProperty();
LABEL_10:
        if (CDBLockingAssertionsEnabled && CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
        return (CFTypeRef)CPRecordInitializeProperty();
      }
      CPRecordGetID();
    }
    if (!a1)
      return (CFTypeRef)CPRecordInitializeProperty();
    goto LABEL_10;
  }
  return result;
}

id CalGetRealUIDFromRecurrenceUID(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  objc_msgSend(v1, "componentsSeparatedByString:", CFSTR("/RID="));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v1;
  if (objc_msgSend(v2, "count"))
  {
    objc_msgSend(v2, "objectAtIndex:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v3;
}

id CalGetRecurrenceUIDFromRealUID(void *a1, double a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)MEMORY[0x1E0CB3940];
  CalGetRealUIDFromRecurrenceUID(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/RID=%llu"), v4, (unint64_t)a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

double _CalOriginalStartDateFromICSComponent(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t DateTimeFromICSDate;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "recurrence_id");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(v3, "recurrence_id");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    DateTimeFromICSDate = CalCreateDateTimeFromICSDate(v6, v4);

    CalDateTimeRelease();
  }
  else
  {
    DateTimeFromICSDate = *MEMORY[0x1E0D0C490];
  }

  return *(double *)&DateTimeFromICSDate;
}

void CalCalendarItemUpdateUIDFromICSComponent(uint64_t a1, void *a2, void *a3)
{
  double started;
  void *v6;
  double v7;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  started = _CalOriginalStartDateFromICSComponent(v11, a3);
  objc_msgSend(v11, "uid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = fabs(started);
  if (vabdd_f64(started, *MEMORY[0x1E0D0C490]) >= 2.22044605e-16 && v7 >= 2.22044605e-16)
  {
    objc_msgSend(v11, "uid", 2.22044605e-16, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    CalGetRecurrenceUIDFromRealUID(v9, started);
    v10 = objc_claimAutoreleasedReturnValue();

    v6 = (void *)v10;
  }
  if (v6)
    CalCalendarItemSetUniqueIdentifier(a1, (uint64_t)v6);

}

uint64_t CalCalendarItemUpdateFromICSComponent(const void *a1, uint64_t a2, void *a3, void *a4, os_unfair_lock_s *a5, void *a6, void *a7, void *a8, unsigned __int8 a9)
{
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t DateTimeFromICSDate;
  const __CFString *v25;
  const __CFString *v26;
  CFAbsoluteTime v27;
  CFDateRef v28;
  void *started;
  const __CFDate *v30;
  __CFString *v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  CFTimeZoneRef v36;
  void *v37;
  const __CFString *v38;
  __CFString *v39;
  CFComparisonResult v40;
  __CFString *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  CFTypeRef v54;
  const void *v55;
  uint64_t v56;
  void *v57;
  char v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  CFTypeRef Location;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const __CFArray *v76;
  const __CFArray *v77;
  CFIndex Count;
  NSObject *v79;
  const __CFString *v80;
  const __CFString *v81;
  CFIndex v82;
  BOOL v83;
  const void *ValueAtIndex;
  NSObject *v85;
  const __CFString *v86;
  NSObject *v87;
  NSObject *v88;
  NSObject *v89;
  const char *v90;
  NSObject *v91;
  NSObject *v92;
  __CFString *v93;
  __CFString *v94;
  __CFString *v95;
  unsigned int v96;
  void *v97;
  void *v98;
  id v99;
  void *v100;
  CFTypeRef v101;
  void *v102;
  void *v103;
  id v104;
  void *v105;
  CFTypeRef v106;
  void *v107;
  unsigned int v108;
  const __CFURL *v109;
  void *v110;
  NSObject *v111;
  CFTypeRef DebugDescription;
  const __CFArray *v113;
  const __CFArray *v114;
  __CFDictionary *Mutable;
  CFIndex v116;
  CFMutableArrayRef v117;
  __CFDictionary *v118;
  const void *v119;
  void *v120;
  const void *v121;
  void *v122;
  void *v123;
  NSObject *v124;
  CFIndex v125;
  CFTypeRef v126;
  CFIndex v127;
  CFIndex v128;
  CFIndex i;
  const void *v130;
  void *v131;
  NSObject *v132;
  CFIndex v133;
  CFTypeRef v134;
  void *v135;
  void *v136;
  void *v137;
  NSObject *v138;
  void *v139;
  void *v140;
  CFTypeRef v141;
  double v142;
  uint64_t v143;
  void *v144;
  void *v145;
  void *v146;
  void *Value;
  void *Attendee;
  double ProposedStartDate;
  _BOOL4 ProposedStartDateChanged;
  BOOL v151;
  void *v152;
  NSObject *v153;
  CFTypeRef v154;
  void *v155;
  void *v156;
  NSObject *v157;
  CFTypeRef v158;
  void *v159;
  unsigned int ProposedStartDateStatus;
  double v161;
  _BOOL4 v162;
  int v163;
  void *v165;
  NSObject *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  int v172;
  void *v173;
  NSObject *v174;
  CFIndex v175;
  CFTypeRef v176;
  __CFDictionary *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t j;
  const __CFArray *v182;
  void *v183;
  CFTypeRef Organizer;
  void *v185;
  void *v186;
  void *v187;
  unsigned int v188;
  void *v189;
  NSObject *v190;
  const __CFDate *v191;
  const __CFString *CFDateFromICSDateAsUTC;
  uint64_t v193;
  __CFString *v194;
  const __CFString *v195;
  id v196;
  const __CFArray *v197;
  const __CFArray *v198;
  CFIndex v199;
  CFIndex v200;
  CFIndex k;
  void *v202;
  CFURLRef v203;
  void *v204;
  void *v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  const __CFURL *v213;
  void *v214;
  void *Attachment;
  CFTypeRef v216;
  const void *v217;
  CFTypeRef v218;
  const void *v219;
  uint64_t v220;
  uint64_t v221;
  id v222;
  id v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t m;
  uint64_t v229;
  NSObject *v230;
  id v231;
  id v232;
  const __CFArray *v233;
  int v234;
  const __CFArray *v235;
  CFIndex v236;
  CFIndex v237;
  CFIndex n;
  void *v239;
  uint64_t v240;
  const void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  void *v249;
  char IsInvalidAlarmDate;
  void *v251;
  void *Alarm;
  void *v253;
  NSObject *v254;
  unsigned int v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  int Type;
  _BOOL4 IsDefaultAlarm;
  int v264;
  uint64_t v265;
  const void *v266;
  void *v267;
  const __CFArray *v268;
  void *v269;
  CFIndex v270;
  const void *v271;
  void *v272;
  id v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t ii;
  void *v278;
  void *v279;
  void *v280;
  uint64_t v281;
  void *v282;
  void *v283;
  const __CFArray *v285;
  const __CFArray *v286;
  const __CFArray *MutableCopy;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t jj;
  void *v293;
  void *Recurrence;
  int v295;
  uint64_t v296;
  const __CFArray *v297;
  unint64_t v298;
  uint64_t v299;
  void *v300;
  char v301;
  NSObject *v302;
  CFIndex v303;
  CFIndex v304;
  CFIndex kk;
  void *v306;
  id v307;
  id v308;
  void *v309;
  CFIndex v310;
  __CFSet *v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t mm;
  double v317;
  CFDateRef v318;
  CFDateRef v319;
  const __CFArray *v320;
  const __CFArray *v321;
  id v322;
  CFIndex v323;
  CFIndex v324;
  CFIndex nn;
  void *v326;
  const void *v327;
  const void *v328;
  int64_t v329;
  const void **v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t v333;
  void *ExceptionDateWithDateAndOrder;
  id v335;
  void *v336;
  int v337;
  uint64_t i1;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t i2;
  const __CFString *v344;
  int EntityType;
  const void *v346;
  const void *CategoryWithNameAndEntityType;
  void *v348;
  unsigned int v349;
  void *v350;
  void *v351;
  const __CFArray *v352;
  const __CFArray *v353;
  CFIndex v354;
  unint64_t v355;
  const void *v356;
  void *v357;
  void *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t i3;
  uint64_t v363;
  void *v364;
  void *Contact;
  id v366;
  void *v367;
  uint64_t v368;
  void *v369;
  void *v370;
  const __CFURL *v371;
  __int128 v372;
  CFMutableSetRef v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t i4;
  const __CFArray *v379;
  const __CFArray *v380;
  CFIndex v381;
  CFIndex v382;
  CFIndex i5;
  const void *v384;
  id v385;
  void *v386;
  id v387;
  uint64_t i6;
  void *v389;
  void *v390;
  void *v391;
  void *v392;
  void *v393;
  uint64_t v394;
  id v395;
  void *Conference;
  void *v397;
  void *v398;
  id v399;
  void *v400;
  void *v401;
  void *v402;
  void *v403;
  void *v404;
  void *v405;
  void *v406;
  void *v407;
  id v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t i7;
  void *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t i8;
  const __CFDate *v418;
  CFDateRef v419;
  void *v420;
  void *v421;
  void *v422;
  void *v423;
  void *v424;
  const void *v425;
  NSObject *v427;
  NSObject *v428;
  NSObject *v429;
  void *v430;
  id v431;
  void *v432;
  void *v433;
  void *v434;
  void *v435;
  void *v436;
  id v437;
  void *v438;
  id v439;
  id v440;
  int v441;
  id obj;
  __CFString *obja;
  void *v444;
  void *v445;
  uint64_t v446;
  id v447;
  id v448;
  __CFDictionary *v449;
  char v450;
  uint64_t v451;
  void *v452;
  id v453;
  id v454;
  id v455;
  id v456;
  id v457;
  id v458;
  char v459;
  char v460;
  id v461;
  id v462;
  id v463;
  id v464;
  __CFSet *v465;
  uint64_t cf;
  const void *cfd;
  id cfa;
  void *cfb;
  uint64_t cfc;
  void *v471;
  id v472;
  id v473;
  id v474;
  uint64_t v475;
  int v476;
  uint64_t v477;
  id v478;
  CFIndex v479;
  void *v480;
  void *v481;
  void *v482;
  void *v483;
  uint64_t v484;
  uint64_t v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  _QWORD v494[5];
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  CFSetCallBacks callBacks;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  uint8_t v504[16];
  __int128 v505;
  __int128 v506;
  __int128 v507;
  uint8_t v508[32];
  __int128 v509;
  __int128 v510;
  uint8_t buf[4];
  _BYTE v512[24];
  uint8_t v513[16];
  __int128 v514;
  __int128 v515;
  __int128 v516;
  uint64_t v517;

  v517 = *MEMORY[0x1E0C80C00];
  v16 = a3;
  v439 = a4;
  v17 = a6;
  v437 = a7;
  v18 = a8;
  v438 = v17;
  objc_msgSend(v17, "objectForKey:", CFSTR("ItemBridgeOptions"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v446 = objc_msgSend(v19, "unsignedIntegerValue");

  if (!v16)
  {
    v33 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v33, OS_LOG_TYPE_DEBUG, "icsItem is nil. There's nothing for us to do", buf, 2u);
    }
    v34 = 1;
    goto LABEL_536;
  }
  if (!a1)
  {
    v35 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v35, OS_LOG_TYPE_DEBUG, "Cannot update a NULL calendar item", buf, 2u);
    }
    v34 = 0;
    goto LABEL_536;
  }
  v436 = v18;
  v431 = v16;
  v20 = v16;
  v21 = v439;
  objc_msgSend(v20, "dtstart");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v471 = v21;
  if (v22)
  {
    objc_msgSend(v20, "dtstart");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    DateTimeFromICSDate = CalCreateDateTimeFromICSDate(v23, v21);
    v26 = v25;
    v27 = *(double *)&DateTimeFromICSDate;

    v28 = CFDateCreate(0, v27);
    started = (void *)CalCalendarItemCopyStartDate((uint64_t)a1);
    v30 = v28;
    v31 = (__CFString *)v30;
    if (!started && v30 || started && (objc_msgSend(started, "isEqualToDate:", v30) & 1) == 0)
    {
      CalCalendarItemSetStartDate((uint64_t)a1, v31);
      v32 = 1;
    }
    else
    {
      v32 = 0;
    }
    if (CFStringCompare(v26, CFSTR("_float"), 0))
      v36 = CFTimeZoneCreateWithName(0, v26, 1u);
    else
      v36 = 0;
    CalCalendarItemSetStartTimeZone((uint64_t)a1, (uint64_t)v36);
    if (CalEntityIsOfType(a1, 2))
      CalCalendarItemSetEndTimeZone((uint64_t)a1, (uint64_t)v36);
    if (v36)
      CFRelease(v36);
    CalDateTimeRelease();
    if (v31)
      CFRelease(v31);

    v21 = v471;
    if (v32)
      objc_msgSend(v436, "addObject:", II_FROM_KEY);
  }
  else
  {

  }
  if ((v446 & 0x20000000) != 0)
  {
    objc_msgSend(v20, "summary");
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v37)
      goto LABEL_35;
  }
  if (v436)
  {
    v38 = (const __CFString *)CalCalendarItemCopySummary((uint64_t)a1);
    objc_msgSend(v20, "summary");
    v39 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v40 = CFStringCompare(v38, v39, 0);

    if (v40)
      objc_msgSend(v436, "addObject:", II_EVENT_TITLE_KEY);
    CFRelease(v38);
  }
  objc_msgSend(v20, "summary");
  v41 = (__CFString *)objc_claimAutoreleasedReturnValue();
  CalCalendarItemSetSummary((uint64_t)a1, v41);

  if ((v446 & 0x20000000) != 0)
  {
LABEL_35:
    objc_msgSend(v20, "location");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    if (v42)
    {

    }
    else
    {
      objc_msgSend(v20, "x_apple_structured_location");
      v43 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v43)
        goto LABEL_60;
    }
  }
  v44 = v20;
  objc_msgSend(v44, "x_apple_structured_location");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = v45;
  if (v45)
  {
    v47 = (void *)MEMORY[0x1E0D0C328];
    objc_msgSend(v45, "title");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "address");
    v49 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "fullDisplayStringWithTitle:address:", v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v44, "location");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v49) = objc_msgSend(v51, "isEqualToString:", v50);

    if ((v49 & 1) != 0)
    {
      if (v50)
        goto LABEL_44;
    }
    else
    {

      v46 = 0;
    }
  }
  objc_msgSend(v44, "location");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_44:
  objc_msgSend(v46, "value");
  v52 = (void *)objc_claimAutoreleasedReturnValue();

  if (v52)
  {
LABEL_45:
    CalCalendarItemSetClientLocation((uint64_t)a1, 0);
    LODWORD(v53) = 1;
    goto LABEL_53;
  }
  v54 = CalCalendarItemCopyClientLocation((uint64_t)a1);
  if (!v54)
    goto LABEL_52;
  v55 = v54;
  v56 = CalLocationCopyDerivedFrom((uint64_t)v54);
  if (!v56)
  {
    v453 = (id)CalLocationCopyTitle((uint64_t)v55);
    v59 = (void *)CalLocationCopyAddress((uint64_t)v55);
    objc_msgSend(MEMORY[0x1E0D0C328], "fullDisplayStringWithTitle:address:", v453, v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v459 = objc_msgSend(v50, "isEqualToString:", v60);

    CFRelease(v55);
    if ((v459 & 1) == 0)
      goto LABEL_45;
LABEL_52:
    LODWORD(v53) = 0;
    goto LABEL_53;
  }
  v57 = (void *)v56;
  if (objc_msgSend(v50, "length"))
  {
    v58 = objc_msgSend(v50, "isEqualToString:", v57);
    CFRelease(v55);

    if ((v58 & 1) == 0)
      goto LABEL_45;
    goto LABEL_52;
  }
  v53 = objc_msgSend(v57, "length");
  CFRelease(v55);

  if (v53)
    goto LABEL_45;
LABEL_53:
  if (v46
    || (objc_msgSend(v44, "location"),
        v61 = (void *)objc_claimAutoreleasedReturnValue(),
        v62 = objc_msgSend(v61, "length"),
        v61,
        v62))
  {
    Location = CalCalendarItemCopyLocation((uint64_t)a1);
    if (!Location)
    {
      Location = CalDatabaseCreateLocation(a5);
      CalCalendarItemSetLocation((uint64_t)a1, Location);
    }
    CalLocationUpdateFromICSComponent((uint64_t)Location, v44, 1, 0);
    CFRelease(Location);
  }
  else
  {
    CalCalendarItemSetLocation((uint64_t)a1, 0);
  }
  v21 = v471;

  if ((_DWORD)v53)
    objc_msgSend(v436, "addObject:", II_LOCATION_KEY);
LABEL_60:
  if (a2)
    v64 = a2;
  else
    v64 = (uint64_t)a1;
  v430 = (void *)CalCalendarItemCopyDescription(v64);
  objc_msgSend(MEMORY[0x1E0D0C280], "deserializeConference:");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = (void *)MEMORY[0x1E0D0C280];
  objc_msgSend(v20, "description");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "deserializeConference:", v67);
  v68 = (void *)objc_claimAutoreleasedReturnValue();

  v433 = v65;
  objc_msgSend(v65, "conference");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v432 = v68;
  objc_msgSend(v68, "conference");
  v70 = objc_claimAutoreleasedReturnValue();
  v434 = (void *)v70;
  v435 = v69;
  v71 = a9;
  if (v69)
  {
    v71 = 1;
    v72 = 0;
  }
  else
  {
    v72 = 1;
  }
  if (v70)
  {
    LODWORD(v73) = 1;
  }
  else
  {
    v71 = 1;
    LODWORD(v73) = v72;
  }
  if (v71 == 1 && (_DWORD)v73 && (!v69 || (objc_msgSend(v69, "isEqual:", v70) & 1) != 0))
  {
    CalEventRemoveInvitationChangedProperties((uint64_t)a1, 256);
    goto LABEL_123;
  }
  objc_msgSend(v65, "blockTitle");
  v74 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v432, "blockTitle");
  v75 = objc_claimAutoreleasedReturnValue();
  v76 = CalCalendarItemCopyAttendees(v64);
  if (!v76)
  {
    v87 = (id)CDBLogHandle;
    if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v87, OS_LOG_TYPE_INFO, "VCNotification: Not searching for room attendees because we currently have no attendees.", buf, 2u);
    }

    goto LABEL_103;
  }
  v77 = v76;
  if (!(v74 | v75))
  {
    v88 = (id)CDBLogHandle;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v88, OS_LOG_TYPE_INFO, "VCNotification: Not searching for room attendees because we have no virtual conference titles.", buf, 2u);
    }

    CFRelease(v77);
    goto LABEL_103;
  }
  v460 = v73;
  Count = CFArrayGetCount(v76);
  v79 = (id)CDBLogHandle;
  if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
  {
    v80 = CFSTR("(none)");
    if (v74)
      v81 = (const __CFString *)v74;
    else
      v81 = CFSTR("(none)");
    *(_DWORD *)buf = 67109634;
    if (v75)
      v80 = (const __CFString *)v75;
    *(_DWORD *)v512 = Count;
    *(_WORD *)&v512[4] = 2112;
    *(_QWORD *)&v512[6] = v81;
    *(_WORD *)&v512[14] = 2112;
    *(_QWORD *)&v512[16] = v80;
    _os_log_impl(&dword_1A5CCB000, v79, OS_LOG_TYPE_INFO, "VCNotification: Searching for room attendee among %d attendees. Searching for room name: %@ (original) or %@ (updated)", buf, 0x1Cu);
  }

  if (Count < 1)
  {
LABEL_96:
    CFRelease(v77);
    v21 = v471;
    LOBYTE(v73) = v460;
    goto LABEL_103;
  }
  v82 = 0;
  v83 = 1;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v77, v82);
    if (CalAttendeeGetType((uint64_t)ValueAtIndex) == 2)
      break;
LABEL_95:
    v83 = ++v82 < Count;
    if (Count == v82)
      goto LABEL_96;
  }
  v73 = CalAttendeeCopyDisplayName(ValueAtIndex);
  if ((!v75 || (objc_msgSend((id)v75, "isEqualToString:", v73) & 1) == 0)
    && (!v74 || !objc_msgSend((id)v74, "isEqualToString:", v73)))
  {
    v85 = (id)CDBLogHandle;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      v86 = CFSTR("(none)");
      if (v73)
        v86 = (const __CFString *)v73;
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v512 = v86;
      _os_log_impl(&dword_1A5CCB000, v85, OS_LOG_TYPE_INFO, "VCNotification: Found a room attendee, but the name does not match: %@", buf, 0xCu);
    }

    goto LABEL_95;
  }
  v428 = (id)CDBLogHandle;
  if (os_log_type_enabled(v428, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v428, OS_LOG_TYPE_INFO, "VCNotification: Found a matching virtual conference room attendee.", buf, 2u);
  }

  CFRelease(v77);
  v21 = v471;
  LOBYTE(v73) = v460;
  if (!v83)
  {
LABEL_103:
    if (v435 || !v434)
    {
      if ((v73 & 1) != 0)
      {
        if (!v435 || !v434)
        {
LABEL_120:
          CalEventAddInvitationChangedProperties((uint64_t)a1, 256);
          if (v436)
            objc_msgSend(v436, "addObject:", II_VIDEOCONFERENCE_KEY);
          goto LABEL_122;
        }
        v91 = (id)CDBLogHandle;
        if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A5CCB000, v91, OS_LOG_TYPE_INFO, "VCNotification: Adding virtual conference invitation changed flag because a virtual conference was changed", buf, 2u);
        }

        v92 = (id)CDBLogHandle;
        if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)v512 = v435;
          _os_log_impl(&dword_1A5CCB000, v92, OS_LOG_TYPE_INFO, "VCNotification:   Old virtual conference: %@", buf, 0xCu);
        }

        v89 = (id)CDBLogHandle;
        if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)v512 = v434;
          v90 = "VCNotification:   New virtual conference: %@";
          goto LABEL_118;
        }
      }
      else
      {
        v89 = (id)CDBLogHandle;
        if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)v512 = v435;
          v90 = "VCNotification: Adding virtual conference invitation changed flag because a virtual conference was deleted (%@)";
          goto LABEL_118;
        }
      }
    }
    else
    {
      v89 = (id)CDBLogHandle;
      if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v512 = v434;
        v90 = "VCNotification: Adding virtual conference invitation changed flag because a virtual conference was added (%@)";
LABEL_118:
        _os_log_impl(&dword_1A5CCB000, v89, OS_LOG_TYPE_INFO, v90, buf, 0xCu);
      }
    }

    goto LABEL_120;
  }
  v429 = (id)CDBLogHandle;
  if (os_log_type_enabled(v429, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v429, OS_LOG_TYPE_INFO, "VCNotification: Not adding virtual conference invitation changed flag because we found a matching room attendee.", buf, 2u);
  }

LABEL_122:
LABEL_123:
  objc_msgSend(v20, "description");
  v93 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v94 = v93;
  if ((v446 & 0x20000000) == 0)
  {
    CalCalendarItemSetDescription((uint64_t)a1, v93);

LABEL_129:
    v96 = CalCalendarItemStatusFromICSStatus(objc_msgSend(v20, "status"));
    CalCalendarItemSetStatus((uint64_t)a1, v96);
    goto LABEL_130;
  }

  if (v94)
  {
    objc_msgSend(v20, "description");
    v95 = (__CFString *)objc_claimAutoreleasedReturnValue();
    CalCalendarItemSetDescription((uint64_t)a1, v95);

  }
  if (objc_msgSend(v20, "status"))
    goto LABEL_129;
LABEL_130:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if ((v446 & 0x20000000) == 0)
      goto LABEL_136;
    objc_msgSend(v20, "location");
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    if (v97)
    {

      goto LABEL_136;
    }
    objc_msgSend(v20, "x_apple_travel_start");
    v98 = (void *)objc_claimAutoreleasedReturnValue();

    if (v98)
    {
LABEL_136:
      v99 = v20;
      objc_msgSend(v99, "x_apple_travel_start");
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      if (v100)
      {
        v101 = CalCalendarItemCopyStartLocation((uint64_t)a1);
        if (!v101)
        {
          v101 = CalDatabaseCreateLocation(a5);
          CalCalendarItemSetStartLocation((uint64_t)a1, v101);
        }
        CalLocationUpdateFromICSComponent((uint64_t)v101, v99, 0, 1);
        CFRelease(v101);
      }
      else
      {
        CalCalendarItemSetStartLocation((uint64_t)a1, 0);
      }

      if ((v446 & 0x20000000) != 0)
        goto LABEL_142;
      goto LABEL_145;
    }
LABEL_142:
    objc_msgSend(v20, "location");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    if (v102)
    {

      goto LABEL_145;
    }
    objc_msgSend(v20, "x_apple_end_location");
    v103 = (void *)objc_claimAutoreleasedReturnValue();

    if (v103)
    {
LABEL_145:
      v104 = v20;
      objc_msgSend(v104, "x_apple_end_location");
      v105 = (void *)objc_claimAutoreleasedReturnValue();
      if (v105)
      {
        v106 = CalCalendarItemCopyEndLocation((uint64_t)a1);
        if (!v106)
        {
          v106 = CalDatabaseCreateLocation(a5);
          CalCalendarItemSetEndLocation((uint64_t)a1, v106);
        }
        CalLocationUpdateFromICSComponent((uint64_t)v106, v104, 0, 2);
        CFRelease(v106);
      }
      else
      {
        CalCalendarItemSetEndLocation((uint64_t)a1, 0);
      }

    }
  }
  objc_msgSend(v20, "propertiesForName:", kCalImportEventIsPhantomMaster);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  v108 = objc_msgSend(v107, "count") != 0;

  CalCalendarItemSetHidden((uint64_t)a1, v108);
  CalCalendarItemSetIsPhantomMaster((uint64_t)a1, v108);
  objc_msgSend(v20, "url");
  v109 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  CalCalendarItemSetURL((uint64_t)a1, v109);

  CalCalendarItemUpdateUIDFromICSComponent((uint64_t)a1, v20, v21);
  v440 = v20;
  v461 = v21;
  v454 = v438;
  v447 = v437;
  v110 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    v111 = v110;
    DebugDescription = CalEntityGetDebugDescription(a1);
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v512 = DebugDescription;
    _os_log_impl(&dword_1A5CCB000, v111, OS_LOG_TYPE_DEBUG, "Updating attendees in the database for calendar item: [%@]", buf, 0xCu);

  }
  v113 = CalCalendarItemCopyAttendees((uint64_t)a1);
  if (!v113)
  {
LABEL_174:
    Mutable = 0;
    goto LABEL_175;
  }
  v114 = v113;
  v479 = CFArrayGetCount(v113);
  if (v479 <= 0)
  {
    CFRelease(v114);
    goto LABEL_174;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v116 = 0;
  v117 = 0;
  do
  {
    v118 = Mutable;
    v119 = CFArrayGetValueAtIndex(v114, v116);
    v120 = (void *)CalAttendeeCopyAddress(v119);
    if (v120)
    {
      v121 = v120;
      objc_msgSend(v120, "absoluteString");
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      if (!CFDictionaryContainsKey(Mutable, v122))
      {
        CFDictionarySetValue(Mutable, v122, v119);
        CFRelease(v121);

        goto LABEL_163;
      }
      CFRelease(v121);

    }
    if (!v117)
    {
      v117 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      CFAutorelease(v117);
    }
    CFArrayAppendValue(v117, v119);
LABEL_163:
    ++v116;
  }
  while (v479 != v116);
  CFRelease(v114);
  if (v117)
  {
    v123 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      v124 = v123;
      v125 = CFArrayGetCount(v117);
      v126 = CalEntityGetDebugDescription(a1);
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)v512 = v125;
      *(_WORD *)&v512[8] = 2112;
      *(_QWORD *)&v512[10] = v126;
      _os_log_impl(&dword_1A5CCB000, v124, OS_LOG_TYPE_DEFAULT, "Removing [%ld] existing attendees that couldn't be uniquely mapped to by their address from calendar item: [%@]", buf, 0x16u);

    }
    v127 = CFArrayGetCount(v117);
    if (v127 >= 1)
    {
      v128 = v127;
      for (i = 0; i != v128; ++i)
      {
        v130 = CFArrayGetValueAtIndex(v117, i);
        v131 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          v132 = v131;
          v133 = v128;
          v134 = CalEntityGetDebugDescription(v130);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CalEventGetUID(a1));
          v135 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v512 = v134;
          v128 = v133;
          *(_WORD *)&v512[8] = 2112;
          *(_QWORD *)&v512[10] = v135;
          _os_log_impl(&dword_1A5CCB000, v132, OS_LOG_TYPE_DEBUG, "Removing attendee [%@] on event with UID: [%@]", buf, 0x16u);

          Mutable = v118;
        }
        CalCalendarItemRemoveAttendee((uint64_t)a1, (const __CFArray *)v130);
      }
    }
  }
LABEL_175:
  v136 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    v137 = (void *)MEMORY[0x1E0CB37E8];
    v138 = v136;
    objc_msgSend(v440, "attendee");
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v137, "numberWithUnsignedInteger:", objc_msgSend(v139, "count"));
    v140 = (void *)objc_claimAutoreleasedReturnValue();
    v141 = CalEntityGetDebugDescription(a1);
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)v512 = v140;
    *(_WORD *)&v512[8] = 2112;
    *(_QWORD *)&v512[10] = v141;
    _os_log_impl(&dword_1A5CCB000, v138, OS_LOG_TYPE_DEBUG, "Adding [%@] attendees from the iCalendar object onto the calendar item: [%@]", buf, 0x16u);

  }
  v506 = 0u;
  v507 = 0u;
  *(_OWORD *)v504 = 0u;
  v505 = 0u;
  objc_msgSend(v440, "attendee");
  obj = (id)objc_claimAutoreleasedReturnValue();
  cf = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v504, buf, 16);
  if (!cf)
  {
    v472 = 0;
    v441 = 0;
    goto LABEL_222;
  }
  v472 = 0;
  v441 = 0;
  v451 = *(_QWORD *)v505;
  v142 = *MEMORY[0x1E0D0C490];
  v449 = Mutable;
  while (2)
  {
    v143 = 0;
    while (2)
    {
      if (*(_QWORD *)v505 != v451)
        objc_enumerationMutation(obj);
      v144 = *(void **)(*(_QWORD *)&v504[8] + 8 * v143);
      objc_msgSend(v144, "value");
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v145, "absoluteString");
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      v480 = v144;
      if (Mutable && (Value = (void *)CFDictionaryGetValue(Mutable, v146)) != 0)
      {
        Attendee = Value;
        CFRetain(Value);
        CFDictionaryRemoveValue(Mutable, v146);
        ProposedStartDate = CalAttendeeGetProposedStartDate((uint64_t)Attendee);
        ProposedStartDateChanged = CalParticipantGetProposedStartDateChanged((uint64_t)Attendee);
        v151 = CalAttendeeGetProposedStartDateStatus((uint64_t)Attendee) == 3;
        v152 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          v153 = v152;
          v154 = CalEntityGetDebugDescription(Attendee);
          v444 = v145;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CalEventGetUID(a1));
          v155 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v508 = 138412546;
          *(_QWORD *)&v508[4] = v154;
          *(_WORD *)&v508[12] = 2112;
          *(_QWORD *)&v508[14] = v155;
          _os_log_impl(&dword_1A5CCB000, v153, OS_LOG_TYPE_DEBUG, "Updating attendee [%@] for event with UID [%@]", v508, 0x16u);

          v145 = v444;
          Mutable = v449;

        }
        if (!CalAttendeeUpdateFromICSUserAddress(v480, Attendee, v461, v454))
          goto LABEL_209;
LABEL_192:
        ProposedStartDateStatus = CalAttendeeGetProposedStartDateStatus((uint64_t)Attendee);
        v161 = CalAttendeeGetProposedStartDate((uint64_t)Attendee);
        v162 = vabdd_f64(v161, v142) >= 2.22044605e-16;
        if (fabs(v161) < 2.22044605e-16)
          v162 = 0;
        if (ProposedStartDateStatus > 1)
          v162 = 0;
        v163 = v162 || ProposedStartDateChanged;
        if (vabdd_f64(v161, ProposedStartDate) >= 2.22044605e-16 && v163 != 0)
        {
          CalParticipantSetProposedStartDateChanged((uint64_t)Attendee, 1);
          v441 |= !ProposedStartDateChanged;
        }
        v165 = (void *)CalAttendeeCopyEmailAddress(Attendee);
        if ((!v447 || objc_msgSend(v447, "addressIsAccountOwner:", v165))
          && CalAttendeeGetProposedStartDateStatus((uint64_t)Attendee) == 3
          && !v151)
        {
          CalParticipantSetProposedStartDateChanged((uint64_t)Attendee, 1);
          CalEventAddInvitationChangedProperties((uint64_t)a1, 128);
          CalEventSetNeedsNotification((uint64_t)a1, 1);
        }

      }
      else
      {
        Attendee = (void *)CalDatabaseCreateAttendee(a5);
        v156 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          v157 = v156;
          v158 = CalEntityGetDebugDescription(Attendee);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CalEventGetUID(a1));
          v159 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v508 = 138412546;
          *(_QWORD *)&v508[4] = v158;
          *(_WORD *)&v508[12] = 2112;
          *(_QWORD *)&v508[14] = v159;
          _os_log_impl(&dword_1A5CCB000, v157, OS_LOG_TYPE_DEBUG, "Adding attendee [%@] for event with UID [%@]", v508, 0x16u);

          Mutable = v449;
        }
        if (CalAttendeeUpdateFromICSUserAddress(v144, Attendee, v461, v454))
        {
          CalCalendarItemAddAttendee((uint64_t)a1, Attendee);
          ProposedStartDateChanged = 0;
          v151 = 0;
          ProposedStartDate = 0.0;
          goto LABEL_192;
        }
LABEL_209:
        v167 = CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v508 = 138412290;
          *(_QWORD *)&v508[4] = v480;
          _os_log_impl(&dword_1A5CCB000, v167, OS_LOG_TYPE_ERROR, "Couldn't update the CalAttendee from %@", v508, 0xCu);
        }
      }
      if (Attendee)
        CFRelease(Attendee);
      if (!v472)
      {
        v168 = v145;
        objc_msgSend(v440, "organizer");
        v169 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v169, "value");
        v170 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v480, "value");
        v171 = (void *)objc_claimAutoreleasedReturnValue();
        v172 = objc_msgSend(v170, "isEqual:", v171);

        if (v172)
          v472 = v480;
        else
          v472 = 0;
        Mutable = v449;
        v145 = v168;
      }

      if (cf != ++v143)
        continue;
      break;
    }
    cf = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v504, buf, 16);
    if (cf)
      continue;
    break;
  }
LABEL_222:

  if (Mutable)
  {
    v173 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      v174 = v173;
      v175 = CFDictionaryGetCount(Mutable);
      v176 = CalEntityGetDebugDescription(a1);
      *(_DWORD *)v508 = 134218242;
      *(_QWORD *)&v508[4] = v175;
      *(_WORD *)&v508[12] = 2112;
      *(_QWORD *)&v508[14] = v176;
      _os_log_impl(&dword_1A5CCB000, v174, OS_LOG_TYPE_DEBUG, "Removing [%ld] attendees that weren't in the updated ICS for calendar item: [%@]", v508, 0x16u);

    }
    v502 = 0u;
    v503 = 0u;
    v500 = 0u;
    v501 = 0u;
    v177 = Mutable;
    v178 = -[__CFDictionary countByEnumeratingWithState:objects:count:](v177, "countByEnumeratingWithState:objects:count:", &v500, v508, 16);
    if (v178)
    {
      v179 = v178;
      v180 = *(_QWORD *)v501;
      do
      {
        for (j = 0; j != v179; ++j)
        {
          if (*(_QWORD *)v501 != v180)
            objc_enumerationMutation(v177);
          v182 = (const __CFArray *)CFDictionaryGetValue(v177, *(const void **)(*((_QWORD *)&v500 + 1) + 8 * j));
          CalCalendarItemRemoveAttendee((uint64_t)a1, v182);
        }
        v179 = -[__CFDictionary countByEnumeratingWithState:objects:count:](v177, "countByEnumeratingWithState:objects:count:", &v500, v508, 16);
      }
      while (v179);
    }

    CFRelease(v177);
  }
  objc_msgSend(v440, "organizer");
  v183 = (void *)objc_claimAutoreleasedReturnValue();

  if (v183)
  {
    Organizer = CalCalendarItemCopyOrganizer((uint64_t)a1);
    if (Organizer || (Organizer = CalDatabaseCreateOrganizer(a5)) != 0)
    {
      objc_msgSend(v440, "organizer");
      v185 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v185, "value");
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v186, "absoluteString");
      v187 = (void *)objc_claimAutoreleasedReturnValue();
      v188 = objc_msgSend(v447, "addressIsAccountOwner:", v187);

      CalOrganizerSetIsSelf(Organizer, v188);
      objc_msgSend(v440, "organizer");
      v189 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v186) = CalOrganizerUpdateFromICSUserAddress(v189, v472, (uint64_t)Organizer, v188, v454);

      if ((_DWORD)v186)
      {
        CalCalendarItemSetOrganizer((uint64_t)a1, Organizer);
      }
      else
      {
        v190 = CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v513 = 138412290;
          *(_QWORD *)&v513[4] = v440;
          _os_log_impl(&dword_1A5CCB000, v190, OS_LOG_TYPE_ERROR, "Couldn't update organizer from %@", v513, 0xCu);
        }
      }
      CFRelease(Organizer);
      if ((v188 & v441 & 1) != 0)
      {
        CalEventAddInvitationChangedProperties((uint64_t)a1, 64);
        CalEventSetNeedsNotification((uint64_t)a1, 1);
      }
    }
    else
    {
      v427 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v513 = 0;
        _os_log_impl(&dword_1A5CCB000, v427, OS_LOG_TYPE_ERROR, "Couldn't create a new CalOrganizer object", v513, 2u);
      }
    }
  }

  objc_msgSend(v440, "created");
  v191 = (const __CFDate *)objc_claimAutoreleasedReturnValue();
  CFDateFromICSDateAsUTC = (const __CFString *)CalCreateCFDateFromICSDateAsUTC(v191);

  CalCalendarItemSetCreationDate((uint64_t)a1, CFDateFromICSDateAsUTC);
  if (CFDateFromICSDateAsUTC)
    CFRelease(CFDateFromICSDateAsUTC);
  CalCalendarItemSetSequenceNumber((uint64_t)a1, objc_msgSend(v440, "sequence"));
  CalCalendarItemSetPriority((uint64_t)a1, (unsigned __int16)objc_msgSend(v440, "priority"));
  v193 = CalCalendarItemCopyStructuredData((uint64_t)a1);
  objc_msgSend(v440, "x_apple_structuredData");
  v194 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v195 = v194;
  if (v194 != (__CFString *)v193 && (-[__CFString isEqualToData:](v194, "isEqualToData:", v193) & 1) == 0)
    CalCalendarItemSetStructuredData((uint64_t)a1, v195);
  obja = (__CFString *)v195;
  v445 = (void *)v193;
  v196 = v440;
  v473 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v197 = CalCalendarItemCopyAttachments((uint64_t)a1);
  v455 = v196;
  if (v197)
  {
    v198 = v197;
    v199 = CFArrayGetCount(v197);
    if (v199 >= 1)
    {
      v200 = v199;
      for (k = 0; k != v200; ++k)
      {
        v202 = (void *)CFArrayGetValueAtIndex(v198, k);
        if (CalAttachmentIsBinary((uint64_t)v202))
        {
          CalCalendarItemRemoveAttachment((uint64_t)a1, v202);
        }
        else
        {
          v203 = CalAttachmentCopyURL((uint64_t)v202);
          if (v203)
          {
            objc_msgSend(v473, "objectForKey:", v203);
            v204 = (void *)objc_claimAutoreleasedReturnValue();

            if (v204)
              CalCalendarItemRemoveAttachment((uint64_t)a1, v202);
            else
              objc_msgSend(v473, "setObject:forKey:", v202, v203);
          }

        }
      }
    }
    CFRelease(v198);
    v196 = v455;
  }
  if ((~v446 & 0x1000000) != 0)
  {
    v509 = 0u;
    v510 = 0u;
    memset(v508, 0, sizeof(v508));
    objc_msgSend(v196, "attach");
    v205 = (void *)objc_claimAutoreleasedReturnValue();
    v206 = objc_msgSend(v205, "countByEnumeratingWithState:objects:count:", v508, buf, 16);
    v207 = v473;
    if (!v206)
      goto LABEL_283;
    v208 = v206;
    v209 = **(_QWORD **)&v508[16];
    v481 = v205;
    while (1)
    {
      v210 = 0;
      do
      {
        if (**(_QWORD **)&v508[16] != v209)
          objc_enumerationMutation(v205);
        v211 = *(void **)(*(_QWORD *)&v508[8] + 8 * v210);
        if ((objc_msgSend(v211, "isBinary") & 1) != 0
          || (objc_msgSend(v211, "value"), (v212 = objc_claimAutoreleasedReturnValue()) == 0))
        {
          Attachment = (void *)CalDatabaseCreateAttachment(a5);
          v213 = 0;
        }
        else
        {
          v213 = (const __CFURL *)v212;
          v214 = (void *)objc_msgSend(v207, "objectForKey:", v212);
          if (v214)
          {
            Attachment = v214;
            CFRetain(v214);
            objc_msgSend(v207, "removeObjectForKey:", v213);
            goto LABEL_271;
          }
          objc_msgSend(v207, "removeObjectForKey:", v213);
          Attachment = (void *)CalDatabaseCreateAttachment(a5);
          v216 = CalCalendarItemCopyCalendar((uint64_t)a1);
          if (v216)
          {
            v217 = v216;
            v218 = CalCalendarCopyStore((uint64_t)v216);
            if (v218)
            {
              v219 = v218;
              v220 = CalDatabaseCopyAttachmentFileInStoreWithURL((uint64_t)v218, v213);
              if (v220)
              {
                cfd = (const void *)v220;
                CalAttachmentFileAddAttachment(v220, Attachment);
                CFRelease(cfd);
              }
              CFRelease(v219);
            }
            CFRelease(v217);
            v207 = v473;
          }
          v205 = v481;
        }
        CalCalendarItemAddAttachment((uint64_t)a1, Attachment);
LABEL_271:
        if ((CalAttachmentUpdateFromICSAttachment(Attachment, v211) & 1) == 0)
          CalCalendarItemRemoveAttachment((uint64_t)a1, Attachment);
        CFRelease(Attachment);

        ++v210;
      }
      while (v208 != v210);
      v221 = objc_msgSend(v205, "countByEnumeratingWithState:objects:count:", v508, buf, 16);
      v208 = v221;
      if (!v221)
      {
LABEL_283:

        v196 = v455;
        break;
      }
    }
  }
  *(_QWORD *)v504 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v504[8] = 3221225472;
  *(_QWORD *)&v505 = __CalCalendarItemUpdateAttachmentsFromICSComponent_block_invoke;
  *((_QWORD *)&v505 + 1) = &__block_descriptor_40_e15_v32__0_8_16_B24l;
  *(_QWORD *)&v506 = a1;
  objc_msgSend(v473, "enumerateKeysAndObjectsUsingBlock:", v504);

  v448 = v196;
  v222 = v461;
  v223 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((~v446 & 0x40000000) != 0)
  {
    v474 = v222;
    v488 = 0u;
    v489 = 0u;
    v486 = 0u;
    v487 = 0u;
    objc_msgSend(v448, "components");
    v224 = (void *)objc_claimAutoreleasedReturnValue();
    v225 = objc_msgSend(v224, "countByEnumeratingWithState:objects:count:", &v486, &v500, 16);
    if (v225)
    {
      v226 = v225;
      v227 = *(_QWORD *)v487;
      do
      {
        for (m = 0; m != v226; ++m)
        {
          if (*(_QWORD *)v487 != v227)
            objc_enumerationMutation(v224);
          v229 = *(_QWORD *)(*((_QWORD *)&v486 + 1) + 8 * m);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v223, "addObject:", v229);
          }
          else
          {
            v230 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v512 = v229;
              _os_log_impl(&dword_1A5CCB000, v230, OS_LOG_TYPE_DEBUG, "Encountered an unknown subcomponent for an ICSComponent: %@. Dropping it on the floor", buf, 0xCu);
            }
          }
        }
        v226 = objc_msgSend(v224, "countByEnumeratingWithState:objects:count:", &v486, &v500, 16);
      }
      while (v226);
    }

    v222 = v474;
  }
  v231 = v223;
  cfa = v222;
  v232 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v233 = CalCalendarItemCopyAlarms((uint64_t)a1);
  v234 = v446;
  if (v233)
  {
    v235 = v233;
    v236 = CFArrayGetCount(v233);
    if (v236 >= 1)
    {
      v237 = v236;
      for (n = 0; n != v237; ++n)
      {
        v239 = (void *)CFArrayGetValueAtIndex(v235, n);
        v240 = CalAlarmCopyExternalID((uint64_t)v239);
        if (v240)
        {
          v241 = (const void *)v240;
          objc_msgSend(v232, "setValue:forKey:", v239, v240);
          CFRelease(v241);
        }
        else
        {
          CalCalendarItemRemoveAlarm((uint64_t)a1, v239);
        }
      }
    }
    CFRelease(v235);
  }
  v462 = v232;
  v515 = 0u;
  v516 = 0u;
  *(_OWORD *)v513 = 0u;
  v514 = 0u;
  v456 = v231;
  v242 = objc_msgSend(v456, "countByEnumeratingWithState:objects:count:", v513, buf, 16);
  if (!v242)
  {
    v450 = 0;
    v482 = 0;
    goto LABEL_332;
  }
  v243 = v242;
  v450 = 0;
  v475 = *(_QWORD *)v514;
  v482 = 0;
  while (2)
  {
    v244 = 0;
    while (2)
    {
      if (*(_QWORD *)v514 != v475)
        objc_enumerationMutation(v456);
      v245 = *(void **)(*(_QWORD *)&v513[8] + 8 * v244);
      if (objc_msgSend(v245, "action"))
        goto LABEL_315;
      objc_msgSend(v245, "trigger");
      v246 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v246, "isDurationBased"))
      {

        goto LABEL_315;
      }
      objc_msgSend(v245, "trigger");
      v247 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v247, "value");
      v248 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v248, "components");
      v249 = (void *)objc_claimAutoreleasedReturnValue();
      IsInvalidAlarmDate = CalIsInvalidAlarmDate(v249);

      v234 = v446;
      if ((IsInvalidAlarmDate & 1) == 0)
      {
LABEL_315:
        objc_msgSend(v245, "x_wr_alarmuid");
        v251 = (void *)objc_claimAutoreleasedReturnValue();
        Alarm = (void *)objc_msgSend(v462, "objectForKey:", v251);

        if (Alarm)
        {
          objc_msgSend(v245, "x_wr_alarmuid");
          v253 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v462, "removeObjectForKey:", v253);

          CFRetain(Alarm);
        }
        else
        {
          Alarm = (void *)CalDatabaseCreateAlarm(a5);
        }
        if (v482 || !objc_msgSend(v245, "x_apple_default_alarm"))
        {
          if (CalAlarmIsDefaultAlarm((uint64_t)Alarm))
            CalAlarmSetIsDefaultAlarm((uint64_t)Alarm);
        }
        else
        {
          v482 = (void *)CFRetain(Alarm);
        }
        if (CalAlarmUpdateFromICSAlarm(v245, cfa, (uint64_t)Alarm, a5, v234))
        {
          CalCalendarItemAddAlarm((uint64_t)a1, Alarm);
        }
        else
        {
          v254 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v508 = 138412290;
            *(_QWORD *)&v508[4] = v245;
            _os_log_impl(&dword_1A5CCB000, v254, OS_LOG_TYPE_ERROR, "Couldn't update calendar alarm from ICSAlarm: %@", v508, 0xCu);
          }
        }
        CFRelease(Alarm);
      }
      else
      {
        v450 = 1;
      }
      if (v243 != ++v244)
        continue;
      break;
    }
    v243 = objc_msgSend(v456, "countByEnumeratingWithState:objects:count:", v513, buf, 16);
    if (v243)
      continue;
    break;
  }
LABEL_332:

  v255 = (v482 == 0) & v450;
  v497 = 0u;
  v498 = 0u;
  v495 = 0u;
  v496 = 0u;
  objc_msgSend(v462, "allKeys");
  v256 = (void *)objc_claimAutoreleasedReturnValue();
  v257 = objc_msgSend(v256, "countByEnumeratingWithState:objects:count:", &v495, v508, 16);
  if (!v257)
    goto LABEL_348;
  v258 = v257;
  v259 = *(_QWORD *)v496;
  while (2)
  {
    v260 = 0;
    while (2)
    {
      if (*(_QWORD *)v496 != v259)
        objc_enumerationMutation(v256);
      v261 = (void *)objc_msgSend(v462, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v495 + 1) + 8 * v260));
      Type = CalAlarmGetType((uint64_t)v261);
      IsDefaultAlarm = CalAlarmIsDefaultAlarm((uint64_t)v261);
      if ((Type - 4) <= 0xFFFFFFFD)
      {
LABEL_343:
        CalCalendarItemRemoveAlarm((uint64_t)a1, v261);
      }
      else if (IsDefaultAlarm)
      {
        if (v482)
          v264 = 1;
        else
          v264 = v255;
        if (v264 == 1)
          goto LABEL_343;
        v482 = (void *)CFRetain(v261);
      }
      if (v258 != ++v260)
        continue;
      break;
    }
    v265 = objc_msgSend(v256, "countByEnumeratingWithState:objects:count:", &v495, v508, 16);
    v258 = v265;
    if (v265)
      continue;
    break;
  }
LABEL_348:

  CalCalendarItemSetDefaultAlarmRemoved((uint64_t)a1, v255);
  if (v482)
  {
    if ((v255 & 1) != 0)
    {
      CalCalendarItemRemoveAlarm((uint64_t)a1, v482);
      v266 = v482;
    }
    else
    {
      if (!CalAlarmIsDefaultAlarm((uint64_t)v482))
        CalAlarmSetIsDefaultAlarm((uint64_t)v482);
      v266 = v482;
    }
LABEL_357:
    CFRelease(v266);
  }
  else if ((v255 & 1) == 0)
  {
    v267 = (void *)CalDatabaseCreateAlarm(a5);
    CalAlarmSetIsDefaultAlarm((uint64_t)v267);
    CalCalendarItemAddAlarm((uint64_t)a1, v267);
    v266 = v267;
    if (v267)
      goto LABEL_357;
  }
  v268 = CalCalendarItemCopyAlarms((uint64_t)a1);
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v269 = (void *)objc_claimAutoreleasedReturnValue();
  if (v268)
  {
    if (CFArrayGetCount(v268) >= 1)
    {
      v270 = 0;
      do
      {
        v271 = CFArrayGetValueAtIndex(v268, v270);
        v272 = (void *)CalAlarmCopyExternalID((uint64_t)v271);
        if (v272)
          objc_msgSend(v269, "setObject:forKey:", v271, v272);

        ++v270;
      }
      while (CFArrayGetCount(v268) > v270);
    }
    CFRelease(v268);
  }
  v492 = 0u;
  v493 = 0u;
  v490 = 0u;
  v491 = 0u;
  v273 = v456;
  v274 = objc_msgSend(v273, "countByEnumeratingWithState:objects:count:", &v490, v504, 16);
  if (v274)
  {
    v275 = v274;
    v276 = *(_QWORD *)v491;
    do
    {
      for (ii = 0; ii != v275; ++ii)
      {
        if (*(_QWORD *)v491 != v276)
          objc_enumerationMutation(v273);
        v278 = *(void **)(*((_QWORD *)&v490 + 1) + 8 * ii);
        objc_msgSend(v278, "relatedTo");
        v279 = (void *)objc_claimAutoreleasedReturnValue();

        if (v279)
        {
          objc_msgSend(v278, "relatedTo");
          v280 = (void *)objc_claimAutoreleasedReturnValue();
          v281 = objc_msgSend(v269, "objectForKey:", v280);

          objc_msgSend(v278, "uid");
          v282 = (void *)objc_claimAutoreleasedReturnValue();
          v283 = (void *)objc_msgSend(v269, "objectForKey:", v282);

          if (v283 && v281 != 0)
            CalAlarmAddSnoozedAlarm(v281, v283);
        }
      }
      v275 = objc_msgSend(v273, "countByEnumeratingWithState:objects:count:", &v490, v504, 16);
    }
    while (v275);
  }

  v457 = v448;
  v285 = CalCalendarItemCopyRecurrences((uint64_t)a1);
  if (v285)
  {
    v286 = v285;
    MutableCopy = CFArrayCreateMutableCopy(0, 0, v285);
    CFRelease(v286);
  }
  else
  {
    MutableCopy = 0;
  }
  v509 = 0u;
  v510 = 0u;
  memset(v508, 0, sizeof(v508));
  objc_msgSend(v457, "rrule");
  v463 = (id)objc_claimAutoreleasedReturnValue();
  v288 = objc_msgSend(v463, "countByEnumeratingWithState:objects:count:", v508, buf, 16);
  if (v288)
  {
    v289 = v288;
    v290 = **(_QWORD **)&v508[16];
    v291 = 0x1E0CB3000uLL;
    do
    {
      for (jj = 0; jj != v289; ++jj)
      {
        if (**(_QWORD **)&v508[16] != v290)
          objc_enumerationMutation(v463);
        v293 = *(void **)(*(_QWORD *)&v508[8] + 8 * jj);
        if (MutableCopy
          && CFArrayGetCount(MutableCopy) >= 1
          && (Recurrence = (void *)CFArrayGetValueAtIndex(MutableCopy, 0),
              CFRetain(Recurrence),
              CFArrayRemoveValueAtIndex(MutableCopy, 0),
              Recurrence))
        {
          v295 = 0;
        }
        else
        {
          Recurrence = (void *)CalDatabaseCreateRecurrence(a5);
          v295 = 1;
        }
        objc_opt_class();
        v483 = v293;
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v457, "dtend");
          v476 = v295;
          v296 = v289;
          v297 = MutableCopy;
          v298 = v291;
          v299 = v290;
          v300 = (void *)objc_claimAutoreleasedReturnValue();
          v301 = CalRecurrenceUpdateFromVCal10String(v293, (uint64_t)Recurrence, v300);

          v290 = v299;
          v291 = v298;
          MutableCopy = v297;
          v289 = v296;
          v295 = v476;
          if ((v301 & 1) == 0)
            goto LABEL_393;
        }
        else if (!CalRecurrenceUpdateFromICSRecurrenceRule(v293, (uint64_t)Recurrence))
        {
LABEL_393:
          v302 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v504 = 138412290;
            *(_QWORD *)&v504[4] = v483;
            _os_log_impl(&dword_1A5CCB000, v302, OS_LOG_TYPE_ERROR, "Couldn't update the CalRecurrenceRef from %@", v504, 0xCu);
          }
          if ((v295 & 1) == 0)
            CalCalendarItemRemoveRecurrence((uint64_t)a1, Recurrence);
          goto LABEL_400;
        }
        if (v295)
          CalCalendarItemAddRecurrence((uint64_t)a1, Recurrence);
LABEL_400:
        if (Recurrence)
          CFRelease(Recurrence);
      }
      v289 = objc_msgSend(v463, "countByEnumeratingWithState:objects:count:", v508, buf, 16);
    }
    while (v289);
  }

  if (MutableCopy)
  {
    v303 = CFArrayGetCount(MutableCopy);
    if (v303 >= 1)
    {
      v304 = v303;
      for (kk = 0; kk != v304; ++kk)
      {
        v306 = (void *)CFArrayGetValueAtIndex(MutableCopy, kk);
        CalCalendarItemRemoveRecurrence((uint64_t)a1, v306);
      }
    }
    CFRelease(MutableCopy);
  }

  v307 = v457;
  v308 = cfa;
  objc_msgSend(v307, "exdate");
  v309 = (void *)objc_claimAutoreleasedReturnValue();
  v310 = objc_msgSend(v309, "count");
  v311 = CFSetCreateMutable(0, v310, MEMORY[0x1E0C9B3B0]);

  if (v311)
  {
    v509 = 0u;
    v510 = 0u;
    memset(v508, 0, sizeof(v508));
    objc_msgSend(v307, "exdate");
    v312 = (void *)objc_claimAutoreleasedReturnValue();
    v313 = objc_msgSend(v312, "countByEnumeratingWithState:objects:count:", v508, buf, 16);
    if (v313)
    {
      v314 = v313;
      v315 = **(_QWORD **)&v508[16];
      do
      {
        for (mm = 0; mm != v314; ++mm)
        {
          if (**(_QWORD **)&v508[16] != v315)
            objc_enumerationMutation(v312);
          v317 = CalDateFromICSDate(*(void **)(*(_QWORD *)&v508[8] + 8 * mm), v308);
          v318 = CFDateCreate(0, v317);
          if (v318)
          {
            v319 = v318;
            CFSetAddValue(v311, v318);
            CFRelease(v319);
          }
        }
        v314 = objc_msgSend(v312, "countByEnumeratingWithState:objects:count:", v508, buf, 16);
      }
      while (v314);
    }

    v320 = CalCalendarItemCopyExceptionDates((uint64_t)a1);
    if (v320)
    {
      v321 = v320;
      v322 = v308;
      v323 = CFArrayGetCount(v320);
      if (v323 >= 1)
      {
        v324 = v323;
        for (nn = 0; nn != v324; ++nn)
        {
          v326 = (void *)CFArrayGetValueAtIndex(v321, nn);
          v327 = (const void *)CalExceptionDateCopyDate((uint64_t)v326);
          if (v327)
          {
            v328 = v327;
            if (CFSetContainsValue(v311, v327))
              CFSetRemoveValue(v311, v328);
            else
              CalCalendarItemRemoveExceptionDate((uint64_t)a1, v326);
            CFRelease(v328);
          }
        }
      }
      CFRelease(v321);
      v308 = v322;
    }
    v329 = CFSetGetCount(v311);
    v330 = (const void **)malloc_type_calloc(v329, 8uLL, 0x6004044C4A2DFuLL);
    if (v330)
    {
      v331 = (uint64_t *)v330;
      CFSetGetValues(v311, v330);
      if (v329 >= 1)
      {
        v332 = v331;
        do
        {
          v333 = *v332++;
          ExceptionDateWithDateAndOrder = (void *)CalDatabaseCreateExceptionDateWithDateAndOrder(a5, v333, 0);
          CalCalendarItemAddExceptionDate((uint64_t)a1, ExceptionDateWithDateAndOrder);
          CFRelease(ExceptionDateWithDateAndOrder);
          --v329;
        }
        while (v329);
      }
      free(v331);
    }
    CFRelease(v311);
  }
  v464 = v308;

  v335 = v307;
  CalCalendarItemRemoveAllCategories((uint64_t)a1);
  v458 = v335;
  objc_msgSend(v335, "propertiesForName:", *MEMORY[0x1E0DDBA30]);
  v336 = (void *)objc_claimAutoreleasedReturnValue();
  *(_OWORD *)v504 = 0u;
  v505 = 0u;
  v506 = 0u;
  v507 = 0u;
  cfb = v336;
  v484 = objc_msgSend(v336, "countByEnumeratingWithState:objects:count:", v504, buf, 16);
  if (v484)
  {
    v337 = 0;
    v477 = *(_QWORD *)v505;
    do
    {
      for (i1 = 0; i1 != v484; ++i1)
      {
        if (*(_QWORD *)v505 != v477)
          objc_enumerationMutation(cfb);
        objc_msgSend(*(id *)(*(_QWORD *)&v504[8] + 8 * i1), "values");
        v339 = (void *)objc_claimAutoreleasedReturnValue();
        v500 = 0u;
        v501 = 0u;
        v502 = 0u;
        v503 = 0u;
        v340 = objc_msgSend(v339, "countByEnumeratingWithState:objects:count:", &v500, v508, 16);
        if (v340)
        {
          v341 = v340;
          v342 = *(_QWORD *)v501;
          do
          {
            for (i2 = 0; i2 != v341; ++i2)
            {
              if (*(_QWORD *)v501 != v342)
                objc_enumerationMutation(v339);
              v344 = *(const __CFString **)(*((_QWORD *)&v500 + 1) + 8 * i2);
              EntityType = CalCalendarItemGetEntityType((uint64_t)a1);
              v346 = CalDatabaseCopyCategoryWithNameAndEntityType(a5, v344, EntityType);
              if (v346)
              {
                CategoryWithNameAndEntityType = v346;
                if (CalCategoryIsHidden((uint64_t)v346))
                  CalCategorySetHidden((uint64_t)CategoryWithNameAndEntityType);
              }
              else
              {
                CalCalendarItemGetEntityType((uint64_t)a1);
                CategoryWithNameAndEntityType = CalDatabaseCreateCategoryWithNameAndEntityType(a5);
              }
              CalCalendarItemAddGroupedCategory(a1, CategoryWithNameAndEntityType, v337);
              CFRelease(CategoryWithNameAndEntityType);
            }
            v341 = objc_msgSend(v339, "countByEnumeratingWithState:objects:count:", &v500, v508, 16);
          }
          while (v341);
        }
        ++v337;

      }
      v484 = objc_msgSend(cfb, "countByEnumeratingWithState:objects:count:", v504, buf, 16);
    }
    while (v484);
  }

  v348 = v458;
  v349 = CalEventPrivacyLevelFromICSCalendarServerAccess(objc_msgSend(v464, "x_calendarserver_access"));
  CalCalendarItemSetPrivacyLevel((uint64_t)a1, v349);
  objc_msgSend(v458, "x_apple_contactIdentifiers");
  v350 = (void *)objc_claimAutoreleasedReturnValue();
  v351 = (void *)objc_opt_new();
  v352 = CalCalendarItemCopyContacts((uint64_t)a1);
  if (v352)
  {
    v353 = v352;
    v354 = CFArrayGetCount(v352);
    if (v354 >= 1)
    {
      v355 = v354 + 1;
      do
      {
        v356 = CFArrayGetValueAtIndex(v353, v355 - 2);
        v357 = (void *)CalContactCopyContactIdentifier((uint64_t)v356);
        objc_msgSend(v351, "setObject:forKeyedSubscript:", v356, v357);

        --v355;
      }
      while (v355 > 1);
    }
    CFRelease(v353);
  }
  if (v350)
  {
    objc_msgSend(v350, "componentsSeparatedByString:", CFSTR(";"));
    v358 = (void *)objc_claimAutoreleasedReturnValue();
    memset(v508, 0, sizeof(v508));
    v509 = 0u;
    v510 = 0u;
    v359 = objc_msgSend(v358, "countByEnumeratingWithState:objects:count:", v508, buf, 16);
    if (v359)
    {
      v360 = v359;
      v361 = **(_QWORD **)&v508[16];
      do
      {
        for (i3 = 0; i3 != v360; ++i3)
        {
          if (**(_QWORD **)&v508[16] != v361)
            objc_enumerationMutation(v358);
          v363 = *(_QWORD *)(*(_QWORD *)&v508[8] + 8 * i3);
          objc_msgSend(v351, "objectForKeyedSubscript:", v363);
          v364 = (void *)objc_claimAutoreleasedReturnValue();

          if (v364)
          {
            objc_msgSend(v351, "setObject:forKeyedSubscript:", 0, v363);
          }
          else
          {
            Contact = (void *)CalDatabaseCreateContact(a5);
            CalContactSetContactIdentifier((uint64_t)Contact);
            CalCalendarItemAddContact((uint64_t)a1, Contact);
            CFRelease(Contact);
          }
        }
        v360 = objc_msgSend(v358, "countByEnumeratingWithState:objects:count:", v508, buf, 16);
      }
      while (v360);
    }

    v348 = v458;
  }
  *(_QWORD *)v504 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v504[8] = 3221225472;
  *(_QWORD *)&v505 = __CalCalendarItemUpdateContactsFromICSComponent_block_invoke;
  *((_QWORD *)&v505 + 1) = &__block_descriptor_40_e15_v32__0_8_16_B24l;
  *(_QWORD *)&v506 = a1;
  objc_msgSend(v351, "enumerateKeysAndObjectsUsingBlock:", v504);

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v366 = v348;
    objc_msgSend(v366, "conferences");
    v367 = (void *)objc_claimAutoreleasedReturnValue();
    v368 = objc_msgSend(v367, "count");

    if (v368)
    {
      objc_msgSend(v366, "conferences");
      v369 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v369, "objectAtIndexedSubscript:", 0);
      v370 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v370, "value");
      v371 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
      CalEventSetConferenceURL((uint64_t)a1, v371);

    }
    else
    {
      CalEventSetConferenceURL((uint64_t)a1, 0);
    }
    v372 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
    *(_OWORD *)&callBacks.version = *MEMORY[0x1E0C9B3B0];
    *(_OWORD *)&callBacks.release = v372;
    callBacks.hash = (CFSetHashCallBack)_CalConferenceGetHash;
    callBacks.equal = (CFSetEqualCallBack)_CalConferenceIsEqualToConference;
    v373 = CFSetCreateMutable(0, 0, &callBacks);
    *(_OWORD *)v513 = 0u;
    v514 = 0u;
    v515 = 0u;
    v516 = 0u;
    v452 = v366;
    objc_msgSend(v366, "conferences");
    v374 = (void *)objc_claimAutoreleasedReturnValue();
    v375 = objc_msgSend(v374, "countByEnumeratingWithState:objects:count:", v513, buf, 16);
    if (v375)
    {
      v376 = v375;
      v377 = *(_QWORD *)v514;
      do
      {
        for (i4 = 0; i4 != v376; ++i4)
        {
          if (*(_QWORD *)v514 != v377)
            objc_enumerationMutation(v374);
          -[__CFSet addObject:](v373, "addObject:", *(_QWORD *)(*(_QWORD *)&v513[8] + 8 * i4));
        }
        v376 = objc_msgSend(v374, "countByEnumeratingWithState:objects:count:", v513, buf, 16);
      }
      while (v376);
    }

    v478 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v379 = CalCalendarItemCopyConferences((uint64_t)a1);
    if (v379)
    {
      v380 = v379;
      v381 = CFArrayGetCount(v379);
      if (v381 >= 1)
      {
        v382 = v381;
        for (i5 = 0; i5 != v382; ++i5)
        {
          v384 = CFArrayGetValueAtIndex(v380, i5);
          v385 = (id)CalConferenceCopyURL((uint64_t)v384);
          v386 = v385;
          if (!v385)
          {
            objc_msgSend(MEMORY[0x1E0C99E38], "null");
            v386 = (void *)objc_claimAutoreleasedReturnValue();
          }
          objc_msgSend(v478, "objectForKeyedSubscript:", v386);
          v387 = (id)objc_claimAutoreleasedReturnValue();
          if (!v387)
          {
            v387 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            objc_msgSend(v478, "setObject:forKeyedSubscript:", v387, v386);
          }
          objc_msgSend(v387, "addObject:", v384);

        }
      }
      CFRelease(v380);
    }
    v497 = 0u;
    v498 = 0u;
    v495 = 0u;
    v496 = 0u;
    v465 = v373;
    v485 = -[__CFSet countByEnumeratingWithState:objects:count:](v465, "countByEnumeratingWithState:objects:count:", &v495, v508, 16);
    if (v485)
    {
      cfc = *(_QWORD *)v496;
      do
      {
        for (i6 = 0; i6 != v485; ++i6)
        {
          if (*(_QWORD *)v496 != cfc)
            objc_enumerationMutation(v465);
          v389 = *(void **)(*((_QWORD *)&v495 + 1) + 8 * i6);
          objc_msgSend(v389, "value");
          v390 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v390, "absoluteString");
          v391 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v391)
          {
            objc_msgSend(MEMORY[0x1E0C99E38], "null");
            v391 = (void *)objc_claimAutoreleasedReturnValue();
          }
          objc_msgSend(v478, "objectForKeyedSubscript:", v391);
          v392 = (void *)objc_claimAutoreleasedReturnValue();
          v393 = v392;
          if (v392
            && (v494[0] = MEMORY[0x1E0C809B0],
                v494[1] = 3221225472,
                v494[2] = __CalCalendarItemUpdateConferencesFromICSComponent_block_invoke,
                v494[3] = &unk_1E4F8CC20,
                v494[4] = v389,
                v394 = objc_msgSend(v392, "indexOfObjectPassingTest:", v494),
                v394 != 0x7FFFFFFFFFFFFFFFLL))
          {
            objc_msgSend(v393, "removeObjectAtIndex:", v394);
          }
          else
          {
            v395 = v389;
            Conference = (void *)CalDatabaseCreateConference(a5);
            CalCalendarItemAddConference((uint64_t)a1, Conference);
            objc_msgSend(v395, "value");
            v397 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v397, "absoluteString");
            v398 = (void *)objc_claimAutoreleasedReturnValue();
            CalConferenceSetURL((uint64_t)Conference);

            v399 = v395;
            objc_msgSend(v399, "info");
            v400 = (void *)objc_claimAutoreleasedReturnValue();

            if (v400)
            {
              objc_msgSend(v399, "info");
              v401 = (void *)objc_claimAutoreleasedReturnValue();
              CalConferenceSetInfo((uint64_t)Conference);

            }
            objc_msgSend(v399, "feature");
            v402 = (void *)objc_claimAutoreleasedReturnValue();

            if (v402)
            {
              objc_msgSend(v399, "feature");
              v403 = (void *)objc_claimAutoreleasedReturnValue();
              CalConferenceSetFeature((uint64_t)Conference);

            }
            objc_msgSend(v399, "language");
            v404 = (void *)objc_claimAutoreleasedReturnValue();

            if (v404)
            {
              objc_msgSend(v399, "language");
              v405 = (void *)objc_claimAutoreleasedReturnValue();
              CalConferenceSetLanguage((uint64_t)Conference);

            }
            objc_msgSend(v399, "region");
            v406 = (void *)objc_claimAutoreleasedReturnValue();

            if (v406)
            {
              objc_msgSend(v399, "region");
              v407 = (void *)objc_claimAutoreleasedReturnValue();
              CalConferenceSetRegion((uint64_t)Conference);

            }
            CFRelease(Conference);

          }
        }
        v485 = -[__CFSet countByEnumeratingWithState:objects:count:](v465, "countByEnumeratingWithState:objects:count:", &v495, v508, 16);
      }
      while (v485);
    }

    v492 = 0u;
    v493 = 0u;
    v490 = 0u;
    v491 = 0u;
    v408 = v478;
    v409 = objc_msgSend(v408, "countByEnumeratingWithState:objects:count:", &v490, v504, 16);
    if (v409)
    {
      v410 = v409;
      v411 = *(_QWORD *)v491;
      do
      {
        for (i7 = 0; i7 != v410; ++i7)
        {
          if (*(_QWORD *)v491 != v411)
            objc_enumerationMutation(v408);
          objc_msgSend(v408, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v490 + 1) + 8 * i7));
          v413 = (void *)objc_claimAutoreleasedReturnValue();
          v486 = 0u;
          v487 = 0u;
          v488 = 0u;
          v489 = 0u;
          v414 = objc_msgSend(v413, "countByEnumeratingWithState:objects:count:", &v486, &v500, 16);
          if (v414)
          {
            v415 = v414;
            v416 = *(_QWORD *)v487;
            do
            {
              for (i8 = 0; i8 != v415; ++i8)
              {
                if (*(_QWORD *)v487 != v416)
                  objc_enumerationMutation(v413);
                CalCalendarItemRemoveConference((uint64_t)a1, *(void **)(*((_QWORD *)&v486 + 1) + 8 * i8));
              }
              v415 = objc_msgSend(v413, "countByEnumeratingWithState:objects:count:", &v486, &v500, 16);
            }
            while (v415);
          }

        }
        v410 = objc_msgSend(v408, "countByEnumeratingWithState:objects:count:", &v490, v504, 16);
      }
      while (v410);
    }

    v348 = v458;
  }
  objc_msgSend(v348, "last_modified");
  v418 = (const __CFDate *)objc_claimAutoreleasedReturnValue();
  if (!v418)
  {
    objc_msgSend(v348, "dtstamp");
    v418 = (const __CFDate *)objc_claimAutoreleasedReturnValue();
  }
  v419 = CalCreateCFDateFromICSDateAsUTC(v418);
  CalCalendarItemSetLastModifiedDate((uint64_t)a1, (uint64_t)v419);
  if (v419)
    CFRelease(v419);
  +[CalItemMetadata metadataWithICSComponent:](CalItemMetadata, "metadataWithICSComponent:", v348);
  v420 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v446 & 0x800000) != 0
    && (objc_msgSend(v348, "x_apple_ews_itemid"),
        v421 = (void *)objc_claimAutoreleasedReturnValue(),
        v421,
        v421))
  {
    objc_msgSend(v348, "x_apple_ews_itemid");
    v422 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "x_apple_ews_changekey");
    v423 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "x_apple_ews_permission");
    v424 = (void *)objc_claimAutoreleasedReturnValue();
    CalSetEWSComponentsOnCalCalendarItem((uint64_t)a1, v422, v423, v424);

  }
  else
  {
    v425 = (const void *)CalCalendarItemCopyExternalRepresentation((uint64_t)a1);
    CalCalendarItemSetExternalRepresentation((uint64_t)a1, (const __CFString *)objc_msgSend(v420, "dataRepresentationWithExistingMetaData:", v425));
    if (v425)
      CFRelease(v425);
  }

  v34 = 1;
  v16 = v431;
  v18 = v436;
LABEL_536:

  return v34;
}

void CalSetEWSComponentsOnCalCalendarItem(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  __CFString *v11;
  id v12;

  v12 = a2;
  v7 = a3;
  v8 = a4;
  v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v10 = v9;
  if (v12)
    objc_msgSend(v9, "setObject:forKey:", v12, CFSTR("EWSItemIDString"));
  if (v7)
    objc_msgSend(v10, "setObject:forKey:", v7, CFSTR("EWSChangeKeyString"));
  if (v8)
    objc_msgSend(v10, "setObject:forKey:", v8, CFSTR("EWSPermissionString"));
  +[CalExchangeCalendarItemExternalRepresentation externalRepresentationDataWithDictionary:](CalExchangeCalendarItemExternalRepresentation, "externalRepresentationDataWithDictionary:", v10);
  v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (v11)
    CalCalendarItemSetExternalRepresentation(a1, v11);

}

void CalSetStartDateOnICSComponentWithOptions(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *started;
  void *v11;
  void *v12;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  started = (void *)CalCalendarItemCopyStartTimeZone(a1);
  objc_msgSend(v7, "objectForKey:", CFSTR("ItemBridgeIsAllDay"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v7) = objc_msgSend(v11, "BOOLValue");
  if ((_DWORD)v7)
    ICSFloatingDateOnlyFromCFDate((uint64_t)v8, started);
  else
    ICSDateFromCFDate((uint64_t)v8, started);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "setDtstart:", v12);
  if (started)
    CFRelease(started);
}

uint64_t CalCalendarItemUpdateICSComponent(const void *a1, void *a2, void *a3, unint64_t a4)
{
  id v7;
  id v8;
  BOOL v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *started;
  const void *v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  const void *v22;
  id v23;
  CFTypeRef v24;
  id v25;
  CFTypeRef v26;
  id v27;
  CFTypeRef v28;
  unsigned int Status;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t ModifiedDate;
  const void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  const void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  const __CFArray *v45;
  const __CFArray *v46;
  CFIndex Count;
  CFIndex v48;
  CFIndex v49;
  void *ValueAtIndex;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  int v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  id v65;
  void *v66;
  NSObject *v67;
  CFMutableArrayRef v68;
  const __CFArray *v69;
  id v70;
  CFIndex v71;
  CFIndex v72;
  CFIndex i;
  const void *v74;
  void *v75;
  NSObject *v76;
  CFTypeRef v77;
  void *v78;
  void *v79;
  NSObject *v80;
  const void *v81;
  int UID;
  CFTypeRef v83;
  const void *v84;
  void *v85;
  id v86;
  CFMutableArrayRef v87;
  const __CFArray *v88;
  id v89;
  CFIndex v90;
  CFIndex v91;
  CFIndex j;
  const void *v93;
  void *v94;
  NSObject *v95;
  id v96;
  id v97;
  void *v98;
  void *v99;
  int v100;
  void *v101;
  const __CFArray *v102;
  const __CFArray *v103;
  void *v104;
  id v105;
  CFIndex v106;
  NSObject *v107;
  CFIndex k;
  const void *v109;
  void *v110;
  void *v111;
  id v112;
  CFMutableArrayRef v113;
  const __CFArray *v114;
  id v115;
  CFIndex v116;
  CFIndex v117;
  CFIndex m;
  const void *v119;
  void *v120;
  void *v121;
  NSObject *v122;
  int v123;
  id v124;
  const __CFArray *v125;
  CFIndex v126;
  CFIndex v127;
  void *v128;
  CFIndex n;
  const void *v130;
  const void *v131;
  void *v132;
  id v133;
  id v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t ii;
  void *v139;
  void *v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t jj;
  void *v146;
  id v147;
  void *v148;
  char v149;
  id v150;
  CFURLRef v151;
  void *v152;
  const __CFArray *v153;
  const __CFArray *v154;
  CFIndex v155;
  CFIndex v156;
  CFIndex kk;
  const void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  id v164;
  int v165;
  void *v166;
  const __CFArray *v168;
  int v169;
  void *v170;
  int v171;
  void *v172;
  const __CFURL *v173;
  void *v174;
  void *v175;
  id v176;
  void *v177;
  void *v178;
  id v179;
  unsigned int v180;
  void *v181;
  id v182;
  void *v183;
  uint64_t v184;
  id v185;
  unint64_t v186;
  id v187;
  uint64_t v188;
  char v189;
  CFIndex v190;
  void *v191;
  void *v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint8_t v201[128];
  uint8_t buf[4];
  CFIndex DebugDescription;
  uint64_t v204;

  v204 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  if (a1)
    v9 = v7 == 0;
  else
    v9 = 1;
  v10 = !v9;
  if (v9)
    goto LABEL_175;
  v181 = v7;
  v180 = v10;
  v179 = v8;
  if (v8)
    v11 = (id)objc_msgSend(v8, "mutableCopy");
  else
    v11 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v12 = v11;
  v13 = v181;
  v14 = v12;
  started = (void *)CalCalendarItemCopyStartDate((uint64_t)a1);
  if (started)
  {
    v16 = started;
    CalSetStartDateOnICSComponentWithOptions((uint64_t)a1, v13, started, v14);
    CFRelease(v16);
  }

  if ((a4 & 0x2000) == 0)
  {
    v17 = CalCalendarItemCopySummary((uint64_t)a1);
    if (v17)
    {
      v18 = (const void *)v17;
      objc_msgSend(v13, "setSummary:", v17);
      CFRelease(v18);
    }
    v19 = CalCalendarItemCopyDescription((uint64_t)a1);
    if (v19)
    {
      v20 = (const void *)v19;
      objc_msgSend(v13, "setDescription:", v19);
      CFRelease(v20);
    }
    v21 = CalCalendarItemCopyURL((uint64_t)a1);
    if (v21)
    {
      v22 = (const void *)v21;
      objc_msgSend(v13, "setUrl:", v21);
      CFRelease(v22);
    }
  }
  v23 = v13;
  v24 = CalCalendarItemCopyLocation((uint64_t)a1);
  UpdateICSStructuredLocationFromCalLocation((uint64_t)v24, v23, 1, 0);

  if (v24)
    CFRelease(v24);
  v25 = v23;
  v26 = CalCalendarItemCopyStartLocation((uint64_t)a1);
  UpdateICSStructuredLocationFromCalLocation((uint64_t)v26, v25, 0, 1);

  if (v26)
    CFRelease(v26);
  v27 = v25;
  v28 = CalCalendarItemCopyEndLocation((uint64_t)a1);
  UpdateICSStructuredLocationFromCalLocation((uint64_t)v28, v27, 0, 2);

  if (v28)
    CFRelease(v28);
  Status = CalCalendarItemGetStatus((uint64_t)a1);
  if (Status)
    objc_msgSend(v27, "setStatus:", ICSStatusFromCalCalendarItemStatus(Status));
  v30 = objc_msgSend(MEMORY[0x1E0C99D68], "date");
  objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  ICSDateFromCFDateInTimezone(v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setDtstamp:", v32);

  ModifiedDate = CalCalendarItemCopyLastModifiedDate((uint64_t)a1);
  if (ModifiedDate)
  {
    v34 = (const void *)ModifiedDate;
    objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    ICSDateFromCFDateInTimezone((uint64_t)v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setLast_modified:", v36);

    CFRelease(v34);
  }
  v37 = CalCalendarItemCopyCreationDate((uint64_t)a1);
  if (v37)
  {
    v38 = (const void *)v37;
    objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    ICSDateFromCFDateInTimezone((uint64_t)v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setCreated:", v40);

    CFRelease(v38);
  }
  objc_msgSend(v27, "setPriority:", CalCalendarItemGetPriority((uint64_t)a1));
  objc_msgSend(v27, "setSequence:", (int)CalCalendarItemGetSequenceNumber((uint64_t)a1));
  v41 = CalCalendarItemCopyStructuredData((uint64_t)a1);
  if (v41)
  {
    v42 = (void *)v41;
    objc_msgSend(v27, "setX_apple_structuredData:", v41);

  }
  v184 = (uint64_t)a1;
  v186 = a4;
  if ((a4 & 0x4000) == 0)
  {
    v43 = v27;
    if (_setSubcomponentsOnICSComponent_onceToken != -1)
      dispatch_once(&_setSubcomponentsOnICSComponent_onceToken, &__block_literal_global_16);
    v44 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v45 = CalCalendarItemCopyAlarms((uint64_t)a1);
    if (v45)
    {
      v46 = v45;
      Count = CFArrayGetCount(v45);
      if (Count >= 1)
      {
        v48 = Count;
        v171 = 0;
        v49 = 0;
        v190 = Count;
        v176 = v27;
        v168 = v46;
        while (1)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v46, v49);
          if ((CalAlarmGetType((uint64_t)ValueAtIndex) & 0xFFFFFFFE) != 2)
            break;
LABEL_59:
          if (v48 == ++v49)
          {
            CFRelease(v46);
            if ((v171 & 1) != 0)
              goto LABEL_68;
            goto LABEL_66;
          }
        }
        ICSAlarmFromCalAlarm(ValueAtIndex);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v51, "action"))
        {
          objc_msgSend(v51, "trigger");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v52, "isDurationBased"))
          {

          }
          else
          {
            objc_msgSend(v51, "trigger");
            v170 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v170, "value");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "components");
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            CalInvalidAlarmDate();
            v55 = v44;
            v56 = v43;
            v57 = v14;
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            v169 = objc_msgSend(v54, "isEqual:", v58);

            v14 = v57;
            v43 = v56;
            v44 = v55;
            v59 = v171;
            v48 = v190;

            v46 = v168;
            v27 = v176;

            if (v169)
              v59 = 1;
            v171 = v59;
          }
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v51, "trigger");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          if (v60)
          {
            v61 = v14;
            objc_msgSend(v51, "trigger");
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            v174 = v62;
            if ((objc_msgSend(v62, "isDurationBased") & 1) == 0)
            {

              v14 = v61;
              if (!v51)
                goto LABEL_58;
              goto LABEL_57;
            }
            v14 = v61;
          }
          objc_msgSend(v43, "dtstart", v168);
          v63 = (void *)objc_claimAutoreleasedReturnValue();

          if (v60)
          {

          }
          if (!v63)
            objc_msgSend(v51, "setTrigger:", _setSubcomponentsOnICSComponent_sInvalidTrigger);
          v48 = v190;
        }
        if (!v51)
        {
LABEL_58:

          goto LABEL_59;
        }
LABEL_57:
        objc_msgSend(v44, "addObject:", v51, v168);
        goto LABEL_58;
      }
      CFRelease(v46);
    }
LABEL_66:
    if (CalCalendarItemIsDefaultAlarmRemoved(v184))
    {
      v64 = objc_alloc_init(MEMORY[0x1E0DDB7A0]);
      objc_msgSend(v64, "setAction:", 0);
      objc_msgSend(v64, "setTrigger:", _setSubcomponentsOnICSComponent_sInvalidTrigger);
      objc_msgSend(v44, "addObject:", v64);

    }
LABEL_68:
    objc_msgSend(v43, "setComponents:", v44, v168);

    a1 = (const void *)v184;
    a4 = v186;
  }
  v182 = v14;
  if ((a4 & 0x1000) == 0)
  {
    v65 = v27;
    v66 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      v67 = v66;
      *(_DWORD *)buf = 138412290;
      DebugDescription = (CFIndex)CalEntityGetDebugDescription(a1);
      _os_log_impl(&dword_1A5CCB000, v67, OS_LOG_TYPE_DEBUG, "Generating iCalendar objects for attendees on event: [%@]", buf, 0xCu);

    }
    v68 = CalCalendarItemCopyAttendees((uint64_t)a1);
    if (v68)
    {
      v69 = v68;
      v172 = v65;
      v70 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v71 = CFArrayGetCount(v69);
      if (v71 >= 1)
      {
        v72 = v71;
        for (i = 0; i != v72; ++i)
        {
          v74 = CFArrayGetValueAtIndex(v69, i);
          v75 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            v76 = v75;
            v77 = CalEntityGetDebugDescription(v74);
            *(_DWORD *)buf = 138412290;
            DebugDescription = (CFIndex)v77;
            _os_log_impl(&dword_1A5CCB000, v76, OS_LOG_TYPE_DEBUG, "Generating iCalendar object for attendee: [%@]", buf, 0xCu);

          }
          ICSUserAddressFromCalAttendee((uint64_t)v74);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          if (v78)
          {
            objc_msgSend(v70, "addObject:", v78);
          }
          else
          {
            v79 = (void *)CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
            {
              v80 = v79;
              v81 = CFArrayGetValueAtIndex(v69, i);
              UID = CalAttendeeGetUID(v81);
              *(_DWORD *)buf = 67109120;
              LODWORD(DebugDescription) = UID;
              _os_log_impl(&dword_1A5CCB000, v80, OS_LOG_TYPE_ERROR, "Couldn't create an icsUser from attendee %d", buf, 8u);

            }
          }

        }
      }
      v65 = v172;
      if (objc_msgSend(v70, "count"))
        objc_msgSend(v172, "setAttendee:", v70);
      CFRelease(v69);

      a1 = (const void *)v184;
      a4 = v186;
      v14 = v182;
    }
    v83 = CalCalendarItemCopyOrganizer((uint64_t)a1);
    if (v83)
    {
      v84 = v83;
      ICSUserAddressFromCalOrganizer((uint64_t)v83);
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "setOrganizer:", v85);

      CFRelease(v84);
    }

  }
  v86 = v27;
  v87 = CalCalendarItemCopyRecurrences((uint64_t)a1);
  if (v87)
  {
    v88 = v87;
    v89 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v90 = CFArrayGetCount(v88);
    if (v90 >= 1)
    {
      v91 = v90;
      for (j = 0; j != v91; ++j)
      {
        v93 = CFArrayGetValueAtIndex(v88, j);
        ICSRecurrenceRuleFromCalRecurrence((uint64_t)v93, (uint64_t)a1);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        if (v94)
        {
          objc_msgSend(v89, "addObject:", v94);
        }
        else
        {
          v95 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A5CCB000, v95, OS_LOG_TYPE_ERROR, "Couldn't create an ICSRecurrence", buf, 2u);
          }
        }

        a1 = (const void *)v184;
      }
    }
    if (objc_msgSend(v89, "count"))
      objc_msgSend(v86, "setRrule:", v89);
    CFRelease(v88);

    a4 = v186;
    v14 = v182;
  }

  v96 = v86;
  v97 = v14;
  objc_msgSend(v97, "objectForKey:", CFSTR("ItemBridgeExceptionDates"));
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v97, "objectForKey:", CFSTR("ItemBridgeIsAllDay"));
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  v100 = objc_msgSend(v99, "BOOLValue");

  v183 = v97;
  objc_msgSend(v97, "objectForKey:", CFSTR("ItemBridgeStartDateTimezone"));
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  v102 = CalCalendarItemCopyExceptionDates((uint64_t)a1);
  if (v102)
  {
    v103 = v102;
    if (CFArrayGetCount(v102) >= 1)
    {
      v104 = v96;
      v105 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v106 = CFArrayGetCount(v103);
      v107 = CDBiCalendarConversionHandle;
      if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        DebugDescription = v106;
        _os_log_impl(&dword_1A5CCB000, v107, OS_LOG_TYPE_DEBUG, "Setting %ld exception dates on the ICS component", buf, 0xCu);
      }
      if (v106 >= 1)
      {
        for (k = 0; k != v106; ++k)
        {
          v109 = CFArrayGetValueAtIndex(v103, k);
          v110 = (void *)CalExceptionDateCopyDate((uint64_t)v109);
          if ((objc_msgSend(v98, "containsObject:", v110) & 1) == 0)
          {
            if (v100)
              ICSFloatingDateOnlyFromCFDate((uint64_t)v110, v101);
            else
              ICSDateFromCFDate((uint64_t)v110, v101);
            v111 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v105, "addObject:", v111);

          }
        }
      }
      v96 = v104;
      objc_msgSend(v104, "setExdate:", v105);

      a1 = (const void *)v184;
      a4 = v186;
    }
    CFRelease(v103);
  }

  if ((a4 & 0x10000) == 0)
  {
    v112 = v96;
    v113 = CalCalendarItemCopyAttachments((uint64_t)a1);
    if (v113)
    {
      v114 = v113;
      v187 = v96;
      v115 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v116 = CFArrayGetCount(v114);
      if (v116 >= 1)
      {
        v117 = v116;
        for (m = 0; m != v117; ++m)
        {
          v119 = CFArrayGetValueAtIndex(v114, m);
          ICSAttachmentFromCalAttachment((uint64_t)v119, (a4 >> 8) & 1);
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          if (v120)
          {
            objc_msgSend(v115, "addObject:", v120);
          }
          else
          {
            v121 = (void *)CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
            {
              v122 = v121;
              v123 = CalAttachmentGetUID();
              *(_DWORD *)buf = 67109120;
              LODWORD(DebugDescription) = v123;
              _os_log_impl(&dword_1A5CCB000, v122, OS_LOG_TYPE_ERROR, "Couldn't create an ICS attachment from attachment %d", buf, 8u);

            }
          }

        }
      }
      if (objc_msgSend(v115, "count"))
        objc_msgSend(v112, "setAttach:", v115);
      CFRelease(v114);

      a1 = (const void *)v184;
      v96 = v187;
    }

  }
  v124 = v96;
  v125 = CalCalendarItemCopyContacts((uint64_t)a1);
  v126 = CFArrayGetCount(v125);
  if (v126 < 1)
  {
    objc_msgSend(v124, "setX_apple_contactIdentifiers:", 0);
    if (!v125)
      goto LABEL_131;
    goto LABEL_130;
  }
  v127 = v126;
  v128 = (void *)objc_opt_new();
  for (n = 0; n != v127; ++n)
  {
    v130 = CFArrayGetValueAtIndex(v125, n);
    v131 = (const void *)CalContactCopyContactIdentifier((uint64_t)v130);
    objc_msgSend(v128, "addObject:", v131);
    CFRelease(v131);
  }
  objc_msgSend(v128, "sortUsingComparator:", &__block_literal_global_45);
  objc_msgSend(v128, "componentsJoinedByString:", CFSTR(";"));
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v124, "setX_apple_contactIdentifiers:", v132);

  if (v125)
LABEL_130:
    CFRelease(v125);
LABEL_131:

  v133 = v124;
  v134 = CalCalendarItemCopyGroupedCategories((uint64_t)a1);
  v177 = v133;
  if (objc_msgSend(v134, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v134, "count"));
    v191 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v191 = 0;
  }
  v199 = 0u;
  v200 = 0u;
  v197 = 0u;
  v198 = 0u;
  v135 = v134;
  v136 = objc_msgSend(v135, "countByEnumeratingWithState:objects:count:", &v197, buf, 16);
  if (v136)
  {
    v137 = v136;
    v188 = *(_QWORD *)v198;
    do
    {
      for (ii = 0; ii != v137; ++ii)
      {
        if (*(_QWORD *)v198 != v188)
          objc_enumerationMutation(v135);
        objc_msgSend(v135, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v197 + 1) + 8 * ii));
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v139, "count"));
        v140 = (void *)objc_claimAutoreleasedReturnValue();
        v193 = 0u;
        v194 = 0u;
        v195 = 0u;
        v196 = 0u;
        v141 = v139;
        v142 = objc_msgSend(v141, "countByEnumeratingWithState:objects:count:", &v193, v201, 16);
        if (v142)
        {
          v143 = v142;
          v144 = *(_QWORD *)v194;
          do
          {
            for (jj = 0; jj != v143; ++jj)
            {
              if (*(_QWORD *)v194 != v144)
                objc_enumerationMutation(v141);
              v146 = (void *)CalCategoryCopyName(*(_QWORD *)(*((_QWORD *)&v193 + 1) + 8 * jj));
              objc_msgSend(v140, "addObject:", v146);

            }
            v143 = objc_msgSend(v141, "countByEnumeratingWithState:objects:count:", &v193, v201, 16);
          }
          while (v143);
        }

        objc_msgSend(v140, "sortUsingSelector:", sel_compare_);
        v147 = objc_alloc_init(MEMORY[0x1E0DDB840]);
        objc_msgSend(v147, "setValues:valueType:", v140, 5007);
        objc_msgSend(v191, "addObject:", v147);

      }
      v137 = objc_msgSend(v135, "countByEnumeratingWithState:objects:count:", &v197, buf, 16);
    }
    while (v137);
  }

  objc_msgSend(v177, "setProperties:forName:", v191, *MEMORY[0x1E0DDBA30]);
  objc_msgSend(v183, "objectForKey:", CFSTR("ItemBridgeIsAllDay"));
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  v149 = objc_msgSend(v148, "BOOLValue");

  if ((v149 & 1) == 0)
  {
    objc_msgSend(v177, "removePropertiesForName:", CFSTR("X-MICROSOFT-CDO-ALLDAYEVENT"));
    objc_msgSend(v177, "removePropertiesForName:", CFSTR("X-FUNAMBOL-ALLDAY"));
  }
  objc_opt_class();
  v10 = v180;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v150 = v177;
    v151 = CalEventCopyConferenceURL(v184);
    -[__CFURL absoluteString](v151, "absoluteString");
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    if (v151)
      v152 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB7F8]), "initWithValue:type:", v151, 5032);
    else
      v152 = 0;
    v153 = CalCalendarItemCopyConferences(v184);
    if (v153)
    {
      v154 = v153;
      if (CFArrayGetCount(v153) >= 1)
      {
        v178 = v152;
        v173 = v151;
        v175 = v150;
        v185 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v155 = CFArrayGetCount(v154);
        if (v155 >= 1)
        {
          v156 = v155;
          v189 = 0;
          for (kk = 0; kk != v156; ++kk)
          {
            v158 = CFArrayGetValueAtIndex(v154, kk);
            v159 = (void *)CalConferenceCopyURL((uint64_t)v158);
            if (v159)
            {
              v160 = (void *)CalConferenceCopyInfo((uint64_t)v158);
              v161 = (void *)CalConferenceCopyFeature((uint64_t)v158);
              v162 = (void *)CalConferenceCopyLanguage((uint64_t)v158);
              v163 = (void *)CalConferenceCopyRegion((uint64_t)v158);
              if (v189 & 1 | (v192 == 0) || !objc_msgSend(v159, "isEqualToString:", v192))
              {
                objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v159);
                v166 = (void *)objc_claimAutoreleasedReturnValue();
                v164 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB7F8]), "initWithValue:type:", v166, 5032);

                v165 = 1;
              }
              else
              {
                v164 = v178;
                v165 = 0;
                v189 = 1;
              }
              objc_msgSend(v164, "setInfo:", v160);
              objc_msgSend(v164, "setFeature:", v161);
              objc_msgSend(v164, "setLanguage:", v162);
              objc_msgSend(v164, "setRegion:", v163);
              if (v165)
                objc_msgSend(v185, "addObject:", v164);

            }
          }
        }
        v152 = v178;
        if (v178)
          objc_msgSend(v185, "insertObject:atIndex:", v178, 0);
        v150 = v175;
        objc_msgSend(v175, "setConferences:", v185);

        v10 = v180;
        v151 = v173;
      }
      CFRelease(v154);
    }

  }
  v7 = v181;
  v8 = v179;
LABEL_175:

  return v10;
}

uint64_t _CalConferenceIsEqualToConference(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "isEqualToConference:", a2);
}

void ___setSubcomponentsOnICSComponent_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  CalInvalidAlarmDate();
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB808]), "initWithYear:month:day:hour:minute:second:", objc_msgSend(v3, "year"), objc_msgSend(v3, "month"), objc_msgSend(v3, "day"), objc_msgSend(v3, "hour"), objc_msgSend(v3, "minute"), objc_msgSend(v3, "second"));
  v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0DDB880]), "initWithDate:", v0);
  v2 = (void *)_setSubcomponentsOnICSComponent_sInvalidTrigger;
  _setSubcomponentsOnICSComponent_sInvalidTrigger = v1;

}

uint64_t ___setCalContactsOnICSComponent_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compare:");
}

id ICSAlarmFromCalAlarm(id a1)
{
  id v1;
  id v2;
  _BOOL4 IsDefaultAlarm;
  CFTypeRef v4;
  void *v5;
  _BOOL4 IsAllDay;
  CFTypeRef v7;
  const void *v8;
  uint64_t v9;
  double TriggerDate;
  int TriggerInterval;
  int v12;
  id v13;
  uint64_t v14;
  CFDateRef v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  const __CFNumber *v21;
  const void *v22;
  void *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  void *v26;
  void *v27;
  void *v28;
  unsigned int Type;
  uint64_t v30;
  const void *v31;
  void *v32;
  int Proximity;
  void *v34;
  id v35;
  CFTypeRef v36;
  CFTimeZoneRef v37;
  uint64_t GregorianDateWithFallbackToDefaultTimeZone;
  double v39;
  void *v40;
  CFTypeRef v41;
  const void *v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  const void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  int valuePtr;

  v1 = a1;
  if (a1)
  {
    v2 = objc_alloc_init(MEMORY[0x1E0DDB7A0]);
    IsDefaultAlarm = CalAlarmIsDefaultAlarm((uint64_t)v1);
    v4 = CalAlarmCopyOwningEntity((uint64_t)v1);
    v5 = (void *)v4;
    if (IsDefaultAlarm)
    {
      if (!CalEntityIsOfType(v4, 2))
        goto LABEL_28;
      IsAllDay = CalEventIsAllDay((uint64_t)v5);
      v7 = CalEventCopyStore((uint64_t)v5);
      v8 = v7;
      if (IsAllDay)
        v9 = CalStoreCopyDefaultAllDayAlarmOffset((uint64_t)v7);
      else
        v9 = CalStoreCopyDefaultAlarmOffset((uint64_t)v7);
      v21 = (const __CFNumber *)v9;
      if (v8)
        CFRelease(v8);
      valuePtr = -1;
      if (v21)
      {
        CFNumberGetValue(v21, kCFNumberIntType, &valuePtr);
        CFRelease(v21);
      }
      else
      {
        v22 = (const void *)CalCopyDatabaseForEntity(v1);
        CalDatabaseGetPreferences((uint64_t)v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        CFRelease(v22);
        if (IsAllDay)
          v24 = (const __CFNumber *)CalAlarmCopyDefaultAllDayAlarmOffsetWithPreferences(v23);
        else
          v24 = (const __CFNumber *)CalAlarmCopyDefaultTimedAlarmOffsetWithPreferences(v23);
        v25 = v24;
        if (v24)
        {
          CFNumberGetValue(v24, kCFNumberIntType, &valuePtr);
          CFRelease(v25);
        }

      }
      if (valuePtr == -1)
      {
LABEL_28:
        v1 = 0;
LABEL_48:

        return v1;
      }
      v13 = objc_alloc(MEMORY[0x1E0DDB828]);
      v14 = valuePtr;
    }
    else
    {
      TriggerDate = CalAlarmGetTriggerDate((uint64_t)v1);
      if (fabs(TriggerDate + -1.17549435e-38) >= 2.22044605e-16)
      {
        v15 = CFDateCreate(0, TriggerDate);
        objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        ICSDateFromCFDateInTimezone((uint64_t)v15, v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        CFRelease(v15);
        v18 = objc_alloc(MEMORY[0x1E0DDB880]);
        objc_msgSend(v17, "value");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = (void *)objc_msgSend(v18, "initWithDate:", v19);

        if (!v20)
          goto LABEL_25;
        goto LABEL_26;
      }
      TriggerInterval = CalAlarmGetTriggerInterval((uint64_t)v1);
      if (TriggerInterval == 0x7FFFFFFF)
      {
LABEL_25:
        CalInvalidAlarmDate();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB808]), "initWithYear:month:day:hour:minute:second:", objc_msgSend(v27, "year"), objc_msgSend(v27, "month"), objc_msgSend(v27, "day"), objc_msgSend(v27, "hour"), objc_msgSend(v27, "minute"), objc_msgSend(v27, "second"));
        v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB880]), "initWithDate:", v28);

        goto LABEL_26;
      }
      v12 = TriggerInterval;
      v13 = objc_alloc(MEMORY[0x1E0DDB828]);
      v14 = v12;
    }
    v26 = (void *)objc_msgSend(v13, "initWithWeeks:days:hours:minutes:seconds:", 0, 0, 0, 0, v14);
    v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB880]), "initWithDuration:", v26);

    if (!v20)
      goto LABEL_25;
LABEL_26:
    objc_msgSend(v2, "setTrigger:", v20);
    Type = CalAlarmGetType((uint64_t)v1);
    objc_msgSend(v2, "setAction:", ICSActionFromCalAlarmType(Type));
    v30 = CalAlarmCopyUUID((uint64_t)v1);
    if (v30)
    {
      v31 = (const void *)v30;
      objc_msgSend(v2, "setUid:", v30);
      objc_msgSend(v2, "setX_wr_alarmuid:", v31);
      CFRelease(v31);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0DDB7F0], "makeUID");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "setUid:", v32);
      objc_msgSend(v2, "setX_wr_alarmuid:", v32);

    }
    Proximity = CalAlarmGetProximity((uint64_t)v1);
    ICSProximityStringFromCalAlarmProximity(Proximity);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setX_apple_proximity:", v34);

    objc_msgSend(v2, "setX_apple_default_alarm:", CalAlarmIsDefaultAlarm((uint64_t)v1));
    v35 = v2;
    v36 = CalAlarmCopyLocation((uint64_t)v1);
    UpdateICSStructuredLocationFromCalLocation((uint64_t)v36, v35, 0, 0);

    if (v36)
      CFRelease(v36);
    if (CalAlarmGetAcknowledged((uint64_t)v1))
    {
      CalAlarmGetAcknowledgedDate((uint64_t)v1);
      v37 = CFTimeZoneCreateWithName(0, CFSTR("UTC"), 1u);
      GregorianDateWithFallbackToDefaultTimeZone = CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
      v40 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB808]), "initWithYear:month:day:hour:minute:second:", (int)GregorianDateWithFallbackToDefaultTimeZone, GregorianDateWithFallbackToDefaultTimeZone << 24 >> 56, GregorianDateWithFallbackToDefaultTimeZone << 16 >> 56, GregorianDateWithFallbackToDefaultTimeZone << 8 >> 56, GregorianDateWithFallbackToDefaultTimeZone >> 56, (uint64_t)v39);
      objc_msgSend(v35, "setAcknowledged:", v40);
      if (v37)
        CFRelease(v37);

    }
    else
    {
      objc_msgSend(v35, "setAcknowledged:", 0);
    }
    v41 = CalAlarmCopyOriginalAlarm((uint64_t)v1);
    if (v41)
    {
      v42 = v41;
      v43 = CalAlarmCopyExternalID((uint64_t)v41);
      if (v43)
      {
        v44 = (const void *)v43;
        objc_msgSend(v35, "setRelatedTo:", v43);
        CFRelease(v44);
      }
      CFRelease(v42);
    }
    v45 = CalAlarmCopyExternalRepresentation((uint64_t)v1);
    if (v45)
    {
      v46 = (const void *)v45;
      +[CalAlarmMetadata metadataWithData:](CalAlarmMetadata, "metadataWithData:", v45);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      CFRelease(v46);
      objc_msgSend(v47, "applyToComponent:", v35);

    }
    objc_msgSend(v35, "description");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    if (v48)
    {

    }
    else if (objc_msgSend(v35, "action") != 2)
    {
      +[CDBBundle bundle](CDBBundle, "bundle");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = objc_msgSend(v49, "localizedStringForKey:value:table:", CFSTR("Reminder"), &stru_1E4F941C0, 0);

      objc_msgSend(v35, "setDescription:", v50);
    }
    v1 = v35;

    goto LABEL_48;
  }
  return v1;
}

BOOL CalAlarmUpdateFromICSAlarm(void *a1, void *a2, uint64_t a3, os_unfair_lock_s *a4, int a5)
{
  id v9;
  id v10;
  void *v11;
  int v12;
  void *v13;
  int TriggerInterval;
  double v15;
  void *v16;
  uint64_t DateTimeFromICSDate;
  void *v18;
  void *v19;
  double v20;
  double v21;
  int Type;
  void *v23;
  uint64_t v24;
  int Proximity;
  void *v26;
  int v27;
  id v28;
  void *v29;
  void *v30;
  CFTypeRef Location;
  CalAlarmMetadata *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  CalAlarmMetadata *v47;
  void *v48;
  void *v50;
  int v51;
  void *v52;
  int v53;
  id v54;

  v9 = a1;
  v10 = a2;
  if (a3)
  {
    objc_msgSend(v9, "trigger");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isDurationBased");
    objc_msgSend(v11, "value");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = v10;
    v51 = a5;
    v52 = v11;
    if (v12)
    {
      TriggerInterval = CalAlarmGetTriggerInterval(a3);
      objc_msgSend(v13, "timeInterval");
      if (TriggerInterval != (int)v15)
        CalAlarmSetTriggerInterval(a3, (int)v15);
    }
    else
    {
      v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB800]), "initWithValue:", v13);
      DateTimeFromICSDate = CalCreateDateTimeFromICSDate(v16, v10);
      CalInvalidAlarmDate();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "date");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "timeIntervalSinceReferenceDate");
      v21 = vabdd_f64(*(double *)&DateTimeFromICSDate, v20);

      if (v21 >= 2.22044605e-16)
        CalAlarmSetTriggerDate(a3, *(CFAbsoluteTime *)&DateTimeFromICSDate);
      CalDateTimeRelease();

    }
    Type = CalAlarmGetType(a3);
    v53 = CalAlarmTypeFromICSAction(objc_msgSend(v9, "action"));
    if (Type != v53)
      CalAlarmSetType(a3);
    objc_msgSend(v9, "uid");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v23, "length"))
    {
      objc_msgSend(v9, "x_wr_alarmuid");
      v24 = objc_claimAutoreleasedReturnValue();

      v23 = (void *)v24;
    }
    if (v23)
      CalAlarmSetUUID(a3);
    Proximity = CalAlarmGetProximity(a3);
    objc_msgSend(v9, "x_apple_proximity");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = CalAlarmProximityFromICSProximityString(v26);

    if (Proximity != v27)
      CalAlarmSetProximity(a3);
    v28 = v9;
    objc_msgSend(v28, "x_apple_structured_location");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    if (v29
      || (objc_msgSend(v28, "location"), v30 = (void *)objc_claimAutoreleasedReturnValue(), v30, v30))
    {
      Location = CalAlarmCopyLocation(a3);
      if (!Location)
      {
        Location = CalDatabaseCreateLocation(a4);
        CalAlarmSetLocation(a3, Location);
      }
      CalLocationUpdateFromICSComponent((uint64_t)Location, v28, 0, 0);
      CFRelease(Location);
    }
    else
    {
      CalAlarmSetLocation(a3, 0);
    }

    v32 = -[CalItemMetadata initWithICSComponent:]([CalAlarmMetadata alloc], "initWithICSComponent:", v28);
    v33 = (void *)CalAlarmCopyExternalRepresentation(a3);
    -[CalItemMetadata dataRepresentationWithExistingMetaData:](v32, "dataRepresentationWithExistingMetaData:", v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    CalAlarmSetExternalRepresentation(a3);
    objc_msgSend(v28, "acknowledged");
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    if (v35)
    {
      objc_msgSend(v28, "acknowledged");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB800]), "initWithValue:", v36);
      v38 = CalCreateDateTimeFromICSDate(v37, v10);
      if (vabdd_f64(CalAlarmGetAcknowledgedDate(a3), *(double *)&v38) >= 2.22044605e-16)
        CalAlarmSetAcknowledgedDate(a3, *(CFAbsoluteTime *)&v38);
      CalDateTimeRelease();

    }
    else if (vabdd_f64(CalAlarmGetAcknowledgedDate(a3), *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
    {
      CalAlarmRemoveAcknowledged(a3);
    }
    if ((*(_QWORD *)&v51 & 0x800000) == 0)
      goto LABEL_36;
    if (v53 == 3)
    {
      objc_msgSend(v28, "attendee");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "firstObject");
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v39, "value");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "scheme");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = v42;
      if (v42 && !objc_msgSend(v42, "caseInsensitiveCompare:", CFSTR("mailto")))
      {
        objc_msgSend(v41, "resourceSpecifier");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "stringByRemovingPercentEscapes");
        v50 = v23;
        v45 = v34;
        v46 = v33;
        v47 = v32;
        v48 = (void *)objc_claimAutoreleasedReturnValue();

        CalAlarmSetEmailAddress(a3);
        v32 = v47;
        v33 = v46;
        v34 = v45;
        v23 = v50;
      }

    }
    else
    {
      if (v53 != 2)
      {
LABEL_36:

        goto LABEL_37;
      }
      objc_msgSend(v28, "bookmark");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      CalAlarmSetBookmark(a3);
    }

    v10 = v54;
    goto LABEL_36;
  }
LABEL_37:

  return a3 != 0;
}

void CalIdentityInitializeTables(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE Identity (display_name TEXT, address TEXT, first_name TEXT, last_name TEXT, UNIQUE (display_name, address, first_name, last_name));"));
}

void CalIdentityMigrateTables(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  const __CFString *v4;
  const os_unfair_lock *Context;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  uint64_t v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t v16;
  const os_unfair_lock *v17;
  uint64_t v18;
  const os_unfair_lock *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((int)a3 < 7)
  {
    v4 = CFSTR("CREATE TABLE Identity (display_name TEXT, address TEXT, first_name TEXT, last_name TEXT, UNIQUE (display_name, address, first_name, last_name));");
    goto LABEL_8;
  }
  if (a3 - 12 <= 0xD)
  {
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("ALTER TABLE Participant RENAME TO Participant_;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE Identity (display_name TEXT, address TEXT, first_name TEXT, last_name TEXT, UNIQUE (display_name, address, first_name, last_name));"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("INSERT INTO Identity (ROWID, display_name, address) SELECT ROWID, name, email FROM Participant_ WHERE name IS NOT NULL AND email IS NOT NULL;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("INSERT INTO Identity (ROWID, display_name, address) SELECT MIN(ROWID), name, email FROM Participant_ WHERE email IS NULL AND name IS NOT NULL GROUP BY name;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("INSERT INTO Identity (ROWID, display_name, address) SELECT MIN(ROWID), name, email FROM Participant_ WHERE name IS NULL AND email IS NOT NULL GROUP BY email;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("INSERT INTO Identity (ROWID, display_name, address) SELECT MIN(ROWID), name, email FROM Participant_ WHERE name IS NULL AND email IS NULL GROUP BY email;"));
    _CalIdentityPerformMigrationUniquingWithQueries((uint64_t)a2);
    _CalIdentityPerformMigrationUniquingWithQueries((uint64_t)a2);
LABEL_7:
    v4 = CFSTR("DROP TABLE Participant_;");
    goto LABEL_8;
  }
  if (a3 <= 0x36)
  {
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("ALTER TABLE Participant RENAME TO Participant_;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE Identity (display_name TEXT, address TEXT, first_name TEXT, last_name TEXT, UNIQUE (display_name, address, first_name, last_name));"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("INSERT INTO Identity (ROWID, display_name, address) SELECT ROWID, name, email FROM Participant_"));
    goto LABEL_7;
  }
  if (a3 > 0x50)
  {
    if (a3 > 0x6A)
      return;
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("ALTER TABLE Identity RENAME TO Identity_;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE Identity (display_name TEXT, address TEXT, first_name TEXT, last_name TEXT, UNIQUE (display_name, address, first_name, last_name));"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("INSERT INTO Identity (ROWID, display_name, address) SELECT ROWID, name, address FROM Identity_"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TABLE Identity_;"));
    if (a3 >= 0x67)
      return;
    goto LABEL_9;
  }
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("ALTER TABLE Identity RENAME TO Identity_;"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE Identity (display_name TEXT, address TEXT, first_name TEXT, last_name TEXT, UNIQUE (display_name, address, first_name, last_name));"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("INSERT INTO Identity (ROWID, display_name, address) SELECT ROWID, name, email FROM Identity_"));
  v4 = CFSTR("DROP TABLE Identity_;");
LABEL_8:
  CalPerformSQLWithConnection(a2, (uint64_t)v4);
LABEL_9:
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        if (*(_QWORD *)(*a2 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v7 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (v7)
  {
    v8 = v7;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        v9 = **v7;
        if (v9)
        {
          if (*(_QWORD *)(v9 + 104))
          {
            v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10)
              os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v8)
      {
        v11 = **v8;
        if (v11)
        {
          if (*(_QWORD *)(v11 + 104))
          {
            v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v12)
              os_unfair_lock_assert_owner(v12 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        if (*(_QWORD *)(*a2 + 104))
        {
          v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v13)
            os_unfair_lock_assert_owner(v13 + 20);
        }
      }
    }
  }
  v14 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (v14)
  {
    v15 = v14;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v14)
      {
        v16 = **v14;
        if (v16)
        {
          if (*(_QWORD *)(v16 + 104))
          {
            v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17)
              os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
    }
    CPSqliteStatementPerform();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v15)
      {
        v18 = **v15;
        if (v18)
        {
          if (*(_QWORD *)(v18 + 104))
          {
            v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v19)
              os_unfair_lock_assert_owner(v19 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    CFLog();
  }
}

void _CalIdentityPerformMigrationUniquingWithQueries(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t v5;
  const os_unfair_lock *v6;
  uint64_t v7;
  const os_unfair_lock *v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)(*(_QWORD *)a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v3 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (v3)
  {
    v4 = v3;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v3)
      {
        v5 = **v3;
        if (v5)
        {
          if (*(_QWORD *)(v5 + 104))
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v4)
      {
        v7 = **v4;
        if (v7)
        {
          if (*(_QWORD *)(v7 + 104))
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a1)
        {
          if (*(_QWORD *)(*(_QWORD *)a1 + 104))
          {
            v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9)
              os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
    }
    CPSqliteConnectionStatementForSQL();
    if (a1 && CDBLockingAssertionsEnabled && *(_QWORD *)a1 && *(_QWORD *)(*(_QWORD *)a1 + 104))
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
    CPSqliteConnectionStatementForSQL();
  }
}

void CalIdentityCopyDataToAuxDatabase(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CalPerformSQLWithConnection(a3, (uint64_t)CFSTR("INSERT OR REPLACE INTO aux.Identity (ROWID, display_name, address, first_name, last_name) SELECT ROWID, display_name, address, first_name, last_name FROM Identity WHERE ROWID IN (SELECT identity_id FROM aux.Participant) OR ROWID IN (SELECT identity_id FROM aux.Sharee) OR ROWID IN (SELECT identity_id FROM aux.Notification) OR ROWID IN (SELECT identity_id FROM aux.ResourceChange) OR ROWID IN (SELECT created_by_id FROM aux.CalendarItem) OR ROWID IN (SELECT modified_by_id FROM aux.CalendarItem) OR ROWID IN (SELECT self_identity_id FROM aux.Calendar) OR ROWID IN (SELECT owner_identity_id FROM aux.Calendar)"));
}

uint64_t _CalIdentityGetID(CFStringRef theString, const __CFString *a2, CFStringRef a3, CFStringRef a4, uint64_t a5)
{
  uint64_t Insert;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  CFStringRef v15;
  const os_unfair_lock *Context;
  uint64_t v17;
  uint64_t **v18;
  UInt8 *v19;
  UInt8 *v20;
  UInt8 *v21;
  UInt8 *v22;
  uint64_t v23;
  const os_unfair_lock *v24;
  uint64_t v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;
  uint64_t v28;
  uint64_t **v29;
  sqlite3_stmt *v30;
  sqlite3_stmt *v31;
  sqlite3_stmt *v32;
  sqlite3_stmt *v33;
  uint64_t v34;
  const os_unfair_lock *v35;
  uint64_t v36;
  const os_unfair_lock *v37;
  const os_unfair_lock *v38;
  __int16 v40;
  __int16 v41;
  int v42;
  UInt8 v43[256];
  UInt8 v44[256];
  UInt8 v45[256];
  UInt8 v46[256];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v42 = 1;
  if (!a5 || !a2 && !theString && !a3 && !a4)
    return 0xFFFFFFFFLL;
  v11 = CFSTR("display_name IS NULL");
  if (theString && CFStringGetLength(theString))
    v11 = CFSTR("display_name = ?");
  if (a2)
    v12 = CFSTR("address = ?");
  else
    v12 = CFSTR("address IS NULL");
  v13 = CFSTR("first_name IS NULL");
  if (a3 && CFStringGetLength(a3))
    v13 = CFSTR("first_name = ?");
  v14 = CFSTR("last_name IS NULL");
  if (a4 && CFStringGetLength(a4))
    v14 = CFSTR("last_name = ?");
  v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT ROWID FROM Identity WHERE %@ AND %@ AND %@ AND %@"), v11, v12, v13, v14);
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)a5)
    {
      if (*(_QWORD *)(*(_QWORD *)a5 + 104))
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v17 = CPSqliteConnectionStatementForSQL();
  if (v17)
  {
    v18 = (uint64_t **)v17;
    v41 = 0;
    v40 = 0;
    v19 = CalIdentityBindTextQueryArgument(*(sqlite3_stmt **)(v17 + 8), &v42, theString, v46, (BOOL *)&v41 + 1);
    v20 = CalIdentityBindTextQueryArgument((sqlite3_stmt *)v18[1], &v42, a2, v45, (BOOL *)&v41);
    v21 = CalIdentityBindTextQueryArgument((sqlite3_stmt *)v18[1], &v42, a3, v44, (BOOL *)&v40 + 1);
    v22 = CalIdentityBindTextQueryArgument((sqlite3_stmt *)v18[1], &v42, a4, v43, (BOOL *)&v40);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v18)
      {
        v23 = **v18;
        if (v23)
        {
          if (*(_QWORD *)(v23 + 104))
          {
            v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v24)
              os_unfair_lock_assert_owner(v24 + 20);
          }
        }
      }
    }
    CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v18)
      {
        v25 = **v18;
        if (v25)
        {
          if (*(_QWORD *)(v25 + 104))
          {
            v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v26)
              os_unfair_lock_assert_owner(v26 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a5)
      {
        if (*(_QWORD *)(*(_QWORD *)a5 + 104))
        {
          v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v27)
            os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
    v28 = CPSqliteConnectionStatementForSQL();
    if (v28)
    {
      v29 = (uint64_t **)v28;
      v30 = *(sqlite3_stmt **)(v28 + 8);
      if (v19)
        sqlite3_bind_text(v30, 1, (const char *)v19, -1, 0);
      else
        sqlite3_bind_null(v30, 1);
      v31 = (sqlite3_stmt *)v29[1];
      if (v20)
        sqlite3_bind_text(v31, 2, (const char *)v20, -1, 0);
      else
        sqlite3_bind_null(v31, 2);
      v32 = (sqlite3_stmt *)v29[1];
      if (v21)
        sqlite3_bind_text(v32, 3, (const char *)v21, -1, 0);
      else
        sqlite3_bind_null(v32, 3);
      v33 = (sqlite3_stmt *)v29[1];
      if (v22)
        sqlite3_bind_text(v33, 4, (const char *)v22, -1, 0);
      else
        sqlite3_bind_null(v33, 4);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v29)
        {
          v34 = **v29;
          if (v34)
          {
            if (*(_QWORD *)(v34 + 104))
            {
              v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v35)
                os_unfair_lock_assert_owner(v35 + 20);
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v29)
        {
          v36 = **v29;
          if (v36)
          {
            if (*(_QWORD *)(v36 + 104))
            {
              v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v37)
                os_unfair_lock_assert_owner(v37 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a5)
        {
          if (*(_QWORD *)(*(_QWORD *)a5 + 104))
          {
            v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v38)
              os_unfair_lock_assert_owner(v38 + 20);
          }
        }
      }
      Insert = CPSqliteConnectionRowidOfLastInsert();
    }
    else
    {
      Insert = 0xFFFFFFFFLL;
    }
    if (v19 && HIBYTE(v41))
      free(v19);
    if (v20 && (_BYTE)v41)
      free(v20);
    if (v21 && HIBYTE(v40))
      free(v21);
    if (v22 && (_BYTE)v40)
      free(v22);
  }
  else
  {
    Insert = 0xFFFFFFFFLL;
  }
  CFRelease(v15);
  return Insert;
}

UInt8 *CalIdentityBindTextQueryArgument(sqlite3_stmt *a1, int *a2, CFStringRef theString, UInt8 *a4, BOOL *a5)
{
  uint64_t Length;
  CFIndex v11;
  CFIndex MaximumSizeForEncoding;
  CFIndex v13;
  UInt8 *v14;
  CFIndex usedBufLen;
  CFRange v17;

  if (!theString)
    return 0;
  Length = CFStringGetLength(theString);
  if (Length < 1)
    return 0;
  v11 = Length;
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  v13 = MaximumSizeForEncoding;
  usedBufLen = MaximumSizeForEncoding;
  v14 = a4;
  if (MaximumSizeForEncoding >= 256)
    v14 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding, 0x469DE8EDuLL);
  v17.location = 0;
  v17.length = v11;
  CFStringGetBytes(theString, v17, 0x8000100u, 0x20u, 0, v14, v13, &usedBufLen);
  v14[usedBufLen] = 0;
  sqlite3_bind_text(a1, *a2, (const char *)v14, -1, 0);
  if (a5)
    *a5 = v14 != a4;
  ++*a2;
  return v14;
}

void CalIdentityGarbageCollectOrphans(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v5;
  _QWORD *v6;

  if (a1)
  {
    v2 = (os_unfair_lock_s *)(a1 + 80);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
    if (*(_QWORD *)(a1 + 24))
    {
      if (CDBLockingAssertionsEnabled)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      Database = CPRecordStoreGetDatabase();
      if (Database)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)(Database + 104))
          {
            v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5)
              os_unfair_lock_assert_owner(v5 + 20);
          }
        }
        v6 = (_QWORD *)CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
        if (v6)
          CalPerformSQLWithConnectionAndBindBlock(v6, 1, (uint64_t)CFSTR("DELETE FROM Identity WHERE NOT EXISTS (SELECT ROWID FROM Participant WHERE Participant.identity_id = Identity.ROWID) AND NOT EXISTS (SELECT ROWID FROM CalendarItem WHERE (CalendarItem.modified_by_id > 0 AND CalendarItem.modified_by_id = Identity.ROWID) OR (CalendarItem.created_by_id > 0 AND CalendarItem.created_by_id = Identity.ROWID)) AND NOT EXISTS (SELECT ROWID FROM Sharee WHERE Sharee.identity_id = Identity.ROWID) AND NOT EXISTS (SELECT ROWID FROM ResourceChange WHERE ResourceChange.identity_id = Identity.ROWID) AND NOT EXISTS (SELECT ROWID FROM Calendar WHERE Calendar.self_identity_id = Identity.ROWID OR Calendar.owner_identity_id = Identity.ROWID) AND NOT EXISTS (SELECT ROWID FROM Notification WHERE Notification.identity_id = Identity.ROWID) "), 0);
      }
    }
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v2);
    os_unfair_lock_unlock(v2);
  }
}

uint64_t CalDatabaseCreateParticipantsSearchStatement(uint64_t a1, const __CFString *a2)
{
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v8;
  const os_unfair_lock *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  const os_unfair_lock *v12;
  sqlite3_stmt *v13;
  const char *CStringFromCFString;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 80));
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 32));
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_13;
  v8 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  if (!CPSqliteDatabaseRegisterMatchesSearchStringFunction())
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v8 + 104))
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
    v11 = CPSqliteDatabaseStatementForReading();
    v13 = *(sqlite3_stmt **)(v11 + 8);
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
    sqlite3_bind_text(v13, 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  }
  else
  {
LABEL_13:
    v10 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 32) + 80);
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 32) + 80));
    os_unfair_lock_unlock(v10);
    return 0;
  }
  return v11;
}

void CalDatabaseCopyParticipantIdsThatMatchSearch(sqlite3_stmt **a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  BOOL v7;

  v4 = 1;
  while (1)
  {
    v5 = sqlite3_step(a1[1]);
    if (v5 != 100)
      break;
    v6 = sqlite3_column_int(a1[1], 0);
    if (v4 == 1 && CFArrayGetCount(*(CFArrayRef *)a2))
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)a2);
    CFArrayAppendValue(*(CFMutableArrayRef *)a2, (const void *)v6);
    if (**(_BYTE **)(a2 + 24))
      v7 = 1;
    else
      v7 = v4 == *(_DWORD *)(a2 + 8);
    ++v4;
    if (v7)
    {
      if (!**(_BYTE **)(a2 + 24))
        return;
      goto LABEL_15;
    }
  }
  if ((v5 - 102) > 0xFFFFFFFD || (sqlite3_errmsg(*((sqlite3 **)*a1 + 1)), CFLog(), **(_BYTE **)(a2 + 24)))
LABEL_15:
    **(_BYTE **)(a2 + 16) = 0;
}

void CalDatabaseDeleteParticipantsSearchStatement(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  os_unfair_lock_s *v5;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        v3 = **a1;
        if (v3)
        {
          if (*(_QWORD *)(v3 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  v5 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 32) + 80);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5);
  os_unfair_lock_unlock(v5);
}

uint64_t CalOrganizerUpdateAddressOfAllIdentitiesMatchingAddress(os_unfair_lock_s *a1, CFURLRef anURL, const __CFURL *a3, const __CFString *a4)
{
  uint64_t RecordStore;
  const __CFString *v8;
  CFStringRef v9;
  const __CFString *v10;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v13;
  uint64_t v14;
  const os_unfair_lock *v15;
  UInt8 *v16;
  UInt8 *v17;
  UInt8 *v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  BOOL v22;
  __int16 v23;
  int v24;
  UInt8 v25[256];
  UInt8 v26[256];
  UInt8 v27[256];
  uint64_t v28;

  RecordStore = 0;
  v28 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (anURL)
    {
      if (a3)
      {
        v8 = CFURLGetString(anURL);
        v9 = CFURLGetString(a3);
        RecordStore = 0;
        if (v8)
        {
          v10 = v9;
          if (v9)
          {
            os_unfair_lock_lock(a1 + 20);
            RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
            if (RecordStore)
            {
              if (CDBLockingAssertionsEnabled)
              {
                Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (Context)
                  os_unfair_lock_assert_owner(Context + 20);
              }
              Database = CPRecordStoreGetDatabase();
              RecordStore = Database;
              if (Database)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (*(_QWORD *)(Database + 104))
                  {
                    v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v13)
                      os_unfair_lock_assert_owner(v13 + 20);
                  }
                }
                v14 = CPSqliteDatabaseConnectionForWriting();
                RecordStore = v14;
                if (v14)
                {
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*(_QWORD *)v14)
                    {
                      if (*(_QWORD *)(*(_QWORD *)v14 + 104))
                      {
                        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v15)
                          os_unfair_lock_assert_owner(v15 + 20);
                      }
                    }
                  }
                  RecordStore = CPSqliteConnectionStatementForSQL();
                  if (RecordStore)
                  {
                    v24 = 1;
                    v23 = 0;
                    v22 = 0;
                    if (a4 && CFStringGetLength(a4))
                    {
                      v16 = CalIdentityBindTextQueryArgument(*(sqlite3_stmt **)(RecordStore + 8), &v24, a4, v27, (BOOL *)&v23 + 1);
                    }
                    else
                    {
                      v24 = 2;
                      sqlite3_bind_null(*(sqlite3_stmt **)(RecordStore + 8), 1);
                      v16 = 0;
                    }
                    v17 = CalIdentityBindTextQueryArgument(*(sqlite3_stmt **)(RecordStore + 8), &v24, v10, v25, &v22);
                    v18 = CalIdentityBindTextQueryArgument(*(sqlite3_stmt **)(RecordStore + 8), &v24, v8, v26, (BOOL *)&v23);
                    _CalDatabasePerformStatementWithWriteLock((uint64_t)a1, RecordStore);
                    if (CDBLockingAssertionsEnabled)
                    {
                      if (*(_QWORD *)RecordStore)
                      {
                        v19 = **(_QWORD **)RecordStore;
                        if (v19)
                        {
                          if (*(_QWORD *)(v19 + 104))
                          {
                            v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
                            if (v20)
                              os_unfair_lock_assert_owner(v20 + 20);
                          }
                        }
                      }
                    }
                    CPSqliteStatementReset();
                    if (HIBYTE(v23))
                      free(v16);
                    if ((_BYTE)v23)
                      free(v18);
                    if (v22)
                      free(v17);
                    RecordStore = 1;
                  }
                }
              }
            }
            if (CDBLockingAssertionsEnabled)
              os_unfair_lock_assert_owner(a1 + 20);
            os_unfair_lock_unlock(a1 + 20);
          }
        }
      }
    }
  }
  return RecordStore;
}

uint64_t _CalIdentityGatherMigrationUniquingRows(uint64_t a1, __CFArray **a2)
{
  int v4;
  CFStringRef v5;
  const unsigned __int8 *v6;
  __CFArray *Mutable;

  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = (CFStringRef)*MEMORY[0x1E0C9B0D0];
  if (sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), 1) != 5)
  {
    v6 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 1);
    if (v6)
      v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v6, 0x8000100u);
  }
  if (a2)
  {
    Mutable = *a2;
    if (!*a2)
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
      *a2 = Mutable;
    }
    if (!a2[1])
    {
      a2[1] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      Mutable = *a2;
    }
    CFArrayAppendValue(Mutable, (const void *)v4);
    CFArrayAppendValue(a2[1], v5);
  }
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t _CalIdentityGatherRowsToCleanup(uint64_t a1, __CFArray **a2)
{
  int v4;
  int v5;
  int v6;
  __CFArray *Mutable;

  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  if (a2)
  {
    v6 = v5;
    Mutable = *a2;
    if (!*a2)
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
      *a2 = Mutable;
    }
    if (!a2[1])
    {
      a2[1] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
      Mutable = *a2;
    }
    CFArrayAppendValue(Mutable, (const void *)v4);
    CFArrayAppendValue(a2[1], (const void *)v6);
  }
  return 0;
}

uint64_t _CalExceptionDatePrepareForSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
    return CalRelationOwnerWillSave(result);
  return result;
}

uint64_t _CalExceptionDatePropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  const os_unfair_lock *v5;
  const os_unfair_lock *v6;

  if (!a2 && a3 == -1)
  {
    v3 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    result = CPRecordGetProperty();
    if (result != -1)
    {
      if (v3)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5)
              os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
      CPRecordGetProperty();
      if (v3 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
      return CPRecordGetProperty();
    }
  }
  return result;
}

void CalExceptionDateInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalExceptionDateClass, (const char **)&kCalExceptionDateIndexes, (const char **)&kCalExceptionDateChangesIndexes);
}

void CalExceptionDateMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  const __CFString *v3;

  if (a3 <= 18001)
  {
    v3 = CFSTR("EventExceptionDate");
    if (a3 >= 56)
      v3 = 0;
    CalMigrateTableFull(a2, (const char **)&kCalExceptionDateClass, (uint64_t)v3, (const char **)&kCalExceptionDateUpgradeInfo, (const char **)&kCalExceptionDateChangesUpgradeInfo, (const char **)&kCalExceptionDateIndexes, (const char **)&kCalExceptionDateChangesIndexes, 0, a3);
  }
}

uint64_t CalExceptionDateGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalExceptionDateGetPropertyIDWithPropertyName_sPropDict;
  if (!CalExceptionDateGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalExceptionDateGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalExceptionDateGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("date");
      v6 = 1;
      v7 = CFSTR("owner");
      v8 = 3;
      CalExceptionDateGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 2);
      for (i = 16; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalExceptionDateGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalExceptionDateGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5D59194(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 16; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

CFTypeRef _CalExceptionDateHasValidParent(uint64_t a1)
{
  CFTypeRef result;

  result = _CalExceptionDateGetOwner(a1);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

CFTypeRef _CalExceptionDateGetOwner(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

void _CalExceptionDateCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM ExceptionDate WHERE owner_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
}

const void *_CalCreateExceptionDate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  const void *TemporaryRecordIDForEntity;
  BOOL v8;
  const os_unfair_lock *Context;
  BOOL v10;
  const os_unfair_lock *v11;
  BOOL v12;
  const os_unfair_lock *v13;
  BOOL v14;
  const os_unfair_lock *v15;

  v6 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 10);
  if (CDBLockingAssertionsEnabled)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    v10 = v6 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
      v12 = v6 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
    CPRecordInitializeProperty();
  }
  if (a3)
  {
    if (CDBLockingAssertionsEnabled)
      v14 = v6 == 0;
    else
      v14 = 1;
    if (!v14)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
    CPRecordInitializeProperty();
  }
  _CalDatabaseAddEntity(a1, v6);
  _CalDatabaseSetChangeFlags(a1, 4);
  return v6;
}

const void *_CalDatabaseCreateExceptionDate(uint64_t a1)
{
  return _CalCreateExceptionDate(a1, 0, 0);
}

const void *CalDatabaseCreateExceptionDate(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *ExceptionDate;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  ExceptionDate = _CalCreateExceptionDate((uint64_t)a1, 0, 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return ExceptionDate;
}

const void *CalDatabaseCreateExceptionDateWithDateAndOrder(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  const void *ExceptionDate;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  ExceptionDate = _CalCreateExceptionDate((uint64_t)a1, a2, a3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  return ExceptionDate;
}

const void *_CalExceptionDateCopy(uint64_t a1, uint64_t a2)
{
  const void *ExceptionDate;
  const void *v4;
  BOOL v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  BOOL v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;

  ExceptionDate = _CalCreateExceptionDate(a1, 0, 0);
  v4 = ExceptionDate;
  if (CDBLockingAssertionsEnabled)
    v5 = ExceptionDate == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v11 = v4 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v4;
}

uint64_t _CalRemoveExceptionDate(const void *a1)
{
  uint64_t result;
  uint64_t Context;
  uint64_t v4;
  const os_unfair_lock *v5;

  result = CPRecordGetStore();
  if (result)
  {
    Context = CPRecordStoreGetContext();
    if (Context)
    {
      v4 = Context;
      _CalDatabaseRemoveEntity(Context, a1);
      _CalDatabaseSetChangeFlags(v4, 4);
    }
    if (CDBLockingAssertionsEnabled)
    {
      v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5)
        os_unfair_lock_assert_owner(v5 + 20);
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

void CalRemoveExceptionDate(const void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveExceptionDate(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalExceptionDateGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalExceptionDateGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyExceptionDateWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalExceptionDateGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t _CalExceptionDateGetDate(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalExceptionDateCopyDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalExceptionDateSetDate(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  if (!a2)
    CalExceptionDateSetDate_cold_1();
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalExceptionDateCopyOrder(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalExceptionDateSetOrder(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalExceptionDateCopyOwner(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Owner;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalExceptionDateGetOwner(a1);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalExceptionDateSetOwner(void *a1, uint64_t a2)
{
  CFTypeRef v4;
  const void *v5;

  v4 = CalExceptionDateCopyOwner((uint64_t)a1);
  v5 = v4;
  if (v4 != (CFTypeRef)a2)
  {
    if (v4)
      CalCalendarItemRemoveExceptionDate((uint64_t)v4, a1);
    if (a2)
      CalCalendarItemAddExceptionDate(a2, a1);
  }
  if (v5)
    CFRelease(v5);
}

uint64_t _CalInvalidateExceptionDatesWithOwnerID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t CalDatabaseCopyExceptionDateChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  uint64_t v6;
  os_unfair_lock_s *v7;
  __CFString *v8;
  void *v9;
  int ID;
  id v11;
  void *v12;
  uint64_t RecordStore;
  BOOL v14;
  const os_unfair_lock *Context;
  _QWORD v17[4];
  id v18;
  os_unfair_lock_s *v19;
  int v20;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  v7 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  if ((a1[90]._os_unfair_lock_opaque & 0x80000000) != 0)
  {
    v8 = CFSTR("calendar_id = ?1 AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = ?2) AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?2) AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = ?3 AND client_identifier = ?2)");
  }
  else
  {
    objc_msgSend(CFSTR("calendar_id = ?1 AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = ?2) AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?2) AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = ?3 AND client_identifier = ?2)"), "stringByAppendingString:", CFSTR(" AND sequence_number <= ?"));
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  v9 = (void *)_CalDatabaseCopyClientIdentifier((uint64_t)a1);
  ID = CPRecordGetID();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __CalDatabaseCopyExceptionDateChangesInCalendar_block_invoke;
  v17[3] = &unk_1E4F8D1F0;
  v20 = ID;
  v11 = v9;
  v18 = v11;
  v19 = a1;
  v12 = (void *)MEMORY[0x1A85B52F0](v17);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v14 = RecordStore == 0;
  else
    v14 = 1;
  if (!v14)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithBindBlockAndProperties();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7);
  os_unfair_lock_unlock(v7);

  return v6;
}

CFComparisonResult _CompareExceptionDatesByDate(uint64_t a1, uint64_t a2)
{
  const __CFDate *Date;
  const __CFDate *v4;
  uint64_t v6;

  Date = (const __CFDate *)_CalExceptionDateGetDate(a1);
  v4 = (const __CFDate *)_CalExceptionDateGetDate(a2);
  if (Date && v4)
    return CFDateCompare(Date, v4, 0);
  if (v4)
    v6 = -1;
  else
    v6 = 0;
  if (Date)
    return 1;
  else
    return v6;
}

CFComparisonResult _CompareExceptionDatesBySyncOrder(uint64_t a1, uint64_t a2)
{
  const __CFNumber *ProviderIdentifier;
  const __CFNumber *v4;

  ProviderIdentifier = (const __CFNumber *)_CalColorGetProviderIdentifier(a1);
  v4 = (const __CFNumber *)_CalColorGetProviderIdentifier(a2);
  if (ProviderIdentifier && v4)
    return CFNumberCompare(ProviderIdentifier, v4, 0);
  if (ProviderIdentifier)
    return -1;
  return (unint64_t)(v4 != 0);
}

CFComparisonResult CompareExceptionDatesByDate(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  CFComparisonResult v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v5 = _CompareExceptionDatesByDate(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

CFComparisonResult CompareExceptionDatesBySyncOrder(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  CFComparisonResult v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v5 = _CompareExceptionDatesBySyncOrder(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

CFTypeRef _CalExceptionDateLoadStoreId(uint64_t a1)
{
  CFTypeRef result;
  const os_unfair_lock *Context;

  result = _CalExceptionDateGetOwner(a1);
  if (result)
  {
    _CalCalendarItemGetStoreId((uint64_t)result);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

CFTypeRef _CalExceptionDateLoadCalendarId(uint64_t a1)
{
  CFTypeRef result;
  const os_unfair_lock *Context;

  result = _CalExceptionDateGetOwner(a1);
  if (result)
  {
    _CalEventGetCalendarId((uint64_t)result);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

uint64_t _CalConferencePrepareForSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
    return CalRelationOwnerWillSave(result);
  return result;
}

void CalConferenceInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalConferenceClass, (const char **)&kCalConferenceIndexes, 0);
}

void CalConferenceMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  if (a3 <= 15008)
    CalMigrateTableFull(a2, (const char **)&kCalConferenceClass, 0, (const char **)&kCalConferenceUpgradeInfo, 0, (const char **)&kCalConferenceIndexes, 0, 0, a3);
}

uint64_t CalConferenceGetPropertyIDWithPropertyName(void *key)
{
  void *value;

  if (CalConferenceGetPropertyIDWithPropertyName_onceToken != -1)
    dispatch_once(&CalConferenceGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_18);
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalConferenceGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A5D5B808(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 96; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

CFTypeRef _CalConferenceHasValidParent(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  result = CalRelationGetRelatedObject(Property);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

void _CalConferenceCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Conference WHERE owner_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
}

uint64_t _CalInvalidateConferencesWithOwnerID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t _CalConferenceGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyConferenceWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalConferenceGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

const void *_CalDatabaseCreateConference(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;
  BOOL v6;
  const os_unfair_lock *v7;
  CFStringRef v8;
  BOOL v9;
  const os_unfair_lock *v10;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 23);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  CPRecordInitializeProperty();
  v8 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled)
    v9 = v2 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if (CPRecordGetStore())
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v8);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateConference(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Conference;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Conference = _CalDatabaseCreateConference((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Conference;
}

_QWORD *_CalRemoveConference(void *a1)
{
  CFTypeRef Owner;
  uint64_t DatabaseForRecord;

  Owner = _CalConferenceGetOwner((uint64_t)a1);
  if (Owner)
    return _CalCalendarItemRemoveConference((uint64_t)Owner, a1);
  DatabaseForRecord = CalGetDatabaseForRecord();
  return (_QWORD *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

CFTypeRef _CalConferenceGetOwner(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

void CalRemoveConference(void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveConference(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalConferenceCopyOwner(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Owner;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalConferenceGetOwner(a1);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalConferenceSetOwner(void *a1, uint64_t a2)
{
  CFTypeRef v4;
  const void *v5;

  v4 = CalConferenceCopyOwner((uint64_t)a1);
  v5 = v4;
  if (v4 != (CFTypeRef)a2)
    CalCalendarItemRemoveConference((uint64_t)v4, a1);
  if (a2)
    CalCalendarItemAddConference(a2, a1);
  if (v5)
    CFRelease(v5);
}

void CalConferenceSetURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalConferenceCopyURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalConferenceSetFeature(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalConferenceCopyFeature(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalConferenceSetInfo(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalConferenceCopyInfo(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalConferenceSetLanguage(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalConferenceCopyLanguage(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalConferenceSetRegion(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalConferenceCopyRegion(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalStoreInvalidateSubentities(uint64_t result, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t Store;
  uint64_t Context;

  if ((result & 0x80000000) == 0)
  {
    v4 = result;
    Store = CPRecordGetStore();
    Context = CPRecordStoreGetContext();
    if (!*(_BYTE *)(Context + 382))
      _CalInvalidateCalendarsForStoreId(Store);
    if (v4 == 1)
    {
      _CalStoreInsertNewLocal(a3);
      _CalCalendarInsertNewDefault(a3);
    }
    return _CalDatabaseSetDeletionFlags(Context, 1);
  }
  return result;
}

uint64_t _CalStorePrepareForSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v3;
  uint64_t OriginalProperty;
  int ID;
  NSObject *v6;
  uint64_t DatabaseForRecord;
  const os_unfair_lock *v8;
  uint64_t Property;
  uint64_t result;
  const os_unfair_lock *v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (!CPRecordGetProperty())
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v3)
            os_unfair_lock_assert_owner(v3 + 20);
        }
      }
    }
    OriginalProperty = CPRecordGetOriginalProperty();
    ID = CPRecordGetID();
    v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v12[0] = 67109378;
      v12[1] = ID;
      v13 = 2112;
      v14 = OriginalProperty;
      _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "Saving a store with no persistent ID (source identifier). UID = %i, original persistent ID = %@", (uint8_t *)v12, 0x12u);
    }
    DatabaseForRecord = CalGetDatabaseForRecord();
    _CalDatabaseIntegrityError(DatabaseForRecord, CFSTR("Store Without PersistentID"));
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    CalRelationOwnerWillSave(Property);
  result = _CalStoreDefaultAlarmChanges(a1);
  if (result)
  {
    _CalStoreUpdateAlarmCacheForDefaultAlarmChanges(a1, result);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
    return CPRecordUnloadProperty();
  }
  return result;
}

void _CalStorePropertyChanged(uint64_t a1, int a2)
{
  uint64_t DatabaseForRecord;
  uint64_t v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  const void *v8;
  void *v9;
  _BOOL4 IsEnabled;
  id v11;
  const os_unfair_lock *v12;
  int v13;
  id v14;
  NSObject *v15;
  _QWORD block[4];
  id v17;

  if (_CalRecordHasValueChangedForProperty(a1, a2))
  {
    DatabaseForRecord = CalGetDatabaseForRecord();
    v5 = DatabaseForRecord;
    switch(a2)
    {
      case 0:
      case 1:
      case 3:
      case 5:
      case 29:
        _CalDatabaseSetChangeFlags(DatabaseForRecord, 2);
        if (a2 != 4)
          goto LABEL_10;
        goto LABEL_4;
      case 2:
      case 31:
        _CalStoreDefaultMarkAlarmChange(a1);
        _CalDatabaseSetChangeFlags(v5, 2);
        if (!a1)
          goto LABEL_15;
        goto LABEL_11;
      case 4:
LABEL_4:
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context)
                os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
        CPRecordUnloadProperty();
        goto LABEL_10;
      case 7:
      case 8:
      case 24:
      case 25:
      case 28:
      case 30:
      case 34:
LABEL_10:
        if (a1)
        {
LABEL_11:
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v7)
                os_unfair_lock_assert_owner(v7 + 20);
            }
          }
        }
LABEL_15:
        CPRecordSetProperty();
        if (a2 == 5)
        {
          v8 = (const void *)_CalStoreCopyDelegatedAccountOwnerStoreID(a1);
          if (v8)
          {
            CFRelease(v8);
            if (_CalStoreDelegateToggled_onceToken != -1)
              dispatch_once(&_CalStoreDelegateToggled_onceToken, &__block_literal_global_19);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CPRecordGetID());
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            IsEnabled = _CalStoreIsEnabled(a1);
            v11 = (id)_CalStoreDelegateToggled_storeIDsPendingCleanup;
            objc_sync_enter(v11);
            if (IsEnabled)
            {
              objc_msgSend((id)_CalStoreDelegateToggled_storeIDsPendingCleanup, "removeObject:", v9);
              objc_sync_exit(v11);

            }
            else
            {
              v13 = objc_msgSend((id)_CalStoreDelegateToggled_storeIDsPendingCleanup, "containsObject:", v9);
              objc_sync_exit(v11);

              if ((v13 & 1) == 0)
              {
                v14 = (id)_CalStoreDelegateToggled_storeIDsPendingCleanup;
                objc_sync_enter(v14);
                objc_msgSend((id)_CalStoreDelegateToggled_storeIDsPendingCleanup, "addObject:", v9);
                objc_sync_exit(v14);

                v15 = _CalStoreDelegateToggled_delegateDataCleanupQueue;
                block[0] = MEMORY[0x1E0C809B0];
                block[1] = 3221225472;
                block[2] = ___CalStoreDelegateToggled_block_invoke_2;
                block[3] = &unk_1E4F841C8;
                v17 = v9;
                dispatch_async(v15, block);

              }
            }

          }
        }
        break;
      case 20:
      case 21:
      case 32:
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v12)
                os_unfair_lock_assert_owner(v12 + 20);
            }
          }
        }
        CPRecordSetProperty();
        break;
      default:
        return;
    }
  }
}

void sub_1A5D5C8D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void CalStoreInitializeTables(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t Context;

  CPRecordStoreCreateTablesForClass();
  _CalAttachmentFileRegisterFunctions(a1, (uint64_t)a2);
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX StoreExternalId on Store(external_id)"));
  _CalStoreInsertNewLocal(a2);
  Context = CPRecordStoreGetContext();
  if (Context && !*(_BYTE *)(Context + 378))
  {
    if ((a3 & 1) == 0)
      _CalStoreInsertNativeStore(a2);
  }
  else
  {
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DELETE FROM Store WHERE ROWID = 1"));
  }
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER delete_store_members AFTER DELETE ON Store\nBEGIN\nDELETE FROM Calendar WHERE store_id = OLD.ROWID;\nDELETE FROM Error WHERE ROWID = OLD.error_id;\nEND;\n"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER delete_store_changes AFTER DELETE ON Store\nBEGIN\nDELETE FROM CalendarChanges WHERE store_id = OLD.ROWID;DELETE FROM CalendarItemChanges WHERE store_id = OLD.ROWID;DELETE FROM AlarmChanges WHERE store_id = OLD.ROWID;DELETE FROM RecurrenceChanges WHERE store_id = OLD.ROWID;DELETE FROM ParticipantChanges WHERE store_id = OLD.ROWID;DELETE FROM AttachmentChanges WHERE store_id = OLD.ROWID;DELETE FROM ContactChanges WHERE store_id = OLD.ROWID;DELETE FROM EventActionChanges WHERE store_id = OLD.ROWID;DELETE FROM ExceptionDateChanges WHERE store_id = OLD.ROWID;DELETE FROM NotificationChanges WHERE store_id = OLD.ROWID;DELETE FROM ShareeChanges WHERE store_id = OLD.ROWID;DELETE FROM ClientCursor WHERE store_id = OLD.ROWID;\nEND;\n"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER clean_attachments_store_deleted AFTER DELETE ON Store\nBEGIN\nSELECT CalNoteStoreDeleted(OLD.ROWID, OLD.external_id, OLD.persistent_id);\nEND;"));
  CalMigrationCreateIndexes(a2, (const char **)&kCalStoreClass, 0, (const char **)&kCalStoreChangesIndexes);
}

void _CalStoreInsertNewLocal(_QWORD *a1)
{
  const __CFUUID *v2;
  CFStringRef v3;
  CFStringRef v4;

  v2 = CFUUIDCreate(0);
  v3 = CFUUIDCreateString(0, v2);
  v4 = CFStringCreateWithFormat(0, 0, CFSTR("INSERT INTO Store (ROWID, type, name, persistent_id, flags, flags2) VALUES (%d, 0, 'Default', '%@', %u, %u);"),
         1,
         v3,
         268435457,
         32898);
  CalPerformSQLWithConnection(a1, (uint64_t)v4);
  CFRelease(v4);
  CFRelease(v3);
  CFRelease(v2);
}

void _CalStoreInsertNativeStore(_QWORD *a1)
{
  CFUUIDRef v2;
  CFStringRef v3;
  const os_unfair_lock *Context;
  const os_unfair_lock *v5;

  v2 = CFUUIDCreate(0);
  v3 = CFStringCreateWithFormat(0, 0, CFSTR("INSERT INTO Store (type, name, persistent_id, flags) VALUES (%d, 'Other', '%@', %u);"),
         5,
         CFSTR("______NativeStorePersistentID_______"),
         4);
  CalPerformSQLWithConnection(a1, (uint64_t)v3);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(_QWORD *)(*a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(_QWORD *)(*a1 + 104))
        {
          v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5)
            os_unfair_lock_assert_owner(v5 + 20);
        }
      }
    }
  }
  CPSqliteConnectionRowidOfLastInsert();
  CPSqliteConnectionSetIntegerForProperty();
  CFRelease(v3);
  CFRelease(v2);
}

void _CalStoreRepairDefaultLocalStore(uint64_t a1)
{
  uint64_t RecordStore;
  uint64_t v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v6;
  const os_unfair_lock *v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  uint32_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 378))
    return;
  _CalDatabaseIntegrityError(a1, CFSTR("Local Store Not Local"));
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (!RecordStore)
  {
    v11 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    v17 = 134217984;
    v18 = a1;
    v12 = "Error repairing local store, could not get record store from database %p";
    v13 = v11;
    goto LABEL_24;
  }
  v3 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
  {
    v14 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    v17 = 134217984;
    v18 = v3;
    v12 = "Error repairing local store, could not get sqlitedb from recordStore %p";
LABEL_23:
    v13 = v14;
LABEL_24:
    v15 = 12;
    goto LABEL_25;
  }
  v6 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  v8 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (!v8)
  {
    v14 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    v17 = 134217984;
    v18 = v3;
    v12 = "Error repairing local store, could not get coonnection from sqlitedb %p";
    goto LABEL_23;
  }
  v9 = (_QWORD *)v8;
  if (!__CalDatabaseBeginWriteTransaction(a1, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:449"))
  {
    v16 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    LOWORD(v17) = 0;
    v12 = "Error repairing local store, could not start a transaction";
    v13 = v16;
    v15 = 2;
LABEL_25:
    _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v17, v15);
    return;
  }
  if (_CalStoreVerifyAndRepairLocalStore(a1, v9))
  {
    __CalDatabaseCommitTransaction(a1, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:455");
    v10 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_DEFAULT, "Flushing change in-memory change tracking and posting a database change notification because we just repaired the local store", (uint8_t *)&v17, 2u);
    }
    _CalDatabaseNoteUntrackedChange(a1);
  }
  else
  {
    __CalDatabaseRollbackTransaction(a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:460");
  }
  _CalDatabaseReportIntegrityErrors(v6);
}

uint64_t _CalStoreVerifyAndRepairLocalStore(uint64_t a1, _QWORD *a2)
{
  void *v3;
  const os_unfair_lock *Context;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  NSObject *v11;
  NSObject *v13;
  int buf;
  uint8_t buf_4[8];
  uint8_t v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 378))
    return 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT type FROM Store WHERE ROWID = %i"), 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        if (*(_QWORD *)(*a2 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v5 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (!v5)
  {
    v11 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      buf = 138543362;
      *(_QWORD *)buf_4 = v3;
      _os_log_impl(&dword_1A5CCB000, v11, OS_LOG_TYPE_ERROR, "Failed to create statement from SQL \"%{public}@\".", (uint8_t *)&buf, 0xCu);
    }

    return 0;
  }
  v6 = v5;
  *(_DWORD *)v16 = 0;
  if (CDBLockingAssertionsEnabled)
  {
    if (*v5)
    {
      v7 = **v5;
      if (v7)
      {
        if (*(_QWORD *)(v7 + 104))
        {
          v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8)
            os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
  }
  CPSqliteStatementIntegerResult();
  if (CDBLockingAssertionsEnabled)
  {
    if (*v6)
    {
      v9 = **v6;
      if (v9)
      {
        if (*(_QWORD *)(v9 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  CPSqliteStatementReset();
  v13 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    buf = 67109120;
    *(_DWORD *)buf_4 = *(_DWORD *)v16;
    _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "Migration didn't find the default local store (sqlite returned %i). Inserting a new default local store.", (uint8_t *)&buf, 8u);
  }

  _CalStoreInsertNewLocal(a2);
  return 1;
}

void CalStoreRepairDefaultLocalStore(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalStoreRepairDefaultLocalStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

void CalStoreMigrateTables(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  const os_unfair_lock *v5;
  uint64_t **v6;
  uint64_t v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFUUID *v11;
  CFStringRef v12;
  CFStringRef v13;
  uint64_t v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *Context;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const __CFString *v22;
  void *v23;
  const __CFString *v24;
  void *v25;
  const os_unfair_lock *v26;
  uint64_t v27;
  CFStringRef v28;
  CFStringRef v29;
  CFStringRef v30;
  void *v31;
  void *v32;
  CFStringRef v33;
  BOOL v34;
  const os_unfair_lock *v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t v38;
  const os_unfair_lock *v39;
  int v40;
  uint64_t v41;
  const os_unfair_lock *v42;
  const os_unfair_lock *v43;
  uint64_t v44;
  NSObject *v45;
  CFStringRef v46;
  CFStringRef v47;
  uint64_t v48;
  const __CFString *v49;
  void *v50;
  _QWORD v51[6];
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  id v57;
  uint8_t buf[8];
  uint8_t *v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  void (*v62)(uint64_t);
  id v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if ((int)a3 <= 6)
  {
    CalStoreInitializeTables(a1, a2, 1);
    goto LABEL_3;
  }
  if (a3 > 0x426C)
    goto LABEL_76;
  if (a3 <= 0xC)
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TABLE StoreChanges;"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TRIGGER IF EXISTS delete_store_members;"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TRIGGER IF EXISTS delete_store_changes;"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TRIGGER IF EXISTS clean_attachments_store_deleted;"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("ALTER TABLE Store RENAME TO Store_;"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("ALTER TABLE StoreChanges RENAME TO StoreChanges_;"));
  CPRecordStoreCreateTablesForClass();
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER delete_store_members AFTER DELETE ON Store\nBEGIN\nDELETE FROM Calendar WHERE store_id = OLD.ROWID;\nDELETE FROM Error WHERE ROWID = OLD.error_id;\nEND;\n"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER delete_store_changes AFTER DELETE ON Store\nBEGIN\nDELETE FROM CalendarChanges WHERE store_id = OLD.ROWID;DELETE FROM CalendarItemChanges WHERE store_id = OLD.ROWID;DELETE FROM AlarmChanges WHERE store_id = OLD.ROWID;DELETE FROM RecurrenceChanges WHERE store_id = OLD.ROWID;DELETE FROM ParticipantChanges WHERE store_id = OLD.ROWID;DELETE FROM AttachmentChanges WHERE store_id = OLD.ROWID;DELETE FROM ContactChanges WHERE store_id = OLD.ROWID;DELETE FROM EventActionChanges WHERE store_id = OLD.ROWID;DELETE FROM ExceptionDateChanges WHERE store_id = OLD.ROWID;DELETE FROM NotificationChanges WHERE store_id = OLD.ROWID;DELETE FROM ShareeChanges WHERE store_id = OLD.ROWID;DELETE FROM ClientCursor WHERE store_id = OLD.ROWID;\nEND;\n"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER clean_attachments_store_deleted AFTER DELETE ON Store\nBEGIN\nSELECT CalNoteStoreDeleted(OLD.ROWID, OLD.external_id, OLD.persistent_id);\nEND;"));
  if (a3 - 16001 <= 0x1F)
  {
    if (!*(_BYTE *)(CPRecordStoreGetContext() + 378))
    {
      *(_QWORD *)buf = 0;
      v59 = buf;
      v60 = 0x3032000000;
      v61 = __Block_byref_object_copy__0;
      v62 = __Block_byref_object_dispose__0;
      v63 = 0;
      v52 = 0;
      v53 = &v52;
      v54 = 0x3032000000;
      v55 = __Block_byref_object_copy__0;
      v56 = __Block_byref_object_dispose__0;
      v57 = 0;
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*a2)
          {
            if (*(_QWORD *)(*a2 + 104))
            {
              Context = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (Context)
                os_unfair_lock_assert_owner(Context + 20);
            }
          }
        }
      }
      v17 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      v51[0] = MEMORY[0x1E0C809B0];
      v51[1] = 3221225472;
      v51[2] = ___CalStoreMigrateStoreTableData_block_invoke;
      v51[3] = &unk_1E4F8DCB0;
      v51[4] = buf;
      v51[5] = &v52;
      CalSendResults(v17, v51);
      v18 = *((_QWORD *)v59 + 5);
      if (v18)
        CalAlarmSetDefaultTimedAlarmOffset(v18);
      v19 = v53[5];
      if (v19)
        CalAlarmSetDefaultAllDayAlarmOffset(v19);
      CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("UPDATE Store_ SET default_alarm_offset=NULL, default_all_day_alarm_offset=NULL WHERE ROWID = 1 OR external_id=\"Subscribed Calendars\""));
      _Block_object_dispose(&v52, 8);

      _Block_object_dispose(buf, 8);
    }
    v20 = (void *)objc_msgSend(CFSTR("ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications, flags2"), "mutableCopy");
    objc_msgSend(v20, "appendString:", CFSTR(", display_order"));
    objc_msgSend(v20, "appendString:", CFSTR(", owner_name"));
    goto LABEL_45;
  }
  if (a3 < 0x24)
  {
    v24 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, NULL, type, constraint_path, disabled, external_id, NULL, NULL, NULL, NULL, 0, NULL, 0, 0 FROM Store_;");
LABEL_70:
    CalPerformSQLWithConnection(a2, (uint64_t)v24);
    v23 = (void *)objc_msgSend(CFSTR("record, type, sequence_number"), "mutableCopy");
    goto LABEL_71;
  }
  if (a3 < 0x33)
  {
    v24 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, NULL, type, constraint_path, disabled, external_id, persistent_id, NULL, NULL, NULL, 0, NULL, 0, 0 FROM Store_;");
    goto LABEL_70;
  }
  if (a3 < 0x44)
  {
    v24 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, NULL, NULL, NULL, 0, NULL, 0, 0 FROM Store_;");
    goto LABEL_70;
  }
  if (a3 < 0x70)
  {
    v24 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, NULL, NULL, 0, NULL, 0, 0 FROM Store_;");
    goto LABEL_70;
  }
  if (a3 < 0x80)
  {
    v24 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, 0, 0 FROM Store_;");
    goto LABEL_70;
  }
  if (a3 < 0x85)
  {
    v24 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, 0 FROM Store_;");
    goto LABEL_70;
  }
  if (a3 < 0x2AFD)
  {
    v24 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value FROM Store_;");
    goto LABEL_70;
  }
  if (a3 < 0x2EE2)
  {
    v49 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end FROM Store_;");
LABEL_141:
    CalPerformSQLWithConnection(a2, (uint64_t)v49);
    v22 = CFSTR("INSERT INTO Error (store_owner_id, error_code) SELECT ROWID, last_sync_error FROM Store_ WHERE last_sync_error != 0");
    goto LABEL_52;
  }
  if (a3 >> 3 < 0x5DD)
  {
    v49 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id FROM Store_;");
    goto LABEL_141;
  }
  if (a3 == 12008)
  {
    v49 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id FROM Store_;");
    goto LABEL_141;
  }
  if (a3 < 0x2EEA)
  {
    v49 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications FROM Store_;");
    goto LABEL_141;
  }
  if (a3 < 0x36B1)
  {
    v49 = CFSTR("INSERT INTO Store (ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications, flags2) SELECT ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications, flags2 FROM Store_;");
    goto LABEL_141;
  }
  v50 = (void *)objc_msgSend(CFSTR("ROWID, name, default_alarm_offset, type, constraint_path, disabled, external_id, persistent_id, flags, creator_bundle_id, creator_code_signing_identity, only_creator_can_modify, external_mod_tag, preferred_event_private_value, strictest_event_private_value, last_sync_start, last_sync_end, delegated_account_owner_store_id, delegated_account_default_calendar_for_new_events_id, shows_notifications, flags2"), "mutableCopy");
  v20 = v50;
  if (a3 >= 0x3A99)
  {
    objc_msgSend(v50, "appendString:", CFSTR(", display_order"));
    if (a3 >= 0x3A9E)
    {
      objc_msgSend(v20, "appendString:", CFSTR(", owner_name"));
      if (a3 >> 2 >= 0xEA9)
      {
LABEL_45:
        objc_msgSend(v20, "appendString:", CFSTR(", default_all_day_alarm_offset"));
        if (a3 >= 0x3E85)
        {
          objc_msgSend(v20, "appendString:", CFSTR(", error_id"));
          if (a3 >> 3 >= 0x7D1)
          {
            objc_msgSend(v20, "appendString:", CFSTR(", notes"));
            if (a3 >= 0x3E9D)
            {
              objc_msgSend(v20, "appendString:", CFSTR(", cached_external_info"));
              if (a3 >= 0x4269)
                objc_msgSend(v20, "appendString:", CFSTR(", app_group_id"));
            }
          }
        }
      }
    }
  }
  v21 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("INSERT INTO Store (%@) SELECT %@ FROM Store_;"),
          v20,
          v20);

  CalPerformSQLWithConnection(a2, v21);
  if (a3 >= 0x3E85)
  {
    v23 = (void *)objc_msgSend(CFSTR("record, type, sequence_number"), "mutableCopy");
    goto LABEL_57;
  }
  v22 = CFSTR("INSERT INTO Error (store_owner_id, error_code, user_info) SELECT ROWID, last_sync_error, last_sync_error_data FROM Store_ WHERE last_sync_error != 0");
LABEL_52:
  CalPerformSQLWithConnection(a2, (uint64_t)v22);
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("UPDATE Store SET error_id = (SELECT ROWID FROM Error WHERE store_owner_id = Store.ROWID)"));
  v23 = (void *)objc_msgSend(CFSTR("record, type, sequence_number"), "mutableCopy");
  if (a3 >> 2 >= 0xEA9)
  {
LABEL_57:
    objc_msgSend(v23, "appendString:", CFSTR(", default_alarm_offset"));
    objc_msgSend(v23, "appendString:", CFSTR(", default_all_day_alarm_offset"));
  }
LABEL_71:
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("INSERT INTO StoreChanges (%@) SELECT %@ FROM StoreChanges_;"),
    v23,
    v23);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  CalPerformSQLWithConnection(a2, (uint64_t)v25);

  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TABLE Store_;"));
  CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TABLE StoreChanges_;"));
  if (a3 <= 0x23)
  {
LABEL_3:
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a2)
        {
          if (*(_QWORD *)(*a2 + 104))
          {
            v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5)
              os_unfair_lock_assert_owner(v5 + 20);
          }
        }
      }
    }
    v6 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (v6)
    {
      *(_DWORD *)buf = 0;
      do
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v6)
          {
            v7 = **v6;
            if (v7)
            {
              if (*(_QWORD *)(v7 + 104))
              {
                v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v8)
                  os_unfair_lock_assert_owner(v8 + 20);
              }
            }
          }
        }
        v9 = CPSqliteStatementIntegerResult();
        if (*(_DWORD *)buf != 100)
          break;
        v10 = v9;
        v11 = CFUUIDCreate(0);
        v12 = CFUUIDCreateString(0, v11);
        v13 = CFStringCreateWithFormat(0, 0, CFSTR("UPDATE Store SET persistent_id=\"%@\" WHERE rowid = %d;"),
                v12,
                v10);
        CFRelease(v12);
        CFRelease(v11);
        CalPerformSQLWithConnection(a2, (uint64_t)v13);
        CFRelease(v13);
      }
      while (*(_DWORD *)buf == 100);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v6)
        {
          v14 = **v6;
          if (v14)
          {
            if (*(_QWORD *)(v14 + 104))
            {
              v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v15)
                os_unfair_lock_assert_owner(v15 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    if ((int)a3 <= 31)
      _CalStoreInsertNativeStore(a2);
  }
  if (a3 - 7 <= 0x20)
  {
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DELETE FROM Calendar WHERE rowid NOT IN (SELECT Calendar.rowid FROM Calendar, Store WHERE Calendar.store_id = Store.rowid);"));
LABEL_75:
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("UPDATE Store SET constraint_path = NULL WHERE rowid = 1"));
    goto LABEL_76;
  }
  if ((int)a3 <= 66)
    goto LABEL_75;
LABEL_76:
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        if (*(_QWORD *)(*a2 + 104))
        {
          v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v26)
            os_unfair_lock_assert_owner(v26 + 20);
        }
      }
    }
  }
  v27 = CPSqliteConnectionIntegerForProperty();
  if ((int)v27 >= 1)
  {
    v28 = CFStringCreateWithFormat(0, 0, CFSTR("UPDATE Store SET flags = %u WHERE ROWID = %d;"), 4, v27);
    if (v28)
    {
      CalPerformSQLWithConnection(a2, (uint64_t)v28);
      CFRelease(v28);
    }
  }
  v29 = CFStringCreateWithFormat(0, 0, CFSTR("UPDATE Store SET flags = (IFNULL(flags,0) & %u) | %u WHERE ROWID = %d;"),
          2,
          0x10000000,
          1);
  if (v29)
  {
    CalPerformSQLWithConnection(a2, (uint64_t)v29);
    CFRelease(v29);
  }
  v30 = CFStringCreateWithFormat(0, 0, CFSTR("UPDATE Store SET flags2 = %u WHERE ROWID = %d;"), 32898, 1);
  if (v30)
  {
    CalPerformSQLWithConnection(a2, (uint64_t)v30);
    CFRelease(v30);
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE Store SET flags = %u WHERE type = %d AND ROWID != %d"), 268435457, 0, 1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  CalPerformSQLWithConnection(a2, (uint64_t)v31);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE Store SET flags2 = %u WHERE type = %d AND ROWID != %d"), 32898, 0, 1);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  CalPerformSQLWithConnection(a2, (uint64_t)v32);
  if ((int)a3 <= 91)
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX StoreExternalId on Store(external_id)"));
  v33 = CFStringCreateWithFormat(0, 0, CFSTR("SELECT COUNT(rowid) from Store WHERE type = %i;"), 5);
  v34 = a2 == 0;
  if (!CDBLockingAssertionsEnabled)
    v34 = 1;
  if (!v34)
  {
    if (*a2)
    {
      if (*(_QWORD *)(*a2 + 104))
      {
        v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v35)
          os_unfair_lock_assert_owner(v35 + 20);
      }
    }
  }
  v36 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  v37 = v36;
  if (v36)
  {
    LODWORD(v52) = 0;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v36)
      {
        v38 = **v36;
        if (v38)
        {
          if (*(_QWORD *)(v38 + 104))
          {
            v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v39)
              os_unfair_lock_assert_owner(v39 + 20);
          }
        }
      }
    }
    v40 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v37)
      {
        v41 = **v37;
        if (v41)
        {
          if (*(_QWORD *)(v41 + 104))
          {
            v42 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v42)
              os_unfair_lock_assert_owner(v42 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    if ((_DWORD)v52 == 100 && v40 >= 2)
    {
      if (a2)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*a2)
          {
            if (*(_QWORD *)(*a2 + 104))
            {
              v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v43)
                os_unfair_lock_assert_owner(v43 + 20);
            }
          }
        }
      }
      v44 = CPSqliteConnectionIntegerForProperty();
      v45 = (id)CDBLogHandle;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v40;
        LOWORD(v59) = 1024;
        *(_DWORD *)((char *)&v59 + 2) = v44;
        _os_log_impl(&dword_1A5CCB000, v45, OS_LOG_TYPE_ERROR, "Found %i native stores.  Deleting all but store ID %i.", buf, 0xEu);
      }

      v46 = CFStringCreateWithFormat(0, 0, CFSTR("DELETE FROM Store WHERE type = %i AND rowid != %i"), 5, v44);
      if (v46)
      {
        CalPerformSQLWithConnection(a2, (uint64_t)v46);
        CFRelease(v46);
      }
    }
  }
  if (v33)
    CFRelease(v33);
  if ((int)a3 <= 15010)
  {
    v47 = CFStringCreateWithFormat(0, 0, CFSTR("UPDATE Store SET persistent_id = '%@' WHERE type = %i;"),
            CFSTR("______NativeStorePersistentID_______"),
            5);
    if (v47)
    {
      CalPerformSQLWithConnection(a2, (uint64_t)v47);
      CFRelease(v47);
    }
    goto LABEL_129;
  }
  if (a3 <= 0x4651)
LABEL_129:
    CalMigrationCreateIndexes(a2, (const char **)&kCalStoreClass, 0, (const char **)&kCalStoreChangesIndexes);
  v48 = CPRecordStoreGetContext();
  _CalStoreVerifyAndRepairLocalStore(v48, a2);

}

void sub_1A5D5DFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyStoreChangesInStore(const void *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  CFTypeRef v6;
  uint64_t ID;
  CFStringRef v8;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v10;
  uint64_t RecordStore;
  BOOL v12;
  const os_unfair_lock *Context;
  uint64_t v14;
  CFStringRef v15;
  CFStringRef v17;

  if (a2)
  {
    v4 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    v5 = v4 + 20;
    os_unfair_lock_lock(v4 + 20);
    v6 = _CalDatabaseCopyClientIdentifier((uint64_t)v4);
    ID = CPRecordGetID();
    v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("record = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN     (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN     (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v6, v6, 6, v6);
    CFRelease(v6);
  }
  else
  {
    v4 = (os_unfair_lock_s *)CFRetain(a1);
    v5 = v4 + 20;
    os_unfair_lock_lock(v4 + 20);
    v17 = 0;
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase((uint64_t)v4, (id *)&v17);
  v8 = v17;
  v17 = 0;
  if (!a3)
  {
    v10 = 0;
    goto LABEL_8;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v10 = Mutable;
    *a3 = Mutable;
LABEL_8:
    RecordStore = _CalDatabaseGetRecordStore((uint64_t)v4);
    if (CDBLockingAssertionsEnabled)
      v12 = RecordStore == 0;
    else
      v12 = 1;
    if (!v12)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    v14 = CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
    if (v8)
      CFRelease(v8);
    v15 = v17;
    if (v17)
    {
      if (v10)
      {
        CFDictionaryAddValue(v10, CFSTR("ID"), v17);
        v15 = v17;
      }
      CFRelease(v15);
    }
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v5);
    os_unfair_lock_unlock(v5);
    CFRelease(v4);
    return v14;
  }
  if (v8)
    CFRelease(v8);
  if (v4)
    CFRelease(v4);
  return 0xFFFFFFFFLL;
}

void _CalStoreUpdateAlarmCacheForDefaultAlarmChanges(uint64_t a1, uint64_t a2)
{
  uint64_t Context;
  uint64_t v5;
  const void *v6;

  if (CPRecordGetStore())
  {
    Context = CPRecordStoreGetContext();
    if (Context)
    {
      v5 = _CalDatabaseCopyEventOccurrenceCache(Context);
      if (v5)
      {
        v6 = (const void *)v5;
        _CalEventOccurrenceCacheMarkStoreForDefaultAlarmChanges(v5, a1, a2);
        CFRelease(v6);
      }
    }
  }
}

void _CalStoreDeleteDisabledDelegateData()
{
  os_unfair_lock_s *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  const void *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  void *ValueAtIndex;
  os_unfair_lock_s *v10;
  os_unfair_lock_s *v11;

  v0 = (os_unfair_lock_s *)CalDatabaseCreateWithOptions(20);
  if (v0)
  {
    v1 = v0;
    v0 = (os_unfair_lock_s *)CalDatabaseCopyStoreWithUID(v0);
    if (!v0)
    {
      v5 = (const __CFArray *)v1;
LABEL_14:
      v11 = v0;
      CFRelease(v5);
      v0 = v11;
      goto LABEL_15;
    }
    v2 = v0;
    v3 = (const void *)CalStoreCopyExternalID((uint64_t)v0);
    if (v3)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("com.apple.dataaccessd-%@"), v3);
      v10 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
      CalDatabaseSetClientIdentifier((uint64_t)v1, v10);
      v4 = CalStoreCopyCalendars((uint64_t)v2);
      v5 = v4;
      if (v4)
      {
        Count = CFArrayGetCount(v4);
        if (Count >= 1)
        {
          v7 = Count;
          for (i = 0; i != v7; ++i)
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(v5, i);
            CalRemoveCalendar(ValueAtIndex);
          }
        }
        CalStoreSetExternalModificationTag((uint64_t)v2);
        CalStoreSetLastSyncStartTime((uint64_t)v2);
        CalStoreSetLastSyncEndTime((uint64_t)v2);
        CalDatabaseSave((uint64_t)v1);
      }
    }
    else
    {
      v10 = 0;
      v5 = 0;
    }
    CFRelease(v1);
    CFRelease(v2);
    if (v3)
      CFRelease(v3);
    v0 = v10;
    if (v5)
      goto LABEL_14;
  }
LABEL_15:

}

uint64_t CalStoreCopyExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalStoreSetExternalModificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetLastSyncStartTime(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetLastSyncEndTime(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalStoreHasDirtyInstanceAttributes(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL _CalStoreHasDirtySyncAttributes(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

uint64_t _CalStoreClearDirtyAttributes(uint64_t a1)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordUnloadProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3)
          os_unfair_lock_assert_owner(v3 + 20);
      }
    }
  }
  return CPRecordUnloadProperty();
}

uint64_t _CalStoreSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t _CalDatabaseCreateLimitedAccessVirtualStore()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  const os_unfair_lock *Context;
  BOOL v4;
  const os_unfair_lock *v5;
  BOOL v6;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  const void *LimitedAccessVirtualRecordIDForEntity;
  const os_unfair_lock *v11;

  v0 = CPRecordCreateWithRecordID();
  v1 = v0;
  if (CDBLockingAssertionsEnabled)
    v2 = v0 == 0;
  else
    v2 = 1;
  if (!v2)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v4 = v1 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5)
        os_unfair_lock_assert_owner(v5 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v6 = v1 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v1 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  CPRecordInitializeProperty();
  LimitedAccessVirtualRecordIDForEntity = (const void *)_CalDatbaseCreateLimitedAccessVirtualRecordIDForEntity(6);
  if (CDBLockingAssertionsEnabled)
  {
    if (v1)
    {
      if (CPRecordGetStore())
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(LimitedAccessVirtualRecordIDForEntity);
  return v1;
}

uint64_t _CalDatabaseGetLimitedAccessVirtualStore(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (!result)
  {
    result = _CalDatabaseCreateLimitedAccessVirtualStore();
    *(_QWORD *)(a1 + 56) = result;
  }
  return result;
}

const void *CalDatabaseCopyLimitedAccessVirtualStore(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const void *LimitedAccessVirtualStore;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  LimitedAccessVirtualStore = *(const void **)(a1 + 56);
  if (LimitedAccessVirtualStore
    || (LimitedAccessVirtualStore = (const void *)_CalDatabaseCreateLimitedAccessVirtualStore(),
        (*(_QWORD *)(a1 + 56) = LimitedAccessVirtualStore) != 0))
  {
    CFRetain(LimitedAccessVirtualStore);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return LimitedAccessVirtualStore;
}

const void *_CalDatabaseCreateStore(uint64_t a1)
{
  const void *v2;
  const __CFUUID *v3;
  CFStringRef v4;
  BOOL v5;
  const os_unfair_lock *Context;
  const void *TemporaryRecordIDForEntity;
  BOOL v8;
  const os_unfair_lock *v9;
  const void *v10;

  v2 = (const void *)CPRecordCreate();
  v3 = CFUUIDCreate(0);
  v4 = CFUUIDCreateString(0, v3);
  if (CDBLockingAssertionsEnabled)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v4);
  CFRelease(v3);
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 6);
  if (CDBLockingAssertionsEnabled)
    v8 = v2 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  _CalDatabaseSetChangeFlags(a1, 2);
  v10 = *(const void **)(a1 + 96);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 96) = 0;
  }
  return v2;
}

const void *CalDatabaseCreateStore(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Store;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Store = _CalDatabaseCreateStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Store;
}

const void *CalDatabaseCopyLocalStore(uint64_t a1)
{
  const void *v1;
  os_unfair_lock_s *v4;

  if (*(_BYTE *)(a1 + 378))
    return 0;
  v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v1 = _CalDatabaseCopyStoreWithUID(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  if (!CalStoreGetType((uint64_t)v1))
    return v1;
  CalStoreRepairDefaultLocalStore((os_unfair_lock_s *)a1);
  CFRelease(v1);
  return CalDatabaseCopyStoreWithUID((os_unfair_lock_s *)a1);
}

const void *CalDatabaseCopySubscribedCalendarStore(os_unfair_lock_s *a1)
{
  return CalDatabaseCopySubscribedCalendarStoreCore(a1, 0, 0);
}

const void *CalDatabaseCopySubscribedCalendarStoreCore(os_unfair_lock_s *a1, int a2, int a3)
{
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  CFIndex v12;
  int v13;
  const void *v14;
  int UID;
  NSObject *v16;
  CFIndex i;
  const void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  uint8_t buf[4];
  CFIndex v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = (const __CFArray *)CalDatabaseCopyStoresWithExternalID(a1, CFSTR("Subscribed Calendars"));
  if (v6)
  {
    v7 = v6;
    Count = CFArrayGetCount(v6);
    if (Count < 2)
    {
      if (Count == 1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
        if (!ValueAtIndex)
          goto LABEL_27;
        goto LABEL_23;
      }
    }
    else
    {
      v9 = CFArrayGetCount(v7);
      if (v9 >= 1)
      {
        v10 = v9;
        ValueAtIndex = 0;
        v12 = 0;
        v13 = 0x7FFFFFFF;
        do
        {
          v14 = CFArrayGetValueAtIndex(v7, v12);
          UID = CalStoreGetUID();
          if (UID < v13)
          {
            ValueAtIndex = v14;
            v13 = UID;
          }
          ++v12;
        }
        while (v10 != v12);
        if (ValueAtIndex)
        {
          v16 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            v28 = v10;
            v29 = 1024;
            v30 = v13;
            _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_ERROR, "Found %li subscribed calendar stores. Keeping store with ID %i and deleting the rest.", buf, 0x12u);
          }
          for (i = 0; i != v10; ++i)
          {
            v18 = CFArrayGetValueAtIndex(v7, i);
            if (v18 != ValueAtIndex)
            {
              v19 = (void *)CalStoreCopyName((uint64_t)v18);
              v20 = (void *)CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
              {
                v21 = v20;
                v22 = CalStoreGetUID();
                *(_DWORD *)buf = 138412546;
                v28 = (CFIndex)v19;
                v29 = 1024;
                v30 = v22;
                _os_log_impl(&dword_1A5CCB000, v21, OS_LOG_TYPE_DEFAULT, "Deleting duplicate subscribed calendar store: %@ (%i)", buf, 0x12u);

              }
              CalRemoveStore();

            }
          }
          if ((a3 & 1) != 0)
            CalDatabaseSave((uint64_t)a1);
LABEL_23:
          CFRetain(ValueAtIndex);
          goto LABEL_27;
        }
      }
      v23 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A5CCB000, v23, OS_LOG_TYPE_ERROR, "Didn't find any store at all when trying to clean up duplicates.", buf, 2u);
      }
    }
    ValueAtIndex = 0;
LABEL_27:
    CFRelease(v7);
    if (ValueAtIndex)
      return ValueAtIndex;
    goto LABEL_28;
  }
  ValueAtIndex = 0;
LABEL_28:
  if (a2)
  {
    v24 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_DEFAULT, "Subscribed calendar store not found. Creating one now", buf, 2u);
    }
    ValueAtIndex = CalDatabaseCreateStore(a1);
    CalStoreSetExternalID((uint64_t)ValueAtIndex);
    CalStoreSetType((uint64_t)ValueAtIndex);
    CalStoreSetName((uint64_t)ValueAtIndex);
    if (a3 && (CalDatabaseSave((uint64_t)a1) & 1) == 0)
    {
      v25 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A5CCB000, v25, OS_LOG_TYPE_ERROR, "Failed to save database after creating subscribed calendar store", buf, 2u);
      }
      CFRelease(ValueAtIndex);
      return 0;
    }
  }
  return ValueAtIndex;
}

const void *CalDatabaseCopySubscribedCalendarStoreCreateIfNeeded(os_unfair_lock_s *a1, int a2)
{
  return CalDatabaseCopySubscribedCalendarStoreCore(a1, 1, a2);
}

void _CalRemoveStore()
{
  uint64_t DatabaseForRecord;
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;
  const void *v4;

  DatabaseForRecord = CalGetDatabaseForRecord();
  RecordStore = _CalDatabaseGetRecordStore(DatabaseForRecord);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreRemoveRecord();
  _CalDatabaseSetDeletionFlags(DatabaseForRecord, 1);
  _CalDatabaseSetChangeFlags(DatabaseForRecord, 2);
  v4 = *(const void **)(DatabaseForRecord + 96);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DatabaseForRecord + 96) = 0;
  }
}

void CalRemoveStore()
{
  os_unfair_lock_s *v0;
  os_unfair_lock_s *v1;

  v0 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  v1 = v0 + 20;
  os_unfair_lock_lock(v0 + 20);
  _CalRemoveStore();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v1);
  os_unfair_lock_unlock(v1);
  CFRelease(v0);
}

CFTypeRef _CalStoreCopyRelatedEntitiesDeletedByTriggers(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFArray *v12;
  const __CFArray *v13;
  BOOL v14;
  CFTypeRef Error;
  CFTypeRef cf;

  cf = 0;
  v6 = _CalStoreCopyCalendars(a2);
  if (v6)
  {
    v7 = v6;
    CalDatabaseAddChangesToArray((CFMutableArrayRef *)&cf, v6, a3);
    Count = CFArrayGetCount(v7);
    if (Count)
    {
      v9 = Count;
      for (i = 0; i != v9; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
        v12 = (const __CFArray *)_CalCalendarCopyRelatedEntitiesDeletedByTriggers(a1, (uint64_t)ValueAtIndex, a3);
        if (v12)
        {
          v13 = v12;
          CalDatabaseAddChangesToArray((CFMutableArrayRef *)&cf, v12, a3);
          CFRelease(v13);
        }
        else
        {
          if (*a3)
            v14 = cf == 0;
          else
            v14 = 1;
          if (!v14)
          {
            CFRelease(cf);
            cf = 0;
          }
        }
      }
    }
    CFRelease(v7);
  }
  Error = _CalStoreGetError(a2);
  if (Error)
    CalDatabaseAddChangeToArray(&cf, Error, a3);
  return cf;
}

CFTypeRef _CalStoreGetError(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

void CalStoreSetName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalStoreSetNotes(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyNotes(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalStoreSetDefaultAlarmOffset(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalStoreCopyDefaultAlarmOffset(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalStoreCopyDefaultAlarmOffset(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalStoreCopyDefaultAlarmOffset(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalStoreSetDefaultAllDayAlarmOffset(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalStoreCopyDefaultAllDayAlarmOffset(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalStoreCopyDefaultAllDayAlarmOffset(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalStoreCopyDefaultAllDayAlarmOffset(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t CalStoreGetDefaultAlarmOffsetNSInteger(uint64_t a1)
{
  uint64_t v1;
  const __CFNumber *v2;
  const __CFNumber *v3;
  uint64_t valuePtr;

  v1 = 0x7FFFFFFFFFFFFFFFLL;
  valuePtr = 0x7FFFFFFFFFFFFFFFLL;
  v2 = (const __CFNumber *)CalStoreCopyDefaultAlarmOffset(a1);
  if (v2)
  {
    v3 = v2;
    CFNumberGetValue(v2, kCFNumberLongType, &valuePtr);
    CFRelease(v3);
    return valuePtr;
  }
  return v1;
}

uint64_t CalStoreGetDefaultAllDayAlarmOffsetNSInteger(uint64_t a1)
{
  uint64_t v1;
  const __CFNumber *v2;
  const __CFNumber *v3;
  uint64_t valuePtr;

  v1 = 0x7FFFFFFFFFFFFFFFLL;
  valuePtr = 0x7FFFFFFFFFFFFFFFLL;
  v2 = (const __CFNumber *)CalStoreCopyDefaultAllDayAlarmOffset(a1);
  if (v2)
  {
    v3 = v2;
    CFNumberGetValue(v2, kCFNumberLongType, &valuePtr);
    CFRelease(v3);
    return valuePtr;
  }
  return v1;
}

uint64_t _CalStoreSetType(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalStoreSetType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetType(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalStoreGetType(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalStoreGetPreferredEventPrivateValue(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalStoreSetPreferredEventPrivateValue(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalStoreSetStrictestEventPrivateValue(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalStoreSetStrictestEventPrivateValue(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetStrictestEventPrivateValue(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetDelegatedAccountOwnerStoreID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalStoreIsDelegate(uint64_t a1)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)_CalStoreCopyDelegatedAccountOwnerStoreID(a1);
  v2 = v1;
  if (v1)
    CFRelease(v1);
  return v2 != 0;
}

BOOL CalStoreIsDelegate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *v3;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = (const void *)_CalStoreCopyDelegatedAccountOwnerStoreID(a1);
  v4 = v3;
  if (v3)
    CFRelease(v3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4 != 0;
}

void CalStoreSetDelegatedAccountDefaultCalendarForNewEvents(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalRelationSetRelatedObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalStoreCopyDelegatedAccountDefaultCalendarForNewEvents(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;
  CFTypeRef RelatedObject;
  CFTypeRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
  {
    RelatedObject = CalRelationGetRelatedObject(Property);
    v6 = RelatedObject;
    if (RelatedObject)
      CFRetain(RelatedObject);
  }
  else
  {
    v6 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

_QWORD *_CalStoreSetError(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

void CalStoreSetError(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetError(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalStoreCopyError(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Error;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Error = _CalStoreGetError(a1);
  if (Error)
    v4 = CFRetain(Error);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalStoreGetAppGroupIdentifier(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef CalStoreCopyAppGroupIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *AppGroupIdentifier;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  AppGroupIdentifier = (const void *)_CalStoreGetAppGroupIdentifier(a1);
  if (AppGroupIdentifier)
    v4 = CFRetain(AppGroupIdentifier);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalStoreSetEnabled(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalStoreIsEnabled(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsEnabled;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsEnabled = _CalStoreIsEnabled(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsEnabled;
}

void CalStoreSetOnlyCreatorCanModify(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalStoreOnlyCreatorCanModify(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

void CalStoreSetShowsNotifications(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetDisplayOrder(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreGetDisplayOrder(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalStoreSetOwnerName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyOwnerName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

id CalStoreCopyCachedExternalInfo(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  void *v4;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  id v12;
  id v14;
  uint8_t buf[4];
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (void *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  if (v4)
  {
    v14 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v4, 0, 0, &v14);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v14;
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v7 = v5;
LABEL_18:

        goto LABEL_19;
      }
      v9 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v10 = v9;
        v11 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138543362;
        v16 = v11;
        v12 = v11;
        _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_ERROR, "Deserialized data wasn't a dictionary (it was a %{public}@", buf, 0xCu);

      }
    }
    else
    {
      v8 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v16 = v6;
        _os_log_impl(&dword_1A5CCB000, v8, OS_LOG_TYPE_ERROR, "Error deserializing cached external store info: %@", buf, 0xCu);
      }
    }
    v7 = 0;
    goto LABEL_18;
  }
  v7 = 0;
LABEL_19:

  return v7;
}

void CalStoreSetCachedExternalInfo(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  unint64_t v9;
  void *v10;
  const os_unfair_lock *v11;
  id v12;
  uint8_t buf[4];
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v12 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v3, 200, 0, &v12);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = v12;
    if (!v4)
    {
      v6 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v5;
        _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "Couldn't serialize external info: %@", buf, 0xCu);
      }
    }

  }
  else
  {
    v4 = 0;
  }
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v9 = (unint64_t)(id)CPRecordGetProperty();
  v10 = (void *)v9;
  if (v4 | v9 && (objc_msgSend((id)v9, "isEqual:", v4) & 1) == 0)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
    }
    CPRecordSetProperty();
  }

  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);

}

void CalStoreSetFlags(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetFlags2(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetIsFacebook(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 64, a2);
}

void CalStoreSetFlag(uint64_t a1, int a2, int a3)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetFlag(a1, a2, a3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalStoreIsFacebook(uint64_t a1)
{
  return _CalStoreGetFlag(a1, 64);
}

void CalStoreSetUsesSelfAttendee(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 128, a2 ^ 1);
}

BOOL _CalStoreUsesSelfAttendee(uint64_t a1)
{
  return !_CalStoreGetFlag(a1, 128);
}

BOOL CalStoreUsesSelfAttendee(uint64_t a1)
{
  return !CalStoreGetFlag(a1, 128);
}

BOOL CalStoreWasMigrated(uint64_t a1)
{
  return CalStoreGetFlag(a1, 8);
}

void CalStoreSetWasMigrated(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 8, a2);
}

void CalStoreSetConstraintsName(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  const char *v5;
  void *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "isAbsolutePath"))
  {
    v4 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
    {
      v7 = 138543362;
      v8 = v3;
      v5 = "Attempting to set a path (%{public}@) with CalStoreSetConstraintsName. Only the name should be supplied witho"
           "ut an extension.";
LABEL_10:
      _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_FAULT, v5, (uint8_t *)&v7, 0xCu);
    }
  }
  else if (objc_msgSend(v3, "hasSuffix:", CFSTR(".plist")))
  {
    v4 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
    {
      v7 = 138543362;
      v8 = v3;
      v5 = "Attempting to set a file name with .plist extension (%{public}@) with CalStoreSetConstraintsName. Only the na"
           "me should be supplied without an extension.";
      goto LABEL_10;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D0C260], "constraintsURLForName:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
    {
      v4 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
      {
        v7 = 138543362;
        v8 = v3;
        v5 = "Attempting to set an unrecognized constraints name (%{public}@) with CalStoreSetConstraintsName. The given "
             "name should be a valid .plist resource in CalendarFoundation.";
        goto LABEL_10;
      }
    }
  }
  CalStoreSetConstraintsNameNoValidation(a1);

}

void CalStoreSetConstraintsNameNoValidation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordUnloadProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyConstraintsName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalStoreSetExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyExternalModificationTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalStoreSetCreatorBundleID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalStoreSetCreatorBundleID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetCreatorBundleID(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyCreatorBundleID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalStoreSetCreatorCodeSigningIdentity(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalStoreSetCreatorCodeSigningIdentity(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreSetCreatorCodeSigningIdentity(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyCreatorCodeSigningIdentity(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

const void *CalDatabaseCopyStoreWithExternalID(os_unfair_lock_s *a1, const __CFString *a2)
{
  const __CFArray *v2;
  const __CFArray *v3;
  const void *ValueAtIndex;
  NSObject *v5;
  NSObject *v6;
  uint8_t v8[16];
  uint8_t buf[16];

  v2 = (const __CFArray *)CalDatabaseCopyStoresWithExternalID(a1, a2);
  if (v2)
  {
    v3 = v2;
    if (CFArrayGetCount(v2) < 1)
    {
      v6 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "CalDatabaseCopyStoreWithExternalID: no results for query", buf, 2u);
      }
      ValueAtIndex = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
      CFRetain(ValueAtIndex);
    }
    CFRelease(v3);
  }
  else
  {
    v5 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1A5CCB000, v5, OS_LOG_TYPE_ERROR, "CalDatabaseCopyStoreWithExternalID: query resulted in nil results", v8, 2u);
    }
    return 0;
  }
  return ValueAtIndex;
}

uint64_t CalDatabaseCopyStoresWithExternalID(os_unfair_lock_s *a1, const __CFString *a2)
{
  __CFString *SelectPrefix;
  __CFString *v5;
  os_unfair_lock_s *v6;
  uint64_t RecordStore;
  uint64_t v8;
  BOOL v9;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v12;
  uint64_t v13;
  uint64_t v14;
  const char *CStringFromCFString;
  const os_unfair_lock *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint8_t v22[16];
  uint8_t buf[16];
  uint8_t v24[8];
  CFTypeRef cf;

  cf = 0;
  if (a2)
  {
    SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
    if (!SelectPrefix)
    {
      v19 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1A5CCB000, v19, OS_LOG_TYPE_ERROR, "CalDatabaseCopyStoreWithExternalID: failed to create query", buf, 2u);
      }
      v17 = 0;
      goto LABEL_32;
    }
    v5 = SelectPrefix;
    CFStringAppend(SelectPrefix, CFSTR(" WHERE external_id = ?;"));
    v6 = a1 + 20;
    os_unfair_lock_lock(a1 + 20);
    RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
    v8 = RecordStore;
    if (CDBLockingAssertionsEnabled)
      v9 = RecordStore == 0;
    else
      v9 = 1;
    if (!v9)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
      v13 = CPSqliteDatabaseStatementForReading();
      if (v13)
      {
        v14 = v13;
        CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
        sqlite3_bind_text(*(sqlite3_stmt **)(v14 + 8), 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        if (CDBLockingAssertionsEnabled)
        {
          if (v8)
          {
            v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16)
              os_unfair_lock_assert_owner(v16 + 20);
          }
        }
        v17 = CPRecordStoreProcessStatementWithPropertyIndices();
        goto LABEL_29;
      }
    }
    else
    {
      v20 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v24 = 0;
        _os_log_impl(&dword_1A5CCB000, v20, OS_LOG_TYPE_ERROR, "CalDatabaseCopyStoreWithExternalID: failed to get sqlite database", v24, 2u);
      }
    }
    v17 = 0;
LABEL_29:
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v6);
    os_unfair_lock_unlock(v6);
    CFRelease(v5);
LABEL_32:
    if (cf)
      CFRelease(cf);
    return v17;
  }
  v18 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1A5CCB000, v18, OS_LOG_TYPE_ERROR, "CalDatabaseCopyStoreWithExternalID: externalID is nil", v22, 2u);
  }
  return 0;
}

const void *CalDatabaseCopyStoreWithUUID(os_unfair_lock_s *a1, const __CFString *a2)
{
  __CFString *SelectPrefix;
  __CFString *v5;
  os_unfair_lock_s *v6;
  uint64_t RecordStore;
  uint64_t v8;
  BOOL v9;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v12;
  uint64_t v13;
  uint64_t v14;
  const char *CStringFromCFString;
  const os_unfair_lock *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  const void *ValueAtIndex;

  if (!a2)
    return 0;
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
    return 0;
  v5 = SelectPrefix;
  CFStringAppend(SelectPrefix, CFSTR(" WHERE persistent_id = ?;"));
  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v8 = RecordStore;
  if (CDBLockingAssertionsEnabled)
    v9 = RecordStore == 0;
  else
    v9 = 1;
  if (!v9)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_23;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  v13 = CPSqliteDatabaseStatementForReading();
  if (!v13)
    goto LABEL_23;
  v14 = v13;
  CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
  sqlite3_bind_text(*(sqlite3_stmt **)(v14 + 8), 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  if (CDBLockingAssertionsEnabled)
  {
    if (v8)
    {
      v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v16)
        os_unfair_lock_assert_owner(v16 + 20);
    }
  }
  v17 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
  if (v17)
  {
    v18 = v17;
    if (CFArrayGetCount(v17) < 1)
    {
      ValueAtIndex = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v18, 0);
      CFRetain(ValueAtIndex);
    }
    CFRelease(v18);
  }
  else
  {
LABEL_23:
    ValueAtIndex = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  CFRelease(v5);
  return ValueAtIndex;
}

void CalStoreSetUUID(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v6;
  id v7;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v7 = (id)CPRecordCopyProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a2 && v7 && (objc_msgSend(v7, "isEqualToString:", a2) & 1) == 0)
    _CalAttachmentFileMigrateAttachmentsInStoreFromOldPersistentIDToNewPersistentID(a1, (uint64_t)v7, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);

}

uint64_t _CalStoreCopyUUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

void CalStoreAddCalendar(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreAddCalendar(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalStoreAddCalendar(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationAddObject(Property, a2);
  _CalStoreGetFlag(a1, 32);
  _CalCalendarSetCanBeShared((uint64_t)a2);
  return _CalCalendarSetCanBePublished((uint64_t)a2);
}

_QWORD *_CalStoreRemoveCalendar(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

void CalStoreRemoveCalendar(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalStoreRemoveCalendar(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalStoreCopyLastSyncStartTime(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalStoreCopyLastSyncEndTime(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalStoreMigrateToStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *RecordLock;
  uint64_t DatabaseForRecord;
  uint64_t v7;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  const void *v15;
  uint64_t Store;
  uint64_t CalendarWithUID;
  uint64_t CalendarInStoreImmediately;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint8_t v24[16];

  v2 = 0;
  if (a1 == a2 || !a1 || !a2)
    return v2;
  _purgeServerAttachmentsFromCalendarItemsInStore(a1, 0);
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DatabaseForRecord = CalGetDatabaseForRecord();
  if (!DatabaseForRecord)
    goto LABEL_40;
  v7 = DatabaseForRecord;
  if (!_CalDatabaseGetRecordStore(DatabaseForRecord))
    goto LABEL_40;
  if (CDBLockingAssertionsEnabled)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_40;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
  }
  v11 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (!v11)
    goto LABEL_40;
  v12 = (_QWORD *)v11;
  while (!__CalDatabaseBeginWriteTransaction(v7, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:2865"))
  {
    v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_INFO, "database was busy or locked; sleeping for 1 second…",
        v24,
        2u);
    }
    usleep(0x3E8u);
  }
  if (_CalDatabasePrepareCalendarsInStoreForMigration(v7, v12, a1)
    && _CalDatabasePrepareCalendarItemsInStoreForMigration(v7, v12, a1))
  {
    if (_CalDatabasePrepareAlarmsInStoreForMigration(v7, v12, a1)
      && _CalDatabasePrepareRecurrencesInStoreForMigration(v7, v12, a1)
      && _CalDatabasePrepareParticipantsInStoreForMigration(v7, (uint64_t)v12, a1)
      && _CalDatabasePrepareEventActionsInStoreForMigration(v7, (uint64_t)v12, a1)
      && _CalDatabaseMigrateCalendarsWithConnection(v12))
    {
      v14 = _CalDatabaseCopyEventOccurrenceCache(v7);
      if (v14)
      {
        v15 = (const void *)v14;
        v2 = _CalEventOccurrenceCacheMigrateEventOccurrencesWithConnection(v14, v12);
        CFRelease(v15);
      }
      else
      {
        v2 = 0;
      }
      _CalStoreSetFlag(a2, 8, 1);
    }
    else
    {
      v2 = 0;
    }
  }
  else
  {
    v2 = 0;
  }
  if (CPRecordGetID() == 1)
  {
    Store = CPRecordGetStore();
    CalendarWithUID = _CalGetCalendarWithUID(Store);
    if (CalendarWithUID)
    {
      if (_CalDatabaseCalendarHasCalendarItemsWithEntityType(v7, CalendarWithUID, 101))
      {
        CalendarInStoreImmediately = _CalDatabaseCreateCalendarInStoreImmediately(v7, a2, v12);
        if ((int)CalendarInStoreImmediately < 2)
          goto LABEL_39;
        v19 = CalendarInStoreImmediately;
        if (!_CalMoveCalendarItemsFromCalendarWithUIDToCalendarWithUID(v12, 1, CalendarInStoreImmediately))goto LABEL_39;
        v20 = _CalDatabaseCopyEventOccurrenceCache(v7);
        if (v20)
        {
          v21 = (const void *)v20;
          v22 = _CalDatabaseCopyEventOccurrenceCache(v7);
          v2 = _CalEventOccurrenceCacheMigrateEventOccurrencesBetweenCalendars(v22, v12, 1, v19);
          CFRelease(v21);
        }
      }
    }
  }
  if (!(_DWORD)v2)
  {
LABEL_39:
    __CalDatabaseRollbackTransaction(v7, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:2937");
LABEL_40:
    v2 = 0;
    goto LABEL_41;
  }
  __CalDatabaseCommitTransaction(v7, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalStore.m:2929");
  _CalDatabasePostChangeNotificationToExternalClients(v7, 0);
  _CalDatabaseRevertInternal(v7, 1);
LABEL_41:
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v2;
}

void _purgeServerAttachmentsFromCalendarItemsInStore(uint64_t a1, int a2)
{
  os_unfair_lock_s *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  void *ValueAtIndex;
  CFTypeRef v11;
  const void *v12;
  int v13;

  v4 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  v5 = (const __CFArray *)CalDatabaseCopyOfAllAttachmentsInStore(v4, a1);
  if (v5)
  {
    v6 = v5;
    Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      v8 = Count;
      for (i = 0; i != v8; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v6, i);
        v11 = CalAttachmentCopyOwner((uint64_t)ValueAtIndex);
        v12 = v11;
        if (a2)
          v13 = CalEntityIsOfType(v11, a2);
        else
          v13 = 1;
        if (!CalAttachmentIsBinary((uint64_t)ValueAtIndex) && v13)
          CalRemoveAttachment(ValueAtIndex);
        if (v12)
          CFRelease(v12);
      }
    }
    CFRelease(v6);
  }
  CalDatabaseSave((uint64_t)v4);
  if (v4)
    CFRelease(v4);
}

BOOL CalDatabaseMigrateCalendarsWithEntityType(os_unfair_lock_s *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  _BOOL8 result;
  __CFArray *v10;
  const __CFArray *v11;
  CFIndex Count;
  BOOL v13;
  CFIndex i;
  void *ValueAtIndex;
  int CanContainEntityType;
  void *v17;
  void *v18;
  unsigned int v19;

  v4 = a2 & 0xFFFFFFFE;
  if ((a2 & 0xFFFFFFFE) != 2)
    CalDatabaseMigrateCalendarsWithEntityType_cold_1();
  result = 0;
  if (a2 == 2)
    v4 = 3;
  v19 = v4;
  if (a3 != a4 && a1 && a3 && a4)
  {
    v10 = CalDatabaseCopyOfAllCalendarsInStore(a1, a3);
    if (v10)
    {
      v11 = v10;
      Count = CFArrayGetCount(v10);
      v13 = Count == 0;
      _purgeServerAttachmentsFromCalendarItemsInStore(a3, a2);
      if (Count >= 1)
      {
        for (i = 0; Count != i; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v11, i);
          if (CalCalendarGetUID() == 1
            || !CalCalendarCanContainEntityType((uint64_t)ValueAtIndex, a2))
          {
            continue;
          }
          CanContainEntityType = CalCalendarCanContainEntityType((uint64_t)ValueAtIndex, v19);
          v17 = (void *)_CopyMatchingCalendarForMigration((uint64_t)ValueAtIndex, a2, a4);
          v18 = v17;
          if (CanContainEntityType)
          {
            if (!v17)
            {
              v18 = (void *)CalDatabaseCopyCalendar(a1, (uint64_t)ValueAtIndex);
              CalStoreAddCalendar(a4, v18);
              CalCalendarSetCanContainEntityType((uint64_t)v18, a2);
            }
            _moveCalendarItemsOfTypeIntoCalendar(a1, a2, (uint64_t)ValueAtIndex, v18, 0);
            CalCalendarSetCanContainEntityType((uint64_t)ValueAtIndex, v19);
          }
          else
          {
            if (!v17)
            {
              CalStoreRemoveCalendar(a3, ValueAtIndex);
              CalStoreAddCalendar(a4, ValueAtIndex);
              CalCalendarClearExternalProperties((uint64_t)ValueAtIndex, 1);
              goto LABEL_20;
            }
            _moveCalendarItemsOfTypeIntoCalendar(a1, a2, (uint64_t)ValueAtIndex, v17, 1);
            CalRemoveCalendar(ValueAtIndex);
          }
          CFRelease(v18);
LABEL_20:
          CalCalendarSetExternalModificationTag((uint64_t)ValueAtIndex);
          CalCalendarSetSyncToken((uint64_t)ValueAtIndex);
          CalCalendarSetIsPublished((uint64_t)ValueAtIndex);
          CalCalendarSetPublishedURL((uint64_t)ValueAtIndex, 0);
          CalCalendarSetSharingStatus((uint64_t)ValueAtIndex);
          v13 = 1;
        }
      }
      if (v13)
        CalStoreSetFlag(a4, 8, 1);
      CFRelease(v11);
    }
    else
    {
      return 1;
    }
    return v13;
  }
  return result;
}

const void *_CopyMatchingCalendarForMigration(uint64_t a1, int a2, uint64_t a3)
{
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  const __CFString *v9;
  CFIndex v10;
  const void *ValueAtIndex;
  const __CFString *v12;
  const __CFString *v13;
  const void *v14;
  char CanContainEntityType;

  v6 = CalStoreCopyCalendars(a3);
  v7 = v6;
  if (!v6)
  {
    v9 = (const __CFString *)CalCalendarCopyTitle(a1);
LABEL_14:
    ValueAtIndex = 0;
    v14 = 0;
    if (v9)
      goto LABEL_15;
    goto LABEL_16;
  }
  Count = CFArrayGetCount(v6);
  v9 = (const __CFString *)CalCalendarCopyTitle(a1);
  if (Count < 1)
    goto LABEL_14;
  v10 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v7, v10);
    v12 = (const __CFString *)CalCalendarCopyTitle((uint64_t)ValueAtIndex);
    v13 = v12;
    if (v12)
    {
      if (v9)
        break;
    }
    if (v12)
      goto LABEL_10;
LABEL_11:
    if (Count == ++v10)
      goto LABEL_14;
  }
  if (CFStringCompare(v9, v12, 0) || CalCalendarGetCalendarSupportsExactlyOneEntityTypeInStore(a3))
  {
LABEL_10:
    CFRelease(v13);
    goto LABEL_11;
  }
  CanContainEntityType = CalCalendarCanContainEntityType((uint64_t)ValueAtIndex, a2);
  if ((CanContainEntityType & 1) == 0)
    CalCalendarSetCanContainEntityType((uint64_t)ValueAtIndex, 0);
  CFRetain(ValueAtIndex);
  CFRelease(v13);
LABEL_15:
  CFRelease(v9);
  v14 = ValueAtIndex;
LABEL_16:
  if (v7)
    CFRelease(v7);
  return v14;
}

void _moveCalendarItemsOfTypeIntoCalendar(os_unfair_lock_s *a1, int a2, uint64_t a3, const void *a4, int a5)
{
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v14;
  const void *CopyPreservingUniqueIdentifier;

  v8 = (const __CFArray *)CalDatabaseCopyCalendarItemsWithCalendar(a1);
  if (v8)
  {
    v9 = v8;
    Count = CFArrayGetCount(v8);
    if (Count >= 1)
    {
      v11 = Count;
      for (i = 0; i != v11; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
        v14 = ValueAtIndex;
        if (a5)
        {
          if (a2 != 2 || !CalEventIsDetached((uint64_t)ValueAtIndex))
          {
            CopyPreservingUniqueIdentifier = _CalCalendarItemCreateCopyPreservingUniqueIdentifier(v14, 1);
            CalCalendarItemSetExternalID((uint64_t)CopyPreservingUniqueIdentifier, 0);
            CalCalendarAddCalendarItemAndDetached(a4, CopyPreservingUniqueIdentifier);
            CFRelease(CopyPreservingUniqueIdentifier);
          }
        }
        else
        {
          CalCalendarItemClearExternalProperties(ValueAtIndex, 1);
          CalCalendarAddCalendarItemAndDetached(a4, v14);
        }
      }
    }
    CFRelease(v9);
  }
}

BOOL CalStoreRemoveItemsOfTypeOlderThanDateInStore(uint64_t a1, int a2, uint64_t a3)
{
  _BOOL8 v3;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v11;
  uint64_t v12;
  uint64_t v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  uint64_t **v16;
  int v17;
  sqlite3_stmt *v18;
  int v19;
  double v20;
  sqlite3_stmt *v21;
  int ID;
  uint64_t v23;
  const os_unfair_lock *v24;
  uint64_t v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;
  uint64_t v28;
  uint64_t **v29;
  int v30;
  sqlite3_stmt *v31;
  double v32;
  sqlite3_stmt *v33;
  double v34;
  sqlite3_stmt *v35;
  double v36;
  sqlite3_stmt *v37;
  int v38;
  uint64_t v39;
  const os_unfair_lock *v40;
  uint64_t v41;
  const os_unfair_lock *v42;
  const os_unfair_lock *v43;
  uint64_t v44;
  uint64_t **v45;
  sqlite3_stmt *v46;
  double v47;
  int v48;
  sqlite3_stmt *v49;
  double v50;
  sqlite3_stmt *v51;
  int v52;
  uint64_t v53;
  const os_unfair_lock *v54;
  uint64_t v55;
  const os_unfair_lock *v56;
  uint64_t v58;
  os_unfair_lock_s *v59;

  v3 = 0;
  if (a1 && a3)
  {
    v6 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (v6)
    {
      v7 = v6;
      v8 = v6 + 20;
      os_unfair_lock_lock(v6 + 20);
      if (*(_QWORD *)&v7[6]._os_unfair_lock_opaque)
      {
        if (CDBLockingAssertionsEnabled)
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
        Database = CPRecordStoreGetDatabase();
        if (!Database)
          goto LABEL_23;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)(Database + 104))
          {
            v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11)
              os_unfair_lock_assert_owner(v11 + 20);
          }
        }
        v12 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
        if (v12)
        {
          v13 = v12;
          if (CDBLockingAssertionsEnabled)
          {
            if (*(_QWORD *)v12)
            {
              if (*(_QWORD *)(*(_QWORD *)v12 + 104))
              {
                v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v14)
                  os_unfair_lock_assert_owner(v14 + 20);
              }
            }
          }
          v15 = CPSqliteConnectionStatementForSQL();
          v59 = v8;
          if (v15)
          {
            v16 = (uint64_t **)v15;
            if (a2)
            {
              sqlite3_bind_int(*(sqlite3_stmt **)(v15 + 8), 1, a2);
              v17 = 2;
            }
            else
            {
              v17 = 1;
            }
            v18 = (sqlite3_stmt *)v16[1];
            v19 = v17 + 1;
            v20 = MEMORY[0x1A85B424C](a3);
            sqlite3_bind_double(v18, v17, v20);
            v21 = (sqlite3_stmt *)v16[1];
            ID = CPRecordGetID();
            sqlite3_bind_int(v21, v19, ID);
            if (CDBLockingAssertionsEnabled)
            {
              if (*v16)
              {
                v23 = **v16;
                if (v23)
                {
                  if (*(_QWORD *)(v23 + 104))
                  {
                    v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v24)
                      os_unfair_lock_assert_owner(v24 + 20);
                  }
                }
              }
            }
            CPSqliteStatementSendResults();
            v8 = v59;
            if (CDBLockingAssertionsEnabled)
            {
              if (*v16)
              {
                v25 = **v16;
                if (v25)
                {
                  if (*(_QWORD *)(v25 + 104))
                  {
                    v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v26)
                      os_unfair_lock_assert_owner(v26 + 20);
                  }
                }
              }
            }
            CPSqliteStatementReset();
          }
          if (CDBLockingAssertionsEnabled)
          {
            if (*(_QWORD *)v13)
            {
              if (*(_QWORD *)(*(_QWORD *)v13 + 104))
              {
                v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v27)
                  os_unfair_lock_assert_owner(v27 + 20);
              }
            }
          }
          v28 = CPSqliteConnectionStatementForSQL();
          v3 = v28 != 0;
          if (v28)
          {
            v29 = (uint64_t **)v28;
            v58 = v13;
            if (a2)
            {
              sqlite3_bind_int(*(sqlite3_stmt **)(v28 + 8), 1, a2);
              v30 = 2;
            }
            else
            {
              v30 = 1;
            }
            v31 = (sqlite3_stmt *)v29[1];
            v32 = MEMORY[0x1A85B424C](a3);
            sqlite3_bind_double(v31, v30, v32);
            v33 = (sqlite3_stmt *)v29[1];
            v34 = MEMORY[0x1A85B424C](a3);
            sqlite3_bind_double(v33, v30 + 1, v34);
            v35 = (sqlite3_stmt *)v29[1];
            v36 = MEMORY[0x1A85B424C](a3);
            sqlite3_bind_double(v35, v30 + 2, v36);
            v37 = (sqlite3_stmt *)v29[1];
            v38 = CPRecordGetID();
            sqlite3_bind_int(v37, v30 + 3, v38);
            if (CDBLockingAssertionsEnabled)
            {
              if (*v29)
              {
                v39 = **v29;
                if (v39)
                {
                  if (*(_QWORD *)(v39 + 104))
                  {
                    v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v40)
                      os_unfair_lock_assert_owner(v40 + 20);
                  }
                }
              }
            }
            CPSqliteStatementSendResults();
            v13 = v58;
            v8 = v59;
            if (CDBLockingAssertionsEnabled)
            {
              if (*v29)
              {
                v41 = **v29;
                if (v41)
                {
                  if (*(_QWORD *)(v41 + 104))
                  {
                    v42 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v42)
                      os_unfair_lock_assert_owner(v42 + 20);
                  }
                }
              }
            }
            CPSqliteStatementReset();
          }
          if (CDBLockingAssertionsEnabled)
          {
            if (*(_QWORD *)v13)
            {
              if (*(_QWORD *)(*(_QWORD *)v13 + 104))
              {
                v43 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v43)
                  os_unfair_lock_assert_owner(v43 + 20);
              }
            }
          }
          v44 = CPSqliteConnectionStatementForSQL();
          if (v44)
          {
            v45 = (uint64_t **)v44;
            v46 = *(sqlite3_stmt **)(v44 + 8);
            v47 = MEMORY[0x1A85B424C](a3);
            sqlite3_bind_double(v46, 1, v47);
            if (a2)
            {
              sqlite3_bind_int((sqlite3_stmt *)v45[1], 2, a2);
              v48 = 3;
            }
            else
            {
              v48 = 2;
            }
            v49 = (sqlite3_stmt *)v45[1];
            v50 = MEMORY[0x1A85B424C](a3);
            sqlite3_bind_double(v49, v48, v50);
            v51 = (sqlite3_stmt *)v45[1];
            v52 = CPRecordGetID();
            sqlite3_bind_int(v51, v48 + 1, v52);
            if (CDBLockingAssertionsEnabled)
            {
              if (*v45)
              {
                v53 = **v45;
                if (v53)
                {
                  if (*(_QWORD *)(v53 + 104))
                  {
                    v54 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v54)
                      os_unfair_lock_assert_owner(v54 + 20);
                  }
                }
              }
            }
            CPSqliteStatementSendResults();
            if (CDBLockingAssertionsEnabled)
            {
              if (*v45)
              {
                v55 = **v45;
                if (v55)
                {
                  if (*(_QWORD *)(v55 + 104))
                  {
                    v56 = (const os_unfair_lock *)CPRecordStoreGetContext();
                    if (v56)
                      os_unfair_lock_assert_owner(v56 + 20);
                  }
                }
              }
            }
            CPSqliteStatementReset();
          }
          else
          {
            v3 = 0;
          }
        }
        else
        {
LABEL_23:
          v3 = 0;
        }
      }
      else
      {
        v3 = 0;
      }
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner(v8);
      os_unfair_lock_unlock(v8);
      CFRelease(v7);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t _DeleteCalendarItemRowHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t RecordStore;
  const void *CalendarItemWithRowID;
  const void *v6;

  v3 = *(_QWORD *)a2;
  sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  RecordStore = _CalDatabaseGetRecordStore(v3);
  CalendarItemWithRowID = (const void *)_CalGetCalendarItemWithRowID(RecordStore);
  if (CalendarItemWithRowID)
  {
    v6 = CalendarItemWithRowID;
    if (_CalEntityGetType(CalendarItemWithRowID) == 2)
      _CalRemoveEvent(v6, 1, 1);
    else
      _CalRemoveTask(v3, v6);
    *(_BYTE *)(a2 + 8) = 1;
  }
  return 0;
}

void CalStoreSetSupportsEventForwarding(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x200000, a2);
}

uint64_t CalStoreAllowsTasksPrivate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  BOOL Flag;
  const os_unfair_lock *Context;
  char v5;
  const void *v6;
  uint64_t v7;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Flag = _CalStoreGetFlag(a1, 1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v5 = CPRecordGetProperty() == 3 || Flag;
  if ((v5 & 1) != 0)
    goto LABEL_12;
  v6 = (const void *)_CalStoreCopyDelegatedAccountOwnerStoreID(a1);
  if (v6)
  {
    CFRelease(v6);
LABEL_12:
    v7 = 0;
    goto LABEL_14;
  }
  v7 = 1;
LABEL_14:
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v7;
}

void CalStoreSetAllowsTasks(uint64_t a1, int a2)
{
  void *v3;
  int v4;
  NSObject *v5;
  void *v6;
  _DWORD v7[2];
  __int16 v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (CalIsReminderBridgeEnabled())
    {
      v3 = (void *)CDBLogHandle;
      v4 = 1;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
      {
        v5 = v3;
        v6 = (void *)CalStoreCopyExternalID(a1);
        v7[0] = 67109378;
        v7[1] = 1;
        v8 = 2114;
        v9 = v6;
        _os_log_impl(&dword_1A5CCB000, v5, OS_LOG_TYPE_INFO, "Ignoring attempt to set allowsTasks to %d on store %{public}@. Forcing to NO", (uint8_t *)v7, 0x12u);

      }
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v4 = 1;
  }
  CalStoreSetFlag(a1, 1, v4);
}

void CalStoreSetAllowsTasksPrivate(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 1, a2 ^ 1);
}

BOOL _CalStoreAllowsEvents(uint64_t a1)
{
  return !_CalStoreGetFlag(a1, 2);
}

BOOL _CalStoreAllowedEvents(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return (CPRecordGetOriginalProperty() & 2) == 0;
}

void CalStoreSetAllowsEvents(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 2, a2 ^ 1);
}

void CalStoreSetAllowsCalendarAddDeleteModify(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 4, a2 ^ 1);
}

void CalStoreSetSnoozeAlarmRequiresDetach(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 256, a2);
}

BOOL CalStoreSupportsAlarmAcknowledgedDate(uint64_t a1)
{
  return CalStoreGetFlag(a1, 512);
}

void CalStoreSetSupportsAlarmAcknowledgedDate(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 512, a2);
}

void CalStoreSetSupportsSharedCalendars(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 32, a2);
}

void CalStoreSetSupportsPrivateEvents(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 1024, a2);
}

void CalStoreSetProhibitsPrivateEventsWithAttendees(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 2048, a2);
}

void CalStoreSetSupportsAvailabilityRequests(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 4096, a2);
}

void CalStoreSetSupportsIgnoringEventsInAvailabilityRequests(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x80000, a2);
}

void CalStoreSetSupportsLocationDirectorySearches(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x20000, a2);
}

BOOL _CalStoreRequiresSamePrivacyLevelAcrossRecurrenceSeries(uint64_t a1)
{
  return _CalStoreGetFlag(a1, 0x2000);
}

void CalStoreSetRequiresSamePrivacyLevelAcrossRecurrenceSeries(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x2000, a2);
}

void CalStoreSetProhibitsICSImport(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x800000, a2);
}

BOOL CalStoreGetSupportsClearingPrivateComments(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 0x20000);
}

void CalStoreSetSupportsClearingPrivateComments(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 0x20000, a2);
}

void CalStoreSetFlag2(uint64_t a1, int a2, int a3)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  int Property;
  int v9;
  const os_unfair_lock *v10;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (a3)
    v9 = Property | a2;
  else
    v9 = Property & ~a2;
  if (v9 != Property)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    CPRecordSetProperty();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalStoreSetSupportsJunkReporting(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x2000000, a2);
}

void CalStoreSetSupportsPhoneNumbers(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x4000000, a2);
}

void CalStoreSetSupportsDelegation(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x20000000, a2);
}

void CalStoreSetSupportsDelegateEnumeration(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x40000000, a2);
}

void CalStoreSetSupportsInvitationModificationsWithoutNotification(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 128, a2);
}

BOOL CalStoreSyncDefaultAlarms(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 2048);
}

void CalStoreSetSyncDefaultAlarms(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 2048, a2);
}

BOOL CalStoreIsWritable(uint64_t a1)
{
  return !CalStoreGetFlag(a1, 0x80000000);
}

void CalStoreSetIsWritable(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x80000000, a2 ^ 1);
}

void CalStoreSetSupportsRecurrenceSplit(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 1, a2);
}

void CalStoreSetSupportsPush(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 0x4000, a2);
}

void CalStoreSetSupportsTravelTime(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 0x8000, a2);
}

void CalStoreSetSupportsFloatingTimeZone(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 2, a2);
}

void CalStoreSetSupportsInboxAvailability(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 4, a2);
}

void CalStoreSetSupportsSubscriptionCalendars(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 8, a2);
}

void CalStoreSetSupportsManagedSubscriptionCalendars(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 1024, a2);
}

void CalStoreSetSupportsSubscriptionMirroring(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 4096, a2);
}

void CalStoreSetSupportsParticipantRoles(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 0x2000, a2);
}

void CalStoreSetProhibitsUsingEventOrganizerEmailWhenComposingMail(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 16, a2);
}

BOOL CalStoreIsInMainWindow(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 256);
}

void CalStoreSetIsInMainWindow(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 256, a2);
}

BOOL CalStoreIsInSeparateWindow(uint64_t a1)
{
  return CalStoreGetFlag2(a1, 512);
}

void CalStoreSetIsInSeparateWindow(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 512, a2);
}

BOOL _CalStoreRequiresMSFormattedUIDKey(uint64_t a1)
{
  return _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("RequiresMSFormattedUID"), 0);
}

void CalStoreSetProhibitsSlicingEventsWithAttendees(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x8000000, a2);
}

void CalStoreSetSupportsAttachments(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x10000000, a2);
}

void CalStoreSetRequiresOpeningAttachmentAsLink(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 32, a2);
}

void CalStoreSetShouldUseDeleteAndAddInsteadOfMoveBetweenCalendars(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 64, a2);
}

void CalStoreSetAllowsPrivateEventAccessByDelegate(uint64_t a1, int a2)
{
  CalStoreSetFlag2(a1, 0x10000, a2);
}

uint64_t _CalStoreSupportsRecurrencesOnDetachedEvents()
{
  return 0;
}

BOOL _CalStoreAreRecurrencesPinnedToMonthDays(uint64_t a1)
{
  return _CalStoreGetBoolConstraintValue(a1, CFSTR("CalEvent"), CFSTR("RecurrencesPinnedToMonthDays"), 0);
}

void CalStoreSetProhibitsMultipleMonthsInYearlyRecurrence(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x4000, a2);
}

void CalStoreSetProhibitsMultipleDaysInMonthlyRecurrence(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x8000, a2);
}

void CalStoreSetProhibitsYearlyRecurrenceInterval(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x10000, a2);
}

void CalStoreSetProhibitsDetachmentOnCommentChange(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x40000, a2);
}

void CalStoreSetAllowsProposeNewTime(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x400000, a2);
}

void CalStoreSetRequiresOccurrencesConformToRecurrenceRule(uint64_t a1, int a2)
{
  CalStoreSetFlag(a1, 0x100000, a2);
}

BOOL _CalStoreAttendeeCanUpdateLastModified(uint64_t a1)
{
  return _CalStoreGetBoolConstraintValue(a1, CFSTR("CalAttendee"), CFSTR("CanUpdateLastModified"), 1);
}

BOOL _CalAttendeeGetUseDeletedByOrganizerStatusInStore(uint64_t a1)
{
  return _CalAttendeeGetBoolConstraintValueForStore(a1, CFSTR("UseDeletedByOrganizerStatus"), 0);
}

BOOL CalStoreAttendeeCanUpdateLastModified(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 BoolConstraintValue;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  BoolConstraintValue = _CalStoreGetBoolConstraintValue(a1, CFSTR("CalAttendee"), CFSTR("CanUpdateLastModified"), 1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return BoolConstraintValue;
}

uint64_t _CalStoreSaveAddedCalendars(uint64_t a1)
{
  const os_unfair_lock *Context;
  const __CFArray *Property;
  const __CFArray *v4;
  CFIndex Count;
  int ID;
  int v7;
  CFIndex i;
  const void *ValueAtIndex;
  const os_unfair_lock *v10;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFArray *)CPRecordGetProperty();
  if (!Property)
  {
    CPRecordGetID();
    if (!a1)
      return CPRecordInitializeProperty();
    goto LABEL_13;
  }
  v4 = Property;
  Count = CFArrayGetCount(Property);
  ID = CPRecordGetID();
  if (Count >= 1)
  {
    v7 = ID;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
      _CalCalendarSetStoreId((uint64_t)ValueAtIndex, v7);
    }
  }
  if (a1)
  {
LABEL_13:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  return CPRecordInitializeProperty();
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

uint64_t _CalStoreDefaultMarkAlarmChange(uint64_t a1)
{
  const os_unfair_lock *Context;

  _CalStoreDefaultAlarmChanges(a1);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t _CalStoreDefaultAlarmChanges(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

void sub_1A5D63400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t _CalStoreSetFlag(uint64_t a1, int a2, int a3)
{
  const os_unfair_lock *Context;
  uint64_t result;
  int v8;
  const os_unfair_lock *v9;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (a3)
    v8 = result | a2;
  else
    v8 = result & ~a2;
  if (v8 != (_DWORD)result)
  {
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
    return CPRecordSetProperty();
  }
  return result;
}

void sub_1A5D63CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

uint64_t CalEventUpdateFromICSEventWithOptions(void *a1, void *a2, const void *a3, uint64_t a4, os_unfair_lock_s *a5, uint64_t a6, void *a7, void *a8, unsigned __int8 a9)
{
  id v15;
  id v16;
  id v17;
  id v18;
  unsigned int v19;
  int IsAllDay;
  double started;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  void *v44;
  double v45;
  NSObject *v46;
  void *v47;
  double v48;
  double v49;
  int v50;
  void *v51;
  double v52;
  void *v53;
  double v54;
  double EndDate;
  int Availability;
  unsigned int v57;
  const __CFString *v58;
  uint64_t v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t j;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  const __CFArray *v71;
  CFIndex Count;
  CFIndex v73;
  CFIndex v74;
  double v75;
  const void *ValueAtIndex;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  CFAbsoluteTime v82;
  void *v83;
  double v84;
  void *v85;
  int v86;
  void *v87;
  void *v88;
  int v89;
  int InvitationChangedProperties;
  int v91;
  void *v92;
  const __CFString *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  unsigned int v98;
  void *v99;
  const __CFString *v100;
  const __CFString *v101;
  CFTimeZoneRef v102;
  void *v103;
  uint64_t v104;
  void *v105;
  CFTypeRef SuggestedEventInfo;
  NSObject *v107;
  _BOOL4 v108;
  void *v109;
  void *v110;
  int ChangedFields;
  int ChangesAcknowledged;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t k;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  uint64_t v129;
  const void *v130;
  NSObject *v131;
  _BOOL4 IsPhantomMaster;
  int IsNew;
  _BOOL4 IsInvite;
  CFTypeRef v135;
  CFTypeRef v136;
  const void *v137;
  __CFString *v138;
  __CFString *v139;
  __CFString *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  void *v146;
  char v148;
  __CFString *v149;
  void *v150;
  id v151;
  const __CFArray *theArray;
  void *v153;
  unsigned int v154;
  void *v155;
  id v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  id v161;
  CFIndex v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  uint64_t v167;
  void *v169;
  void *v170;
  const void *v171;
  void *v172;
  void *v173;
  __CFString *v174;
  void *v175;
  void *v176;
  void *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint8_t v190[128];
  uint8_t buf[4];
  const char *v192;
  __int16 v193;
  CFTypeRef v194;
  __int16 v195;
  void *v196;
  __int16 v197;
  void *v198;
  _BYTE v199[128];
  _BYTE v200[128];
  uint64_t v201;

  v201 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v16 = a2;
  v17 = a7;
  v18 = a8;
  v177 = v15;
  if (v15)
  {
    if (a3)
    {
      v19 = objc_msgSend(v15, "isAllDay");
      IsAllDay = CalCalendarItemIsAllDay((uint64_t)a3);
      if (v18 && v19 != IsAllDay)
        objc_msgSend(v18, "addObject:", II_ALL_DAY_KEY);
      CalCalendarItemSetAllDay((uint64_t)a3, v19);
      started = _CalOriginalStartDateFromICSComponent(v15, v16);
      CalEventSetOriginalStartDate((uint64_t)a3, started);
      objc_msgSend(v15, "recurrence_id");
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      v161 = v18;
      if (v22)
        v23 = a4;
      else
        v23 = (uint64_t)a3;
      v27 = (void *)CalEventCopyAttendees(v23);
      v167 = a6;
      v164 = v17;
      v155 = v27;
      v156 = v16;
      v171 = a3;
      if (objc_msgSend(v27, "count"))
      {
        objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v27, "count"));
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v186 = 0u;
        v187 = 0u;
        v188 = 0u;
        v189 = 0u;
        v29 = v27;
        v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v186, v200, 16);
        if (v30)
        {
          v31 = v30;
          v32 = *(_QWORD *)v187;
          do
          {
            for (i = 0; i != v31; ++i)
            {
              if (*(_QWORD *)v187 != v32)
                objc_enumerationMutation(v29);
              v34 = (void *)CalAttendeeCopyAddress(*(_QWORD *)(*((_QWORD *)&v186 + 1) + 8 * i));
              if (v34)
                objc_msgSend(v28, "addObject:", v34);

            }
            v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v186, v200, 16);
          }
          while (v31);
        }

        v16 = v156;
        a3 = v171;
      }
      else
      {
        v28 = 0;
      }
      v35 = (void *)MEMORY[0x1E0C99D80];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v167);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "dictionaryWithObject:forKey:", v36, CFSTR("ItemBridgeOptions"));
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      v153 = v37;
      v17 = v164;
      v154 = CalCalendarItemUpdateFromICSComponent(a3, a4, v177, v16, a5, v37, v164, v18, a9);
      if ((v154 & 1) == 0)
      {
        v46 = CDBiCalendarConversionHandle;
        if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A5CCB000, v46, OS_LOG_TYPE_DEBUG, "CalCalendarItemUpdateFromICSComponent failed", buf, 2u);
        }
LABEL_162:

        v25 = v154;
        goto LABEL_163;
      }
      v38 = v177;
      v39 = v16;
      v40 = v38;
      v151 = v39;
      v41 = objc_msgSend(v38, "isAllDay");
      objc_msgSend(v38, "dtend");
      v42 = (void *)objc_claimAutoreleasedReturnValue();

      if (v42)
      {
        objc_msgSend(v40, "dtend");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = v43;
        if (v41)
        {
          v45 = CalDateFromICSDateAsUTC(v43) + -1.0;
        }
        else
        {
          v50 = objc_msgSend(v43, "hasFloatingTimeZone");

          objc_msgSend(v40, "dtend");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = v51;
          if (!v50)
          {
            v45 = CalDateFromICSDate(v51, v151);

            objc_msgSend(v40, "dtend");
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            CalCreateDateTimeFromICSDate(v99, v151);
            v101 = v100;

            if (CFStringCompare(v101, CFSTR("_float"), 0))
            {
              v102 = CFTimeZoneCreateWithName(0, v101, 1u);
              CalCalendarItemSetEndTimeZone((uint64_t)a3, (uint64_t)v102);
              if (v102)
                CFRelease(v102);
            }
            else
            {
              CalCalendarItemSetEndTimeZone((uint64_t)a3, 0);
            }
            CalDateTimeRelease();
            goto LABEL_41;
          }
          v45 = CalDateFromICSDateAsUTC(v51);
        }
      }
      else if (v41)
      {
        objc_msgSend(v40, "duration");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "timeInterval");
        v49 = v48 + -1.0;

        if (v49 < 0.0)
          v49 = 0.0;
        objc_msgSend(v40, "dtstart");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = v49 + CalDateFromICSDateAsUTC(v44);
      }
      else
      {
        objc_msgSend(v40, "dtstart");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = CalDateFromICSDate(v44, v151);
        objc_msgSend(v40, "duration");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v53, "timeInterval");
        v45 = v52 + v54;

      }
LABEL_41:
      EndDate = CalEventGetEndDate((uint64_t)a3);
      CalEventSetEndDate((uint64_t)a3, v45);

      if (v18 && EndDate != v45)
        objc_msgSend(v18, "addObject:", II_TO_KEY);
      Availability = CalEventGetAvailability((uint64_t)a3);
      v57 = objc_msgSend(v40, "transp") == 2;
      if (Availability != v57)
        CalEventSetAvailability((uint64_t)a3, v57);
      objc_msgSend(v40, "x_calendarserver_private_comment");
      v58 = (const __CFString *)objc_claimAutoreleasedReturnValue();
      if (v58)
        CalEventSetResponseComment((uint64_t)a3, v58);
      v149 = (__CFString *)v58;
      objc_msgSend(v40, "x_calendarserver_attendee_comment");
      v150 = (void *)objc_claimAutoreleasedReturnValue();
      v59 = CalEventCopyAttendees(a3);
      v170 = v40;
      if (!v59)
        goto LABEL_82;
      theArray = (const __CFArray *)v59;
      v60 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v150, "count"));
      v182 = 0u;
      v183 = 0u;
      v184 = 0u;
      v185 = 0u;
      v61 = v150;
      v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v182, v199, 16);
      if (v62)
      {
        v63 = v62;
        v64 = *(_QWORD *)v183;
        do
        {
          for (j = 0; j != v63; ++j)
          {
            if (*(_QWORD *)v183 != v64)
              objc_enumerationMutation(v61);
            v66 = *(void **)(*((_QWORD *)&v182 + 1) + 8 * j);
            objc_msgSend(v66, "x_calendarserver_attendee_ref");
            v67 = objc_claimAutoreleasedReturnValue();
            if (v67)
            {
              v68 = (void *)v67;
              objc_msgSend(v66, "value");
              v69 = (void *)objc_claimAutoreleasedReturnValue();

              if (v69)
              {
                objc_msgSend(v66, "x_calendarserver_attendee_ref");
                v70 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v60, "setObject:forKeyedSubscript:", v66, v70);

              }
            }
          }
          v63 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v182, v199, 16);
        }
        while (v63);
      }

      objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianGMTCalendar");
      v159 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
      v157 = (void *)objc_claimAutoreleasedReturnValue();
      v71 = theArray;
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v73 = Count;
        v148 = 0;
        v74 = 0;
        v75 = *MEMORY[0x1E0D0C490];
        a3 = v171;
        v162 = Count;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v71, v74);
          if (ValueAtIndex)
            break;
LABEL_78:
          if (v73 == ++v74)
            goto LABEL_81;
        }
        v77 = (uint64_t)ValueAtIndex;
        v78 = (void *)CalAttendeeCopyAddress(ValueAtIndex);
        v79 = v78;
        if (!v78)
        {
LABEL_77:

          goto LABEL_78;
        }
        objc_msgSend(v78, "absoluteString");
        v173 = (void *)objc_claimAutoreleasedReturnValue();
        v175 = (void *)CalAttendeeCopyResponseComment(v77);
        objc_msgSend(v60, "objectForKeyedSubscript:", v173);
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v80, "x_calendarserver_dtstamp");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        v82 = v75;
        if (v81)
        {
          NSDateFromICSValueInTimeZone();
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v83, "timeIntervalSinceReferenceDate");
          v82 = v84;

        }
        CalParticipantSetCommentLastModified(v77, v82);
        objc_msgSend(v80, "value");
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        if ((CalEqualStrings() & 1) != 0)
        {
LABEL_76:

          a3 = v171;
          v73 = v162;
          goto LABEL_77;
        }
        CalAttendeeSetResponseComment(v77, v85);
        v86 = objc_msgSend(v28, "containsObject:", v79);
        objc_msgSend(v175, "CalStringByRemovingAutoComment");
        v165 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v85, "CalStringByRemovingAutoComment");
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        v88 = v87;
        v89 = 0;
        if (v86 && v87)
        {
          v71 = theArray;
          if (objc_msgSend(v87, "length"))
          {
            if ((CalEqualStrings() & 1) != 0 || CalAttendeeGetType(v77) == 2)
              goto LABEL_75;
            v89 = 1;
            v148 = 1;
          }
          else
          {
            v89 = 0;
          }
        }
        else
        {
          v71 = theArray;
        }
        CalParticipantSetCommentChanged(v77, v89);
LABEL_75:

        goto LABEL_76;
      }
      v148 = 0;
      a3 = v171;
LABEL_81:
      CFRelease(v71);

      v40 = v170;
      if ((v148 & 1) == 0)
      {
LABEL_82:
        InvitationChangedProperties = CalEventGetInvitationChangedProperties((uint64_t)a3);
        CalEventRemoveInvitationChangedProperties((uint64_t)a3, 16);
        v91 = CalEventGetInvitationChangedProperties((uint64_t)a3);
        if (InvitationChangedProperties && !v91)
          CalEventSetNeedsNotification((uint64_t)a3, 0);
      }
      objc_msgSend(v40, "x_apple_travel_duration");
      v158 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v158, "duration");
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      v176 = v92;
      if (v92)
      {
        objc_msgSend(v92, "timeInterval");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
        v93 = (const __CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v93 = 0;
      }
      v94 = (void *)CalEventCopyTravelTime((uint64_t)a3);
      v95 = v94;
      if (!v94 && v93 || v94 && (objc_msgSend(v94, "isEqual:", v93) & 1) == 0)
        CalEventSetTravelTime((uint64_t)a3, v93);
      objc_msgSend(v40, "x_apple_travel_advisory_behavior");
      v163 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v163, "value");
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      v174 = (__CFString *)v93;
      v160 = v96;
      if (v96)
      {
        v97 = v96;
        if (objc_msgSend(v96, "length"))
        {
          if ((objc_msgSend(v97, "isEqualToString:", *MEMORY[0x1E0DDB790]) & 1) != 0)
          {
            v98 = 2;
            goto LABEL_104;
          }
          if ((objc_msgSend(v97, "isEqualToString:", *MEMORY[0x1E0DDB798]) & 1) != 0)
          {
            v98 = 1;
            goto LABEL_104;
          }
          objc_msgSend(v97, "isEqualToString:", *MEMORY[0x1E0DDB788]);
        }
      }
      v98 = 0;
LABEL_104:
      v166 = v95;
      CalEventSetTravelAdvisoryBehavior((uint64_t)a3, v98);
      objc_msgSend(v40, "x_apple_suggestionInfoOpaqueKey");
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "x_apple_suggestionInfoUniqueKey");
      v104 = objc_claimAutoreleasedReturnValue();
      v105 = (void *)v104;
      if (v103 && v104)
      {
        SuggestedEventInfo = CalEventCopySuggestedEventInfo((uint64_t)a3);
        v107 = (id)CDBiCalendarConversionHandle;
        v108 = os_log_type_enabled(v107, OS_LOG_TYPE_DEBUG);
        if (SuggestedEventInfo)
        {
          if (v108)
          {
            *(_DWORD *)buf = 136315906;
            v192 = "BOOL CalEventUpdateFromICSEventWithOptions(ICSEvent *__strong, ICSCalendar *__strong, CalEventRef, Ca"
                   "lEventRef, CalDatabaseRef, NSUInteger, __strong id<CDBAccountInfo>, NSMutableSet *__strong, BOOL)";
            v193 = 2112;
            v194 = SuggestedEventInfo;
            v195 = 2112;
            v196 = (void *)a3;
            v197 = 2112;
            v198 = v40;
            _os_log_impl(&dword_1A5CCB000, v107, OS_LOG_TYPE_DEBUG, "%s - Existing suggested event info %@ found for calEvent %@ and icsEvent %@", buf, 0x2Au);
          }

        }
        else
        {
          if (v108)
          {
            *(_DWORD *)buf = 136315650;
            v192 = "BOOL CalEventUpdateFromICSEventWithOptions(ICSEvent *__strong, ICSCalendar *__strong, CalEventRef, Ca"
                   "lEventRef, CalDatabaseRef, NSUInteger, __strong id<CDBAccountInfo>, NSMutableSet *__strong, BOOL)";
            v193 = 2112;
            v194 = a3;
            v195 = 2112;
            v196 = v40;
            _os_log_impl(&dword_1A5CCB000, v107, OS_LOG_TYPE_DEBUG, "%s - No existing suggested event info for calEvent %@ and icsEvent %@, creating one", buf, 0x20u);
          }

          SuggestedEventInfo = CalDatabaseCreateSuggestedEventInfo(a5);
          CalEventSetSuggestedEventInfo((uint64_t)a3, SuggestedEventInfo);
        }
        v109 = (void *)CalSuggestedEventInfoCopyOpaqueKey((uint64_t)SuggestedEventInfo);
        if ((objc_msgSend(v109, "isEqualToString:", v103) & 1) == 0)
          CalSuggestedEventInfoSetOpaqueKey((uint64_t)SuggestedEventInfo);
        v110 = (void *)CalSuggestedEventInfoCopyUniqueKey((uint64_t)SuggestedEventInfo);
        if ((objc_msgSend(v110, "isEqualToString:", v105) & 1) == 0)
          CalSuggestedEventInfoSetUniqueKey((uint64_t)SuggestedEventInfo);
        ChangedFields = CalSuggestedEventInfoGetChangedFields((uint64_t)SuggestedEventInfo);
        if (ChangedFields != objc_msgSend(v170, "x_apple_suggestionInfoChangedFields"))
          CalSuggestedEventInfoSetChangedFields((uint64_t)SuggestedEventInfo);
        ChangesAcknowledged = CalSuggestedEventInfoGetChangesAcknowledged((uint64_t)SuggestedEventInfo);
        if (ChangesAcknowledged != objc_msgSend(v170, "x_apple_suggestionInfoChangesAcknowledged"))
          CalSuggestedEventInfoSetChangesAcknowledged((uint64_t)SuggestedEventInfo);
        objc_msgSend(v170, "x_apple_suggestionInfoTimestamp");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v151, "systemDateForDate:options:", v113, 1);
        v114 = (void *)objc_claimAutoreleasedReturnValue();

        CalSuggestedEventInfoGetTimestamp((uint64_t)SuggestedEventInfo);
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v115, "isEqualToDate:", v114) & 1) == 0)
          CalSuggestedEventInfoSetTimestamp((uint64_t)SuggestedEventInfo);
        CFRelease(SuggestedEventInfo);

        v40 = v170;
      }
      v180 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      objc_msgSend(v40, "relatedTo");
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      v117 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v178, v190, 16);
      if (v117)
      {
        v118 = v117;
        v119 = v103;
        v120 = *(_QWORD *)v179;
        v121 = *MEMORY[0x1E0DDBB28];
        while (2)
        {
          for (k = 0; k != v118; ++k)
          {
            if (*(_QWORD *)v179 != v120)
              objc_enumerationMutation(v116);
            v123 = *(void **)(*((_QWORD *)&v178 + 1) + 8 * k);
            objc_msgSend(v123, "parameterValueForName:", v121);
            v124 = (void *)objc_claimAutoreleasedReturnValue();
            v125 = v124;
            if (v124 && objc_msgSend(v124, "longValue") == 1)
            {
              objc_msgSend(v123, "value");
              v126 = (void *)objc_claimAutoreleasedReturnValue();

              goto LABEL_135;
            }

          }
          v118 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v178, v190, 16);
          if (v118)
            continue;
          break;
        }
        v126 = 0;
LABEL_135:
        a3 = v171;
        v103 = v119;
      }
      else
      {
        v126 = 0;
      }

      v172 = (void *)CalEventCopyRecurrenceSet((uint64_t)a3);
      if ((CalEqualStrings() & 1) == 0)
        CalEventSetRecurrenceSet((uint64_t)a3);
      if ((v167 & 0x800000) != 0)
      {
        objc_msgSend(v170, "x_apple_etag");
        v127 = (void *)objc_claimAutoreleasedReturnValue();
        CalEventSetExternalModificationTag(a3, v127);

        objc_msgSend(v170, "x_apple_scheduletag");
        v128 = (void *)objc_claimAutoreleasedReturnValue();
        CalEventSetExternalScheduleID(a3, v128);

      }
      if ((v167 & 2) != 0)
      {
        v129 = CalEventCopyCalendar(a3);
        if (v129)
        {
          v130 = (const void *)v129;
          CalCalendarItemSetupOrganizerAndSelfAttendeeForImportedItem((uint64_t)a3, v129, v164);
          CFRelease(v130);
        }
        else
        {
          v131 = (id)CDBiCalendarConversionHandle;
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A5CCB000, v131, OS_LOG_TYPE_DEBUG, "No calendar; skipping setting self attendee and organizer properties during iMIP import",
              buf,
              2u);
          }

        }
        IsPhantomMaster = CalCalendarItemIsPhantomMaster((uint64_t)a3);
        IsNew = CalEntityIsNew((_BOOL8)a3);
        IsInvite = CalEventIsInvite((uint64_t)a3);
        v135 = CalCalendarItemCopySelfAttendee((uint64_t)a3);
        if (v135)
        {
          CFRelease(v135);
          if (((IsPhantomMaster | IsNew ^ 1) & 1) == 0 && IsInvite)
          {
            v136 = CalCalendarItemCopyOrganizer((uint64_t)a3);
            if (v136)
            {
              v137 = v136;
              CalParticipantSetScheduleAgent((uint64_t)v136, 1u);
              CFRelease(v137);
            }
          }
        }
      }
      objc_msgSend(v170, "x_apple_special_day");
      v138 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (v138)
        CalEventSetSpecialDayString((uint64_t)a3, v138);
      objc_msgSend(v170, "x_apple_creator_identity");
      v139 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (v139)
        CalEventSetCreatorIdentityString((uint64_t)a3, v139);
      objc_msgSend(v170, "x_apple_creator_team_identity");
      v140 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (v140)
        CalEventSetCreatorTeamIdentityString((uint64_t)a3, v140);
      if ((v167 & 0x800000) != 0)
      {
        objc_msgSend(v170, "x_apple_ews_itemid");
        v141 = (void *)objc_claimAutoreleasedReturnValue();

        if (v141)
        {
          objc_msgSend(v170, "x_apple_ews_itemid");
          v142 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v170, "x_apple_ews_changekey");
          v169 = v103;
          v143 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v170, "x_apple_ews_permission");
          v144 = (void *)objc_claimAutoreleasedReturnValue();
          v145 = (uint64_t)a3;
          v146 = v144;
          CalSetEWSComponentsOnCalCalendarItem(v145, v142, v143, v144);

          v103 = v169;
        }
      }

      v16 = v156;
      v17 = v164;
      v18 = v161;
      goto LABEL_162;
    }
    v26 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v26, OS_LOG_TYPE_DEBUG, "Cannot update a NULL Cal event", buf, 2u);
    }
    v25 = 0;
  }
  else
  {
    v24 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_DEBUG, "icsEvent is nil. There's nothing for us to do", buf, 2u);
    }
    v25 = 1;
  }
LABEL_163:

  return v25;
}

id ICSEventFromCalEventFixUpCalEventWithOptions(id a1, int a2, unint64_t a3)
{
  id v3;
  id v4;
  id v5;
  id v6;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  void *v12;
  const void *ValueAtIndex;
  void *v14;
  _BOOL8 IsAllDay;
  void *v16;
  CFTypeRef v17;
  const void *v18;
  int UID;
  _BOOL4 v20;
  char v21;
  void *started;
  void *v23;
  double EndDate;
  void *v25;
  CFDateRef v26;
  void *v27;
  double OriginalStartDate;
  CFDateRef v29;
  NSObject *v30;
  void *v31;
  void *v32;
  int v33;
  uint64_t v34;
  void *v35;
  __CFString *v36;
  void *v37;
  NSObject *v38;
  int v39;
  void *v40;
  void *v41;
  NSObject *v42;
  const char *v43;
  __CFString *v44;
  __CFString *v45;
  __CFString *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  int TravelAdvisoryBehavior;
  id *v58;
  id v59;
  void *v60;
  CFTypeRef v61;
  const void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  CFMutableArrayRef v79;
  const __CFArray *v80;
  id v81;
  CFIndex v82;
  CFIndex v83;
  CFIndex j;
  const void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v99;
  uint64_t v100;
  id v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v113;
  id v114;
  void *v115;
  void *v116;
  uint8_t buf[4];
  double v118;
  uint64_t v119;

  v3 = a1;
  v119 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0DDB830]);
    v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v6 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v7 = CalEventCopyDetachedEvents((uint64_t)v3);
    v114 = v6;
    if (v7)
    {
      v8 = v7;
      if (CFArrayGetCount(v7))
      {
        Count = CFArrayGetCount(v8);
        if (Count >= 1)
        {
          v10 = Count;
          for (i = 0; i != v10; ++i)
          {
            v12 = (void *)MEMORY[0x1E0C99D68];
            ValueAtIndex = CFArrayGetValueAtIndex(v8, i);
            objc_msgSend(v12, "dateWithTimeIntervalSinceReferenceDate:", CalEventGetOriginalStartDate((uint64_t)ValueAtIndex));
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "addObject:", v14);

          }
        }
      }
      objc_msgSend(v5, "setObject:forKey:", v6, CFSTR("ItemBridgeExceptionDates"));
      CFRelease(v8);
    }
    else
    {
      objc_msgSend(v5, "setObject:forKey:", v6, CFSTR("ItemBridgeExceptionDates"));
    }
    CalEventCopyStartDate((uint64_t)v3);
    IsAllDay = CalEventIsAllDay((uint64_t)v3);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", IsAllDay);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKey:", v16, CFSTR("ItemBridgeIsAllDay"));

    v17 = CalEventCopyOriginalEvent((uint64_t)v3);
    v18 = v17;
    v115 = v5;
    if (v17)
    {
      UID = CalEventGetUID(v17);
      if (UID != CalEventGetUID(v3))
      {
        v20 = CalEventIsAllDay((uint64_t)v18);
        v21 = 0;
LABEL_14:
        started = (void *)CalCalendarItemCopyStartTimeZone((uint64_t)v3);
        v23 = started;
        if (IsAllDay)
        {

          v23 = 0;
        }
        else if (started)
        {
          objc_msgSend(v115, "setObject:forKey:", started, CFSTR("ItemBridgeStartDateTimezone"));
        }
        EndDate = CalEventGetEndDate((uint64_t)v3);
        v25 = (void *)CalCalendarItemCopyEndTimeZone((uint64_t)v3);
        v110 = v25;
        if (IsAllDay)
        {
          v26 = CFDateCreate(0, EndDate + 1.0);
          ICSFloatingDateOnlyFromCFDate((uint64_t)v26, v25);
        }
        else
        {
          v26 = CFDateCreate(0, EndDate);
          ICSDateFromCFDate((uint64_t)v26, v25);
        }
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        if (v26)
          CFRelease(v26);
        objc_msgSend(v4, "setDtend:", v27);
        OriginalStartDate = CalEventGetOriginalStartDate((uint64_t)v3);
        v29 = CFDateCreate(0, OriginalStartDate);
        if (fabs(OriginalStartDate) >= 2.22044605e-16
          && vabdd_f64(OriginalStartDate, *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
        {
          v30 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134217984;
            v118 = OriginalStartDate;
            _os_log_impl(&dword_1A5CCB000, v30, OS_LOG_TYPE_DEBUG, "Setting a recurrence_id based on %f", buf, 0xCu);
          }
          if (v20)
            ICSFloatingDateOnlyFromCFDate((uint64_t)v29, v23);
          else
            ICSDateFromCFDate((uint64_t)v29, v23);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setRecurrence_id:", v31);

        }
        v111 = v23;
        if (v29)
          CFRelease(v29);
        CalDateTimeRelease();
        v32 = v115;
        v33 = a3;
        if ((CalCalendarItemUpdateICSComponent(v3, v4, v115, a3) & 1) == 0)
        {
          v37 = (void *)CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            v38 = v37;
            v39 = CalEventGetUID(v3);
            *(_DWORD *)buf = 67109120;
            LODWORD(v118) = v39;
            _os_log_impl(&dword_1A5CCB000, v38, OS_LOG_TYPE_DEBUG, "Couldn't update the calendar item components of event %d", buf, 8u);

          }
          if ((v21 & 1) == 0)
            CFRelease(v18);
          v3 = 0;
          v40 = v114;
          v41 = v110;
          goto LABEL_103;
        }
        objc_msgSend(v4, "setX_apple_needs_reply:", CalEventShouldDisplayNotification((uint64_t)v3));
        if (CalCalendarItemGetAvailability((uint64_t)v3) == 1)
          v34 = 2;
        else
          v34 = 1;
        objc_msgSend(v4, "setTransp:", v34);
        v35 = (void *)CalEventCopyUniqueIdentifier((uint64_t)v3);
        if (v35)
        {
          v36 = v35;
          if ((v21 & 1) != 0)
          {
            objc_msgSend(v4, "setUid:", v36);
          }
          else
          {
            v44 = (__CFString *)CalEventCopyUniqueIdentifier((uint64_t)v18);
            objc_msgSend(v4, "setUid:", v44);
            if (a2)
            {
              CalGetRealUIDFromRecurrenceUID(v36);
              v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
              if (CFStringCompare(v45, v44, 0))
              {
                CalGetRecurrenceUIDFromRealUID(v44, OriginalStartDate);
                v46 = (__CFString *)objc_claimAutoreleasedReturnValue();
                CalEventSetUniqueIdentifier((uint64_t)v3, v46);

              }
            }
            if (v44)
              CFRelease(v44);
          }
          CFRelease(v36);
          goto LABEL_64;
        }
        if ((v21 & 1) != 0)
        {
          objc_msgSend(MEMORY[0x1E0DDB7F0], "makeUID");
          v36 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setUid:", v36);
          v42 = CDBiCalendarConversionHandle;
          if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            goto LABEL_62;
          *(_DWORD *)buf = 138412290;
          v118 = *(double *)&v36;
          v43 = "This event has no original event. Creating a new uid %@";
        }
        else
        {
          v47 = (void *)CalEventCopyUniqueIdentifier((uint64_t)v18);
          if (v47)
          {
            v48 = v47;
            v49 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              v118 = *(double *)&v48;
              _os_log_impl(&dword_1A5CCB000, v49, OS_LOG_TYPE_DEBUG, "Using uid from owning event: %@", buf, 0xCu);
            }
            objc_msgSend(v4, "setUid:", v48);
            CalGetRecurrenceUIDFromRealUID(v48, OriginalStartDate);
            v36 = (__CFString *)objc_claimAutoreleasedReturnValue();
            CFRelease(v48);
            goto LABEL_62;
          }
          objc_msgSend(MEMORY[0x1E0DDB7F0], "makeUID");
          v36 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setUid:", v36);
          v42 = CDBiCalendarConversionHandle;
          if (!os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
LABEL_62:
            if (a2)
              CalEventSetUniqueIdentifier((uint64_t)v3, v36);
LABEL_64:

            if ((v21 & 1) == 0)
              CFRelease(v18);
            v40 = v114;
            if ((a3 & 0x41000) == 0)
            {
              v50 = (void *)CalEventCopyResponseComment((uint64_t)v3);
              if (v50)
                objc_msgSend(v4, "setX_calendarserver_private_comment:", v50);

            }
            v51 = (void *)CalEventCopyTravelTime((uint64_t)v3);
            v52 = v51;
            if (v51)
            {
              v53 = objc_msgSend(v51, "integerValue");
              if (v53 < 1)
              {
                objc_msgSend(v4, "setX_apple_travel_duration:", 0);
              }
              else
              {
                v54 = v53;
                v55 = objc_alloc_init(MEMORY[0x1E0DDB878]);
                v56 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB828]), "initWithWeeks:days:hours:minutes:seconds:", 0, 0, 0, 0, v54);
                objc_msgSend(v55, "setDuration:", v56);
                objc_msgSend(v4, "setX_apple_travel_duration:", v55);

              }
            }
            TravelAdvisoryBehavior = CalEventGetTravelAdvisoryBehavior((uint64_t)v3);
            v108 = v52;
            if (TravelAdvisoryBehavior == 1)
            {
              v58 = (id *)MEMORY[0x1E0DDB798];
            }
            else
            {
              if (TravelAdvisoryBehavior != 2)
                goto LABEL_80;
              v58 = (id *)MEMORY[0x1E0DDB790];
            }
            v59 = *v58;
            if (v59)
            {
              v106 = v59;
              v60 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB870]), "initWithString:", v59);
              objc_msgSend(v4, "setX_apple_travel_advisory_behavior:", v60);

LABEL_81:
              v61 = CalEventCopySuggestedEventInfo((uint64_t)v3);
              v109 = v27;
              if (v61)
              {
                v62 = v61;
                v63 = (void *)CalSuggestedEventInfoCopyOpaqueKey((uint64_t)v61);
                v64 = (void *)CalSuggestedEventInfoCopyUniqueKey((uint64_t)v62);
                CalSuggestedEventInfoGetTimestamp((uint64_t)v62);
                v65 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v4, "setX_apple_suggestionInfoOpaqueKey:", v63);
                objc_msgSend(v4, "setX_apple_suggestionInfoUniqueKey:", v64);
                objc_msgSend(v4, "setX_apple_suggestionInfoChangesAcknowledged:", CalSuggestedEventInfoGetChangesAcknowledged((uint64_t)v62));
                objc_msgSend(v4, "setX_apple_suggestionInfoChangedFields:", CalSuggestedEventInfoGetChangedFields((uint64_t)v62));
                if (v65)
                {
                  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
                  v66 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0);
                  v104 = v63;
                  v67 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v66, "setTimeZone:", v67);

                  objc_msgSend(v66, "components:fromDate:", 252, v65);
                  v102 = v65;
                  v68 = (void *)objc_claimAutoreleasedReturnValue();
                  v101 = objc_alloc(MEMORY[0x1E0DDB800]);
                  v100 = objc_msgSend(v68, "year");
                  v99 = objc_msgSend(v68, "month");
                  v69 = objc_msgSend(v68, "day");
                  v70 = objc_msgSend(v68, "hour");
                  v71 = objc_msgSend(v68, "minute");
                  v72 = objc_msgSend(v68, "second");
                  objc_msgSend(v66, "timeZone");
                  v103 = v64;
                  v73 = (void *)objc_claimAutoreleasedReturnValue();
                  v74 = v70;
                  v40 = v114;
                  v75 = (void *)objc_msgSend(v101, "initWithYear:month:day:hour:minute:second:timeZone:", v100, v99, v69, v74, v71, v72, v73);
                  objc_msgSend(v4, "setX_apple_suggestionInfoTimestamp:", v75);

                  v63 = v104;
                  v64 = v103;

                  v65 = v102;
                  v33 = a3;
                }
                CFRelease(v62);

              }
              v76 = (void *)CalEventCopySpecialDayString((uint64_t)v3);
              objc_msgSend(v4, "setX_apple_special_day:", v76);
              v77 = (void *)CalEventCopyCreatorIdentityString((uint64_t)v3);
              objc_msgSend(v4, "setX_apple_creator_identity:", v77);
              v78 = (void *)CalEventCopyCreatorTeamIdentityString((uint64_t)v3);
              objc_msgSend(v4, "setX_apple_creator_team_identity:", v78);
              v113 = v77;
              if ((v33 & 0x40000) == 0)
              {
                v79 = CalCalendarItemCopyAttendees((uint64_t)v3);
                if (v79)
                {
                  v80 = v79;
                  v105 = v76;
                  v81 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  v82 = CFArrayGetCount(v80);
                  if (v82 >= 1)
                  {
                    v83 = v82;
                    for (j = 0; j != v83; ++j)
                    {
                      v85 = CFArrayGetValueAtIndex(v80, j);
                      ICSUserAddressFromCalAttendee((uint64_t)v85);
                      v86 = (void *)objc_claimAutoreleasedReturnValue();
                      ICSAttendeeCommentFromCalAttendee((uint64_t)v85, v86);
                      v87 = (void *)objc_claimAutoreleasedReturnValue();
                      if (v87)
                        objc_msgSend(v81, "addObject:", v87);

                    }
                  }
                  if (objc_msgSend(v81, "count"))
                    objc_msgSend(v4, "setX_calendarserver_attendee_comment:", v81);
                  CFRelease(v80);

                  v77 = v113;
                  v40 = v114;
                  v76 = v105;
                }
              }
              v88 = (void *)CalEventCopyRecurrenceSet((uint64_t)v3);
              if (v88)
              {
                v89 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB848]), "initWithValue:type:", v88, 5007);
                objc_msgSend(MEMORY[0x1E0DDB858], "relationshipParameterFromCode:", 1);
                v90 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v89, "setParameterValue:forName:", v90, *MEMORY[0x1E0DDBB28]);
                objc_msgSend(v4, "relatedTo");
                v91 = (void *)objc_claimAutoreleasedReturnValue();
                v92 = v91;
                if (v91)
                {
                  objc_msgSend(v91, "arrayByAddingObject:", v89);
                  v93 = objc_claimAutoreleasedReturnValue();
                }
                else
                {
                  v116 = v89;
                  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v116, 1);
                  v93 = objc_claimAutoreleasedReturnValue();
                }
                v94 = (void *)v93;
                objc_msgSend(v4, "setRelatedTo:", v93);

                v77 = v113;
                v40 = v114;
              }
              v95 = (void *)CalCalendarItemCopyExternalRepresentation((uint64_t)v3);
              if (v95)
              {
                +[CalItemMetadata metadataWithData:](CalItemMetadata, "metadataWithData:", v95);
                v96 = v76;
                v97 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v97, "applyToComponent:", v4);

                v76 = v96;
              }
              v3 = v4;

              v32 = v115;
              v27 = v109;
              v41 = v110;
LABEL_103:

              return v3;
            }
LABEL_80:
            v106 = 0;
            goto LABEL_81;
          }
          *(_DWORD *)buf = 138412290;
          v118 = *(double *)&v36;
          v43 = "Owning event had no uid. Creating a new one: %@";
        }
        _os_log_impl(&dword_1A5CCB000, v42, OS_LOG_TYPE_DEBUG, v43, buf, 0xCu);
        goto LABEL_62;
      }
      CFRelease(v18);
      v18 = 0;
    }
    v20 = 0;
    v21 = 1;
    goto LABEL_14;
  }
  return v3;
}

id ICSEventFromCalEvent(void *a1, unint64_t a2)
{
  return ICSEventFromCalEventFixUpCalEventWithOptions(a1, 1, a2);
}

id ICSEventFromCalEventFixUpCalEvent(void *a1, int a2)
{
  return ICSEventFromCalEventFixUpCalEventWithOptions(a1, a2, 0);
}

void sub_1A5D65F80(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;

  if (a2 == 1)
  {
    v3 = objc_begin_catch(exception_object);
    objc_msgSend(v2, "logHandle");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      +[CalExchangeCalendarExternalRepresentation dictionaryWithExternalRepresentationData:].cold.2((uint64_t)v3, v4, v5);

    objc_end_catch();
    JUMPOUT(0x1A5D65F44);
  }
  _Unwind_Resume(exception_object);
}

void _CalSaveLazyString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *v5;
  uint64_t v6;
  _QWORD *PropertyDescriptor;
  CFStringRef v8;
  const os_unfair_lock *Context;
  uint64_t v10;
  uint64_t **v11;
  const os_unfair_lock *v12;
  const __CFString *Property;
  const __CFString *v14;
  uint64_t Length;
  CFIndex v16;
  UInt8 *v17;
  sqlite3_stmt *v18;
  int ID;
  uint64_t v20;
  const os_unfair_lock *v21;
  uint64_t v22;
  const os_unfair_lock *v23;
  CFIndex usedBufLen;
  CFRange v25;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = *(_QWORD *)CPRecordGetClass();
  PropertyDescriptor = (_QWORD *)CPRecordGetPropertyDescriptor();
  v8 = CFStringCreateWithFormat(v5, 0, CFSTR("UPDATE %s SET %s = ? WHERE ROWID = ?"), v6, *PropertyDescriptor);
  if (a3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a3)
      {
        if (*(_QWORD *)(*(_QWORD *)a3 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    v11 = (uint64_t **)v10;
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    Property = (const __CFString *)CPRecordGetProperty();
    if (Property && (v14 = Property, Length = CFStringGetLength(Property), Length >= 1))
    {
      v16 = Length;
      usedBufLen = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      v17 = (UInt8 *)malloc_type_malloc(usedBufLen + 1, 0x953772EuLL);
      v25.location = 0;
      v25.length = v16;
      CFStringGetBytes(v14, v25, 0x8000100u, 0, 0, v17, usedBufLen, &usedBufLen);
      v17[usedBufLen] = 0;
      sqlite3_bind_text((sqlite3_stmt *)v11[1], 1, (const char *)v17, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    }
    else
    {
      sqlite3_bind_null((sqlite3_stmt *)v11[1], 1);
    }
    v18 = (sqlite3_stmt *)v11[1];
    ID = CPRecordGetID();
    sqlite3_bind_int(v18, 2, ID);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        v20 = **v11;
        if (v20)
        {
          if (*(_QWORD *)(v20 + 104))
          {
            v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21)
              os_unfair_lock_assert_owner(v21 + 20);
          }
        }
      }
    }
    CPSqliteStatementPerform();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        v22 = **v11;
        if (v22)
        {
          if (*(_QWORD *)(v22 + 104))
          {
            v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v23)
              os_unfair_lock_assert_owner(v23 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (v8)
    CFRelease(v8);
}

void _CalLoadLazyData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *v5;
  uint64_t v6;
  _QWORD *Class;
  CFStringRef v8;
  const os_unfair_lock *Context;
  uint64_t v10;
  uint64_t v11;
  sqlite3_stmt *v12;
  int ID;
  unsigned int v14;
  const UInt8 *v15;
  BOOL v16;
  CFDataRef v17;
  const os_unfair_lock *v18;
  uint64_t v19;
  const os_unfair_lock *v20;

  if (a3)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = *(_QWORD *)CPRecordGetPropertyDescriptor();
    Class = (_QWORD *)CPRecordGetClass();
    v8 = CFStringCreateWithFormat(v5, 0, CFSTR("SELECT %s FROM %s WHERE ROWID = ?"), v6, *Class);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a3)
      {
        if (*(_QWORD *)(*(_QWORD *)a3 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    v10 = CPSqliteConnectionStatementForSQL();
    if (!v10)
      goto LABEL_30;
    v11 = v10;
    v12 = *(sqlite3_stmt **)(v10 + 8);
    ID = CPRecordGetID();
    sqlite3_bind_int(v12, 1, ID);
    if (sqlite3_step(*(sqlite3_stmt **)(v11 + 8)) != 100)
    {
LABEL_23:
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v11)
        {
          v19 = **(_QWORD **)v11;
          if (v19)
          {
            if (*(_QWORD *)(v19 + 104))
            {
              v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20)
                os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
LABEL_30:
      if (v8)
        CFRelease(v8);
      return;
    }
    v14 = sqlite3_column_bytes(*(sqlite3_stmt **)(v11 + 8), 0);
    v15 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v11 + 8), 0);
    if (v14)
      v16 = v15 == 0;
    else
      v16 = 1;
    if (v16)
    {
      v17 = 0;
      if (a1)
      {
LABEL_17:
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18)
              os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
    }
    else
    {
      v17 = CFDataCreate(v5, v15, v14);
      if (a1)
        goto LABEL_17;
    }
    CPRecordInitializeProperty();
    if (v17)
      CFRelease(v17);
    goto LABEL_23;
  }
}

void _CalSaveLazyData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *v5;
  uint64_t v6;
  _QWORD *PropertyDescriptor;
  CFStringRef v8;
  const os_unfair_lock *Context;
  uint64_t v10;
  uint64_t **v11;
  const os_unfair_lock *v12;
  const __CFData *Property;
  const __CFData *v14;
  CFIndex Length;
  int v16;
  const UInt8 *BytePtr;
  sqlite3_stmt *v18;
  int ID;
  uint64_t v20;
  const os_unfair_lock *v21;
  uint64_t v22;
  const os_unfair_lock *v23;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = *(_QWORD *)CPRecordGetClass();
  PropertyDescriptor = (_QWORD *)CPRecordGetPropertyDescriptor();
  v8 = CFStringCreateWithFormat(v5, 0, CFSTR("UPDATE %s SET %s = ? WHERE ROWID = ?"), v6, *PropertyDescriptor);
  if (a3)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a3)
      {
        if (*(_QWORD *)(*(_QWORD *)a3 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v10 = CPSqliteConnectionStatementForSQL();
  if (v10)
  {
    v11 = (uint64_t **)v10;
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    Property = (const __CFData *)CPRecordGetProperty();
    if (Property && (v14 = Property, Length = CFDataGetLength(Property), (unint64_t)(Length - 1) <= 0x7FFFFFFE))
    {
      v16 = Length;
      BytePtr = CFDataGetBytePtr(v14);
      sqlite3_bind_blob((sqlite3_stmt *)v11[1], 1, BytePtr, v16, 0);
    }
    else
    {
      sqlite3_bind_null((sqlite3_stmt *)v11[1], 1);
    }
    v18 = (sqlite3_stmt *)v11[1];
    ID = CPRecordGetID();
    sqlite3_bind_int(v18, 2, ID);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        v20 = **v11;
        if (v20)
        {
          if (*(_QWORD *)(v20 + 104))
          {
            v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21)
              os_unfair_lock_assert_owner(v21 + 20);
          }
        }
      }
    }
    CPSqliteStatementPerform();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v11)
      {
        v22 = **v11;
        if (v22)
        {
          if (*(_QWORD *)(v22 + 104))
          {
            v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v23)
              os_unfair_lock_assert_owner(v23 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (v8)
    CFRelease(v8);
}

uint64_t locationInverseRelationShouldChange(uint64_t a1, const void *a2, int a3)
{
  uint64_t Owner;
  uint64_t result;
  CFTypeRef Location;

  Owner = CalRelationGetOwner(a1);
  result = _CalEntityIsOfType(a2, 2);
  if ((_DWORD)result)
  {
    switch(a3)
    {
      case 'c':
        Location = _CalCalendarItemGetLocation((uint64_t)a2);
        break;
      case 'd':
        Location = _CalCalendarItemGetClientLocation((uint64_t)a2);
        break;
      case 'e':
        Location = _CalCalendarItemGetStartLocation((uint64_t)a2);
        break;
      case 'f':
        Location = _CalCalendarItemGetEndLocation((uint64_t)a2);
        break;
      default:
        Location = 0;
        break;
    }
    return Location && Location == (CFTypeRef)Owner;
  }
  return result;
}

void _CalLocationPrepareForSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  const os_unfair_lock *v4;
  uint64_t v5;
  const os_unfair_lock *v6;
  uint64_t v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  uint64_t v11;
  const os_unfair_lock *v12;
  int v13;
  const os_unfair_lock *v14;
  int v15;
  const os_unfair_lock *v16;
  int v17;
  const os_unfair_lock *v18;
  int v19;
  const os_unfair_lock *v20;
  int v21;
  int ID;
  int v23;
  NSObject *v24;
  const os_unfair_lock *v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;
  int v28;
  const os_unfair_lock *v29;
  int v30;
  int OriginalProperty;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  CalRelationOwnerWillSave(Property);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  v5 = CPRecordGetProperty();
  CalRelationOwnerWillSave(v5);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  v7 = CPRecordGetProperty();
  CalRelationOwnerWillSave(v7);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  v9 = CPRecordGetProperty();
  CalRelationOwnerWillSave(v9);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  v11 = CPRecordGetProperty();
  CalRelationOwnerWillSave(v11);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  v13 = CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  v15 = CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  v17 = CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18)
          os_unfair_lock_assert_owner(v18 + 20);
      }
    }
  }
  v19 = CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20)
          os_unfair_lock_assert_owner(v20 + 20);
      }
    }
  }
  v21 = CPRecordGetProperty();
  ID = CPRecordGetID();
  if (ID >= 1 && v13 <= 0 && v15 <= 0 && v17 <= 0 && v19 <= 0 && v21 <= 0)
  {
    v23 = ID;
    v24 = (id)CDBLogHandle;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v25)
              os_unfair_lock_assert_owner(v25 + 20);
          }
        }
      }
      OriginalProperty = CPRecordGetOriginalProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v26)
              os_unfair_lock_assert_owner(v26 + 20);
          }
        }
      }
      v30 = CPRecordGetOriginalProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v27)
              os_unfair_lock_assert_owner(v27 + 20);
          }
        }
      }
      v28 = CPRecordGetOriginalProperty();
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v29)
          os_unfair_lock_assert_owner(v29 + 20);
      }
      *(_DWORD *)buf = 67111424;
      v33 = v23;
      v34 = 1024;
      v35 = v13;
      v36 = 1024;
      v37 = v15;
      v38 = 1024;
      v39 = v17;
      v40 = 1024;
      v41 = v19;
      v42 = 1024;
      v43 = v21;
      v44 = 1024;
      v45 = OriginalProperty;
      v46 = 1024;
      v47 = v30;
      v48 = 1024;
      v49 = v28;
      v50 = 1024;
      v51 = CPRecordGetOriginalProperty();
      _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_ERROR, "Location is being saved with no valid inverse relationship. location id = %i; alarm_owner_id = %i; item_owner_id"
        " = %i; start_location_owner_id = %i; end_location_owner_id = %i; client_location_owner_id = %i; previous alarm_o"
        "wner_id = %i; previous location_owner_id = %i; previous start_location_owner_id = %i; previous client_location_owner_id = %i;",
        buf,
        0x3Eu);
    }

  }
}

uint64_t _CalLocationPropertyDidChange(uint64_t result, unsigned int a2)
{
  const void *v3;
  const os_unfair_lock *Context;
  int ID;
  const os_unfair_lock *v6;
  int Property;
  const os_unfair_lock *v8;
  int v9;
  const os_unfair_lock *v10;
  int v11;
  const os_unfair_lock *v12;
  int v13;
  const os_unfair_lock *v14;
  uint64_t DatabaseForRecord;

  if (a2 > 9)
    goto LABEL_54;
  result = (uint64_t)_CalLocationGetOwner(result);
  if (!result)
    goto LABEL_54;
  v3 = (const void *)result;
  if (_CalEntityIsOfType((const void *)result, 4))
  {
    if (!CDBLockingAssertionsEnabled)
      goto LABEL_47;
    if (!CPRecordGetStore())
      goto LABEL_47;
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!Context)
      goto LABEL_47;
    goto LABEL_7;
  }
  if (!_CalEntityIsOfType(v3, 101))
    goto LABEL_48;
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6)
        os_unfair_lock_assert_owner(v6 + 20);
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
  }
  v11 = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  v13 = CPRecordGetProperty();
  if (ID == Property)
  {
    if (!CDBLockingAssertionsEnabled)
      goto LABEL_47;
    if (!CPRecordGetStore())
      goto LABEL_47;
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!Context)
      goto LABEL_47;
    goto LABEL_7;
  }
  if (ID == v9)
  {
    if (!CDBLockingAssertionsEnabled)
      goto LABEL_47;
    if (!CPRecordGetStore())
      goto LABEL_47;
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!Context)
      goto LABEL_47;
    goto LABEL_7;
  }
  if (ID == v11)
  {
    if (!CDBLockingAssertionsEnabled)
      goto LABEL_47;
    if (!CPRecordGetStore())
      goto LABEL_47;
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (!Context)
      goto LABEL_47;
    goto LABEL_7;
  }
  if (ID != v13)
    goto LABEL_48;
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
LABEL_7:
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
LABEL_47:
  CPRecordMarkPropertyChanged();
LABEL_48:
  result = _CalEntityIsNew((_BOOL8)v3);
  if ((result & 1) == 0)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
    result = CPRecordMarkChanged();
  }
LABEL_54:
  if (a2 <= 8 && ((1 << a2) & 0x15C) != 0)
  {
    DatabaseForRecord = CalGetDatabaseForRecord();
    return _CalDatabaseSetChangeFlags(DatabaseForRecord, 8);
  }
  return result;
}

void CalLocationInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalLocationClass, (const char **)&kCalLocationIndexes, 0);
}

void CalLocationMigrateTables(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  if ((int)a3 <= 62)
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalLocationClass, (const char **)&kCalLocationIndexes, 0);
LABEL_5:
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("UPDATE Location SET start_loc_owner_id = item_owner_id, item_owner_id = NULL WHERE rowid in (SELECT location.rowid FROM location INNER JOIN calendaritem ON calendaritem.start_location_id=location.rowid);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("UPDATE Location SET client_loc_owner_id = item_owner_id, item_owner_id = NULL WHERE rowid in (SELECT location.rowid FROM location INNER JOIN calendaritem ON calendaritem.client_location_id=location.rowid);"));
    return;
  }
  if (a3 <= 0x3EE6)
  {
    CalMigrateTableFull(a2, (const char **)&kCalLocationClass, 0, (const char **)&kCalLocationPropertyDBVersions, 0, (const char **)&kCalLocationIndexes, 0, 0, a3);
    if (a3 <= 0x2EE6)
      goto LABEL_5;
  }
}

CFTypeRef _CalLocationHasValidParent(uint64_t a1)
{
  CFTypeRef result;

  result = _CalLocationGetOwner(a1);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

CFTypeRef _CalLocationGetOwner(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  uint64_t v4;
  const os_unfair_lock *v5;
  uint64_t v6;
  const os_unfair_lock *v7;
  uint64_t v8;
  const os_unfair_lock *v9;
  uint64_t v10;
  const os_unfair_lock *v11;
  uint64_t v12;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
  {
    v4 = Property;
    if (CalRelationGetRelatedObject(Property))
      return CalRelationGetRelatedObject(v4);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v5)
          os_unfair_lock_assert_owner(v5 + 20);
      }
    }
  }
  v6 = CPRecordGetProperty();
  if (v6)
  {
    v4 = v6;
    if (CalRelationGetRelatedObject(v6))
      return CalRelationGetRelatedObject(v4);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  v8 = CPRecordGetProperty();
  if (v8)
  {
    v4 = v8;
    if (CalRelationGetRelatedObject(v8))
      return CalRelationGetRelatedObject(v4);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9)
          os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  v10 = CPRecordGetProperty();
  if (v10)
  {
    v4 = v10;
    if (CalRelationGetRelatedObject(v10))
      return CalRelationGetRelatedObject(v4);
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  v12 = CPRecordGetProperty();
  if (v12 && (v4 = v12, CalRelationGetRelatedObject(v12)))
    return CalRelationGetRelatedObject(v4);
  else
    return 0;
}

void _CalLocationCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Location WHERE item_owner_id > 0 AND item_owner_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Location WHERE alarm_owner_id > 0 AND alarm_owner_id NOT IN (SELECT ROWID FROM Alarm);"),
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Location WHERE start_loc_owner_id > 0 AND start_loc_owner_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Location WHERE end_loc_owner_id > 0 AND end_loc_owner_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Location WHERE client_loc_owner_id > 0 AND client_loc_owner_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
}

uint64_t _CalLocationGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

const void *_CalDatabaseCreateLocation(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 14);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateLocation(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Location;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Location = _CalDatabaseCreateLocation((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Location;
}

const void *_CalLocationCopy(uint64_t a1, uint64_t a2)
{
  const void *Location;
  const void *v4;
  BOOL v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  BOOL v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;
  const os_unfair_lock *v18;
  const os_unfair_lock *v19;
  const os_unfair_lock *v20;
  const os_unfair_lock *v21;
  const os_unfair_lock *v22;
  uint64_t v23;
  const void *v24;
  const os_unfair_lock *v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;

  Location = _CalDatabaseCreateLocation(a1);
  v4 = Location;
  if (CDBLockingAssertionsEnabled)
    v5 = Location == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v11 = v4 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v18)
          os_unfair_lock_assert_owner(v18 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20)
          os_unfair_lock_assert_owner(v20 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v21)
          os_unfair_lock_assert_owner(v21 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
    }
  }
  v23 = CPRecordCopyProperty();
  if (v23)
  {
    v24 = (const void *)v23;
    if (CDBLockingAssertionsEnabled)
    {
      if (v4)
      {
        if (CPRecordGetStore())
        {
          v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v25)
            os_unfair_lock_assert_owner(v25 + 20);
        }
      }
    }
    CPRecordSetProperty();
    CFRelease(v24);
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26)
          os_unfair_lock_assert_owner(v26 + 20);
      }
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27)
          os_unfair_lock_assert_owner(v27 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v4;
}

_QWORD *_CalRemoveLocation(const void *a1)
{
  CFTypeRef Owner;
  uint64_t v3;
  int ID;
  const os_unfair_lock *Context;
  int Property;
  const os_unfair_lock *v7;
  int v8;
  const os_unfair_lock *v9;
  int v10;
  const os_unfair_lock *v11;
  int v12;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t DatabaseForRecord;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  Owner = _CalLocationGetOwner((uint64_t)a1);
  if (Owner)
  {
    v3 = (uint64_t)Owner;
    if (_CalEntityIsOfType(Owner, 101))
    {
      ID = CPRecordGetID();
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
      Property = CPRecordGetProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7)
            os_unfair_lock_assert_owner(v7 + 20);
        }
      }
      v8 = CPRecordGetProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9)
            os_unfair_lock_assert_owner(v9 + 20);
        }
      }
      v10 = CPRecordGetProperty();
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
      }
      v12 = CPRecordGetProperty();
      if (ID == Property)
      {
        return _CalCalendarItemSetLocation(v3, 0);
      }
      else if (ID == v8)
      {
        return _CalCalendarItemSetClientLocation(v3, 0);
      }
      else if (ID == v10)
      {
        return _CalCalendarItemSetStartLocation(v3, 0);
      }
      else if (ID == v12)
      {
        return _CalCalendarItemSetEndLocation(v3, 0);
      }
      else
      {
        v15 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          v16 = v15;
          v18[0] = 67109376;
          v18[1] = CPRecordGetID();
          v19 = 1024;
          v20 = CPRecordGetID();
          _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_ERROR, "Location to be removed (%i) has an owner of calendar item %i, but that calendar item doesn't reference that location.", (uint8_t *)v18, 0xEu);

        }
        DatabaseForRecord = CalGetDatabaseForRecord();
        return (_QWORD *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
      }
    }
    else
    {
      return _CalAlarmSetLocation(v3, 0);
    }
  }
  else
  {
    v14 = CalGetDatabaseForRecord();
    return (_QWORD *)_CalDatabaseRemoveEntity(v14, a1);
  }
}

void CalRemoveLocation(const void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveLocation(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalLocationSetTitle(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  _CalLocationInvaliateOwnerDetectedConferenceURL(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const void *_CalLocationInvaliateOwnerDetectedConferenceURL(uint64_t a1)
{
  const void *result;
  uint64_t v2;

  result = _CalLocationGetOwner(a1);
  if (result)
  {
    v2 = (uint64_t)result;
    result = (const void *)_CalEntityIsOfType(result, 101);
    if ((_DWORD)result)
      return (const void *)_CalEventInvalidateDetectedConferenceURL(v2);
  }
  return result;
}

uint64_t CalLocationCopyTitle(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalEventCopySummary(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalLocationSetAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  _CalLocationInvaliateOwnerDetectedConferenceURL(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalLocationCopyAddress(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalLocationCopyAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalLocationCopyAddress(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

CFTypeRef _CalLocationCopyFullDisplayString(uint64_t a1)
{
  void *v2;
  void *v3;
  const void *v4;
  CFTypeRef v5;
  NSObject *v6;
  uint8_t v8[16];

  if (a1)
  {
    v2 = (void *)_CalEventCopySummary(a1);
    v3 = (void *)_CalLocationCopyAddress(a1);
    v4 = (const void *)objc_msgSend(MEMORY[0x1E0D0C328], "fullDisplayStringWithTitle:address:", v2, v3);
    if (v4)
      v5 = CFRetain(v4);
    else
      v5 = 0;

  }
  else
  {
    v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "NULL 'location' given.  Will not return a full display string.", v8, 2u);
    }
    return 0;
  }
  return v5;
}

CFTypeRef CalLocationCopyFullDisplayString(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalLocationCopyFullDisplayString(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalLocationSetRouting(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationCopyRouting(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalLocationSetCoordinates(uint64_t a1, CFNumberRef a2)
{
  os_unfair_lock_s *RecordLock;
  CFNumberRef v5;
  _BOOL4 v6;
  const os_unfair_lock *Context;
  const os_unfair_lock *v8;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (!a2)
  {
    v5 = 0;
    LOBYTE(v6) = 1;
    if (!a1)
      goto LABEL_10;
LABEL_6:
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
    goto LABEL_10;
  }
  v5 = CFNumberCreate(0, kCFNumberDoubleType, a2);
  a2 = CFNumberCreate(0, kCFNumberDoubleType, (char *)a2 + 8);
  v6 = a2 == 0;
  if ((v5 != 0) == v6)
    goto LABEL_16;
  if (a1)
    goto LABEL_6;
LABEL_10:
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  CPRecordSetProperty();
LABEL_16:
  if (v5)
    CFRelease(v5);
  if (!v6)
    CFRelease(a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationHasCoordinates(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;
  const os_unfair_lock *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v5)
          os_unfair_lock_assert_owner(v5 + 20);
      }
    }
  }
  v6 = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  if (Property)
    v7 = v6 == 0;
  else
    v7 = 1;
  v8 = !v7;
  os_unfair_lock_unlock(RecordLock);
  return v8;
}

uint64_t CalLocationGetCoordinates(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFNumber *Property;
  const os_unfair_lock *v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  const __CFNumber *v12;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFNumber *)CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  v8 = CPRecordGetProperty();
  if (Property)
    v9 = v8 == 0;
  else
    v9 = 1;
  v10 = v9 || a2 == 0;
  v11 = !v10;
  if (!v10)
  {
    v12 = (const __CFNumber *)v8;
    CFNumberGetValue(Property, kCFNumberDoubleType, (void *)a2);
    CFNumberGetValue(v12, kCFNumberDoubleType, (void *)(a2 + 8));
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v11;
}

void CalLocationSetReferenceFrame(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationCopyReferenceFrame(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalLocationHasKnownSpatialData(uint64_t a1)
{
  uint64_t result;

  if ((CalLocationHasCoordinates(a1) & 1) == 0)
  {
    result = CalLocationCopyMapKitHandle(a1);
    if (!result)
      return result;
    CFRelease((CFTypeRef)result);
  }
  return 1;
}

uint64_t CalLocationCopyMapKitHandle(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalLocationSetRadius(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationCopyRadius(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalLocationSetAddressBookEntityID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationCopyAddressBookEntityID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalLocationSetMapKitHandle(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalLocationSetDerivedFrom(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalLocationCopyDerivedFrom(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalLocationCopyOwner(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Owner;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalLocationGetOwner(a1);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalLocationGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyLocationWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalLocationGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalDatabaseCreateLocationSearchStatement(uint64_t a1, const __CFString *a2)
{
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v8;
  const os_unfair_lock *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  const os_unfair_lock *v12;
  sqlite3_stmt *v13;
  const char *CStringFromCFString;
  void (__cdecl *v15)(void *);
  sqlite3_stmt *v16;
  const char *v17;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 80));
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 32));
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_13;
  v8 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  if (!CPSqliteDatabaseRegisterMatchesSearchStringFunction())
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v8 + 104))
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
    v11 = CPSqliteDatabaseStatementForReading();
    v13 = *(sqlite3_stmt **)(v11 + 8);
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
    v15 = (void (__cdecl *)(void *))MEMORY[0x1E0C834A8];
    sqlite3_bind_text(v13, 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    v16 = *(sqlite3_stmt **)(v11 + 8);
    v17 = (const char *)CalCreateCStringFromCFString(a2);
    sqlite3_bind_text(v16, 2, v17, -1, v15);
  }
  else
  {
LABEL_13:
    v10 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 32) + 80);
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(a1 + 32) + 80));
    os_unfair_lock_unlock(v10);
    return 0;
  }
  return v11;
}

void CalDatabaseCopyLocationIdsThatMatchSearch(sqlite3_stmt **a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  BOOL v7;

  v4 = 1;
  while (1)
  {
    v5 = sqlite3_step(a1[1]);
    if (v5 != 100)
      break;
    v6 = sqlite3_column_int(a1[1], 0);
    if (v4 == 1 && CFArrayGetCount(*(CFArrayRef *)a2))
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)a2);
    CFArrayAppendValue(*(CFMutableArrayRef *)a2, (const void *)v6);
    if (**(_BYTE **)(a2 + 24))
      v7 = 1;
    else
      v7 = v4 == *(_DWORD *)(a2 + 8);
    ++v4;
    if (v7)
    {
      if (!**(_BYTE **)(a2 + 24))
        return;
      goto LABEL_15;
    }
  }
  if ((v5 - 102) > 0xFFFFFFFD || (sqlite3_errmsg(*((sqlite3 **)*a1 + 1)), CFLog(), **(_BYTE **)(a2 + 24)))
LABEL_15:
    **(_BYTE **)(a2 + 16) = 0;
}

void CalDatabaseDeleteLocationSearchStatement(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  os_unfair_lock_s *v5;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        v3 = **a1;
        if (v3)
        {
          if (*(_QWORD *)(v3 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  v5 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 32) + 80);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5);
  os_unfair_lock_unlock(v5);
}

CFTypeRef CalFilterCreateWithDatabaseShowingAll(uint64_t a1)
{
  EKCalendarFilter *v1;
  CFTypeRef v2;

  v1 = -[EKCalendarFilter initWithDatabase:]([EKCalendarFilter alloc], "initWithDatabase:", a1);
  v2 = CFRetain(v1);

  return v2;
}

CFTypeRef CalFilterCreateWithDatabaseShowingAllIncludingDisabledStores(uint64_t a1)
{
  EKCalendarFilter *v1;
  CFTypeRef v2;

  v1 = -[EKCalendarFilter initWithDatabase:]([EKCalendarFilter alloc], "initWithDatabase:", a1);
  -[EKCalendarFilter setIncludeDisabledStores:](v1, "setIncludeDisabledStores:", 1);
  v2 = CFRetain(v1);

  return v2;
}

CFTypeRef CalFilterCreateWithDatabaseAndEntityTypeShowingAll(uint64_t a1, uint64_t a2)
{
  EKCalendarFilter *v2;
  CFTypeRef v3;

  v2 = -[EKCalendarFilter initWithDatabase:entityType:]([EKCalendarFilter alloc], "initWithDatabase:entityType:", a1, a2);
  v3 = CFRetain(v2);

  return v3;
}

CFTypeRef CalFilterCreateWithDatabaseShowingCalendars(uint64_t a1, uint64_t a2)
{
  EKCalendarFilter *v2;
  CFTypeRef v3;

  v2 = -[EKCalendarFilter initWithDatabase:showingCalendars:]([EKCalendarFilter alloc], "initWithDatabase:showingCalendars:", a1, a2);
  v3 = CFRetain(v2);

  return v3;
}

CFTypeRef CalFilterCreateWithDatabaseFilteringCalendars(uint64_t a1, uint64_t a2, uint64_t a3)
{
  EKCalendarFilter *v3;
  CFTypeRef v4;

  v3 = -[EKCalendarFilter initWithDatabase:entityType:filteringCalendars:]([EKCalendarFilter alloc], "initWithDatabase:entityType:filteringCalendars:", a1, a2, a3);
  v4 = CFRetain(v3);

  return v4;
}

CFTypeRef CalFilterCreateWithDatabaseFilteringCalendarsWithUIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  EKCalendarFilter *v3;
  CFTypeRef v4;

  v3 = -[EKCalendarFilter initWithDatabase:entityType:filteringCalendarsWithUIDs:]([EKCalendarFilter alloc], "initWithDatabase:entityType:filteringCalendarsWithUIDs:", a1, a2, a3);
  v4 = CFRetain(v3);

  return v4;
}

CFTypeRef CalFilterCreateWithDatabaseFilteringAll(uint64_t a1)
{
  id v1;
  CFTypeRef v2;

  v1 = -[EKCalendarFilter initFilteringAllWithDatabase:]([EKCalendarFilter alloc], "initFilteringAllWithDatabase:", a1);
  v2 = CFRetain(v1);

  return v2;
}

void *CalFilterCopyVisibleCalendars(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a1, "visibleCalendarsWithOptions:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    CFRetain(v2);

  return v3;
}

void *_CalFilterCopyVisibleCalendars(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "_visibleCalendarsWithOptions:", 2);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
    CFRetain(v1);

  return v2;
}

uint64_t CalFilterGetVisibleCalendarCount(void *a1, const char *a2)
{
  return objc_msgSend(a1, "visibleCalendarCountWithOptions:", a2);
}

uint64_t CalFilterIsCalendarUIDVisible(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(a1, "isCalendarUIDVisible:", v3);

  return v4;
}

BOOL CalFilterIsSearchFilter(void *a1)
{
  void *v1;
  _BOOL8 v2;

  objc_msgSend(a1, "searchTerm");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "length") != 0;

  return v2;
}

void *CalFilterGetSearchTerm(void *a1)
{
  void *v1;
  void *v2;
  CFTypeRef v3;

  objc_msgSend(a1, "searchTerm");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    v3 = CFRetain(v1);
    CFAutorelease(v3);
  }

  return v2;
}

uint64_t CalFilterSetSearchTerm(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSearchTerm:", a2);
}

uint64_t CalFilterRemoveSearchInformation(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSearchTerm:", 0);
}

void *_CalFilterCopyQuery2(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;

  objc_msgSend(a1, "filterQueryForKey:prefix:whereClause:creator:userInfo:", a3, a5, a6, a4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
    CFRetain(v6);

  return v7;
}

void *CalFilterCopyFilteredCalendars(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "filteredCalendars");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
    CFRetain(v1);

  return v2;
}

uint64_t _CalNotificationPrepareForSave(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  const os_unfair_lock *v6;
  uint64_t result;
  const os_unfair_lock *v8;
  const __CFString *v9;
  const os_unfair_lock *v10;
  const __CFString *v11;
  const os_unfair_lock *v12;
  const __CFString *v13;
  const os_unfair_lock *v14;
  const __CFString *v15;
  const os_unfair_lock *v16;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    CalRelationOwnerWillSave(Property);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if ((_DWORD)result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8)
            os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
    v9 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    v11 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    v13 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14)
            os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
    result = CPRecordGetProperty();
    v15 = (const __CFString *)result;
    if (v9 && (result = CFStringGetLength(v9)) != 0
      || v11 && (result = CFStringGetLength(v11)) != 0
      || v13 && (result = CFStringGetLength(v13)) != 0)
    {
      if (!a2)
        return result;
    }
    else
    {
      if (!v15)
        return result;
      result = CFStringGetLength(v15);
      if (!a2 || !result)
        return result;
    }
    result = _CalIdentityGetID(v9, v11, v13, v15, a2);
    if ((_DWORD)result != -1)
    {
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t _CalNotificationPropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  const os_unfair_lock *Context;

  if (a2 == 1 && a3 == -1)
  {
    if (result && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return CPRecordGetProperty();
  }
  return result;
}

void CalNotificationInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalNotificationClass, (const char **)&kCalNotificationIndexes, (const char **)&kCalNotificationChangesIndexes);
  CalMigrationCreateTriggers(a2, (const char **)&kCalNotificationClass, (const char **)&kCalNotificationTriggers);
}

void CalNotificationMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  if (a3 > 77)
  {
    if (a3 <= 0x4651)
      CalMigrateTableFull(a2, (const char **)&kCalNotificationClass, 0, (const char **)&kCalNotificationUpgradeInfo, (const char **)&kCalNotificationChangesUpgradeInfo, (const char **)&kCalNotificationIndexes, (const char **)&kCalNotificationChangesIndexes, (const char **)&kCalNotificationTriggers, a3);
  }
  else
  {
    CalNotificationInitializeTables(a1, a2);
  }
}

uint64_t _CalNotificationGetEntityType(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  uint64_t v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  v3 = Property;
  if ((Property > 0x13 || ((1 << Property) & 0xB0000) == 0) && (_DWORD)Property != 102)
    CFLog();
  return v3;
}

uint64_t CalNotificationGetEntityType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

CFTypeRef _CalNotificationHasValidParent(uint64_t a1)
{
  CFTypeRef result;

  result = _CalResourceChangeGetNotification(a1);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

void _CalNotificationCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  int DeletionFlags;

  DeletionFlags = _CalDatabaseGetDeletionFlags(a1);
  if (((DeletionFlags | _CalDatabaseGetChangeFlags(a1)) & 2) != 0)
    CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Notification WHERE calendar_id NOT IN (SELECT ROWID FROM Calendar);"),
      0);
}

uint64_t _CalNotificationSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

CFMutableArrayRef _CalResourceChangeNotificationCopyRelatedEntitiesDeletedByTriggers(uint64_t a1, uint64_t a2)
{
  return _CalResourceChangeNotificationCopyChanges(a2);
}

CFMutableArrayRef _CalResourceChangeNotificationCopyChanges(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

const void *_CalDatabaseCreateNotification(uint64_t a1)
{
  return _CalCreateNotification(a1, 0x66u);
}

const void *_CalCreateNotification(uint64_t a1, unsigned int a2)
{
  const void *v4;
  const void *TemporaryRecordIDForEntity;
  BOOL v6;
  const os_unfair_lock *Context;
  BOOL v8;
  const os_unfair_lock *v9;
  BOOL v10;
  const os_unfair_lock *v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;
  const os_unfair_lock *v14;
  CFStringRef v15;
  const os_unfair_lock *v16;

  v4 = (const void *)CPRecordCreate();
  if ((a2 > 0x13 || ((1 << a2) & 0xB0000) == 0) && a2 != 102)
    _CalCreateNotification_cold_1();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, a2);
  if (CDBLockingAssertionsEnabled)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v10 = v4 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  if (a2 == 16)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (v4)
      {
        if (CPRecordGetStore())
        {
          v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14)
            os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
    CPRecordInitializeProperty();
  }
  v15 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled)
  {
    if (v4)
    {
      if (CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v15);
  _CalDatabaseAddEntity(a1, v4);
  return v4;
}

const void *CalDatabaseCreateNotification(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Notification;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Notification = _CalCreateNotification((uint64_t)a1, 0x66u);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Notification;
}

const void *_CalDatabaseCreateInviteReplyNotification(uint64_t a1)
{
  return _CalCreateNotification(a1, 0x10u);
}

const void *CalDatabaseCreateInviteReplyNotification(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Notification;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Notification = _CalCreateNotification((uint64_t)a1, 0x10u);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Notification;
}

const void *_CalDatabaseCreateSuggestionNotification(uint64_t a1)
{
  return _CalCreateNotification(a1, 0x13u);
}

const void *CalDatabaseCreateSuggestionNotification(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Notification;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Notification = _CalCreateNotification((uint64_t)a1, 0x13u);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Notification;
}

const void *CalDatabaseCopyNotificationWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalNotificationGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

const void *_CalDatabaseCreateResourceChangeNotification(uint64_t a1)
{
  return _CalCreateNotification(a1, 0x11u);
}

const void *CalDatabaseCreateResourceChangeNotification(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Notification;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Notification = _CalCreateNotification((uint64_t)a1, 0x11u);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Notification;
}

uint64_t _CalInvalidateNotificationsWithCalendarID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t _CalRemoveNotification(const void *a1)
{
  uint64_t result;
  uint64_t Context;
  uint64_t v4;
  const os_unfair_lock *v5;

  result = CPRecordGetStore();
  if (result)
  {
    Context = CPRecordStoreGetContext();
    if (Context)
    {
      v4 = Context;
      _CalDatabaseRemoveEntity(Context, a1);
      _CalDatabaseSetDeletionFlags(v4, 1024);
    }
    if (CDBLockingAssertionsEnabled)
    {
      v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5)
        os_unfair_lock_assert_owner(v5 + 20);
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

void CalRemoveNotification(const void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveNotification(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalNotificationGetUID(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  if ((CalEntityIsOfType(a1, 102) & 1) == 0)
    CalNotificationGetUID_cold_1();
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t CalNotificationGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  __CFString *v9;
  int v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  int v14;
  __CFString *v15;
  int v16;
  __CFString *v17;
  int v18;
  __CFString *v19;
  int v20;
  __CFString *v21;
  int v22;
  __CFString *v23;
  int v24;
  __CFString *v25;
  int v26;
  __CFString *v27;
  int v28;
  __CFString *v29;
  int v30;
  __CFString *v31;
  int v32;
  __CFString *v33;
  int v34;
  __CFString *v35;
  int v36;
  __CFString *v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalNotificationGetPropertyIDWithPropertyName_sPropDict;
  if (!CalNotificationGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalNotificationGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalNotificationGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("externalID");
      v6 = 3;
      v7 = CFSTR("UUID");
      v8 = 5;
      v9 = CFSTR("externalModificationTag");
      v10 = 4;
      v11 = CFSTR("calendar");
      v12 = 14;
      v13 = CFSTR("summary");
      v14 = 6;
      v15 = CFSTR("creationDate");
      v16 = 7;
      v17 = CFSTR("shareeStatus");
      v18 = 9;
      v19 = CFSTR("hostURL");
      v20 = 10;
      v21 = CFSTR("inReplyTo");
      v22 = 11;
      v23 = CFSTR("alerted");
      v24 = 13;
      v25 = CFSTR("inviteReplyCalendar");
      v26 = 15;
      v27 = CFSTR("resourceChanges");
      v28 = 18;
      v29 = CFSTR("lastModifiedDate");
      v30 = 8;
      v31 = CFSTR("shareeDisplayName");
      v32 = 19;
      v33 = CFSTR("shareeURLString");
      v34 = 20;
      v35 = CFSTR("shareeFirstName");
      v36 = 21;
      v37 = CFSTR("shareeLastName");
      v38 = 22;
      CalNotificationGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 17);
      for (i = 256; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalNotificationGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalNotificationGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5D6F500(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 256; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t _CalNotificationGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

uint64_t _CalNotificationGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalNotificationCopyUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalNotificationSetUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseCopyNotificationsWithCalendar(os_unfair_lock_s *a1, int a2)
{
  os_unfair_lock_s *v3;
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t v7;

  if (((a2 + 1) > 0x14 || ((1 << (a2 + 1)) & 0x160001) == 0) && a2 != 102)
    CalDatabaseCopyNotificationsWithCalendar_cold_1();
  v3 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v7 = CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3);
  os_unfair_lock_unlock(v3);
  return v7;
}

CFTypeRef CalDatabaseCopyNotificationWithExternalIDInCalendarOrStore(os_unfair_lock_s *a1, int a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  return CalDatabaseCopyEntityWithPropertyInCalendarOrStore(a1, a2, (uint64_t)CFSTR("external_id"), a3, a4, a5, (uint64_t)&kCalNotificationClass);
}

CFTypeRef CalDatabaseCopyNotificationWithUniqueIdentifierInCalendarOrStore(os_unfair_lock_s *a1, int a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  return CalDatabaseCopyEntityWithPropertyInCalendarOrStore(a1, a2, (uint64_t)CFSTR("UUID"), a3, a4, a5, (uint64_t)&kCalNotificationClass);
}

void CalNotificationSetExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalNotificationCopyExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalNotificationSetExternalModTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalNotificationCopyExternalModTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalNotificationSetSummary(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalNotificationCopySummary(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void _CalNotificationSetCreationDate(uint64_t a1, CFAbsoluteTime a2)
{
  _CalRecordSetDateProperty(a1, 7, a2);
}

void CalNotificationSetCreationDate(uint64_t a1, CFAbsoluteTime a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 7, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

double CalNotificationGetCreationDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void _CalNotificationSetLastModifiedDate(uint64_t a1, CFAbsoluteTime a2)
{
  _CalRecordSetDateProperty(a1, 8, a2);
}

void CalNotificationSetLastModifiedDate(uint64_t a1, CFAbsoluteTime a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetDateProperty(a1, 8, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

double CalNotificationGetLastModifiedDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  double DateProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DateProperty = _CalRecordGetDateProperty(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return DateProperty;
}

void CalNotificationSetHostURL(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    CFURLGetString(a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalNotificationCopyHostURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *v4;
  const __CFString *v5;
  CFURLRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (const __CFString *)CPRecordCopyProperty();
  if (v4)
  {
    v5 = v4;
    v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

CFTypeRef CalNotificationCopyOwner(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef v3;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalResourceChangeGetNotification(a1);
  v4 = v3;
  if (v3)
    CFRetain(v3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

_QWORD *_CalNotificationSetOwner(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

void CalNotificationSetOwner(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalNotificationSetOwner(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalNotificationSetAlerted(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalNotificationSetAlerted(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalNotificationSetAlerted(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalNotificationIsAlerted(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  int Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

uint64_t CalDatabaseCopyNotificationChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7 = _CalDatabaseCopyNotificationChangesInStore((uint64_t)a1, a2, 0xFFFFFFFFLL, a3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  return v7;
}

uint64_t _CalDatabaseCopyNotificationChangesInStore(uint64_t a1, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  const void *v6;
  CFStringRef v7;
  uint64_t v8;

  v6 = (const void *)a1;
  v7 = _CalNotificationCreateChangeHistoryWhereClauseForStore(a1, a2, a3);
  if (a2)
  {
    v6 = CalCopyDatabaseForRecord();
  }
  else if (v6)
  {
    CFRetain(v6);
  }
  v8 = _CalDatabaseCopyNotificationChangesWithWhereClause((uint64_t)v6, (uint64_t)v7, a4);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  return v8;
}

uint64_t CalDatabaseRemoveNotificationChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveNotificationChangesInStoreToIndex_block_invoke;
  v9[3] = &unk_1E4F84BF0;
  v9[4] = &v11;
  v9[5] = a1;
  v9[6] = a2;
  v10 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v9);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A5D7032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalDatabaseRemoveNotificationChangesInStoreToIndex(const void *a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  CFStringRef v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;
  uint64_t v10;

  if (a3)
  {
    v5 = CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  v6 = _CalNotificationCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a3, a2);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)v5);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v10 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v6)
    CFRelease(v6);
  CFRelease(v5);
  return v10;
}

uint64_t CalDatabaseCopyNotificationChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7 = _CalDatabaseCopyNotificationChangesInCalendar(a1, a2, 0xFFFFFFFFLL, a3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  return v7;
}

uint64_t _CalDatabaseCopyNotificationChangesInCalendar(CFTypeRef cf, uint64_t a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  CFTypeRef v7;
  CFStringRef v8;
  uint64_t v9;

  if (a2)
  {
    v7 = CalCopyDatabaseForRecord();
  }
  else
  {
    v7 = cf;
    if (cf)
      CFRetain(cf);
  }
  v8 = _CalNotificationCreateChangeHistoryWhereClauseForCalendar((uint64_t)v7, a2, a3);
  v9 = _CalDatabaseCopyNotificationChangesWithWhereClause((uint64_t)v7, (uint64_t)v8, a4);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  return v9;
}

uint64_t CalDatabaseRemoveNotificationChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v5 = _CalDatabaseRemoveNotificationChangesInCalendarToIndex(a1, 0xFFFFFFFFLL, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t _CalDatabaseRemoveNotificationChangesInCalendarToIndex(const void *a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  CFStringRef v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;
  uint64_t v10;

  if (a3)
  {
    v5 = CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  v6 = _CalNotificationCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a3, a2);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)v5);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v10 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v6)
    CFRelease(v6);
  CFRelease(v5);
  return v10;
}

uint64_t CalDatabaseCopyInviteReplyNotificationChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;

  if (!a1)
    return 0;
  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7 = _CalDatabaseCopyNotificationChangesInStore((uint64_t)a1, a2, 16, a3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  return v7;
}

uint64_t CalDatabaseRemoveInviteReplyNotificationChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveInviteReplyNotificationChangesInStoreToIndex_block_invoke;
  v9[3] = &unk_1E4F84BF0;
  v9[4] = &v11;
  v9[5] = a1;
  v9[6] = a2;
  v10 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v9);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A5D707E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyInviteReplyNotificationChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v6;
  uint64_t v7;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7 = _CalDatabaseCopyNotificationChangesInCalendar(a1, a2, 16, a3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  return v7;
}

uint64_t CalDatabaseRemoveInviteReplyNotificationChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v5 = _CalDatabaseRemoveNotificationChangesInCalendarToIndex(a1, 16, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v5;
}

CFTypeRef CalDatabaseCopyInviteReplyNotificationWithUUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  const __CFArray *v6;
  const __CFArray *v7;
  const void *ValueAtIndex;
  CFTypeRef v9;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v6 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (v6)
  {
    v7 = v6;
    if (CFArrayGetCount(v6) < 1)
    {
      v9 = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
      v9 = CFRetain(ValueAtIndex);
    }
    CFRelease(v7);
  }
  else
  {
    v9 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v9;
}

uint64_t CalDatabaseCopyOfAllInviteReplyNotificationsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t RecordStore;
  BOOL v6;
  int v7;
  const os_unfair_lock *Context;
  const os_unfair_lock *v9;
  uint64_t v10;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v6 = RecordStore == 0;
  else
    v6 = 1;
  v7 = !v6;
  if (a2)
  {
    if (v7)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  else if (v7)
  {
    v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v9)
      os_unfair_lock_assert_owner(v9 + 20);
  }
  v10 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v10;
}

CFTypeRef CalInviteReplyNotificationCopyInviteReplyCalendar(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;
  CFTypeRef RelatedObject;
  CFTypeRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
  {
    RelatedObject = CalRelationGetRelatedObject(Property);
    v6 = RelatedObject;
    if (RelatedObject)
      CFRetain(RelatedObject);
  }
  else
  {
    v6 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

void CalInviteReplyNotificationSetInviteReplyCalendar(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalRelationSetRelatedObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalInviteReplyNotificationSetStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalInviteReplyNotificationGetStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalInviteReplyNotificationSetHostURL(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    CFURLGetString(a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalInviteReplyNotificationCopyHostURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *v4;
  CFURLRef result;
  CFURLRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (const __CFString *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  result = 0;
  if (v4)
  {
    v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

void CalInviteReplyNotificationSetInReplyTo(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalInviteReplyNotificationCopyInReplyTo(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalInviteReplyNotificationSetShareeDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalInviteReplyNotificationCopyShareeDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalInviteReplyNotificationSetShareeAddress(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a2)
    CFURLGetString(a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalInviteReplyNotificationCopyShareeAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *Property;
  CFURLRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFString *)CPRecordGetProperty();
  if (Property)
    v5 = CFURLCreateWithString(0, Property, 0);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalInviteReplyNotificationSetShareeFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalInviteReplyNotificationCopyShareeFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalInviteReplyNotificationSetShareeLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalInviteReplyNotificationCopyShareeLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

const __CFArray *_CalResourceChangeNotificationAddChange(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

void CalResourceChangeNotificationAddChange(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeNotificationAddChange(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

_QWORD *_CalResourceChangeNotificationRemoveChange(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

void CalResourceChangeNotificationRemoveChange(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeNotificationRemoveChange(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void _CalResourceChangeNotificationRemoveAllChanges(uint64_t a1)
{
  const os_unfair_lock *Context;
  _QWORD *Property;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalToManyRelationRemoveAllObjects(Property);
}

void CalResourceChangeNotificationRemoveAllChanges(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalResourceChangeNotificationRemoveAllChanges(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalResourceChangeNotificationCopyChanges(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalResourceChangeNotificationCopyChanges(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalDatabaseInsertSuggestionNotificationOnCalendarItemWithTypeAndChanges(uint64_t a1, const void *a2)
{
  void *v4;
  void *v5;
  CFAbsoluteTime Current;
  CFDateRef v7;
  CFTypeRef Calendar;
  const void *Notification;
  uint64_t v10;

  v4 = (void *)_CalCreateResourceChangeOfType(a1);
  if (!v4)
    return 0;
  v5 = v4;
  Current = CFAbsoluteTimeGetCurrent();
  v7 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Current);
  Calendar = _CalCalendarItemGetCalendar((uint64_t)a2);
  _CalResourceChangeSetCalendarItem((uint64_t)v5, a2);
  _CalResourceChangeSetCalendar((uint64_t)v5, Calendar);
  _CalErrorSetUserInfo((uint64_t)v5);
  _CalResourceChangeSetChangedProperties((uint64_t)v5);
  _CalResourceChangeSetAlerted((uint64_t)v5);
  Notification = _CalCreateNotification(a1, 0x13u);
  v10 = (uint64_t)Notification;
  if (Notification)
  {
    _CalRecordSetDateProperty((uint64_t)Notification, 7, Current);
    _CalRecordSetDateProperty(v10, 8, Current);
    _CalNotificationSetOwner(v10, Calendar);
    _CalNotificationSetAlerted(v10);
    _CalResourceChangeNotificationAddChange(v10, v5);
  }
  if (v7)
    CFRelease(v7);
  CFRelease(v5);
  return v10;
}

uint64_t _CalNotificationLoadStoreId(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;
  const os_unfair_lock *v4;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if ((_DWORD)result != -1)
  {
    result = CPRecordGetStore();
    if (result)
    {
      result = _CalGetCalendarWithUID(result);
      if (result)
      {
        result = _CalCalendarGetStoreId(result);
        if ((_DWORD)result != -1)
        {
          if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
          {
            v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v4)
              os_unfair_lock_assert_owner(v4 + 20);
          }
          return CPRecordInitializeProperty();
        }
      }
    }
  }
  return result;
}

void _CalNotificationLoadIdentityProperties(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Store;
  uint64_t IdentityWithRowID;
  uint64_t v5;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  const void *v10;
  const os_unfair_lock *v11;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    Store = CPRecordGetStore();
    IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      v9 = _CalIdentityCopyAddress(v5);
      if (v9)
      {
        v10 = (const void *)v9;
        if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
        {
          v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v11)
            os_unfair_lock_assert_owner(v11 + 20);
        }
        CPRecordInitializeProperty();
        CFRelease(v10);
      }
    }
  }
}

CFStringRef _CalNotificationCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v5;
  uint64_t ID;
  const __CFAllocator *v7;
  CFStringRef v8;
  CFStringRef v10;

  v10 = 0;
  if (a2)
  {
    v5 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if ((a3 & 0x80000000) != 0)
      v8 = CFStringCreateWithFormat(v7, 0, CFSTR("store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class IN (%d, %d, %d) AND client_identifier = '%@')"), ID, v5, v5, 16, 17, 19, v5);
    else
      v8 = CFStringCreateWithFormat(v7, 0, CFSTR("entity_type = %d  AND store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), a3, ID, v5, v5, a3, v5);
    v10 = v8;
    CFRelease(v5);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v10);
  return v10;
}

uint64_t _CalDatabaseCopyNotificationChangesWithWhereClause(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

CFStringRef _CalNotificationCreateChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v5;
  uint64_t ID;
  const __CFAllocator *v7;
  CFStringRef v8;
  CFStringRef v10;

  v10 = 0;
  if (a2)
  {
    v5 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if ((a3 & 0x80000000) != 0)
      v8 = CFStringCreateWithFormat(v7, 0, CFSTR("calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class IN (%d, %d) AND client_identifier = '%@')"), ID, v5, v5, 16, 17, v5);
    else
      v8 = CFStringCreateWithFormat(v7, 0, CFSTR("entity_type = %d  AND calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), a3, ID, v5, v5, a3, v5);
    v10 = v8;
    CFRelease(v5);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v10);
  return v10;
}

double CalculateAlarmFireDate(uint64_t a1, uint64_t a2, double a3)
{
  double v3;
  void *v7;
  void *v8;
  int v9;
  unint64_t v10;
  _BOOL4 v11;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  double v20;
  double v21;

  v3 = 0.0;
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
    return v3;
  if ((unint64_t)(a2 + 53999) < 0x1517F)
    return a3 - (double)a1 + (double)a2;
  v7 = (void *)objc_opt_new();
  v8 = v7;
  if (a2 < 0)
    v9 = -1;
  else
    v9 = 1;
  if (a2 >= 0)
    v10 = a2;
  else
    v10 = -a2;
  if (v10 > 0x1517F)
  {
    objc_msgSend(v7, "setDay:", v10 / 0x15180 * v9);
    v10 %= 0x15180uLL;
  }
  if (a2 < 0 && v10 == 54000)
  {
    v11 = 1;
  }
  else
  {
    v11 = v10 == 32400 && a2 >= 0;
    if ((uint64_t)v10 <= 3599)
    {
      v13 = v9;
      goto LABEL_24;
    }
  }
  v13 = v9;
  objc_msgSend(v8, "setHour:", v10 / 0xE10 * v9);
  v10 %= 0xE10uLL;
LABEL_24:
  objc_msgSend(v8, "setSecond:", v10 * v13);
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  CalCopyCalendar();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "dateByAddingComponents:toDate:options:", v8, v14, 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    objc_msgSend(v15, "components:fromDate:", 254, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v17, "setHour:", 9);
    objc_msgSend(v15, "dateFromComponents:", v17);
    v18 = objc_claimAutoreleasedReturnValue();

    v8 = v17;
    v16 = (void *)v18;
  }
  if (a1)
  {
    objc_msgSend(v16, "dateByAddingTimeInterval:", (double)-a1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "timeIntervalSinceReferenceDate");
    v3 = v20;

  }
  else
  {
    objc_msgSend(v16, "timeIntervalSinceReferenceDate");
    v3 = v21;
  }

  return v3;
}

double CalEventOccurrenceCacheGetLongAlarmIntervals(_QWORD *a1, _QWORD *a2)
{
  double result;

  if (CalEventOccurrenceCacheGetLongAlarmIntervals_onceToken == -1)
  {
    if (!a1)
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&CalEventOccurrenceCacheGetLongAlarmIntervals_onceToken, &__block_literal_global_23);
  if (a1)
  {
LABEL_3:
    result = *(double *)&CalEventOccurrenceCacheGetLongAlarmIntervals_longNegativeInterval;
    *a1 = CalEventOccurrenceCacheGetLongAlarmIntervals_longNegativeInterval;
  }
LABEL_4:
  if (a2)
  {
    result = *(double *)&CalEventOccurrenceCacheGetLongAlarmIntervals_longPositiveInterval;
    *a2 = CalEventOccurrenceCacheGetLongAlarmIntervals_longPositiveInterval;
  }
  return result;
}

void sub_1A5D72544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_s0_s8_s16_s24_s32(&a9);
  _Unwind_Resume(a1);
}

void CalEventOccurrenceCacheGetIdealRangeInfo(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a1;
  CalCopyCalendar();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "CalSimulatedDateForNow");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "startOfDayForDate:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  objc_msgSend(v3, "timeZone");
  *(_QWORD *)a2 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_opt_new();
  objc_msgSend(v6, "setYear:", -2);
  objc_msgSend(v3, "dateByAddingComponents:toDate:options:", v6, v5, 0);
  *(_QWORD *)(a2 + 8) = objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_opt_new();
  objc_msgSend(v7, "setYear:", 2);
  objc_msgSend(v3, "dateByAddingComponents:toDate:options:", v7, v5, 0);
  *(_QWORD *)(a2 + 16) = objc_claimAutoreleasedReturnValue();

  v8 = (void *)objc_opt_new();
  objc_msgSend(v8, "setDay:", -1);
  objc_msgSend(v3, "dateByAddingComponents:toDate:options:", v8, v5, 0);
  *(_QWORD *)(a2 + 24) = objc_claimAutoreleasedReturnValue();

  v9 = (void *)objc_opt_new();
  objc_msgSend(v9, "setDay:", 15);
  objc_msgSend(v3, "dateByAddingComponents:toDate:options:", v9, v5, 0);
  *(_QWORD *)(a2 + 32) = objc_claimAutoreleasedReturnValue();

  *(_QWORD *)(a2 + 40) = CalAlarmGetGlobalDefaultTimedAlarmOffset(v10);
  *(_QWORD *)(a2 + 48) = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v10);

}

void sub_1A5D726E0(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s0_s8_s16_s24_s32(v1);
  _Unwind_Resume(a1);
}

void __destructor_8_s0_s8_s16_s24_s32(id *a1)
{

}

void CalEventOccurrenceCacheGetIdealRangeAndTimeZone(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  void *v6;
  id v7[2];
  id v8[2];
  __int128 v9;
  uint64_t v10;

  v10 = 0;
  *(_OWORD *)v8 = 0u;
  v9 = 0u;
  *(_OWORD *)v7 = 0u;
  +[CDBPreferences shared](CDBPreferences, "shared");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  CalEventOccurrenceCacheGetIdealRangeInfo(v6, (uint64_t)v7);

  if (a1)
    *a1 = objc_retainAutorelease(v7[1]);
  if (a2)
    *a2 = objc_retainAutorelease(v8[0]);
  if (a3)
    *a3 = objc_retainAutorelease(v7[0]);
  __destructor_8_s0_s8_s16_s24_s32(v7);
}

void _CalAlarmCacheGetCacheRange(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _CalEventOccurrenceCacheLoadInfo(a1);
  if (a2)
    *a2 = objc_retainAutorelease(*(id *)(a1 + 56));
  if (a3)
    *a3 = objc_retainAutorelease(*(id *)(a1 + 64));
}

void CalEventOccurrenceCacheTrimExtendAndUpdate(uint64_t a1, char a2)
{
  NSObject *v4;
  void *v5;
  double v6;
  double v7;
  uint64_t RecordStore;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v11;
  sqlite3 **v12;
  double v13;
  char v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  int v19;
  NSObject *v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  NSObject *v29;
  const os_unfair_lock *v30;
  NSObject *v31;
  CFAbsoluteTime Current;
  NSObject *v33;
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v35;
  NSObject *v36;
  double v37;
  NSObject *v38;
  const os_unfair_lock *v39;
  const os_unfair_lock *v40;
  uint64_t v41;
  uint64_t **v42;
  sqlite3_stmt *v43;
  double v44;
  uint64_t v45;
  const os_unfair_lock *v46;
  int v47;
  _BOOL4 v48;
  uint64_t v49;
  const os_unfair_lock *v50;
  int OccurrencesInDateRange;
  double v52;
  NSObject *v53;
  const os_unfair_lock *v54;
  const os_unfair_lock *v55;
  uint64_t v56;
  uint64_t **v57;
  sqlite3_stmt *v58;
  double v59;
  uint64_t v60;
  const os_unfair_lock *v61;
  _BOOL4 v62;
  uint64_t v63;
  const os_unfair_lock *v64;
  void *v65;
  void *v66;
  id v67[2];
  void *v68;
  void *v69;
  id v70;
  id v71;
  void *v72;
  id v73;
  void *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  id v83[7];
  uint8_t buf[4];
  CFAbsoluteTime v85;
  __int16 v86;
  void *v87;
  __int16 v88;
  void *v89;
  __int16 v90;
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v4 = (id)CDBLogHandle;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_DEBUG, "Occurrence cache trim and extend requested.", buf, 2u);
  }

  if (!*(_BYTE *)(a1 + 16) || !CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
    return;
  objc_msgSend(MEMORY[0x1E0C99D68], "CalSimulatedDateForNow");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  v7 = v6;

  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
    v12 = (sqlite3 **)CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (v12)
    {
      if (!__CalDatabaseBeginWriteTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1393"))
      {
        v20 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A5CCB000, v20, OS_LOG_TYPE_ERROR, "EventKitOC: Unable to start transaction. Aborting trim/extend.", buf, 2u);
        }
        v21 = 0;
        v19 = 0;
LABEL_44:
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            if (*((_QWORD *)*v12 + 13))
            {
              v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v30)
                os_unfair_lock_assert_owner(v30 + 20);
            }
          }
        }
        CPSqliteDatabaseReleaseSqliteConnection();
        if (v21)
        {
          v31 = (id)CDBLogHandle;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          {
            Current = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)buf = 134217984;
            v85 = Current - v7;
            _os_log_impl(&dword_1A5CCB000, v31, OS_LOG_TYPE_DEBUG, "Trim and extend complete in %f", buf, 0xCu);
          }

          CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
          if (!v19)
            return;
LABEL_57:
          DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
          CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kCalEventOccurrenceCacheChangedNotification"), *(const void **)(a1 + 24), 0, 1u);
          return;
        }
        goto LABEL_54;
      }
      v82 = 0;
      v80 = 0u;
      v81 = 0u;
      v79 = 0u;
      CalEventOccurrenceCacheGetIdealRangeInfo(*(void **)(*(_QWORD *)(a1 + 24) + 296), (uint64_t)&v79);
      _CalEventOccurrenceCacheLoadInfo(a1);
      v78 = 0;
      v76 = 0u;
      v77 = 0u;
      v75 = 0u;
      *(_QWORD *)&v13 = __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)&v75, a1 + 32).n128_u64[0];
      v14 = objc_msgSend((id)v79, "isEqual:", (_QWORD)v75, v13);
      if ((v14 & 1) == 0)
      {
        v15 = (id)CDBLogHandle;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138543618;
          v85 = *(double *)&v75;
          v86 = 2114;
          v87 = (void *)v79;
          _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_INFO, "Time zone changed during trim and extend. (was \"%{public}@\", now \"%{public}@\") Will do a full rebuild instead.", buf, 0x16u);
        }

      }
      if (objc_msgSend(*((id *)&v79 + 1), "isBeforeDate:", *((_QWORD *)&v75 + 1)))
      {
        v16 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138543618;
          v85 = *((double *)&v75 + 1);
          v86 = 2114;
          v87 = (void *)*((_QWORD *)&v79 + 1);
          _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_INFO, "Occurrence cache start moved backwards (from %{public}@ to %{public}@) during trim and extend. Will do a full rebuild instead.", buf, 0x16u);
        }
      }
      else if ((v14 & 1) != 0)
      {
        if ((a2 & 1) == 0)
        {
          objc_msgSend(*((id *)&v75 + 1), "timeIntervalSinceReferenceDate");
          v23 = v22;
          objc_msgSend(*((id *)&v79 + 1), "timeIntervalSinceReferenceDate");
          v25 = v24;
          objc_msgSend((id)v76, "timeIntervalSinceReferenceDate");
          v27 = v26;
          objc_msgSend((id)v80, "timeIntervalSinceReferenceDate");
          if (vabdd_f64(v23, v25) <= 216000.0 && vabdd_f64(v27, v28) <= 216000.0)
          {
            if (v23 - v25 < 0.0 || v23 - v25 > 0.0 || (v19 = 0, v21 = 0, v27 - v28 != 0.0))
            {
              v29 = CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138544130;
                v85 = *((double *)&v75 + 1);
                v86 = 2114;
                v87 = (void *)*((_QWORD *)&v79 + 1);
                v88 = 2114;
                v89 = (void *)v76;
                v90 = 2114;
                v91 = v80;
                _os_log_impl(&dword_1A5CCB000, v29, OS_LOG_TYPE_INFO, "Deferring occurrence cache update because the occurrence cache isn't that far out of date yet. (start was %{public}@ and should be %{public}@; end was %{public}@ and should be %{public}@)",
                  buf,
                  0x2Au);
              }
              v19 = 0;
              v21 = 0;
            }
            goto LABEL_43;
          }
          v35 = (id)CDBLogHandle;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138544130;
            v85 = *((double *)&v75 + 1);
            v86 = 2114;
            v87 = (void *)*((_QWORD *)&v79 + 1);
            v88 = 2114;
            v89 = (void *)v76;
            v90 = 2114;
            v91 = v80;
            _os_log_impl(&dword_1A5CCB000, v35, OS_LOG_TYPE_INFO, "The occurrence cache has drifted too far out of date. Trimming and extending NOW. (start was %{public}@ and should be %{public}@; end was %{public}@ and should be %{public}@)",
              buf,
              0x2Au);
          }

        }
        __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)&v70, (uint64_t)&v79);
        __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v67, (uint64_t)&v75);
        v36 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412802;
          v85 = *(double *)&v71;
          v86 = 2112;
          v87 = v68;
          v88 = 2112;
          v89 = v72;
          _os_log_impl(&dword_1A5CCB000, v36, OS_LOG_TYPE_DEBUG, "Preparing to trim and extend the occurrence cache.  newStartDate: [%@] oldEndDate: [%@] newEndDate: [%@]", buf, 0x20u);
        }
        v37 = COERCE_DOUBLE(v71);
        v38 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v85 = v37;
          _os_log_impl(&dword_1A5CCB000, v38, OS_LOG_TYPE_DEBUG, "Removing occurrences in the occurrence cache before [%@]", buf, 0xCu);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            if (*((_QWORD *)*v12 + 13))
            {
              v39 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v39)
                os_unfair_lock_assert_owner(v39 + 20);
            }
          }
        }
        if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF)
          NSLog(CFSTR("EventKitOC: *** ERROR *** No transaction is in effect! This may end poorly."));
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            if (*((_QWORD *)*v12 + 13))
            {
              v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v40)
                os_unfair_lock_assert_owner(v40 + 20);
            }
          }
        }
        v41 = CPSqliteConnectionStatementForSQL();
        v42 = (uint64_t **)v41;
        if (v41)
        {
          v43 = *(sqlite3_stmt **)(v41 + 8);
          objc_msgSend(*(id *)&v37, "timeIntervalSinceReferenceDate");
          sqlite3_bind_double(v43, 1, v44);
          if (CDBLockingAssertionsEnabled)
          {
            if (*v42)
            {
              v45 = **v42;
              if (v45)
              {
                if (*(_QWORD *)(v45 + 104))
                {
                  v46 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v46)
                    os_unfair_lock_assert_owner(v46 + 20);
                }
              }
            }
          }
          CPSqliteStatementPerform();
          v47 = sqlite3_changes((sqlite3 *)(*v42)[1]);
          v48 = v47 > 0;
          if (v47 >= 1)
            CalPerformSQLWithConnection(v12, (uint64_t)CFSTR("DELETE FROM OccurrenceCacheDays WHERE count = 0;"));
          if (CDBLockingAssertionsEnabled)
          {
            if (*v42)
            {
              v49 = **v42;
              if (v49)
              {
                if (*(_QWORD *)(v49 + 104))
                {
                  v50 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v50)
                    os_unfair_lock_assert_owner(v50 + 20);
                }
              }
            }
          }
          CPSqliteStatementReset();
        }
        else
        {
          v48 = 0;
        }

        OccurrencesInDateRange = _CalEventOccurrenceCacheGenerateOccurrencesInDateRange(a1, (uint64_t)v12, v68, v72, v69, v74);
        v52 = COERCE_DOUBLE(v73);
        v53 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v85 = v52;
          _os_log_impl(&dword_1A5CCB000, v53, OS_LOG_TYPE_DEBUG, "Removing alarms in the alarm cache before [%{public}@]", buf, 0xCu);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            if (*((_QWORD *)*v12 + 13))
            {
              v54 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v54)
                os_unfair_lock_assert_owner(v54 + 20);
            }
          }
        }
        if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF)
          NSLog(CFSTR("EventKitOC: *** ERROR *** No transaction is in effect! This may end poorly."));
        if (CDBLockingAssertionsEnabled)
        {
          if (*v12)
          {
            if (*((_QWORD *)*v12 + 13))
            {
              v55 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v55)
                os_unfair_lock_assert_owner(v55 + 20);
            }
          }
        }
        v56 = CPSqliteConnectionStatementForSQL();
        v57 = (uint64_t **)v56;
        if (v56)
        {
          v58 = *(sqlite3_stmt **)(v56 + 8);
          objc_msgSend(*(id *)&v52, "timeIntervalSinceReferenceDate");
          sqlite3_bind_double(v58, 1, v59);
          if (CDBLockingAssertionsEnabled)
          {
            if (*v57)
            {
              v60 = **v57;
              if (v60)
              {
                if (*(_QWORD *)(v60 + 104))
                {
                  v61 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v61)
                    os_unfair_lock_assert_owner(v61 + 20);
                }
              }
            }
          }
          CPSqliteStatementPerform();
          v62 = sqlite3_changes((sqlite3 *)(*v57)[1]) > 0;
          if (CDBLockingAssertionsEnabled)
          {
            if (*v57)
            {
              v63 = **v57;
              if (v63)
              {
                if (*(_QWORD *)(v63 + 104))
                {
                  v64 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v64)
                    os_unfair_lock_assert_owner(v64 + 20);
                }
              }
            }
          }
          CPSqliteStatementReset();
        }
        else
        {
          v62 = 0;
        }

        v65 = v69;
        v66 = v74;
        __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)buf, (uint64_t)&v70);
        LODWORD(v65) = _CalAlarmCacheGenerateAlarmsInDateRange(a1, v12, v65, v66, (id *)buf);
        __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v83, (uint64_t)&v70);
        _CalEventOccurrenceCacheSetRangeInfo(a1, v83);
        v21 = v48 | OccurrencesInDateRange | v62 | v65;
        __destructor_8_s0_s8_s16_s24_s32(v67);
        __destructor_8_s0_s8_s16_s24_s32(&v70);
        v19 = 0;
        goto LABEL_43;
      }
      _RebuildCache_0(a1, v12);
      v19 = 1;
      v21 = 1;
LABEL_43:
      __CalDatabaseCommitTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1436");
      __destructor_8_s0_s8_s16_s24_s32((id *)&v75);
      __destructor_8_s0_s8_s16_s24_s32((id *)&v79);
      goto LABEL_44;
    }
    v17 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v18 = "Could not open a connection to the database.  Will not trim and extend the occurrence cache.";
      goto LABEL_27;
    }
  }
  else
  {
    v17 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v18 = "Could not acquire a database object.  Will not trim and extend the occurrence cache.";
LABEL_27:
      _os_log_impl(&dword_1A5CCB000, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
    }
  }
  LOBYTE(v19) = 0;
LABEL_54:
  v33 = (id)CDBLogHandle;
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v33, OS_LOG_TYPE_DEBUG, "Trim and extend not needed", buf, 2u);
  }

  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  if ((v19 & 1) != 0)
    goto LABEL_57;
}

void sub_1A5D73264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  __destructor_8_s0_s8_s16_s24_s32(&a23);
  __destructor_8_s0_s8_s16_s24_s32(&a31);
  _Unwind_Resume(a1);
}

__n128 __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a1 = *(id *)a2;
  *(_QWORD *)(a1 + 8) = *(id *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(id *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void _RebuildCache_0(uint64_t a1, sqlite3 **a2)
{
  NSObject *v4;
  const os_unfair_lock *Context;
  NSObject *v6;
  const os_unfair_lock *v7;
  NSObject *v8;
  const os_unfair_lock *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13[7];
  id v14[7];
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint8_t v19[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v4, OS_LOG_TYPE_DEBUG, "Deleting all data from the 'OccurrenceCache' table.", buf, 2u);
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*a2)
    {
      if (*((_QWORD *)*a2 + 13))
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPSqliteConnectionPerformSQL();
  v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_DEBUG, "Deleting all data from the 'OccurrenceCacheDays' table.", buf, 2u);
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*a2)
    {
      if (*((_QWORD *)*a2 + 13))
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPSqliteConnectionPerformSQL();
  v8 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v8, OS_LOG_TYPE_DEBUG, "Deleting all data from the 'AlarmCache' table.", buf, 2u);
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*a2)
    {
      if (*((_QWORD *)*a2 + 13))
      {
        v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9)
          os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPSqliteConnectionPerformSQL();
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)buf = 0u;
  CalEventOccurrenceCacheGetIdealRangeInfo(*(void **)(*(_QWORD *)(a1 + 24) + 296), (uint64_t)buf);
  v10 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v19 = 138412546;
    v20 = *(_QWORD *)&buf[8];
    v21 = 2112;
    v22 = v16;
    _os_log_impl(&dword_1A5CCB000, v10, OS_LOG_TYPE_INFO, "Acquired occurrence cache range.  Start date: [%@].  End date: [%@]", v19, 0x16u);
  }
  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v14, (uint64_t)buf);
  _CalEventOccurrenceCacheSetRangeInfo(a1, v14);
  _CalEventOccurrenceCacheGenerateOccurrencesInDateRange(a1, (uint64_t)a2, *(void **)&buf[8], (void *)v16, *((void **)&v16 + 1), (void *)v17);
  v11 = (void *)*((_QWORD *)&v16 + 1);
  v12 = (void *)v17;
  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v13, (uint64_t)buf);
  _CalAlarmCacheGenerateAlarmsInDateRange(a1, a2, v11, v12, v13);
  __destructor_8_s0_s8_s16_s24_s32((id *)buf);
}

void sub_1A5D735BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  __destructor_8_s0_s8_s16_s24_s32((id *)va);
  _Unwind_Resume(a1);
}

void CalEventOccurrenceCacheCleanOrphans(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v6;
  uint64_t v7;
  uint64_t v8;
  const os_unfair_lock *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  const os_unfair_lock *v13;
  int v14;
  uint64_t v15;
  const os_unfair_lock *v16;
  uint64_t v17;
  const os_unfair_lock *v18;
  const os_unfair_lock *v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 16) && CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
  {
    RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
    if (CDBLockingAssertionsEnabled)
      v3 = RecordStore == 0;
    else
      v3 = 1;
    if (!v3)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v6)
            os_unfair_lock_assert_owner(v6 + 20);
        }
      }
      v7 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v7)
      {
        v8 = v7;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v7)
          {
            if (*(_QWORD *)(*(_QWORD *)v7 + 104))
            {
              v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v9)
                os_unfair_lock_assert_owner(v9 + 20);
            }
          }
        }
        v10 = (uint64_t **)CPSqliteConnectionStatementForSQL();
        if (v10)
        {
          v11 = v10;
          if (CDBLockingAssertionsEnabled)
          {
            if (*v10)
            {
              v12 = **v10;
              if (v12)
              {
                if (*(_QWORD *)(v12 + 104))
                {
                  v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v13)
                    os_unfair_lock_assert_owner(v13 + 20);
                }
              }
            }
          }
          v14 = CPSqliteStatementIntegerResult();
          if (v14)
            NSLog(CFSTR("EventKitOC: *** INTEGRITY FAILURE *** There were orphaned entries in the cache"));
          if (CDBLockingAssertionsEnabled)
          {
            if (*v11)
            {
              v15 = **v11;
              if (v15)
              {
                if (*(_QWORD *)(v15 + 104))
                {
                  v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v16)
                    os_unfair_lock_assert_owner(v16 + 20);
                }
              }
            }
          }
          CPSqliteStatementReset();
          if (CDBLockingAssertionsEnabled)
          {
            if (*v11)
            {
              v17 = **v11;
              if (v17)
              {
                if (*(_QWORD *)(v17 + 104))
                {
                  v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v18)
                    os_unfair_lock_assert_owner(v18 + 20);
                }
              }
            }
          }
          CPSqliteDatabaseReleaseSqliteStatement();
          if (v14)
          {
            if (CDBLockingAssertionsEnabled)
            {
              if (*(_QWORD *)v8)
              {
                if (*(_QWORD *)(*(_QWORD *)v8 + 104))
                {
                  v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v19)
                    os_unfair_lock_assert_owner(v19 + 20);
                }
              }
            }
            v20 = CPSqliteConnectionPerformSQL();
            if ((_DWORD)v20)
              NSLog(CFSTR("EventKitOC: *** CLEAN ORPHAN FAILURE *** Got error code %i when attempting to clean orphans"), v20);
          }
        }
      }
    }
    CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  }
}

CFTypeRef CalEventOccurrenceCacheCopyTimeZone(uint64_t a1)
{
  CFTypeRef v2;
  os_unfair_lock_s *v3;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 24) + 80));
  __CalDatabaseBeginReadTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1551");
  _CalEventOccurrenceCacheLoadInfo(a1);
  v2 = CFRetain(*(CFTypeRef *)(a1 + 32));
  __CalDatabaseRollbackTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:1553");
  v3 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 24) + 80);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v3);
  os_unfair_lock_unlock(v3);
  return v2;
}

void CalEventOccurrenceCacheCopyBoundsForTimeZone(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianCalendarForTimeZone:", a1);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D68], "CalSimulatedDateForNow");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "startOfDayForDate:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = (void *)objc_opt_new();
    objc_msgSend(v7, "setYear:", -2);
    objc_msgSend(v11, "dateByAddingComponents:toDate:options:", v7, v6, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_opt_new();
    objc_msgSend(v9, "setYear:", 2);

    objc_msgSend(v11, "dateByAddingComponents:toDate:options:", v9, v6, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2)
      *a2 = v8;
    if (a3)
      *a3 = v10;

  }
}

void CalEventOccurrenceCacheInitializeDB(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Context;
  _BYTE v8[56];
  uint64_t v9;
  uint64_t v10;

  if (a3 <= 18008)
  {
    v9 = v3;
    v10 = v4;
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE OccurrenceCache (day REAL, event_id INTEGER, calendar_id INTEGER, store_id INTEGER, occurrence_date REAL, occurrence_start_date REAL, occurrence_end_date REAL, latest_possible_alarm REAL, earliest_possible_alarm REAL, next_reminder_date REAL);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE OccurrenceCacheDays (calendar_id INTEGER, store_id INTEGER, day REAL, count INTEGER, PRIMARY KEY (calendar_id, day));"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER update_cache_days_after_delete AFTER DELETE ON OccurrenceCache\nBEGIN\nUPDATE OccurrenceCacheDays SET count = count - 1 WHERE day = OLD.day AND calendar_id = OLD.calendar_id AND OLD.next_reminder_date IS NULL;UPDATE OccurrenceCacheDays SET count = count - 1 WHERE day = OLD.day AND calendar_id = -2 AND OLD.next_reminder_date IS NULL;\nEND;\n"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER update_cache_days_after_insert AFTER INSERT ON OccurrenceCache\nBEGIN\nREPLACE INTO OccurrenceCacheDays VALUES (NEW.calendar_id, NEW.store_id, NEW.day, IIF(NEW.next_reminder_date IS NULL, 1, 0) + IFNULL((SELECT count FROM OccurrenceCacheDays WHERE day = NEW.day AND calendar_id = NEW.calendar_id), 0));\nREPLACE INTO OccurrenceCacheDays VALUES (-2, -2, NEW.day, IIF(NEW.next_reminder_date IS NULL, 1, 0) + IFNULL((SELECT count FROM OccurrenceCacheDays WHERE day = NEW.day AND calendar_id = -2), 0));\nEND;\n"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER update_cache_days_after_update AFTER UPDATE OF day ON OccurrenceCache\nBEGIN\nREPLACE INTO OccurrenceCacheDays VALUES (NEW.calendar_id, NEW.store_id, NEW.day, IIF(NEW.next_reminder_date IS NULL, 1, 0) + IFNULL((SELECT count FROM OccurrenceCacheDays WHERE day = NEW.day AND calendar_id = NEW.calendar_id), 0));\nREPLACE INTO OccurrenceCacheDays VALUES (-2, -2, NEW.day, IIF(NEW.next_reminder_date IS NULL, 1, 0) + IFNULL((SELECT count FROM OccurrenceCacheDays WHERE day = NEW.day AND calendar_id = -2), 0));\nUPDATE OccurrenceCacheDays SET count = count - 1 WHERE day = OLD.day AND calendar_id = OLD.calendar_id AND OLD.next_reminder_date IS NULL;UPDATE OccurrenceCacheDays SET count = count - 1 WHERE day = OLD.day AND calendar_id = -2 AND OLD.next_reminder_date IS NULL;\nEND;\n"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE AlarmCache (event_id INTEGER, alarm_id INTEGER, occurrence_date REAL, fire_date REAL, store_id INTEGER, all_day INTEGER, travel_time REAL, is_default INTEGER, PRIMARY KEY (event_id, alarm_id, occurrence_date));"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TRIGGER delete_from_alarm_cache_after_delete_alarm AFTER DELETE ON Alarm\nBEGIN\nDELETE From AlarmCache WHERE alarm_id = OLD.ROWID;\nEND;\n"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX OccurrenceCacheDayEventIdOccurrenceDate on OccurrenceCache(day, event_id, occurrence_date);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE UNIQUE INDEX OccurrenceCacheOccurrenceDateEventId on OccurrenceCache(occurrence_date, event_id, occurrence_start_date);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX OccurrenceCacheCalendarId on OccurrenceCache(calendar_id);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX OccurrenceCacheLatestPossibleAlarm on OccurrenceCache(latest_possible_alarm);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX OccurrenceCacheEarliestPossibleAlarm on OccurrenceCache(earliest_possible_alarm);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX OccurrenceCacheDaysCount on OccurrenceCacheDays(count);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX OccurrenceCacheDaysDayCalendarId on OccurrenceCacheDays(day, calendar_id);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX OccurrenceCacheEventIdOccurrenceDate on OccurrenceCache(event_id, occurrence_date);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX OccurrenceCacheCalendarIDDayNextReminderDate on OccurrenceCache(calendar_id, day, next_reminder_date) WHERE next_reminder_date IS NOT NULL;"));
    if (a3 == -1)
    {
      Context = CPRecordStoreGetContext();
      CalEventOccurrenceCacheGetIdealRangeInfo(*(void **)(Context + 296), (uint64_t)v8);
      _CalEventOccurrenceCacheSetRangeInfoWithConnection((uint64_t)a2, (uint64_t)v8);
    }
  }
}

void _CalEventOccurrenceCacheSetRangeInfoWithConnection(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  double v6;
  void *v7;
  const os_unfair_lock *Context;
  void *v9;
  void *v10;
  double v11;
  void *v12;
  const os_unfair_lock *v13;
  const void *v14;
  const os_unfair_lock *v15;
  void *v16;
  void *v17;
  double v18;
  void *v19;
  const os_unfair_lock *v20;
  void *v21;
  void *v22;
  double v23;
  void *v24;
  const os_unfair_lock *v25;
  void *v26;
  const os_unfair_lock *v27;
  void *v28;
  const os_unfair_lock *v29;

  v4 = *(void **)(a2 + 8);
  if (v4)
  {
    v5 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v4, "timeIntervalSinceReferenceDate");
    objc_msgSend(v5, "stringWithFormat:", CFSTR("%lu"), (unint64_t)v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a1)
        {
          if (*(_QWORD *)(*(_QWORD *)a1 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();

  }
  v9 = *(void **)(a2 + 16);
  if (v9)
  {
    v10 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v9, "timeIntervalSinceReferenceDate");
    objc_msgSend(v10, "stringWithFormat:", CFSTR("%lu"), (unint64_t)v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a1)
        {
          if (*(_QWORD *)(*(_QWORD *)a1 + 104))
          {
            v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13)
              os_unfair_lock_assert_owner(v13 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();

  }
  if (*(_QWORD *)a2)
  {
    CFAbsoluteTimeGetCurrent();
    v14 = (const void *)CalCFTimeZoneCopyCalTimeZone();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a1)
        {
          if (*(_QWORD *)(*(_QWORD *)a1 + 104))
          {
            v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15)
              os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();
    CFRelease(v14);
  }
  v16 = *(void **)(a2 + 24);
  if (v16)
  {
    v17 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v16, "timeIntervalSinceReferenceDate");
    objc_msgSend(v17, "stringWithFormat:", CFSTR("%lu"), (unint64_t)v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a1)
        {
          if (*(_QWORD *)(*(_QWORD *)a1 + 104))
          {
            v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v20)
              os_unfair_lock_assert_owner(v20 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();

  }
  v21 = *(void **)(a2 + 32);
  if (v21)
  {
    v22 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v21, "timeIntervalSinceReferenceDate");
    objc_msgSend(v22, "stringWithFormat:", CFSTR("%lu"), (unint64_t)v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a1)
        {
          if (*(_QWORD *)(*(_QWORD *)a1 + 104))
          {
            v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v25)
              os_unfair_lock_assert_owner(v25 + 20);
          }
        }
      }
    }
    CPSqliteConnectionSetValueForProperty();

  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%ld"), *(_QWORD *)(a2 + 40));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)(*(_QWORD *)a1 + 104))
        {
          v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v27)
            os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
  }
  CPSqliteConnectionSetValueForProperty();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%ld"), *(_QWORD *)(a2 + 48));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)(*(_QWORD *)a1 + 104))
        {
          v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v29)
            os_unfair_lock_assert_owner(v29 + 20);
        }
      }
    }
  }
  CPSqliteConnectionSetValueForProperty();

  __destructor_8_s0_s8_s16_s24_s32((id *)a2);
}

void sub_1A5D73E64(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s0_s8_s16_s24_s32(v1);
  _Unwind_Resume(a1);
}

void CalEventOccurrenceCachePrepareForDBMigration(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3 <= 18008)
  {
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TRIGGER update_cache_days_after_delete;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TRIGGER update_cache_days_after_insert;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TRIGGER IF EXISTS update_cache_days_after_update;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TABLE OccurrenceCache;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TABLE OccurrenceCacheDays;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheDay;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheOccurrenceDate;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheEventId;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheDayEventIdOccurrenceDate;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheOccurrenceDateEventId;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheCalendarId;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheDaysCount;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheDaysDayCalendarId;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheDayCalendarId;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheDayStoreId;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheStoreIdOccurrenceDate;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheCalendarIdOccurrenceDate;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheDaysStoreIdDay;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheLatestPossibleAlarm;"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP INDEX IF EXISTS OccurrenceCacheEarliestPossibleAlarm;"));
  }
}

id CalEventOccurrenceCacheMergeCounts(void *a1, void *a2)
{
  id v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[3];

  v37[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v4, "count");
  v6 = objc_msgSend(v3, "count");
  v33 = v4;
  objc_msgSend(v4, "firstObject");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("day"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "firstObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("day"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v6 + v5);
  v12 = 0;
  v34 = v7;
  if (!v6 || !v5)
  {
    v13 = 0;
    goto LABEL_15;
  }
  v13 = 0;
  v12 = 0;
  while (1)
  {
    while (1)
    {
      v14 = objc_msgSend(v10, "compare:", v8);
      if (v14 != -1)
        break;
      objc_msgSend(v11, "addObject:", v9);
      if (++v12 >= v6)
        goto LABEL_15;
      objc_msgSend(v3, "objectAtIndexedSubscript:", v12);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("day"));
      v16 = objc_claimAutoreleasedReturnValue();

      v10 = (void *)v16;
      v9 = v15;
    }
    if (!v14)
      break;
    objc_msgSend(v11, "addObject:", v34);
    if (++v13 >= v5)
      goto LABEL_15;
    objc_msgSend(v33, "objectAtIndexedSubscript:", v13);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    v21 = v32;
    objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("day"));
    v23 = objc_claimAutoreleasedReturnValue();
    v22 = v8;
    v8 = (void *)v23;
LABEL_13:
    v34 = v21;

  }
  objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("occurrenceCount"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v17, "intValue");

  objc_msgSend(v34, "objectForKeyedSubscript:", CFSTR("occurrenceCount"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v18, "intValue");

  v36[0] = CFSTR("day");
  v36[1] = CFSTR("occurrenceCount");
  v37[0] = v10;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (v27 + v29));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v37[1] = v30;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, v36, 2);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v31 = v19;
  objc_msgSend(v11, "addObject:", v19);
  ++v12;
  ++v13;
  if (v12 < v6 && v13 < v5)
  {
    objc_msgSend(v3, "objectAtIndexedSubscript:", v12);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("day"));
    v20 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v33, "objectAtIndexedSubscript:", v13);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("day"));
    v35 = objc_claimAutoreleasedReturnValue();

    v10 = (void *)v20;
    v9 = v28;
    v22 = v31;
    v8 = (void *)v35;
    goto LABEL_13;
  }

LABEL_15:
  if (v12 < v6)
  {
    do
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", v12);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "addObject:", v24);

      ++v12;
    }
    while (v6 != v12);
  }
  if (v13 < v5)
  {
    do
    {
      objc_msgSend(v33, "objectAtIndexedSubscript:", v13);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "addObject:", v25);

      ++v13;
    }
    while (v5 != v13);
  }

  return v11;
}

uint64_t CalEventOccurrenceCacheCopyEventOccurrencesAfterDate(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4;
  _QWORD v6[8];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __CalEventOccurrenceCacheCopyEventOccurrencesAfterDate_block_invoke;
  v6[3] = &unk_1E4F8EDF8;
  v7 = a3;
  v6[5] = a1;
  v6[6] = a2;
  v6[4] = &v8;
  *(double *)&v6[7] = a4;
  _CalEventOccurrenceCachePerformWithLock(a1, v6);
  v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1A5D7449C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t _OccurrenceGatherer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t RecordStore;
  const void *EventWithUID;
  const void *v8;

  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 1);
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a2 + 8));
  EventWithUID = (const void *)_CalGetEventWithUID(RecordStore, v4);
  if (EventWithUID)
  {
    v8 = (const void *)CalEventOccurrenceCreate(EventWithUID, *(const void **)(a2 + 16), v5);
    CFArrayAppendValue(*(CFMutableArrayRef *)a2, v8);
    CFRelease(v8);
  }
  return 0;
}

uint64_t CalEventOccurrenceCacheCopyEventOccurrencesWithIDsAfterDate(uint64_t a1, uint64_t a2, CFArrayRef theArray, int a4, char a5, char a6, char a7, _QWORD *a8, double a9)
{
  void (**v18)(_QWORD);
  void *v19;
  uint64_t v20;
  _QWORD v22[10];
  int v23;
  char v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v33 = 0;
  v34 = &v33;
  v35 = 0x2020000000;
  v36 = 0;
  if (theArray && CFArrayGetCount(theArray))
  {
    v27 = 0;
    v28 = &v27;
    v29 = 0x3032000000;
    v30 = __Block_byref_object_copy__2;
    v31 = __Block_byref_object_dispose__2;
    v32 = 0;
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __CalEventOccurrenceCacheCopyEventOccurrencesWithIDsAfterDate_block_invoke;
    v22[3] = &unk_1E4F8EE20;
    v23 = a4;
    v24 = a5;
    v25 = a7;
    v26 = a8 != 0;
    v22[6] = a1;
    v22[7] = theArray;
    v22[8] = a2;
    v22[4] = &v27;
    v22[5] = &v33;
    *(double *)&v22[9] = a9;
    v18 = (void (**)(_QWORD))MEMORY[0x1A85B52F0](v22);
    v19 = v18;
    if ((a6 & 1) != 0)
      _CalEventOccurrenceCachePerformWithLock(a1, v18);
    else
      v18[2](v18);
    if (a8)
      *a8 = objc_retainAutorelease((id)v28[5]);
    v20 = v34[3];

    _Block_object_dispose(&v27, 8);
  }
  else
  {
    v20 = 0;
  }
  _Block_object_dispose(&v33, 8);
  return v20;
}

void sub_1A5D74928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

CalEventOccurrenceCacheRange *_CalEventOccurrenceCacheCreateOccurrenceCacheRange(_QWORD *a1)
{
  _CalEventOccurrenceCacheLoadInfo((uint64_t)a1);
  return -[CalEventOccurrenceCacheRange initWithStartDate:endDate:timeZone:]([CalEventOccurrenceCacheRange alloc], "initWithStartDate:endDate:timeZone:", a1[5], a1[6], a1[4]);
}

id _CalEventOccurrenceCacheCopySpotlightOccurrenceDates(uint64_t a1, void *a2, int a3)
{
  id v6;
  void *v7;
  uint64_t RecordStore;
  BOOL v9;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v12;
  void *v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  uint64_t **v16;
  sqlite3_stmt *v17;
  double v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  uint64_t v21;
  const os_unfair_lock *v22;

  __CalDatabaseBeginReadTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2192");
  _CalEventOccurrenceCacheLoadInfo(a1);
  v6 = objc_retainAutorelease(*(id *)(a1 + 40));
  v7 = (void *)objc_opt_new();
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
    v9 = RecordStore == 0;
  else
    v9 = 1;
  if (!v9)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    v12 = Database;
    v13 = _CalFilterCopyQuery(a2);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v12 + 104))
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
    v15 = CPSqliteDatabaseStatementForReading();
    if (v15)
    {
      v16 = (uint64_t **)v15;
      v17 = *(sqlite3_stmt **)(v15 + 8);
      objc_msgSend(v6, "timeIntervalSinceReferenceDate", CFSTR("SELECT occurrence_date FROM OccurrenceCache"), CFSTR("occurrence_date > ? AND event_id = ? AND occurrence_start_date is NULL"), 0, 0);
      sqlite3_bind_int(v17, 1, (int)v18);
      sqlite3_bind_int((sqlite3_stmt *)v16[1], 2, a3);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v16)
        {
          v19 = **v16;
          if (v19)
          {
            if (*(_QWORD *)(v19 + 104))
            {
              v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20)
                os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v16)
        {
          v21 = **v16;
          if (v21)
          {
            if (*(_QWORD *)(v21 + 104))
            {
              v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v22)
                os_unfair_lock_assert_owner(v22 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    if (v13)
      CFRelease(v13);
  }

  __CalDatabaseRollbackTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2196");
  return v7;
}

uint64_t CalEventOccurrenceCacheDoEventsHaveOccurrencesAfterDate(uint64_t a1, int a2, CFArrayRef theArray, double a4)
{
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (theArray && CFArrayGetCount(theArray))
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __CalEventOccurrenceCacheDoEventsHaveOccurrencesAfterDate_block_invoke;
    v9[3] = &unk_1E4F88F40;
    v9[5] = a1;
    v9[6] = theArray;
    v9[4] = &v10;
    *(double *)&v9[7] = a4;
    _CalEventOccurrenceCachePerformWithLock(a1, v9);
    v7 = v11[3];
  }
  else
  {
    v7 = 0;
  }
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1A5D75014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _CalEventOccurrenceCacheNextEventOccurrenceDateAfterDate(uint64_t a1, int a2, double a3)
{
  id v6;
  double v7;
  uint64_t RecordStore;
  BOOL v9;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v12;
  uint64_t **v13;
  uint64_t v14;
  const os_unfair_lock *v15;
  uint64_t v16;
  const os_unfair_lock *v17;
  double v19;

  __CalDatabaseBeginReadTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2245");
  _CalEventOccurrenceCacheLoadInfo(a1);
  v6 = objc_retainAutorelease(*(id *)(a1 + 40));
  v19 = *MEMORY[0x1E0D0C480];
  objc_msgSend(v6, "timeIntervalSinceReferenceDate");
  if (v7 <= a3)
  {
    RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
    if (CDBLockingAssertionsEnabled)
      v9 = RecordStore == 0;
    else
      v9 = 1;
    if (!v9)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
      v13 = (uint64_t **)CPSqliteDatabaseStatementForReading();
      sqlite3_bind_int((sqlite3_stmt *)v13[1], 1, (int)a3);
      sqlite3_bind_int((sqlite3_stmt *)v13[1], 2, a2);
      if (v13)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v13)
          {
            v14 = **v13;
            if (v14)
            {
              if (*(_QWORD *)(v14 + 104))
              {
                v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v15)
                  os_unfair_lock_assert_owner(v15 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      if (v13)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*v13)
          {
            v16 = **v13;
            if (v16)
            {
              if (*(_QWORD *)(v16 + 104))
              {
                v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v17)
                  os_unfair_lock_assert_owner(v17 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
  }
  else
  {
    v19 = *MEMORY[0x1E0D0C490];
  }
  __CalDatabaseRollbackTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:2264");

  return v19;
}

uint64_t loadDoubleResult(uint64_t a1, double *a2)
{
  *a2 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 0);
  return 1;
}

uint64_t CalEventOccurrenceCacheCount(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  _QWORD v5[8];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __CalEventOccurrenceCacheCount_block_invoke;
  v5[3] = &unk_1E4F88F40;
  *(double *)&v5[6] = a2;
  *(double *)&v5[7] = a3;
  v5[4] = &v6;
  v5[5] = a1;
  _CalEventOccurrenceCachePerformWithLock(a1, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1A5D754CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t CalEventOccurrenceCacheCopyEventOccurrencesInDateRange(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return CalEventOccurrenceCacheCopyEventOccurrencesInDateRangeWithLimit(a1, a2, a3, a4, a5, 1, 0, 0);
}

void CalEventOccurrenceCacheProcessEventOccurrencesInDateRange(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, int a6, void *a7)
{
  _CalEventOccurrenceCacheProcessEventOccurrencesInDateRange(a1, a2, a3, a4, a5, 1, 0, a6, 0, a7);
}

uint64_t CalDatabaseCopyEventOccurrenceNearestToDate(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4;
  _QWORD v6[8];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __CalDatabaseCopyEventOccurrenceNearestToDate_block_invoke;
  v6[3] = &unk_1E4F8EDF8;
  v6[5] = a1;
  v6[6] = a2;
  *(double *)&v6[7] = a4;
  v7 = a3;
  v6[4] = &v8;
  _CalEventOccurrenceCachePerformWithLock(a1, v6);
  v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1A5D7571C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t _createEventOccurrenceFromStatement(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  double v7;
  const void *EventWithUID;

  v6 = sqlite3_column_int(*(sqlite3_stmt **)(a2 + 8), 0);
  v7 = sqlite3_column_double(*(sqlite3_stmt **)(a2 + 8), 1);
  EventWithUID = (const void *)_CalGetEventWithUID(a1, v6);
  if (_CalEventIsAllDay((uint64_t)EventWithUID) && sqlite3_column_type(*(sqlite3_stmt **)(a2 + 8), 2) != 5)
    v7 = sqlite3_column_double(*(sqlite3_stmt **)(a2 + 8), 2);
  return CalEventOccurrenceCreate(EventWithUID, a3, v7);
}

uint64_t CalDatabaseCopyEventOccurrenceNearestToDatePreferringForwardSearch(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4;
  _QWORD v6[8];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __CalDatabaseCopyEventOccurrenceNearestToDatePreferringForwardSearch_block_invoke;
  v6[3] = &unk_1E4F8EDF8;
  v6[5] = a1;
  v6[6] = a2;
  *(double *)&v6[7] = a4;
  v7 = a3;
  v6[4] = &v8;
  _CalEventOccurrenceCachePerformWithLock(a1, v6);
  v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1A5D75BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void CalDatabaseGetEventOccurrenceAtDayAndOffset(uint64_t a1, double a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  _QWORD v6[8];
  int v7;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __CalDatabaseGetEventOccurrenceAtDayAndOffset_block_invoke;
  v6[3] = &__block_descriptor_68_e5_v8__0l;
  v6[4] = a1;
  *(double *)&v6[5] = a2;
  v7 = a4;
  v6[6] = a5;
  v6[7] = a6;
  _CalEventOccurrenceCachePerformWithLock(a1, v6);
}

uint64_t CalDatabaseRegisterProgressHandlerForOccurrencesSearch(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  const os_unfair_lock *Context;

  if (*(_BYTE *)(result + 116))
  {
    v2 = result;
    v3 = *a2;
    if (CDBLockingAssertionsEnabled)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (!v4 && *(_QWORD *)v3 && *(_QWORD *)(*(_QWORD *)v3 + 104))
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    result = CPSqliteConnectionEnableProgressHandlerCallback();
    *(_BYTE *)(v2 + 116) = 0;
  }
  return result;
}

uint64_t _CalDatabaseApplicationSearchProgressHandler(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  v2 = *(uint64_t (**)(_QWORD))(a2 + 96);
  if (v2)
    return v2(*(_QWORD *)(a2 + 104));
  else
    return 0;
}

uint64_t CalDatabaseUnregisterProgressHandlerForOccurrencesSearch(uint64_t *a1)
{
  uint64_t v1;
  BOOL v2;
  const os_unfair_lock *Context;

  v1 = *a1;
  if (CDBLockingAssertionsEnabled)
    v2 = v1 == 0;
  else
    v2 = 1;
  if (!v2)
  {
    if (*(_QWORD *)v1)
    {
      if (*(_QWORD *)(*(_QWORD *)v1 + 104))
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPSqliteConnectionDisableProgressHandlerCallback();
}

uint64_t CalDatabaseCreateOccurrencesThatMatchEventIdsStatement(void *a1, uint64_t a2)
{
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t result;
  uint64_t v8;
  void *v9;
  const os_unfair_lock *v10;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 80));
  *(_QWORD *)(a2 + 120) = 0;
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 24));
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  result = CPRecordStoreGetDatabase();
  if (result)
  {
    v8 = result;
    v9 = _CalFilterCopyQuery(a1);
    if (CDBLockingAssertionsEnabled && *(_QWORD *)(v8 + 104))
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
    result = CPSqliteDatabaseStatementForReading();
    *(_QWORD *)(a2 + 120) = v9;
  }
  return result;
}

void CalDatabaseDeleteOccurrencesThatMatchEventIdsStatement(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  const void *v5;
  os_unfair_lock_s *v6;

  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        v3 = **a2;
        if (v3)
        {
          if (*(_QWORD *)(v3 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementReset();
  v5 = *(const void **)(a1 + 120);
  if (v5)
    CFRelease(v5);
  v6 = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) + 80);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
}

void _CalDatabaseCopyEventOccurrencesThatMatchEventIds(uint64_t a1, sqlite3_stmt **a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  double v7;
  uint64_t RecordStore;
  uint64_t EventWithUID;
  const void *v10;
  uint64_t v11;
  const void *v12;
  double v13;
  CFDateRef v14;
  double v15;
  const __CFArray *v16;
  double v17;
  __CFArray *v18;
  __CFArray *v19;
  _BOOL4 v21;
  const __CFArray *v23;
  CFIndex Count;
  int v25;
  CFIndex v26;
  unsigned int v27;
  const __CFArray *v28;
  CFIndex v29;
  const __CFArray *v30;
  CFIndex v31;
  char v32;
  NSObject *v33;
  uint8_t buf[16];

  if (__CalDatabaseBeginReadTransaction(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24), (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3115"))
  {
    *(_DWORD *)(a1 + 64) = 0;
    if (a2)
    {
      sqlite3_bind_double(a2[1], 1, *(double *)(a1 + 56));
      sqlite3_bind_double(a2[1], 2, *(double *)(a1 + 72));
      v4 = 0;
      while (1)
      {
        v5 = sqlite3_step(a2[1]);
        if (v5 == 100)
        {
          v6 = sqlite3_column_int(a2[1], 0);
          if (!*(_QWORD *)a1 || CFSetGetValueIfPresent(*(CFSetRef *)a1, (const void *)(int)v6, 0))
          {
            v7 = sqlite3_column_double(a2[1], 1);
            RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24));
            EventWithUID = _CalGetEventWithUID(RecordStore, v6);
            if (EventWithUID)
            {
              v10 = (const void *)EventWithUID;
              if (sqlite3_column_type(a2[1], 2) != 5)
                v7 = sqlite3_column_double(a2[1], 2);
              v11 = *(_QWORD *)(a1 + 88);
              _CalEventOccurrenceCacheLoadInfo(v11);
              v12 = (const void *)CalEventOccurrenceCreate(v10, *(const void **)(v11 + 32), v7);
              CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8), v12);
              ++*(_DWORD *)(a1 + 80);
              if (!*(_BYTE *)(a1 + 136))
              {
                if (*(double *)(a1 + 128) <= v7 + (double)_CalEventGetDuration((uint64_t)v10))
                  *(_BYTE *)(a1 + 136) = 1;
                *(double *)(a1 + 144) = v7;
              }
              v13 = sqlite3_column_double(a2[1], 3);
              v14 = CFDateCreate(0, v13);
              v15 = *(double *)(a1 + 56);
              *(double *)(a1 + 48) = v15;
              *(double *)(a1 + 56) = v13;
              v16 = *(const __CFArray **)(a1 + 16);
              if (v16 && *(_QWORD *)(a1 + 24))
              {
                v17 = vabdd_f64(v15, v13);
                if ((CFArrayGetCount(v16) || CFArrayGetCount(*(CFArrayRef *)(a1 + 24))) && v17 < 2.22044605e-16)
                {
                  ++*(_DWORD *)(a1 + 64);
                }
                else
                {
                  *(_DWORD *)(a1 + 64) = 1;
                  v18 = *(__CFArray **)(a1 + 16);
                  if (v18)
                    CFArrayAppendValue(v18, v14);
                  v19 = *(__CFArray **)(a1 + 24);
                  if (v19)
                    CFArrayAppendValue(v19, (const void *)(*(_DWORD *)(a1 + 80) - 1));
                }
              }
              CFRelease(v12);
              CFRelease(v14);
              ++v4;
            }
          }
        }
        v21 = CFArrayGetCount(*(CFArrayRef *)(a1 + 16)) > 1 && v4 > 0x63;
        if (v5 == 100 && v21)
        {
          v23 = *(const __CFArray **)(a1 + 8);
          if (v23)
          {
            if (*(_QWORD *)(a1 + 24))
            {
              Count = CFArrayGetCount(v23);
              v25 = *(_DWORD *)(a1 + 64);
              *(_DWORD *)(a1 + 80) -= v25;
              if (v25 >= 1)
              {
                v26 = Count - 1;
                v27 = v25 + 1;
                do
                {
                  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 8), v26--);
                  --v27;
                }
                while (v27 > 1);
              }
            }
          }
          v28 = *(const __CFArray **)(a1 + 16);
          if (v28)
          {
            v29 = CFArrayGetCount(v28);
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), v29 - 1);
          }
          v30 = *(const __CFArray **)(a1 + 24);
          if (v30)
          {
            v31 = CFArrayGetCount(v30);
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), v31 - 1);
          }
        }
        if (v5 != 100)
          break;
        if (**(_BYTE **)(a1 + 40))
          v32 = 1;
        else
          v32 = v21;
        if ((v32 & 1) != 0)
        {
          if (!**(_BYTE **)(a1 + 40))
            goto LABEL_57;
          goto LABEL_56;
        }
      }
      if ((v5 - 102) > 0xFFFFFFFD
        || (sqlite3_errmsg(*((sqlite3 **)*a2 + 1)), CFLog(), **(_BYTE **)(a1 + 40)))
      {
LABEL_56:
        **(_BYTE **)(a1 + 32) = 0;
      }
    }
LABEL_57:
    __CalDatabaseRollbackTransaction(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24), (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3169");
  }
  else
  {
    v33 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v33, OS_LOG_TYPE_ERROR, "Unable to start transaction", buf, 2u);
    }
    **(_BYTE **)(a1 + 32) = 0;
  }
}

uint64_t CalEventOccurrenceCacheRebuildIfNeeded(uint64_t a1)
{
  NSObject *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v7;
  uint64_t v8;
  sqlite3 **v9;
  const os_unfair_lock *v10;
  uint64_t v11;
  double Current;
  NSObject *v13;
  const os_unfair_lock *v14;
  void *v15;
  NSObject *v16;
  double v17;
  const os_unfair_lock *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  CFAbsoluteTime v25;
  uint64_t v27;
  void *v28;
  uint8_t buf[4];
  double v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v2, OS_LOG_TYPE_DEBUG, "EventKitOC: Checking if we need to rebuild", buf, 2u);
  }
  if (*(_BYTE *)(a1 + 16) && CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)))
  {
    RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
    if (CDBLockingAssertionsEnabled)
      v4 = RecordStore == 0;
    else
      v4 = 1;
    if (!v4)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7)
            os_unfair_lock_assert_owner(v7 + 20);
        }
      }
      v8 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (v8)
      {
        v9 = (sqlite3 **)v8;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v8)
          {
            if (*(_QWORD *)(*(_QWORD *)v8 + 104))
            {
              v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v10)
                os_unfair_lock_assert_owner(v10 + 20);
            }
          }
        }
        v11 = 0;
        if (CPSqliteConnectionIntegerForPropertyWithDefaultValue() == 30)
          goto LABEL_46;
        if (__CalDatabaseBeginWriteTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3665"))
        {
          Current = CFAbsoluteTimeGetCurrent();
          v13 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_DEBUG, "EventKitOC: Clearing recurrence rule cached end dates", buf, 2u);
          }
          if (CDBLockingAssertionsEnabled)
          {
            if (*v9)
            {
              if (*((_QWORD *)*v9 + 13))
              {
                v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v14)
                  os_unfair_lock_assert_owner(v14 + 20);
              }
            }
          }
          CPSqliteConnectionPerformSQL();
          v15 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            v16 = v15;
            _CalEventOccurrenceCacheLoadInfo(a1);
            v17 = *(double *)(a1 + 32);
            *(_DWORD *)buf = 138412290;
            v30 = v17;
            _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_DEBUG, "EventKitOC: Rebuilding cache in time zone %@...", buf, 0xCu);

          }
          _RebuildCache_0(a1, v9);
          if (CDBLockingAssertionsEnabled)
          {
            if (*v9)
            {
              if (*((_QWORD *)*v9 + 13))
              {
                v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v18)
                  os_unfair_lock_assert_owner(v18 + 20);
              }
            }
          }
          v19 = CPSqliteConnectionSetIntegerForProperty();
          v20 = (void *)MEMORY[0x1A85B514C](v19);
          if ((uint64_t)((CFAbsoluteTimeGetCurrent() - Current) * 1000.0) >= 1)
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", CFSTR("milliseconds"));
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = v21;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            CalAnalyticsSendEvent();
          }
          objc_autoreleasePoolPop(v20);
          v23 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            v24 = v23;
            v25 = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)buf = 134217984;
            v30 = v25 - Current;
            _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_DEBUG, "EventKitOC: Cache rebuilt in %f", buf, 0xCu);

          }
          __CalDatabaseCommitTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3694");
          v11 = 1;
          goto LABEL_46;
        }
        CFLog();
      }
    }
    v11 = 0;
LABEL_46:
    CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
    return v11;
  }
  return 0;
}

uint64_t _CalEventOccurrenceCacheForceRebuild(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v6;
  const os_unfair_lock *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  NSObject *v12;
  uint8_t v14[16];
  uint8_t v15[16];
  uint8_t buf[2];
  __int16 v17;

  if (!*(_BYTE *)(a1 + 16))
  {
    v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      v17 = 0;
      v10 = "The occurrence cache is not valid.  Will not rebuild the occurrence cache.";
      v11 = (uint8_t *)&v17;
LABEL_23:
      _os_log_impl(&dword_1A5CCB000, v9, OS_LOG_TYPE_DEBUG, v10, v11, 2u);
    }
    return 0;
  }
  if ((CalDatabaseLockForThread(*(os_unfair_lock_s **)(a1 + 24)) & 1) == 0)
  {
    v9 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v10 = "Could not acquire the database lock.  Will not rebuild the occurrence cache.";
      v11 = buf;
      goto LABEL_23;
    }
    return 0;
  }
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  v6 = Database;
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
    v6 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (v6)
    {
      if (__CalDatabaseBeginWriteTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3720"))
      {
        _RebuildCache_0(a1, (sqlite3 **)v6);
        v8 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v14 = 0;
          _os_log_impl(&dword_1A5CCB000, v8, OS_LOG_TYPE_DEBUG, "The occurrence cache was successfully rebuilt.", v14, 2u);
        }
        __CalDatabaseCommitTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:3728");
        v6 = 1;
      }
      else
      {
        v12 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v15 = 0;
          _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_ERROR, "Unable to start transaction.  Will not rebuild the occurrence cache.", v15, 2u);
        }
        v6 = 0;
      }
    }
  }
  CalDatabaseUnlockForThread(*(const os_unfair_lock **)(a1 + 24));
  return v6;
}

void _CalEventOccurrenceCacheMarkEventForUpdate(uint64_t a1, void *value)
{
  const __CFSet *v4;
  int ID;
  int v6;
  __CFDictionary *v7;
  __CFDictionary *v8;
  __CFSet *v9;
  __CFSet *Mutable;
  __CFSet *v11;
  __CFDictionary *v12;
  __CFSet *v13;

  if (!*(_BYTE *)(a1 + 16))
    return;
  v4 = *(const __CFSet **)(a1 + 120);
  if (v4)
  {
    if (CFSetContainsValue(v4, value))
      return;
  }
  ID = CPRecordGetID();
  if (ID >= 1)
  {
    v6 = CPRecordGetID();
    v7 = *(__CFDictionary **)(a1 + 88);
    if (v7)
      CFDictionaryRemoveValue(v7, value);
    v8 = *(__CFDictionary **)(a1 + 104);
    if (v8)
      CFDictionaryRemoveValue(v8, value);
    v9 = *(__CFSet **)(a1 + 112);
    if (v9 && v6 >= 1)
    {
      CFSetRemoveValue(v9, (const void *)v6);
LABEL_13:
      Mutable = *(__CFSet **)(a1 + 96);
      if (!Mutable)
      {
        Mutable = CFSetCreateMutable(0, 0, 0);
        *(_QWORD *)(a1 + 96) = Mutable;
      }
      CFSetAddValue(Mutable, (const void *)v6);
      goto LABEL_16;
    }
    if (v6 >= 1)
      goto LABEL_13;
  }
LABEL_16:
  if (*(_QWORD *)(a1 + 120) && _CalEventIsDisplayable((uint64_t)value))
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 120), value);
  v11 = *(__CFSet **)(a1 + 128);
  if (v11)
  {
    CFSetRemoveValue(v11, value);
    v12 = *(__CFDictionary **)(a1 + 104);
    if (v12)
      CFDictionaryRemoveValue(v12, value);
    if (ID >= 1)
    {
      v13 = *(__CFSet **)(a1 + 112);
      if (v13)
        CFSetRemoveValue(v13, (const void *)ID);
    }
  }
}

void _CalEventOccurrenceCacheMarkEventForAlarmUpdate(uint64_t a1, void *value)
{
  const __CFSet *v4;
  const __CFSet *v5;
  int ID;
  __CFDictionary *v7;
  __CFSet *Mutable;

  if (*(_BYTE *)(a1 + 16))
  {
    v4 = *(const __CFSet **)(a1 + 120);
    if (!v4 || !CFSetContainsValue(v4, value))
    {
      v5 = *(const __CFSet **)(a1 + 128);
      if (!v5 || !CFSetContainsValue(v5, value))
      {
        if ((int)CPRecordGetID() >= 1)
        {
          ID = CPRecordGetID();
          v7 = *(__CFDictionary **)(a1 + 104);
          if (v7)
            CFDictionaryRemoveValue(v7, value);
          if (ID >= 1)
          {
            Mutable = *(__CFSet **)(a1 + 112);
            if (!Mutable)
            {
              Mutable = CFSetCreateMutable(0, 0, 0);
              *(_QWORD *)(a1 + 112) = Mutable;
            }
            CFSetAddValue(Mutable, (const void *)ID);
          }
        }
        if (*(_QWORD *)(a1 + 128))
        {
          if (_CalEventIsDisplayable((uint64_t)value))
            CFSetAddValue(*(CFMutableSetRef *)(a1 + 128), value);
        }
      }
    }
  }
}

void _CalEventOccurrenceCacheMarkStoreForDefaultAlarmChanges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *ID;
  const void *v6;

  if (a1 && a2 && a3 && *(_BYTE *)(a1 + 16))
  {
    if (!*(_QWORD *)(a1 + 136))
      *(_QWORD *)(a1 + 136) = CFDictionaryCreateMutable(0, 1, 0, 0);
    ID = (const void *)(int)CPRecordGetID();
    v6 = (const void *)((unint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 136), ID) | a3);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 136), ID, v6);
  }
}

CFMutableSetRef _CalEventOccurrenceCacheBeginTrackingUpdates(CFMutableSetRef result)
{
  CFMutableSetRef v1;
  const CFSetCallBacks *v2;

  if (!*((_QWORD *)result + 15))
  {
    v1 = result;
    v2 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
    *((_QWORD *)result + 15) = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
    result = CFSetCreateMutable(0, 0, v2);
    *((_QWORD *)v1 + 16) = result;
  }
  return result;
}

void _CalEventOccurrenceCacheUpdateForGlobalDefaultAlarmChangesIfNeeded(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t GlobalDefaultTimedAlarmOffset;
  uint64_t GlobalDefaultAllDayAlarmOffset;
  uint64_t v6;
  id v7[7];
  _OWORD v8[2];
  __int128 v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  __CalDatabaseBeginReadTransaction(v2, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:4083");
  _CalEventOccurrenceCacheLoadInfo(a1);
  v10 = 0;
  v9 = 0u;
  memset(v8, 0, sizeof(v8));
  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v8, a1 + 32);
  __CalDatabaseRollbackTransaction(v2, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:4086");
  v3 = *(id *)(*(_QWORD *)(a1 + 24) + 296);
  GlobalDefaultTimedAlarmOffset = CalAlarmGetGlobalDefaultTimedAlarmOffset(v3);
  GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v3);
  v6 = GlobalDefaultAllDayAlarmOffset;
  if (GlobalDefaultTimedAlarmOffset != *((_QWORD *)&v9 + 1))
  {
    __CalDatabaseBeginWriteTransaction(v2, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:4094");
    _CalEventOccurrenceCacheUpdateForGlobalDefaultAlarmChange(a1, 0);
    if (v6 == v10)
    {
LABEL_6:
      *((_QWORD *)&v9 + 1) = GlobalDefaultTimedAlarmOffset;
      v10 = v6;
      __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v7, (uint64_t)v8);
      _CalEventOccurrenceCacheSetRangeInfo(a1, v7);
      __CalDatabaseCommitTransaction(*(_QWORD *)(a1 + 24), (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:4110");
      goto LABEL_7;
    }
LABEL_5:
    _CalEventOccurrenceCacheUpdateForGlobalDefaultAlarmChange(a1, 1);
    goto LABEL_6;
  }
  if (GlobalDefaultAllDayAlarmOffset != v10)
  {
    __CalDatabaseBeginWriteTransaction(v2, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalEventOccurrenceCache.m:4100");
    goto LABEL_5;
  }
LABEL_7:

  __destructor_8_s0_s8_s16_s24_s32((id *)v8);
}

void sub_1A5D77138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  __destructor_8_s0_s8_s16_s24_s32((id *)va);
  _Unwind_Resume(a1);
}

void _CalEventOccurrenceCacheUpdateForGlobalDefaultAlarmChange(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v6;
  const os_unfair_lock *v7;
  uint64_t v8;
  sqlite3 **v9;
  void *v10;
  uint64_t GlobalDefaultAllDayAlarmOffset;
  NSObject *v12;
  const char *v13;
  sqlite3_int64 v14;
  int function;
  int v16;
  NSObject *v17;
  const os_unfair_lock *v18;
  const __CFString *v19;
  const os_unfair_lock *v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  const os_unfair_lock *v24;
  uint64_t v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;
  id v28;
  uint8_t buf[4];
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!_CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24)))
  {
    v12 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v13 = "No record store in _UpdateAlarmsForStoreDefaultAlarmChanges";
    goto LABEL_19;
  }
  if (CDBLockingAssertionsEnabled)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
  {
    v12 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v13 = "No db in _UpdateAlarmsForStoreDefaultAlarmChanges";
    goto LABEL_19;
  }
  v6 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  v8 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (!v8)
  {
    v12 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v13 = "Failed to open connection to database";
LABEL_19:
    _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_ERROR, v13, buf, 2u);
    return;
  }
  v9 = (sqlite3 **)v8;
  v10 = *(void **)(*(_QWORD *)(a1 + 24) + 296);
  if (a2)
    GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v10);
  else
    GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultTimedAlarmOffset(v10);
  v14 = GlobalDefaultAllDayAlarmOffset;
  function = sqlite3_create_function(v9[1], "CALCULATE_ALARM_FIRE_DATE", 3, 526337, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalculateAlarmFireDateCallback, 0, 0);
  if (function)
  {
    v16 = function;
    v17 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v30 = v16;
      _os_log_impl(&dword_1A5CCB000, v17, OS_LOG_TYPE_ERROR, "Failed to create CALCULATE_ALARM_FIRE_DATE function in _UpdateAlarmsForStoreDefaultAlarmChanges, with error code: %i", buf, 8u);
    }
    if (CDBLockingAssertionsEnabled && *v9 && *((_QWORD *)*v9 + 13))
    {
      v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v18)
        os_unfair_lock_assert_owner(v18 + 20);
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
    v19 = CFSTR("default_alarm_offset");
    if (a2)
      v19 = CFSTR("default_all_day_alarm_offset");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE AlarmCache SET fire_date = CALCULATE_ALARM_FIRE_DATE(        AlarmCache.occurrence_date,         IFNULL(AlarmCache.travel_time, 0),         ?) WHERE AlarmCache.is_default = 1 AND   AlarmCache.all_day = ?  AND (SELECT %@       FROM Store       WHERE Store.ROWID = AlarmCache.store_id)       IS NULL"), v19);
    v28 = (id)objc_claimAutoreleasedReturnValue();
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v6 + 104))
      {
        v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v20)
          os_unfair_lock_assert_owner(v20 + 20);
      }
    }
    v21 = CPSqliteDatabaseStatementForWriting();
    if (v21)
    {
      v22 = (uint64_t **)v21;
      sqlite3_bind_int64(*(sqlite3_stmt **)(v21 + 8), 1, v14);
      sqlite3_bind_int((sqlite3_stmt *)v22[1], 2, a2);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v22)
        {
          v23 = **v22;
          if (v23)
          {
            if (*(_QWORD *)(v23 + 104))
            {
              v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v24)
                os_unfair_lock_assert_owner(v24 + 20);
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v22)
        {
          v25 = **v22;
          if (v25)
          {
            if (*(_QWORD *)(v25 + 104))
            {
              v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v26)
                os_unfair_lock_assert_owner(v26 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    sqlite3_create_function(v9[1], "CALCULATE_ALARM_FIRE_DATE", 3, 526337, 0, 0, 0, 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v9)
      {
        if (*((_QWORD *)*v9 + 13))
        {
          v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v27)
            os_unfair_lock_assert_owner(v27 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();

  }
}

void _CalEventOccurrenceCacheSetRangeInfo(uint64_t a1, id *a2)
{
  uint64_t v4;
  uint64_t RecordStore;
  BOOL v6;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v9;
  const os_unfair_lock *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _BYTE v14[56];

  v4 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v4 + 352) != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _CalEventOccurrenceCacheSetRangeInfo(CalEventOccurrenceCacheRef, CalCacheRangeInfo)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("CalEventOccurrenceCache.m"), 1348, CFSTR("No write transaction when updating occurrence cache range."));

    v4 = *(_QWORD *)(a1 + 24);
  }
  RecordStore = _CalDatabaseGetRecordStore(v4);
  if (CDBLockingAssertionsEnabled)
    v6 = RecordStore == 0;
  else
    v6 = 1;
  if (!v6)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v9 = Database == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
  }
  v11 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v14, (uint64_t)a2);
  _CalEventOccurrenceCacheSetRangeInfoWithConnection(v11, (uint64_t)v14);
  __copy_assignment_8_8_s0_s8_s16_s24_s32_t40w16(a1 + 32, (uint64_t)a2);
  __destructor_8_s0_s8_s16_s24_s32(a2);
}

void sub_1A5D77688(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s0_s8_s16_s24_s32(v1);
  _Unwind_Resume(a1);
}

void _CalEventOccurrenceCacheStopTrackingUpdatesInternal(uint64_t a1)
{
  id v2;
  const __CFDictionary *v3;
  const __CFSet *v4;
  const __CFSet *v5;
  _QWORD context[3];

  if (*(_QWORD *)(a1 + 136) || *(_QWORD *)(a1 + 120) || *(_QWORD *)(a1 + 128))
  {
    v2 = *(id *)(*(_QWORD *)(a1 + 24) + 296);
    context[0] = a1;
    context[1] = CalAlarmGetGlobalDefaultTimedAlarmOffset(v2);
    context[2] = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v2);
    v3 = *(const __CFDictionary **)(a1 + 136);
    if (v3)
    {
      CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)_UpdateAlarmsForStoreDefaultAlarmChanges, context);
      CFRelease(*(CFTypeRef *)(a1 + 136));
      *(_QWORD *)(a1 + 136) = 0;
    }
    v4 = *(const __CFSet **)(a1 + 120);
    if (v4)
    {
      CFSetApplyFunction(v4, (CFSetApplierFunction)_GenerateDatesForOccurrenceCache, context);
      CFRelease(*(CFTypeRef *)(a1 + 120));
      *(_QWORD *)(a1 + 120) = 0;
    }
    v5 = *(const __CFSet **)(a1 + 128);
    if (v5)
    {
      CFSetApplyFunction(v5, (CFSetApplierFunction)_GenerateDatesForAlarmCache, context);
      CFRelease(*(CFTypeRef *)(a1 + 128));
      *(_QWORD *)(a1 + 128) = 0;
    }

  }
}

void _CalEventOccurrenceCacheRevert(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  __CFDictionary *v4;
  __CFSet *v5;
  __CFDictionary *v6;
  __CFSet *v7;
  __CFDictionary *v8;

  v2 = (const void *)a1[15];
  if (v2)
  {
    CFRelease(v2);
    a1[15] = 0;
  }
  v3 = (const void *)a1[16];
  if (v3)
  {
    CFRelease(v3);
    a1[16] = 0;
  }
  v4 = (__CFDictionary *)a1[11];
  if (v4)
    CFDictionaryRemoveAllValues(v4);
  v5 = (__CFSet *)a1[12];
  if (v5)
    CFSetRemoveAllValues(v5);
  v6 = (__CFDictionary *)a1[13];
  if (v6)
    CFDictionaryRemoveAllValues(v6);
  v7 = (__CFSet *)a1[14];
  if (v7)
    CFSetRemoveAllValues(v7);
  v8 = (__CFDictionary *)a1[17];
  if (v8)
    CFDictionaryRemoveAllValues(v8);
}

void _CalEventOccurrenceCacheStopTrackingUpdatesAndSave(CFDictionaryRef *a1, _QWORD *a2)
{
  const __CFSet *v4;
  const os_unfair_lock *Context;
  void *v6;
  const os_unfair_lock *v7;
  void *v8;
  const __CFSet *v9;
  const os_unfair_lock *v10;
  void *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  _QWORD v14[4];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;

  _CalEventOccurrenceCacheStopTrackingUpdatesInternal((uint64_t)a1);
  v4 = a1[12];
  if (v4 && CFSetGetCount(v4) >= 1)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a2)
        {
          if (*(_QWORD *)(*a2 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    v6 = (void *)CPSqliteConnectionStatementForSQL();
    if (v6)
      CFSetApplyFunction(a1[12], (CFSetApplierFunction)_CalEventOccurrenceCacheProcessDeletes, v6);
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a2)
        {
          if (*(_QWORD *)(*a2 + 104))
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
    }
    v8 = (void *)CPSqliteConnectionStatementForSQL();
    if (v8)
      CFSetApplyFunction(a1[12], (CFSetApplierFunction)_CalEventOccurrenceCacheProcessDeletes, v8);
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DELETE FROM OccurrenceCacheDays WHERE count = 0;"));
    CFSetRemoveAllValues(a1[12]);
  }
  v9 = a1[14];
  if (v9 && CFSetGetCount(v9) >= 1)
  {
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*a2)
        {
          if (*(_QWORD *)(*a2 + 104))
          {
            v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10)
              os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
    }
    v11 = (void *)CPSqliteConnectionStatementForSQL();
    if (v11)
      CFSetApplyFunction(a1[14], (CFSetApplierFunction)_CalEventOccurrenceCacheProcessDeletes, v11);
    CFSetRemoveAllValues(a1[14]);
  }
  v20 = 0;
  v21 = 0;
  v14[0] = a1;
  v14[1] = &v21;
  v14[2] = &v20;
  v14[3] = a2;
  v15 = *MEMORY[0x1E0D0C490];
  v16 = v15;
  v17 = v15;
  v18 = v15;
  v19 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v12 = a1[11];
  if (v12 && CFDictionaryGetCount(v12) >= 1)
  {
    CFDictionaryApplyFunction(a1[11], (CFDictionaryApplierFunction)_CalEventOccurrenceCacheProcessAdds, v14);
    CFDictionaryRemoveAllValues(a1[11]);
  }
  v13 = a1[13];
  if (v13)
  {
    if (CFDictionaryGetCount(v13) >= 1)
    {
      CFDictionaryApplyFunction(a1[13], (CFDictionaryApplierFunction)_CalEventAlarmCacheProcessAdds, v14);
      CFDictionaryRemoveAllValues(a1[13]);
    }
  }
}

uint64_t _CalEventOccurrenceCacheMigrateEventOccurrencesWithConnection(uint64_t a1, _QWORD *a2)
{
  uint64_t ID;
  uint64_t v4;
  const __CFAllocator *v5;
  uint64_t result;
  const void *v7;
  const void *v8;

  ID = CPRecordGetID();
  v4 = CPRecordGetID();
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE OccurrenceCacheDays SET store_id = %d WHERE store_id = %d;"),
                      v4,
                      ID);
  if (result)
  {
    v7 = (const void *)result;
    CalPerformSQLWithConnection(a2, result);
    CFRelease(v7);
    result = (uint64_t)CFStringCreateWithFormat(v5, 0, CFSTR("UPDATE OccurrenceCache SET store_id = %d WHERE store_id = %d;"),
                        v4,
                        ID);
    if (result)
    {
      v8 = (const void *)result;
      CalPerformSQLWithConnection(a2, result);
      CFRelease(v8);
      return 1;
    }
  }
  return result;
}

uint64_t _CalEventOccurrenceCacheMigrateEventOccurrencesBetweenCalendars(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  const __CFAllocator *v7;
  uint64_t result;
  const void *v9;
  const void *v10;

  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("UPDATE OccurrenceCacheDays SET calendar_id = %d WHERE calendar_id = %d;"),
                      a4,
                      a3);
  if (result)
  {
    v9 = (const void *)result;
    CalPerformSQLWithConnection(a2, result);
    CFRelease(v9);
    result = (uint64_t)CFStringCreateWithFormat(v7, 0, CFSTR("UPDATE OccurrenceCache SET calendar_id = %d WHERE calendar_id = %d;"),
                        a4,
                        a3);
    if (result)
    {
      v10 = (const void *)result;
      CalPerformSQLWithConnection(a2, result);
      CFRelease(v10);
      return 1;
    }
  }
  return result;
}

uint64_t _CalEventOccurrenceCacheGenerateOccurrencesInDateRange(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  double Current;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  void *v37;
  void *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  __CFArray *Mutable;
  void *v43;
  void *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  double v48;
  id v49;
  uint64_t GlobalDefaultTimedAlarmOffset;
  uint64_t GlobalDefaultAllDayAlarmOffset;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  CFIndex Count;
  __int128 v57;
  CFIndex v58;
  CFIndex v59;
  double v60;
  void *v61;
  const void *ValueAtIndex;
  void *v63;
  void *v64;
  NSObject *v65;
  void *v66;
  const void *v67;
  void *v68;
  id v69;
  double v70;
  void *v71;
  NSObject *v72;
  void *v73;
  void *v74;
  NSObject *v75;
  void *v76;
  _BOOL8 IsReminderIntegrationEvent;
  void *v78;
  __CFArray *v79;
  void *v80;
  void *v81;
  void *v82;
  NSObject *v83;
  void *v84;
  void *v85;
  CFIndex v86;
  void *v87;
  unsigned int ID;
  void *v89;
  void *v90;
  NSObject *v91;
  CFTypeRef DebugDescription;
  double EndDate;
  CFIndex v94;
  uint64_t v95;
  id v96;
  double v97;
  void *v98;
  double v99;
  double v100;
  uint64_t MostExtremeAlarmDates;
  void *v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  void *v107;
  void *v108;
  NSObject *v109;
  void *v110;
  void *v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  NSObject *v120;
  uint64_t v121;
  void *v122;
  NSObject *v123;
  CFAbsoluteTime v124;
  void *v125;
  __int128 v127;
  void *v128;
  id v129;
  id v130;
  __CFArray *v131;
  id v132;
  void *v133;
  CFIndex v134;
  void *v135;
  CFIndex v136;
  void *v137;
  void *v138;
  const __CFString *cf;
  void *v140;
  _BOOL4 IsAllDay;
  int v142;
  _BOOL4 v143;
  uint64_t DayCount;
  CFArrayRef theArray;
  CFIndex v146;
  char context;
  void *contexta;
  unsigned int CalendarId;
  id v152;
  unsigned int StoreId;
  unsigned int v154;
  const void *v155;
  void *v156;
  double v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint8_t v163[4];
  CFIndex v164;
  __int16 v165;
  void *v166;
  __int16 v167;
  void *v168;
  _BYTE buf[24];
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  CFRange v178;
  CFRange v179;

  v177 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v152 = a4;
  v10 = a5;
  v11 = a6;
  v12 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v152;
    _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_DEBUG, "Rebuilding occurrence cache from start date [%@] to end date [%@].", buf, 0x16u);
  }
  Current = CFAbsoluteTimeGetCurrent();
  _CalEventOccurrenceCacheLoadInfo(a1);
  CFAbsoluteTimeGetCurrent();
  cf = (const __CFString *)CalCFTimeZoneCopyCalTimeZone();
  _CalEventOccurrenceCacheGetCacheCalendar(a1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianGMTCalendar");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "timeZone");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "timeZone");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "dateInTimeZone:fromTimeZone:", v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v135 = v15;
  objc_msgSend(v15, "timeZone");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v156 = v14;
  objc_msgSend(v14, "timeZone");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v152, "dateInTimeZone:fromTimeZone:", v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = (void *)CalFilterCreateWithDatabaseShowingAllIncludingDisabledStores(*(_QWORD *)(a1 + 24));
  v23 = *(_QWORD *)(a1 + 24);
  objc_msgSend(v9, "timeIntervalSinceReferenceDate");
  objc_msgSend(v152, "timeIntervalSinceReferenceDate");
  v138 = v18;
  objc_msgSend(v18, "timeIntervalSinceReferenceDate");
  v137 = v21;
  objc_msgSend(v21, "timeIntervalSinceReferenceDate");
  v24 = (void *)_CalDatabaseCopyNonRecurringEventsInDateRange(v23, a2, v22);
  v25 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    v26 = (void *)MEMORY[0x1E0CB37E8];
    v27 = v25;
    objc_msgSend(v26, "numberWithUnsignedInteger:", objc_msgSend(v24, "count"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v28;
    _os_log_impl(&dword_1A5CCB000, v27, OS_LOG_TYPE_DEBUG, "Found [%@] non-recurring events in the date range.", buf, 0xCu);

  }
  v29 = *(_QWORD *)(a1 + 24);
  objc_msgSend(v9, "timeIntervalSinceReferenceDate");
  v31 = v30;
  objc_msgSend(v152, "timeIntervalSinceReferenceDate");
  v33 = v32;
  objc_msgSend(v18, "timeIntervalSinceReferenceDate");
  v35 = v34;
  objc_msgSend(v137, "timeIntervalSinceReferenceDate");
  v37 = (void *)_CalDatabaseCopyRecurringEventsPossiblyOccurringInDateRange(v29, v22, cf, v31, v33, v35, v36);
  v38 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    v39 = (void *)MEMORY[0x1E0CB37E8];
    v40 = v38;
    objc_msgSend(v39, "numberWithUnsignedInteger:", objc_msgSend(v37, "count"));
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v41;
    _os_log_impl(&dword_1A5CCB000, v40, OS_LOG_TYPE_DEBUG, "Found [%@] recurring events possibly in the date range.", buf, 0xCu);

  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    if (v24)
    {
      v178.length = CFArrayGetCount((CFArrayRef)v24);
      v178.location = 0;
      CFArrayAppendArray(Mutable, (CFArrayRef)v24, v178);
    }
    if (v37)
    {
      v179.length = CFArrayGetCount((CFArrayRef)v37);
      v179.location = 0;
      CFArrayAppendArray(Mutable, (CFArrayRef)v37, v179);
    }
  }
  if (v24)
    CFRelease(v24);
  if (v37)
    CFRelease(v37);
  CFRelease(v22);
  v43 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    v44 = (void *)MEMORY[0x1E0CB37E8];
    v45 = v43;
    objc_msgSend(v44, "numberWithDouble:", CFAbsoluteTimeGetCurrent() - Current);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[__CFArray count](Mutable, "count"));
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v46;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v47;
    _os_log_impl(&dword_1A5CCB000, v45, OS_LOG_TYPE_DEBUG, "Occurrence cache candidate event fetching took [%@] seconds and found [%@] total events.", buf, 0x16u);

  }
  v48 = CFAbsoluteTimeGetCurrent();
  if (Mutable)
  {
    v49 = *(id *)(*(_QWORD *)(a1 + 24) + 296);
    GlobalDefaultTimedAlarmOffset = CalAlarmGetGlobalDefaultTimedAlarmOffset(v49);
    v128 = v49;
    GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v49);
    v162 = 0;
    *(_QWORD *)buf = a1;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = &v162;
    v170 = a2;
    objc_msgSend(v9, "timeIntervalSinceReferenceDate");
    v171 = v52;
    objc_msgSend(v152, "timeIntervalSinceReferenceDate");
    v172 = v53;
    v130 = v10;
    objc_msgSend(v10, "timeIntervalSinceReferenceDate");
    v173 = v54;
    v129 = v11;
    objc_msgSend(v11, "timeIntervalSinceReferenceDate");
    v174 = v55;
    v175 = GlobalDefaultTimedAlarmOffset;
    v176 = GlobalDefaultAllDayAlarmOffset;
    Count = CFArrayGetCount(Mutable);
    v161 = 0;
    if (Count < 1)
    {
      context = 0;
    }
    else
    {
      v58 = Count;
      context = 0;
      v59 = 0;
      v60 = *MEMORY[0x1E0D0C490];
      *(_QWORD *)&v57 = 134218240;
      v127 = v57;
      v136 = Count;
      v131 = Mutable;
      v132 = v9;
      do
      {
        v61 = (void *)MEMORY[0x1A85B514C]();
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v59);
        v63 = (void *)CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
        {
          v64 = (void *)MEMORY[0x1E0CB37E8];
          v65 = v63;
          objc_msgSend(v64, "numberWithInt:", CPRecordGetID());
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = ValueAtIndex;
          v68 = (void *)_CalEventCopySummary((uint64_t)ValueAtIndex);
          *(_DWORD *)v163 = 138412546;
          v164 = (CFIndex)v66;
          v165 = 2112;
          v166 = v68;
          _os_log_impl(&dword_1A5CCB000, v65, OS_LOG_TYPE_DEBUG, "Analyzing occurrence cache candidate event.   Row ID: [%@]  Title: [%@]", v163, 0x16u);

          ValueAtIndex = v67;
        }
        if ((_CalEventIsDisplayable((uint64_t)ValueAtIndex) & 1) != 0)
        {
          v140 = v61;
          v69 = v9;
          v70 = COERCE_DOUBLE(_CalEventGetStartDate((uint64_t)ValueAtIndex));
          _CalEventOccurrenceCacheLoadInfo(a1);
          v71 = v69;
          DayCount = _CalEventGetDayCount((uint64_t)ValueAtIndex, *(const __CFTimeZone **)(a1 + 32));
          if ((int)DayCount < 2
            || (objc_msgSend(v69, "dateByAddingDays:inCalendar:", 1 - (int)DayCount, v156),
                v71 = (void *)objc_claimAutoreleasedReturnValue(),
                v69,
                DayCount < 0x186A1))
          {
            IsReminderIntegrationEvent = _CalEventIsReminderIntegrationEvent((uint64_t)ValueAtIndex);
            objc_msgSend(v156, "timeZone");
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            v143 = IsReminderIntegrationEvent;
            v79 = _CalEventCopyOccurrenceDatesInDateRange((uint64_t)ValueAtIndex, v71, v152, v78, IsReminderIntegrationEvent);

            theArray = v79;
            if (v79)
            {
              v155 = ValueAtIndex;
              v80 = (void *)CDBLogHandle;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
              {
                v81 = v71;
                v82 = (void *)MEMORY[0x1E0CB37E8];
                v83 = v80;
                objc_msgSend(v82, "numberWithUnsignedInteger:", -[__CFArray count](theArray, "count"));
                v84 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", CPRecordGetID());
                v85 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", DayCount);
                v86 = v59;
                v87 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v163 = 138412802;
                v164 = (CFIndex)v84;
                v165 = 2112;
                v166 = v85;
                v167 = 2112;
                v168 = v87;
                _os_log_impl(&dword_1A5CCB000, v83, OS_LOG_TYPE_DEBUG, "Found [%@] occurrence dates in the date range for candidate event with row ID [%@].  Number of days spanned: [%@]", v163, 0x20u);

                v59 = v86;
                v71 = v81;

                v58 = v136;
              }
              v146 = CFArrayGetCount(theArray);
              if (v146 * (int)DayCount >= 100001)
              {
                v120 = CDBLogHandle;
                if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v163 = v127;
                  v164 = v146;
                  v165 = 1024;
                  LODWORD(v166) = DayCount;
                  _os_log_impl(&dword_1A5CCB000, v120, OS_LOG_TYPE_ERROR, "EventKitOC: Event duration is too long, not adding to occurrence cache (asked to add %li occurrences each with %i days).", v163, 0x12u);
                }
              }
              else
              {
                ID = CPRecordGetID();
                CalendarId = _CalEventGetCalendarId((uint64_t)v155);
                StoreId = _CalCalendarItemGetStoreId((uint64_t)v155);
                IsAllDay = _CalEventIsAllDay((uint64_t)v155);
                v89 = (void *)_CalEventCopyTravelTime((uint64_t)v155);
                v142 = objc_msgSend(v89, "intValue");

                v159 = 0;
                v160 = 0;
                _CalEventGetLargestPossibleAlarmOffsets((uint64_t)v155, &v160, &v159);
                v154 = ID;
                if (ID == -1)
                {
                  v90 = (void *)CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
                  {
                    v91 = v90;
                    DebugDescription = _CalEntityGetDebugDescription(v155);
                    *(_DWORD *)v163 = 138412290;
                    v164 = (CFIndex)DebugDescription;
                    _os_log_impl(&dword_1A5CCB000, v91, OS_LOG_TYPE_ERROR, "Inserting an event with id -1 into the occurrence cache in _CalEventOccurrenceCacheGenerateOccurrencesInDateRange. event=%@", v163, 0xCu);

                  }
                  _CalDatabaseIntegrityError(*(_QWORD *)(a1 + 24), CFSTR("Insert Corrupt Occurrence - GenerateOccurrences"));
                }
                EndDate = _CalRecurrenceGetEndDate((uint64_t)v155);
                if (v146 >= 1)
                {
                  v133 = v71;
                  v134 = v59;
                  v94 = 0;
                  v95 = (uint64_t)(EndDate - v70);
                  do
                  {
                    contexta = (void *)MEMORY[0x1A85B514C]();
                    CFArrayGetValueAtIndex(theArray, v94);
                    v96 = (id)objc_claimAutoreleasedReturnValue();
                    v97 = v60;
                    if (v143)
                    {
                      v97 = v60;
                      if (v94 + 1 < v146)
                      {
                        CFArrayGetValueAtIndex(theArray, v94 + 1);
                        v98 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v98, "timeIntervalSinceReferenceDate");
                        v97 = v99;

                      }
                    }
                    v157 = 0.0;
                    v158 = 0.0;
                    objc_msgSend(v96, "timeIntervalSinceReferenceDate", v127);
                    MostExtremeAlarmDates = _CalEventOccurrenceCacheGetMostExtremeAlarmDates(v160, v159, v142, &v158, &v157, v100);
                    v102 = v96;
                    if ((int)DayCount >= 1)
                    {
                      v103 = 0;
                      v102 = v96;
                      do
                      {
                        v104 = (void *)MEMORY[0x1A85B514C](MostExtremeAlarmDates);
                        if (v103)
                        {
                          objc_msgSend(v96, "dateByAddingDays:inCalendar:", v103, v156);
                          v105 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v156, "startOfDayForDate:", v105);
                          v106 = objc_claimAutoreleasedReturnValue();

                          v102 = (void *)v106;
                        }
                        v107 = (void *)CDBLogHandle;
                        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
                        {
                          v108 = (void *)MEMORY[0x1E0CB37E8];
                          v109 = v107;
                          objc_msgSend(v108, "numberWithInt:", CPRecordGetID());
                          v110 = (void *)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)v163 = 138412546;
                          v164 = (CFIndex)v102;
                          v165 = 2112;
                          v166 = v110;
                          _os_log_impl(&dword_1A5CCB000, v109, OS_LOG_TYPE_DEBUG, "Determining if occurrence chunk with date [%@] for event with row ID [%@] should be included in the occurrence cache.", v163, 0x16u);

                        }
                        if (objc_msgSend(v102, "CalIsAfterOrSameAsDate:", v69))
                        {
                          if ((objc_msgSend(v102, "CalIsAfterOrSameAsDate:", v152) & 1) != 0)
                          {
                            objc_autoreleasePoolPop(v104);
                            break;
                          }
                          objc_msgSend(v96, "CalDateByComponentwiseAddingSeconds:inCalendar:", v95, v156);
                          v111 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v102, "timeIntervalSinceReferenceDate");
                          v113 = v112;
                          v114 = v60;
                          if (v103)
                          {
                            objc_msgSend(v96, "timeIntervalSinceReferenceDate");
                            v114 = v115;
                          }
                          objc_msgSend(v111, "timeIntervalSinceReferenceDate");
                          if (v103)
                            v117 = v60;
                          else
                            v117 = v158;
                          if (v103)
                            v118 = v60;
                          else
                            v118 = v157;
                          _CalEventOccurrenceCacheInsertOccurrence(a1, a2, &v161, (void *)v154, (void *)CalendarId, (void *)StoreId, v113, v114, v116, v97, v117, v118);

                        }
                        objc_autoreleasePoolPop(v104);
                        ++v103;
                      }
                      while (DayCount != v103);
                    }
                    objc_msgSend(v96, "timeIntervalSinceReferenceDate");
                    _CalAlarmCacheProcessAddedEvent((double *)buf, (uint64_t)v155, v154, StoreId, IsAllDay, v142, v119);

                    objc_autoreleasePoolPop(contexta);
                    ++v94;
                  }
                  while (v94 != v146);
                  context = 1;
                  Mutable = v131;
                  v9 = v132;
                  v58 = v136;
                  v71 = v133;
                  v59 = v134;
                }
              }
              CFRelease(theArray);
            }
          }
          else
          {
            v72 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v163 = 67109120;
              LODWORD(v164) = DayCount;
              _os_log_impl(&dword_1A5CCB000, v72, OS_LOG_TYPE_ERROR, "EventKitOC: Event duration is too long, not adding to occurrence cache (asked to add occurrences with %i days each).", v163, 8u);
            }
          }
          v61 = v140;

        }
        else
        {
          v73 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
          {
            v74 = (void *)MEMORY[0x1E0CB37E8];
            v75 = v73;
            objc_msgSend(v74, "numberWithInt:", CPRecordGetID());
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v163 = 138412290;
            v164 = (CFIndex)v76;
            _os_log_impl(&dword_1A5CCB000, v75, OS_LOG_TYPE_DEBUG, "Event with row ID [%@] is not displayable.  Will not insert into occurrence cache.", v163, 0xCu);

          }
        }
        objc_autoreleasePoolPop(v61);
        ++v59;
      }
      while (v59 != v58);
    }
    CFRelease(Mutable);

    v121 = context & 1;
    v11 = v129;
    v10 = v130;
  }
  else
  {
    v121 = 0;
  }
  v122 = (void *)CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
  {
    v123 = v122;
    v124 = CFAbsoluteTimeGetCurrent() - v48;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v121);
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218242;
    *(CFAbsoluteTime *)&buf[4] = v124;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v125;
    _os_log_impl(&dword_1A5CCB000, v123, OS_LOG_TYPE_DEBUG, "Occurrence cache rebuilt.  Took [%f] seconds.  Was cache modified: [%@]", buf, 0x16u);

  }
  CFRelease(cf);

  return v121;
}

uint64_t _CalAlarmCacheGenerateAlarmsInDateRange(uint64_t a1, sqlite3 **a2, void *a3, void *a4, id *a5)
{
  id v9;
  id v10;
  NSObject *v11;
  double Current;
  id v13;
  id v14;
  const os_unfair_lock *Context;
  uint64_t Database;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t GlobalDefaultTimedAlarmOffset;
  void *GlobalDefaultAllDayAlarmOffset;
  int v23;
  NSObject *v24;
  const char *v25;
  uint8_t *v26;
  int function;
  _BOOL4 v28;
  id v29;
  id v30;
  double v31;
  double v32;
  id v33;
  id v34;
  const os_unfair_lock *v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  _BOOL4 v45;
  id v46;
  id v47;
  const os_unfair_lock *v48;
  uint64_t v49;
  const os_unfair_lock *v50;
  uint64_t **v51;
  uint64_t v52;
  const os_unfair_lock *v53;
  uint64_t v54;
  const os_unfair_lock *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  NSObject *v64;
  double v65;
  void *v66;
  const os_unfair_lock *v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t v71;
  const os_unfair_lock *v72;
  uint64_t v73;
  const os_unfair_lock *v74;
  const os_unfair_lock *v75;
  uint64_t v76;
  uint64_t **v77;
  uint64_t v78;
  const os_unfair_lock *v79;
  uint64_t v80;
  const os_unfair_lock *v81;
  id v82[7];
  uint64_t v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  _BYTE buf[24];
  sqlite3 **v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t pApp;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  CFDictionaryRef theDict;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = (id)CDBLogHandle;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v10;
    _os_log_impl(&dword_1A5CCB000, v11, OS_LOG_TYPE_DEBUG, "Rebuilding alarm cache from start date [%{public}@] to end date [%{public}@].", buf, 0x16u);
  }

  Current = CFAbsoluteTimeGetCurrent();
  v13 = v9;
  v14 = v10;
  if (!_CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24)))
    goto LABEL_15;
  if (CDBLockingAssertionsEnabled)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_15;
  objc_msgSend(v13, "timeIntervalSinceReferenceDate");
  v18 = v17;
  objc_msgSend(v14, "timeIntervalSinceReferenceDate");
  v20 = v19;
  GlobalDefaultTimedAlarmOffset = CalAlarmGetGlobalDefaultTimedAlarmOffset(*(void **)(*(_QWORD *)(a1 + 24) + 296));
  GlobalDefaultAllDayAlarmOffset = (void *)CalAlarmGetGlobalDefaultAllDayAlarmOffset(*(void **)(*(_QWORD *)(a1 + 24)
                                                                                              + 296));
  pApp = GlobalDefaultTimedAlarmOffset;
  v98 = GlobalDefaultAllDayAlarmOffset;
  v23 = sqlite3_create_function(a2[1], "ALARM_FIRE_DATE", 7, 526337, &pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_AlarmFireDateCallback, 0, 0);
  if (v23)
  {
    v24 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v23;
      v25 = "Failed to create ALARM_FIRE_DATE function in _CalAlarmCacheGenerateAlarmsForEventsInOccurrenceCacheInDateRan"
            "ge, with error code: %i";
      v26 = buf;
LABEL_14:
      _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_ERROR, v25, v26, 8u);
      goto LABEL_15;
    }
    goto LABEL_15;
  }
  *(double *)buf = v18;
  *(double *)&buf[8] = v20;
  *(_QWORD *)&buf[16] = GlobalDefaultTimedAlarmOffset;
  v90 = (sqlite3 **)GlobalDefaultAllDayAlarmOffset;
  function = sqlite3_create_function(a2[1], "ALARM_SHOULD_BE_IN_CACHE", 7, 526337, buf, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_AlarmShouldBeInCacheCallback, 0, 0);
  if (function)
  {
    v24 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v84) = 67109120;
      HIDWORD(v84) = function;
      v25 = "Failed to create ALARM_SHOULD_BE_IN_CACHE function in _CalAlarmCacheGenerateAlarmsForEventsInOccurrenceCache"
            "InDateRange, with error code: %i";
      v26 = (uint8_t *)&v84;
      goto LABEL_14;
    }
LABEL_15:
    v28 = 0;
    goto LABEL_16;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v75 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v75)
        os_unfair_lock_assert_owner(v75 + 20);
    }
  }
  v76 = CPSqliteDatabaseStatementForWriting();
  v77 = (uint64_t **)v76;
  if (v76)
  {
    sqlite3_bind_double(*(sqlite3_stmt **)(v76 + 8), 1, v18);
    sqlite3_bind_double((sqlite3_stmt *)v77[1], 2, v20);
    sqlite3_bind_double((sqlite3_stmt *)v77[1], 3, v18);
    sqlite3_bind_double((sqlite3_stmt *)v77[1], 4, v20);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v77)
      {
        v78 = **v77;
        if (v78)
        {
          if (*(_QWORD *)(v78 + 104))
          {
            v79 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v79)
              os_unfair_lock_assert_owner(v79 + 20);
          }
        }
      }
    }
    CPSqliteStatementPerform();
    v28 = sqlite3_changes((sqlite3 *)(*v77)[1]) > 0;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v77)
      {
        v80 = **v77;
        if (v80)
        {
          if (*(_QWORD *)(v80 + 104))
          {
            v81 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v81)
              os_unfair_lock_assert_owner(v81 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    v28 = 0;
  }
  sqlite3_create_function(a2[1], "ALARM_FIRE_DATE", 7, 526337, 0, 0, 0, 0);
  sqlite3_create_function(a2[1], "ALARM_SHOULD_BE_IN_CACHE", 7, 526337, 0, 0, 0, 0);
LABEL_16:

  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)v82, (uint64_t)a5);
  v29 = v13;
  v30 = v14;
  _CalEventOccurrenceCacheLoadInfo(a1);
  if (CalEventOccurrenceCacheGetLongAlarmIntervals_onceToken != -1)
    dispatch_once(&CalEventOccurrenceCacheGetLongAlarmIntervals_onceToken, &__block_literal_global_23);
  v31 = *(double *)&CalEventOccurrenceCacheGetLongAlarmIntervals_longNegativeInterval;
  v32 = *(double *)&CalEventOccurrenceCacheGetLongAlarmIntervals_longPositiveInterval;
  v33 = v29;
  v34 = v30;
  if (!_CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24)))
    goto LABEL_26;
  if (CDBLockingAssertionsEnabled)
  {
    v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v35)
      os_unfair_lock_assert_owner(v35 + 20);
  }
  v36 = CPRecordStoreGetDatabase();
  if (!v36)
    goto LABEL_26;
  objc_msgSend(v33, "timeIntervalSinceReferenceDate");
  v38 = v37;
  objc_msgSend(v34, "timeIntervalSinceReferenceDate");
  v40 = v39;
  v41 = CalAlarmGetGlobalDefaultTimedAlarmOffset(*(void **)(*(_QWORD *)(a1 + 24) + 296));
  v42 = CalAlarmGetGlobalDefaultAllDayAlarmOffset(*(void **)(*(_QWORD *)(a1 + 24) + 296));
  *(_QWORD *)buf = v41;
  *(_QWORD *)&buf[8] = v42;
  v43 = sqlite3_create_function(a2[1], "ALARM_FIRE_DATE", 7, 526337, buf, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_AlarmFireDateCallback, 0, 0);
  if (v43)
  {
    v44 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LODWORD(pApp) = 67109120;
      HIDWORD(pApp) = v43;
      _os_log_impl(&dword_1A5CCB000, v44, OS_LOG_TYPE_ERROR, "Failed to create ALARM_FIRE_DATE function in _CalAlarmCacheGenerateAlarmsForNonRecurringEventsNotInOccurrenceCacheInDateRange, with error code: %i", (uint8_t *)&pApp, 8u);
    }
LABEL_26:
    v45 = 0;
    goto LABEL_27;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(v36 + 104))
    {
      v68 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v68)
        os_unfair_lock_assert_owner(v68 + 20);
    }
  }
  v69 = CPSqliteDatabaseStatementForWriting();
  v70 = (uint64_t **)v69;
  if (v69)
  {
    sqlite3_bind_double(*(sqlite3_stmt **)(v69 + 8), 1, v38);
    sqlite3_bind_double((sqlite3_stmt *)v70[1], 2, v40);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v70)
      {
        v71 = **v70;
        if (v71)
        {
          if (*(_QWORD *)(v71 + 104))
          {
            v72 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v72)
              os_unfair_lock_assert_owner(v72 + 20);
          }
        }
      }
    }
    CPSqliteStatementPerform();
    v45 = sqlite3_changes((sqlite3 *)(*v70)[1]) > 0;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v70)
      {
        v73 = **v70;
        if (v73)
        {
          if (*(_QWORD *)(v73 + 104))
          {
            v74 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v74)
              os_unfair_lock_assert_owner(v74 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    v45 = 0;
  }
  sqlite3_create_function(a2[1], "ALARM_FIRE_DATE", 7, 526337, 0, 0, 0, 0);
LABEL_27:

  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w16((uint64_t)&v84, (uint64_t)v82);
  v46 = v33;
  v47 = v34;
  if (!_CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24)))
    goto LABEL_52;
  if (CDBLockingAssertionsEnabled)
  {
    v48 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v48)
      os_unfair_lock_assert_owner(v48 + 20);
  }
  v49 = CPRecordStoreGetDatabase();
  if (v49)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v49 + 104))
      {
        v50 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v50)
          os_unfair_lock_assert_owner(v50 + 20);
      }
    }
    v51 = (uint64_t **)CPSqliteDatabaseStatementForReading();
    if (v51)
    {
      pApp = *(_QWORD *)(a1 + 24);
      v98 = v46;
      v99 = v47;
      v100 = (uint64_t)v31;
      v101 = (uint64_t)v32;
      v102 = *(id *)(a1 + 32);
      theDict = 0;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v51)
        {
          v52 = **v51;
          if (v52)
          {
            if (*(_QWORD *)(v52 + 104))
            {
              v53 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v53)
                os_unfair_lock_assert_owner(v53 + 20);
            }
          }
        }
      }
      CPSqliteStatementSendResults();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v51)
        {
          v54 = **v51;
          if (v54)
          {
            if (*(_QWORD *)(v54 + 104))
            {
              v55 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v55)
                os_unfair_lock_assert_owner(v55 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
      v56 = CalAlarmGetGlobalDefaultTimedAlarmOffset(*(void **)(*(_QWORD *)(a1 + 24) + 296));
      v57 = CalAlarmGetGlobalDefaultAllDayAlarmOffset(*(void **)(*(_QWORD *)(a1 + 24) + 296));
      v83 = 0;
      *(_QWORD *)buf = a1;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = &v83;
      v90 = a2;
      objc_msgSend(v85, "timeIntervalSinceReferenceDate");
      v91 = v58;
      objc_msgSend(v86, "timeIntervalSinceReferenceDate");
      v92 = v59;
      objc_msgSend(v87, "timeIntervalSinceReferenceDate");
      v93 = v60;
      objc_msgSend(v88, "timeIntervalSinceReferenceDate");
      v94 = v61;
      v95 = v56;
      v96 = v57;
      v62 = theDict != 0;
      if (theDict)
      {
        CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_CalEventAlarmCacheProcessAdds, buf);
        CFRelease(theDict);
      }

    }
    else
    {
      v62 = 0;
    }
  }
  else
  {
LABEL_52:
    v62 = 0;
  }
  __destructor_8_s0_s8_s16_s24_s32(&v84);

  __destructor_8_s0_s8_s16_s24_s32(v82);
  v63 = v28 | v45 | v62;
  v64 = (id)CDBLogHandle;
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
  {
    v65 = CFAbsoluteTimeGetCurrent();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v63);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218242;
    *(double *)&buf[4] = v65 - Current;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v66;
    _os_log_impl(&dword_1A5CCB000, v64, OS_LOG_TYPE_DEBUG, "Alarm cache extended.  Took [%f] seconds.  Was cache modified: [%@]", buf, 0x16u);

  }
  __destructor_8_s0_s8_s16_s24_s32(a5);

  return v63;
}

void sub_1A5D793D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  id *v35;

  __destructor_8_s8_s16_s40(&a35);
  __destructor_8_s0_s8_s16_s24_s32(&a17);
  __destructor_8_s0_s8_s16_s24_s32(&a9);
  __destructor_8_s0_s8_s16_s24_s32(v35);
  _Unwind_Resume(a1);
}

uint64_t _CalEventGetDayCount(uint64_t a1, const __CFTimeZone *a2)
{
  const __CFTimeZone *v3;
  const __CFTimeZone *v4;
  double v5;
  CFAbsoluteTime v6;
  CFAbsoluteTime v7;
  SInt32 days;
  CFGregorianUnits v10;

  if (!a2 || (v3 = a2, _CalEventIsAllDay(a1)) || _CalCalendarItemIsFloating(a1))
  {
    v4 = (const __CFTimeZone *)CalTimeZoneCopyCFTimeZone();
    v3 = v4;
  }
  else
  {
    v4 = 0;
  }
  _CalEventGetStartDate(a1);
  _CalRecurrenceGetEndDate(a1);
  _CalEventIsAllDay(a1);
  CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
  CalGregorianDateGetGregorianDateForDay();
  CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
  CalGregorianDateGetGregorianDateForDay();
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  v6 = v5;
  CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
  CFAbsoluteTimeGetDifferenceAsGregorianUnits(&v10, v7, v6, v3, 4uLL);
  days = v10.days;
  if (v4)
    CFRelease(v4);
  return (days & ~(days >> 31)) + 1;
}

uint64_t _CalEventOccurrenceCacheGetMostExtremeAlarmDates(uint64_t result, uint64_t a2, uint64_t a3, double *a4, double *a5, double a6)
{
  double *v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;

  v6 = (double *)MEMORY[0x1E0D0C490];
  if (result == 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = *MEMORY[0x1E0D0C490];
  }
  else
  {
    v8 = result + 3600;
    if (result <= 32399)
      v8 = result;
    if (v8 < -53999)
      v8 -= 3600;
    v7 = a6 - (double)a3 + (double)v8;
  }
  *a4 = v7;
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v9 = *v6;
  }
  else
  {
    v10 = a2 + 3600;
    if (a2 <= 32399)
      v10 = a2;
    if (v10 < -53999)
      v10 -= 3600;
    v9 = a6 - (double)a3 + (double)v10;
  }
  *a5 = v9;
  return result;
}

void _CalEventOccurrenceCacheInsertOccurrence(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, void *a5, void *a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  void *v14;
  double v24;
  double v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  const os_unfair_lock *Context;
  uint64_t v33;
  const os_unfair_lock *v34;
  double v35;
  sqlite3_stmt *v36;
  NSObject *v37;
  sqlite3_stmt *v38;
  uint64_t **v39;
  uint64_t v40;
  const os_unfair_lock *v41;
  NSObject *v42;
  uint64_t **v43;
  uint64_t v44;
  const os_unfair_lock *v45;
  void *v46;
  NSObject *log;
  int v48;
  int v49;
  int v50;
  uint8_t buf[4];
  _BYTE v52[10];
  void *v53;
  _BYTE v54[10];
  _BYTE v55[10];
  _BYTE v56[10];
  _BYTE v57[10];
  __int16 v58;
  void *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4 == -1)
  {
    v37 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v37, OS_LOG_TYPE_ERROR, "Skipping occurrence cache insert for event with id == -1", buf, 2u);
    }
  }
  else
  {
    v14 = a4;
    _CalEventOccurrenceCacheLoadInfo(a1);
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    CalGregorianDateGetGregorianDateForDay();
    _CalEventOccurrenceCacheLoadInfo(a1);
    EKGregorianDateGetAbsoluteTimeWithCFTimeZone();
    v25 = v24;
    v26 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
    {
      v27 = (void *)MEMORY[0x1E0CB37E8];
      log = v26;
      objc_msgSend(v27, "numberWithInt:", v14);
      v48 = (int)v14;
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = (int)a5;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a5);
      a5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a6);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = (int)a6;
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a7);
      v49 = v28;
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a8);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a9);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v25);
      a6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413826;
      *(_QWORD *)v52 = v14;
      *(_WORD *)&v52[8] = 2112;
      v53 = a5;
      *(_WORD *)v54 = 2112;
      *(_QWORD *)&v54[2] = v29;
      *(_WORD *)v55 = 2112;
      *(_QWORD *)&v55[2] = v46;
      *(_WORD *)v56 = 2112;
      *(_QWORD *)&v56[2] = v30;
      *(_WORD *)v57 = 2112;
      *(_QWORD *)&v57[2] = v31;
      v58 = 2112;
      v59 = a6;
      _os_log_impl(&dword_1A5CCB000, log, OS_LOG_TYPE_DEBUG, "Inserting occurrence into occurrence cache.  event_id: [%@],  calendar_id: [%@], store_id: [%@], occurrence_date: [%@], occurrence_start_date: [%@].  occurrence_end_date: [%@], day: [%@]", buf, 0x48u);

      LODWORD(v14) = v48;
      LODWORD(a6) = v50;

      LODWORD(a5) = v49;
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
    if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF)
      NSLog(CFSTR("EventKitOC: *** ERROR *** No transaction is in effect! This may end poorly."));
    v33 = *a3;
    if (*a3)
      goto LABEL_20;
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_QWORD *)(*(_QWORD *)a2 + 104))
          {
            v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v34)
              os_unfair_lock_assert_owner(v34 + 20);
          }
        }
      }
    }
    v33 = CPSqliteConnectionStatementForSQL();
    *a3 = v33;
    if (v33)
    {
LABEL_20:
      sqlite3_bind_double(*(sqlite3_stmt **)(v33 + 8), 1, v25);
      sqlite3_bind_int(*(sqlite3_stmt **)(*a3 + 8), 2, (int)v14);
      sqlite3_bind_int(*(sqlite3_stmt **)(*a3 + 8), 3, (int)a5);
      sqlite3_bind_int(*(sqlite3_stmt **)(*a3 + 8), 4, (int)a6);
      sqlite3_bind_double(*(sqlite3_stmt **)(*a3 + 8), 5, a7);
      v35 = *MEMORY[0x1E0D0C490];
      v36 = *(sqlite3_stmt **)(*a3 + 8);
      if (vabdd_f64(a8, *MEMORY[0x1E0D0C490]) >= 2.22044605e-16)
        sqlite3_bind_double(v36, 6, a8);
      else
        sqlite3_bind_null(v36, 6);
      sqlite3_bind_double(*(sqlite3_stmt **)(*a3 + 8), 7, a9);
      v38 = *(sqlite3_stmt **)(*a3 + 8);
      if (v35 == a10)
        sqlite3_bind_null(v38, 8);
      else
        sqlite3_bind_double(v38, 8, a10);
      sqlite3_bind_double(*(sqlite3_stmt **)(*a3 + 8), 9, a11);
      sqlite3_bind_double(*(sqlite3_stmt **)(*a3 + 8), 10, a12);
      v39 = (uint64_t **)*a3;
      if (CDBLockingAssertionsEnabled)
      {
        if (v39)
        {
          if (*v39)
          {
            v40 = **v39;
            if (v40)
            {
              if (*(_QWORD *)(v40 + 104))
              {
                v41 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v41)
                  os_unfair_lock_assert_owner(v41 + 20);
              }
            }
          }
        }
      }
      if (CPSqliteStatementPerform() == 19)
      {
        v42 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67110656;
          *(_DWORD *)v52 = (_DWORD)v14;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = (_DWORD)a5;
          LOWORD(v53) = 1024;
          *(_DWORD *)((char *)&v53 + 2) = (_DWORD)a6;
          HIWORD(v53) = 2048;
          *(double *)v54 = a7;
          *(_WORD *)&v54[8] = 2048;
          *(double *)v55 = a8;
          *(_WORD *)&v55[8] = 2048;
          *(double *)v56 = a9;
          *(_WORD *)&v56[8] = 2048;
          *(double *)v57 = v25;
          _os_log_impl(&dword_1A5CCB000, v42, OS_LOG_TYPE_FAULT, "Attempted to insert a duplicate occurrence into the occurrence cache. event_id: [%i], calendar_id: [%i], store_id: [%i], occurrence_date: [%f], occurrence_start_date: [%f], occurrence_endDate: [%f], day: [%f]", buf, 0x3Cu);
        }
        _CalDatabaseIntegrityError(*(_QWORD *)(a1 + 24), CFSTR("Insert duplicate occurrence"));
      }
      v43 = (uint64_t **)*a3;
      if (CDBLockingAssertionsEnabled)
      {
        if (v43)
        {
          if (*v43)
          {
            v44 = **v43;
            if (v44)
            {
              if (*(_QWORD *)(v44 + 104))
              {
                v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v45)
                  os_unfair_lock_assert_owner(v45 + 20);
              }
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
  }
}

void _CalAlarmCacheProcessAddedEvent(double *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, double a7)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 IsDefaultAlarm;
  uint64_t DefaultAlarmOffset;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int ID;
  NSObject *v27;
  unsigned int v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  const os_unfair_lock *Context;
  uint64_t v35;
  const os_unfair_lock *v36;
  double v37;
  uint64_t **v38;
  uint64_t v39;
  const os_unfair_lock *v40;
  NSObject *v41;
  uint64_t **v42;
  uint64_t v43;
  const os_unfair_lock *v44;
  uint64_t v45;
  void *v48;
  uint64_t v49;
  NSObject *log;
  double v52;
  __CFArray *obj;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint8_t v61[128];
  uint8_t buf[4];
  _BYTE v63[10];
  void *v64;
  _BYTE v65[10];
  _BYTE v66[10];
  __int16 v67;
  void *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  obj = _CalCalendarItemCopyAlarms(a2);
  v9 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v57, v61, 16);
  if (v9)
  {
    v10 = v9;
    v56 = *(_QWORD *)v58;
    v11 = a7 - (double)a6;
    v12 = v11 + 0.0;
    v13 = v11 + -608400.0;
    v14 = *MEMORY[0x1E0D0C490];
    v15 = floor(a7);
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v58 != v56)
          objc_enumerationMutation(obj);
        v17 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 8 * v16);
        if (_CalAlarmGetTriggerDate(v17) == 1.17549435e-38)
        {
          IsDefaultAlarm = _CalAlarmIsDefaultAlarm(v17);
          if (IsDefaultAlarm)
          {
            DefaultAlarmOffset = _CalEventGetDefaultAlarmOffset(a2, *((_QWORD *)a1 + 8), *((_QWORD *)a1 + 9));
            if (DefaultAlarmOffset == 0x7FFFFFFFFFFFFFFFLL)
            {
              v20 = a1[6];
              if (v12 < v20 || (v21 = v14, v12 >= a1[7]))
              {
                if (v13 < v20)
                  goto LABEL_7;
                v21 = v14;
                if (v13 >= a1[7])
                  goto LABEL_7;
              }
              goto LABEL_24;
            }
          }
          else
          {
            DefaultAlarmOffset = (int)_CalAlarmGetTriggerInterval(v17);
          }
          v22 = DefaultAlarmOffset + 3600;
          if (DefaultAlarmOffset <= 32399)
            v22 = DefaultAlarmOffset;
          if (v22 < -53999)
            v22 -= 3600;
          v23 = v11 + (double)v22;
          if (v23 >= a1[6] && v23 < a1[7])
          {
            v21 = CalculateAlarmFireDate(a6, DefaultAlarmOffset, a7);
LABEL_24:
            v52 = *a1;
            v25 = (uint64_t *)*((_QWORD *)a1 + 2);
            v24 = *((_QWORD *)a1 + 3);
            ID = CPRecordGetID();
            v27 = CDBLogHandle;
            if (a3 == -1)
            {
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1A5CCB000, v27, OS_LOG_TYPE_ERROR, "Skipping alarm cache insert for event with id == -1", buf, 2u);
              }
            }
            else
            {
              v28 = ID;
              if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEBUG))
              {
                v29 = (void *)MEMORY[0x1E0CB37E8];
                log = v27;
                objc_msgSend(v29, "numberWithInt:", a3);
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v28);
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a4);
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a7);
                v49 = v24;
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v21);
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138413314;
                *(_QWORD *)v63 = v48;
                *(_WORD *)&v63[8] = 2112;
                v64 = v30;
                *(_WORD *)v65 = 2112;
                *(_QWORD *)&v65[2] = v31;
                *(_WORD *)v66 = 2112;
                *(_QWORD *)&v66[2] = v32;
                v67 = 2112;
                v68 = v33;
                _os_log_impl(&dword_1A5CCB000, log, OS_LOG_TYPE_DEBUG, "Inserting alarm into alarm cache. event_id: [%@], alarm_id: [%@], store_id: [%@], occurrence_date: [%@], fire_date: [%@].", buf, 0x34u);

                v24 = v49;
              }
              if (v24)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (*(_QWORD *)v24)
                  {
                    if (*(_QWORD *)(*(_QWORD *)v24 + 104))
                    {
                      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (Context)
                        os_unfair_lock_assert_owner(Context + 20);
                    }
                  }
                }
              }
              if (CPSqliteConnectionGetActiveTransactionType() == 0xFFFF)
                NSLog(CFSTR("EventKitOC: *** ERROR *** No transaction is in effect! This may end poorly."));
              v35 = *v25;
              if (*v25)
                goto LABEL_43;
              if (v24)
              {
                if (CDBLockingAssertionsEnabled)
                {
                  if (*(_QWORD *)v24)
                  {
                    if (*(_QWORD *)(*(_QWORD *)v24 + 104))
                    {
                      v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v36)
                        os_unfair_lock_assert_owner(v36 + 20);
                    }
                  }
                }
              }
              v35 = CPSqliteConnectionStatementForSQL();
              *v25 = v35;
              if (v35)
              {
LABEL_43:
                sqlite3_bind_int(*(sqlite3_stmt **)(v35 + 8), 1, a3);
                sqlite3_bind_int(*(sqlite3_stmt **)(*v25 + 8), 2, v28);
                sqlite3_bind_double(*(sqlite3_stmt **)(*v25 + 8), 3, v15);
                v37 = floor(v21);
                if (v14 == v21)
                  v37 = 0.0;
                sqlite3_bind_double(*(sqlite3_stmt **)(*v25 + 8), 4, v37);
                sqlite3_bind_int(*(sqlite3_stmt **)(*v25 + 8), 5, a4);
                sqlite3_bind_int(*(sqlite3_stmt **)(*v25 + 8), 6, a5);
                sqlite3_bind_int(*(sqlite3_stmt **)(*v25 + 8), 7, a6);
                sqlite3_bind_int(*(sqlite3_stmt **)(*v25 + 8), 8, IsDefaultAlarm);
                v38 = (uint64_t **)*v25;
                if (CDBLockingAssertionsEnabled)
                {
                  if (v38)
                  {
                    if (*v38)
                    {
                      v39 = **v38;
                      if (v39)
                      {
                        if (*(_QWORD *)(v39 + 104))
                        {
                          v40 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v40)
                            os_unfair_lock_assert_owner(v40 + 20);
                        }
                      }
                    }
                  }
                }
                if (CPSqliteStatementPerform() == 19)
                {
                  v41 = CDBLogHandle;
                  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)buf = 67110144;
                    *(_DWORD *)v63 = a3;
                    *(_WORD *)&v63[4] = 1024;
                    *(_DWORD *)&v63[6] = v28;
                    LOWORD(v64) = 1024;
                    *(_DWORD *)((char *)&v64 + 2) = a4;
                    HIWORD(v64) = 2048;
                    *(double *)v65 = a7;
                    *(_WORD *)&v65[8] = 2048;
                    *(double *)v66 = v21;
                    _os_log_impl(&dword_1A5CCB000, v41, OS_LOG_TYPE_FAULT, "Attempted to insert a duplicate alarm into the alarm cache. event_id: [%i], alarm_id: [%i], store_id: [%i], occurrence_date: [%f], alarm_fire_date: [%f]", buf, 0x28u);
                  }
                  _CalDatabaseIntegrityError(*(_QWORD *)(*(_QWORD *)&v52 + 24), CFSTR("Insert duplicate alarm"));
                }
                v42 = (uint64_t **)*v25;
                if (CDBLockingAssertionsEnabled)
                {
                  if (v42)
                  {
                    if (*v42)
                    {
                      v43 = **v42;
                      if (v43)
                      {
                        if (*(_QWORD *)(v43 + 104))
                        {
                          v44 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v44)
                            os_unfair_lock_assert_owner(v44 + 20);
                        }
                      }
                    }
                  }
                }
                CPSqliteStatementReset();
              }
            }
          }
        }
LABEL_7:
        ++v16;
      }
      while (v10 != v16);
      v45 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v57, v61, 16);
      v10 = v45;
    }
    while (v45);
  }

}

void _AlarmFireDateCallback(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  sqlite3_int64 *v5;
  sqlite3_int64 v6;
  sqlite3_int64 v7;
  double v8;
  sqlite3_int64 v9;
  int v10;
  int v11;
  int v12;
  double v13;
  NSObject *v15;
  _DWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 == 7)
  {
    v5 = (sqlite3_int64 *)sqlite3_user_data(a1);
    v7 = *v5;
    v6 = v5[1];
    v8 = sqlite3_value_double(*a3);
    v9 = sqlite3_value_int64(a3[1]);
    v10 = sqlite3_value_int(a3[2]);
    v11 = sqlite3_value_int(a3[3]);
    v12 = sqlite3_value_int(a3[4]);
    if (sqlite3_value_type(a3[5]) != 5)
      v7 = sqlite3_value_int64(a3[5]);
    if (sqlite3_value_type(a3[6]) != 5)
      v6 = sqlite3_value_int64(a3[6]);
    if (v10 == 1 && (v12 != 1 ? (v9 = v7) : (v9 = v6), v9 == 0x7FFFFFFFFFFFFFFFLL))
      v13 = 0.0;
    else
      v13 = CalculateAlarmFireDate(v11, v9, v8);
    sqlite3_result_double(a1, v13);
  }
  else
  {
    v15 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v16[0] = 67109120;
      v16[1] = a2;
      _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_ERROR, "_AlarmFireDateCallback received wrong number of args. [%i args]", (uint8_t *)v16, 8u);
    }
    sqlite3_result_double(a1, 0.0);
  }
}

void _AlarmShouldBeInCacheCallback(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  void *v5;
  sqlite3_int64 v6;
  sqlite3_int64 v7;
  double v8;
  double v9;
  double v10;
  sqlite3_int64 v11;
  int v12;
  int v13;
  int v14;
  sqlite3_int64 v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  double v20;
  int v22;
  NSObject *v24;
  uint64_t v25;
  double v26;
  _DWORD v27[2];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a2 == 7)
  {
    v5 = sqlite3_user_data(a1);
    v7 = *((_QWORD *)v5 + 2);
    v6 = *((_QWORD *)v5 + 3);
    v9 = *(double *)v5;
    v8 = *((double *)v5 + 1);
    v10 = sqlite3_value_double(*a3);
    v11 = sqlite3_value_int64(a3[1]);
    v12 = sqlite3_value_int(a3[2]);
    v13 = sqlite3_value_int(a3[3]);
    v14 = sqlite3_value_int(a3[4]);
    if (sqlite3_value_type(a3[5]) != 5)
      v7 = sqlite3_value_int64(a3[5]);
    if (sqlite3_value_type(a3[6]) != 5)
      v6 = sqlite3_value_int64(a3[6]);
    if (v14 == 1)
      v15 = v6;
    else
      v15 = v7;
    if (v12 == 1 && v15 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v16 = v10 - (double)v13;
      v17 = 36000.0;
      if (v14 != 1)
        v17 = 0.0;
      v18 = v16 + v17;
      v19 = v18 < v9 || v18 > v8;
      v22 = 1;
      if (v19)
      {
        v20 = v16 + -608400.0;
        if (v20 < v9 || v20 > v8)
          v22 = 0;
      }
    }
    else
    {
      if (v12 == 1)
        v25 = v15;
      else
        v25 = v11;
      v26 = CalculateAlarmFireDate(v13, v25, v10);
      v22 = v26 <= v8 && v26 >= v9;
    }
    sqlite3_result_int(a1, v22);
  }
  else
  {
    v24 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v27[0] = 67109120;
      v27[1] = a2;
      _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_ERROR, "_AlarmFireDateCallback received wrong number of args. [%i args]", (uint8_t *)v27, 8u);
    }
    sqlite3_result_double(a1, 0.0);
  }
}

uint64_t _RecurringEventsWithLongAlarmOffsetsHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t RecordStore;
  uint64_t EventWithUID;
  const void *v7;
  __CFArray *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  __CFArray *MutableCopy;
  __CFDictionary *Mutable;
  NSObject *v18;
  uint64_t v20;
  uint8_t buf[8];
  uint64_t v22;
  CFRange v23;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a2;
  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  RecordStore = _CalDatabaseGetRecordStore(v3);
  EventWithUID = _CalGetEventWithUID(RecordStore, v4);
  if (EventWithUID)
  {
    v7 = (const void *)EventWithUID;
    v20 = 0;
    *(_QWORD *)buf = 0;
    _CalEventGetLargestPossibleAlarmOffsets(EventWithUID, (uint64_t *)buf, &v20);
    v8 = 0;
    if (*(_QWORD *)buf != 0x7FFFFFFFFFFFFFFFLL)
    {
      v8 = 0;
      if (*(_QWORD *)(a2 + 24) <= -*(_QWORD *)buf)
      {
        objc_msgSend(*(id *)(a2 + 8), "dateByAddingTimeInterval:", (double)(uint64_t)-*(_QWORD *)buf);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a2 + 16), "dateByAddingTimeInterval:", (double)(uint64_t)-*(_QWORD *)buf);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = _CalEventCopyOccurrenceDatesInDateRange((uint64_t)v7, v9, v10, *(void **)(a2 + 40), 0);

      }
    }
    if (v20 != 0x7FFFFFFFFFFFFFFFLL && v20 >= *(_QWORD *)(a2 + 32))
    {
      objc_msgSend(*(id *)(a2 + 8), "dateByAddingTimeInterval:", (double)-v20);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a2 + 16), "dateByAddingTimeInterval:", (double)-v20);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = _CalEventCopyOccurrenceDatesInDateRange((uint64_t)v7, v11, v12, *(void **)(a2 + 40), 0);
      if (v8)
      {
        Count = CFArrayGetCount(v8);
        v15 = CFArrayGetCount(v13);
        MutableCopy = CFArrayCreateMutableCopy(0, v15 + Count, v8);
        v23.length = CFArrayGetCount(v13);
        v23.location = 0;
        CFArrayAppendArray(MutableCopy, v13, v23);
        CFRelease(v8);
        CFRelease(v13);
        v13 = MutableCopy;
      }

      v8 = v13;
    }
    if (v8)
    {
      Mutable = *(__CFDictionary **)(a2 + 48);
      if (!Mutable)
      {
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_QWORD *)(a2 + 48) = Mutable;
      }
      CFDictionarySetValue(Mutable, v7, v8);
      CFRelease(v8);
    }
  }
  else
  {
    v18 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v4;
      _os_log_impl(&dword_1A5CCB000, v18, OS_LOG_TYPE_ERROR, "Failed to find event %d in _RecurringEventsWithLongAlarmOffsetsHandler", buf, 8u);
    }
  }
  return 0;
}

void _CalEventAlarmCacheProcessAdds(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  double v6;
  unsigned int ID;
  unsigned int StoreId;
  _BOOL4 IsAllDay;
  void *v10;
  int v11;
  CFIndex Count;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t GlobalDefaultAllDayAlarmOffset;
  CFIndex i;
  const void *ValueAtIndex;
  double v21;
  id v22;

  v6 = *(double *)a3;
  ID = CPRecordGetID();
  StoreId = _CalCalendarItemGetStoreId(a1);
  IsAllDay = _CalCalendarItemIsAllDay(a1);
  v10 = (void *)_CalEventCopyTravelTime(a1);
  v11 = objc_msgSend(v10, "intValue");

  if (a2)
    Count = CFArrayGetCount(a2);
  else
    Count = 0;
  if (vabdd_f64(*(double *)(a3 + 32), *MEMORY[0x1E0D0C490]) < 2.22044605e-16)
  {
    _CalEventOccurrenceCacheLoadInfo(*(uint64_t *)&v6);
    v13 = *(void **)(*(_QWORD *)&v6 + 40);
    v22 = *(id *)(*(_QWORD *)(*(_QWORD *)&v6 + 24) + 296);
    objc_msgSend(v13, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a3 + 32) = v14;
    objc_msgSend(*(id *)(*(_QWORD *)&v6 + 48), "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a3 + 40) = v15;
    objc_msgSend(*(id *)(*(_QWORD *)&v6 + 56), "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a3 + 48) = v16;
    objc_msgSend(*(id *)(*(_QWORD *)&v6 + 64), "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a3 + 56) = v17;
    *(_QWORD *)(a3 + 64) = CalAlarmGetGlobalDefaultTimedAlarmOffset(v22);
    GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v22);

    *(_QWORD *)(a3 + 72) = GlobalDefaultAllDayAlarmOffset;
  }
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      v21 = MEMORY[0x1A85B424C](ValueAtIndex);
      _CalAlarmCacheProcessAddedEvent((double *)a3, a1, ID, StoreId, IsAllDay, v11, v21);
    }
  }
}

void __destructor_8_s8_s16_s40(id *a1)
{

}

uint64_t CalEventOccurrenceCacheRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  __CalEventOccurrenceCacheTypeID = result;
  return result;
}

BOOL CalEventOccurrenceCacheEqual(_QWORD *a1, _QWORD *a2)
{
  CFTypeID v4;

  v4 = CFGetTypeID(a1);
  return v4 == CFGetTypeID(a2) && a1[3] == a2[3];
}

uint64_t _DateGatherer(uint64_t a1, void *a2)
{
  sqlite3_stmt *v2;
  id v3;
  void *v4;

  v2 = *(sqlite3_stmt **)(a1 + 8);
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", sqlite3_column_double(v2, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v4);

  return 0;
}

void _CalculateAlarmFireDateCallback(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  _BYTE *v5;
  _BOOL4 v6;
  NSObject *v8;
  double v9;
  int v10;
  sqlite3_int64 v11;
  double v12;
  uint64_t v13;
  _DWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 == 3)
  {
    v5 = sqlite3_user_data(a1);
    if (v5)
      v6 = *v5 != 0;
    else
      v6 = 0;
    v9 = sqlite3_value_double(*a3);
    v10 = sqlite3_value_int(a3[1]);
    v11 = sqlite3_value_int64(a3[2]);
    if (v11 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v12 = 0.0;
    }
    else if (v6)
    {
      v13 = v11 + 3600;
      if (v11 <= 32399)
        v13 = v11;
      if (v13 < -53999)
        v13 -= 3600;
      v12 = v9 - (double)v10 + (double)v13;
    }
    else
    {
      v12 = CalculateAlarmFireDate(v10, v11, v9);
    }
    sqlite3_result_double(a1, v12);
  }
  else
  {
    v8 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v14[0] = 67109120;
      v14[1] = a2;
      _os_log_impl(&dword_1A5CCB000, v8, OS_LOG_TYPE_ERROR, "_CalculateAlarmFireDateCallback received wrong number of args. [%i args]", (uint8_t *)v14, 8u);
    }
    sqlite3_result_double(a1, 0.0);
  }
}

__n128 __copy_assignment_8_8_s0_s8_s16_s24_s32_t40w16(uint64_t a1, uint64_t a2)
{
  __n128 result;

  objc_storeStrong((id *)a1, *(id *)a2);
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  objc_storeStrong((id *)(a1 + 16), *(id *)(a2 + 16));
  objc_storeStrong((id *)(a1 + 24), *(id *)(a2 + 24));
  objc_storeStrong((id *)(a1 + 32), *(id *)(a2 + 32));
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void _UpdateAlarmsForStoreDefaultAlarmChanges(int a1, char a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = *a3;
  if ((a2 & 1) != 0)
    _UpdateAlarmsForeStoreDefaultAlarmChange(*a3, (uint64_t)a3, a1, 0);
  if ((a2 & 2) != 0)
    _UpdateAlarmsForeStoreDefaultAlarmChange(v6, (uint64_t)a3, a1, 1);
}

void _GenerateDatesForOccurrenceCache(const void *a1, uint64_t *a2)
{
  __CFArray *v4;
  __CFArray *v5;
  __CFDictionary *Mutable;

  v4 = _CalEventOccurrenceCacheCopyOccurrenceDatesForEvent(*a2, 0, (uint64_t)a1, 0, 0);
  if (v4)
  {
    v5 = v4;
    Mutable = *(__CFDictionary **)(*a2 + 88);
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(*a2 + 88) = Mutable;
    }
    CFDictionarySetValue(Mutable, a1, v5);
    CFRelease(v5);
  }
}

void _GenerateDatesForAlarmCache(const void *a1, uint64_t *a2)
{
  __CFArray *v4;
  __CFArray *v5;
  __CFDictionary *Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t DatabaseForRecord;
  uint64_t RecordStore;
  int ID;
  int v12;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v15;
  const os_unfair_lock *v16;
  uint64_t v17;
  sqlite3 **v18;
  int v19;
  int v20;
  uint64_t v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  uint64_t v25;
  const os_unfair_lock *v26;
  uint64_t v27;
  double *v28;
  uint64_t **v29;
  sqlite3_stmt *v30;
  double v31;
  uint64_t v32;
  const os_unfair_lock *v33;
  uint64_t v34;
  const os_unfair_lock *v35;
  const os_unfair_lock *v36;
  uint64_t v37;
  uint64_t **v38;
  sqlite3_stmt *v39;
  double v40;
  uint64_t v41;
  const os_unfair_lock *v42;
  uint64_t v43;
  const os_unfair_lock *v44;
  const os_unfair_lock *v45;
  uint64_t v46;
  uint64_t v47;
  char pApp;
  uint8_t buf[4];
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  v47 = 0;
  v4 = _CalEventOccurrenceCacheCopyOccurrenceDatesForEvent(*a2, 1, (uint64_t)a1, &v47, &v46);
  if (v4)
  {
    v5 = v4;
    Mutable = *(__CFDictionary **)(*a2 + 104);
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(*a2 + 104) = Mutable;
    }
    CFDictionarySetValue(Mutable, a1, v5);
    CFRelease(v5);
  }
  v7 = v46;
  v8 = v47;
  DatabaseForRecord = CalGetDatabaseForRecord();
  RecordStore = _CalDatabaseGetRecordStore(DatabaseForRecord);
  ID = CPRecordGetID();
  if (RecordStore)
  {
    v12 = ID;
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (Database)
    {
      v15 = Database;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16)
            os_unfair_lock_assert_owner(v16 + 20);
        }
      }
      v17 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
      if (!v17)
      {
        v25 = CDBLogHandle;
        if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          return;
        *(_WORD *)buf = 0;
        v22 = "Failed to open connection to database";
        v23 = v25;
        v24 = 2;
        goto LABEL_20;
      }
      v18 = (sqlite3 **)v17;
      pApp = 1;
      v19 = sqlite3_create_function(*(sqlite3 **)(v17 + 8), "CALCULATE_ALARM_FIRE_DATE", 3, 526337, &pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalculateAlarmFireDateCallback, 0, 0);
      if (v19)
      {
        v20 = v19;
        v21 = CDBLogHandle;
        if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          return;
        *(_DWORD *)buf = 67109120;
        v50 = v20;
        v22 = "Failed to create CALCULATE_ALARM_FIRE_DATE function in _CalEventOccurrenceCacheUpdateLargestAlarmOffsets, "
              "with error code: %i";
        v23 = v21;
        v24 = 8;
LABEL_20:
        _os_log_impl(&dword_1A5CCB000, v23, OS_LOG_TYPE_ERROR, v22, buf, v24);
        return;
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(v15 + 104))
        {
          v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v26)
            os_unfair_lock_assert_owner(v26 + 20);
        }
      }
      v27 = CPSqliteDatabaseStatementForWriting();
      v28 = (double *)MEMORY[0x1E0D0C490];
      if (v27)
      {
        v29 = (uint64_t **)v27;
        v30 = *(sqlite3_stmt **)(v27 + 8);
        v31 = *MEMORY[0x1E0D0C490];
        if (v8 != 0x7FFFFFFFFFFFFFFFLL)
          v31 = (double)v8;
        sqlite3_bind_double(v30, 1, v31);
        sqlite3_bind_int((sqlite3_stmt *)v29[1], 2, v12);
        if (CDBLockingAssertionsEnabled)
        {
          if (*v29)
          {
            v32 = **v29;
            if (v32)
            {
              if (*(_QWORD *)(v32 + 104))
              {
                v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v33)
                  os_unfair_lock_assert_owner(v33 + 20);
              }
            }
          }
        }
        CPSqliteStatementPerform();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v29)
          {
            v34 = **v29;
            if (v34)
            {
              if (*(_QWORD *)(v34 + 104))
              {
                v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v35)
                  os_unfair_lock_assert_owner(v35 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(v15 + 104))
        {
          v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v36)
            os_unfair_lock_assert_owner(v36 + 20);
        }
      }
      v37 = CPSqliteDatabaseStatementForWriting();
      if (v37)
      {
        v38 = (uint64_t **)v37;
        v39 = *(sqlite3_stmt **)(v37 + 8);
        v40 = *v28;
        if (v7 != 0x7FFFFFFFFFFFFFFFLL)
          v40 = (double)v7;
        sqlite3_bind_double(v39, 1, v40);
        sqlite3_bind_int((sqlite3_stmt *)v38[1], 2, v12);
        if (CDBLockingAssertionsEnabled)
        {
          if (*v38)
          {
            v41 = **v38;
            if (v41)
            {
              if (*(_QWORD *)(v41 + 104))
              {
                v42 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v42)
                  os_unfair_lock_assert_owner(v42 + 20);
              }
            }
          }
        }
        CPSqliteStatementPerform();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v38)
          {
            v43 = **v38;
            if (v43)
            {
              if (*(_QWORD *)(v43 + 104))
              {
                v44 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v44)
                  os_unfair_lock_assert_owner(v44 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      sqlite3_create_function(v18[1], "CALCULATE_ALARM_FIRE_DATE", 3, 526337, 0, 0, 0, 0);
      if (CDBLockingAssertionsEnabled && *v18 && *((_QWORD *)*v18 + 13))
      {
        v45 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v45)
          os_unfair_lock_assert_owner(v45 + 20);
      }
      CPSqliteDatabaseReleaseSqliteConnection();
    }
  }
}

void _UpdateAlarmsForeStoreDefaultAlarmChange(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t RecordStore;
  uint64_t v8;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v11;
  const os_unfair_lock *v12;
  uint64_t v13;
  sqlite3 **v14;
  uint64_t StoreWithUID;
  void *v16;
  sqlite3_int64 v17;
  uint64_t v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  uint64_t v22;
  int function;
  int v24;
  NSObject *v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  const os_unfair_lock *v31;
  uint64_t v32;
  const os_unfair_lock *v33;
  const os_unfair_lock *v34;
  int v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  RecordStore = _CalDatabaseGetRecordStore(*(_QWORD *)(a1 + 24));
  if (!RecordStore)
  {
    v18 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    LOWORD(v35) = 0;
    v19 = "No record store in _UpdateAlarmsForStoreDefaultAlarmChanges";
LABEL_21:
    v20 = v18;
    v21 = 2;
    goto LABEL_22;
  }
  v8 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
  {
    v18 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    LOWORD(v35) = 0;
    v19 = "No db in _UpdateAlarmsForStoreDefaultAlarmChanges";
    goto LABEL_21;
  }
  v11 = Database;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  v13 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (!v13)
  {
    v18 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    LOWORD(v35) = 0;
    v19 = "Failed to open connection to database";
    goto LABEL_21;
  }
  v14 = (sqlite3 **)v13;
  StoreWithUID = _CalGetStoreWithUID(v8);
  if (!StoreWithUID)
  {
    v22 = CDBLogHandle;
    if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      return;
    v35 = 67109120;
    v36 = a3;
    v19 = "Failed to find store for id %d _UpdateAlarmsForStoreDefaultAlarmChanges";
    v20 = v22;
    v21 = 8;
LABEL_22:
    _os_log_impl(&dword_1A5CCB000, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v35, v21);
    return;
  }
  if (a4)
  {
    v16 = (void *)_CalStoreCopyDefaultAllDayAlarmOffset(StoreWithUID);
    if (!v16)
    {
      v17 = *(_QWORD *)(a2 + 16);
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  v16 = (void *)_CalStoreCopyDefaultAlarmOffset(StoreWithUID);
  if (v16)
  {
LABEL_27:
    v17 = objc_msgSend(v16, "integerValue");
    goto LABEL_29;
  }
  v17 = *(_QWORD *)(a2 + 8);
LABEL_29:

  function = sqlite3_create_function(v14[1], "CALCULATE_ALARM_FIRE_DATE", 3, 526337, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))_CalculateAlarmFireDateCallback, 0, 0);
  if (function)
  {
    v24 = function;
    v25 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v35 = 67109120;
      v36 = v24;
      _os_log_impl(&dword_1A5CCB000, v25, OS_LOG_TYPE_ERROR, "Failed to create CALCULATE_ALARM_FIRE_DATE function in _UpdateAlarmsForStoreDefaultAlarmChanges, with error code: %i", (uint8_t *)&v35, 8u);
    }
    if (CDBLockingAssertionsEnabled && *v14 && *((_QWORD *)*v14 + 13))
    {
      v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v26)
        os_unfair_lock_assert_owner(v26 + 20);
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
  else
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v11 + 104))
      {
        v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27)
          os_unfair_lock_assert_owner(v27 + 20);
      }
    }
    v28 = CPSqliteDatabaseStatementForWriting();
    if (v28)
    {
      v29 = (uint64_t **)v28;
      sqlite3_bind_int64(*(sqlite3_stmt **)(v28 + 8), 1, v17);
      sqlite3_bind_int((sqlite3_stmt *)v29[1], 2, a3);
      sqlite3_bind_int((sqlite3_stmt *)v29[1], 3, a4);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v29)
        {
          v30 = **v29;
          if (v30)
          {
            if (*(_QWORD *)(v30 + 104))
            {
              v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v31)
                os_unfair_lock_assert_owner(v31 + 20);
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v29)
        {
          v32 = **v29;
          if (v32)
          {
            if (*(_QWORD *)(v32 + 104))
            {
              v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v33)
                os_unfair_lock_assert_owner(v33 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    sqlite3_create_function(v14[1], "CALCULATE_ALARM_FIRE_DATE", 3, 526337, 0, 0, 0, 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v14)
      {
        if (*((_QWORD *)*v14 + 13))
        {
          v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v34)
            os_unfair_lock_assert_owner(v34 + 20);
        }
      }
    }
    CPSqliteDatabaseReleaseSqliteConnection();
  }
}

__CFArray *_CalEventOccurrenceCacheCopyOccurrenceDatesForEvent(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  const __CFArray *v10;
  double v11;
  CFStringRef v12;
  const void *v13;
  double v14;
  id v15;
  id *v16;
  id v17;
  void *v18;
  int DayCount;
  uint64_t v20;
  _BOOL8 IsReminderIntegrationEvent;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  BOOL v29;
  CFDateRef v30;
  CFDateRef v31;
  __CFArray *Mutable;
  double ProposedStartDate;
  CFDateRef v36;
  CFDateRef v37;
  void *v38;
  uint64_t v40;
  uint64_t v41;

  v10 = _CalCalendarItemCopyRecurrencesWhileLocked(a3, 1);
  v11 = COERCE_DOUBLE(_CalEventGetStartDate(a3));
  if (CFStringCompare(v12, CFSTR("_float"), 0))
  {
    v13 = 0;
  }
  else
  {
    v13 = (const void *)CalTimeZoneCopyCFTimeZone();
    _CalEventOccurrenceCacheLoadInfo(a1);
    CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
    v11 = v14;
  }
  _CalEventOccurrenceCacheLoadInfo(a1);
  if (a2)
  {
    v15 = *(id *)(a1 + 56);
    v16 = (id *)(a1 + 64);
  }
  else
  {
    v15 = *(id *)(a1 + 40);
    v16 = (id *)(a1 + 48);
  }
  v17 = *v16;
  _CalEventOccurrenceCacheGetCacheCalendar(a1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  DayCount = _CalEventGetDayCount(a3, *(const __CFTimeZone **)(a1 + 32));
  if (DayCount >= 2)
  {
    objc_msgSend(v15, "dateByAddingDays:inCalendar:", 1 - DayCount, v18);
    v20 = objc_claimAutoreleasedReturnValue();

    v15 = (id)v20;
  }
  v40 = 0;
  v41 = 0;
  _CalEventGetLargestPossibleAlarmOffsets(a3, &v41, &v40);
  if (a4)
    *a4 = v41;
  if (a5)
    *a5 = v40;
  if (v10 && CFArrayGetCount(v10) >= 1)
  {
    _CalEventUpdateDetachedEventsRelation(a3);
    if (a2)
      IsReminderIntegrationEvent = 0;
    else
      IsReminderIntegrationEvent = _CalEventIsReminderIntegrationEvent(a3);
    objc_msgSend(v18, "timeZone");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    Mutable = _CalEventCopyOccurrenceDatesInDateRangeExpandedForAlarms(a3, v15, v17, v38, IsReminderIntegrationEvent);

  }
  else
  {
    objc_msgSend(v15, "timeIntervalSinceReferenceDate");
    v23 = v22;
    objc_msgSend(v17, "timeIntervalSinceReferenceDate");
    v25 = v41;
    if (v41 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v25 = 0;
      v41 = 0;
    }
    v26 = v40;
    if (v40 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v26 = 0;
      v40 = 0;
    }
    v27 = v23 - (double)v26;
    v28 = v24 - (double)v25;
    v29 = v27 > v11 || v11 > v28;
    if (v29 || (v30 = CFDateCreate(0, v11)) == 0)
    {
      Mutable = 0;
    }
    else
    {
      v31 = v30;
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      CFArrayAppendValue(Mutable, v31);
      CFRelease(v31);
    }
    ProposedStartDate = _CalEventGetProposedStartDate(a3);
    if (v27 <= ProposedStartDate && ProposedStartDate != *MEMORY[0x1E0D0C490] && ProposedStartDate <= v28)
    {
      v36 = CFDateCreate(0, ProposedStartDate);
      if (v36)
      {
        v37 = v36;
        if (!Mutable)
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        CFArrayAppendValue(Mutable, v37);
        CFRelease(v37);
      }
    }
  }
  if (v13)
    CFRelease(v13);
  if (v10)
    CFRelease(v10);

  return Mutable;
}

uint64_t _CalEventOccurrenceCacheProcessDeletes(int a1, uint64_t **a2)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  uint64_t v5;
  const os_unfair_lock *v6;

  sqlite3_bind_int((sqlite3_stmt *)a2[1], 1, a1);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        v3 = **a2;
        if (v3)
        {
          if (*(_QWORD *)(v3 + 104))
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
      }
    }
  }
  CPSqliteStatementPerform();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a2)
      {
        v5 = **a2;
        if (v5)
        {
          if (*(_QWORD *)(v5 + 104))
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
    }
  }
  return CPSqliteStatementReset();
}

void _CalEventOccurrenceCacheProcessAdds(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  uint64_t v6;
  void *ID;
  void *StoreId;
  void *v9;
  double v10;
  double EndDate;
  CFIndex Count;
  int DayCount;
  NSObject *v14;
  void *v15;
  NSObject *v16;
  CFTypeRef DebugDescription;
  double v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t GlobalDefaultAllDayAlarmOffset;
  CFIndex v26;
  double v27;
  const void *ValueAtIndex;
  double v29;
  double v30;
  const void *v31;
  CFIndex v32;
  double v33;
  double v34;
  double v35;
  int v36;
  double v37;
  double v38;
  double v39;
  _BOOL4 v40;
  double v41;
  double v42;
  double v45;
  double v46;
  double v48;
  double v49;
  double v50;
  double v51;
  const __CFArray *v52;
  _BOOL4 IsReminderIntegrationEvent;
  _BOOL4 IsAllDay;
  int v55;
  const void *v56;
  double v57;
  unsigned int CalendarId;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE buf[32];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a3;
  ID = (void *)CPRecordGetID();
  CalendarId = _CalEventGetCalendarId(a1);
  StoreId = (void *)_CalCalendarItemGetStoreId(a1);
  IsAllDay = _CalCalendarItemIsAllDay(a1);
  IsReminderIntegrationEvent = _CalEventIsReminderIntegrationEvent(a1);
  v9 = (void *)_CalEventCopyTravelTime(a1);
  v55 = objc_msgSend(v9, "intValue");

  v10 = COERCE_DOUBLE(_CalEventGetStartDate(a1));
  EndDate = _CalRecurrenceGetEndDate(a1);
  v61 = 0;
  v62 = 0;
  v56 = (const void *)a1;
  _CalEventGetLargestPossibleAlarmOffsets(a1, &v62, &v61);
  if (a2)
    Count = CFArrayGetCount(a2);
  else
    Count = 0;
  _CalEventOccurrenceCacheLoadInfo(v6);
  DayCount = _CalEventGetDayCount((uint64_t)v56, *(const __CFTimeZone **)(v6 + 32));
  if (Count * DayCount >= 100001)
  {
    v14 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = Count;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = DayCount;
      _os_log_impl(&dword_1A5CCB000, v14, OS_LOG_TYPE_ERROR, "EventKitOC: Event duration is too long, not adding to occurrence cache (asked to add %li occurrences each with %i days).", buf, 0x12u);
    }
    return;
  }
  if ((_DWORD)ID == -1)
  {
    v15 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v16 = v15;
      DebugDescription = _CalEntityGetDebugDescription(v56);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = DebugDescription;
      _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_ERROR, "Inserting an event with id -1 into the occurrence cache in _CalEventOccurenceCacheProcessAdds. event=%@", buf, 0xCu);

    }
    _CalDatabaseIntegrityError(*(_QWORD *)(v6 + 24), CFSTR("Insert Corrupt Occurrence - ProcessAdds"));
  }
  v18 = *MEMORY[0x1E0D0C490];
  if (vabdd_f64(*(double *)(a3 + 32), *MEMORY[0x1E0D0C490]) < 2.22044605e-16)
  {
    _CalEventOccurrenceCacheLoadInfo(v6);
    v19 = *(void **)(v6 + 40);
    v20 = *(id *)(*(_QWORD *)(v6 + 24) + 296);
    objc_msgSend(v19, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a3 + 32) = v21;
    objc_msgSend(*(id *)(v6 + 48), "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a3 + 40) = v22;
    objc_msgSend(*(id *)(v6 + 56), "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a3 + 48) = v23;
    objc_msgSend(*(id *)(v6 + 64), "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a3 + 56) = v24;
    *(_QWORD *)(a3 + 64) = CalAlarmGetGlobalDefaultTimedAlarmOffset(v20);
    GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v20);

    *(_QWORD *)(a3 + 72) = GlobalDefaultAllDayAlarmOffset;
  }
  if (Count >= 1)
  {
    v26 = 0;
    v57 = EndDate - v10;
    v52 = a2;
    v27 = vabdd_f64(v18, v18);
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v26);
      v29 = MEMORY[0x1A85B424C](ValueAtIndex);
      v30 = v18;
      if (IsReminderIntegrationEvent)
      {
        v30 = v18;
        if (v26 + 1 < Count)
        {
          v31 = CFArrayGetValueAtIndex(a2, v26 + 1);
          v30 = MEMORY[0x1A85B424C](v31);
        }
      }
      v32 = Count;
      v59 = 0.0;
      v60 = 0.0;
      _CalEventOccurrenceCacheGetMostExtremeAlarmDates(v62, v61, v55, &v60, &v59, v29);
      if (*(double *)(a3 + 40) > v29)
      {
        v33 = v59;
        v34 = v60;
        if (*(double *)(a3 + 32) <= v29)
        {
          if (DayCount >= 1)
            break;
          goto LABEL_57;
        }
        if (DayCount >= 2)
        {
          memset(&buf[12], 0, 20);
          _CalEventOccurrenceCacheLoadInfo(*(_QWORD *)a3);
          *(_QWORD *)buf = 0;
          *(_DWORD *)&buf[8] = DayCount - 1;
          CalAbsoluteTimeAddGregorianUnits();
          if (v35 >= *(double *)(a3 + 32))
            break;
        }
      }
LABEL_57:
      _CalAlarmCacheProcessAddedEvent((double *)a3, (uint64_t)v56, ID, StoreId, IsAllDay, v55, v29);
      ++v26;
      Count = v32;
      a2 = v52;
      if (v26 == v32)
        return;
    }
    v36 = 0;
    v37 = v18;
    v38 = v29;
    while (1)
    {
      if (v36)
      {
        _CalEventOccurrenceCacheLoadInfo(*(_QWORD *)a3);
        *(_QWORD *)buf = 0;
        *(_DWORD *)&buf[8] = v36;
        memset(&buf[12], 0, 20);
        CalAbsoluteTimeAddGregorianUnits();
        _CalEventOccurrenceCacheLoadInfo(*(_QWORD *)a3);
        CalAbsoluteTimeGetTimeForStartOfDay();
        v38 = v39;
      }
      if (DayCount != 1)
      {
        v40 = v27 < 2.22044605e-16;
        v41 = *(double *)(a3 + 32);
        v42 = vabdd_f64(v41, v18);
        if (v38 < v18)
          v40 = 1;
        if (v42 >= 2.22044605e-16 && v38 < v41 || !v40)
          goto LABEL_56;
        if (v27 >= 2.22044605e-16 && v38 < v18)
          goto LABEL_57;
        v45 = *(double *)(a3 + 40);
        v46 = vabdd_f64(v45, v18);
        if (v38 >= v45 && v46 >= 2.22044605e-16)
          goto LABEL_57;
      }
      if (v37 == v18)
      {
        _CalEventOccurrenceCacheLoadInfo(*(_QWORD *)a3);
        memset(buf, 0, 24);
        *(double *)&buf[24] = v57;
        CalAbsoluteTimeAddGregorianUnits();
        v37 = v48;
      }
      if (v36)
        v49 = v29;
      else
        v49 = v18;
      if (v36)
        v50 = v18;
      else
        v50 = v34;
      if (v36)
        v51 = v18;
      else
        v51 = v33;
      _CalEventOccurrenceCacheInsertOccurrence(*(_QWORD *)a3, *(_QWORD *)(a3 + 24), *(uint64_t **)(a3 + 8), ID, (void *)CalendarId, StoreId, v38, v49, v37, v30, v50, v51);
LABEL_56:
      if (DayCount == ++v36)
        goto LABEL_57;
    }
  }
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

uint64_t CalTaskUpdateFromICSTodoWithOptions(const void *a1, void *a2, void *a3, os_unfair_lock_s *a4, void *a5, unsigned __int8 a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t DateTimeFromICSDate;
  const __CFString *v20;
  const __CFString *v21;
  CFAbsoluteTime v22;
  CFDateRef v23;
  const void *v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  const __CFURL *v30;
  const __CFDate *v31;
  CFDateRef CFDateFromICSDateAsUTC;
  void *v33;
  void *v34;
  CFAbsoluteTime Current;
  int v36;
  uint64_t v37;
  const __CFDate *v38;
  CFDateRef v39;
  double v40;
  uint8_t buf[16];

  v11 = a2;
  v12 = a3;
  v13 = a5;
  objc_msgSend(v11, "due");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "hasTimeComponent") ^ 1;

  CalTaskSetDueDateAllDay((uint64_t)a1, v15);
  v16 = CalCalendarItemUpdateFromICSComponent(a1, 0, v11, v12, a4, v13, 0, 0, a6);
  if ((v16 & 1) != 0)
  {
    objc_msgSend(v11, "due");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      objc_msgSend(v11, "due");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      DateTimeFromICSDate = CalCreateDateTimeFromICSDate(v18, v12);
      v21 = v20;
      v22 = *(double *)&DateTimeFromICSDate;

      v23 = CFDateCreate(0, v22);
      CalTaskSetDueDate((uint64_t)a1, (uint64_t)v23);
      if (v23)
        CFRelease(v23);
      if (v21 && CFStringCompare(v21, CFSTR("_float"), 0))
      {
        v24 = (const void *)CalTimeZoneCopyCFTimeZone();
        CalTaskSetDueDateTimeZone((uint64_t)a1, (uint64_t)v24);
        if (v24)
          CFRelease(v24);
      }
      else
      {
        CalTaskSetDueDateTimeZone((uint64_t)a1, 0);
      }
      CalDateTimeRelease();
    }
    else
    {
      CalTaskSetDueDate((uint64_t)a1, 0);
      CalTaskSetDueDateTimeZone((uint64_t)a1, 0);
    }
    objc_msgSend(v11, "x_apple_activity");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v26, "count");

    if (v27)
    {
      objc_msgSend(v11, "x_apple_activity");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "objectAtIndex:", 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "value");
      v30 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v30 = 0;
    }
    CalCalendarItemSetAction((uint64_t)a1, v30);
    objc_msgSend(v11, "completed");
    v31 = (const __CFDate *)objc_claimAutoreleasedReturnValue();
    CFDateFromICSDateAsUTC = CalCreateCFDateFromICSDateAsUTC(v31);

    if (CFDateFromICSDateAsUTC)
    {
      CalTaskSetCompletionDate((uint64_t)a1, (uint64_t)CFDateFromICSDateAsUTC);
LABEL_25:
      CFRelease(CFDateFromICSDateAsUTC);
      goto LABEL_26;
    }
    if (objc_msgSend(v11, "percentComplete") == 100 || objc_msgSend(v11, "status") == 4)
    {
      objc_msgSend(v11, "due");
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      if (v33)
      {
        objc_msgSend(v11, "due");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        Current = COERCE_DOUBLE(CalCreateDateTimeFromICSDate(v34, v12));

      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
      }
      CFDateFromICSDateAsUTC = CFDateCreate(0, Current);
      CalTaskSetCompletionDate((uint64_t)a1, (uint64_t)CFDateFromICSDateAsUTC);
      if (CFDateFromICSDateAsUTC)
        goto LABEL_25;
    }
    else
    {
      CalTaskSetCompletionDate((uint64_t)a1, 0);
    }
LABEL_26:
    v36 = objc_msgSend(v11, "x_apple_sort_order");
    if (v36 < 1)
    {
      objc_msgSend(v11, "created");
      v38 = (const __CFDate *)objc_claimAutoreleasedReturnValue();
      v39 = CalCreateCFDateFromICSDateAsUTC(v38);

      if (v39)
      {
        v40 = MEMORY[0x1A85B424C](v39);
        CalTaskSetDisplayOrder((uint64_t)a1, (int)v40);
        CFRelease(v39);
        goto LABEL_31;
      }
      v36 = (int)CFAbsoluteTimeGetCurrent();
      v37 = (uint64_t)a1;
    }
    else
    {
      v37 = (uint64_t)a1;
    }
    CalTaskSetDisplayOrder(v37, v36);
LABEL_31:

    goto LABEL_32;
  }
  v25 = CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v25, OS_LOG_TYPE_DEBUG, "CalCalendarItemUpdateFromICSComponent failed", buf, 2u);
  }
LABEL_32:

  return v16;
}

id ICSTodoFromCalTask(const void *a1, unint64_t a2)
{
  id v4;
  uint64_t v5;
  const void *v6;
  CFURLRef v7;
  CFURLRef v8;
  void *v9;
  void *v10;
  NSObject *v12;
  id v13;
  uint64_t v14;
  const void *v15;
  void *v16;
  _BOOL4 IsDueDateAllDay;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  const void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint8_t v28[16];

  if (!a1)
    return 0;
  v4 = objc_alloc_init(MEMORY[0x1E0DDB868]);
  if ((CalCalendarItemUpdateICSComponent(a1, v4, 0, a2) & 1) != 0)
  {
    v5 = CalCalendarItemCopyUniqueIdentifier((uint64_t)a1);
    if (v5)
    {
      v6 = (const void *)v5;
      objc_msgSend(v4, "setUid:", v5);
      CFRelease(v6);
    }
    v7 = CalCalendarItemCopyAction((uint64_t)a1);
    if (v7)
    {
      v8 = v7;
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB848]), "initWithValue:type:", v7, 5013);
      if (v9)
      {
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v10 = 0;
      }
      objc_msgSend(v4, "setX_apple_activity:", v10);
      CFRelease(v8);

    }
    v14 = CalCalendarItemCopyAppLink((uint64_t)a1);
    if (v14)
    {
      v15 = (const void *)v14;
      objc_msgSend(v4, "setX_apple_appLinkData:", v14);
      CFRelease(v15);
    }
    v16 = (void *)CalTaskCopyDueDateTimeZone((uint64_t)a1);
    IsDueDateAllDay = CalTaskIsDueDateAllDay((uint64_t)a1);
    v18 = CalTaskCopyDueDate((uint64_t)a1);
    if (v18)
    {
      v19 = (const void *)v18;
      if (IsDueDateAllDay)
      {
        ICSFloatingDateOnlyFromCFDate(v18, v16);
        v20 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (v16)
          ICSDateFromCFDateInTimezone(v18, v16);
        else
          ICSDateFromCFDateGuessingAtFloatingDateOnly(v18, 0);
        v20 = objc_claimAutoreleasedReturnValue();
      }
      v21 = (void *)v20;
      objc_msgSend(v4, "setDue:", v20);

      CFRelease(v19);
    }
    v22 = CalTaskCopyCompletionDate((uint64_t)a1);
    if (v22)
    {
      v23 = v22;
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      ICSDateFromCFDate((uint64_t)v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setCompleted:", v25);

      objc_msgSend(v4, "setPercentComplete:", 100);
      objc_msgSend(v4, "setStatus:", 4);
      CFRelease(v23);
    }
    else
    {
      objc_msgSend(v4, "setCompleted:", 0);
      objc_msgSend(v4, "setPercentComplete:", 0);
      objc_msgSend(v4, "setStatus:", 3);
    }
    objc_msgSend(v4, "setX_apple_sort_order:", (int)CalTaskGetDisplayOrder((uint64_t)a1));
    v26 = (void *)CalCalendarItemCopyExternalRepresentation((uint64_t)a1);
    if (v26)
    {
      +[CalItemMetadata metadataWithData:](CalItemMetadata, "metadataWithData:", v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "applyToComponent:", v4);

    }
    v13 = v4;

  }
  else
  {
    v12 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1A5CCB000, v12, OS_LOG_TYPE_DEBUG, "Couldn't update the calendar item components of task", v28, 2u);
    }
    v13 = 0;
  }

  return v13;
}

uint64_t _CalShareePrepareForSave(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  const os_unfair_lock *v6;
  uint64_t result;
  const os_unfair_lock *v8;
  const __CFString *v9;
  const os_unfair_lock *v10;
  const __CFString *v11;
  const os_unfair_lock *v12;
  const __CFString *v13;
  const os_unfair_lock *v14;
  const __CFString *v15;
  const os_unfair_lock *v16;
  uint64_t DatabaseForRecord;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  CalRelationOwnerWillSave(Property);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if ((_DWORD)result == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v8)
            os_unfair_lock_assert_owner(v8 + 20);
        }
      }
    }
    v9 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
    v11 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    v13 = (const __CFString *)CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14)
            os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
    result = CPRecordGetProperty();
    v15 = (const __CFString *)result;
    if (v9 && (result = CFStringGetLength(v9)) != 0
      || v11 && (result = CFStringGetLength(v11)) != 0
      || v13 && (result = CFStringGetLength(v13)) != 0)
    {
      if (!a2)
        return result;
    }
    else
    {
      if (!v15)
        return result;
      result = CFStringGetLength(v15);
      if (!a2 || !result)
        return result;
    }
    result = _CalIdentityGetID(v9, v11, v13, v15, a2);
    if ((_DWORD)result != -1)
    {
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v16)
          os_unfair_lock_assert_owner(v16 + 20);
      }
      CPRecordSetProperty();
      DatabaseForRecord = CalGetDatabaseForRecord();
      return _CalDatabaseSetChangeFlags(DatabaseForRecord, 1);
    }
  }
  return result;
}

uint64_t _CalShareePropertyDidChange(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  const os_unfair_lock *Context;
  const os_unfair_lock *v4;

  if (a2 <= 0xF && ((1 << a2) & 0xC300) != 0)
  {
    v2 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    result = CPRecordGetProperty();
    if ((_DWORD)result != -1)
    {
      if (v2 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t _CalShareePropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  const os_unfair_lock *v5;

  if (!a2 && a3 == -1)
  {
    v3 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    CPRecordGetProperty();
    if (v3 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5)
        os_unfair_lock_assert_owner(v5 + 20);
    }
    return CPRecordGetProperty();
  }
  return result;
}

void CalShareeInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalShareeClass, (const char **)&kCalShareeIndexes, (const char **)&kCalShareeChangesIndexes);
}

void CalShareeMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  if (a3 > 76)
  {
    if (a3 <= 0x4651)
      CalMigrateTableFull(a2, (const char **)&kCalShareeClass, 0, (const char **)&kCalShareeUpgradeInfo, (const char **)&kCalShareesChangesUpgradeInfo, (const char **)&kCalShareeIndexes, (const char **)&kCalShareeChangesIndexes, 0, a3);
  }
  else
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalShareeClass, (const char **)&kCalShareeIndexes, (const char **)&kCalShareeChangesIndexes);
  }
}

uint64_t CalShareeGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  __CFString *v9;
  int v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  int v14;
  __CFString *v15;
  int v16;
  __CFString *v17;
  int v18;
  __CFString *v19;
  int v20;
  __CFString *v21;
  int v22;
  __CFString *v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalShareeGetPropertyIDWithPropertyName_sPropDict;
  if (!CalShareeGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalShareeGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalShareeGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("UUID");
      v6 = 3;
      v7 = CFSTR("owner");
      v8 = 12;
      v9 = CFSTR("externalID");
      v10 = 1;
      v11 = CFSTR("shareeStatusRaw");
      v12 = 5;
      v13 = CFSTR("shareeAccessLevelRaw");
      v14 = 6;
      v15 = CFSTR("displayName");
      v16 = 8;
      v17 = CFSTR("address");
      v18 = 9;
      v19 = CFSTR("firstName");
      v20 = 14;
      v21 = CFSTR("lastName");
      v22 = 15;
      v23 = CFSTR("shareeMuteRemoval");
      v24 = 7;
      CalShareeGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 10);
      for (i = 144; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalShareeGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalShareeGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5D7CEAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 144; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

CFTypeRef _CalShareeHasValidParent(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  result = CalRelationGetRelatedObject(Property);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

void _CalShareeCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Sharee WHERE owner_id NOT IN (SELECT ROWID FROM Calendar);"),
    0);
}

uint64_t _CalDatabaseRemoveShareeChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3;
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t v7;

  v3 = _CalShareeCreateChangeHistoryWhereClauseForStore(a1, a2);
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3)
    CFRelease(v3);
  return v7;
}

const void *_CalDatabaseCreateSharee(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;
  BOOL v6;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  CFStringRef v10;
  BOOL v11;
  const os_unfair_lock *v12;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 15);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v2 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  CPRecordInitializeProperty();
  v10 = _CalDBCreateUUIDString();
  if (CDBLockingAssertionsEnabled)
    v11 = v2 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(v10);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateSharee(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Sharee;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Sharee = _CalDatabaseCreateSharee((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Sharee;
}

uint64_t _CalShareeGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t _CalInvalidateShareesWithOwnerID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

_QWORD *_CalRemoveSharee(void *a1)
{
  CFTypeRef Owner;
  uint64_t DatabaseForRecord;

  Owner = _CalShareeGetOwner((uint64_t)a1);
  if (Owner)
    return _CalCalendarRemoveSharee((uint64_t)Owner, a1);
  DatabaseForRecord = CalGetDatabaseForRecord();
  return (_QWORD *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

CFTypeRef _CalShareeGetOwner(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

void CalRemoveSharee(void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveSharee(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalShareeGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyShareeWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalShareeGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalShareeGetUID(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  if ((CalEntityIsOfType(a1, 15) & 1) == 0)
    CalShareeGetUID_cold_1();
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t CalShareeCopyUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalDatabaseCopyShareeWithUUID(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v3;
  const os_unfair_lock *Context;
  const __CFArray *v5;
  const __CFArray *v6;
  const void *ValueAtIndex;
  CFTypeRef v8;
  os_unfair_lock_s *v9;

  if (!a1)
    return 0;
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v3 = RecordStore == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v5 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (v5)
  {
    v6 = v5;
    if (CFArrayGetCount(v5) < 1)
    {
      v8 = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, 0);
      v8 = CFRetain(ValueAtIndex);
    }
    CFRelease(v6);
  }
  else
  {
    v8 = 0;
  }
  v9 = (os_unfair_lock_s *)(a1 + 80);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v9);
  os_unfair_lock_unlock(v9);
  return v8;
}

void CalShareeSetDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeCopyDisplayName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalShareeSetAddress(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    CFURLGetString(a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFURLRef CalShareeCopyAddress(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *Property;
  CFURLRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFString *)CPRecordGetProperty();
  if (Property)
    v5 = CFURLCreateWithString(0, Property, 0);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalShareeSetFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeCopyFirstName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalShareeSetLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeCopyLastName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalShareeSetStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeGetStatus(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalShareeSetAccessLevel(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeGetAccessLevel(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalShareeSetExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalShareeCopyExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalShareeCopyOwner(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Owner;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalShareeGetOwner(a1);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalShareeSetOwner(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalRelationSetRelatedObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseRemoveShareeChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  uint64_t v6;
  _QWORD v8[7];
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __CalDatabaseRemoveShareeChangesInStoreToIndex_block_invoke;
  v8[3] = &unk_1E4F84BF0;
  v8[4] = &v10;
  v8[5] = v5;
  v8[6] = a2;
  v9 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1A5D7E0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL CalDatabaseRemoveShareeChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  int v7;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v6 = _CalShareeCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___CalDatabaseRemoveShareeChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E4F84BF0;
  v9[4] = &v11;
  v9[5] = v5;
  v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6)
    CFRelease(v6);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  return v7 != 0;
}

void sub_1A5D7E220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseRemoveShareeChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __CalDatabaseRemoveShareeChangesWithIndices_block_invoke;
  v7[3] = &unk_1E4F84C18;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A5D7E304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyShareeChangesInStore(os_unfair_lock_s *cf, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v5)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v5 = cf;
    if (!cf)
      return 0xFFFFFFFFLL;
    CFRetain(cf);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalShareeCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  v7 = _CalDatabaseCopyShareeChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  return v7;
}

CFStringRef _CalShareeCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t ID;
  CFStringRef v6;

  v6 = 0;
  if (a2)
  {
    v3 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v3, v3, 15, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t _CalDatabaseCopyShareeChangesWithWhereClauseNoLock(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  uint64_t RecordStore;
  BOOL v7;
  const os_unfair_lock *Context;

  if (a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 0xFFFFFFFFLL;
    *a3 = Mutable;
  }
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v7 = RecordStore == 0;
  else
    v7 = 1;
  if (!v7)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

uint64_t CalDatabaseCopyShareeChangesInCalendar(os_unfair_lock_s *cf, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    if (!v5)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v5 = cf;
    if (!cf)
      return 0xFFFFFFFFLL;
    CFRetain(cf);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalShareeCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v7 = _CalDatabaseCopyShareeChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  return v7;
}

CFStringRef _CalShareeCreateChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t ID;
  CFStringRef v6;

  v6 = 0;
  if (a2)
  {
    v3 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v3, v3, 15, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

void _CalShareeLoadIdentityProperties(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Store;
  uint64_t IdentityWithRowID;
  uint64_t v5;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;
  const void *v9;
  const os_unfair_lock *v10;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  if (CPRecordGetProperty() != -1)
  {
    Store = CPRecordGetStore();
    IdentityWithRowID = _CalGetIdentityWithRowID(Store);
    if (IdentityWithRowID)
    {
      v5 = IdentityWithRowID;
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      _CalIdentityGetDisplayName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v7)
              os_unfair_lock_assert_owner(v7 + 20);
          }
        }
      }
      _CalIdentityGetFirstName(v5);
      CPRecordInitializeProperty();
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v8)
              os_unfair_lock_assert_owner(v8 + 20);
          }
        }
      }
      _CalIdentityGetLastName(v5);
      CPRecordInitializeProperty();
      v9 = (const void *)_CalIdentityCopyAddress(v5);
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v10)
              os_unfair_lock_assert_owner(v10 + 20);
          }
        }
      }
      CPRecordInitializeProperty();
      if (v9)
        CFRelease(v9);
    }
  }
}

CFTypeRef _CalShareeLoadStoreId(uint64_t a1)
{
  CFTypeRef result;
  const os_unfair_lock *Context;

  result = _CalShareeGetOwner(a1);
  if (result)
  {
    _CalCalendarGetStoreId((uint64_t)result);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

CFTypeRef _CalShareeLoadCalendarId(uint64_t a1)
{
  CFTypeRef result;
  const os_unfair_lock *Context;

  result = _CalShareeGetOwner(a1);
  if (result)
  {
    CPRecordGetID();
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

uint64_t CalAlarmOccurrenceGetAlarm(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

double CalAlarmOccurrenceGetFireDate(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t CalAlarmOccurrenceGetEventOccurrence(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t CalAlarmGetGlobalDefaultTimedAlarmOffset(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = (void *)CalAlarmCopyDefaultTimedAlarmOffsetWithPreferences(a1);
  v2 = v1;
  if (v1)
    v3 = objc_msgSend(v1, "integerValue");
  else
    v3 = 0x7FFFFFFFFFFFFFFFLL;

  return v3;
}

uint64_t CalAlarmGetGlobalDefaultAllDayAlarmOffset(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = (void *)CalAlarmCopyDefaultAllDayAlarmOffsetWithPreferences(a1);
  v2 = v1;
  if (v1)
    v3 = objc_msgSend(v1, "integerValue");
  else
    v3 = 0x7FFFFFFFFFFFFFFFLL;

  return v3;
}

CFTypeRef CalDatabaseCopyAlarmOccurrencesFromAlarmCache(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *v3;
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v8;
  const os_unfair_lock *v9;
  uint64_t v10;
  uint64_t v11;
  const os_unfair_lock *v12;
  uint64_t **v13;
  const void *v14;
  id v15;
  id v16;
  uint64_t v17;
  const os_unfair_lock *v18;
  int v19;
  int v20;
  void *v21;
  NSObject *v22;
  const char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  const void *v29;
  double TriggerDate;
  void *v31;
  NSObject *v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  id v38;
  id v39;
  uint8_t v40[8];
  CFTypeRef *p_cf;
  int *v42;
  uint64_t v43;
  uint64_t TimeZone;
  int v45;
  CFTypeRef cf;
  uint8_t v47[128];
  uint8_t buf[4];
  int v49;
  __int16 v50;
  const char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v45 = 0;
  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = (const void *)_CalDatabaseCopyEventOccurrenceCache((uint64_t)a1);
  _CalEventOccurrenceCacheUpdateForGlobalDefaultAlarmChangesIfNeeded((uint64_t)v3);
  CFRelease(v3);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v8 = Database == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  v10 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v10)
  {
    v11 = v10;
    __CalDatabaseBeginReadTransaction((uint64_t)a1, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalAlarmOccurrence.m:235");
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v11)
      {
        if (*(_QWORD *)(*(_QWORD *)v11 + 104))
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    v13 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    *(_QWORD *)v40 = a1;
    p_cf = &cf;
    v42 = &v45;
    v43 = _CalDatabaseGetRecordStore((uint64_t)a1);
    v14 = (const void *)_CalDatabaseCopyEventOccurrenceCache((uint64_t)a1);
    TimeZone = _CalEventOccurrenceCacheGetTimeZone((uint64_t)v14);
    v38 = 0;
    v39 = 0;
    _CalAlarmCacheGetCacheRange((uint64_t)v14, &v39, &v38);
    v15 = v39;
    v16 = v38;
    CFRelease(v14);
    if (CDBLockingAssertionsEnabled)
    {
      if (v13)
      {
        if (*v13)
        {
          v17 = **v13;
          if (v17)
          {
            if (*(_QWORD *)(v17 + 104))
            {
              v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v18)
                os_unfair_lock_assert_owner(v18 + 20);
            }
          }
        }
      }
    }
    v19 = CPSqliteStatementSendResults();
    if (v19 != 101 && cf)
    {
      v20 = v19;
      v21 = (void *)CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        v22 = v21;
        v23 = sqlite3_errstr(v20);
        *(_DWORD *)buf = 67109378;
        v49 = v20;
        v50 = 2082;
        v51 = v23;
        _os_log_impl(&dword_1A5CCB000, v22, OS_LOG_TYPE_ERROR, "Unexpected SQLite result when querying AlarmCache: %d (%{public}s)", buf, 0x12u);

      }
      CFRelease(cf);
      cf = 0;
    }
    objc_msgSend(v15, "timeIntervalSinceReferenceDate");
    objc_msgSend(v16, "timeIntervalSinceReferenceDate");
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v24 = (id)_CalCopyAbsoluteCalendarItemAlarmsInDateRange((uint64_t)a1, 0);
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v34, v47, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v35;
      do
      {
        for (i = 0; i != v26; ++i)
        {
          if (*(_QWORD *)v35 != v27)
            objc_enumerationMutation(v24);
          v29 = *(const void **)(*((_QWORD *)&v34 + 1) + 8 * i);
          if (_CalAlarmIsDisplayable((uint64_t)v29))
          {
            TriggerDate = _CalAlarmGetTriggerDate((uint64_t)v29);
            v31 = (void *)CalAlarmOccurrenceCreate(v29, 0, TriggerDate);
            _CalAlarmOccurrencesInsertResult(v31, (const __CFArray **)&cf, &v45);
            CFRelease(v31);
          }
        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v34, v47, 16);
      }
      while (v26);
    }

    __CalDatabaseRollbackTransaction((uint64_t)a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalAlarmOccurrence.m:282");
  }
  else
  {
    v32 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1A5CCB000, v32, OS_LOG_TYPE_ERROR, "Failed to get DB connection to fetch alarm occurrences", v40, 2u);
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return cf;
}

uint64_t _CopyAlarmOccurrencesFromAlarmCacheResultHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  uint64_t EventWithUID;
  const void *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  NSObject *v13;
  uint64_t v14;
  __CFString *v15;
  NSObject *v16;
  void *v18;
  int v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  v6 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 2);
  v7 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), 3);
  EventWithUID = _CalGetEventWithUID(*(_QWORD *)(a2 + 24), v4);
  if (!EventWithUID)
  {
    v13 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v19 = 67109888;
      v20 = v4;
      v21 = 1024;
      v22 = v5;
      v23 = 2048;
      v24 = v6;
      v25 = 2048;
      v26 = v7;
      _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "Failed to find event for item in AlarmCache. event_id = %d, alarm_id = %d, occurrence_date = %f, fire_date = %f", (uint8_t *)&v19, 0x22u);
    }
    v14 = *(_QWORD *)a2;
    v15 = CFSTR("AlarmCache insert - missing event");
    goto LABEL_12;
  }
  v9 = (const void *)EventWithUID;
  v10 = _CalAlarmGetWithUID(*(_QWORD *)(a2 + 24));
  if (!v10)
  {
    v16 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v19 = 67109888;
      v20 = v4;
      v21 = 1024;
      v22 = v5;
      v23 = 2048;
      v24 = v6;
      v25 = 2048;
      v26 = v7;
      _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_ERROR, "Failed to find alarm for item in AlarmCache. event_id = %d, alarm_id = %d, occurrence_date = %f, fire_date = %f", (uint8_t *)&v19, 0x22u);
    }
    v14 = *(_QWORD *)a2;
    v15 = CFSTR("AlarmCache insert - missing alarm");
LABEL_12:
    _CalDatabaseIntegrityError(v14, v15);
    return 0;
  }
  v11 = (const void *)v10;
  if (_CalAlarmIsDisplayable(v10))
  {
    if (_CalCalendarItemHasRecurrenceRules((uint64_t)v9))
      v12 = (const void *)CalEventOccurrenceCreate(v9, *(const void **)(a2 + 32), v6);
    else
      v12 = 0;
    v18 = (void *)CalAlarmOccurrenceCreate(v11, v12, v7);
    _CalAlarmOccurrencesInsertResult(v18, *(const __CFArray ***)(a2 + 8), *(int **)(a2 + 16));
    CFRelease(v18);
    if (v12)
      CFRelease(v12);
  }
  return 0;
}

uint64_t CalAlarmOccurrenceCreate(const void *a1, const void *a2, double a3)
{
  uint64_t Instance;
  CFTypeRef v7;

  pthread_once(&__CalAlarmOccurrenceRegisterOnce, (void (*)(void))CalAlarmOccurrenceRegisterClass);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = CFRetain(a1);
  *(double *)(Instance + 24) = a3;
  if (a2)
    v7 = CFRetain(a2);
  else
    v7 = 0;
  *(_QWORD *)(Instance + 32) = v7;
  return Instance;
}

void _CalAlarmOccurrencesInsertResult(void *value, const __CFArray **a2, int *a3)
{
  const __CFArray *v6;
  CFIndex v7;
  uint64_t v8;
  CFIndex v9;
  __CFArray *Mutable;
  CFRange v11;

  v6 = *a2;
  if (*a2)
  {
    v11.length = *a3;
    v11.location = 0;
    v7 = CFArrayBSearchValues(v6, v11, value, (CFComparatorFunction)_CompareAlarmOccurrencesByFireDate, 0);
    v8 = *a3;
    if (v7 < v8)
      v8 = v7;
    v9 = v8 & ~(v8 >> 63);
    Mutable = *a2;
  }
  else
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v9 = 0;
    *a2 = Mutable;
  }
  CFArrayInsertValueAtIndex(Mutable, v9, value);
  ++*a3;
}

const __CFArray *CalDatabaseCopyAlarmOccurrencesInDateRange(os_unfair_lock_s *a1, const __CFArray *a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  os_unfair_lock_s *v15;
  uint64_t RecordStore;
  BOOL v17;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v20;
  const os_unfair_lock *v21;
  uint64_t v22;
  sqlite3 **v23;
  const os_unfair_lock *v24;
  const __CFArray *v25;
  const __CFArray *v26;
  const __CFArray *v27;
  const os_unfair_lock *v28;
  CFIndex Count;
  CFIndex v30;
  CFIndex i;
  const void *ValueAtIndex;
  double TriggerDate;
  void *v34;
  CFIndex v35;
  CFIndex v36;
  CFIndex j;
  const void *v38;
  CFTypeRef OwningCalendarItem;
  int EntityType;
  CFStringRef v41;
  _BOOL4 IsAllDay;
  CFTypeRef Store;
  const __CFNumber *v44;
  const __CFNumber *v45;
  int v46;
  const __CFNumber *v47;
  const __CFNumber *v48;
  double v49;
  void *v50;
  CFIndex v51;
  void *v52;
  CFIndex v53;
  const void *v54;
  CFTypeRef v55;
  const void *v56;
  _BOOL4 v57;
  CFTypeRef v58;
  const void *v59;
  const __CFNumber *v60;
  const __CFNumber *v61;
  int v62;
  const __CFNumber *v63;
  const __CFNumber *v64;
  void *v65;
  void *v66;
  __CFArray *v67;
  const __CFArray *v68;
  CFIndex v69;
  CFIndex v70;
  CFIndex k;
  void *v72;
  void *v73;
  double v74;
  double v76;
  double v77;
  const void *v78;
  void *v79;
  void *v80;
  const void *v81;
  const __CFArray *v82;
  void *v84;
  void *v85;
  CFIndex v86;
  int GlobalDefaultAllDayAlarmOffset;
  int GlobalDefaultTimedAlarmOffset;
  CFTypeRef cf;
  void *v90;
  void *v91;
  const __CFArray *v92;
  const void *v93;
  void *v94;
  _QWORD v95[4];
  int v96;
  int valuePtr;
  int v98;
  const __CFArray *v99[2];

  v99[0] = 0;
  v98 = 0;
  v8 = CalTimeZoneCopyCFTimeZone();
  v9 = CalCopyTimeZone();
  CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
  v11 = v10;
  v94 = (void *)v9;
  cf = (CFTypeRef)v8;
  CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
  v13 = v12;
  CalDatabaseGetPreferences((uint64_t)a1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  GlobalDefaultTimedAlarmOffset = CalAlarmGetGlobalDefaultTimedAlarmOffset(v14);
  v84 = v14;
  GlobalDefaultAllDayAlarmOffset = CalAlarmGetGlobalDefaultAllDayAlarmOffset(v14);
  v15 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v17 = RecordStore == 0;
  else
    v17 = 1;
  if (!v17)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v20 = Database == 0;
  else
    v20 = 1;
  if (!v20)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v21)
        os_unfair_lock_assert_owner(v21 + 20);
    }
  }
  v22 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (v22)
  {
    v23 = (sqlite3 **)v22;
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v22)
      {
        if (*(_QWORD *)(*(_QWORD *)v22 + 104))
        {
          v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v24)
            os_unfair_lock_assert_owner(v24 + 20);
        }
      }
    }
    CPSqliteConnectionBegin();
    v25 = (const __CFArray *)_CalCopyAbsoluteCalendarItemAlarmsInDateRange((uint64_t)a1, a2);
    v26 = (const __CFArray *)_CalCopyRelativeNonRecurringEventAlarmsInDateRange((uint64_t)a1, a2, GlobalDefaultTimedAlarmOffset, GlobalDefaultAllDayAlarmOffset, v23[1], a3, a4, v11, v13);
    v27 = (const __CFArray *)_CalCopyRelativeRecurringEventAlarmsInDateRange((uint64_t)a1, a2, GlobalDefaultTimedAlarmOffset, GlobalDefaultAllDayAlarmOffset, v23[1], a3, a4, v11, v13);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v23)
      {
        if (*((_QWORD *)*v23 + 13))
        {
          v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v28)
            os_unfair_lock_assert_owner(v28 + 20);
        }
      }
    }
    CPSqliteConnectionRollback();
  }
  else
  {
    v27 = 0;
    v26 = 0;
    v25 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v15);
  os_unfair_lock_unlock(v15);
  if (v25)
  {
    Count = CFArrayGetCount(v25);
    if (Count >= 1)
    {
      v30 = Count;
      for (i = 0; i != v30; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v25, i);
        os_unfair_lock_lock(v15);
        if (_CalAlarmIsDisplayable((uint64_t)ValueAtIndex))
        {
          TriggerDate = _CalAlarmGetTriggerDate((uint64_t)ValueAtIndex);
          v34 = (void *)CalAlarmOccurrenceCreate(ValueAtIndex, 0, TriggerDate);
          _CalAlarmOccurrencesInsertResult(v34, v99, &v98);
          CFRelease(v34);
        }
        if (CDBLockingAssertionsEnabled)
          os_unfair_lock_assert_owner(v15);
        os_unfair_lock_unlock(v15);
      }
    }
    CFRelease(v25);
  }
  v92 = v27;
  if (v26)
  {
    v35 = CFArrayGetCount(v26);
    if (v35 >= 1)
    {
      v36 = v35;
      for (j = 0; j != v36; ++j)
      {
        v38 = CFArrayGetValueAtIndex(v26, j);
        os_unfair_lock_lock(v15);
        if (_CalAlarmIsDisplayable((uint64_t)v38))
        {
          OwningCalendarItem = _CalAlarmGetOwningCalendarItem((uint64_t)v38);
          EntityType = _CalCalendarItemGetEntityType((uint64_t)OwningCalendarItem);
          if (OwningCalendarItem)
          {
            if (EntityType == 2)
            {
              _CalEventGetStartDate((uint64_t)OwningCalendarItem);
              if (CFStringCompare(v41, CFSTR("_float"), 0) == kCFCompareEqualTo)
                CalAbsoluteTimeGetAbsoluteTimeInTimeZone();
              valuePtr = 0;
              valuePtr = _CalAlarmGetTriggerInterval((uint64_t)v38);
              if (!_CalAlarmIsDefaultAlarm((uint64_t)v38))
                goto LABEL_57;
              IsAllDay = _CalCalendarItemIsAllDay((uint64_t)OwningCalendarItem);
              Store = _CalEventGetStore((uint64_t)OwningCalendarItem);
              v44 = (const __CFNumber *)(IsAllDay
                                       ? _CalStoreCopyDefaultAllDayAlarmOffset((uint64_t)Store)
                                       : _CalStoreCopyDefaultAlarmOffset((uint64_t)Store));
              v45 = v44;
              if (v44)
              {
                CFNumberGetValue(v44, kCFNumberIntType, &valuePtr);
                CFRelease(v45);
                v46 = valuePtr;
              }
              else
              {
                v46 = IsAllDay ? GlobalDefaultAllDayAlarmOffset : GlobalDefaultTimedAlarmOffset;
                valuePtr = v46;
              }
              if (v46 != -1)
              {
LABEL_57:
                v47 = (const __CFNumber *)_CalEventCopyTravelTime((uint64_t)OwningCalendarItem);
                v96 = 0;
                if (v47)
                {
                  v48 = v47;
                  CFNumberGetValue(v47, kCFNumberIntType, &v96);
                  valuePtr -= v96;
                  CFRelease(v48);
                }
                memset(v95, 0, 24);
                *(double *)&v95[3] = (double)valuePtr;
                CalAbsoluteTimeAddGregorianUnits();
                v50 = (void *)CalAlarmOccurrenceCreate(v38, 0, v49);
                _CalAlarmOccurrencesInsertResult(v50, v99, &v98);
                CFRelease(v50);
              }
            }
          }
        }
        if (CDBLockingAssertionsEnabled)
          os_unfair_lock_assert_owner(v15);
        os_unfair_lock_unlock(v15);
      }
    }
    CFRelease(v26);
    v27 = v92;
  }
  if (v27)
    v51 = CFArrayGetCount(v27);
  else
    v51 = 0;
  objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianCalendarForTimeZone:", v94, v84);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  if (v51 >= 1)
  {
    v53 = 0;
    v86 = v51;
    do
    {
      v54 = CFArrayGetValueAtIndex(v27, v53);
      if (CalAlarmIsDisplayable((uint64_t)v54))
      {
        v55 = CalAlarmCopyOwningCalendarItem((uint64_t)v54);
        if (v55)
        {
          v56 = v55;
          if (CalCalendarItemGetEntityType((uint64_t)v55) != 2)
            goto LABEL_97;
          LODWORD(v95[0]) = 0;
          LODWORD(v95[0]) = CalAlarmGetTriggerInterval((uint64_t)v54);
          if (!CalAlarmIsDefaultAlarm((uint64_t)v54))
            goto LABEL_83;
          v57 = CalCalendarItemIsAllDay((uint64_t)v56);
          v58 = CalEventCopyStore((uint64_t)v56);
          v59 = v58;
          v60 = (const __CFNumber *)(v57
                                   ? CalStoreCopyDefaultAllDayAlarmOffset((uint64_t)v58)
                                   : CalStoreCopyDefaultAlarmOffset((uint64_t)v58));
          v61 = v60;
          if (v60)
          {
            CFNumberGetValue(v60, kCFNumberIntType, v95);
            CFRelease(v61);
          }
          else
          {
            v62 = v57 ? GlobalDefaultAllDayAlarmOffset : GlobalDefaultTimedAlarmOffset;
            LODWORD(v95[0]) = v62;
          }
          CFRelease(v59);
          if (LODWORD(v95[0]) == -1)
          {
LABEL_97:
            CFRelease(v56);
          }
          else
          {
LABEL_83:
            v63 = (const __CFNumber *)CalEventCopyTravelTime((uint64_t)v56);
            valuePtr = 0;
            if (v63)
            {
              v64 = v63;
              CFNumberGetValue(v63, kCFNumberIntType, &valuePtr);
              LODWORD(v95[0]) -= valuePtr;
              CFRelease(v64);
            }
            objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a3 - (double)SLODWORD(v95[0]));
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a4 - (double)SLODWORD(v95[0]));
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            v67 = CalEventCopyOccurrenceDatesInDateRange((uint64_t)v56, v65, v66, v94);
            if (v67)
            {
              v68 = v67;
              v90 = v66;
              v91 = v65;
              v93 = v56;
              v69 = CFArrayGetCount(v67);
              if (v69 >= 1)
              {
                v70 = v69;
                for (k = 0; k != v70; ++k)
                {
                  CFArrayGetValueAtIndex(v68, k);
                  v72 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v72, "CalDateByComponentwiseAddingSeconds:inCalendar:", SLODWORD(v95[0]), v52);
                  v73 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v73, "timeIntervalSinceReferenceDate");
                  if (v74 >= a3 && v74 <= a4)
                  {
                    v76 = v74;
                    objc_msgSend(v72, "timeIntervalSinceReferenceDate");
                    v78 = (const void *)CalEventOccurrenceCreate(v93, v94, v77);
                    v79 = v52;
                    v80 = (void *)CalAlarmOccurrenceCreate(v54, v78, v76);
                    _CalAlarmOccurrencesInsertResult(v80, v99, &v98);
                    v81 = v80;
                    v52 = v79;
                    CFRelease(v81);
                    if (v78)
                      CFRelease(v78);
                  }

                }
              }
              CFRelease(v68);
              v27 = v92;
              v56 = v93;
              v51 = v86;
              v66 = v90;
              v65 = v91;
            }
            CFRelease(v56);

          }
        }
      }
      ++v53;
    }
    while (v53 != v51);
  }
  if (v27)
    CFRelease(v27);
  CFRelease(cf);
  CFRelease(v94);
  v82 = v99[0];

  return v82;
}

uint64_t CalAlarmOccurrenceRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  __CalAlarmOccurrenceTypeID = result;
  return result;
}

void CalAlarmOccurrenceDestroy(uint64_t a1)
{
  const void *v2;

  CFRelease(*(CFTypeRef *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

uint64_t CalAlarmOccurrenceEqual(uint64_t a1, uint64_t a2)
{
  CFTypeID v4;
  uint64_t result;

  v4 = CFGetTypeID((CFTypeRef)a1);
  if (v4 != CFGetTypeID((CFTypeRef)a2))
    return 0;
  result = CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16));
  if ((_DWORD)result)
    return vabdd_f64(*(double *)(a1 + 24), *(double *)(a2 + 24)) < 2.22044605e-16;
  return result;
}

uint64_t _CompareAlarmOccurrencesByFireDate(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  uint64_t v4;

  v2 = *(double *)(a1 + 24);
  v3 = *(double *)(a2 + 24);
  if (v2 >= v3)
    v4 = 0;
  else
    v4 = -1;
  if (v2 > v3)
    return 1;
  else
    return v4;
}

void CalAuxDatabaseInitializeTables(uint64_t a1, _QWORD *a2)
{
  if (!*(_BYTE *)(CPRecordStoreGetContext() + 378))
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalAuxDatabaseClass, 0, (const char **)&kCalAuxDatabaseChangesIndexes);
    CalMigrationCreateTriggers(a2, (const char **)&kCalAuxDatabaseClass, (const char **)&kCalAuxDatabaseTriggers);
  }
}

void CalAuxDatabaseMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  if (!*(_BYTE *)(CPRecordStoreGetContext() + 378))
  {
    if (a3 > 16021)
    {
      if (a3 <= 0x4651)
        CalMigrateTableFull(a2, (const char **)&kCalAuxDatabaseClass, 0, (const char **)&kCalAuxDatabaseUpgradeInfo, (const char **)&kCalAuxDatabaseChangesUpgradeInfo, 0, (const char **)&kCalAuxDatabaseChangesIndexes, (const char **)&kCalAuxDatabaseTriggers, a3);
    }
    else
    {
      CalAuxDatabaseInitializeTables(a1, a2);
    }
  }
}

const void *_CalDatabaseCreateAuxDatabase(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 26);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateAuxDatabase(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *AuxDatabase;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  AuxDatabase = _CalDatabaseCreateAuxDatabase((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return AuxDatabase;
}

void CalRemoveAuxDatabase(const void *a1)
{
  os_unfair_lock_s *v2;
  uint64_t DatabaseForRecord;

  v2 = (os_unfair_lock_s *)(CalGetDatabaseForRecord() + 80);
  os_unfair_lock_lock(v2);
  DatabaseForRecord = CalGetDatabaseForRecord();
  _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

uint64_t _CalAuxDatabaseSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t _CalDatabaseGetAuxDatabaseWithUID(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyAuxDatabaseWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *AuxDatabaseWithUID;
  const void *v4;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  AuxDatabaseWithUID = (const void *)_CalDatabaseGetAuxDatabaseWithUID((uint64_t)a1);
  v4 = AuxDatabaseWithUID;
  if (AuxDatabaseWithUID)
    CFRetain(AuxDatabaseWithUID);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v4;
}

CFTypeRef CalDatabaseCopyAuxDatabaseForPersonaID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  CFTypeRef v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalDatabaseCopyAuxDatabaseForPersonaID((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

CFTypeRef _CalDatabaseCopyAuxDatabaseForPersonaID(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;
  const __CFArray *v4;
  const __CFArray *v5;
  const void *ValueAtIndex;
  CFTypeRef v7;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v4 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (!v4)
    return 0;
  v5 = v4;
  if (CFArrayGetCount(v4) < 1)
  {
    v7 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
    v7 = CFRetain(ValueAtIndex);
  }
  CFRelease(v5);
  return v7;
}

CFMutableArrayRef _CalAuxDatabaseCopyAccounts(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

CFMutableArrayRef CalAuxDatabaseCopyAccounts(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalAuxDatabaseCopyAccounts(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

const __CFArray *_CalAuxDatabaseAddAccount(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  const __CFArray *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (const __CFArray *)CPRecordGetProperty();
  if (result)
    return CalToManyRelationAddObject(result, a2);
  return result;
}

void CalAuxDatabaseAddAccount(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAuxDatabaseAddAccount(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

_QWORD *_CalAuxDatabaseRemoveAccount(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return (_QWORD *)CalToManyRelationRemoveObject(result, a2);
  return result;
}

void CalAuxDatabaseRemoveAccount(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAuxDatabaseRemoveAccount(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAuxDatabaseSetPath(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalAuxDatabaseSetPath(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAuxDatabaseSetPath(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAuxDatabaseGetPath(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef CalAuxDatabaseCopyPath(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Path;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Path = (const void *)_CalAuxDatabaseGetPath(a1);
  if (Path)
    v4 = CFRetain(Path);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalAuxDatabaseGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalAuxDatabaseSetPersonaID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetExternalModTag(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAuxDatabaseCopyPersonaID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Data;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Data = (const void *)_CalColorGetData(a1);
  if (Data)
    v4 = CFRetain(Data);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalEventActionPrepareForSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
    return CalRelationOwnerWillSave(result);
  return result;
}

uint64_t _CalEventActionPropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  const os_unfair_lock *v5;

  if (!a2 && a3 == -1)
  {
    v3 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    CPRecordGetProperty();
    if (v3 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5)
        os_unfair_lock_assert_owner(v5 + 20);
    }
    return CPRecordGetProperty();
  }
  return result;
}

void CalEventActionInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalEventActionClass, (const char **)&kCalEventActionIndexes, (const char **)&kCalEventActionChangesIndexes);
}

void CalEventActionMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  if (a3 > 41)
  {
    if (a3 <= 0x4651)
      CalMigrateTableFull(a2, (const char **)&kCalEventActionClass, 0, (const char **)&kCalEventActionUpgradeInfo, (const char **)&kCalEventActionChangesUpgradeInfo, (const char **)&kCalEventActionIndexes, (const char **)&kCalEventActionChangesIndexes, 0, a3);
  }
  else
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalEventActionClass, (const char **)&kCalEventActionIndexes, (const char **)&kCalEventActionChangesIndexes);
  }
}

CFTypeRef _CalEventActionHasValidParent(uint64_t a1)
{
  CFTypeRef result;

  result = _CalConferenceGetOwner(a1);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

void _CalEventActionCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM EventAction WHERE event_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
}

uint64_t _CalDatabasePrepareEventActionsInStoreForMigration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _CalDatabaseRemoveEventActionChangesInStoreToIndex(a1, a3);
}

uint64_t _CalDatabaseRemoveEventActionChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3;
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t v7;

  v3 = _CalEventActionCreateChangeHistoryWhereClauseForStore(a1, a2);
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3)
    CFRelease(v3);
  return v7;
}

const void *_CalDatabaseCreateEventAction(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;
  BOOL v6;
  const os_unfair_lock *v7;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 9);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (CPRecordGetStore())
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  CPRecordInitializeProperty();
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateEventAction(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *EventAction;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  EventAction = _CalDatabaseCreateEventAction((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return EventAction;
}

_QWORD *_CalEventActionRemove(void *a1)
{
  CFTypeRef Owner;
  uint64_t DatabaseForRecord;

  Owner = _CalConferenceGetOwner((uint64_t)a1);
  if (Owner)
    return _CalEventRemoveEventAction((uint64_t)Owner, a1);
  DatabaseForRecord = CalGetDatabaseForRecord();
  return (_QWORD *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

void CalEventActionRemove(void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventActionRemove(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  __CFString *v9;
  int v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  int v14;
  __CFString *v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalEventActionGetPropertyIDWithPropertyName_sPropDict;
  if (!CalEventActionGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalEventActionGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalEventActionGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("externalID");
      v6 = 1;
      v7 = CFSTR("owner");
      v8 = 8;
      v9 = CFSTR("externalModificationTag");
      v10 = 2;
      v11 = CFSTR("externalFolderID");
      v12 = 3;
      v13 = CFSTR("externalScheduleID");
      v14 = 4;
      v15 = CFSTR("externalRepresentation");
      v16 = 5;
      CalEventActionGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 6);
      for (i = 80; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalEventActionGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalEventActionGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5D81350(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 80; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t _CalInvalidateEventActionsWithOwnerID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t CalDatabaseCopyEventActionChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalEventActionCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  v7 = _CalDatabaseCopyEventActionChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  if (v5)
    CFRelease(v5);
  return v7;
}

CFStringRef _CalEventActionCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t ID;
  CFStringRef v6;

  v6 = 0;
  if (a2)
  {
    v3 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v3, v3, 9, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t _CalDatabaseCopyEventActionChangesWithWhereClauseNoLock(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

uint64_t CalDatabaseRemoveEventActionChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  uint64_t v6;
  _QWORD v8[7];
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __CalDatabaseRemoveEventActionChangesInStoreToIndex_block_invoke;
  v8[3] = &unk_1E4F84BF0;
  v8[4] = &v10;
  v8[5] = v5;
  v8[6] = a2;
  v9 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1A5D81938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyEventActionChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalEventActionCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v7 = _CalDatabaseCopyEventActionChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  if (v5)
    CFRelease(v5);
  return v7;
}

CFStringRef _CalEventActionCreateChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t ID;
  CFStringRef v6;

  v6 = 0;
  if (a2)
  {
    v3 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v3, v3, 9, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t CalDatabaseRemoveEventActionChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalEventActionCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveEventActionChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E4F84BF0;
  v9[4] = &v11;
  v9[5] = v5;
  v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A5D81BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalEventActionGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyEventActionWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalEventActionGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

const void *CalDatabaseCopyEventActionWithExternalIDInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyEventActionWithExternalIDInCalendarOrStore(a1, a2, 0, a3);
}

const void *CalDatabaseCopyEventActionWithExternalIDInCalendarOrStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  const __CFArray *v4;
  const __CFArray *v5;
  const void *ValueAtIndex;

  v4 = (const __CFArray *)CalDatabaseCopyEventActionsWithExternalIDInCalendarOrStore(a1, a2, a3, a4);
  if (!v4)
    return 0;
  v5 = v4;
  if (CFArrayGetCount(v4) < 1)
  {
    ValueAtIndex = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
    CFRetain(ValueAtIndex);
  }
  CFRelease(v5);
  return ValueAtIndex;
}

const void *CalDatabaseCopyEventActionWithExternalIDInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyEventActionWithExternalIDInCalendarOrStore(a1, a2, a3, 0);
}

uint64_t CalDatabaseCopyAllEventActionsWithExternalIDInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyEventActionsWithExternalIDInCalendarOrStore(a1, a2, 0, a3);
}

uint64_t CalDatabaseCopyEventActionsWithExternalIDInCalendarOrStore(os_unfair_lock_s *cf, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  os_unfair_lock_s *v7;
  void *CStringFromCFString;
  void *v9;
  __CFString *SelectPrefix;
  __CFString *v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t RecordStore;
  uint64_t v16;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v19;
  uint64_t v20;
  uint64_t v21;
  sqlite3_stmt *v22;
  int ID;
  const os_unfair_lock *v24;

  v7 = cf;
  if (!a3 && !a4)
  {
    if (cf)
    {
      CFRetain(cf);
      if (!a2)
        goto LABEL_11;
      goto LABEL_5;
    }
    return 0;
  }
  v7 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (!v7)
    return 0;
  if (!a2)
  {
LABEL_11:
    CFRelease(v7);
    return 0;
  }
LABEL_5:
  CStringFromCFString = CalCreateCStringFromCFString(a2);
  if (!CStringFromCFString)
    goto LABEL_11;
  v9 = CStringFromCFString;
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
  {
    free(v9);
    CFRelease(v7);
    return 0;
  }
  v11 = SelectPrefix;
  CFStringAppend(SelectPrefix, CFSTR(" JOIN CalendarItem ON event_id = CalendarItem.ROWID JOIN Calendar ON calendar_id = Calendar.ROWID WHERE EventAction.external_id = ? "));
  if (a3)
  {
    v12 = CFSTR(" AND calendar_id = ?");
  }
  else
  {
    if (!a4)
      goto LABEL_18;
    v12 = CFSTR(" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)");
  }
  CFStringAppend(v11, v12);
LABEL_18:
  os_unfair_lock_lock(v7 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)v7);
  v16 = RecordStore;
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  v20 = CPSqliteDatabaseStatementForReading();
  if (v20)
  {
    v21 = v20;
    sqlite3_bind_text(*(sqlite3_stmt **)(v20 + 8), 1, (const char *)v9, -1, 0);
    if (a3 || a4)
    {
      v22 = *(sqlite3_stmt **)(v21 + 8);
      ID = CPRecordGetID();
      sqlite3_bind_int(v22, 2, ID);
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (v16)
      {
        v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v24)
          os_unfair_lock_assert_owner(v24 + 20);
      }
    }
    v13 = CPRecordStoreProcessStatementWithPropertyIndices();
  }
  else
  {
    v13 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v7 + 20);
  os_unfair_lock_unlock(v7 + 20);
  CFRelease(v11);
  free(v9);
  CFRelease(v7);
  return v13;
}

uint64_t CalDatabaseCopyOfAllEventActionsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t RecordStore;
  uint64_t v5;
  BOOL v6;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v9;
  uint64_t v10;
  sqlite3_stmt *v11;
  int ID;
  const os_unfair_lock *v13;
  uint64_t v14;
  BOOL v15;
  const os_unfair_lock *v16;

  v2 = (uint64_t)a1;
  if (a2)
  {
    if (a1)
    {
      v3 = a1 + 20;
      os_unfair_lock_lock(a1 + 20);
      RecordStore = _CalDatabaseGetRecordStore(v2);
      v5 = RecordStore;
      if (CDBLockingAssertionsEnabled)
        v6 = RecordStore == 0;
      else
        v6 = 1;
      if (!v6)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      Database = CPRecordStoreGetDatabase();
      if (!Database)
        goto LABEL_29;
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)(Database + 104))
        {
          v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9)
            os_unfair_lock_assert_owner(v9 + 20);
        }
      }
      v10 = CPSqliteDatabaseStatementForReading();
      if (v10)
      {
        v11 = *(sqlite3_stmt **)(v10 + 8);
        ID = CPRecordGetID();
        sqlite3_bind_int(v11, 1, ID);
        if (CDBLockingAssertionsEnabled)
        {
          if (v5)
          {
            v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v13)
              os_unfair_lock_assert_owner(v13 + 20);
          }
        }
        v2 = CPRecordStoreProcessStatement();
      }
      else
      {
LABEL_29:
        v2 = 0;
      }
      if (!CDBLockingAssertionsEnabled)
        goto LABEL_32;
      goto LABEL_31;
    }
  }
  else if (a1)
  {
    v3 = a1 + 20;
    os_unfair_lock_lock(a1 + 20);
    v14 = _CalDatabaseGetRecordStore(v2);
    if (CDBLockingAssertionsEnabled)
      v15 = v14 == 0;
    else
      v15 = 1;
    if (!v15)
    {
      v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v16)
        os_unfair_lock_assert_owner(v16 + 20);
    }
    v2 = CPRecordStoreCopyAllInstancesOfClass();
    if (!CDBLockingAssertionsEnabled)
      goto LABEL_32;
LABEL_31:
    os_unfair_lock_assert_owner(v3);
LABEL_32:
    os_unfair_lock_unlock(v3);
  }
  return v2;
}

const void *CalDatabaseCopyEventActionWithFolderIDAndExternalID(os_unfair_lock_s *a1, const __CFString *a2, const __CFString *a3)
{
  const __CFArray *v3;
  const __CFArray *v4;
  const void *ValueAtIndex;

  v3 = (const __CFArray *)CalDatabaseCopyEventActionsWithFolderIDAndExternalIDsInStore(a1, a2, a3);
  if (!v3)
    return 0;
  v4 = v3;
  if (CFArrayGetCount(v3) < 1)
  {
    ValueAtIndex = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v4, 0);
    CFRetain(ValueAtIndex);
  }
  CFRelease(v4);
  return ValueAtIndex;
}

uint64_t CalDatabaseCopyEventActionsWithFolderIDAndExternalIDsInStore(os_unfair_lock_s *a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t v6;
  __CFString *SelectPrefix;
  __CFString *v8;
  const __CFString *v9;
  uint64_t RecordStore;
  uint64_t v11;
  BOOL v12;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v15;
  uint64_t v16;
  uint64_t v17;
  const char *CStringFromCFString;
  const char *v19;
  int v20;
  const os_unfair_lock *v21;

  CFRetain(a1);
  v6 = 0;
  if (!((unint64_t)a2 | (unint64_t)a3))
    goto LABEL_37;
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (!SelectPrefix)
  {
    v6 = 0;
    goto LABEL_37;
  }
  v8 = SelectPrefix;
  CFStringAppend(SelectPrefix, CFSTR(" WHERE "));
  if (a2)
  {
    CFStringAppend(v8, CFSTR("external_folder_id = ?"));
    if (!a3)
    {
      v9 = CFSTR(";");
      goto LABEL_10;
    }
    CFStringAppend(v8, CFSTR(" AND "));
  }
  else if (!a3)
  {
    goto LABEL_11;
  }
  v9 = CFSTR("Meventaction.external_id = ?;");
LABEL_10:
  CFStringAppend(v8, v9);
LABEL_11:
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v11 = RecordStore;
  if (CDBLockingAssertionsEnabled)
    v12 = RecordStore == 0;
  else
    v12 = 1;
  if (!v12)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
    v16 = CPSqliteDatabaseStatementForReading();
    if (v16)
    {
      v17 = v16;
      if (a2)
      {
        CStringFromCFString = (const char *)CalCreateCStringFromCFString(a2);
        if (a3)
          goto LABEL_25;
      }
      else
      {
        CStringFromCFString = 0;
        if (a3)
        {
LABEL_25:
          v19 = (const char *)CalCreateCStringFromCFString(a3);
          if (a2)
            goto LABEL_26;
          goto LABEL_40;
        }
      }
      v19 = 0;
      if (a2)
      {
LABEL_26:
        sqlite3_bind_text(*(sqlite3_stmt **)(v17 + 8), 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        v20 = 2;
        if (!a3)
          goto LABEL_28;
        goto LABEL_27;
      }
LABEL_40:
      v20 = 1;
      if (!a3)
      {
LABEL_28:
        if (CDBLockingAssertionsEnabled)
        {
          if (v11)
          {
            v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21)
              os_unfair_lock_assert_owner(v21 + 20);
          }
        }
        v6 = CPRecordStoreProcessStatementWithPropertyIndices();
        goto LABEL_34;
      }
LABEL_27:
      sqlite3_bind_text(*(sqlite3_stmt **)(v17 + 8), v20, v19, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      goto LABEL_28;
    }
  }
  v6 = 0;
LABEL_34:
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(a1 + 20);
  os_unfair_lock_unlock(a1 + 20);
  CFRelease(v8);
LABEL_37:
  CFRelease(a1);
  return v6;
}

uint64_t CalDatabaseCopyOfAllEventActionsWithFolderIDInStore(os_unfair_lock_s *a1, const __CFString *a2)
{
  return CalDatabaseCopyEventActionsWithFolderIDAndExternalIDsInStore(a1, a2, 0);
}

uint64_t _CalEventActionGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalEventActionGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalEventActionSetExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionCopyExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventActionSetExternalModTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionCopyExternalModTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventActionSetExternalFolderID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionCopyExternalFolderID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventActionSetExternalScheduleID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionCopyExternalScheduleID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventActionSetExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalEventActionCopyExternalRepresentation(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef CalEventActionCopyOwningEvent(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Owner;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalConferenceGetOwner(a1);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalEventActionLoadStoreId(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;
  const os_unfair_lock *v4;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if ((_DWORD)result != -1)
  {
    result = CPRecordGetStore();
    if (result)
    {
      result = _CalGetCalendarWithUID(result);
      if (result)
      {
        result = _CalCalendarGetStoreId(result);
        if ((_DWORD)result != -1)
        {
          if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
          {
            v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v4)
              os_unfair_lock_assert_owner(v4 + 20);
          }
          return CPRecordInitializeProperty();
        }
      }
    }
  }
  return result;
}

uint64_t _CalEventActionLoadCalendarId(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;
  uint64_t v4;
  const os_unfair_lock *v5;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  v4 = result;
  if ((_DWORD)result != -1)
  {
    result = CPRecordGetStore();
    if (result)
    {
      result = _CalGetEventWithUID(result, v4);
      if (result)
      {
        result = _CalEventGetCalendarId(result);
        if ((_DWORD)result != -1)
        {
          if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
          {
            v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v5)
              os_unfair_lock_assert_owner(v5 + 20);
          }
          return CPRecordInitializeProperty();
        }
      }
    }
  }
  return result;
}

uint64_t CalEventOccurrenceRegisterClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  __CalEventOccurrenceTypeID = result;
  return result;
}

uint64_t CalEventOccurrenceSetDate(uint64_t result, double a2)
{
  *(double *)(result + 24) = a2;
  return result;
}

uint64_t CalEventOccurrenceGetGregorianDate()
{
  return CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
}

CFTypeRef CalEventOccurrenceCopyTimeZone(uint64_t a1)
{
  return CFRetain(*(CFTypeRef *)(a1 + 32));
}

__CFArray *CalCopyEventOccurrencesForEventInDateRange(const void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  const void *v10;
  __CFArray *v11;
  const __CFArray *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  __CFArray *Mutable;
  const CFArrayCallBacks *v17;
  const void *ValueAtIndex;
  double v19;
  uint64_t v20;
  const void *v21;
  const void *v23;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = CalCopyDatabaseForRecord();
  v11 = CalEventCopyOccurrenceDatesInDateRange((uint64_t)a1, v7, v8, v9);
  if (v11)
  {
    v12 = v11;
    v23 = v10;
    Count = CFArrayGetCount(v11);
    if (Count < 1)
    {
      Mutable = 0;
    }
    else
    {
      v14 = Count;
      v15 = 0;
      Mutable = 0;
      v17 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v12, v15);
        v19 = MEMORY[0x1A85B424C](ValueAtIndex);
        v20 = CalEventOccurrenceCreate(a1, v9, v19);
        if (v20)
        {
          v21 = (const void *)v20;
          if (!Mutable)
            Mutable = CFArrayCreateMutable(0, 0, v17);
          CFArrayAppendValue(Mutable, v21);
          CFRelease(v21);
        }
        ++v15;
      }
      while (v14 != v15);
    }
    CFRelease(v12);
    v10 = v23;
  }
  else
  {
    Mutable = 0;
  }
  CFRelease(v10);

  return Mutable;
}

__CFArray *CalDatabaseCopyEventOccurrencesInDateRange(os_unfair_lock_s *a1, void *a2, void *a3, void *a4, void *a5)
{
  return _CalDatabaseCopyEventOccurrencesInDateRangeInternal(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t CalEventOccurrencesExistForEventInDateRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, const void *a7)
{
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;

  v14 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  v15 = v14 + 20;
  os_unfair_lock_lock(v14 + 20);
  v16 = _CalEventOccurrencesExistInDateRange(a1, a2, a3, a4, a5, a6, a7);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v15);
  os_unfair_lock_unlock(v15);
  CFRelease(v14);
  return v16;
}

uint64_t CalEventOccurrencesExistWithinTimeInterval(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, double a8)
{
  os_unfair_lock_s *v16;
  os_unfair_lock_s *v17;
  uint64_t exist;

  v16 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  v17 = v16 + 20;
  os_unfair_lock_lock(v16 + 20);
  exist = _CalEventOccurrencesExistWithinTimeInterval(a1, a2, a3, a4, a8, a5, a6, a7);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v17);
  os_unfair_lock_unlock(v17);
  CFRelease(v16);
  return exist;
}

BOOL CalEventOccurrenceEqual(uint64_t a1, uint64_t a2)
{
  CFTypeID v4;

  v4 = CFGetTypeID((CFTypeRef)a1);
  return v4 == CFGetTypeID((CFTypeRef)a2)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && vabdd_f64(*(double *)(a1 + 24), *(double *)(a2 + 24)) < 2.22044605e-16
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

uint64_t _CalAuxDatabaseAccountPrepareForSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
    return CalRelationOwnerWillSave(result);
  return result;
}

uint64_t CalAuxDatabaseAccountInitializeTables()
{
  uint64_t result;

  result = CPRecordStoreGetContext();
  if (!*(_BYTE *)(result + 378))
    return CPRecordStoreCreateTablesForClass();
  return result;
}

uint64_t CalAuxDatabaseAccountMigrateTables(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = CPRecordStoreGetContext();
  if (a3 <= 16026 && !*(_BYTE *)(result + 378))
    return CalAuxDatabaseAccountInitializeTables();
  return result;
}

const void *_CalDatabaseCreateAuxDatabaseAccount(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 27);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateAuxDatabaseAccount(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *AuxDatabaseAccount;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  AuxDatabaseAccount = _CalDatabaseCreateAuxDatabaseAccount((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return AuxDatabaseAccount;
}

void CalRemoveAuxDatabaseAccount(const void *a1)
{
  os_unfair_lock_s *v2;
  uint64_t DatabaseForRecord;

  v2 = (os_unfair_lock_s *)(CalGetDatabaseForRecord() + 80);
  os_unfair_lock_lock(v2);
  DatabaseForRecord = CalGetDatabaseForRecord();
  _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

CFTypeRef CalDatabaseCopyAuxDatabaseAccountForAccountID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  CFTypeRef v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalDatabaseCopyAuxDatabaseAccountForAccountID((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

CFTypeRef _CalDatabaseCopyAuxDatabaseAccountForAccountID(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;
  const __CFArray *v4;
  const __CFArray *v5;
  const void *ValueAtIndex;
  CFTypeRef v7;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v4 = (const __CFArray *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  if (!v4)
    return 0;
  v5 = v4;
  if (CFArrayGetCount(v4) < 1)
  {
    v7 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
    v7 = CFRetain(ValueAtIndex);
  }
  CFRelease(v5);
  return v7;
}

CFTypeRef _CalAuxDatabaseAccountGetDatabase(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

CFTypeRef CalAuxDatabaseAccountCopyAuxDatabase(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Database;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Database = _CalAuxDatabaseAccountGetDatabase(a1);
  if (Database)
    v4 = CFRetain(Database);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

CFTypeRef _CalAuxDatabaseAccountHasValidParent(uint64_t a1)
{
  CFTypeRef result;

  result = _CalAuxDatabaseAccountGetDatabase(a1);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

uint64_t CalAuxDatabaseAccountGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

void CalAuxDatabaseAccountSetAccountID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAuxDatabaseSetPath(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAuxDatabaseAccountCopyAccountID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Path;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Path = (const void *)_CalAuxDatabaseGetPath(a1);
  if (Path)
    v4 = CFRetain(Path);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t internalEntityTypeFromExternalType(uint64_t result)
{
  switch((int)result)
  {
    case 1:
      return result;
    case 2:
      result = 2;
      break;
    case 3:
    case 9:
    case 12:
    case 13:
    case 21:
    case 22:
    case 25:
    case 26:
    case 27:
    case 28:
      goto LABEL_5;
    case 4:
      result = 3;
      break;
    case 5:
      result = 4;
      break;
    case 6:
      result = 5;
      break;
    case 7:
      result = 6;
      break;
    case 8:
      result = 7;
      break;
    case 10:
      result = 8;
      break;
    case 11:
      result = 9;
      break;
    case 14:
      result = 10;
      break;
    case 15:
      result = 11;
      break;
    case 16:
      result = 12;
      break;
    case 17:
      result = 13;
      break;
    case 18:
      result = 14;
      break;
    case 19:
      result = 15;
      break;
    case 20:
      result = 16;
      break;
    case 23:
      result = 17;
      break;
    case 24:
      result = 18;
      break;
    case 29:
      result = 20;
      break;
    default:
      if ((_DWORD)result == 102)
        result = 19;
      else
LABEL_5:
        result = 0;
      break;
  }
  return result;
}

void sub_1A5D8435C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 152), 8);
  _Unwind_Resume(a1);
}

void EntityDict_set(CFMutableDictionaryRef *a1, unsigned int a2, int a3, uint64_t a4, int a5)
{
  unsigned int v5;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  __CFArray *v13;
  unint64_t v14;
  CFIndex v15;
  unint64_t v16;
  unsigned int v17;
  __CFArray *Mutable;
  __CFArray *v19;
  BOOL v20;

  v5 = *(_DWORD *)a4;
  if ((*(_DWORD *)a4 & 0x80000000) != 0)
  {
    v13 = *(__CFArray **)(a4 + 8);
    if (a5)
      v14 = a2 | 0x20;
    else
      v14 = a2;
    v15 = *(int *)(a4 + 4);
    if ((_DWORD)v15 == -1)
      CFArrayAppendValue(v13, (const void *)v14);
    else
      CFArraySetValueAtIndex(v13, v15, (const void *)v14);
  }
  else
  {
    v8 = *(_DWORD *)(a4 + 4);
    if (v8 < 0)
    {
      if (a5)
        v16 = a2 | 0x20;
      else
        v16 = a2;
      v17 = *(_DWORD *)(a4 + 16);
      if (v17 > 4)
      {
        Mutable = a1[1];
        if (Mutable)
        {
          v12 = CFArrayGetCount(a1[1]) | 0x80000000;
        }
        else
        {
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
          a1[1] = Mutable;
          v12 = 0x80000000;
        }
        v19 = CFArrayCreateMutable(0, 6, 0);
        do
        {
          CFArrayAppendValue(v19, (const void *)(v5 & 0x3F));
          v20 = v5 > 0x3F;
          v5 >>= 6;
        }
        while (v20);
        CFArrayAppendValue(v19, (const void *)v16);
        CFArrayAppendValue(Mutable, v19);
        CFRelease(v19);
      }
      else
      {
        v12 = ((_DWORD)v16 << (6 * v17)) | v5;
      }
    }
    else
    {
      v9 = 32 << (6 * v8);
      v10 = v5 & ~v9;
      v11 = v9 | v5;
      if (a5)
        v12 = v11;
      else
        v12 = v10;
    }
    CFDictionarySetValue(*a1, (const void *)a3, (const void *)v12);
  }
}

BOOL CalDatabaseEntityTypeParticipatesInInMemoryChangeTracking(uint64_t a1)
{
  return internalEntityTypeFromExternalType(a1) != 0;
}

__CFSet *CalDatabaseCreateRecordIDSetFromRecordData(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  __CFSet *Mutable;
  uint64_t v5;
  int *v6;
  const void *v7;

  v1 = objc_retainAutorelease(a1);
  v2 = objc_msgSend(v1, "bytes");
  v3 = (int)objc_msgSend(v1, "length");
  Mutable = CFSetCreateMutable(0, v3 >> 3, MEMORY[0x1E0C9B3B0]);
  if ((int)((unint64_t)v3 >> 3) >= 1)
  {
    v5 = ((unint64_t)v3 >> 3);
    v6 = (int *)(v2 + 4);
    do
    {
      v7 = (const void *)CalRecordIDCreate(*(v6 - 1), *v6);
      CFSetAddValue(Mutable, v7);
      CFRelease(v7);
      v6 += 2;
      --v5;
    }
    while (v5);
  }

  return Mutable;
}

void CalDatabaseCreateRecordIDSetsFromRecordData(void *a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  __CFSet *Mutable;
  int *v10;
  unint64_t v11;
  const void *v12;
  __CFSet *v13;
  unint64_t v14;
  int *v15;
  const void *v16;
  id v17;

  v17 = objc_retainAutorelease(a1);
  v7 = objc_msgSend(v17, "bytes");
  v8 = (uint64_t)(int)objc_msgSend(v17, "length") >> 3;
  Mutable = CFSetCreateMutable(0, a2, MEMORY[0x1E0C9B3B0]);
  if (a2)
  {
    v10 = (int *)(v7 + 4);
    v11 = a2;
    do
    {
      v12 = (const void *)CalRecordIDCreate(*(v10 - 1), *v10);
      CFSetAddValue(Mutable, v12);
      CFRelease(v12);
      v10 += 2;
      --v11;
    }
    while (v11);
  }
  v13 = CFSetCreateMutable(0, v8 - a2, MEMORY[0x1E0C9B3B0]);
  v14 = v8 - a2;
  if (v8 > a2)
  {
    v15 = (int *)(v7 + 8 * a2 + 4);
    do
    {
      v16 = (const void *)CalRecordIDCreate(*(v15 - 1), *v15);
      CFSetAddValue(v13, v16);
      CFRelease(v16);
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  if (a3)
    *a3 = objc_retainAutorelease(Mutable);
  CFRelease(Mutable);
  if (a4)
    *a4 = objc_retainAutorelease(v13);
  CFRelease(v13);

}

void CalDatabaseAddChangesToArray(CFMutableArrayRef *a1, const __CFArray *a2, _BYTE *a3)
{
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFRange v9;

  if (!*a3)
  {
    v6 = *a1;
    if (v6)
      Count = CFArrayGetCount(v6);
    else
      Count = 0;
    v8 = CFArrayGetCount(a2);
    if (v8 + Count < 513)
    {
      v9.length = v8;
      if (*a1)
      {
        v9.location = 0;
        CFArrayAppendArray(*a1, a2, v9);
        return;
      }
    }
    else
    {
      *a3 = 1;
      if (*a1)
      {
        CFRelease(*a1);
        *a1 = 0;
      }
    }
    *a1 = CFArrayCreateMutableCopy(0, 0, a2);
  }
}

void CalDatabaseAddChangeToArray(CFTypeRef *a1, const void *a2, _BYTE *a3)
{
  const __CFArray *v5;
  __CFArray *Mutable;

  if (!*a3)
  {
    v5 = (const __CFArray *)*a1;
    if (v5)
    {
      if (CFArrayGetCount(v5) < 512)
      {
        Mutable = (__CFArray *)*a1;
        if (*a1)
        {
LABEL_8:
          CFArrayAppendValue(Mutable, a2);
          return;
        }
      }
      else
      {
        *a3 = 1;
        if (*a1)
        {
          CFRelease(*a1);
          *a1 = 0;
        }
      }
    }
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *a1 = Mutable;
    goto LABEL_8;
  }
}

CFIndex _EntityDict_enumerate(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unsigned int v4;
  CFIndex result;
  BOOL v6;
  const __CFArray *ValueAtIndex;
  CFIndex v8;
  CFIndex i;

  v4 = a2;
  if ((a2 & 0x80000000) != 0)
  {
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*a3 + 8), a2 & 0x7FFFFFFF);
    result = CFArrayGetCount(ValueAtIndex);
    if (result >= 1)
    {
      v8 = result;
      for (i = 0; i != v8; ++i)
      {
        CFArrayGetValueAtIndex(ValueAtIndex, i);
        result = (*(uint64_t (**)(void))(a3[1] + 16))();
      }
    }
  }
  else
  {
    do
    {
      result = (*(uint64_t (**)(void))(a3[1] + 16))();
      v6 = v4 > 0x3F;
      v4 >>= 6;
    }
    while (v6);
  }
  return result;
}

void _CalImagePrepareForSave(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  if (!_CalImageGetStoreID(a1))
  {
    v1 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_1A5CCB000, v1, OS_LOG_TYPE_ERROR, "Attempting to save an image that is not in any store", v2, 2u);
    }
  }
}

void CalImageInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalImageClass, (const char **)&kCalImageIndexes, 0);
  CalMigrationCreateTriggers(a2, (const char **)&kCalImageClass, (const char **)&kCalImageTriggers);
}

void CalImageMigrateTables(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3 <= 17001)
    CalImageInitializeTables(a1, a2);
}

uint64_t CalImageGetPropertyIDWithPropertyName(void *key)
{
  void *value;

  if (CalImageGetPropertyIDWithPropertyName_onceToken != -1)
    dispatch_once(&CalImageGetPropertyIDWithPropertyName_onceToken, &__block_literal_global_24);
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CalImageGetPropertyIDWithPropertyName_sPropDict, key, (const void **)&value))
  {
    return value;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void sub_1A5D84DB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 64; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

const void *_CalDatabaseCreateImage(uint64_t a1)
{
  const void *v2;
  const void *TemporaryRecordIDForEntity;
  BOOL v4;
  const os_unfair_lock *Context;

  v2 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 28);
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v2);
  return v2;
}

const void *CalDatabaseCreateImage(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Image;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Image = _CalDatabaseCreateImage((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Image;
}

uint64_t _CalRemoveImage(const void *a1)
{
  uint64_t DatabaseForRecord;

  DatabaseForRecord = CalGetDatabaseForRecord();
  return _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

void CalRemoveImage(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t DatabaseForRecord;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DatabaseForRecord = CalGetDatabaseForRecord();
  _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalImageHasValidParent(uint64_t a1)
{
  __CFArray *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __CFArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = _CalColorCopyEvents(a1);
  v3 = -[__CFArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        if ((_CalCalendarItemHasValidParent(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i)) & 1) != 0)
        {
          v8 = 1;
          v7 = v2;
          goto LABEL_21;
        }
      }
      v4 = -[__CFArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
      if (v4)
        continue;
      break;
    }
  }

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v7 = _CalImageCopyCalendars(a1);
  v8 = -[__CFArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v13;
    while (2)
    {
      for (j = 0; j != v8; ++j)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v7);
        if (_CalCalendarHasValidParent(*(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * j)))
        {
          v8 = 1;
          goto LABEL_20;
        }
      }
      v8 = -[__CFArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
      if (v8)
        continue;
      break;
    }
  }
LABEL_20:

LABEL_21:
  return v8;
}

CFMutableArrayRef _CalImageCopyCalendars(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFMutableArrayRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFMutableArrayRef)CPRecordGetProperty();
  if (result)
    return CalToManyRelationCopyObjects((uint64_t)result);
  return result;
}

BOOL _CalImageIsUnused(uint64_t a1)
{
  CFMutableArrayRef v2;
  _BOOL8 v3;
  CFMutableArrayRef v4;

  v2 = _CalColorCopyEvents(a1);
  if (-[__CFArray count](v2, "count"))
  {
    v3 = 0;
  }
  else
  {
    v4 = _CalImageCopyCalendars(a1);
    v3 = -[__CFArray count](v4, "count") == 0;

  }
  return v3;
}

void _CalImageCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Image WHERE (NOT EXISTS (SELECT 1 FROM CalendarItem where image_id > 0 AND image_id=Image.ROWID)) AND (NOT EXISTS (SELECT 1 FROM Calendar where image_id > 0 AND image_id=Image.ROWID));"),
    0);
}

uint64_t _CalImageSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

uint64_t _CalImageGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyImageWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalImageGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

void *_CalDatabaseGetImageWithIdentifierInStore(uint64_t a1, uint64_t a2)
{
  uint64_t DatabaseForRecord;
  uint64_t ID;

  DatabaseForRecord = CalGetDatabaseForRecord();
  ID = CPRecordGetID();
  return _CalDatabaseGetImageWithIdentifierInStoreID(DatabaseForRecord, ID, a2);
}

void *_CalDatabaseGetImageWithIdentifierInStoreID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t RecordStore;
  uint64_t v5;
  BOOL v6;
  const os_unfair_lock *Context;
  uint64_t RowidForRecordID;
  BOOL v9;
  const os_unfair_lock *v10;
  void *v11;
  void *v12;
  uint64_t v14;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  v5 = RecordStore;
  if (CDBLockingAssertionsEnabled)
    v6 = RecordStore == 0;
  else
    v6 = 1;
  if (!v6)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  RowidForRecordID = CPRecordStoreGetRowidForRecordID();
  if (CDBLockingAssertionsEnabled)
    v9 = v5 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v10)
      os_unfair_lock_assert_owner(v10 + 20);
  }
  v14 = MEMORY[0x1E0C809B0];
  v11 = (void *)CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
  objc_msgSend(v11, "firstObject", v14, 3221225472, ___CalDatabaseGetImageWithIdentifierInStoreID_block_invoke, &__block_descriptor_48_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l, RowidForRecordID, a3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

CFTypeRef CalDatabaseCopyImageWithIdentifierInStore(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  void *ImageWithIdentifierInStore;
  CFTypeRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ImageWithIdentifierInStore = _CalDatabaseGetImageWithIdentifierInStore(a1, a2);
  if (ImageWithIdentifierInStore)
    v6 = CFRetain(ImageWithIdentifierInStore);
  else
    v6 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

CFMutableArrayRef CalImageCopyEvents(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalColorCopyEvents(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

void CalImageAddEvent(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalColorAddEvent(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalImageRemoveEvent(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  uint64_t result;
  uint64_t Store;
  BOOL v7;
  const os_unfair_lock *v8;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationRemoveObject((_QWORD *)result, a2);
    result = _CalImageIsUnused(a1);
    if ((_DWORD)result)
    {
      Store = CPRecordGetStore();
      if (CDBLockingAssertionsEnabled)
        v7 = Store == 0;
      else
        v7 = 1;
      if (!v7)
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
      return CPRecordStoreRemoveRecord();
    }
  }
  return result;
}

void CalImageRemoveEvent(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalImageRemoveEvent(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFMutableArrayRef CalImageCopyCalendars(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFMutableArrayRef v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalImageCopyCalendars(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

_QWORD *_CalImageAddCalendar(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;
  uint64_t Store;
  BOOL v6;
  const os_unfair_lock *v7;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationAddObject(result, a2);
    Store = CPRecordGetStore();
    if (CDBLockingAssertionsEnabled)
      v6 = Store == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
    return (_QWORD *)CPRecordStoreAddRecord();
  }
  return result;
}

void CalImageAddCalendar(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalImageAddCalendar(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalImageRemoveCalendar(uint64_t a1, void *a2)
{
  const os_unfair_lock *Context;
  uint64_t result;
  uint64_t Store;
  BOOL v7;
  const os_unfair_lock *v8;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
  {
    CalToManyRelationRemoveObject((_QWORD *)result, a2);
    result = _CalImageIsUnused(a1);
    if ((_DWORD)result)
    {
      Store = CPRecordGetStore();
      if (CDBLockingAssertionsEnabled)
        v7 = Store == 0;
      else
        v7 = 1;
      if (!v7)
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
      return CPRecordStoreRemoveRecord();
    }
  }
  return result;
}

void CalImageRemoveCalendar(uint64_t a1, void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalImageRemoveCalendar(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalImageGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalImageGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t _CalImageGetStore(uint64_t a1)
{
  uint64_t Store;

  if ((int)_CalImageGetStoreID(a1) < 1)
    return 0;
  Store = CPRecordGetStore();
  return _CalGetStoreWithUID(Store);
}

uint64_t _CalImageGetStoreID(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  __CFArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  CFMutableArrayRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  const os_unfair_lock *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if ((int)Property <= 0)
  {
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v4 = _CalColorCopyEvents(a1);
    v5 = -[__CFArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v21;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v21 != v7)
            objc_enumerationMutation(v4);
          Property = _CalCalendarItemGetStoreId(*(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i));
          if ((int)Property > 0)
          {
            v9 = v4;
LABEL_29:

            if (a1)
            {
              if (CDBLockingAssertionsEnabled)
              {
                if (CPRecordGetStore())
                {
                  v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v14)
                    os_unfair_lock_assert_owner(v14 + 20);
                }
              }
            }
            CPRecordSetProperty();
            goto LABEL_35;
          }
        }
        v6 = -[__CFArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
        if (v6)
          continue;
        break;
      }

      if ((_DWORD)Property)
        goto LABEL_35;
    }
    else
    {

    }
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v9 = _CalImageCopyCalendars(a1);
    v10 = -[__CFArray countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v17;
      while (2)
      {
        for (j = 0; j != v11; ++j)
        {
          if (*(_QWORD *)v17 != v12)
            objc_enumerationMutation(v9);
          Property = _CalCalendarGetStoreId(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * j));
          if ((int)Property > 0)
          {

            goto LABEL_29;
          }
        }
        v11 = -[__CFArray countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
        if (v11)
          continue;
        break;
      }
    }
    else
    {
      Property = 0;
    }

LABEL_35:
  }
  return Property;
}

CFTypeRef CalImageCopyStore(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Store;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Store = (const void *)_CalImageGetStore(a1);
  if (Store)
    v4 = CFRetain(Store);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalImageSetType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentFileSetExternalModTag(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalImageGetType(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return (int)CPRecordGetIntegerProperty();
}

uint64_t CalImageGetType(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t Type;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Type = _CalImageGetType(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Type;
}

uint64_t _CalImageSetName(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void CalImageSetName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalImageSetName(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalImageCopyName(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *ProviderIdentifier;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ProviderIdentifier = (const void *)_CalColorGetProviderIdentifier(a1);
  if (ProviderIdentifier)
    v4 = CFRetain(ProviderIdentifier);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalImageSetColor(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorType(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const void *CalImageCopyColor(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *Description;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Description = (const void *)_CalCalendarItemGetDescription(a1);
  v4 = Description;
  if (Description)
    CFRetain(Description);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalImageSetIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalErrorSetErrorCode(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const void *CalImageCopyIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *ExternalIdentifier;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ExternalIdentifier = (const void *)_CalColorGetExternalIdentifier(a1);
  v4 = ExternalIdentifier;
  if (ExternalIdentifier)
    CFRetain(ExternalIdentifier);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalSuggestedEventInfoPrepareForSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
    return CalRelationOwnerWillSave(result);
  return result;
}

void CalSuggestedEventInfoInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalSuggestedEventInfoClass, (const char **)&kCalSuggestedEventInfoIndexes, 0);
}

void CalSuggestedEventInfoMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  if (a3 > 142)
  {
    if (a3 > 0x32D6)
      return;
  }
  else
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalSuggestedEventInfoClass, (const char **)&kCalSuggestedEventInfoIndexes, 0);
  }
  CalMigrateTableFull(a2, (const char **)&kCalSuggestedEventInfoClass, 0, (const char **)&kCalSuggestedEventInfoUpgradeInfo, 0, (const char **)&kCalSuggestedEventInfoIndexes, 0, 0, a3);
}

const void *_CalDatabaseCreateSuggestedEventInfo(uint64_t a1)
{
  return _CalDatabaseCreateSuggestedEventInfoWithKeys(a1, 0, 0);
}

const void *_CalDatabaseCreateSuggestedEventInfoWithKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  BOOL v8;
  const os_unfair_lock *Context;
  BOOL v10;
  const os_unfair_lock *v11;
  BOOL v12;
  const os_unfair_lock *v13;
  BOOL v14;
  const os_unfair_lock *v15;
  const void *TemporaryRecordIDForEntity;
  BOOL v17;
  const os_unfair_lock *v18;

  v6 = CPRecordCreate();
  v7 = (const void *)v6;
  if (CDBLockingAssertionsEnabled)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  if (CDBLockingAssertionsEnabled)
    v10 = v7 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (CPRecordGetStore())
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  CPRecordInitializeProperty();
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
      v12 = v7 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
    CPRecordInitializeProperty();
  }
  if (a3)
  {
    if (CDBLockingAssertionsEnabled)
      v14 = v7 == 0;
    else
      v14 = 1;
    if (!v14)
    {
      if (CPRecordGetStore())
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
    CPRecordInitializeProperty();
  }
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 20);
  if (CDBLockingAssertionsEnabled)
    v17 = v7 == 0;
  else
    v17 = 1;
  if (!v17)
  {
    if (CPRecordGetStore())
    {
      v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v18)
        os_unfair_lock_assert_owner(v18 + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v7);
  return v7;
}

const void *CalDatabaseCreateSuggestedEventInfo(os_unfair_lock_s *a1)
{
  return CalDatabaseCreateSuggestedEventInfoWithKeys(a1, 0, 0);
}

const void *CalDatabaseCreateSuggestedEventInfoWithKeys(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  const void *SuggestedEventInfoWithKeys;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  SuggestedEventInfoWithKeys = _CalDatabaseCreateSuggestedEventInfoWithKeys((uint64_t)a1, a2, a3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  return SuggestedEventInfoWithKeys;
}

uint64_t _CalRemoveSuggestedEventInfo(const void *a1)
{
  CFTypeRef Owner;
  uint64_t result;
  uint64_t Context;
  const os_unfair_lock *v5;

  Owner = _CalSuggestedEventInfoGetOwner((uint64_t)a1);
  if (Owner)
    _CalEventSetSuggestedEventInfo((uint64_t)Owner, 0);
  result = CPRecordGetStore();
  if (result)
  {
    Context = CPRecordStoreGetContext();
    if (Context)
      _CalDatabaseRemoveEntity(Context, a1);
    if (CDBLockingAssertionsEnabled)
    {
      v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5)
        os_unfair_lock_assert_owner(v5 + 20);
    }
    return CPRecordStoreRemoveRecord();
  }
  return result;
}

CFTypeRef _CalSuggestedEventInfoGetOwner(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

_QWORD *_CalEventSetSuggestedEventInfo(uint64_t a1, const void *a2)
{
  const os_unfair_lock *Context;
  _QWORD *result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (_QWORD *)CPRecordGetProperty();
  if (result)
    return CalRelationSetRelatedObject(result, a2);
  return result;
}

void CalRemoveSuggestedEventInfo(const void *a1)
{
  CFTypeRef v2;
  const void *v3;
  os_unfair_lock_s *RecordLock;
  uint64_t Context;
  const os_unfair_lock *v6;

  v2 = CalSuggestedEventInfoCopyOwner((uint64_t)a1);
  if (v2)
  {
    v3 = v2;
    CalEventSetSuggestedEventInfo((uint64_t)v2, 0);
    CFRelease(v3);
  }
  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (CPRecordGetStore())
  {
    Context = CPRecordStoreGetContext();
    if (Context)
      _CalDatabaseRemoveEntity(Context, a1);
    if (CDBLockingAssertionsEnabled)
    {
      v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6)
        os_unfair_lock_assert_owner(v6 + 20);
    }
    CPRecordStoreRemoveRecord();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalSuggestedEventInfoCopyOwner(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Owner;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalSuggestedEventInfoGetOwner(a1);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalEventSetSuggestedEventInfo(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalEventSetSuggestedEventInfo(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void CalSuggestedEventInfoSetOwner(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalRelationSetRelatedObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalSuggestedEventInfoCopyOpaqueKey(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalSuggestedEventInfoSetOpaqueKey(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalSuggestedEventInfoCopyUniqueKey(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalSuggestedEventInfoSetUniqueKey(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalSuggestedEventInfoGetChangedFields(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalSuggestedEventInfoGetChangedFields(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t ChangedFields;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ChangedFields = _CalSuggestedEventInfoGetChangedFields(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ChangedFields;
}

void CalSuggestedEventInfoSetChangedFields(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalSuggestedEventInfoGetChangesAcknowledged(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property != 0;
}

void CalSuggestedEventInfoSetChangesAcknowledged(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalSuggestedEventInfoGetTimestamp(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalSuggestedEventInfoSetTimestamp(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalSuggestedEventInfoCopyExtractionGroupIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalSuggestedEventInfoSetExtractionGroupIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef _CalEventGetSuggestedEventInfo(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

CFTypeRef CalEventCopySuggestedEventInfo(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef SuggestedEventInfo;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  SuggestedEventInfo = _CalEventGetSuggestedEventInfo(a1);
  v4 = SuggestedEventInfo;
  if (SuggestedEventInfo)
    CFRetain(SuggestedEventInfo);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalSuggestedEventInfoGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopySuggestedEventInfoWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalSuggestedEventInfoGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalSuggestedEventInfoGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t CalSuggestedEventInfoGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  __CFString *v9;
  int v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  int v14;
  __CFString *v15;
  int v16;
  __CFString *v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDict;
  if (!CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("owner");
      v6 = 7;
      v7 = CFSTR("opaqueKey");
      v8 = 1;
      v9 = CFSTR("uniqueKey");
      v10 = 2;
      v11 = CFSTR("changedFields");
      v12 = 3;
      v13 = CFSTR("changesAcknowledged");
      v14 = 4;
      v15 = CFSTR("timestampAsDate");
      v16 = 5;
      v17 = CFSTR("extractionGroupIdentifier");
      v18 = 6;
      CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 7);
      for (i = 96; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalSuggestedEventInfoGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5D87210(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 96; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t _CalSuggestedEventInfoGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef _CalSuggestedEventInfoHasValidParent(uint64_t a1)
{
  CFTypeRef result;

  result = _CalSuggestedEventInfoGetOwner(a1);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

void _CalSuggestedEventCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM SuggestedEventInfo WHERE owner_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
}

BOOL _CalEventIsSuggestedEvent(uint64_t a1)
{
  return _CalEventGetSuggestedEventInfo(a1) != 0;
}

void _CalSuggestedEventInfoInsertAndUpdateNotificationsForEvent(uint64_t a1)
{
  CFTypeRef SuggestedEventInfo;
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  SuggestedEventInfo = _CalEventGetSuggestedEventInfo(a1);
  if (SuggestedEventInfo)
  {
    _CalSuggestedEventInfoInsertAndUpdateNotificationsForInfo((uint64_t)SuggestedEventInfo);
  }
  else
  {
    v2 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v3 = 136315138;
      v4 = "_CalSuggestedEventInfoInsertAndUpdateNotificationsForEvent";
      _os_log_impl(&dword_1A5CCB000, v2, OS_LOG_TYPE_ERROR, "%s called on an an event with no suggested event info (probably not a suggested event)", (uint8_t *)&v3, 0xCu);
    }
  }
}

void _CalSuggestedEventInfoInsertAndUpdateNotificationsForInfo(uint64_t a1)
{
  uint64_t Context;
  uint64_t v3;
  const void *OwnerDirectlyThroughOwnerId;
  CFTypeRef Calendar;
  char ChangedFields;
  int v7;
  int Status;
  const os_unfair_lock *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t UniqueIdentifier;
  int ID;
  const void *inserted;
  CFTypeRef v21;
  id v22;
  uint8_t buf[4];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (CPRecordGetStore())
  {
    Context = CPRecordStoreGetContext();
    if (Context)
    {
      v3 = Context;
      OwnerDirectlyThroughOwnerId = (const void *)_CalSuggestedEventInfoGetOwnerDirectlyThroughOwnerId(a1);
      _CalSuggestedEventInfoRemoveNotificationsForInfo(a1);
      Calendar = _CalCalendarItemGetCalendar((uint64_t)OwnerDirectlyThroughOwnerId);
      if (!Calendar || !_CalCalendarIsNaturalLanguageSuggestedEventsCalendar((uint64_t)Calendar))
      {
        _CalDatabaseGetSuggestionsCalendar(v3);
        v21 = _CalCalendarItemGetCalendar((uint64_t)OwnerDirectlyThroughOwnerId);
        ChangedFields = _CalSuggestedEventInfoGetChangedFields(a1);
        if ((ChangedFields & 1) != 0)
        {
          v7 = 1;
        }
        else if ((ChangedFields & 2) != 0)
        {
          v7 = 2;
        }
        else if ((ChangedFields & 4) != 0)
        {
          v7 = 4;
        }
        else
        {
          v7 = ChangedFields & 8;
        }
        Status = _CalCalendarItemGetStatus((uint64_t)OwnerDirectlyThroughOwnerId);
        if (CDBLockingAssertionsEnabled)
        {
          if (OwnerDirectlyThroughOwnerId)
          {
            if (CPRecordGetStore())
            {
              v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v9)
                os_unfair_lock_assert_owner(v9 + 20);
            }
          }
        }
        v10 = (void *)CPRecordCopyProperty();
        v22 = 0;
        objc_msgSend(MEMORY[0x1E0D0C3B8], "unarchiveDictionaryFromData:error:", v10, &v22);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v22;
        if (v12)
        {
          v13 = CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v24 = (uint64_t)v12;
            _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "Error unarchiving structured data. Error: %@", buf, 0xCu);
          }
        }
        objc_msgSend(v11, "objectForKey:", *MEMORY[0x1E0D0C500], v21);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v14;
        if (v14)
        {
          objc_msgSend(v14, "BOOLValue");
        }
        else
        {
          v16 = (void *)CDBLogHandle;
          if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
          {
            v17 = v16;
            UniqueIdentifier = _CalEventGetUniqueIdentifier((uint64_t)OwnerDirectlyThroughOwnerId);
            *(_DWORD *)buf = 138543362;
            v24 = UniqueIdentifier;
            _os_log_impl(&dword_1A5CCB000, v17, OS_LOG_TYPE_ERROR, "Event is missing value for key to determine if suggested event is eligible for notification, event unique identifier = %{public}@", buf, 0xCu);

          }
        }
        ID = CPRecordGetID();
        if (ID == CPRecordGetID())
        {
          if (Status == 3)
          {
LABEL_31:

            return;
          }
        }
        else if (!v7 && Status != 3)
        {
          goto LABEL_31;
        }
        inserted = (const void *)_CalDatabaseInsertSuggestionNotificationOnCalendarItemWithTypeAndChanges(v3, OwnerDirectlyThroughOwnerId);
        if (inserted)
          CFRelease(inserted);
        goto LABEL_31;
      }
    }
  }
}

uint64_t _CalSuggestedEventInfoGetOwnerDirectlyThroughOwnerId(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t DatabaseForRecord;
  uint64_t RecordStore;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetProperty();
  DatabaseForRecord = CalGetDatabaseForRecord();
  RecordStore = _CalDatabaseGetRecordStore(DatabaseForRecord);
  return _CalGetCalendarItemWithRowID(RecordStore);
}

void _CalSuggestedEventInfoRemoveNotificationsForInfo(uint64_t a1)
{
  uint64_t OwnerDirectlyThroughOwnerId;
  const __CFArray *v2;
  CFMutableArrayRef Mutable;
  __CFArray *v4;
  CFIndex v5;
  const void *ValueAtIndex;
  CFTypeRef v7;
  const void *v8;
  CFIndex v9;
  const void *v10;

  OwnerDirectlyThroughOwnerId = _CalSuggestedEventInfoGetOwnerDirectlyThroughOwnerId(a1);
  v2 = _CalCalendarItemCopyRelatedResourceChanges(OwnerDirectlyThroughOwnerId);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v4 = Mutable;
  if (!v2 || !Mutable)
    goto LABEL_9;
  if (CFArrayGetCount(v2) >= 1)
  {
    v5 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
      v7 = _CalResourceChangeGetNotification((uint64_t)ValueAtIndex);
      if (v7)
      {
        v8 = v7;
        if (_CalNotificationGetEntityType((uint64_t)v7) == 19)
        {
          CFArrayAppendValue(v4, v8);
          _CalResourceChangeSetCalendarItem((uint64_t)ValueAtIndex, 0);
        }
      }
      ++v5;
    }
    while (CFArrayGetCount(v2) > v5);
LABEL_9:
    if (!v2)
      goto LABEL_11;
  }
  CFRelease(v2);
LABEL_11:
  if (v4)
  {
    if (CFArrayGetCount(v4) >= 1)
    {
      v9 = 0;
      do
      {
        v10 = CFArrayGetValueAtIndex(v4, v9);
        _CalResourceChangeNotificationRemoveAllChanges((uint64_t)v10);
        _CalRemoveNotification(v10);
        ++v9;
      }
      while (CFArrayGetCount(v4) > v9);
    }
    CFRelease(v4);
  }
}

uint64_t CalLocationUpdateFromICSComponent(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v50;
  void *v51;
  void *v52;
  _BYTE buf[22];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if (a3 && a4)
  {
    v8 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a4;
      _os_log_impl(&dword_1A5CCB000, v8, OS_LOG_TYPE_DEBUG, "includeLocationProperty should not both be true for property %zd.", buf, 0xCu);
    }
    a3 = 0;
  }
  else if (!a4)
  {
    goto LABEL_14;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (a4 == 2)
    {
      objc_msgSend(v7, "x_apple_end_location");
      v9 = objc_claimAutoreleasedReturnValue();
LABEL_16:
      v15 = (void *)v9;
      objc_msgSend(v7, "location");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v15)
      {
        objc_msgSend(v15, "title");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "address");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0D0C328], "fullDisplayStringWithTitle:address:", v17, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (!a3)
          goto LABEL_21;
      }
      else
      {
        v19 = 0;
        if (!a3)
          goto LABEL_21;
      }
      if ((objc_msgSend(v16, "isEqual:", v19) & 1) == 0)
      {

        goto LABEL_28;
      }
LABEL_21:
      if (v15)
      {
        objc_msgSend(v15, "title");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        CalLocationSetTitle(a1);

        objc_msgSend(v15, "address");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        CalLocationSetAddress(a1);

        objc_msgSend(v15, "routing");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        CalLocationSetRouting(a1);

        objc_msgSend(v15, "value");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "scheme");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "lowercaseString");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v25, "isEqualToString:", CFSTR("geo"));

        v52 = v19;
        if (v26)
        {
          objc_msgSend(v23, "absoluteString");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "substringFromIndex:", 4);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = objc_msgSend(v28, "rangeOfString:", CFSTR(";"));
          if (v30)
          {
            objc_msgSend(v28, "substringToIndex:", v29);
            v31 = objc_claimAutoreleasedReturnValue();

            v28 = (void *)v31;
          }
          objc_msgSend(v28, "componentsSeparatedByString:", CFSTR(","));
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v32, "count") == 2)
          {
            objc_msgSend(v32, "objectAtIndex:", 0);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "doubleValue");
            v35 = v34;

            objc_msgSend(v32, "objectAtIndex:", 1);
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "doubleValue");
            v38 = v37;

            *(_QWORD *)buf = v35;
            *(_QWORD *)&buf[8] = v38;
            CalLocationSetCoordinates(a1, (CFNumberRef)buf);
          }
          else
          {
            v40 = CDBiCalendarConversionHandle;
            if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v28;
              _os_log_impl(&dword_1A5CCB000, v40, OS_LOG_TYPE_DEBUG, "Ignoring invalid coordinates: %@", buf, 0xCu);
            }
          }

        }
        else
        {
          v39 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v23;
            _os_log_impl(&dword_1A5CCB000, v39, OS_LOG_TYPE_DEBUG, "Ignoring unexpected location URL scheme: %@.", buf, 0xCu);
          }
        }
        objc_msgSend(v15, "parameterValueForName:", CFSTR("X-APPLE-REFERENCEFRAME"));
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = v41;
        if (v41)
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v41, "integerValue"));
        v50 = v23;
        CalLocationSetReferenceFrame(a1);
        objc_msgSend(v15, "parameterValueForName:", CFSTR("X-APPLE-ABUID"));
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v43)
        {
          objc_msgSend(v15, "parameterValueForName:", CFSTR("X-Apple-ABUID"), v23);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
        }
        CalLocationSetAddressBookEntityID(a1);
        v44 = (void *)CalLocationCopyMapKitHandle(a1);
        objc_msgSend(v15, "mapKitHandle");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = v45;
        if (v45 != v44 && (objc_msgSend(v45, "isEqualToData:", v44) & 1) == 0)
          CalLocationSetMapKitHandle(a1);
        objc_msgSend(v15, "parameterValueForName:", CFSTR("X-APPLE-RADIUS"), v50);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        if (v47
          || (objc_msgSend(v15, "parameterValueForName:", CFSTR("X-Apple-Radius")),
              (v47 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
        {
          v48 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v47, "doubleValue");
          objc_msgSend(v48, "numberWithDouble:");
          CalLocationSetRadius(a1);

        }
        else
        {
          CalLocationSetRadius(a1);
        }
        v19 = v52;

        v14 = 1;
        goto LABEL_45;
      }
LABEL_28:
      CalLocationSetTitle(a1);
      CalLocationSetAddress(a1);
      CalLocationSetRouting(a1);
      CalLocationSetAddressBookEntityID(a1);
      CalLocationSetMapKitHandle(a1);
      CalLocationSetCoordinates(a1, 0);
      CalLocationSetReferenceFrame(a1);
      CalLocationSetRadius(a1);
      v14 = 0;
LABEL_45:

      goto LABEL_46;
    }
    if (a4 == 1)
    {
      objc_msgSend(v7, "x_apple_travel_start");
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_16;
    }
LABEL_14:
    objc_msgSend(v7, "x_apple_structured_location");
    v9 = objc_claimAutoreleasedReturnValue();
    goto LABEL_16;
  }
  v10 = (void *)CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
  {
    v11 = v10;
    v12 = (void *)objc_opt_class();
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v12;
    v13 = v12;
    _os_log_impl(&dword_1A5CCB000, v11, OS_LOG_TYPE_ERROR, "updating location type %zd, but icsItem is type '%@'", buf, 0x16u);

  }
  v14 = 0;
LABEL_46:

  return v14;
}

uint64_t UpdateICSStructuredLocationFromCalLocation(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  id v7;
  NSObject *v8;
  char v9;
  const void *v10;
  const void *v11;
  int Coordinates;
  NSObject *v13;
  char v14;
  char v15;
  void *v16;
  void *v17;
  id v18;
  char v19;
  char v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  const char *v32;
  NSObject *v33;
  void *v35;
  uint8_t v36[16];
  _BYTE buf[22];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if (a3 && a4)
  {
    v8 = CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a4;
      _os_log_impl(&dword_1A5CCB000, v8, OS_LOG_TYPE_DEBUG, "includeLocationProperty should not both be true for property %zd.", buf, 0xCu);
    }
    a3 = 0;
  }
  else if (!a4)
  {
    v9 = 0;
    if (a1)
    {
LABEL_9:
      v10 = (const void *)CalLocationCopyAddressBookEntityID(a1);
      v11 = (const void *)CalLocationCopyMapKitHandle(a1);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      Coordinates = CalLocationGetCoordinates(a1, (uint64_t)buf);
      if ((Coordinates & 1) != 0 || (v13 = 0, v10))
      {
        v13 = objc_alloc_init(MEMORY[0x1E0DDB860]);
        v14 = v9 ^ 1;
        if (a4 == 1)
          v15 = v9 ^ 1;
        else
          v15 = 1;
        if ((v15 & 1) != 0)
        {
          if (a4 != 2)
            v14 = 1;
          if ((v14 & 1) != 0)
            objc_msgSend(v7, "setX_apple_structured_location:", v13);
          else
            objc_msgSend(v7, "setX_apple_end_location:", v13);
        }
        else
        {
          objc_msgSend(v7, "setX_apple_travel_start:", v13);
        }
      }
      v21 = (void *)CalLocationCopyTitle(a1);
      -[NSObject setTitle:](v13, "setTitle:", v21);
      v22 = (void *)CalLocationCopyAddress(a1);
      -[NSObject setAddress:](v13, "setAddress:", v22);
      v23 = (void *)CalLocationCopyRouting(a1);
      -[NSObject setRouting:](v13, "setRouting:", v23);
      v35 = (void *)CalLocationCopyReferenceFrame(a1);
      if (a3)
      {
        objc_msgSend(MEMORY[0x1E0D0C328], "fullDisplayStringWithTitle:address:", v21, v22);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setLocation:", v24);

      }
      if (Coordinates)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("geo:%f,%f"), *(_QWORD *)buf, *(_QWORD *)&buf[8]);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject setValue:type:](v13, "setValue:type:", v26, 5013);

        v27 = v35;
        if (v35)
        {
          objc_msgSend(v35, "stringValue");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject setParameterValue:forName:](v13, "setParameterValue:forName:", v28, CFSTR("X-APPLE-REFERENCEFRAME"));

          v27 = v35;
        }

      }
      else
      {
        -[NSObject setValue:type:](v13, "setValue:type:", 0, 5013);
        -[NSObject setParameterValue:forName:](v13, "setParameterValue:forName:", 0, CFSTR("X-APPLE-REFERENCEFRAME"));
        v27 = v35;
      }
      -[NSObject setParameterValue:forName:](v13, "setParameterValue:forName:", v10, CFSTR("X-APPLE-ABUID"));
      v29 = (void *)CalLocationCopyRadius(a1);
      objc_msgSend(v29, "stringValue");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSObject setParameterValue:forName:](v13, "setParameterValue:forName:", v30, CFSTR("X-APPLE-RADIUS"));

      if (v11)
      {
        -[NSObject setMapKitHandle:](v13, "setMapKitHandle:", v11);
        -[NSObject ICSStringWithOptions:](v13, "ICSStringWithOptions:", 0);
        v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v32 = (const char *)objc_msgSend(v31, "UTF8String");
        if (v32 && strlen(v32) >= 0x3DF)
        {
          v33 = CDBiCalendarConversionHandle;
          if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v36 = 0;
            _os_log_impl(&dword_1A5CCB000, v33, OS_LOG_TYPE_DEBUG, "UpdateICSStructuredLocationFromCalLocation dropping mapkit handle because it exceeds the max length restriction on many servers.", v36, 2u);
          }
          -[NSObject setMapKitHandle:](v13, "setMapKitHandle:", 0);
          v27 = v35;
        }

      }
      if (v10)
        CFRelease(v10);
      if (v11)
        CFRelease(v11);

      goto LABEL_53;
    }
    goto LABEL_19;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = 1;
    if (a1)
      goto LABEL_9;
LABEL_19:
    v19 = v9 ^ 1;
    if (a4 == 1)
      v20 = v9 ^ 1;
    else
      v20 = 1;
    if ((v20 & 1) != 0)
    {
      if (a4 != 2)
        v19 = 1;
      if ((v19 & 1) != 0)
        objc_msgSend(v7, "setX_apple_structured_location:", 0);
      else
        objc_msgSend(v7, "setX_apple_end_location:", 0);
    }
    else
    {
      objc_msgSend(v7, "setX_apple_travel_start:", 0);
    }
    goto LABEL_54;
  }
  v16 = (void *)CDBiCalendarConversionHandle;
  if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_ERROR))
  {
    v13 = v16;
    v17 = (void *)objc_opt_class();
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v17;
    v18 = v17;
    _os_log_impl(&dword_1A5CCB000, v13, OS_LOG_TYPE_ERROR, "updating location type %zd, but icsItem is type '%@'", buf, 0x16u);

LABEL_53:
  }
LABEL_54:

  return 0;
}

void CalDatabasePersistentChangeTrackingInitializeDB(uint64_t a1, _QWORD *a2, int a3)
{
  const __CFString *v4;
  const __CFString *v5;

  if (a3 <= 129)
  {
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE ClientCursor(    ROWID INTEGER PRIMARY KEY AUTOINCREMENT,     client_identifier TEXT,     store_id INTEGER,     latest_consumed_sequence_number INTEGER,     latest_consumed_timestamp REAL,     UNIQUE(client_identifier));"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX ClientCursorClientIdentifier ON ClientCursor(client_identifier); "));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE ClientSequence (client_identifier TEXT, sequence_number INTEGER, timestamp REAL);"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX ClientSequenceClientIdentifier ON ClientSequence(client_identifier); "));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TABLE ClientCursorConsumed(   client_identifier TEXT,     consumed_entity_class INTEGER,     consumed_entity_id INTEGER,     consumed_change_id INTEGER,     sequence_number INTEGER);"));
    v4 = CFSTR("CREATE TRIGGER delete_clientcursor_consumed AFTER DELETE ON ClientCursor     BEGIN         DELETE FROM ClientCursorConsumed WHERE client_identifier = OLD.client_identifier;         DELETE FROM ClientSequence WHERE client_identifier = OLD.client_identifier;     END; ");
    v5 = CFSTR("CREATE INDEX ClientCursorConsumedClientIdentifier ON ClientCursorConsumed(client_identifier); ");
LABEL_5:
    CalPerformSQLWithConnection(a2, (uint64_t)v5);
LABEL_6:
    CalPerformSQLWithConnection(a2, (uint64_t)v4);
    return;
  }
  if (a3 < 0x87)
  {
    v4 = CFSTR("ALTER TABLE ClientSequence ADD COLUMN     timestamp REAL; ");
    v5 = CFSTR("ALTER TABLE ClientCursor ADD COLUMN     store_id INTEGER;");
    goto LABEL_5;
  }
  if (a3 < 0x4651)
  {
    v4 = CFSTR("ALTER TABLE ClientSequence ADD COLUMN     timestamp REAL; ");
    goto LABEL_6;
  }
}

void CalDatabasePersistentChangeTrackingCopyToAuxDatabase(_QWORD *a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t v6;
  const os_unfair_lock *v7;
  int v8;
  uint64_t v9;
  const os_unfair_lock *v10;
  _QWORD v11[5];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __CalDatabasePersistentChangeTrackingCopyToAuxDatabase_block_invoke;
  v11[3] = &__block_descriptor_40_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
  v11[4] = a2;
  CalPerformSQLWithConnectionAndBindBlock(a1, 0, (uint64_t)CFSTR("INSERT INTO aux.ClientCursor SELECT * FROM ClientCursor WHERE store_id IN (0, ?) AND client_identifier NOT IN (SELECT client_identifier FROM aux.ClientCursor)"), v11);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*a1)
      {
        if (*(_QWORD *)(*a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v4 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (!v4)
    goto LABEL_21;
  v5 = v4;
  if (CDBLockingAssertionsEnabled)
  {
    if (*v4)
    {
      v6 = **v4;
      if (v6)
      {
        if (*(_QWORD *)(v6 + 104))
        {
          v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7)
            os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
  }
  v8 = CPSqliteStatementIntegerResult();
  if (CDBLockingAssertionsEnabled)
  {
    if (*v5)
    {
      v9 = **v5;
      if (v9)
      {
        if (*(_QWORD *)(v9 + 104))
        {
          v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v10)
            os_unfair_lock_assert_owner(v10 + 20);
        }
      }
    }
  }
  CPSqliteStatementReset();
  if (!v8)
  {
LABEL_21:
    CalPerformSQLWithConnection(a1, (uint64_t)CFSTR("INSERT INTO aux.ClientCursorConsumed SELECT * FROM ClientCursorConsumed"));
    CalPerformSQLWithConnection(a1, (uint64_t)CFSTR("INSERT INTO aux.ClientSequence SELECT * FROM ClientSequence"));
  }
}

uint64_t _CalDatabaseRegisterClientForPersistentChangeTracking(uint64_t a1, void *a2, sqlite3_int64 a3)
{
  NSObject *v6;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;
  uint64_t SequenceNumber;
  BOOL v11;
  const os_unfair_lock *v12;
  uint64_t Database;
  BOOL v14;
  const os_unfair_lock *v15;
  uint64_t v16;
  const os_unfair_lock *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  sqlite3_stmt *v22;
  double Current;
  uint64_t v24;
  const os_unfair_lock *v25;
  NSObject *v26;
  const char *v27;
  os_unfair_lock_s *v28;
  int v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_INFO))
  {
    v30 = 138412290;
    v31 = a2;
    _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_INFO, "_CalDatabaseRegisterClientForPersistentChangeTracking - ClientIdentifier: [%@]", (uint8_t *)&v30, 0xCu);
  }
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  SequenceNumber = CPRecordStoreGetSequenceNumber();
  if (!a2)
  {
    v26 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v30) = 0;
      v27 = "_CalDatabaseRegisterClientForPersistentChangeTracking - ClientIdentifier is NULL";
LABEL_45:
      _os_log_impl(&dword_1A5CCB000, v26, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&v30, 2u);
    }
LABEL_46:
    v28 = (os_unfair_lock_s *)(a1 + 80);
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v28);
    os_unfair_lock_unlock(v28);
    return SequenceNumber;
  }
  if (CDBLockingAssertionsEnabled)
    v11 = *(_QWORD *)(a1 + 24) == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (v12)
      os_unfair_lock_assert_owner(v12 + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v14 = Database == 0;
  else
    v14 = 1;
  if (!v14)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v15)
        os_unfair_lock_assert_owner(v15 + 20);
    }
  }
  v16 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (CDBLockingAssertionsEnabled)
  {
    if (v16)
    {
      if (*(_QWORD *)v16)
      {
        if (*(_QWORD *)(*(_QWORD *)v16 + 104))
        {
          v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17)
            os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
  }
  v18 = CPSqliteConnectionStatementForSQL();
  if (v18)
  {
    v19 = v18;
    v20 = (const char *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
    if (v20)
    {
      v21 = v20;
      if (*v20)
      {
        sqlite3_bind_text(*(sqlite3_stmt **)(v19 + 8), 1, v20, -1, 0);
        sqlite3_bind_int64(*(sqlite3_stmt **)(v19 + 8), 2, a3);
        sqlite3_bind_int(*(sqlite3_stmt **)(v19 + 8), 3, SequenceNumber);
        sqlite3_bind_int(*(sqlite3_stmt **)(v19 + 8), 4, SequenceNumber);
        sqlite3_bind_text(*(sqlite3_stmt **)(v19 + 8), 5, v21, -1, 0);
        v22 = *(sqlite3_stmt **)(v19 + 8);
        Current = CFAbsoluteTimeGetCurrent();
        sqlite3_bind_double(v22, 6, Current);
        _CalDatabasePerformStatementWithWriteLock(a1, v19);
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v19)
          {
            v24 = **(_QWORD **)v19;
            if (v24)
            {
              if (*(_QWORD *)(v24 + 104))
              {
                v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v25)
                  os_unfair_lock_assert_owner(v25 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
        return SequenceNumber;
      }
      v26 = CDBLogHandle;
      if (!os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        goto LABEL_46;
      LOWORD(v30) = 0;
      v27 = "_CalDatabaseRegisterClientForPersistentChangeTracking - clientIdentifierCString string is empty";
      goto LABEL_45;
    }
    v26 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v30) = 0;
      v27 = "_CalDatabaseRegisterClientForPersistentChangeTracking - clientIdentifierCString is NULL";
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  return SequenceNumber;
}

uint64_t CalDatabaseRegisterClientForPersistentChangeTracking(os_unfair_lock_s *a1, void *a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v5 = _CalDatabaseRegisterClientForPersistentChangeTracking((uint64_t)a1, a2, 0);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t CalDatabaseRegisterClientForPersistentChangeTrackingInStore(os_unfair_lock_s *a1, void *a2)
{
  os_unfair_lock_s *v4;
  uint64_t RecordStore;
  BOOL v6;
  const os_unfair_lock *Context;
  sqlite3_int64 RowidForRecordID;
  uint64_t v9;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CPRecordGetID();
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v6 = RecordStore == 0;
  else
    v6 = 1;
  if (!v6)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  RowidForRecordID = CPRecordStoreGetRowidForRecordID();
  v9 = _CalDatabaseRegisterClientForPersistentChangeTracking((uint64_t)a1, a2, RowidForRecordID);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v9;
}

void _CalDatabaseAssociateSequenceNumberWithClient(uint64_t a1, void *a2, int a3)
{
  const os_unfair_lock *Context;
  uint64_t v6;
  uint64_t **v7;
  const char *v8;
  sqlite3_stmt *v9;
  double Current;
  uint64_t v11;
  const os_unfair_lock *v12;
  uint64_t v13;
  const os_unfair_lock *v14;
  NSObject *v15;
  int v16;
  void *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)(*(_QWORD *)a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  v6 = CPSqliteConnectionStatementForSQL();
  if (v6)
  {
    v7 = (uint64_t **)v6;
    v8 = (const char *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
    if (v8)
    {
      sqlite3_bind_text((sqlite3_stmt *)v7[1], 1, v8, -1, 0);
      sqlite3_bind_int((sqlite3_stmt *)v7[1], 2, a3);
      v9 = (sqlite3_stmt *)v7[1];
      Current = CFAbsoluteTimeGetCurrent();
      sqlite3_bind_double(v9, 3, Current);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v7)
        {
          v11 = **v7;
          if (v11)
          {
            if (*(_QWORD *)(v11 + 104))
            {
              v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v12)
                os_unfair_lock_assert_owner(v12 + 20);
            }
          }
        }
      }
      CPSqliteStatementPerform();
    }
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        v13 = **v7;
        if (v13)
        {
          if (*(_QWORD *)(v13 + 104))
          {
            v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v14)
              os_unfair_lock_assert_owner(v14 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  v15 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 138543618;
    v17 = a2;
    v18 = 1024;
    v19 = a3;
    _os_log_impl(&dword_1A5CCB000, v15, OS_LOG_TYPE_DEFAULT, "Recorded ClientSequence record with clientIdentifier = %{public}@, sequenceNumber = %d", (uint8_t *)&v16, 0x12u);
  }
}

uint64_t CalDatabaseGetChangedRecordIDsSinceSequenceNumberForClient(uint64_t a1, void *a2, int a3, void *a4, _BYTE *a5, _DWORD *a6, CFTypeRef *a7, CFTypeRef *a8, CFTypeRef *a9)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int *v20;
  void *v21;
  int v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  void *v26;
  int v28;
  uint64_t v29;

  v29 = 0;
  v28 = 0;
  _CalDatabaseGetChangedObjectIDsSinceSequenceNumberForClient(a1, a2, a3, a4, a5, a6, (_DWORD *)&v29 + 1, &v29, &v28);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", SHIDWORD(v29));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (int)v29);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v28);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_retainAutorelease(v11);
  v16 = objc_msgSend(v15, "bytes");
  v17 = v16;
  v18 = HIDWORD(v29);
  if (SHIDWORD(v29) < 1)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v19 = 0;
    v20 = (int *)(v16 + 4);
    do
    {
      v21 = (void *)CalRecordIDCreate(*(v20 - 1), *v20);
      objc_msgSend(v12, "addObject:", v21);

      ++v19;
      v18 = HIDWORD(v29);
      v20 += 2;
    }
    while (v19 < SHIDWORD(v29));
  }
  v22 = v29 + v18;
  if ((int)v19 < v22)
  {
    v23 = 2 * v19;
    do
    {
      v24 = (void *)CalRecordIDCreate(*(_DWORD *)(v17 + 4 * v23), *(_DWORD *)(v17 + 4 * (v23 + 1)));
      objc_msgSend(v13, "addObject:", v24);

      v22 = v29 + HIDWORD(v29);
      v23 += 2;
      LODWORD(v19) = v19 + 1;
    }
    while ((int)v29 + HIDWORD(v29) > (int)v19);
  }
  if ((int)v19 < v22 + v28)
  {
    v25 = 2 * v19;
    do
    {
      v26 = (void *)CalRecordIDCreate(*(_DWORD *)(v17 + 4 * v25), *(_DWORD *)(v17 + 4 * (v25 + 1)));
      objc_msgSend(v14, "addObject:", v26);

      v25 += 2;
      LODWORD(v19) = v19 + 1;
    }
    while ((int)v29 + HIDWORD(v29) + v28 > (int)v19);
  }
  if (a7)
    *a7 = CFAutorelease(v12);
  if (a8)
    *a8 = CFAutorelease(v13);
  if (a9)
    *a9 = CFAutorelease(v14);

  return 0;
}

id _CalDatabaseGetChangedObjectIDsSinceSequenceNumberForClient(uint64_t a1, void *a2, int a3, void *a4, _BYTE *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  os_unfair_lock_s *v13;
  id v14;
  const char *v15;
  BOOL v16;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v19;
  uint64_t v20;
  uint64_t RecordStore;
  const os_unfair_lock *v22;
  const os_unfair_lock *v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  const os_unfair_lock *v27;
  int v28;
  int v29;
  BOOL v31;
  NSObject *v32;
  void *v33;
  uint64_t v34;
  const os_unfair_lock *v35;
  const __CFDictionary *v36;
  int v37;
  _DWORD *v38;
  _BYTE *v39;
  int v41;
  int v42;
  __CFString *v43;
  __CFString *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  CFMutableDictionaryRef Mutable;
  int v50;
  id v51;
  __CFString *v52;
  id v53;
  const __CFDictionary *v54;
  CFIndex Count;
  unint64_t v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  int v64;
  const __CFDictionary *v65;
  CFIndex v66;
  const void **v67;
  const void **v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  NSObject *v75;
  NSObject *v76;
  NSObject *v77;
  id v78;
  size_t v80[2];
  int v81;
  const __CFDictionary *v82;
  int SequenceNumber;
  CFIndex v84;
  _BOOL4 v85;
  char *v86;
  char *v87;
  _BYTE *v88;
  _DWORD *v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  void *v94;
  _QWORD v95[4];
  id v96;
  __CFString *v97;
  __CFString *v98;
  id v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  CFMutableDictionaryRef v104;
  int v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint8_t buf[4];
  size_t v119;
  uint64_t v120;

  v91 = a8;
  v90 = a7;
  v89 = a6;
  v88 = a5;
  v92 = a9;
  v120 = *MEMORY[0x1E0C80C00];
  v13 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v14 = objc_retainAutorelease(a2);
  v15 = (const char *)objc_msgSend(v14, "UTF8String");
  v114 = 0;
  v115 = &v114;
  v116 = 0x2020000000;
  v117 = 0;
  v110 = 0;
  v111 = &v110;
  v112 = 0x2020000000;
  v113 = 0;
  v106 = 0;
  v107 = &v106;
  v108 = 0x2020000000;
  v109 = 0;
  if (CDBLockingAssertionsEnabled)
    v16 = *(_QWORD *)(a1 + 24) == 0;
  else
    v16 = 1;
  if (!v16)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
  {
    if (Database)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
    }
  }
  v20 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (__CalDatabaseBeginReadTransaction(a1, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:711"))
  {
    RecordStore = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
    }
    SequenceNumber = CPRecordStoreGetSequenceNumber();
    v105 = 0;
    if (CDBLockingAssertionsEnabled)
    {
      if (v20)
      {
        if (*(_QWORD *)v20)
        {
          if (*(_QWORD *)(*(_QWORD *)v20 + 104))
          {
            v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v23)
              os_unfair_lock_assert_owner(v23 + 20);
          }
        }
      }
    }
    v24 = CPSqliteConnectionStatementForSQL();
    v25 = (uint64_t **)v24;
    if (v24)
    {
      sqlite3_bind_text(*(sqlite3_stmt **)(v24 + 8), 1, v15, -1, 0);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v25)
        {
          v26 = **v25;
          if (v26)
          {
            if (*(_QWORD *)(v26 + 104))
            {
              v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v27)
                os_unfair_lock_assert_owner(v27 + 20);
            }
          }
        }
      }
      v28 = CPSqliteStatementIntegerResult();
      v29 = v28;
      v31 = v28 == -1 || a3 > 0 && v28 > a3;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v25)
        {
          v34 = **v25;
          if (v34)
          {
            if (*(_QWORD *)(v34 + 104))
            {
              v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v35)
                os_unfair_lock_assert_owner(v35 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
      if (v31)
      {
        v36 = 0;
        v37 = 1;
        v38 = v89;
        v39 = v88;
        goto LABEL_74;
      }
    }
    else
    {
      v29 = -1;
    }
    if (v29 != -1 && a3 == -1)
      v41 = v29;
    else
      v41 = a3;
    LODWORD(v94) = v41;
    v42 = *(_DWORD *)(a1 + 360);
    if (v42 >= 0)
      v43 = CFSTR("sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?");
    else
      v43 = CFSTR("sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)");
    if (v42 >= 0)
      v44 = CFSTR("sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?");
    else
      v44 = CFSTR("sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)");
    generateNotInClause(a4);
    v45 = objc_claimAutoreleasedReturnValue();
    v46 = (void *)v45;
    if (v45)
    {
      -[__CFString stringByAppendingFormat:](v43, "stringByAppendingFormat:", CFSTR(" AND store_id %@"), v45);
      v43 = (__CFString *)objc_claimAutoreleasedReturnValue();
      -[__CFString stringByAppendingFormat:](v44, "stringByAppendingFormat:", CFSTR(" AND store_id %@"), v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      -[__CFString stringByAppendingFormat:](v44, "stringByAppendingFormat:", CFSTR(" AND record %@"), v46);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v47 = v44;
      v48 = v44;
    }
    Mutable = CFDictionaryCreateMutable(0, 13, 0, MEMORY[0x1E0C9B3A0]);
    v50 = *(_DWORD *)(a1 + 360);
    v95[0] = MEMORY[0x1E0C809B0];
    v95[1] = 3221225472;
    v95[2] = ___CalDatabaseGetChangedObjectIDsSinceSequenceNumberForClient_block_invoke;
    v95[3] = &unk_1E4F90618;
    v51 = v48;
    v96 = v51;
    v97 = v44;
    v52 = v43;
    v98 = v52;
    v53 = v47;
    v103 = a1;
    v104 = Mutable;
    v99 = v53;
    v100 = &v114;
    v101 = &v110;
    v102 = &v106;
    _prepareBindingBlocksForFindingChangesOfEachEntityType(a1, v14, (int)v94, v50, v95);
    v54 = Mutable;

    v38 = v89;
    v39 = v88;

    v37 = 0;
    v36 = v54;
LABEL_74:
    __CalDatabaseRollbackTransaction(a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:840");
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v13);
    os_unfair_lock_unlock(v13);
    if (!v36)
    {
      v33 = 0;
      if (!v39)
        goto LABEL_113;
      goto LABEL_112;
    }
    Count = CFDictionaryGetCount(v36);
    v80[1] = (size_t)v80;
    MEMORY[0x1E0C80A78]();
    v56 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
    if ((unint64_t)(8 * Count) >= 0x200)
      v57 = 512;
    else
      v57 = 8 * Count;
    bzero((char *)v80 - v56, v57);
    MEMORY[0x1E0C80A78]();
    bzero((char *)v80 - v56, v57);
    v87 = (char *)v80 - v56;
    v86 = (char *)v80 - v56;
    CFDictionaryGetKeysAndValues(v36, (const void **)((char *)v80 - v56), (const void **)((char *)v80 - v56));
    v58 = v115[3];
    v59 = v111[3] + v58;
    v80[0] = 8 * (v107[3] + v59);
    v60 = (char *)malloc_type_malloc(v80[0], 0xF0C97613uLL);
    v82 = v36;
    v81 = v37;
    if (v60)
    {
      if (Count >= 1)
      {
        v61 = 0;
        v62 = 0;
        v63 = 1;
        v84 = Count;
        while (1)
        {
          v85 = v63;
          v64 = *(_DWORD *)&v87[8 * v61];
          v93 = v61;
          v65 = *(const __CFDictionary **)&v86[8 * v61];
          v66 = CFDictionaryGetCount(v65);
          v94 = malloc_type_malloc(8 * v66, 0x100004000313F17uLL);
          if (!v94)
            break;
          v67 = (const void **)malloc_type_malloc(8 * v66, 0x100004000313F17uLL);
          if (!v67)
          {
            v77 = CDBLogHandle;
            if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134217984;
              v119 = v66;
              _os_log_impl(&dword_1A5CCB000, v77, OS_LOG_TYPE_ERROR, "Unable to allocate space for %zu object states", buf, 0xCu);
            }
            free(v94);
            goto LABEL_105;
          }
          CFDictionaryGetKeysAndValues(v65, (const void **)v94, v67);
          if (v66 >= 1)
          {
            v68 = v67;
            v69 = v94;
            do
            {
              v70 = (uint64_t)*v68++;
              switch(v70)
              {
                case 1:
                case 3:
                  v71 = v62 + 1;
                  v72 = v58;
                  v73 = v59;
                  goto LABEL_91;
                case 2:
                  v72 = v58 + 1;
                  v71 = v62;
                  v73 = v59;
                  v62 = v58;
                  goto LABEL_91;
                case 4:
                case 6:
                  v73 = v59 + 1;
                  v71 = v62;
                  v72 = v58;
                  v62 = v59;
LABEL_91:
                  v74 = &v60[8 * v62];
                  *(_DWORD *)v74 = v64;
                  *((_DWORD *)v74 + 1) = *v69;
                  v62 = v71;
                  v58 = v72;
                  v59 = v73;
                  break;
                default:
                  break;
              }
              ++v69;
              --v66;
            }
            while (v66);
          }
          free(v94);
          free(v67);
          v61 = v93 + 1;
          v63 = v93 + 1 < v84;
          if (v93 + 1 == v84)
            goto LABEL_106;
        }
        v76 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v119 = v66;
          _os_log_impl(&dword_1A5CCB000, v76, OS_LOG_TYPE_ERROR, "Unable to allocate space for %zu object IDs", buf, 0xCu);
        }
LABEL_105:
        v63 = v85;
LABEL_106:
        CFRelease(v82);
        v38 = v89;
        v39 = v88;
        LOBYTE(v37) = v81;
        if (v60 != 0 && !v63)
        {
          v78 = objc_alloc(MEMORY[0x1E0C99D50]);
          v33 = (void *)objc_msgSend(v78, "initWithBytesNoCopy:length:freeWhenDone:", v60, v80[0], 1);
        }
        else
        {
          if (v60)
            free(v60);
          v33 = 0;
          LOBYTE(v37) = 1;
        }
        if (!v39)
          goto LABEL_113;
LABEL_112:
        *v39 = v37;
LABEL_113:
        if (v38)
          *v38 = SequenceNumber;
        if (v90)
          *v90 = v115[3];
        if (v91)
          *v91 = v111[3];
        if (v92)
          *v92 = v107[3];
        goto LABEL_121;
      }
    }
    else
    {
      v75 = CDBLogHandle;
      if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v119 = v80[0];
        _os_log_impl(&dword_1A5CCB000, v75, OS_LOG_TYPE_ERROR, "Unable to allocated %zu bytes for returning changes", buf, 0xCu);
      }
    }
    v63 = 0;
    goto LABEL_106;
  }
  v32 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v32, OS_LOG_TYPE_ERROR, "Couldn't start transaction before fetching changes since sequence number", buf, 2u);
  }
  if (v90)
    *v90 = 0;
  if (v91)
    *v91 = 0;
  if (v92)
    *v92 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v13);
  os_unfair_lock_unlock(v13);
  v33 = 0;
LABEL_121:
  _Block_object_dispose(&v106, 8);
  _Block_object_dispose(&v110, 8);
  _Block_object_dispose(&v114, 8);
  return v33;
}

void sub_1A5D89A1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1A5D89AA0()
{
  JUMPOUT(0x1A5D89A98);
}

id CalDatabaseGetChangedObjectIDsSinceSequenceNumberForClient(uint64_t a1, void *a2, int a3, void *a4, _BYTE *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  return _CalDatabaseGetChangedObjectIDsSinceSequenceNumberForClient(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t CalDatabaseGetChangedEKObjectsForClient(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, int *a7, BOOL *a8, _QWORD *a9)
{
  _QWORD *v13;
  id v14;
  BOOL v15;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v18;
  const os_unfair_lock *v19;
  uint64_t v20;
  uint64_t RecordStore;
  BOOL v22;
  const os_unfair_lock *v23;
  int SequenceNumber;
  int LatestConsumedSequenceNumberForClient;
  int v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  id v30;
  int v31;
  NSObject *v32;
  int v33;
  const os_unfair_lock *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const os_unfair_lock *v38;
  int v39;
  int v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __CFString *v48;
  __CFString *v49;
  void *v50;
  const __CFString *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int v59;
  id v60;
  __CFString *v61;
  id v62;
  int v63;
  int v64;
  char v65;
  int v67;
  void *v68;
  void *v69;
  int v70;
  int *v71;
  char v72;
  int v74;
  _QWORD v77[4];
  id v78;
  id v79;
  __CFString *v80;
  __CFString *v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint8_t buf[8];
  unint64_t v89;

  v13 = a9;
  v14 = a4;
  if (a9)
    *a9 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (CDBLockingAssertionsEnabled)
    v15 = *(_QWORD *)(a1 + 24) == 0;
  else
    v15 = 1;
  if (!v15)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v18 = Database == 0;
  else
    v18 = 1;
  if (!v18)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v19)
        os_unfair_lock_assert_owner(v19 + 20);
    }
  }
  v20 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (__CalDatabaseBeginReadTransaction(a1, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1094"))
  {
    v71 = a7;
    RecordStore = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
      v22 = RecordStore == 0;
    else
      v22 = 1;
    if (!v22)
    {
      v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v23)
        os_unfair_lock_assert_owner(v23 + 20);
    }
    SequenceNumber = CPRecordStoreGetSequenceNumber();
    v87 = -1;
    LatestConsumedSequenceNumberForClient = _CalDatabaseGetLatestConsumedSequenceNumberForClient(v20, a3, &v87);
    v26 = v87;
    if (LatestConsumedSequenceNumberForClient)
      v27 = -1;
    else
      v27 = 0;
    v28 = v87 == -1 && LatestConsumedSequenceNumberForClient == 0;
    if (a8)
      *a8 = v28;
    if (LatestConsumedSequenceNumberForClient)
      v29 = 1;
    else
      v29 = v28;
    v70 = SequenceNumber;
    v72 = v28;
    if ((v29 & 1) != 0)
    {
      v30 = 0;
      v31 = -1;
LABEL_98:
      __CalDatabaseRollbackTransaction(a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1219");
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
      if (v71)
      {
        v64 = v70;
        if (v31 != -1)
          v64 = v31;
        *v71 = v64;
      }
      v65 = v72;
      if (!v13)
        v65 = 1;
      if ((v65 & 1) == 0)
        *v13 = v30;

      goto LABEL_109;
    }
    if (a6)
    {
      v33 = SequenceNumber;
      if (v20)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v20)
          {
            if (*(_QWORD *)(*(_QWORD *)v20 + 104))
            {
              v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v34)
                os_unfair_lock_assert_owner(v34 + 20);
            }
          }
        }
      }
      v35 = CPSqliteConnectionStatementForSQL();
      if (v35)
      {
        v36 = v35;
        sqlite3_bind_int(*(sqlite3_stmt **)(v35 + 8), 1, v26);
        sqlite3_bind_text(*(sqlite3_stmt **)(v36 + 8), 2, (const char *)objc_msgSend(objc_retainAutorelease(a3), "UTF8String"), -1, 0);
        *(_QWORD *)buf = a6;
        v89 = 0xFFFFFFFF00000000;
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v36)
          {
            v37 = **(_QWORD **)v36;
            if (v37)
            {
              if (*(_QWORD *)(v37 + 104))
              {
                v38 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v38)
                  os_unfair_lock_assert_owner(v38 + 20);
              }
            }
          }
        }
        CPSqliteStatementSendResults();
        v39 = HIDWORD(v89) - 1;
        if (HIDWORD(v89) - 1 <= v26)
          v39 = v26 + 1;
        SequenceNumber = v33;
        if (HIDWORD(v89) == -1)
          v40 = v33;
        else
          v40 = v39;
      }
      else
      {
        v41 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1A5CCB000, v41, OS_LOG_TYPE_ERROR, "Couldn't create statement for finding appropriate sequence number; using latest sequence number instead",
            buf,
            2u);
        }
        SequenceNumber = v33;
        v40 = v33;
      }
    }
    else
    {
      v40 = SequenceNumber;
    }
    v42 = *(_DWORD *)(a1 + 360);
    if (v40 < SequenceNumber)
      v43 = 1;
    else
      v43 = v27;
    if (v40 >= SequenceNumber)
      v44 = -1;
    else
      v44 = v40;
    if (v40 < v42)
      v45 = 1;
    else
      v45 = v27;
    if (v40 >= v42)
      v40 = *(_DWORD *)(a1 + 360);
    if (v42 >= 0)
      v27 = v45;
    else
      v27 = v43;
    if (v42 >= 0)
      v46 = v40;
    else
      v46 = v44;
    v47 = objc_opt_new();
    if (v46 >= 0)
      v48 = CFSTR("sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?");
    else
      v48 = CFSTR("sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)");
    if (v46 >= 0)
      v49 = CFSTR("sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?");
    else
      v49 = CFSTR("sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)");
    v68 = (void *)v47;
    if ((objc_msgSend(v14, "entityID") & 0x80000000) == 0)
    {
      if (objc_msgSend(v14, "entityType") == 6)
      {
        v50 = v14;
        v51 = CFSTR("store_id");
LABEL_92:
        -[__CFString stringByAppendingFormat:](v48, "stringByAppendingFormat:", CFSTR(" AND %@ = ?"), v51);
        v48 = (__CFString *)objc_claimAutoreleasedReturnValue();
        -[__CFString stringByAppendingFormat:](v49, "stringByAppendingFormat:", CFSTR(" AND %@ = ?"), v51);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = v50;
        v67 = objc_msgSend(v50, "entityID");
LABEL_94:
        v53 = a5;
        v74 = v46;
        v69 = v14;
        generateNotInClause(v53);
        v54 = objc_claimAutoreleasedReturnValue();
        v55 = (void *)v54;
        if (v54)
        {
          -[__CFString stringByAppendingFormat:](v48, "stringByAppendingFormat:", CFSTR(" AND store_id %@"), v54);
          v56 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(v52, "stringByAppendingFormat:", CFSTR(" AND store_id %@"), v55);
          v57 = objc_claimAutoreleasedReturnValue();

          -[__CFString stringByAppendingFormat:](v49, "stringByAppendingFormat:", CFSTR("AND record %@"), v55);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = (__CFString *)v56;
          v52 = (void *)v57;
        }
        else
        {
          v58 = v49;
        }
        v59 = v87;
        v77[0] = MEMORY[0x1E0C809B0];
        v77[1] = 3221225472;
        v77[2] = __CalDatabaseGetChangedEKObjectsForClient_block_invoke;
        v77[3] = &unk_1E4F905C8;
        v78 = v69;
        v79 = v58;
        v80 = v49;
        v81 = v48;
        v84 = a2;
        v85 = a1;
        v82 = v52;
        v86 = v67;
        v30 = v68;
        v83 = v30;
        v60 = v52;
        v61 = v48;
        v62 = v58;
        v63 = v59;
        v14 = v69;
        v31 = v74;
        _prepareBindingBlocksForFindingChangesOfEachEntityType(a1, a3, v63, v74, v77);

        v13 = a9;
        goto LABEL_98;
      }
      if (objc_msgSend(v14, "entityType") == 1)
      {
        v50 = v14;
        v51 = CFSTR("calendar_id");
        goto LABEL_92;
      }
    }
    v67 = -1;
    v52 = v49;
    goto LABEL_94;
  }
  v32 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v32, OS_LOG_TYPE_ERROR, "Couldn't start transaction to get changed ek objects", buf, 2u);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  v27 = -1;
LABEL_109:

  return v27;
}

uint64_t _CalDatabaseGetLatestConsumedSequenceNumberForClient(uint64_t a1, void *a2, _DWORD *a3)
{
  const os_unfair_lock *Context;
  uint64_t result;
  uint64_t **v7;
  uint64_t v8;
  const os_unfair_lock *v9;
  uint64_t v10;
  const os_unfair_lock *v11;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)(*(_QWORD *)a1 + 104))
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
  }
  result = CPSqliteConnectionStatementForSQL();
  if (result)
  {
    v7 = (uint64_t **)result;
    sqlite3_bind_text(*(sqlite3_stmt **)(result + 8), 1, (const char *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String"), -1, 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        v8 = **v7;
        if (v8)
        {
          if (*(_QWORD *)(v8 + 104))
          {
            v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v9)
              os_unfair_lock_assert_owner(v9 + 20);
          }
        }
      }
    }
    *a3 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v7)
      {
        v10 = **v7;
        if (v10)
        {
          if (*(_QWORD *)(v10 + 104))
          {
            v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v11)
              os_unfair_lock_assert_owner(v11 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    return 0;
  }
  return result;
}

id generateNotInClause(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v2 = (void *)objc_msgSend(CFSTR("NOT IN ("), "mutableCopy");
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v10;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v10 != v6)
            objc_enumerationMutation(v3);
          objc_msgSend(v2, "appendFormat:", CFSTR("%i,"), objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7++), "intValue"));
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v5);
    }

    objc_msgSend(v2, "replaceCharactersInRange:withString:", objc_msgSend(v2, "length") - 1, 1, CFSTR(")"));
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void _prepareBindingBlocksForFindingChangesOfEachEntityType(uint64_t a1, void *a2, int a3, int a4, void *a5)
{
  void (**v9)(id, char **, uint64_t, BOOL, uint64_t, _QWORD);
  uint64_t v10;
  char ***v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  char ***v23;
  uint64_t v24;
  _QWORD v25[5];
  int v26;
  int v27;
  _QWORD v28[5];
  int v29;
  int v30;

  v9 = a5;
  v10 = objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
  v11 = off_1EE807BC0;
  if (!*(_BYTE *)(a1 + 378))
    v11 = __classesTrackingChanges;
  v23 = v11;
  v12 = __classesTrackingChanges[*(unsigned __int8 *)(a1 + 378)];
  if (v12)
  {
    v13 = v10;
    v14 = 0;
    do
    {
      v24 = v14;
      v15 = (unsigned int *)&_getSubEntityTypesForClass_notificationSubclasses;
      if (v12 != &kCalNotificationClass)
        v15 = 0;
      if (v12 == &kCalParticipantClass)
        v15 = (unsigned int *)&_getSubEntityTypesForClass_participantSubclasses;
      if (v12 == &kCalEventClass)
        v16 = (unsigned int *)&_getSubEntityTypesForClass_eventSubclasses;
      else
        v16 = v15;
      v17 = v16;
      do
      {
        if (v16)
        {
          v18 = *v17;
          if (!(_DWORD)v18)
            break;
          v28[0] = MEMORY[0x1E0C809B0];
          v28[1] = 3221225472;
          v28[2] = ___prepareBindingBlocksForFindingChangesOfEachEntityType_block_invoke;
          v28[3] = &__block_descriptor_52_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
          v29 = a3;
          v30 = v18;
          v19 = 6;
          v20 = v28;
          v28[4] = v13;
        }
        else
        {
          v18 = *((unsigned int *)v12 + 16);
          v25[0] = MEMORY[0x1E0C809B0];
          v25[1] = 3221225472;
          v25[2] = ___prepareBindingBlocksForFindingChangesOfEachEntityType_block_invoke_2;
          v25[3] = &__block_descriptor_52_e66_v16__0__CPSqliteStatement___CPSqliteConnection___sqlite3_stmt_dB_8l;
          v25[4] = v13;
          v26 = a3;
          v27 = v18;
          v19 = 5;
          v20 = v25;
        }
        *((_DWORD *)v20 + 12) = a4;
        v21 = MEMORY[0x1A85B52F0]();
        v22 = (void *)v21;
        if ((_DWORD)v18 && v21)
          v9[2](v9, v12, v18, v16 != 0, v21, v19 + (a4 >= 0));

        if (!v16)
          break;
        ++v17;
      }
      while ((_DWORD)v18);
      v14 = v24 + 1;
      v12 = v23[v24 + 1];
    }
    while (v12);
  }

}

void CalDatabaseClearSuperfluousChanges(os_unfair_lock_s *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  char *v3;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  uint64_t v10;
  os_signpost_id_t v11;
  NSObject *v12;
  NSObject *v13;
  unint64_t v14;
  void *v15;
  const os_unfair_lock *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  uint64_t v21;
  const os_unfair_lock *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  void *v28;
  const os_unfair_lock *v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t v32;
  const os_unfair_lock *v33;
  uint64_t v34;
  const os_unfair_lock *v35;
  void *v36;
  EKPersistentChangeStoreInfo *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  const __CFArray *v43;
  const __CFArray *v44;
  CFIndex Count;
  id v46;
  char v47;
  CFIndex j;
  uint64_t ID;
  void *v50;
  EKPersistentChangeStoreInfo *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  NSObject *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t k;
  void *v66;
  char ***v67;
  char **v68;
  char ***v69;
  int v70;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t RecordStore;
  BOOL v76;
  const os_unfair_lock *v77;
  char **v78;
  const os_unfair_lock *v79;
  uint64_t **v80;
  uint64_t **v81;
  uint64_t v82;
  const os_unfair_lock *v83;
  uint64_t v84;
  const os_unfair_lock *v85;
  NSObject *v86;
  NSObject *v87;
  NSObject *v88;
  os_signpost_id_t spid;
  unint64_t v90;
  os_unfair_lock_s *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  id obj;
  EKPersistentChangeStoreInfo *obja;
  uint8_t v98[16];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint8_t buf[128];
  uint64_t v104;

  v1 = (uint64_t)a1;
  v104 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = &CDBLockingAssertionsEnabled;
  if (__CalDatabaseBeginWriteTransaction(v1, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1616"))
  {
    if (CDBLockingAssertionsEnabled)
      v4 = *(_QWORD *)(v1 + 24) == 0;
    else
      v4 = 1;
    if (!v4)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
      v7 = Database == 0;
    else
      v7 = 1;
    if (!v7)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
    }
    v9 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (v9)
    {
      v10 = v9;
      v11 = os_signpost_id_generate((os_log_t)CDBPerfSignpostsHandle);
      v12 = (id)CDBPerfSignpostsHandle;
      v13 = v12;
      spid = v11;
      v14 = v11 - 1;
      if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1A5CCB000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v11, "ClearSuperfluousChanges", (const char *)&unk_1A5DC855B, buf, 2u);
      }

      objc_msgSend(MEMORY[0x1E0C99E20], "set");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v10)
        {
          if (*(_QWORD *)(*(_QWORD *)v10 + 104))
          {
            v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16)
              os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
      v17 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (v17)
      {
        v18 = v17;
        if (CDBLockingAssertionsEnabled)
        {
          if (*v17)
          {
            v19 = **v17;
            if (v19)
            {
              if (*(_QWORD *)(v19 + 104))
              {
                v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v20)
                  os_unfair_lock_assert_owner(v20 + 20);
              }
            }
          }
        }
        CPSqliteStatementSendResults();
        if (CDBLockingAssertionsEnabled)
        {
          if (*v18)
          {
            v21 = **v18;
            if (v21)
            {
              if (*(_QWORD *)(v21 + 104))
              {
                v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v22)
                  os_unfair_lock_assert_owner(v22 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      v90 = v14;
      v91 = v2;
      v92 = v1;
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      v99 = 0u;
      v100 = 0u;
      v101 = 0u;
      v102 = 0u;
      obj = v15;
      v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v99, buf, 16);
      v94 = v10;
      if (v23)
      {
        v24 = v23;
        v25 = *(_QWORD *)v100;
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v100 != v25)
              objc_enumerationMutation(obj);
            v27 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * i);
            v28 = (void *)objc_opt_new();
            if (*v3)
            {
              if (*(_QWORD *)v10)
              {
                if (*(_QWORD *)(*(_QWORD *)v10 + 104))
                {
                  v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v29)
                    os_unfair_lock_assert_owner(v29 + 20);
                }
              }
            }
            v30 = CPSqliteConnectionStatementForSQL();
            if (v30)
            {
              v31 = (uint64_t **)v30;
              sqlite3_bind_int(*(sqlite3_stmt **)(v30 + 8), 1, objc_msgSend(v27, "intValue"));
              if (*v3)
              {
                if (*v31)
                {
                  v32 = **v31;
                  if (v32)
                  {
                    if (*(_QWORD *)(v32 + 104))
                    {
                      v33 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v33)
                        os_unfair_lock_assert_owner(v33 + 20);
                    }
                  }
                }
              }
              CPSqliteStatementSendResults();
              if (*v3)
              {
                if (*v31)
                {
                  v34 = **v31;
                  if (v34)
                  {
                    if (*(_QWORD *)(v34 + 104))
                    {
                      v35 = (const os_unfair_lock *)CPRecordStoreGetContext();
                      if (v35)
                        os_unfair_lock_assert_owner(v35 + 20);
                    }
                  }
                }
              }
              CPSqliteStatementReset();
              v36 = (void *)objc_msgSend(v28, "mutableCopy");
              v37 = objc_alloc_init(EKPersistentChangeStoreInfo);
              if (objc_msgSend(v36, "count"))
              {
                v38 = v3;
                objc_msgSend(v36, "objectAtIndexedSubscript:", 0);
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v39, "clientIdentifier");
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                -[EKPersistentChangeStoreInfo setMinConsumedClientIdentifier:](v37, "setMinConsumedClientIdentifier:", v40);

                -[EKPersistentChangeStoreInfo setMinConsumedSequenceNumber:](v37, "setMinConsumedSequenceNumber:", objc_msgSend(v39, "consumedSequenceNumber"));
                if ((unint64_t)objc_msgSend(v36, "count") < 2)
                {
                  -[EKPersistentChangeStoreInfo setSecondMinConsumedSequenceNumber:](v37, "setSecondMinConsumedSequenceNumber:", 0x7FFFFFFFLL);
                }
                else
                {
                  objc_msgSend(v36, "objectAtIndexedSubscript:", 1);
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  -[EKPersistentChangeStoreInfo setSecondMinConsumedSequenceNumber:](v37, "setSecondMinConsumedSequenceNumber:", objc_msgSend(v41, "consumedSequenceNumber"));

                }
                v3 = v38;
                v10 = v94;
              }
              else
              {
                -[EKPersistentChangeStoreInfo setMinConsumedSequenceNumber:](v37, "setMinConsumedSequenceNumber:", 0x7FFFFFFFLL);
              }

              if (v37)
                objc_msgSend(v95, "setObject:forKey:", v37, v27);

            }
          }
          v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v99, buf, 16);
        }
        while (v24);
      }

      v42 = v95;
      objc_msgSend(v95, "objectForKey:", &unk_1E4FA3EB0);
      obja = (EKPersistentChangeStoreInfo *)objc_claimAutoreleasedReturnValue();
      if (!obja)
      {
        obja = objc_alloc_init(EKPersistentChangeStoreInfo);
        -[EKPersistentChangeStoreInfo setMinConsumedSequenceNumber:](obja, "setMinConsumedSequenceNumber:", 0x7FFFFFFFLL);
      }
      objc_msgSend(v95, "removeObjectForKey:", &unk_1E4FA3EB0);
      v1 = v92;
      v43 = (const __CFArray *)_CalDatabaseCopyOfAllStores(v92);
      if (v43)
      {
        v44 = v43;
        Count = CFArrayGetCount(v43);
        v46 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", Count);
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        if (Count < 1)
        {
          CFRelease(v44);
        }
        else
        {
          v47 = 0;
          for (j = 0; j != Count; ++j)
          {
            CFArrayGetValueAtIndex(v44, j);
            ID = CPRecordGetID();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", ID);
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v42, "objectForKey:", v50);
            v51 = (EKPersistentChangeStoreInfo *)objc_claimAutoreleasedReturnValue();

            if (!v51)
              v51 = obja;
            if (-[EKPersistentChangeStoreInfo minConsumedSequenceNumber](v51, "minConsumedSequenceNumber") != 0x7FFFFFFF)
            {
              if ((v47 & 1) != 0)
                objc_msgSend(v46, "appendString:", CFSTR(" OR "));
              v52 = -[EKPersistentChangeStoreInfo secondMinConsumedSequenceNumber](v51, "secondMinConsumedSequenceNumber");
              v53 = -[EKPersistentChangeStoreInfo minConsumedSequenceNumber](v51, "minConsumedSequenceNumber");
              v54 = -[EKPersistentChangeStoreInfo minConsumedSequenceNumber](v51, "minConsumedSequenceNumber");
              v55 = v54;
              if (v52 <= v53)
              {
                objc_msgSend(v46, "appendFormat:", CFSTR("((store_id == %d) AND (sequence_number <= %d))"), ID, v54);
              }
              else
              {
                v56 = -[EKPersistentChangeStoreInfo secondMinConsumedSequenceNumber](v51, "secondMinConsumedSequenceNumber");
                -[EKPersistentChangeStoreInfo minConsumedClientIdentifier](v51, "minConsumedClientIdentifier");
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v46, "appendFormat:", CFSTR("((store_id == %d) AND ((sequence_number <= %d) OR ((sequence_number <= %d) AND (sequence_number IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier == \"%@\")))))"), ID, v55, v56, v57);

              }
              v42 = v95;
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", ID);
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v93, "addObject:", v58);

              v47 = 1;
            }

          }
          CFRelease(v44);
          v1 = v92;
          if ((v47 & 1) != 0)
            objc_msgSend(v46, "appendString:", CFSTR(" OR "));
        }
        objc_msgSend(v46, "appendString:", CFSTR("store_id NOT IN ("));
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v60 = v93;
        v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v99, buf, 16);
        if (v61)
        {
          v62 = v61;
          v63 = 0;
          v64 = *(_QWORD *)v100;
          do
          {
            for (k = 0; k != v62; ++k)
            {
              if (*(_QWORD *)v100 != v64)
                objc_enumerationMutation(v60);
              v66 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * k);
              if ((v63 & 1) != 0)
                objc_msgSend(v46, "appendString:", CFSTR(","));
              objc_msgSend(v46, "appendFormat:", CFSTR("%i"), objc_msgSend(v66, "intValue"));
              v63 = 1;
            }
            v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v99, buf, 16);
          }
          while (v62);
        }

        objc_msgSend(v46, "appendString:", CFSTR(") OR sequence_number IS NULL"));
        v67 = off_1EE807BC0;
        if (!*(_BYTE *)(v1 + 378))
          v67 = __classesTrackingChanges;
        v68 = __classesTrackingChanges[*(unsigned __int8 *)(v1 + 378)];
        v3 = &CDBLockingAssertionsEnabled;
        if (v68)
        {
          v69 = v67 + 1;
          do
          {
            v70 = *((_DWORD *)v68 + 16);
            if (v70 == 26 || v70 == 6)
            {
              if (obja)
                v72 = -[EKPersistentChangeStoreInfo minConsumedSequenceNumber](obja, "minConsumedSequenceNumber");
              else
                v72 = 0x7FFFFFFFLL;
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("sequence_number <= %d"), v72);
              v73 = (id)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v73 = v46;
            }
            v74 = v73;
            RecordStore = _CalDatabaseGetRecordStore(v1);
            if (CDBLockingAssertionsEnabled)
              v76 = RecordStore == 0;
            else
              v76 = 1;
            if (!v76)
            {
              v77 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v77)
                os_unfair_lock_assert_owner(v77 + 20);
            }
            CPRecordStoreDeleteChangesForClassToSequenceNumberWhere();

            v78 = *v69++;
            v68 = v78;
          }
          while (v78);
        }

        v42 = v95;
      }
      if (_CalDatabaseClearSuperfluousChanges_onceToken != -1)
        dispatch_once(&_CalDatabaseClearSuperfluousChanges_onceToken, &__block_literal_global_187);
      v2 = v91;
      if (*v3)
      {
        if (*(_QWORD *)v94)
        {
          if (*(_QWORD *)(*(_QWORD *)v94 + 104))
          {
            v79 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v79)
              os_unfair_lock_assert_owner(v79 + 20);
          }
        }
      }
      v80 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (v80)
      {
        v81 = v80;
        if (*v3)
        {
          if (*v80)
          {
            v82 = **v80;
            if (v82)
            {
              if (*(_QWORD *)(v82 + 104))
              {
                v83 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v83)
                  os_unfair_lock_assert_owner(v83 + 20);
              }
            }
          }
        }
        CPSqliteStatementPerform();
        if (*v3)
        {
          if (*v81)
          {
            v84 = **v81;
            if (v84)
            {
              if (*(_QWORD *)(v84 + 104))
              {
                v85 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v85)
                  os_unfair_lock_assert_owner(v85 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
      v86 = (id)CDBPerfSignpostsHandle;
      v87 = v86;
      if (v90 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v86))
      {
        *(_WORD *)v98 = 0;
        _os_signpost_emit_with_name_impl(&dword_1A5CCB000, v87, OS_SIGNPOST_INTERVAL_END, spid, "ClearSuperfluousChanges", (const char *)&unk_1A5DC855B, v98, 2u);
      }

    }
    v88 = (id)CDBLogHandle;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v88, OS_LOG_TYPE_DEBUG, "Committing after clearing superfluous changes.", buf, 2u);
    }

    __CalDatabaseCommitTransaction(v1, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1626");
  }
  else
  {
    v59 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A5CCB000, v59, OS_LOG_TYPE_ERROR, "Unable to start transaction before clearing superfluous changes.", buf, 2u);
    }
  }
  if (*v3)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

void CalDatabaseClearChangedObjectIDsUpToSequenceNumberForClient(os_unfair_lock_s *a1, void *a2, int a3)
{
  os_unfair_lock_s *v6;

  v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseClearChangedObjectIDsUpToSequenceNumberForClient((uint64_t)a1, a2, a3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
}

void _CalDatabaseClearChangedObjectIDsUpToSequenceNumberForClient(uint64_t a1, void *a2, int a3)
{
  BOOL v6;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v9;
  const os_unfair_lock *v10;
  uint64_t v11;
  const char *v12;
  BOOL v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  const os_unfair_lock *v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  uint64_t RecordStore;
  const os_unfair_lock *v22;
  int SequenceNumber;
  const os_unfair_lock *v24;
  uint64_t v25;
  uint64_t **v26;
  sqlite3_stmt *v27;
  double Current;
  uint64_t v29;
  const os_unfair_lock *v30;
  uint64_t v31;
  const os_unfair_lock *v32;
  NSObject *v33;
  uint8_t v34[16];

  if (CDBLockingAssertionsEnabled)
    v6 = *(_QWORD *)(a1 + 24) == 0;
  else
    v6 = 1;
  if (!v6)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v9 = Database == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
  }
  v11 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (__CalDatabaseBeginWriteTransaction(a1, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1635"))
  {
    v12 = (const char *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
    if (CDBLockingAssertionsEnabled)
      v13 = v11 == 0;
    else
      v13 = 1;
    if (!v13)
    {
      if (*(_QWORD *)v11)
      {
        if (*(_QWORD *)(*(_QWORD *)v11 + 104))
        {
          v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14)
            os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
    v15 = CPSqliteConnectionStatementForSQL();
    if (v15)
    {
      v16 = (uint64_t **)v15;
      sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, v12, -1, 0);
      sqlite3_bind_int((sqlite3_stmt *)v16[1], 2, a3);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v16)
        {
          v17 = **v16;
          if (v17)
          {
            if (*(_QWORD *)(v17 + 104))
            {
              v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v18)
                os_unfair_lock_assert_owner(v18 + 20);
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v16)
        {
          v19 = **v16;
          if (v19)
          {
            if (*(_QWORD *)(v19 + 104))
            {
              v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20)
                os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    RecordStore = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
    }
    SequenceNumber = CPRecordStoreGetSequenceNumber();
    if (CDBLockingAssertionsEnabled)
    {
      if (v11)
      {
        if (*(_QWORD *)v11)
        {
          if (*(_QWORD *)(*(_QWORD *)v11 + 104))
          {
            v24 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v24)
              os_unfair_lock_assert_owner(v24 + 20);
          }
        }
      }
    }
    v25 = CPSqliteConnectionStatementForSQL();
    if (v25)
    {
      v26 = (uint64_t **)v25;
      v27 = *(sqlite3_stmt **)(v25 + 8);
      Current = CFAbsoluteTimeGetCurrent();
      sqlite3_bind_double(v27, 1, Current);
      sqlite3_bind_int((sqlite3_stmt *)v26[1], 2, a3);
      sqlite3_bind_text((sqlite3_stmt *)v26[1], 3, v12, -1, 0);
      sqlite3_bind_int((sqlite3_stmt *)v26[1], 4, SequenceNumber);
      sqlite3_bind_text((sqlite3_stmt *)v26[1], 5, v12, -1, 0);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v26)
        {
          v29 = **v26;
          if (v29)
          {
            if (*(_QWORD *)(v29 + 104))
            {
              v30 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v30)
                os_unfair_lock_assert_owner(v30 + 20);
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v26)
        {
          v31 = **v26;
          if (v31)
          {
            if (*(_QWORD *)(v31 + 104))
            {
              v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v32)
                os_unfair_lock_assert_owner(v32 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    __CalDatabaseCommitTransaction(a1, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1668");
  }
  else
  {
    v33 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1A5CCB000, v33, OS_LOG_TYPE_ERROR, "Unable to start transaction before cleaing changes", v34, 2u);
    }
  }
}

void _CalDatabaseClearAllChangeHistoryForAllClients(uint64_t a1)
{
  BOOL v2;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v5;
  const os_unfair_lock *v6;
  uint64_t v7;
  BOOL v8;
  const os_unfair_lock *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  const os_unfair_lock *v13;
  uint64_t v14;
  const os_unfair_lock *v15;
  uint64_t RecordStore;
  const os_unfair_lock *v17;
  int SequenceNumber;
  const os_unfair_lock *v19;
  uint64_t v20;
  uint64_t **v21;
  sqlite3_stmt *v22;
  double Current;
  uint64_t v24;
  const os_unfair_lock *v25;
  uint64_t v26;
  const os_unfair_lock *v27;
  char ***v28;
  _QWORD *v29;
  BOOL v30;
  const os_unfair_lock *v31;
  NSObject *v33;
  uint8_t v34[16];

  if (CDBLockingAssertionsEnabled)
    v2 = *(_QWORD *)(a1 + 24) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v5 = Database == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6)
        os_unfair_lock_assert_owner(v6 + 20);
    }
  }
  v7 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (__CalDatabaseBeginWriteTransaction(a1, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1684"))
  {
    if (CDBLockingAssertionsEnabled)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      if (*(_QWORD *)v7)
      {
        if (*(_QWORD *)(*(_QWORD *)v7 + 104))
        {
          v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v9)
            os_unfair_lock_assert_owner(v9 + 20);
        }
      }
    }
    v10 = (uint64_t **)CPSqliteConnectionStatementForSQL();
    if (v10)
    {
      v11 = v10;
      if (CDBLockingAssertionsEnabled)
      {
        if (*v10)
        {
          v12 = **v10;
          if (v12)
          {
            if (*(_QWORD *)(v12 + 104))
            {
              v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v13)
                os_unfair_lock_assert_owner(v13 + 20);
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v11)
        {
          v14 = **v11;
          if (v14)
          {
            if (*(_QWORD *)(v14 + 104))
            {
              v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v15)
                os_unfair_lock_assert_owner(v15 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    RecordStore = _CalDatabaseGetRecordStore(a1);
    if (CDBLockingAssertionsEnabled)
    {
      if (RecordStore)
      {
        v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v17)
          os_unfair_lock_assert_owner(v17 + 20);
      }
    }
    SequenceNumber = CPRecordStoreGetSequenceNumber();
    if (CDBLockingAssertionsEnabled)
    {
      if (v7)
      {
        if (*(_QWORD *)v7)
        {
          if (*(_QWORD *)(*(_QWORD *)v7 + 104))
          {
            v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v19)
              os_unfair_lock_assert_owner(v19 + 20);
          }
        }
      }
    }
    v20 = CPSqliteConnectionStatementForSQL();
    if (v20)
    {
      v21 = (uint64_t **)v20;
      v22 = *(sqlite3_stmt **)(v20 + 8);
      Current = CFAbsoluteTimeGetCurrent();
      sqlite3_bind_double(v22, 1, Current);
      sqlite3_bind_int((sqlite3_stmt *)v21[1], 2, SequenceNumber);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v21)
        {
          v24 = **v21;
          if (v24)
          {
            if (*(_QWORD *)(v24 + 104))
            {
              v25 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v25)
                os_unfair_lock_assert_owner(v25 + 20);
            }
          }
        }
      }
      CPSqliteStatementPerform();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v21)
        {
          v26 = **v21;
          if (v26)
          {
            if (*(_QWORD *)(v26 + 104))
            {
              v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v27)
                os_unfair_lock_assert_owner(v27 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    v28 = off_1EE807BC0;
    if (!*(_BYTE *)(a1 + 378))
      v28 = __classesTrackingChanges;
    if (__classesTrackingChanges[*(unsigned __int8 *)(a1 + 378)])
    {
      v29 = v28 + 1;
      do
      {
        if (CDBLockingAssertionsEnabled)
          v30 = *(_QWORD *)(a1 + 24) == 0;
        else
          v30 = 1;
        if (!v30)
        {
          v31 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v31)
            os_unfair_lock_assert_owner(v31 + 20);
        }
        CPRecordStoreDeleteChangesForClassToSequenceNumberWhere();
      }
      while (*v29++);
    }
    __CalDatabaseCommitTransaction(a1, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1714");
  }
  else
  {
    v33 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1A5CCB000, v33, OS_LOG_TYPE_ERROR, "Unable to start transaction before cleaing change history", v34, 2u);
    }
  }
}

void CalDatabaseClearAllChangeHistoryForAllClients(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  _CalDatabaseClearAllChangeHistoryForAllClients((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

void CalDatabaseEnumerateUnconsumedObjectChangesForClient(os_unfair_lock_s *a1, void *a2, int a3, void *a4)
{
  void (**v7)(id, uint64_t, void *, void *, void *, void *);
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[4];
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  __CFString *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v29 = 0;
  v30 = &v29;
  v31 = 0x3032000000;
  v32 = __Block_byref_object_copy__4;
  v33 = __Block_byref_object_dispose__4;
  v34 = 0;
  os_unfair_lock_lock(a1 + 20);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __CalDatabaseEnumerateUnconsumedObjectChangesForClient_block_invoke;
  v23[3] = &unk_1E4F905F0;
  v24 = CFSTR("changedIDs");
  v25 = CFSTR("changeTypes");
  v26 = CFSTR("changeTableIDs");
  v27 = CFSTR("sequenceNumbers");
  v28 = &v29;
  _CalDatabaseEnumerateUnconsumedObjectChangesForClient((uint64_t)a1, a2, a3, 0, v23);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(a1 + 20);
  os_unfair_lock_unlock(a1 + 20);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  obj = (id)v30[5];
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v35, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        v12 = objc_msgSend(v11, "integerValue");
        objc_msgSend((id)v30[5], "objectForKeyedSubscript:", v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("changedIDs"));
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("changeTypes"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("changeTableIDs"));
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("sequenceNumbers"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        v7[2](v7, v12, v14, v15, v16, v17);
      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v35, 16);
    }
    while (v8);
  }

  _Block_object_dispose(&v29, 8);
}

void sub_1A5D8C2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void _CalDatabaseEnumerateUnconsumedObjectChangesForClient(uint64_t a1, void *a2, int a3, char a4, void *a5)
{
  id v9;
  BOOL v10;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  const os_unfair_lock *v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  const os_unfair_lock *v20;
  int v21;
  uint64_t v22;
  const os_unfair_lock *v23;
  NSObject *v24;
  __CFString *v25;
  __CFString *v26;
  int v27;
  uint64_t v28;
  void *v29;
  id v30;
  __CFString *v31;
  __CFString *v32;
  _QWORD v33[4];
  __CFString *v34;
  __CFString *v35;
  id v36;
  id v37;
  uint64_t v38;
  int v39;
  uint8_t buf[16];

  v9 = a5;
  if (CDBLockingAssertionsEnabled)
    v10 = *(_QWORD *)(a1 + 24) == 0;
  else
    v10 = 1;
  if (!v10)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v13 = Database == 0;
  else
    v13 = 1;
  if (!v13)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v14)
        os_unfair_lock_assert_owner(v14 + 20);
    }
  }
  v15 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (__CalDatabaseBeginReadTransaction(a1, (uint64_t)"read at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1738"))
  {
    *(_DWORD *)buf = 0;
    if (v15)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (*(_QWORD *)v15)
        {
          if (*(_QWORD *)(*(_QWORD *)v15 + 104))
          {
            v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16)
              os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
    v17 = CPSqliteConnectionStatementForSQL();
    if (v17)
    {
      v18 = (uint64_t **)v17;
      sqlite3_bind_text(*(sqlite3_stmt **)(v17 + 8), 1, (const char *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String"), -1, 0);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v18)
        {
          v19 = **v18;
          if (v19)
          {
            if (*(_QWORD *)(v19 + 104))
            {
              v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20)
                os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
      }
      v21 = CPSqliteStatementIntegerResult();
      if (CDBLockingAssertionsEnabled)
      {
        if (*v18)
        {
          v22 = **v18;
          if (v22)
          {
            if (*(_QWORD *)(v22 + 104))
            {
              v23 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v23)
                os_unfair_lock_assert_owner(v23 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    else
    {
      v21 = 0;
    }
    if (a3 == -1)
    {
      *(_DWORD *)buf = 0;
      if (_CalDatabaseGetLatestConsumedSequenceNumberForClient(v15, a2, buf))
        a3 = -1;
      else
        a3 = *(_DWORD *)buf;
    }
    v25 = CFSTR("sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)");
    v26 = CFSTR("sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)");
    if ((a4 & 1) != 0)
    {
      v27 = -1;
      if (v21)
      {
LABEL_44:
        -[__CFString stringByAppendingString:](v26, "stringByAppendingString:", CFSTR(" AND store_id = ?"));
        v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
        -[__CFString stringByAppendingString:](v25, "stringByAppendingString:", CFSTR(" AND store_id = ?"));
        v28 = objc_claimAutoreleasedReturnValue();
        -[__CFString stringByAppendingString:](v25, "stringByAppendingString:", CFSTR(" AND record = ?"));
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = (__CFString *)v28;
LABEL_49:
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = ___CalDatabaseEnumerateUnconsumedObjectChangesForClient_block_invoke;
        v33[3] = &unk_1E4F90688;
        v34 = v26;
        v35 = v25;
        v39 = v21;
        v36 = v29;
        v38 = a1;
        v37 = v9;
        v30 = v29;
        v31 = v25;
        v32 = v26;
        _prepareBindingBlocksForFindingChangesOfEachEntityType(a1, a2, a3, v27, v33);
        __CalDatabaseRollbackTransaction(a1, (uint64_t)"rollback at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1807");

        goto LABEL_50;
      }
    }
    else
    {
      v27 = *(_DWORD *)(a1 + 360);
      if (v27 >= 0)
      {
        v26 = CFSTR("sequence_number > ?  AND entity_type = ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?");
        v25 = CFSTR("sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?) AND sequence_number <= ?");
      }
      if (v21)
        goto LABEL_44;
    }
    v29 = v25;
    goto LABEL_49;
  }
  v24 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1A5CCB000, v24, OS_LOG_TYPE_ERROR, "Couldn't start transaction to enumerate unconsumed changes.", buf, 2u);
  }
LABEL_50:

}

void CalDatabaseClearIndividualChangeRowIDsForClient(uint64_t a1, void *a2, const __CFArray *a3, int a4)
{
  os_unfair_lock_s *v8;
  BOOL v9;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v12;
  const os_unfair_lock *v13;
  uint64_t v14;
  char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const os_unfair_lock *v19;
  uint64_t **v20;
  const os_unfair_lock *v21;
  uint64_t v22;
  uint64_t **v23;
  CFIndex Count;
  CFIndex v25;
  int v26;
  int ValueAtIndex;
  uint64_t v28;
  const os_unfair_lock *v29;
  int v30;
  uint64_t v31;
  const os_unfair_lock *v32;
  uint64_t v33;
  const os_unfair_lock *v34;
  uint64_t v35;
  const os_unfair_lock *v36;
  __CFSet *Mutable;
  void *v38;
  void *v39;
  NSObject *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  os_unfair_lock_s *v44;
  void *v45;
  id value;
  int v47;
  char *v48;
  int v49;
  uint8_t buf[4];
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v8 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (CDBLockingAssertionsEnabled)
    v9 = *(_QWORD *)(a1 + 24) == 0;
  else
    v9 = 1;
  if (!v9)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v12 = Database == 0;
  else
    v12 = 1;
  if (!v12)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v13)
        os_unfair_lock_assert_owner(v13 + 20);
    }
  }
  v14 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  if (!__CalDatabaseBeginWriteTransaction(a1, (uint64_t)"write at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1879"))
  {
    NSLog(CFSTR("CalDatabasePersistentChangeTracking: unable to start transaction (error %d)"), 0);
    goto LABEL_86;
  }
  value = objc_retainAutorelease(a2);
  v48 = (char *)objc_msgSend(value, "cStringUsingEncoding:", 4);
  if (a4 <= 99)
  {
    v15 = &kCalAlarmClass;
    switch(a4)
    {
      case 1:
        v15 = &kCalCalendarClass;
        goto LABEL_33;
      case 2:
      case 3:
        goto LABEL_24;
      case 4:
        goto LABEL_33;
      case 5:
        v15 = &kCalRecurrenceClass;
        goto LABEL_33;
      case 6:
        v15 = &kCalStoreClass;
        goto LABEL_33;
      case 7:
      case 8:
        goto LABEL_23;
      case 9:
        v15 = &kCalEventActionClass;
        goto LABEL_33;
      case 10:
        v15 = &kCalExceptionDateClass;
        goto LABEL_33;
      case 11:
        v15 = &kCalAttachmentClass;
        goto LABEL_33;
      case 15:
        v15 = &kCalShareeClass;
        goto LABEL_33;
      case 16:
      case 17:
      case 19:
        goto LABEL_22;
      case 21:
        v15 = &kCalContactClass;
        goto LABEL_33;
      case 26:
        v15 = &kCalAuxDatabaseClass;
        goto LABEL_33;
      default:
        goto LABEL_89;
    }
  }
  switch(a4)
  {
    case 'd':
LABEL_23:
      v15 = &kCalParticipantClass;
      goto LABEL_33;
    case 'e':
LABEL_24:
      v15 = &kCalEventClass;
LABEL_33:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *v15);
      v16 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT COUNT(*) FROM %@Changes WHERE ROWID = ? AND sequence_number > ?"), v16);
      v17 = objc_claimAutoreleasedReturnValue();
      v43 = (void *)v16;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("INSERT INTO ClientCursorConsumed (client_identifier, consumed_entity_class, consumed_entity_id, consumed_change_id, sequence_number) VALUES (?, ?,  (SELECT record FROM %@Changes WHERE ROWID = ? LIMIT 1),  ?,  (SELECT sequence_number FROM %@Changes WHERE ROWID = ?))"), v16, v16);
      v18 = objc_claimAutoreleasedReturnValue();
      if (CDBLockingAssertionsEnabled)
      {
        if (v14)
        {
          if (*(_QWORD *)v14)
          {
            if (*(_QWORD *)(*(_QWORD *)v14 + 104))
            {
              v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v19)
                os_unfair_lock_assert_owner(v19 + 20);
            }
          }
        }
      }
      v47 = a4;
      v44 = v8;
      v42 = (void *)v17;
      v20 = (uint64_t **)CPSqliteConnectionStatementForSQL();
      if (CDBLockingAssertionsEnabled)
      {
        if (v14)
        {
          if (*(_QWORD *)v14)
          {
            if (*(_QWORD *)(*(_QWORD *)v14 + 104))
            {
              v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v21)
                os_unfair_lock_assert_owner(v21 + 20);
            }
          }
        }
      }
      v45 = (void *)v18;
      v22 = CPSqliteConnectionStatementForSQL();
      v49 = -2;
      if (v20)
      {
        v23 = (uint64_t **)v22;
        if (v22)
        {
          if (a3)
          {
            Count = CFArrayGetCount(a3);
            _CalDatabaseGetLatestConsumedSequenceNumberForClient(v14, value, &v49);
            if (Count >= 1)
            {
              v25 = 0;
              v26 = v49;
              do
              {
                ValueAtIndex = CFArrayGetValueAtIndex(a3, v25);
                sqlite3_bind_int((sqlite3_stmt *)v20[1], 1, ValueAtIndex);
                sqlite3_bind_int((sqlite3_stmt *)v20[1], 2, v26);
                *(_DWORD *)buf = 0;
                if (CDBLockingAssertionsEnabled)
                {
                  if (*v20)
                  {
                    v28 = **v20;
                    if (v28)
                    {
                      if (*(_QWORD *)(v28 + 104))
                      {
                        v29 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v29)
                          os_unfair_lock_assert_owner(v29 + 20);
                      }
                    }
                  }
                }
                v30 = CPSqliteStatementIntegerResult();
                if (CDBLockingAssertionsEnabled)
                {
                  if (*v20)
                  {
                    v31 = **v20;
                    if (v31)
                    {
                      if (*(_QWORD *)(v31 + 104))
                      {
                        v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
                        if (v32)
                          os_unfair_lock_assert_owner(v32 + 20);
                      }
                    }
                  }
                }
                CPSqliteStatementReset();
                if (v30 >= 1)
                {
                  sqlite3_bind_text((sqlite3_stmt *)v23[1], 1, v48, -1, 0);
                  sqlite3_bind_int((sqlite3_stmt *)v23[1], 2, v47);
                  sqlite3_bind_int((sqlite3_stmt *)v23[1], 3, ValueAtIndex);
                  sqlite3_bind_int((sqlite3_stmt *)v23[1], 4, ValueAtIndex);
                  sqlite3_bind_int((sqlite3_stmt *)v23[1], 5, ValueAtIndex);
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*v23)
                    {
                      v33 = **v23;
                      if (v33)
                      {
                        if (*(_QWORD *)(v33 + 104))
                        {
                          v34 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v34)
                            os_unfair_lock_assert_owner(v34 + 20);
                        }
                      }
                    }
                  }
                  CPSqliteStatementPerform();
                  if (CDBLockingAssertionsEnabled)
                  {
                    if (*v23)
                    {
                      v35 = **v23;
                      if (v35)
                      {
                        if (*(_QWORD *)(v35 + 104))
                        {
                          v36 = (const os_unfair_lock *)CPRecordStoreGetContext();
                          if (v36)
                            os_unfair_lock_assert_owner(v36 + 20);
                        }
                      }
                    }
                  }
                  CPSqliteStatementReset();
                }
                ++v25;
              }
              while (Count != v25);
            }
          }
          else
          {
            _CalDatabaseGetLatestConsumedSequenceNumberForClient(v14, value, &v49);
          }
        }
      }
      if (__CalDatabaseCommitTransaction(a1, (uint64_t)"commit at /Library/Caches/com.apple.xbs/Sources/CalendarDatabase/CalendarDatabase/CalDatabasePersistentChangeTracking.m:1923"))
      {
        Mutable = *(__CFSet **)(a1 + 280);
        v38 = v43;
        v8 = v44;
        v39 = v42;
        if (!Mutable)
        {
          Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
          *(_QWORD *)(a1 + 280) = Mutable;
        }
        CFSetAddValue(Mutable, value);
      }
      else
      {
        v40 = CDBLogHandle;
        v38 = v43;
        v8 = v44;
        v39 = v42;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v51 = 0;
          _os_log_impl(&dword_1A5CCB000, v40, OS_LOG_TYPE_ERROR, "CalDatabasePersistentChangeTracking: unable to commit transaction (error %d)", buf, 8u);
        }
      }

      goto LABEL_86;
    case 'f':
LABEL_22:
      v15 = &kCalNotificationClass;
      goto LABEL_33;
  }
LABEL_89:
  v41 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v51 = a4;
    _os_log_impl(&dword_1A5CCB000, v41, OS_LOG_TYPE_ERROR, "No class for entity type: %d", buf, 8u);
  }
LABEL_86:
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v8);
  os_unfair_lock_unlock(v8);
}

CFTypeRef CalDatabaseCopyAllRegisteredClientIdentifiersForPersistentChangeTracking(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v7;
  const os_unfair_lock *v8;
  uint64_t v9;
  id v10;
  BOOL v11;
  const os_unfair_lock *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t v15;
  const os_unfair_lock *v16;
  uint64_t v17;
  const os_unfair_lock *v18;
  CFTypeRef v19;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v3 = *(_QWORD *)(a1 + 24);
  if (CDBLockingAssertionsEnabled)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v7 = Database == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  v9 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (CDBLockingAssertionsEnabled)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (*(_QWORD *)v9)
    {
      if (*(_QWORD *)(*(_QWORD *)v9 + 104))
      {
        v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v12)
          os_unfair_lock_assert_owner(v12 + 20);
      }
    }
  }
  v13 = (uint64_t **)CPSqliteConnectionStatementForSQL();
  if (v13)
  {
    v14 = v13;
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        v15 = **v13;
        if (v15)
        {
          if (*(_QWORD *)(v15 + 104))
          {
            v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16)
              os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v14)
      {
        v17 = **v14;
        if (v17)
        {
          if (*(_QWORD *)(v17 + 104))
          {
            v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18)
              os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  v19 = CFRetain(v10);

  return v19;
}

uint64_t __ClientRowHandler(uint64_t a1, void *a2)
{
  id v3;
  const unsigned __int8 *v4;
  void *v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = a2;
  v4 = sqlite3_column_text(*(sqlite3_stmt **)(a1 + 8), 0);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v5);

  }
  else
  {
    v6 = CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "__ClientRowHandler - clientIdentifier is nil", v8, 2u);
    }
  }

  return 0;
}

CFTypeRef CalDatabaseCopyRegisteredClientIdentifiersForPersistentChangeTrackingInStore(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  int ID;
  CFTypeRef v4;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  ID = CPRecordGetID();
  v4 = _CalDatabaseCopyRegisteredClientIdentifiersForPersistentChangeTrackingWithStoreUID((uint64_t)a1, ID);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v4;
}

CFTypeRef _CalDatabaseCopyRegisteredClientIdentifiersForPersistentChangeTrackingWithStoreUID(uint64_t a1, int a2)
{
  BOOL v3;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v6;
  const os_unfair_lock *v7;
  uint64_t v8;
  id v9;
  BOOL v10;
  const os_unfair_lock *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  const os_unfair_lock *v15;
  uint64_t v16;
  const os_unfair_lock *v17;
  CFTypeRef v18;

  if (CDBLockingAssertionsEnabled)
    v3 = *(_QWORD *)(a1 + 24) == 0;
  else
    v3 = 1;
  if (!v3)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v6 = Database == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v7)
        os_unfair_lock_assert_owner(v7 + 20);
    }
  }
  v8 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (CDBLockingAssertionsEnabled)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (*(_QWORD *)v8)
    {
      if (*(_QWORD *)(*(_QWORD *)v8 + 104))
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
  }
  v12 = CPSqliteConnectionStatementForSQL();
  if (v12)
  {
    v13 = (uint64_t **)v12;
    sqlite3_bind_int(*(sqlite3_stmt **)(v12 + 8), 1, a2);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        v14 = **v13;
        if (v14)
        {
          if (*(_QWORD *)(v14 + 104))
          {
            v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v15)
              os_unfair_lock_assert_owner(v15 + 20);
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v13)
      {
        v16 = **v13;
        if (v16)
        {
          if (*(_QWORD *)(v16 + 104))
          {
            v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v17)
              os_unfair_lock_assert_owner(v17 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  v18 = CFRetain(v9);

  return v18;
}

uint64_t CalDatabaseGetStoreForPersistentChangeTrackingClientIdentifier(uint64_t a1, void *a2)
{
  os_unfair_lock_s *v4;
  const char *v5;
  uint64_t v6;
  BOOL v7;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v10;
  const os_unfair_lock *v11;
  uint64_t v12;
  BOOL v13;
  const os_unfair_lock *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  const os_unfair_lock *v18;
  uint64_t v19;
  uint64_t v20;
  const os_unfair_lock *v21;

  v4 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v5 = (const char *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
  v6 = *(_QWORD *)(a1 + 24);
  if (CDBLockingAssertionsEnabled)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v10 = Database == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  v12 = CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags();
  if (CDBLockingAssertionsEnabled)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13)
  {
    if (*(_QWORD *)v12)
    {
      if (*(_QWORD *)(*(_QWORD *)v12 + 104))
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
  }
  v15 = CPSqliteConnectionStatementForSQL();
  if (v15)
  {
    v16 = (uint64_t **)v15;
    sqlite3_bind_text(*(sqlite3_stmt **)(v15 + 8), 1, v5, -1, 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v16)
      {
        v17 = **v16;
        if (v17)
        {
          if (*(_QWORD *)(v17 + 104))
          {
            v18 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v18)
              os_unfair_lock_assert_owner(v18 + 20);
          }
        }
      }
    }
    v19 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v16)
      {
        v20 = **v16;
        if (v20)
        {
          if (*(_QWORD *)(v20 + 104))
          {
            v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21)
              os_unfair_lock_assert_owner(v21 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
    v19 = 0xFFFFFFFFLL;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v19;
}

void CalRemoveClientForPersistentChangeTracking(uint64_t a1, void *a2)
{
  os_unfair_lock_s *v4;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v8;
  const os_unfair_lock *v9;
  uint64_t v10;
  BOOL v11;
  const os_unfair_lock *v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  const os_unfair_lock *v16;

  if (a2)
  {
    v4 = (os_unfair_lock_s *)(a1 + 80);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
    if (CDBLockingAssertionsEnabled)
      v5 = *(_QWORD *)(a1 + 24) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    Database = CPRecordStoreGetDatabase();
    if (CDBLockingAssertionsEnabled)
      v8 = Database == 0;
    else
      v8 = 1;
    if (!v8)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9)
          os_unfair_lock_assert_owner(v9 + 20);
      }
    }
    v10 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
    if (CDBLockingAssertionsEnabled)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      if (*(_QWORD *)v10)
      {
        if (*(_QWORD *)(*(_QWORD *)v10 + 104))
        {
          v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v12)
            os_unfair_lock_assert_owner(v12 + 20);
        }
      }
    }
    v13 = CPSqliteConnectionStatementForSQL();
    if (v13)
    {
      v14 = (uint64_t **)v13;
      sqlite3_bind_text(*(sqlite3_stmt **)(v13 + 8), 1, (const char *)objc_msgSend(objc_retainAutorelease(a2), "cStringUsingEncoding:", 4), -1, 0);
      _CalDatabasePerformStatementWithWriteLock(a1, (uint64_t)v14);
      if (CDBLockingAssertionsEnabled)
      {
        if (*v14)
        {
          v15 = **v14;
          if (v15)
          {
            if (*(_QWORD *)(v15 + 104))
            {
              v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v16)
                os_unfair_lock_assert_owner(v16 + 20);
            }
          }
        }
      }
      CPSqliteStatementReset();
    }
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v4);
    os_unfair_lock_unlock(v4);
  }
}

void CalDatabasePurgeIdlePersistentChangeTrackingClients(uint64_t a1, uint64_t a2, double a3)
{
  os_unfair_lock_s *v6;
  BOOL v7;
  const os_unfair_lock *Context;
  uint64_t Database;
  BOOL v10;
  const os_unfair_lock *v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  const os_unfair_lock *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  const os_unfair_lock *v19;
  uint64_t v20;
  const os_unfair_lock *v21;
  const os_unfair_lock *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  uint64_t v31;
  const os_unfair_lock *v32;
  _BOOL4 v33;
  __CFNotificationCenter *DarwinNotifyCenter;
  _BOOL4 v35;
  void *v36;
  os_unfair_lock_s *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  if (CDBLockingAssertionsEnabled)
    v7 = *(_QWORD *)(a1 + 24) == 0;
  else
    v7 = 1;
  if (!v7)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (CDBLockingAssertionsEnabled)
    v10 = Database == 0;
  else
    v10 = 1;
  if (!v10)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v11)
        os_unfair_lock_assert_owner(v11 + 20);
    }
  }
  v12 = CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (CDBLockingAssertionsEnabled)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    if (*(_QWORD *)v12)
    {
      if (*(_QWORD *)(*(_QWORD *)v12 + 104))
      {
        v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v15)
          os_unfair_lock_assert_owner(v15 + 20);
      }
    }
  }
  v16 = CPSqliteConnectionStatementForSQL();
  if (v16)
  {
    v17 = (uint64_t **)v16;
    sqlite3_bind_double(*(sqlite3_stmt **)(v16 + 8), 1, a3);
    sqlite3_bind_int((sqlite3_stmt *)v17[1], 2, a2);
    if (CDBLockingAssertionsEnabled)
    {
      if (*v17)
      {
        v18 = **v17;
        if (v18)
        {
          if (*(_QWORD *)(v18 + 104))
          {
            v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v19)
              os_unfair_lock_assert_owner(v19 + 20);
          }
        }
      }
    }
    CPSqliteStatementSendResults();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v17)
      {
        v20 = **v17;
        if (v20)
        {
          if (*(_QWORD *)(v20 + 104))
          {
            v21 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v21)
              os_unfair_lock_assert_owner(v21 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  if (!objc_msgSend(v13, "count"))
    goto LABEL_58;
  if (CDBLockingAssertionsEnabled)
  {
    if (v12)
    {
      if (*(_QWORD *)v12)
      {
        if (*(_QWORD *)(*(_QWORD *)v12 + 104))
        {
          v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v22)
            os_unfair_lock_assert_owner(v22 + 20);
        }
      }
    }
  }
  v23 = CPSqliteConnectionStatementForSQL();
  if (v23)
  {
    v24 = v23;
    v36 = v13;
    v37 = v6;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v25 = v13;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
    v35 = v26 != 0;
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v27; ++i)
        {
          if (*(_QWORD *)v39 != v28)
            objc_enumerationMutation(v25);
          v30 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
          NSLog(CFSTR("Purging change-tracking client %@ which has been idle since %f or is tracking all stores and is behind more more than %d changes"), v30, *(_QWORD *)&a3, a2);
          sqlite3_bind_text(*(sqlite3_stmt **)(v24 + 8), 1, (const char *)objc_msgSend(objc_retainAutorelease(v30), "cStringUsingEncoding:", 4), -1, 0);
          _CalDatabasePerformStatementWithWriteLock(a1, v24);
          if (CDBLockingAssertionsEnabled)
          {
            if (*(_QWORD *)v24)
            {
              v31 = **(_QWORD **)v24;
              if (v31)
              {
                if (*(_QWORD *)(v31 + 104))
                {
                  v32 = (const os_unfair_lock *)CPRecordStoreGetContext();
                  if (v32)
                    os_unfair_lock_assert_owner(v32 + 20);
                }
              }
            }
          }
          CPSqliteStatementReset();
        }
        v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
      }
      while (v27);
    }

    v13 = v36;
    v6 = v37;
    v33 = v35;
  }
  else
  {
LABEL_58:
    v33 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v6);
  os_unfair_lock_unlock(v6);
  CalDatabaseClearSuperfluousChanges((os_unfair_lock_s *)a1);
  if (v33)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("CalDatabaseIdleChangeTrackingClientWasPurgedNotification"), 0, 0, 1u);
  }

}

uint64_t __UnusedClientRowHandler(uint64_t a1, void *a2)
{
  sqlite3_stmt *v2;
  id v3;
  void *v4;

  v2 = *(sqlite3_stmt **)(a1 + 8);
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_column_text(v2, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v4);

  return 0;
}

uint64_t CalDatabaseCountPersistentChangeRecords(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  char ***v4;
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;
  const os_unfair_lock *Context;

  v2 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  RecordStore = _CalDatabaseGetRecordStore(a1);
  v4 = off_1EE807BC0;
  if (!*(_BYTE *)(a1 + 378))
    v4 = __classesTrackingChanges;
  if (__classesTrackingChanges[*(unsigned __int8 *)(a1 + 378)])
  {
    v5 = RecordStore;
    v6 = v4 + 1;
    do
    {
      if (CDBLockingAssertionsEnabled)
        v7 = v5 == 0;
      else
        v7 = 1;
      if (!v7)
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      CPRecordStoreGetChangesForClass();
    }
    while (*v6++);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return 0;
}

uint64_t CalDatabaseFreezeChangeLog(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  BOOL v4;
  const os_unfair_lock *Context;
  uint64_t SequenceNumber;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  if (!v4)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  SequenceNumber = CPRecordStoreGetSequenceNumber();
  a1[90]._os_unfair_lock_opaque = SequenceNumber;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return SequenceNumber;
}

void CalDatabaseUnfreezeChangeLog(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  a1[90]._os_unfair_lock_opaque = -1;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
}

void _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(uint64_t a1, id *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(unsigned int *)(a1 + 360);
  if ((v2 & 0x80000000) == 0)
  {
    if (*a2)
    {
      objc_msgSend(*a2, "stringByAppendingFormat:", CFSTR("AND sequence_number <= %i"), v2);
      v4 = objc_claimAutoreleasedReturnValue();
      CFRelease(*a2);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("sequence_number <= %i"), v2);
      v4 = objc_claimAutoreleasedReturnValue();
    }
    *a2 = (id)v4;
  }
}

uint64_t countRow(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(int *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (*(_QWORD *)a2 >= v2)
    return 0;
  *(_DWORD *)(a2 + 12) = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 0);
  return 1;
}

uint64_t ___prepareBindingBlocksForFindingChangesOfEachEntityType_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 40));
  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 2, *(_DWORD *)(a1 + 44));
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 3, *(const char **)(a1 + 32), -1, 0);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 4, *(const char **)(a1 + 32), -1, 0);
  result = sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 5, *(_DWORD *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 48);
  if ((v5 & 0x80000000) == 0)
    return sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 6, v5);
  return result;
}

uint64_t ___prepareBindingBlocksForFindingChangesOfEachEntityType_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 1, *(_DWORD *)(a1 + 40));
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 2, *(const char **)(a1 + 32), -1, 0);
  sqlite3_bind_text(*(sqlite3_stmt **)(a2 + 8), 3, *(const char **)(a1 + 32), -1, 0);
  result = sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 4, *(_DWORD *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 48);
  if ((v5 & 0x80000000) == 0)
    return sqlite3_bind_int(*(sqlite3_stmt **)(a2 + 8), 5, v5);
  return result;
}

void ___buildDictionariesWithChangeTablePropertiesForEntityType_block_invoke()
{
  void *v0;
  __int128 v1;
  char **v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  __int128 v18;
  _QWORD v19[4];
  id v20;
  _BYTE *v21;
  void *v22;
  char **v23;
  void *v24;
  _BYTE buf[24];
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_opt_new();
  v2 = __classesTrackingChanges[0];
  if (__classesTrackingChanges[0])
  {
    v3 = 1;
    *(_QWORD *)&v1 = 134218752;
    v18 = v1;
    do
    {
      v4 = (void *)objc_opt_new();
      v5 = *((_DWORD *)v2 + 18);
      if (v5 >= 1)
      {
        v6 = 0;
        v7 = 24;
        do
        {
          if ((v2[10][v7] & 0xA) != 0)
          {
            objc_msgSend(v4, "addIndex:", v6);
            v5 = *((_DWORD *)v2 + 18);
          }
          ++v6;
          v7 += 40;
        }
        while (v6 < v5);
      }
      v8 = objc_msgSend(v4, "count", v18);
      v9 = malloc_type_calloc(v8, 8uLL, 0x10040436913F5uLL);
      v10 = (void *)objc_opt_new();
      v11 = malloc_type_calloc(v8, 4uLL, 0x100004052888210uLL);
      v12 = malloc_type_calloc(1uLL, 0x20uLL, 0x109004012E890EEuLL);
      v13 = v12;
      if (v12 && v9 && v10 && v11)
      {
        *(_DWORD *)v12 = v8;
        *((_QWORD *)v12 + 1) = v9;
        objc_storeStrong((id *)v12 + 2, v10);
        v13[3] = v11;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2020000000;
        LODWORD(v26) = 0;
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3221225472;
        v19[2] = ___buildDictionariesWithChangeTablePropertiesForEntityType_block_invoke_155;
        v19[3] = &unk_1E4F90640;
        v21 = buf;
        v22 = v9;
        v23 = v2;
        v20 = v10;
        v24 = v11;
        objc_msgSend(v4, "enumerateIndexesUsingBlock:", v19);
        objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", v2);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v0, "setObject:forKeyedSubscript:", v14, v15);

        _Block_object_dispose(buf, 8);
      }
      else
      {
        v16 = CDBLogHandle;
        if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v18;
          *(_QWORD *)&buf[4] = v13;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          v26 = v10;
          v27 = 2048;
          v28 = v11;
          _os_log_impl(&dword_1A5CCB000, v16, OS_LOG_TYPE_ERROR, "Failed to allocate memory for changePropertiesByRecord mapping desc: %p, cstring: %p, nsstrings: %p, types: %p", buf, 0x2Au);
        }
        if (v13)
          free(v13);
        if (v9)
          free(v9);
        if (v11)
          free(v11);
      }

      v2 = __classesTrackingChanges[v3++];
    }
    while (v2);
  }
  v17 = (void *)_buildDictionariesWithChangeTablePropertiesForEntityType_changePropertiesByRecord;
  _buildDictionariesWithChangeTablePropertiesForEntityType_changePropertiesByRecord = (uint64_t)v0;

}

void sub_1A5D8E354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___buildDictionariesWithChangeTablePropertiesForEntityType_block_invoke_155(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;

  v4 = 5 * a2;
  *(_QWORD *)(a1[6] + 8 * *(int *)(*(_QWORD *)(a1[5] + 8) + 24)) = *(_QWORD *)(*(_QWORD *)(a1[7] + 80) + 40 * a2);
  v5 = (void *)a1[4];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)(a1[6] + 8 * *(int *)(*(_QWORD *)(a1[5] + 8) + 24)));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObject:", v6);

  v7 = *(_QWORD *)(a1[7] + 80);
  if ((*(_BYTE *)(v7 + 8 * v4 + 24) & 8) != 0)
    v8 = 1;
  else
    v8 = *(_DWORD *)(v7 + 40 * a2 + 8);
  *(_DWORD *)(a1[8] + 4 * (int)(*(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24))++) = v8;
}

uint64_t __StoreIDRowHandler(uint64_t a1, void *a2)
{
  sqlite3_stmt *v2;
  id v3;
  void *v4;

  v2 = *(sqlite3_stmt **)(a1 + 8);
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(v2, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v4);

  return 0;
}

uint64_t __RowInfoRowHandler(uint64_t a1, void *a2)
{
  sqlite3_stmt *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v3 = *(sqlite3_stmt **)(a1 + 8);
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_column_text(v3, 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), 1);
  v7 = (void *)objc_opt_new();
  objc_msgSend(v7, "setClientIdentifier:", v5);
  objc_msgSend(v7, "setConsumedSequenceNumber:", v6);
  objc_msgSend(v4, "addObject:", v7);

  return 0;
}

void _CalCategoryLinkPrepareForSave(const void *a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t DatabaseForRecord;
  int v8;
  uint64_t v9;
  __int16 v10;
  CFTypeRef DebugDescription;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  v4 = Property;
  if (Property)
    CalRelationOwnerWillSave(Property);
  if (!_CalCategoryLinkGetCategory((uint64_t)a1))
  {
    v5 = (void *)CDBLogHandle;
    if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
    {
      v6 = v5;
      v8 = 134218242;
      v9 = v4;
      v10 = 2112;
      DebugDescription = _CalEntityGetDebugDescription(a1);
      _os_log_impl(&dword_1A5CCB000, v6, OS_LOG_TYPE_ERROR, "saving a category link with NULL category: relation=%p, record=%@", (uint8_t *)&v8, 0x16u);

    }
    DatabaseForRecord = CalGetDatabaseForRecord();
    _CalDatabaseIntegrityError(DatabaseForRecord, CFSTR("Category link without category"));
  }
}

void CalCategoryLinkInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalCategoryLinkClass, (const char **)&kCalCategoryLinkIndexes, 0);
  CalMigrationCreateTriggers(a2, (const char **)&kCalCategoryLinkClass, (const char **)&kCalCategoryLinkTriggers);
}

void CalCategoryLinkMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  if (a3 > 58)
  {
    if (a3 <= 0x3E99)
      CalMigrateTableFull(a2, (const char **)&kCalCategoryLinkClass, 0, (const char **)&kCalCategoryLinkUpgradeInfo, 0, (const char **)&kCalCategoryLinkIndexes, 0, (const char **)&kCalCategoryLinkTriggers, a3);
  }
  else
  {
    CalCategoryLinkInitializeTables(a1, a2);
  }
}

const void *CalDatabaseCreateCategoryLink(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *CategoryLinkWithOwnerAndCategory;
  const void *TemporaryRecordIDForEntity;
  BOOL v5;
  const os_unfair_lock *Context;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  CategoryLinkWithOwnerAndCategory = _CalDatabaseCreateCategoryLinkWithOwnerAndCategory((uint64_t)a1, 0, 0);
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity((uint64_t)a1, 13);
  if (CDBLockingAssertionsEnabled)
    v5 = CategoryLinkWithOwnerAndCategory == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return CategoryLinkWithOwnerAndCategory;
}

const void *_CalDatabaseCreateCategoryLinkWithOwnerAndCategory(uint64_t a1, const void *a2, const void *a3)
{
  const void *v6;
  const void *TemporaryRecordIDForEntity;
  BOOL v8;
  const os_unfair_lock *Context;
  BOOL v10;
  const os_unfair_lock *v11;
  _QWORD *Property;
  BOOL v13;
  const os_unfair_lock *v14;
  _QWORD *v15;

  v6 = (const void *)CPRecordCreate();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 13);
  if (CDBLockingAssertionsEnabled)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v6);
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
      v10 = v6 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      if (CPRecordGetStore())
      {
        v11 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v11)
          os_unfair_lock_assert_owner(v11 + 20);
      }
    }
    Property = (_QWORD *)CPRecordGetProperty();
    if (Property)
      CalRelationSetRelatedObject(Property, a2);
  }
  if (a3)
  {
    if (CDBLockingAssertionsEnabled)
      v13 = v6 == 0;
    else
      v13 = 1;
    if (!v13)
    {
      if (CPRecordGetStore())
      {
        v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v14)
          os_unfair_lock_assert_owner(v14 + 20);
      }
    }
    v15 = (_QWORD *)CPRecordGetProperty();
    if (v15)
      CalRelationSetRelatedObject(v15, a3);
  }
  return v6;
}

uint64_t _CalCategoryLinkRemove(const void *a1)
{
  uint64_t DatabaseForRecord;

  DatabaseForRecord = CalGetDatabaseForRecord();
  return _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

void CalCategoryLinkRemove(const void *a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t DatabaseForRecord;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  DatabaseForRecord = CalGetDatabaseForRecord();
  _CalDatabaseRemoveEntity(DatabaseForRecord, a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCategoryLinkGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

CFTypeRef _CalCategoryLinkGetOwner(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

CFTypeRef CalCategoryLinkCopyCalendarItem(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Owner;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalCategoryLinkGetOwner(a1);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCategoryLinkSetCalendarItem(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalRelationSetRelatedObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef _CalCategoryLinkGetCategory(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

CFTypeRef CalCategoryLinkCopyCategory(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Category;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Category = _CalCategoryLinkGetCategory(a1);
  v4 = Category;
  if (Category)
    CFRetain(Category);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalCategoryLinkSetCategory(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  _QWORD *Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (_QWORD *)CPRecordGetProperty();
  if (Property)
    CalRelationSetRelatedObject(Property, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalCategoryLinkSetGroup(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

void _CalDatabaseIntegrityError(uint64_t a1, void *a2)
{
  id v3;
  uint64_t Database;
  void *v5;
  void *v6;
  id WeakRetained;
  id v8;
  id v9;

  v3 = a2;
  _CalDatabaseGetRecordStore(a1);
  Database = CPRecordStoreGetDatabase();
  _CalDatabaseGetErrorsForDatabase(Database);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    v8 = (id)objc_opt_new();
    _CalDatabaseSetErrorsForDatabase(Database, v8);
    v5 = v8;
  }
  v9 = v5;
  objc_msgSend(v5, "errors");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v3);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 320));
  objc_msgSend(v9, "setDelegate:", WeakRetained);

}

void _CalDatabaseSetErrorsForDatabase(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&lock);
  v3 = v7;
  v4 = (void *)table;
  if (v7)
  {
    if (!table)
    {
      v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 258, 0, 1);
      v6 = (void *)table;
      table = v5;

      v3 = v7;
      v4 = (void *)table;
    }
    objc_msgSend(v4, "setObject:forKey:", v3, a1);
  }
  else
  {
    objc_msgSend((id)table, "removeObjectForKey:", a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&lock);

}

uint64_t _CalAttachmentPrepareForSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  const os_unfair_lock *v4;
  int i;
  const os_unfair_lock *v6;
  const os_unfair_lock *v7;
  const os_unfair_lock *v8;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (Property)
    CalRelationOwnerWillSave(Property);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v4 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v4)
          os_unfair_lock_assert_owner(v4 + 20);
      }
    }
  }
  CPRecordUnloadProperty();
  for (i = 0; i != 26; ++i)
  {
    if ((CalAttachmentToCalAttachmentFilePropertyMap(i) & 0x80000000) == 0)
    {
      if (a1)
      {
        if (CDBLockingAssertionsEnabled)
        {
          if (CPRecordGetStore())
          {
            v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v6)
              os_unfair_lock_assert_owner(v6 + 20);
          }
        }
      }
      CPRecordUnloadProperty();
    }
  }
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordUnloadProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v8)
          os_unfair_lock_assert_owner(v8 + 20);
      }
    }
  }
  return CPRecordUnloadProperty();
}

uint64_t _CalAttachmentPropertyDidChange(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  const os_unfair_lock *Context;

  if (a2 <= 2)
  {
    v2 = result;
    result = _CalRecordHasValueChangedForProperty(result, a2);
    if ((_DWORD)result)
    {
      if (v2 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      return CPRecordSetProperty();
    }
  }
  return result;
}

uint64_t _CalAttachmentPropertyWillChange(void *a1, int a2, uint64_t a3)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  CFTypeRef AttachmentFile;
  uint64_t DatabaseForRecord;
  uint64_t AttachmentFileWithUUID;
  uint64_t v11;
  CFMutableArrayRef v12;
  uint64_t result;
  int i;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  CFTypeRef AttachmentFileMakingIfNecessary;
  BOOL v18;
  const os_unfair_lock *v19;
  CFTypeRef v20;
  BOOL v21;
  const os_unfair_lock *v22;

  if (!a2 && a3 == -1)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v7)
            os_unfair_lock_assert_owner(v7 + 20);
        }
      }
    }
    CPRecordGetProperty();
LABEL_36:
    result = CalAttachmentToCalAttachmentFilePropertyMap(a2);
    if ((result & 0x80000000) == 0)
    {
      AttachmentFileMakingIfNecessary = _CalAttachmentGetAttachmentFileMakingIfNecessary(a1);
      if (CDBLockingAssertionsEnabled)
        v18 = AttachmentFileMakingIfNecessary == 0;
      else
        v18 = 1;
      if (!v18 && CPRecordGetStore())
      {
        v19 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v19)
          os_unfair_lock_assert_owner(v19 + 20);
      }
      return CPRecordSetProperty();
    }
    return result;
  }
  if (a2 != 6)
    goto LABEL_36;
  AttachmentFile = _CalAttachmentGetAttachmentFile((uint64_t)a1);
  DatabaseForRecord = CalGetDatabaseForRecord();
  AttachmentFileWithUUID = _CalDatabaseGetAttachmentFileWithUUID(DatabaseForRecord, a3);
  if (!AttachmentFileWithUUID)
  {
    v20 = _CalAttachmentGetAttachmentFileMakingIfNecessary(a1);
    if (CDBLockingAssertionsEnabled)
      v21 = v20 == 0;
    else
      v21 = 1;
    if (!v21)
    {
      if (CPRecordGetStore())
      {
        v22 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v22)
          os_unfair_lock_assert_owner(v22 + 20);
      }
    }
    return CPRecordSetProperty();
  }
  v11 = AttachmentFileWithUUID;
  if (AttachmentFile)
  {
    _CalAttachmentFileRemoveAttachment((uint64_t)AttachmentFile, a1);
    v12 = _CalAttachmentFileCopyAttachments((uint64_t)AttachmentFile);
    if (!-[__CFArray count](v12, "count"))
      _CalRemoveAttachmentFile(AttachmentFile);

  }
  result = (uint64_t)_CalAttachmentFileAddAttachment(v11, a1);
  for (i = 0; i != 26; ++i)
  {
    if (i != 6)
    {
      result = CalAttachmentToCalAttachmentFilePropertyMap(i);
      if ((result & 0x80000000) == 0)
      {
        if (a1)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v15)
                os_unfair_lock_assert_owner(v15 + 20);
            }
          }
        }
        result = CPRecordGetCachedProperty();
        if (result)
        {
          if (CDBLockingAssertionsEnabled)
          {
            if (CPRecordGetStore())
            {
              v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v16)
                os_unfair_lock_assert_owner(v16 + 20);
            }
          }
          result = CPRecordSetProperty();
        }
      }
    }
  }
  return result;
}

void CalAttachmentInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalAttachmentClass, (const char **)&kCalAttachmentIndexes, (const char **)&kCalAttachmentChangesIndexes);
  CalMigrationCreateTriggers(a2, (const char **)&kCalAttachmentClass, (const char **)&kCalAttachmentTriggers);
}

void CalAttachmentMigrateTables(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  const os_unfair_lock *Context;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];
  unsigned int v9;

  if ((int)a3 <= 56)
  {
    CalAttachmentInitializeTables(a1, a2);
    return;
  }
  if (a3 <= 0x4651)
  {
    if (a3 > 0x76)
    {
      if (a3 > 0x3E88)
      {
        v7 = 0;
LABEL_15:
        CalMigrateTableFull2(a2, (const char **)&kCalAttachmentClass, 0, (const char **)&kCalAttachmentUpgradeInfo, v7, (const char **)&kCalAttachmentChangesUpgradeInfo, 0, 0, (const char **)&kCalAttachmentIndexes, (const char **)&kCalAttachmentChangesIndexes, (const char **)&kCalAttachmentTriggers, a3);

        return;
      }
    }
    else
    {
      CPRecordStoreCreateTablesForClass();
    }
    _CalDBFillInUUIDColumn((uint64_t)a2, (uint64_t)CFSTR("Attachment"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE TEMP TABLE AttachmentMigration (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, UUID TEXT, url TEXT, original_url TEXT, store_id INTEGER, external_id TEXT, external_mod_tag TEXT, format TEXT, is_binary INTEGER, filename TEXT, local_url TEXT, file_size INTEGER)"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("INSERT INTO temp.AttachmentMigration (ROWID, UUID, url, original_url, store_id, external_id, external_mod_tag, format, is_binary, filename, local_url, file_size) SELECT Attachment.ROWID, Attachment.UUID, iif (Attachment.url = \"http://localhost\", NULL, Attachment.url), Attachment.url, Calendar.store_id, Attachment.external_id, Attachment.external_mod_tag, Attachment.format, Attachment.is_binary, Attachment.filename, Attachment.local_url, Attachment.file_size FROM Attachment JOIN CalendarItem ON CalendarItem.ROWID = Attachment.owner_id JOIN Calendar ON Calendar.ROWID = CalendarItem.calendar_id"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX temp.AttachmentMigrationURLStoreID ON AttachmentMigration(url, store_id)"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("UPDATE temp.AttachmentMigration AS target SET UUID = (SELECT other.UUID FROM temp.AttachmentMigration AS other WHERE (other.url = target.url AND other.store_id = target.store_id AND target.url IS NOT NULL) OR (target.url IS NULL AND other.ROWID = target.ROWID) ORDER BY other.ROWID LIMIT 1)"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("CREATE INDEX temp.AttachmentMigrationUUID ON AttachmentMigration(UUID)"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("UPDATE temp.AttachmentMigration AS target SET (external_id, external_mod_tag, format, is_binary, local_url, file_size) = (SELECT external_id, external_mod_tag, format, is_binary, local_url, file_size FROM temp.AttachmentMigration as source WHERE source.local_url IS NOT NULL AND target.UUID = source.UUID LIMIT 1) WHERE target.local_url IS NULL AND (SELECT other.local_url FROM temp.AttachmentMigration as other WHERE other.UUID = target.UUID AND other.local_url IS NOT NULL) IS NOT NULL"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("INSERT INTO AttachmentFile (UUID, url, external_id, external_mod_tag, format, flags, filename, local_path, file_size, store_id) SELECT UUID, original_url, external_id, external_mod_tag, format, is_binary, filename, local_url, file_size, store_id FROM AttachmentMigration GROUP BY UUID"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("UPDATE Attachment SET UUID = other.UUID FROM (SELECT ROWID, UUID FROM temp.AttachmentMigration) AS other WHERE other.ROWID = Attachment.ROWID"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("UPDATE AttachmentChanges SET UUID = IFNULL((SELECT UUID FROM Attachment WHERE Attachment.ROWID = AttachmentChanges.record), UUID)"));
    CalPerformSQLWithConnection(a2, (uint64_t)CFSTR("DROP TABLE temp.AttachmentMigration"));
    if (a2 && CDBLockingAssertionsEnabled && *a2 && *(_QWORD *)(*a2 + 104))
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    v6 = CPSqliteConnectionStatementForSQL();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __CalAttachmentMigrateTables_block_invoke;
    v8[3] = &__block_descriptor_44_e42__v24__0____CFString__8____CFDictionary__16l;
    v9 = a3;
    v8[4] = v6;
    v7 = (void *)MEMORY[0x1A85B52F0](v8);
    goto LABEL_15;
  }
}

uint64_t CalAttachmentGetPropertyIDWithPropertyName(void *key)
{
  const __CFDictionary *v2;
  uint64_t i;
  void *value;
  int v6;
  __CFString *v7;
  int v8;
  __CFString *v9;
  int v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  int v14;
  __CFString *v15;
  int v16;
  __CFString *v17;
  int v18;
  __CFString *v19;
  int v20;
  __CFString *v21;
  int v22;
  __CFString *v23;
  int v24;
  __CFString *v25;
  int v26;
  __CFString *v27;
  int v28;
  __CFString *v29;
  int v30;
  __CFString *v31;
  int v32;
  __CFString *v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)CalAttachmentGetPropertyIDWithPropertyName_sPropDict;
  if (!CalAttachmentGetPropertyIDWithPropertyName_sPropDict)
  {
    pthread_mutex_lock(&CalAttachmentGetPropertyIDWithPropertyName_sPropDictLock);
    if (!CalAttachmentGetPropertyIDWithPropertyName_sPropDict)
    {
      value = CFSTR("UUID");
      v6 = 6;
      v7 = CFSTR("externalID");
      v8 = 3;
      v9 = CFSTR("owner");
      v10 = 22;
      v11 = CFSTR("URLString");
      v12 = 5;
      v13 = CFSTR("fileNameRaw");
      v14 = 9;
      v15 = CFSTR("fileFormat");
      v16 = 7;
      v17 = CFSTR("flags");
      v18 = 8;
      v19 = CFSTR("localRelativePath");
      v20 = 10;
      v21 = CFSTR("fileSize");
      v22 = 11;
      v23 = CFSTR("XPropertiesData");
      v24 = 1;
      v25 = CFSTR("securityScopedURLWrapperForPendingFileCopy");
      v26 = 14;
      v27 = CFSTR("shouldSetQuarantineAttributesOnCopiedFile");
      v28 = 15;
      v29 = CFSTR("externalModificationTag");
      v30 = 4;
      v31 = CFSTR("securityScopedLocalURLWrapper");
      v32 = 16;
      v33 = CFSTR("securityScopedLocalURLForArchivedDataWrapper");
      v34 = 17;
      CalAttachmentGetPropertyIDWithPropertyName_sPropDict = (uint64_t)_CalDBCreatePropertyMap((uint64_t)&value, 15);
      for (i = 224; i != -16; i -= 16)

    }
    pthread_mutex_unlock(&CalAttachmentGetPropertyIDWithPropertyName_sPropDictLock);
    v2 = (const __CFDictionary *)CalAttachmentGetPropertyIDWithPropertyName_sPropDict;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v2, key, (const void **)&value))
    return value;
  else
    return 0xFFFFFFFFLL;
}

void sub_1A5D8FD60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 224; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

CFTypeRef _CalAttachmentHasValidParent(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  result = CalRelationGetRelatedObject(Property);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

void _CalAttachmentCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Attachment WHERE owner_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
}

uint64_t _CalDatabasePrepareAttachmentsInStoreForMigration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _CalDatabaseRemoveAttachmentChangesInStoreToIndex(a1, a3);
}

uint64_t _CalDatabaseRemoveAttachmentChangesInStoreToIndex(uint64_t a1, uint64_t a2)
{
  CFStringRef v3;
  uint64_t RecordStore;
  BOOL v5;
  const os_unfair_lock *Context;
  uint64_t v7;

  v3 = _CalAttachmentCreateChangeHistoryWhereClauseForStore(a1, a2);
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v5 = RecordStore == 0;
  else
    v5 = 1;
  if (!v5)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  v7 = CPRecordStoreDeleteChangesForClassToIndexWhere();
  if (v3)
    CFRelease(v3);
  return v7;
}

const void *_CalDatabaseCreateAttachment(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  BOOL v4;
  const os_unfair_lock *Context;
  const void *TemporaryRecordIDForEntity;
  BOOL v7;
  const os_unfair_lock *v8;

  v2 = CPRecordCreate();
  v3 = (const void *)v2;
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 11);
  if (CDBLockingAssertionsEnabled)
    v7 = v3 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v3);
  return v3;
}

const void *CalDatabaseCreateAttachment(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Attachment;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Attachment = _CalDatabaseCreateAttachment((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Attachment;
}

void *_CalAttachmentCopy(uint64_t a1, void *a2)
{
  uint64_t DatabaseForRecord;
  void *Attachment;
  void *v6;
  BOOL v7;
  const os_unfair_lock *Context;
  const os_unfair_lock *v9;
  void *AttachmentFileMakingIfNecessary;
  uint64_t Store;
  uint64_t v12;
  int ID;
  const os_unfair_lock *v14;
  const os_unfair_lock *v15;
  const os_unfair_lock *v16;
  const os_unfair_lock *v17;
  const void *v18;

  DatabaseForRecord = CalGetDatabaseForRecord();
  Attachment = (void *)_CalDatabaseCreateAttachment(DatabaseForRecord);
  v6 = Attachment;
  if (CDBLockingAssertionsEnabled)
    v7 = Attachment == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v9)
          os_unfair_lock_assert_owner(v9 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  AttachmentFileMakingIfNecessary = (void *)_CalAttachmentGetAttachmentFileMakingIfNecessary(a2);
  Store = _CalAttachmentFileGetStore((uint64_t)AttachmentFileMakingIfNecessary);
  if (!a1
    || (v12 = Store, Store == a1)
    || CalGetDatabaseForRecord() == DatabaseForRecord
    && v12
    && (ID = CPRecordGetID(), ID == CPRecordGetID()))
  {
    _CalAttachmentFileAddAttachment((uint64_t)AttachmentFileMakingIfNecessary, v6);
    if (CDBLockingAssertionsEnabled)
    {
      if (v6)
      {
        if (CPRecordGetStore())
        {
          v14 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v14)
            os_unfair_lock_assert_owner(v14 + 20);
        }
      }
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v15 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v15)
            os_unfair_lock_assert_owner(v15 + 20);
        }
      }
    }
    CPRecordGetProperty();
    CPRecordSetProperty();
    if (CDBLockingAssertionsEnabled)
    {
      if (v6)
      {
        if (CPRecordGetStore())
        {
          v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v16)
            os_unfair_lock_assert_owner(v16 + 20);
        }
      }
    }
    if (a2)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v17 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v17)
            os_unfair_lock_assert_owner(v17 + 20);
        }
      }
    }
    CPRecordGetProperty();
    CPRecordSetProperty();
  }
  else
  {
    v18 = _CalAttachmentFileCopy(DatabaseForRecord, AttachmentFileMakingIfNecessary);
    _CalAttachmentFileAddAttachment((uint64_t)v18, v6);
  }
  return v6;
}

CFTypeRef _CalAttachmentGetAttachmentFileMakingIfNecessary(void *a1)
{
  CFTypeRef AttachmentFile;
  uint64_t DatabaseForRecord;

  AttachmentFile = _CalAttachmentGetAttachmentFile((uint64_t)a1);
  if (!AttachmentFile)
  {
    DatabaseForRecord = CalGetDatabaseForRecord();
    AttachmentFile = _CalDatabaseCreateAttachmentFile(DatabaseForRecord);
    _CalAttachmentFileAddAttachment((uint64_t)AttachmentFile, a1);
    CFRelease(AttachmentFile);
  }
  return AttachmentFile;
}

BOOL _CalAttachmentHasDirtyInstanceAttributes(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

uint64_t _CalAttachmentMarkDirty(uint64_t a1, int a2)
{
  const os_unfair_lock *Context;
  uint64_t result;
  const os_unfair_lock *v6;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordSetProperty();
  if (a2)
  {
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v6)
        os_unfair_lock_assert_owner(v6 + 20);
    }
    return CPRecordSetProperty();
  }
  return result;
}

_QWORD *_CalRemoveAttachment(void *a1)
{
  CFTypeRef AttachmentFile;
  uint64_t v3;
  const os_unfair_lock *Context;
  const os_unfair_lock *v5;
  CFTypeRef Owner;
  uint64_t DatabaseForRecord;

  AttachmentFile = _CalAttachmentGetAttachmentFile((uint64_t)a1);
  if (AttachmentFile)
  {
    v3 = (uint64_t)AttachmentFile;
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    CPRecordGetProperty();
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (v5)
            os_unfair_lock_assert_owner(v5 + 20);
        }
      }
    }
    CPRecordGetProperty();
    _CalAttachmentFileRemoveAttachment(v3, a1);
  }
  Owner = _CalAttachmentGetOwner((uint64_t)a1);
  if (Owner)
    return _CalCalendarItemRemoveAttachment((uint64_t)Owner, a1);
  DatabaseForRecord = CalGetDatabaseForRecord();
  return (_QWORD *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

CFTypeRef _CalAttachmentGetAttachmentFile(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

CFTypeRef _CalAttachmentGetOwner(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

void CalRemoveAttachment(void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveAttachment(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalInvalidateAttachmentsWithOwnerID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t _CalAttachmentSaveAddedRecords(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType();
  return 0;
}

CFTypeRef CalAttachmentCopyAttachmentFile(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef AttachmentFile;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  AttachmentFile = _CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile)
    v4 = CFRetain(AttachmentFile);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t CalDatabaseCopyAttachmentChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalAttachmentCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  v7 = _CalDatabaseCopyAttachmentChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  if (v5)
    CFRelease(v5);
  return v7;
}

CFStringRef _CalAttachmentCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t ID;
  CFStringRef v6;

  v6 = 0;
  if (a2)
  {
    v3 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("store_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v3, v3, 11, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t _CalDatabaseCopyAttachmentChangesWithWhereClauseNoLock(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

uint64_t CalDatabaseRemoveAttachmentChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  uint64_t v6;
  _QWORD v8[7];
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __CalDatabaseRemoveAttachmentChangesInStoreToIndex_block_invoke;
  v8[3] = &unk_1E4F84BF0;
  v8[4] = &v10;
  v8[5] = v5;
  v8[6] = a2;
  v9 = a3;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  v6 = *((unsigned __int8 *)v11 + 24);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1A5D90C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyAttachmentChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalAttachmentCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v7 = _CalDatabaseCopyAttachmentChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  if (v5)
    CFRelease(v5);
  return v7;
}

CFStringRef _CalAttachmentCreateChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t ID;
  CFStringRef v6;

  v6 = 0;
  if (a2)
  {
    v3 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("calendar_id = %d  AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@')  AND sequence_number NOT IN  (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@')  AND ROWID NOT IN  (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v3, v3, 11, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t CalDatabaseRemoveAttachmentChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalAttachmentCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveAttachmentChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E4F84BF0;
  v9[4] = &v11;
  v9[5] = v5;
  v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A5D90F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseRemoveAttachmentChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __CalDatabaseRemoveAttachmentChangesWithIndices_block_invoke;
  v7[3] = &unk_1E4F84C18;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A5D91088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalAttachmentGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyAttachmentWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalAttachmentGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

CFTypeRef CalDatabaseCopyAttachmentWithUUID(os_unfair_lock_s *a1, uint64_t a2)
{
  CFTypeRef v2;
  const void *v3;
  const __CFArray *v4;
  const __CFArray *v5;
  const void *ValueAtIndex;
  CFTypeRef v7;

  if (!a1)
    return 0;
  v2 = CalDatabaseCopyAttachmentFileWithUUID(a1, a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CalAttachmentFileCopyAttachments((uint64_t)v2);
  if (v4)
  {
    v5 = v4;
    if (CFArrayGetCount(v4) < 1)
    {
      v7 = 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
      v7 = CFRetain(ValueAtIndex);
    }
    CFRelease(v5);
  }
  else
  {
    v7 = 0;
  }
  CFRelease(v3);
  return v7;
}

uint64_t _CalDatabaseCopyOfAllAttachmentsInStore(uint64_t a1, uint64_t a2)
{
  uint64_t RecordStore;
  BOOL v4;
  int v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v8;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v4 = RecordStore == 0;
  else
    v4 = 1;
  v5 = !v4;
  if (a2)
  {
    if (v5)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  }
  else
  {
    if (v5)
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
    return CPRecordStoreCopyAllInstancesOfClass();
  }
}

uint64_t CalDatabaseCopyOfAllAttachmentsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v5 = _CalDatabaseCopyOfAllAttachmentsInStore((uint64_t)a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t _CalAttachmentGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

uint64_t CalAttachmentGetUID()
{
  os_unfair_lock_s *RecordLock;
  uint64_t ID;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  ID = CPRecordGetID();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return ID;
}

uint64_t _CalAttachmentCopyUUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalAttachmentCopyUUID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentCopyExternalID(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetExternalModTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentCopyExternalModTag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetURL(uint64_t a1, const __CFURL *a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    CFURLGetString(a2);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  _CalAttachmentSetFlag(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAttachmentSetFlag(uint64_t a1)
{
  const os_unfair_lock *Context;
  const os_unfair_lock *v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordGetProperty();
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v3 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v3)
          os_unfair_lock_assert_owner(v3 + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

CFURLRef CalAttachmentCopyURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *v4;
  CFURLRef result;
  CFURLRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = (const __CFString *)CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  result = 0;
  if (v4)
  {
    v6 = CFURLCreateWithString(0, v4, 0);
    CFRelease(v4);
    return v6;
  }
  return result;
}

uint64_t CalAttachmentSetFileData(void *a1, uint64_t a2)
{
  return CalAttachmentSetFileDataAndQuarantine(a1, a2);
}

uint64_t CalAttachmentSetFileDataAndQuarantine(void *a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  void *AttachmentFileMakingIfNecessary;
  uint64_t v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  AttachmentFileMakingIfNecessary = (void *)_CalAttachmentGetAttachmentFileMakingIfNecessary(a1);
  v6 = _CalAttachmentFileSetFileData(AttachmentFileMakingIfNecessary, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v6;
}

uint64_t _CalAttachmentSetFileData(void *a1, uint64_t a2)
{
  void *AttachmentFileMakingIfNecessary;

  AttachmentFileMakingIfNecessary = (void *)_CalAttachmentGetAttachmentFileMakingIfNecessary(a1);
  return _CalAttachmentFileSetFileData(AttachmentFileMakingIfNecessary, a2);
}

void CalAttachmentSetIsBinary(uint64_t a1)
{
  CalAttachmentSetFlag(a1);
}

void CalAttachmentSetFlag(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentSetFlag(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL CalAttachmentIsBinary(uint64_t a1)
{
  return CalAttachmentGetFlag(a1, 1);
}

BOOL CalAttachmentGetFlag(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  int Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return (Property & a2) != 0;
}

void CalAttachmentSetFilename(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const __CFString *_CalAttachmentCopyFilename(uint64_t a1)
{
  const __CFString *result;

  result = (const __CFString *)_CalAttachmentGetAttachmentFile(a1);
  if (result)
    return _CalAttachmentFileCopyFilename((uint64_t)result);
  return result;
}

const __CFString *CalAttachmentCopyFilename(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef AttachmentFile;
  const __CFString *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  AttachmentFile = _CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile)
    v4 = _CalAttachmentFileCopyFilename((uint64_t)AttachmentFile);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetLocalRelativePath(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentSetLocalRelativePath(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalAttachmentSetLocalRelativePath(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordSetProperty();
}

uint64_t CalAttachmentCopyLocalRelativePath(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalAttachmentCopyLocalRelativePath(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalAttachmentCopyLocalRelativePath(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordCopyProperty();
}

uint64_t CalAttachmentCopyLocalURL(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  void *AttachmentFile;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  AttachmentFile = (void *)_CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile)
    v4 = _CalAttachmentFileCopyLocalURL(AttachmentFile);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void *_CalAttachmentCopyLocalURL(uint64_t a1)
{
  void *result;

  result = (void *)_CalAttachmentGetAttachmentFile(a1);
  if (result)
    return (void *)_CalAttachmentFileCopyLocalURL(result);
  return result;
}

id _CalAttachmentCopyLocalURLForArchivedData(uint64_t a1)
{
  id result;

  result = (id)_CalAttachmentGetAttachmentFile(a1);
  if (result)
    return _CalAttachmentFileCopyLocalURLForArchivedData(result);
  return result;
}

id CalAttachmentCopyLocalURLForArchivedData(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  void *AttachmentFile;
  id v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  AttachmentFile = (void *)_CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile)
    v4 = _CalAttachmentFileCopyLocalURLForArchivedData(AttachmentFile);
  else
    v4 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetFileSize(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentCopyFileSize(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetFormat(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentCopyFormat(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetXProperties(uint64_t a1, CFDataRef Data)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (Data)
    Data = CFPropertyListCreateData(0, Data, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (Data)
    CFRelease(Data);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFPropertyListRef CalAttachmentCopyXProperties(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFData *Property;
  CFPropertyListRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFData *)CPRecordGetProperty();
  if (Property)
    v5 = CFPropertyListCreateWithData(0, Property, 0, 0, 0);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

CFTypeRef CalAttachmentCopyOwner(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Owner;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalAttachmentGetOwner(a1);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalAttachmentSetURLForPendingFileCopy(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalAttachmentSetURLForPendingFileCopy(a1, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

void _CalAttachmentSetURLForPendingFileCopy(uint64_t a1, uint64_t a2)
{
  const os_unfair_lock *Context;
  id v4;

  if (a2)
  {
    v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3910]), "initWithURL:readonly:", a2, 1);
    if (!a1)
      goto LABEL_9;
  }
  else
  {
    v4 = 0;
    if (!a1)
      goto LABEL_9;
  }
  if (CDBLockingAssertionsEnabled)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
LABEL_9:
  CPRecordSetProperty();

}

uint64_t CalAttachmentCopyURLForPendingFileCopy(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  uint64_t v3;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  v3 = _CalAttachmentCopyURLForPendingFileCopy(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v3;
}

uint64_t _CalAttachmentCopyURLForPendingFileCopy(uint64_t a1)
{
  const os_unfair_lock *Context;
  void *v2;
  uint64_t v3;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v2 = (void *)CPRecordCopyProperty();
  objc_msgSend(v2, "url");
  v3 = objc_claimAutoreleasedReturnValue();

  return v3;
}

void CalAttachmentSetDownloadStart(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

CFTypeRef CalAttachmentCopyDownloadStart(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const void *Property;
  CFTypeRef v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const void *)CPRecordGetProperty();
  if (Property)
    v5 = CFRetain(Property);
  else
    v5 = 0;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalAttachmentSetDownloadTries(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalAttachmentGetDownloadTries(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t IntegerProperty;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  IntegerProperty = CPRecordGetIntegerProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IntegerProperty;
}

void CalAttachmentSetAutoArchived(uint64_t a1)
{
  CalAttachmentSetFlag(a1);
}

BOOL CalAttachmentIsAutoArchived(uint64_t a1)
{
  return CalAttachmentGetFlag(a1, 2);
}

uint64_t CalLoadAttachmentPropertyFromFileProperty(uint64_t a1, int a2)
{
  uint64_t result;
  const os_unfair_lock *Context;
  const os_unfair_lock *v6;

  result = (uint64_t)_CalAttachmentGetAttachmentFile(a1);
  if (result)
  {
    if ((CalAttachmentToCalAttachmentFilePropertyMap(a2) & 0x80000000) != 0)
      CalLoadAttachmentPropertyFromFileProperty_cold_1(a2);
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
    result = CPRecordGetProperty();
    if (result)
    {
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        v6 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v6)
          os_unfair_lock_assert_owner(v6 + 20);
      }
      return CPRecordInitializeProperty();
    }
  }
  return result;
}

uint64_t CalAttachmentToCalAttachmentFilePropertyMap(int a1)
{
  if ((a1 - 3) > 0xC)
    return 0xFFFFFFFFLL;
  else
    return dword_1A5DBB224[a1 - 3];
}

void _CalAttachmentLoadLocalURLWrapper(uint64_t a1)
{
  void *AttachmentFile;
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  const os_unfair_lock *Context;
  id v9;

  AttachmentFile = (void *)_CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile)
  {
    v3 = _CalAttachmentFileCopyLocalURL(AttachmentFile);
    if (v3)
    {
      v9 = (id)v3;
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "path");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v4, "fileExistsAtPath:", v5);

      if (v6)
      {

        v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3910]), "initWithURL:readonly:", v9, 1);
        if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
        CPRecordInitializeProperty();
      }
      else
      {
        v7 = v9;
        v9 = v4;
      }

    }
  }
}

void _CalAttachmentLoadLocalURLForArchivedDataWrapper(uint64_t a1)
{
  void *AttachmentFile;
  id v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  const os_unfair_lock *Context;
  id v9;

  AttachmentFile = (void *)_CalAttachmentGetAttachmentFile(a1);
  if (AttachmentFile)
  {
    v3 = _CalAttachmentFileCopyLocalURLForArchivedData(AttachmentFile);
    if (v3)
    {
      v9 = v3;
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "path");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v4, "fileExistsAtPath:", v5);

      if (v6)
      {

        v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3910]), "initWithURL:readonly:", v9, 1);
        if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
        CPRecordInitializeProperty();
      }
      else
      {
        v7 = v9;
        v9 = v4;
      }

    }
  }
}

uint64_t _CalAttachmentLoadStoreId(uint64_t a1)
{
  uint64_t result;
  const os_unfair_lock *Context;

  result = (uint64_t)_CalAttachmentGetOwner(a1);
  if (result)
  {
    result = _CalCalendarItemGetStoreId(result);
    if ((int)result >= 1)
    {
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      return CPRecordInitializeProperty();
    }
  }
  return result;
}

uint64_t _CalAttachmentLoadCalendarId(uint64_t a1)
{
  uint64_t result;
  const os_unfair_lock *Context;

  result = (uint64_t)_CalAttachmentGetOwner(a1);
  if (result)
  {
    result = _CalCalendarItemGetCalendarId(result);
    if ((result & 0x80000000) == 0)
    {
      if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
      return CPRecordInitializeProperty();
    }
  }
  return result;
}

const void *CalDatabaseCreateTask(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *v3;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v3 = _CalCalendarItemCreate((uint64_t)a1, 3);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t _CalTaskPrepareForRemove(uint64_t a1)
{
  uint64_t result;
  uint64_t DatabaseForRecord;

  result = _CalCalendarItemHasAlarms(a1);
  if ((_DWORD)result)
  {
    DatabaseForRecord = CalGetDatabaseForRecord();
    return _CalDatabaseSetChangeFlags(DatabaseForRecord, 8);
  }
  return result;
}

void CalRemoveTask(const void *a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;

  v2 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  if (v2)
  {
    v3 = v2;
    v4 = v2 + 20;
    os_unfair_lock_lock(v2 + 20);
    _CalTaskMarkAsNeedingScheduledTaskCacheUpdate(a1);
    _CalDatabaseRemoveEntity((uint64_t)v3, a1);
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(v4);
    os_unfair_lock_unlock(v4);
    CFRelease(v3);
  }
}

uint64_t _CalRemoveTask(uint64_t a1, const void *a2)
{
  _CalTaskMarkAsNeedingScheduledTaskCacheUpdate(a2);
  return _CalDatabaseRemoveEntity(a1, a2);
}

uint64_t CalDatabaseCopyTasksInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  if (!a2)
    return CalDatabaseCopyCalendarItems(a1, 3);
  CalStoreGetUID();
  return CalDatabaseCopyCalendarItemsWithStoreID(a1, 3);
}

uint64_t CalDatabaseGetCountOfTasksInStore(const void *a1, uint64_t a2)
{
  return CalDatabaseGetCountOfCalendarItemsInStore(a1, 3, a2);
}

CFTypeRef CalDatabaseCopyTaskWithExternalIDInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithExternalIDInCalendarOrStore(a1, 3, a2, 0, a3);
}

CFTypeRef CalDatabaseCopyTaskWithExternalIDInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3)
{
  return CalDatabaseCopyCalendarItemWithExternalIDInCalendarOrStore(a1, 3, a2, a3, 0);
}

os_unfair_lock_s *CalDatabaseCopyTaskWithSummaryAndDueDateInStore(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, double a4)
{
  return CalDatabaseCopyTaskWithSummaryAndDueDateInCalendarOrStore(a1, a2, 0, a3, a4);
}

os_unfair_lock_s *CalDatabaseCopyTaskWithSummaryAndDueDateInCalendarOrStore(os_unfair_lock_s *cf, const __CFString *a2, uint64_t a3, uint64_t a4, double a5)
{
  os_unfair_lock_s *v9;
  os_unfair_lock_s *result;
  char *CStringFromCFString;
  __CFString *SelectPrefix;
  __CFString *v13;
  double v14;
  const __CFString *v15;
  uint64_t RecordStore;
  uint64_t v17;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v20;
  uint64_t v21;
  uint64_t v22;
  sqlite3_stmt *v23;
  const __CFArray *v24;
  int v25;
  sqlite3_stmt *v26;
  int ID;
  const os_unfair_lock *v28;
  const void *ValueAtIndex;

  v9 = cf;
  if (a3 || a4)
  {
    result = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
    v9 = result;
    if (!result)
      return result;
  }
  else
  {
    if (!cf)
      return 0;
    CFRetain(cf);
  }
  CStringFromCFString = (char *)CalCreateCStringFromCFString(a2);
  SelectPrefix = (__CFString *)CPRecordStoreCreateSelectPrefix();
  if (SelectPrefix)
  {
    v13 = SelectPrefix;
    CFStringAppend(SelectPrefix, CFSTR(" WHERE summary = ?"));
    v14 = vabdd_f64(a5, *MEMORY[0x1E0D0C490]);
    if (v14 >= 2.22044605e-16)
      CFStringAppend(v13, CFSTR(" AND due_date = ?"));
    if (a3)
    {
      v15 = CFSTR(" AND calendar_id = ?");
    }
    else
    {
      if (!a4)
      {
LABEL_15:
        os_unfair_lock_lock(v9 + 20);
        RecordStore = _CalDatabaseGetRecordStore((uint64_t)v9);
        v17 = RecordStore;
        if (CDBLockingAssertionsEnabled)
        {
          if (RecordStore)
          {
            Context = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (Context)
              os_unfair_lock_assert_owner(Context + 20);
          }
        }
        Database = CPRecordStoreGetDatabase();
        if (CDBLockingAssertionsEnabled)
        {
          if (Database)
          {
            if (*(_QWORD *)(Database + 104))
            {
              v20 = (const os_unfair_lock *)CPRecordStoreGetContext();
              if (v20)
                os_unfair_lock_assert_owner(v20 + 20);
            }
          }
        }
        v21 = CPSqliteDatabaseStatementForReading();
        if (!v21)
        {
          v24 = 0;
          goto LABEL_42;
        }
        v22 = v21;
        v23 = *(sqlite3_stmt **)(v21 + 8);
        if (CStringFromCFString)
          sqlite3_bind_text(v23, 1, CStringFromCFString, -1, 0);
        else
          sqlite3_bind_null(v23, 1);
        if (v14 >= 2.22044605e-16)
        {
          sqlite3_bind_int(*(sqlite3_stmt **)(v22 + 8), 2, (int)a5);
          v25 = 3;
          if (!a3)
            goto LABEL_35;
        }
        else
        {
          v25 = 2;
          if (!a3)
          {
LABEL_35:
            if (!a4)
              goto LABEL_37;
          }
        }
        v26 = *(sqlite3_stmt **)(v22 + 8);
        ID = CPRecordGetID();
        sqlite3_bind_int(v26, v25, ID);
LABEL_37:
        if (CDBLockingAssertionsEnabled)
        {
          if (v17)
          {
            v28 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v28)
              os_unfair_lock_assert_owner(v28 + 20);
          }
        }
        v24 = (const __CFArray *)CPRecordStoreProcessStatementWithPropertyIndices();
LABEL_42:
        if (CDBLockingAssertionsEnabled)
          os_unfair_lock_assert_owner(v9 + 20);
        os_unfair_lock_unlock(v9 + 20);
        CFRelease(v13);
        if (v24)
        {
          if (CFArrayGetCount(v24) < 1)
          {
            ValueAtIndex = 0;
          }
          else
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v24, 0);
            CFRetain(ValueAtIndex);
          }
          CFRelease(v24);
          if (!CStringFromCFString)
            goto LABEL_52;
        }
        else
        {
          ValueAtIndex = 0;
          if (!CStringFromCFString)
            goto LABEL_52;
        }
        free(CStringFromCFString);
LABEL_52:
        CFRelease(v9);
        return (os_unfair_lock_s *)ValueAtIndex;
      }
      v15 = CFSTR(" AND calendar_id IN (SELECT ROWID FROM Calendar WHERE store_id = ?)");
    }
    CFStringAppend(v13, v15);
    goto LABEL_15;
  }
  if (CStringFromCFString)
    free(CStringFromCFString);
  CFRelease(v9);
  return 0;
}

os_unfair_lock_s *CalDatabaseCopyTaskWithSummaryAndDueDateInCalendar(os_unfair_lock_s *a1, const __CFString *a2, uint64_t a3, double a4)
{
  return CalDatabaseCopyTaskWithSummaryAndDueDateInCalendarOrStore(a1, a2, a3, 0, a4);
}

uint64_t _CalTaskGetDueDate(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

void CalTaskSetDueDate(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  double v5;
  CFDateRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    v5 = MEMORY[0x1A85B424C](a2);
    v6 = CFDateCreate(0, floor(v5));
    _CalCalendarItemSetRecordProperty(a1, 37, v6);
    if (v6)
      CFRelease(v6);
  }
  else
  {
    _CalCalendarItemSetRecordProperty(a1, 37, 0);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalTaskCopyDueDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalTaskSetDueDateTimeZone(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  const __CFString *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
    v5 = (const __CFString *)MEMORY[0x1A85B45C4](a2);
  else
    v5 = CFSTR("_float");
  _CalRecordSetPropertyIfDifferent(a1, 38, v5);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalTaskCopyDueDateTimeZone(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const __CFString *Property;
  uint64_t v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const __CFString *)CPRecordGetProperty();
  v5 = (uint64_t)Property;
  if (Property)
  {
    if (CFStringCompare(Property, CFSTR("_float"), 0))
      v5 = CalTimeZoneCopyCFTimeZone();
    else
      v5 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

void CalTaskSetDueDateAllDay(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRecordSetPropertyIfDifferent(a1, 39, (const __CFString *)a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

BOOL _CalTaskIsDueDateAllDay(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty() != 0;
}

BOOL CalTaskIsDueDateAllDay(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  _BOOL8 IsDueDateAllDay;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  IsDueDateAllDay = _CalTaskIsDueDateAllDay(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return IsDueDateAllDay;
}

void CalTaskSetCompletionDate(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  double v5;
  CFDateRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    v5 = MEMORY[0x1A85B424C](a2);
    v6 = CFDateCreate(0, floor(v5));
    _CalCalendarItemSetRecordProperty(a1, 40, v6);
    if (v6)
      CFRelease(v6);
  }
  else
  {
    _CalCalendarItemSetRecordProperty(a1, 40, 0);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalTaskGetCompletionDate(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

const void *CalTaskCopyCompletionDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const void *CompletionDate;
  const void *v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  CompletionDate = (const void *)_CalTaskGetCompletionDate(a1);
  v4 = CompletionDate;
  if (CompletionDate)
    CFRetain(CompletionDate);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

void CalTaskSetFirstAlertDate(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *RecordLock;
  double v5;
  CFDateRef v6;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a2)
  {
    v5 = MEMORY[0x1A85B424C](a2);
    v6 = CFDateCreate(0, floor(v5));
    _CalCalendarItemSetRecordProperty(a1, 61, v6);
    if (v6)
      CFRelease(v6);
  }
  else
  {
    _CalCalendarItemSetRecordProperty(a1, 61, 0);
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

const void *CalTaskCopyFirstAlertDate(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  const void *Property;
  const void *v5;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = (const void *)CPRecordGetProperty();
  v5 = Property;
  if (Property)
    CFRetain(Property);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v5;
}

CFURLRef CalTaskCopyURI(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  const __CFString *v7;
  const __CFString *v8;
  CFURLRef v9;

  v1 = (void *)CalCalendarItemCopyUUID(a1);
  if (v1)
  {
    v2 = (void *)MEMORY[0x1E0CB3780];
    objc_msgSend(MEMORY[0x1E0CB3500], "URLPathAllowedCharacterSet");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "bitmapRepresentation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "characterSetWithBitmapRepresentation:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "removeCharactersInString:", CFSTR("/?&:$+,;=@"));
    objc_msgSend(v1, "stringByAddingPercentEncodingWithAllowedCharacters:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = CFStringCreateWithFormat(0, 0, CFSTR("x-apple-reminder://%@"), v6);
    if (v7)
    {
      v8 = v7;
      v9 = CFURLCreateWithString(0, v7, 0);
      CFRelease(v8);
    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t CalTaskGetDisplayOrder(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t Property;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return Property;
}

void CalTaskSetDisplayOrder(uint64_t a1, int a2)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v6;
  const void *v7;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (!a2)
  {
    if (a1)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    v6 = CPRecordCopyProperty();
    if (v6)
    {
      v7 = (const void *)v6;
      a2 = (int)MEMORY[0x1A85B424C]();
      CFRelease(v7);
    }
    else
    {
      a2 = 0;
    }
  }
  _CalCalendarItemSetRecordProperty(a1, 44, a2);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalDatabaseCopyTasks(os_unfair_lock_s *a1, void *a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, __int128 a10, const __CFString *a11, int a12)
{
  uint64_t v13;

  v13 = 0;
  CalDatabaseCopyTasksOrGetCount(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, &v13, 0);
  return v13;
}

void CalDatabaseCopyTasksOrGetCount(os_unfair_lock_s *a1, void *a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, __int128 a10, const __CFString *a11, int a12, char a13, uint64_t *a14, _DWORD *a15)
{
  os_unfair_lock_s *v19;
  __CFString *MutableCopy;
  __CFString *v21;
  uint64_t RecordStore;
  const os_unfair_lock *Context;
  uint64_t Database;
  uint64_t v25;
  const os_unfair_lock *v26;
  const os_unfair_lock *v27;
  const void *v28;
  int v29;
  int v30;
  const void *v31;
  CFAbsoluteTime v32;
  CFAbsoluteTime v33;
  const __CFString *v34;
  void *v35;
  const void *v36;
  const os_unfair_lock *v37;
  uint64_t v38;
  uint64_t **v39;
  const char *CStringFromCFString;
  int v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  CFDateRef v45;
  CFDateRef v46;
  const __CFString *v47;
  char *v48;
  char *v49;
  char *v50;
  const __CFString *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  sqlite3_stmt *v55;
  double v56;
  sqlite3_stmt *v57;
  double v58;
  sqlite3_stmt *v59;
  double v60;
  sqlite3_stmt *v61;
  double v62;
  int v63;
  sqlite3_stmt *v64;
  double v65;
  char v66;
  sqlite3_stmt *v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  const os_unfair_lock *v71;
  uint64_t v72;
  const os_unfair_lock *v73;
  const os_unfair_lock *v74;
  CFTypeRef cf;
  int v76;
  CFDateRef v77;
  CFDateRef v78;
  __int128 v81;

  *(_QWORD *)&v81 = a6;
  *((_QWORD *)&v81 + 1) = a7;
  if (a14)
    *a14 = 0;
  if (a15)
    *a15 = 0;
  v19 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  if (a13)
  {
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SELECT count(CalendarItem.rowid) from CalendarItem "));
  }
  else if (__PAIR128__((unint64_t)a11, *((unint64_t *)&a10 + 1)) == 0)
  {
    MutableCopy = (__CFString *)CPRecordStoreCreateSelectPrefixFromRecordDescriptor();
  }
  else
  {
    MutableCopy = (__CFString *)CPRecordStoreCreateJoinableSelectPrefixFromRecordDescriptor();
  }
  v21 = MutableCopy;
  if (!MutableCopy)
  {
    if (CDBLockingAssertionsEnabled)
      os_unfair_lock_assert_owner(a1 + 20);
    os_unfair_lock_unlock(a1 + 20);
    return;
  }
  if (__PAIR128__((unint64_t)a11, *((unint64_t *)&a10 + 1)) != 0)
    CFStringAppend(MutableCopy, CFSTR(" JOIN Calendar ON CalendarItem.calendar_id = Calendar.ROWID"));
  CFStringAppendFormat(v21, 0, CFSTR(" WHERE entity_type = %d"), 3);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
  {
    if (RecordStore)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_30;
  v25 = Database;
  if (a10 != 0)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v26 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v26)
          os_unfair_lock_assert_owner(v26 + 20);
      }
    }
    if (CPSqliteDatabaseRegisterMatchesSearchStringByWordFunction())
      goto LABEL_30;
  }
  if (a11)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(v25 + 104))
      {
        v27 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v27)
          os_unfair_lock_assert_owner(v27 + 20);
      }
    }
    if (CPSqliteDatabaseRegisterMatchesSearchStringFunction())
    {
LABEL_30:
      if (CDBLockingAssertionsEnabled)
        os_unfair_lock_assert_owner(a1 + 20);
      os_unfair_lock_unlock(a1 + 20);
      v28 = v21;
      goto LABEL_33;
    }
  }
  if ((_QWORD)a10)
    CFStringAppend(v21, CFSTR(" AND STRING_MATCHES_WORD(?, IFNULL(summary, ''))"));
  if (a11)
    CFStringAppend(v21, CFSTR(" AND (((calendar.title != ? AND calendar.title != ?) AND STRING_MATCHES_PREFIX(?, IFNULL(summary, '') || ' ' || IFNULL(calendar.title, ''))) OR ((calendar.title = ? OR calendar.title = ?) AND STRING_MATCHES_PREFIX(?, IFNULL(summary, '') || ' ' || ?)))"));
  if (*((_QWORD *)&a10 + 1))
    CFStringAppend(v21, CFSTR(" AND (((calendar.title != ? AND calendar.title != ?) AND STRING_MATCHES_WORD(?, IFNULL(calendar.title, ''))) OR ((calendar.title = ? OR calendar.title = ?) AND STRING_MATCHES_WORD(?, ?)))"));
  v76 = a8;
  if (a9)
  {
    if (v81 != 0)
    {
      CFStringAppend(v21, CFSTR(" AND ("));
      if ((_QWORD)v81)
      {
        CFStringAppend(v21, CFSTR("(completion_date >= ?)"));
        v29 = a3;
        v30 = a4;
        if (!*((_QWORD *)&v81 + 1))
          goto LABEL_55;
        CFStringAppend(v21, CFSTR(" AND "));
      }
      else
      {
        v29 = a3;
        v30 = a4;
        if (!*((_QWORD *)&v81 + 1))
          goto LABEL_55;
      }
      CFStringAppend(v21, CFSTR("(completion_date < ?)"));
LABEL_55:
      CFStringAppend(v21, CFSTR(")"));
      v77 = 0;
      v78 = 0;
      if (!v30)
        goto LABEL_75;
      goto LABEL_71;
    }
    goto LABEL_52;
  }
  v31 = (const void *)CalCopySystemTimeZone();
  if (v81 == 0)
  {
    CFRelease(v31);
LABEL_52:
    v77 = 0;
    v78 = 0;
    goto LABEL_70;
  }
  cf = v31;
  CFStringAppend(v21, CFSTR(" AND (("));
  if ((_QWORD)v81)
  {
    MEMORY[0x1A85B424C](v81);
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    v78 = CFDateCreate(0, v32);
    CFStringAppend(v21, CFSTR("(((due_tz IS NOT NULL AND due_tz != ?) AND due_date >= ?) OR ((due_tz IS NULL OR due_tz = ?) AND due_date >= ?))"));
  }
  else
  {
    v78 = 0;
  }
  if (*((_QWORD *)&v81 + 1))
  {
    MEMORY[0x1A85B424C]();
    CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone();
    CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone();
    v77 = CFDateCreate(0, v33);
    if ((_QWORD)v81)
      CFStringAppend(v21, CFSTR(" AND "));
    CFStringAppend(v21, CFSTR("(((due_tz IS NOT NULL AND due_tz != ?) AND due_date < ?) OR ((due_tz IS NULL OR due_tz = ?) AND due_date < ?))"));
  }
  else
  {
    v77 = 0;
  }
  CFRelease(cf);
  if (a8)
  {
    CFStringAppend(v21, CFSTR(") OR ("));
    if ((_QWORD)v81)
    {
      CFStringAppend(v21, CFSTR("(completion_date >= ?)"));
      if (*((_QWORD *)&v81 + 1))
      {
        CFStringAppend(v21, CFSTR(" AND "));
LABEL_68:
        CFStringAppend(v21, CFSTR("(completion_date < ?)"));
      }
    }
    else if (*((_QWORD *)&v81 + 1))
    {
      goto LABEL_68;
    }
  }
  CFStringAppend(v21, CFSTR("))"));
LABEL_70:
  v29 = a3;
  if (!a4)
    goto LABEL_75;
LABEL_71:
  if (a5)
    v34 = CFSTR(" AND completion_date IS NOT NULL");
  else
    v34 = CFSTR(" AND completion_date IS NULL");
  CFStringAppend(v21, v34);
LABEL_75:
  v35 = _CalFilterCopyCalendarIDClauseForQuery(a2, (uint64_t)CFSTR("calendar_id"));
  if (v35)
  {
    v36 = v35;
    CFStringAppendFormat(v21, 0, CFSTR(" AND %@"), v35);
    CFRelease(v36);
  }
  if ((v29 - 1) <= 3)
    CFStringAppend(v21, *((CFStringRef *)&off_1E4F91448 + v29 - 1));
  if (a12)
    CFStringAppend(v21, CFSTR(" LIMIT ?"));
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(v25 + 104))
    {
      v37 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v37)
        os_unfair_lock_assert_owner(v37 + 20);
    }
  }
  v38 = CPSqliteDatabaseStatementForReading();
  if (!v38)
  {
    v42 = 0;
    v43 = 0;
    v45 = v78;
    v44 = a15;
    v46 = v77;
    goto LABEL_134;
  }
  v39 = (uint64_t **)v38;
  if ((_QWORD)a10)
  {
    CStringFromCFString = (const char *)CalCreateCStringFromCFString((const __CFString *)a10);
    v41 = 1;
    sqlite3_bind_text((sqlite3_stmt *)v39[1], 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    if (!a11)
      goto LABEL_95;
LABEL_91:
    v47 = (const __CFString *)CalCalendarDefaultReminderListTitleLocalized();
    v48 = (char *)CalCreateCStringFromCFString(v47);
    v49 = (char *)CalCreateCStringFromCFString(a11);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 1, "DEFAULT_TASK_CALENDAR_NAME", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 | 2, "Reminders", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 3, v49, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 | 4, "DEFAULT_TASK_CALENDAR_NAME", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 5, "Reminders", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 | 6, v49, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    v41 += 7;
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41, v48, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    if (v48)
      free(v48);
    if (v49)
      free(v49);
    goto LABEL_95;
  }
  v41 = 0;
  if (a11)
    goto LABEL_91;
LABEL_95:
  if (*((_QWORD *)&a10 + 1))
  {
    v50 = (char *)CalCreateCStringFromCFString(*((const __CFString **)&a10 + 1));
    v51 = (const __CFString *)CalCalendarDefaultReminderListTitleLocalized();
    v52 = (char *)CalCreateCStringFromCFString(v51);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 1, "DEFAULT_TASK_CALENDAR_NAME", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 2, "Reminders", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 3, v50, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 4, "DEFAULT_TASK_CALENDAR_NAME", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 5, "Reminders", -1, 0);
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 6, v50, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    v41 += 7;
    sqlite3_bind_text((sqlite3_stmt *)v39[1], v41, v52, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    if (v52)
      free(v52);
    v53 = *((_QWORD *)&v81 + 1);
    v54 = v81;
    if (v50)
      free(v50);
  }
  else
  {
    v53 = *((_QWORD *)&v81 + 1);
    v54 = v81;
  }
  if ((a9 & 1) == 0)
  {
    if (v54)
    {
      sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 1, "_float", -1, 0);
      v55 = (sqlite3_stmt *)v39[1];
      v56 = MEMORY[0x1A85B424C](v54);
      sqlite3_bind_double(v55, v41 + 2, v56);
      sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 3, "_float", -1, 0);
      v57 = (sqlite3_stmt *)v39[1];
      v41 += 4;
      v58 = MEMORY[0x1A85B424C](v78);
      sqlite3_bind_double(v57, v41, v58);
    }
    if (v53)
    {
      sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 1, "_float", -1, 0);
      v59 = (sqlite3_stmt *)v39[1];
      v60 = MEMORY[0x1A85B424C](v53);
      sqlite3_bind_double(v59, v41 + 2, v60);
      sqlite3_bind_text((sqlite3_stmt *)v39[1], v41 + 3, "_float", -1, 0);
      v61 = (sqlite3_stmt *)v39[1];
      v41 += 4;
      v62 = MEMORY[0x1A85B424C](v77);
      sqlite3_bind_double(v61, v41, v62);
    }
  }
  v63 = v76 | a9;
  if (v54 && v63)
  {
    v64 = (sqlite3_stmt *)v39[1];
    ++v41;
    v65 = MEMORY[0x1A85B424C](v54);
    sqlite3_bind_double(v64, v41, v65);
  }
  v46 = v77;
  v45 = v78;
  v66 = v63 ^ 1;
  if (!v53)
    v66 = 1;
  if ((v66 & 1) == 0)
  {
    v67 = (sqlite3_stmt *)v39[1];
    ++v41;
    v68 = MEMORY[0x1A85B424C](v53);
    sqlite3_bind_double(v67, v41, v68);
  }
  v44 = a15;
  if (a12)
    sqlite3_bind_int((sqlite3_stmt *)v39[1], v41 + 1, a12);
  v69 = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (a13)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*v39)
      {
        v70 = **v39;
        if (v70)
        {
          if (*(_QWORD *)(v70 + 104))
          {
            v71 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v71)
              os_unfair_lock_assert_owner(v71 + 20);
          }
        }
      }
    }
    v42 = CPSqliteStatementIntegerResult();
    if (CDBLockingAssertionsEnabled)
    {
      if (*v39)
      {
        v72 = **v39;
        if (v72)
        {
          if (*(_QWORD *)(v72 + 104))
          {
            v73 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v73)
              os_unfair_lock_assert_owner(v73 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
    v43 = 0;
  }
  else
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (v69)
      {
        v74 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v74)
          os_unfair_lock_assert_owner(v74 + 20);
      }
    }
    v43 = CPRecordStoreProcessStatement();
    v42 = 0;
  }
LABEL_134:
  if (v45)
    CFRelease(v45);
  if (v46)
    CFRelease(v46);
  CFRelease(v21);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v19);
  os_unfair_lock_unlock(v19);
  if (a13)
  {
    if (v44)
      *v44 = v42;
  }
  else if (a14)
  {
    *a14 = v43;
  }
  else if (v43)
  {
    v28 = (const void *)v43;
LABEL_33:
    CFRelease(v28);
  }
}

uint64_t CalDatabaseCopyCountOfTasks(os_unfair_lock_s *a1, void *a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9, __int128 a10, const __CFString *a11)
{
  unsigned int v12;

  v12 = 0;
  CalDatabaseCopyTasksOrGetCount(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, 1, 0, &v12);
  return v12;
}

BOOL _CalDatabaseCalendarHasTasks(uint64_t a1, uint64_t a2)
{
  return _CalDatabaseCalendarHasCalendarItemsWithEntityType(a1, a2, 3);
}

uint64_t _CalDatabaseCopyScheduledTasks(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreCopyAllInstancesOfClassWhere();
}

uint64_t _CalDatabaseCopyScheduledTasksInDateRange(uint64_t a1)
{
  uint64_t RecordStore;
  BOOL v2;
  const os_unfair_lock *Context;

  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v2 = RecordStore == 0;
  else
    v2 = 1;
  if (!v2)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock();
}

uint64_t CalDatabaseCopyTaskChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return CalDatabaseCopyCalendarItemChangesInStore(a1, 3, a2, 0, a3);
}

uint64_t CalDatabaseCopyTaskChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  return CalDatabaseCopyCalendarItemChangesInCalendar(a1, 3, a2, 0, a3);
}

uint64_t CalDatabaseRemoveTaskChangesInStoreToIndex(uint64_t a1, uint64_t a2, int a3)
{
  return CalDatabaseRemoveCalendarItemChangesInStoreToIndex(a1, 3, a2, a3);
}

uint64_t CalDatabaseRemoveTaskChangesInCalendarToIndex(uint64_t a1, uint64_t a2, int a3)
{
  return CalDatabaseRemoveCalendarItemChangesInCalendarToIndex(a1, 3, a2, a3);
}

CFMutableDictionaryRef CalDatabaseCopyTaskMovesInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  CFMutableDictionaryRef v3;

  v3 = 0;
  CalDatabaseCopyCalendarItemChangesInStore(a1, 3, a2, 1, &v3);
  return v3;
}

CFMutableDictionaryRef CalDatabaseCopyTaskMovesInCalendar(os_unfair_lock_s *a1, uint64_t a2)
{
  CFMutableDictionaryRef v3;

  v3 = 0;
  CalDatabaseCopyCalendarItemChangesInCalendar(a1, 3, a2, 1, &v3);
  return v3;
}

uint64_t _CalContactPrepareForSave(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = CPRecordGetProperty();
  if (result)
    return CalRelationOwnerWillSave(result);
  return result;
}

uint64_t _CalContactPropertyWillChange(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  const os_unfair_lock *Context;
  const os_unfair_lock *v5;

  if (!a2 && a3 == -1)
  {
    v3 = result;
    if (result)
    {
      if (CDBLockingAssertionsEnabled)
      {
        if (CPRecordGetStore())
        {
          Context = (const os_unfair_lock *)CPRecordStoreGetContext();
          if (Context)
            os_unfair_lock_assert_owner(Context + 20);
        }
      }
    }
    CPRecordGetProperty();
    if (v3 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      v5 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v5)
        os_unfair_lock_assert_owner(v5 + 20);
    }
    return CPRecordGetProperty();
  }
  return result;
}

void CalContactInitializeTables(uint64_t a1, _QWORD *a2)
{
  CPRecordStoreCreateTablesForClass();
  CalMigrationCreateIndexes(a2, (const char **)&kCalContactClass, (const char **)&kCalContactIndexes, (const char **)&kCalContactChangesIndexes);
}

void CalContactMigrateTables(uint64_t a1, _QWORD *a2, signed int a3)
{
  if (a3 > 10000)
  {
    if (a3 <= 0x4651)
      CalMigrateTableFull(a2, (const char **)&kCalContactClass, 0, (const char **)&kCalContactUpgradeInfo, 0, (const char **)&kCalContactIndexes, (const char **)&kCalContactChangesIndexes, 0, a3);
  }
  else
  {
    CPRecordStoreCreateTablesForClass();
    CalMigrationCreateIndexes(a2, (const char **)&kCalContactClass, (const char **)&kCalContactIndexes, (const char **)&kCalContactChangesIndexes);
  }
}

uint64_t CalContactGetPropertyIDWithPropertyName()
{
  return 0xFFFFFFFFLL;
}

CFTypeRef _CalContactHasValidParent(uint64_t a1)
{
  const os_unfair_lock *Context;
  uint64_t Property;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  Property = CPRecordGetProperty();
  result = CalRelationGetRelatedObject(Property);
  if (result)
    return (CFTypeRef)_CalRecordStillExists();
  return result;
}

void _CalContactCleanUpDanglingEntities(uint64_t a1, _QWORD *a2)
{
  CalPerformSQLWithConnectionAndBindBlock(a2, 1, (uint64_t)CFSTR("DELETE FROM Contact WHERE owner_id NOT IN (SELECT ROWID FROM CalendarItem);"),
    0);
}

CFTypeRef _CalContactGetOwner(uint64_t a1)
{
  const os_unfair_lock *Context;
  CFTypeRef result;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  result = (CFTypeRef)CPRecordGetProperty();
  if (result)
    return CalRelationGetRelatedObject((uint64_t)result);
  return result;
}

CFTypeRef CalContactCopyOwner(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  CFTypeRef Owner;
  CFTypeRef v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  Owner = _CalContactGetOwner(a1);
  v4 = Owner;
  if (Owner)
    CFRetain(Owner);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

uint64_t _CalContactGetRecordID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  return CPRecordGetProperty();
}

void CalContactSetContactIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t CalContactCopyContactIdentifier(uint64_t a1)
{
  os_unfair_lock_s *RecordLock;
  const os_unfair_lock *Context;
  uint64_t v4;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        Context = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (Context)
          os_unfair_lock_assert_owner(Context + 20);
      }
    }
  }
  v4 = CPRecordCopyProperty();
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
  return v4;
}

const void *_CalDatabaseCreateContact(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  BOOL v4;
  const os_unfair_lock *Context;
  const void *TemporaryRecordIDForEntity;
  BOOL v7;
  const os_unfair_lock *v8;

  v2 = CPRecordCreate();
  v3 = (const void *)v2;
  if (CDBLockingAssertionsEnabled)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  CPRecordInitializeProperty();
  TemporaryRecordIDForEntity = (const void *)_CalDatbaseCreateTemporaryRecordIDForEntity(a1, 21);
  if (CDBLockingAssertionsEnabled)
    v7 = v3 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (CPRecordGetStore())
    {
      v8 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v8)
        os_unfair_lock_assert_owner(v8 + 20);
    }
  }
  CPRecordInitializeProperty();
  CFRelease(TemporaryRecordIDForEntity);
  _CalDatabaseAddEntity(a1, v3);
  return v3;
}

const void *CalDatabaseCreateContact(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  const void *Contact;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  Contact = _CalDatabaseCreateContact((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return Contact;
}

const void *_CalContactCopy(uint64_t a1, uint64_t a2)
{
  const void *Contact;
  const void *v4;
  BOOL v5;
  const os_unfair_lock *Context;
  const os_unfair_lock *v7;
  BOOL v8;
  const os_unfair_lock *v9;
  const os_unfair_lock *v10;
  BOOL v11;
  const os_unfair_lock *v12;
  const os_unfair_lock *v13;

  Contact = _CalDatabaseCreateContact(a1);
  v4 = Contact;
  if (CDBLockingAssertionsEnabled)
    v5 = Contact == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v7 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v7)
          os_unfair_lock_assert_owner(v7 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    if (CPRecordGetStore())
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  if (CDBLockingAssertionsEnabled)
    v11 = v4 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    if (CPRecordGetStore())
    {
      v12 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v12)
        os_unfair_lock_assert_owner(v12 + 20);
    }
  }
  if (a2)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (CPRecordGetStore())
      {
        v13 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v13)
          os_unfair_lock_assert_owner(v13 + 20);
      }
    }
  }
  CPRecordGetProperty();
  CPRecordSetProperty();
  return v4;
}

_QWORD *_CalRemoveContact(void *a1)
{
  CFTypeRef Owner;
  uint64_t DatabaseForRecord;

  Owner = _CalContactGetOwner((uint64_t)a1);
  if (Owner)
    return _CalCalendarItemRemoveContact((uint64_t)Owner, a1);
  DatabaseForRecord = CalGetDatabaseForRecord();
  return (_QWORD *)_CalDatabaseRemoveEntity(DatabaseForRecord, a1);
}

void CalRemoveContact(void *a1)
{
  os_unfair_lock_s *RecordLock;

  RecordLock = (os_unfair_lock_s *)CalGetRecordLock();
  os_unfair_lock_lock(RecordLock);
  _CalRemoveContact(a1);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(RecordLock);
  os_unfair_lock_unlock(RecordLock);
}

uint64_t _CalInvalidateContactsWithOwnerID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreInvalidateCachedInstancesOfClassWithBlock();
}

uint64_t CalDatabaseCopyContactChangesInStore(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalContactCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  v7 = _CalDatabaseCopyContactChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  if (v5)
    CFRelease(v5);
  return v7;
}

CFStringRef _CalContactCreateChangeHistoryWhereClauseForStore(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t ID;
  CFStringRef v6;

  v6 = 0;
  if (a2)
  {
    v3 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("store_id = %d AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@') AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@') AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v3, v3, 21, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t _CalDatabaseCopyContactChangesWithWhereClauseNoLock(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  uint64_t RecordStore;
  BOOL v8;
  const os_unfair_lock *Context;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      *a3 = Mutable;
      goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  RecordStore = _CalDatabaseGetRecordStore(a1);
  if (CDBLockingAssertionsEnabled)
    v8 = RecordStore == 0;
  else
    v8 = 1;
  if (!v8)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  return CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties();
}

BOOL CalDatabaseRemoveContactChangesInStoreToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  int v7;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v6 = _CalContactCreateChangeHistoryWhereClauseForStore((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___CalDatabaseRemoveContactChangesInStoreToIndex_block_invoke;
  v9[3] = &unk_1E4F84BF0;
  v9[4] = &v11;
  v9[5] = v5;
  v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6)
    CFRelease(v6);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  return v7 != 0;
}

void sub_1A5D95340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseCopyContactChangesInCalendar(os_unfair_lock_s *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;

  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalContactCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v7 = _CalDatabaseCopyContactChangesWithWhereClauseNoLock((uint64_t)v5, (uint64_t)v6, a3);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  if (v5)
    CFRelease(v5);
  return v7;
}

CFStringRef _CalContactCreateChangeHistoryWhereClauseForCalendar(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3;
  uint64_t ID;
  CFStringRef v6;

  v6 = 0;
  if (a2)
  {
    v3 = _CalDatabaseCopyClientIdentifier(a1);
    ID = CPRecordGetID();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("calendar_id = %d AND sequence_number > (SELECT latest_consumed_sequence_number from ClientCursor WHERE client_identifier = '%@') AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = '%@') AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE consumed_entity_class = %d AND client_identifier = '%@')"), ID, v3, v3, 21, v3);
    CFRelease(v3);
  }
  _CalDatabaseCreateOrUpdateChangeHistoryWhereClauseForDatabase(a1, (id *)&v6);
  return v6;
}

uint64_t CalDatabaseRemoveContactChangesInCalendarToIndex(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v5;
  CFStringRef v6;
  uint64_t v7;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (a2)
  {
    v5 = (os_unfair_lock_s *)CalCopyDatabaseForRecord();
  }
  else
  {
    v5 = a1;
    CFRetain(a1);
  }
  os_unfair_lock_lock(v5 + 20);
  v6 = _CalContactCreateChangeHistoryWhereClauseForCalendar((uint64_t)v5, a2);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __CalDatabaseRemoveContactChangesInCalendarToIndex_block_invoke;
  v9[3] = &unk_1E4F84BF0;
  v9[4] = &v11;
  v9[5] = v5;
  v10 = a3;
  v9[6] = v6;
  _CalDatabaseLockForWriteTransaction((uint64_t)v5, (uint64_t)v9);
  if (v6)
    CFRelease(v6);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5 + 20);
  os_unfair_lock_unlock(v5 + 20);
  CFRelease(v5);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1A5D955B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CalDatabaseRemoveContactChangesWithIndices(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __CalDatabaseRemoveContactChangesWithIndices_block_invoke;
  v7[3] = &unk_1E4F84C18;
  v7[4] = &v8;
  v7[5] = a1;
  v7[6] = a2;
  _CalDatabaseLockForWriteTransaction((uint64_t)a1, (uint64_t)v7);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A5D95714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _CalContactGetWithUID(uint64_t a1)
{
  const os_unfair_lock *Context;

  if (a1)
  {
    if (CDBLockingAssertionsEnabled)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
  }
  return CPRecordStoreGetInstanceOfClassWithUID();
}

const void *CalDatabaseCopyContactWithUID(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t RecordStore;
  const void *v4;
  const void *v5;

  v2 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  v4 = (const void *)_CalContactGetWithUID(RecordStore);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v2);
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t CalDatabaseCopyOfAllContactsInStore(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t RecordStore;
  BOOL v6;
  int v7;
  const os_unfair_lock *Context;
  uint64_t v9;
  const os_unfair_lock *v10;
  uint64_t v11;

  v4 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a1);
  if (CDBLockingAssertionsEnabled)
    v6 = RecordStore == 0;
  else
    v6 = 1;
  v7 = !v6;
  if (a2)
  {
    if (v7)
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    v9 = CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter();
  }
  else
  {
    if (v7)
    {
      v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v10)
        os_unfair_lock_assert_owner(v10 + 20);
    }
    v9 = CPRecordStoreCopyAllInstancesOfClass();
  }
  v11 = v9;
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v11;
}

uint64_t CalContactCountOfContactsWithIdentifier(const __CFString *a1, os_unfair_lock_s *a2)
{
  os_unfair_lock_s *v4;
  uint64_t RecordStore;
  BOOL v6;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v9;
  uint64_t v10;
  uint64_t v11;
  const char *CStringFromCFString;
  uint64_t v13;
  uint64_t v15;
  const os_unfair_lock *v16;

  v4 = a2 + 20;
  os_unfair_lock_lock(a2 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a2);
  if (CDBLockingAssertionsEnabled)
    v6 = RecordStore == 0;
  else
    v6 = 1;
  if (!v6)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (!Database)
    goto LABEL_16;
  if (CDBLockingAssertionsEnabled)
  {
    if (*(_QWORD *)(Database + 104))
    {
      v9 = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (v9)
        os_unfair_lock_assert_owner(v9 + 20);
    }
  }
  v10 = CPSqliteDatabaseStatementForReading();
  if (v10 && (v11 = v10, *(_QWORD *)(v10 + 8)))
  {
    CStringFromCFString = (const char *)CalCreateCStringFromCFString(a1);
    sqlite3_bind_text(*(sqlite3_stmt **)(v11 + 8), 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
    if (sqlite3_step(*(sqlite3_stmt **)(v11 + 8)) == 1)
      return 0;
    v13 = sqlite3_column_int(*(sqlite3_stmt **)(v11 + 8), 0);
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)v11)
      {
        v15 = **(_QWORD **)v11;
        if (v15)
        {
          if (*(_QWORD *)(v15 + 104))
          {
            v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
            if (v16)
              os_unfair_lock_assert_owner(v16 + 20);
          }
        }
      }
    }
    CPSqliteStatementReset();
  }
  else
  {
LABEL_16:
    v13 = 0;
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v4);
  os_unfair_lock_unlock(v4);
  return v13;
}

__CFArray *CalContactCopyObjectIDsOfContactsWithIdentifier(const __CFString *a1, os_unfair_lock_s *a2)
{
  __CFArray *Mutable;
  os_unfair_lock_s *v5;
  uint64_t RecordStore;
  BOOL v7;
  const os_unfair_lock *Context;
  uint64_t Database;
  const os_unfair_lock *v10;
  uint64_t v11;
  uint64_t v12;
  const char *CStringFromCFString;
  const void *v14;
  uint64_t v15;
  const os_unfair_lock *v16;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  v5 = a2 + 20;
  os_unfair_lock_lock(a2 + 20);
  RecordStore = _CalDatabaseGetRecordStore((uint64_t)a2);
  if (CDBLockingAssertionsEnabled)
    v7 = RecordStore == 0;
  else
    v7 = 1;
  if (!v7)
  {
    Context = (const os_unfair_lock *)CPRecordStoreGetContext();
    if (Context)
      os_unfair_lock_assert_owner(Context + 20);
  }
  Database = CPRecordStoreGetDatabase();
  if (Database)
  {
    if (CDBLockingAssertionsEnabled)
    {
      if (*(_QWORD *)(Database + 104))
      {
        v10 = (const os_unfair_lock *)CPRecordStoreGetContext();
        if (v10)
          os_unfair_lock_assert_owner(v10 + 20);
      }
    }
    v11 = CPSqliteDatabaseStatementForReading();
    if (v11)
    {
      v12 = v11;
      if (*(_QWORD *)(v11 + 8))
      {
        CStringFromCFString = (const char *)CalCreateCStringFromCFString(a1);
        sqlite3_bind_text(*(sqlite3_stmt **)(v12 + 8), 1, CStringFromCFString, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
        while (sqlite3_step(*(sqlite3_stmt **)(v12 + 8)) == 100)
        {
          v14 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", sqlite3_column_int(*(sqlite3_stmt **)(v12 + 8), 0));
          CFArrayAppendValue(Mutable, v14);
        }
        if (CDBLockingAssertionsEnabled)
        {
          if (*(_QWORD *)v12)
          {
            v15 = **(_QWORD **)v12;
            if (v15)
            {
              if (*(_QWORD *)(v15 + 104))
              {
                v16 = (const os_unfair_lock *)CPRecordStoreGetContext();
                if (v16)
                  os_unfair_lock_assert_owner(v16 + 20);
              }
            }
          }
        }
        CPSqliteStatementReset();
      }
    }
  }
  if (CDBLockingAssertionsEnabled)
    os_unfair_lock_assert_owner(v5);
  os_unfair_lock_unlock(v5);
  return Mutable;
}

CFTypeRef _CalContactLoadStoreId(uint64_t a1)
{
  CFTypeRef result;
  const os_unfair_lock *Context;

  result = _CalContactGetOwner(a1);
  if (result)
  {
    _CalCalendarItemGetStoreId((uint64_t)result);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

CFTypeRef _CalContactLoadCalendarId(uint64_t a1)
{
  CFTypeRef result;
  const os_unfair_lock *Context;

  result = _CalContactGetOwner(a1);
  if (result)
  {
    _CalCalendarItemGetCalendarId((uint64_t)result);
    if (a1 && CDBLockingAssertionsEnabled && CPRecordGetStore())
    {
      Context = (const os_unfair_lock *)CPRecordStoreGetContext();
      if (Context)
        os_unfair_lock_assert_owner(Context + 20);
    }
    return (CFTypeRef)CPRecordInitializeProperty();
  }
  return result;
}

id DateComponentsFromAbsoluteTime(void *a1, double a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianGMTCalendar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  if (v3)
  {
    objc_msgSend(v6, "setTimeZone:", v3);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setTimeZone:", v7);

  }
  objc_msgSend(v6, "components:fromDate:", 252, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

double CalDateFromICSDateInTimezone(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  char isKindOfClass;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  void *v13;
  NSObject *v14;
  id v15;
  int v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
LABEL_6:
    v12 = *MEMORY[0x1E0D0C490];
    goto LABEL_7;
  }
  objc_msgSend(v3, "value");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0)
  {
    v13 = (void *)CDBiCalendarConversionHandle;
    if (os_log_type_enabled((os_log_t)CDBiCalendarConversionHandle, OS_LOG_TYPE_DEBUG))
    {
      v14 = v13;
      v17 = 138412290;
      v18 = (id)objc_opt_class();
      v15 = v18;
      _os_log_impl(&dword_1A5CCB000, v14, OS_LOG_TYPE_DEBUG, "The given ICSDate (%@) is not of any known type", (uint8_t *)&v17, 0xCu);

    }
    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianGMTCalendar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v7, "copy");

  objc_msgSend(v3, "value");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  NSDateFromICSValueInTimeZone();
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "timeIntervalSinceReferenceDate");
  v12 = v11;

LABEL_7:
  return v12;
}

CFDateRef CalCreateCFDateFromICSDateAsUTC(CFDateRef result)
{
  double v1;

  if (result)
  {
    v1 = CalDateFromICSDateAsUTC(result);
    return CFDateCreate(0, v1);
  }
  return result;
}

double CalDateFromICSDateAsUTC(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  double v4;

  v1 = (void *)MEMORY[0x1E0C99E80];
  v2 = a1;
  objc_msgSend(v1, "timeZoneWithName:", CFSTR("UTC"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = CalDateFromICSDateInTimezone(v2, v3);

  return v4;
}

double CalDateFromICSDate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;

  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1E0C99E80];
  objc_msgSend(v3, "tzid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeZoneWithName:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    objc_msgSend(v4, "systemTimeZoneForDate:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  v8 = CalDateFromICSDateInTimezone(v3, v7);

  return v8;
}

uint64_t CalCreateDateTimeFromICSDate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;

  v3 = a1;
  v4 = a2;
  v17 = 0;
  if (v3)
  {
    objc_msgSend(v3, "tzid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "hasFloatingTimeZone"))
    {
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_4:
      v7 = CFSTR("_float");
LABEL_12:
      CalDateTimeSetTimeZone();
      CFRelease(v7);
      objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianGMTCalendar");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)objc_msgSend(v11, "copy");

      objc_msgSend(v3, "value");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      NSDateFromICSValueInTimeZone();
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v14, "timeIntervalSinceReferenceDate");
      v17 = v15;

      goto LABEL_13;
    }
    if (!v5)
    {
      v7 = CFSTR("UTC");
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_12;
    }
    objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", v5);
    v8 = objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      v6 = (void *)v8;
    }
    else
    {
      objc_msgSend(v4, "systemTimeZoneForDate:", v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v6)
      {
        objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
        v6 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_4;
      }
      v5 = v9;
    }
    v10 = (void *)objc_msgSend(v5, "copy", 0);
    v7 = (const __CFString *)CFRetain(v10);

    goto LABEL_12;
  }
LABEL_13:

  return v17;
}

id ICSFloatingDateTimeFromCFDateInTimezone(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = MEMORY[0x1A85B424C](a1);
  DateComponentsFromAbsoluteTime(v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB800]), "initWithYear:month:day:hour:minute:second:", objc_msgSend(v5, "year"), objc_msgSend(v5, "month"), objc_msgSend(v5, "day"), objc_msgSend(v5, "hour"), objc_msgSend(v5, "minute"), objc_msgSend(v5, "second"));
  return v6;
}

id ICSFloatingDateOnlyFromCFDate(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = MEMORY[0x1A85B424C](a1);
  DateComponentsFromAbsoluteTime(v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB800]), "initWithYear:month:day:", objc_msgSend(v5, "year"), objc_msgSend(v5, "month"), objc_msgSend(v5, "day"));
  return v6;
}

id ICSDateFromCFDateInTimezone(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  void *v5;
  void *v6;

  v3 = a2;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = MEMORY[0x1A85B424C](a1);
  DateComponentsFromAbsoluteTime(v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB800]), "initWithYear:month:day:hour:minute:second:timeZone:", objc_msgSend(v5, "year"), objc_msgSend(v5, "month"), objc_msgSend(v5, "day"), objc_msgSend(v5, "hour"), objc_msgSend(v5, "minute"), objc_msgSend(v5, "second"), v3);

  return v6;
}

id ICSDateFromCFDateGuessingAtFloatingDateOnly(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v3 = a2;
  if (v3)
  {
    v4 = MEMORY[0x1A85B424C](a1);
    DateComponentsFromAbsoluteTime(v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "hour") || objc_msgSend(v5, "minute") || objc_msgSend(v5, "second"))
    {
      ICSDateFromCFDateInTimezone(a1, v3);
      v6 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      ICSFloatingDateOnlyFromCFDate(a1, 0);
      v6 = objc_claimAutoreleasedReturnValue();
    }
    v7 = (void *)v6;

  }
  else
  {
    ICSFloatingDateTimeFromCFDateInTimezone(a1, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v7;
}

id ICSDateFromCFDate(uint64_t a1, void *a2)
{
  if (a2)
    ICSDateFromCFDateInTimezone(a1, a2);
  else
    ICSFloatingDateTimeFromCFDateInTimezone(a1, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

id ICSDateTimeForCalDate(double a1)
{
  void *v1;
  void *v2;

  if (*MEMORY[0x1E0D0C490] == a1)
  {
    v2 = 0;
  }
  else
  {
    DateComponentsFromAbsoluteTime(0, a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB808]), "initWithYear:month:day:hour:minute:second:", objc_msgSend(v1, "year"), objc_msgSend(v1, "month"), objc_msgSend(v1, "day"), objc_msgSend(v1, "hour"), objc_msgSend(v1, "minute"), objc_msgSend(v1, "second"));

  }
  return v2;
}

void sub_1A5D97E7C(_Unwind_Exception *exception_object)
{
  int v1;

  if (v1)
    objc_end_catch();
  _Unwind_Resume(exception_object);
}

void __getCalOutOfProcessMigratorClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCalOutOfProcessMigratorClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("CalDatabase.m"), 59, CFSTR("Unable to find class %s"), "CalOutOfProcessMigrator");

  __break(1u);
}

void CalendarMigrationLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CalendarMigrationLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("CalDatabase.m"), 56, CFSTR("%s"), *a1);

  __break(1u);
}

void _CalDatabaseValidateSchemaDeleteDBAndAbortOnFailure_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0C230]), "initWithType:subtype:context:", CFSTR("Database"), CFSTR("Integrity"), CFSTR("Schema"));
  objc_msgSend(v0, "setIgnoreRateLimiting:", 1);
  objc_msgSend(v0, "reportSynchronous");
  abort();
}

void __getCalDefaultReminderKitProviderClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCalDefaultReminderKitProviderClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("CalDatabase.m"), 68, CFSTR("Unable to find class %s"), "CalDefaultReminderKitProvider");

  __break(1u);
}

void __getCalDefaultReminderMigrationDefaultsProviderClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCalDefaultReminderMigrationDefaultsProviderClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("CalDatabase.m"), 69, CFSTR("Unable to find class %s"), "CalDefaultReminderMigrationDefaultsProvider");

  __break(1u);
}

void __getCalCalendarDatabaseReminderMigratorClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCalCalendarDatabaseReminderMigratorClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("CalDatabase.m"), 67, CFSTR("Unable to find class %s"), "CalCalendarDatabaseReminderMigrator");

  __break(1u);
}

void CalDatabaseCopyCalendarItemsWithCalendarFilter_cold_1()
{
  __assert_rtn("CalDatabaseCopyCalendarItemsWithCalendarFilter", "CalCalendarItem.m", 3191, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void CalDatabaseCopyCalendarItemsWithStoreID_cold_1()
{
  __assert_rtn("CalDatabaseCopyCalendarItemsWithStoreID", "CalCalendarItem.m", 3296, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void CalToManyRelationHasObjects_cold_1()
{
  __assert_rtn("CalToManyRelationHasObjects", "CalToManyRelation.m", 280, "relation->_loadedObjects != nil");
}

void _EnsureLoaded_cold_1()
{
  __assert_rtn("_EnsureLoaded", "CalToManyRelation.m", 216, "inverseRelationInfo->realIDColumn != -1");
}

void _CalCalendarLoad_cold_1()
{
  __assert_rtn("_CalCalendarLoad", "CalCalendar.m", 4576, "propDesc->extra != 0");
}

void _CalCreateParticipant_cold_1()
{
  __assert_rtn("_CalCreateParticipant", "CalAttendee.m", 481, "entityType == CalAttendeeEntity || entityType == CalOrganizerEntity");
}

void CalParticipantGetUID_cold_1()
{
  __assert_rtn("CalParticipantGetUID", "CalAttendee.m", 586, "CalEntityIsOfType(participant, CalParticipantEntity)");
}

void CalOrganizerSetOwner_cold_1()
{
  __assert_rtn("CalOrganizerSetOwner", "CalAttendee.m", 2543, "CalEntityIsOfType(organizer, CalOrganizerEntity)");
}

void _CalRecordIDLoad_cold_1(char a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if ((a1 & 1) != 0)
  {
    v3 = 134217984;
    v4 = a2;
    _os_log_impl(&dword_1A5CCB000, log, OS_LOG_TYPE_ERROR, "Record with pointer address of [%p] was not marked as being deleted.", (uint8_t *)&v3, 0xCu);
  }
  __assert_rtn("_CalRecordIDLoad", "CalRecordID.m", 117, "false");
}

void _CalEventPrepareForSave_cold_1()
{
  __assert_rtn("_CalEventPrepareForSave", "CalEvent.m", 2801, "_CalEntityIsOfType(record, CalTaskEntity)");
}

void _CalEventPrepareForSave_cold_2()
{
  __assert_rtn("_CalEventPrepareForSave", "CalEvent.m", 2796, "_CalEntityIsOfType(record, CalEventEntity)");
}

void _CalEventPrepareForSave_cold_3()
{
  __assert_rtn("_CalEventPrepareForSave", "CalEvent.m", 2793, "_CalEntityIsOfType(record, CalEventEntity)");
}

void _CalCalendarItemCreate_cold_1()
{
  __assert_rtn("_CalCalendarItemCreate", "CalEvent.m", 1508, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void _CalEventMarkEventAsNeedingOccurrenceCacheUpdate_cold_1()
{
  __assert_rtn("_CalEventMarkEventAsNeedingOccurrenceCacheUpdate", "CalEvent.m", 2237, "_CalEntityIsOfType(event, CalEventEntity)");
}

void _CalCalendarItemCreateCopyPreservingUniqueIdentifier_cold_1()
{
  __assert_rtn("_CalCalendarItemCreateCopyPreservingUniqueIdentifier", "CalEvent.m", 1640, "original != NULL");
}

void CalCalendarItemCreateCopy_cold_1()
{
  __assert_rtn("CalCalendarItemCreateCopy", "CalEvent.m", 1667, "original != NULL");
}

void _CalEventMarkEventAsNeedingAlarmCacheUpdate_cold_1()
{
  __assert_rtn("_CalEventMarkEventAsNeedingAlarmCacheUpdate", "CalEvent.m", 2242, "_CalEntityIsOfType(event, CalEventEntity)");
}

void _CalTaskMarkAsNeedingScheduledTaskCacheUpdate_cold_1()
{
  __assert_rtn("_CalTaskMarkAsNeedingScheduledTaskCacheUpdate", "CalEvent.m", 2247, "_CalEntityIsOfType(task, CalTaskEntity)");
}

void CalCalendarItemCopyUUID_cold_1()
{
  __assert_rtn("CalCalendarItemCopyUUID", "CalEvent.m", 3359, "item != NULL");
}

void CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_1()
{
  __assert_rtn("CalDatabaseRemoveCalendarItemChangesInStoreToIndex", "CalEvent.m", 8294, "store != NULL");
}

void CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_2()
{
  __assert_rtn("CalDatabaseRemoveCalendarItemChangesInStoreToIndex", "CalEvent.m", 8293, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void _CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_1()
{
  __assert_rtn("_CalDatabaseRemoveCalendarItemChangesInStoreToIndex", "CalEvent.m", 8274, "store != NULL");
}

void _CalDatabaseRemoveCalendarItemChangesInStoreToIndex_cold_2()
{
  __assert_rtn("_CalDatabaseRemoveCalendarItemChangesInStoreToIndex", "CalEvent.m", 8273, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void CalDatabaseCopyCalendarItemChangesInCalendar_cold_1()
{
  __assert_rtn("CalDatabaseCopyCalendarItemChangesInCalendar", "CalEvent.m", 8440, "calendar != NULL");
}

void CalExceptionDateSetDate_cold_1()
{
  __assert_rtn("CalExceptionDateSetDate", "CalExceptionDate.m", 350, "date != NULL");
}

void CalDatabaseMigrateCalendarsWithEntityType_cold_1()
{
  __assert_rtn("CalDatabaseMigrateCalendarsWithEntityType", "CalStore.m", 3007, "entityType == CalEventEntity || entityType == CalTaskEntity");
}

void _CalCreateNotification_cold_1()
{
  __assert_rtn("_CalCreateNotification", "CalNotification.m", 294, "entityType == CalInviteReplyNotificationEntity || entityType == CalResourceChangeNotificationEntity || entityType == CalNotificationEntity || entityType == CalSuggestionNotificationEntity");
}

void CalNotificationGetUID_cold_1()
{
  __assert_rtn("CalNotificationGetUID", "CalNotification.m", 476, "CalEntityIsOfType(notification, CalNotificationEntity)");
}

void CalDatabaseCopyNotificationsWithCalendar_cold_1()
{
  __assert_rtn("CalDatabaseCopyNotificationsWithCalendar", "CalNotification.m", 628, "entityType == CalNotificationEntity || entityType == CalInviteReplyNotificationEntity || entityType == CalResourceChangeNotificationEntity || entityType == CalSuggestionNotificationEntity || entityType == CalUndefinedEntity");
}

void CalShareeGetUID_cold_1()
{
  __assert_rtn("CalShareeGetUID", "CalSharee.m", 375, "CalEntityIsOfType(sharee, CalShareeEntity)");
}

void CalLoadAttachmentPropertyFromFileProperty_cold_1(int a1)
{
  NSObject *v2;
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = CDBLogHandle;
  if (os_log_type_enabled((os_log_t)CDBLogHandle, OS_LOG_TYPE_ERROR))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl(&dword_1A5CCB000, v2, OS_LOG_TYPE_ERROR, "Unknown property id %i in CalLoadAttachmentPropertyFromFileProperty", (uint8_t *)v3, 8u);
  }
  __assert_rtn("CalLoadAttachmentPropertyFromFileProperty", "CalAttachment.m", 139, "0");
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

SInt32 CFAbsoluteTimeGetDayOfYear(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  return MEMORY[0x1E0C97C70](tz, at);
}

CFGregorianUnits *__cdecl CFAbsoluteTimeGetDifferenceAsGregorianUnits(CFGregorianUnits *__return_ptr retstr, CFAbsoluteTime at1, CFAbsoluteTime at2, CFTimeZoneRef tz, CFOptionFlags unitFlags)
{
  return (CFGregorianUnits *)MEMORY[0x1E0C97C78](retstr, tz, unitFlags, at1, at2);
}

CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  uint64_t v2;
  double v3;
  CFGregorianDate result;

  v2 = MEMORY[0x1E0C97C88](tz, at);
  result.second = v3;
  result.year = v2;
  result.month = BYTE4(v2);
  result.day = BYTE5(v2);
  result.hour = BYTE6(v2);
  result.minute = HIBYTE(v2);
  return result;
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CA8](allocator, context);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context)
{
  return MEMORY[0x1E0C97D08](theArray, range.location, range.length, value, comparator, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
  MEMORY[0x1E0C97DC8](theArray, range.location, range.length, newValues, newCount);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x1E0C97DE0](theArray, range.location, range.length, comparator, context);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return MEMORY[0x1E0C98440](theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C984D8](theDate);
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1E0C98670](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

Boolean CFGregorianDateIsValid(CFGregorianDate gdate, CFOptionFlags unitFlags)
{
  return MEMORY[0x1E0C98750](*(_QWORD *)&gdate.year, *(_QWORD *)&gdate.second, unitFlags);
}

uint64_t CFLog()
{
  return MEMORY[0x1E0C98808]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
  MEMORY[0x1E0C988F0](center, observer);
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1E0C98908]();
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1E0C98910](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98D78](theSet, applier, context);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

Boolean CFSetGetValueIfPresent(CFSetRef theSet, const void *candidate, const void **value)
{
  return MEMORY[0x1E0C98DC8](theSet, candidate, value);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
  MEMORY[0x1E0C98DD0](theSet, values);
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
  MEMORY[0x1E0C98DD8](theSet);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
  MEMORY[0x1E0C98EE8](theString, chars, numChars);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FE0](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
  MEMORY[0x1E0C99038](theString, range.location, range.length);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C990E0](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFTimeZoneRef CFTimeZoneCreateWithName(CFAllocatorRef allocator, CFStringRef name, Boolean tryAbbrev)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99288](allocator, name, tryAbbrev);
}

CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99290](allocator, ti);
}

CFStringRef CFTimeZoneGetName(CFTimeZoneRef tz)
{
  return (CFStringRef)MEMORY[0x1E0C99298](tz);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992D8](anURL, pathStyle);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C992F8](url);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99318](anURL);
}

CFStringRef CFURLCopyPathExtension(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C99320](url);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99380](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateCopyAppendingPathExtension(CFAllocatorRef allocator, CFURLRef url, CFStringRef extension)
{
  return (CFURLRef)MEMORY[0x1E0C99388](allocator, url, extension);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99448](allocator, URLString, baseURL);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C994A0](anURL);
}

Boolean CFURLStartAccessingSecurityScopedResource(CFURLRef url)
{
  return MEMORY[0x1E0C994F0](url);
}

void CFURLStopAccessingSecurityScopedResource(CFURLRef url)
{
  MEMORY[0x1E0C994F8](url);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

uint64_t CPFileBuildDirectoriesToPath()
{
  return MEMORY[0x1E0CFA280]();
}

uint64_t CPRecordCopyChangedProperties()
{
  return MEMORY[0x1E0CFA3B8]();
}

uint64_t CPRecordCopyProperty()
{
  return MEMORY[0x1E0CFA3C0]();
}

uint64_t CPRecordCreate()
{
  return MEMORY[0x1E0CFA3C8]();
}

uint64_t CPRecordCreateWithRecordID()
{
  return MEMORY[0x1E0CFA3D8]();
}

uint64_t CPRecordGetCachedProperty()
{
  return MEMORY[0x1E0CFA3E0]();
}

uint64_t CPRecordGetClass()
{
  return MEMORY[0x1E0CFA3E8]();
}

uint64_t CPRecordGetID()
{
  return MEMORY[0x1E0CFA3F0]();
}

uint64_t CPRecordGetIntegerProperty()
{
  return MEMORY[0x1E0CFA3F8]();
}

uint64_t CPRecordGetOriginalProperty()
{
  return MEMORY[0x1E0CFA400]();
}

uint64_t CPRecordGetProperty()
{
  return MEMORY[0x1E0CFA408]();
}

uint64_t CPRecordGetPropertyDescriptor()
{
  return MEMORY[0x1E0CFA410]();
}

uint64_t CPRecordGetStore()
{
  return MEMORY[0x1E0CFA418]();
}

uint64_t CPRecordGetTypeID()
{
  return MEMORY[0x1E0CFA420]();
}

uint64_t CPRecordInitializeProperty()
{
  return MEMORY[0x1E0CFA430]();
}

uint64_t CPRecordInvalidateRecord()
{
  return MEMORY[0x1E0CFA438]();
}

uint64_t CPRecordIsDeleted()
{
  return MEMORY[0x1E0CFA440]();
}

uint64_t CPRecordIsPendingAdd()
{
  return MEMORY[0x1E0CFA448]();
}

uint64_t CPRecordIsPendingChange()
{
  return MEMORY[0x1E0CFA450]();
}

uint64_t CPRecordMarkChanged()
{
  return MEMORY[0x1E0CFA458]();
}

uint64_t CPRecordMarkPropertyChanged()
{
  return MEMORY[0x1E0CFA460]();
}

uint64_t CPRecordProcessAddImmediate()
{
  return MEMORY[0x1E0CFA468]();
}

uint64_t CPRecordProcessChangesImmediate()
{
  return MEMORY[0x1E0CFA470]();
}

uint64_t CPRecordSetProperty()
{
  return MEMORY[0x1E0CFA478]();
}

uint64_t CPRecordStoreAddRecord()
{
  return MEMORY[0x1E0CFA490]();
}

uint64_t CPRecordStoreCopyAddedRecords()
{
  return MEMORY[0x1E0CFA498]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClass()
{
  return MEMORY[0x1E0CFA4A0]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWhere()
{
  return MEMORY[0x1E0CFA4A8]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWhereWithBindBlock()
{
  return MEMORY[0x1E0CFA4B0]();
}

uint64_t CPRecordStoreCopyAllInstancesOfClassWithAliasAndFilter()
{
  return MEMORY[0x1E0CFA4B8]();
}

uint64_t CPRecordStoreCopyChangedRecords()
{
  return MEMORY[0x1E0CFA4C0]();
}

uint64_t CPRecordStoreCopyDeletedRecordIDsOfClass()
{
  return MEMORY[0x1E0CFA4C8]();
}

uint64_t CPRecordStoreCopyDeletedRecords()
{
  return MEMORY[0x1E0CFA4D0]();
}

uint64_t CPRecordStoreCopyInstancesOfClassWithUIDs()
{
  return MEMORY[0x1E0CFA4D8]();
}

uint64_t CPRecordStoreCopyValueForProperty()
{
  return MEMORY[0x1E0CFA4E0]();
}

uint64_t CPRecordStoreCountCachedRecords()
{
  return MEMORY[0x1E0CFA4E8]();
}

uint64_t CPRecordStoreCreateColumnListWithAliasAndExtraColumns()
{
  return MEMORY[0x1E0CFA4F0]();
}

uint64_t CPRecordStoreCreateJoinableSelectPrefixFromRecordDescriptor()
{
  return MEMORY[0x1E0CFA4F8]();
}

uint64_t CPRecordStoreCreateSelectPrefix()
{
  return MEMORY[0x1E0CFA508]();
}

uint64_t CPRecordStoreCreateSelectPrefixFromRecordDescriptor()
{
  return MEMORY[0x1E0CFA510]();
}

uint64_t CPRecordStoreCreateSelectStatement()
{
  return MEMORY[0x1E0CFA518]();
}

uint64_t CPRecordStoreCreateTablesForClass()
{
  return MEMORY[0x1E0CFA520]();
}

uint64_t CPRecordStoreCreateWithPathAndOptions()
{
  return MEMORY[0x1E0CFA530]();
}

uint64_t CPRecordStoreDeleteChangesForClassToIndexWhere()
{
  return MEMORY[0x1E0CFA538]();
}

uint64_t CPRecordStoreDeleteChangesForClassToIndexWhereWithBindBlock()
{
  return MEMORY[0x1E0CFA540]();
}

uint64_t CPRecordStoreDeleteChangesForClassToSequenceNumberWhere()
{
  return MEMORY[0x1E0CFA548]();
}

uint64_t CPRecordStoreDeleteChangesForClassWithIndices()
{
  return MEMORY[0x1E0CFA550]();
}

uint64_t CPRecordStoreDestroy()
{
  return MEMORY[0x1E0CFA558]();
}

uint64_t CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithBindBlockAndProperties()
{
  return MEMORY[0x1E0CFA568]();
}

uint64_t CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithBindBlockAndPropertiesA()
{
  return MEMORY[0x1E0CFA570]();
}

uint64_t CPRecordStoreGetChangesAndChangeIndicesAndSequenceNumbersForClassWithProperties()
{
  return MEMORY[0x1E0CFA580]();
}

uint64_t CPRecordStoreGetChangesAndChangeIndicesForClassWithProperties()
{
  return MEMORY[0x1E0CFA588]();
}

uint64_t CPRecordStoreGetChangesForClass()
{
  return MEMORY[0x1E0CFA590]();
}

uint64_t CPRecordStoreGetChangesForClassWithBindBlockAndProperties()
{
  return MEMORY[0x1E0CFA598]();
}

uint64_t CPRecordStoreGetContext()
{
  return MEMORY[0x1E0CFA5A0]();
}

uint64_t CPRecordStoreGetCountOfInstancesOfClassWithFilterAndBindBlock()
{
  return MEMORY[0x1E0CFA5B0]();
}

uint64_t CPRecordStoreGetDatabase()
{
  return MEMORY[0x1E0CFA5B8]();
}

uint64_t CPRecordStoreGetInstanceOfClassWithUID()
{
  return MEMORY[0x1E0CFA5C0]();
}

uint64_t CPRecordStoreGetLastSequenceNumber()
{
  return MEMORY[0x1E0CFA5C8]();
}

uint64_t CPRecordStoreGetRowidForRecordID()
{
  return MEMORY[0x1E0CFA5D8]();
}

uint64_t CPRecordStoreGetSequenceNumber()
{
  return MEMORY[0x1E0CFA5E0]();
}

uint64_t CPRecordStoreInvalidateCachedInstancesOfClass()
{
  return MEMORY[0x1E0CFA5F0]();
}

uint64_t CPRecordStoreInvalidateCachedInstancesOfClassWithBlock()
{
  return MEMORY[0x1E0CFA5F8]();
}

uint64_t CPRecordStoreInvalidateCaches()
{
  return MEMORY[0x1E0CFA600]();
}

uint64_t CPRecordStoreIsLoggingChanges()
{
  return MEMORY[0x1E0CFA608]();
}

uint64_t CPRecordStoreLogChanges()
{
  return MEMORY[0x1E0CFA610]();
}

uint64_t CPRecordStoreProcessAddedRecordsOfClassWithPolicyAndTransactionType()
{
  return MEMORY[0x1E0CFA618]();
}

uint64_t CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionType()
{
  return MEMORY[0x1E0CFA620]();
}

uint64_t CPRecordStoreProcessAddedRecordsWithPolicyAndTransactionTypeMatchingPredicate()
{
  return MEMORY[0x1E0CFA628]();
}

uint64_t CPRecordStoreProcessStatement()
{
  return MEMORY[0x1E0CFA648]();
}

uint64_t CPRecordStoreProcessStatementWithPropertyIndices()
{
  return MEMORY[0x1E0CFA650]();
}

uint64_t CPRecordStoreRemoveProperty()
{
  return MEMORY[0x1E0CFA660]();
}

uint64_t CPRecordStoreRemoveRecord()
{
  return MEMORY[0x1E0CFA668]();
}

uint64_t CPRecordStoreRevert()
{
  return MEMORY[0x1E0CFA678]();
}

uint64_t CPRecordStoreSaveWithPreAndPostCallbacksAndTransactionType()
{
  return MEMORY[0x1E0CFA688]();
}

uint64_t CPRecordStoreSetContext()
{
  return MEMORY[0x1E0CFA690]();
}

uint64_t CPRecordStoreSetSetupHandler()
{
  return MEMORY[0x1E0CFA698]();
}

uint64_t CPRecordStoreSetValueForProperty()
{
  return MEMORY[0x1E0CFA6A0]();
}

uint64_t CPRecordUnloadProperty()
{
  return MEMORY[0x1E0CFA6A8]();
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x1E0CFA6C0]();
}

uint64_t CPSqliteConnectionBegin()
{
  return MEMORY[0x1E0CFA6D8]();
}

uint64_t CPSqliteConnectionBeginTransactionType()
{
  return MEMORY[0x1E0CFA6E0]();
}

uint64_t CPSqliteConnectionCommit()
{
  return MEMORY[0x1E0CFA6E8]();
}

uint64_t CPSqliteConnectionCopyValueForProperty()
{
  return MEMORY[0x1E0CFA6F0]();
}

uint64_t CPSqliteConnectionDatabaseVersion()
{
  return MEMORY[0x1E0CFA6F8]();
}

uint64_t CPSqliteConnectionDisableProgressHandlerCallback()
{
  return MEMORY[0x1E0CFA700]();
}

uint64_t CPSqliteConnectionEnableProgressHandlerCallback()
{
  return MEMORY[0x1E0CFA708]();
}

uint64_t CPSqliteConnectionFlushStatementCache()
{
  return MEMORY[0x1E0CFA710]();
}

uint64_t CPSqliteConnectionGetActiveTransactionType()
{
  return MEMORY[0x1E0CFA718]();
}

uint64_t CPSqliteConnectionIntegerForProperty()
{
  return MEMORY[0x1E0CFA720]();
}

uint64_t CPSqliteConnectionIntegerForPropertyWithDefaultValue()
{
  return MEMORY[0x1E0CFA728]();
}

uint64_t CPSqliteConnectionPerformSQL()
{
  return MEMORY[0x1E0CFA730]();
}

uint64_t CPSqliteConnectionRemoveProperty()
{
  return MEMORY[0x1E0CFA738]();
}

uint64_t CPSqliteConnectionRollback()
{
  return MEMORY[0x1E0CFA740]();
}

uint64_t CPSqliteConnectionRowidOfLastInsert()
{
  return MEMORY[0x1E0CFA748]();
}

uint64_t CPSqliteConnectionSetIntegerForProperty()
{
  return MEMORY[0x1E0CFA750]();
}

uint64_t CPSqliteConnectionSetValueForProperty()
{
  return MEMORY[0x1E0CFA758]();
}

uint64_t CPSqliteConnectionStatementForSQL()
{
  return MEMORY[0x1E0CFA760]();
}

uint64_t CPSqliteDatabaseConnectionForReading()
{
  return MEMORY[0x1E0CFA768]();
}

uint64_t CPSqliteDatabaseConnectionForReadingWithSqlite3OpenFlags()
{
  return MEMORY[0x1E0CFA770]();
}

uint64_t CPSqliteDatabaseConnectionForWriting()
{
  return MEMORY[0x1E0CFA778]();
}

uint64_t CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlags()
{
  return MEMORY[0x1E0CFA780]();
}

uint64_t CPSqliteDatabaseConnectionForWritingWithSqlite3OpenFlagsAndReturnError()
{
  return MEMORY[0x1E0CFA788]();
}

uint64_t CPSqliteDatabaseCopyUniqueIdentifier()
{
  return MEMORY[0x1E0CFA790]();
}

uint64_t CPSqliteDatabaseGetStatementCacheLimit()
{
  return MEMORY[0x1E0CFA7A8]();
}

uint64_t CPSqliteDatabaseRegisterMatchesSearchStringByWordFunction()
{
  return MEMORY[0x1E0CFA7B8]();
}

uint64_t CPSqliteDatabaseRegisterMatchesSearchStringFunction()
{
  return MEMORY[0x1E0CFA7C0]();
}

uint64_t CPSqliteDatabaseReleaseSqliteConnection()
{
  return MEMORY[0x1E0CFA7C8]();
}

uint64_t CPSqliteDatabaseReleaseSqliteStatement()
{
  return MEMORY[0x1E0CFA7D0]();
}

uint64_t CPSqliteDatabaseSetAutoVacuumLevel()
{
  return MEMORY[0x1E0CFA7E8]();
}

uint64_t CPSqliteDatabaseSetCommitHookCallback()
{
  return MEMORY[0x1E0CFA7F0]();
}

uint64_t CPSqliteDatabaseSetCorruptionHandler()
{
  return MEMORY[0x1E0CFA800]();
}

uint64_t CPSqliteDatabaseSetDataProtectionLevel()
{
  return MEMORY[0x1E0CFA808]();
}

uint64_t CPSqliteDatabaseSetDatabaseDeletedCallback()
{
  return MEMORY[0x1E0CFA810]();
}

uint64_t CPSqliteDatabaseSetExternalConversionChecker()
{
  return MEMORY[0x1E0CFA818]();
}

uint64_t CPSqliteDatabaseSetJournalModeWAL()
{
  return MEMORY[0x1E0CFA820]();
}

uint64_t CPSqliteDatabaseSetMigrationHandlers()
{
  return MEMORY[0x1E0CFA828]();
}

uint64_t CPSqliteDatabaseSetMigrationPluginBundleID()
{
  return MEMORY[0x1E0CFA830]();
}

uint64_t CPSqliteDatabaseSetProfileCallbackWithContext()
{
  return MEMORY[0x1E0CFA838]();
}

uint64_t CPSqliteDatabaseSetShouldMigrateInProcess()
{
  return MEMORY[0x1E0CFA840]();
}

uint64_t CPSqliteDatabaseSetShouldRequestUnlock()
{
  return MEMORY[0x1E0CFA848]();
}

uint64_t CPSqliteDatabaseSetShouldYieldWhenRequested()
{
  return MEMORY[0x1E0CFA858]();
}

uint64_t CPSqliteDatabaseSetStatementCacheLimit()
{
  return MEMORY[0x1E0CFA860]();
}

uint64_t CPSqliteDatabaseSetStatementCompileErrorCallback()
{
  return MEMORY[0x1E0CFA868]();
}

uint64_t CPSqliteDatabaseSetSupportsReadOnlyConnections()
{
  return MEMORY[0x1E0CFA870]();
}

uint64_t CPSqliteDatabaseSetVersion()
{
  return MEMORY[0x1E0CFA878]();
}

uint64_t CPSqliteDatabaseStatementForReading()
{
  return MEMORY[0x1E0CFA880]();
}

uint64_t CPSqliteDatabaseStatementForWriting()
{
  return MEMORY[0x1E0CFA888]();
}

uint64_t CPSqliteDatabaseUnlockRequested()
{
  return MEMORY[0x1E0CFA890]();
}

uint64_t CPSqliteRegisterYieldNotifyBlock()
{
  return MEMORY[0x1E0CFA8A0]();
}

uint64_t CPSqliteStatementCopyStringResult()
{
  return MEMORY[0x1E0CFA8C0]();
}

uint64_t CPSqliteStatementInteger64Result()
{
  return MEMORY[0x1E0CFA8C8]();
}

uint64_t CPSqliteStatementIntegerResult()
{
  return MEMORY[0x1E0CFA8D0]();
}

uint64_t CPSqliteStatementPerform()
{
  return MEMORY[0x1E0CFA8D8]();
}

uint64_t CPSqliteStatementReset()
{
  return MEMORY[0x1E0CFA8E8]();
}

uint64_t CPSqliteStatementSendResults()
{
  return MEMORY[0x1E0CFA8F0]();
}

uint64_t CPSqliteUtilitiesGetSchemaVersionAtPath()
{
  return MEMORY[0x1E0CFA8F8]();
}

uint64_t CalAbsoluteTimeAddGregorianUnits()
{
  return MEMORY[0x1E0D0BF50]();
}

uint64_t CalAbsoluteTimeGetAbsoluteTimeInCalTimeZone()
{
  return MEMORY[0x1E0D0BF58]();
}

uint64_t CalAbsoluteTimeGetAbsoluteTimeInTimeZone()
{
  return MEMORY[0x1E0D0BF60]();
}

uint64_t CalAbsoluteTimeGetDayOfWeek()
{
  return MEMORY[0x1E0D0BF68]();
}

uint64_t CalAbsoluteTimeGetDaysInYear()
{
  return MEMORY[0x1E0D0BF70]();
}

uint64_t CalAbsoluteTimeGetGregorianDateForWeek()
{
  return MEMORY[0x1E0D0BF80]();
}

uint64_t CalAbsoluteTimeGetGregorianDateWithFallbackToDefaultTimeZone()
{
  return MEMORY[0x1E0D0BF88]();
}

uint64_t CalAbsoluteTimeGetTimeForStartOfDay()
{
  return MEMORY[0x1E0D0BF90]();
}

uint64_t CalAbsoluteTimeGetWeekOfYear()
{
  return MEMORY[0x1E0D0BF98]();
}

uint64_t CalAbsoluteTimeGetWeeksInYear()
{
  return MEMORY[0x1E0D0BFA0]();
}

uint64_t CalAnalyticsSendEvent()
{
  return MEMORY[0x1E0D0BFB8]();
}

uint64_t CalAnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D0BFC0]();
}

uint64_t CalBooleanAsString()
{
  return MEMORY[0x1E0D0BFD8]();
}

uint64_t CalCFTimeZoneCopyCalTimeZone()
{
  return MEMORY[0x1E0D0BFE0]();
}

uint64_t CalCopyCalendar()
{
  return MEMORY[0x1E0D0BFF8]();
}

uint64_t CalCopyDefaultTimeZone()
{
  return MEMORY[0x1E0D0C000]();
}

uint64_t CalCopySystemTimeZone()
{
  return MEMORY[0x1E0D0C008]();
}

uint64_t CalCopyTimeZone()
{
  return MEMORY[0x1E0D0C010]();
}

uint64_t CalDateTimeGetAbsoluteTime()
{
  return MEMORY[0x1E0D0C018]();
}

uint64_t CalDateTimeGetGregorianDate()
{
  return MEMORY[0x1E0D0C020]();
}

uint64_t CalDateTimeRelease()
{
  return MEMORY[0x1E0D0C028]();
}

uint64_t CalDateTimeSetTimeZone()
{
  return MEMORY[0x1E0D0C030]();
}

uint64_t CalEqualStrings()
{
  return MEMORY[0x1E0D0C0C8]();
}

uint64_t CalGenerateUUID()
{
  return MEMORY[0x1E0D0C0D8]();
}

uint64_t CalGregorianDateAddDays()
{
  return MEMORY[0x1E0D0C0E8]();
}

uint64_t CalGregorianDateAddUnits()
{
  return MEMORY[0x1E0D0C0F0]();
}

uint64_t CalGregorianDateGetAbsoluteTimeWithFallbackToDefaultTimeZone()
{
  return MEMORY[0x1E0D0C100]();
}

uint64_t CalGregorianDateGetDaysInMonth()
{
  return MEMORY[0x1E0D0C108]();
}

uint64_t CalGregorianDateGetGregorianDateForDay()
{
  return MEMORY[0x1E0D0C110]();
}

uint64_t CalGregorianDateGetGregorianDateForMonth()
{
  return MEMORY[0x1E0D0C118]();
}

uint64_t CalGregorianDateGetGregorianDateForYear()
{
  return MEMORY[0x1E0D0C120]();
}

uint64_t CalGregorianDateGetNull()
{
  return MEMORY[0x1E0D0C128]();
}

uint64_t CalIsReminderBridgeEnabled()
{
  return MEMORY[0x1E0D0C130]();
}

uint64_t CalMonotonicTime()
{
  return MEMORY[0x1E0D0C148]();
}

uint64_t CalSetDefaultTimeZone()
{
  return MEMORY[0x1E0D0C180]();
}

uint64_t CalTemporaryDirectory()
{
  return MEMORY[0x1E0D0C190]();
}

uint64_t CalTimeZoneCopyCFTimeZone()
{
  return MEMORY[0x1E0D0C198]();
}

uint64_t EKGetApexDefaultCalendarColors()
{
  return MEMORY[0x1E0D0C1D0]();
}

uint64_t EKGetBrightonCalendarColors()
{
  return MEMORY[0x1E0D0C1D8]();
}

uint64_t EKGetDefaultCalendarColors()
{
  return MEMORY[0x1E0D0C1E0]();
}

uint64_t EKGetFacebookCalendarColor()
{
  return MEMORY[0x1E0D0C1E8]();
}

uint64_t EKGetSnowLeopardDefaultCalendarColors()
{
  return MEMORY[0x1E0D0C1F0]();
}

uint64_t EKGetWildcatDefaultCalendarColors()
{
  return MEMORY[0x1E0D0C1F8]();
}

uint64_t EKGregorianDateGetAbsoluteTimeWithCFTimeZone()
{
  return MEMORY[0x1E0D0C200]();
}

uint64_t NSDateFromICSValueInTimeZone()
{
  return MEMORY[0x1E0D0C228]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

uint64_t UnzipArchive()
{
  return MEMORY[0x1E0D0C438]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

uint64_t _CPCreateUTF8StringFromCFString()
{
  return MEMORY[0x1E0CFA9E8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

uint64_t __strncpy_chk()
{
  return MEMORY[0x1E0C80C58]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5280](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

uint64_t ct_green_tea_logger_create_static()
{
  return MEMORY[0x1E0DDFE90]();
}

uint64_t ct_green_tea_logging_enabled()
{
  return MEMORY[0x1E0DDFEA0]();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

uint64_t doURLsEmailsPhoneNumbersMatch()
{
  return MEMORY[0x1E0D0C448]();
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return MEMORY[0x1E0DDFEA8]();
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x1E0C84170](a1);
}

int mkstemp(char *a1)
{
  return MEMORY[0x1E0C841A0](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1E0DE7FF8](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C20](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1E0C84DB8](a1, a2, a3);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x1E0C84F10](a1, *(_QWORD *)&a2, a3);
}

int sched_get_priority_min(int a1)
{
  return MEMORY[0x1E0C85268](*(_QWORD *)&a1);
}

int sqlite3_backup_finish(sqlite3_backup *p)
{
  return MEMORY[0x1E0DE8558](p);
}

sqlite3_backup *__cdecl sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
{
  return (sqlite3_backup *)MEMORY[0x1E0DE8560](pDest, zDestName, pSource, zSourceName);
}

int sqlite3_backup_step(sqlite3_backup *p, int nPage)
{
  return MEMORY[0x1E0DE8578](p, *(_QWORD *)&nPage);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8580](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1E0DE8598](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1E0DE85A0](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1E0DE85A8](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1E0DE85B0](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_changes(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8640](a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8650](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8668](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE8678](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  double result;

  MEMORY[0x1E0DE8688](a1, *(_QWORD *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8690](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x1E0DE86A0](a1, *(_QWORD *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE86C8](a1, *(_QWORD *)&iCol);
}

sqlite3_value *__cdecl sqlite3_column_value(sqlite3_stmt *a1, int iCol)
{
  return (sqlite3_value *)MEMORY[0x1E0DE86D0](a1, *(_QWORD *)&iCol);
}

int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  return MEMORY[0x1E0DE8708](db, zFunctionName, *(_QWORD *)&nArg, *(_QWORD *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1E0DE8788](a1);
}

const char *__cdecl sqlite3_errstr(int a1)
{
  return (const char *)MEMORY[0x1E0DE8790](*(_QWORD *)&a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1E0DE8798](a1, sql, callback, a4, errmsg);
}

int sqlite3_extended_errcode(sqlite3 *db)
{
  return MEMORY[0x1E0DE87B0](db);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1E0DE87C0](a1, zDbName, *(_QWORD *)&op, a4);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE87C8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1E0DE8870](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8880](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
  MEMORY[0x1E0DE88C8](a1, a2);
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
  MEMORY[0x1E0DE88F0](a1, *(_QWORD *)&a2);
}

void sqlite3_result_null(sqlite3_context *a1)
{
  MEMORY[0x1E0DE8900](a1);
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE8910](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cdecl sqlite3_rollback_hook(sqlite3 *a1, void (__cdecl *a2)(void *), void *a3)
{
  return (void *)MEMORY[0x1E0DE8938](a1, a2, a3);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE89A8](a1);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x1E0DE8A10](a1);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x1E0DE8A18](a1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A20](a1);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  double result;

  MEMORY[0x1E0DE8A30](a1);
  return result;
}

sqlite3_value *__cdecl sqlite3_value_dup(const sqlite3_value *a1)
{
  return (sqlite3_value *)MEMORY[0x1E0DE8A38](a1);
}

void sqlite3_value_free(sqlite3_value *a1)
{
  MEMORY[0x1E0DE8A40](a1);
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A48](a1);
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A50](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE8A60](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A70](a1);
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  return MEMORY[0x1E0DE8A98](db, zDb, *(_QWORD *)&eMode, pnLog, pnCkpt);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

uint64_t symbolicColorForLegacyRGB()
{
  return MEMORY[0x1E0DDBC20]();
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1E0C86048](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C867B0](value);
}

