uint64_t sub_1B683A840(uint64_t result, _WORD *a2, char a3, char a4, int a5, uint64_t a6, __int16 a7)
{
  __int16 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;

  if (a5)
    v7 = 128;
  else
    v7 = 0;
  *a2 = v7 & 0xFF8C | a3 & 3 | (16 * (a4 & 7)) | (a7 << 9) | *a2 & 0x10C;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(result + 1880) + 2013) >> a3;
  if (v8 >= 8)
  {
    v9 = 0;
    v10 = v8 >> 3;
    v11 = a2;
    do
    {
      v12 = v11;
      v13 = v10;
      do
      {
        *v12++ = *a2;
        --v13;
      }
      while (v13);
      ++v9;
      v11 += a6;
    }
    while (v9 != v10);
  }
  return result;
}

void *sub_1B683A8BC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, int a5, int a6)
{
  void *result;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  char *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v23;
  size_t v24;

  result = sub_1B683AA88(a2, a3, a4, a5, a6);
  v13 = 0;
  v14 = a4 - *((_DWORD *)a3 + 1);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = a5 - *((_DWORD *)a3 + 2);
    if ((v15 & 0x80000000) == 0)
    {
      v16 = *a3;
      if (v14 >= v16 || v15 >= v16)
        v13 = 0;
      else
        v13 = (char *)(*((_QWORD *)a3 + 12) + 16
                                            * ((v14 >> 2) + (v16 >> 2) * (unint64_t)(v15 >> 2)));
    }
  }
  v18 = 0;
  v19 = a4 - *((_DWORD *)a2 + 1);
  if ((v19 & 0x80000000) == 0)
  {
    v20 = a5 - *((_DWORD *)a2 + 2);
    if ((v20 & 0x80000000) == 0)
    {
      v21 = *a2;
      if (v19 >= v21 || v20 >= v21)
        v18 = 0;
      else
        v18 = (char *)(*((_QWORD *)a2 + 12) + 16
                                            * ((v19 >> 2) + (v21 >> 2) * (unint64_t)(v20 >> 2)));
    }
  }
  if (a6 >= 4)
  {
    v23 = a6 >> 2;
    v24 = 16 * (a6 >> 2);
    do
    {
      result = memcpy(v18, v13, v24);
      v18 += (4 * *a2) & 0x3F0;
      v13 += (4 * *a3) & 0x3F0;
      --v23;
    }
    while (v23);
  }
  if (!*(_BYTE *)(a1 + 8120))
  {
    result = sub_1B683ABA0(a1, *((unsigned __int8 **)a2 + 17), *((unsigned __int8 **)a3 + 17), a4 - *((_DWORD *)a2 + 1), a5 - *((_DWORD *)a2 + 2), a4 - *((_DWORD *)a3 + 1), a5 - *((_DWORD *)a3 + 2), **((unsigned __int8 **)a3 + 17));
    if (!*(_BYTE *)(a1 + 8))
      return sub_1B683ADE4(a1, *((_QWORD *)a2 + 17), *((_QWORD *)a3 + 17), a4 - *((_DWORD *)a2 + 1), a5 - *((_DWORD *)a2 + 2), a4 - *((_DWORD *)a3 + 1), a5 - *((_DWORD *)a3 + 2), *(unsigned __int8 *)(*((_QWORD *)a3 + 17) + 1));
  }
  return result;
}

unsigned __int8 *sub_1B683AA88(unsigned __int8 *result, unsigned __int8 *a2, int a3, int a4, int a5)
{
  unsigned __int8 *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  size_t v17;
  int v18;

  v6 = result;
  v7 = 0;
  v8 = a3 - *((_DWORD *)result + 1);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = a4 - *((_DWORD *)result + 2);
    if ((v9 & 0x80000000) == 0)
    {
      v10 = *result;
      if (v8 >= v10 || v9 >= v10)
        v7 = 0;
      else
        v7 = (char *)(*((_QWORD *)result + 11) + 2
                                               * ((v8 >> 3) + (v10 >> 3) * (unint64_t)(v9 >> 3)));
    }
  }
  v12 = 0;
  v13 = a3 - *((_DWORD *)a2 + 1);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = a4 - *((_DWORD *)a2 + 2);
    if ((v14 & 0x80000000) == 0)
    {
      v15 = *a2;
      if (v13 >= v15 || v14 >= v15)
        v12 = 0;
      else
        v12 = (char *)(*((_QWORD *)a2 + 11) + 2 * ((v13 >> 3) + (v15 >> 3) * (unint64_t)(v14 >> 3)));
    }
  }
  if (a5 >= 8)
  {
    v17 = 2 * (a5 >> 3);
    if (a5 >> 3 <= 1)
      v18 = 1;
    else
      v18 = a5 >> 3;
    do
    {
      result = (unsigned __int8 *)memcpy(v7, v12, v17);
      v7 += ((unint64_t)*v6 >> 2) & 0x3E;
      v12 += ((unint64_t)*a2 >> 2) & 0x3E;
      --v18;
    }
    while (v18);
  }
  return result;
}

void *sub_1B683ABA0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *result;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  signed int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  size_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  size_t __na;
  size_t __n;

  v16 = *a3;
  __na = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a3 + 10) + 24))(*((_QWORD *)a3 + 10), *((_QWORD *)a3 + 11) + a6 + v16 * a7);
  v17 = *a2;
  v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 24))(*((_QWORD *)a2 + 10), *((_QWORD *)a2 + 11) + a4 + v17 * a5);
  v55 = a1;
  result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, size_t, uint64_t, uint64_t))(a1 + 8144))(a8, a8, v16, __na, v17, v18);
  v52 = a5;
  v53 = a7;
  v20 = (uint64_t)a5 >> 2;
  v21 = a2;
  v22 = a3;
  v23 = a8;
  v24 = *(unsigned __int8 *)v21;
  v25 = (uint64_t)a4 >> 2;
  v26 = (uint64_t)a7 >> 2;
  v27 = *(unsigned __int8 *)v22;
  v54 = a6;
  v28 = (uint64_t)a6 >> 2;
  v29 = (uint64_t)(int)a8 >> 2;
  __n = v29;
  v50 = v25;
  v51 = v20;
  v48 = v28;
  v49 = v26;
  if (a8 < 4)
  {
    v30 = a1;
    if (!v23)
      goto LABEL_9;
    goto LABEL_7;
  }
  v47 = a4;
  v31 = v24 >> 2;
  v32 = v27 >> 2;
  v33 = (char *)(v22[4] + v28 + (int)(v27 >> 2) * (uint64_t)(int)v26);
  v34 = (char *)(v21[4] + v25 + (int)(v24 >> 2) * (uint64_t)(int)v20);
  v35 = (uint64_t)(int)a8 >> 2;
  do
  {
    --v35;
    result = memcpy(v34, v33, v29);
    v34 += v31;
    v33 += v32;
  }
  while (v35);
  LODWORD(v24) = *(unsigned __int8 *)v21;
  LODWORD(v27) = *(unsigned __int8 *)v22;
  v30 = v55;
  a4 = v47;
  if (v23)
  {
LABEL_7:
    v36 = a4;
    v37 = 2 * v24;
    v38 = 2 * v27;
    v39 = v23;
    v40 = (char *)(v22[7] + 2 * (v54 + (int)v27 * (uint64_t)v53));
    v41 = (char *)(v21[7] + 2 * (v36 + (int)v24 * (uint64_t)v52));
    do
    {
      --v39;
      result = memcpy(v41, v40, 2 * v23);
      v41 += v37;
      v40 += v38;
    }
    while (v39);
  }
LABEL_9:
  if (*(_BYTE *)(*(_QWORD *)(v30 + 952) + 352) && v23 >= 4)
  {
    v42 = (unint64_t)*(unsigned __int8 *)v21 >> 2;
    v43 = (unint64_t)*(unsigned __int8 *)v22 >> 2;
    v44 = (char *)(v22[1] + v48 + (int)v43 * (uint64_t)v49);
    v45 = (char *)(v21[1] + v50 + (int)v42 * (uint64_t)v51);
    v46 = __n;
    do
    {
      --v46;
      result = memcpy(v45, v44, __n);
      v45 += v42;
      v44 += v43;
    }
    while (v46);
  }
  return result;
}

void *sub_1B683ADE4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  size_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  size_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;

  v76 = 2 * a8;
  v15 = 2 * *(unsigned __int8 *)(a3 + 1);
  v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 96) + 24))(*(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 104) + a6 + (int)v15 * (uint64_t)(a7 >> 1));
  v17 = 2 * *(unsigned __int8 *)(a2 + 1);
  v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104) + a4 + (int)v17 * (uint64_t)(a5 >> 1));
  v72 = a1;
  result = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v76, a8, v15, v16, v17, v18);
  v63 = a5;
  v64 = a4;
  v20 = (uint64_t)a5 >> 3;
  v21 = *(unsigned __int8 *)(a2 + 1);
  v22 = (uint64_t)a7 >> 3;
  v23 = *(unsigned __int8 *)(a3 + 1);
  v66 = a6;
  v68 = (uint64_t)a4 >> 3;
  v24 = (uint64_t)a6 >> 3;
  v25 = a8 >> 2;
  v75 = v22;
  v77 = a8;
  v73 = v25;
  v74 = v24;
  v69 = v20;
  if (a8 >= 4)
  {
    v28 = v21 >> 2;
    v29 = v23 >> 2;
    v30 = ((uint64_t)a4 >> 3) + (int)(v21 >> 2) * (uint64_t)(int)v20;
    v31 = a3;
    v32 = (char *)(*(_QWORD *)(a3 + 40) + v24 + (int)(v23 >> 2) * (uint64_t)(int)v22);
    v33 = (char *)(*(_QWORD *)(a2 + 40) + v30);
    v34 = a8 >> 2;
    v26 = a2;
    do
    {
      --v34;
      memcpy(v33, v32, v25);
      v33 += v28;
      v32 += v29;
    }
    while (v34);
    v27 = v31;
    v35 = (unint64_t)*(unsigned __int8 *)(v26 + 1) >> 2;
    v36 = (unint64_t)*(unsigned __int8 *)(v31 + 1) >> 2;
    v37 = (char *)(*(_QWORD *)(v31 + 48) + v74 + (int)v36 * (uint64_t)v75);
    v38 = (char *)(*(_QWORD *)(v26 + 48) + v68 + (int)v35 * (uint64_t)v69);
    v39 = v25;
    do
    {
      --v39;
      result = memcpy(v38, v37, v25);
      v38 += v35;
      v37 += v36;
    }
    while (v39);
    LODWORD(v21) = *(unsigned __int8 *)(v26 + 1);
    LODWORD(v23) = *(unsigned __int8 *)(v31 + 1);
  }
  else
  {
    v26 = a2;
    v27 = a3;
  }
  if (v77)
  {
    v40 = (uint64_t)v63 >> 1;
    v41 = (uint64_t)v64 >> 1;
    v42 = 2 * v21;
    v43 = 2 * v23;
    v44 = v77;
    v71 = (uint64_t)a7 >> 1;
    v65 = (uint64_t)v66 >> 1;
    v67 = v41;
    v45 = (char *)(*(_QWORD *)(v27 + 64) + 2 * (v65 + (int)v23 * (uint64_t)(int)v71));
    v46 = (char *)(*(_QWORD *)(v26 + 64) + 2 * (v41 + (int)v21 * (uint64_t)(int)v40));
    v47 = v77;
    v48 = 2 * v77;
    do
    {
      --v47;
      memcpy(v46, v45, v48);
      v46 += v42;
      v45 += v43;
    }
    while (v47);
    v49 = 2 * *(unsigned __int8 *)(v26 + 1);
    v50 = 2 * *(unsigned __int8 *)(v27 + 1);
    v51 = (char *)(*(_QWORD *)(v27 + 72) + 2 * (v65 + *(unsigned __int8 *)(v27 + 1) * (uint64_t)(int)v71));
    v52 = (char *)(*(_QWORD *)(v26 + 72) + 2 * (v67 + *(unsigned __int8 *)(v26 + 1) * (uint64_t)(int)v40));
    do
    {
      --v44;
      result = memcpy(v52, v51, v48);
      v52 += v49;
      v51 += v50;
    }
    while (v44);
  }
  if (*(_BYTE *)(*(_QWORD *)(v72 + 952) + 352) && v77 >= 4)
  {
    v53 = (unint64_t)*(unsigned __int8 *)(v26 + 1) >> 2;
    v54 = (unint64_t)*(unsigned __int8 *)(v27 + 1) >> 2;
    v55 = (char *)(*(_QWORD *)(v27 + 16) + v74 + (int)v54 * (uint64_t)v75);
    v56 = (char *)(*(_QWORD *)(v26 + 16) + v68 + (int)v53 * (uint64_t)v69);
    v57 = v73;
    do
    {
      --v57;
      memcpy(v56, v55, v73);
      v56 += v53;
      v55 += v54;
    }
    while (v57);
    v58 = (unint64_t)*(unsigned __int8 *)(v26 + 1) >> 2;
    v59 = (unint64_t)*(unsigned __int8 *)(v27 + 1) >> 2;
    v60 = (char *)(*(_QWORD *)(v27 + 24) + v74 + (int)v59 * (uint64_t)v75);
    v61 = (char *)(*(_QWORD *)(v26 + 24) + v68 + (int)v58 * (uint64_t)v69);
    v62 = v73;
    do
    {
      --v62;
      result = memcpy(v61, v60, v73);
      v61 += v58;
      v60 += v59;
    }
    while (v62);
  }
  return result;
}

int *sub_1B683B148(int *result, int a2)
{
  int v2;
  int *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  size_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v2 = a2;
  v3 = result;
  v4 = (unsigned __int8 *)*((_QWORD *)result + 557);
  v5 = *(_QWORD *)(*((_QWORD *)result + 234) + 1360);
  v6 = *(_QWORD *)(v5 + 488);
  v7 = *(_QWORD *)(v5 + 552);
  v8 = result[1107];
  v9 = result[1108];
  if ((v9 | v8) < 0 || *(_DWORD *)(v5 + 276) <= v8 || *(_DWORD *)(v5 + 280) <= v9)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v10 = (char *)(*(_QWORD *)(v5 + 512) + 2 * (v6 * ((uint64_t)v9 >> 3) + (v8 >> 3)));
    v11 = (char *)(*(_QWORD *)(v5 + 576) + 16 * (v7 * ((uint64_t)v9 >> 2) + (v8 >> 2)));
  }
  v12 = 0;
  v13 = v8 - *((_DWORD *)v4 + 1);
  if ((v13 & 0x80000000) != 0)
  {
    v15 = 0;
  }
  else
  {
    v14 = v9 - *((_DWORD *)v4 + 2);
    v15 = 0;
    if ((v14 & 0x80000000) == 0)
    {
      v16 = *v4;
      if (v13 >= v16 || v14 >= v16)
      {
        v12 = 0;
        v15 = 0;
      }
      else
      {
        v12 = (char *)(*((_QWORD *)v4 + 11) + 2 * ((v13 >> 3) + (v16 >> 3) * (unint64_t)(v14 >> 3)));
        v15 = (char *)(*((_QWORD *)v4 + 12) + 16
                                            * ((v13 >> 2) + (v16 >> 2) * (unint64_t)(v14 >> 2)));
      }
    }
  }
  v18 = v4[1];
  v19 = v8 + v18;
  if (result[4] < v8 + v18)
    v19 = result[4];
  v20 = v9 + v18;
  if (result[5] < v20)
    v20 = result[5];
  v21 = v20 - v9 + 7;
  if (v21 >= 8)
  {
    v22 = (v19 - v8 + 7) >> 3;
    v23 = v21 >> 3;
    v45 = 2 * v22;
    v46 = v7;
    v24 = 2 * v23;
    v25 = 2 * v22;
    if (v23 <= 1)
      v26 = 1;
    else
      v26 = v23;
    v27 = 2 * v6;
    do
    {
      memcpy(v10, v12, v25);
      v12 += ((unint64_t)*v4 >> 2) & 0x3E;
      v10 += v27;
      --v26;
    }
    while (v26);
    if (v24 <= 1)
      v28 = 1;
    else
      v28 = v24;
    v2 = a2;
    do
    {
      result = (int *)memcpy(v11, v15, 16 * v45);
      v15 += (4 * *v4) & 0x3F0;
      v11 += 16 * v46;
      --v28;
    }
    while (v28);
  }
  if (v2)
  {
    v29 = 0;
    v30 = 1;
    do
    {
      v31 = 0;
      v32 = v30;
      v33 = *((_QWORD *)v4 + 17);
      v34 = v4[1];
      v35 = *(unsigned __int8 *)(v33 + v29) << v29;
      v36 = v3[1107];
      v37 = v3[1108];
      v38 = v36 - *((_DWORD *)v4 + 1);
      if ((v38 & 0x80000000) == 0)
      {
        v39 = v37 - *((_DWORD *)v4 + 2);
        if ((v39 & 0x80000000) == 0)
        {
          v40 = *v4;
          if (v38 >= v40 || v39 >= v40)
          {
            v31 = 0;
          }
          else
          {
            v31 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v33 + 16 * v29 + 80) + 24))(*(_QWORD *)(v33 + 16 * v29 + 80), *(_QWORD *)(v33 + 16 * v29 + 88) + v38 + v35 * (unint64_t)(v39 >> v29));
            v36 = v3[1107];
            v37 = v3[1108];
          }
        }
      }
      v42 = *(_QWORD *)(*((_QWORD *)v3 + 234) + 1360);
      v43 = *(_QWORD *)(v42 + 8 * v29 + 112);
      v44 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v42 + 16))(v42, (v36 >> v29), (v37 >> v29), v29);
      result = (int *)(*((uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v3 + 1018))(v34, v34 >> v29, v35, v31, v43, v44);
      v30 = 0;
      v29 = 1;
    }
    while ((v32 & 1) != 0);
  }
  return result;
}

uint64_t sub_1B683B42C(uint64_t result, int a2, int a3, unsigned __int8 a4)
{
  int v4;
  int v5;
  int v6;

  switch(a2)
  {
    case 0:
      if ((((result & 0xF0) != 0) & a4) != 0)
        v4 = 15;
      else
        v4 = 0;
      if ((((result & 0x1E00) != 0) & a3) != 0)
        v5 = 122880;
      else
        v5 = 0;
      result = v5 | v4 | result;
      break;
    case 1:
      result = result & 0xFFFFFF00 | (((result & 0x1E00) != 0) << 8) | 0xF0;
      break;
    case 2:
      if (a3)
        v6 = 122880;
      else
        v6 = 0;
      result = v6 | (((result & 0xF0) != 0) << 8) | result | 0x1E00;
      break;
    case 3:
      result = result & 0xFFFE0000 | 0x1FF0;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B683B4CC(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6, int a7, __int32 *a8)
{
  if (*(_BYTE *)(a1 + 800))
    sub_1B683B52C(a1, a2, a3, *(unsigned __int8 **)(a1 + 848), a4, a5, a6, a7, a8);
  else
    sub_1B687A560(*(_QWORD *)(a1 + 1872), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B683B52C(uint64_t a1, int a2, int a3, unsigned __int8 *a4, unsigned int a5, int a6, int a7, int a8, __int32 *a9)
{
  unint64_t v16[3];
  unint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v17[0] = 0;
  v17[1] = 0;
  memset(v16, 0, sizeof(v16));
  sub_1B683B608(a1, a2, a3, a4, a7, a8, v17, v16);
  sub_1B67C7B4C(*(_QWORD *)(a1 + 1872), a2, a3, a5, a6, a7, a8, a9, v17, (uint64_t)v16);
}

uint64_t sub_1B683B608(uint64_t result, int a2, int a3, unsigned __int8 *a4, int a5, int a6, unint64_t *a7, unint64_t *a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;

  v8 = *(_QWORD *)(result + 1880);
  v9 = 1 << (*(_BYTE *)(v8 + 2008) - 1);
  v10 = a5 + a2;
  v11 = a6 + a3;
  v12 = a6 + a3 - 1;
  v13 = *((_DWORD *)a4 + 1);
  v14 = a2 - v13;
  if (a2 == v13)
  {
    v15 = *((_DWORD *)a4 + 2);
    *a7 = *((_QWORD *)a4 + 15) + 16 * ((v11 - v15) >> 2);
    v16 = *((_QWORD *)a4 + 15) + 16 * ((v12 - v15) >> 2);
  }
  else
  {
    v20 = 0;
    if (((word_1B694BB1E[(((*(unsigned __int8 *)(v8 + 2013) - 1) & v12) - *(unsigned __int8 *)(v8 + 2013) + 64) >> 2] >> (((*(unsigned __int8 *)(v8 + 2013) - 1) & a2) >> 2)) & 1) != 0)
    {
      v21 = ~v13 + a2;
      v15 = *((_DWORD *)a4 + 2);
      if ((v21 & 0x80000000) == 0)
      {
        v22 = v11 - v15;
        if ((v22 & 0x80000000) == 0)
        {
          v20 = 0;
          v23 = *a4;
          if (v21 < v23 && v22 < v23)
            v20 = *((_QWORD *)a4 + 12) + 16 * ((v21 >> 2) + (v23 >> 2) * (unint64_t)(v22 >> 2));
        }
      }
    }
    else
    {
      v15 = *((_DWORD *)a4 + 2);
      v21 = ~v13 + a2;
    }
    v16 = 0;
    *a7 = v20;
    if ((v21 & 0x80000000) == 0)
    {
      v29 = v12 - v15;
      if ((v29 & 0x80000000) == 0)
      {
        v16 = 0;
        v30 = *a4;
        if (v21 < v30 && v29 < v30)
          v16 = *((_QWORD *)a4 + 12) + 16 * ((v21 >> 2) + (v30 >> 2) * (unint64_t)(v29 >> 2));
      }
    }
  }
  v17 = v10 - v9;
  a7[1] = v16;
  if (v15 == a3)
  {
    *a8 = *((_QWORD *)a4 + 16) + 16 * ((v10 - v13) >> 2);
    a8[1] = *((_QWORD *)a4 + 16) + 16 * ((v17 - v13) >> 2);
    v18 = *((_QWORD *)a4 + 16);
    v19 = (v14 >> 2) - 1;
LABEL_31:
    v34 = v18 + 16 * v19;
    goto LABEL_32;
  }
  v24 = *(unsigned __int8 *)(*(_QWORD *)(result + 1880) + 2013);
  if (((word_1B692B05A[((v24 - 1) & a3) >> 2] >> ((((v24 - 1) & (v10 - 1)) - v24 + 64) >> 2)) & 1) != 0)
  {
    v25 = v10 - v13;
    v26 = ~v15 + a3;
    if (((v26 | v25) & 0x80000000) != 0)
    {
      v27 = 0;
    }
    else
    {
      v27 = 0;
      v28 = *a4;
      if (v25 < v28 && v26 < v28)
        v27 = *((_QWORD *)a4 + 12) + 16 * ((v25 >> 2) + (v28 >> 2) * (unint64_t)(v26 >> 2));
    }
  }
  else
  {
    v27 = 0;
    v26 = ~v15 + a3;
  }
  *a8 = v27;
  v31 = v17 - v13;
  if (((v26 | (v17 - v13)) & 0x80000000) != 0)
  {
    v32 = 0;
  }
  else
  {
    v32 = 0;
    v33 = *a4;
    if (v31 < v33 && v26 < v33)
      v32 = *((_QWORD *)a4 + 12) + 16 * ((v31 >> 2) + (v33 >> 2) * (unint64_t)(v26 >> 2));
  }
  a8[1] = v32;
  if (a2 == v13)
  {
    v18 = *((_QWORD *)a4 + 15);
    v19 = (int)v26 >> 2;
    goto LABEL_31;
  }
  v35 = a2 - v13 - v9;
  if (((v26 | v35) & 0x80000000) != 0)
  {
    v34 = 0;
  }
  else
  {
    v34 = 0;
    v36 = *a4;
    if (v35 < v36 && v26 < v36)
      v34 = *((_QWORD *)a4 + 12) + 16 * ((v35 >> 2) + (v36 >> 2) * (unint64_t)(v26 >> 2));
  }
LABEL_32:
  a8[2] = v34;
  return result;
}

void sub_1B683B8C8(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, int a6, uint64_t a7)
{
  unint64_t v13[3];
  uint64_t v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v14[0] = 0;
  v14[1] = 0;
  memset(v13, 0, sizeof(v13));
  sub_1B683B608(a1, a2, a3, a4, a5, a6, (unint64_t *)v14, v13);
  sub_1B67C8110(*(_BYTE **)(a1 + 1872), a2, a3, a5, a6, a7, v14, (uint64_t *)v13);
}

void *sub_1B683B978(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _WORD *v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  int v110;
  _WORD *v111;

  v4 = 0;
  v111 = (_WORD *)(a1 + 4696);
  v5 = *(_QWORD *)(a1 + 1880);
  v6 = *(_BYTE *)(v5 + 2009);
  v7 = *(_DWORD *)(v5 + 2016);
  *(_DWORD *)(a1 + 4416) = a2;
  v8 = a2 / v7;
  v9 = (a2 % v7) << v6;
  *(_DWORD *)(a1 + 4420) = v9 >> v6;
  v10 = *(unsigned __int8 *)(v5 + 2013);
  *(_QWORD *)(a1 + 944) = a3;
  *(_DWORD *)(a1 + 4428) = v9;
  v11 = v8 << v6;
  *(_DWORD *)(a1 + 4432) = v11;
  *(_DWORD *)(a1 + 4424) = v11 >> v6;
  *(_BYTE *)(a3 + 197) = 0;
  v13 = *(_DWORD *)(v5 + 176);
  v12 = *(_DWORD *)(v5 + 180);
  v14 = v13 - v9;
  if (v14 >= (int)v10)
    v15 = v10;
  else
    v15 = v14;
  v16 = v12 - v11;
  if (v16 >= (int)v10)
    v17 = v10;
  else
    v17 = v16;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 79216) + 592);
  v19 = 1;
  do
  {
    v20 = v19;
    v21 = *(_QWORD *)(v18 + 8 * v4 + 112);
    v22 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v18 + 16))(v18, (*(int *)(a1 + 4428) >> v4), (*(int *)(a1 + 4432) >> v4), v4);
    v23 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 4584) + 16 * v4 + 24) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 4584) + 16 * v4 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 4584) + 16 * v4 + 32));
    result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v15, v17 >> v4, v21, v22, v10, v23);
    v19 = 0;
    v4 = 1;
  }
  while ((v20 & 1) != 0);
  *(_OWORD *)(*(_QWORD *)(a1 + 4456) + 24) = *(_OWORD *)(*(_QWORD *)(a1 + 4584) + 24);
  *(_OWORD *)(*(_QWORD *)(a1 + 4456) + 40) = *(_OWORD *)(*(_QWORD *)(a1 + 4584) + 40);
  *(_OWORD *)(*(_QWORD *)(a1 + 4456) + 56) = *(_OWORD *)(*(_QWORD *)(a1 + 4584) + 56);
  *(_OWORD *)(*(_QWORD *)(a1 + 4456) + 72) = *(_OWORD *)(*(_QWORD *)(a1 + 4584) + 72);
  v25 = *(_DWORD *)(a1 + 4428);
  v26 = *(_DWORD *)(a1 + 4432);
  if (v25)
    v27 = 240;
  else
    v27 = 0;
  v28 = *(_DWORD *)(a1 + 16);
  v29 = *(_DWORD *)(a1 + 20);
  if (v25 + (int)v10 >= v28)
    v30 = 7680;
  else
    v30 = 130560;
  if (v26)
  {
    v31 = v25 == 0;
  }
  else
  {
    v30 = 0;
    v31 = 1;
  }
  v32 = v30 | v27;
  v33 = v32 | 0x100;
  if (v31)
    v33 = v32;
  *(_DWORD *)(a1 + 4436) = v33;
  v34 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2013);
  v35 = v26 + v34;
  if (v29 < v26 + v34)
    v35 = v29;
  v36 = (v35 - v26);
  v37 = v25 + v34;
  if (v28 < v25 + v34)
    v37 = v28;
  if ((v33 & 0xF0) != 0)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360);
    v39 = *(_QWORD *)(v38 + 488);
    if ((v26 | (v25 - 1)) < 0 || *(_DWORD *)(v38 + 276) < v25 || *(_DWORD *)(v38 + 280) <= v26)
      v40 = 0;
    else
      v40 = (_WORD *)(*(_QWORD *)(v38 + 512) + 2 * (v39 * ((uint64_t)v26 >> 3) + ((v25 - 1) >> 3)));
    if ((int)v36 >= 1)
    {
      v41 = 0;
      v42 = 0;
      v43 = 2 * v39;
      do
      {
        *(_WORD *)(*(_QWORD *)(a1 + 4704) + v41) = *v40;
        v42 += 8;
        v41 += 2;
        v40 = (_WORD *)((char *)v40 + v43);
      }
      while (v42 < v36);
    }
  }
  else if ((int)v36 >= 8)
  {
    v44 = 0;
    do
      *(_WORD *)(*(_QWORD *)(a1 + 4704) + 2 * v44++) = 0;
    while (v36 >> 3 != v44);
  }
  v45 = v37 - v25;
  if ((*(_BYTE *)(a1 + 4437) & 0x1E) != 0)
  {
    v46 = *(_DWORD *)(a1 + 4428);
    v47 = *(_DWORD *)(a1 + 4432);
    if (((v47 - 1) | v46) < 0
      || (v48 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), *(_DWORD *)(v48 + 276) <= v46)
      || *(_DWORD *)(v48 + 280) < v47)
    {
      v49 = 0;
    }
    else
    {
      v49 = (const void *)(*(_QWORD *)(v48 + 512) + 2
                                                  * (*(_QWORD *)(v48 + 488) * ((uint64_t)(v47 - 1) >> 3) + (v46 >> 3)));
    }
    result = memcpy(*(void **)(a1 + 4712), v49, 2 * (v45 >> 3));
  }
  else if (v45 >= 8)
  {
    v50 = 0;
    do
      *(_WORD *)(*(_QWORD *)(a1 + 4712) + 2 * v50++) = 0;
    while (v45 >> 3 != v50);
  }
  v51 = (int)v36 >> 2;
  if ((*(_BYTE *)(a1 + 4436) & 0xF0) != 0)
  {
    v52 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360);
    v53 = *(_QWORD *)(v52 + 552);
    v54 = *(_DWORD *)(a1 + 4428);
    v55 = *(_DWORD *)(a1 + 4432);
    if ((v55 | (v54 - 1)) < 0 || *(_DWORD *)(v52 + 276) < v54 || *(_DWORD *)(v52 + 280) <= v55)
      v56 = 0;
    else
      v56 = (uint64_t *)(*(_QWORD *)(v52 + 576) + 16 * (v53 * ((uint64_t)v55 >> 2) + ((v54 - 1) >> 2)));
    if ((int)v36 >= 1)
    {
      v57 = 0;
      v58 = 0;
      v59 = 16 * v53;
      do
      {
        v60 = (_QWORD *)(*(_QWORD *)(a1 + 4720) + v57);
        v61 = *v56;
        *(_QWORD *)((char *)v60 + 6) = *(uint64_t *)((char *)v56 + 6);
        *v60 = v61;
        v58 += 4;
        v57 += 16;
        v56 = (uint64_t *)((char *)v56 + v59);
      }
      while (v58 < v36);
    }
  }
  else if ((int)v36 >= 4)
  {
    v62 = 0;
    if (v51 <= 1)
      v63 = 1;
    else
      v63 = (int)v36 >> 2;
    v64 = 16 * v63;
    do
    {
      v65 = (_QWORD *)(*(_QWORD *)(a1 + 4720) + v62);
      v66 = *(_QWORD *)(a1 + 4440);
      *(_QWORD *)((char *)v65 + 6) = *(_QWORD *)(a1 + 4446);
      *v65 = v66;
      v62 += 16;
    }
    while (v64 != v62);
  }
  v67 = v45 >> 2;
  v68 = (uint64_t *)(a1 + 4440);
  v69 = (_QWORD *)(*(_QWORD *)(a1 + 4720) + 16 * v51);
  v70 = *(_QWORD *)(a1 + 4440);
  *(_QWORD *)((char *)v69 + 6) = *(_QWORD *)(a1 + 4446);
  *v69 = v70;
  if ((*(_BYTE *)(a1 + 4437) & 0x1E) != 0)
  {
    v71 = *(_DWORD *)(a1 + 4428);
    v72 = *(_DWORD *)(a1 + 4432);
    if (((v72 - 1) | v71) < 0
      || (v73 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), *(_DWORD *)(v73 + 276) <= v71)
      || *(_DWORD *)(v73 + 280) < v72)
    {
      v74 = 0;
    }
    else
    {
      v74 = (char *)(*(_QWORD *)(v73 + 576) + 16 * (*(_QWORD *)(v73 + 552) * ((uint64_t)(v72 - 1) >> 2) + (v71 >> 2)));
    }
    result = memcpy(*(void **)(a1 + 4728), v74, 16 * v67);
    if ((*(_DWORD *)(a1 + 4436) & 0x100) != 0)
      v75 = v74 - 16;
    else
      v75 = (char *)(a1 + 4440);
    v76 = *(_QWORD *)(a1 + 4728);
    v77 = *(_QWORD *)v75;
    *(_QWORD *)(v76 - 10) = *(_QWORD *)(v75 + 6);
    *(_QWORD *)(v76 - 16) = v77;
    v78 = *(_DWORD *)(a1 + 4428) + v67;
    v79 = *(_DWORD *)(a1 + 4432);
    if (((v79 - 1) | v78) < 0
      || (v80 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), *(_DWORD *)(v80 + 276) <= v78)
      || *(_DWORD *)(v80 + 280) < v79)
    {
      v81 = 0;
    }
    else
    {
      v81 = (uint64_t *)(*(_QWORD *)(v80 + 576) + 16 * (*(_QWORD *)(v80 + 552) * ((uint64_t)(v79 - 1) >> 2) + (v78 >> 2)));
    }
    if (!v81)
      v81 = (uint64_t *)(a1 + 4440);
    v82 = (_QWORD *)(*(_QWORD *)(a1 + 4728) + 16 * v67);
    v83 = *v81;
    *(_QWORD *)((char *)v82 + 6) = *(uint64_t *)((char *)v81 + 6);
    *v82 = v83;
    v84 = *(_DWORD *)(a1 + 4428);
    v85 = *(_DWORD *)(a1 + 4432);
    v86 = v85 - 1;
    if (((v85 - 1) | (v84 - 1)) < 0
      || (v87 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), *(_DWORD *)(v87 + 276) < v84)
      || *(_DWORD *)(v87 + 280) < v85
      || (v88 = *(_QWORD *)(v87 + 576)) == 0)
    {
      v92 = *(_QWORD *)(a1 + 4728);
      v93 = *v68;
      *(_QWORD *)(v92 - 10) = *(_QWORD *)(a1 + 4446);
      *(_QWORD *)(v92 - 16) = v93;
    }
    else
    {
      v89 = (uint64_t *)(v88 + 16 * (*(_QWORD *)(v87 + 552) * ((uint64_t)v86 >> 2) + ((v84 - 1) >> 2)));
      v90 = *(_QWORD *)(a1 + 4728);
      v91 = *v89;
      *(_QWORD *)(v90 - 10) = *(uint64_t *)((char *)v89 + 6);
      *(_QWORD *)(v90 - 16) = v91;
    }
    v94 = v111;
    v95 = *(_DWORD *)(a1 + 4428) + v34;
    v96 = *(_DWORD *)(a1 + 4432);
    v97 = v96 - 1;
    if (((v96 - 1) | v95) < 0
      || (v98 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), *(_DWORD *)(v98 + 276) <= v95)
      || *(_DWORD *)(v98 + 280) < v96
      || (v99 = *(_QWORD *)(v98 + 576)) == 0)
    {
      v103 = (_QWORD *)(*(_QWORD *)(a1 + 4728) + 16 * v67);
      v104 = *v68;
      *(_QWORD *)((char *)v103 + 6) = *(_QWORD *)(a1 + 4446);
      *v103 = v104;
    }
    else
    {
      v100 = (uint64_t *)(v99 + 16 * (*(_QWORD *)(v98 + 552) * ((uint64_t)v97 >> 2) + (v95 >> 2)));
      v101 = *v100;
      v102 = (_QWORD *)(*(_QWORD *)(a1 + 4728) + 16 * v67);
      *(_QWORD *)((char *)v102 + 6) = *(uint64_t *)((char *)v100 + 6);
      *v102 = v101;
    }
  }
  else
  {
    v94 = v111;
    if (v45 >= -4)
    {
      if (v67 < 0)
        v105 = -1;
      else
        v105 = v45 >> 2;
      v106 = 16 * (v105 + 1);
      v107 = -16;
      do
      {
        v108 = (_QWORD *)(*(_QWORD *)(a1 + 4728) + v107);
        v109 = *v68;
        *(_QWORD *)((char *)v108 + 6) = *(_QWORD *)(a1 + 4446);
        *v108 = v109;
        v107 += 16;
      }
      while (v106 != v107);
    }
  }
  *(_BYTE *)(a1 + 804) = v10;
  *v94 = 0;
  *(_DWORD *)(a1 + 212) = 0;
  *(_DWORD *)(a1 + 8108) = 0;
  v110 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 241);
  *(_DWORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 208) = v110;
  return result;
}

uint64_t sub_1B683C070(uint64_t a1, int *a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BOOL4 v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int32x4_t v36;
  int8x16_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  unsigned int v44;
  int8x16_t v45;
  int8x16_t v46;
  unsigned int v47;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  __int16 v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  __int16 v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  int v71;
  int v72;
  __int16 v73;
  int v74;
  int v75;
  int v76;
  int *v77;
  uint64_t v78;
  int64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int64_t v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  _QWORD *v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  double v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int16 *v139;
  unsigned __int16 *v140;
  unsigned __int8 *v141;
  uint64_t i;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  char v149;
  BOOL *v150;
  uint64_t v151;
  _BOOL4 v152;
  int v153;
  BOOL v154;
  int v155;
  uint64_t result;
  int32x4_t v157;
  int32x4_t v158;
  uint64_t v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t (*v163)(_QWORD *, __n128);
  _QWORD *v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned __int8 *v176;
  int v177;
  int v178;
  int v179;
  signed int v180;
  int v181;
  unsigned __int8 *v182;
  _BOOL8 v183;
  int v184;
  unsigned int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  unsigned __int8 *v193;
  int v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  int v198;
  int v199;
  unsigned int v200;
  unsigned int v201;
  BOOL v203;
  BOOL v204;
  BOOL v205;
  char *v206;
  char v207;
  char v208;
  _BYTE *v209;
  char v210;
  uint64_t v211;
  _BYTE *v212;
  int v213;
  int v214;
  int v215;
  uint64_t v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  uint64_t v225;
  unsigned __int8 v226;
  unsigned __int8 v227;
  uint64_t v228;
  _BYTE *v229;
  _WORD *v230;
  int v231;
  uint64_t v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  char *v245;
  int v246;
  int v247;
  int v248;
  uint64_t j;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  uint64_t v258;
  int v259;
  int v260;
  _DWORD *v261;
  int v262;
  char v263;
  int v264;
  unsigned __int8 v265;
  unsigned __int8 v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  int v273;
  uint64_t v274;
  _WORD *v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  char v285;
  int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  _WORD *v292;
  _WORD *v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  uint64_t v302;
  int v303;
  int v304;
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  int v311;
  _BYTE *v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  int v317;
  char v318;
  unsigned int v319;
  char v320;
  unsigned __int8 *v321;
  int v322;
  int v323;
  unint64_t v324;
  unsigned int v325;
  _WORD *v326;
  _BYTE *v327;
  unsigned int v328;
  uint64_t v329;
  int32x4_t v330;
  uint64_t v331;
  _WORD *v332;
  _BYTE *v333;
  int v334;
  int v335;
  int v336;
  _BYTE *v337;
  _BYTE *v338;
  uint64_t v339;
  uint64_t v340;
  _OWORD *v341;
  uint64_t v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _BYTE *v355;
  _BYTE *v356;
  int v357;
  int v358;
  _DWORD *v359;
  char *v360;
  char v361;
  _BYTE *v362;
  unsigned __int8 *v363;
  uint64_t v364;
  int v365;
  _BYTE *v366;
  int v367;
  uint64_t v368;
  _DWORD *v369;
  uint64_t v370;
  _QWORD *v371;
  int v372;
  _WORD *v373;
  int v374;
  uint64_t v375;
  _WORD *v376;
  uint64_t v377;
  int v378;
  _DWORD *v379;
  _BYTE *v380;
  _OWORD *v381;
  int *v382;
  int v383;
  char v384;
  char v385;
  int v386;
  int *v388;
  uint64_t v389;
  char v390;
  _BYTE v391[240];
  _WORD v392[348];
  int v393;
  int v394;
  int v395;
  _BYTE *v396;
  _QWORD v397[15];
  uint64_t v398;
  int v399;
  _DWORD v400[8];
  int v401;
  int v402;
  uint64_t v403;

  v3 = a1;
  v403 = *MEMORY[0x1E0C80C00];
  v4 = (char *)(a1 + 8120);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 976) + 32))(*(_QWORD *)(a1 + 976)))
  {
    v5 = *(_DWORD *)(v3 + 4428);
    v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 1880) + 2013);
    v7 = sub_1B685CA48(*(_DWORD **)(v3 + 976), v5, *(_DWORD *)(v3 + 4432), v6);
    v8 = (_QWORD *)(v3 + 1872);
    v9 = *(_QWORD *)(v3 + 1872);
    v10 = *(_QWORD *)(v9 + 79216);
    if (!*(_BYTE *)(v3 + 789))
    {
      if (v7 == 2)
        goto LABEL_13;
LABEL_12:
      *(_DWORD *)(v3 + 204) = 0;
      v12 = *(_QWORD *)(v3 + 952);
      goto LABEL_173;
    }
  }
  else
  {
    v8 = (_QWORD *)(v3 + 1872);
    v9 = *(_QWORD *)(v3 + 1872);
    v10 = *(_QWORD *)(v9 + 79216);
    if (!*(_BYTE *)(v3 + 789))
      goto LABEL_13;
    v5 = *(_DWORD *)(v3 + 4428);
    v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 1880) + 2013);
    v7 = 2;
  }
  if (v5 + v6 > *(_DWORD *)(v3 + 792))
    goto LABEL_12;
  v11 = *(_DWORD *)(v3 + 4432) + v6 <= *(_DWORD *)(v3 + 796) && v7 == 2;
  if (!v11)
    goto LABEL_12;
LABEL_13:
  v12 = *(_QWORD *)(v3 + 952);
  v13 = *(char *)(v12 + 55);
  if (v13 >= 1)
  {
    v371 = v8;
    v14 = 0;
    v15 = *(_DWORD *)(v3 + 4428);
    v16 = *(_DWORD *)(v3 + 4432);
    v17 = *(unsigned __int8 **)(v3 + 1880);
    v18 = v17[2008];
    v19 = 1 << v18;
    v20 = v17[2013];
    v21 = *(_DWORD *)(v3 + 16);
    v22 = *(_DWORD *)(v3 + 20);
    v23 = v15 + v20;
    if (v21 >= v15 + v20)
      v24 = v15 + v20;
    else
      v24 = *(_DWORD *)(v3 + 16);
    v367 = *(_DWORD *)(v3 + 20);
    if (v22 >= v16 + v20)
      v22 = v16 + v20;
    v378 = v17[2013];
    if (v21 >= v15 + 2 * v20)
      v25 = v15 + 2 * v20;
    else
      v25 = *(_DWORD *)(v3 + 16);
    v26 = v17[241];
    v28 = v16 >= v19 && v23 + v19 <= v21;
    *(_DWORD *)(v3 + 204) = 0;
    *(_DWORD *)(v3 + 208) = v26;
    v374 = v26;
    if (*(_BYTE *)(v9 + 10) == 2)
    {
LABEL_106:
      if (v13 >= 2)
      {
        if (v14 || (v76 = v374, v26 != v374))
        {
          v382 = a2;
          v77 = *(int **)(v3 + 960);
          v78 = v17[2009];
          v79 = *v77;
          v80 = 1 << v78;
          v81 = (1 << v79) + ~v16 + v77[5];
          if (v81 >= 1 << v78)
            v81 = 1 << v78;
          v82 = v81 >> v79;
          v363 = v17;
          v388 = v77;
          if ((int)v82 < 1)
          {
            v84 = 0;
            v94 = 0;
          }
          else
          {
            v83 = 0;
            v84 = 0;
            v85 = *((_QWORD *)v77 + 161);
            v86 = v85 * (v16 >> v79) + (v15 >> v79);
            v87 = *((_QWORD *)v77 + 172) + 4 * v86;
            v88 = *((_QWORD *)v77 + 174) + 8 * v86;
            if ((1 << v79) + ~v15 + v77[4] < v80)
              v80 = (1 << v79) + ~v15 + v77[4];
            v89 = v80 >> v79;
            do
            {
              v90 = (int *)v87;
              v91 = v89;
              if ((int)v89 >= 1)
              {
                do
                {
                  v92 = *v90++;
                  v84 += v92;
                  --v91;
                }
                while (v91);
              }
              ++v83;
              v87 += 4 * v85;
            }
            while (v83 != v82);
            v93 = 0;
            v94 = 0;
            v95 = 8 * v85;
            do
            {
              v96 = (int *)v88;
              v97 = v89;
              if ((int)v89 >= 1)
              {
                do
                {
                  v98 = *v96;
                  v96 += 2;
                  v94 += v98;
                  --v97;
                }
                while (v97);
              }
              ++v93;
              v88 += v95;
            }
            while (v93 != v82);
          }
          v99 = ((1 << (2 * v78 - 1)) + (unint64_t)v94 - ((v84 * v84) >> (2 * v78))) >> (2 * v78);
          if (v13 == 3)
          {
            v100 = v78 - v14;
            if ((int)v78 - v14 <= (int)v79)
              v100 = *v77;
            if (v100 < (int)v78)
            {
              v101 = v100;
              do
              {
                ++v101;
                if (v99 < 0x3A99 || (_DWORD)v101 != (_DWORD)v78)
                {
                  v102 = 1 << v101;
                  v103 = v367 - (1 << v101) >= (v16 - (1 << v101) + v378)
                       ? v16 - (1 << v101) + v378
                       : v367 - (1 << v101);
                  if (v16 <= v103)
                  {
                    v104 = 0;
                    v105 = 0;
                    v106 = 0;
                    v107 = v378 - v102 + v15;
                    if (v21 - v102 < v107)
                      v107 = v21 - v102;
                    v108 = (v78 - v101);
                    v109 = v16;
                    while (v15 > v107)
                    {
LABEL_144:
                      v109 += v102;
                      if (v109 > v103)
                      {
                        if (v106
                          && v106 == v104
                          && (v105 + (v106 >> 1)) / v106 < (1431655766
                                                          * (unint64_t)(2 * word_1B69224F8[v108])) >> 32)
                        {
                          *(_DWORD *)(a1 + 204) = v78 - v101;
                        }
                        goto LABEL_135;
                      }
                    }
                    v110 = v15;
                    while (1)
                    {
                      v111 = *(_DWORD *)(*(_QWORD *)&v388[4 * (v78 - v101) + 394]
                                       + 4
                                       * ((v110 >> v101) + (v109 >> v101) * ((v102 + v21 - 1) >> v101)));
                      if (v111 >= word_1B69224F8[v108])
                        break;
                      ++v104;
                      v105 += v111;
                      ++v106;
                      v110 += v102;
                      if (v110 > v107)
                        goto LABEL_144;
                    }
                  }
                }
LABEL_135:
                ;
              }
              while ((_DWORD)v101 != (_DWORD)v78);
            }
          }
          if (v99 >= 0x2EE1)
          {
            a2 = v382;
            v3 = a1;
            v17 = v363;
            if ((int)v78 - v26 > (int)v79)
            {
              v112 = -v26 + (unint64_t)v78;
              v76 = v26;
              do
              {
                if (v16 < v22)
                {
                  v113 = 0;
                  v114 = 0;
                  v115 = 0;
                  v116 = v78 - v112;
                  v117 = 1 << v112;
                  v118 = (v78 - v112);
                  v119 = v16;
                  do
                  {
                    if (v15 < v24)
                    {
                      v120 = v15;
                      do
                      {
                        v121 = *(_DWORD *)(*(_QWORD *)&v388[4 * (v78 - v112) + 394]
                                         + 4
                                         * ((v120 >> v112)
                                          + (v119 >> v112) * (((1 << v112) + v21 - 1) >> v112)));
                        ++v113;
                        if (v121 <= word_1B69224F8[v118])
                          v121 = 0;
                        else
                          ++v115;
                        v114 += v121;
                        v120 += v117;
                      }
                      while (v120 < v24);
                    }
                    v119 += v117;
                  }
                  while (v119 < v22);
                  a2 = v382;
                  v3 = a1;
                  if (v113 && v115 > v113 >> 2
                    || v115 && (v114 + (v115 >> 1)) / v115 > 2 * word_1B69224F8[v118])
                  {
                    v76 = v116 + 1;
                    *(_DWORD *)(a1 + 208) = v116 + 1;
                  }
                }
                --v112;
              }
              while (v112 > v79);
              goto LABEL_169;
            }
            goto LABEL_168;
          }
          v76 = v26;
          a2 = v382;
          v3 = a1;
          v17 = v363;
        }
LABEL_169:
        if (v4[8])
        {
          v8 = v371;
          if (v17[2009] - v76 <= 4)
            *(_DWORD *)(v3 + 208) = v374;
        }
        else
        {
          v8 = v371;
        }
        goto LABEL_173;
      }
LABEL_168:
      v76 = v26;
      goto LABEL_169;
    }
    if (*(_DWORD *)(*(_QWORD *)(v9 + 79216) + 444))
    {
      if (v22 <= v16)
      {
        v30 = 0;
        v29 = 0;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = v19 + v15;
        if (v24 <= v19 + v15)
          v32 = v19 + v15;
        else
          v32 = v24;
        if (v31 >= v24)
          v33 = v19 + v15;
        else
          v33 = v31 + 1;
        v34 = (v32 - v33) >> v18;
        if (v31 < v24)
          ++v34;
        v35 = (v34 & 0xFFFFFFFC) + 4;
        v36.i64[0] = 0x100000001;
        v36.i64[1] = 0x100000001;
        v37 = (int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v34 & 0xFFFFFFFC), (int8x16_t)xmmword_1B6917630), (uint32x4_t)vdupq_n_s32(v34));
        v38 = v16;
        do
        {
          if (v24 > v15)
          {
            v39 = *(_QWORD *)(v3 + 960);
            v40 = *(_DWORD *)(v39 + 4);
            v41 = (int32x4_t)v29;
            v42 = (int32x4_t)v30;
            v43 = vdupq_n_s32(*(char *)(*(_QWORD *)(v39 + 8 * (v40 - 3) + 1488)
                                      + (((*(_DWORD *)(v39 + 16) + ~(-1 << v40)) & (-1 << v40)) >> v40) * (v16 >> v40)
                                      + (v15 >> v40)));
            v44 = v35;
            do
            {
              v45 = (int8x16_t)v42;
              v46 = (int8x16_t)v41;
              v42 = vaddq_s32(v42, v43);
              v41 = vaddq_s32(v41, v36);
              v44 -= 4;
            }
            while (v44);
            v30 = vaddvq_s32((int32x4_t)vbslq_s8(v37, v45, (int8x16_t)v42));
            v29 = vaddvq_s32((int32x4_t)vbslq_s8(v37, v46, (int8x16_t)v41));
          }
          v38 += v19;
        }
        while (v38 < v22);
      }
      v47 = (v30 + (v29 >> 1)) / v29;
    }
    else
    {
      v47 = *(_DWORD *)(v3 + 24);
    }
    v49 = v15 >= v19 || v16 >= v19 || v28;
    if (v49 == 1)
    {
      if (v15 < v19 || v22 <= v16)
      {
        v50 = 0;
        v55 = v374;
      }
      else
      {
        v50 = 0;
        v51 = *(_QWORD *)(v9 + 1360);
        v52 = *(_QWORD *)(v51 + 512);
        v53 = *(_QWORD *)(v51 + 488);
        v54 = v16;
        v55 = v374;
        do
        {
          v56 = *(_WORD *)(v52 + 2 * (((uint64_t)(v15 - v19) >> 3) + v53 * ((uint64_t)v54 >> 3)));
          v57 = (v56 >> 9) - v47;
          if (v57 < 0)
            v57 = v47 - (v56 >> 9);
          if (v57 <= 2)
          {
            v58 = v56 & 3;
            if (v55 >= v58)
              v55 = v58;
            if (v50 <= v58)
              v50 = v58;
          }
          v54 += v19;
        }
        while (v54 < v22);
      }
      v59 = v16 - v19;
      if (v16 >= v19 && v24 > v15)
      {
        v60 = *(_QWORD *)(v9 + 1360);
        v61 = *(_QWORD *)(v60 + 512);
        v62 = *(_QWORD *)(v60 + 488) * ((uint64_t)v59 >> 3);
        v63 = v15;
        do
        {
          v64 = *(_WORD *)(v61 + 2 * (v62 + (v63 >> 3)));
          v65 = (v64 >> 9) - v47;
          if (v65 < 0)
            v65 = v47 - (v64 >> 9);
          if (v65 <= 2)
          {
            v66 = v64 & 3;
            if (v55 >= v66)
              v55 = v66;
            if (v50 <= v66)
              v50 = v66;
          }
          v63 += v19;
        }
        while (v63 < v24);
      }
      if (v28 && v23 < v25)
      {
        v67 = *(_QWORD *)(v9 + 1360);
        v68 = *(_QWORD *)(v67 + 512);
        v69 = *(_QWORD *)(v67 + 488) * ((uint64_t)v59 >> 3);
        do
        {
          v70 = *(_WORD *)(v68 + 2 * (v69 + (v23 >> 3)));
          v71 = (v70 >> 9) - v47;
          if (v71 < 0)
            v71 = v47 - (v70 >> 9);
          if (v71 <= 2)
          {
            v72 = v70 & 3;
            if (v55 >= v72)
              v55 = v72;
            if (v50 <= v72)
              v50 = v72;
          }
          v23 += v19;
        }
        while (v23 < v25);
      }
      if (v15 >= v19 && v16 >= v19)
      {
        v73 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 1360) + 512)
                       + 2
                       * (*(_QWORD *)(*(_QWORD *)(v9 + 1360) + 488) * ((uint64_t)(v16 - v19) >> 3) + ((v15 - v19) >> 3)));
        v74 = (v73 >> 9) - v47;
        if (v74 < 0)
          v74 = v47 - (v73 >> 9);
        if (v74 <= 2)
        {
          v75 = v73 & 3;
          if (v55 >= v75)
            v55 = v75;
          if (v50 <= v75)
            v50 = v75;
          goto LABEL_102;
        }
      }
      if (v55 <= v50)
      {
LABEL_102:
        v14 = (v55 - (v55 == v50)) & ~((v55 - (v55 == v50)) >> 31);
        if (v50 + 1 < v374)
          v26 = v50 + 1;
        else
          v26 = v374;
        *(_DWORD *)(v3 + 204) = v14;
        *(_DWORD *)(v3 + 208) = v26;
        goto LABEL_106;
      }
    }
    v14 = 0;
    v26 = v374;
    goto LABEL_106;
  }
LABEL_173:
  *v4 = 0;
  if (*(_BYTE *)(v12 + 579) && *(_BYTE *)(v12 + 569) == 2 && *(unsigned __int8 *)(v9 + 10) <= 1u)
  {
    v122 = *(_QWORD **)(v3 + 8136);
    if (v122)
    {
      v123 = *(_DWORD *)(v3 + 4432);
      v124 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 1880) + 2013);
      LODWORD(v125) = v123 >> 4;
      v126 = v123 + v124;
      if (*(_DWORD *)(v3 + 20) < v126)
        v126 = *(_DWORD *)(v3 + 20);
      if ((int)v125 < v126 >> 4)
      {
        v127 = *(_DWORD *)(v3 + 4428);
        v128 = v126 >> 4;
        v129 = *(double *)(v12 + 496);
        v130 = v127 + v124;
        if (*(_DWORD *)(v3 + 16) >= v130)
          v131 = v130;
        else
          v131 = *(_DWORD *)(v3 + 16);
        v132 = v131 >> 4;
        v133 = v127 >> 4;
        v134 = *(unsigned __int8 *)(v12 + 492);
        v135 = (uint64_t)v127 >> 4;
        v125 = (int)v125;
        v136 = v128;
        v137 = ((uint64_t)v131 >> 4) - v133;
        do
        {
          if ((int)v135 < v132)
          {
            v138 = v135 + *v122 * v125;
            v139 = (unsigned __int16 *)(v122[18] + 2 * v138);
            v140 = (unsigned __int16 *)(v122[4] + 2 * v138);
            v141 = (unsigned __int8 *)(v138 + v122[1]);
            for (i = v137; i; --i)
            {
              v144 = *v141++;
              v143 = v144;
              v146 = *v140++;
              v145 = v146;
              v148 = *v139++;
              v147 = v148;
              if (v134)
              {
                if (v143 <= 0x19 && v129 * (double)v147 > (double)v145)
                  goto LABEL_194;
              }
              else if (v143 < 0x1A)
              {
                goto LABEL_194;
              }
            }
          }
          ++v125;
        }
        while (v125 != v136);
      }
      v149 = 1;
    }
    else
    {
LABEL_194:
      v149 = 0;
    }
    *v4 = v149;
  }
  if (*(_BYTE *)(v10 + 408))
  {
    v11 = *(_BYTE *)(v9 + 10) == 1;
    v4[1] = v11;
    v150 = (BOOL *)(v4 + 1);
    if (v11)
    {
      v151 = *(_QWORD *)(v3 + 960);
      if (*(int *)(v151 + 1756) >= 1 && *(_BYTE *)(v10 + 409))
      {
        v152 = sub_1B682BF38(v151, *(_DWORD *)(v3 + 4428), *(_DWORD *)(v3 + 4432), *(unsigned __int8 *)(*(_QWORD *)(v3 + 1880) + 2013));
        v153 = !v152;
        *v150 = !v152;
      }
      else
      {
        v153 = 1;
      }
    }
    else
    {
      v153 = 0;
    }
  }
  else
  {
    v153 = 0;
    v4[1] = 0;
    v150 = (BOOL *)(v4 + 1);
  }
  *(_BYTE *)(v10 + 410) &= v153;
  if (*(_DWORD *)(v10 + 444))
  {
    if (v153)
      v154 = *(_DWORD *)(*(_QWORD *)(v3 + 1888) + 1620) < 5;
    else
      v154 = 0;
    v153 = v154;
    *v150 = v153;
  }
  v390 = 0;
  if (v153)
  {
    sub_1B683A5D8(v3, *(unsigned __int8 **)(v3 + 4456), *(_DWORD *)(v3 + 4428), *(_DWORD *)(v3 + 4432), 0, *(_DWORD *)(v3 + 24));
    sub_1B68428EC((_QWORD *)v3, *(unsigned int *)(v3 + 4428), *(unsigned int *)(v3 + 4432), 0, (unsigned __int8 **)(v3 + 4456), *(unsigned int *)(v3 + 4436), a2, &v390);
  }
  else
  {
    v155 = *a2;
    sub_1B683DD38(v3, *(unsigned int *)(v3 + 4428), *(unsigned int *)(v3 + 4432), 0, (unsigned __int8 **)(v3 + 4584), (unsigned __int8 **)(v3 + 4456), *(_DWORD *)(v3 + 4436), a2, &v390, *(_DWORD *)(v3 + 24));
    if (*v4)
    {
      v390 = 0;
      *a2 = v155;
      sub_1B683B148((int *)v3, 0);
      sub_1B6841824(v3, *(unsigned int *)(v3 + 4428), *(unsigned int *)(v3 + 4432), 0, *(unsigned int *)(v3 + 4436), a2, &v390);
    }
    else
    {
      if (*(_BYTE *)(v3 + 8))
      {
        v390 = 0;
        *a2 = v155;
        sub_1B6841DFC(v3, *(_DWORD *)(v3 + 4428), *(_DWORD *)(v3 + 4432), *(unsigned __int8 **)(v3 + 4456), 1, 0, 0, 0, 0);
        sub_1B68420B8(v3, *(unsigned int *)(v3 + 4428), (unsigned __int8 *)*(unsigned int *)(v3 + 4432), 0, *(_DWORD *)(v3 + 4436), *(unsigned int *)(v3 + 24), a2, &v390);
      }
      sub_1B683B148((int *)v3, 1);
    }
  }
  result = sub_1B6841DFC(v3, *(_DWORD *)(v3 + 4428), *(_DWORD *)(v3 + 4432), *(unsigned __int8 **)(v3 + 4456), 0, 0, 0, 0, 0);
  v159 = *(_QWORD *)(v3 + 1872);
  if (!*(_BYTE *)(v159 + 547))
  {
    v160.n128_u64[0] = (unint64_t)sub_1B6842A54(v3, *(unsigned int *)(v3 + 4428), *(unsigned int *)(v3 + 4432), 0, *(int8x8_t *)v157.i8);
    v161 = *(_QWORD *)(v3 + 1872);
    v162 = *(_QWORD *)(v161 + 3344);
    v163 = *(uint64_t (**)(_QWORD *, __n128))(v161 + 3336);
    v164 = (_QWORD *)(v161 + (v162 >> 1) + 3320);
    if ((v162 & 1) != 0)
      v163 = *(uint64_t (**)(_QWORD *, __n128))(*v164 + v163);
    result = v163(v164, v160);
    v159 = *v8;
  }
  if (!*(_BYTE *)(v159 + 496) && !*(_BYTE *)(v159 + 497))
    return result;
  v157.i32[1] = 0;
  *(_QWORD *)(v3 + 160) = 0xFFFFFFFFLL;
  if (*(_DWORD *)(v10 + 444))
  {
    v165 = *(_QWORD *)(v3 + 1880);
    v166 = *(unsigned __int8 *)(v165 + 2013);
    v167 = *(_DWORD *)(v3 + 4428);
    v168 = *(_DWORD *)(v3 + 792) - v167;
    if (v168 >= v166)
      v169 = *(unsigned __int8 *)(v165 + 2013);
    else
      v169 = *(_DWORD *)(v3 + 792) - v167;
    if (v168 <= 0)
      v170 = 0;
    else
      v170 = v169;
    v171 = *(_DWORD *)(v3 + 4432);
    v172 = *(_DWORD *)(v3 + 796) - v171;
    if (v172 < v166)
      v166 = *(_DWORD *)(v3 + 796) - v171;
    if (v172 <= 0)
      v173 = 0;
    else
      v173 = v166;
    if (v170 && v173)
    {
      if (v173 < 1)
      {
        v175 = 0;
        v174 = 0;
      }
      else
      {
        v174 = 0;
        v175 = 0;
        v177 = 1 << *(_DWORD *)(*(_QWORD *)(v3 + 1888) + 1620);
        v178 = v173 + v171;
        result = (v170 + v167);
        do
        {
          if (v170 >= 1)
          {
            v179 = *(_DWORD *)(v3 + 4428);
            do
            {
              v176 = *(unsigned __int8 **)(v3 + 4456);
              v174 += *(__int16 *)(*((_QWORD *)v176 + 11)
                                 + 2
                                 * (((unint64_t)*v176 >> 3) * ((v171 - *((_DWORD *)v176 + 2)) >> 3)
                                  + ((v179 - *((_DWORD *)v176 + 1)) >> 3))) >> 9;
              v179 += v177;
              ++v175;
            }
            while (v179 < (int)result);
          }
          v171 += v177;
        }
        while (v171 < v178);
      }
      if (v175 >= 0)
        v181 = v175;
      else
        v181 = v175 + 1;
      v180 = (v174 + (v181 >> 1)) / v175;
    }
    else
    {
      v180 = *(_DWORD *)(v3 + 24);
    }
    *(_DWORD *)(v3 + 168) = v180;
    if (v180 > 51)
    {
      v186 = 0;
      v187 = 0;
      v188 = 0;
    }
    else
    {
      v182 = (unsigned __int8 *)(v159 + 78582);
      v183 = *(_DWORD *)(v159 + 79036) == 3;
      v184 = v180 + *(unsigned __int8 *)(v165 + 2001);
      if (v184 >= 63)
        v184 = 63;
      v185 = v184 & ~(v184 >> 31);
      v186 = dword_1B6923630[70 * *v182 + v185];
      v187 = word_1B6923BA8[512 * (unint64_t)v182[1] + 256 * v183 + 64 * (unint64_t)*v182 + v185];
      v188 = (unsigned __int16)word_1B69243A8[52 * v183 + (v180 & ~(v180 >> 31))];
    }
    *(_DWORD *)(v3 + 172) = v186;
    *(_DWORD *)(v3 + 176) = v187;
    *(_DWORD *)(v3 + 180) = v188;
    v159 = *(_QWORD *)(v3 + 1872);
  }
  v189 = v159 + 78120;
  v190 = *(_QWORD *)(v3 + 944);
  v191 = *(int *)(v3 + 4420);
  v192 = *(_DWORD *)(v3 + 4424);
  v193 = *(unsigned __int8 **)(v3 + 4456);
  v194 = v191 + *(_DWORD *)(v189 + 20) * v192;
  v195 = *(_QWORD *)(v189 + 928);
  v196 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v189 + 664) + 16 * v194);
  *v196 = 0;
  v196[1] = 0;
  v197 = *(_QWORD *)v189;
  if (*(_BYTE *)(*(_QWORD *)v189 + 136))
  {
    v198 = *(_DWORD *)(v189 + 12);
    v199 = *(_DWORD *)(v189 + 16) - 1;
    v200 = (v199 + *(_DWORD *)(v197 + 240)) >> v198;
    v201 = (v199 + *(_DWORD *)(v197 + 244)) >> v198;
    if (v200 <= v191 || v201 <= v192)
    {
      v203 = v200 <= v191;
      v204 = v200 < v191;
      v205 = v201 >= v192;
      v206 = (char *)(*(_QWORD *)(v189 + 928) + 2 * (int)(*(_DWORD *)(v189 + 20) * v192) + 2 * v191);
      v207 = v201 <= v192 || v204;
      *v206 = v207;
      v208 = !v205 || v203;
      v206[1] = v208;
      v209 = v206 + 1;
      if ((_DWORD)v191)
      {
        if (v192)
          v210 = v207;
        else
          v210 = 1;
        if ((v210 & 1) == 0)
          return result;
      }
      else
      {
        *v206 = 0;
        if (v192)
          return result;
      }
LABEL_321:
      *v209 = 0;
      return result;
    }
  }
  v211 = v194;
  v212 = (_BYTE *)(v195 + 2 * v194);
  if (*(_BYTE *)(v189 + 920))
  {
    v213 = *(_DWORD *)(v189 + 16);
    v214 = v213 * v191;
    v215 = v213 * v192;
    v216 = *(_QWORD *)(v189 + 944);
    if (*(_BYTE *)(v216 + 136))
    {
      v217 = *(_DWORD *)(v216 + 248);
      if (v217 <= 0)
        v217 = *(_DWORD *)(v216 + 240);
      v218 = *(_DWORD *)(v216 + 252);
      if (v218 <= 0)
        v218 = *(_DWORD *)(v216 + 244);
    }
    else
    {
      v217 = *(_DWORD *)(v216 + 276);
      v218 = *(_DWORD *)(v216 + 280);
    }
    if (v213 + v214 < v217)
      v217 = v213 + v214;
    v219 = v213 + v215;
    if (v219 < v218)
      v218 = v219;
    if (v218 <= v215)
    {
      v221 = 0;
      v220 = 0;
    }
    else
    {
      v220 = 0;
      v221 = 0;
      v222 = 1 << *(_DWORD *)(v189 + 28);
      do
      {
        if (v217 > v214)
        {
          result = -*((_DWORD *)v193 + 1);
          v223 = v214;
          do
          {
            v221 += (*(unsigned __int16 *)(*((_QWORD *)v193 + 11)
                                         + 2
                                         * (((unint64_t)*v193 >> 3)
                                          * ((v215 - *((_DWORD *)v193 + 2)) >> 3)
                                          + ((v223 - *((_DWORD *)v193 + 1)) >> 3))) >> 7) & 1;
            v223 += v222;
            ++v220;
          }
          while (v223 < v217);
        }
        v215 += v222;
      }
      while (v215 < v218);
    }
    if (v221 >= (96 * v220) >> 7)
    {
      *(_BYTE *)v196 = -86;
      *v212 = 0;
      v209 = (_BYTE *)(v195 + 2 * v211 + 1);
      goto LABEL_321;
    }
  }
  v352 = v190;
  v353 = v211;
  v354 = v195;
  v355 = v212;
  v356 = v196;
  v389 = v189;
  v357 = v192;
  v358 = v191;
  if (*(_BYTE *)(v189 + 912))
  {
    sub_1B687C558((_QWORD *)v189, v191, v192, 0, (uint64_t)v391);
    v401 = 0;
    v394 = 0;
    v395 = 0;
    v224 = v191 + *(_DWORD *)(v189 + 20) * v192;
    v225 = *(_QWORD *)(*(_QWORD *)v189 + 664);
    v226 = atomic_load((unsigned __int8 *)&qword_1EF1392B8);
    if ((v226 & 1) == 0 && __cxa_guard_acquire(&qword_1EF1392B8))
    {
      word_1EF1392B0 = 0;
      byte_1EF1392B2 = 0;
      v347 = -*(unsigned __int8 *)(v189 + 960);
      byte_1EF1392B3 = -*(_BYTE *)(v189 + 960);
      byte_1EF1392B4 = v347;
      __cxa_guard_release(&qword_1EF1392B8);
    }
    v227 = atomic_load((unsigned __int8 *)&qword_1EF1392C8);
    if ((v227 & 1) == 0 && __cxa_guard_acquire(&qword_1EF1392C8))
    {
      byte_1EF1392C0[0] = *(_BYTE *)(v189 + 960);
      byte_1EF1392C1 = byte_1EF1392C0[0];
      word_1EF1392C2 = 0;
      byte_1EF1392C4 = 0;
      __cxa_guard_release(&qword_1EF1392C8);
    }
    v228 = 0;
    v364 = v224;
    v368 = v225;
    v375 = v225 + 16 * v224;
    v379 = (_DWORD *)(v375 + 1);
    v229 = v391;
    v230 = v392;
    v231 = 0x7FFFFFFF;
    v383 = 5;
    do
    {
      v372 = v231;
      v232 = 0;
      v233 = 0;
      v234 = 0;
      do
      {
        if (v232 != 2)
        {
          v235 = *(_DWORD *)&v229[4 * v232];
          v236 = (unsigned __int16)v230[v232];
          if (v230[v232])
          {
            if (v235 >= 0)
              v237 = (unsigned __int16)v230[v232];
            else
              v237 = -v236;
            v238 = (v237 + 2 * v235) / (2 * v236);
            v239 = byte_1EF1392C0[v232];
            if (v238 < v239)
              v239 = (v237 + 2 * v235) / (2 * v236);
            if (v238 <= *((char *)&word_1EF1392B0 + v232))
              v240 = *((char *)&word_1EF1392B0 + v232);
            else
              v240 = v239;
          }
          else
          {
            v240 = 0;
          }
          v394 = v240;
          LODWORD(v396) = 0;
          v241 = sub_1B687C8D4(v189, v236, v235, &v394, (int *)&v396, v228, *(_DWORD *)(v3 + 172));
          v189 = v389;
          v233 += v241;
          v234 += (int)v396;
          *((_BYTE *)&v398 + byte_1B692B560[v232] - 1) = v394;
        }
        ++v232;
      }
      while (v232 != 5);
      v395 = v233;
      v401 = v234;
      v242 = *(_DWORD *)(v3 + 172);
      if (*(_DWORD *)(v189 + 916) == 1)
      {
        sub_1B687C9B8(v189, (uint64_t)v391, v228, (char *)&v398, 0, &v401, &v395, v242);
        v189 = v389;
        v233 = v395;
        v234 = v401;
      }
      v395 = v233 + 4;
      v243 = v234 + v242 * (v233 + 4);
      v231 = v372;
      v3 = a1;
      if (v243 < v372)
      {
        *(_DWORD *)(a1 + 160) = v234;
        *(_DWORD *)(a1 + 164) = v233 + 4;
        *v379 = v398;
        v231 = v243;
        v383 = v228;
      }
      ++v228;
      v230 += 15;
      v229 += 60;
    }
    while (v228 != 4);
    v244 = *(_DWORD *)(a1 + 172);
    if (*(_BYTE *)(v189 + 920))
    {
      v245 = (char *)v375;
      LOBYTE(v246) = v383;
    }
    else
    {
      v248 = v231;
      for (j = 0; j != 32; ++j)
      {
        v250 = *(_DWORD *)&v392[2 * j + 60];
        v251 = (unsigned __int16)v392[j + 252];
        if (v392[j + 252])
        {
          if (v250 >= 0)
            v252 = (unsigned __int16)v392[j + 252];
          else
            v252 = -v251;
          v253 = (v252 + 2 * v250) / (2 * v251);
          v254 = *(unsigned __int8 *)(v189 + 33);
          if (v253 >= v254)
            v255 = *(unsigned __int8 *)(v189 + 33);
          else
            v255 = v253;
          if (v253 <= -v254)
            v256 = -v254;
          else
            v256 = v255;
        }
        else
        {
          v256 = 0;
          v401 = 0;
        }
        v394 = v256;
        v257 = sub_1B687C8D4(v189, v251, v250, &v394, &v401, 4, v244);
        v189 = v389;
        *((_BYTE *)&v398 + j) = v394;
        *((_DWORD *)&v397[-1] + j) = v401 + v257 * v244;
      }
      v258 = 0;
      v259 = 0;
      v260 = (_DWORD)v396 - v244 + 8 * v244 + HIDWORD(v396) + LODWORD(v397[0]);
      v246 = v383;
      v231 = v248;
      do
      {
        v261 = (_DWORD *)&v397[-1] + v258;
        v262 = v261[3] + v260;
        if (v262 < v231)
        {
          v231 = v262;
          v246 = 4;
          v259 = v258;
        }
        v260 = v262 - *v261;
        ++v258;
      }
      while (v258 != 29);
      v245 = (char *)v375;
      if (v246 == 4)
      {
        *(_BYTE *)(v368 + 16 * v364 + 13) = v259;
        *v379 = *(_DWORD *)((char *)&v398 + v259);
        v244 = *(_DWORD *)(a1 + 172);
      }
    }
    v263 = *v245;
    if (v231 >= v244)
    {
      *v245 = v263 & 0xF0 | 0xA;
      v247 = *(_DWORD *)(a1 + 172);
    }
    else
    {
      v247 = v231;
      *v245 = v263 & 0xF0 | (2 * (v246 & 7)) | 1;
    }
    v192 = v357;
  }
  else
  {
    v247 = 0;
  }
  if (*(_BYTE *)(v189 + 913))
  {
    sub_1B687C558((_QWORD *)v189, v191, v192, 1, (uint64_t)v391);
    v189 = v389;
    v395 = 0;
    v393 = 0;
    v264 = v191 + *(_DWORD *)(v389 + 20) * v192;
    v350 = v264;
    v351 = *(_QWORD *)(*(_QWORD *)v389 + 664);
    v349 = v264;
    if (*(_BYTE *)(v389 + 920))
    {
      v361 = 5;
      v365 = 0x7FFFFFFF;
    }
    else
    {
      v394 = 0;
      v265 = atomic_load((unsigned __int8 *)&qword_1EF1392D8);
      if ((v265 & 1) == 0)
      {
        v189 = v389;
        if (__cxa_guard_acquire(&qword_1EF1392D8))
        {
          word_1EF1392D0 = 0;
          byte_1EF1392D2 = 0;
          v348 = -*(unsigned __int8 *)(v389 + 960);
          byte_1EF1392D3 = -*(_BYTE *)(v389 + 960);
          byte_1EF1392D4 = v348;
          __cxa_guard_release(&qword_1EF1392D8);
          v189 = v389;
        }
      }
      v266 = atomic_load((unsigned __int8 *)&qword_1EF1392E8);
      if ((v266 & 1) == 0)
      {
        v189 = v389;
        if (__cxa_guard_acquire(&qword_1EF1392E8))
        {
          byte_1EF1392E0[0] = *(_BYTE *)(v389 + 960);
          byte_1EF1392E1 = byte_1EF1392E0[0];
          word_1EF1392E2 = 0;
          byte_1EF1392E4 = 0;
          __cxa_guard_release(&qword_1EF1392E8);
          v189 = v389;
        }
      }
      v267 = 0;
      v268 = v351 + 16 * v264;
      v369 = (_DWORD *)(v268 + 5);
      v359 = (_DWORD *)(v268 + 9);
      v380 = v391;
      v376 = v392;
      v365 = 0x7FFFFFFF;
      v361 = 5;
      do
      {
        v269 = 0;
        v394 = 0;
        v395 = 0;
        v270 = 1;
        do
        {
          v271 = 0;
          v384 = v269;
          v273 = v394;
          v272 = v395;
          v274 = v270 - 1;
          v275 = &v376[5 * v270];
          do
          {
            if (v271 != 2)
            {
              v276 = *(_DWORD *)&v380[20 * v270 + 4 * v271];
              v277 = (unsigned __int16)v275[v271];
              if (v275[v271])
              {
                if (v276 >= 0)
                  v278 = (unsigned __int16)v275[v271];
                else
                  v278 = -v277;
                v279 = (v278 + 2 * v276) / (2 * v277);
                v280 = byte_1EF1392E0[v271];
                if (v279 < v280)
                  v280 = (v278 + 2 * v276) / (2 * v277);
                if (v279 <= *((char *)&word_1EF1392D0 + v271))
                  v281 = *((char *)&word_1EF1392D0 + v271);
                else
                  v281 = v280;
              }
              else
              {
                v281 = 0;
              }
              v393 = v281;
              LODWORD(v396) = 0;
              v282 = sub_1B687C8D4(v189, v277, v276, &v393, (int *)&v396, v267, *(_DWORD *)(a1 + 176));
              v189 = v389;
              v273 += v282;
              v272 += (int)v396;
              *((_BYTE *)&v398 + 32 * v274 + byte_1B692B560[v271] - 1) = v393;
            }
            ++v271;
          }
          while (v271 != 5);
          v394 = v273;
          v395 = v272;
          if (*(_DWORD *)(v189 + 916) == 1)
          {
            sub_1B687C9B8(v189, (uint64_t)v391, v267, (char *)&v398 + 32 * v274, v270, &v395, &v394, *(_DWORD *)(a1 + 176));
            v189 = v389;
          }
          v269 = 1;
          v270 = 2;
        }
        while ((v384 & 1) == 0);
        v394 += 4;
        v3 = a1;
        v283 = v395 + *(_DWORD *)(a1 + 176) * v394;
        v284 = v365;
        if (v283 < v365)
        {
          *v369 = v398;
          *v359 = v400[0];
          v284 = v283;
          v361 = v267;
        }
        v365 = v284;
        ++v267;
        v376 += 15;
        v380 += 60;
      }
      while (v267 != 4);
    }
    v285 = 0;
    v360 = (char *)(v351 + 16 * v350);
    v286 = *(_DWORD *)(v3 + 176);
    v287 = 12 * v286;
    v288 = 1;
    do
    {
      v289 = 0;
      v290 = &v397[4 * v288 + 11];
      v385 = v285;
      v291 = v288 - 1;
      v292 = &v392[32 * v288 + 252];
      v293 = &v392[64 * v288 + 60];
      do
      {
        v294 = *(_DWORD *)&v293[2 * v289];
        v295 = (unsigned __int16)v292[v289];
        if (v292[v289])
        {
          if (v294 >= 0)
            v296 = (unsigned __int16)v292[v289];
          else
            v296 = -v295;
          v297 = (v296 + 2 * v294) / (2 * v295);
          v298 = *(unsigned __int8 *)(v189 + 33);
          if (v297 >= v298)
            v299 = *(unsigned __int8 *)(v189 + 33);
          else
            v299 = v297;
          if (v297 <= -v298)
            v300 = -v298;
          else
            v300 = v299;
        }
        else
        {
          v300 = 0;
          v395 = 0;
        }
        v393 = v300;
        v301 = sub_1B687C8D4(v189, v295, v294, &v393, &v395, 4, v286);
        v189 = v389;
        *((_BYTE *)v290 + v289) = v393;
        *((_DWORD *)&v397[-1] + v289++) = v395 + v301 * v286;
      }
      while (v289 != 32);
      v302 = 0;
      v303 = HIDWORD(v396) + (_DWORD)v396 + LODWORD(v397[0]);
      v304 = 0x7FFFFFFF;
      do
      {
        v305 = *((_DWORD *)v397 + v302 + 1) + v303;
        if (v305 < v304)
        {
          *(&v401 + v291) = v302;
          v304 = v305;
        }
        v303 = v305 - *((_DWORD *)&v397[-1] + v302++);
      }
      while (v302 != 29);
      v287 += v304;
      v285 = 1;
      v288 = 2;
    }
    while ((v385 & 1) == 0);
    v306 = v365;
    v3 = a1;
    if (v287 < v365)
    {
      v307 = v351 + 16 * v349;
      v308 = v401;
      v309 = v402;
      *(_BYTE *)(v307 + 14) = v401;
      *(_DWORD *)(v307 + 5) = *(_DWORD *)((char *)&v398 + v308);
      *(_BYTE *)(v307 + 15) = v309;
      *(_DWORD *)(v307 + 9) = *(_DWORD *)((char *)v400 + v309);
      v286 = *(_DWORD *)(a1 + 176);
      v361 = 4;
      v306 = v287;
    }
    LODWORD(v191) = v358;
    v310 = *v360;
    if (v306 >= v286)
    {
      *v360 = v310 & 0xF | 0xA0;
      v306 = *(_DWORD *)(a1 + 176);
    }
    else
    {
      *v360 = v310 & 0xF | (32 * v361) | 0x10;
    }
    v192 = v357;
    v247 += (*(_DWORD *)(a1 + 180) * v306) >> 8;
  }
  v311 = v191 + *(_DWORD *)(v189 + 20) * v192;
  v312 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)v189 + 664) + 16 * v311);
  v377 = *(_QWORD *)(v189 + 928);
  v397[0] = 0;
  v396 = 0;
  LOWORD(v395) = 0;
  v373 = (_WORD *)(v377 + 2 * v311);
  *v373 = 0;
  if ((int)v191 < 1)
  {
    v366 = 0;
  }
  else
  {
    LOBYTE(v395) = 1;
    v366 = v312 - 16;
    v396 = v312 - 16;
  }
  v381 = v312;
  if ((int)v192 < 1)
  {
    v362 = 0;
  }
  else
  {
    BYTE1(v395) = 1;
    v362 = &v312[-16 * *(int *)(v189 + 20)];
    v397[0] = v362;
  }
  v313 = v247;
  v314 = 0;
  v386 = 0;
  v370 = v311;
  v315 = *(unsigned __int8 *)(v352 + 40);
  v316 = word_1B692B566[v315 ^ 1];
  LODWORD(v315) = word_1B692B566[v315] + v316;
  v401 = v316;
  v402 = v315;
  result = (uint64_t)v392;
  v317 = -1;
  v318 = 1;
  v319 = -1;
  do
  {
    v320 = v318;
    if (!*((_BYTE *)&v395 + v314))
      goto LABEL_432;
    v321 = (unsigned __int8 *)v397[v314 - 1];
    if (!v321)
    {
      v3 = a1;
      goto LABEL_432;
    }
    v399 = 0;
    v398 = 0;
    v322 = *(unsigned __int8 *)(v189 + 912);
    v323 = *(unsigned __int8 *)(v189 + 913);
    if (!(v323 | v322))
    {
      v335 = 0;
      goto LABEL_430;
    }
    v324 = v322 == 0;
    v325 = *v321;
    v326 = &v392[5 * v324];
    v327 = &v391[20 * v324];
    do
    {
      if (v324)
      {
        v328 = v325 >> 5;
        if ((v325 & 0x10) == 0)
          goto LABEL_424;
      }
      else
      {
        v328 = (v325 >> 1) & 7;
        if ((v325 & 1) == 0)
          goto LABEL_424;
      }
      if (v328 == 4)
      {
        v329 = v321[v324 + 13];
        v157.i32[0] = *((_DWORD *)&v398 + v324);
        v330 = *(int32x4_t *)&v391[128 * v324 + 360 + 4 * v329];
        v158.i32[0] = *(_DWORD *)&v321[4 * v324 + 1];
        v158 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v158.i8));
        v157 = vmlaq_s32(v157, vmlaq_s32(vnegq_s32(vaddq_s32(v330, v330)), v158, (int32x4_t)vmovl_u16(*(uint16x4_t *)&v391[64 * v324 + 744 + 2 * v329])), v158);
        *((_DWORD *)&v398 + v324) = vaddvq_s32(v157);
      }
      else if (v328 <= 3)
      {
        v331 = 0;
        v332 = &v326[15 * v328];
        v333 = &v327[60 * v328];
        do
        {
          if (v331 != 2)
          {
            v334 = (char)v321[4 * v324 + byte_1B692B560[v331]];
            *((_DWORD *)&v398 + v324) += (v334 * (unsigned __int16)v332[v331] - 2 * *(_DWORD *)&v333[4 * v331]) * v334;
          }
          ++v331;
        }
        while (v331 != 5);
      }
      if (v324)
        *((_DWORD *)&v398 + v324) = (*(_DWORD *)(a1 + 180) * *((_DWORD *)&v398 + v324)) >> 8;
LABEL_424:
      if (!v323)
        break;
      v326 += 5;
      v327 += 20;
      v205 = v324++ >= 2;
    }
    while (!v205);
    v335 = v399 + HIDWORD(v398) + v398;
    v189 = v389;
LABEL_430:
    v3 = a1;
    v336 = *(&v401 + v314);
    if (v335 + ((v336 * *(_DWORD *)(a1 + 172)) >> 8) < v313)
    {
      v386 = v336 >> 8;
      v313 = v335 + ((v336 * *(_DWORD *)(a1 + 172)) >> 8);
      v319 = v314;
      v317 = v335;
    }
LABEL_432:
    v318 = 0;
    v314 = 1;
  }
  while ((v320 & 1) != 0);
  if (v313 >= *(_DWORD *)(v3 + 172) * (*(unsigned __int8 *)(v189 + 913) + *(unsigned __int8 *)(v189 + 912)))
  {
    v338 = v355;
    v337 = v356;
    v340 = v353;
    v339 = v354;
    if (v358 >= 1 && (*v366 & 0x11) == 0)
    {
      v319 = 0;
      goto LABEL_443;
    }
    if (v357 >= 1 && (*v362 & 0x11) == 0)
    {
      v319 = 1;
      goto LABEL_443;
    }
    *v312 = -86;
  }
  else
  {
    v338 = v355;
    v337 = v356;
    v340 = v353;
    v339 = v354;
    if ((v319 & 0x80000000) != 0)
      goto LABEL_446;
LABEL_443:
    *(_BYTE *)v373 = v319 == 0;
    *(_BYTE *)(v377 + 2 * v370 + 1) = v319 != 0;
    v341 = (_OWORD *)v397[v319 - 1];
    *v381 = *v341;
    if ((*(_BYTE *)v341 & 8) != 0)
    {
      *(_QWORD *)(v3 + 160) = 2147483649;
    }
    else
    {
      *(_DWORD *)(v3 + 160) = v317;
      *(_DWORD *)(v3 + 164) = v386;
    }
  }
LABEL_446:
  if (*(_BYTE *)(v189 + 436))
  {
    v342 = v339 + 2 * v340;
    v344 = *(unsigned __int8 *)(v342 + 1);
    v209 = (_BYTE *)(v342 + 1);
    v343 = v344;
    if ((*v337 & 8) == 0 || *v338 || v343)
    {
      v345 = *(_DWORD *)(v3 + 168);
      if (v345 <= 26)
      {
        v346 = *(_DWORD *)(v189 + 824) - 2 * v345 + 81;
        if (v346 >= 63)
          v346 = 63;
        if (((*(_DWORD *)(v3 + 160)
             + *(_DWORD *)(v3 + 164) * dword_1B6923630[70 * *(unsigned __int8 *)(v189 + 462) + (v346 & ~(v346 >> 31))]) & 0x80000000) == 0)
        {
          *v337 = -86;
          *v338 = 0;
          goto LABEL_321;
        }
      }
    }
  }
  return result;
}

void sub_1B683DD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5, unsigned __int8 **a6, unsigned int a7, int *a8, char *a9, int a10)
{
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  double v19;
  int16x4_t v20;
  void **v21;
  void ***v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _WORD *v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  const void *v71;
  unsigned __int8 *v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  const void *v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned __int8 *v93;
  uint64_t *v94;
  _QWORD *v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t *v110;
  uint64_t v111;
  __int128 v112;
  _BYTE *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  _BOOL4 v121;
  int v122;
  BOOL v123;
  _BOOL4 v124;
  int v125;
  unsigned __int8 *v126;
  uint64_t v127;
  int v128;
  int v129;
  unsigned int v130;
  __int16 *v131;
  int v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  void ***v137;
  int v138;
  _BOOL4 v139;
  int v140;
  uint64_t v141;
  _BOOL8 v142;
  void ***v143;
  int v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  char v149;
  void **v150;
  unsigned __int8 *v151;
  _BYTE *v152;
  BOOL v153;
  uint64_t v154;
  int v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  signed int v160;
  uint64_t v161;
  uint64_t v162;
  _WORD *v163;
  __int16 *v164;
  int32x4_t v165;
  int v166;
  BOOL *v167;
  _BOOL4 v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  unsigned int v177;
  int v178;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  __int128 *v198;
  uint64_t v199;
  __int128 *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  _WORD *v209;
  _BOOL8 v210;
  uint64_t v211;
  int v212;
  BOOL v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _WORD *v217;
  _BOOL8 v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  int v228;
  int v229;
  unsigned __int8 *v230;
  char v231;
  char v232;
  char v233;
  int v234;
  __int16 v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  unsigned __int8 *v244;
  int v245;
  unsigned __int8 *v246;
  unint64_t v247;
  uint64_t v248;
  int *v249;
  int v250;
  unsigned int v251;
  char v252;
  uint64_t v253;
  int *v254;
  int v255;
  uint64_t v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  BOOL v261;
  int v262;
  int v263;
  int v264;
  signed int v265;
  uint64_t v266;
  int v267;
  unsigned int v268;
  int v269;
  unsigned __int8 *v270;
  unsigned int v271;
  unsigned int v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _WORD *v276;
  uint64_t v277;
  int v278;
  char *v279;
  unint64_t v280;
  unint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  int v292;
  int v293;
  int v294;
  int v295;
  char v296;
  int v297;
  unsigned __int8 *v298;
  int v299;
  unsigned int v300;
  unsigned int v301;
  unint64_t v302;
  int v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int *v307;
  uint64_t v308;
  unsigned int v309;
  void **v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  char v323;
  int v324;
  int v325;
  int v326;
  _WORD *v327;
  uint64_t v328;
  unint64_t v329;
  _WORD *v330;
  _WORD *v331;
  uint64_t v332;
  unsigned int v333;
  int v334;
  _QWORD *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  void **v339;
  unsigned int v340;
  unsigned int v341;
  unint64_t v342;
  _BYTE *v343;
  unint64_t v344;
  int v345;
  unsigned __int8 *v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  int8x16_t v353;
  uint64_t v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  uint64_t v363;
  unsigned __int8 *v364;
  uint64_t v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  void **v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char v379;
  uint64_t v380;
  _OWORD *v381;
  __int128 v382;
  BOOL v383;
  int v384;
  int v385;
  unsigned int v386;
  uint64_t v387;
  char v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  uint64_t v395;
  int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  int v403;
  void **v404;
  void **v405;
  int v406;
  int v407;
  void **v408;
  unsigned int v409;
  unsigned int v410;
  unint64_t v411;
  unint64_t v413;
  unsigned int v414;
  int v415;
  int v416;
  int v417;
  char v418;
  char v419;
  void **v420;
  int v421;
  signed int v422;
  unsigned int v423;
  unsigned int v424;
  int v425;
  BOOL v428;
  unsigned int v429;
  unint64_t v430;
  unint64_t v431;
  int v432;
  int v433;
  unint64_t v434;
  int v435;
  __int16 v436;
  uint64_t v437;
  int v438;
  int v439;
  int v440;
  int v441;
  uint64_t v442;
  unsigned int v443;
  unsigned int v444;
  uint64_t v445;
  unsigned int v446;
  uint64_t v447;
  unsigned int v448;
  uint64_t v449;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  char *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  void **v459;
  unint64_t v460;
  uint64_t v461;
  unsigned int v462;
  int v463;
  unsigned int v464;
  uint64_t v465;
  unsigned int v466;
  unsigned int v467;
  uint64_t v468;
  unsigned int v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  void **v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unsigned int v480;
  int v481;
  int v482;
  unint64_t v483;
  int v484;
  int v485;
  unint64_t v486;
  int v487;
  unsigned __int8 **v488;
  void **v489;
  void **v490;
  void **v491;
  unsigned __int8 *v492;
  int v493;
  int v494;
  int v495;
  uint64_t v496;
  int v497;
  _BYTE *v498;
  uint64_t v499;
  _BOOL4 v500;
  __int16 v501;
  int v502;
  __int16 v503;
  __int16 v504;
  uint64_t v505;
  _BOOL4 v506;
  uint64_t v507;
  _BOOL4 v508;
  __int16 *v509;
  __int16 *v510;
  int v511;
  unint64_t v512;
  unint64_t v513;
  int v514;
  int v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  _BOOL4 v523;
  int v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  uint64_t v530;
  _BOOL4 v531;
  int v532;
  int v533;
  char v534;
  uint64_t v535;
  uint64_t v536;
  unsigned __int8 **v537;
  int v539;
  uint64_t v540;
  uint64_t (**v542)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t (**v543)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v544;
  _BOOL4 v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unsigned int v552;
  int v553;
  uint64_t v554;
  int v555;
  unsigned int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  uint64_t v561;
  uint64_t v562;
  char v563;
  void **v564;
  uint64_t v565;
  uint64_t v566;
  char v567;
  int v568;
  BOOL v569;
  _BYTE v570[97];
  __int128 v571;
  void *v572;
  _BYTE v573[22];
  __int16 v574;
  __int128 v575;
  void *v576;
  __int128 v577;
  void *v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  _DWORD v583[2];
  int v584;
  int v585;
  unsigned int v586;
  unsigned int v587;
  unsigned int v588;
  unsigned int v589;
  uint64_t v590;

  v10 = a4;
  v12 = a2;
  v13 = a10;
  v590 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a1 + 1880);
  v15 = *(unsigned __int8 *)(v14 + 2009) - (_DWORD)a4;
  v16 = 1 << (*(_BYTE *)(v14 + 2009) - a4);
  v525 = v16;
  v545 = v16 + (int)a2 <= *(_DWORD *)(a1 + 16) && v16 + (int)a3 <= *(_DWORD *)(a1 + 20);
  v544 = a1 + 4336;
  v563 = v15 - 1;
  v539 = 1 << (v15 - 1);
  v551 = (int)a4;
  v554 = (int)a4 + 1;
  v570[0] = 1;
  v557 = *(unsigned __int8 *)(v14 + 2008);
  v569 = v15 > v557;
  sub_1B683A5D8(a1, *a5, a2, a3, a4, a10);
  v565 = a3;
  v19 = sub_1B683A5D8(a1, *a6, v12, a3, v10, a10);
  *((_WORD *)*a6 + 107) = a10;
  v21 = (void **)*a5;
  *((_WORD *)*a5 + 107) = a10;
  v22 = (void ***)a6;
  v537 = a6;
  v566 = a1;
  v556 = v12;
  v540 = v10;
  v529 = v15;
  if ((int)v10 >= 1)
  {
    v23 = *(_DWORD *)(a1 + 4428);
    v24 = v12 - v23;
    v25 = *(_DWORD *)(a1 + 4432);
    v26 = v565 - v25;
    v27 = *(unsigned __int8 *)v21;
    v28 = v12;
    v29 = v27 >> 3;
    v30 = v27 >> 2;
    if (v28 == v23)
    {
      memcpy(v21[13], (const void *)(*(_QWORD *)(a1 + 4704) + 2 * (v26 >> 3)), 2 * v29);
      memcpy(v21[15], (const void *)(*(_QWORD *)(a1 + 4720) + 16 * (v26 >> 2)), 16 * v30 + 32);
      if ((_DWORD)v565 == v25)
        v31 = *(_QWORD *)(a1 + 4728);
      else
        v31 = *(_QWORD *)(a1 + 4720) + 16 * ((uint64_t)v26 >> 2);
      v10 = v540;
      v44 = v21[16];
      v45 = *(_QWORD *)(v31 - 16);
      *(_QWORD *)((char *)v44 - 10) = *(_QWORD *)(v31 - 10);
      *(v44 - 2) = v45;
    }
    else
    {
      v32 = v28 - 1;
      v33 = v28 - 1 - v23;
      v34 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009);
      v35 = v34 - v540;
      while (v24 >> v35 != v33 >> v35)
      {
        v123 = v35++ < v34;
        if (!v123)
        {
          v36 = -1;
          goto LABEL_15;
        }
      }
      v37 = v34 - v35;
      if (v37 >= (int)v540)
        v36 = v37;
      else
        v36 = v37 + 1;
LABEL_15:
      v38 = 0;
      v39 = *(unsigned __int8 **)(a1
                                + 32 * v36
                                + 8
                                * ((v33 >> (v34 - v36)) & 1 | (2 * ((v26 >> (v34 - v36)) & 1)))
                                + 4456);
      v40 = v32 - *((_DWORD *)v39 + 1);
      v41 = v565 - *((_DWORD *)v39 + 2);
      if ((v40 & 0x80000000) != 0)
      {
        v10 = v540;
      }
      else
      {
        v10 = v540;
        if ((v41 & 0x80000000) == 0)
        {
          v42 = *v39;
          if (v40 >= v42 || v41 >= v42)
            v38 = 0;
          else
            v38 = (_WORD *)(*((_QWORD *)v39 + 11)
                          + 2 * ((v40 >> 3) + (v42 >> 3) * (unint64_t)(v41 >> 3)));
        }
      }
      if (v27 >= 8)
      {
        v46 = 0;
        if (v29 <= 1)
          v47 = 1;
        else
          v47 = v27 >> 3;
        v48 = 2 * v47;
        do
        {
          *(_WORD *)((char *)v21[13] + v46) = *v38;
          v38 = (_WORD *)((char *)v38 + (((unint64_t)*v39 >> 2) & 0x3E));
          v46 += 2;
        }
        while (v48 != v46);
        v40 = v32 - *((_DWORD *)v39 + 1);
        v41 = v565 - *((_DWORD *)v39 + 2);
      }
      v49 = 0;
      if ((v40 & 0x80000000) == 0 && (v41 & 0x80000000) == 0)
      {
        v50 = *v39;
        if (v40 >= v50 || v41 >= v50)
          v49 = 0;
        else
          v49 = (uint64_t *)(*((_QWORD *)v39 + 12)
                          + 16 * ((v40 >> 2) + (v50 >> 2) * (unint64_t)(v41 >> 2)));
      }
      if (v27 >= 4)
      {
        v52 = 0;
        if (v30 <= 1)
          v53 = 1;
        else
          v53 = v27 >> 2;
        v54 = 16 * v53;
        do
        {
          v55 = (char *)v21[15] + v52;
          v56 = *v49;
          *(_QWORD *)((char *)v55 + 6) = *(uint64_t *)((char *)v49 + 6);
          *v55 = v56;
          v49 = (uint64_t *)((char *)v49 + ((4 * *v39) & 0x3F0));
          v52 += 16;
        }
        while (v54 != v52);
      }
      if ((a7 & 0xF) != 0)
      {
        v57 = (char *)v21[15] + 16 * v30;
        v58 = *v49;
        *(_QWORD *)((char *)v57 + 6) = *(uint64_t *)((char *)v49 + 6);
        *v57 = v58;
      }
      else
      {
        v59 = (char *)v21[15] + 16 * v30;
        v60 = *(_QWORD *)(a1 + 4440);
        *(_QWORD *)((char *)v59 + 6) = *(_QWORD *)(a1 + 4446);
        *v59 = v60;
      }
    }
    if ((_DWORD)v565 == v25)
    {
      memcpy(v21[14], (const void *)(*(_QWORD *)(a1 + 4712) + 2 * (v24 >> 3)), (2 * v29));
      memcpy(v21[16], (const void *)(*(_QWORD *)(a1 + 4728) + 16 * (v24 >> 2)), (16 * v30 + 32));
      v12 = v556;
      v22 = (void ***)v537;
      v13 = a10;
      v15 = v529;
      if (v556 != v23)
      {
        v61 = *(_QWORD *)(a1 + 4728) + 16 * ((uint64_t)v24 >> 2);
        v62 = v21[16];
        v63 = *(_QWORD *)(v61 - 16);
        *(_QWORD *)((char *)v62 - 10) = *(_QWORD *)(v61 - 10);
        *(v62 - 2) = v63;
      }
    }
    else
    {
      v64 = v565 - 1;
      v65 = *(_DWORD *)(a1 + 4432);
      v66 = v565 - v65;
      v67 = v565 - 1 - v65;
      v68 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009);
      v69 = v68 - v10;
      v22 = (void ***)v537;
      while (v66 >> v69 != v67 >> v69)
      {
        v123 = v69++ < v68;
        if (!v123)
        {
          v70 = -1;
          goto LABEL_59;
        }
      }
      v70 = v68 - v69;
      if (v68 - v69 < (int)v10)
        ++v70;
LABEL_59:
      v71 = 0;
      v72 = *(unsigned __int8 **)(a1
                                + 32 * v70
                                + 8
                                * (((v556 - *(_DWORD *)(a1 + 4428)) >> (v68 - v70)) & 1 | (2
                                                                                         * ((v67 >> (v68 - v70)) & 1)))
                                + 4456);
      v73 = v556 - *((_DWORD *)v72 + 1);
      if ((v73 & 0x80000000) != 0)
      {
        v75 = v565;
      }
      else
      {
        v74 = v64 - *((_DWORD *)v72 + 2);
        v75 = v565;
        if ((v74 & 0x80000000) == 0)
        {
          v76 = *v72;
          if (v73 >= v76 || v74 >= v76)
            v71 = 0;
          else
            v71 = (const void *)(*((_QWORD *)v72 + 11)
                               + 2 * ((v73 >> 3) + (v76 >> 3) * (unint64_t)(v74 >> 3)));
        }
      }
      memcpy(v21[14], v71, (2 * v29));
      v78 = 0;
      v79 = v556 - *((_DWORD *)v72 + 1);
      if ((v79 & 0x80000000) == 0)
      {
        v80 = v64 - *((_DWORD *)v72 + 2);
        if ((v80 & 0x80000000) == 0)
        {
          v81 = *v72;
          if (v79 >= v81 || v80 >= v81)
            v78 = 0;
          else
            v78 = (const void *)(*((_QWORD *)v72 + 12)
                               + 16 * ((v79 >> 2) + (v81 >> 2) * (unint64_t)(v80 >> 2)));
        }
      }
      v83 = v30;
      memcpy(v21[16], v78, 16 * (v27 >> 2));
      v10 = v540;
      v15 = v529;
      if (v556 != v23)
      {
        v84 = *(_DWORD *)(v566 + 4428);
        v85 = v556 - v84;
        v86 = *(_DWORD *)(v566 + 4432);
        v87 = v75 - v86;
        v88 = v556 - 1 - v84;
        v89 = v64 - v86;
        v90 = *(unsigned __int8 *)(*(_QWORD *)(v566 + 1880) + 2009);
        v91 = v90 - v540;
        while (v85 >> v91 != v88 >> v91 || v87 >> v91 != v89 >> v91)
        {
          v123 = v91++ < v90;
          if (!v123)
          {
            v92 = -1;
            goto LABEL_84;
          }
        }
        v92 = v90 - v91;
        if (v90 - v91 < (int)v540)
          ++v92;
LABEL_84:
        v93 = *(unsigned __int8 **)(v566
                                  + 32 * v92
                                  + 8
                                  * ((v88 >> (v90 - v92)) & 1 | (2
                                                                             * ((v89 >> (v90 - v92)) & 1)))
                                  + 4456);
        v94 = (uint64_t *)(*((_QWORD *)v93 + 12)
                        + 16
                        * (((v556 - 1 - *((_DWORD *)v93 + 1)) >> 2)
                         + ((unint64_t)*v93 >> 2) * ((v64 - *((_DWORD *)v93 + 2)) >> 2)));
        v95 = v21[16];
        v96 = *v94;
        *(_QWORD *)((char *)v95 - 10) = *(uint64_t *)((char *)v94 + 6);
        *(v95 - 2) = v96;
      }
      if ((a7 & 0x1E000) != 0)
      {
        v97 = *(_DWORD *)(v566 + 4428);
        v98 = v556 - v97;
        v99 = *(_DWORD *)(v566 + 4432);
        v100 = v75 - v99;
        v101 = v27 + v556 - v97;
        v102 = v64 - v99;
        v103 = *(unsigned __int8 *)(*(_QWORD *)(v566 + 1880) + 2009);
        v104 = v103 - v540;
        while (v98 >> v104 != v101 >> v104 || v100 >> v104 != v102 >> v104)
        {
          v123 = v104++ < v103;
          if (!v123)
          {
            v105 = -1;
            goto LABEL_94;
          }
        }
        v105 = v103 - v104;
        if (v103 - v104 < (int)v540)
          ++v105;
LABEL_94:
        v109 = *(unsigned __int8 **)(v566
                                   + 32 * v105
                                   + 8
                                   * ((v101 >> (v103 - v105)) & 1 | (2
                                                                                 * ((v102 >> (v103 - v105)) & 1)))
                                   + 4456);
        v110 = (uint64_t *)(*((_QWORD *)v109 + 12)
                         + 16
                         * (((v27 + v556 - *((_DWORD *)v109 + 1)) >> 2)
                          + ((unint64_t)*v109 >> 2) * ((v64 - *((_DWORD *)v109 + 2)) >> 2)));
        v108 = *v110;
        v107 = *(uint64_t *)((char *)v110 + 6);
        v106 = (char *)v21[16] + 16 * v83;
      }
      else
      {
        v106 = (char *)v21[16] + 16 * v83;
        v107 = *(_QWORD *)(v566 + 4446);
        v108 = *(_QWORD *)(v566 + 4440);
      }
      *(_QWORD *)((char *)v106 + 6) = v107;
      *v106 = v108;
      v12 = v556;
      v13 = a10;
    }
  }
  v111 = 0;
  v112 = xmmword_1B6917860;
  do
  {
    v113 = &v570[v111 + 1];
    *((_DWORD *)v113 + 28) = 0;
    *((_OWORD *)v113 + 6) = xmmword_1B6917860;
    *((_WORD *)v113 + 58) = 0;
    v111 += 24;
  }
  while (v111 != 96);
  LODWORD(v576) = 0;
  v575 = xmmword_1B6917860;
  WORD2(v576) = 2;
  LODWORD(v578) = 0;
  v577 = xmmword_1B6917860;
  WORD2(v578) = 0;
  v568 = *a8;
  v114 = *a9;
  v567 = *a9;
  v115 = v565;
  v116 = v566;
  v117 = *(_QWORD *)(v566 + 1888);
  v118 = v544;
  v119 = v551;
  if (*(_BYTE *)(v117 + 12))
  {
    v120 = *(_DWORD *)(v117 + 1620);
    v121 = v15 >= v120;
    v531 = v15 == v120;
  }
  else
  {
    v121 = 0;
    v531 = 0;
  }
  v523 = v121;
  if (!v545)
  {
    v125 = 0;
    v136 = 0;
    v570[0] = 0;
    v124 = 1;
    v569 = 1;
    *(_DWORD *)(v566 + 4 * v551 + 8088) = -1;
    *(_BYTE *)(v566 + 788) = 0;
    goto LABEL_135;
  }
  v122 = *(_DWORD *)(v566 + 204);
  v123 = v15 <= v557 || *(_DWORD *)(v566 + 208) <= (int)v10;
  v124 = !v123;
  v569 = v124;
  v125 = v122 <= (int)v10;
  v570[0] = v122 <= (int)v10;
  if (v122 <= (int)v10 && v124)
  {
    if (!*(_BYTE *)(*(_QWORD *)(v566 + 952) + 607))
    {
      v133 = v565;
      v137 = v22;
      v136 = 1;
      goto LABEL_126;
    }
    v126 = *(unsigned __int8 **)(v566 + 1880);
    v127 = v126[2009] - (uint64_t)(int)v10;
    if ((int)v127 <= v126[2008])
    {
      v133 = v565;
      v135 = 0;
    }
    else if (*(_BYTE *)(*(_QWORD *)(v566 + 1872) + 10) == 2)
    {
      v128 = *(_DWORD *)(v566 + 24) + v126[2001];
      v129 = word_1B6922500[2 * (6 - v127) + 1] + v128 * word_1B6922500[2 * (6 - v127)];
      v130 = v129 & ~(v129 >> 31);
      v131 = (__int16 *)((char *)&unk_1B692250C + 4 * (6 - v127));
      v558 = *v131;
      v132 = v131[1];
      v133 = v565;
      v134 = sub_1B682FD38(*(_QWORD *)(v566 + 960), v12, v565, v127, *(_DWORD *)(v566 + 16), *(_DWORD *)(v566 + 20));
      if (v134 * v134 >= v130)
      {
        if (v134 * v134 > ((v132 + v128 * v558) & ~((v132 + v128 * v558) >> 31)))
          v135 = 1;
        else
          v135 = 2;
      }
      else
      {
        v135 = 0;
      }
      v116 = v566;
      v10 = v540;
      v121 = v523;
      v119 = v551;
      v112 = xmmword_1B6917860;
    }
    else
    {
      v133 = v565;
      v135 = 2;
    }
    v137 = v22;
    v125 = v135 != 1;
    v570[0] = v135 != 1;
    v124 = v135 != 0;
    v569 = v135 != 0;
  }
  else
  {
    v133 = v565;
    v137 = v22;
  }
  v136 = v125;
LABEL_126:
  *(_DWORD *)(v116 + 4 * v119 + 8088) = -1;
  *(_BYTE *)(v116 + 788) = 0;
  if (!*(_BYTE *)(v116 + 789))
  {
LABEL_134:
    v22 = v137;
    v118 = v544;
    v115 = v133;
    goto LABEL_135;
  }
  v138 = v125;
  v139 = v121;
  v140 = sub_1B685CA48(*(_DWORD **)(v116 + 976), v12, v133, v525);
  if (v140 == 1)
  {
    v116 = v566;
    v121 = v139;
    v112 = xmmword_1B6917860;
    if (*(_DWORD *)(v566 + 208) <= (int)v10)
    {
      v124 = 0;
      v125 = 1;
      v570[0] = 1;
      v569 = 0;
      v136 = 1;
    }
    else
    {
      v125 = 0;
      v136 = 0;
      v570[0] = 0;
      v124 = 1;
      v569 = 1;
    }
    v119 = v551;
    goto LABEL_134;
  }
  v116 = v566;
  v121 = v139;
  v119 = v551;
  v112 = xmmword_1B6917860;
  v125 = v138;
  v22 = v137;
  v118 = v544;
  v115 = v133;
  if (!v140)
  {
    v124 = 0;
    v125 = 1;
    v570[0] = 1;
    v569 = 0;
    *(_BYTE *)(v566 + 788) = 1;
    v136 = 1;
  }
LABEL_135:
  v526 = v116 + 984;
  if (*(unsigned __int8 *)(*(_QWORD *)(v116 + 1872) + 10) <= 1u && *(_BYTE *)(*(_QWORD *)(v116 + 952) + 610))
  {
    v141 = v116 + 32 * v119;
    WORD1(v19) = 0;
    HIWORD(v19) = 0;
    *(_OWORD *)(v141 + 32) = 0u;
    *(_OWORD *)(v141 + 48) = 0u;
    *(_BYTE *)(v141 + 58) = *(_BYTE *)(v141 + 58) & 0x7F | ((v136 & 1) << 7);
  }
  v142 = v114 != 0;
  v143 = v22;
  if (!v121)
  {
    v149 = v563;
    goto LABEL_147;
  }
  v144 = v125;
  v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BOOL8))(v116 + 968))(v12, v115, v10, v116, v142);
  v116 = v566;
  v13 = v145;
  v146 = ((v12 - *((_DWORD *)*v22 + 1)) >> 3)
       + ((unint64_t)*(unsigned __int8 *)*v22 >> 3) * ((v115 - *((_DWORD *)*v22 + 2)) >> 3);
  *((_WORD *)(*v22)[11] + v146) = ((_WORD)v145 << 9) | *((_WORD *)(*v22)[11] + v146) & 0x1FF;
  v147 = ((v12 - *((_DWORD *)*a5 + 1)) >> 3)
       + ((unint64_t)**a5 >> 3) * ((v115 - *((_DWORD *)*a5 + 2)) >> 3);
  *(_WORD *)(*((_QWORD *)*a5 + 11) + 2 * v147) = ((_WORD)v145 << 9) | *(_WORD *)(*((_QWORD *)*a5 + 11) + 2 * v147) & 0x1FF;
  v148 = *(_DWORD *)(v566 + 12);
  if (v148 == 5 || v148 == 3)
  {
    *((_WORD *)*v22 + 107) = v145;
    *((_WORD *)*a5 + 107) = v145;
    if (!(_DWORD)v10)
      *(_DWORD *)(v566 + 28) = v145;
    goto LABEL_145;
  }
  if (v148 >= 2)
  {
LABEL_145:
    sub_1B685F7A0(v526, v145, *(unsigned __int8 *)(*(_QWORD *)(v566 + 1880) + 2001));
    v116 = v566;
  }
  LODWORD(v142) = 1;
  v149 = v563;
  v119 = v551;
  v112 = xmmword_1B6917860;
  v125 = v144;
LABEL_147:
  v553 = v13;
  v150 = *v22;
  *((_DWORD *)v150 + 3) = v13;
  v151 = *a5;
  *((_DWORD *)v151 + 3) = v13;
  *((_DWORD *)v150 + 4) = *a8;
  *((_DWORD *)v151 + 4) = *a8;
  *((_DWORD *)v150 + 5) = *a8;
  *((_DWORD *)v151 + 5) = *a8;
  v152 = (_BYTE *)(v116 + v119);
  v152[8108] = 0;
  v152[8112] = 0;
  v152[8116] = 0;
  v152[8104] = 0;
  v152[193] = *(_BYTE *)(v116 + 192);
  v152[8122] = 0;
  v524 = v142;
  if (!*(_BYTE *)(v118 + 3792))
    goto LABEL_150;
  if (*(_BYTE *)(*(_QWORD *)(v116 + 1872) + 10) != 2)
  {
    if (*(_BYTE *)(v118 + 3784))
      v154 = 16;
    else
      v154 = 1;
    if (!v125)
    {
      v153 = 1;
      goto LABEL_176;
    }
    v155 = *(unsigned __int8 *)(*(_QWORD *)(v116 + 1880) + 2009) - (_DWORD)v10;
    v156 = *(uint64_t **)(v116 + 8136);
    v157 = *v156;
    v158 = *v156 * ((uint64_t)(int)v115 >> 4) + ((int)v12 >> 4);
    v159 = *(unsigned __int8 *)(v156[v154] + v158);
    if (!v124 || !*(_BYTE *)(*(_QWORD *)(v116 + 952) + 576))
    {
      v168 = 1;
      goto LABEL_168;
    }
    if (v155 > 4)
    {
      v153 = 0;
      goto LABEL_151;
    }
    if (v159 == 31 && v155 == 4)
      goto LABEL_164;
    v160 = ((int)v115 >> 2) & 0xFFFFFFFE;
    v161 = v157 * (v160 + 2) + ((int)v12 >> 3);
    v162 = v156[36];
    v163 = (_WORD *)(v162 + 2 * (v157 * v160 + ((int)v12 >> 3)));
    LOWORD(v19) = *v163;
    WORD2(v19) = v163[1];
    v164 = (__int16 *)(v162 + 2 * v161);
    v20.i16[0] = *v164;
    v20.i16[2] = v164[1];
    v165 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)&v19, v20));
    v166 = vaddvq_s32(v165);
    if (v166 > *(unsigned __int16 *)(v156[28] + 2 * v158))
    {
LABEL_164:
      v167 = &v569;
    }
    else
    {
      v262 = vaddvq_s32(vmulq_s32(v165, v165));
      v263 = v166 + 2;
      v123 = v166 < -2;
      v264 = v166 + 5;
      if (!v123)
        v264 = v263;
      v265 = ((v262 + 2) >> 2) - (v264 >> 2) * (v264 >> 2);
      if ((v265 & ~(v265 >> 31)) <= 1 << vcvtmd_s64_f64((float)((float)((float)(*(__int16 *)(*((_QWORD *)v151 + 11)+ 2* (((v12- *((_DWORD *)v151 + 1)) >> 3)+ ((unint64_t)*v151 >> 3)* ((v115- *((_DWORD *)v151 + 2)) >> 3))) >> 9)* 0.26)+ 9.96)+ 0.5))goto LABEL_166;
      v167 = v570;
    }
    *v167 = 0;
    v125 = v570[0];
LABEL_166:
    v168 = v125 != 0;
LABEL_168:
    if (v168 && v155 <= 4)
    {
      v169 = *(_QWORD *)(v116 + 952);
      if (*(_BYTE *)(v169 + 574))
      {
        v170 = (unsigned int *)(v116 + 4 * v119 + 8088);
        v171 = *v170;
        if (v159 > 0x19)
        {
          *v170 = v171 & 0xFFFFEDFF;
          v172 = v116 + v119;
          v173 = 8116;
        }
        else
        {
          *v170 = v171 & 0xFFFFFEF0;
          if (v159)
            v569 = 0;
          v172 = v116 + v119;
          v173 = 8112;
        }
        *(_BYTE *)(v172 + v173) = 1;
      }
      if (*(_BYTE *)(v169 + 575) && v159 >= 0x1A)
      {
        v254 = (int *)(v116 + 4 * v119 + 8088);
        *v254 = 0;
        if (v155 == 4)
        {
          switch(*(_BYTE *)(v156[16] + v158))
          {
            case 0x1A:
            case 0x1F:
              goto LABEL_284;
            case 0x1B:
              goto LABEL_315;
            case 0x1C:
              goto LABEL_316;
            case 0x1D:
            case 0x1E:
              v125 = 0;
              v570[0] = 0;
              v569 = 1;
              break;
            default:
              break;
          }
        }
        else
        {
          switch(*(_BYTE *)(v156[40] + v157 * (int)(((int)v115 >> 2) & 0xFFFFFFFE) + ((int)v12 >> 3)))
          {
            case 0:
LABEL_284:
              v255 = 257;
              goto LABEL_285;
            case 1:
LABEL_315:
              v282 = 2;
              goto LABEL_317;
            case 2:
LABEL_316:
              v282 = 4;
LABEL_317:
              *v254 = v282;
              goto LABEL_318;
            case 3:
              v283 = v157 * (int)(v115 & 0xFFFFFFFC) + ((int)v12 >> 2);
              v284 = v156[20];
              v285 = *(_DWORD *)(v284 + 4 * v283);
              v286 = *(_DWORD *)(v284 + 4 * (v283 + 1));
              v287 = v283 + 4 * v157;
              v288 = *(_DWORD *)(v284 + 4 * v287);
              v289 = v283 + 1 + 4 * v157;
              v290 = *(_DWORD *)(v284 + 4 * v289);
              v291 = v156[22];
              v292 = *(unsigned __int8 *)(v291 + v283);
              v293 = *(unsigned __int8 *)(v291 + v283 + 1);
              v294 = *(unsigned __int8 *)(v291 + v287);
              v295 = *(unsigned __int8 *)(v291 + v289);
              if (v285 == v286 && v292 == v293 || (v296 = 0, v297 = 4, v288 == v290) && v294 == v295)
              {
                *v254 = 2;
                v296 = 1;
                *(_BYTE *)(v116 + v551 + 8122) = 1;
                v297 = 6;
              }
              v119 = v551;
              if (v285 == v288 && v292 == v294 || v286 == v290 && v293 == v295)
              {
                *v254 = v297;
LABEL_318:
                *(_BYTE *)(v116 + v119 + 8122) = 1;
              }
              else if ((v296 & 1) == 0)
              {
                v255 = 7;
LABEL_285:
                *v254 = v255;
              }
              break;
            default:
              break;
          }
        }
        *(_BYTE *)(v116 + v119 + 8112) = 1;
      }
    }
  }
  v136 = v125;
LABEL_150:
  v153 = v136 == 0;
  if (!v136)
  {
LABEL_176:
    v534 = v153;
    v174 = v569;
    v175 = v539;
    goto LABEL_195;
  }
LABEL_151:
  if (!*(_BYTE *)(v116 + v119 + 8112))
  {
    if (*(_BYTE *)(v116 + 189))
    {
      *(_DWORD *)(v116 + 4 * v119 + 8088) = 257;
    }
    else if (*(unsigned __int8 *)(*(_QWORD *)(v116 + 1880) + 2009) - (_DWORD)v10 == 3
           && *(unsigned __int8 *)(*(_QWORD *)(v116 + 1872) + 10) <= 1u)
    {
      v176 = v116 + 4 * v119;
      if (*(_BYTE *)(*(_QWORD *)(v116 + 952) + 250))
        v177 = *(_DWORD *)(v176 + 8088);
      else
        v177 = *(_DWORD *)(v176 + 8088) & 0xFFFFFFF1;
      *(_DWORD *)(v176 + 8088) = v177 & 0xFFFFFFF7;
    }
  }
  v175 = v539;
  if (*(unsigned __int8 *)(*(_QWORD *)(v116 + 1872) + 10) <= 1u)
  {
    if (*(_BYTE *)(v116 + 788))
      *(_DWORD *)(v116 + 4 * v119 + 8088) = 256;
    sub_1B68485C0(v116, v12, v115, v10, a5, v22, a7);
    v116 = v566;
    v150 = *v22;
    v149 = v563;
    v112 = xmmword_1B6917860;
  }
  v534 = v153;
  v174 = v569;
  if (!*(_BYTE *)(v116 + 188))
  {
    v178 = *((unsigned __int8 *)v150[12]
           + 16 * ((v12 - *((_DWORD *)v150 + 1)) >> 2)
           + 16
           * ((unint64_t)*(unsigned __int8 *)v150 >> 2)
           * ((v115 - *((_DWORD *)v150 + 2)) >> 2)
           + 10);
    v174 = v569 && v178 != 2;
    v569 = v174;
  }
LABEL_195:
  v533 = v174;
  if (v174)
  {
    if (v531)
      v567 = 1;
    v180 = 0;
    v181 = 0;
    v182 = 0;
    v183 = 0;
    v184 = 0;
    v559 = v539 + v12;
    v555 = v539 + v115;
    v185 = v116 + 8 * v554 + 4584;
    v186 = v116 + 32 * v554 + 4456;
    v187 = -1;
    v188 = -1;
    do
    {
      v189 = ((v184 & 1) << v149) + (int)v12;
      v190 = *(_DWORD *)(v116 + 16);
      if ((int)v189 < v190)
      {
        v191 = (v184 >> 1 << v149) + v565;
        v192 = *(_DWORD *)(v116 + 20);
        if ((int)v191 < v192)
        {
          v193 = v181;
          v194 = sub_1B683B42C(a7, v184, v559 < v190, v555 < v192);
          sub_1B683DD38(v566, v189, v191, v554, v185, v186, v194, &v568, &v567, v553);
          v112 = xmmword_1B6917860;
          v149 = v563;
          v116 = v566;
          v183 += *(_QWORD *)(*(_QWORD *)v186 + 168);
          v182 += *(_DWORD *)(*(_QWORD *)v186 + 184);
          v188 = v183 + v182 * *(unsigned __int16 *)(v566 + 996);
          v181 = v193 + *(_QWORD *)(*(_QWORD *)v186 + 192);
          v180 += *(_DWORD *)(*(_QWORD *)v186 + 208);
          v187 = v181 + ((v180 * *(unsigned __int16 *)(v566 + 992)) >> 8);
        }
        LODWORD(v12) = v556;
      }
      ++v184;
      v186 += 8;
    }
    while (v184 != 4);
    LODWORD(v576) = v182;
    *(_QWORD *)&v575 = v183;
    *((_QWORD *)&v575 + 1) = v188;
    LODWORD(v578) = v180;
    *(_QWORD *)&v577 = v181;
    *((_QWORD *)&v577 + 1) = v187;
    v195 = *(_DWORD *)(v116 + 12);
    v143 = (void ***)v537;
    v115 = v565;
    if (v195 > 1)
    {
      v196 = v181;
      sub_1B685F7A0(v526, v553, *(unsigned __int8 *)(*(_QWORD *)(v116 + 1880) + 2001));
      v116 = v566;
      v197 = 0;
      v195 = *(_DWORD *)(v566 + 12);
      v198 = &v571;
      do
      {
        v199 = *(_QWORD *)(v566 + 32 * v554 + 4456 + v197);
        *(_QWORD *)(v199 + 176) = *(_QWORD *)(v199 + 168)
                                + ((*(_DWORD *)(v199 + 184)
                                  * *(unsigned __int16 *)(v566 + 992 + 2 * *(__int16 *)(v199 + 188))) >> (8 * (*(_WORD *)(v199 + 188) == 0)));
        v200 = (__int128 *)(v199 + 192);
        *(_QWORD *)(v199 + 200) = *(_QWORD *)(v199 + 192)
                                + ((*(_DWORD *)(v199 + 208)
                                  * *(unsigned __int16 *)(v566 + 992 + 2 * *(__int16 *)(v199 + 212))) >> (8 * (*(_WORD *)(v199 + 212) == 0)));
        if (v195 == 5)
        {
          if (!*(_BYTE *)(v544 + 3784))
          {
            *v198 = *v200;
            *((_QWORD *)v198 + 2) = *(_QWORD *)(v199 + 208);
          }
        }
        else if (v195 == 3)
        {
          if ((v534 & 1) == 0)
          {
            *v198 = *v200;
            *((_QWORD *)v198 + 2) = *(_QWORD *)(v199 + 208);
            v201 = *(__int16 *)(v199 + 214) - v553;
            if (v201)
            {
              if (v201 >= 16)
                v201 = 16;
              if (v201 <= -15)
                v201 = -15;
              *(_QWORD *)v198 = (*(_QWORD *)v198 * (unint64_t)word_1B69234CC[v201 + 15] + 128) >> 8;
            }
          }
          *((_WORD *)v198 + 11) = v553;
          *(_WORD *)(v199 + 214) = v553;
        }
        v197 += 8;
        v198 = (__int128 *)((char *)v198 + 24);
      }
      while (v197 != 32);
      *((_QWORD *)&v575 + 1) = v183 + v182 * *(unsigned __int16 *)(v566 + 996);
      v181 = v196;
      *((_QWORD *)&v577 + 1) = v196 + ((v180 * *(unsigned __int16 *)(v566 + 992)) >> 8);
      v149 = v563;
      v112 = xmmword_1B6917860;
    }
    if ((v195 == 5 || v195 == 3) && (v534 & 1) == 0 && !*(_BYTE *)(v544 + 3784))
    {
      v202 = 0;
      v203 = v571;
      v204 = (int)v572;
      do
      {
        v203 += *(_QWORD *)&v573[v202];
        v204 += *(_DWORD *)&v573[v202 + 16];
        v202 += 24;
      }
      while (v202 != 72);
      *(_QWORD *)&v571 = v203;
      LODWORD(v572) = v204;
    }
    if (v545 && v529 > *(unsigned __int8 *)(*(_QWORD *)(v116 + 1880) + 2008))
    {
      v205 = v181;
      sub_1B6841DFC(v116, v12, v565, *v537, 1, 0, 0, 0, 0);
      v116 = v566;
      LODWORD(v576) = v182 + 1;
      v206 = *(_QWORD *)(v566 + 944);
      v207 = *(unsigned __int8 *)(*(_QWORD *)(v566 + 1880) + 2008);
      if ((int)v12 - (1 << v207) < 0)
      {
        v210 = 0;
        v208 = v540;
        v149 = v563;
        v112 = xmmword_1B6917860;
        v211 = v205;
      }
      else
      {
        v208 = v540;
        if (*(_BYTE *)(v566 + 800))
          v209 = *(_WORD **)(*(_QWORD *)(v566 + 848) + 104);
        else
          v209 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v566 + 1872) + 1360) + 512)
                         + 2
                         * (((v12 - (1 << v207)) >> 3)
                          + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v566 + 1872) + 1360) + 488)
                          * ((uint64_t)(int)v565 >> 3)));
        v149 = v563;
        v112 = xmmword_1B6917860;
        v211 = v205;
        v210 = (*v209 & 3) > (int)v540;
      }
      v212 = v565 - (1 << v207);
      if (v212 < 0)
      {
        v218 = 0;
      }
      else
      {
        if (*(_BYTE *)(v566 + 800))
        {
          v213 = v207 == 31;
          v214 = 112;
          if (v213)
            v214 = 104;
          v215 = *(_QWORD *)(*(_QWORD *)(v566 + 848) + v214);
          v216 = -536870912;
          if (!v213)
            v216 = 0;
          v217 = (_WORD *)(v215 + v216);
        }
        else
        {
          v217 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v566 + 1872) + 1360) + 512)
                         + 2
                         * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v566 + 1872) + 1360) + 488)
                          * (v212 >> 3)
                          + ((int)v12 >> 3)));
        }
        v218 = (*v217 & 3) > v208;
      }
      v219 = v206 + v218 + v210;
      v220 = *(_QWORD *)(v206 + 8);
      v221 = *(unsigned __int8 *)(v219 + 42);
      if ((v221 & 1) != 0)
        v222 = v220 - byte_1B6920D90[(v220 & 0xC0) + (v221 >> 1)];
      else
        v222 = byte_1B6920D90[(v220 & 0xC0) + (v221 >> 1)];
      v223 = __clz(v222);
      v224 = v220 - (v222 << (v223 - 55)) + ((v223 - 55) << 8);
      LODWORD(v572) = (_DWORD)v572 + v224;
      LODWORD(v578) = v180 + v224;
      *((_QWORD *)&v575 + 1) = v183 + (v182 + 1) * *(unsigned __int16 *)(v566 + 996);
      *((_QWORD *)&v577 + 1) = v211 + (((v180 + v224) * *(unsigned __int16 *)(v566 + 992)) >> 8);
    }
    v175 = v539;
    if (v531)
    {
      v225 = 0;
      v226 = *(_DWORD *)(v116 + 16);
      v227 = v116 + 32 * v554 + 4456;
      do
      {
        v228 = ((v225 & 1) << v149) + v12;
        if (v228 < v226)
        {
          v229 = (v225 >> 1 << v149) + v565;
          if (v229 < *(_DWORD *)(v116 + 20))
          {
            v230 = *(unsigned __int8 **)(v227 + 8 * v225);
            v231 = sub_1B6845D14(((v225 & 1) << v149) + (int)v12, (v225 >> 1 << v149) + v565, v539, v230, 0);
            v116 = v566;
            if (*(_BYTE *)(v566 + 8) || (v231 & 1) != 0)
            {
              v149 = v563;
              v112 = xmmword_1B6917860;
              if ((v231 & 1) != 0)
                goto LABEL_266;
            }
            else
            {
              v232 = sub_1B6845D14(v228, v229, v539, v230, 1u);
              v116 = v566;
              v149 = v563;
              v112 = xmmword_1B6917860;
              if ((v232 & 1) != 0)
                goto LABEL_266;
              v233 = sub_1B6845D14(v228, v229, v539, v230, 2u);
              v112 = xmmword_1B6917860;
              v149 = v563;
              v116 = v566;
              if ((v233 & 1) != 0)
                goto LABEL_266;
            }
          }
        }
        ++v225;
      }
      while (v225 != 4);
      v234 = sub_1B6843C28(v116, v12, v565, v540, *v537, *a8, 1);
      v112 = xmmword_1B6917860;
      v149 = v563;
      v116 = v566;
      v235 = v234;
      v236 = 0;
      v568 = v234;
      do
      {
        v237 = ((v236 & 1) << v149) + v12;
        if (v237 < *(_DWORD *)(v116 + 16))
        {
          v238 = (v236 >> 1 << v149) + v565;
          if (v238 < *(_DWORD *)(v116 + 20))
          {
            sub_1B68453F8(v116, v237, v238, v554, *(unsigned __int8 **)(v566 + 32 * v554 + 4456 + 8 * v236), v235);
            v112 = xmmword_1B6917860;
            v149 = v563;
            v116 = v566;
          }
        }
        ++v236;
      }
      while (v236 != 4);
    }
  }
LABEL_266:
  v239 = *(_DWORD *)(v116 + 4);
  v240 = v544;
  v241 = v540;
  v242 = v553;
  v243 = v551;
  if ((v534 & 1) == 0)
  {
    v244 = *(unsigned __int8 **)(v116 + 1880);
    if (*(int *)(v116 + 12) >= 2)
    {
      sub_1B685F7A0(v526, v553, v244[2001]);
      v112 = xmmword_1B6917860;
      v243 = v551;
      v149 = v563;
      v116 = v566;
      v244 = *(unsigned __int8 **)(v566 + 1880);
    }
    v245 = v244[2009] - (_DWORD)v540;
    if (*(unsigned __int8 *)(*(_QWORD *)(v116 + 1872) + 10) > 1u)
    {
      v252 = 0;
      v253 = (int)v540;
      goto LABEL_367;
    }
    if (!*(_BYTE *)(v116 + 189)
      || (v246 = *v537,
          v247 = **v537,
          v248 = *((_QWORD *)*v537 + 12),
          *(_BYTE *)(v248
                   + 16
                   * (((v556 - *((_DWORD *)*v537 + 1)) >> 2)
                    + (v247 >> 2) * (unint64_t)((v115 - *((_DWORD *)*v537 + 2)) >> 2))
                   + 10) == 2)
      || *(_BYTE *)(v116 + v243 + 8112))
    {
LABEL_340:
      v143 = (void ***)v537;
      sub_1B68485C0(v116, v556, v115, v241, a5, (void ***)v537, a7);
      v243 = v551;
      v116 = v566;
      if (!*(_BYTE *)(v566 + v551 + 8108))
      {
        v252 = 0;
        v253 = v551;
        v240 = v544;
LABEL_366:
        v149 = v563;
        v112 = xmmword_1B6917860;
        goto LABEL_367;
      }
      v298 = *v537;
      v240 = v544;
      v149 = v563;
      v112 = xmmword_1B6917860;
      if (*(_BYTE *)(v566 + 188) && !*(_BYTE *)(v544 + 3791))
        goto LABEL_400;
      if (*(_BYTE *)(v566 + 8) && *(char *)(*(_QWORD *)(v566 + 952) + 226) >= 1)
        v299 = *(unsigned __int8 *)(v566 + 188) ^ 1;
      else
        v299 = 0;
      v300 = v556 - *((_DWORD *)v298 + 1);
      v301 = v115 - *((_DWORD *)v298 + 2);
      v302 = *v298;
      v303 = *(unsigned __int8 *)(*((_QWORD *)v298 + 12)
                                + 16 * ((v300 >> 2) + (v302 >> 2) * (unint64_t)(v301 >> 2))
                                + 10);
      if (v303 == 2 || *(_BYTE *)(*(_QWORD *)(v566 + 952) + 609) && v245 >= 5)
        v299 = 0;
      if (!*(_BYTE *)(v544 + 3784) || *(_BYTE *)(*(_QWORD *)(v566 + 952) + 252) == 3)
      {
        if (v303 == 2 && *(_BYTE *)(v566 + 8) && !*(_BYTE *)(v566 + 788))
        {
          v252 = 0;
        }
        else
        {
          v116 = v566;
          v252 = sub_1B6843EDC(v566, v556, v115, v241, v298, 1, *(unsigned __int8 *)(v566 + 8) == 0, v299, (unsigned int *)&v298[24 * *(unsigned __int8 *)(v566 + 188) + 168]);
        }
        if (*(int *)(v116 + 4) < 3)
        {
          if (*(_BYTE *)(v544 + 3791) && *(char *)(*(_QWORD *)(v116 + 952) + 252) < 1)
            goto LABEL_365;
          sub_1B6848F80(v116, v556, v115, v241, *v537, (uint64_t)(*v537 + 168));
        }
        else
        {
          sub_1B6845EAC(v116, v556, v115, v241, *a5, *v537, a7, 0xFFFFFFFFuLL);
        }
        v116 = v566;
LABEL_365:
        v243 = v551;
        v253 = v551;
        goto LABEL_366;
      }
      v326 = *(unsigned __int8 *)(*(_QWORD *)(v566 + 1880) + 2009) - v241;
      v327 = (_WORD *)(*((_QWORD *)v298 + 11)
                     + 2 * ((v300 >> 3) + (v302 >> 3) * (unint64_t)(v301 >> 3)));
      if (v303 == 2)
      {
        if ((*v327 & 0x80) == 0)
        {
          *v327 |= 0x80u;
          if (1 << v326 >= 8)
          {
            v328 = 0;
            v329 = 2 * ((unint64_t)*v298 >> 3);
            v330 = v327;
            v143 = (void ***)v537;
            do
            {
              v331 = v330;
              v332 = (1 << v326) >> 3;
              do
              {
                *v331++ = *v327;
                --v332;
              }
              while (v332);
              ++v328;
              v330 = (_WORD *)((char *)v330 + v329);
            }
            while (v328 != (1 << v326) >> 3);
LABEL_400:
            v252 = 0;
            v253 = v551;
            goto LABEL_367;
          }
        }
      }
      else
      {
        sub_1B685F88C(v566 + 1920, v566, v556, v115, v241, v303, ((unsigned __int16)*v327 >> 4) & 7);
        v240 = v544;
        sub_1B6868918(v566 + 1920, v556, v115, 0, v326, v298);
        v112 = xmmword_1B6917860;
        v243 = v551;
        v149 = v563;
        v116 = v566;
      }
      v252 = 0;
      v253 = v243;
      v143 = (void ***)v537;
LABEL_367:
      *(_QWORD *)(v116 + 32 * v253 + 32) = 0xFFFFFFFFLL;
      if ((*(_BYTE *)(v116 + 188) || (v252 & 1) != 0) && !*(_BYTE *)(v116 + v253 + 8116))
      {
        *(_DWORD *)(v116 + 4 * v253 + 8088) |= 0x1200u;
        v242 = v553;
        goto LABEL_413;
      }
      v304 = v116 + 4 * v253;
      v305 = *(_DWORD *)(v304 + 8088);
      v242 = v553;
      if ((v305 & 0x1200) == 0)
        goto LABEL_432;
      v306 = *(_QWORD *)(v116 + 1872);
      if (*(unsigned __int8 *)(v306 + 10) > 1u || !*(_BYTE *)(v116 + v253 + 8108))
      {
LABEL_413:
        if (*(unsigned __int8 *)(*(_QWORD *)(v116 + 1880) + 241) == v241)
          v334 = (*(_DWORD *)(v116 + 4 * v241 + 8088) >> 12) & 1;
        else
          v334 = 0;
        if (*(int *)(v116 + 200) >= 1 && !*(_BYTE *)(v116 + v243 + 8108) && *(_BYTE *)(v116 + v243 + 8112))
        {
          v335 = *(_QWORD **)(v116 + 8136);
          v336 = *v335 * (int)(v115 & 0xFFFFFFFC) + ((int)v556 >> 2);
          *(_DWORD *)(*v143)[12] = *(_DWORD *)(v335[20] + 4 * v336);
          *((_BYTE *)(*v143)[12] + 8) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v116 + 8136) + 176) + v336);
        }
        *(_WORD *)(v240 + 362) = 0;
        v337 = v116 + 4 * v243;
        if ((*(_DWORD *)(v337 + 8088) & 0x200) != 0)
        {
          v338 = v337 + 8088;
          sub_1B68492D8(v116, v556, (unsigned __int8 *)v115, v241, a5, v143, a7, 0);
          v116 = v566;
          if ((v334 & ((*(_BYTE *)(v338 + 1) & 0x10) >> 4) & 1) == 0)
          {
LABEL_425:
            v149 = v563;
            v243 = v551;
            v112 = xmmword_1B6917860;
            if (*(_DWORD *)(v116 + 4) == 2)
            {
              v339 = *v143;
              v340 = v556 - *((_DWORD *)*v143 + 1);
              v341 = v115 - *((_DWORD *)*v143 + 2);
              v342 = *(unsigned __int8 *)*v143;
              v343 = (*v143)[12];
              v344 = (v340 >> 2) + (v342 >> 2) * (unint64_t)(v341 >> 2);
              if (v343[16 * v344 + 10] == 1)
              {
                if (*(_BYTE *)(v240 + 3790))
                {
                  if ((*((_WORD *)v339[11] + (v340 >> 3) + (v342 >> 3) * (unint64_t)(v341 >> 3)) & 0x70) != 0x30)
                  {
                    v345 = *(unsigned __int8 *)(*(_QWORD *)(v116 + 1880) + 2009) - v241;
                    v346 = &v343[16 * v344];
                    v347 = *v346;
                    v348 = v346[1];
                    *((_DWORD *)v339 + 52) = 0;
                    *((_OWORD *)v339 + 12) = xmmword_1B6917860;
                    *((_WORD *)v339 + 106) = 0;
                    v349 = v116 + 8 * v551;
                    v339[18] = *(void **)(v349 + 4616);
                    v350 = v116 + 1920;
                    v351 = *(_QWORD *)(v116 + 4296);
                    v352 = *(unsigned __int8 *)(*(_QWORD *)(v116 + 4304) + 2009) - v241;
                    *(_QWORD *)(v116 + 3992) = v351;
                    *(_DWORD *)(v116 + 3968) = v352;
                    *(_QWORD *)(v116 + 3972) = 1;
                    *(_DWORD *)(v116 + 3980) = *(unsigned __int8 *)(*(_QWORD *)(v351 + 1368) + 245);
                    *(_OWORD *)(v116 + 4056) = 0u;
                    *(_OWORD *)(v116 + 4072) = 0u;
                    *(_OWORD *)(v116 + 4088) = 0u;
                    *(_OWORD *)(v116 + 4104) = 0u;
                    *(_OWORD *)(v116 + 4120) = 0u;
                    *(_QWORD *)(v116 + 4136) = 0;
                    *(_QWORD *)(v116 + 4320) = v116;
                    *(_DWORD *)(v116 + 4344) = v556;
                    *(_DWORD *)(v116 + 4348) = v115;
                    *(_DWORD *)(v116 + 4352) = v241;
                    *(_QWORD *)(v116 + 4328) = v526;
                    *(_BYTE *)v240 = *(_BYTE *)(v116 + 8);
                    sub_1B6862264(v116 + 1920, v556, v115, (unsigned __int8 *)v339, v345, 0, v347, 0, a7, (uint64_t)(v339 + 24));
                    v116 = v566;
                    v353 = *(int8x16_t *)(v339 + 17);
                    *(int8x16_t *)(v339 + 17) = vextq_s8(v353, v353, 8uLL);
                    *(_QWORD *)(v349 + 4616) = v353.i64[0];
                    if (!*(_BYTE *)(v566 + 8))
                    {
                      *(_BYTE *)(v240 + 363) = 0;
                      v339[24] = (char *)v339[24]
                               + sub_1B6867384(v350, v556, (unsigned __int8 *)v115, (unsigned __int8 *)v339, (unsigned __int8 *)v339, 1u, 0, v348, v345, 0, 0, a7, &v581);
                      sub_1B683ADE4(v566, (uint64_t)v339[17], (uint64_t)v339[18], v556 - *((_DWORD *)v339 + 1), v115 - *((_DWORD *)v339 + 2), v556 - *((_DWORD *)v339 + 1), v115 - *((_DWORD *)v339 + 2), *(unsigned __int8 *)v339 >> 1);
                      v116 = v566;
                    }
                  }
                }
                v354 = *(_QWORD *)(v116 + 944);
                v355 = *(_OWORD *)(v354 + 16);
                *(_OWORD *)(v354 + 216) = *(_OWORD *)v354;
                v356 = *(_OWORD *)(v354 + 32);
                v357 = *(_OWORD *)(v354 + 64);
                v358 = *(_OWORD *)(v354 + 80);
                *(_OWORD *)(v354 + 264) = *(_OWORD *)(v354 + 48);
                *(_OWORD *)(v354 + 280) = v357;
                *(_OWORD *)(v354 + 248) = v356;
                *(_OWORD *)(v354 + 232) = v355;
                v359 = *(_OWORD *)(v354 + 96);
                v360 = *(_OWORD *)(v354 + 128);
                v361 = *(_OWORD *)(v354 + 144);
                *(_OWORD *)(v354 + 328) = *(_OWORD *)(v354 + 112);
                *(_OWORD *)(v354 + 344) = v360;
                *(_OWORD *)(v354 + 296) = v358;
                *(_OWORD *)(v354 + 312) = v359;
                v362 = *(_OWORD *)(v354 + 176);
                *(_OWORD *)(v354 + 376) = *(_OWORD *)(v354 + 160);
                *(_OWORD *)(v354 + 392) = v362;
                LOBYTE(v581) = 0;
                *(_QWORD *)(v354 + 408) = *(_QWORD *)(v354 + 192);
                *(_OWORD *)(v354 + 360) = v361;
                v363 = 8 * (*(_DWORD *)(v354 + 208) - *(_DWORD *)(v354 + 24));
                *(_QWORD *)(v354 + 32) = 0;
                *(_QWORD *)(v354 + 8) = 510;
                *(_QWORD *)(v354 + 16) = v363;
                v143 = (void ***)v537;
                sub_1B6841DFC(v116, v556, v115, *v537, 1, 0, 0, 0, 0);
                v364 = *v537;
                *((_DWORD *)v364 + 4) = *((_DWORD *)*v537 + 5);
                sub_1B6847020((unint64_t *)v566, v556, v115, v241, a7, (int *)v364 + 4, &v581);
                v116 = v566;
                v365 = *(_QWORD *)(v566 + 944);
                *((_DWORD *)*v537 + 52) = ((*(_DWORD *)(v365 + 16)
                                          + 8 * (*(_DWORD *)(v365 + 24) - *(_DWORD *)(v365 + 208))) << 8)
                                        - *(_DWORD *)(v365 + 8)
                                        + 510;
                v367 = *(_OWORD *)(v365 + 264);
                v366 = *(_OWORD *)(v365 + 280);
                *(_OWORD *)(v365 + 32) = *(_OWORD *)(v365 + 248);
                *(_OWORD *)(v365 + 48) = v367;
                v369 = *(_OWORD *)(v365 + 328);
                v368 = *(_OWORD *)(v365 + 344);
                v370 = *(_OWORD *)(v365 + 296);
                *(_OWORD *)(v365 + 96) = *(_OWORD *)(v365 + 312);
                *(_OWORD *)(v365 + 112) = v369;
                *(_OWORD *)(v365 + 64) = v366;
                *(_OWORD *)(v365 + 80) = v370;
                v371 = *(_OWORD *)(v365 + 392);
                v372 = *(_OWORD *)(v365 + 360);
                *(_OWORD *)(v365 + 160) = *(_OWORD *)(v365 + 376);
                *(_OWORD *)(v365 + 176) = v371;
                v373 = *(_OWORD *)(v365 + 232);
                *(_QWORD *)(v365 + 192) = *(_QWORD *)(v365 + 408);
                *(_OWORD *)(v365 + 128) = v368;
                *(_OWORD *)(v365 + 144) = v372;
                *(_OWORD *)v365 = *(_OWORD *)(v365 + 216);
                *(_OWORD *)(v365 + 16) = v373;
                *((_QWORD *)*v537 + 25) = *((_QWORD *)*v537 + 24)
                                        + ((*((_DWORD *)*v537 + 52)
                                          * *(unsigned __int16 *)(v566
                                                                              + 2 * *((__int16 *)*v537 + 106)
                                                                              + 992)) >> (8
                                                                                        * (*((_WORD *)*v537 + 106) == 0)));
                v242 = v553;
                v149 = v563;
                v243 = v551;
                v112 = xmmword_1B6917860;
              }
            }
            goto LABEL_432;
          }
        }
        else if (!v334)
        {
          goto LABEL_425;
        }
        *(_BYTE *)(v240 + 363) = 0;
        sub_1B68492D8(v116, v556, (unsigned __int8 *)v115, v241, a5, v143, a7, 3u);
        v116 = v566;
        *(_BYTE *)(v240 + 362) = 0;
        goto LABEL_425;
      }
      v307 = (unsigned int *)(v304 + 8088);
      v308 = *(_QWORD *)(v116 + 952);
      if (*(_BYTE *)(v308 + 609) && v245 > 4)
      {
        LOBYTE(v309) = 0;
      }
      else
      {
        v310 = *v143;
        if ((*((_WORD *)(*v143)[11]
              + ((v556 - *((_DWORD *)*v143 + 1)) >> 3)
              + ((unint64_t)*(unsigned __int8 *)*v143 >> 3)
              * ((v115 - *((_DWORD *)*v143 + 2)) >> 3)) & 0x80) != 0)
        {
          LOBYTE(v309) = 0;
        }
        else
        {
          v311 = *(_QWORD *)(v116 + 1880);
          if (!*(_BYTE *)(v308 + 610))
            goto LABEL_389;
          v312 = v306 + 79296;
          v313 = *(unsigned __int8 *)(v311 + 2013) >> v241;
          if ((a7 & 0xF0) != 0)
          {
            v314 = *(_QWORD *)(v306 + 1368);
            v315 = *(_BYTE *)(v314 + 2009);
            if ((*(_BYTE *)(*(_QWORD *)(v306 + 79296)
                           + 32
                           * ((((*(unsigned __int8 *)(v314 + 2013) - 1) & (v556 - v313)) >> (v315 - v241))
                            + (((*(unsigned __int8 *)(v314 + 2013) - 1) & v115) >> (v315 - v241))
                            * byte_1B692260D[v243]
                            + *(_DWORD *)(v306 + 79304)
                            * (((v556 - v313) >> v315) + (v115 >> v315) * *(_DWORD *)(v314 + 2016))
                            + byte_1B6922609[v243])
                           + 26) & 0x98) == 0x88)
              goto LABEL_389;
          }
          if ((a7 & 0x1E00) != 0)
          {
            v316 = *(_QWORD *)(v306 + 1368);
            v317 = *(_BYTE *)(v316 + 2009);
            if ((*(_BYTE *)(*(_QWORD *)(v306 + 79296)
                           + 32
                           * ((((*(unsigned __int8 *)(v316 + 2013) - 1) & v556) >> (v317 - v241))
                            + (((*(unsigned __int8 *)(v316 + 2013) - 1) & (v115 - v313)) >> (v317 - v241))
                            * byte_1B692260D[v243]
                            + *(_DWORD *)(v306 + 79304)
                            * ((v556 >> v317) + ((v115 - v313) >> v317) * *(_DWORD *)(v316 + 2016))
                            + byte_1B6922609[v243])
                           + 26) & 0x98) == 0x88)
              goto LABEL_389;
          }
          if ((a7 & 0x1E000) != 0
            && (v318 = *(_QWORD *)(v306 + 1368),
                v319 = *(_BYTE *)(v318 + 2009),
                (*(_BYTE *)(*(_QWORD *)(v306 + 79296)
                          + 32
                          * ((((*(unsigned __int8 *)(v318 + 2013) - 1) & (v313 + v556)) >> (v319 - v241))
                           + (((*(unsigned __int8 *)(v318 + 2013) - 1) & (v115 - v313)) >> (v319 - v241))
                           * byte_1B692260D[v243]
                           + *(_DWORD *)(v306 + 79304)
                           * (((v313 + v556) >> v319) + ((v115 - v313) >> v319) * *(_DWORD *)(v318 + 2016))
                           + byte_1B6922609[v243])
                          + 26) & 0x98) == 0x88)
            || (a7 & 0x100) != 0
            && (v320 = *(_QWORD *)(v306 + 1368),
                v321 = *(_BYTE *)(v320 + 2009),
                (*(_BYTE *)(*(_QWORD *)(v306 + 79296)
                          + 32
                          * ((((*(unsigned __int8 *)(v320 + 2013) - 1) & (v556 - v313)) >> (v321 - v241))
                           + (((*(unsigned __int8 *)(v320 + 2013) - 1) & (v115 - v313)) >> (v321 - v241))
                           * byte_1B692260D[v243]
                           + *(_DWORD *)(v306 + 79304)
                           * (((v556 - v313) >> v321) + ((v115 - v313) >> v321) * *(_DWORD *)(v320 + 2016))
                           + byte_1B6922609[v243])
                          + 26) & 0x98) == 0x88)
            || (a7 & 0xF) != 0
            && (v322 = *(_QWORD *)(v306 + 1368),
                v323 = *(_BYTE *)(v322 + 2009),
                (*(_BYTE *)(*(_QWORD *)v312
                          + 32
                          * ((((*(unsigned __int8 *)(v322 + 2013) - 1) & (v556 - v313)) >> (v323 - v241))
                           + (((*(unsigned __int8 *)(v322 + 2013) - 1) & (v313 + v115)) >> (v323 - v241))
                           * byte_1B692260D[v243]
                           + *(_DWORD *)(v312 + 8)
                           * (((v556 - v313) >> v323) + ((v313 + v115) >> v323) * *(_DWORD *)(v322 + 2016))
                           + byte_1B6922609[v243])
                          + 26) & 0x98) == 0x88))
          {
LABEL_389:
            v324 = 1;
          }
          else
          {
            v500 = sub_1B68491A8(v116, v556, v115, v241, (unsigned __int8 *)*v143, a7);
            v243 = v551;
            v116 = v566;
            v324 = v500;
          }
          v325 = 3;
          if (v245 > *(unsigned __int8 *)(v311 + 2011))
          {
            v175 = v539;
          }
          else
          {
            v175 = v539;
            if (v324)
            {
              sub_1B685F844(v116 + 1920, v116, v556, v115, v540, (unsigned __int8 *)v310);
              v240 = v544;
              v241 = v540;
              v325 = sub_1B6869D9C(v116 + 1920, v556, v115, v245, *v537);
              v243 = v551;
              v116 = v566;
              v305 = *v307;
            }
          }
          if (v324)
            v309 = v325;
          else
            v309 = 0;
          if (v309 >= 2)
          {
            v333 = v305 | 0x200;
            v143 = (void ***)v537;
            v242 = v553;
            goto LABEL_412;
          }
          v143 = (void ***)v537;
        }
        v242 = v553;
      }
      v333 = v305 & 0xFFFFFDFF;
      LOBYTE(v325) = v309;
LABEL_412:
      *v307 = v333 & 0xFFFFEFFF | ((v325 & 1) << 12);
      goto LABEL_413;
    }
    v249 = (int *)(v116 + 4 * v243 + 8088);
    v250 = *v249;
    v251 = *v249 | 6;
    *v249 = v251;
    if (v245 < 4)
    {
      if (v245 == 3 && !*(_BYTE *)(*(_QWORD *)(v116 + 952) + 250))
      {
        v251 = v250 & 0xFFFFFFF9;
        goto LABEL_337;
      }
    }
    else
    {
      v251 = v250 | 0xE;
      *v249 = v250 | 0xE;
    }
    if (v245 <= v244[2008] || !v533)
      goto LABEL_338;
    v256 = 0;
    v257 = v556 - *((_DWORD *)v246 + 1);
    if ((v257 & 0x80000000) == 0)
    {
      v258 = v115 - *((_DWORD *)v246 + 2);
      if ((v258 & 0x80000000) == 0)
      {
        v256 = 0;
        if (v257 < v247 && v258 < v247)
          v256 = v248 + 16 * ((v257 >> 2) + (v247 >> 2) * (unint64_t)(v258 >> 2));
      }
    }
    v259 = v244[2013] >> v540;
    v586 = v556;
    v587 = v556 + (v259 >> 1);
    v588 = v556;
    v589 = v587;
    v583[0] = v115;
    v583[1] = v115;
    v584 = v115 + (v259 >> 1);
    v585 = v584;
    v581 = 0u;
    v582 = 0u;
    v579 = 0u;
    v580 = 0u;
    v261 = v259 >= 0x11 && (v260 = *(_QWORD *)(v116 + 952), *(_DWORD *)(v260 + 508)) && *(_BYTE *)(v260 + 580) != 0;
    v266 = 0;
    v267 = 0;
    v268 = 0;
    v269 = 0;
    do
    {
      v270 = *(unsigned __int8 **)(v116 + 32 * (int)v554 + 4456 + 8 * v266);
      v271 = *(&v586 + v266) - *((_DWORD *)v270 + 1);
      v272 = v583[v266] - *((_DWORD *)v270 + 2);
      v273 = *v270;
      v275 = *((_QWORD *)v270 + 11);
      v274 = *((_QWORD *)v270 + 12);
      v276 = (_WORD *)(v275 + 2 * ((v271 >> 3) + (v273 >> 3) * (unint64_t)(v272 >> 3)));
      *((_QWORD *)&v581 + v266) = v276;
      if ((int)v554 < (*v276 & 3))
        ++v269;
      v277 = v274 + 16 * ((v271 >> 2) + (v273 >> 2) * (unint64_t)(v272 >> 2));
      *((_QWORD *)&v579 + v266) = v277;
      v278 = *(unsigned __int8 *)(v277 + 10);
      if (v278 == 2)
        ++v268;
      if (v278 == 1)
        ++v267;
      ++v266;
    }
    while (v266 != 4);
    if (v261
      || (v279 = (char *)&v575 + 24 * (v239 > 2),
          v280 = *((_QWORD *)v246 + 21) + (*((_DWORD *)v279 + 4) >> 2) * *(unsigned __int16 *)(v116 + 996),
          v281 = *((_QWORD *)v279 + 1),
          v280 < v281))
    {
      v251 &= 0xFFFFFFF9;
LABEL_314:
      v243 = v551;
LABEL_337:
      *v249 = v251;
      goto LABEL_338;
    }
    v243 = v551;
    if ((*(_BYTE *)(v256 + 11) & 1) == 0 || v268 < 4 || *((_QWORD *)v246 + 22) >= v281)
    {
      if (v269)
      {
        if (v281 >= *((_QWORD *)v246 + 22))
          goto LABEL_338;
        goto LABEL_335;
      }
      if (v267 == 1)
        goto LABEL_338;
      if (!v267)
      {
        v501 = *(_WORD *)v581;
        v502 = *(_WORD *)v581 & 0x70;
        if (v502 == 16)
        {
          if ((**((_WORD **)&v581 + 1) & 0x70) == 0x10)
          {
LABEL_676:
            v251 &= ~4u;
LABEL_682:
            v241 = v540;
            goto LABEL_337;
          }
        }
        else if (!v502)
        {
          v503 = **((_WORD **)&v581 + 1);
          if ((**((_WORD **)&v581 + 1) & 0x70) == 0)
          {
            v504 = *(_WORD *)v582;
            if ((*(_WORD *)v582 & 0x70) == 0 && (**((_WORD **)&v582 + 1) & 0x70) == 0)
            {
              v505 = v579;
              v506 = sub_1B6851430((__int16 *)v256, (__int16 *)v579, 0);
              v507 = *((_QWORD *)&v579 + 1);
              if (!v506
                || !sub_1B6851430((__int16 *)v256, *((__int16 **)&v579 + 1), 0)
                || (v561 = v580, !sub_1B6851430((__int16 *)v256, (__int16 *)v580, 0))
                || !sub_1B6851430((__int16 *)v256, *((__int16 **)&v580 + 1), 0)
                || (v501 & 0x80) == 0
                && ((*(unsigned __int8 *)(v505 + 11) | ((v503 & 0x80) >> 7)) & 1) == 0
                && ((*(unsigned __int8 *)(v507 + 11) | ((v504 & 0x80) >> 7)) & 1) == 0
                && (*(_BYTE *)(v561 + 11) & 1) == 0)
              {
                v508 = sub_1B6851430((__int16 *)v505, (__int16 *)v507, 1u);
                v509 = (__int16 *)v580;
                if (v508
                  && sub_1B6851430((__int16 *)v580, *((__int16 **)&v580 + 1), 1u)
                  && !sub_1B6851430((__int16 *)v505, v509, 1u))
                {
                  v251 = v251 & 0xFFFFFFF9 | 2;
                }
                else
                {
                  if (!sub_1B6851430((__int16 *)v505, v509, 1u)
                    || ((v508 | !sub_1B6851430((__int16 *)v507, *((__int16 **)&v580 + 1), 1u)) & 1) != 0)
                  {
                    if (sub_1B6851430((__int16 *)v505, (__int16 *)v507, 3u)
                      || sub_1B6851430((__int16 *)v505, v509, 3u)
                      || (v510 = (__int16 *)*((_QWORD *)&v580 + 1),
                          sub_1B6851430((__int16 *)v505, *((__int16 **)&v580 + 1), 3u))
                      || sub_1B6851430((__int16 *)v507, v509, 3u)
                      || sub_1B6851430((__int16 *)v507, v510, 3u)
                      || sub_1B6851430(v509, v510, 3u))
                    {
                      v115 = v565;
                      v116 = v566;
                      v175 = v539;
                      v241 = v540;
                      v243 = v551;
                      goto LABEL_338;
                    }
                    goto LABEL_686;
                  }
                  v251 = v251 & 0xFFFFFFF9 | 4;
                }
LABEL_687:
                v115 = v565;
                v116 = v566;
                v175 = v539;
                v241 = v540;
                goto LABEL_314;
              }
LABEL_686:
              v251 &= 0xFFFFFFF9;
              goto LABEL_687;
            }
          }
        }
        v511 = *(_WORD *)v582 & 0x70;
        if (v511 == 16)
        {
          if ((**((_WORD **)&v582 + 1) & 0x70) == 0x10)
            goto LABEL_676;
        }
        else if (v502 == 32 && v511 == 32)
        {
          goto LABEL_681;
        }
        if ((**((_WORD **)&v581 + 1) & 0x70) == 0x20 && (**((_WORD **)&v582 + 1) & 0x70) == 0x20)
        {
LABEL_681:
          v251 &= ~2u;
          goto LABEL_682;
        }
        v241 = v540;
LABEL_338:
        if (!*(_BYTE *)(v116 + v243 + 8116))
          *v249 = v251 | 0x1200;
        goto LABEL_340;
      }
      if (v281 <= *((_QWORD *)v246 + 22))
        goto LABEL_338;
    }
LABEL_335:
    v251 &= 0xFFFFFFF9;
    goto LABEL_337;
  }
LABEL_432:
  v375 = *((_DWORD *)*v143 + 4);
  v376 = *(_QWORD *)(v116 + 1872);
  if (*(unsigned __int8 *)(v376 + 10) <= 1u && *(_BYTE *)(*(_QWORD *)(v116 + 952) + 610))
  {
    v377 = v376 + 79296;
    v378 = v116 + 32 * v243;
    v374 = *v143;
    v379 = *(_BYTE *)(v378 + 58) & 0xE7 | (8
                                         * (*((_BYTE *)v374[12]
                                            + 16 * ((v556 - *((_DWORD *)v374 + 1)) >> 2)
                                            + 16
                                            * ((unint64_t)*(unsigned __int8 *)v374 >> 2)
                                            * ((v115 - *((_DWORD *)v374 + 2)) >> 2)
                                            + 10) & 3));
    *(_BYTE *)(v378 + 58) = v379;
    *(_BYTE *)(v378 + 58) = v379 & 0xF8 | (*((unsigned __int16 *)(*v143)[11]
                                           + ((v556 - *((_DWORD *)*v143 + 1)) >> 3)
                                           + ((unint64_t)*(unsigned __int8 *)*v143 >> 3)
                                           * ((v115 - *((_DWORD *)*v143 + 2)) >> 3)) >> 4) & 7;
    *(_QWORD *)(v378 + 40) = (*v143)[3 * (v239 > 2) + 22];
    v380 = *(_QWORD *)(v376 + 1368);
    LOBYTE(v374) = *(_BYTE *)(v380 + 2009);
    v381 = (_OWORD *)(*(_QWORD *)v377
                    + 32
                    * ((((*(unsigned __int8 *)(v380 + 2013) - 1) & v556) >> ((_BYTE)v374 - v241))
                     + (((*(unsigned __int8 *)(v380 + 2013) - 1) & v115) >> ((_BYTE)v374 - v241))
                     * byte_1B692260D[v243]
                     + *(_DWORD *)(v377 + 8)
                     * ((v556 >> (char)v374) + (v115 >> (char)v374) * *(_DWORD *)(v380 + 2016))
                     + byte_1B6922609[v243]));
    v382 = *(_OWORD *)(v378 + 48);
    *v381 = *(_OWORD *)(v378 + 32);
    v381[1] = v382;
  }
  v383 = v545;
  if (*(_DWORD *)(v116 + 204) > v241)
    v383 = 0;
  v384 = v533;
  if (!v383)
  {
    v400 = 0;
    v401 = v116 + 32 * (int)v554 + 4456;
    do
    {
      v402 = ((v400 & 1) << v149) + v556;
      if (v402 < *(_DWORD *)(v116 + 16))
      {
        v403 = (v400 >> 1 << v149) + v115;
        if (v403 < *(_DWORD *)(v116 + 20))
        {
          sub_1B683A8BC(v116, (unsigned __int8 *)*v143, *(unsigned __int8 **)(v401 + 8 * v400), v402, v403, v175);
          v149 = v563;
          v116 = v566;
        }
      }
      ++v400;
    }
    while (v400 != 4);
    v404 = *v143;
    *(_OWORD *)(v404 + 21) = v575;
    v404[23] = v576;
    v405 = *v143;
    *((_OWORD *)v405 + 12) = v577;
    v405[26] = v578;
    if (!*(_BYTE *)(v240 + 3784))
      goto LABEL_626;
    return;
  }
  v532 = v375;
  v385 = -1;
  v386 = v556;
  v387 = v554;
  if (v533 && *(_BYTE *)(v116 + 191))
  {
    v388 = *(_BYTE *)(*(_QWORD *)(v116 + 1880) + 194);
    v389 = 500 << v388;
    v390 = 1 << (v529 - 3);
    if ((*(_DWORD *)(v116 + 20) - (int)v115) >> 3 >= v390)
      v391 = 1 << (v529 - 3);
    else
      v391 = (*(_DWORD *)(v116 + 20) - (int)v115) >> 3;
    if (v391 < 1)
    {
      v393 = 0;
    }
    else
    {
      v392 = 0;
      v393 = 0;
      v394 = *(_DWORD *)(v116 + 16);
      v395 = (uint64_t)v394 >> 3;
      v396 = (int)(v394 - v556) >> 3;
      if (v396 < v390)
        v390 = v396;
      v397 = *(_QWORD *)(*(_QWORD *)(v116 + 960) + 1328)
           + 4 * (int)v395 * (uint64_t)((int)v115 >> 3)
           + 4 * ((int)v556 >> 3);
      v398 = 4 * v395;
      do
      {
        if (v390 >= 1)
        {
          v399 = 0;
          do
          {
            if (*(_DWORD *)(v397 + v399) > v393)
              v393 = *(_DWORD *)(v397 + v399);
            v399 += 4;
          }
          while (4 * v390 != v399);
        }
        ++v392;
        v397 += v398;
      }
      while (v392 != v391);
    }
    if (v393 <= v389)
    {
      v385 = -1;
    }
    else
    {
      v406 = v389 + (v389 >> 1);
      if (v393 < 400 << v388)
        v407 = 2;
      else
        v407 = 3;
      if (v393 >= v406)
        v385 = v407;
      else
        v385 = 3;
    }
  }
  v408 = *v143;
  v409 = v556 - *((_DWORD *)*v143 + 1);
  v410 = v115 - *((_DWORD *)*v143 + 2);
  v411 = *(unsigned __int8 *)*v143;
  if (v409 >= v411 || v410 >= v411)
    v413 = 0;
  else
    v413 = (unint64_t)v408[12]
         + 16 * (v409 >> 2)
         + 16 * (v411 >> 2) * (unint64_t)(v410 >> 2);
  if (*(_BYTE *)(v240 + 3784))
  {
    v414 = 0;
    v415 = 0;
    v416 = v570[0];
    goto LABEL_503;
  }
  v417 = *((__int16 *)v408[11] + (v409 >> 3) + (v411 >> 3) * (unint64_t)(v410 >> 3));
  v414 = *(_DWORD *)(v116 + 184);
  v418 = v534;
  if (*(_DWORD *)(v116 + 4) != 2)
    v418 = 1;
  if ((v418 & 1) == 0 && *(unsigned __int8 *)(v413 + 10) >= 2u)
  {
    if (*(_BYTE *)(*(_QWORD *)(v116 + 952) + 614)
      && v533
      && (unint64_t)v408[22] >= *((_QWORD *)&v575 + 1) + (*((_QWORD *)&v575 + 1) >> 3))
    {
      v570[0] = 0;
      *((_DWORD *)v408 + 52) = 0;
      *((_OWORD *)v408 + 12) = v112;
      *((_WORD *)v408 + 106) = 0;
    }
    else
    {
      sub_1B6845EAC(v116, v556, v115, v540, *a5, (unsigned __int8 *)v408, a7, *((unint64_t *)&v577 + 1));
      v387 = v554;
      v116 = v566;
      v408 = *v143;
      v532 = *((_DWORD *)*v143 + 4);
    }
  }
  v416 = v570[0];
  v419 = v524 ^ 1;
  if (!v570[0])
    v419 = 1;
  if ((v419 & 1) != 0)
  {
    v415 = 0;
    v384 = v533;
  }
  else
  {
    v517 = v413;
    v420 = v408;
    v421 = sub_1B6845D14(v556, v115, v525, (unsigned __int8 *)v408, 0);
    v116 = v566;
    if (*(_BYTE *)(v566 + 8) || (v421 & 1) != 0)
    {
      if (!v421)
      {
LABEL_494:
        v415 = 0;
        v416 = 1;
        v524 = 1;
        v384 = v533;
        v408 = v420;
        v413 = v517;
        v387 = v554;
        goto LABEL_503;
      }
    }
    else
    {
      v116 = v566;
      if ((sub_1B6845D14(v556, v115, v525, (unsigned __int8 *)v420, 1u) & 1) == 0)
      {
        v116 = v566;
        if ((sub_1B6845D14(v556, v115, v525, (unsigned __int8 *)v420, 2u) & 1) == 0)
          goto LABEL_494;
      }
    }
    v532 = v417 >> 9;
    v422 = (v417 >> 9) - *a8;
    if (v422)
    {
      if (v422 < 0)
        v422 = *a8 - (v417 >> 9);
      v423 = 63 - 2 * __clz(v422);
    }
    else
    {
      v423 = 1;
    }
    v384 = v533;
    v408 = v420;
    v387 = v554;
    v524 = 0;
    v424 = *((_DWORD *)v420 + 46) + v423;
    *((_DWORD *)v420 + 46) = v424;
    v425 = *((_DWORD *)v420 + 52) + (v423 << 8);
    *((_DWORD *)v420 + 52) = v425;
    v420[22] = (char *)v420[21]
             + ((v424 * *(unsigned __int16 *)(v116 + 992 + 2 * *((__int16 *)v420 + 94))) >> (8
                                                                                             * (*((_WORD *)v420 + 94) == 0)));
    v420[25] = (char *)v420[24]
             + ((v425 * *(unsigned __int16 *)(v116 + 992 + 2 * *((__int16 *)v420 + 106))) >> (8 * (*((_WORD *)v420 + 106) == 0)));
    v416 = 1;
    v415 = 1;
    v413 = v517;
  }
LABEL_503:
  v428 = v385 < 0 || v416 == 0 || *(_BYTE *)(v116 + 191) == 0 || v384 == 0;
  v429 = v414;
  v430 = (unint64_t)v408[3 * v414 + 22];
  if (v428)
    v431 = 0;
  else
    v431 = v430 >> v385;
  v432 = *(_DWORD *)(v116 + 12);
  if (v432 >= 3 && v416)
  {
    v433 = v539;
    if (*(_BYTE *)(v240 + 3784))
    {
      v434 = *((_QWORD *)&v575 + 3 * v429 + 1);
    }
    else
    {
      v435 = *(_DWORD *)(v116 + 28) + *(unsigned __int8 *)(*(_QWORD *)(v116 + 1880) + 2001);
      if (v435 >= 63)
        v435 = 63;
      v436 = dword_1B6923630[70 * *(unsigned __int8 *)(v116 + 1006) + (v435 & ~(v435 >> 31))];
      *(_WORD *)(v116 + 984) = v436;
      *(_WORD *)(v116 + 992) = v436;
      v434 = v571
           + ((v572 * *(unsigned __int16 *)(v116 + 992 + 2 * SWORD2(v572))) >> (8 * (WORD2(v572) == 0)));
      *((_QWORD *)&v571 + 1) = v434;
    }
  }
  else
  {
    v434 = *((_QWORD *)&v575 + 3 * v429 + 1);
    v433 = v539;
    if (!v416)
      goto LABEL_615;
  }
  if (v432 == 5)
  {
    if (*(_BYTE *)(v240 + 3784))
    {
      v432 = 5;
      goto LABEL_609;
    }
    v516 = (unint64_t)v408[24];
    if (!v384)
    {
      v430 = (unint64_t)v408[25];
LABEL_602:
      v482 = v242 - *(_DWORD *)(v116 + 28);
      if (v482)
      {
        if (v482 >= 16)
          v482 = 16;
        if (v482 <= -15)
          v482 = -15;
        v516 = (v516 * word_1B692354C[v482 + 15] + 128) >> 8;
      }
      v408[24] = (void *)v516;
      v432 = *(_DWORD *)(v116 + 12);
      goto LABEL_609;
    }
    v512 = v434;
    v437 = *(_QWORD *)(v116 + 1880);
    v438 = *(unsigned __int8 *)(v437 + 2000);
    v560 = *(_DWORD *)(v116 + 28);
    v439 = *(unsigned __int8 *)(v437 + 2009) - (_DWORD)v540;
    v440 = 1 << v439;
    if (v439 >= *(_DWORD *)(*(_QWORD *)(v116 + 1888) + 1620))
      v441 = *(_DWORD *)(*(_QWORD *)(v116 + 1888) + 1620);
    else
      v441 = *(unsigned __int8 *)(v437 + 2009) - (_DWORD)v540;
    v562 = (1 << v441);
    v552 = (int)v562 >> 1;
    v442 = v556 - *((_DWORD *)v408 + 1);
    v443 = v115 - *((_DWORD *)v408 + 2);
    v564 = v408;
    v514 = v415;
    v515 = v416;
    v518 = v413;
    v513 = v431;
    if (v438 == 8)
    {
      if ((int)(v442 | v443) >= 0)
      {
        v519 = 0;
        v444 = *(unsigned __int8 *)v408;
        if (v442 < v444 && v443 < v444)
        {
          v445 = (*(uint64_t (**)(void *, unint64_t, uint64_t))(*(_QWORD *)v408[3] + 24))(v408[3], (unint64_t)v408[4] + v442 + *((unsigned __int8 *)v408 + 1) * (unint64_t)v443, v387);
          v408 = v564;
          v116 = v566;
          v519 = v445;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          v443 = v565 - *((_DWORD *)v564 + 2);
        }
      }
      else
      {
        v519 = 0;
      }
      v530 = 0;
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        v530 = 0;
        v446 = *(unsigned __int8 *)v408;
        if (v442 < v446 && v443 < v446)
        {
          v447 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v408[17] + 10) + 24))(*((_QWORD *)v408[17] + 10), *((_QWORD *)v408[17] + 11)+ v442+ *(unsigned __int8 *)v408[17] * (unint64_t)v443, v387);
          v408 = v564;
          v116 = v566;
          v530 = v447;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          v443 = v565 - *((_DWORD *)v564 + 2);
        }
      }
      v527 = 0;
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        v527 = 0;
        v448 = *(unsigned __int8 *)v408;
        if (v442 < v448 && v443 < v448)
        {
          v449 = (*(uint64_t (**)(void *, unint64_t, uint64_t))(*(_QWORD *)v408[5] + 24))(v408[5], (unint64_t)v408[6]+ v442+ *((unsigned __int8 *)v408 + 1) * (unint64_t)(v443 >> 1), v387);
          v408 = v564;
          v116 = v566;
          v527 = v449;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          v443 = v565 - *((_DWORD *)v564 + 2);
        }
      }
      v521 = 0;
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        v521 = 0;
        v450 = *(unsigned __int8 *)v408;
        if (v442 < v450 && v443 < v450)
        {
          v451 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v408[17] + 12) + 24))(*((_QWORD *)v408[17] + 12), *((_QWORD *)v408[17] + 13)+ v442+ *((unsigned __int8 *)v408[17] + 1) * (unint64_t)(v443 & 0xFFFFFFFE), v387);
          v408 = v564;
          v116 = v566;
          v521 = v451;
        }
      }
      if (v439 != 31)
      {
        v452 = 0;
        v453 = 0;
        v542 = (uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(v116
                                                                                 + 1008
                                                                                 + 8 * __clz(__rbit32(v552))
                                                                                 + 144);
        v454 = v440;
        do
        {
          v455 = 0;
          v456 = v519 + v452;
          v457 = v530 + v452;
          v549 = v527 + v452;
          v546 = v521 + v452;
          v535 = v452;
          v458 = v452 + v556;
          do
          {
            v459 = v408;
            v460 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v116
                                                                                              + 1008
                                                                                              + 8 * (v441 - 2)))(v562, v562, v456 + v455 * *((unsigned __int8 *)v408 + 1), *((unsigned __int8 *)v408 + 1), v457 + v455 * *(unsigned __int8 *)v408[17]);
            v461 = v566;
            if (!*(_BYTE *)(v566 + 8))
            {
              v462 = (*v542)(v552, v552, v549 + *((unsigned __int8 *)v459 + 1) * (uint64_t)((int)v455 >> 1), *((unsigned __int8 *)v459 + 1), v546 + 2 * *((unsigned __int8 *)v459[17] + 1) * (uint64_t)((int)v455 >> 1));
              v461 = v566;
              v460 += ((*(unsigned __int16 *)(v566 + 1002) * (unint64_t)v462) >> 8);
            }
            v463 = *(char *)(v461
                           + (int)(((v565 + v455 - *(_DWORD *)(v461 + 4432)) & 0xFFFFFFF8)
                                 + ((v458 - *(_DWORD *)(v461 + 4428)) >> 3))
                           + 724)
                 - v560;
            if (v463)
            {
              if (v463 >= 16)
                v463 = 16;
              if (v463 <= -15)
                v463 = -15;
              v460 = (v460 * word_1B692354C[v463 + 15] + 128) >> 8;
            }
            v408 = v564;
            v453 += v460;
            v455 += (int)v562;
          }
          while (v455 < v454);
          v452 = v535 + (int)v562;
        }
        while (v452 < v454);
        goto LABEL_601;
      }
    }
    else
    {
      if ((int)(v442 | v443) >= 0)
      {
        v520 = 0;
        v464 = *(unsigned __int8 *)v408;
        if (v442 < v464 && v443 < v464)
        {
          v465 = (*(uint64_t (**)(void *, unint64_t, uint64_t))(*(_QWORD *)v408[3] + 24))(v408[3], (unint64_t)v408[4] + v442 + *((unsigned __int8 *)v408 + 1) * (unint64_t)v443, v387);
          v408 = v564;
          v116 = v566;
          v520 = v465;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          v443 = v565 - *((_DWORD *)v564 + 2);
        }
      }
      else
      {
        v520 = 0;
      }
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        v466 = *(unsigned __int8 *)v408;
        if (v442 < v466 && v443 < v466)
        {
          (*(void (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v408[17] + 10) + 24))(*((_QWORD *)v408[17] + 10), *((_QWORD *)v408[17] + 11) + v442 + *(unsigned __int8 *)v408[17] * (unint64_t)v443, v387);
          v408 = v564;
          v116 = v566;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          v443 = v565 - *((_DWORD *)v564 + 2);
        }
      }
      v528 = 0;
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        v528 = 0;
        v467 = *(unsigned __int8 *)v408;
        if (v442 < v467 && v443 < v467)
        {
          v468 = (*(uint64_t (**)(void *, unint64_t, uint64_t))(*(_QWORD *)v408[5] + 24))(v408[5], (unint64_t)v408[6]+ v442+ *((unsigned __int8 *)v408 + 1) * (unint64_t)(v443 >> 1), v387);
          v408 = v564;
          v116 = v566;
          v528 = v468;
          LODWORD(v442) = v556 - *((_DWORD *)v564 + 1);
          v443 = v565 - *((_DWORD *)v564 + 2);
        }
      }
      v522 = 0;
      if ((v442 & 0x80000000) == 0 && (v443 & 0x80000000) == 0)
      {
        v522 = 0;
        v469 = *(unsigned __int8 *)v408;
        if (v442 < v469 && v443 < v469)
        {
          v470 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v408[17] + 12) + 24))(*((_QWORD *)v408[17] + 12), *((_QWORD *)v408[17] + 13)+ v442+ *((unsigned __int8 *)v408[17] + 1) * (unint64_t)(v443 & 0xFFFFFFFE), v387);
          v408 = v564;
          v116 = v566;
          v522 = v470;
        }
      }
      if (v439 != 31)
      {
        v471 = 0;
        v453 = 0;
        v543 = (uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(v116
                                                                                          + 1008
                                                                                          + 8 * __clz(__rbit32(v552))
                                                                                          + 144);
        v472 = v440;
        do
        {
          v473 = 0;
          v474 = v520 + 2 * v471;
          v475 = v471 + v556;
          v536 = v471;
          v547 = v522 + 2 * v471;
          v550 = v528 + 2 * v471;
          do
          {
            v476 = v408;
            v477 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 1008 + 8 * (v441 - 2)))(v562, v562, v474 + 2 * v473 * *((unsigned __int8 *)v408 + 1));
            v478 = v566;
            if (!*(_BYTE *)(v566 + 8))
            {
              v479 = 2 * *((unsigned __int8 *)v476[17] + 1);
              v480 = (*v543)(v552, v552, v550 + 2 * *((unsigned __int8 *)v476 + 1) * (uint64_t)((int)v473 >> 1), *((unsigned __int8 *)v476 + 1), v547 + 2 * (int)v479 * (uint64_t)((int)v473 >> 1), v479);
              v478 = v566;
              v477 += ((*(unsigned __int16 *)(v566 + 1002) * (unint64_t)v480) >> 8);
            }
            v481 = *(char *)(v478
                           + (int)(((v565 + v473 - *(_DWORD *)(v478 + 4432)) & 0xFFFFFFF8)
                                 + ((v475 - *(_DWORD *)(v478 + 4428)) >> 3))
                           + 724)
                 - v560;
            if (v481)
            {
              if (v481 >= 16)
                v481 = 16;
              if (v481 <= -15)
                v481 = -15;
              v477 = (v477 * word_1B692354C[v481 + 15] + 128) >> 8;
            }
            v408 = v564;
            v453 += v477;
            v473 += (int)v562;
          }
          while (v473 < v472);
          v471 = v536 + (int)v562;
        }
        while (v471 < v472);
        goto LABEL_601;
      }
    }
    v453 = 0;
LABEL_601:
    v143 = (void ***)v537;
    v408 = (void **)*v537;
    v408[24] = v453;
    v115 = v565;
    v116 = v566;
    v430 = (unint64_t)&v453[(*((_DWORD *)v408 + 52)
                                  * *(unsigned __int16 *)(v566 + 2 * *((__int16 *)v408 + 106) + 992)) >> (8 * (*((_WORD *)v408 + 106) == 0))];
    v408[25] = (void *)v430;
    v386 = v556;
    v240 = v544;
    v433 = v539;
    LODWORD(v387) = v554;
    v242 = v553;
    v384 = v533;
    v413 = v518;
    v415 = v514;
    v416 = v515;
    v434 = v512;
    v431 = v513;
    goto LABEL_602;
  }
LABEL_609:
  if (v432 >= 3)
  {
    v483 = v434;
    if (!*(_BYTE *)(v240 + 3784))
    {
      v484 = v242 + *(unsigned __int8 *)(*(_QWORD *)(v116 + 1880) + 2001);
      if (v484 >= 63)
        v484 = 63;
      v485 = dword_1B6923630[70 * *(unsigned __int8 *)(v116 + 1006) + (v484 & ~(v484 >> 31))];
      *(_WORD *)(v116 + 984) = v485;
      *(_WORD *)(v116 + 992) = v485;
    }
    v434 = v483;
  }
LABEL_615:
  if (!v384 || v416 && v430 + v431 < v434)
  {
    if (!*(_BYTE *)(v240 + 3784))
    {
      v486 = v413;
      if (((v415 | v524 ^ 1) & 1) != 0)
      {
        v487 = v532;
      }
      else
      {
        v492 = (unsigned __int8 *)v408;
        v493 = sub_1B6843C28(v116, v386, v115, v540, (unsigned __int8 *)v408, *a8, 1);
        sub_1B68453F8(v566, v386, v115, v540, v492, v493);
        v116 = v566;
        v487 = v532;
        if (v523)
          v487 = v493;
      }
      if (*(int *)(v116 + 4) <= 1 && *(unsigned __int8 *)(v486 + 10) >= 2u)
      {
        sub_1B6846954(v116, v386, v115, v540, (unsigned __int8 *)*v143, 0, 0, 1, 0);
        v116 = v566;
      }
      *a8 = v487;
      *a9 = v524;
      v432 = *(_DWORD *)(v116 + 12);
    }
    if (v432 == 5 && v525 >= 8)
    {
      v494 = 0;
      v495 = *((_DWORD *)*v143 + 3);
      v496 = v116 + ((int)(v386 - *(_DWORD *)(v116 + 4428)) >> 3) + 724;
      v497 = v115 - *(_DWORD *)(v116 + 4432);
      do
      {
        v498 = (_BYTE *)(v496 + (int)(v497 & 0xFFFFFFF8));
        v499 = v525 >> 3;
        do
        {
          *v498++ = v495;
          --v499;
        }
        while (v499);
        ++v494;
        v497 += 8;
      }
      while (v494 != v525 >> 3);
    }
    return;
  }
  if (v432 == 3)
  {
    v577 = v571;
    v578 = v572;
  }
  v488 = (unsigned __int8 **)(v116 + 32 * (int)v387);
  sub_1B683A8BC(v116, (unsigned __int8 *)v408, v488[557], v386, v115, v433);
  sub_1B683A8BC(v116, (unsigned __int8 *)*v143, v488[558], v433 + v386, v115, v433);
  sub_1B683A8BC(v116, (unsigned __int8 *)*v143, v488[559], v386, v433 + v115, v433);
  sub_1B683A8BC(v116, (unsigned __int8 *)*v143, v488[560], v433 + v386, v433 + v115, v433);
  v489 = *v143;
  *(_OWORD *)(v489 + 21) = v575;
  v489[23] = v576;
  v490 = *v143;
  v490[26] = v578;
  *((_OWORD *)v490 + 12) = v577;
  if (*(_DWORD *)(v116 + 12) == 5)
  {
    v491 = *v143;
    *((_WORD *)v491 + 95) = HIWORD(v572);
    *((_WORD *)v491 + 107) = v574;
  }
  if (!*(_BYTE *)(v544 + 3784))
  {
LABEL_626:
    *a8 = v568;
    *a9 = v567;
  }
}

uint64_t sub_1B6841824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, _BYTE *a7)
{
  uint64_t v8;
  int v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  unsigned __int8 *v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char v22;
  int v23;
  __int16 v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  int v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _WORD *v51;
  _WORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned __int16 *v61;
  _BOOL4 v62;
  int v63;
  int v64;
  int v65;
  _BOOL4 v66;
  unsigned int v67;
  __int128 v71;
  int v72;
  __int16 v73;

  v8 = a4;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009) - (_DWORD)a4;
  v12 = *(_QWORD *)(a1 + 1888);
  if (*(_BYTE *)(v12 + 12))
  {
    v13 = *(_DWORD *)(v12 + 1620);
    v14 = v11 >= v13;
    v66 = v11 == v13;
  }
  else
  {
    v14 = 0;
    v66 = 0;
  }
  v15 = *(unsigned __int8 **)(a1 + 4456);
  result = sub_1B6843C28(a1, a2, a3, a4, 0, *a6, 0);
  v17 = a3;
  v18 = result;
  if (((a3 | a2) & 0x80000000) != 0
    || (v19 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), *(_DWORD *)(v19 + 276) <= (int)a2)
    || *(_DWORD *)(v19 + 280) <= (int)a3)
  {
    v20 = 0;
    v21 = 0;
  }
  else
  {
    v20 = (unsigned __int16 *)(*(_QWORD *)(v19 + 512)
                             + 2 * (*(_QWORD *)(v19 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    v21 = *(_QWORD *)(v19 + 576) + 16 * (*(_QWORD *)(v19 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  if ((*v20 & 3) <= (int)v8)
  {
    if (v14)
    {
      *a7 = 1;
      v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 968))(a2, a3, v8, a1);
      sub_1B6843D7C(a1, a2, a3, v8, 0, v31, 0);
      v17 = a3;
    }
    result = sub_1B6843EDC(a1, a2, v17, v8, 0, 1, 1, 0, 0);
    v32 = *v20;
    if ((v32 & 0x80) == 0)
    {
      v63 = v8;
      v67 = 1 << v11;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 952) + 227))
      {
        v60 = v11;
        v61 = v20;
        v62 = v14;
        v65 = v18;
        v33 = 0;
        v34 = 1;
        do
        {
          v35 = v34;
          v36 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360);
          v37 = *(_QWORD *)(v36 + 8 * v33 + 112);
          v38 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v36 + 16))(v36, ((int)a2 >> v33), ((int)a3 >> v33), v33);
          v39 = 0;
          v40 = v15[1];
          v41 = (a2 - *((_DWORD *)v15 + 1));
          if ((v41 & 0x80000000) != 0)
          {
            v43 = v67;
          }
          else
          {
            v42 = a3 - *((_DWORD *)v15 + 2);
            v43 = v67;
            if ((v42 & 0x80000000) == 0)
            {
              v44 = *v15;
              if (v41 >= v44 || v42 >= v44)
                v39 = 0;
              else
                v39 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)&v15[16 * v33 + 56] + 24))(*(_QWORD *)&v15[16 * v33 + 56], v41 + v15[1] * (unint64_t)(v42 >> v33) + *(_QWORD *)&v15[16 * v33 + 64]);
            }
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v43, ((int)v43 >> v33), v37, v38, v40, v39);
          v34 = 0;
          v33 = 1;
        }
        while ((v35 & 1) != 0);
        v20 = v61;
        v32 = *v61;
        v18 = v65;
        v14 = v62;
        v11 = v60;
      }
      sub_1B685F88C(a1 + 1920, a1, a2, a3, v63, *(unsigned __int8 *)(v21 + 10), (v32 >> 4) & 7);
      if (*(_BYTE *)(a1 + 8127))
      {
        v46 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 952) + 252);
        if (v46 != 3)
        {
          v72 = 0;
          v71 = xmmword_1B6917860;
          v73 = 2;
          if (v46 == 2)
            sub_1B6868B3C(a1 + 1920, a2, a3, v15, v11, 0, (uint64_t *)&v71, 1);
          else
            sub_1B6869230(a1 + 1920, a2, a3, v15, v11, 0, 0, (uint64_t)&v71, 1);
        }
      }
      result = sub_1B686F790(a1 + 1920, a2, a3, 0, v15, 0, 0, 0, 1, 1u, 1u);
      v47 = *v20;
      if ((result & 1) != 0)
      {
        *a6 = v47 >> 9;
        goto LABEL_43;
      }
      LODWORD(v8) = v63;
      if ((v47 & 0x70) == 0 && (*(_BYTE *)(v21 + 11) & 1) != 0)
      {
        *v20 = v47 | 0x80;
        *(_BYTE *)(v21 + 11) &= ~1u;
        *(_BYTE *)(v21 + 10) = 2;
        v48 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360);
        if ((int)v67 >= 8)
        {
          v49 = 0;
          v50 = 2 * *(_QWORD *)(v48 + 488);
          v51 = v20;
          do
          {
            v52 = v51;
            v53 = v67 >> 3;
            do
            {
              *v52++ = *v20;
              --v53;
            }
            while (v53);
            ++v49;
            v51 = (_WORD *)((char *)v51 + v50);
          }
          while (v49 != v67 >> 3);
          v48 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360);
        }
        if ((int)v67 >= 4)
        {
          v54 = 0;
          v55 = 16 * *(_QWORD *)(v48 + 552);
          v56 = (_QWORD *)v21;
          do
          {
            v57 = v56;
            v58 = v67 >> 2;
            do
            {
              v59 = *(_QWORD *)v21;
              *(_QWORD *)((char *)v57 + 6) = *(_QWORD *)(v21 + 6);
              *v57 = v59;
              v57 += 2;
              --v58;
            }
            while (v58);
            ++v54;
            v56 = (_QWORD *)((char *)v56 + v55);
          }
          while (v54 != v67 >> 2);
        }
      }
    }
    if (*a7)
      result = sub_1B6843D7C(a1, a2, a3, v8, 0, v18, 0);
    if (v14)
      *a6 = v18;
  }
  else
  {
    v64 = result;
    v22 = v11 - 1;
    v23 = 1 << (v11 - 1);
    if (v66)
    {
      *a7 = 1;
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 968))(a2, a3, v8, a1);
      result = sub_1B6843D7C(a1, a2, a3, v8, 0, v24, 0);
      LODWORD(v17) = a3;
    }
    v25 = 0;
    v26 = v23 + v17;
    do
    {
      v27 = *(_DWORD *)(a1 + 16);
      if ((int)(((v25 & 1) << v22) + a2) < v27)
      {
        v28 = (v25 >> 1 << v22) + v17;
        v29 = *(_DWORD *)(a1 + 20);
        if ((int)v28 < v29)
        {
          v30 = sub_1B683B42C(a5, v25, v23 + (int)a2 < v27, v26 < v29);
          result = sub_1B6841824(a1, ((v25 & 1) << v22) + (int)a2, v28, (v8 + 1), v30, a6, a7);
          LODWORD(v17) = a3;
        }
      }
      ++v25;
    }
    while (v25 != 4);
    if (v66 && *a7)
    {
      *a6 = v64;
LABEL_43:
      *a7 = 0;
    }
  }
  return result;
}

uint64_t sub_1B6841DFC(uint64_t result, int a2, int a3, unsigned __int8 *a4, int a5, char a6, char a7, char a8, int a9)
{
  unsigned __int8 *v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;

  *(_BYTE *)(result + 800) = a5;
  *(_BYTE *)(result + 801) = a6;
  *(_BYTE *)(result + 802) = a7;
  *(_BYTE *)(result + 803) = a8;
  *(_DWORD *)(result + 808) = a2;
  *(_DWORD *)(result + 812) = a3;
  if (a5)
  {
    *(_QWORD *)(result + 848) = a4;
    v9 = (unsigned __int8 *)*((_QWORD *)a4 + 17);
    *(_QWORD *)(result + 816) = *v9;
    *(_QWORD *)(result + 824) = v9[1];
    v10 = *a4;
    *(_QWORD *)(result + 832) = v10 >> 3;
    v11 = *((_DWORD *)a4 + 2);
    v12 = a2 - *((_DWORD *)a4 + 1);
    *(_QWORD *)(result + 840) = v10 >> 2;
    v13 = a3 - v11;
    if ((v12 & 0x80000000) != 0 || (v13 & 0x80000000) != 0 || v12 >= v10 || v13 >= v10)
    {
      v15 = 0;
      *(_QWORD *)(result + 856) = 0;
    }
    else
    {
      v14 = *((_QWORD *)a4 + 12);
      *(_QWORD *)(result + 856) = *((_QWORD *)a4 + 11)
                                + 2 * ((v12 >> 3) + (v10 >> 3) * (unint64_t)(v13 >> 3));
      v15 = v14 + 16 * ((v12 >> 2) + (v10 >> 2) * (unint64_t)(v13 >> 2));
    }
    *(_QWORD *)(result + 864) = v15;
    if ((v12 & 0x80000000) != 0)
      goto LABEL_21;
  }
  else
  {
    *(_QWORD *)(result + 848) = 0;
    v16 = *(unsigned __int8 *)(*(_QWORD *)(result + 1880) + 2013);
    *(_QWORD *)(result + 816) = v16;
    *(_QWORD *)(result + 824) = v16 >> 1;
    v17 = *(_QWORD *)(*(_QWORD *)(result + 1872) + 1360);
    v18 = *(_QWORD *)(v17 + 488);
    *(_QWORD *)(result + 832) = v18;
    v19 = *(_QWORD *)(v17 + 552);
    *(_QWORD *)(result + 840) = v19;
    if ((a3 | a2) < 0 || *(_DWORD *)(v17 + 276) <= a2 || *(_DWORD *)(v17 + 280) <= a3)
    {
      v20 = 0;
      *(_QWORD *)(result + 856) = 0;
    }
    else
    {
      *(_QWORD *)(result + 856) = *(_QWORD *)(v17 + 512) + 2 * (v18 * ((uint64_t)a3 >> 3) + (a2 >> 3));
      v20 = *(_QWORD *)(v17 + 576) + 16 * (v19 * ((uint64_t)a3 >> 2) + (a2 >> 2));
    }
    *(_QWORD *)(result + 864) = v20;
    v12 = a2 - *((_DWORD *)a4 + 1);
    v13 = a3 - *((_DWORD *)a4 + 2);
    if ((v12 & 0x80000000) != 0)
      goto LABEL_21;
  }
  if ((v13 & 0x80000000) == 0)
  {
    v21 = *a4;
    if (v12 < v21 && v13 < v21)
    {
      v22 = &a4[8 * a9];
      v24 = (unsigned __int8 *)*((_QWORD *)v22 + 17);
      v23 = (unsigned __int8 **)(v22 + 136);
      *(_QWORD *)(result + 872) = *((_QWORD *)v24 + 7) + 2 * (v12 + *v24 * (unint64_t)v13);
      v25 = v12 >> 1;
      *(_QWORD *)(result + 880) = *((_QWORD *)*v23 + 8) + 2 * (v25 + (*v23)[1] * (unint64_t)(v13 >> 1));
      *(_QWORD *)(result + 888) = *((_QWORD *)*v23 + 9) + 2 * (v25 + (*v23)[1] * (unint64_t)(v13 >> 1));
      v26 = v12 >> 2;
      v27 = v13 >> 2;
      *(_QWORD *)(result + 896) = *((_QWORD *)*v23 + 4) + v26 + ((unint64_t)**v23 >> 2) * (v13 >> 2);
      v28 = v12 >> 3;
      v29 = v13 >> 3;
      *(_QWORD *)(result + 904) = *((_QWORD *)*v23 + 5) + v28 + ((unint64_t)(*v23)[1] >> 2) * v29;
      *(_QWORD *)(result + 912) = *((_QWORD *)*v23 + 6) + v28 + ((unint64_t)(*v23)[1] >> 2) * v29;
      if (!*(_BYTE *)(*(_QWORD *)(result + 952) + 352))
        return result;
      *(_QWORD *)(result + 920) = *((_QWORD *)*v23 + 1) + v26 + ((unint64_t)**v23 >> 2) * v27;
      *(_QWORD *)(result + 928) = *((_QWORD *)*v23 + 2) + v28 + ((unint64_t)(*v23)[1] >> 2) * v29;
      v30 = *((_QWORD *)*v23 + 3) + v28 + ((unint64_t)(*v23)[1] >> 2) * v29;
      goto LABEL_23;
    }
  }
LABEL_21:
  *(_OWORD *)(result + 904) = 0u;
  *(_OWORD *)(result + 888) = 0u;
  *(_OWORD *)(result + 872) = 0u;
  if (!*(_BYTE *)(*(_QWORD *)(result + 952) + 352))
    return result;
  v30 = 0;
  *(_QWORD *)(result + 928) = 0;
  *(_QWORD *)(result + 920) = 0;
LABEL_23:
  *(_QWORD *)(result + 936) = v30;
  return result;
}

void sub_1B68420B8(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, int *a7, _BYTE *a8)
{
  int *v8;
  uint64_t v12;
  _WORD *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  int v22;
  unsigned int v23;
  char v24;
  int v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  _WORD *v75;
  _WORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  char v86;
  int v87;
  int v88;
  int v89;
  unsigned __int8 *v90;
  int v91;
  unsigned __int8 *v92;
  int v94;
  unsigned int v96;
  unsigned int v97;

  v8 = a7;
  v12 = a2;
  v14 = 0;
  v15 = *(unsigned __int8 **)(a1 + 4456);
  v16 = *(unsigned __int8 **)(a1 + 8 * a4 + 4584);
  v17 = a2 - *((_DWORD *)v15 + 1);
  if ((v17 & 0x80000000) != 0)
  {
    v19 = 0;
  }
  else
  {
    v18 = (_DWORD)a3 - *((_DWORD *)v15 + 2);
    v19 = 0;
    if ((v18 & 0x80000000) == 0)
    {
      v20 = *v15;
      if (v17 >= v20 || v18 >= v20)
      {
        v14 = 0;
        v19 = 0;
      }
      else
      {
        v14 = (_WORD *)(*((_QWORD *)v15 + 11)
                      + 2 * ((v17 >> 3) + (v20 >> 3) * (unint64_t)(v18 >> 3)));
        v19 = *((_QWORD *)v15 + 12) + 16 * ((v17 >> 2) + (v20 >> 2) * (unint64_t)(v18 >> 2));
      }
    }
  }
  v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009) - (_DWORD)a4;
  v23 = (unsigned __int16)*v14;
  v96 = a2;
  v97 = a3;
  if ((v23 & 3) <= (int)a4)
  {
    v29 = *(_QWORD *)(a1 + 1888);
    if (*(_BYTE *)(v29 + 12) && v22 >= *(_DWORD *)(v29 + 1620))
    {
      v47 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(a1 + 968))(a2, a3, a4, a1);
      v91 = 1;
      *a8 = 1;
      sub_1B68453F8(a1, v96, v97, a4, v15, v47);
      v12 = v96;
      a3 = (unsigned __int8 *)v97;
      LODWORD(a6) = v47;
      v23 = (unsigned __int16)*v14;
    }
    else
    {
      v91 = 0;
    }
    v48 = a3;
    v87 = a6;
    v49 = v12;
    sub_1B683A7B8(a1, v16, v12, (int)a3, a4, (v23 >> 2) & 3, a6);
    if (*(_BYTE *)(v19 + 10) == 1)
    {
      *(_BYTE *)(a1 + 4699) = 0;
      v50 = *(unsigned __int8 **)(a1 + 848);
      v51 = (unsigned __int16)*v14;
      v52 = *(_QWORD *)(a1 + 4296);
      v53 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 4304) + 2009) - (_DWORD)a4;
      *(_QWORD *)(a1 + 3992) = v52;
      *(_DWORD *)(a1 + 3968) = v53;
      *(_DWORD *)(a1 + 3972) = 1;
      v55 = (v51 >> 4) & 7;
      v54 = v55 == 0;
      *(_DWORD *)(a1 + 3976) = v55;
      v56 = *(unsigned __int8 *)(*(_QWORD *)(v52 + 1368) + 245);
      if (!v54)
        ++v56;
      *(_DWORD *)(a1 + 3980) = v56;
      *(_OWORD *)(a1 + 4056) = 0u;
      *(_OWORD *)(a1 + 4072) = 0u;
      *(_OWORD *)(a1 + 4088) = 0u;
      *(_OWORD *)(a1 + 4104) = 0u;
      *(_OWORD *)(a1 + 4120) = 0u;
      *(_QWORD *)(a1 + 4136) = 0;
      *(_QWORD *)(a1 + 4320) = a1;
      *(_DWORD *)(a1 + 4344) = v49;
      *(_DWORD *)(a1 + 4348) = (_DWORD)v48;
      *(_DWORD *)(a1 + 4352) = a4;
      *(_QWORD *)(a1 + 4328) = a1 + 984;
      *(_BYTE *)(a1 + 4336) = *(_BYTE *)(a1 + 8);
      sub_1B6845554(a1, v49, v48, a4, v16, v15, a5, ((unsigned __int16)*v14 >> 4) & 7);
      sub_1B6841DFC(a1, *(_DWORD *)(a1 + 4428), *(_DWORD *)(a1 + 4432), v50, 1, 0, 0, 0, 0);
    }
    else
    {
      sub_1B6843EDC(a1, v49, (uint64_t)v48, a4, v15, 0, 1, 0, 0);
      v57 = (unsigned __int16)*v14;
      if ((v57 & 0x80) == 0)
      {
        v58 = (1 << v22);
        v94 = 1 << v22;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 952) + 227))
        {
          v89 = a4;
          a4 = 0;
          v59 = ((int)v58 >> 1);
          v60 = *((_QWORD *)v15 + 17);
          v61 = 2 * *(unsigned __int8 *)(v60 + 1);
          v62 = v96 - *((_DWORD *)v15 + 1);
          v63 = v97 - *((_DWORD *)v15 + 2);
          if ((v62 & 0x80000000) == 0 && (v63 & 0x80000000) == 0)
          {
            a4 = 0;
            v64 = *v15;
            if (v62 < v64 && v63 < v64)
            {
              v65 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v60 + 96) + 24))(*(_QWORD *)(v60 + 96), v62 + v61 * (unint64_t)(v63 >> 1) + *(_QWORD *)(v60 + 104));
              v59 = ((int)v58 >> 1);
              a4 = v65;
              LODWORD(v62) = v96 - *((_DWORD *)v15 + 1);
              v63 = v97 - *((_DWORD *)v15 + 2);
            }
          }
          v66 = 0;
          v67 = v15[1];
          if ((v62 & 0x80000000) == 0 && (v63 & 0x80000000) == 0)
          {
            v66 = 0;
            v68 = *v15;
            if (v62 < v68 && v63 < v68)
            {
              v85 = v61;
              v69 = v59;
              v70 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v15 + 9) + 24))(*((_QWORD *)v15 + 9), v62 + v15[1] * (unint64_t)(v63 >> 1) + *((_QWORD *)v15 + 10));
              v59 = v69;
              v61 = v85;
              v66 = v70;
            }
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v58, v59, v61, a4, v67, v66);
          v57 = (unsigned __int16)*v14;
          LODWORD(a4) = v89;
        }
        sub_1B685F88C(a1 + 1920, a1, v96, v97, a4, *(unsigned __int8 *)(v19 + 10), (v57 >> 4) & 7);
        v71 = sub_1B6871B34(a1 + 1920, v96, v97, 0);
        v72 = sub_1B686C594(a1 + 1920, v96, v97, 0, v15, 0);
        if ((v71 & 1) == 0 && (v72 & 1) == 0 && (*v14 & 0x70) == 0 && (*(_BYTE *)(v19 + 11) & 1) != 0)
        {
          *v14 |= 0x80u;
          *(_BYTE *)(v19 + 11) &= ~1u;
          *(_BYTE *)(v19 + 10) = 2;
          v73 = *v15;
          if (v94 >= 8)
          {
            v74 = 0;
            v75 = v14;
            do
            {
              v76 = v75;
              v77 = v94 >> 3;
              do
              {
                *v76++ = *v14;
                --v77;
              }
              while (v77);
              ++v74;
              v75 += v73 >> 3;
            }
            while (v74 != v94 >> 3);
            v73 = *v15;
          }
          if (v94 >= 4)
          {
            v78 = 0;
            v79 = (_QWORD *)v19;
            do
            {
              v80 = v79;
              v81 = v94 >> 2;
              do
              {
                v82 = *(_QWORD *)v19;
                *(_QWORD *)((char *)v80 + 6) = *(_QWORD *)(v19 + 6);
                *v80 = v82;
                v80 += 2;
                --v81;
              }
              while (v81);
              ++v78;
              v79 += 2 * (v73 >> 2);
            }
            while (v78 != v94 >> 2);
          }
        }
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 1888) + 12) && *a8)
    {
      v83 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2013) >> a4;
      if ((sub_1B6845D14(v96, v97, v83, v15, 0) & 1) != 0
        || (sub_1B6845D14(v96, v97, v83, v15, 1u) & 1) != 0
        || sub_1B6845D14(v96, v97, v83, v15, 2u))
      {
        v84 = v87;
        *v8 = v87;
        *a8 = 0;
      }
      else
      {
        v84 = sub_1B684549C(a1, v96, v97, a4, v15, *v8);
      }
      sub_1B68453F8(a1, v96, v97, a4, v16, v84);
      sub_1B68453F8(a1, v96, v97, a4, v15, v84);
    }
    if (v91 && *a8)
    {
      v46 = sub_1B684549C(a1, v96, v97, a4, v15, *v8);
      sub_1B68453F8(a1, v96, v97, a4, v16, v46);
      sub_1B68453F8(a1, v96, v97, a4, v15, v46);
      goto LABEL_69;
    }
  }
  else
  {
    v90 = *(unsigned __int8 **)(a1 + 4456);
    v92 = *(unsigned __int8 **)(a1 + 8 * a4 + 4584);
    v24 = v22 - 1;
    v25 = 1 << (v22 - 1);
    v26 = *(_QWORD *)(a1 + 1888);
    if (*(_BYTE *)(v26 + 12) && v22 == *(_DWORD *)(v26 + 1620))
    {
      v27 = a7;
      v28 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(a1 + 968))(a2, a3, a4, a1);
      v86 = 1;
      *a8 = 1;
      sub_1B68453F8(a1, v96, v97, a4, v90, v28);
      LODWORD(v12) = v96;
      LODWORD(a3) = v97;
      a6 = v28;
      v23 = (unsigned __int16)*v14;
    }
    else
    {
      v27 = a7;
      v86 = 0;
    }
    v30 = a6;
    sub_1B683A7B8(a1, v92, v12, (int)a3, a4, (v23 >> 2) & 3, a6);
    v31 = v96;
    v32 = v97;
    v33 = 0;
    v34 = v25 + v96;
    v35 = a4;
    v36 = v25 + v97;
    v88 = v35;
    v37 = (v35 + 1);
    do
    {
      v38 = ((v33 & 1) << v24) + v31;
      v39 = *(_DWORD *)(a1 + 16);
      if ((int)v38 < v39)
      {
        v40 = (v33 >> 1 << v24) + v32;
        v41 = *(_DWORD *)(a1 + 20);
        if ((int)v40 < v41)
        {
          v42 = sub_1B683B42C(a5, v33, v34 < v39, v36 < v41);
          sub_1B68420B8(a1, v38, v40, v37, v42, v30, v27, a8);
          v31 = v96;
          v32 = v97;
        }
      }
      ++v33;
    }
    while (v33 != 4);
    if ((v86 & 1) != 0 && *a8)
    {
      v8 = v27;
      v43 = *v27;
      v44 = v32;
      v45 = v31;
      v46 = sub_1B684549C(a1, v31, v32, v88, *(unsigned __int8 **)(a1 + 848), v43);
      sub_1B6843D7C(a1, v45, v44, v88, v92, v46, 1);
      sub_1B6843D7C(a1, v45, v44, v88, v90, v46, 1);
LABEL_69:
      *v8 = v46;
      *a8 = 0;
    }
  }
}

_QWORD *sub_1B68428EC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5, uint64_t a6, int *a7, _BYTE *a8)
{
  uint64_t v15;
  int v16;
  unsigned int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v27;

  v15 = (uint64_t)result;
  v16 = *(unsigned __int8 *)(result[235] + 2009) - (_DWORD)a4;
  if (v16 < 5)
  {
    sub_1B6843354(result, a2, a3, a4);
    return (_QWORD *)sub_1B68437C0(v15, a2, a3, a4, a6, *a5, a7, a8);
  }
  else
  {
    v27 = a6;
    v17 = 0;
    v18 = v16 - 1;
    v19 = 1 << (v16 - 1);
    v20 = v19 + a2;
    v21 = v19 + a3;
    v22 = (a4 + 1);
    do
    {
      v23 = *(_DWORD *)(v15 + 16);
      if ((int)(((v17 & 1) << v18) + a2) < v23)
      {
        v24 = *(_DWORD *)(v15 + 20);
        if ((int)((v17 >> 1 << v18) + a3) < v24)
        {
          v25 = sub_1B683B42C(v27, v17, v20 < v23, v21 < v24);
          result = (_QWORD *)sub_1B68428EC(v15, ((v17 & 1) << v18) + (int)a2, (v17 >> 1 << v18) + a3, v22, a5, v25, a7, a8);
        }
      }
      ++v17;
    }
    while (v17 != 4);
  }
  return result;
}

int8x8_t sub_1B6842A54(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int8x8_t result)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t (**v26)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD *, uint64_t, uint64_t);
  uint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD *, uint64_t, uint64_t);
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;

  while (1)
  {
    v9 = a2 - *(_DWORD *)(a1 + 808);
    v10 = a3 - *(_DWORD *)(a1 + 812);
    v11 = *(_QWORD *)(a1 + 856);
    v12 = *(_QWORD *)(a1 + 832) * ((uint64_t)v10 >> 3) + (v9 >> 3);
    v13 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2013) >> a4;
    v14 = a2 + (v13 >> 1);
    v15 = a3 + (v13 >> 1);
    v16 = *(unsigned __int16 *)(v11 + 2 * v12);
    if (a4 >= (v16 & 3))
      break;
    sub_1B6842A54(a1, a2, a3, (a4 + 1));
    v17 = *(_DWORD *)(a1 + 16);
    if ((int)v14 < v17 && *(_DWORD *)(a1 + 20) > (int)a3)
    {
      sub_1B6842A54(a1, v14, a3, (a4 + 1));
      v17 = *(_DWORD *)(a1 + 16);
    }
    if (v17 > (int)a2 && (int)v15 < *(_DWORD *)(a1 + 20))
    {
      sub_1B6842A54(a1, a2, v15, (a4 + 1));
      v17 = *(_DWORD *)(a1 + 16);
    }
    if ((int)v14 < v17)
    {
      ++a4;
      a2 = a2 + (v13 >> 1);
      a3 = a3 + (v13 >> 1);
      if ((int)v15 < *(_DWORD *)(a1 + 20))
        continue;
    }
    return result;
  }
  if (((a3 | a2) & 0x80000000) != 0)
  {
    v18 = 0;
    if ((v16 & 0x80) == 0)
      goto LABEL_13;
LABEL_18:
    v25 = *(_QWORD *)(a1 + 1872);
    if (!*(_BYTE *)(v25 + 547))
    {
      v26 = (uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v25 + 79168);
      v27 = *(_QWORD **)(v25 + 1360);
      v28 = v27[69];
      if ((_DWORD)a3 && (a3 & 7) == 0 && v13 >= 4)
      {
        v29 = (unsigned __int8 *)(v27[78] + v27[76] * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 2));
        v30 = v13 >> 2;
        v31 = v18 - 16 * v28;
        do
        {
          v32 = *v26;
          v33 = *(_QWORD *)(v25 + 79176);
          v34 = (_QWORD *)(v25 + (v33 >> 1));
          if ((v33 & 1) != 0)
            v32 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v34 + v32);
          v35 = v32(v34, v18, v31);
          v36 = *v29;
          if (v36 <= v35)
            LOBYTE(v36) = v35;
          *v29++ = v36;
          v31 += 16;
          --v30;
        }
        while (v30);
      }
      if ((_DWORD)a2 && (a2 & 7) == 0 && v13 >= 4)
      {
        v37 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v25 + 1360) + 640)
                                + *(_QWORD *)(*(_QWORD *)(v25 + 1360) + 616) * ((uint64_t)(int)a2 >> 3)
                                + ((int)a3 >> 2));
        v38 = v13 >> 2;
        v39 = v18 - 16;
        do
        {
          v40 = *v26;
          v41 = *(_QWORD *)(v25 + 79176);
          v42 = (_QWORD *)(v25 + (v41 >> 1));
          if ((v41 & 1) != 0)
            v40 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v42 + v40);
          v43 = v40(v42, v18, v39);
          v44 = *v37;
          if (v44 <= v43)
            LOBYTE(v44) = v43;
          *v37++ = v44;
          v39 += 16 * v28;
          --v38;
        }
        while (v38);
      }
    }
    return result;
  }
  v18 = *(_QWORD *)(a1 + 864) + 16 * (*(_QWORD *)(a1 + 840) * ((uint64_t)v10 >> 2) + (v9 >> 2));
  if ((v16 & 0x80) != 0)
    goto LABEL_18;
LABEL_13:
  if (*(_BYTE *)(v18 + 10) != 1)
  {
    v19 = *(_QWORD *)(a1 + 1872);
    if (!*(_BYTE *)(v19 + 547))
    {
      v20 = v13 >> 1;
      switch((v16 >> 4) & 7)
      {
        case 0u:
          v21 = v18;
          v22 = a2;
          v23 = a3;
          v24 = v13;
          goto LABEL_40;
        case 1u:
          sub_1B6842F04(v19, v18, a2, a3, v13, v13 >> 1);
          v49 = *(_QWORD *)(a1 + 1872);
          v21 = sub_1B6843050(a1 + 800, a2, a3 + (v13 >> 1));
          v19 = v49;
          v22 = a2;
          v23 = a3 + (v13 >> 1);
          v24 = v13;
          goto LABEL_42;
        case 2u:
          sub_1B6842F04(v19, v18, a2, a3, v13 >> 1, v13);
          v50 = *(_QWORD *)(a1 + 1872);
          v21 = sub_1B6843050(a1 + 800, a2 + (v13 >> 1), a3);
          v19 = v50;
          v22 = a2 + (v13 >> 1);
          v23 = a3;
          v24 = v13 >> 1;
LABEL_40:
          v45 = v13;
          goto LABEL_43;
        case 3u:
          sub_1B6842F04(v19, v18, a2, a3, v13 >> 1, v13 >> 1);
          v51 = *(_QWORD *)(a1 + 1872);
          v46 = sub_1B6843050(a1 + 800, v14, a3);
          sub_1B6842F04(v51, v46, v14, a3, v20, v20);
          v52 = *(_QWORD *)(a1 + 1872);
          v47 = sub_1B6843050(a1 + 800, a2, v15);
          sub_1B6842F04(v52, v47, a2, v15, v20, v20);
          v53 = *(_QWORD *)(a1 + 1872);
          v21 = sub_1B6843050(a1 + 800, v14, v15);
          v19 = v53;
          v22 = a2 + (v13 >> 1);
          v23 = a3 + (v13 >> 1);
          v24 = v13 >> 1;
LABEL_42:
          v45 = v13 >> 1;
LABEL_43:
          sub_1B6842F04(v19, v21, v22, v23, v24, v45);
          break;
        default:
          break;
      }
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 1880) + 250) && !*(_BYTE *)(*(_QWORD *)(a1 + 1872) + 547))
  {
    if (*(_BYTE *)(v18 + 10) == 1)
    {
      v54 = 1;
      return sub_1B684309C(a1, a2, a3, 0, &v54, 1, result);
    }
    if ((*(_BYTE *)(v18 + 11) & 1) != 0)
    {
      v48 = *(_WORD *)(v11 + 2 * v12) & 0x70;
      v54 = (*(_WORD *)(v11 + 2 * v12) & 0x70) == 0;
      if (!v48)
        return sub_1B684309C(a1, a2, a3, 0, &v54, 1, result);
    }
    else
    {
      v54 = 0;
    }
    result = sub_1B684309C(a1, a2, a3, 0, &v54, 0, result);
    if (!v54)
      return result;
    return sub_1B684309C(a1, a2, a3, 0, &v54, 1, result);
  }
  return result;
}

uint64_t sub_1B6842F04(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;

  v10 = result;
  v11 = result + 79168;
  v12 = *(_QWORD **)(result + 1360);
  v13 = v12[69];
  if (a4 && (a4 & 7) == 0 && a5 >= 4)
  {
    v14 = (unsigned __int8 *)(v12[78] + v12[76] * ((uint64_t)a4 >> 3) + (a3 >> 2));
    v15 = a5 >> 2;
    v16 = a2 - 16 * v13;
    do
    {
      v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))v11;
      v18 = *(_QWORD *)(v11 + 8);
      v19 = (_QWORD *)(v10 + (v18 >> 1));
      if ((v18 & 1) != 0)
        v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v19 + v17);
      result = v17(v19, a2, v16);
      v20 = *v14;
      if (v20 <= result)
        LOBYTE(v20) = result;
      *v14++ = v20;
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  if (a3 && (a3 & 7) == 0 && a6 >= 4)
  {
    v21 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v10 + 1360) + 640)
                            + *(_QWORD *)(*(_QWORD *)(v10 + 1360) + 616) * ((uint64_t)a3 >> 3)
                            + (a4 >> 2));
    v22 = a6 >> 2;
    v23 = a2 - 16;
    do
    {
      v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))v11;
      v25 = *(_QWORD *)(v11 + 8);
      v26 = (_QWORD *)(v10 + (v25 >> 1));
      if ((v25 & 1) != 0)
        v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v26 + v24);
      result = v24(v26, a2, v23);
      v27 = *v21;
      if (v27 <= result)
        LOBYTE(v27) = result;
      *v21++ = v27;
      v23 += 16 * v13;
      --v22;
    }
    while (v22);
  }
  return result;
}

uint64_t sub_1B6843050(uint64_t a1, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;

  if (((a3 | a2) & 0x80000000) == 0
    && ((v3 = a2 - *(_DWORD *)(a1 + 8), v4 = a3 - *(_DWORD *)(a1 + 12), v5 = *(unsigned __int8 *)(a1 + 4), v3 < v5)
      ? (v6 = v4 < v5)
      : (v6 = 0),
        v6))
  {
    return *(_QWORD *)(a1 + 64) + 16 * (*(_QWORD *)(a1 + 40) * ((uint64_t)v4 >> 2) + (v3 >> 2));
  }
  else
  {
    return 0;
  }
}

int8x8_t sub_1B684309C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, BOOL *a5, uint64_t a6, int8x8_t result)
{
  uint64_t v9;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  _QWORD *v27;
  int v28;
  int8x8_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  _QWORD *v41;

  LODWORD(v9) = a4;
  v13 = -a4;
  if ((a6 & 1) == 0)
  {
LABEL_2:
    if (!*a5)
      goto LABEL_3;
    return result;
  }
LABEL_3:
  while (1)
  {
    v14 = a2 - *(_DWORD *)(a1 + 808);
    v15 = a3 - *(_DWORD *)(a1 + 812);
    v16 = (uint64_t)v15 >> 3;
    v17 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 856) + 2 * (*(_QWORD *)(a1 + 832) * v16 + (v14 >> 3)));
    v18 = *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2009) - (v17 & 3);
    if ((int)v9 >= (int)((v17 >> 2) & 3))
      break;
    LOBYTE(v13) = v13 - 1;
    v19 = 1 << (v13 + v18);
    v20 = (v19 + a2);
    v21 = (v19 + a3);
    v9 = (v9 + 1);
    sub_1B684309C(a1, a2, a3, v9, a5, a6);
    sub_1B684309C(a1, v20, a3, v9, a5, a6);
    sub_1B684309C(a1, a2, v21, v9, a5, a6);
    a2 = v20;
    a3 = v21;
    if ((a6 & 1) == 0)
      goto LABEL_2;
  }
  v22 = (uint64_t)v15 >> 2;
  v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 896) + (*(uint64_t *)(a1 + 816) >> 2) * v22 + (v14 >> 2));
  v25 = *a5 | v23
     || (v24 = ((uint64_t)v14 >> 3) + (*(uint64_t *)(a1 + 824) >> 2) * v16, *(_BYTE *)(*(_QWORD *)(a1 + 904) + v24))
     || *(_BYTE *)(*(_QWORD *)(a1 + 912) + v24) != 0;
  *a5 = v25;
  if ((_DWORD)a6)
  {
    v26 = v13 + v18;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 864) + 16 * (((uint64_t)v14 >> 2) + *(_QWORD *)(a1 + 840) * v22) + 10) == 1)
    {
      v27 = *(_QWORD **)(*(_QWORD *)(a1 + 1872) + 1360);
      v28 = 1 << v26;
      v29 = (int8x8_t)vshld_u64(0x202020202020202uLL, *(_QWORD *)&vdup_n_s32((2 << v26) - 64));
      v30 = v27[77];
      v31 = (uint64_t)(int)a3 >> 2;
      v32 = v27[80];
      v33 = v27[76];
      v34 = (uint64_t)(int)a2 >> 2;
      v35 = v27[78];
      if (v28 > 4)
      {
LABEL_12:
        v36 = v34 + v33 * ((uint64_t)(int)a3 >> 3);
        v37 = vmax_s8(*(int8x8_t *)(v35 + v36), v29);
        *(int8x8_t *)(v32 + v31 + v30 * ((uint64_t)(int)a2 >> 3)) = vmax_s8(*(int8x8_t *)(v32+ v31+ v30 * ((uint64_t)(int)a2 >> 3)), v29);
        *(int8x8_t *)(v35 + v36) = v37;
      }
    }
    else
    {
      if (!v23)
        return result;
      v41 = *(_QWORD **)(*(_QWORD *)(a1 + 1872) + 1360);
      v28 = 1 << v26;
      v29 = (int8x8_t)vshld_u64(0x101010101010101uLL, *(_QWORD *)&vdup_n_s32((2 << v26) - 64));
      v30 = v41[77];
      v31 = (uint64_t)(int)a3 >> 2;
      v32 = v41[80];
      v33 = v41[76];
      v34 = (uint64_t)(int)a2 >> 2;
      v35 = v41[78];
      if (v28 >= 5)
        goto LABEL_12;
    }
    v38 = v34 + v33 * ((uint64_t)(v28 + (int)a3) >> 3);
    v39 = v31 + v30 * ((uint64_t)(v28 + (int)a2) >> 3);
    v40 = vmax_s8(*(int8x8_t *)(v32 + v39), v29);
    result = vmax_s8(*(int8x8_t *)(v35 + v38), v29);
    *(int8x8_t *)(v32 + v39) = v40;
    *(int8x8_t *)(v35 + v38) = result;
  }
  return result;
}

void sub_1B6843354(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  unsigned int i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  _DWORD *v25;
  char *v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;
  unsigned int j;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;

  v5 = a3;
  v6 = a2;
  v7 = (uint64_t)a1;
  v8 = a1[235];
  v9 = *(unsigned __int8 *)(v8 + 2009) - a4;
  v10 = v9 - 1;
  v11 = (_QWORD *)a1[1017];
  v12 = *v11 * ((uint64_t)(int)a3 >> 4) + ((int)a2 >> 4);
  v13 = *(unsigned __int8 *)(v11[1] + v12);
  v14 = v13 > 0x1E || ((1 << v13) & 0x60000001) == 0;
  if (!v14 && v9 > *(unsigned __int8 *)(v8 + 2008))
  {
    for (i = 0; i != 4; ++i)
      sub_1B6843354(v7, ((i & 1) << v10) + (int)v6, (i >> 1 << v10) + v5, (a4 + 1));
    return;
  }
  v16 = *v11 * 2 * ((int)a3 >> 3) + ((int)a2 >> 3);
  v17 = v11[40];
  v18 = (1 << v9);
  v19 = (1 << v10);
  if (((a3 | a2) & 0x80000000) != 0
    || (v20 = *(_QWORD *)(a1[234] + 1360), *(_DWORD *)(v20 + 276) <= (int)a2)
    || *(_DWORD *)(v20 + 280) <= (int)a3)
  {
    v21 = 0;
  }
  else
  {
    v21 = (_WORD *)(*(_QWORD *)(v20 + 512) + 2 * (((uint64_t)(int)a2 >> 3) + *(_QWORD *)(v20 + 488) * ((int)a3 >> 3)));
  }
  v22 = *(unsigned __int8 *)(v17 + v16);
  v23 = *v21 & 0xFE7C | a4 & 3;
  *v21 = v23;
  if (v13 <= 0x19)
  {
    if (v13)
    {
      v24 = v23 & 0xFE0F;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(a1[1017] + 24) + v12))
        v33 = 0;
      else
        v33 = 48;
      v24 = v23 & 0xFE0F | v33;
    }
    *v21 = v24;
    if ((v24 & 0x70) != 0)
    {
      for (j = 0; j != 4; ++j)
        sub_1B6844BA4(v7, ((j & 1) << v10) + (int)v6, (j >> 1 << v10) + v5, v10, v19, v19, j, 1);
    }
    else
    {
      sub_1B6844BA4((uint64_t)a1, a2, a3, v9, v18, v18, 0, 1);
    }
    *v21 = *v21 & 0xFFF3 | (4 * ((*v21 & 0x70) != 0));
    if ((int)v18 >= 8)
    {
      v35 = 0;
      v36 = 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 1872) + 1360) + 488);
      v37 = v21;
      do
      {
        v38 = v37;
        v39 = v18 >> 3;
        do
        {
          *v38++ = *v21;
          --v39;
        }
        while (v39);
        ++v35;
        v37 = (_WORD *)((char *)v37 + v36);
      }
      while (v35 != v18 >> 3);
    }
    return;
  }
  v25 = (_DWORD *)((char *)&unk_1B69225B0 + 4 * v22);
  v26 = (char *)&unk_1B6922598 + 4 * v13 - 104;
  if (v9 == 4)
    v25 = v26;
  v27 = *v25;
  *v21 = (16 * (v27 & 7)) | v23 & 0xFE0F;
  v28 = v27 & 7;
  switch(v28)
  {
    case 2:
      sub_1B6844BA4((uint64_t)a1, a2, a3, v9, v19, v18, 0, 3);
      a2 = (v19 + v6);
      a1 = (_QWORD *)v7;
      a3 = v5;
      v29 = v9;
      v30 = (1 << v10);
      v31 = 1 << v9;
      v32 = 1;
      goto LABEL_40;
    case 1:
      sub_1B6844BA4((uint64_t)a1, a2, a3, v9, v18, v19, 0, 3);
      a3 = (v19 + v5);
      a1 = (_QWORD *)v7;
      a2 = v6;
      v29 = v9;
      v30 = (1 << v9);
      v31 = 1 << v10;
      v32 = 2;
      goto LABEL_40;
    case 0:
      v29 = v9;
      v30 = (1 << v9);
      v31 = 1 << v9;
      v32 = 0;
LABEL_40:
      sub_1B6844BA4((uint64_t)a1, a2, a3, v29, v30, v31, v32, 3);
      break;
  }
  if ((int)v18 >= 8)
  {
    v40 = 0;
    v41 = 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 1872) + 1360) + 488);
    v42 = v21;
    do
    {
      v43 = v42;
      v44 = v18 >> 3;
      do
      {
        *v43++ = *v21;
        --v44;
      }
      while (v44);
      ++v40;
      v42 = (_WORD *)((char *)v42 + v41);
    }
    while (v40 != v18 >> 3);
  }
  v45 = ((unsigned __int16)*v21 >> 4) & 7;
  v46 = *(_QWORD *)(v7 + 4296);
  v47 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 4304) + 2009) - a4;
  *(_QWORD *)(v7 + 3992) = v46;
  *(_DWORD *)(v7 + 3968) = v47;
  *(_DWORD *)(v7 + 3972) = 3;
  *(_DWORD *)(v7 + 3976) = v45;
  v48 = *(_QWORD *)(v46 + 1368);
  v49 = (v47 - *(unsigned __int8 *)(v48 + 2010)) & ~((v47 - *(unsigned __int8 *)(v48 + 2010)) >> 31);
  v50 = *(unsigned __int8 *)(v48 + 244);
  if (v49 < v50)
    v50 = v49;
  *(_DWORD *)(v7 + 3980) = v50;
  *(_QWORD *)(v7 + 4136) = 0;
  *(_OWORD *)(v7 + 4104) = 0u;
  *(_OWORD *)(v7 + 4120) = 0u;
  *(_OWORD *)(v7 + 4072) = 0u;
  *(_OWORD *)(v7 + 4088) = 0u;
  *(_OWORD *)(v7 + 4056) = 0u;
  *(_QWORD *)(v7 + 4320) = v7;
  *(_DWORD *)(v7 + 4344) = v6;
  *(_DWORD *)(v7 + 4348) = v5;
  *(_DWORD *)(v7 + 4352) = a4;
  *(_QWORD *)(v7 + 4328) = v7 + 984;
  *(_BYTE *)(v7 + 4336) = *(_BYTE *)(v7 + 8);
  sub_1B6868918(v7 + 1920, v6, v5, 0, v9, 0);
}

uint64_t sub_1B68437C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, int *a7, _BYTE *a8)
{
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  _BOOL4 v21;
  int v22;
  int *v23;
  int v24;
  int *v25;
  char v26;
  __int16 v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  __int16 v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;
  uint64_t v46;
  int v47;
  _BOOL4 v48;
  int *v50;

  if (((a3 | a2) & 0x80000000) != 0
    || (v13 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), *(_DWORD *)(v13 + 276) <= (int)a2)
    || *(_DWORD *)(v13 + 280) <= (int)a3)
  {
    v14 = a5;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v14 = a5;
    v15 = (_WORD *)(*(_QWORD *)(v13 + 512) + 2 * (*(_QWORD *)(v13 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    v16 = *(_QWORD *)(v13 + 576) + 16 * (*(_QWORD *)(v13 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009) - (_DWORD)a4;
  v18 = *(_QWORD *)(a1 + 1888);
  if (*(_BYTE *)(v18 + 12))
  {
    v19 = *(_DWORD *)(v18 + 1620);
    v20 = *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2009) - a4;
    v21 = v17 >= v19;
    v48 = v17 == v19;
  }
  else
  {
    v20 = *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2009) - a4;
    v21 = 0;
    v48 = 0;
  }
  v22 = sub_1B6843C28(a1, a2, a3, a4, 0, *a7, 0);
  v23 = a7;
  v24 = v22;
  if ((*v15 & 3) <= (int)a4)
  {
    v50 = v23;
    if (v21)
    {
      *a8 = 1;
      v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 968))(a2, a3, a4, a1);
      sub_1B6843D7C(a1, a2, a3, a4, 0, v32, 0);
    }
    v33 = *(unsigned __int8 *)(v16 + 10);
    if (v33 >= 2)
    {
      sub_1B6843EDC(a1, a2, a3, a4, 0, 1, 1, 0, 0);
      v33 = *(unsigned __int8 *)(v16 + 10);
    }
    sub_1B685F88C(a1 + 1920, a1, a2, a3, a4, v33, ((unsigned __int16)*v15 >> 4) & 7);
    result = sub_1B686E6C0(a1 + 1920, a2, a3, 0, 0, v14, v14, a6);
    if (*(unsigned __int8 *)(v16 + 10) >= 2u
      && (result & 1) == 0
      && (*v15 & 0x70) == 0
      && (*(_BYTE *)(v16 + 11) & 1) != 0)
    {
      *(_BYTE *)(v16 + 10) = 2;
      *v15 |= 0x80u;
      v34 = 1 << v20;
      if (1 << v20 >= 4)
      {
        v35 = 0;
        v36 = 16 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360) + 552);
        v37 = (_QWORD *)v16;
        do
        {
          v38 = v37;
          v39 = v34 >> 2;
          do
          {
            v40 = *(_QWORD *)v16;
            *(_QWORD *)((char *)v38 + 6) = *(_QWORD *)(v16 + 6);
            *v38 = v40;
            v38 += 2;
            --v39;
          }
          while (v39);
          ++v35;
          v37 = (_QWORD *)((char *)v37 + v36);
        }
        while (v35 != v34 >> 2);
        if ((int)v34 >= 8)
        {
          v41 = 0;
          v42 = v34 >> 3;
          v43 = 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360) + 488);
          v44 = v15;
          do
          {
            v45 = v44;
            v46 = v42;
            do
            {
              *v45++ = *v15;
              --v46;
            }
            while (v46);
            ++v41;
            v44 = (_WORD *)((char *)v44 + v43);
          }
          while (v41 != v42);
        }
      }
    }
    if ((result & 1) != 0)
    {
      *v50 = (__int16)*v15 >> 9;
      *a8 = 0;
    }
    else
    {
      if (*a8)
        result = sub_1B6843D7C(a1, a2, a3, a4, 0, v24, 0);
      if (v21)
        *v50 = v24;
    }
  }
  else
  {
    v47 = v22;
    v25 = v23;
    v26 = v20 - 1;
    if (v48)
    {
      *a8 = 1;
      v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 968))(a2, a3, a4, a1);
      sub_1B6843D7C(a1, a2, a3, a4, 0, v27, 0);
    }
    v28 = 0;
    v29 = (a4 + 1);
    do
    {
      v30 = sub_1B683B42C(v14, v28, (1 << v26) + (int)a2 < *(_DWORD *)(a1 + 16), (1 << v26) + (int)a3 < *(_DWORD *)(a1 + 20));
      result = sub_1B68437C0(a1, ((v28 & 1) << v26) + (int)a2, (v28 >> 1 << v26) + a3, v29, v30, a6, v25, a8);
      ++v28;
    }
    while (v28 != 4);
    if (v48)
    {
      if (*a8)
      {
        *v25 = v47;
        *a8 = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1B6843C28(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7)
{
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v16;

  v7 = a6;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009) - a4;
  if (v9 <= *(_DWORD *)(*(_QWORD *)(a1 + 1888) + 1620))
    LOBYTE(v9) = *(_DWORD *)(*(_QWORD *)(a1 + 1888) + 1620);
  v10 = -1 << v9;
  v11 = v10 & a2;
  v12 = v10 & a3;
  v13 = *(_DWORD *)(a1 + 4428);
  if (a7)
  {
    v16 = a6;
    if (v11 != v13)
      v16 = sub_1B6844AB4(a1, v11, v12, a4, a5, v11 - 1, v12);
    if (v12 != *(_DWORD *)(a1 + 4432))
      v7 = sub_1B6844AB4(a1, v11, v12, a4, a5, v11, v12 - 1);
  }
  else
  {
    v16 = a6;
    if (v11 != v13)
      v16 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360) + 512)
                       + 2
                       * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360) + 488) * ((uint64_t)v12 >> 3)
                        + ((v11 - 1) >> 3))) >> 9;
    if (v12 != *(_DWORD *)(a1 + 4432))
      v7 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360) + 512)
                      + 2
                      * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360) + 488) * ((uint64_t)(v12 - 1) >> 3)
                       + (v11 >> 3))) >> 9;
  }
  return ((v16 + v7 + 1) >> 1);
}

uint64_t sub_1B6843D7C(uint64_t result, int a2, int a3, int a4, unsigned __int8 *a5, __int16 a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;

  if (*(unsigned __int8 *)(*(_QWORD *)(result + 1880) + 2009) - a4 <= *(_DWORD *)(*(_QWORD *)(result + 1888) + 1620))
    v7 = *(_DWORD *)(*(_QWORD *)(result + 1888) + 1620);
  else
    v7 = *(unsigned __int8 *)(*(_QWORD *)(result + 1880) + 2009) - a4;
  v8 = 1 << v7;
  v9 = -(1 << v7);
  v10 = v9 & a2;
  v11 = v9 & a3;
  if (a7)
  {
    v12 = 0;
    v13 = v10 - *((_DWORD *)a5 + 1);
    v14 = *a5;
    if ((v13 & 0x80000000) == 0)
    {
      v15 = v11 - *((_DWORD *)a5 + 2);
      if ((v15 & 0x80000000) == 0)
      {
        if (v13 >= v14 || v15 >= v14)
          v12 = 0;
        else
          v12 = *((_QWORD *)a5 + 11) + 2 * ((v13 >> 3) + (v14 >> 3) * (unint64_t)(v15 >> 3));
      }
    }
    v23 = v7 - 3;
    if (v23 != 31)
    {
      v24 = 0;
      LODWORD(v25) = 1 << v23;
      if ((int)v25 <= 1)
        v25 = 1;
      else
        v25 = v25;
      do
      {
        v26 = (_WORD *)v12;
        v27 = v25;
        do
        {
          *v26 = *v26 & 0x1FF | (a6 << 9);
          ++v26;
          --v27;
        }
        while (v27);
        ++v24;
        v12 += 2 * (v14 >> 3);
      }
      while (v24 != v25);
    }
  }
  else
  {
    v17 = v10 + v8;
    if (v10 + v8 >= *(_DWORD *)(result + 16))
      v17 = *(_DWORD *)(result + 16);
    v18 = v11 + v8;
    if (v11 + v8 >= *(_DWORD *)(result + 20))
      v18 = *(_DWORD *)(result + 20);
    for (; v11 < v18; v11 += 8)
    {
      if (v10 < v17)
      {
        v19 = v10;
        do
        {
          v20 = *(_QWORD *)(*(_QWORD *)(result + 1872) + 1360);
          v21 = *(_QWORD *)(v20 + 512);
          v22 = *(_QWORD *)(v20 + 488) * ((uint64_t)v11 >> 3) + (v19 >> 3);
          *(_WORD *)(v21 + 2 * v22) = *(_WORD *)(v21 + 2 * v22) & 0x1FF | (a6 << 9);
          v19 += 8;
        }
        while (v19 < v17);
      }
    }
  }
  return result;
}

uint64_t sub_1B6843EDC(uint64_t a1, int a2, uint64_t a3, int a4, unsigned __int8 *a5, char a6, int a7, int a8, unsigned int *a9)
{
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int16 *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int16 *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int16 *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned __int16 *v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  unsigned __int16 *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int (*v104)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t result;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int16 *v114;
  uint64_t v115;
  unsigned int *v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v130;

  v126 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009) - (uint64_t)a4;
  v10 = 1 << (v126 - 1);
  v11 = (v10 + a2);
  v123 = v10;
  v130 = (v10 + a3);
  if (!a5)
  {
    if (((a3 | a2) & 0x80000000) != 0
      || (v19 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), *(_DWORD *)(v19 + 276) <= a2))
    {
      v28 = 0;
    }
    else
    {
      if (*(_DWORD *)(v19 + 280) <= (int)a3)
        v28 = 0;
      else
        v28 = (unsigned __int16 *)(*(_QWORD *)(v19 + 512)
                                 + 2 * (*(_QWORD *)(v19 + 488) * ((uint64_t)(int)a3 >> 3) + (a2 >> 3)));
      if (*(_DWORD *)(v19 + 280) > (int)a3)
      {
        v29 = *(_QWORD *)(v19 + 576) + 16 * (*(_QWORD *)(v19 + 552) * ((uint64_t)(int)a3 >> 2) + (a2 >> 2));
        goto LABEL_15;
      }
    }
    v29 = 0;
LABEL_15:
    if (((v11 | a3) & 0x80000000) != 0
      || (v20 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), *(_DWORD *)(v20 + 276) <= (int)v11)
      || *(_DWORD *)(v20 + 280) <= (int)a3)
    {
      v21 = 0;
    }
    else
    {
      v21 = *(_QWORD *)(v20 + 576) + 16 * (*(_QWORD *)(v20 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)v11 >> 2));
    }
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360);
    if (((v130 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v22 + 276) <= a2
      || *(_DWORD *)(v22 + 280) <= (int)v130)
    {
      v119 = 0;
    }
    else
    {
      v119 = (unsigned int *)(*(_QWORD *)(v22 + 576)
                            + 16 * (*(_QWORD *)(v22 + 552) * ((uint64_t)(int)v130 >> 2) + (a2 >> 2)));
    }
    if (((v130 | v11) & 0x80000000) != 0
      || *(_DWORD *)(v22 + 276) <= (int)v11
      || *(_DWORD *)(v22 + 280) <= (int)v130)
    {
      v117 = 0;
    }
    else
    {
      v117 = *(_QWORD *)(v22 + 576) + 16 * (*(_QWORD *)(v22 + 552) * ((uint64_t)(int)v130 >> 2) + ((int)v11 >> 2));
    }
    v122 = *(_QWORD *)(v22 + 112);
    v124 = *(_QWORD *)(v22 + 120);
    v116 = (unsigned int *)v21;
    if ((a6 & 1) != 0)
    {
      v23 = v28;
      v120 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(v22, a2, a3, 0);
      v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 1872) + 1360)
                                                                        + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), v11, a3, 0);
      v25 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 1872) + 1360)
                                                                       + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), a2, v130, 0);
      v26 = v24;
      v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 1872) + 1360)
                                                                        + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), v11, v130, 0);
LABEL_81:
      v28 = v23;
      v39 = v27;
      goto LABEL_82;
    }
    goto LABEL_56;
  }
  v12 = *((_DWORD *)a5 + 1);
  v13 = *((_DWORD *)a5 + 2);
  v14 = a2 - v12;
  v15 = a3 - v13;
  v16 = (a2 - v12) | (a3 - v13);
  if (v16 < 0 || ((v17 = *a5, v14 < v17) ? (v18 = v15 >= v17) : (v18 = 1), v18))
  {
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v28 = (unsigned __int16 *)(*((_QWORD *)a5 + 11)
                             + 2 * ((v14 >> 3) + (v17 >> 3) * (unint64_t)(v15 >> 3)));
    v29 = *((_QWORD *)a5 + 12) + 16 * ((v14 >> 2) + (v17 >> 2) * (unint64_t)(v15 >> 2));
  }
  v30 = 0;
  v31 = v11 - v12;
  if ((int)v11 - v12 >= 0 && (v15 & 0x80000000) == 0)
  {
    v32 = *a5;
    if (v31 >= v32 || v15 >= v32)
      v30 = 0;
    else
      v30 = *((_QWORD *)a5 + 12) + 16 * ((v31 >> 2) + (v32 >> 2) * (unint64_t)(v15 >> 2));
  }
  v116 = (unsigned int *)v30;
  v119 = 0;
  v34 = v130 - v13;
  if ((v14 & 0x80000000) == 0 && (v34 & 0x80000000) == 0)
  {
    v119 = 0;
    v35 = *a5;
    if (v14 < v35 && v34 < v35)
      v119 = (unsigned int *)(*((_QWORD *)a5 + 12)
                            + 16 * ((v14 >> 2) + (v35 >> 2) * (unint64_t)(v34 >> 2)));
  }
  v117 = 0;
  if ((v31 & 0x80000000) == 0 && (v34 & 0x80000000) == 0)
  {
    v36 = *a5;
    if (v31 >= v36 || v34 >= v36)
      v117 = 0;
    else
      v117 = *((_QWORD *)a5 + 12) + 16 * ((v31 >> 2) + (v36 >> 2) * (unint64_t)(v34 >> 2));
  }
  v38 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
  v122 = *v38;
  v124 = 2 * v38[1];
  if ((a6 & 1) == 0)
  {
LABEL_56:
    v120 = 0;
    v26 = 0;
    v25 = 0;
    goto LABEL_57;
  }
  if (v16 >= 0)
  {
    v120 = 0;
    v40 = *a5;
    if (v14 < v40 && v15 < v40)
    {
      v41 = v28;
      v42 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v38 + 10) + 24))(*((_QWORD *)v38 + 10), *((_QWORD *)v38 + 11) + v14 + *v38 * (unint64_t)v15);
      v28 = v41;
      v120 = v42;
      v12 = *((_DWORD *)a5 + 1);
      v13 = *((_DWORD *)a5 + 2);
      v31 = v11 - v12;
      v15 = a3 - v13;
    }
  }
  else
  {
    v120 = 0;
  }
  v26 = 0;
  if ((v31 & 0x80000000) == 0 && (v15 & 0x80000000) == 0)
  {
    v43 = *a5;
    if (v31 >= v43 || v15 >= v43)
    {
      v26 = 0;
    }
    else
    {
      v45 = v28;
      v46 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 80) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 80), *(_QWORD *)(*((_QWORD *)a5 + 17) + 88) + v31 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v15);
      v28 = v45;
      v26 = v46;
      v12 = *((_DWORD *)a5 + 1);
      v13 = *((_DWORD *)a5 + 2);
    }
  }
  v25 = 0;
  v47 = a2 - v12;
  v48 = v130 - v13;
  if (((a2 - v12) & 0x80000000) == 0 && (v48 & 0x80000000) == 0)
  {
    v25 = 0;
    v49 = *a5;
    if (v47 < v49 && v48 < v49)
    {
      v50 = v28;
      v51 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 80) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 80), *(_QWORD *)(*((_QWORD *)a5 + 17) + 88) + v47 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v48);
      v28 = v50;
      v25 = v51;
      v12 = *((_DWORD *)a5 + 1);
      v48 = v130 - *((_DWORD *)a5 + 2);
    }
  }
  v39 = 0;
  v52 = v11 - v12;
  if (v52 >= 0 && (v48 & 0x80000000) == 0)
  {
    v53 = *a5;
    if (v52 < v53 && v48 < v53)
    {
      v23 = v28;
      v27 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 80) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 80), *(_QWORD *)(*((_QWORD *)a5 + 17) + 88)+ v52+ **((unsigned __int8 **)a5 + 17) * (unint64_t)v48);
      goto LABEL_81;
    }
LABEL_57:
    v39 = 0;
  }
LABEL_82:
  if (a8)
    v55 = 1;
  else
    v55 = a7;
  v118 = (unsigned int *)v29;
  if (v55 != 1)
  {
    v127 = 0;
    v115 = 0;
    v67 = 0;
    goto LABEL_101;
  }
  if (!a5)
  {
    v69 = v26;
    v70 = a1;
    v114 = v28;
    v127 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 1872) + 1360)
                                                                      + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), (a2 >> 1), ((int)a3 >> 1), 1);
    v71 = ((int)v11 >> 1);
    v115 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v70 + 1872) + 1360)
                                                                       + 16))(*(_QWORD *)(*(_QWORD *)(v70 + 1872) + 1360), v71, ((int)a3 >> 1), 1);
    v72 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v70 + 1872) + 1360)
                                                                     + 16))(*(_QWORD *)(*(_QWORD *)(v70 + 1872) + 1360), (a2 >> 1), ((int)v130 >> 1), 1);
    v26 = v69;
    v73 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 1872) + 1360)
                                                                      + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), v71, ((int)v130 >> 1), 1);
    v67 = v72;
    v28 = v114;
LABEL_115:
    v68 = v73;
    goto LABEL_116;
  }
  v127 = 0;
  v56 = *((_DWORD *)a5 + 1);
  v57 = *((_DWORD *)a5 + 2);
  v58 = a2 - v56;
  v59 = a3 - v57;
  if (((a2 - v56) & 0x80000000) == 0 && (v59 & 0x80000000) == 0)
  {
    v127 = 0;
    v60 = *a5;
    if (v58 < v60 && v59 < v60)
    {
      v61 = v28;
      v62 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 96), *(_QWORD *)(*((_QWORD *)a5 + 17) + 104)+ v58+ *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (unint64_t)(v59 & 0xFFFFFFFE));
      v28 = v61;
      v127 = v62;
      v56 = *((_DWORD *)a5 + 1);
      v57 = *((_DWORD *)a5 + 2);
      v59 = a3 - v57;
    }
  }
  v63 = 0;
  v64 = v11 - v56;
  if ((int)v11 - v56 >= 0 && (v59 & 0x80000000) == 0)
  {
    v65 = *a5;
    if (v64 >= v65 || v59 >= v65)
    {
      v63 = 0;
    }
    else
    {
      v74 = v28;
      v63 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 96), *(_QWORD *)(*((_QWORD *)a5 + 17) + 104)+ v64+ *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (unint64_t)(v59 & 0xFFFFFFFE));
      v28 = v74;
      v56 = *((_DWORD *)a5 + 1);
      v57 = *((_DWORD *)a5 + 2);
    }
  }
  v67 = 0;
  v75 = a2 - v56;
  v76 = v130 - v57;
  v115 = v63;
  if (((a2 - v56) & 0x80000000) == 0 && (v76 & 0x80000000) == 0)
  {
    v67 = 0;
    v77 = *a5;
    if (v75 < v77 && v76 < v77)
    {
      v78 = v28;
      v79 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 96), *(_QWORD *)(*((_QWORD *)a5 + 17) + 104)+ v75+ *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (unint64_t)(v76 & 0xFFFFFFFE));
      v28 = v78;
      v67 = v79;
      v56 = *((_DWORD *)a5 + 1);
      v76 = v130 - *((_DWORD *)a5 + 2);
    }
  }
  v68 = 0;
  v80 = v11 - v56;
  if (v80 >= 0 && (v76 & 0x80000000) == 0)
  {
    v81 = *a5;
    if (v80 < v81 && v76 < v81)
    {
      v83 = v28;
      v84 = v67;
      v73 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 96), *(_QWORD *)(*((_QWORD *)a5 + 17) + 104)+ v80+ *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (unint64_t)(v76 & 0xFFFFFFFE));
      v67 = v84;
      v28 = v83;
      goto LABEL_115;
    }
LABEL_101:
    v68 = 0;
  }
LABEL_116:
  v85 = v11;
  switch((*v28 >> 4) & 7)
  {
    case 0:
      sub_1B687A6EC(*(_QWORD *)(a1 + 1872), v118, a2, a3, (1 << v126), (1 << v126), v122, v120, v124, v127);
      break;
    case 1:
      v86 = v122;
      v87 = v67;
      sub_1B687A6EC(*(_QWORD *)(a1 + 1872), v118, a2, a3, (1 << v126), v123, v122, v120, v124, v127);
      v88 = *(_QWORD *)(a1 + 1872);
      v112 = v124;
      v113 = v87;
      v89 = v119;
      v90 = a2;
      v91 = v130;
      v92 = (1 << v126);
      v93 = v123;
      goto LABEL_120;
    case 2:
      v25 = v26;
      v86 = v122;
      sub_1B687A6EC(*(_QWORD *)(a1 + 1872), v118, a2, a3, v123, (1 << v126), v122, v120, v124, v127);
      v88 = *(_QWORD *)(a1 + 1872);
      v89 = v116;
      v112 = v124;
      v113 = v115;
      v90 = v11;
      v91 = a3;
      v92 = v123;
      v93 = (1 << v126);
LABEL_120:
      v94 = v86;
      v95 = v25;
      goto LABEL_122;
    case 3:
      v96 = v123;
      v97 = v120;
      v121 = v67;
      sub_1B687A6EC(*(_QWORD *)(a1 + 1872), v118, a2, a3, v123, v123, v122, v97, v124, v127);
      sub_1B687A6EC(*(_QWORD *)(a1 + 1872), v116, v85, a3, v96, v96, v122, v26, v124, v115);
      sub_1B687A6EC(*(_QWORD *)(a1 + 1872), v119, a2, v130, v96, v96, v122, v25, v124, v121);
      v88 = *(_QWORD *)(a1 + 1872);
      v112 = v124;
      v113 = v68;
      v89 = (unsigned int *)v117;
      v90 = v85;
      v91 = v130;
      v92 = v123;
      v93 = v123;
      v94 = v122;
      v95 = v39;
LABEL_122:
      sub_1B687A6EC(v88, v89, v90, v91, v92, v93, v94, v95, v112, v113);
      break;
    default:
      break;
  }
  v98 = v55 ^ 1;
  if (!a5)
    v98 = 1;
  if ((v98 & 1) != 0)
    return 0;
  v99 = 0;
  v100 = (a2 - *((_DWORD *)a5 + 1));
  if ((v100 & 0x80000000) == 0)
  {
    v101 = a3 - *((_DWORD *)a5 + 2);
    if ((v101 & 0x80000000) == 0)
    {
      v99 = 0;
      v102 = *a5;
      if (v100 < v102 && v101 < v102)
        v99 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)a5 + 5) + 24))(*((_QWORD *)a5 + 5), v100 + a5[1] * (unint64_t)(v101 >> 1) + *((_QWORD *)a5 + 6), 0);
    }
  }
  v103 = a5[1];
  v104 = *(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * v126 + 1208);
  if (a8 == 1)
  {
    v105 = (*(unsigned __int16 *)(a1 + 1002) * (unint64_t)v104(v123, v123, v99, v103, v127, v124)) >> 8;
    v106 = *a9;
    v107 = *(char *)(*(_QWORD *)(a1 + 952) + 226);
    v108 = v106 + (v106 >> 1);
    v109 = v106 - (v106 >> 2);
    if (v107 == 1)
      v106 = *a9 >> 1;
    if (v107 == 2)
      v106 = v109;
    if (v107 == 4)
      v106 = v108;
    return (v106 <= v105) | (2 * (v105 >= v106 >> 1));
  }
  else
  {
    result = 0;
    if (a9 && a7)
    {
      v111 = v104(v123, v123, v99, v103, v127, v124);
      result = 0;
      *(_QWORD *)a9 += ((*(unsigned __int16 *)(a1 + 1002) * (unint64_t)v111) >> 8);
    }
  }
  return result;
}

uint64_t sub_1B6844AB4(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6, int a7)
{
  int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v7 = *((_DWORD *)a5 + 1);
  if (v7 > a6
    || (v8 = *a5, (int)(v7 + v8) <= a6)
    || ((v9 = *((_DWORD *)a5 + 2), v9 <= a7) ? (v10 = (int)(v9 + v8) <= a7) : (v10 = 1), v10))
  {
    v11 = *(_DWORD *)(a1 + 4428);
    v12 = *(_DWORD *)(a1 + 4432);
    v13 = a6 - v11;
    v14 = a7 - v12;
    v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009);
    if (a4 < 0)
    {
LABEL_13:
      v19 = -1;
    }
    else
    {
      v16 = a2 - v11;
      v17 = a3 - v12;
      v18 = v15 - a4;
      while (v16 >> v18 != v13 >> v18 || v17 >> v18 != v14 >> v18)
      {
        v10 = v18++ < v15;
        if (!v10)
          goto LABEL_13;
      }
      v19 = v15 - v18;
      if (v15 - v18 < a4)
        ++v19;
    }
    a5 = *(unsigned __int8 **)(a1
                             + 32 * v19
                             + 8
                             * ((v13 >> (v15 - v19)) & 1 | (2 * ((v14 >> (v15 - v19)) & 1)))
                             + 4456);
    v7 = *((_DWORD *)a5 + 1);
    v9 = *((_DWORD *)a5 + 2);
    v8 = *a5;
  }
  return (*(__int16 *)(*((_QWORD *)a5 + 11)
                                   + 2
                                   * (((a6 - v7) >> 3)
                                    + (v8 >> 3) * (unint64_t)((a7 - v9) >> 3))) >> 9);
}

void sub_1B6844BA4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  int v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v53;
  unint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  unint64_t *v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  char v84;
  int v85;
  int v86;
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[4];
  uint64_t v95;
  int v96;
  char v97[4];
  unint64_t v98;

  v8 = a6;
  v13 = (uint64_t)(int)a2 >> 2;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360) + 576)
      + 16
      * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360) + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  *(_BYTE *)(v14 + 10) = a8;
  *(_BYTE *)(v14 + 11) &= 0xBEu;
  v15 = *(uint64_t **)(a1 + 8136);
  if (a8 < 2)
  {
    v26 = *v15;
    v27 = *v15 * ((uint64_t)(int)a3 >> 4) + ((int)a2 >> 4);
    switch(a4)
    {
      case 2:
        v30 = v13 + v26 * (int)(a3 & 0xFFFFFFFC);
        v31 = v15[14];
        break;
      case 3:
        v30 = v26 * (int)(((int)a3 >> 2) & 0xFFFFFFFE) + ((int)a2 >> 3);
        v31 = v15[13];
        break;
      case 4:
        v28 = *(unsigned __int8 *)(v15[12] + v27);
        v29 = &unk_1B69225C0;
LABEL_23:
        *(_BYTE *)v14 = v29[v28];
LABEL_24:
        if (a7 && (v32 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2012), a4 - 1 <= v32))
          LOBYTE(v33) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360) + 576)
                                 + 16
                                 * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360) + 552)
                                  * ((uint64_t)(int)((-2 << v32) & a3) >> 2)
                                  + ((int)((-2 << v32) & a2) >> 2))
                                 + 1);
        else
          v33 = dword_1B69225F4[*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8136) + 120) + v27)];
        *(_BYTE *)(v14 + 1) = v33;
        goto LABEL_29;
      default:
        goto LABEL_24;
    }
    v28 = *(unsigned __int8 *)(v31 + v30);
    v29 = &unk_1B69225D0;
    goto LABEL_23;
  }
  v16 = v13 + *v15 * (int)(a3 & 0xFFFFFFFC);
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15[22] + v16);
  *(_BYTE *)(v14 + 9) = -1;
  v17 = a1 + 4932;
  *(_QWORD *)v14 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8136) + 160) + 4 * v16);
  v93 = a1 + 4928;
  sub_1B687A63C(*(_BYTE **)(a1 + 1872), a2, a3, a5, a6, a1 + 4928);
  if (*(_BYTE *)(a1 + 4988))
  {
    v18 = 0;
    v19 = (_DWORD *)(a1 + 4936);
    while (*(_DWORD *)v14 != *(v19 - 1)
         || *(_DWORD *)(v14 + 4) != *v19
         || *(unsigned __int8 *)(v14 + 8) != *((unsigned __int8 *)v19 - 8)
         || *(unsigned __int8 *)(v14 + 9) != *((unsigned __int8 *)v19 - 7))
    {
      ++v18;
      v19 += 3;
      if (*(unsigned __int8 *)(a1 + 4988) == v18)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    LODWORD(v18) = -1;
  }
  *(_BYTE *)(v14 + 11) = *(_BYTE *)(v14 + 11) & 0xF0 | ((int)v18 >= 0) | (2 * v18) & ~((int)v18 >> 31) & 0xE;
  if ((v18 & 0x80000000) != 0)
  {
    v95 = *(_QWORD *)v14;
    v96 = 0;
    sub_1B687A560(*(_QWORD *)(a1 + 1872), a2, a3, 0, *(char *)(v14 + 8), a5, v8, (__int32 *)(a1 + 4992 + 52 * *(char *)(v14 + 8)));
    v20 = *(char *)(v14 + 8);
    v21 = sub_1B68020EC(a1 + 4992 + 52 * *(char *)(v14 + 8), (uint64_t)v94, 0);
    v22 = *(_BYTE *)(v14 + 11);
    *(_BYTE *)(v14 + 11) = (16 * (v21 & 1)) | v22 & 0xEF;
    v23 = *(_QWORD *)(a1 + 1872);
    v24 = *(char *)(v23 + 500) - 1 == v20 ? v20 : v20 + 1;
    v92 = a3;
    if ((v22 & 0x40) != 0)
    {
      sub_1B687A560(v23, a2, a3, 1u, *(char *)(v14 + 9), a5, v8, (__int32 *)(a1 + 5200 + 52 * *(char *)(v14 + 9)));
      v17 = a1 + 4932;
      *(_BYTE *)(v14 + 11) = (32 * (sub_1B68020EC(a1 + 5200 + 52 * *(char *)(v14 + 9), (uint64_t)v94, 1u) & 1)) | *(_BYTE *)(v14 + 11) & 0xDF;
      v41 = *(char *)(v14 + 8);
      v25 = *(_BYTE *)(v14 + 8);
      v23 = *(_QWORD *)(a1 + 1872);
      v42 = *(char *)(v23 + 501) - 1 == v41;
      v43 = v24 + v41;
      v24 = v42 ? v43 : v43 + 1;
    }
    else
    {
      v25 = v20;
    }
    v44 = *(unsigned __int8 *)(v17 + 56);
    v45 = v44 - 1 == v44 >> 1 ? v44 >> 1 : (v44 >> 1) + 1;
    if ((_DWORD)a5 == v8 && *(_DWORD *)(*(_QWORD *)(a1 + 952) + 592) == 2 && v96 + v24 > v45)
    {
      v89 = v17;
      v86 = *(char *)(v14 + 9);
      v47 = *(_DWORD *)v14;
      v46 = *(_DWORD *)(v14 + 4);
      v83 = *(_DWORD *)v14;
      v84 = v25;
      v48 = *(_QWORD **)(*(_QWORD *)(v23 + 79216) + 592);
      v91 = v48[14];
      v49 = *(_QWORD *)(*(_QWORD *)(v23 + 1360) + 112);
      v90 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v48 + 16))(v48, a2, v92, 0);
      v50 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 1872) + 1360)
                                                                        + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360), a2, v92, 0);
      v98 = __PAIR64__(v46, v47);
      v82 = v46;
      v51 = v84;
      v97[0] = v84;
      v97[1] = v86;
      v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1
                                                                                           + 8 * __clz(__rbit32(a5))
                                                                                           + 1072);
      sub_1B6802568((_QWORD *)(a1 + 1368), v97, a2, v92, a5, a5, v49, v50);
      v88 = v50;
      v87 = v52;
      v53 = v52(a5, a5, v90, v91, v50, v49);
      v54 = *(unsigned __int8 *)(v14 + 11);
      v55 = *(_DWORD *)(a1 + 4992 + 52 * v84 + 4 * ((v54 >> 4) & 1));
      v56 = (__int16)v83 - (__int16)v55;
      if ((v56 + 64) >= 0x80)
      {
        if (v56 >= 0)
          v58 = (__int16)v83 - (__int16)v55;
        else
          v58 = (__int16)v55 - (__int16)v83;
        v57 = 63 - 2 * __clz((v56 < 1) | (2 * v58));
      }
      else
      {
        v57 = byte_1B692358C[v56 + 64];
      }
      v59 = (v83 >> 16) - (v55 >> 16);
      v60 = (unint64_t *)v89;
      if ((v59 + 64) >= 0x80)
      {
        if (v59 >= 0)
          v62 = v59;
        else
          v62 = -v59;
        v61 = 63 - 2 * __clz((v59 < 1) | (2 * v62));
      }
      else
      {
        v61 = byte_1B692358C[v59 + 64];
      }
      v85 = v8;
      v63 = *(_QWORD *)(a1 + 1872);
      v64 = v51 + v57 + v61;
      if (*(char *)(v63 + 500) - 1 != v51)
        ++v64;
      v65 = v64 + 1;
      if ((v54 & 0x40) != 0)
      {
        v66 = *(_DWORD *)(a1 + 52 * v86 + 4 * ((v54 >> 5) & 1) + 5200);
        v67 = (__int16)v82 - (__int16)v66;
        if ((v67 + 64) >= 0x80)
        {
          if (v67 >= 0)
            v69 = (__int16)v82 - (__int16)v66;
          else
            v69 = (__int16)v66 - (__int16)v82;
          v68 = 63 - 2 * __clz((v67 < 1) | (2 * v69));
        }
        else
        {
          v68 = byte_1B692358C[v67 + 64];
        }
        v70 = (v82 >> 16) - (v66 >> 16);
        if ((v70 + 64) >= 0x80)
        {
          if (v70 >= 0)
            v72 = v70;
          else
            v72 = -v70;
          v71 = 63 - 2 * __clz((v70 < 1) | (2 * v72));
        }
        else
        {
          v71 = byte_1B692358C[v70 + 64];
        }
        v73 = v86 + v65 + v68 + v71;
        if (*(char *)(v63 + 501) - 1 != v86)
          ++v73;
        v65 = v73 + 1;
      }
      v74 = *(unsigned __int8 *)(v89 + 56);
      if (*(_BYTE *)(v89 + 56))
      {
        v75 = 0;
        v76 = v65 * *(unsigned __int16 *)(a1 + 996) + (unint64_t)v53;
        v77 = -1;
        do
        {
          if (!sub_1B684535C(v93, v75))
          {
            v98 = *v60;
            *(_WORD *)v97 = *((_WORD *)v60 - 2);
            sub_1B6802568((_QWORD *)(a1 + 1368), v97, a2, v92, a5, a5, v49, v88);
            v78 = v87(a5, a5, v90, v91, v88, v49);
            v74 = *(unsigned __int8 *)(v89 + 56);
            v79 = v75 == v74 - 1 ? v75 : (int)v75 + 1;
            v80 = v79 * *(unsigned __int16 *)(a1 + 996) + (unint64_t)v78;
            if (v80 < v76)
            {
              v76 = v80;
              v77 = v75;
            }
          }
          ++v75;
          v60 = (unint64_t *)((char *)v60 + 12);
        }
        while (v75 < v74);
        if ((v77 & 0x80000000) == 0)
        {
          *(_BYTE *)(v14 + 11) = *(_BYTE *)(v14 + 11) & 0xF0 | (2 * (v77 & 7)) | 1;
          v81 = v93 + 12 * v77;
          *(_DWORD *)v14 = *(_DWORD *)(v81 + 4);
          *(_DWORD *)(v14 + 4) = *(_DWORD *)(v81 + 8);
          *(_BYTE *)(v14 + 8) = *(_BYTE *)v81;
          *(_BYTE *)(v14 + 9) = *(_BYTE *)(v81 + 1);
        }
      }
      v8 = v85;
    }
  }
LABEL_29:
  if (v8 >= 4)
  {
    v34 = 0;
    LODWORD(v35) = (int)a5 >> 2;
    if ((int)a5 >> 2 <= 1)
      v35 = 1;
    else
      v35 = v35;
    v36 = 16 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1872) + 1360) + 552);
    v37 = (_QWORD *)v14;
    do
    {
      v38 = v37;
      v39 = v35;
      if ((int)a5 >= 4)
      {
        do
        {
          v40 = *(_QWORD *)v14;
          *(_QWORD *)((char *)v38 + 6) = *(_QWORD *)(v14 + 6);
          *v38 = v40;
          v38 += 2;
          --v39;
        }
        while (v39);
      }
      ++v34;
      v37 = (_QWORD *)((char *)v37 + v36);
    }
    while (v34 != v8 >> 2);
  }
}

BOOL sub_1B684535C(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _DWORD *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  _DWORD *v8;
  BOOL v9;

  if (a2 < 1)
  {
    return 0;
  }
  else
  {
    v2 = 0;
    v3 = (unsigned __int8 *)(a1 + 12 * a2);
    v4 = v3 + 4;
    v7 = *v3;
    v5 = v3 + 1;
    v6 = v7;
    v8 = (_DWORD *)(a1 + 4);
    v9 = 1;
    do
    {
      if (v6 == *((unsigned __int8 *)v8 - 4)
        && *v4 == *v8
        && *v5 == *((unsigned __int8 *)v8 - 3)
        && *(_DWORD *)(a1 + 12 * a2 + 8) == v8[1])
      {
        break;
      }
      v9 = ++v2 < a2;
      v8 += 3;
    }
    while (a2 != v2);
  }
  return v9;
}

uint64_t sub_1B68453F8(uint64_t result, int a2, int a3, char a4, unsigned __int8 *a5, __int16 a6)
{
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t i;
  uint64_t j;
  uint64_t v14;

  v6 = 0;
  v7 = a2 - *((_DWORD *)a5 + 1);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = a3 - *((_DWORD *)a5 + 2);
    if ((v8 & 0x80000000) == 0)
    {
      v9 = *a5;
      if (v7 >= v9 || v8 >= v9)
        v6 = 0;
      else
        v6 = *((_QWORD *)a5 + 11) + 2 * ((v7 >> 3) + (v9 >> 3) * (unint64_t)(v8 >> 3));
    }
  }
  v11 = *(unsigned __int8 *)(*(_QWORD *)(result + 1880) + 2013) >> (a4 + 3);
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
    {
      for (j = 0; j != v11; ++j)
      {
        v14 = j + i * ((unint64_t)*a5 >> 3);
        *(_WORD *)(v6 + 2 * v14) = *(_WORD *)(v6 + 2 * v14) & 0x1FF | (a6 << 9);
      }
    }
  }
  return result;
}

uint64_t sub_1B684549C(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009) - a4;
  if (v6 <= *(_DWORD *)(*(_QWORD *)(a1 + 1888) + 1620))
    LOBYTE(v6) = *(_DWORD *)(*(_QWORD *)(a1 + 1888) + 1620);
  v7 = -1 << v6;
  v8 = v7 & a2;
  v9 = v7 & a3;
  v10 = a6;
  if (v8 != *(_DWORD *)(a1 + 4428))
    v10 = *(__int16 *)(*((_QWORD *)a5 + 11)
                     + 2
                     * (((v8 + ~*((_DWORD *)a5 + 1)) >> 3)
                      + ((unint64_t)*a5 >> 3) * ((v9 - *((_DWORD *)a5 + 2)) >> 3))) >> 9;
  if (v9 != *(_DWORD *)(a1 + 4432))
    a6 = *(__int16 *)(*((_QWORD *)a5 + 11)
                    + 2
                    * (((v8 - *((_DWORD *)a5 + 1)) >> 3)
                     + ((unint64_t)*a5 >> 3) * ((v9 + ~*((_DWORD *)a5 + 2)) >> 3))) >> 9;
  return ((v10 + a6 + 1) >> 1);
}

unint64_t sub_1B6845554(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned int a7, unsigned int a8)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  char v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unint64_t result;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int8 *v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  _BOOL4 v102;
  __int16 v104;
  int v105;
  unsigned __int8 *v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  char v113;
  int v114;
  char v115;

  v12 = 0;
  v13 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009);
  v14 = v13 - a4;
  v98 = 1 << (v13 - a4) >> 1;
  v15 = *(unsigned __int8 *)(a1 + 188);
  v16 = a2 - *((_DWORD *)a6 + 1);
  v17 = (_DWORD)a3 - *((_DWORD *)a6 + 2);
  v18 = a8 == 3;
  v113 = 35;
  v111 = 0;
  v112 = 17439232;
  v109 = *(unsigned __int8 *)(*((_QWORD *)a6 + 12) + 16 * ((v16 >> 2) + ((unint64_t)*a6 >> 2) * (v17 >> 2)));
  if (a8 == 3)
    v19 = 4;
  else
    v19 = 1;
  v105 = v14;
  v102 = a8 == 3;
  v20 = v14 - v18;
  v21 = 1 << (v14 - v18);
  while (*((unsigned __int8 *)&v112 + v12) != v109)
  {
    if (++v12 == 4)
      goto LABEL_9;
  }
  *((_BYTE *)&v112 + v12) = 34;
LABEL_9:
  v22 = 0;
  v101 = 0;
  v23 = v15 == 0;
  v99 = (uint64_t *)(a1 + 8 * a4 + 4616);
  v100 = *((_QWORD *)a6 + 17);
  v24 = *v99;
  *((_QWORD *)a5 + 18) = *v99;
  v25 = *((_QWORD *)a5 + 17);
  *(_DWORD *)(v25 + 128) = 0;
  v26 = v21 >> 2;
  v110 = a1 + 1920;
  *(_OWORD *)(v25 + 112) = xmmword_1B6917860;
  v104 = 2 * v23;
  *(_WORD *)(v25 + 132) = 2 * v23;
  v108 = a6;
  do
  {
    v27 = 0;
    *(_DWORD *)(v24 + 128) = 0;
    *(_OWORD *)(v24 + 112) = xmmword_1B6917860;
    *(_WORD *)(v24 + 132) = v104;
    v28 = *((unsigned __int8 *)&v112 + v22);
    do
    {
      v29 = 0;
      v30 = ((v27 & 1) << v20) + a2 - *((_DWORD *)a5 + 1);
      if ((v30 & 0x80000000) == 0)
      {
        v31 = (v27 >> 1 << v20) + (_DWORD)a3 - *((_DWORD *)a5 + 2);
        if ((v31 & 0x80000000) == 0)
        {
          v32 = *a5;
          if (v30 >= v32 || v31 >= v32)
            v29 = 0;
          else
            v29 = *((_QWORD *)a5 + 12) + 16 * ((v30 >> 2) + (v32 >> 2) * (unint64_t)(v31 >> 2));
        }
      }
      *(_BYTE *)(v29 + 1) = v28;
      if (v21 >= 4)
      {
        v34 = 0;
        v35 = 16 * ((unint64_t)*a5 >> 2);
        v36 = (_QWORD *)v29;
        do
        {
          v37 = v36;
          v38 = v21 >> 2;
          do
          {
            v39 = *(_QWORD *)v29;
            *(_QWORD *)((char *)v37 + 6) = *(_QWORD *)(v29 + 6);
            *v37 = v39;
            v37 += 2;
            --v38;
          }
          while (v38);
          ++v34;
          v36 = (_QWORD *)((char *)v36 + v35);
        }
        while (v34 != v26);
      }
      ++v27;
    }
    while (v27 != v19);
    if (*(_BYTE *)(a1 + 188))
    {
      *(_QWORD *)(*((_QWORD *)a5 + 18) + 112) = sub_1B6867384(v110, a2, a3, a5, a6, 1u, a8, v28, v105, v102, 0, a7, &v111);
      v40 = *(_QWORD *)(a1 + 944);
      v41 = *(_OWORD *)(v40 + 16);
      *(_OWORD *)(v40 + 216) = *(_OWORD *)v40;
      v42 = *(_OWORD *)(v40 + 32);
      v43 = *(_OWORD *)(v40 + 64);
      v44 = *(_OWORD *)(v40 + 80);
      *(_OWORD *)(v40 + 264) = *(_OWORD *)(v40 + 48);
      *(_OWORD *)(v40 + 280) = v43;
      *(_OWORD *)(v40 + 248) = v42;
      *(_OWORD *)(v40 + 232) = v41;
      v45 = *(_OWORD *)(v40 + 96);
      v46 = *(_OWORD *)(v40 + 128);
      v47 = *(_OWORD *)(v40 + 144);
      *(_OWORD *)(v40 + 328) = *(_OWORD *)(v40 + 112);
      *(_OWORD *)(v40 + 344) = v46;
      *(_OWORD *)(v40 + 296) = v44;
      *(_OWORD *)(v40 + 312) = v45;
      v48 = *(_OWORD *)(v40 + 176);
      *(_OWORD *)(v40 + 376) = *(_OWORD *)(v40 + 160);
      *(_OWORD *)(v40 + 392) = v48;
      v115 = 0;
      *(_QWORD *)(v40 + 408) = *(_QWORD *)(v40 + 192);
      *(_OWORD *)(v40 + 360) = v47;
      v49 = 8 * (*(_DWORD *)(v40 + 208) - *(_DWORD *)(v40 + 24));
      *(_QWORD *)(v40 + 32) = 0;
      *(_QWORD *)(v40 + 8) = 510;
      *(_QWORD *)(v40 + 16) = v49;
      v114 = *((_DWORD *)a5 + 5);
      sub_1B6845DCC(*(unint64_t **)(a1 + 944), v109, v28);
      sub_1B6841DFC(a1, a2, (int)a3, a5, 1, 0, 0, 0, 1);
      result = (unint64_t)sub_1B6861500(v110, a2, (uint64_t)a3, a4, &v114, &v115, 0);
      v51 = *(_QWORD *)(a1 + 944);
      v52 = *(_DWORD *)(v51 + 24);
      v53 = *(_DWORD *)(v51 + 16);
      v54 = *(_DWORD *)(v51 + 8);
      v55 = *(_OWORD *)(v51 + 232);
      *(_OWORD *)v51 = *(_OWORD *)(v51 + 216);
      *(_OWORD *)(v51 + 16) = v55;
      v56 = *(_OWORD *)(v51 + 360);
      v57 = *(_OWORD *)(v51 + 392);
      *(_OWORD *)(v51 + 160) = *(_OWORD *)(v51 + 376);
      *(_OWORD *)(v51 + 176) = v57;
      v58 = *(_OWORD *)(v51 + 296);
      v59 = *(_OWORD *)(v51 + 328);
      v60 = *(_OWORD *)(v51 + 344);
      *(_OWORD *)(v51 + 96) = *(_OWORD *)(v51 + 312);
      *(_OWORD *)(v51 + 112) = v59;
      v61 = *(_OWORD *)(v51 + 248);
      *(_OWORD *)(v51 + 128) = v60;
      *(_OWORD *)(v51 + 144) = v56;
      v62 = *(_OWORD *)(v51 + 264);
      v63 = *(_OWORD *)(v51 + 280);
      *(_OWORD *)(v51 + 32) = v61;
      *(_OWORD *)(v51 + 48) = v62;
      v64 = ((v53 + 8 * (v52 - *(_DWORD *)(v51 + 208))) << 8) - v54 + 510;
      *(_QWORD *)(v51 + 192) = *(_QWORD *)(v51 + 408);
      *(_OWORD *)(v51 + 64) = v63;
      *(_OWORD *)(v51 + 80) = v58;
      v65 = *((_QWORD *)a5 + 18);
      v66 = *(_QWORD *)(v65 + 112);
    }
    else
    {
      result = sub_1B6865E60(v110, a2, (uint64_t)a3, a5, a6, a8, v28, v105, 0, 0, a7);
      v66 = result;
      v65 = *((_QWORD *)a5 + 18);
      *(_QWORD *)(v65 + 112) = result;
      if (v28 == 35)
        v64 = 1;
      else
        v64 = 3;
    }
    *(_DWORD *)(v65 + 128) = v64;
    v67 = v66
        + ((v64 * *(unsigned __int16 *)(a1 + 2 * *(__int16 *)(v65 + 132) + 992)) >> (8 * (*(_WORD *)(v65 + 132) == 0)));
    *(_QWORD *)(v65 + 120) = v67;
    v24 = *((_QWORD *)a5 + 17);
    if (v67 >= *(_QWORD *)(v24 + 120))
    {
      v68 = *((_QWORD *)a5 + 17);
      v24 = v65;
    }
    else
    {
      *((_QWORD *)a5 + 17) = v65;
      *((_QWORD *)a5 + 18) = v24;
      v68 = v65;
      v101 = v28;
    }
    a6 = v108;
    ++v22;
  }
  while (v22 != 5);
  v69 = 0;
  v70 = &a5[24 * *(unsigned __int8 *)(a1 + 188)];
  *((_QWORD *)v70 + 21) += *(_QWORD *)(v68 + 112);
  *((_DWORD *)v70 + 46) += *(_DWORD *)(v68 + 128);
  do
  {
    v71 = 0;
    v72 = ((v69 & 1) << v20) + a2 - *((_DWORD *)v108 + 1);
    if ((v72 & 0x80000000) == 0)
    {
      v73 = (v69 >> 1 << v20) + (_DWORD)a3 - *((_DWORD *)v108 + 2);
      if ((v73 & 0x80000000) == 0)
      {
        v74 = *v108;
        if (v72 >= v74 || v73 >= v74)
          v71 = 0;
        else
          v71 = *((_QWORD *)v108 + 12) + 16 * ((v72 >> 2) + (v74 >> 2) * (unint64_t)(v73 >> 2));
      }
    }
    *(_BYTE *)(v71 + 1) = v101;
    if (v21 >= 4)
    {
      v76 = 0;
      v77 = 16 * ((unint64_t)*v108 >> 2);
      v78 = (_QWORD *)v71;
      do
      {
        v79 = v78;
        v80 = v21 >> 2;
        do
        {
          v81 = *(_QWORD *)v71;
          *(_QWORD *)((char *)v79 + 6) = *(_QWORD *)(v71 + 6);
          *v79 = v81;
          v79 += 2;
          --v80;
        }
        while (v80);
        ++v76;
        v78 = (_QWORD *)((char *)v78 + v77);
      }
      while (v76 != v26);
    }
    ++v69;
  }
  while (v69 != v19);
  v111 = 0;
  if (!*(_BYTE *)(a1 + 188))
  {
    if ((*(_WORD *)(*((_QWORD *)v108 + 11)
                   + 2
                   * (((a2 - *((_DWORD *)v108 + 1)) >> 3)
                    + ((unint64_t)*v108 >> 3) * (((_DWORD)a3 - *((_DWORD *)v108 + 2)) >> 3))) & 0xC) == 0
      || *(_BYTE *)(a1 + 8126))
    {
      result = sub_1B6867384(v110, a2, a3, a5, v108, 0, a8, v101, v105, 0, 0, a7, &v111);
      a6 = v108;
      if (!*(_BYTE *)a1)
        goto LABEL_55;
      v82 = result;
      v83 = *((_QWORD *)a5 + 17);
      *(_QWORD *)(v83 + 112) = result;
      v84 = *(_DWORD *)(v83 + 128) + v111;
      *(_DWORD *)(v83 + 128) = v84;
      goto LABEL_54;
    }
    if (*(_BYTE *)a1)
    {
      v88 = 0;
      v89 = a2 - *((_DWORD *)a5 + 1);
      v90 = (_DWORD)a3 - *((_DWORD *)a5 + 2);
      if ((v89 & 0x80000000) == 0 && (v90 & 0x80000000) == 0)
      {
        v88 = 0;
        v91 = *a5;
        if (v89 < v91 && v90 < v91)
        {
          v88 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 96), *(_QWORD *)(*((_QWORD *)a5 + 17) + 104)+ v89+ *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (unint64_t)(v90 & 0xFFFFFFFE));
          v89 = a2 - *((_DWORD *)a5 + 1);
          v90 = (_DWORD)a3 - *((_DWORD *)a5 + 2);
        }
      }
      v92 = 0;
      v93 = *((_QWORD *)a5 + 17);
      if ((v89 & 0x80000000) != 0)
        goto LABEL_71;
      v94 = 0;
      if ((v90 & 0x80000000) != 0)
        goto LABEL_72;
      v92 = 0;
      v95 = *a5;
      if (v89 >= v95)
      {
LABEL_71:
        v94 = 0;
      }
      else
      {
        v94 = 0;
        if (v90 < v95)
        {
          v96 = (v89 >> 1) + *(unsigned __int8 *)(v93 + 1) * (unint64_t)(v90 >> 1);
          v92 = *(_QWORD *)(v93 + 64) + 2 * v96;
          v94 = *(_QWORD *)(v93 + 72) + 2 * v96;
        }
      }
LABEL_72:
      result = sub_1B6868700(v110, a2, (int)a3, a5, v88, 2 * *(unsigned __int8 *)(v93 + 1), v92, v94, *(unsigned __int8 *)(v93 + 1), v98, &v111);
      v82 = result;
      v97 = *((_QWORD *)a5 + 17);
      *(_QWORD *)(v97 + 112) = result;
      v84 = *(_DWORD *)(v97 + 128) + v111;
      *(_DWORD *)(v97 + 128) = v84;
      a6 = v108;
      if (*(_BYTE *)a1)
      {
LABEL_54:
        *((_QWORD *)a5 + 24) += v82;
        *((_DWORD *)a5 + 52) += v84;
      }
    }
  }
LABEL_55:
  v85 = *((_QWORD *)a5 + 17);
  if (v100 == v85)
  {
    v86 = *((_QWORD *)a5 + 18);
  }
  else
  {
    result = (unint64_t)sub_1B683ADE4(a1, v100, v85, (int)a2 - *((_DWORD *)a6 + 1), (int)a3 - *((_DWORD *)a6 + 2), (int)a2 - *((_DWORD *)a5 + 1), (int)a3 - *((_DWORD *)a5 + 2), *a5 >> 1);
    v86 = *((_QWORD *)a5 + 18);
    if (!*(_BYTE *)(a1 + 8))
    {
      v87 = *((_QWORD *)a5 + 17);
      *((_QWORD *)a5 + 17) = v86;
      *((_QWORD *)a5 + 18) = v87;
      v86 = v87;
    }
  }
  *v99 = v86;
  return result;
}

uint64_t sub_1B6845D14(int a1, int a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  _BOOL8 v9;
  int v10;
  int v11;
  int v12;

  if (a3 >= 1)
  {
    v5 = a3 + a2;
    v6 = a3 + a1;
    if (a5)
      v7 = 3;
    else
      v7 = 2;
    v8 = a5;
    v9 = (int)a5 > 0;
    v10 = *((_DWORD *)a4 + 2);
    while (2)
    {
      v11 = a1;
      do
      {
        v12 = v11 - *((_DWORD *)a4 + 1);
        if (v12 >= 0
          && ((a2 - v10) & 0x80000000) == 0
          && *(_BYTE *)(*((_QWORD *)a4 + 12)
                      + 16 * ((v12 >> 2) + ((unint64_t)*a4 >> 2) * ((a2 - v10) >> 2))
                      + 10) != 2
          && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a4 + 17) + 8 * v8 + 32)
                      + (v12 >> v7)
                      + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a4 + 17) + v9) >> 2)
                      * ((a2 - v10) >> v7)))
        {
          return 1;
        }
        v11 += 4;
      }
      while (v11 < v6);
      a2 += 4;
      if (a2 < v5)
        continue;
      break;
    }
  }
  return 0;
}

unint64_t *sub_1B6845DCC(unint64_t *a1, int a2, int a3)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;

  v5 = (char *)a1 + 57;
  if (a3 == 35)
    return sub_1B67CC270(a1, 0, v5);
  sub_1B67CC270(a1, 1, v5);
  v8 = 0;
  v11 = 35;
  v10 = 17439232;
  while (*((unsigned __int8 *)&v10 + v8) != a2)
  {
    if (++v8 == 4)
      goto LABEL_8;
  }
  *((_BYTE *)&v10 + v8) = 34;
LABEL_8:
  v9 = 0;
  while (*((unsigned __int8 *)&v10 + v9) != a3)
  {
    if (++v9 == 4)
      return sub_1B67CC498(a1, a3, 2);
  }
  a3 = v9;
  return sub_1B67CC498(a1, a3, 2);
}

uint64_t sub_1B6845EAC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, unsigned __int8 *a6, uint64_t a7, unint64_t a8)
{
  char v15;
  unint64_t *v16;
  uint64_t result;
  int v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  int v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  __int128 v60;
  char *v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  size_t v77;
  uint64_t v78;
  char *v79;
  unsigned int v80;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  __int16 v87;
  _WORD *v88;
  unsigned int v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  _WORD *v93;
  _WORD *v94;
  uint64_t v95;
  _WORD *v96;
  unsigned int v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _WORD *v105;
  _WORD *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  char v134;
  int v136;
  char v137;
  __int128 v138;
  int v139;
  __int16 v140;
  __int128 v141;
  unint64_t v142;

  v15 = *(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2009);
  *((_OWORD *)a6 + 12) = xmmword_1B6917860;
  v16 = (unint64_t *)(a6 + 192);
  v139 = 0;
  v134 = v15 - a4;
  v138 = xmmword_1B6917860;
  v140 = 0;
  *((_DWORD *)a6 + 52) = 0;
  *((_WORD *)a6 + 106) = 0;
  LODWORD(v142) = 0;
  v141 = xmmword_1B6917860;
  WORD2(v142) = 0;
  HIWORD(v142) = *((_WORD *)a6 + 107);
  sub_1B68453F8(a1, a2, a3, a4, a6, *((_DWORD *)a6 + 3));
  if (*(_BYTE *)(a1 + 188) || !*(_BYTE *)(a1 + 8127) || *(char *)(*(_QWORD *)(a1 + 952) + 252) >= 1)
  {
    result = sub_1B6846954(a1, a2, a3, a4, a6, (uint64_t)v16, (uint64_t)&v141, 1, &v138);
    goto LABEL_3;
  }
  result = sub_1B6846954(a1, a2, a3, a4, a6, (uint64_t)v16, (uint64_t)&v141, 0, &v138);
  v18 = result;
  *((_DWORD *)a6 + 52) = v139;
  v82 = a2 - *((_DWORD *)a6 + 1);
  if ((v82 & 0x80000000) != 0
    || (v83 = a3 - *((_DWORD *)a6 + 2), (v83 & 0x80000000) != 0)
    || (v84 = *a6,
        *(_BYTE *)(*((_QWORD *)a6 + 12)
                 + 16 * ((v82 >> 2) + (v84 >> 2) * (unint64_t)(v83 >> 2))
                 + 10) != 2))
  {
    if (!*(_BYTE *)(a1 + 8127) || !*(_BYTE *)(*(_QWORD *)(a1 + 952) + 251))
      goto LABEL_4;
    *((_DWORD *)a6 + 52) = 0;
    *((_OWORD *)a6 + 12) = xmmword_1B6917860;
    *((_WORD *)a6 + 106) = 0;
    LODWORD(v142) = 0;
    v141 = xmmword_1B6917860;
    WORD2(v142) = 0;
    result = sub_1B686D734(a1 + 1920, a2, a3, 0, a6, 0, (uint64_t)v16, (uint64_t)&v141);
LABEL_3:
    v18 = result;
    goto LABEL_4;
  }
  v85 = *((_QWORD *)a6 + 11);
  v86 = (v82 >> 3) + (v84 >> 3) * (unint64_t)(v83 >> 3);
  v87 = *(_WORD *)(v85 + 2 * v86);
  if ((v87 & 0x80) == 0)
  {
    v88 = 0;
    *(_WORD *)(v85 + 2 * v86) = v87 | 0x80;
    v89 = a2 - *((_DWORD *)a6 + 1);
    v90 = *a6;
    if ((v89 & 0x80000000) == 0)
    {
      v91 = a3 - *((_DWORD *)a6 + 2);
      if ((v91 & 0x80000000) == 0)
      {
        v88 = 0;
        if (v89 < v90 && v91 < v90)
          v88 = (_WORD *)(*((_QWORD *)a6 + 11)
                        + 2 * ((v89 >> 3) + (v90 >> 3) * (unint64_t)(v91 >> 3)));
      }
    }
    if (1 << v134 >= 8)
    {
      v92 = 0;
      v93 = v88;
      do
      {
        v94 = v93;
        v95 = (1 << v134) >> 3;
        do
        {
          *v94++ = *v88;
          --v95;
        }
        while (v95);
        ++v92;
        v93 += v90 >> 3;
      }
      while (v92 != (1 << v134) >> 3);
    }
  }
LABEL_4:
  v19 = *v16;
  if (*v16 >= a8)
  {
    *((_DWORD *)a6 + 52) = 1;
    *((_QWORD *)a6 + 25) = v19
                         + (*(unsigned __int16 *)(a1 + 2 * *((__int16 *)a6 + 106) + 992) >> (8
                                                                                             * (*((_WORD *)a6 + 106) == 0)));
    return result;
  }
  v20 = *(_QWORD *)(a1 + 944);
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)(v20 + 216) = *(_OWORD *)v20;
  v22 = *(_OWORD *)(v20 + 32);
  v23 = *(_OWORD *)(v20 + 64);
  v24 = *(_OWORD *)(v20 + 80);
  *(_OWORD *)(v20 + 264) = *(_OWORD *)(v20 + 48);
  *(_OWORD *)(v20 + 280) = v23;
  *(_OWORD *)(v20 + 248) = v22;
  *(_OWORD *)(v20 + 232) = v21;
  v25 = *(_OWORD *)(v20 + 96);
  v26 = *(_OWORD *)(v20 + 128);
  v27 = *(_OWORD *)(v20 + 144);
  *(_OWORD *)(v20 + 328) = *(_OWORD *)(v20 + 112);
  *(_OWORD *)(v20 + 344) = v26;
  *(_OWORD *)(v20 + 296) = v24;
  *(_OWORD *)(v20 + 312) = v25;
  v28 = *(_OWORD *)(v20 + 176);
  *(_OWORD *)(v20 + 376) = *(_OWORD *)(v20 + 160);
  *(_OWORD *)(v20 + 392) = v28;
  v137 = 0;
  *(_QWORD *)(v20 + 408) = *(_QWORD *)(v20 + 192);
  *(_OWORD *)(v20 + 360) = v27;
  v29 = 8 * (*(_DWORD *)(v20 + 208) - *(_DWORD *)(v20 + 24));
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 8) = 510;
  *(_QWORD *)(v20 + 16) = v29;
  sub_1B6841DFC(a1, a2, a3, a6, 1, 0, 0, 1, 0);
  *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
  result = (uint64_t)sub_1B6847020((unint64_t *)a1, a2, a3, a4, a7, (int *)a6 + 4, &v137);
  v30 = *(_QWORD *)(a1 + 944);
  *((_DWORD *)a6 + 52) = *((_DWORD *)a6 + 52)
                       - *(_DWORD *)(v30 + 8)
                       + ((*(_DWORD *)(v30 + 16) + 8 * (*(_DWORD *)(v30 + 24) - *(_DWORD *)(v30 + 208))) << 8)
                       + 510;
  v32 = *(_OWORD *)(v30 + 264);
  v31 = *(_OWORD *)(v30 + 280);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v30 + 248);
  *(_OWORD *)(v30 + 48) = v32;
  v34 = *(_OWORD *)(v30 + 328);
  v33 = *(_OWORD *)(v30 + 344);
  v35 = *(_OWORD *)(v30 + 296);
  *(_OWORD *)(v30 + 96) = *(_OWORD *)(v30 + 312);
  *(_OWORD *)(v30 + 112) = v34;
  *(_OWORD *)(v30 + 64) = v31;
  *(_OWORD *)(v30 + 80) = v35;
  v36 = *(_OWORD *)(v30 + 392);
  v37 = *(_OWORD *)(v30 + 360);
  *(_OWORD *)(v30 + 160) = *(_OWORD *)(v30 + 376);
  *(_OWORD *)(v30 + 176) = v36;
  v38 = *(_OWORD *)(v30 + 232);
  *(_QWORD *)(v30 + 192) = *(_QWORD *)(v30 + 408);
  *(_OWORD *)(v30 + 128) = v33;
  *(_OWORD *)(v30 + 144) = v37;
  *(_OWORD *)v30 = *(_OWORD *)(v30 + 216);
  *(_OWORD *)(v30 + 16) = v38;
  v39 = *((_QWORD *)a6 + 24)
      + ((*((_DWORD *)a6 + 52) * *(unsigned __int16 *)(a1 + 2 * *((__int16 *)a6 + 106) + 992)) >> (8 * (*((_WORD *)a6 + 106) == 0)));
  *((_QWORD *)a6 + 25) = v39;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 952) + 227))
  {
    v40 = (unint64_t)v141 < v39 ? v18 : 0;
    if (v40 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 1888) + 12))
        sub_1B683AA88(a5, a6, a2, a3, *a6);
      v41 = *(__int128 **)(a1 + 944);
      v42 = v41[10];
      v43 = v41[11];
      v44 = v41[8];
      *(__int128 *)((char *)v41 + 360) = v41[9];
      *(__int128 *)((char *)v41 + 376) = v42;
      *(__int128 *)((char *)v41 + 392) = v43;
      v45 = v41[6];
      v46 = v41[7];
      v47 = v41[4];
      *(__int128 *)((char *)v41 + 296) = v41[5];
      *(__int128 *)((char *)v41 + 312) = v45;
      *(__int128 *)((char *)v41 + 328) = v46;
      *(__int128 *)((char *)v41 + 344) = v44;
      v48 = *v41;
      *(__int128 *)((char *)v41 + 232) = v41[1];
      v49 = v41[3];
      *(__int128 *)((char *)v41 + 248) = v41[2];
      *(__int128 *)((char *)v41 + 264) = v49;
      *(__int128 *)((char *)v41 + 280) = v47;
      *((_QWORD *)v41 + 51) = *((_QWORD *)v41 + 24);
      *(__int128 *)((char *)v41 + 216) = v48;
      v50 = 8 * (*((_DWORD *)v41 + 52) - *((_DWORD *)v41 + 6));
      *((_QWORD *)v41 + 4) = 0;
      *((_QWORD *)v41 + 1) = 510;
      *((_QWORD *)v41 + 2) = v50;
      sub_1B6841DFC(a1, a2, a3, a6, 1, 1, 0, 1, 0);
      *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
      result = (uint64_t)sub_1B6847020((unint64_t *)a1, a2, a3, a4, a7, (int *)a6 + 4, &v137);
      v51 = *(_QWORD *)(a1 + 944);
      v53 = *(_OWORD *)(v51 + 264);
      v52 = *(_OWORD *)(v51 + 280);
      *(_OWORD *)(v51 + 32) = *(_OWORD *)(v51 + 248);
      *(_OWORD *)(v51 + 48) = v53;
      v55 = *(_OWORD *)(v51 + 328);
      v54 = *(_OWORD *)(v51 + 344);
      v56 = *(_OWORD *)(v51 + 296);
      *(_OWORD *)(v51 + 96) = *(_OWORD *)(v51 + 312);
      *(_OWORD *)(v51 + 112) = v55;
      *(_OWORD *)(v51 + 64) = v52;
      *(_OWORD *)(v51 + 80) = v56;
      v57 = *(_OWORD *)(v51 + 392);
      v58 = *(_OWORD *)(v51 + 360);
      *(_OWORD *)(v51 + 160) = *(_OWORD *)(v51 + 376);
      *(_OWORD *)(v51 + 176) = v57;
      LODWORD(v142) = v142
                    - *(_DWORD *)(v51 + 8)
                    + ((*(_DWORD *)(v51 + 16) + 8 * (*(_DWORD *)(v51 + 24) - *(_DWORD *)(v51 + 208))) << 8)
                    + 510;
      v59 = v142;
      *(_QWORD *)(v51 + 192) = *(_QWORD *)(v51 + 408);
      *(_OWORD *)(v51 + 128) = v54;
      *(_OWORD *)(v51 + 144) = v58;
      v60 = *(_OWORD *)(v51 + 232);
      *(_OWORD *)v51 = *(_OWORD *)(v51 + 216);
      *(_OWORD *)(v51 + 16) = v60;
      *((_QWORD *)&v141 + 1) = v141
                             + ((v59 * *(unsigned __int16 *)(a1 + 2 * SWORD2(v142) + 992)) >> (8 * (WORD2(v142) == 0)));
      if (*((_QWORD *)&v141 + 1) >= *((_QWORD *)a6 + 25))
      {
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 1888) + 12))
          return result;
        result = (uint64_t)sub_1B683AA88(a6, a5, a2, a3, *a5);
      }
      else
      {
        v61 = 0;
        v62 = 1 << (*(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2009) - a4 - 2);
        v63 = a2 - *((_DWORD *)a6 + 1);
        v136 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009) - a4;
        if ((v63 & 0x80000000) == 0)
        {
          v64 = a3 - *((_DWORD *)a6 + 2);
          if ((v64 & 0x80000000) == 0)
          {
            v61 = 0;
            v65 = *a6;
            if (v63 < v65 && v64 < v65)
              v61 = (char *)(*(_QWORD *)(*((_QWORD *)a6 + 17) + 32)
                           + (v63 >> 2)
                           + ((unint64_t)**((unsigned __int8 **)a6 + 17) >> 2) * (v64 >> 2));
          }
        }
        v66 = (unint64_t)**((unsigned __int8 **)a6 + 17) >> 2;
        v67 = v62;
        do
        {
          --v67;
          bzero(v61, v62);
          v61 += v66;
        }
        while (v67);
        if (!*(_BYTE *)(a1 + 8))
        {
          v68 = 0;
          if ((a3 & 7) == 0 || (a2 & 7) == 0)
            v70 = 0;
          else
            v70 = v62;
          if (v136 >= 3)
            LODWORD(v71) = v62 >> 1;
          else
            LODWORD(v71) = v70;
          v72 = *((_QWORD *)a6 + 17);
          v73 = (unint64_t)*(unsigned __int8 *)(v72 + 1) >> 2;
          v74 = a2 - *((_DWORD *)a6 + 1);
          v75 = a3 - *((_DWORD *)a6 + 2);
          if ((v74 & 0x80000000) == 0 && (v75 & 0x80000000) == 0)
          {
            v68 = 0;
            v76 = *a6;
            if (v74 < v76 && v75 < v76)
              v68 = (char *)(*(_QWORD *)(v72 + 40) + (v74 >> 3) + v73 * (unint64_t)(v75 >> 3));
          }
          v77 = (int)v71;
          if ((_DWORD)v71)
          {
            v78 = (int)v71;
            do
            {
              --v78;
              bzero(v68, (int)v71);
              v68 += v73;
            }
            while (v78);
            v74 = a2 - *((_DWORD *)a6 + 1);
            v75 = a3 - *((_DWORD *)a6 + 2);
          }
          v79 = 0;
          if ((v74 & 0x80000000) == 0 && (v75 & 0x80000000) == 0)
          {
            v80 = *a6;
            if (v74 >= v80 || v75 >= v80)
              v79 = 0;
            else
              v79 = (char *)(*(_QWORD *)(*((_QWORD *)a6 + 17) + 48)
                           + (v74 >> 3)
                           + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a6 + 17) + 1) >> 2) * (v75 >> 3));
          }
          if ((_DWORD)v71)
          {
            v71 = (int)v71;
            do
            {
              --v71;
              bzero(v79, v77);
              v79 += v73;
            }
            while (v71);
          }
        }
        v96 = 0;
        v97 = a2 - *((_DWORD *)a6 + 1);
        if ((v97 & 0x80000000) != 0)
        {
          v99 = 0;
        }
        else
        {
          v98 = a3 - *((_DWORD *)a6 + 2);
          v99 = 0;
          if ((v98 & 0x80000000) == 0)
          {
            v100 = *a6;
            if (v97 >= v100 || v98 >= v100)
            {
              v96 = 0;
              v99 = 0;
            }
            else
            {
              v96 = (_WORD *)(*((_QWORD *)a6 + 11)
                            + 2 * ((v97 >> 3) + (v100 >> 3) * (unint64_t)(v98 >> 3)));
              v99 = *((_QWORD *)a6 + 12) + 16 * ((v97 >> 2) + (v100 >> 2) * (unint64_t)(v98 >> 2));
            }
          }
        }
        if ((*v96 & 0x70) == 0 && (*(_BYTE *)(v99 + 11) & 1) != 0)
        {
          *v96 |= 0x80u;
          *(_BYTE *)(v99 + 10) = 2;
          *(_BYTE *)(v99 + 11) &= ~1u;
          v102 = *a6;
          if (v102 >= 8)
          {
            v103 = 0;
            v104 = v102 >> 3;
            v105 = v96;
            do
            {
              v106 = v105;
              v107 = v104;
              do
              {
                *v106++ = *v96;
                --v107;
              }
              while (v107);
              ++v103;
              v105 += v104;
            }
            while (v103 != v104);
            LODWORD(v102) = *a6;
          }
          if (v102 >= 4)
          {
            v108 = 0;
            v109 = v102 >> 2;
            v110 = (_QWORD *)v99;
            do
            {
              v111 = v110;
              v112 = v102 >> 2;
              do
              {
                v113 = *(_QWORD *)v99;
                *(_QWORD *)((char *)v111 + 6) = *(_QWORD *)(v99 + 6);
                *v111 = v113;
                v111 += 2;
                --v112;
              }
              while (v112);
              ++v108;
              v110 += 2 * v109;
            }
            while (v108 != v109);
          }
        }
        v114 = 0;
        v115 = (1 << v134);
        v116 = a6[1];
        v117 = (a2 - *((_DWORD *)a6 + 1));
        v118 = a3 - *((_DWORD *)a6 + 2);
        if ((v117 & 0x80000000) == 0 && (v118 & 0x80000000) == 0)
        {
          v119 = *a6;
          if (v117 >= v119 || v118 >= v119)
          {
            v114 = 0;
          }
          else
          {
            v114 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a6 + 7) + 24))(*((_QWORD *)a6 + 7), v117 + a6[1] * (unint64_t)v118 + *((_QWORD *)a6 + 8));
            LODWORD(v117) = a2 - *((_DWORD *)a6 + 1);
            v118 = a3 - *((_DWORD *)a6 + 2);
          }
        }
        v121 = 0;
        v122 = (unsigned __int8 *)*((_QWORD *)a6 + 17);
        v123 = *v122;
        if ((v117 & 0x80000000) == 0 && (v118 & 0x80000000) == 0)
        {
          v121 = 0;
          v124 = *a6;
          if (v117 < v124 && v118 < v124)
            v121 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v122 + 10) + 24))(*((_QWORD *)v122 + 10), *((_QWORD *)v122 + 11) + v117 + *v122 * (unint64_t)v118);
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v115, v115, v116, v114, v123, v121);
        if (!*(_BYTE *)(a1 + 8))
        {
          v125 = 0;
          v126 = a6[1];
          v127 = (a2 - *((_DWORD *)a6 + 1));
          v128 = a3 - *((_DWORD *)a6 + 2);
          if ((v127 & 0x80000000) == 0 && (v128 & 0x80000000) == 0)
          {
            v125 = 0;
            v129 = *a6;
            if (v127 < v129 && v128 < v129)
            {
              v125 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a6 + 9) + 24))(*((_QWORD *)a6 + 9), v127 + a6[1] * (unint64_t)(v128 >> 1) + *((_QWORD *)a6 + 10));
              LODWORD(v127) = a2 - *((_DWORD *)a6 + 1);
              v128 = a3 - *((_DWORD *)a6 + 2);
            }
          }
          v130 = 0;
          v131 = *((_QWORD *)a6 + 17);
          v132 = 2 * *(unsigned __int8 *)(v131 + 1);
          if ((v127 & 0x80000000) == 0 && (v128 & 0x80000000) == 0)
          {
            v130 = 0;
            v133 = *a6;
            if (v127 < v133 && v128 < v133)
              v130 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v131 + 96) + 24))(*(_QWORD *)(v131 + 96), *(_QWORD *)(v131 + 104) + v127 + v132 * (unint64_t)(v128 >> 1));
          }
          result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v115, ((int)v115 >> 1), v126, v125, v132, v130);
        }
        *(_OWORD *)v16 = v141;
        v16[2] = v142;
      }
      *((_DWORD *)a6 + 4) = *((_DWORD *)a6 + 5);
    }
  }
  return result;
}

uint64_t sub_1B6846954(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, int a8, __int128 *a9)
{
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v45;
  unsigned int v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  char v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  _WORD *v80;
  _WORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  char v93;
  unsigned __int8 v94;
  __int128 *v96;
  uint64_t v97;
  unsigned int v99;
  __int128 v100;
  int v101;
  __int16 v102;

  v14 = a9;
  v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009) - (uint64_t)a4;
  v99 = 1 << v15;
  v16 = a2 - *((_DWORD *)a5 + 1);
  v17 = a3 - *((_DWORD *)a5 + 2);
  if (((v16 | v17) & 0x80000000) == 0)
  {
    v18 = *a5;
    if (v16 < v18 && v17 < v18)
    {
      v24 = *((_QWORD *)a5 + 12)
          + 16 * ((v16 >> 2) + (v18 >> 2) * (unint64_t)(v17 >> 2));
      v20 = v24 + 10;
      if (*(_BYTE *)(v24 + 10) == 2)
      {
        result = 0;
        if (a6 && a7)
        {
          v22 = (_QWORD *)a7;
          v97 = a6;
          v26 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 3) + 24))(*((_QWORD *)a5 + 3), v16 + a5[1] * (unint64_t)v17 + *((_QWORD *)a5 + 4));
          v14 = a9;
          v23 = v26;
          LODWORD(v16) = a2 - *((_DWORD *)a5 + 1);
          v17 = a3 - *((_DWORD *)a5 + 2);
          goto LABEL_16;
        }
        return result;
      }
      v25 = (_WORD *)(*((_QWORD *)a5 + 11)
                    + 2 * ((v16 >> 3) + (v18 >> 3) * (unint64_t)(v17 >> 3)));
LABEL_36:
      v94 = a8;
      if (*(_BYTE *)(a1 + 8127))
        LODWORD(v49) = a8;
      else
        LODWORD(v49) = 1;
      if ((_DWORD)v49 != 1 || *(_BYTE *)(*(_QWORD *)(a1 + 952) + 227) != 0)
      {
        v51 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
        v52 = *v51;
        v93 = v49;
        v53 = 0;
        if ((int)(v16 | v17) >= 0)
        {
          v54 = *a5;
          if (v16 < v54 && v17 < v54)
          {
            v55 = *v51;
            v56 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 10) + 24))(*((_QWORD *)v51 + 10), *((_QWORD *)v51 + 11) + v16 + v55 * v17);
            v52 = v55;
            v53 = v56;
            LODWORD(v16) = a2 - *((_DWORD *)a5 + 1);
            v17 = a3 - *((_DWORD *)a5 + 2);
          }
        }
        v57 = 0;
        v49 = a5[1];
        if ((v16 & 0x80000000) == 0 && (v17 & 0x80000000) == 0)
        {
          v57 = 0;
          v58 = *a5;
          if (v16 < v58 && v17 < v58)
          {
            v91 = v52;
            v59 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 7) + 24))(*((_QWORD *)a5 + 7), v16 + a5[1] * (unint64_t)v17 + *((_QWORD *)a5 + 8));
            v52 = v91;
            v57 = v59;
          }
        }
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v99, v99, v52, v53, v49, v57);
        LOBYTE(v49) = v93;
        if (!*(_BYTE *)(a1 + 8))
        {
          v60 = 0;
          v61 = ((int)v99 >> 1);
          v62 = *((_QWORD *)a5 + 17);
          v63 = *(unsigned __int8 *)(v62 + 1);
          v64 = 2 * v63;
          v65 = a2 - *((_DWORD *)a5 + 1);
          v66 = a3 - *((_DWORD *)a5 + 2);
          if ((v65 & 0x80000000) == 0 && (v66 & 0x80000000) == 0)
          {
            v60 = 0;
            v67 = *a5;
            if (v65 < v67 && v66 < v67)
            {
              v68 = 2 * v63;
              v69 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v62 + 96) + 24))(*(_QWORD *)(v62 + 96), *(_QWORD *)(v62 + 104)+ v65+ *(unsigned __int8 *)(v62 + 1) * (unint64_t)(v66 & 0xFFFFFFFE));
              v64 = v68;
              v61 = ((int)v99 >> 1);
              v60 = v69;
              v65 = a2 - *((_DWORD *)a5 + 1);
              v66 = a3 - *((_DWORD *)a5 + 2);
            }
          }
          v70 = 0;
          v71 = a5[1];
          if ((v65 & 0x80000000) == 0 && (v66 & 0x80000000) == 0)
          {
            v70 = 0;
            v72 = *a5;
            if (v65 < v72 && v66 < v72)
            {
              v92 = v61;
              v89 = v60;
              v90 = v64;
              v73 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 9) + 24))(*((_QWORD *)a5 + 9), v65 + a5[1] * (unint64_t)(v66 >> 1) + *((_QWORD *)a5 + 10));
              v60 = v89;
              v64 = v90;
              v61 = v92;
              v70 = v73;
            }
          }
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8144))(v99, v61, v64, v60, v71, v70);
          LOBYTE(v49) = v93;
        }
      }
      sub_1B685F88C(a1 + 1920, a1, a2, a3, a4, *(unsigned __int8 *)v20, ((unsigned __int16)*v25 >> 4) & 7);
      if ((v49 & 1) != 0)
      {
        v74 = a6;
        result = sub_1B686F790(a1 + 1920, a2, a3, 0, a5, 0, a6, a7, *(_BYTE *)(a1 + 8) == 0, 0, v94);
      }
      else
      {
        v75 = a9;
        if (a9)
        {
          v88 = a7;
        }
        else
        {
          v101 = 0;
          v100 = xmmword_1B6917860;
          v102 = 0;
          v88 = a7;
          v75 = &v100;
        }
        v74 = a6;
        result = sub_1B6869F44(a1 + 1920, a2, a3, 0, a5, 0, a6, (uint64_t)v75, v88);
      }
      if (!*(_BYTE *)(a1 + 8) || *(char *)(*(_QWORD *)(a1 + 952) + 226) <= 0)
      {
        v76 = *(_BYTE *)v20 == 3 ? result : 1;
        if ((v76 & 1) == 0)
        {
          if ((*v25 & 0x70) != 0)
            return 0;
          v77 = *(_BYTE *)(v24 + 11);
          if ((v77 & 1) == 0)
            return 0;
          *(_BYTE *)v20 = 2;
          *(_BYTE *)(v24 + 11) = v77 & 0xFE;
          *v25 |= 0x80u;
          *(_DWORD *)(v74 + 16) = 0;
          v78 = *a5;
          if ((int)v99 >= 8)
          {
            v79 = 0;
            v80 = v25;
            do
            {
              v81 = v80;
              v82 = v99 >> 3;
              do
              {
                *v81++ = *v25;
                --v82;
              }
              while (v82);
              ++v79;
              v80 += v78 >> 3;
            }
            while (v79 != v99 >> 3);
            v78 = *a5;
          }
          if ((int)v99 < 4)
            return 0;
          v83 = 0;
          v84 = (_QWORD *)v24;
          do
          {
            v85 = v84;
            v86 = v99 >> 2;
            do
            {
              v87 = *(_QWORD *)v24;
              *(_QWORD *)((char *)v85 + 6) = *(_QWORD *)(v24 + 6);
              *v85 = v87;
              v85 += 2;
              --v86;
            }
            while (v86);
            result = 0;
            ++v83;
            v84 += 2 * (v78 >> 2);
          }
          while (v83 != v99 >> 2);
        }
      }
      return result;
    }
  }
  v20 = 10;
  if (MEMORY[0xA] != 2)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_36;
  }
  result = 0;
  if (a6 && a7)
  {
    v22 = (_QWORD *)a7;
    v97 = a6;
    v23 = 0;
LABEL_16:
    v27 = 0;
    v28 = a5[1];
    v29 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
    v30 = *v29;
    v31 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * v15 + 992);
    v96 = v14;
    if ((v16 & 0x80000000) == 0 && (v17 & 0x80000000) == 0)
    {
      v27 = 0;
      v32 = *a5;
      if (v16 < v32 && v17 < v32)
        v27 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v29 + 10) + 24))(*((_QWORD *)v29 + 10), *((_QWORD *)v29 + 11) + v16 + *v29 * (unint64_t)v17);
    }
    v33 = v31(v99, v99, v23, v28, v27, v30);
    v34 = v22;
    *v22 = v33;
    if (!*(_BYTE *)(a1 + 8))
    {
      v35 = 0;
      v36 = (1 << (v15 - 1));
      v37 = a2 - *((_DWORD *)a5 + 1);
      v38 = a3 - *((_DWORD *)a5 + 2);
      if ((v37 & 0x80000000) == 0 && (v38 & 0x80000000) == 0)
      {
        v35 = 0;
        v39 = *a5;
        if (v37 < v39 && v38 < v39)
        {
          v35 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 5) + 24))(*((_QWORD *)a5 + 5), v37 + a5[1] * (unint64_t)(v38 >> 1) + *((_QWORD *)a5 + 6));
          LODWORD(v37) = a2 - *((_DWORD *)a5 + 1);
          v38 = a3 - *((_DWORD *)a5 + 2);
        }
      }
      v40 = 0;
      v41 = a5[1];
      v42 = *((_QWORD *)a5 + 17);
      v43 = 2 * *(unsigned __int8 *)(v42 + 1);
      v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * v15 + 1144);
      if ((v37 & 0x80000000) == 0 && (v38 & 0x80000000) == 0)
      {
        v40 = 0;
        v45 = *a5;
        if (v37 < v45 && v38 < v45)
          v40 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v42 + 96) + 24))(*(_QWORD *)(v42 + 96), *(_QWORD *)(v42 + 104)+ v37+ *(unsigned __int8 *)(v42 + 1) * (unint64_t)(v38 & 0xFFFFFFFE));
      }
      v46 = v44(v36, v36, v35, v41, v40, v43);
      v34 = v22;
      *v22 += ((*(unsigned __int16 *)(a1 + 1002) * (unint64_t)v46) >> 8);
    }
    *((_DWORD *)v34 + 4) = 0;
    v47 = *(_OWORD *)v34;
    *(_QWORD *)(v97 + 16) = v34[2];
    *(_OWORD *)v97 = v47;
    if (v96)
    {
      result = 0;
      v48 = *(_OWORD *)v34;
      *((_QWORD *)v96 + 2) = v34[2];
      *v96 = v48;
      return result;
    }
    return 0;
  }
  return result;
}

unint64_t *sub_1B6847020(unint64_t *result, int a2, int a3, int a4, uint64_t a5, int *a6, _BYTE *a7)
{
  int v8;
  int v9;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  unsigned __int16 *v24;
  uint64_t v25;
  _WORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  _BOOL8 v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  _BOOL8 v41;
  unsigned __int16 *v42;
  unsigned int v43;
  _BOOL8 v44;
  _BOOL4 v46;
  char v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  signed int v53;
  signed int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  unint64_t v59;
  BOOL v60;
  char v61;
  unsigned __int8 v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t i;
  BOOL v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  int v89;
  _BYTE *v90;
  _BYTE *v91;
  int v92;
  char v93;
  int v94;
  int v95;
  int v96;
  char v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  int v117;
  int v118;
  int v119;
  char v120;
  int v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  _BOOL4 v144;
  _BOOL4 v145;
  int v146;
  uint64_t v147;
  int v148;
  _WORD *v149;
  char v150;
  _BYTE v154[4];
  _BYTE v155[4];
  _BYTE v156[4];
  _BYTE v157[16];

  v8 = a4;
  v9 = a3;
  v11 = (uint64_t)result;
  v12 = (unsigned __int8 *)result[235];
  v13 = v12[2009] - a4;
  v14 = 1 << (v12[2009] - a4);
  v15 = v12[2008];
  v16 = v14 + a2;
  if (v14 + a2 > *((_DWORD *)result + 4) || (v14 + a3 <= *((_DWORD *)result + 5) ? (v17 = v13 <= v15) : (v17 = 1), v17))
  {
    if (v13 > v15)
    {
LABEL_54:
      v47 = v13 - 1;
      v48 = 1 << (v13 - 1);
      v49 = *(_QWORD *)(v11 + 1888);
      if (*(_BYTE *)(v49 + 12) && v13 == *(_DWORD *)(v49 + 1620))
      {
        v150 = 1;
        *a7 = 1;
      }
      else
      {
        v150 = 0;
      }
      v50 = 0;
      v51 = v48 + a2;
      v52 = v48 + v9;
      do
      {
        v53 = *(_DWORD *)(v11 + 16);
        if ((int)(((v50 & 1) << v47) + a2) < v53)
        {
          v54 = *(_DWORD *)(v11 + 20);
          if ((int)((v50 >> 1 << v47) + v9) < v54)
          {
            v55 = sub_1B683B42C(a5, v50, v51 < v53, v52 < v54);
            result = (unint64_t *)sub_1B6847020(v11, ((v50 & 1) << v47) + a2, (v50 >> 1 << v47) + v9, (v8 + 1), v55, a6, a7);
            v9 = a3;
          }
        }
        ++v50;
      }
      while (v50 != 4);
      if ((v150 & 1) != 0)
      {
        if (*a7)
        {
          v56 = *(unsigned __int8 **)(v11 + 848);
          v57 = *(unsigned __int8 *)(v11 + 800);
          v58 = sub_1B6843C28(v11, a2, v9, v8, v56, *a6, v57);
          *a6 = v58;
          result = (unint64_t *)sub_1B6843D7C(v11, a2, v9, v8, v56, v58, v57);
          *a7 = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (a2 - (1 << v15) < 0)
    {
      v32 = 0;
    }
    else
    {
      if (*((_BYTE *)result + 800))
        v26 = *(_WORD **)(result[106] + 104);
      else
        v26 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(result[234] + 1360) + 512)
                      + 2
                      * (((a2 - (1 << v15)) >> 3)
                       + *(_QWORD *)(*(_QWORD *)(result[234] + 1360) + 488) * ((uint64_t)a3 >> 3)));
      v32 = (*v26 & 3) > a4;
    }
    v34 = v12[241];
    v35 = a3 - (1 << v15);
    if (v35 < 0)
    {
      v41 = 0;
    }
    else
    {
      if (*((_BYTE *)result + 800))
      {
        v36 = v15 == 31;
        v37 = 112;
        if (v36)
          v37 = 104;
        v38 = *(_QWORD *)(result[106] + v37);
        v39 = -536870912;
        if (!v36)
          v39 = 0;
        v40 = (_WORD *)(v38 + v39);
      }
      else
      {
        v40 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(result[234] + 1360) + 512)
                      + 2
                      * (*(_QWORD *)(*(_QWORD *)(result[234] + 1360) + 488) * (v35 >> 3) + (a2 >> 3)));
      }
      v41 = (*v40 & 3) > a4;
    }
    v44 = v41 + v32;
    v46 = (*(_WORD *)(result[107]
                    + 2
                    * (result[104] * ((uint64_t)(a3 - *((_DWORD *)result + 203)) >> 3)
                     + ((a2 - *((_DWORD *)result + 202)) >> 3))) & 3) > a4
       && v34 > a4;
    result = sub_1B67CC270((unint64_t *)result[118], v46, (_BYTE *)(result[118] + v44 + 42));
    v9 = a3;
    if (v46)
      goto LABEL_54;
  }
  v18 = *(_QWORD *)(v11 + 1888);
  if (*(_BYTE *)(v18 + 12) && v13 >= *(_DWORD *)(v18 + 1620))
    *a7 = 1;
  v19 = v9 | a2;
  v148 = v16;
  if (((v9 | a2) & 0x80000000) == 0
    && ((v20 = a2 - *(_DWORD *)(v11 + 808),
         v21 = v9 - *(_DWORD *)(v11 + 812),
         v22 = *(unsigned __int8 *)(v11 + 804),
         v20 < v22)
      ? (v23 = v21 < v22)
      : (v23 = 0),
        v23))
  {
    v24 = (unsigned __int16 *)(*(_QWORD *)(v11 + 856) + 2 * (*(_QWORD *)(v11 + 832) * ((uint64_t)v21 >> 3) + (v20 >> 3)));
    v25 = *(_QWORD *)(v11 + 864) + 16 * (*(_QWORD *)(v11 + 840) * ((uint64_t)v21 >> 2) + (v20 >> 2));
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  v27 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 1880) + 2009);
  v28 = *(_QWORD *)(v11 + 944);
  if (*(_BYTE *)(v18 + 19))
  {
    sub_1B67CC270(*(unint64_t **)(v11 + 944), HIBYTE(*v24) & 1, (_BYTE *)(v28 + 45));
    v9 = a3;
  }
  v149 = v24;
  v29 = v27 - v8;
  v30 = *(_QWORD *)(v11 + 1872);
  if (*(unsigned __int8 *)(v30 + 10) <= 1u)
  {
    if (a2 < 1)
    {
      v33 = 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 800))
        v31 = *(unsigned __int16 **)(*(_QWORD *)(v11 + 848) + 104);
      else
        v31 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v30 + 1360) + 512)
                                 + 2
                                 * (((a2 - 1) >> 3)
                                  + *(_QWORD *)(*(_QWORD *)(v30 + 1360) + 488) * ((uint64_t)v9 >> 3)));
      v33 = (*v31 >> 7) & 1;
    }
    if (v9 < 1)
    {
      v43 = 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 800))
        v42 = *(unsigned __int16 **)(*(_QWORD *)(v11 + 848) + 112);
      else
        v42 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v30 + 1360) + 512)
                                 + 2
                                 * (*(_QWORD *)(*(_QWORD *)(v30 + 1360) + 488) * ((v9 - 1) >> 3)
                                  + (a2 >> 3)));
      v43 = (*v42 >> 7) & 1;
    }
    v59 = v43 + (unint64_t)v33;
    if (*(_BYTE *)(v11 + 800))
    {
      if (*(_BYTE *)(v11 + 8))
        v60 = *(char *)(*(_QWORD *)(v11 + 952) + 226) < 1;
      else
        v60 = 1;
      if ((*v149 & 0x80) == 0)
      {
        if ((*v149 & 0x70) == 0 && *(_BYTE *)(v11 + 801))
        {
          v62 = *(_BYTE *)(v25 + 11) & v60;
          result = sub_1B67CC270((unint64_t *)v28, v62, (_BYTE *)(v28 + v59 + 46));
          v9 = a3;
          if ((v62 & 1) == 0)
            goto LABEL_93;
LABEL_83:
          v63 = v29;
          v64 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 1872) + 620);
          v65 = v64 - 2;
          if (v64 >= 2)
          {
            v66 = (*(unsigned __int8 *)(v25 + 11) >> 1) & 7;
            result = sub_1B67CC270((unint64_t *)v28, v66 != 0, (_BYTE *)(v28 + 59));
            if (v66)
            {
              v67 = v66 - 1;
              if ((int)v65 >= v66 - 1)
                v68 = v66 - 1;
              else
                v68 = v65;
              if (v67 >= v65)
                v69 = v68;
              else
                v69 = v68 + 1;
              result = sub_1B67CC498((unint64_t *)v28, ~(v67 < v65), v69);
            }
          }
          goto LABEL_191;
        }
        goto LABEL_92;
      }
LABEL_82:
      result = sub_1B67CC270((unint64_t *)v28, 1, (_BYTE *)(v28 + v59 + 46));
      goto LABEL_83;
    }
    if ((*v149 & 0x80) != 0)
      goto LABEL_82;
    if ((*v149 & 0x70) != 0 || !*(_BYTE *)(v11 + 801))
    {
LABEL_92:
      sub_1B67CC270((unint64_t *)v28, 0, (_BYTE *)(v28 + v59 + 46));
      v9 = a3;
      goto LABEL_93;
    }
    v61 = *(_BYTE *)(v25 + 11);
    result = sub_1B67CC270((unint64_t *)v28, v61 & 1, (_BYTE *)(v28 + v59 + 46));
    v9 = a3;
    if ((v61 & 1) != 0)
      goto LABEL_83;
  }
LABEL_93:
  v147 = v25;
  if (*(unsigned __int8 *)(*(_QWORD *)(v11 + 1872) + 10) <= 1u)
  {
    sub_1B67CC270((unint64_t *)v28, *(unsigned __int8 *)(v25 + 10) == 1, (_BYTE *)(v28 + 51));
    v9 = a3;
    if (*(_BYTE *)(v25 + 10) != 1)
    {
      v70 = ((unsigned __int16)*v149 >> 4) & 7;
      if (!v70)
      {
        v77 = 0;
LABEL_114:
        sub_1B67CC270((unint64_t *)v28, 1, (_BYTE *)(v28 + v77 + 52));
        v9 = a3;
        goto LABEL_115;
      }
      v146 = v14;
      v71 = v29;
      if (v29 != *(unsigned __int8 *)(*(_QWORD *)(v11 + 1880) + 2008) || v29 <= 3)
        v73 = 2;
      else
        v73 = 3;
      v74 = v73 - 1;
      v75 = (v70 - 1);
      if (v74 >= v75)
        v76 = v75;
      else
        v76 = v73 - 1;
      v77 = v76 + 1;
      if (v74 >= v75)
        v78 = v75;
      else
        v78 = v73 - 1;
      for (i = -1; i != v78; ++i)
        sub_1B67CC270((unint64_t *)v28, 0, (_BYTE *)(v28 + i + 53));
      v80 = v77 >= v73;
      v9 = a3;
      v14 = v146;
      v29 = v71;
      v25 = v147;
      if (!v80)
        goto LABEL_114;
    }
  }
LABEL_115:
  v81 = *(unsigned __int8 **)(v11 + 1880);
  if (*(_BYTE *)(v25 + 10) != 1)
  {
    v63 = v29;
    v92 = v8;
    v93 = v81[2009] - v8;
    v94 = 1 << (v93 - 1);
    v95 = v94 + a2;
    v96 = v94 + v9;
    v97 = v93 - 2;
    v98 = 1 << v93;
    v99 = 1 << (v93 - 2);
    switch((*(unsigned __int16 *)(*(_QWORD *)(v11 + 856)
                                  + 2
                                  * (*(_QWORD *)(v11 + 832) * ((uint64_t)(v9 - *(_DWORD *)(v11 + 812)) >> 3)
                                   + ((a2 - *(_DWORD *)(v11 + 808)) >> 3))) >> 4) & 7)
    {
      case 0:
        v100 = v11;
        v101 = a2;
        v102 = v9;
        v103 = 1 << v93;
        v104 = 1 << v93;
        v8 = v92;
        v105 = v92;
        break;
      case 1:
        v130 = v92;
        sub_1B6847F34(v11, a2, v9, 1 << v93, 1 << (v93 - 1), v92);
        v100 = v11;
        v101 = a2;
        v102 = v94 + v9;
        v8 = v130;
        v103 = v98;
        goto LABEL_162;
      case 2:
        v8 = v92;
        sub_1B6847F34(v11, a2, v9, 1 << (v93 - 1), 1 << v93, v92);
        v100 = v11;
        v101 = v94 + a2;
        v102 = a3;
        v103 = v94;
        goto LABEL_167;
      case 4:
        v131 = v96 - v99;
        v8 = v92;
        sub_1B6847F34(v11, a2, v9, 1 << v93, 1 << (v93 - 2), v92);
        v104 = 3 << v97;
        v100 = v11;
        v101 = a2;
        v102 = v131;
        v103 = v98;
        goto LABEL_168;
      case 5:
        v132 = v96 + v99;
        v8 = v92;
        sub_1B6847F34(v11, a2, v9, v98, 3 << v97, v92);
        v100 = v11;
        v101 = a2;
        v102 = v132;
        v103 = v98;
        v104 = v99;
        goto LABEL_168;
      case 6:
        v8 = v92;
        sub_1B6847F34(v11, a2, v9, 1 << (v93 - 2), 1 << v93, v92);
        v103 = 3 << v97;
        v100 = v11;
        v101 = v95 - v99;
        v102 = a3;
        goto LABEL_167;
      case 7:
        v8 = v92;
        sub_1B6847F34(v11, a2, v9, 3 << v97, v98, v92);
        v100 = v11;
        v101 = v95 + v99;
        v102 = a3;
        v103 = v99;
LABEL_167:
        v104 = v98;
LABEL_168:
        v105 = v8;
        break;
      default:
        v130 = v92;
        sub_1B6847F34(v11, a2, v9, 1 << (v93 - 1), 1 << (v93 - 1), v92);
        sub_1B6847F34(v11, v94 + a2, a3, v94, v94, v130);
        sub_1B6847F34(v11, a2, v94 + v9, v94, v94, v130);
        v100 = v11;
        v101 = v94 + a2;
        v102 = v94 + v9;
        v8 = v130;
        v103 = v94;
LABEL_162:
        v104 = v94;
        v105 = v130;
        break;
    }
    result = sub_1B6847F34(v100, v101, v102, v103, v104, v105);
    goto LABEL_178;
  }
  if (v29 == v81[2008])
  {
    sub_1B67CC270((unint64_t *)v28, (*v149 & 0x70) == 0, (_BYTE *)(v28 + 52));
    v9 = a3;
    v81 = *(unsigned __int8 **)(v11 + 1880);
  }
  v82 = *(_DWORD *)(v11 + 808);
  v83 = a2 - v82;
  v84 = *(_DWORD *)(v11 + 812);
  v85 = v9 - v84;
  v86 = 0;
  if ((v19 & 0x80000000) == 0)
  {
    v87 = *(unsigned __int8 *)(v11 + 804);
    if (v83 < v87 && v85 < v87)
      v86 = (unsigned __int8 *)(*(_QWORD *)(v11 + 864) + 16
                                                       * (*(_QWORD *)(v11 + 840) * ((uint64_t)v85 >> 2) + (v83 >> 2)));
  }
  v88 = v81[2009];
  v157[0] = 1;
  v89 = *(unsigned __int8 *)(v11 + 800);
  if (((v81[2013] - 1) & v9) == 0)
    goto LABEL_133;
  if (*(_BYTE *)(v11 + 800))
  {
    v90 = *(_BYTE **)(*(_QWORD *)(v11 + 848) + 128);
    if (!v90)
      goto LABEL_133;
  }
  else
  {
    if (((v9 - 1) | a2) < 0)
      goto LABEL_133;
    v106 = *(_QWORD *)(*(_QWORD *)(v11 + 1872) + 1360);
    if (*(_DWORD *)(v106 + 276) <= a2)
      goto LABEL_133;
    if (*(_DWORD *)(v106 + 280) < v9)
      goto LABEL_133;
    v90 = (_BYTE *)(*(_QWORD *)(v106 + 576) + 16 * (*(_QWORD *)(v106 + 552) * ((uint64_t)(v9 - 1) >> 2) + (a2 >> 2)));
    if (!v90)
      goto LABEL_133;
  }
  if (v90[10] == 1)
  {
    v91 = 0;
    goto LABEL_134;
  }
LABEL_133:
  v90 = v157;
  v91 = v157;
LABEL_134:
  v107 = a2 - 1;
  if (*(_BYTE *)(v11 + 800))
  {
    v108 = *(_BYTE **)(*(_QWORD *)(v11 + 848) + 120);
    if (!v108)
      goto LABEL_142;
  }
  else
  {
    if ((v107 | v9) < 0)
      goto LABEL_142;
    v110 = *(_QWORD *)(*(_QWORD *)(v11 + 1872) + 1360);
    if (*(_DWORD *)(v110 + 276) < a2)
      goto LABEL_142;
    if (*(_DWORD *)(v110 + 280) <= v9)
      goto LABEL_142;
    v108 = (_BYTE *)(*(_QWORD *)(v110 + 576) + 16 * (*(_QWORD *)(v110 + 552) * ((uint64_t)v9 >> 2) + (v107 >> 2)));
    if (!v108)
      goto LABEL_142;
  }
  if (v108[10] == 1)
  {
    v109 = 0;
    goto LABEL_143;
  }
LABEL_142:
  v108 = v157;
  v109 = v157;
LABEL_143:
  if ((*(_WORD *)(*(_QWORD *)(v11 + 856) + 2 * (*(_QWORD *)(v11 + 832) * ((uint64_t)v85 >> 3) + (v83 >> 3))) & 0x70) != 0x30)
  {
    v63 = v29;
    v156[0] = *v86;
    v155[0] = *v90;
    v154[0] = *v108;
    v126 = *(_QWORD *)(v11 + 944);
    v127 = 1;
    goto LABEL_176;
  }
  v111 = ~v8 + v88;
  v112 = *(_QWORD *)(v11 + 864);
  v113 = *(_QWORD *)(v11 + 840);
  v114 = v113 * ((uint64_t)v85 >> 2);
  v115 = v83 >> 2;
  v116 = *(_BYTE *)(v112 + 16 * (v114 + (v83 >> 2)));
  v117 = 1 << v111;
  v156[0] = v116;
  v118 = (1 << v111) + a2;
  v119 = (v118 - v82) >> 2;
  v120 = *(_BYTE *)(v112 + 16 * (v114 + v119));
  v156[1] = v120;
  v121 = (1 << v111) + v9;
  v122 = v113 * ((uint64_t)(v121 - v84) >> 2);
  v123 = *(_BYTE *)(v112 + 16 * (v122 + v115));
  v156[2] = v123;
  v156[3] = *(_BYTE *)(v112 + 16 * (v122 + v119));
  if (!v91)
  {
    if (v89)
    {
      v124 = *(_QWORD *)(v11 + 848);
      v125 = v117 >> 2;
      if (v111 == 31)
        v128 = -1;
      else
        v128 = v125;
      v91 = (_BYTE *)(*(_QWORD *)(v124 + 128) + 16 * v128);
      if (!v109)
        goto LABEL_154;
      goto LABEL_175;
    }
    if ((v118 | (v9 - 1)) < 0
      || (v133 = *(_QWORD *)(*(_QWORD *)(v11 + 1872) + 1360), *(_DWORD *)(v133 + 276) <= v118)
      || *(_DWORD *)(v133 + 280) < v9)
    {
      v91 = 0;
    }
    else
    {
      v91 = (_BYTE *)(*(_QWORD *)(v133 + 576) + 16 * (*(_QWORD *)(v133 + 552) * ((uint64_t)(v9 - 1) >> 2) + (v118 >> 2)));
    }
  }
  if (!v109)
  {
    if (v89)
    {
      v124 = *(_QWORD *)(v11 + 848);
      v125 = v117 >> 2;
LABEL_154:
      if (v111 == 31)
        v125 = -1;
      v129 = 120;
      if (v111 == 31)
        v129 = 128;
      v109 = (_BYTE *)(*(_QWORD *)(v124 + v129) + 16 * v125);
      goto LABEL_175;
    }
    v109 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 1872) + 1360) + 576)
                   + 16
                   * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 1872) + 1360) + 552) * ((uint64_t)v121 >> 2)
                    + (v107 >> 2)));
  }
LABEL_175:
  v63 = v29;
  v155[0] = *v90;
  v155[1] = *v91;
  v155[2] = v116;
  v155[3] = v120;
  v154[0] = *v108;
  v154[1] = v116;
  v154[2] = *v109;
  v154[3] = v123;
  v126 = *(_QWORD *)(v11 + 944);
  v127 = 4;
LABEL_176:
  result = sub_1B68483D0(v126, (uint64_t)v156, (uint64_t)v155, (uint64_t)v154, v127);
  if (!*(_BYTE *)(v11 + 8))
    result = sub_1B6845DCC(*(unint64_t **)(v11 + 944), *v86, v86[1]);
LABEL_178:
  if (!*(_BYTE *)(*(_QWORD *)(v11 + 1880) + 250) && !*(_BYTE *)(v11 + 802))
  {
    sub_1B685F88C(v11 + 1920, v11, a2, a3, v8, *(unsigned __int8 *)(v147 + 10), ((unsigned __int16)*v149 >> 4) & 7);
    v134 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 4304) + 2009) - *(_DWORD *)(v11 + 4352);
    v135 = *(_BYTE *)(v11 + 4336) ? 1 : 3;
    *(_DWORD *)(v11 + 4340) = v135;
    v136 = *(_BYTE *)(*(_QWORD *)(v11 + 4320) + 801)
         ? 0
         : sub_1B685FC14(v11 + 1920, *(unsigned int *)(v11 + 4344), *(unsigned int *)(v11 + 4348), v134, 0, 0);
    if (*(_BYTE *)(v147 + 10) == 1
      || (*(_BYTE *)(v147 + 11) & 1) != 0 && !*(_DWORD *)(v11 + 3976)
      || (result = sub_1B67CC270(*(unint64_t **)(*(_QWORD *)(v11 + 4320) + 944), v136, (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 4320) + 944) + 70)), v136))
    {
      *(_DWORD *)(v11 + 3988) = *a6;
      *(_BYTE *)(v11 + 3984) = *a7;
      result = sub_1B685FFAC(v11 + 1920, *(unsigned int *)(v11 + 4344), *(unsigned int *)(v11 + 4348), v134, 0, 0);
      *a6 = *(_DWORD *)(v11 + 3988);
      *a7 = *(_BYTE *)(v11 + 3984);
    }
  }
LABEL_191:
  v137 = *(_QWORD *)(v11 + 1888);
  if (*(_BYTE *)(v137 + 12) && v63 >= *(_DWORD *)(v137 + 1620) && *a7)
  {
    *a7 = 0;
    v138 = *(unsigned __int8 **)(v11 + 848);
    v139 = v14;
    v140 = *(unsigned __int8 *)(v11 + 800);
    v141 = sub_1B6843C28(v11, a2, a3, v8, v138, *a6, v140);
    v142 = v140;
    v14 = v139;
    result = (unint64_t *)sub_1B6843D7C(v11, a2, a3, v8, v138, v141, v142);
    *a6 = v141;
  }
  v143 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 1880) + 2013) - 1;
  v144 = (v143 & v148) != 0 && v148 < *(_DWORD *)(v11 + 16);
  v145 = (v143 & (v14 + a3)) != 0 && v14 + a3 < *(_DWORD *)(v11 + 20);
  if (!v144 && !v145 && *(_DWORD *)(v11 + 4416) != *(_DWORD *)(*(_QWORD *)(v11 + 1872) + 79308))
    return sub_1B67CC3E0(*(unint64_t **)(v11 + 944), 0);
  return result;
}

unint64_t *sub_1B6847F34(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  int v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t *result;
  unsigned int v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  char v28;
  int v29;
  __int32 *v30;
  int v31;
  int v32;
  __int32 *v33;
  __int16 v34;
  __int16 v35;
  __int32 v36[13];

  if (((a3 | a2) & 0x80000000) == 0
    && ((v12 = a2 - *(_DWORD *)(a1 + 808),
         v13 = a3 - *(_DWORD *)(a1 + 812),
         v14 = *(unsigned __int8 *)(a1 + 804),
         v12 < v14)
      ? (v15 = v13 < v14)
      : (v15 = 0),
        v15))
  {
    v16 = *(_QWORD *)(a1 + 864) + 16 * (*(_QWORD *)(a1 + 840) * ((uint64_t)v13 >> 2) + (v12 >> 2));
  }
  else
  {
    v16 = 0;
  }
  result = sub_1B67CC270(*(unint64_t **)(a1 + 944), *(_BYTE *)(v16 + 11) & 1, (_BYTE *)(*(_QWORD *)(a1 + 944) + 58));
  v18 = *(unsigned __int8 *)(v16 + 11);
  if ((v18 & 1) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 1872) + 10))
    {
      v19 = 1;
    }
    else
    {
      if (a5 + a4 != 12)
      {
        sub_1B67CC270(*(unint64_t **)(a1 + 944), (v18 >> 6) & 1, (_BYTE *)(*(_QWORD *)(a1 + 944) + a6 + 60));
        LOBYTE(v18) = *(_BYTE *)(v16 + 11);
      }
      if ((v18 & 0x40) != 0)
      {
        v19 = 0;
      }
      else
      {
        v27 = *(unsigned __int8 *)(v16 + 8);
        sub_1B67CC270(*(unint64_t **)(a1 + 944), v27 == 255, (_BYTE *)(*(_QWORD *)(a1 + 944) + 64));
        v19 = 1;
        v28 = 1;
        if (v27 == 255)
        {
LABEL_27:
          v32 = *(_DWORD *)(v16 + 4);
          sub_1B683B4CC(a1, a2, a3, 1u, *(char *)(v16 + 9), a4, a5, v36);
          v33 = &v36[((unint64_t)*(unsigned __int8 *)(v16 + 11) >> 5) & 1];
          v34 = *(_WORD *)v33;
          v35 = *((_WORD *)v33 + 1);
          sub_1B68481F4((unint64_t *)a1, *(char *)(v16 + 9), *(char *)(*(_QWORD *)(a1 + 1872) + 501));
          if ((v28 & 1) != 0 || !*(_BYTE *)(*(_QWORD *)(a1 + 1872) + 536))
            sub_1B684829C(*(_QWORD *)(a1 + 944), (unsigned __int16)(v32 - v34) | ((unsigned __int16)(HIWORD(v32) - v35) << 16));
          return sub_1B67CC270(*(unint64_t **)(a1 + 944), (*(unsigned __int8 *)(v16 + 11) >> 5) & 1, (_BYTE *)(*(_QWORD *)(a1 + 944) + 69));
        }
      }
    }
    v29 = *(_DWORD *)v16;
    sub_1B683B4CC(a1, a2, a3, 0, *(char *)(v16 + 8), a4, a5, v36);
    v30 = &v36[((unint64_t)*(unsigned __int8 *)(v16 + 11) >> 4) & 1];
    v31 = (unsigned __int16)(v29 - *(_WORD *)v30) | ((unsigned __int16)(HIWORD(v29) - *((_WORD *)v30 + 1)) << 16);
    sub_1B68481F4((unint64_t *)a1, *(char *)(v16 + 8), *(char *)(*(_QWORD *)(a1 + 1872) + 500));
    sub_1B684829C(*(_QWORD *)(a1 + 944), v31);
    result = sub_1B67CC270(*(unint64_t **)(a1 + 944), (*(unsigned __int8 *)(v16 + 11) >> 4) & 1, (_BYTE *)(*(_QWORD *)(a1 + 944) + 69));
    v28 = 0;
    if ((v19 & 1) != 0)
      return result;
    goto LABEL_27;
  }
  v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1872) + 620);
  v21 = v20 - 2;
  if (v20 >= 2)
  {
    v22 = *(_QWORD *)(a1 + 944);
    v23 = (v18 >> 1) & 7;
    result = sub_1B67CC270((unint64_t *)v22, v23 != 0, (_BYTE *)(v22 + 59));
    if (v23)
    {
      v24 = v23 - 1;
      if ((int)v21 >= v23 - 1)
        v25 = v23 - 1;
      else
        v25 = v21;
      if (v24 >= v21)
        v26 = v25;
      else
        v26 = v25 + 1;
      return sub_1B67CC498((unint64_t *)v22, ~(v24 < v21), v26);
    }
  }
  return result;
}

unint64_t *sub_1B68481F4(unint64_t *result, signed int a2, int a3)
{
  unsigned int v4;
  unint64_t *v5;
  unsigned int v6;

  if (a3 >= 2)
  {
    v4 = a2;
    v5 = result;
    result = sub_1B67CC270((unint64_t *)result[118], a2 > 0, (_BYTE *)(result[118] + 65));
    if ((int)v4 >= 1)
    {
      v6 = a3 - 2;
      if (a3 != 2)
      {
        result = sub_1B67CC270((unint64_t *)v5[118], v4 > 1, (_BYTE *)(v5[118] + 66));
        if (v4 >= 2 && a3 >= 4)
        {
          do
          {
            result = sub_1B67CC34C((unint64_t *)v5[118], v4 > 2);
            if (v4 < 3)
              break;
            --v4;
          }
          while (v6-- > 2);
        }
      }
    }
  }
  return result;
}

unint64_t *sub_1B684829C(uint64_t a1, int a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _BYTE *v8;
  unint64_t *result;

  if ((a2 & 0x8000u) == 0)
    v4 = (__int16)a2;
  else
    v4 = -(__int16)a2;
  if (a2 >> 16 >= 0)
    v5 = a2 >> 16;
  else
    v5 = -(a2 >> 16);
  v6 = v4 << 16;
  v7 = v5 << 16;
  v8 = (_BYTE *)(a1 + 67);
  sub_1B67CC270((unint64_t *)a1, v4 << 16 > 0, (_BYTE *)(a1 + 67));
  result = sub_1B67CC270((unint64_t *)a1, v5 << 16 > 0, v8);
  if (v4 << 16 >= 1)
    result = sub_1B67CC270((unint64_t *)a1, v6 > 0x10000, (_BYTE *)(a1 + 68));
  if (v7 >= 1)
    result = sub_1B67CC270((unint64_t *)a1, v7 > 0x10000, (_BYTE *)(a1 + 68));
  if (v6 >= 1)
  {
    if (v6 > 0x10000)
      sub_1B67CC5B0((unint64_t *)a1, (__int16)v4 - 2, 1);
    result = sub_1B67CC34C((unint64_t *)a1, (unsigned __int16)a2 >> 15);
  }
  if (v7 >= 1)
  {
    if (v7 > 0x10000)
      sub_1B67CC5B0((unint64_t *)a1, (__int16)v5 - 2, 1);
    return sub_1B67CC34C((unint64_t *)a1, a2 >> 31);
  }
  return result;
}

unint64_t *sub_1B68483D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t i;
  uint64_t v19;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v9 = a5;
  do
  {
    v10 = *(unsigned __int8 *)(a4 + v6);
    v11 = *(unsigned __int8 *)(a3 + v6);
    if (v10 == v11)
    {
      if (v10 < 2)
      {
        v10 = 0;
        v22 = 0x100000000;
        v11 = 1;
        v12 = 26;
      }
      else
      {
        v11 = (((_BYTE)v10 + 29) & 0x1F) + 2;
        LODWORD(v22) = *(unsigned __int8 *)(a4 + v6);
        HIDWORD(v22) = v11;
        v12 = (((_BYTE)v10 - 1) & 0x1F) + 2;
      }
    }
    else
    {
      LODWORD(v22) = *(unsigned __int8 *)(a4 + v6);
      HIDWORD(v22) = v11;
      if (v11 + v10 > 1)
        v13 = 1;
      else
        v13 = 26;
      if (v10)
        v14 = v11 == 0;
      else
        v14 = 1;
      if (v14)
        v12 = v13;
      else
        v12 = 0;
    }
    v15 = 0;
    v23 = v12;
    v16 = *(unsigned __int8 *)(a2 + v6);
    do
    {
      if (*((_DWORD *)&v22 + v15) == v16)
      {
        if ((_DWORD)v15)
          v8 = v15 + 4 * v8 + 1;
        else
          v8 *= 2;
        if ((_DWORD)v15)
          v7 += 2;
        else
          ++v7;
        *((_BYTE *)&v21 + v6) = 1;
        goto LABEL_37;
      }
      ++v15;
    }
    while (v15 != 3);
    if (!*((_BYTE *)&v21 + v6))
    {
      if ((int)v10 <= v11)
      {
        v17 = v11;
        v11 = v10;
      }
      else
      {
        v22 = __PAIR64__(v10, v11);
        v17 = v10;
      }
      if (v11 <= v12)
      {
        v11 = v12;
      }
      else
      {
        LODWORD(v22) = v12;
        v23 = v11;
      }
      if (v17 > v11)
      {
        HIDWORD(v22) = v11;
        v23 = v17;
      }
      for (i = 8; i != -4; i -= 4)
        v16 -= v16 > *(_DWORD *)((char *)&v22 + i);
      v8 = v16 + 32 * v8;
      v7 += 5;
    }
LABEL_37:
    ++v6;
  }
  while (v6 != a5);
  v19 = 0;
  do
    sub_1B67CC270((unint64_t *)a1, *((unsigned __int8 *)&v21 + v19++), (_BYTE *)(a1 + 56));
  while (v9 != v19);
  return sub_1B67CC498((unint64_t *)a1, v8, v7);
}

uint64_t sub_1B68485C0(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, unsigned int a7)
{
  void ***v8;
  unsigned __int8 **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  void **v28;
  _WORD *v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned __int16 *v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned __int8 **v44;
  void ***v45;
  void ***v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unsigned __int8 **v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  BOOL v80;
  int v81;
  int v82;
  int v83;
  int v84;
  _WORD *v85;
  void **v86;
  unsigned int v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  _WORD *v91;
  _WORD *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  unsigned __int16 *v101;
  unsigned int v102;
  unsigned int v103;
  _BYTE *v104;
  int v105;
  unsigned int v106;
  void ***v107;
  int v108;
  char v109;
  __int128 v110;
  int v111;
  __int16 v112;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a2;
  v13 = result;
  v14 = *(unsigned __int8 *)(*(_QWORD *)(result + 1880) + 2009);
  v15 = a4;
  v16 = (int *)(result + 4 * a4 + 8088);
  v17 = *v16;
  if ((*v16 & 0x101) != 0)
  {
    v108 = *(unsigned __int8 *)(*(_QWORD *)(result + 1880) + 2009);
    LOBYTE(v18) = 1;
    result = sub_1B684C468(result, a2, a3, a4, a5, a6, 0, a7, 1u);
    v24 = *(_QWORD *)(v13 + 952);
    if (*(_BYTE *)(v24 + 257) && *(_BYTE *)(v24 + 260))
      v18 = (*((unsigned __int8 *)(*a6)[12]
             + 16 * ((a2 - *((_DWORD *)*a6 + 1)) >> 2)
             + 16 * ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * ((a3 - *((_DWORD *)*a6 + 2)) >> 2)
             + 11) >> 6) & 1;
    *(_BYTE *)(v13 + v15 + 193) = v18;
    v17 = *v16;
    v9 = a5;
    v8 = a6;
    v11 = a3;
    v12 = a2;
    v10 = a4;
    v14 = v108;
  }
  if ((v17 & 2) == 0)
  {
    if ((v17 & 4) == 0)
      goto LABEL_8;
LABEL_14:
    if (*(_BYTE *)(v13 + 189))
      v26 = *(_BYTE *)(v13 + v15 + 8122) != 0;
    else
      v26 = 1;
    result = sub_1B684C468(v13, v12, v11, v10, v9, v8, 2, a7, v26);
    if ((*v16 & 8) == 0)
      goto LABEL_24;
LABEL_18:
    if (v14 - v10 >= 4 && v14 - v10 == *(unsigned __int8 *)(*(_QWORD *)(v13 + 1880) + 2008))
    {
      if (*(_BYTE *)(v13 + 189))
        v27 = *(_BYTE *)(v13 + v15 + 8122) != 0;
      else
        v27 = 1;
      result = sub_1B684C468(v13, v12, v11, v10, v9, v8, 3, a7, v27);
    }
    goto LABEL_24;
  }
  if (*(_BYTE *)(v13 + 189))
    v25 = *(_BYTE *)(v13 + v15 + 8122) != 0;
  else
    v25 = 1;
  result = sub_1B684C468(v13, v12, v11, v10, v9, v8, 1, a7, v25);
  v17 = *v16;
  if ((*v16 & 4) != 0)
    goto LABEL_14;
LABEL_8:
  if ((v17 & 8) != 0)
    goto LABEL_18;
LABEL_24:
  if (!*(_BYTE *)(v13 + 189))
    return result;
  if (*(_BYTE *)(v13 + v15 + 8122))
    return result;
  v28 = *v8;
  v29 = (*v8)[11];
  v30 = ((v12 - *((_DWORD *)*v8 + 1)) >> 3)
      + ((unint64_t)*(unsigned __int8 *)*v8 >> 3) * ((v11 - *((_DWORD *)*v8 + 2)) >> 3);
  if ((v29[v30] & 0x70) == 0)
    return result;
  v31 = (_BYTE *)(v13 + v15 + 8104);
  if (*v31)
    return result;
  v32 = 0;
  *((_DWORD *)v28 + 46) = 0;
  *(_OWORD *)(v28 + 21) = xmmword_1B6917860;
  *((_WORD *)v28 + 94) = 2;
  v33 = ((unsigned __int16)v29[v30] >> 4) & 7;
  v105 = 1 << (*(_BYTE *)(*(_QWORD *)(v13 + 1880) + 2009) - v10);
  v34 = (v105 >> 1);
  v35 = *v9;
  v36 = v12 - *((_DWORD *)*v9 + 1);
  v37 = **v9;
  if ((v36 & 0x80000000) != 0)
    goto LABEL_34;
  v38 = v11 - *((_DWORD *)v35 + 2);
  v39 = 0;
  if ((v38 & 0x80000000) != 0)
    goto LABEL_35;
  v32 = 0;
  if (v36 >= v37)
  {
LABEL_34:
    v39 = 0;
  }
  else
  {
    v39 = 0;
    if (v38 < v37)
    {
      v32 = (unsigned __int16 *)(*((_QWORD *)v35 + 11)
                               + 2 * ((v36 >> 3) + (v37 >> 3) * (unint64_t)(v38 >> 3)));
      v39 = *((_QWORD *)v35 + 12) + 16 * ((v36 >> 2) + (v37 >> 2) * (unint64_t)(v38 >> 2));
    }
  }
LABEL_35:
  v100 = v39;
  v101 = v32;
  v104 = v31;
  v107 = v8;
  v40 = v33;
  sub_1B683A840(v13, v32, v10, v33, 0, v37 >> 3, *((_DWORD *)v35 + 3));
  *(_OWORD *)(v35 + 168) = xmmword_1B6917860;
  *((_DWORD *)v35 + 46) = 0;
  *((_WORD *)v35 + 94) = 2;
  v41 = v34 + v12;
  v42 = v34 + v11;
  v103 = a7;
  v106 = v11;
  if (v40 == 3)
  {
    v99 = v34 + v11;
    sub_1B684CDF4(v13, v12, v11, v10, v9, v107, v34, v34, 3, a7, (uint64_t)(v35 + 168), 1, 0);
    v12 = v12;
    sub_1B684CDF4(v13, v34 + v12, v11, v10, v9, v107, v34, v34, 3, a7, (uint64_t)(v35 + 168), 1, 0);
    sub_1B684CDF4(v13, v12, (v34 + v11), v10, v9, v107, v34, v34, 3, a7, (uint64_t)(v35 + 168), 1, 0);
    v96 = (uint64_t)(v35 + 168);
    LODWORD(v94) = 3;
    HIDWORD(v94) = a7;
    v45 = v107;
    v44 = v9;
    v47 = v13;
    v48 = v34 + v12;
    v49 = v99;
    v50 = v10;
    v51 = v9;
    v46 = v107;
    v52 = (v105 >> 1);
    goto LABEL_40;
  }
  v43 = v40;
  if (v40 == 2)
  {
    v102 = v12;
    v54 = a7;
    v95 = a7;
    v97 = v41;
    v45 = v107;
    sub_1B684CDF4(v13, v102, v11, v10, v9, v107, v34, v105, 2, v95, (uint64_t)(v35 + 168), 1, 0);
    v96 = (uint64_t)(v35 + 168);
    HIDWORD(v94) = v54;
    v12 = v102;
    LODWORD(v94) = 2;
    v47 = v13;
    v48 = v97;
    v49 = v11;
    v44 = v9;
    v50 = v10;
    v51 = v9;
    v46 = v107;
    v52 = (v105 >> 1);
    v53 = v105;
    goto LABEL_42;
  }
  v44 = v9;
  v45 = v107;
  if (v40 == 1)
  {
    v98 = v42;
    sub_1B684CDF4(v13, v12, v106, v10, v9, v107, v105, v34, 1, v103, (uint64_t)(v35 + 168), 1, 0);
    v96 = (uint64_t)(v35 + 168);
    LODWORD(v94) = 1;
    HIDWORD(v94) = v103;
    v46 = v107;
    v44 = v9;
    v47 = v13;
    v48 = v12;
    v49 = v98;
    v50 = v10;
    v51 = v9;
    v52 = v105;
    v45 = v107;
LABEL_40:
    v53 = v105 >> 1;
LABEL_42:
    sub_1B684CDF4(v47, v48, v49, v50, v51, v46, v52, v53, v94, HIDWORD(v94), v96, 1, 0);
    v43 = v40;
  }
  v55 = v12;
  if (*(_BYTE *)(v13 + 188))
  {
    v56 = v106;
    if (v43)
    {
      *((_DWORD *)v35 + 52) = 0;
      *((_OWORD *)v35 + 12) = xmmword_1B6917860;
      *((_WORD *)v35 + 106) = 2;
      sub_1B6843EDC(v13, v55, v106, v10, *v44, 1, *(_BYTE *)(v13 + 8) == 0, 0, (unsigned int *)v35 + 48);
      if (!*(_BYTE *)(v13 + 8127))
      {
        *((_DWORD *)v35 + 52) = 0;
        *((_OWORD *)v35 + 12) = xmmword_1B6917860;
        *((_WORD *)v35 + 106) = 2;
        sub_1B6848F80(v13, v55, v106, v10, *v44, (uint64_t)(v35 + 192));
      }
      v111 = 0;
      v110 = xmmword_1B6917860;
      v112 = 0;
      *((_DWORD *)v35 + 52) = 0;
      *((_OWORD *)v35 + 12) = xmmword_1B6917860;
      *((_WORD *)v35 + 106) = 0;
      sub_1B6846954(v13, v55, v106, v10, *v44, (uint64_t)(v35 + 192), (uint64_t)&v110, 0, 0);
      v57 = *(_QWORD *)(v13 + 944);
      v58 = *(_OWORD *)(v57 + 16);
      *(_OWORD *)(v57 + 216) = *(_OWORD *)v57;
      v59 = *(_OWORD *)(v57 + 32);
      v60 = *(_OWORD *)(v57 + 64);
      v61 = *(_OWORD *)(v57 + 80);
      *(_OWORD *)(v57 + 264) = *(_OWORD *)(v57 + 48);
      *(_OWORD *)(v57 + 280) = v60;
      *(_OWORD *)(v57 + 248) = v59;
      *(_OWORD *)(v57 + 232) = v58;
      v62 = *(_OWORD *)(v57 + 96);
      v63 = *(_OWORD *)(v57 + 128);
      v64 = *(_OWORD *)(v57 + 144);
      *(_OWORD *)(v57 + 328) = *(_OWORD *)(v57 + 112);
      *(_OWORD *)(v57 + 344) = v63;
      *(_OWORD *)(v57 + 296) = v61;
      *(_OWORD *)(v57 + 312) = v62;
      v65 = *(_OWORD *)(v57 + 176);
      *(_OWORD *)(v57 + 376) = *(_OWORD *)(v57 + 160);
      *(_OWORD *)(v57 + 392) = v65;
      v109 = 0;
      *(_QWORD *)(v57 + 408) = *(_QWORD *)(v57 + 192);
      *(_OWORD *)(v57 + 360) = v64;
      v66 = 8 * (*(_DWORD *)(v57 + 208) - *(_DWORD *)(v57 + 24));
      *(_QWORD *)(v57 + 32) = 0;
      *(_QWORD *)(v57 + 8) = 510;
      *(_QWORD *)(v57 + 16) = v66;
      sub_1B6841DFC(v13, v55, v106, *v44, 1, 0, *(_BYTE *)(v13 + 8127), 1, 0);
      v67 = *v44;
      *((_DWORD *)v67 + 4) = *((_DWORD *)*v44 + 5);
      sub_1B6847020((unint64_t *)v13, v55, v106, v10, v103, (int *)v67 + 4, &v109);
      v68 = *(_QWORD *)(v13 + 944);
      *((_DWORD *)v35 + 52) = *((_DWORD *)v35 + 52)
                            - *(_DWORD *)(v68 + 8)
                            + ((*(_DWORD *)(v68 + 16) + 8 * (*(_DWORD *)(v68 + 24) - *(_DWORD *)(v68 + 208))) << 8)
                            + 510;
      v70 = *(_OWORD *)(v68 + 264);
      v69 = *(_OWORD *)(v68 + 280);
      *(_OWORD *)(v68 + 32) = *(_OWORD *)(v68 + 248);
      *(_OWORD *)(v68 + 48) = v70;
      v72 = *(_OWORD *)(v68 + 328);
      v71 = *(_OWORD *)(v68 + 344);
      v73 = *(_OWORD *)(v68 + 296);
      *(_OWORD *)(v68 + 96) = *(_OWORD *)(v68 + 312);
      *(_OWORD *)(v68 + 112) = v72;
      *(_OWORD *)(v68 + 64) = v69;
      *(_OWORD *)(v68 + 80) = v73;
      v74 = *(_OWORD *)(v68 + 392);
      v75 = *(_OWORD *)(v68 + 360);
      *(_OWORD *)(v68 + 160) = *(_OWORD *)(v68 + 376);
      *(_OWORD *)(v68 + 176) = v74;
      v76 = *(_OWORD *)(v68 + 232);
      *(_QWORD *)(v68 + 192) = *(_QWORD *)(v68 + 408);
      *(_OWORD *)(v68 + 128) = v71;
      *(_OWORD *)(v68 + 144) = v75;
      *(_OWORD *)v68 = *(_OWORD *)(v68 + 216);
      *(_OWORD *)(v68 + 16) = v76;
      *((_QWORD *)v35 + 25) = *((_QWORD *)v35 + 24)
                            + ((*((_DWORD *)v35 + 52)
                              * *(unsigned __int16 *)(v13 + 2 * *((__int16 *)v35 + 106) + 992)) >> (8 * (*((_WORD *)v35 + 106) == 0)));
      v77 = *(unsigned __int8 *)(v13 + 188);
    }
    else
    {
      v77 = 1;
    }
  }
  else
  {
    v77 = 0;
    v78 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 1880) + 241);
    v79 = *(unsigned __int8 *)(v100 + 10) - 1;
    v80 = v78 <= v10;
    v81 = *((_DWORD *)v35 + 46) + byte_1B692360C[3 * *(unsigned __int8 *)(*(_QWORD *)(v13 + 1872) + 10) + v79];
    *((_DWORD *)v35 + 46) = v81;
    v82 = byte_1B6923615[12 * (v78 == v10) + 4 * v79 + (((unint64_t)*v101 >> 4) & 7)];
    if (v80)
      v83 = v81;
    else
      v83 = v81 + 1;
    v84 = v83 + v82;
    *((_DWORD *)v35 + 46) = v84;
    *((_QWORD *)v35 + 22) = *((_QWORD *)v35 + 21)
                          + ((v84 * *(unsigned __int16 *)(v13 + 2 * *((__int16 *)v35 + 94) + 992)) >> (8 * (*((_WORD *)v35 + 94) == 0)));
    v56 = v106;
  }
  result = sub_1B684C0C4(v13, (void ***)v44, v45, v77);
  if ((_DWORD)result && !*(_BYTE *)(v13 + 188))
  {
    v85 = 0;
    v86 = *v45;
    v87 = v55 - *((_DWORD *)*v45 + 1);
    v88 = *(unsigned __int8 *)*v45;
    if ((v87 & 0x80000000) == 0)
    {
      v89 = v56 - *((_DWORD *)v86 + 2);
      if ((v89 & 0x80000000) == 0)
      {
        v85 = 0;
        if (v87 < v88 && v89 < v88)
          v85 = (char *)v86[11] + 2 * (v87 >> 3) + 2 * (v88 >> 3) * (unint64_t)(v89 >> 3);
      }
    }
    if (v105 >= 8)
    {
      v90 = 0;
      v91 = v85;
      do
      {
        v92 = v91;
        v93 = v105 >> 3;
        do
        {
          *v92++ = *v85;
          --v93;
        }
        while (v93);
        ++v90;
        v91 += v88 >> 3;
      }
      while (v90 != v105 >> 3);
    }
  }
  *v104 = 1;
  return result;
}

uint64_t sub_1B6848F80(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  _WORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  __int16 v23;
  __int128 v24;
  int v25;
  __int16 v26;

  v10 = result;
  v11 = a2 - *((_DWORD *)a5 + 1);
  v12 = a3 - *((_DWORD *)a5 + 2);
  v13 = *a5;
  if (v11 >= v13 || v12 >= v13)
    v15 = 0;
  else
    v15 = (_WORD *)(*((_QWORD *)a5 + 11) + 2 * ((v11 >> 3) + (v13 >> 3) * (unint64_t)(v12 >> 3)));
  v16 = *(unsigned __int8 *)(*(_QWORD *)(result + 1880) + 2009) - a4;
  v17 = *(unsigned __int8 *)(*((_QWORD *)a5 + 12)
                           + 16 * ((v11 >> 2) + (v13 >> 2) * (unint64_t)(v12 >> 2))
                           + 10);
  if (v17 == 2)
  {
    *(_QWORD *)(a6 + 8) = *(_QWORD *)a6
                        + ((*(_DWORD *)(a6 + 16)
                          * *(unsigned __int16 *)(result + 2 * *(__int16 *)(a6 + 20) + 992)) >> (8 * (*(_WORD *)(a6 + 20) == 0)));
    if ((*v15 & 0x80) == 0)
    {
      *v15 |= 0x80u;
      if (1 << v16 >= 8)
      {
        v18 = 0;
        v19 = 2 * ((unint64_t)*a5 >> 3);
        v20 = v15;
        do
        {
          v21 = v20;
          v22 = (1 << v16) >> 3;
          do
          {
            *v21++ = *v15;
            --v22;
          }
          while (v22);
          ++v18;
          v20 = (_WORD *)((char *)v20 + v19);
        }
        while (v18 != (1 << v16) >> 3);
      }
    }
  }
  else
  {
    sub_1B685F88C(result + 1920, result, a2, a3, a4, v17, ((unsigned __int16)*v15 >> 4) & 7);
    if (*(_BYTE *)(v10 + 8127) && *(char *)(*(_QWORD *)(v10 + 952) + 252) >= 2)
    {
      v23 = *(_WORD *)(a6 + 20);
      v25 = 0;
      v24 = xmmword_1B6917860;
      v26 = v23;
      result = sub_1B6868B3C(v10 + 1920, a2, a3, a5, v16, 0, (uint64_t *)&v24, 0);
      *(_QWORD *)(a6 + 8) = *(_QWORD *)a6
                          + ((*(_DWORD *)(a6 + 16)
                            * *(unsigned __int16 *)(v10 + 2 * *(__int16 *)(a6 + 20) + 992)) >> (8 * (*(_WORD *)(a6 + 20) == 0)));
    }
    else
    {
      *(_QWORD *)a6 = 0;
      return sub_1B6869230(v10 + 1920, a2, a3, a5, v16, 0, 0, a6, 0);
    }
  }
  return result;
}

BOOL sub_1B68491A8(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned __int8 *a5, int a6)
{
  int v12;
  _BOOL8 result;

  v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2013) >> a4;
  if (((a6 & 0xF0) == 0 || (result = sub_1B684C1AC(a1, a2, a3, a4, a2 - v12, a3, a5)))
    && ((a6 & 0x1E00) == 0 || (result = sub_1B684C1AC(a1, a2, a3, a4, a2, a3 - v12, a5)))
    && ((a6 & 0x1E000) == 0 || (result = sub_1B684C1AC(a1, a2, a3, a4, v12 + a2, a3 - v12, a5)))
    && ((a6 & 0x100) == 0 || (result = sub_1B684C1AC(a1, a2, a3, a4, a2 - v12, a3 - v12, a5))))
  {
    if ((a6 & 0xF) == 0)
      return 1;
    result = sub_1B684C1AC(a1, a2, a3, a4, a2 - v12, v12 + a3, a5);
    if (result)
      return 1;
  }
  return result;
}

void sub_1B68492D8(uint64_t a1, int a2, unsigned __int8 *a3, int a4, unsigned __int8 **a5, void ***a6, unsigned int a7, unsigned int a8)
{
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  _WORD *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  uint64_t *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  int v78;
  BOOL v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  BOOL v89;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _WORD *v96;
  _QWORD *v97;
  unsigned int v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  BOOL v105;
  int v106;
  uint64_t i;
  _BYTE *v108;
  void (*v109)(unsigned __int8 *, _QWORD, uint64_t, _QWORD);
  uint64_t v110;
  unsigned __int8 *v111;
  _QWORD *v112;
  unsigned int (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  _BOOL4 v127;
  int v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  unsigned __int8 *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  unsigned int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  BOOL v175;
  uint64_t v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  uint64_t v182;
  char v183;
  unint64_t v184;
  uint64_t v185;
  int v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  unsigned int v193;
  unint64_t v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v200;
  int v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned __int8 *v210;
  uint64_t v211;
  char v212;
  char v213;
  char v214;
  char v215;
  uint64_t v216;
  _BOOL4 v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  int v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  unsigned int v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  int *v237;
  int v238;
  uint64_t v239;
  _BYTE *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  int v253;
  char v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  unsigned __int8 *v263;
  uint64_t v264;
  int v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  unint64_t v270;
  int v271;
  int v272;
  int v273;
  int v274;
  unsigned int v275;
  __int16 *v276;
  __int16 v277;
  int v278;
  __int16 v279;
  char v280;
  uint64_t v281;
  char *v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  BOOL v286;
  uint64_t v287;
  uint64_t v288;
  __int128 *v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  unint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  unsigned __int8 *v298;
  __n128 v299;
  unsigned __int8 *v300;
  unint64_t v301;
  size_t v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unint64_t v306;
  char *v307;
  uint64_t v308;
  int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  int v313;
  int v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unsigned __int8 *v320;
  uint64_t v321;
  uint64_t v322;
  unsigned __int8 *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned __int8 *v328;
  uint64_t v329;
  char *v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unint64_t v338;
  char *v339;
  size_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  __int128 v344;
  _WORD *v345;
  uint64_t v346;
  unint64_t v347;
  _QWORD *v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  _WORD *v360;
  _WORD *v361;
  uint64_t v362;
  unsigned __int8 **v363;
  uint64_t v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  uint64_t v373;
  unsigned __int8 *v374;
  uint64_t v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  unsigned __int8 *v384;
  int v385;
  int v386;
  uint64_t v387;
  int v388;
  int v389;
  unsigned __int8 *v390;
  unsigned __int8 *v391;
  unint64_t v392;
  unint64_t v393;
  char v394;
  unsigned __int8 *v395;
  unint64_t v396;
  unint64_t v397;
  void **v398;
  unsigned int v399;
  unsigned int v400;
  unint64_t v401;
  unsigned int v402;
  int v403;
  unint64_t v404;
  unsigned __int8 *v405;
  unsigned int v406;
  unsigned int v407;
  unint64_t v408;
  unint64_t v409;
  unsigned int v410;
  unsigned int v411;
  unint64_t v412;
  unsigned int v413;
  uint64_t v414;
  int v415;
  int v416;
  char *v417;
  _BYTE *v418;
  uint64_t v419;
  char v420;
  int v421;
  char *v422;
  _BYTE *v423;
  uint64_t v424;
  char v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  char *v429;
  _BYTE *v430;
  uint64_t v431;
  char v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  _BYTE *v437;
  char v438;
  __int16 *v439;
  __int16 v440;
  unsigned __int8 *v441;
  unsigned __int8 *v442;
  unsigned __int8 *v444;
  unint64_t v445;
  char *v446;
  unsigned int v447;
  int v449;
  int v450;
  unsigned int v451;
  int v452;
  int *v453;
  int *v454;
  uint64_t v455;
  _QWORD *v456;
  int v457;
  int v458;
  int v459;
  unsigned __int8 *v460;
  unsigned int v461;
  unsigned __int8 **v462;
  char v463;
  uint64_t v464;
  _BYTE *v466;
  uint64_t v467;
  _BOOL4 v468;
  unsigned int v469;
  _WORD *v470;
  char v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int v475;
  uint64_t v476;
  unsigned int v477;
  uint64_t v478;
  int v479;
  _BOOL4 v481;
  int v482;
  int v483;
  int v484;
  uint64_t (*v485)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v486;
  unint64_t v487;
  unsigned int v488;
  unsigned int v489;
  int v490;
  int v491;
  unsigned int v492;
  uint64_t v493;
  unsigned __int8 v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  uint64_t (*v500)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v501)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unsigned __int8 *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unsigned __int8 *v512;
  uint64_t v513[2];
  int v514;
  __int16 v515;
  uint64_t v516[2];
  int v517;
  __int16 v518;
  _BYTE v519[2];
  uint64_t v520[2];
  int v521;
  __int16 v522;
  uint64_t v523[2];
  int v524;
  __int16 v525;
  uint64_t v526[2];
  int v527;
  __int16 v528;
  int v529;
  char v530;
  __int128 v531;
  uint64_t v532;
  _DWORD v533[2];
  int v534;
  _BYTE v535[12];
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  __int128 v539;
  unint64_t v540;
  int v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  int v547;
  __int16 v548;
  __int128 v549;
  int v550;
  __int16 v551;
  __int128 v552;
  int v553;
  __int16 v554;
  _BYTE v555[120];
  uint64_t v556;

  v9 = a3;
  v10 = a2;
  v11 = (unsigned __int8 *)a1;
  v12 = 0;
  v556 = *MEMORY[0x1E0C80C00];
  v13 = *a5;
  v14 = a2 - *((_DWORD *)*a5 + 1);
  v15 = **a5;
  if ((v14 & 0x80000000) == 0)
  {
    v16 = (_DWORD)a3 - *((_DWORD *)v13 + 2);
    if ((v16 & 0x80000000) == 0)
    {
      if (v14 >= v15 || v16 >= v15)
        v12 = 0;
      else
        v12 = (_WORD *)(*((_QWORD *)v13 + 11)
                      + 2 * ((v14 >> 3) + (v15 >> 3) * (unint64_t)(v16 >> 3)));
    }
  }
  sub_1B683A840(a1, v12, a4, a8, 0, v15 >> 3, *((_DWORD *)v13 + 3));
  v18 = 0;
  v19 = *a5;
  v20 = v10 - *((_DWORD *)*a5 + 1);
  if ((v20 & 0x80000000) == 0)
  {
    v21 = (_DWORD)v9 - *((_DWORD *)v19 + 2);
    if ((v21 & 0x80000000) == 0)
    {
      v22 = *v19;
      if (v20 >= v22 || v21 >= v22)
        v18 = 0;
      else
        v18 = *((_QWORD *)v19 + 12) + 16 * ((v20 >> 2) + (v22 >> 2) * (unint64_t)(v21 >> 2));
    }
  }
  v466 = v11 + 4400;
  v24 = 1;
  *(_BYTE *)(v18 + 10) = 1;
  *(_BYTE *)(v18 + 11) &= ~0x40u;
  v25 = **a5;
  if (v25 >= 4)
  {
    v26 = 0;
    v27 = v25 >> 2;
    v28 = (_QWORD *)v18;
    do
    {
      v29 = v28;
      v30 = v27;
      do
      {
        v31 = *(_QWORD *)v18;
        *(_QWORD *)((char *)v29 + 6) = *(_QWORD *)(v18 + 6);
        *v29 = v31;
        v29 += 2;
        --v30;
      }
      while (v30);
      ++v26;
      v28 += 2 * v27;
    }
    while (v26 != v27);
    v24 = *(unsigned __int8 *)(v18 + 10);
  }
  sub_1B685F88C((uint64_t)(v11 + 1920), (uint64_t)v11, v10, (int)v9, a4, v24, ((unsigned __int16)*v12 >> 4) & 7);
  if (v11[190])
    v32 = (*(_DWORD *)&v11[4 * a4 + 8088] >> 12) & 1;
  else
    LOBYTE(v32) = 0;
  v33 = 0;
  *v466 = v32;
  v34 = *a5;
  v35 = *a5;
  *(_OWORD *)(v35 + 168) = xmmword_1B6917860;
  v456 = v35 + 168;
  *((_WORD *)v34 + 94) = 2;
  *((_OWORD *)v34 + 12) = xmmword_1B6917860;
  *((_WORD *)v34 + 106) = 0;
  v36 = *((_QWORD *)v11 + 235);
  LODWORD(v35) = byte_1B6923615[12 * (*(unsigned __int8 *)(v36 + 241) == a4) + a8]
               + byte_1B692360C[3 * *(unsigned __int8 *)(*((_QWORD *)v11 + 234) + 10)];
  *((_DWORD *)v34 + 46) = (_DWORD)v35;
  *((_DWORD *)v34 + 52) = (_DWORD)v35 << 8;
  v37 = *(unsigned __int8 *)*a6;
  v457 = *((_DWORD *)*a6 + 1);
  v452 = *((_DWORD *)*a6 + 2);
  v445 = (unint64_t)(*a6)[22];
  v446 = (char *)(*a6)[12];
  v38 = 1;
  v504 = *(unsigned __int8 *)(v36 + 2009) - a4 - (a8 == 3);
  v459 = *(unsigned __int8 *)(*((_QWORD *)v11 + 119) + 570);
  v442 = &v11[8 * a4 + 4616];
  *((_QWORD *)v34 + 18) = *(_QWORD *)v442;
  v544 = 0u;
  v545 = 0u;
  v542 = 0u;
  v543 = 0u;
  v541 = 0;
  v540 = 0;
  *((_QWORD *)&v539 + 1) = -1;
  *(_QWORD *)&v539 = -1;
  v538 = 0;
  v537 = 0;
  v536 = 0;
  *(_DWORD *)&v535[8] = 0;
  v534 = v10;
  v450 = (1 << v504) + v10;
  *(_QWORD *)v535 = v450;
  v505 = (1 << v504);
  v533[0] = (_DWORD)v9;
  v449 = (1 << v504) + (_DWORD)v9;
  v533[1] = v449;
  v39 = (uint64_t *)(v34 + 128);
  v40 = v11 + 4440;
  v41 = *((_DWORD *)v11 + 1108);
  do
  {
    v42 = v533[v33];
    v43 = v42 < (int)v9;
    v44 = (v42 - (int)v9) >> 2;
    if (v43)
      v44 = -1;
    if (v43)
      v45 = (uint64_t *)(v34 + 128);
    else
      v45 = (uint64_t *)(v34 + 120);
    v46 = *v45;
    v47 = v46 + 16 * v44;
    *(&v537 + v33) = v47;
    if (!v46 || *(_BYTE *)(v47 + 10) != 1)
      *(&v537 + v33) = (uint64_t)v40;
    if (v41 == (_DWORD)v9)
    {
      v48 = (uint64_t *)&v535[8 * v33 + 4];
LABEL_43:
      *v48 = (uint64_t)v40;
      goto LABEL_44;
    }
    v49 = *(_DWORD *)&v535[4 * v33 - 4];
    v43 = v49 < v10;
    v50 = (v49 - v10) >> 2;
    if (v43)
      v50 = -1;
    v51 = *v39;
    v52 = *v39 + 16 * v50;
    v48 = (uint64_t *)&v535[8 * v33 + 4];
    *v48 = v52;
    if (!v51 || *(_BYTE *)(v52 + 10) != 1)
      goto LABEL_43;
LABEL_44:
    v53 = (a8 == 3) & v38;
    v33 = 1;
    v38 = 0;
  }
  while ((v53 & 1) != 0);
  *(_QWORD *)&v542 = v537;
  *((_QWORD *)&v542 + 1) = *(_QWORD *)&v535[4];
  v478 = (uint64_t)(v11 + 1920);
  v507 = v34;
  v451 = v37;
  if (a8 == 3)
  {
    v54 = 0;
    v55 = *((_DWORD *)v34 + 1);
    v56 = *((_DWORD *)v34 + 2);
    v57 = v10 - v55;
    v58 = (_DWORD)v9 - v56;
    if (((v10 - v55) & 0x80000000) == 0 && (v58 & 0x80000000) == 0)
    {
      v54 = 0;
      v59 = *v34;
      if (v57 < v59 && v58 < v59)
        v54 = *((_QWORD *)v34 + 12) + 16 * ((v57 >> 2) + (v59 >> 2) * (unint64_t)(v58 >> 2));
    }
    v60 = 0;
    *(_QWORD *)&v543 = v54;
    *((_QWORD *)&v543 + 1) = v536;
    *(_QWORD *)&v544 = v538;
    *((_QWORD *)&v544 + 1) = v54;
    if ((v57 & 0x80000000) == 0)
    {
      v61 = v449 - v56;
      if ((v61 & 0x80000000) == 0)
      {
        v60 = 0;
        v62 = *v34;
        if (v57 < v62 && v61 < v62)
          v60 = *((_QWORD *)v34 + 12) + 16 * ((v57 >> 2) + (v62 >> 2) * (unint64_t)(v61 >> 2));
      }
    }
    v63 = 0;
    *(_QWORD *)&v545 = v60;
    v64 = v450 - v55;
    if (v64 >= 0 && (v58 & 0x80000000) == 0)
    {
      v63 = 0;
      v65 = *v34;
      if (v64 < v65 && v58 < v65)
        v63 = *((_QWORD *)v34 + 12)
            + 16 * ((v64 >> 2) + (v65 >> 2) * (unint64_t)(v58 >> 2));
    }
    *((_QWORD *)&v545 + 1) = v63;
    v66 = 4;
  }
  else
  {
    v66 = 1;
  }
  v455 = v66;
  v458 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v11 + 234) + 1400) + 16))(*(_QWORD *)(*((_QWORD *)v11 + 234) + 1400));
  v67 = 0;
  v463 = 0;
  v476 = (int)v504 - 2;
  v464 = (v504 - 3);
  v469 = v504 == 2;
  if ((_DWORD)v504 == 2)
    v68 = 2;
  else
    v68 = 8;
  v472 = v68;
  v447 = v68 >> 1;
  LODWORD(v68) = (int)v505 >> 2;
  v473 = (uint64_t)(int)v505 >> 2;
  if ((int)v505 >> 2 <= 1)
    v68 = 1;
  else
    v68 = v68;
  v506 = v68;
  v444 = v11 + 1922;
  v454 = (int *)(v11 + 4344);
  v453 = (int *)(v11 + 4348);
  v512 = v11;
  v461 = v10;
  v460 = v9;
  v69 = v507;
  v462 = a5;
  do
  {
    if (v459)
    {
      v70 = **((unsigned __int8 **)&v542 + 2 * v67);
      v71 = **(unsigned __int8 **)((char *)&v542 + ((16 * v67) | 8));
      v539 = xmmword_1B6917930;
      if ((v70 & 1) != 0)
        v72 = 0;
      else
        v72 = v70;
      if (v70 > 1 && a8 == 3)
        v73 = v72;
      else
        v73 = v70;
      if ((v71 & 1) != 0)
        v74 = 0;
      else
        v74 = v71;
      if (v71 > 1 && a8 == 3)
        v75 = v74;
      else
        v75 = v71;
      if (v73 < 2)
      {
        v76 = 2;
      }
      else
      {
        DWORD2(v539) = v73;
        v76 = 3;
      }
      if (v75 >= 2 && v73 != v75)
        *(_DWORD *)((unint64_t)&v539 | (4 * v76)) = v75;
    }
    else
    {
      v70 = **((unsigned __int8 **)&v542 + 2 * v67);
      v71 = **(unsigned __int8 **)((char *)&v542 + ((16 * v67) | 8));
    }
    if (v70 == v71)
    {
      if (v71 < 2)
      {
        v540 = 0x100000000;
        v78 = 26;
      }
      else
      {
        LODWORD(v540) = v70;
        HIDWORD(v540) = (((_BYTE)v70 + 29) & 0x1F) + 2;
        v78 = (((_BYTE)v70 - 1) & 0x1F) + 2;
      }
    }
    else
    {
      v540 = __PAIR64__(v71, v70);
      if (v70)
        v79 = v71 == 0;
      else
        v79 = 1;
      if (v79)
      {
        if (v71 + v70 > 1)
          v78 = 1;
        else
          v78 = 26;
      }
      else
      {
        v78 = 0;
      }
    }
    v541 = v78;
    v477 = a7;
    if (a8 == 3)
    {
      v466[298] = 0;
      v80 = sub_1B683B42C(a7, v67, v450 < *((_DWORD *)v11 + 4), v449 < *((_DWORD *)v11 + 5));
      v69 = v507;
      v477 = v80;
    }
    if (v458)
    {
      v81 = *((_QWORD *)v11 + 234);
      if (*(_BYTE *)(v81 + 10) != 1)
        goto LABEL_116;
      v82 = *(_QWORD *)(v81 + 1400);
      v83 = *((_QWORD *)v11 + 235);
      v85 = *(_DWORD *)(v82 + 8);
      v84 = *(_DWORD *)(v82 + 12);
      v86 = *(_DWORD *)(v83 + 176);
      v87 = *(_DWORD *)(v83 + 180);
      v88 = *(unsigned __int8 *)(v83 + 2009) - a4;
      v89 = v85 < v86 && v84 < v87;
      if (!v89 || v88 < 4)
      {
LABEL_116:
        v463 = 0;
      }
      else
      {
        v539 = xmmword_1B6917930;
        v463 = 1;
      }
    }
    v492 = ((v67 & 1) << v504) + v10;
    v91 = v492 - *((_DWORD *)v69 + 1);
    v486 = (v67 >> 1 << v504) + v9;
    v92 = v486 - *((_DWORD *)v69 + 2);
    if ((v91 & 0x80000000) != 0
      || (v92 & 0x80000000) != 0
      || (v93 = *v69, v91 >= v93)
      || v92 >= v93)
    {
      v97 = 0;
      v96 = 0;
      v497 = 0;
      v498 = v69[1];
      v508 = **((unsigned __int8 **)v69 + 17);
    }
    else
    {
      v95 = *((_QWORD *)v69 + 11);
      v94 = *((_QWORD *)v69 + 12);
      v508 = **((unsigned __int8 **)v69 + 17);
      v498 = v69[1];
      v497 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 3) + 24))(*((_QWORD *)v69 + 3), v91 + v498 * v92 + *((_QWORD *)v69 + 4));
      v96 = (_WORD *)(v95 + 2 * ((v91 >> 3) + (v93 >> 3) * (unint64_t)(v92 >> 3)));
      v97 = (_QWORD *)(v94 + 16 * ((v91 >> 2) + (v93 >> 2) * (unint64_t)(v92 >> 2)));
      v69 = v507;
      LODWORD(v91) = v492 - *((_DWORD *)v507 + 1);
      v92 = v486 - *((_DWORD *)v507 + 2);
      v11 = v512;
    }
    v470 = v96;
    v467 = v67;
    v510 = 0;
    if ((v91 & 0x80000000) == 0 && (v92 & 0x80000000) == 0)
    {
      v510 = 0;
      v98 = *v69;
      if (v91 < v98 && v92 < v98)
      {
        v510 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)v69 + 17) + 80) + 24))(*(_QWORD *)(*((_QWORD *)v69 + 17) + 80), *(_QWORD *)(*((_QWORD *)v69 + 17) + 88)+ v91+ **((unsigned __int8 **)v69 + 17) * (unint64_t)v92);
        v11 = v512;
        v69 = v507;
      }
    }
    v99 = (_BYTE *)*((_QWORD *)v11 + 539);
    if (v99[228] == 1)
      v100 = 4;
    else
      v100 = 2;
    v496 = v100;
    if (*v466)
    {
      v101 = *((_QWORD *)v11 + 538);
      v481 = *((_DWORD *)v11 + 992) == *(unsigned __int8 *)(v101 + 2008) && *((_DWORD *)v11 + 994) == 0;
    }
    else
    {
      v481 = 0;
      v101 = *((_QWORD *)v11 + 538);
    }
    v102 = v99[570];
    v103 = (unsigned __int8 *)*((_QWORD *)v11 + 540);
    v499 = *v103;
    v483 = (char)v99[571];
    v530 = -1;
    v529 = -1;
    if (*(_BYTE *)(v101 + 245))
      v468 = *((_DWORD *)v103 + 1) > 2;
    else
      v468 = 0;
    v104 = v99[352];
    v105 = (_DWORD)v504 != 2 || v104 == 0;
    v106 = !v105;
    v479 = v106;
    if (!v105)
    {
      LODWORD(v532) = 0;
      v531 = xmmword_1B6917860;
      WORD2(v532) = 0;
    }
    for (i = 0; i != 120; i += 24)
    {
      v108 = &v555[i];
      *((_DWORD *)v108 + 4) = 0;
      *(_OWORD *)v108 = xmmword_1B6917860;
      *((_WORD *)v108 + 10) = 2;
    }
    v547 = 0;
    v546 = xmmword_1B6917860;
    v548 = 2;
    v550 = 0;
    v549 = xmmword_1B6917860;
    v551 = 2;
    v553 = 0;
    v552 = xmmword_1B6917860;
    v554 = 2;
    v500 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v11 + 541)
                                                                                          + 8 * v476
                                                                                          + 104);
    if (!v103[4698])
    {
      v109 = (void (*)(unsigned __int8 *, _QWORD, uint64_t, _QWORD))*((_QWORD *)v103 + 1020);
      v110 = *((_QWORD *)v103 + 1021);
      v111 = &v103[v110 >> 1];
      if ((v110 & 1) != 0)
        v109 = *(void (**)(unsigned __int8 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v111 + v109);
      v109(v111, v492, v486, *((unsigned int *)v11 + 1088));
      v11 = v512;
      v69 = v507;
    }
    if (v464 <= 2)
    {
      (*(void (**)(_QWORD, _QWORD))(*((_QWORD *)v11 + 537) + 8 * v464 + 1440))(*((_QWORD *)v69 + 19), *((_QWORD *)v69 + 20));
      v11 = v512;
      v69 = v507;
    }
    if (*(_BYTE *)(*((_QWORD *)v11 + 539) + 604))
    {
      v112 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v11 + 537) + 79216) + 592);
      v113 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v11 + 524);
      v114 = v112[14];
      v115 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD, unsigned __int8 *))(*v112 + 16))(v112, v492, v486, 0, v69);
      v482 = 2 * (v113(v114, v115, v504) < 0xA);
      v11 = v512;
      v69 = v507;
    }
    else
    {
      v482 = 0;
    }
    v116 = v506;
    if (v102)
    {
      if (*(unsigned __int8 *)(*((_QWORD *)v11 + 537) + 10) < 2u
        && (v117 = *((_QWORD *)v11 + 539), *(_DWORD *)(v117 + 508))
        && (int)v504 <= 3
        && *(_BYTE *)(v117 + 577))
      {
        v118 = sub_1B6851A28(*((_QWORD *)v11 + 540), v492, v486, v504);
        LODWORD(v119) = *(char *)(v117 + 587) + 2;
        if (v118 == 2)
          v119 = 2;
        else
          v119 = v119;
        v493 = v119;
        if ((int)v119 < 1)
        {
          v484 = 0;
          LODWORD(v122) = 0;
          v121 = 0;
          v495 = 0;
          v69 = v507;
          v116 = v506;
        }
        else
        {
          v120 = 0;
          v495 = 0;
          v121 = 0;
          v122 = 0;
          v484 = 0;
          v123 = -1;
          v488 = v118;
          v69 = v507;
          do
          {
            v124 = v121;
            v125 = v122;
            v126 = byte_1B6924EFA[11 * v488 + v120];
            if (v126 == 1)
            {
              v127 = 0;
            }
            else
            {
              v128 = 10 - v126;
              if (v126 >= 10)
                v128 = v126 - 10;
              v129 = 26 - v126;
              if (v126 >= 26)
                v129 = v126 - 26;
              if (v128 >= v129)
                v128 = v129;
              v127 = v128 > byte_1B6924F5D[(int)v504];
            }
            sub_1B67D57F4(*((_QWORD *)v512 + 537) + 1424, byte_1B6924EFA[11 * v488 + v120], v504, *(_QWORD *)&v69[8 * v127 + 152], v508, v510);
            v130 = v500(v505, v505, v497, v498, v510, v508);
            v131 = 0;
            v132 = v482;
            if (v482 == 0 || v126 != 0)
              v132 = 0;
            v133 = (unint64_t)v130 >> v132;
            v134 = v495;
            if (v482 != 0 && v126 == 0)
              v134 = v130;
            v495 = v134;
            while (*((_DWORD *)&v540 + v131) != v126)
            {
              if (++v131 == 3)
              {
                v135 = 6;
                goto LABEL_188;
              }
            }
            if ((_DWORD)v131)
              v135 = 3;
            else
              v135 = 2;
LABEL_188:
            v136 = v133 + v135 * *(unsigned __int16 *)(*((_QWORD *)v512 + 541) + 2 * v496 + 8);
            if (v499)
            {
              v526[0] = v133;
              v526[1] = v136;
              v527 = v135;
              v528 = 2;
              sub_1B6861610(v526, v126, v483, (uint64_t)v555, &v529);
            }
            v69 = v507;
            v116 = v506;
            if (v136 < v123)
            {
              if (v481)
              {
                v137 = 0;
                v138 = *((_QWORD *)v512 + 540);
                v139 = v507[1];
                v140 = v492 - *((_DWORD *)v507 + 1);
                if ((v140 & 0x80000000) == 0)
                {
                  v141 = v486 - *((_DWORD *)v507 + 2);
                  if ((v141 & 0x80000000) == 0)
                  {
                    v137 = 0;
                    v142 = *v507;
                    if (v140 < v142 && v141 < v142)
                      v137 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v507 + 7) + 24))(*((_QWORD *)v507 + 7), v140 + v507[1] * (unint64_t)v141 + *((_QWORD *)v507 + 8));
                  }
                }
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 8144))(v505, v505, v508, v510, v139, v137);
                v484 = v126;
                v125 = v135;
                v123 = v136;
                v124 = v133;
                v69 = v507;
                v116 = v506;
              }
              else
              {
                v484 = v126;
                v125 = v135;
                v123 = v136;
                v124 = v133;
              }
            }
            ++v120;
            v122 = v125;
            v121 = v124;
          }
          while (v120 != v493);
        }
      }
      else
      {
        v143 = 0;
        v144 = 0;
        while (1)
        {
          v145 = *((_DWORD *)&v539 + v143);
          if (v145 < 0)
            break;
          v144 |= 1 << v145;
          if (++v143 == 4)
          {
            v485 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v11 + 541)
                                                                                                  + 8 * v476
                                                                                                  + 104);
            LODWORD(v143) = 4;
            goto LABEL_256;
          }
        }
        v485 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v11 + 541)
                                                                                              + 8 * v476
                                                                                              + 104);
        if (!(_DWORD)v143)
        {
          v484 = 0;
          v490 = 0;
          v487 = 0;
          v495 = 0;
          v502 = -1;
          goto LABEL_289;
        }
LABEL_256:
        v177 = 0;
        v487 = 0;
        v490 = 0;
        v484 = 0;
        v474 = v143;
        v502 = -1;
        v495 = 0;
        do
        {
          v178 = *((_DWORD *)&v539 + v177);
          if (v178 == 1)
          {
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v11 + 537) + 8 * v476 + 1584))(1, *((_QWORD *)v69 + 19), v508, v510);
          }
          else
          {
            v179 = 10 - v178;
            if (v178 >= 10)
              v179 = v178 - 10;
            v180 = 26 - v178;
            if (v178 >= 26)
              v180 = v178 - 26;
            if (v179 >= v180)
              v179 = v180;
            sub_1B67D57F4(*((_QWORD *)v11 + 537) + 1424, *((unsigned int *)&v539 + v177), v504, *(_QWORD *)&v69[8 * (v179 > byte_1B6924F5D[(int)v504]) + 152], v508, v510);
          }
          v181 = v485(v505, v505, v497, v498, v510, v508);
          v182 = 0;
          v183 = v482;
          if (v482 == 0 || v178 != 0)
            v183 = 0;
          v184 = (unint64_t)v181 >> v183;
          v185 = v495;
          if (v482 != 0 && v178 == 0)
            v185 = v181;
          v495 = v185;
          v11 = v512;
          v116 = v506;
          while (*((_DWORD *)&v540 + v182) != v178)
          {
            if (++v182 == 3)
            {
              v186 = 6;
              goto LABEL_277;
            }
          }
          if ((_DWORD)v182)
            v186 = 3;
          else
            v186 = 2;
LABEL_277:
          v187 = v184 + v186 * *(unsigned __int16 *)(*((_QWORD *)v512 + 541) + 2 * v496 + 8);
          if (v499)
          {
            v523[0] = v184;
            v523[1] = v187;
            v524 = v186;
            v525 = 2;
            sub_1B6861610(v523, v178, v483, (uint64_t)v555, &v529);
            v116 = v506;
          }
          v69 = v507;
          if (v187 < v502)
          {
            if (v481)
            {
              v188 = 0;
              v189 = *((_QWORD *)v512 + 540);
              v190 = v507[1];
              v191 = v492 - *((_DWORD *)v507 + 1);
              if ((v191 & 0x80000000) == 0)
              {
                v192 = v486 - *((_DWORD *)v507 + 2);
                if ((v192 & 0x80000000) == 0)
                {
                  v188 = 0;
                  v193 = *v507;
                  if (v191 < v193 && v192 < v193)
                    v188 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v507 + 7) + 24))(*((_QWORD *)v507 + 7), v191 + v507[1] * (unint64_t)v192 + *((_QWORD *)v507 + 8));
                }
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 8144))(v505, v505, v508, v510, v190, v188);
              v484 = v178;
              v490 = v186;
              v502 = v187;
              v487 = v184;
              v11 = v512;
              v69 = v507;
              v116 = v506;
            }
            else
            {
              v484 = v178;
              v490 = v186;
              v502 = v187;
              v487 = v184;
            }
          }
          ++v177;
        }
        while (v177 != v474);
LABEL_289:
        if ((v463 & 1) != 0)
        {
          v494 = 0;
        }
        else
        {
          v494 = 0;
          v194 = 2;
          v195 = 2;
          do
          {
            if (((v144 >> v194) & 1) == 0)
            {
              v196 = 10 - v195;
              if (v194 >= 0xA)
                v196 = v194 - 10;
              v197 = 26 - v195;
              if (v194 >= 0x1A)
                v197 = v194 - 26;
              if (v196 >= v197)
                v196 = v197;
              sub_1B67D57F4(*((_QWORD *)v512 + 537) + 1424, v194, v504, *(_QWORD *)&v69[8 * (v196 > byte_1B6924F5D[(int)v504]) + 152], v508, v510);
              v198 = v485(v505, v505, v497, v498, v510, v508);
              v199 = 0;
              v200 = v198;
              v116 = v506;
              while (v194 != *((_DWORD *)&v540 + v199))
              {
                if (++v199 == 3)
                {
                  v201 = 6;
                  goto LABEL_306;
                }
              }
              if ((_DWORD)v199)
                v201 = 3;
              else
                v201 = 2;
LABEL_306:
              v202 = v201 * *(unsigned __int16 *)(*((_QWORD *)v512 + 541) + 2 * v496 + 8)
                   + (unint64_t)v198;
              if (v499)
              {
                v520[0] = v198;
                v520[1] = v202;
                v521 = v201;
                v522 = 2;
                sub_1B6861610(v520, v194, v483, (uint64_t)v555, &v529);
                v116 = v506;
              }
              v69 = v507;
              if (v202 < v502)
              {
                if (v481)
                {
                  v203 = 0;
                  v204 = *((_QWORD *)v512 + 540);
                  v205 = v507[1];
                  v206 = v492 - *((_DWORD *)v507 + 1);
                  if ((v206 & 0x80000000) == 0)
                  {
                    v207 = v486 - *((_DWORD *)v507 + 2);
                    if ((v207 & 0x80000000) == 0)
                    {
                      v203 = 0;
                      v208 = *v507;
                      if (v206 < v208 && v207 < v208)
                        v203 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v507 + 7) + 24))(*((_QWORD *)v507 + 7), v206 + v507[1] * (unint64_t)v207 + *((_QWORD *)v507 + 8));
                    }
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v204 + 8144))(v505, v505, v508, v510, v205, v203);
                  v484 = v194;
                  v490 = v201;
                  v502 = v202;
                  v487 = v200;
                  v69 = v507;
                  v116 = v506;
                }
                else
                {
                  v484 = v194;
                  v490 = v201;
                  v502 = v202;
                  v487 = v200;
                }
              }
              v494 |= v194 == 34;
            }
            v194 += v472;
            v195 += v472;
          }
          while (v194 < 0x23);
        }
        if (v484 >= 2 && (int)v505 >= 5 && v447 > v469)
        {
          v209 = v447;
          v210 = v512;
          do
          {
            v211 = 0;
            v212 = v209 + v484;
            if ((int)(v209 + v484) >= 34)
              v212 = 34;
            v471 = v212;
            v519[0] = v212;
            v475 = v209;
            v213 = v484 - v209;
            if ((int)(v484 - v209) <= 2)
              v213 = 2;
            v519[1] = v213;
            v214 = 1;
            do
            {
              v215 = v214;
              v216 = (char)v519[v211];
              if (((v144 >> v519[v211]) & 1) == 0 && (_DWORD)v216 != 2 && (v494 & ((_DWORD)v216 == 34)) == 0)
              {
                if ((_DWORD)v216 == 1)
                {
                  v217 = 0;
                }
                else
                {
                  v218 = 10 - v216;
                  if ((int)v216 >= 10)
                    v218 = v216 - 10;
                  v219 = 26 - v216;
                  if ((int)v216 >= 26)
                    v219 = v216 - 26;
                  if (v218 >= v219)
                    v218 = v219;
                  v217 = v218 > byte_1B6924F5D[(int)v504];
                }
                sub_1B67D57F4(*((_QWORD *)v210 + 537) + 1424, v216, v504, *(_QWORD *)&v69[8 * v217 + 152], v508, v510);
                v220 = v485(v505, v505, v497, v498, v510, v508);
                v221 = 0;
                v222 = v220;
                v210 = v512;
                while (*((_DWORD *)&v540 + v221) != (_DWORD)v216)
                {
                  if (++v221 == 3)
                  {
                    v223 = 6;
                    goto LABEL_349;
                  }
                }
                if ((_DWORD)v221)
                  v223 = 3;
                else
                  v223 = 2;
LABEL_349:
                v224 = v223 * *(unsigned __int16 *)(*((_QWORD *)v512 + 541) + 2 * v496 + 8)
                     + (unint64_t)v220;
                if (v499)
                {
                  v516[0] = v220;
                  v516[1] = v224;
                  v517 = v223;
                  v518 = 2;
                  sub_1B6861610(v516, v216, v483, (uint64_t)v555, &v529);
                }
                v69 = v507;
                v116 = v506;
                if (v224 < v502)
                {
                  if (v481)
                  {
                    v225 = 0;
                    v226 = *((_QWORD *)v512 + 540);
                    v227 = v507[1];
                    v228 = v492 - *((_DWORD *)v507 + 1);
                    if ((v228 & 0x80000000) == 0)
                    {
                      v229 = v486 - *((_DWORD *)v507 + 2);
                      if ((v229 & 0x80000000) == 0)
                      {
                        v225 = 0;
                        v230 = *v507;
                        if (v228 < v230 && v229 < v230)
                          v225 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v507 + 7) + 24))(*((_QWORD *)v507 + 7), v228 + v507[1] * (unint64_t)v229 + *((_QWORD *)v507 + 8));
                      }
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v226 + 8144))(v505, v505, v508, v510, v227, v225);
                    v484 = v216;
                    v490 = v223;
                    v502 = v224;
                    v487 = v222;
                    v210 = v512;
                    v69 = v507;
                    v116 = v506;
                  }
                  else
                  {
                    v484 = v216;
                    v490 = v223;
                    v502 = v224;
                    v487 = v222;
                  }
                }
              }
              v214 = 0;
              v211 = 1;
            }
            while ((v215 & 1) != 0);
            v494 |= v471 == 34;
            v209 = v475 >> 1;
          }
          while (v475 >> 1 > v469);
        }
        LODWORD(v122) = v490;
        v121 = v487;
      }
    }
    else
    {
      v146 = v11;
      v147 = 0;
      v148 = 0;
      v484 = 0;
      v149 = 0;
      v501 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v146 + 541)
                                                                                            + 8 * v476
                                                                                            + 104);
      v495 = 0;
      v150 = -1;
      v151 = 1;
      do
      {
        if ((_DWORD)v149 == 1)
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*((_QWORD *)v512 + 537) + 8 * v476 + 1584))(1, *((_QWORD *)v69 + 19), v508, v510);
        }
        else
        {
          v152 = 10 - v149;
          if ((int)v149 >= 10)
            v152 = v149 - 10;
          v153 = 26 - v149;
          if ((int)v149 >= 26)
            v153 = v149 - 26;
          if (v152 >= v153)
            v152 = v153;
          sub_1B67D57F4(*((_QWORD *)v512 + 537) + 1424, v149, v504, *(_QWORD *)&v69[8 * (v152 > byte_1B6924F5D[(int)v504]) + 152], v508, v510);
        }
        v154 = v501(v505, v505, v497, v498, v510, v508);
        v155 = 0;
        v156 = v482;
        if (v482 == 0 || (_DWORD)v149 != 0)
          v156 = 0;
        v157 = (unint64_t)v154 >> v156;
        v158 = v495;
        if (v482 != 0 && (_DWORD)v149 == 0)
          v158 = v154;
        v495 = v158;
        while (*((_DWORD *)&v540 + v155) != (_DWORD)v149)
        {
          if (++v155 == 3)
          {
            v159 = 6;
            goto LABEL_226;
          }
        }
        if ((_DWORD)v155)
          v159 = 3;
        else
          v159 = 2;
LABEL_226:
        v160 = *((_QWORD *)v512 + 541);
        v161 = v157 + v159 * *(unsigned __int16 *)(v160 + 2 * v496 + 8);
        v162 = v157;
        if (v499)
        {
          v513[0] = v157;
          v513[1] = v161;
          v514 = v159;
          v515 = 2;
          sub_1B6861610(v513, v149, v483, (uint64_t)v555, &v529);
        }
        v489 = v159;
        v163 = *((_QWORD *)v512 + 540);
        v164 = *(unsigned __int8 *)(v163 + 188);
        v69 = v507;
        v116 = v506;
        if (*(_BYTE *)(v163 + 188))
        {
          v165 = 0;
          while ((_DWORD)v149 != *((_DWORD *)&v540 + v165))
          {
            if (++v165 == 3)
              goto LABEL_234;
          }
          v166 = (char *)&v546 + 24 * v165;
          v167 = *(_QWORD *)v166 + v162;
          v168 = *((_DWORD *)v166 + 4) + v489;
          *((_DWORD *)v166 + 4) = v168;
          v169 = v167
               + ((v168 * *(unsigned __int16 *)(v160 + 2 * *((__int16 *)v166 + 10) + 8)) >> (8
                                                                                             * (*((_WORD *)v166 + 10) == 0)));
          *(_QWORD *)v166 = v167;
          *((_QWORD *)v166 + 1) = v169;
        }
LABEL_234:
        if (v161 >= v150)
        {
          v122 = v148;
          v161 = v150;
          v121 = v147;
        }
        else
        {
          if (v481)
          {
            v170 = 0;
            v171 = v507[1];
            v172 = v492 - *((_DWORD *)v507 + 1);
            if ((v172 & 0x80000000) == 0)
            {
              v173 = v486 - *((_DWORD *)v507 + 2);
              if ((v173 & 0x80000000) == 0)
              {
                v170 = 0;
                v174 = *v507;
                if (v172 < v174 && v173 < v174)
                  v170 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v507 + 7) + 24))(*((_QWORD *)v507 + 7), v172 + v507[1] * (unint64_t)v173 + *((_QWORD *)v507 + 8));
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v163 + 8144))(v505, v505, v508, v510, v171, v170);
            v164 = *(unsigned __int8 *)(*((_QWORD *)v512 + 540) + 188);
            v484 = v149;
            v69 = v507;
            v116 = v506;
          }
          else
          {
            v484 = v149;
          }
          v122 = v489;
          v121 = v162;
        }
        if (v164)
          v175 = 0;
        else
          v175 = (_DWORD)v149 == 2;
        if (v175 && (_DWORD)v504 == 2)
          v151 = 2;
        v149 = (v151 + v149);
        v147 = v121;
        v150 = v161;
        v148 = v122;
      }
      while ((int)v149 < 35);
    }
    v231 = v121;
    v491 = v122;
    v11 = v512;
    if (*(_BYTE *)(*((_QWORD *)v512 + 540) + 188))
    {
      v232 = 0;
      v233 = v505 >> 2;
      v234 = v483;
      do
      {
        v235 = *((_DWORD *)&v540 + v232);
        if (v234 < 1)
        {
LABEL_368:
          *((_BYTE *)&v529 + v234) = v235;
          v239 = *((_QWORD *)v512 + 541);
          v240 = &v555[24 * v234];
          v241 = (char *)&v546 + 24 * v232;
          v242 = *(_QWORD *)v240 + *(_QWORD *)v241;
          LODWORD(v241) = *((_DWORD *)v240 + 4) + *((_DWORD *)v241 + 4);
          *((_DWORD *)v240 + 4) = (_DWORD)v241;
          v243 = v242
               + ((v241 * *(unsigned __int16 *)(v239 + 2 * *((__int16 *)v240 + 10) + 8)) >> (8 * (*((_WORD *)v240 + 10) == 0)));
          *(_QWORD *)v240 = v242;
          *((_QWORD *)v240 + 1) = v243;
          ++v234;
        }
        else
        {
          v236 = v234;
          v237 = &v529;
          while (1)
          {
            v238 = *(unsigned __int8 *)v237;
            v237 = (int *)((char *)v237 + 1);
            if (v235 == v238)
              break;
            if (!--v236)
              goto LABEL_368;
          }
        }
        ++v232;
      }
      while (v232 != 3);
    }
    else
    {
      v233 = v505 >> 2;
      v234 = v483;
    }
    if (v481)
    {
      v244 = 0;
      v245 = *((_DWORD *)v512 + 992);
      v246 = v69[1];
      v247 = v492 - *((_DWORD *)v69 + 1);
      v248 = v486 - *((_DWORD *)v69 + 2);
      if ((v247 & 0x80000000) == 0 && (v248 & 0x80000000) == 0)
      {
        v244 = 0;
        v249 = *v69;
        if (v247 < v249 && v248 < v249)
        {
          v244 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v69 + 3) + 24))(*((_QWORD *)v69 + 3), v247 + v69[1] * (unint64_t)v248 + *((_QWORD *)v69 + 4));
          v69 = v507;
          LODWORD(v247) = v492 - *((_DWORD *)v507 + 1);
          v248 = v486 - *((_DWORD *)v507 + 2);
          v11 = v512;
          v233 = v505 >> 2;
          v116 = v506;
        }
      }
      v250 = 0;
      if ((v247 & 0x80000000) == 0 && (v248 & 0x80000000) == 0)
      {
        v250 = 0;
        v251 = *v69;
        if (v247 < v251 && v248 < v251)
        {
          v250 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD, uint64_t))(**((_QWORD **)v69 + 7) + 24))(*((_QWORD *)v69 + 7), v247 + v69[1] * (unint64_t)v248 + *((_QWORD *)v69 + 8), 0, v116);
          v11 = v512;
          v69 = v507;
          v233 = v505 >> 2;
          v116 = v506;
        }
      }
      if (*((_DWORD *)v11 + 992) == v245)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v11 + 537)
                                                                            + 8 * (v245 - 2)
                                                                            + 1896))(v244, v246, v250, v246, v478);
        v11 = v512;
        v252 = *((_QWORD *)v512 + 540);
        v253 = *((_DWORD *)v512 + 1088);
        v254 = *(_BYTE *)(*(_QWORD *)(v252 + 1880) + 2009) - v253;
        v255 = (1 << v254);
        if ((int)v255 < 2)
        {
          v257 = 0;
          v69 = v507;
          v233 = v505 >> 2;
          v116 = v506;
        }
        else
        {
          v256 = 0;
          v257 = 0;
          do
          {
            v258 = *(__int16 *)&v444[2 * v256];
            if (v258 < 0)
              v258 = -v258;
            v259 = v257 + v258;
            v260 = *(__int16 *)(v478 + 2 * (int)((_DWORD)++v256 << v254));
            if (v260 < 0)
              v260 = -v260;
            v257 = v259 + v260;
          }
          while (v255 - 1 != v256);
          v69 = v507;
          v233 = v505 >> 2;
          v116 = v506;
          if ((int)v255 >= 4)
          {
            v261 = v255 >> 1;
            v262 = 1;
            do
            {
              v263 = &v444[2 * (v262 << v254)];
              v264 = v261 - 1;
              do
              {
                v266 = *(__int16 *)v263;
                v263 += 2;
                v265 = v266;
                if (v266 < 0)
                  v265 = -v265;
                v257 += v265;
                --v264;
              }
              while (v264);
              ++v262;
            }
            while (v262 != v261);
          }
        }
        v267 = v492 - *((_DWORD *)v69 + 1);
        v268 = v486 - *((_DWORD *)v69 + 2);
        v269 = *((_QWORD *)v69 + 11);
        v270 = (unint64_t)*v69 >> 3;
        v271 = *(__int16 *)(v269 + 2 * ((v267 >> 3) + v270 * (unint64_t)(v268 >> 3))) >> 9;
        v272 = 173 * v271;
        if (173 * v271 >= 7865)
          v272 = 7865;
        if (v272 <= 2865)
          v272 = 2865;
        v273 = v272 - 2865;
        v274 = 200 * v271;
        if (v274 >= 8404)
          v274 = 8404;
        if (v274 <= 3404)
          v274 = 3404;
        v275 = v274 - 3404;
        if (!*(_BYTE *)(*(_QWORD *)(v252 + 952) + 234))
          v275 = v273;
        if (v257 < v275)
        {
          *(_DWORD *)(v252 + 4 * v253 + 8088) &= ~0x1000u;
          v253 = *((_DWORD *)v512 + 1088);
          v267 = v492 - *((_DWORD *)v69 + 1);
          v268 = v486 - *((_DWORD *)v69 + 2);
        }
        if ((*(_DWORD *)(v252 + 4 * v253 + 8088) & 0x1000) != 0)
        {
          v276 = (__int16 *)(v269 + 2 * ((v267 >> 3) + v270 * (unint64_t)(v268 >> 3)));
          v277 = *v276;
          v278 = *v276 >> 9;
          if (v278 >= 47)
            LOWORD(v278) = 47;
          v279 = ((_WORD)v278 << 9) + 2048;
          *v276 = v279 & 0xFE00 | v277 & 0x1FF;
          v280 = sub_1B6864E4C(v478, v492, v486, (v279 >> 9), v478, 1 << v245, v478, 1 << v245, *((_DWORD *)v512 + 992), 0, 0);
          *v276 = v277 & 0xFE00 | *v276 & 0x1FF;
          v11 = v512;
          v69 = v507;
          v233 = v505 >> 2;
          v116 = v506;
          if ((v280 & 1) == 0)
          {
            v281 = *((_QWORD *)v512 + 540) + 4 * *((int *)v512 + 1088);
            *(_DWORD *)(v281 + 8088) &= ~0x1000u;
          }
        }
      }
    }
    v282 = 0;
    v283 = v492 - v457;
    if (((v492 - v457) & 0x80000000) == 0)
    {
      v284 = v486 - v452;
      if ((((_DWORD)v486 - v452) & 0x80000000) == 0)
      {
        v282 = 0;
        if (v283 < v451 && v284 < v451)
          v282 = &v446[16 * (v283 >> 2) + 16 * (v451 >> 2) * (unint64_t)(v284 >> 2)];
      }
    }
    if (*(int *)(*((_QWORD *)v11 + 540) + 4) <= 2)
    {
      v285 = v282[10];
      v286 = *(unsigned __int8 *)(*((_QWORD *)v11 + 537) + 10) > 1u || v285 == 1;
      if (!v286
        && *((_QWORD *)v69 + 21)
         + v231
         + (*((_DWORD *)v69 + 46) + v491) * *(unsigned __int16 *)(*((_QWORD *)v11 + 541) + 2) >= v445)
      {
        *(_QWORD *)v442 = *((_QWORD *)v69 + 18);
        return;
      }
    }
    if (v499)
    {
      v287 = *((_QWORD *)v69 + 17);
      *(_DWORD *)(v287 + 128) = 0;
      *(_OWORD *)(v287 + 112) = xmmword_1B6917860;
      *(_WORD *)(v287 + 132) = 0;
      if (v234 >= 1)
      {
        v288 = 0;
        v503 = 0;
        v289 = &v531;
        if (!v479)
          v289 = 0;
        v511 = (uint64_t)v289;
        v509 = v234;
        LOBYTE(v234) = 0;
        while (1)
        {
          v290 = *((_QWORD *)v69 + 18);
          *(_DWORD *)(v290 + 128) = 0;
          *(_OWORD *)(v290 + 112) = xmmword_1B6917860;
          *(_WORD *)(v290 + 132) = 0;
          v291 = *((unsigned __int8 *)&v529 + v288);
          *(_BYTE *)v97 = v291;
          if ((int)v505 >= 4)
          {
            v292 = 0;
            v293 = 16 * ((unint64_t)*v69 >> 2);
            v294 = v97;
            do
            {
              v295 = v294;
              v296 = v116;
              do
              {
                v297 = *v97;
                *(_QWORD *)((char *)v295 + 6) = *(_QWORD *)((char *)v97 + 6);
                *v295 = v297;
                v295 += 2;
                --v296;
              }
              while (v296);
              ++v292;
              v294 = (_QWORD *)((char *)v294 + v293);
            }
            while (v292 != v233);
          }
          v298 = v69 + 144;
          sub_1B6861738(v478, v492, v486, v69, v504, a8 == 3, v291, a8, v477, *((_QWORD *)v69 + 18) + 112, v511);
          v300 = *(unsigned __int8 **)v298;
          v301 = *(_QWORD *)(*(_QWORD *)v298 + 112);
          v69 = v507;
          if (((v301 >= *(_QWORD *)(*((_QWORD *)v507 + 17) + 120)) & ~v479) != 0)
            goto LABEL_481;
          v11 = v512;
          v302 = (uint64_t)(int)v505 >> 2;
          if (*(_BYTE *)(*((_QWORD *)v512 + 540) + 188))
          {
            if (*(_BYTE *)(*((_QWORD *)v512 + 539) + 352))
            {
              v303 = v492 - *((_DWORD *)v507 + 1);
              if ((v303 & 0x80000000) == 0)
              {
                v304 = v486 - *((_DWORD *)v507 + 2);
                if ((v304 & 0x80000000) == 0)
                {
                  v305 = *v507;
                  if (v303 < v305 && v304 < v305 && v504 >= 2)
                  {
                    v306 = (unint64_t)*v300 >> 2;
                    v307 = (char *)(*((_QWORD *)v300 + 1)
                                  + (v303 >> 2)
                                  + v306 * (unint64_t)(v304 >> 2));
                    v308 = (uint64_t)(int)v505 >> 2;
                    do
                    {
                      --v308;
                      bzero(v307, v473);
                      v307 += v306;
                    }
                    while (v308);
                  }
                }
              }
            }
            sub_1B6861F44(v478, v492, v486, *((_DWORD *)v512 + 1088), v507, v291, (int *)&v540, 0);
            v69 = v507;
            v300 = (unsigned __int8 *)*((_QWORD *)v507 + 18);
            *((_DWORD *)v300 + 32) = v309;
            if ((v479 & 1) == 0)
            {
              v301 = *((_QWORD *)v300 + 14);
              v11 = v512;
              v233 = v505 >> 2;
              v116 = v506;
LABEL_470:
              v334 = v301
                   + ((v309
                     * *(unsigned __int16 *)(*((_QWORD *)v11 + 541) + 2 * *((__int16 *)v300 + 66) + 8)) >> (8 * (*((_WORD *)v300 + 66) == 0)));
              *((_QWORD *)v300 + 15) = v334;
              goto LABEL_478;
            }
            v310 = v492 - *((_DWORD *)v507 + 1);
            if ((v310 & 0x80000000) == 0)
            {
              v311 = v486 - *((_DWORD *)v507 + 2);
              if ((v311 & 0x80000000) == 0)
              {
                v312 = *v507;
                if (v310 < v312 && v311 < v312)
                {
                  memset((void *)(*((_QWORD *)v300 + 1) + (v310 >> 2) + ((unint64_t)*v300 >> 2) * (v311 >> 2)), 1, v505 >> 2);
                  v69 = v507;
                }
              }
            }
            v299 = sub_1B6861F44(v478, v492, v486, *((_DWORD *)v512 + 1088), v69, v291, (int *)&v540, 1);
            v314 = v313;
            LODWORD(v532) = v313;
            v69 = v507;
            v300 = (unsigned __int8 *)*((_QWORD *)v507 + 18);
            v301 = *((_QWORD *)v300 + 14);
            v309 = *((_DWORD *)v300 + 32);
            v11 = v512;
            v302 = (uint64_t)(int)v505 >> 2;
          }
          else
          {
            v315 = 0;
            v233 = v505 >> 2;
            v116 = v506;
            while (*((_DWORD *)&v540 + v315) != v291)
            {
              if (++v315 == 3)
              {
                v316 = 1536;
                goto LABEL_463;
              }
            }
            if ((_DWORD)v315)
              v316 = 768;
            else
              v316 = 512;
LABEL_463:
            v309 = *((_DWORD *)v300 + 32) + v316;
            *((_DWORD *)v300 + 32) = v309;
            if (!v479)
              goto LABEL_470;
            v314 = v532 + v316;
            LODWORD(v532) = v314;
          }
          v317 = *((_QWORD *)v11 + 541) + 8;
          v318 = v301
               + ((v309 * *(unsigned __int16 *)(v317 + 2 * *((__int16 *)v300 + 66))) >> (8 * (*((_WORD *)v300 + 66) == 0)));
          *((_QWORD *)v300 + 15) = v318;
          *((_QWORD *)&v531 + 1) = v531
                                 + ((v314 * *(unsigned __int16 *)(v317 + 2 * SWORD2(v532))) >> (8 * (WORD2(v532) == 0)));
          if (v318 > *((_QWORD *)&v531 + 1)
            && (v319 = *((_QWORD *)v512 + 540), v320 = *(unsigned __int8 **)(v319 + 376), **((_BYTE **)v320 + 4)))
          {
            v321 = *v320;
            v322 = (*(uint64_t (**)(_QWORD, _QWORD, __n128))(**((_QWORD **)v320 + 10) + 24))(*((_QWORD *)v320 + 10), *((_QWORD *)v320 + 11), v299);
            v323 = (unsigned __int8 *)*((_QWORD *)v507 + 18);
            v324 = *v323;
            v325 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v323 + 10) + 24))(*((_QWORD *)v323 + 10), *((_QWORD *)v323 + 11)- *((int *)v512 + 1086)+ (int)v492+ ((int)v486 - (uint64_t)*((int *)v512 + 1087)) * v324);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v319 + 8144))(v505, v505, v321, v322, v324, v325);
            v326 = **((unsigned __int8 **)v507 + 18);
            v327 = 2 * v326;
            v328 = *(unsigned __int8 **)(*((_QWORD *)v512 + 540) + 376);
            v329 = 2 * *v328;
            v330 = (char *)*((_QWORD *)v328 + 7);
            v331 = (char *)(*(_QWORD *)(*((_QWORD *)v507 + 18) + 56)
                          + 2 * (v326 * ((int)v486 - (uint64_t)*v453) - *v454 + (int)v492));
            v332 = (int)v505;
            do
            {
              --v332;
              memcpy(v331, v330, 2 * (int)v505);
              v331 += v327;
              v330 += v329;
            }
            while (v332);
            sub_1B688DE74(v507, v492, v486, v473, 0, **(unsigned __int8 **)(*(_QWORD *)(*((_QWORD *)v512 + 540) + 376) + 32), 1);
            v333 = *((_QWORD *)v507 + 18);
            *(_OWORD *)(v333 + 112) = v531;
            *(_QWORD *)(v333 + 128) = v532;
          }
          else
          {
            v335 = v492 - *((_DWORD *)v69 + 1);
            if ((v335 & 0x80000000) == 0)
            {
              v336 = v486 - *((_DWORD *)v507 + 2);
              if ((v336 & 0x80000000) == 0)
              {
                v337 = *v507;
                if (v335 < v337 && v336 < v337)
                {
                  v338 = (unint64_t)*v300 >> 2;
                  v339 = (char *)(*((_QWORD *)v300 + 1)
                                + (v335 >> 2)
                                + v338 * (unint64_t)(v336 >> 2));
                  v340 = v302;
                  do
                  {
                    --v340;
                    bzero(v339, v302);
                    v339 += v338;
                  }
                  while (v340);
                }
              }
            }
          }
          v69 = v507;
          v300 = (unsigned __int8 *)*((_QWORD *)v507 + 18);
          v334 = *((_QWORD *)v300 + 15);
          v11 = v512;
          v233 = v505 >> 2;
          v116 = v506;
LABEL_478:
          v341 = *((_QWORD *)v69 + 17);
          if (v334 < *(_QWORD *)(v341 + 120))
          {
            v234 = ((unsigned __int16)*v470 >> 2) & 3;
            if (a8 != 3)
            {
              *((_QWORD *)v69 + 17) = v300;
              *((_QWORD *)v69 + 18) = v341;
              v484 = v291;
              v503 = v288;
              goto LABEL_482;
            }
            sub_1B683ABA0(*((_QWORD *)v11 + 540), (unsigned __int8 *)v341, v300, v492 - *((_DWORD *)v69 + 1), v486 - *((_DWORD *)v69 + 2), v492 - *((_DWORD *)v69 + 1), v486 - *((_DWORD *)v69 + 2), v505);
            v69 = v507;
            v342 = *((_QWORD *)v507 + 17);
            v343 = *((_QWORD *)v507 + 18);
            v344 = *(_OWORD *)(v343 + 112);
            *(_QWORD *)(v342 + 128) = *(_QWORD *)(v343 + 128);
            *(_OWORD *)(v342 + 112) = v344;
            v484 = v291;
            v503 = v288;
LABEL_481:
            v11 = v512;
            v233 = v505 >> 2;
            v116 = v506;
          }
LABEL_482:
          if (++v288 == v509)
            goto LABEL_486;
        }
      }
    }
    v503 = 0;
    LOBYTE(v234) = 0;
LABEL_486:
    v345 = v470;
    if ((*v470 & 0xC) != 0)
      *(_BYTE *)(*((_QWORD *)v11 + 540) + 4698) = 0;
    *(_BYTE *)v97 = v484;
    if ((int)v505 >= 4)
    {
      v346 = 0;
      v347 = 16 * ((unint64_t)*v69 >> 2);
      v348 = v97;
      do
      {
        v349 = v348;
        v350 = v116;
        do
        {
          v351 = *v97;
          *(_QWORD *)((char *)v349 + 6) = *(_QWORD *)((char *)v97 + 6);
          *v349 = v351;
          v349 += 2;
          --v350;
        }
        while (v350);
        ++v346;
        v348 = (_QWORD *)((char *)v348 + v347);
      }
      while (v346 != v233);
    }
    if (a8 != 3 && v468)
    {
      v352 = *((_QWORD *)v69 + 18);
      *(_OWORD *)(v352 + 112) = xmmword_1B6917860;
      v352 += 112;
      *(_DWORD *)(v352 + 16) = 0;
      *(_WORD *)(v352 + 20) = 0;
      sub_1B6862264(v478, v492, v486, v69, v504, 0, v484, a8, v477, v352);
      v69 = v507;
      *(int8x16_t *)(v507 + 136) = vextq_s8(*(int8x16_t *)(v507 + 136), *(int8x16_t *)(v507 + 136), 8uLL);
      v11 = v512;
      v345 = v470;
    }
    if (v499)
    {
      v353 = v234;
      if (!v482 || v484)
      {
        v355 = v503;
        v354 = *v456 + *(_QWORD *)&v555[24 * v503];
      }
      else
      {
        v354 = *v456 + v495;
        v355 = v503;
      }
      v356 = v467;
      *((_QWORD *)v69 + 21) = v354;
      *((_DWORD *)v69 + 46) += *(_DWORD *)&v555[24 * v355 + 16];
      v357 = *((_QWORD *)v69 + 17);
      *((_QWORD *)v69 + 24) += *(_QWORD *)(v357 + 112);
      *((_DWORD *)v69 + 52) += *(_DWORD *)(v357 + 128);
      if (!v468)
      {
        *v345 = *v345 & 0xFFF3 | (4 * (v353 & 3));
        if ((int)v505 >= 8)
        {
          v358 = 0;
          v359 = 2 * ((unint64_t)*v69 >> 3);
          v360 = v345;
          do
          {
            v361 = v360;
            v362 = v505 >> 3;
            do
            {
              *v361++ = *v345;
              --v362;
            }
            while (v362);
            ++v358;
            v360 = (_WORD *)((char *)v360 + v359);
          }
          while (v358 != v505 >> 3);
        }
      }
    }
    else
    {
      *((_DWORD *)v69 + 46) += v491;
      sub_1B6862EB0(v478, v492, v486, v69, 0, v504, 0, a8, v477, (uint64_t)v456);
      v11 = v512;
      v69 = v507;
      v356 = v467;
    }
    v67 = v356 + 1;
    v363 = v462;
    v10 = v461;
    LODWORD(v9) = (_DWORD)v460;
  }
  while (v67 != v455);
  *(_QWORD *)v442 = *((_QWORD *)v69 + 18);
  if (!v11[8])
  {
    sub_1B6845554((uint64_t)v11, v461, v460, a4, *v462, *v462, a7, a8);
    v11 = v512;
    v363 = v462;
    v10 = v461;
    LODWORD(v9) = (_DWORD)v460;
  }
  if (*((int *)v11 + 1) < 3)
  {
    v388 = *(unsigned __int8 *)(*((_QWORD *)v11 + 235) + 241);
    v43 = v388 <= a4;
    v389 = v388 > a4;
    v384 = *v363;
    v385 = *((_DWORD *)*v363 + 46);
    if (!v43)
      ++v385;
    *((_DWORD *)v384 + 46) = v385;
    v386 = *((_DWORD *)v384 + 52) + (v389 << 8);
    *((_DWORD *)v384 + 52) = v386;
    v387 = a4;
  }
  else
  {
    v364 = *((_QWORD *)v11 + 118);
    v365 = *(_OWORD *)(v364 + 16);
    *(_OWORD *)(v364 + 216) = *(_OWORD *)v364;
    v366 = *(_OWORD *)(v364 + 32);
    v367 = *(_OWORD *)(v364 + 64);
    v368 = *(_OWORD *)(v364 + 80);
    *(_OWORD *)(v364 + 264) = *(_OWORD *)(v364 + 48);
    *(_OWORD *)(v364 + 280) = v367;
    *(_OWORD *)(v364 + 248) = v366;
    *(_OWORD *)(v364 + 232) = v365;
    v369 = *(_OWORD *)(v364 + 96);
    v370 = *(_OWORD *)(v364 + 128);
    v371 = *(_OWORD *)(v364 + 144);
    *(_OWORD *)(v364 + 328) = *(_OWORD *)(v364 + 112);
    *(_OWORD *)(v364 + 344) = v370;
    *(_OWORD *)(v364 + 296) = v368;
    *(_OWORD *)(v364 + 312) = v369;
    v372 = *(_OWORD *)(v364 + 176);
    *(_OWORD *)(v364 + 376) = *(_OWORD *)(v364 + 160);
    *(_OWORD *)(v364 + 392) = v372;
    v555[0] = 0;
    *(_QWORD *)(v364 + 408) = *(_QWORD *)(v364 + 192);
    *(_OWORD *)(v364 + 360) = v371;
    v373 = 8 * (*(_DWORD *)(v364 + 208) - *(_DWORD *)(v364 + 24));
    *(_QWORD *)(v364 + 32) = 0;
    *(_QWORD *)(v364 + 8) = 510;
    *(_QWORD *)(v364 + 16) = v373;
    sub_1B6841DFC((uint64_t)v11, v10, (int)v9, *v363, 1, 0, 0, 0, 0);
    v374 = *v363;
    *((_DWORD *)v374 + 4) = *((_DWORD *)*v363 + 5);
    sub_1B6847020((unint64_t *)v11, v10, (int)v9, a4, a7, (int *)v374 + 4, v555);
    v11 = v512;
    v375 = *((_QWORD *)v512 + 118);
    v363 = v462;
    *((_DWORD *)*v462 + 52) = ((*(_DWORD *)(v375 + 16) + 8 * (*(_DWORD *)(v375 + 24) - *(_DWORD *)(v375 + 208))) << 8)
                            - *(_DWORD *)(v375 + 8)
                            + 510;
    v376 = *(_OWORD *)(v375 + 360);
    v377 = *(_OWORD *)(v375 + 392);
    *(_OWORD *)(v375 + 160) = *(_OWORD *)(v375 + 376);
    *(_OWORD *)(v375 + 176) = v377;
    *(_QWORD *)(v375 + 192) = *(_QWORD *)(v375 + 408);
    v378 = *(_OWORD *)(v375 + 296);
    v379 = *(_OWORD *)(v375 + 328);
    v380 = *(_OWORD *)(v375 + 344);
    *(_OWORD *)(v375 + 96) = *(_OWORD *)(v375 + 312);
    *(_OWORD *)(v375 + 112) = v379;
    *(_OWORD *)(v375 + 128) = v380;
    *(_OWORD *)(v375 + 144) = v376;
    v381 = *(_OWORD *)(v375 + 264);
    v382 = *(_OWORD *)(v375 + 280);
    *(_OWORD *)(v375 + 32) = *(_OWORD *)(v375 + 248);
    *(_OWORD *)(v375 + 48) = v381;
    v383 = *(_OWORD *)(v375 + 232);
    *(_OWORD *)(v375 + 64) = v382;
    *(_OWORD *)(v375 + 80) = v378;
    *(_OWORD *)v375 = *(_OWORD *)(v375 + 216);
    *(_OWORD *)(v375 + 16) = v383;
    v384 = *v462;
    v385 = *((_DWORD *)*v462 + 46);
    v386 = *((_DWORD *)*v462 + 52);
    v387 = a4;
    v10 = v461;
    LODWORD(v9) = (_DWORD)v460;
  }
  *((_QWORD *)v384 + 22) = *((_QWORD *)v384 + 21)
                         + ((v385 * *(unsigned __int16 *)&v11[2 * *((__int16 *)v384 + 94) + 992]) >> (8 * (*((_WORD *)v384 + 94) == 0)));
  *((_QWORD *)v384 + 25) = *((_QWORD *)v384 + 24)
                         + ((v386 * *(unsigned __int16 *)&v11[2 * *((__int16 *)v384 + 106) + 992]) >> (8 * (*((_WORD *)v384 + 106) == 0)));
  v390 = &v11[32 * v387];
  v393 = *((_QWORD *)v390 + 4);
  v391 = v390 + 32;
  v392 = v393;
  if (a8)
    v394 = 64;
  else
    v394 = 32;
  v391[26] |= v394;
  v395 = *v363;
  v396 = *((_QWORD *)*v363 + 22);
  if (v396 < v392)
    *(_QWORD *)v391 = v396;
  v397 = 0;
  v398 = *a6;
  v399 = v10 - *((_DWORD *)*a6 + 1);
  if ((v399 & 0x80000000) == 0)
  {
    v400 = (_DWORD)v9 - *((_DWORD *)v398 + 2);
    if ((v400 & 0x80000000) == 0)
    {
      v397 = 0;
      v401 = *(unsigned __int8 *)v398;
      if (v399 < v401 && v400 < v401)
        v397 = (unint64_t)v398[12]
             + 16 * (v399 >> 2)
             + 16 * (v401 >> 2) * (unint64_t)(v400 >> 2);
    }
  }
  if (v11[1] || v11[188])
  {
    v402 = 1;
  }
  else if (*(_BYTE *)(v397 + 10) == 1)
  {
    v402 = *v11;
  }
  else
  {
    v402 = 0;
  }
  v403 = *((_DWORD *)v11 + 50);
  if (v403 < 1)
  {
    sub_1B684C0C4((uint64_t)v11, (void ***)v363, a6, v402);
  }
  else
  {
    if (*(_QWORD *)&v395[24 * v402 + 176] < (unint64_t)v398[3 * v402 + 22])
    {
      v404 = 0;
      *v363 = (unsigned __int8 *)v398;
      *a6 = (void **)v395;
      v405 = *v363;
      v406 = v10 - *((_DWORD *)*v363 + 1);
      if ((v406 & 0x80000000) == 0)
      {
        v407 = (_DWORD)v9 - *((_DWORD *)v405 + 2);
        if ((v407 & 0x80000000) == 0)
        {
          v404 = 0;
          v408 = *v405;
          if (v406 < v408 && v407 < v408)
            v404 = *((_QWORD *)v405 + 12)
                 + 16 * ((v406 >> 2) + (v408 >> 2) * (unint64_t)(v407 >> 2));
        }
      }
      v409 = 0;
      v410 = v10 - *((_DWORD *)v395 + 1);
      if ((v410 & 0x80000000) == 0)
      {
        v411 = (_DWORD)v9 - *((_DWORD *)v395 + 2);
        if ((v411 & 0x80000000) == 0)
        {
          v409 = 0;
          v412 = *v395;
          if (v410 < v412 && v411 < v412)
            v409 = *((_QWORD *)v395 + 12)
                 + 16 * ((v410 >> 2) + (v412 >> 2) * (unint64_t)(v411 >> 2));
        }
      }
      v413 = *v405;
      LODWORD(v414) = v413 >> 2;
      v415 = *(unsigned __int8 *)(v404 + 10);
      if (v403 == 2)
      {
        if (v415 == 1)
        {
          if (v413 >= 4)
          {
            v416 = 0;
            if (v414 <= 1)
              v414 = 1;
            else
              v414 = v414;
            do
            {
              v417 = (char *)(v404 + 13);
              v418 = (_BYTE *)(v409 + 13);
              v419 = v414;
              do
              {
                *(_DWORD *)(v418 - 9) = *(_DWORD *)(v417 - 9);
                *(v418 - 1) = *(v417 - 1);
                v420 = *v417;
                v417 += 16;
                *v418 = v420;
                v418 += 16;
                --v419;
              }
              while (v419);
              v409 += (4 * *v395) & 0x3F0;
              v404 += (4 * *v405) & 0x3F0;
              ++v416;
            }
            while (v416 != (_DWORD)v414);
          }
        }
        else
        {
          v426 = *(_QWORD *)(*((_QWORD *)v11 + 234) + 1360);
          if (((v9 | v10) & 0x80000000) != 0
            || *(_DWORD *)(v426 + 276) <= v10
            || *(_DWORD *)(v426 + 280) <= (int)v9)
          {
            v427 = 0;
          }
          else
          {
            v427 = *(_QWORD *)(v426 + 592) + 4 * (*(_QWORD *)(v426 + 552) * ((uint64_t)(int)v9 >> 2) + (v10 >> 2));
          }
          if (v413 >= 4)
          {
            v433 = 0;
            if (v414 <= 1)
              LODWORD(v414) = 1;
            v434 = 4 * *(_QWORD *)(v426 + 552);
            do
            {
              v435 = 0;
              v436 = (char *)(v404 + 9);
              v437 = (_BYTE *)(v409 + 12);
              do
              {
                *((_DWORD *)v437 - 2) = *(_DWORD *)(v436 - 9);
                *(_DWORD *)(v427 + v435) = *(_DWORD *)(v436 - 5);
                *v437 = *(v436 - 1);
                v438 = *v436;
                v436 += 16;
                v437[1] = v438;
                v435 += 4;
                v437 += 16;
              }
              while (4 * v414 != v435);
              v409 += (4 * *v395) & 0x3F0;
              v404 += (4 * *v405) & 0x3F0;
              ++v433;
              v427 += v434;
            }
            while (v433 != (_DWORD)v414);
          }
        }
      }
      else if (v415 == 1)
      {
        if (v413 >= 4)
        {
          v421 = 0;
          if (v414 <= 1)
            v414 = 1;
          else
            v414 = v414;
          do
          {
            v422 = (char *)(v404 + 13);
            v423 = (_BYTE *)(v409 + 13);
            v424 = v414;
            do
            {
              *(_DWORD *)(v423 - 9) = *(_DWORD *)(v422 - 9);
              *(v423 - 1) = *(v422 - 1);
              v425 = *v422;
              v422 += 16;
              *v423 = v425;
              v423 += 16;
              --v424;
            }
            while (v424);
            v409 += (4 * *v395) & 0x3F0;
            v404 += (4 * *v405) & 0x3F0;
            ++v421;
          }
          while (v421 != (_DWORD)v414);
        }
      }
      else if (v413 >= 4)
      {
        v428 = 0;
        if (v414 <= 1)
          v414 = 1;
        else
          v414 = v414;
        do
        {
          v429 = (char *)(v404 + 9);
          v430 = (_BYTE *)(v409 + 12);
          v431 = v414;
          do
          {
            *((_DWORD *)v430 - 2) = *(_DWORD *)(v429 - 9);
            *v430 = *(v429 - 1);
            v432 = *v429;
            v429 += 16;
            v430[1] = v432;
            v430 += 16;
            --v431;
          }
          while (v431);
          v409 += (4 * *v395) & 0x3F0;
          v404 += (4 * *v405) & 0x3F0;
          ++v428;
        }
        while (v428 != (_DWORD)v414);
      }
      v395 = *v363;
    }
    v439 = (__int16 *)*((_QWORD *)v395 + 11);
    v440 = *v439;
    bzero(v439, 2 * ((unint64_t)*v395 >> 3) * ((unint64_t)*v395 >> 3));
    **((_WORD **)v395 + 11) = **((_WORD **)v395 + 11) & 0xFFFC | v440 & 3;
    **((_WORD **)v395 + 11) = v440 & 0xFE00 | **((_WORD **)v395 + 11) & 0x1FF;
    sub_1B683A720((void **)*v363, *(unsigned __int8 *)(*((_QWORD *)v11 + 234) + 10) < 2u);
    v441 = *v363;
    *((_DWORD *)v441 + 46) = 0;
    *(_OWORD *)(v441 + 168) = xmmword_1B6917860;
    *((_WORD *)v441 + 94) = 2;
    *((_DWORD *)v441 + 52) = 0;
    *((_OWORD *)v441 + 12) = xmmword_1B6917860;
    *((_WORD *)v441 + 106) = 0;
  }
  *(_DWORD *)&v11[4 * v387 + 8088] &= ~(512 << a8);
}

BOOL sub_1B684C0C4(uint64_t a1, void ***a2, void ***a3, unsigned int a4)
{
  void **v6;
  void *v7;
  void *v8;
  _BOOL8 v9;
  __int16 *v10;
  __int16 v11;
  void **v12;

  v6 = *a2;
  v7 = (*a2)[3 * a4 + 22];
  v8 = (*a3)[3 * a4 + 22];
  if (v7 < v8)
  {
    *a2 = *a3;
    *a3 = v6;
    v6 = *a2;
  }
  v9 = v7 < v8;
  v10 = (__int16 *)v6[11];
  v11 = *v10;
  bzero(v10, 2 * ((unint64_t)*(unsigned __int8 *)v6 >> 3) * ((unint64_t)*(unsigned __int8 *)v6 >> 3));
  *(_WORD *)v6[11] = *(_WORD *)v6[11] & 0xFFFC | v11 & 3;
  *(_WORD *)v6[11] = v11 & 0xFE00 | *(_WORD *)v6[11] & 0x1FF;
  sub_1B683A720(*a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 1872) + 10) < 2u);
  v12 = *a2;
  *((_DWORD *)v12 + 46) = 0;
  *(_OWORD *)(v12 + 21) = xmmword_1B6917860;
  *((_WORD *)v12 + 94) = 2;
  *((_DWORD *)v12 + 52) = 0;
  *((_OWORD *)v12 + 12) = xmmword_1B6917860;
  *((_WORD *)v12 + 106) = 0;
  return v9;
}

BOOL sub_1B684C1AC(uint64_t a1, int a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned __int8 *a7)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  char v24;
  int v25;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;

  v7 = *(_QWORD *)(a1 + 1872);
  v8 = (uint64_t *)(v7 + 79296);
  v9 = *(_QWORD *)(v7 + 1368);
  v10 = *(_BYTE *)(v9 + 2009);
  v11 = *(unsigned __int8 *)(v9 + 2013) - 1;
  v12 = v11 & a5;
  LODWORD(v9) = (a5 >> v10) + (a6 >> v10) * *(_DWORD *)(v9 + 2016);
  v13 = (v11 & a6) >> (v10 - a4);
  v14 = v12 >> (v10 - a4);
  v15 = *v8;
  v16 = v14 + v13 * byte_1B692260D[a4] + *((_DWORD *)v8 + 2) * (_DWORD)v9 + byte_1B6922609[a4];
  v17 = v15 + 32 * v16;
  v18 = 1;
  if ((*(_BYTE *)(v17 + 26) & 0x80) != 0 && (*(_BYTE *)(v17 + 26) & 0x18) != 8)
  {
    v20 = *((_QWORD *)a7 + 22);
    v21 = *(_QWORD *)(v15 + 32 * v16 + 8);
    v22 = v20 >= v21;
    v23 = 100 * (v20 - v21);
    if (!v22)
      v23 = 0;
    if (v23 / (v20 + 1) > 0x22)
      return 1;
    v24 = a4;
    v25 = a3;
    v27 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2013);
    if (sub_1B684C378(a2, a3, a7, v17))
      return 0;
    v28 = v27 >> (v24 + 1);
    v29 = (*(unsigned __int16 *)(*((_QWORD *)a7 + 11)
                               + 2
                               * (((a2 - *((_DWORD *)a7 + 1)) >> 3)
                                + ((unint64_t)*a7 >> 3) * ((v25 - *((_DWORD *)a7 + 2)) >> 3))) >> 4) & 7;
    switch(v29)
    {
      case 3:
        if (sub_1B684C378(v28 + a2, v25, a7, v17))
          return 0;
        v25 += v28;
        if (sub_1B684C378(a2, v25, a7, v17))
          return 0;
        v31 = v28 + a2;
        break;
      case 2:
        v31 = v28 + a2;
        break;
      case 1:
        v30 = v28 + v25;
        v31 = a2;
        return !sub_1B684C378(v31, v30, a7, v17);
      default:
        return 1;
    }
    v30 = v25;
    return !sub_1B684C378(v31, v30, a7, v17);
  }
  return v18;
}

BOOL sub_1B684C378(int a1, int a2, unsigned __int8 *a3, uint64_t a4)
{
  __int16 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  int v11;
  int v12;
  _BOOL4 v13;
  int v15;

  v4 = (__int16 *)(*((_QWORD *)a3 + 12)
                 + 16
                 * (((a1 - *((_DWORD *)a3 + 1)) >> 2)
                  + ((unint64_t)*a3 >> 2) * ((a2 - *((_DWORD *)a3 + 2)) >> 2)));
  v5 = *(unsigned __int8 *)(a4 + 24);
  if (v5 != *((unsigned __int8 *)v4 + 8))
    return 0;
  v6 = *(unsigned __int8 *)(a4 + 25);
  if (v6 != *((unsigned __int8 *)v4 + 9))
    return 0;
  if (v5 == 255)
    goto LABEL_10;
  v7 = *(__int16 *)(a4 + 16) - *v4;
  if (v7 < 0)
    v7 = *v4 - *(__int16 *)(a4 + 16);
  if (v7 > 5)
  {
LABEL_10:
    v9 = 0;
  }
  else
  {
    v8 = *(__int16 *)(a4 + 18) - v4[1];
    if (v8 < 0)
      v8 = v4[1] - *(__int16 *)(a4 + 18);
    v9 = v8 < 6;
  }
  if (v5 != 255 && !v9)
    return 0;
  if (v6 == 255)
    goto LABEL_23;
  v11 = *(__int16 *)(a4 + 20) - v4[2];
  if (v11 < 0)
    v11 = v4[2] - *(__int16 *)(a4 + 20);
  if (v11 > 5)
  {
LABEL_23:
    v13 = 0;
  }
  else
  {
    v12 = *(__int16 *)(a4 + 22) - v4[3];
    if (v12 < 0)
      v12 = -v12;
    v13 = v12 < 6;
  }
  v15 = v6 == 255 || v13;
  return v15 != 0;
}

BOOL sub_1B684C468(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, int a7, unsigned int a8, unsigned __int8 a9)
{
  int v9;
  unsigned __int8 **v10;
  unsigned __int16 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v22;
  unsigned __int8 *v23;
  __int128 v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  int v76;
  _BOOL8 result;
  _WORD *v78;
  void **v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  _WORD *v84;
  _WORD *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int8 **v89;
  unsigned __int16 *v90;
  unint64_t v91;
  int v92;
  int v93;
  _QWORD *v95;
  char v97;
  __int128 v98;
  int v99;
  __int16 v100;

  v9 = a7;
  v10 = a5;
  v15 = 0;
  v16 = *a5;
  v17 = a2 - *((_DWORD *)*a5 + 1);
  v18 = **a5;
  if ((v17 & 0x80000000) != 0)
  {
    v20 = 0;
  }
  else
  {
    v19 = a3 - *((_DWORD *)v16 + 2);
    v20 = 0;
    if ((v19 & 0x80000000) == 0)
    {
      if (v17 >= v18 || v19 >= v18)
      {
        v15 = 0;
        v20 = 0;
      }
      else
      {
        v15 = (unsigned __int16 *)(*((_QWORD *)v16 + 11)
                                 + 2 * ((v17 >> 3) + (v18 >> 3) * (unint64_t)(v19 >> 3)));
        v20 = *((_QWORD *)v16 + 12) + 16 * ((v17 >> 2) + (v18 >> 2) * (unint64_t)(v19 >> 2));
      }
    }
  }
  v90 = v15;
  v91 = v20;
  v22 = (1 << (*(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2009) - a4));
  sub_1B683A840(a1, v15, a4, a7, 0, v18 >> 3, *((_DWORD *)v16 + 3));
  v23 = *v10;
  v24 = xmmword_1B6917860;
  v25 = *v10;
  *(_OWORD *)(v25 + 168) = xmmword_1B6917860;
  v95 = v25 + 168;
  *((_DWORD *)v23 + 46) = 0;
  *((_WORD *)v23 + 94) = 2;
  v93 = v9;
  v26 = a4;
  v27 = ((int)v22 >> 1);
  v28 = a3;
  v29 = a9;
  switch(v9)
  {
    case 0:
      sub_1B684CDF4(a1, a2, v28, v26, v10, a6, v22, v22, 0, a8, (uint64_t)v95, a9, 1);
      v30 = a1 + 32 * v26;
      *(_DWORD *)(v30 + 48) = *(_DWORD *)v91;
      *(_BYTE *)(v30 + 56) = *(_BYTE *)(v91 + 8);
      *(_DWORD *)(v30 + 52) = *(_DWORD *)(v91 + 4);
      *(_BYTE *)(v30 + 57) = *(_BYTE *)(v91 + 9);
      goto LABEL_14;
    case 1:
      sub_1B684CDF4(a1, a2, v28, v26, v10, a6, v22, v27, 1, a8, (uint64_t)v95, a9, 1);
      a2 = a2;
      sub_1B684CDF4(a1, a2, (v27 + v28), v26, v10, a6, v22, v27, 1, a8, (uint64_t)v95, a9, 1);
      goto LABEL_14;
    case 2:
      sub_1B684CDF4(a1, a2, v28, v26, v10, a6, ((int)v22 >> 1), v22, 2, a8, (uint64_t)v95, a9, 1);
      a2 = a2;
      sub_1B684CDF4(a1, v27 + a2, v28, v26, v10, a6, v27, v22, 2, a8, (uint64_t)v95, a9, 1);
LABEL_14:
      v29 = v28;
      LODWORD(v28) = v26;
      goto LABEL_16;
    case 3:
      sub_1B684CDF4(a1, a2, v28, v26, v10, a6, v27, v27, 3, a8, (uint64_t)v95, a9, 1);
      sub_1B684CDF4(a1, v27 + a2, v28, v26, v10, a6, v27, v27, 3, a8, (uint64_t)v95, a9, 1);
      sub_1B684CDF4(a1, a2, (v27 + v28), v26, v10, a6, v27, v27, 3, a8, (uint64_t)v95, a9, 1);
      a2 = a2;
      sub_1B684CDF4(a1, v27 + a2, (v27 + v28), v26, v10, a6, v27, v27, 3, a8, (uint64_t)v95, a9, 1);
      v29 = v28;
      LODWORD(v28) = v26;
LABEL_16:
      v24 = xmmword_1B6917860;
      break;
    default:
      break;
  }
  if (!*(_BYTE *)(a1 + 8) && !*(_BYTE *)(a1 + 188))
  {
    sub_1B6843EDC(a1, a2, v29, v28, *v10, 0, 1, 0, 0);
    v31 = 0;
    v32 = v29;
    v33 = *v10;
    v92 = v28;
    v34 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009) + ~(_DWORD)v28;
    v35 = (a2 - *((_DWORD *)*v10 + 1));
    v28 = v32;
    v36 = v32 - *((_DWORD *)*v10 + 2);
    v89 = v10;
    if ((v35 & 0x80000000) == 0 && (v36 & 0x80000000) == 0)
    {
      v31 = 0;
      v37 = *v33;
      if (v35 < v37 && v36 < v37)
      {
        v38 = v34;
        v39 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)v33 + 5) + 24))(*((_QWORD *)v33 + 5), v35 + v33[1] * (unint64_t)(v36 >> 1) + *((_QWORD *)v33 + 6), 0);
        v34 = v38;
        v31 = v39;
        LODWORD(v35) = a2 - *((_DWORD *)v33 + 1);
        v36 = v28 - *((_DWORD *)v33 + 2);
      }
    }
    v40 = 0;
    v41 = v33[1];
    v42 = *((_QWORD *)v33 + 17);
    v43 = *(unsigned __int8 *)(v42 + 1);
    v44 = *(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8 * v34 + 1216);
    if ((v35 & 0x80000000) == 0 && (v36 & 0x80000000) == 0)
    {
      v40 = 0;
      v45 = *v33;
      if (v35 < v45 && v36 < v45)
      {
        v46 = v34;
        v47 = v31;
        v48 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v42 + 96) + 24))(*(_QWORD *)(v42 + 96), *(_QWORD *)(v42 + 104)+ v35+ *(unsigned __int8 *)(v42 + 1) * (unint64_t)(v36 & 0xFFFFFFFE));
        v31 = v47;
        LOBYTE(v34) = v46;
        v40 = v48;
      }
    }
    *v95 += ((*(unsigned __int16 *)(a1 + 1002)
                          * (unint64_t)v44((1 << v34), (1 << v34), v31, v41, v40, 2 * v43)) >> 8);
    v9 = v93;
    v29 = v28;
    LODWORD(v28) = v92;
    v10 = v89;
    v24 = xmmword_1B6917860;
  }
  if (*(_BYTE *)(a1 + 188))
  {
    if (v9)
    {
      *((_DWORD *)v23 + 52) = 0;
      *((_OWORD *)v23 + 12) = v24;
      *((_WORD *)v23 + 106) = 2;
      sub_1B6843EDC(a1, a2, v29, v28, *v10, 1, *(_BYTE *)(a1 + 8) == 0, 0, (unsigned int *)v23 + 48);
      if (!*(_BYTE *)(a1 + 8127))
      {
        *((_DWORD *)v23 + 52) = 0;
        *((_OWORD *)v23 + 12) = xmmword_1B6917860;
        *((_WORD *)v23 + 106) = 2;
        sub_1B6848F80(a1, a2, v29, v28, *v10, (uint64_t)(v23 + 192));
      }
      v99 = 0;
      v98 = xmmword_1B6917860;
      v100 = 0;
      *((_DWORD *)v23 + 52) = 0;
      *((_OWORD *)v23 + 12) = xmmword_1B6917860;
      *((_WORD *)v23 + 106) = 0;
      sub_1B6846954(a1, a2, v29, v28, *v10, (uint64_t)(v23 + 192), (uint64_t)&v98, 0, 0);
      v49 = *(_QWORD *)(a1 + 944);
      v50 = *(_OWORD *)(v49 + 16);
      *(_OWORD *)(v49 + 216) = *(_OWORD *)v49;
      v51 = *(_OWORD *)(v49 + 32);
      v52 = *(_OWORD *)(v49 + 64);
      v53 = *(_OWORD *)(v49 + 80);
      *(_OWORD *)(v49 + 264) = *(_OWORD *)(v49 + 48);
      *(_OWORD *)(v49 + 280) = v52;
      *(_OWORD *)(v49 + 248) = v51;
      *(_OWORD *)(v49 + 232) = v50;
      v54 = *(_OWORD *)(v49 + 96);
      v55 = *(_OWORD *)(v49 + 128);
      v56 = *(_OWORD *)(v49 + 144);
      *(_OWORD *)(v49 + 328) = *(_OWORD *)(v49 + 112);
      *(_OWORD *)(v49 + 344) = v55;
      *(_OWORD *)(v49 + 296) = v53;
      *(_OWORD *)(v49 + 312) = v54;
      v57 = *(_OWORD *)(v49 + 176);
      *(_OWORD *)(v49 + 376) = *(_OWORD *)(v49 + 160);
      *(_OWORD *)(v49 + 392) = v57;
      v97 = 0;
      *(_QWORD *)(v49 + 408) = *(_QWORD *)(v49 + 192);
      *(_OWORD *)(v49 + 360) = v56;
      v58 = 8 * (*(_DWORD *)(v49 + 208) - *(_DWORD *)(v49 + 24));
      *(_QWORD *)(v49 + 32) = 0;
      *(_QWORD *)(v49 + 8) = 510;
      *(_QWORD *)(v49 + 16) = v58;
      sub_1B6841DFC(a1, a2, v29, *v10, 1, 0, *(_BYTE *)(a1 + 8127), 1, 0);
      v59 = *v10;
      *((_DWORD *)v59 + 4) = *((_DWORD *)*v10 + 5);
      sub_1B6847020((unint64_t *)a1, a2, v29, v28, a8, (int *)v59 + 4, &v97);
      v60 = *(_QWORD *)(a1 + 944);
      *((_DWORD *)v23 + 52) = *((_DWORD *)v23 + 52)
                            - *(_DWORD *)(v60 + 8)
                            + ((*(_DWORD *)(v60 + 16) + 8 * (*(_DWORD *)(v60 + 24) - *(_DWORD *)(v60 + 208))) << 8)
                            + 510;
      v62 = *(_OWORD *)(v60 + 264);
      v61 = *(_OWORD *)(v60 + 280);
      *(_OWORD *)(v60 + 32) = *(_OWORD *)(v60 + 248);
      *(_OWORD *)(v60 + 48) = v62;
      v64 = *(_OWORD *)(v60 + 328);
      v63 = *(_OWORD *)(v60 + 344);
      v65 = *(_OWORD *)(v60 + 296);
      *(_OWORD *)(v60 + 96) = *(_OWORD *)(v60 + 312);
      *(_OWORD *)(v60 + 112) = v64;
      *(_OWORD *)(v60 + 64) = v61;
      *(_OWORD *)(v60 + 80) = v65;
      v66 = *(_OWORD *)(v60 + 392);
      v67 = *(_OWORD *)(v60 + 360);
      *(_OWORD *)(v60 + 160) = *(_OWORD *)(v60 + 376);
      *(_OWORD *)(v60 + 176) = v66;
      v68 = *(_OWORD *)(v60 + 232);
      *(_QWORD *)(v60 + 192) = *(_QWORD *)(v60 + 408);
      *(_OWORD *)(v60 + 128) = v63;
      *(_OWORD *)(v60 + 144) = v67;
      *(_OWORD *)v60 = *(_OWORD *)(v60 + 216);
      *(_OWORD *)(v60 + 16) = v68;
      *((_QWORD *)v23 + 25) = *((_QWORD *)v23 + 24)
                            + ((*((_DWORD *)v23 + 52)
                              * *(unsigned __int16 *)(a1 + 2 * *((__int16 *)v23 + 106) + 992)) >> (8 * (*((_WORD *)v23 + 106) == 0)));
      v69 = *(unsigned __int8 *)(a1 + 188);
    }
    else
    {
      v69 = 1;
    }
  }
  else
  {
    v69 = 0;
    v70 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 241);
    v71 = *(unsigned __int8 *)(v91 + 10) - 1;
    v72 = v70 <= (int)v28;
    v73 = *((_DWORD *)v23 + 46) + byte_1B692360C[3 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 1872) + 10) + v71];
    *((_DWORD *)v23 + 46) = v73;
    v74 = byte_1B6923615[12 * (v70 == (_DWORD)v28) + 4 * v71 + (((unint64_t)*v90 >> 4) & 7)];
    if (v72)
      v75 = v73;
    else
      v75 = v73 + 1;
    v76 = v75 + v74;
    *((_DWORD *)v23 + 46) = v76;
    *((_QWORD *)v23 + 22) = *((_QWORD *)v23 + 21)
                          + ((v76 * *(unsigned __int16 *)(a1 + 2 * *((__int16 *)v23 + 94) + 992)) >> (8 * (*((_WORD *)v23 + 94) == 0)));
  }
  result = sub_1B684C0C4(a1, (void ***)v10, a6, v69);
  if (result && !*(_BYTE *)(a1 + 188))
  {
    v78 = 0;
    v79 = *a6;
    v80 = a2 - *((_DWORD *)*a6 + 1);
    v81 = *(unsigned __int8 *)*a6;
    if ((v80 & 0x80000000) == 0)
    {
      v82 = v29 - *((_DWORD *)v79 + 2);
      if ((v82 & 0x80000000) == 0)
      {
        v78 = 0;
        if (v80 < v81 && v82 < v81)
          v78 = (char *)v79[11] + 2 * (v80 >> 3) + 2 * (v81 >> 3) * (unint64_t)(v82 >> 3);
      }
    }
    if ((int)v22 >= 8)
    {
      v83 = 0;
      v84 = v78;
      do
      {
        v85 = v84;
        v86 = v22 >> 3;
        do
        {
          *v85++ = *v78;
          --v86;
        }
        while (v86);
        ++v83;
        v84 += v81 >> 3;
      }
      while (v83 != v22 >> 3);
    }
  }
  v87 = a1 + 4 * (int)v28;
  v88 = *(_DWORD *)(v87 + 8088) & ~(1 << v9);
  if (!v9)
    v88 &= ~0x100u;
  *(_DWORD *)(v87 + 8088) = v88;
  *(_BYTE *)(a1 + (int)v28 + 8108) = 1;
  return result;
}

void sub_1B684CDF4(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned __int8 **a5, void ***a6, uint64_t a7, int a8, int a9, unsigned int a10, uint64_t a11, char a12, char a13)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned __int8 *v29;
  uint64_t v30;
  void **v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  __int16 v40;
  unsigned __int8 *v41;
  int v42;
  char v43;
  uint64_t *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  uint64_t v54;
  unsigned int v55;
  char v57;
  unsigned __int8 *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  __int128 v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v99;
  int v100;
  BOOL v102;
  int v103;
  BOOL v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  int v115;
  _DWORD *v116;
  uint64_t v117;
  BOOL v118;
  int v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unsigned int v124;
  uint64_t (**v125)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  unsigned __int8 *v138;
  int v139;
  char v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned __int8 *v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  _BOOL4 v154;
  uint64_t v155;
  int v156;
  unsigned __int8 *v157;
  unsigned __int8 *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v163;
  __int128 v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  int v171;
  __int32 *v172;
  BOOL v173;
  __int32 v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  signed int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  char v187;
  int v188;
  int v189;
  int v190;
  unsigned __int8 *v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _WORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  uint64_t v222;
  unint64_t v223;
  unsigned int v224;
  unsigned int v225;
  unint64_t v226;
  unsigned int v227;
  unint64_t v228;
  int v229;
  uint64_t v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  unint64_t v234;
  unint64_t v235;
  unsigned int v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  unsigned int v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  int v260;
  uint64_t v261;
  char v262;
  int v263;
  char *v264;
  uint64_t v265;
  unsigned int v266;
  int v267;
  int v268;
  _QWORD *v269;
  uint64_t v270;
  int v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  unsigned __int8 *v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t *v279;
  char v280;
  const std::nothrow_t *v281;
  unint64_t v282;
  uint64_t *v283;
  uint64_t *v284;
  uint64_t v285;
  unsigned int v286;
  unint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  __int32 *v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  int v296;
  unint64_t v297;
  _BOOL4 v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  int v309;
  unint64_t v310;
  __int128 v311;
  __int128 v312;
  int v313;
  int v314;
  unint64_t v315;
  uint64_t v316;
  int v317;
  int v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  int v322;
  uint64_t *v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t *v330;
  int v331;
  int v332;
  int v333;
  int v334;
  signed int v335;
  uint64_t v336;
  uint64_t *v337;
  int32x4_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _DWORD *v344;
  uint64_t v345;
  _BYTE *v346;
  uint64_t v347;
  signed int v348;
  uint64_t v349;
  int v350;
  unint64_t v351;
  uint64_t v352;
  char v353;
  uint64_t v354;
  unint64_t v355;
  unsigned int v356;
  unint64_t v357;
  char v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned __int8 *v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  uint64_t v368;
  unsigned int v369;
  unint64_t v370;
  unsigned __int16 *v371;
  unint64_t v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t v375;
  _QWORD *v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _WORD *v382;
  _WORD *v383;
  uint64_t v384;
  unsigned __int8 *v385;
  uint64_t v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  uint64_t v395;
  uint64_t v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  uint64_t v405;
  int v406;
  uint64_t *v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  _QWORD *v411;
  _QWORD *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  _BOOL4 v418;
  uint64_t v419;
  void (**v420)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  unint64_t v421;
  uint64_t v422;
  int v423;
  int v424;
  int v425;
  unsigned __int8 *v426;
  int v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  char v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _DWORD *v438;
  unint64_t v439;
  int v440;
  _DWORD *v441;
  unsigned __int8 *v442;
  int v443;
  uint64_t v444;
  _BOOL4 v445;
  uint64_t (*v446)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v447;
  uint64_t v448;
  char v449;
  uint64_t v450;
  _BYTE *v452;
  _WORD *v453;
  int v454;
  int v455;
  _DWORD *v456;
  uint64_t v457;
  uint64_t v458;
  _DWORD *v459;
  int v460;
  int v461;
  _BYTE *v462;
  unsigned __int8 *v463;
  int v464;
  uint64_t v465;
  int v466;
  char v467;
  _QWORD *v468;
  int v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  unsigned int *v474;
  uint64_t v475;
  int v478;
  uint64_t v479;
  int v480;
  int v481;
  _DWORD *v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  uint64_t v488;
  __int128 v492;
  uint64_t v493;
  __int16 v494;
  __int16 v495;
  int v496;
  int v497;
  _DWORD v498[2];
  _DWORD v499[2];
  __int128 v500;
  __int128 v501;
  int v502;
  __int16 v503;
  uint64_t v504;

  v13 = a7;
  v14 = a3;
  v15 = a1;
  v504 = *MEMORY[0x1E0C80C00];
  v484 = a1 + 8024;
  v16 = *a5;
  v17 = a2 - *((_DWORD *)*a5 + 1);
  v18 = a3 - *((_DWORD *)*a5 + 2);
  if (((v17 | v18) & 0x80000000) != 0
    || ((v19 = *v16, v17 < v19) ? (v20 = v18 >= v19) : (v20 = 1), v20))
  {
    v21 = 0;
  }
  else
  {
    v21 = *((_QWORD *)v16 + 12) + 16 * ((v17 >> 2) + (v19 >> 2) * (unint64_t)(v18 >> 2));
  }
  LOBYTE(v495) = 3;
  v494 = -1;
  BYTE10(v492) = 3;
  BYTE8(v492) = -1;
  if (a9)
    v22 = 1;
  else
    v22 = *(_BYTE *)(a1 + 188) == 0;
  v23 = v22;
  v431 = v21;
  v442 = (unsigned __int8 *)(a1 + 4928);
  v425 = v23;
  if (!a12)
  {
LABEL_70:
    v423 = 0;
    v422 = 0;
    v95 = -1;
    goto LABEL_172;
  }
  if ((v23 & 1) == 0)
  {
    v29 = (unsigned __int8 *)*((_QWORD *)v16 + 17);
    v448 = *v29;
    v30 = v29[1];
    WORD3(v501) = *((_DWORD *)v16 + 3);
    v31 = *a6;
    *((_DWORD *)v31 + 52) = 0;
    *((_OWORD *)v31 + 12) = xmmword_1B6917860;
    *((_WORD *)v31 + 106) = 0;
    sub_1B683B8C8(a1, a2, a3, v16, a7, a8, a1 + 4928);
    v32 = *(_DWORD *)(v15 + 4 * a4 + 8088);
    if (((int)v13 < 8 || a8 <= 7) && *(unsigned __int8 *)(*(_QWORD *)(v15 + 1880) + 2009) - a4 == 3)
    {
      v33 = v442[60];
      if (v442[60])
      {
        v34 = v442;
        do
        {
          if (*v34 != 255 && v34[1] != 255)
          {
            v34[1] = -1;
            *((_DWORD *)v34 + 2) = 0;
          }
          v34 += 12;
          --v33;
        }
        while (v33);
      }
    }
    v35 = v442[60];
    if (v442[60])
    {
      v36 = 0;
      v444 = 2 * v30;
      if ((int)v13 >> 2 <= 1)
        v37 = 1;
      else
        v37 = ((int)v13 >> 2);
      v443 = (v32 >> 8) & 1;
      do
      {
        if (!sub_1B684535C((uint64_t)v442, v36))
        {
          LOBYTE(v38) = 0;
          v39 = v36;
          v40 = 0;
          v467 = 2 * (v39 & 7);
          v439 = v39;
          v41 = &v442[12 * v39];
          v456 = v41 + 8;
          v459 = v41 + 4;
          v463 = v41;
          v452 = v41 + 1;
          v42 = 1;
          v43 = 3;
          do
          {
            if ((v38 & 1) != 0)
              break;
            v44 = 0;
            v45 = *a5;
            v46 = a2 - *((_DWORD *)*a5 + 1);
            v47 = v14 - *((_DWORD *)*a5 + 2);
            v478 = v42;
            if ((v46 & 0x80000000) != 0 || (v47 & 0x80000000) != 0)
            {
              v53 = 0;
              v52 = 0;
            }
            else
            {
              v48 = *v45;
              if (v46 >= v48 || v47 >= v48)
              {
                v44 = 0;
                v53 = 0;
                v52 = 0;
              }
              else
              {
                v50 = *((_QWORD *)v45 + 11);
                v51 = *((_QWORD *)v45 + 12);
                v52 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)v45 + 17) + 80)
                                                                          + 24))(*(_QWORD *)(*((_QWORD *)v45 + 17) + 80), *(_QWORD *)(*((_QWORD *)v45 + 17) + 88)+ v46+ **((unsigned __int8 **)v45 + 17) * (unint64_t)v47);
                v53 = (unsigned __int16 *)(v50
                                         + 2 * ((v46 >> 3) + (v48 >> 3) * (unint64_t)(v47 >> 3)));
                v44 = (uint64_t *)(v51 + 16 * ((v46 >> 2) + (v48 >> 2) * (unint64_t)(v47 >> 2)));
                v45 = *a5;
                v46 = a2 - *((_DWORD *)*a5 + 1);
                v47 = a3 - *((_DWORD *)*a5 + 2);
              }
            }
            v54 = 0;
            if ((v46 & 0x80000000) == 0 && (v47 & 0x80000000) == 0)
            {
              v55 = *v45;
              if (v46 >= v55 || v47 >= v55)
                v54 = 0;
              else
                v54 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)v45 + 17) + 96)
                                                                          + 24))(*(_QWORD *)(*((_QWORD *)v45 + 17) + 96), *(_QWORD *)(*((_QWORD *)v45 + 17) + 104)+ v46+ *(unsigned __int8 *)(*((_QWORD *)v45 + 17) + 1) * (unint64_t)(v47 & 0xFFFFFFFE));
            }
            *v53 = *v53 & 0xFF73 | v40;
            v57 = *((_BYTE *)v44 + 11);
            *((_BYTE *)v44 + 10) = v43;
            *((_BYTE *)v44 + 11) = v57 & 0xF0 | v467 | 1;
            *(_DWORD *)v44 = *v459;
            *((_BYTE *)v44 + 8) = *v463;
            *((_DWORD *)v44 + 1) = *v456;
            *((_BYTE *)v44 + 9) = *v452;
            v58 = *a5;
            v59 = **a5;
            if (a8 < 4)
            {
              v63 = a7;
            }
            else
            {
              v60 = 0;
              v61 = 16 * (v59 >> 2);
              v62 = v44;
              v63 = a7;
              do
              {
                v64 = v62;
                v65 = v37;
                if ((int)a7 >= 4)
                {
                  do
                  {
                    v66 = *v44;
                    *(_QWORD *)((char *)v64 + 6) = *(uint64_t *)((char *)v44 + 6);
                    *v64 = v66;
                    v64 += 2;
                    --v65;
                  }
                  while (v65);
                }
                ++v60;
                v62 = (_QWORD *)((char *)v62 + v61);
              }
              while (v60 != a8 >> 2);
              v58 = *a5;
              v59 = **a5;
            }
            sub_1B683A840(a1, v53, a4, 0, (*v53 >> 7) & 1, v59 >> 3, *((_DWORD *)v58 + 3));
            sub_1B687A6EC(*(_QWORD *)(a1 + 1872), (unsigned int *)v44, a2, a3, v63, v63, v448, v52, v444, v54);
            v67 = *a5;
            *((_DWORD *)v67 + 52) = 0;
            v68 = xmmword_1B6917860;
            *((_OWORD *)v67 + 12) = xmmword_1B6917860;
            *((_WORD *)v67 + 106) = 0;
            if (*(_BYTE *)(v484 + 103))
            {
              v15 = a1;
              v69 = a3;
              v70 = a2;
            }
            else
            {
              LODWORD(v501) = 0;
              v500 = xmmword_1B6917860;
              WORD2(v501) = 2;
              v15 = a1;
              sub_1B6848F80(a1, a2, a3, a4, v67, (uint64_t)&v500);
              v67 = *a5;
              v69 = a3;
              v70 = a2;
              v68 = xmmword_1B6917860;
            }
            LODWORD(v501) = 0;
            v500 = v68;
            WORD2(v501) = 0;
            sub_1B6846954(v15, v70, v69, a4, v67, (uint64_t)(v67 + 192), (uint64_t)&v500, 0, 0);
            v71 = *(unsigned __int16 *)(*((_QWORD *)*a5 + 11)
                                      + 2
                                      * (((a2 - *((_DWORD *)*a5 + 1)) >> 3)
                                       + ((unint64_t)**a5 >> 3)
                                       * ((a3 - *((_DWORD *)*a5 + 2)) >> 3)));
            v72 = *(_QWORD *)(v15 + 944);
            v73 = *(_OWORD *)(v72 + 16);
            *(_OWORD *)(v72 + 216) = *(_OWORD *)v72;
            v74 = *(_OWORD *)(v72 + 32);
            v75 = *(_OWORD *)(v72 + 64);
            v76 = *(_OWORD *)(v72 + 80);
            *(_OWORD *)(v72 + 264) = *(_OWORD *)(v72 + 48);
            *(_OWORD *)(v72 + 280) = v75;
            *(_OWORD *)(v72 + 248) = v74;
            *(_OWORD *)(v72 + 232) = v73;
            v77 = *(_OWORD *)(v72 + 96);
            v78 = *(_OWORD *)(v72 + 128);
            v79 = *(_OWORD *)(v72 + 144);
            *(_OWORD *)(v72 + 328) = *(_OWORD *)(v72 + 112);
            *(_OWORD *)(v72 + 344) = v78;
            *(_OWORD *)(v72 + 296) = v76;
            *(_OWORD *)(v72 + 312) = v77;
            v80 = *(_OWORD *)(v72 + 176);
            *(_OWORD *)(v72 + 376) = *(_OWORD *)(v72 + 160);
            *(_OWORD *)(v72 + 392) = v80;
            LOBYTE(v499[0]) = 0;
            *(_QWORD *)(v72 + 408) = *(_QWORD *)(v72 + 192);
            *(_OWORD *)(v72 + 360) = v79;
            v81 = 8 * (*(_DWORD *)(v72 + 208) - *(_DWORD *)(v72 + 24));
            *(_QWORD *)(v72 + 32) = 0;
            *(_QWORD *)(v72 + 8) = 510;
            *(_QWORD *)(v72 + 16) = v81;
            sub_1B6841DFC(v15, a2, a3, *a5, 1, 0, *(_BYTE *)(v484 + 103), 1, 0);
            v82 = *a5;
            *((_DWORD *)v82 + 4) = *((_DWORD *)*a5 + 5);
            sub_1B6847020((unint64_t *)v15, a2, a3, a4, a10, (int *)v82 + 4, v499);
            v83 = *(_QWORD *)(v15 + 944);
            v84 = *a5;
            v85 = *((_DWORD *)*a5 + 52)
                - *(_DWORD *)(v83 + 8)
                + ((*(_DWORD *)(v83 + 16) + 8 * (*(_DWORD *)(v83 + 24) - *(_DWORD *)(v83 + 208))) << 8)
                + 510;
            *((_DWORD *)v84 + 52) = v85;
            *((_QWORD *)v84 + 25) = *((_QWORD *)v84 + 24)
                                  + ((v85
                                    * *(unsigned __int16 *)(v15 + 2 * *((__int16 *)v84 + 106) + 992)) >> (8 * (*((_WORD *)v84 + 106) == 0)));
            v86 = *(_OWORD *)(v83 + 216);
            v88 = *(_OWORD *)(v83 + 264);
            v87 = *(_OWORD *)(v83 + 280);
            *(_OWORD *)(v83 + 32) = *(_OWORD *)(v83 + 248);
            *(_OWORD *)(v83 + 48) = v88;
            v89 = *(_OWORD *)(v83 + 232);
            *(_OWORD *)v83 = v86;
            *(_OWORD *)(v83 + 16) = v89;
            v91 = *(_OWORD *)(v83 + 328);
            v90 = *(_OWORD *)(v83 + 344);
            v92 = *(_OWORD *)(v83 + 296);
            *(_OWORD *)(v83 + 96) = *(_OWORD *)(v83 + 312);
            *(_OWORD *)(v83 + 112) = v91;
            *(_OWORD *)(v83 + 64) = v87;
            *(_OWORD *)(v83 + 80) = v92;
            v93 = *(_OWORD *)(v83 + 392);
            v94 = *(_OWORD *)(v83 + 360);
            *(_OWORD *)(v83 + 160) = *(_OWORD *)(v83 + 376);
            *(_OWORD *)(v83 + 176) = v93;
            v38 = (v71 >> 7) & 1;
            *(_QWORD *)(v83 + 192) = *(_QWORD *)(v83 + 408);
            *(_OWORD *)(v83 + 128) = v90;
            *(_OWORD *)(v83 + 144) = v94;
            sub_1B684C0C4(v15, (void ***)a5, a6, 1u);
            v40 = 128;
            v43 = 2;
            v42 = 0;
            v14 = a3;
          }
          while ((v443 & v478 & 1) != 0);
          v36 = v439;
          v35 = v442[60];
          v13 = a7;
          v21 = v431;
        }
        ++v36;
      }
      while (v36 < v35);
    }
    goto LABEL_70;
  }
  v24 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1872) + 542);
  v25 = (unsigned __int8 *)*((_QWORD *)v16 + 17);
  v26 = *v25;
  if (((v17 | v18) & 0x80000000) != 0 || ((v27 = *v16, v17 < v27) ? (v28 = v18 >= v27) : (v28 = 1), v28))
  {
    v479 = 0;
  }
  else
  {
    v479 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v25 + 10) + 24))(*((_QWORD *)v25 + 10), *((_QWORD *)v25 + 11) + v17 + *v25 * (unint64_t)v18);
    v17 = a2 - *((_DWORD *)v16 + 1);
    v18 = v14 - *((_DWORD *)v16 + 2);
  }
  v96 = 0;
  if ((v17 & 0x80000000) == 0 && (v18 & 0x80000000) == 0)
  {
    v97 = *v16;
    if (v17 >= v97 || v18 >= v97)
      v96 = 0;
    else
      v96 = *((_QWORD *)v16 + 11) + 2 * ((v17 >> 3) + (v97 >> 3) * (unint64_t)(v18 >> 3));
  }
  v472 = v26;
  v99 = *(_QWORD *)(v15 + 952);
  if (*(_BYTE *)(v99 + 578))
  {
    v100 = *(_DWORD *)(v99 + 508);
    v102 = (_DWORD)v13 == a8 && v100 != 0 && a8 < 17;
    v103 = v102;
  }
  else
  {
    v103 = 0;
  }
  if (*(_BYTE *)(v484 + 96))
    v104 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 1880) + 2009) - a4 == *(unsigned __int8 *)(*(_QWORD *)(v15 + 1880)
                                                                                             + 2008);
  else
    v104 = 0;
  sub_1B683B8C8(v15, a2, v14, v16, v13, a8, (uint64_t)v442);
  if (!*(_BYTE *)(v15 + 788))
  {
    v107 = v442[60];
    v453 = (_WORD *)v96;
    v449 = v104;
    if (!v103)
    {
      v118 = 0;
      v119 = 0;
      v113 = (uint64_t)v442;
      goto LABEL_119;
    }
    v108 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 1880) + 2009) - a4;
    v109 = *(uint64_t **)(v15 + 8136);
    v110 = *v109;
    v111 = v109[22];
    v112 = *(char *)(v111 + *v109 * (int)(v14 & 0xFFFFFFFC) + ((int)a2 >> 2));
    if (v108 == 3)
    {
      v111 = v110 * (int)((v14 >> 2) & 0xFFFFFFFE) + ((int)a2 >> 3);
      v114 = v109 + 32;
      v113 = (uint64_t)v442;
    }
    else
    {
      v113 = (uint64_t)v442;
      if (v108 != 4)
      {
LABEL_110:
        if (v442[60])
        {
          v120 = 0;
          v121 = (_DWORD *)(v15 + 4932);
          while (*((unsigned __int8 *)v121 - 4) != v112 || (_DWORD)v111 != *v121)
          {
            ++v120;
            v121 += 3;
            if (v107 == v120)
              goto LABEL_115;
          }
          *(_DWORD *)(v15 + 4 * a4 + 8088) &= ~1u;
        }
        else
        {
LABEL_115:
          LODWORD(v120) = -1;
        }
        v118 = (int)v120 >= 0;
        v119 = v120 & ~((int)v120 >> 31);
        if ((int)v120 >= 0)
          LODWORD(v107) = v120 + 1;
LABEL_119:
        if (*(_BYTE *)(v15 + 192)
          && ((int)v13 < 8 || a8 <= 7)
          && *(unsigned __int8 *)(*(_QWORD *)(v15 + 1880) + 2009) - a4 == 3)
        {
          v122 = *(unsigned __int8 *)(v113 + 60);
          if (*(_BYTE *)(v113 + 60))
          {
            v123 = (unsigned __int8 *)v113;
            do
            {
              if (*v123 != 255 && v123[1] != 255)
              {
                v123[1] = -1;
                *((_DWORD *)v123 + 2) = 0;
              }
              v123 += 12;
              --v122;
            }
            while (v122);
          }
        }
        if (v119 >= (int)v107)
        {
          v460 = 0;
          v464 = -1;
          v457 = -1;
          v128 = -1;
        }
        else
        {
          v460 = 0;
          v468 = (_QWORD *)(v15 + 1368);
          v124 = a8;
          if (a8 >= (int)v13)
            v124 = v13;
          v125 = (uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(v15
                                                                                             + 8
                                                                                             * __clz(__rbit32(v124))
                                                                                             + 1072);
          v126 = v24 + v119 - 4;
          v127 = v15 + 12 * v119 + 4928;
          v464 = -1;
          v128 = -1;
          v457 = -1;
          do
          {
            if (v118 || !sub_1B684535C(v113, v119))
            {
              DWORD1(v500) = *(_DWORD *)(v127 + 4);
              LOBYTE(v500) = *(_BYTE *)v127;
              if ((char)v500 != -1)
              {
                v129 = *(_QWORD *)(*(_QWORD *)(a1 + 1584) + 16 * (char)v500 + 3544);
                *(_BYTE *)(a1 + 1386) = v500;
                *(_DWORD *)(a1 + 1388) = *(_DWORD *)(v129 + 276);
                *(_DWORD *)(a1 + 1396) = *(_DWORD *)(v129 + 280);
              }
              if (*(_BYTE *)(a1 + 192))
              {
                DWORD2(v500) = *(_DWORD *)(v127 + 8);
                BYTE1(v500) = *(_BYTE *)(v127 + 1);
                if (SBYTE1(v500) != -1)
                {
                  v130 = *(_QWORD *)(*(_QWORD *)(a1 + 1584) + 16 * SBYTE1(v500) + 3800);
                  *(_BYTE *)(a1 + 1387) = BYTE1(v500);
                  *(_DWORD *)(a1 + 1392) = *(_DWORD *)(v130 + 276);
                  *(_DWORD *)(a1 + 1400) = *(_DWORD *)(v130 + 280);
                }
                sub_1B6802568(v468, (char *)&v500, a2, a3, v13, a8, v472, v479);
              }
              else
              {
                sub_1B6801C84((uint64_t)v468, (uint64_t)&v500, a2, a3, v13, a8, v472, v479, 0);
              }
              v131 = 0;
              v132 = a2 - *((_DWORD *)v16 + 1);
              v133 = a7;
              if ((v132 & 0x80000000) == 0)
              {
                v134 = a3 - *((_DWORD *)v16 + 2);
                if ((v134 & 0x80000000) == 0)
                {
                  v131 = 0;
                  v135 = *v16;
                  if (v132 < v135 && v134 < v135)
                  {
                    v131 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)v16 + 3) + 24))(*((_QWORD *)v16 + 3), v132 + v16[1] * (unint64_t)v134 + *((_QWORD *)v16 + 4), 0);
                    v133 = a7;
                  }
                }
              }
              v136 = (*v125)(v133, a8, v131, v16[1], v479, v472);
              if (v126)
                v137 = v119 + 1;
              else
                v137 = v119;
              v13 = a7;
              v113 = (uint64_t)v442;
              if (v137 * *(unsigned __int16 *)(a1 + 996) + (unint64_t)v136 < v128)
              {
                v460 = v119;
                v464 = v137;
                v128 = v137 * *(unsigned __int16 *)(a1 + 996) + (unint64_t)v136;
                v457 = v136;
              }
            }
            ++v119;
            ++v126;
            v127 += 12;
          }
          while ((_DWORD)v107 != v119);
        }
        v117 = v457;
        v115 = v464 + 1;
        LOBYTE(v495) = 3;
        v138 = (unsigned __int8 *)(v113 + 12 * v460);
        v139 = v138[1];
        if (v139 == 255 || *v138 == 255)
          v141 = 0;
        else
          v141 = 64;
        LOBYTE(v494) = *v138;
        v493 = *(_QWORD *)(v138 + 4);
        HIBYTE(v494) = v139;
        HIBYTE(v495) = v141 & 0xF1 | (2 * (v460 & 7)) | 1;
        v15 = a1;
        v142 = *(_QWORD *)(a1 + 952);
        if (!*(_BYTE *)(v142 + 56))
        {
          v21 = v431;
          v14 = a3;
          goto LABEL_171;
        }
        v14 = a3;
        if ((*v453 & 0x70) == 0)
        {
          v143 = a1 + 4 * a4;
          v144 = v449;
          if ((*(_DWORD *)(v143 + 8088) & 0x100) == 0)
            v144 = 1;
          if ((v144 & 1) == 0)
          {
            v145 = *(unsigned __int8 *)(v142 + 606);
            v146 = a2 - *((_DWORD *)v16 + 1);
            v147 = a3 - *((_DWORD *)v16 + 2);
            if (!v145
              || v128 <= (unsigned __int16)a12344566777777[(*(__int16 *)(*((_QWORD *)v16 + 11)
                                                                       + 2
                                                                       * ((v146 >> 3)
                                                                        + ((unint64_t)*v16 >> 3) * (v147 >> 3))) >> 9)
                                                         + 12] << (*(_BYTE *)(*(_QWORD *)(a1 + 1880) + 2009) - a4))
            {
              v415 = 0;
              if ((v146 & 0x80000000) != 0)
              {
                v416 = v472;
              }
              else
              {
                v416 = v472;
                if ((v147 & 0x80000000) == 0)
                {
                  v415 = 0;
                  v417 = *v16;
                  if (v146 < v417 && v147 < v417)
                  {
                    v415 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)v16 + 17)
                                                                                             + 96)
                                                                               + 24))(*(_QWORD *)(*((_QWORD *)v16 + 17) + 96), *(_QWORD *)(*((_QWORD *)v16 + 17) + 104)+ v146+ *(unsigned __int8 *)(*((_QWORD *)v16 + 17) + 1) * (unint64_t)(v147 & 0xFFFFFFFE));
                    v14 = a3;
                  }
                }
              }
              sub_1B687A6EC(*(_QWORD *)(a1 + 1872), (unsigned int *)&v493, a2, v14, a7, a7, v416, v479, 2 * *(unsigned __int8 *)(*((_QWORD *)v16 + 17) + 1), v415);
              sub_1B685F844(a1 + 1920, a1, a2, a3, a4, v16);
              if (!sub_1B68698B0((_QWORD *)(a1 + 1920), a2, a3, 0, v16, *(unsigned __int8 *)(*(_QWORD *)(a1 + 1880) + 2009) - a4))
              {
                v13 = a7;
                v21 = v431;
                v15 = a1;
                v14 = a3;
                v117 = v457;
                goto LABEL_171;
              }
              v116 = (_DWORD *)(v143 + 8088);
              LOBYTE(v495) = 2;
              HIBYTE(v495) = v141 | (2 * (v460 & 7));
              v13 = a7;
              v21 = v431;
              v15 = a1;
              v14 = a3;
              v115 = v464;
              v117 = v457;
              goto LABEL_106;
            }
          }
          v13 = a7;
        }
        v21 = v431;
        goto LABEL_171;
      }
      v111 = v110 * ((uint64_t)v14 >> 4) + ((int)a2 >> 4);
      v114 = v109 + 24;
    }
    LODWORD(v111) = *(_DWORD *)(v114[v112] + 4 * v111);
    goto LABEL_110;
  }
  v495 = 2;
  v105 = *v442;
  v106 = v442[1];
  if (v105 == 255)
  {
    v21 = v431;
  }
  else
  {
    v21 = v431;
    if (v106 != 255 && ((int)v13 < 8 || a8 <= 7) && *(unsigned __int8 *)(*(_QWORD *)(v15 + 1880) + 2009) - a4 == 3)
    {
      LOBYTE(v106) = -1;
      v442[1] = -1;
      *(_DWORD *)(v15 + 4936) = 0;
    }
  }
  v115 = 0;
  LOBYTE(v494) = v105;
  v493 = *(_QWORD *)(v442 + 4);
  HIBYTE(v494) = v106;
  v116 = (_DWORD *)(v15 + 4 * a4 + 8088);
  v117 = 0;
LABEL_106:
  *v116 = 0;
LABEL_171:
  v423 = v115;
  v422 = v117;
  v95 = v117 + v115 * *(unsigned __int16 *)(v15 + 996);
LABEL_172:
  v421 = v95;
  if (!a13)
  {
    v155 = 0;
    v492 = *((_OWORD *)(*a6)[12]
           + ((a2 - *((_DWORD *)*a6 + 1)) >> 2)
           + ((unint64_t)*(unsigned __int8 *)*a6 >> 2) * ((v14 - *((_DWORD *)*a6 + 2)) >> 2));
    v156 = v14;
    v157 = *a5;
    v158 = (unsigned __int8 *)*((_QWORD *)*a5 + 17);
    v488 = *v158;
    v159 = a2 - *((_DWORD *)*a5 + 1);
    if ((v159 & 0x80000000) == 0)
    {
      v160 = v156 - *((_DWORD *)v157 + 2);
      if ((v160 & 0x80000000) == 0)
      {
        v161 = *v157;
        if (v159 >= v161 || v160 >= v161)
        {
          v155 = 0;
        }
        else
        {
          v155 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v158 + 10) + 24))(*((_QWORD *)v158 + 10), *((_QWORD *)v158 + 11) + v159 + *v158 * (unint64_t)v160);
          v13 = a7;
        }
      }
    }
    v165 = *(_QWORD *)(v15 + 1872);
    v480 = *(char *)(v165 + 500);
    v485 = *(char *)(v165 + 501);
    v166 = SBYTE8(v492);
    v167 = BYTE8(v492);
    v168 = SBYTE8(v492);
    v169 = SBYTE9(v492);
    LOBYTE(v500) = BYTE8(v492);
    if (SBYTE8(v492) != -1)
    {
      sub_1B683B52C(v15, a2, a3, v157, 0, SBYTE8(v492), v13, a8, (__int32 *)(v15 + 52 * SBYTE8(v492) + 4992));
      DWORD1(v500) = v492;
      v168 = SBYTE8(v492);
      v170 = *(_QWORD *)(*(_QWORD *)(v15 + 1584) + 16 * SBYTE8(v492) + 3544);
      *(_BYTE *)(v15 + 1386) = BYTE8(v492);
      *(_DWORD *)(v15 + 1388) = *(_DWORD *)(v170 + 276);
      *(_DWORD *)(v15 + 1396) = *(_DWORD *)(v170 + 280);
      v13 = a7;
    }
    v473 = v168;
    v171 = v169;
    BYTE1(v500) = v169;
    if (v169 != 255)
    {
      v172 = (__int32 *)(v15 + 52 * v169 + 5200);
      sub_1B683B52C(v15, a2, a3, v157, 1u, v169, v13, a8, v172);
      v173 = v167 == 255;
      if (!*(_BYTE *)(*(_QWORD *)(v15 + 1872) + 536))
        v173 = 1;
      if (v173)
      {
        v174 = DWORD1(v492);
      }
      else
      {
        v174 = v172[((unint64_t)BYTE11(v492) >> 5) & 1];
        DWORD1(v492) = v174;
      }
      v13 = a7;
      DWORD2(v500) = v174;
      v15 = a1;
      v171 = v169;
      v175 = *(_QWORD *)(*(_QWORD *)(a1 + 1584) + 16 * v169 + 3800);
      *(_BYTE *)(a1 + 1387) = v169;
      *(_DWORD *)(a1 + 1392) = *(_DWORD *)(v175 + 276);
      *(_DWORD *)(a1 + 1400) = *(_DWORD *)(v175 + 280);
    }
    v469 = v171;
    v502 = 0;
    v501 = xmmword_1B6917860;
    v503 = 2;
    sub_1B6802568((_QWORD *)(v15 + 1368), (char *)&v500, a2, a3, v13, a8, v488, v155);
    v176 = a2 - *((_DWORD *)v157 + 1);
    if ((v176 & 0x80000000) == 0)
    {
      v177 = a3 - *((_DWORD *)v157 + 2);
      v178 = a7;
      if ((v177 & 0x80000000) != 0 || (v179 = *v157, v176 >= v179) || v177 >= v179)
      {
LABEL_205:
        if (a8 >= v178)
          v180 = v178;
        else
          v180 = a8;
        v181 = (*(uint64_t (**)(void))(a1 + 8 * __clz(__rbit32(v180)) + 1072))();
        *(_QWORD *)&v501 = v501 + v181;
        if ((BYTE11(v492) & 0x40) != 0)
          v182 = 2;
        else
          v182 = 3;
        if (*(_BYTE *)(a1 + 192))
          v183 = v182;
        else
          v183 = 1;
        v163 = v502 + v183;
        v502 += v183;
        if (v167 != 255)
        {
          BYTE11(v492) = (16 * (sub_1B68020EC(a1 + 52 * v473 + 4992, (uint64_t)&v500, 0) & 1)) | BYTE11(v492) & 0xEF;
          if (v480 - 1 == v166)
            v184 = v166;
          else
            v184 = v166 + 1;
          v163 = v184 + v502;
          v502 += v184;
        }
        LODWORD(v13) = a7;
        if (v169 == 255)
        {
          v21 = v431;
          v185 = a1;
        }
        else
        {
          v185 = a1;
          if (v167 == 255 || !*(_BYTE *)(*(_QWORD *)(a1 + 1872) + 536))
          {
            BYTE11(v492) = (32 * (sub_1B68020EC(a1 + 52 * v469 + 5200, (uint64_t)&v500, 1u) & 1)) | BYTE11(v492) & 0xDF;
            v163 = v502;
          }
          if (v485 - 1 == v169)
            v186 = v169;
          else
            v186 = v169 + 1;
          v163 += v186;
          v21 = v431;
        }
        *((_QWORD *)&v501 + 1) = v501
                               + ((v163 * *(unsigned __int16 *)(v185 + 2 * v503 + 992)) >> (8 * (v503 == 0)));
        v164 = v501;
        goto LABEL_229;
      }
      (*(void (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)v157 + 3) + 24))(*((_QWORD *)v157 + 3), v176 + v157[1] * (unint64_t)v177 + *((_QWORD *)v157 + 4), 0);
    }
    v178 = a7;
    goto LABEL_205;
  }
  v148 = *a5;
  v149 = a2 - *((_DWORD *)*a5 + 1);
  v150 = v14 - *((_DWORD *)*a5 + 2);
  if (((*(_DWORD *)(v15 + 4 * a4 + 8088) >> ((*(unsigned __int16 *)(*((_QWORD *)v148 + 11)
                                                                     + 2
                                                                     * ((v149 >> 3)
                                                                      + ((unint64_t)*v148 >> 3) * (v150 >> 3))) >> 4) & 7)) & 1) != 0)
  {
    v151 = *(_QWORD *)(v15 + 1872);
    v152 = *(_QWORD *)(v15 + 952);
    if (*(_BYTE *)(v15 + 192))
      v154 = (int)v13 > 7 && a8 > 7;
    else
      v154 = 0;
    v445 = v154;
    if (*(_DWORD *)(v152 + 508))
    {
      if (*(_BYTE *)(v152 + 573))
        v187 = v425;
      else
        v187 = 0;
    }
    else
    {
      v187 = 0;
    }
    v188 = *(unsigned __int8 *)(*(_QWORD *)(v151 + 1368) + 2009);
    v454 = *(unsigned __int8 *)(v152 + 260);
    v440 = *(unsigned __int8 *)(v151 + 79160);
    v461 = *(unsigned __int8 *)(v151 + 536);
    v189 = *(char *)(v151 + 500);
    v190 = *(char *)(v151 + 501);
    v450 = **((unsigned __int8 **)v148 + 17);
    v430 = v148[1];
    v426 = *a5;
    v429 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v148 + 3) + 24))(*((_QWORD *)v148 + 3), v149 + v430 * v150 + *((_QWORD *)v148 + 4));
    v458 = 0;
    v191 = v426;
    v192 = a2;
    v193 = a2 - *((_DWORD *)v426 + 1);
    if ((v193 & 0x80000000) != 0)
    {
      v196 = a7;
      v197 = a1;
      v194 = a3;
    }
    else
    {
      v194 = a3;
      v195 = a3 - *((_DWORD *)v426 + 2);
      v196 = a7;
      v197 = a1;
      if ((v195 & 0x80000000) == 0)
      {
        v458 = 0;
        v198 = *v426;
        if (v193 < v198 && v195 < v198)
        {
          v458 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)v426 + 17) + 80)
                                                                     + 24))(*(_QWORD *)(*((_QWORD *)v426 + 17) + 80), *(_QWORD *)(*((_QWORD *)v426 + 17) + 88)+ v193+ **((unsigned __int8 **)v426 + 17) * (unint64_t)v195);
          v196 = a7;
          v194 = a3;
          v192 = a2;
          v191 = v426;
        }
      }
    }
    v199 = v197 + 7512;
    v470 = v188 - a4;
    v200 = *(_BYTE *)(v197 + 192) != 0;
    if (!v461 && *(_BYTE *)(v197 + 192))
      v200 = *(char *)(*(_QWORD *)(*(_QWORD *)(v197 + 1872) + 79088) + 258);
    *(_WORD *)v199 = -1;
    *(_DWORD *)(v197 + 7544) = 0;
    v437 = v190;
    *(_WORD *)(v197 + 7524) = 0;
    *(_QWORD *)(v197 + 7516) = 0;
    *(_OWORD *)(v197 + 7528) = xmmword_1B6917860;
    *(_WORD *)(v197 + 7552) = -1;
    v465 = v197 + 7552;
    *(_WORD *)(v197 + 7548) = 2;
    *(_DWORD *)(v197 + 7584) = 0;
    *(_WORD *)(v197 + 7564) = 0;
    *(_QWORD *)(v197 + 7556) = 0;
    *(_OWORD *)(v197 + 7568) = xmmword_1B6917860;
    *(_WORD *)(v197 + 7588) = 2;
    *(_WORD *)(v197 + 7592) = -1;
    v436 = v197 + 7592;
    *(_DWORD *)(v197 + 7624) = 0;
    *(_WORD *)(v197 + 7604) = 0;
    *(_QWORD *)(v197 + 7596) = 0;
    v201 = -160;
    *(_OWORD *)(v197 + 7608) = xmmword_1B6917860;
    v202 = 7796;
    v203 = 7632;
    v204 = 7636;
    *(_WORD *)(v197 + 7628) = 2;
    do
    {
      v205 = (_WORD *)(v197 + v203);
      *v205 = -1;
      v206 = v197 + v204;
      v207 = v197 + v201;
      *(_DWORD *)(v207 + 7824) = 0;
      *(_WORD *)(v206 + 8) = 0;
      *(_QWORD *)v206 = 0;
      *(_OWORD *)(v207 + 7808) = xmmword_1B6917860;
      *(_WORD *)(v207 + 7828) = 2;
      v205[80] = -1;
      v208 = v197 + v202;
      *(_DWORD *)(v207 + 7984) = 0;
      *(_WORD *)(v208 + 8) = 0;
      *(_QWORD *)v208 = 0;
      v202 += 40;
      *(_OWORD *)(v207 + 7968) = xmmword_1B6917860;
      v203 += 40;
      v204 += 40;
      *(_WORD *)(v207 + 7988) = 2;
      v201 += 40;
    }
    while (v201);
    v424 = v200;
    v209 = 0;
    v210 = (v192 - *((_DWORD *)v191 + 1));
    v435 = v197 + 7512;
    if ((v210 & 0x80000000) == 0)
    {
      v211 = v194 - *((_DWORD *)v191 + 2);
      if ((v211 & 0x80000000) == 0)
      {
        v209 = 0;
        v212 = *v191;
        if (v210 < v212 && v211 < v212)
        {
          v209 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v191 + 3) + 24))(*((_QWORD *)v191 + 3), v210 + v191[1] * (unint64_t)v211 + *((_QWORD *)v191 + 4));
          v196 = a7;
          v194 = a3;
          v192 = a2;
          v191 = v426;
          v199 = v197 + 7512;
        }
      }
    }
    *(_QWORD *)(v197 + 1520) = v209;
    *(_QWORD *)(v197 + 1528) = v430;
    v213 = *(_DWORD *)(v197 + 200);
    if (v213 < 1)
    {
      sub_1B683B608(v197, v192, v194, v191, v196, a8, (unint64_t *)(v197 + 8008), (unint64_t *)(v197 + 8024));
      goto LABEL_318;
    }
    v214 = *(_QWORD *)(v197 + 1880);
    v215 = 1 << (*(_BYTE *)(v214 + 2008) - 1);
    v216 = v196 + v192;
    v217 = a8 + v194;
    v218 = a8 + v194 - 1;
    v219 = *((_DWORD *)v191 + 1);
    v220 = v192 - v219;
    if ((_DWORD)v192 == v219)
    {
      v221 = *((_DWORD *)v191 + 2);
      *(_QWORD *)(v197 + 7968) = *((_QWORD *)v191 + 15) + 16 * ((v217 - v221) >> 2);
      v222 = *((_QWORD *)v191 + 15) + 16 * ((v218 - v221) >> 2);
    }
    else
    {
      v223 = 0;
      if (((word_1B694BB1E[(((*(unsigned __int8 *)(v214 + 2013) - 1) & v218) - *(unsigned __int8 *)(v214 + 2013) + 64) >> 2] >> ((int)((*(unsigned __int8 *)(v214 + 2013) - 1) & v192) >> 2)) & 1) != 0)
      {
        v224 = ~v219 + v192;
        v221 = *((_DWORD *)v191 + 2);
        if ((v224 & 0x80000000) == 0)
        {
          v225 = v217 - v221;
          if (((v217 - v221) & 0x80000000) == 0)
          {
            v223 = 0;
            v226 = *v191;
            if (v224 < v226 && v225 < v226)
              v223 = *((_QWORD *)v191 + 12)
                   + 16 * ((v224 >> 2) + (v226 >> 2) * (unint64_t)(v225 >> 2));
          }
        }
      }
      else
      {
        v221 = *((_DWORD *)v191 + 2);
        v224 = ~v219 + v192;
      }
      v222 = 0;
      *(_QWORD *)(v197 + 7968) = v223;
      if ((v224 & 0x80000000) == 0)
      {
        v227 = v218 - v221;
        if (((v218 - v221) & 0x80000000) == 0)
        {
          v222 = 0;
          v228 = *v191;
          if (v224 < v228 && v227 < v228)
            v222 = *((_QWORD *)v191 + 12)
                 + 16 * ((v224 >> 2) + (v228 >> 2) * (unint64_t)(v227 >> 2));
        }
      }
    }
    v229 = v216 - v215;
    *(_QWORD *)(v197 + 7976) = v222;
    if (v221 == (_DWORD)v194)
    {
      *(_QWORD *)(v197 + 7984) = *((_QWORD *)v191 + 16) + 16 * ((v216 - v219) >> 2);
      *(_QWORD *)(v197 + 7992) = *((_QWORD *)v191 + 16) + 16 * ((v229 - v219) >> 2);
      v230 = *((_QWORD *)v191 + 16);
      v231 = (v220 >> 2) - 1;
    }
    else
    {
      if (((word_1B692B05A[(int)((*(unsigned __int8 *)(v214 + 2013) - 1) & v194) >> 2] >> ((((*(unsigned __int8 *)(v214 + 2013)
                                                                                             - 1) & (v216 - 1))
                                                                                           - *(unsigned __int8 *)(v214 + 2013)
                                                                                           + 64) >> 2)) & 1) != 0)
      {
        v232 = v216 - v219;
        v233 = ~v221 + v194;
        v234 = 0;
        if (((v233 | (v216 - v219)) & 0x80000000) == 0)
        {
          v235 = *v191;
          if (v232 < v235 && v233 < v235)
            v234 = *((_QWORD *)v191 + 12)
                 + 16 * ((v232 >> 2) + (v235 >> 2) * (unint64_t)(v233 >> 2));
        }
      }
      else
      {
        v234 = 0;
        v233 = ~v221 + v194;
      }
      *(_QWORD *)(v197 + 7984) = v234;
      v236 = v229 - v219;
      if (((v233 | (v229 - v219)) & 0x80000000) != 0)
      {
        v237 = 0;
      }
      else
      {
        v237 = 0;
        v238 = *v191;
        if (v236 < v238 && v233 < v238)
          v237 = *((_QWORD *)v191 + 12) + 16 * ((v236 >> 2) + (v238 >> 2) * (unint64_t)(v233 >> 2));
      }
      *(_QWORD *)(v197 + 7992) = v237;
      if ((_DWORD)v192 != v219)
      {
        v246 = v192 - v219 - v215;
        if (((v233 | v246) & 0x80000000) != 0)
        {
          v239 = 0;
        }
        else
        {
          v239 = 0;
          v247 = *v191;
          if (v246 < v247 && v233 < v247)
            v239 = *((_QWORD *)v191 + 12)
                 + 16 * ((v246 >> 2) + (v247 >> 2) * (unint64_t)(v233 >> 2));
        }
        goto LABEL_285;
      }
      v230 = *((_QWORD *)v191 + 15);
      v231 = (int)v233 >> 2;
    }
    v239 = v230 + 16 * v231;
LABEL_285:
    *(_QWORD *)(v197 + 8000) = v239;
    if (v213 == 2)
    {
      v240 = 0;
      v241 = *(unsigned __int8 *)(v214 + 2013);
      v242 = v194 - 1;
      v243 = v241 - 1;
      v244 = v192 - 1;
      if (((word_1B694BB1E[((v243 & ((int)v194 - 1 + a8)) - v241 + 64) >> 2] >> ((int)(v243 & v192) >> 2)) & 1) != 0
        && ((v217 | v244) & 0x80000000) == 0)
      {
        v245 = *(_QWORD *)(*(_QWORD *)(v197 + 1872) + 1360);
        if (*(_DWORD *)(v245 + 276) < (int)v192 || *(_DWORD *)(v245 + 280) <= v217)
          v240 = 0;
        else
          v240 = *(_QWORD *)(v245 + 592) + 4 * (*(_QWORD *)(v245 + 552) * ((uint64_t)v217 >> 2) + (v244 >> 2));
      }
      *(_QWORD *)(v197 + 8048) = v240;
      if ((v218 | v244) < 0
        || (v248 = *(_QWORD *)(*(_QWORD *)(v197 + 1872) + 1360), *(_DWORD *)(v248 + 276) < (int)v192)
        || *(_DWORD *)(v248 + 280) < v217)
      {
        v249 = 0;
      }
      else
      {
        v249 = *(_QWORD *)(v248 + 592) + 4 * (*(_QWORD *)(v248 + 552) * ((uint64_t)v218 >> 2) + (v244 >> 2));
      }
      v250 = 0;
      *(_QWORD *)(v197 + 8056) = v249;
      if (((word_1B692B05A[(int)(v243 & v194) >> 2] >> (((v243 & (v244 + (int)v196)) - v241 + 64) >> 2)) & 1) != 0
        && ((v216 | v242) & 0x80000000) == 0)
      {
        v251 = *(_QWORD *)(*(_QWORD *)(v197 + 1872) + 1360);
        if (*(_DWORD *)(v251 + 276) <= v216 || *(_DWORD *)(v251 + 280) <= v242)
          v250 = 0;
        else
          v250 = *(_QWORD *)(v251 + 592) + 4 * (*(_QWORD *)(v251 + 552) * ((uint64_t)v242 >> 2) + (v216 >> 2));
      }
      v252 = v192 - v215;
      *(_QWORD *)(v197 + 8064) = v250;
      if ((v229 | v242) < 0
        || (v253 = *(_QWORD *)(*(_QWORD *)(v197 + 1872) + 1360), *(_DWORD *)(v253 + 276) <= v229)
        || *(_DWORD *)(v253 + 280) <= v242)
      {
        v254 = 0;
      }
      else
      {
        v254 = *(_QWORD *)(v253 + 592) + 4 * (*(_QWORD *)(v253 + 552) * ((uint64_t)v242 >> 2) + (v229 >> 2));
      }
      *(_QWORD *)(v197 + 8072) = v254;
      if ((v252 | v242) < 0
        || (v255 = *(_QWORD *)(*(_QWORD *)(v197 + 1872) + 1360), *(_DWORD *)(v255 + 276) <= v252)
        || *(_DWORD *)(v255 + 280) <= v242)
      {
        v256 = 0;
      }
      else
      {
        v256 = *(_QWORD *)(v255 + 592) + 4 * (*(_QWORD *)(v255 + 552) * ((uint64_t)v242 >> 2) + (v252 >> 2));
      }
      *(_QWORD *)(v197 + 8080) = v256;
    }
    *(_OWORD *)(v199 + 496) = *(_OWORD *)(v197 + 7968);
    *(_OWORD *)v484 = *(_OWORD *)(v197 + 7984);
    *(_QWORD *)(v197 + 8040) = v239;
LABEL_318:
    *(_QWORD *)(v197 + 7952) = 0;
    v257 = *(_QWORD *)(v197 + 1872);
    *(_DWORD *)(v197 + 7960) = *(char *)(v257 + 500);
    *(_DWORD *)(v197 + 7964) = *(char *)(v257 + 500);
    if ((v187 & 1) != 0)
    {
      v258 = *(_QWORD *)(v257 + 79216);
      if (*(_QWORD *)(v258 + 400) && (v259 = *(uint64_t **)(v258 + 392), v259[1]))
      {
        v260 = v189;
        v261 = *v259;
      }
      else
      {
        v260 = v189;
        v261 = 0;
      }
      *(_QWORD *)(v197 + 8136) = v261;
      if (v470 >= 5)
      {
        v434 = v190;
        v262 = *(_BYTE *)(*(_QWORD *)(v197 + 952) + 588);
        v263 = *(_BYTE *)(v197 + 192) ? 3 : 1;
        v481 = v263;
        v264 = *(char **)(v197 + 1376);
        v265 = v197 + 5460;
        bzero((void *)(v197 + 5460), 0x804uLL);
        if (a8 <= 0)
        {
          v278 = 0;
          v285 = v197;
          v284 = 0;
          v282 = 0;
          v474 = (unsigned int *)(v285 + 7508);
          *(_QWORD *)&v500 = sub_1B6850AA0;
          v279 = (uint64_t *)v265;
        }
        else
        {
          v266 = 0;
          v267 = 0;
          do
          {
            if ((int)v196 >= 1)
            {
              v268 = 0;
              do
              {
                v269 = *(_QWORD **)(v197 + 8136);
                v270 = *v269 * (int)((v267 + v194) & 0xFFFFFFFC) + ((v268 + (int)v192) >> 2);
                v271 = *(_DWORD *)(v269[20] + 4 * v270);
                v272 = *(unsigned __int8 *)(v269[22] + v270);
                if (v266)
                {
                  v273 = 0;
                  v274 = v266;
                  v275 = v442 + 538;
                  while (v271 != *(_DWORD *)(v275 - 6) || v272 != *v275)
                  {
                    ++v273;
                    v275 += 8;
                    if (v266 == v273)
                      goto LABEL_339;
                  }
                  ++*(_WORD *)(v265 + 8 * v273 + 4);
                }
                else
                {
                  v274 = 0;
LABEL_339:
                  *(_DWORD *)(v265 + 8 * v274) = v271;
                  v276 = *(unsigned int *)(v197 + 7508);
                  v277 = v265 + 8 * v276;
                  *(_BYTE *)(v277 + 6) = v272;
                  ++*(_WORD *)(v277 + 4);
                  v266 = v276 + 1;
                  *(_DWORD *)(v197 + 7508) = v266;
                }
                v268 += 4;
              }
              while (v268 < (int)v196);
            }
            v267 += 4;
          }
          while (v267 < a8);
          v474 = (unsigned int *)(v197 + 7508);
          v278 = v266;
          v279 = (uint64_t *)(v265 + 8 * v266);
          *(_QWORD *)&v500 = sub_1B6850AA0;
          if (v266 < 0x81)
          {
            v284 = 0;
            v282 = 0;
          }
          else
          {
            v428 = (uint64_t *)(v265 + 8 * v266);
            v433 = v262;
            v280 = v187;
            v281 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
            v432 = v266;
            v282 = v266;
            while (1)
            {
              v283 = (uint64_t *)operator new(8 * v282, v281);
              if (v283)
                break;
              v102 = v282 > 1;
              v282 >>= 1;
              if (!v102)
              {
                v284 = 0;
                v282 = 0;
                goto LABEL_353;
              }
            }
            v284 = v283;
LABEL_353:
            v194 = a3;
            v192 = a2;
            v187 = v280;
            v262 = v433;
            v278 = v432;
            v279 = v428;
          }
        }
        sub_1B6850AB4(v265, v279, (uint64_t (**)(uint64_t *, uint64_t *))&v500, v278, v284, v282);
        if (v284)
          operator delete(v284);
        v286 = a8;
        if (a8 >= (int)v196)
          v286 = v196;
        v197 = a1;
        v20 = *(_DWORD *)(a1 + 7508) - 1 >= v262;
        v190 = v434;
        if (!v20)
        {
          v287 = 0;
          v446 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1
                                                                                               + 8
                                                                                               * __clz(__rbit32(v286))
                                                                                               + 1072);
          *(_DWORD *)(a1 + 7544) = 0;
          *(_OWORD *)(v435 + 16) = xmmword_1B6917860;
          *(_WORD *)(a1 + 7548) = 2;
          v288 = (char *)(v442 + 538);
          do
          {
            *((_DWORD *)v264 + 8) = 0;
            *((_OWORD *)v264 + 1) = xmmword_1B6917860;
            *((_WORD *)v264 + 18) = 2;
            v289 = *v288;
            *((_DWORD *)v264 + 1) = *(_DWORD *)(v288 - 6);
            v290 = *(_QWORD *)(*(_QWORD *)(a1 + 1584) + 16 * v289 + 3544);
            *(_BYTE *)(a1 + 1386) = v289;
            *(_DWORD *)(a1 + 1388) = *(_DWORD *)(v290 + 276);
            *(_DWORD *)(a1 + 1396) = *(_DWORD *)(v290 + 280);
            **(_BYTE **)(a1 + 1376) = v289;
            **(_BYTE **)(a1 + 1368) = v289;
            *(_BYTE *)(*(_QWORD *)(a1 + 1376) + 1) = -1;
            *(_BYTE *)(*(_QWORD *)(a1 + 1368) + 1) = -1;
            v291 = (__int32 *)(a1 + 4992 + 52 * (int)v289);
            sub_1B67C7B4C(*(_QWORD *)(a1 + 1872), a2, a3, 0, v289, a7, a8, v291, (_QWORD *)(a1 + 8008), a1 + 8024);
            v264[12] = sub_1B68020EC((uint64_t)v291, (uint64_t)v264, 0);
            sub_1B6802568((_QWORD *)(a1 + 1368), v264, a2, a3, a7, a8, v450, v458);
            v292 = v446(a7, a8, v429, v430, v458, v450);
            *((_QWORD *)v264 + 2) = v292;
            v295 = *v264;
            v296 = v481 + v295 + *((_DWORD *)v264 + 8);
            if (v260 - 1 != v295)
              ++v296;
            *((_DWORD *)v264 + 8) = v296;
            v297 = ((v296 * *(unsigned __int16 *)(a1 + 2 * *((__int16 *)v264 + 18) + 992)) >> (8 * (*((_WORD *)v264 + 18) == 0)))
                 + (unint64_t)v292;
            *((_QWORD *)v264 + 3) = v297;
            if (v297 < *(_QWORD *)(a1 + 7536))
            {
              *(_BYTE *)v435 = v295;
              *(_DWORD *)(a1 + 7516) = *((_DWORD *)v264 + 1);
              *(_BYTE *)(v435 + 12) = v264[12];
              *(_DWORD *)(a1 + 7544) = *((_DWORD *)v264 + 8);
              *(_OWORD *)(v435 + 16) = *((_OWORD *)v264 + 1);
            }
            v288 += 8;
            ++v287;
          }
          while (v287 < *v474);
          v298 = 0;
          v13 = a7;
          goto LABEL_427;
        }
      }
    }
    else
    {
      v260 = v189;
      *(_QWORD *)(v197 + 8136) = 0;
    }
    sub_1B684FDA8(v197, v192, v194, v470, v196, a8, 0, v260, v187, v450, v458);
    if (*(_BYTE *)(v197 + 192))
    {
      v293 = a3;
      if (v454 && v440)
      {
        v482 = (_DWORD *)(v197 + 7964);
        v299 = v187 ^ 1;
        if (v190 < 2)
          v299 = 1;
        if ((v299 & 1) == 0)
          sub_1B6850954(v197, a2, a3, v470, a7, a8, (_DWORD *)(v197 + 7956), v482);
        v300 = *(int *)(v197 + 7956);
        if ((int)v300 < *(_DWORD *)(v197 + 7964))
        {
          v301 = 40 * v300;
          v302 = 52 * (int)v300 + 5200;
          v303 = 40 * v300 + 7805;
          v304 = 40 * v300 + 7792;
          v305 = 40 * v300 + 7793;
          do
          {
            sub_1B67C7B4C(*(_QWORD *)(a1 + 1872), a2, a3, 1u, v300, a7, a8, (__int32 *)(a1 + v302), (_QWORD *)(a1 + 8008), a1 + 8024);
            v306 = a1 + v301;
            *(_BYTE *)(a1 + v305) = v300;
            *(_DWORD *)(a1 + v301 + 7800) = *(_DWORD *)(a1 + v301 + 7636);
            *(_BYTE *)(a1 + v303) = sub_1B68020EC(a1 + v302, a1 + v304, 1u);
            v307 = *(_QWORD *)(a1 + v301 + 7648);
            *(_QWORD *)(a1 + v301 + 7808) = v307;
            v308 = *(_DWORD *)(a1 + v301 + 7824);
            if (v437 - 1 != v300)
              ++v308;
            v309 = v300 + v308;
            *(_DWORD *)(v306 + 7824) = v309;
            v310 = v307
                 + ((v309 * *(unsigned __int16 *)(a1 + 2 * *(__int16 *)(v306 + 7828) + 992)) >> (8 * (*(_WORD *)(v306 + 7828) == 0)));
            *(_QWORD *)(v306 + 7816) = v310;
            if (v310 < *(_QWORD *)(a1 + 7576))
            {
              v311 = *(_OWORD *)(v306 + 7792);
              v312 = *(_OWORD *)(v306 + 7808);
              *(_QWORD *)(v465 + 32) = *(_QWORD *)(v306 + 7824);
              *(_OWORD *)v465 = v311;
              *(_OWORD *)(v465 + 16) = v312;
            }
            ++v300;
            v301 += 40;
            v302 += 52;
            v303 += 40;
            v304 += 40;
            v305 += 40;
          }
          while (v300 < (int)*v482);
        }
        v197 = a1;
        v313 = *(_DWORD *)(a1 + 7584);
        if (*(_BYTE *)(a1 + 192))
          v314 = v313 + 3;
        else
          v314 = v313 + 1;
        *(_DWORD *)(a1 + 7584) = v314;
        v315 = *(_QWORD *)(a1 + 7568)
             + ((v314 * *(unsigned __int16 *)(a1 + 2 * *(__int16 *)(a1 + 7588) + 992)) >> (8 * (*(_WORD *)(a1 + 7588) == 0)));
        *(_QWORD *)(a1 + 7576) = v315;
      }
      else
      {
        sub_1B684FDA8(v197, a2, a3, v470, a7, a8, 1u, v190, v187, v450, v458);
        v315 = *(_QWORD *)(v197 + 7576);
      }
      v298 = v315 < *(_QWORD *)(v197 + 7536);
    }
    else
    {
      v298 = 0;
    }
    v13 = a7;
    v316 = v435;
    v317 = v424;
    if (v445)
    {
      if (v454 && v424)
      {
        v294 = a3;
        v293 = a2;
        if (!*(_BYTE *)(v197 + a4 + 193)
          || (2 * *(_DWORD *)(v197 + 40 * v298 + 7544) - 4) * *(unsigned __int16 *)(v197 + 996)
           + 9 * *(_QWORD *)(v197 + 40 * v298 + 7528) / 0xAuLL >= *(_QWORD *)(v197 + 40 * v298 + 7536))
        {
          goto LABEL_427;
        }
      }
      else
      {
        v294 = a3;
        v293 = a2;
        if (!v424)
          goto LABEL_427;
      }
      *(_BYTE *)(v435 + 80) = *(_BYTE *)v435;
      *(_DWORD *)(v197 + 7596) = *(_DWORD *)(v197 + 7516);
      *(_BYTE *)(v435 + 92) = *(_BYTE *)(v435 + 12);
      *(_BYTE *)(v435 + 81) = *(_BYTE *)(v435 + 41);
      *(_DWORD *)(v197 + 7600) = *(_DWORD *)(v197 + 7560);
      *(_BYTE *)(v435 + 93) = *(_BYTE *)(v435 + 53);
      v318 = *(_DWORD *)(v197 + 7584);
      *(_DWORD *)(v197 + 7624) = v318;
      *(_OWORD *)(v435 + 96) = *(_OWORD *)(v197 + 7568);
      v319 = *(_QWORD *)(v197 + 1872);
      v320 = *(char *)(v319 + 501);
      LODWORD(v500) = *(char *)(v319 + 500);
      DWORD1(v500) = v320;
      v455 = *(unsigned __int8 *)(*(_QWORD *)(v197 + 952) + 260);
      v321 = *(int *)(v197 + 7956);
      v499[0] = *(_DWORD *)(v197 + 7952);
      v499[1] = v321;
      v322 = *(_DWORD *)(v197 + 7964);
      v498[0] = *(_DWORD *)(v197 + 7960);
      v498[1] = v322;
      v323 = (uint64_t *)(v197 + 1368);
      v324 = *(_QWORD *)(v197 + 1368);
      if (*(_BYTE *)(v197 + 192))
        v325 = 3;
      else
        v325 = 1;
      v496 = *(_DWORD *)(v197 + 7544) - v325;
      v497 = v318 - v325;
      *(_DWORD *)(v197 + 7624) = 0;
      *(_OWORD *)(v435 + 96) = xmmword_1B6917860;
      LODWORD(v447) = v298;
      *(_WORD *)(v197 + 7628) = 1;
      v418 = v298;
      if (v461)
      {
        **(_BYTE **)(v197 + 1376) = -1;
        **(_BYTE **)(v197 + 1368) = -1;
        if (v322 > (int)v321)
        {
          v326 = v321 << 32;
          v327 = v322 - v321;
          v328 = v197 + 52 * (int)v321 + 5200;
          do
          {
            v329 = *(_QWORD *)(*(_QWORD *)(v197 + 1584) + (v326 >> 28) + 3800);
            *(_BYTE *)(v197 + 1387) = v321;
            *(_DWORD *)(v197 + 1392) = *(_DWORD *)(v329 + 276);
            *(_DWORD *)(v197 + 1400) = *(_DWORD *)(v329 + 280);
            *(_BYTE *)(*(_QWORD *)(v197 + 1376) + 1) = v321;
            *(_BYTE *)(*(_QWORD *)(v197 + 1368) + 1) = v321;
            v330 = v323;
            sub_1B6801E6C(v323, v293, v294, a7, a8, 1u, v328, 0, 1, v450, v458);
            if (*(_QWORD *)(v324 + 24) < *(_QWORD *)(v197 + 7616))
            {
              *(_BYTE *)(v435 + 81) = *(_BYTE *)(v324 + 1);
              *(_DWORD *)(v197 + 7600) = *(_DWORD *)(v324 + 8);
              *(_BYTE *)(v435 + 93) = *(_BYTE *)(v324 + 13);
              *(_DWORD *)(v197 + 7624) = *(_DWORD *)(v324 + 32);
              *(_OWORD *)(v435 + 96) = *(_OWORD *)(v324 + 16);
            }
            LOBYTE(v321) = v321 + 1;
            v326 += 0x100000000;
            v328 += 52;
            --v327;
            v294 = a3;
            v293 = a2;
            v323 = v330;
          }
          while (v327);
        }
        v316 = v435;
        v331 = *(char *)(v435 + 81);
        v332 = *(_DWORD *)(v197 + 7624) + v331;
        if (v320 - 1 != v331)
          ++v332;
        v497 = v332;
        LODWORD(v447) = 1;
        v317 = v424;
        v298 = v418;
      }
      *(_DWORD *)(v197 + 7624) = 0;
      *(_OWORD *)(v316 + 96) = xmmword_1B6917860;
      v333 = 2;
      *(_WORD *)(v197 + 7628) = 2;
      if (v317 <= 0)
      {
        v352 = 0;
        v353 = 0;
        *(_DWORD *)(v197 + 7624) = 2;
        v354 = 2;
        v13 = a7;
      }
      else
      {
        v334 = 0;
        v13 = a7;
        v335 = __clz(__rbit32(a7)) - 3;
        if (!(_DWORD)a7)
          v335 = -3;
        v419 = v197 + 7592;
        v420 = (void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v197
                                                                                                + 8 * v335
                                                                                                + 1840);
        do
        {
          v427 = v334;
          if (v317 == 1)
            v336 = (1 - v447);
          else
            v336 = v334 & 1;
          v447 = 1 - v336;
          v337 = v323;
          sub_1B6801C84((uint64_t)v323, v436, v293, v294, v13, a8, v450, v458, 1 - v336);
          (*v420)(a8, v430, v429, v450, v458, (int)a7, *(_QWORD *)(v197 + 1536));
          *(_QWORD *)(v197 + 1520) = *(_QWORD *)(v197 + 1536);
          *(_QWORD *)(v197 + 1528) = (int)a7;
          *(_BYTE *)(*(_QWORD *)(v197 + 1376) + v447) = *(_BYTE *)(v436 + v447);
          *(_DWORD *)(*(_QWORD *)(v197 + 1376) + 4 * v447 + 4) = *(_DWORD *)(v197 + 4 * v447 + 7596);
          v339 = (int)v499[v336];
          v466 = v498[v336];
          v323 = v337;
          if ((int)v339 < v466)
          {
            v462 = (_BYTE *)(v324 + v336 + 12);
            v340 = v197 + 1368 + 4 * v336;
            v441 = (_DWORD *)(v340 + 20);
            v438 = (_DWORD *)(v340 + 28);
            v341 = 52 * (int)v339 + 208 * v336 + 4992;
            v342 = 40 * v339 + 164 * v336 + 7636;
            v343 = 40 * v339 + 161 * v336 + 7644;
            do
            {
              if (!v455 || !v339 || (_DWORD)v339 == *(char *)(v197 + 40 * v336 + 7512 + v336))
              {
                *(_DWORD *)(v324 + 32) = 0;
                v344 = (_DWORD *)(v324 + 32);
                *(_OWORD *)(v324 + 16) = xmmword_1B6917860;
                *(_WORD *)(v324 + 36) = 2;
                v345 = *(_QWORD *)(*(_QWORD *)(v197 + 1584) + (v336 << 8) + 16 * (int)v339 + 3544);
                *(_BYTE *)(v197 + 1368 + v336 + 18) = v339;
                *v441 = *(_DWORD *)(v345 + 276);
                *v438 = *(_DWORD *)(v345 + 280);
                *(_BYTE *)(*(_QWORD *)(v197 + 1376) + v336) = v339;
                v471 = v343;
                v346 = (_BYTE *)(v197 + v343);
                *(_BYTE *)(*(_QWORD *)(v197 + 1376) + v336 + 12) = *(_BYTE *)(v197 + v343);
                v475 = v342;
                v483 = v341;
                v347 = v197 + v341;
                v348 = *(_DWORD *)(v197 + v341 + 4 * *(char *)(v197 + v343));
                *(_DWORD *)(*(_QWORD *)(v197 + 1376) + 4 * v336 + 4) = (((*(_DWORD *)(v197 + v342)
                                                                        - ((*(_DWORD *)(v197 + v342) >> 15) & 0x10001)) & 0xFFFEFFFE)
                                                                      + 131074) & 0xFFFCFFFC;
                v349 = (uint64_t)v323;
                sub_1B68014E4(v323, a2, a3, a7, a8, v336, v348, v450, (int32x4_t)xmmword_1B6917860, v338, v458, 1u);
                sub_1B68021C8(v349, v347, v336, v324);
                v350 = *(_DWORD *)(v324 + 32) + v339;
                if (*((_DWORD *)&v500 + v336) - 1 != (_DWORD)v339)
                  ++v350;
                *v344 = v350 + *(&v496 + v447);
                *v346 = *v462;
                v351 = *(_QWORD *)(v324 + 16)
                     + ((*v344 * *(unsigned __int16 *)(v197 + 2 * *(__int16 *)(v324 + 36) + 992)) >> (8 * (*(_WORD *)(v324 + 36) == 0)));
                *(_QWORD *)(v324 + 24) = v351;
                v323 = (uint64_t *)v349;
                v341 = v483;
                v342 = v475;
                v343 = v471;
                if (v351 < *(_QWORD *)(v197 + 7616))
                {
                  *(&v496 + v336) = v350;
                  *(_BYTE *)(v436 + v336) = *(_BYTE *)(v324 + v336);
                  *(_DWORD *)(v419 + 4 * v336 + 4) = *(_DWORD *)(v324 + 4 * v336 + 4);
                  *(_BYTE *)(v419 + v336 + 12) = *v462;
                  *(_DWORD *)(v197 + 7624) = *(_DWORD *)(v324 + 32);
                  *(_OWORD *)(v435 + 96) = *(_OWORD *)(v324 + 16);
                }
              }
              ++v339;
              v341 += 52;
              v342 += 40;
              v343 += 40;
            }
            while (v466 != (_DWORD)v339);
          }
          v334 = v427 + 1;
          v317 = v424;
          v13 = a7;
          v294 = a3;
          v293 = a2;
        }
        while (v427 + 1 != v424);
        v352 = *(_QWORD *)(v197 + 7608);
        LOWORD(v354) = *(_WORD *)(v197 + 7628);
        v333 = *(_DWORD *)(v197 + 7624) + 2;
        *(_DWORD *)(v197 + 7624) = v333;
        v353 = 8 * ((_WORD)v354 == 0);
        v354 = (__int16)v354;
        v298 = v418;
      }
      *(_QWORD *)(v197 + 7616) = v352 + ((v333 * *(unsigned __int16 *)(v197 + 2 * v354 + 992)) >> v353);
    }
LABEL_427:
    v355 = *(_QWORD *)(v197 + 7616);
    v356 = v298;
    v357 = *(_QWORD *)(v197 + 7512 + 40 * v298 + 24);
    v20 = v355 >= v357;
    BYTE10(v492) = 3;
    v358 = BYTE11(v492) & 0x8E | ((v355 < v357) << 6);
    if (!v20)
      v356 = 2;
    v359 = v197 + 7512 + 40 * v356;
    BYTE11(v492) = v358 & 0xCF | (16 * (*(_BYTE *)(v359 + 12) & 1)) & 0xDF | (32 * (*(_BYTE *)(v359 + 13) & 1));
    WORD4(v492) = *(_WORD *)v359;
    *(_QWORD *)&v492 = *(_QWORD *)(v359 + 4);
    v360 = *(_QWORD *)(v359 + 16);
    v163 = *(_DWORD *)(v359 + 32);
    if ((v425 & 1) != 0)
    {
LABEL_465:
      *(_QWORD *)&v164 = v360;
      *((_QWORD *)&v164 + 1) = v360 + v163 * *(unsigned __int16 *)(v197 + 996);
      v21 = v431;
      if (!v425)
        return;
      goto LABEL_466;
    }
    v361 = 0;
    v362 = (unsigned __int8 *)*((_QWORD *)v426 + 17);
    v363 = *v362;
    v364 = v362[1];
    v365 = a2 - *((_DWORD *)v426 + 1);
    v366 = a3 - *((_DWORD *)v426 + 2);
    if ((v365 & 0x80000000) == 0 && (v366 & 0x80000000) == 0)
    {
      v361 = 0;
      v367 = *v426;
      if (v365 < v367 && v366 < v367)
      {
        v361 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t))(**((_QWORD **)v362 + 10) + 24))(*((_QWORD *)v362 + 10), *((_QWORD *)v362 + 11) + v365 + *v362 * (unint64_t)v366, v293, v294);
        v365 = a2 - *((_DWORD *)v426 + 1);
        v366 = a3 - *((_DWORD *)v426 + 2);
        v13 = a7;
      }
    }
    v368 = 0;
    if ((v365 & 0x80000000) == 0 && (v366 & 0x80000000) == 0)
    {
      v368 = 0;
      v369 = *v426;
      if (v365 < v369 && v366 < v369)
      {
        v368 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(*((_QWORD *)v426 + 17) + 96)
                                                                                     + 24))(*(_QWORD *)(*((_QWORD *)v426 + 17) + 96), *(_QWORD *)(*((_QWORD *)v426 + 17) + 104)+ v365+ *(unsigned __int8 *)(*((_QWORD *)v426 + 17) + 1) * (unint64_t)(v366 & 0xFFFFFFFE), v293, v294);
        v365 = a2 - *((_DWORD *)v426 + 1);
        v366 = a3 - *((_DWORD *)v426 + 2);
        v13 = a7;
      }
    }
    v370 = 0;
    if ((v365 & 0x80000000) == 0)
    {
      v371 = 0;
      if ((v366 & 0x80000000) != 0)
      {
LABEL_446:
        *(_OWORD *)v370 = v492;
        *v371 &= 0xFF73u;
        v373 = *v426;
        if (a8 >= 4)
        {
          v374 = 0;
          LODWORD(v375) = (int)v13 >> 2;
          if ((int)v13 >> 2 <= 1)
            v375 = 1;
          else
            v375 = v375;
          v376 = (_QWORD *)v370;
          do
          {
            v377 = v376;
            v378 = v375;
            if ((int)v13 >= 4)
            {
              do
              {
                v379 = *(_QWORD *)v370;
                *(_QWORD *)((char *)v377 + 6) = *(_QWORD *)(v370 + 6);
                *v377 = v379;
                v377 += 2;
                --v378;
              }
              while (v378);
            }
            ++v374;
            v376 += 2 * (v373 >> 2);
          }
          while (v374 != a8 >> 2);
          v373 = *v426;
        }
        v380 = v373 >> 3;
        if ((int)v13 < 8)
        {
          v385 = v426;
        }
        else
        {
          v381 = 0;
          v382 = v371;
          do
          {
            v383 = v382;
            v384 = v13 >> 3;
            do
            {
              *v383++ = *v371;
              --v384;
            }
            while (v384);
            ++v381;
            v382 += v380;
          }
          while (v381 != v13 >> 3);
          v385 = v426;
          v380 = (unint64_t)*v426 >> 3;
        }
        sub_1B683A840(a1, v371, a4, 0, (*v371 >> 7) & 1, v380, *((_DWORD *)v385 + 3));
        sub_1B687A6EC(*(_QWORD *)(a1 + 1872), (unsigned int *)v370, a2, a3, v13, a8, v363, v361, 2 * v364, v368);
        if (!*(_BYTE *)(v484 + 103))
        {
          LODWORD(v501) = 0;
          v500 = xmmword_1B6917860;
          WORD2(v501) = 2;
          sub_1B6848F80(a1, a2, a3, a4, v426, (uint64_t)&v500);
        }
        LODWORD(v501) = 0;
        v500 = xmmword_1B6917860;
        WORD2(v501) = 0;
        *((_OWORD *)v426 + 12) = xmmword_1B6917860;
        *((_DWORD *)v426 + 52) = 0;
        *((_WORD *)v426 + 106) = 0;
        v197 = a1;
        sub_1B6846954(a1, a2, a3, a4, v426, (uint64_t)(v426 + 192), (uint64_t)&v500, 0, 0);
        v386 = *(_QWORD *)(a1 + 944);
        v387 = *(_OWORD *)(v386 + 16);
        *(_OWORD *)(v386 + 216) = *(_OWORD *)v386;
        v388 = *(_OWORD *)(v386 + 32);
        v389 = *(_OWORD *)(v386 + 64);
        v390 = *(_OWORD *)(v386 + 80);
        *(_OWORD *)(v386 + 264) = *(_OWORD *)(v386 + 48);
        *(_OWORD *)(v386 + 280) = v389;
        *(_OWORD *)(v386 + 248) = v388;
        *(_OWORD *)(v386 + 232) = v387;
        v391 = *(_OWORD *)(v386 + 96);
        v392 = *(_OWORD *)(v386 + 128);
        v393 = *(_OWORD *)(v386 + 144);
        *(_OWORD *)(v386 + 328) = *(_OWORD *)(v386 + 112);
        *(_OWORD *)(v386 + 344) = v392;
        *(_OWORD *)(v386 + 296) = v390;
        *(_OWORD *)(v386 + 312) = v391;
        v394 = *(_OWORD *)(v386 + 176);
        *(_OWORD *)(v386 + 376) = *(_OWORD *)(v386 + 160);
        *(_OWORD *)(v386 + 392) = v394;
        LOBYTE(v499[0]) = 0;
        *(_QWORD *)(v386 + 408) = *(_QWORD *)(v386 + 192);
        *(_OWORD *)(v386 + 360) = v393;
        v395 = 8 * (*(_DWORD *)(v386 + 208) - *(_DWORD *)(v386 + 24));
        *(_QWORD *)(v386 + 32) = 0;
        *(_QWORD *)(v386 + 8) = 510;
        *(_QWORD *)(v386 + 16) = v395;
        sub_1B6841DFC(a1, a2, a3, v426, 1, 0, *(_BYTE *)(v484 + 103), 1, 0);
        *((_DWORD *)v426 + 4) = *((_DWORD *)v426 + 5);
        sub_1B6847020((unint64_t *)a1, a2, a3, a4, a10, (int *)v426 + 4, v499);
        v396 = *(_QWORD *)(a1 + 944);
        *((_DWORD *)v426 + 52) = *((_DWORD *)v426 + 52)
                               - *(_DWORD *)(v396 + 8)
                               + ((*(_DWORD *)(v396 + 16) + 8 * (*(_DWORD *)(v396 + 24) - *(_DWORD *)(v396 + 208))) << 8)
                               + 510;
        v398 = *(_OWORD *)(v396 + 264);
        v397 = *(_OWORD *)(v396 + 280);
        *(_OWORD *)(v396 + 32) = *(_OWORD *)(v396 + 248);
        *(_OWORD *)(v396 + 48) = v398;
        v400 = *(_OWORD *)(v396 + 328);
        v399 = *(_OWORD *)(v396 + 344);
        v401 = *(_OWORD *)(v396 + 296);
        *(_OWORD *)(v396 + 96) = *(_OWORD *)(v396 + 312);
        *(_OWORD *)(v396 + 112) = v400;
        *(_OWORD *)(v396 + 64) = v397;
        *(_OWORD *)(v396 + 80) = v401;
        v402 = *(_OWORD *)(v396 + 392);
        v403 = *(_OWORD *)(v396 + 360);
        *(_OWORD *)(v396 + 160) = *(_OWORD *)(v396 + 376);
        *(_OWORD *)(v396 + 176) = v402;
        v404 = *(_OWORD *)(v396 + 232);
        *(_QWORD *)(v396 + 192) = *(_QWORD *)(v396 + 408);
        *(_OWORD *)(v396 + 128) = v399;
        *(_OWORD *)(v396 + 144) = v403;
        *(_OWORD *)v396 = *(_OWORD *)(v396 + 216);
        *(_OWORD *)(v396 + 16) = v404;
        *((_QWORD *)v426 + 25) = *((_QWORD *)v426 + 24)
                               + ((*((_DWORD *)v426 + 52)
                                 * *(unsigned __int16 *)(a1 + 2 * *((__int16 *)v426 + 106) + 992)) >> (8 * (*((_WORD *)v426 + 106) == 0)));
        sub_1B684C0C4(a1, (void ***)a5, a6, 1u);
        LODWORD(v13) = a7;
        goto LABEL_465;
      }
      v370 = 0;
      v372 = *v426;
      if (v365 < v372)
      {
        v371 = 0;
        if (v366 < v372)
        {
          v370 = *((_QWORD *)v426 + 12) + 16 * ((v365 >> 2) + (v372 >> 2) * (unint64_t)(v366 >> 2));
          v371 = (unsigned __int16 *)(*((_QWORD *)v426 + 11)
                                    + 2 * ((v365 >> 3) + (v372 >> 3) * (unint64_t)(v366 >> 3)));
        }
        goto LABEL_446;
      }
    }
    v371 = 0;
    goto LABEL_446;
  }
  v163 = 0;
  v164 = xmmword_1B6917860;
LABEL_229:
  if (!v425)
    return;
LABEL_466:
  v405 = v422;
  if (v421 >= *((_QWORD *)&v164 + 1))
    v405 = v164;
  v406 = v423;
  if (v421 >= *((_QWORD *)&v164 + 1))
    v406 = v163;
  v407 = (uint64_t *)&v492;
  if (v421 < *((_QWORD *)&v164 + 1))
    v407 = &v493;
  *(_QWORD *)a11 += v405;
  *(_DWORD *)(a11 + 16) += v406;
  *(_OWORD *)v21 = *(_OWORD *)v407;
  if (a8 >= 4)
  {
    v408 = 0;
    LODWORD(v409) = (int)v13 >> 2;
    if ((int)v13 >> 2 <= 1)
      v409 = 1;
    else
      v409 = v409;
    v410 = 16 * ((unint64_t)**a5 >> 2);
    v411 = (_QWORD *)v21;
    do
    {
      v412 = v411;
      v413 = v409;
      if ((int)v13 >= 4)
      {
        do
        {
          v414 = *(_QWORD *)v21;
          *(_QWORD *)((char *)v412 + 6) = *(_QWORD *)(v21 + 6);
          *v412 = v414;
          v412 += 2;
          --v413;
        }
        while (v413);
      }
      ++v408;
      v411 = (_QWORD *)((char *)v411 + v410);
    }
    while (v408 != a8 >> 2);
  }
}

void sub_1B684FD88(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B684FDA8(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, char a9, uint64_t a10, uint64_t a11)
{
  unsigned int v12;
  uint64_t v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int32x2_t v41;
  int32x2_t v42;
  __int128 v43;
  __int32 v44;
  _BOOL4 v45;
  int32x2_t v46;
  __int32 v47;
  uint64_t v48;
  __int32 v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unsigned __int8 v56;
  int v57;
  int *v58;
  uint64_t v59;
  int v60;
  char v61;
  char v62;
  int v63;
  int v64;
  int v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  void (*v69)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *);
  uint64_t v70;
  _QWORD *v71;
  int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  __int16 *v80;
  __int16 v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  void (*v97)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v98;
  _QWORD *v99;
  int v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int32 v111;
  unsigned int v112;
  int v113;
  char v114;
  unsigned __int8 v115;
  char v116;
  int v117;
  int *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  _BOOL4 v124;
  unsigned __int8 *v125;
  uint64_t v126;
  unsigned int v127;
  char *v128;
  unsigned int *v129;
  uint64_t v130;
  int v131;
  __int32 v132;
  _DWORD *v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  int v138;
  _OWORD *v139;
  uint64_t v140;
  int v141;
  int v142;
  char v143;
  unsigned int v144;
  unsigned int v145;
  char v146;
  char v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  __int128 v152;
  uint64_t v153;

  v12 = a7;
  v13 = a6;
  v15 = a4;
  v17 = result;
  v153 = *MEMORY[0x1E0C80C00];
  v18 = *(_QWORD *)(result + 1368);
  v148 = a7;
  v19 = 1 - a7;
  *(_BYTE *)(*(_QWORD *)(result + 1376) + v19) = -1;
  *(_BYTE *)(*(_QWORD *)(result + 1368) + v19) = -1;
  if (a8 >= 2 && a9)
    result = sub_1B6850954(result, a2, a3, a4, a5, a6, (_DWORD *)(result + 4 * a7 + 7952), (_DWORD *)(result + 4 * a7 + 7960));
  v20 = v17 + 4 * v148;
  v21 = *(int *)(v20 + 7952);
  if ((int)v21 < *(_DWORD *)(v20 + 7960))
  {
    v132 = 0;
    v149 = (uint64_t *)(v17 + 1368);
    v126 = v17 + 40 * v12 + 7512;
    v137 = (int *)(v20 + 7960);
    v139 = (_OWORD *)(v17 + 5408);
    v128 = (char *)(v18 + v148 + 12);
    v136 = v18 + 4;
    v129 = (unsigned int *)(v18 + 4 + 4 * v148);
    v135 = a8 - 1;
    v22 = v17 + 1368 + 4 * v148;
    v133 = (_DWORD *)(v22 + 28);
    v134 = (_DWORD *)(v22 + 20);
    v24 = (_DWORD)a5 == 16 && (_DWORD)v13 == 8;
    v124 = v24;
    if ((int)v13 >= (int)a5)
      v25 = a5;
    else
      v25 = v13;
    v127 = v25;
    v138 = 1;
    v147 = 1;
    v145 = v12;
    v146 = 1;
    v144 = v13;
    v131 = v15;
    v130 = v18;
    v125 = (unsigned __int8 *)(v17 + 5456);
    while (1)
    {
      *(_WORD *)v18 = -1;
      *(_DWORD *)(v18 + 32) = 0;
      *(_QWORD *)v136 = 0;
      *(_WORD *)(v136 + 8) = 0;
      *(_OWORD *)(v18 + 16) = xmmword_1B6917860;
      *(_WORD *)(v18 + 36) = 2;
      v26 = *(_QWORD *)(v17 + 1376);
      *(_WORD *)v26 = -1;
      *(_DWORD *)(v26 + 32) = 0;
      *(_WORD *)(v26 + 12) = 0;
      *(_QWORD *)(v26 + 4) = 0;
      *(_OWORD *)(v26 + 16) = xmmword_1B6917860;
      *(_WORD *)(v26 + 36) = 2;
      v27 = v148;
      v28 = *(_QWORD *)(*(_QWORD *)(v17 + 1584) + (v148 << 8) + 16 * (int)v21 + 3544);
      *(_BYTE *)(v17 + 1368 + v148 + 18) = v21;
      *v134 = *(_DWORD *)(v28 + 276);
      *v133 = *(_DWORD *)(v28 + 280);
      *(_BYTE *)(*(_QWORD *)(v17 + 1376) + v148) = v21;
      *(_BYTE *)(*(_QWORD *)(v17 + 1368) + v148) = v21;
      v29 = v17 + 208 * v148 + 52 * v21;
      v150 = v29 + 4992;
      sub_1B67C7B4C(*(_QWORD *)(v17 + 1872), a2, a3, v12, v21, a5, v13, (__int32 *)(v29 + 4992), (_QWORD *)(v17 + 8008), v17 + 8024);
      v30 = *(_OWORD *)(v29 + 4992);
      v31 = *(_OWORD *)(v29 + 5008);
      v32 = *(_OWORD *)(v29 + 5024);
      v33 = v17 + 5408;
      *(_DWORD *)(v17 + 5456) = *(_DWORD *)(v29 + 5040);
      *(_OWORD *)(v17 + 5424) = v31;
      *(_OWORD *)(v17 + 5440) = v32;
      *v139 = v30;
      if (!a9)
        goto LABEL_63;
      v34 = *(uint64_t **)(v17 + 8136);
      v35 = *v34;
      v36 = ((uint64_t)(int)a2 >> 4) + *v34 * ((uint64_t)(int)a3 >> 4);
      v37 = ((uint64_t)(int)a2 >> 3) + *v34 * (int)(((int)a3 >> 2) & 0xFFFFFFFE);
      v38 = ((uint64_t)(int)a2 >> 2) + *v34 * (int)(a3 & 0xFFFFFFFC);
      v39 = *(unsigned __int8 *)(v34[1] + v36);
      if (v15 != 3)
        break;
      if ((_DWORD)a5 == (_DWORD)v13)
      {
        v147 = 0;
        v146 = 0;
        v49 = *(_DWORD *)(v34[(int)v21 + 32] + 4 * v37);
        goto LABEL_60;
      }
      if ((v39 - 29) > 1)
        goto LABEL_54;
      v63 = *(unsigned __int8 *)(v34[40] + v37);
      if ((_DWORD)v13 == 4 && (_DWORD)a5 == 8 && v63 == 1)
        goto LABEL_59;
      v132 = 0;
      v138 = 1;
      if ((_DWORD)v13 != 8 || (_DWORD)a5 != 4)
      {
        v62 = 1;
LABEL_55:
        v147 = 1;
        goto LABEL_56;
      }
      v147 = 1;
      v146 = 1;
      if (v63 == 2)
        goto LABEL_59;
LABEL_63:
      if (v146)
      {
        v65 = *(_DWORD *)(v17 + 200);
        if (v12)
          v66 = 0;
        else
          v66 = v65 == 1;
        v67 = v66;
        if (v65 == 2 || v67)
        {
          v68 = *(_QWORD *)(v17 + 1872);
          v69 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))(v68 + 16 * v148 + 79184);
          v70 = *(_QWORD *)(v68 + 16 * v148 + 79192);
          v71 = (_QWORD *)(v68 + (v70 >> 1));
          if ((v70 & 1) != 0)
            v69 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))(*v71 + v69);
          v69(v71, a2, a3, v21, a5, v13, v17 + 7968, v17 + 7984, v17 + 8048, v17 + 8064, v139);
          v33 = v17 + 5408;
        }
        result = (uint64_t)sub_1B6801E6C(v149, a2, a3, a5, v13, v12, v33, v150, v138, a10, a11);
        if (v138 == 2)
          goto LABEL_100;
        v72 = *v128;
        v73 = v129;
      }
      else
      {
        v72 = 0;
        v73 = v129;
        *v129 = v132;
      }
      *(_DWORD *)(v18 + 32) = 0;
      *(_OWORD *)(v18 + 16) = xmmword_1B6917860;
      *(_WORD *)(v18 + 36) = 1;
      v74 = *v73;
      v143 = v72;
      v142 = *(_DWORD *)(v150 + 4 * v72);
      if (v147)
      {
        v74 = (((v74 - ((v74 >> 15) & 0x10001)) & 0xFFFEFFFE) + 131074) & 0xFFFCFFFC;
        v75 = a5;
        v76 = 1;
      }
      else
      {
        v75 = v127;
        v76 = 2;
      }
      *(_DWORD *)(*(_QWORD *)(v17 + 1376) + 4 * v148 + 4) = v74;
      v77 = *(_QWORD *)(v17 + 1520);
      v140 = *(_QWORD *)(v17 + 1528);
      v78 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 1592)
                                                                                          + 40 * v76
                                                                                          + 8 * __clz(__rbit32(v75))
                                                                                          + 8);
      v79 = *(_QWORD *)(v17 + 1376);
      *(_DWORD *)(v79 + 32) = 0;
      *(_OWORD *)(v79 + 16) = xmmword_1B6917860;
      *(_WORD *)(v79 + 36) = v76;
      v80 = (__int16 *)(v79 + 4 * v148);
      v82 = v80[2];
      v80 += 2;
      v81 = v82;
      v141 = v80[1];
      sub_1B6801E00((uint64_t)v149, a2, a3, a5, v144, v145, v80);
      sub_1B6801C84((uint64_t)v149, *(_QWORD *)(v17 + 1376), a2, a3, a5, v144, a10, a11, v145);
      v83 = v78(a5, v144, v77, v140, a11, a10);
      v84 = *(_QWORD *)(v17 + 1376);
      *(_QWORD *)(v84 + 16) = v83;
      v85 = v82 - (__int16)v142;
      if ((v85 + 64) >= 0x80)
      {
        if (v85 >= 0)
          v87 = v85;
        else
          v87 = -v85;
        v86 = 63 - 2 * __clz((v85 < 1) | (2 * v87));
      }
      else
      {
        v86 = byte_1B692358C[v85 + 64];
      }
      v88 = v141 - (v142 >> 16);
      v13 = v144;
      v15 = v131;
      if ((v88 + 64) >= 0x80)
      {
        if (v88 >= 0)
          v90 = v141 - (v142 >> 16);
        else
          v90 = (v142 >> 16) - v141;
        v89 = 63 - 2 * __clz((v88 < 1) | (2 * v90));
      }
      else
      {
        v89 = byte_1B692358C[v88 + 64];
      }
      v27 = v148;
      v18 = v130;
      v91 = v89 + v86;
      *(_DWORD *)(v84 + 32) = v91;
      v92 = ((v91 * *(unsigned __int16 *)(*(_QWORD *)(v17 + 1592) + 2 * *(__int16 *)(v84 + 36) + 8)) >> (8 * (*(_WORD *)(v84 + 36) == 0)))
          + (unint64_t)v83;
      *(_QWORD *)(v84 + 24) = v92;
      if (v92 < *(_QWORD *)(*(_QWORD *)(v17 + 1368) + 24))
      {
        v93 = v84 + 4 * v148;
        *(_WORD *)(v93 + 4) = v81;
        *(_WORD *)(v93 + 6) = v141;
        v94 = *(_QWORD *)(v17 + 1376);
        v95 = *(_QWORD *)(v17 + 1368);
        v96 = (_BYTE *)(v95 + v148);
        *v96 = *(_BYTE *)(v94 + v148);
        *(_DWORD *)(v95 + 4 * v148 + 4) = *(_DWORD *)(v94 + 4 * v148 + 4);
        v96[12] = *(_BYTE *)(v94 + v148 + 12);
        *(_DWORD *)(v95 + 32) = *(_DWORD *)(v94 + 32);
        *(_OWORD *)(v95 + 16) = *(_OWORD *)(v94 + 16);
      }
      v12 = v145;
      if (v147)
      {
        v97 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v17 + 1824);
        v98 = *(_QWORD *)(v17 + 1832);
        v99 = (uint64_t *)((char *)v149 + (v98 >> 1));
        if ((v98 & 1) != 0)
          v97 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*v99 + v97);
        v97(v99, a2, a3, a5, v144, v145);
      }
      *(_BYTE *)(*(_QWORD *)(v17 + 1376) + v148 + 12) = v143;
      *(_BYTE *)(*(_QWORD *)(v17 + 1368) + v148 + 12) = v143;
      result = sub_1B68021C8((uint64_t)v149, v150, v145, v130);
LABEL_100:
      if (v21 == v135)
        v100 = v21;
      else
        v100 = v21 + 1;
      v101 = v100 + *(_DWORD *)(v18 + 32);
      *(_DWORD *)(v18 + 32) = v101;
      v102 = *(_QWORD *)(v18 + 16)
           + ((v101 * *(unsigned __int16 *)(v17 + 2 * *(__int16 *)(v18 + 36) + 992)) >> (8 * (*(_WORD *)(v18 + 36) == 0)));
      *(_QWORD *)(v18 + 24) = v102;
      v103 = v17 + 160 * v27 + 40 * v21;
      if (v102 < *(_QWORD *)(v103 + 7656))
      {
        v104 = v17 + 160 * v27 + 40 * v21 + 7632;
        v105 = *(_OWORD *)v18;
        v106 = *(_OWORD *)(v18 + 16);
        *(_QWORD *)(v104 + 32) = *(_QWORD *)(v18 + 32);
        *(_OWORD *)v104 = v105;
        *(_OWORD *)(v104 + 16) = v106;
        if (*(_QWORD *)(v103 + 7656) < *(_QWORD *)(v17 + 40 * v148 + 7536))
        {
          v107 = *(_OWORD *)v18;
          v108 = *(_OWORD *)(v18 + 16);
          *(_QWORD *)(v126 + 32) = *(_QWORD *)(v18 + 32);
          *(_OWORD *)v126 = v107;
          *(_OWORD *)(v126 + 16) = v108;
        }
      }
      if (++v21 >= *v137)
        goto LABEL_120;
    }
    if (v15 != 4)
    {
      if (v15 != 5)
      {
LABEL_54:
        v132 = 0;
        v62 = 1;
        v138 = 1;
        goto LABEL_55;
      }
      v40 = v34[(int)v21 + 24];
      if ((_DWORD)a5 == (_DWORD)v13)
      {
        v41 = *(int32x2_t *)(v40 + 4 * v36);
        v42 = *(int32x2_t *)(v40 + 4 * (v36 + v35));
        *(int32x2_t *)&v43 = v41;
        *((int32x2_t *)&v43 + 1) = v42;
        v152 = v43;
        v44 = v41.i32[0];
        v45 = v41.i32[0] == v41.i32[1];
        v41.i32[1] = v42.i32[1];
        v46 = vceq_s32(vdup_lane_s32(v42, 0), v41);
        v47 = v45 & v46.i32[0] & v46.i32[1];
        v48 = 4;
      }
      else
      {
        if ((_DWORD)a5 == 32)
          v52 = 1;
        else
          v52 = v35;
        v53 = *(_DWORD *)(v40 + 4 * (v36 + v52));
        v44 = *(_DWORD *)(v40 + 4 * v36);
        *(_QWORD *)&v152 = __PAIR64__(v53, v44);
        v47 = v44 == v53;
        v48 = 2;
      }
      v54 = 0;
      v55 = *v125;
      v56 = *v125;
      do
      {
        v57 = *((_DWORD *)&v152 + v54);
        v58 = (int *)(v17 + 5408);
        v59 = v56;
        if (v56)
        {
          while (1)
          {
            v60 = *v58++;
            if (v60 == v57)
              break;
            if (!--v59)
              goto LABEL_37;
          }
        }
        else
        {
LABEL_37:
          *v125 = v56 + 1;
          *((_DWORD *)v139 + v56) = v57;
          v56 = *v125;
        }
        ++v54;
      }
      while (v54 != v48);
      if (!v47)
        v44 = 0;
      v61 = v47 ^ 1;
      if (v55 != v56)
        v44 = 0;
      v132 = v44;
      v138 = 1;
      v147 = 0;
      if (v55 == v56)
        v62 = v61;
      else
        v62 = 1;
LABEL_56:
      v146 = v62;
      goto LABEL_63;
    }
    if ((_DWORD)a5 == (_DWORD)v13)
    {
      v147 = 0;
      v146 = 0;
      v49 = *(_DWORD *)(v34[(int)v21 + 24] + 4 * v36);
      goto LABEL_60;
    }
    if (v124)
    {
      v50 = (unsigned __int8 *)(v17 + 5456);
      if (v39 != 27 || *(char *)(v34[22] + v38) != (_DWORD)v21)
      {
        v51 = 1;
        goto LABEL_109;
      }
    }
    else
    {
      v50 = (unsigned __int8 *)(v17 + 5456);
      if (v39 != 28 || *(char *)(v34[22] + v38) != (_DWORD)v21)
      {
        v51 = 2 * v35;
LABEL_109:
        v109 = 0;
        v110 = v34[(int)v21 + 32];
        v111 = *(_DWORD *)(v110 + 4 * v37);
        v112 = *(_DWORD *)(v110 + 4 * (v37 + v51));
        v132 = v111;
        *(_QWORD *)&v152 = __PAIR64__(v112, v111);
        v113 = *v50;
        v114 = 1;
        v115 = *v50;
        do
        {
          v116 = v114;
          v117 = *((_DWORD *)&v152 + v109);
          v118 = (int *)(v17 + 5408);
          v119 = v115;
          if (v115)
          {
            while (1)
            {
              v120 = *v118++;
              if (v120 == v117)
                break;
              if (!--v119)
                goto LABEL_113;
            }
          }
          else
          {
LABEL_113:
            *v50 = v115 + 1;
            *((_DWORD *)v139 + v115) = v117;
            v115 = *v50;
          }
          v114 = 0;
          v109 = 1;
        }
        while ((v116 & 1) != 0);
        if (v113 != v115 || v132 != v112)
        {
          v132 = 0;
          v147 = 0;
          v146 = 1;
          v64 = 2;
          goto LABEL_62;
        }
        v147 = 0;
        v146 = 0;
LABEL_61:
        v64 = 1;
LABEL_62:
        v138 = v64;
        goto LABEL_63;
      }
    }
LABEL_59:
    v147 = 0;
    v146 = 0;
    v49 = *(_DWORD *)(v34[20] + 4 * v38);
LABEL_60:
    v132 = v49;
    goto LABEL_61;
  }
LABEL_120:
  v121 = v17 + 40 * v148;
  v122 = *(_DWORD *)(v121 + 7544);
  if (*(_BYTE *)(v17 + 192))
    v123 = v122 + 3;
  else
    v123 = v122 + 1;
  *(_DWORD *)(v121 + 7544) = v123;
  *(_QWORD *)(v121 + 7536) = *(_QWORD *)(v121 + 7528)
                           + ((v123 * *(unsigned __int16 *)(v17 + 2 * *(__int16 *)(v121 + 7548) + 992)) >> (8 * (*(_WORD *)(v121 + 7548) == 0)));
  return result;
}

uint64_t sub_1B6850954(uint64_t result, int a2, int a3, int a4, int a5, int a6, _DWORD *a7, _DWORD *a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _OWORD v22[4];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = a2 >> 2;
  if (a4 > 4)
  {
    memset(v22, 0, sizeof(v22));
    if (a6 < 4)
    {
      v12 = 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      LODWORD(v13) = a5 >> 2;
      if (a5 >> 2 <= 1)
        v13 = 1;
      else
        v13 = v13;
      do
      {
        if (a5 >= 4)
        {
          v14 = (char *)(*(_QWORD *)(*(_QWORD *)(result + 8136) + 176)
                       + v8
                       + **(_QWORD **)(result + 8136) * (int)(a3 & 0xFFFFFFFC));
          v15 = v13;
          do
          {
            v17 = *v14++;
            v16 = v17;
            ++*((_DWORD *)v22 + v17);
            if (v12 <= v17)
              v12 = v16;
            --v15;
          }
          while (v15);
        }
        ++v11;
        a3 += 4;
      }
      while (v11 != a6 >> 2);
    }
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = v12 + 1;
    do
    {
      if (*((_DWORD *)v22 + v18) > v19)
      {
        v20 = v18;
        v19 = *((_DWORD *)v22 + v18);
      }
      ++v18;
    }
    while (v21 != v18);
    *a7 = v20;
    v10 = v20 + 1;
  }
  else
  {
    v9 = *(char *)(*(_QWORD *)(*(_QWORD *)(result + 8136) + 176)
                 + **(_QWORD **)(result + 8136) * (int)(a3 & 0xFFFFFFFC)
                 + v8);
    *a7 = v9;
    v10 = v9 + 1;
  }
  *a8 = v10;
  return result;
}

BOOL sub_1B6850AA0(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 4) > *(unsigned __int16 *)(a2 + 4);
}

uint64_t sub_1B6850AB4(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a4 >= 2)
  {
    v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      v9 = a2 - 1;
      result = (*a3)(a2 - 1, (uint64_t *)result);
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *v9;
        *v9 = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v19 = (char *)a5;
      v20 = a4 >> 1;
      v21 = (uint64_t *)(result + 8 * (a4 >> 1));
      v22 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1B6850D18((uint64_t *)result, v21, a3, v22, a5);
        v23 = (uint64_t *)&v19[8 * v20];
        result = (uint64_t)sub_1B6850D18(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v23);
        v24 = &v19[8 * a4];
        v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          result = (*a3)(v25, (uint64_t *)v19);
          if ((_DWORD)result)
            v26 = (char *)v25;
          else
            v26 = v19;
          v19 += 8 * (result ^ 1);
          v25 += result;
          *v8++ = *(_QWORD *)v26;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              v27 = 0;
              do
              {
                v8[v27] = v25[v27];
                ++v27;
              }
              while (&v25[v27] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v28 = 0;
          do
          {
            v8[v28] = *(_QWORD *)&v19[v28 * 8];
            ++v28;
          }
          while (&v19[v28 * 8] != (char *)v23);
        }
      }
      else
      {
        sub_1B6850AB4(result, v21, a3, v22, a5, a6);
        sub_1B6850AB4(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v19, a6);
        return sub_1B6850F20((uint64_t)v8, &v8[a4 >> 1], a2, (uint64_t (**)(_QWORD, _QWORD))a3, a4 >> 1, a4 - (a4 >> 1), v19, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v12 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        v13 = 0;
        v14 = (uint64_t *)result;
        do
        {
          v15 = v14;
          v14 = v12;
          result = (*a3)(v12, v15);
          if ((_DWORD)result)
          {
            v29 = *v14;
            v16 = v13;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v16 + 8) = *(uint64_t *)((char *)v8 + v16);
              if (!v16)
                break;
              v16 -= 8;
              result = (*a3)(&v29, (uint64_t *)((char *)v8 + v16));
              if ((result & 1) == 0)
              {
                v17 = (uint64_t *)((char *)v8 + v16 + 8);
                goto LABEL_15;
              }
            }
            v17 = v8;
LABEL_15:
            *v17 = v29;
          }
          v12 = v14 + 1;
          v13 += 8;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_1B6850D18(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = (uint64_t *)(*a3)(a2 - 1, result);
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      *v5++ = *v11;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v19 = &result[a4 >> 1];
      sub_1B6850AB4(result, v19, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)sub_1B6850AB4(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v20 = &v7[a4 >> 1];
      while (v20 != a2)
      {
        result = (uint64_t *)(*a3)(v20, v7);
        if ((_DWORD)result)
          v21 = v20;
        else
          v21 = v7;
        v20 += result;
        v7 += result ^ 1;
        *v5++ = *v21;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            v22 = 0;
            do
            {
              v5[v22] = v20[v22];
              ++v22;
            }
            while (&v20[v22] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        v23 = 0;
        do
        {
          v5[v23] = v7[v23];
          ++v23;
        }
        while (&v7[v23] != v19);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = v14++;
          result = (uint64_t *)(*a3)(v12, v15);
          v16 = v14;
          if ((_DWORD)result)
          {
            v15[1] = *v15;
            v16 = v5;
            if (v15 != v5)
            {
              v17 = v13;
              while (1)
              {
                v16 = (uint64_t *)((char *)v5 + v17);
                result = (uint64_t *)(*a3)(v12, (uint64_t *)((char *)v5 + v17 - 8));
                if (!(_DWORD)result)
                  break;
                *(uint64_t *)((char *)v5 + v17) = *(uint64_t *)((char *)v5 + v17 - 8);
                v17 -= 8;
                if (!v17)
                {
                  v16 = v5;
                  break;
                }
              }
            }
          }
          v18 = *v12++;
          *v16 = v18;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1B6850F20(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD *, _QWORD *);
  unint64_t v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  int64_t v38;
  const void *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if (!a6)
    return result;
  v10 = a6;
  v15 = (_QWORD *)result;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      result = (*a4)(a2, v15);
      if ((result & 1) != 0)
        break;
      ++v15;
      if (!--a5)
        return result;
    }
    v78 = v10;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v68 = *v15;
        *v15 = *a2;
        *a2 = v68;
        return result;
      }
      if (a5 >= 0)
        v23 = a5;
      else
        v23 = a5 + 1;
      v24 = v23 >> 1;
      v21 = &v15[v23 >> 1];
      if (a3 == a2)
      {
        v18 = a3;
        v29 = a3;
      }
      else
      {
        v74 = v23 >> 1;
        v76 = a8;
        v70 = a7;
        v25 = (uint64_t (*)(_QWORD *, _QWORD *))*a4;
        v26 = a3 - a2;
        v18 = a2;
        do
        {
          v27 = &v18[v26 >> 1];
          v28 = v25(v27, v21);
          if (v28)
            v26 += ~(v26 >> 1);
          else
            v26 >>= 1;
          if (v28)
            v18 = v27 + 1;
        }
        while (v26);
        v29 = a2;
        a7 = v70;
        v24 = v74;
        a8 = v76;
      }
      v17 = v18 - v29;
    }
    else
    {
      if (v10 >= 0)
        v16 = v10;
      else
        v16 = v10 + 1;
      v17 = v16 >> 1;
      v18 = &a2[v16 >> 1];
      if (a2 == v15)
      {
        v21 = a2;
        v22 = a2;
      }
      else
      {
        v73 = v16 >> 1;
        v72 = a3;
        v19 = a7;
        v20 = a2 - v15;
        v21 = v15;
        do
        {
          if ((*a4)(v18, &v21[v20 >> 1]))
          {
            v20 >>= 1;
          }
          else
          {
            v21 += (v20 >> 1) + 1;
            v20 += ~(v20 >> 1);
          }
        }
        while (v20);
        v22 = v15;
        a7 = v19;
        a3 = v72;
        v17 = v73;
      }
      v24 = v21 - v22;
    }
    v30 = v18;
    if (v21 != a2)
    {
      v30 = v21;
      if (a2 != v18)
      {
        if (v21 + 1 == a2)
        {
          v77 = a8;
          v71 = a7;
          v37 = *v21;
          v38 = (char *)v18 - (char *)a2;
          v39 = a2;
          v40 = (char *)v18 - (char *)a2;
          v41 = v17;
          v42 = v24;
          memmove(v21, v39, v40);
          v24 = v42;
          v17 = v41;
          v30 = (_QWORD *)((char *)v21 + v38);
          *v30 = v37;
        }
        else
        {
          if (a2 + 1 != v18)
          {
            v31 = a2 - v21;
            if (v31 == v18 - a2)
            {
              v32 = 0;
              do
              {
                v33 = v21[v32];
                v21[v32] = a2[v32];
                v34 = (uint64_t)&v21[v32 + 1];
                a2[v32] = v33;
                v35 = (uint64_t)&a2[++v32];
              }
              while ((_QWORD *)v34 != a2 && v35 != (_QWORD)v18);
              v30 = a2;
            }
            else
            {
              v46 = v18 - a2;
              v47 = a2 - v21;
              do
              {
                v48 = v47;
                v47 = v46;
                v46 = v48 % v46;
              }
              while (v46);
              if (v47)
              {
                v49 = &v21[v47];
                do
                {
                  v51 = *--v49;
                  v50 = v51;
                  v52 = &v49[v31];
                  v53 = v49;
                  do
                  {
                    v54 = v53;
                    v53 = v52;
                    *v54 = *v52;
                    v55 = __OFSUB__(v31, v18 - v52);
                    v57 = v31 - (v18 - v52);
                    v56 = (v57 < 0) ^ v55;
                    v52 = &v21[v57];
                    if (v56)
                      v52 = &v53[v31];
                  }
                  while (v52 != v49);
                  *v53 = v50;
                }
                while (v49 != v21);
              }
              v30 = &v21[v18 - a2];
            }
            goto LABEL_64;
          }
          v77 = a8;
          v71 = a7;
          v43 = *(v18 - 1);
          v30 = v21 + 1;
          if (v18 - 1 != v21)
          {
            v44 = v17;
            v45 = v24;
            memmove(v21 + 1, v21, (char *)(v18 - 1) - (char *)v21);
            v24 = v45;
            v17 = v44;
          }
          *v21 = v43;
        }
        a7 = v71;
        a8 = v77;
      }
    }
LABEL_64:
    a5 -= v24;
    v58 = v78 - v17;
    if (v24 + v17 >= a5 + v78 - v17)
    {
      v59 = a3;
      v75 = v24;
      v60 = v17;
      result = sub_1B6850F20(v30, v18, v59, a4, a5, v78 - v17, a7, a8);
      v18 = v21;
      v10 = v60;
      a5 = v75;
      a3 = v30;
    }
    else
    {
      result = sub_1B6850F20(v15, v21, v30, a4, v24, v17, a7, a8);
      v15 = v30;
      v10 = v58;
    }
    a2 = v18;
    if (!v10)
      return result;
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v65 = 0;
      do
      {
        *(_QWORD *)&a7[v65 * 8] = v15[v65];
        ++v65;
      }
      while (&v15[v65] != a2);
      v66 = &a7[v65 * 8];
      if (&a7[v65 * 8] != a7)
      {
        while (a2 != a3)
        {
          result = (*a4)(a2, a7);
          if ((_DWORD)result)
            v67 = (char *)a2;
          else
            v67 = a7;
          a7 += 8 * (result ^ 1);
          a2 += result;
          *v15++ = *(_QWORD *)v67;
          if (a7 == v66)
            return result;
        }
        return (uint64_t)memmove(v15, a7, v66 - a7);
      }
    }
  }
  else if (a2 != a3)
  {
    v61 = 0;
    do
    {
      *(_QWORD *)&a7[v61 * 8] = a2[v61];
      ++v61;
    }
    while (&a2[v61] != a3);
    v62 = &a7[v61 * 8];
    if (&a7[v61 * 8] != a7)
    {
      v63 = a3 - 1;
      while (a2 != v15)
      {
        result = (*a4)(v62 - 8, a2 - 1);
        if ((_DWORD)result)
          v64 = (char *)a2;
        else
          v64 = v62;
        if ((_DWORD)result)
          --a2;
        else
          v62 -= 8;
        *v63-- = *((_QWORD *)v64 - 1);
        if (v62 == a7)
          return result;
      }
      v69 = 0;
      do
      {
        v63[v69] = *(_QWORD *)&v62[v69 * 8 - 8];
        --v69;
      }
      while (&v62[v69 * 8] != a7);
    }
  }
  return result;
}

BOOL sub_1B6851430(__int16 *a1, __int16 *a2, unsigned int a3)
{
  int v3;
  int v4;
  int v5;
  _BOOL4 v6;
  int v7;
  int v9;
  _BOOL4 v10;
  int v12;
  int v13;

  v3 = *((unsigned __int8 *)a1 + 8);
  if (v3 != *((unsigned __int8 *)a2 + 8))
    return 0;
  v4 = *((unsigned __int8 *)a1 + 9);
  if (v4 != *((unsigned __int8 *)a2 + 9))
    return 0;
  if (v3 == 255)
    goto LABEL_7;
  v5 = *a1 - *a2;
  if (v5 < 0)
    v5 = *a2 - *a1;
  if (v5 > a3)
  {
LABEL_7:
    v6 = 0;
  }
  else
  {
    v7 = a1[1] - a2[1];
    if (v7 < 0)
      v7 = a2[1] - a1[1];
    v6 = v7 <= a3;
  }
  if (v3 != 255 && !v6)
    return 0;
  if (v4 == 255)
    goto LABEL_19;
  v9 = a1[2] - a2[2];
  if (v9 < 0)
    v9 = a2[2] - a1[2];
  if (v9 > a3)
  {
LABEL_19:
    v10 = 0;
  }
  else
  {
    v12 = a1[3] - a2[3];
    if (v12 < 0)
      v12 = a2[3] - a1[3];
    v10 = v12 <= a3;
  }
  v13 = v4 == 255 || v10;
  return v13 != 0;
}

unint64_t *sub_1B68514F8(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t i;
  _BYTE *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t j;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t k;
  unint64_t *result;
  _OWORD *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char v73;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1888) + 21);
  v73 = 0;
  *(_DWORD *)(a1 + 212) = 0;
  if (v4 && !*(_DWORD *)(a1 + 4428) && *(_DWORD *)(a1 + 4432))
  {
    v5 = *(_QWORD *)(a1 + 944);
    v6 = *(_OWORD **)(a1 + 1872);
    v7 = v6[68];
    v8 = v6[69];
    v9 = v6[70];
    *(_OWORD *)(v5 + 72) = v6[67];
    *(_OWORD *)(v5 + 120) = v9;
    *(_OWORD *)(v5 + 104) = v8;
    *(_OWORD *)(v5 + 88) = v7;
    v10 = v6[65];
    *(_OWORD *)(v5 + 56) = v6[66];
    *(_OWORD *)(v5 + 40) = v10;
    v11 = v6[72];
    v12 = v6[73];
    v13 = *(_OWORD *)((char *)v6 + 1181);
    *(_OWORD *)(v5 + 136) = v6[71];
    *(_OWORD *)(v5 + 181) = v13;
    *(_OWORD *)(v5 + 168) = v12;
    *(_OWORD *)(v5 + 152) = v11;
  }
  v14 = *(_QWORD *)(a1 + 944);
  *(_BYTE *)(v14 + 197) = 1;
  *(_BYTE *)(a1 + 8) = 0;
  v15 = *(_QWORD *)(a1 + 1872);
  v16 = *(unsigned __int8 *)(v15 + 496);
  v17 = *(unsigned __int8 *)(v15 + 497);
  if (!*(_BYTE *)(v15 + 496))
  {
    if (!*(_BYTE *)(v15 + 497))
      goto LABEL_67;
    v17 = 1;
  }
  v71 = v17;
  v18 = *(int *)(a1 + 4420);
  v19 = *(_DWORD *)(a1 + 4424);
  v20 = *(_DWORD *)(v15 + 78140) * v19;
  v72 = *(_QWORD *)(*(_QWORD *)(v15 + 78120) + 664);
  v70 = v15 + 78120;
  v21 = *(_QWORD *)(v15 + 79048) + 2 * v20;
  if ((int)v18 < 1
    || (sub_1B67CC270((unint64_t *)v14, *(unsigned __int8 *)(v21 + 2 * v18), (_BYTE *)(v14 + 40)),
        !*(_BYTE *)(v21 + 2 * v18)))
  {
    if (v19 < 1
      || (v22 = v4,
          v23 = a2,
          v24 = v21 + 2 * v18,
          sub_1B67CC270((unint64_t *)v14, *(unsigned __int8 *)(v24 + 1), (_BYTE *)(v14 + 40)),
          v25 = *(unsigned __int8 *)(v24 + 1),
          a2 = v23,
          v4 = v22,
          !v25))
    {
      v26 = v20 + (int)v18;
      v27 = (_BYTE *)(v72 + 16 * v26);
      if (v16)
      {
        v28 = (_BYTE *)(v14 + 41);
        if ((*v27 & 1) != 0)
        {
          sub_1B67CC270((unint64_t *)v14, 1, v28);
          sub_1B67CC34C((unint64_t *)v14, (*v27 & 8) == 0);
          v29 = *(unsigned __int8 *)(v70 + 33);
          v30 = v72 + 16 * v26;
          v31 = v30 + 1;
          if ((*v27 & 0xE) == 8)
          {
            v32 = v26;
            v33 = 0;
            v34 = *(unsigned __int8 *)(v30 + 13);
            do
            {
              v35 = *(char *)(v31 + v33);
              if (v35 < 0)
                v35 = -v35;
              if (v29 >= v35)
                v36 = v35;
              else
                v36 = v29;
              v37 = v35 < v29;
              if (v36 > 0x15)
                sub_1B67CC554((unint64_t *)v14, v36, v37);
              else
                sub_1B67CC498((unint64_t *)v14, ~v37, v36 + v37);
              ++v33;
            }
            while (v33 != 4);
            for (i = 0; i != 4; ++i)
            {
              if (*(_BYTE *)(v31 + i))
                sub_1B67CC34C((unint64_t *)v14, (*(char *)(v31 + i) >> 7) & 1);
            }
            sub_1B67CC498((unint64_t *)v14, v34, 5);
            v26 = v32;
          }
          else
          {
            sub_1B687CBF0(*(unsigned __int8 *)(v70 + 33), (unint64_t *)v14, (char *)(v30 + 1));
            sub_1B67CC498((unint64_t *)v14, (*v27 >> 1) & 7, 2);
          }
        }
        else
        {
          sub_1B67CC270((unint64_t *)v14, 0, v28);
        }
      }
      if (v71)
      {
        v39 = (_BYTE *)(v14 + 41);
        if ((*v27 & 0x10) != 0)
        {
          v40 = v4;
          sub_1B67CC270((unint64_t *)v14, 1, v39);
          sub_1B67CC34C((unint64_t *)v14, (*v27 >> 7) ^ 1);
          v41 = *(unsigned __int8 *)(v70 + 33);
          v42 = v72 + 16 * v26;
          v43 = v42 + 5;
          if ((*v27 & 0xE0) == 0x80)
          {
            v44 = v26;
            v45 = 0;
            v46 = *(unsigned __int8 *)(v42 + 14);
            do
            {
              v47 = *(char *)(v43 + v45);
              if (v47 < 0)
                v47 = -v47;
              if (v41 >= v47)
                v48 = v47;
              else
                v48 = v41;
              v49 = v47 < v41;
              if (v48 > 0x15)
                sub_1B67CC554((unint64_t *)v14, v48, v49);
              else
                sub_1B67CC498((unint64_t *)v14, ~v49, v48 + v49);
              ++v45;
            }
            while (v45 != 4);
            for (j = 0; j != 4; ++j)
            {
              if (*(_BYTE *)(v43 + j))
                sub_1B67CC34C((unint64_t *)v14, (*(char *)(v43 + j) >> 7) & 1);
            }
            sub_1B67CC498((unint64_t *)v14, v46, 5);
            v51 = 0;
            v52 = *(unsigned __int8 *)(v70 + 33);
            v53 = v72 + 16 * v44;
            v54 = v53 + 9;
            v55 = *(unsigned __int8 *)(v53 + 15);
            do
            {
              v56 = *(char *)(v54 + v51);
              if (v56 < 0)
                v56 = -v56;
              if (v52 >= v56)
                v57 = v56;
              else
                v57 = v52;
              v58 = v56 < v52;
              if (v57 > 0x15)
                sub_1B67CC554((unint64_t *)v14, v57, v58);
              else
                sub_1B67CC498((unint64_t *)v14, ~v58, v57 + v58);
              ++v51;
            }
            while (v51 != 4);
            for (k = 0; k != 4; ++k)
            {
              if (*(_BYTE *)(v54 + k))
                sub_1B67CC34C((unint64_t *)v14, (*(char *)(v54 + k) >> 7) & 1);
            }
            sub_1B67CC498((unint64_t *)v14, v55, 5);
          }
          else
          {
            sub_1B687CBF0(*(unsigned __int8 *)(v70 + 33), (unint64_t *)v14, (char *)(v42 + 5));
            sub_1B67CC498((unint64_t *)v14, *v27 >> 5, 2);
            sub_1B687CBF0(*(unsigned __int8 *)(v70 + 33), (unint64_t *)v14, (char *)(v42 + 9));
          }
          v4 = v40;
        }
        else
        {
          sub_1B67CC270((unint64_t *)v14, 0, v39);
        }
      }
    }
  }
LABEL_67:
  result = sub_1B6847020((unint64_t *)a1, *(_DWORD *)(a1 + 4428), *(_DWORD *)(a1 + 4432), 0, *(unsigned int *)(a1 + 4436), a2, &v73);
  if (v4 && *(_DWORD *)(a1 + 4420) == 1)
  {
    v61 = *(_OWORD **)(a1 + 1872);
    v62 = *(_QWORD *)(a1 + 944);
    v63 = *(_OWORD *)(v62 + 88);
    v64 = *(_OWORD *)(v62 + 104);
    v65 = *(_OWORD *)(v62 + 120);
    v61[67] = *(_OWORD *)(v62 + 72);
    v61[70] = v65;
    v61[69] = v64;
    v61[68] = v63;
    v66 = *(_OWORD *)(v62 + 152);
    v67 = *(_OWORD *)(v62 + 168);
    v68 = *(_OWORD *)(v62 + 181);
    v61[71] = *(_OWORD *)(v62 + 136);
    *(_OWORD *)((char *)v61 + 1181) = v68;
    v61[73] = v67;
    v61[72] = v66;
    v69 = *(_OWORD *)(v62 + 40);
    v61[66] = *(_OWORD *)(v62 + 56);
    v61[65] = v69;
  }
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(*(_QWORD *)(a1 + 952) + 613);
  return result;
}

uint64_t sub_1B6851A28(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (a4 == 2)
  {
    v5 = *(_QWORD **)(a1 + 8136);
    v6 = *v5 * (int)(a3 & 0xFFFFFFFC) + (a2 >> 2);
    v7 = v5[14];
    return *(unsigned __int8 *)(v7 + v6);
  }
  if (a4 == 3)
  {
    v8 = *(_QWORD **)(a1 + 8136);
    v6 = *v8 * (int)((a3 >> 2) & 0xFFFFFFFE) + (a2 >> 3);
    v7 = v8[13];
    return *(unsigned __int8 *)(v7 + v6);
  }
  if (a4 != 4)
    return 0;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8136) + 96)
                          + **(_QWORD **)(a1 + 8136) * ((uint64_t)a3 >> 4)
                          + (a2 >> 4)) >= 2u)
    return 2;
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8136) + 96)
                            + **(_QWORD **)(a1 + 8136) * ((uint64_t)a3 >> 4)
                            + (a2 >> 4));
}

uint64_t sub_1B6851AC8(uint64_t a1, int a2)
{
  uint64_t v4;
  _WORD *v5;
  int v6;
  const void **v7;
  void *v8;
  CFTypeRef *v9;
  CFTypeRef v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v15;

  v4 = 0;
  *(_DWORD *)(a1 + 4240) = 6;
  *(_QWORD *)(a1 + 88) = sub_1B6852714;
  *(_QWORD *)(a1 + 96) = sub_1B6852748;
  *(_QWORD *)(a1 + 104) = sub_1B6852790;
  *(_QWORD *)(a1 + 112) = sub_1B6873040;
  *(_QWORD *)(a1 + 120) = Filter8tapV_neon64;
  *(_QWORD *)(a1 + 128) = Filter8tapH_neon64;
  *(_QWORD *)(a1 + 136) = Filter8tapH_chroma_neon64;
  v5 = (_WORD *)(a1 + 2192);
  do
  {
    v6 = dword_1B6933FD8[v4];
    sub_1B6851CD4(v6, v5 - 1024, 4u, *(_DWORD *)(a1 + 4240));
    sub_1B6851CD4(v6, v5, 8u, *(_DWORD *)(a1 + 4240));
    ++v4;
    v5 += 128;
  }
  while (v4 != 8);
  *(_BYTE *)(a1 + 4244) = a2;
  *(_QWORD *)(a1 + 4248) = 0;
  v7 = (const void **)operator new();
  *v7 = 0;
  v8 = (void *)MEMORY[0x1BCC98608]();
  v15 = objc_opt_new();
  sub_1B6777A50(v7, (const void **)&v15);
  sub_1B6777A90((const void **)&v15);
  objc_autoreleasePoolPop(v8);
  sub_1B6806EBC((const void ***)(a1 + 4256), v7);
  v9 = (CFTypeRef *)(a1 + 4264);
  v10 = *(CFTypeRef *)(a1 + 4264);
  if (!v10)
  {
    v13 = VTPixelTransferSessionCreate(0, (VTPixelTransferSessionRef *)(a1 + 4264));
    if ((_DWORD)v13)
    {
LABEL_11:
      if (*v9)
      {
        CFRelease(*v9);
        *v9 = 0;
      }
      return v13;
    }
    v10 = *v9;
  }
  v11 = (const void *)*MEMORY[0x1E0C9AE40];
  if (a2)
    v12 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v12 = (const void *)*MEMORY[0x1E0C9AE40];
  v13 = VTSessionSetProperty(v10, (CFStringRef)*MEMORY[0x1E0CED800], v12);
  if ((_DWORD)v13)
    goto LABEL_11;
  v13 = VTSessionSetProperty(*v9, (CFStringRef)*MEMORY[0x1E0CED868], v11);
  if ((_DWORD)v13)
    goto LABEL_11;
  return v13;
}

void sub_1B6851CA8(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v3;

  v3 = sub_1B6777A90(v1);
  MEMORY[0x1BCC9814C](v3, 0xC0C40B8AA526DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6851CD4(int a1, _WORD *a2, unsigned int a3, char a4)
{
  double v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  double v13;
  long double v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  double v21;
  uint64_t v22;
  _WORD *v23;
  double v24;
  double v25;
  __int16 v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  unint64_t v35;
  uint64_t result;
  double v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _WORD *v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  int v53;
  _WORD *v54;
  _WORD *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  __int16 v60;
  _QWORD v61[256];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v7 = (double)a1 * 0.125;
  v8 = 16 * a3;
  bzero(v61, 16 * a3);
  v9 = 0;
  v10 = v8 - 2;
  if (v8 <= 2)
    v11 = 2;
  else
    v11 = v8;
  v12 = (v11 - 1);
  do
  {
    v13 = ((double)(int)v9 - (double)v10 * 0.5) * 3.14159265;
    if (v13 == 0.0)
    {
      v15 = 1.0;
    }
    else
    {
      v14 = sin(v7 * (v13 * 0.0625));
      v15 = (v14 / v13 * 16.0 / v7 + v14 / v13 * 16.0 / v7) * (sin(v7 * (v13 * 0.0625 * 0.5)) / v13 * 16.0 / v7);
    }
    *(double *)&v61[++v9] = v15;
  }
  while (v12 != v9);
  v61[(v10 >> 1) + 1] = 0x3FF0000000000000;
  v16 = a3 - 1;
  v17 = 0.0;
  v18 = 16;
  v19 = v16;
  do
  {
    v17 = v17 + *(double *)&v61[v18];
    v18 += 16;
    --v19;
  }
  while (v19);
  v20 = 1 << a4;
  v21 = (double)(1 << a4);
  v22 = 16;
  v23 = a2;
  do
  {
    v24 = *(double *)&v61[v22] * v21 / v17;
    if (v24 <= 0.0)
      v25 = -0.5;
    else
      v25 = 0.5;
    *v23++ = (int)(v24 + v25);
    v22 += 16;
    --v16;
  }
  while (v16);
  v26 = 0;
  v27 = a3 - 1;
  a2[v27] = 0;
  v28 = a2;
  v29 = a3;
  do
  {
    v30 = *v28++;
    v26 += v30;
    --v29;
  }
  while (v29);
  v31 = (unsigned __int16)(v20 - v26);
  v32 = a3 >> 1;
  v33 = (v32 - 1);
  a2[v33] += v31;
  v34 = a2 + 8;
  v35 = 1;
  result = 120;
  do
  {
    v37 = 0.0;
    v38 = result;
    v39 = a3 + 1 - 1;
    do
    {
      v37 = v37 + *(double *)((char *)v61 + v38);
      v38 += 128;
      --v39;
    }
    while (v39);
    v40 = v61;
    v41 = v34;
    v42 = a3 + 1 - 1;
    do
    {
      v43 = *(double *)&v40[result] * v21 / v37;
      if (v43 <= 0.0)
        v44 = -0.5;
      else
        v44 = 0.5;
      *v41++ = (int)(v43 + v44);
      v40 += 128;
      --v42;
    }
    while (v42);
    v45 = 0;
    v46 = 0;
    do
    {
      if (v46 <= (__int16)v34[v45])
        v46 = (__int16)v34[v45];
      ++v45;
    }
    while (a3 != v45);
    if (v46 <= 100)
    {
      v56 = 0;
      v53 = 0;
      do
        v53 += (__int16)v34[v56++];
      while (a3 != v56);
      if (v35 == 8)
      {
        v50 = __OFSUB__(v20, v53);
        v57 = v20 - v53;
        if (v57 < 0 != v50)
          v58 = v57 + 1;
        else
          v58 = v57;
        v53 = v58 >> 1;
        a2[v32 + 64] += v58 >> 1;
        v55 = &a2[v33 + 64];
      }
      else
      {
        LOWORD(v53) = v20 - v53;
        if (v35 <= 7)
          v55 = &a2[8 * v35 + v27];
        else
          v55 = &a2[8 * v35];
      }
    }
    else
    {
      v47 = 0;
      do
      {
        v34[v47] = (int)(100.0 / (double)v46 * (double)(__int16)v34[v47]);
        ++v47;
      }
      while (a3 + 1 - 1 != v47);
      v48 = 0;
      v49 = 0;
      do
        v49 += (__int16)v34[v48++];
      while (a3 != v48);
      v50 = __OFSUB__(v20, v49);
      v51 = v20 - v49;
      if (v51 < 0 != v50)
        v52 = v51 + 1;
      else
        v52 = v51;
      v53 = v52 >> 1;
      v54 = &a2[8 * v35];
      v54[v32] += v52 >> 1;
      v55 = &v54[v33];
    }
    v59 = 0;
    v60 = 0;
    *v55 += v53;
    do
      v60 += v34[v59++];
    while (a3 != v59);
    a2[8 * v35++ + v33] += v20 - v60;
    result -= 8;
    v34 += 8;
  }
  while (v35 != 16);
  return result;
}

uint64_t sub_1B68520B8(_DWORD *a1, int a2, int a3, int a4, int a5, CVPixelBufferRef pixelBuffer, __CVBuffer *a7)
{
  OSType PixelFormatType;
  uint64_t result;

  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a7))
    return 4294954394;
  result = 4294954394;
  if (a2 >= 16 && a3 >= 16 && a4 >= 16 && a5 >= 16)
  {
    if (!sub_1B685218C(a2, a3, a1[1062], a1[1063], pixelBuffer))
    {
      result = sub_1B685218C(a4, a5, 0, 0, a7);
      if (!(_DWORD)result)
      {
        a1[16] = a2;
        a1[17] = a3;
        a1[18] = a4;
        a1[19] = a5;
        return result;
      }
    }
    return 4294954394;
  }
  return result;
}

uint64_t sub_1B685218C(int a1, int a2, int a3, int a4, CVPixelBufferRef pixelBuffer)
{
  size_t Width;
  size_t v11;
  size_t Height;
  uint64_t result;
  size_t v14;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  v14 = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(pixelBuffer, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v14);
  Width = CVPixelBufferGetWidth(pixelBuffer);
  v11 = extraColumnsOnLeft + Width + extraColumnsOnRight;
  Height = CVPixelBufferGetHeight(pixelBuffer);
  result = 4294954394;
  if (v11 >= a3 + a1)
  {
    if (extraRowsOnTop + Height + v14 >= a4 + a2)
      return 0;
    else
      return 4294954394;
  }
  return result;
}

uint64_t sub_1B685223C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void (*v27)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  void (*v41)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(unint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  void (*v75)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unsigned int v85;
  char v86;
  int v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[2];
  unsigned int v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void (*v119)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(result + 16);
  if (v5 != *(_QWORD *)result && *(_QWORD *)(result + 24) != *(_QWORD *)(result + 8))
  {
    v112 = v110;
    v113 = result;
    v6 = *(_QWORD *)(result + 48);
    v7 = *(_DWORD *)(result + 76);
    v8 = *(_QWORD *)(result + 32);
    v9 = *(int *)(result + 64);
    v10 = MEMORY[0x1E0C80A78](*(_QWORD *)(result + 96), a2, a3, *(unsigned int *)(result + 68), a5, *(_QWORD *)(result + 88));
    v16 = MEMORY[0x1E0C80A78](v10, v11, v12, v13, v14, v15);
    v18 = (char *)v110 - ((v17 + 15) & 0x1FFFFFFF0);
    v24 = MEMORY[0x1E0C80A78](v16, v19, v20, v21, v22, v23);
    v33 = (char *)v110 - ((v32 + 15) & 0x1FFFFFFF0);
    if ((int)v30 >= 1 && v7 >= 1)
    {
      v119 = (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t))v24;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = (v29 + 30) & 0xFFFFFFFFFFFFFFF0;
      v38 = v30;
      do
      {
        v39 = HIWORD(v35);
        *(_BYTE *)(((unint64_t)(v33 + 15) & 0xFFFFFFFFFFFFFFF0) + v34) = (unsigned __int16)v35 >> 12;
        v35 += ((_DWORD)v9 << 16) / (int)v30;
        v18[v34++] = v39 - v36;
        v36 = v39;
      }
      while (v30 != v34);
      v118 = (unint64_t)(v33 + 15) & 0xFFFFFFFFFFFFFFF0;
      v40 = v26 << 16;
      if ((int)v30 <= 2147483631)
      {
        if (v28 <= (int)v30 + 1)
          v28 = v30 + 1;
        v116 = v31;
        v117 = v9;
        v41 = v27;
        v42 = v26;
        v43 = v26 << 16;
        bzero(&v18[v30], (v28 + ~(_DWORD)v30) + 1);
        v40 = v43;
        v26 = v42;
        v27 = v41;
        v31 = v116;
        v9 = v117;
      }
      v44 = 0;
      v45 = v26 - 1;
      v117 = (int)v9 - 1;
      LODWORD(v116) = v40 / v7;
      v114 = (uint64_t)v18;
      v115 = v38;
      do
      {
        v46 = HIWORD(v44);
        v47 = (unsigned __int16)v44 >> 12;
        v44 += v116;
        v48 = v31 + v8 * v46;
        if (v45 >= (int)v46 + 1)
          v49 = v46 + 1;
        else
          v49 = v45;
        v50 = v31 + v8 * v49;
        v51 = v8;
        v52 = v6;
        v53 = v31;
        v54 = v27;
        v27(v37, v48, v50, v9, v47);
        v55 = v118;
        *(_WORD *)(v37 + 2 * v9) = *(_WORD *)(v37 + 2 * v117);
        v119(v5, v37, v115, v114, v55);
        v27 = v54;
        v31 = v53;
        v6 = v52;
        v8 = v51;
        v5 += v6;
        --v7;
      }
      while (v7);
    }
    v110[1] = v110;
    v56 = *(_QWORD *)(v113 + 24);
    v57 = *(_QWORD *)(v113 + 56);
    v58 = *(_QWORD *)(v113 + 40);
    v59 = *(int *)(v113 + 64);
    v60 = *(void (**)(unint64_t, uint64_t, uint64_t))(v113 + 88);
    v61 = MEMORY[0x1E0C80A78](*(unsigned int *)(v113 + 72), v25, (*(int *)(v113 + 72) >> 1), v59 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(v113 + 104), v27);
    v67 = MEMORY[0x1E0C80A78](v61, v62, v63, v64, v65, v66);
    result = MEMORY[0x1E0C80A78](v67, v68, v69, v70, v71, v72);
    v83 = (char *)v110 - ((v82 + 15) & 0x1FFFFFFF0);
    if ((int)result > 1 && v79 >= 2)
    {
      v119 = v75;
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = v79 >> 1;
      v88 = v80 >> 1;
      v89 = (v81 + 30) & 0xFFFFFFFFFFFFFFF0;
      v90 = (unint64_t)(v83 + 15) & 0xFFFFFFFFFFFFFFF0;
      v91 = v80 >> 1 << 16;
      if (v73 <= 1)
        v92 = 1;
      else
        v92 = v73;
      v93 = v77;
      do
      {
        v94 = HIWORD(v85);
        *(_BYTE *)(v90 + v84) = (unsigned __int16)v85 >> 12;
        v85 += (int)(((_DWORD)v59 << 15) & 0xFFFF0000) / v73;
        *(_BYTE *)(v77 + v84++) = 2 * (v94 - v86);
        v86 = v94;
      }
      while (v92 != v84);
      v118 = v90;
      if ((int)v92 < v78)
      {
        LODWORD(v115) = v88;
        v116 = v57;
        v117 = v59;
        v95 = v76;
        v96 = v74;
        v97 = v79 >> 1;
        v98 = v91;
        v99 = v73;
        bzero((void *)(v77 + v92), (v73 - v92 + 15) + 1);
        v88 = v115;
        v73 = v99;
        v91 = v98;
        v87 = v97;
        v74 = v96;
        v76 = v95;
        v57 = v116;
        v59 = v117;
      }
      v100 = 0;
      v117 = v93;
      v101 = v88 - 1;
      v115 = (int)v74;
      v116 = v74 - 2;
      v113 = (int)v74 - 1;
      v114 = v59 | 1;
      if (v87 <= 1)
        v102 = 1;
      else
        v102 = v87;
      v111 = v73;
      LODWORD(v112) = v91 / v87;
      do
      {
        v103 = HIWORD(v100);
        v100 += v112;
        v104 = v76 + v58 * v103;
        if (v101 >= (int)v103 + 1)
          v105 = v103 + 1;
        else
          v105 = v101;
        v106 = v76 + v58 * v105;
        v107 = v58;
        v108 = v76;
        v109 = v74;
        v60(v89, v104, v106);
        *(_WORD *)(v89 + 2 * v115) = *(_WORD *)(v89 + 2 * v116);
        *(_WORD *)(v89 + 2 * v114) = *(_WORD *)(v89 + 2 * v113);
        result = ((uint64_t (*)(uint64_t, unint64_t, _QWORD, uint64_t, unint64_t))v119)(v56, v89, v111, v117, v118);
        v74 = v109;
        v76 = v108;
        v58 = v107;
        v56 += v57;
        --v102;
      }
      while (v102);
    }
  }
  return result;
}

_WORD *sub_1B6852714(_WORD *result, unsigned __int8 *a2, unsigned __int8 *a3, int a4, __int16 a5)
{
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (a4 >= 1)
  {
    v5 = a4;
    do
    {
      v6 = *a2++;
      v7 = (16 - a5) * v6;
      v8 = *a3++;
      *result++ = v7 + v8 * a5;
      --v5;
    }
    while (v5);
  }
  return result;
}

_BYTE *sub_1B6852748(_BYTE *result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;

  if (a3 >= 1)
  {
    v5 = a3;
    do
    {
      v7 = *a5++;
      v6 = v7;
      v8 = 16 - v7;
      v9 = *a4++;
      a2 += v9;
      *result++ = (unsigned __int16)(a2[1] * v6 + v8 * *a2 + 128) >> 8;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1B6852790(uint64_t result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v5;
  _BYTE *v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;

  if (a3 >= 1)
  {
    v5 = a3;
    v6 = (_BYTE *)(result + 1);
    do
    {
      v8 = *a5++;
      v7 = v8;
      v9 = *a4++;
      a2 += v9;
      *(v6 - 1) = (unsigned __int16)(a2[2] * v7 + (16 - v7) * *a2 + 128) >> 8;
      *v6 = (unsigned __int16)(a2[3] * v7 + (16 - v7) * a2[1] + 128) >> 8;
      v6 += 2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1B68527F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  uint64_t j;

  if (a6)
  {
    for (i = 0; i != a6; ++i)
    {
      if (a5)
      {
        for (j = 0; j != a5; ++j)
          *(_WORD *)(result + 2 * j) = *(_WORD *)(a3 + 2 * j) << 7;
      }
      result += 2 * a2;
      a3 += 2 * a4;
    }
  }
  return result;
}

uint64_t sub_1B6852840(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  uint64_t j;

  if (a6)
  {
    for (i = 0; i != a6; ++i)
    {
      if (a5)
      {
        for (j = 0; j != a5; ++j)
          *(_WORD *)(result + 2 * j) = *(_WORD *)(a3 + 2 * j) >> 7;
      }
      result += 2 * a2;
      a3 += 2 * a4;
    }
  }
  return result;
}

uint64_t sub_1B6852888(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  void *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;

  v2 = *(_QWORD *)(a2 + 1368);
  v3 = *(unsigned __int8 *)(v2 + 2000);
  if (v3 == 8)
  {
    v4 = sub_1B68534AC;
    if (*(_BYTE *)(*(_QWORD *)(a2 + 1384) + 19))
      goto LABEL_9;
    v5 = *(unsigned __int8 *)(v2 + 255);
    v6 = sub_1B6852C90;
    goto LABEL_7;
  }
  if ((v3 - 9) > 1)
    return result;
  v4 = sub_1B6854794;
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 1384) + 19))
  {
    v5 = *(unsigned __int8 *)(v2 + 255);
    v6 = sub_1B6853F14;
LABEL_7:
    if (!v5)
      v4 = v6;
  }
LABEL_9:
  *(_QWORD *)(result + 408) = v4;
  *(_QWORD *)(result + 416) = 0;
  *(_BYTE *)(result + 32) = v3;
  v7 = -1 << (v3 - 5);
  *(_BYTE *)(result + 33) = ~(_BYTE)v7;
  if ((v7 & 0x80) == 0)
    return result;
  if (v3 == 8)
  {
    v45 = sub_1B67B4070;
    v46 = sub_1B67B42F0;
    v43 = sub_1B67B3C40;
    v44 = sub_1B67B3ED0;
    v41 = sub_1B67B32A4;
    v42 = sub_1B67B3734;
    v39 = sub_1B67B2E88;
    v40 = sub_1B67B2AB0;
    v36 = sub_1B67B2474;
    v37 = sub_1B67B21F4;
    v38 = sub_1B67B275C;
    v8 = sub_1B67B1F70;
    v9 = sub_1B67B1CEC;
    v10 = sub_1B67B1AB0;
    v11 = sub_1B67B18F8;
    v12 = sub_1B67B16EC;
    v13 = sub_1B67B14B0;
    v14 = sub_1B67B12BC;
    v15 = sub_1B67B1130;
    v16 = sub_1B67B1014;
    v17 = sub_1B67B0D64;
    v18 = sub_1B67B0874;
    v19 = sub_1B67B0404;
    v20 = sub_1B67B000C;
    v21 = sub_1B67AFD50;
    v22 = sub_1B67AFB78;
    v23 = sub_1B67AF844;
    v24 = sub_1B67AF580;
    v25 = sub_1B67AF324;
    v26 = sub_1B67AF184;
    v27 = sub_1B67AF020;
    v28 = sub_1B67AEDBC;
    v29 = sub_1B67AEBA4;
    v30 = sub_1B67AEA10;
    v31 = sub_1B67AE8E8;
    v32 = sub_1B67AE798;
    v33 = sub_1B67AE574;
    v34 = sub_1B67AE39C;
    v35 = sub_1B67AE22C;
  }
  else
  {
    if (v3 != 10)
      return result;
    v45 = sub_1B67B3F60;
    v46 = sub_1B67B4100;
    v43 = sub_1B67B3910;
    v44 = sub_1B67B3E14;
    v41 = sub_1B67B2FE0;
    v42 = sub_1B67B3404;
    v39 = sub_1B67B2C08;
    v40 = sub_1B67B28BC;
    v36 = sub_1B67B22E4;
    v37 = sub_1B67B2080;
    v38 = sub_1B67B2564;
    v8 = sub_1B67B1E04;
    v9 = sub_1B67B1B78;
    v10 = sub_1B67B19A0;
    v11 = sub_1B67B17FC;
    v12 = sub_1B67B15C8;
    v13 = sub_1B67B1384;
    v14 = sub_1B67B11D8;
    v15 = sub_1B67B107C;
    v16 = sub_1B67B0F2C;
    v17 = sub_1B67B0A40;
    v18 = sub_1B67B0554;
    v19 = sub_1B67B0154;
    v20 = sub_1B67AFD98;
    v21 = sub_1B67AFCC4;
    v22 = sub_1B67AF994;
    v23 = sub_1B67AF660;
    v24 = sub_1B67AF404;
    v25 = sub_1B67AF1BC;
    v26 = sub_1B67AF124;
    v27 = sub_1B67AEEC4;
    v28 = sub_1B67AEC5C;
    v29 = sub_1B67AEAA8;
    v30 = sub_1B67AE920;
    v31 = sub_1B67AE89C;
    v32 = sub_1B67AE67C;
    v33 = sub_1B67AE454;
    v34 = sub_1B67AE2C4;
    v35 = sub_1B67AE180;
  }
  *(_QWORD *)(result + 88) = v35;
  *(_QWORD *)(result + 96) = v34;
  *(_QWORD *)(result + 104) = v33;
  *(_QWORD *)(result + 112) = v32;
  *(_QWORD *)(result + 120) = v31;
  *(_QWORD *)(result + 128) = v30;
  *(_QWORD *)(result + 136) = v29;
  *(_QWORD *)(result + 144) = v28;
  *(_QWORD *)(result + 152) = v27;
  *(_QWORD *)(result + 160) = v26;
  *(_QWORD *)(result + 168) = v25;
  *(_QWORD *)(result + 176) = v24;
  *(_QWORD *)(result + 184) = v23;
  *(_QWORD *)(result + 192) = v22;
  *(_QWORD *)(result + 200) = v21;
  *(_QWORD *)(result + 208) = v20;
  *(_QWORD *)(result + 216) = v19;
  *(_QWORD *)(result + 224) = v18;
  *(_QWORD *)(result + 232) = v17;
  *(_QWORD *)(result + 240) = v16;
  *(_QWORD *)(result + 248) = v15;
  *(_QWORD *)(result + 256) = v14;
  *(_QWORD *)(result + 264) = v13;
  *(_QWORD *)(result + 272) = v12;
  *(_QWORD *)(result + 288) = v11;
  *(_QWORD *)(result + 296) = v10;
  *(_QWORD *)(result + 304) = v9;
  *(_QWORD *)(result + 312) = v8;
  *(_QWORD *)(result + 336) = v36;
  *(_QWORD *)(result + 344) = v38;
  *(_QWORD *)(result + 368) = v39;
  *(_QWORD *)(result + 376) = v41;
  *(_QWORD *)(result + 384) = v42;
  *(_QWORD *)(result + 392) = v43;
  *(_QWORD *)(result + 328) = v37;
  *(_QWORD *)(result + 320) = v44;
  *(_QWORD *)(result + 352) = v40;
  *(_QWORD *)(result + 360) = v45;
  *(_QWORD *)(result + 400) = v46;
  return result;
}

int8x16_t sub_1B6852C90(_QWORD **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  _QWORD *v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  int v60;
  int v61;
  BOOL v62;
  BOOL v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  int8x16_t result;
  unint64_t v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  signed int v73;
  _BOOL4 v74;
  char *v75;
  char *v76;
  uint64_t v77;
  _BOOL4 v78;
  unsigned int v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  _BOOL4 v86;
  _BOOL4 v87;
  _WORD *v88;
  char *v89;
  uint64_t v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  char *v101;
  uint64_t v102;
  char *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned __int8 v109;
  int v110;
  _BOOL4 v111;
  uint64_t v112;
  unsigned __int8 v113;
  _WORD *v115;
  char *v116;
  uint64_t v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _BOOL4 v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  _QWORD *v131;
  int vars0;
  unsigned int vars0_4;
  _QWORD *vars8;
  unsigned int vars8a;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v50 = a1;
  a48 = *MEMORY[0x1E0C80C00];
  v51 = *a1;
  v52 = (unsigned __int8 *)(v51[83] + 16 * *((_DWORD *)v50 + 5) * a3);
  v53 = v51[14];
  v54 = v51[15];
  v55 = *((_DWORD *)v50 + 3);
  v139 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*v51 + 16))(v51, 0, (*((_DWORD *)v50 + 4) * a3), 0);
  v137 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)*v50 + 16))(*v50, 0, ((*((_DWORD *)v50 + 4) * a3) >> 1), 1);
  v138 = v50[5];
  vars8 = (_QWORD *)a2;
  v136 = v50[7];
  if (a3)
    v56 = 6;
  else
    v56 = 2;
  if (*((_DWORD *)v50 + 6) - 1 <= a3)
  {
    LODWORD(v57) = *((_DWORD *)v50 + 4);
    v58 = *(_DWORD *)(*v50 + 280) - v57 * a3;
  }
  else
  {
    if (*(_BYTE *)(a2 + 496))
      memcpy((void *)v50[6], (const void *)(v139 + v53 * (*((int *)v50 + 4) - 1)), *(int *)(*v50 + 276));
    v56 = v56 | 8;
    if (*(_BYTE *)(a2 + 497))
      memcpy((void *)v50[8], (const void *)(v137 + v54 * ((*((int *)v50 + 4) >> 1) - 1)), *(int *)(*v50 + 276));
    LODWORD(v57) = *((_DWORD *)v50 + 4);
    v58 = v57;
  }
  v59 = v50 + 11;
  v129 = (v58 >> 1);
  v60 = *((_DWORD *)v50 + 5);
  v61 = v60 - 1;
  vars0_4 = v58;
  v123 = v50 + 11;
  if (v60 <= 1)
  {
    v64 = 0;
    v91 = 0;
    v127 = 0;
  }
  else
  {
    vars0 = a3;
    v128 = v54;
    v131 = v50;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = &v59[5 * v55];
    v125 = v65 + 5;
    v126 = v65 - 15;
    v124 = v58;
    v130 = v56 | 1;
    do
    {
      v66 = sub_1B6855254(vars8, v64, a3, v56);
      v68 = *v52;
      v69 = (v68 & 1) == 0;
      if ((v68 & 1) != 0)
      {
        v70 = (v68 >> 1) & 7;
        if (v70 > 4)
          return result;
        if ((_DWORD)v70 == 4)
        {
          v71 = 0;
          v72 = v52[13];
          a13 = 0u;
          a14 = 0u;
          v73 = vars0_4;
          do
          {
            *((_BYTE *)&a13 + ((v72 + (_BYTE)v71) & 0x1F)) = v52[v71 + 1];
            ++v71;
          }
          while (v71 != 4);
        }
        else
        {
          LOWORD(a13) = *(_WORD *)(v52 + 1);
          *(_WORD *)((char *)&a13 + 3) = *(_WORD *)(v52 + 3);
          BYTE2(a13) = 0;
          v73 = vars0_4;
        }
        v74 = v69;
        if (v63 && v73 > 0)
        {
          v75 = (char *)(v139 - 1);
          v76 = &a33;
          v77 = v124;
          do
          {
            *v76++ = *v75;
            v75 += v53;
            --v77;
          }
          while (v77);
        }
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t))v126[v70])(v139, v53, &a13, v66, &a33, v138);
        LODWORD(v68) = *v52;
        v69 = v74;
      }
      v78 = (v68 & 0x10) == 0;
      if ((v68 & 0x10) != 0)
      {
        if (v68 > 0x9F)
          return result;
        v79 = v68 >> 5;
        if (v79 == 4)
        {
          v80 = 0;
          v81 = v52[14];
          a13 = 0u;
          a14 = 0u;
          do
          {
            *((_BYTE *)&a13 + ((v81 + (_BYTE)v80) & 0x1F)) = v52[v80 + 5];
            ++v80;
          }
          while (v80 != 4);
          v82 = v66;
          v83 = 0;
          v84 = v52[15];
          a15 = 0u;
          a16 = 0u;
          v85 = v128;
          do
          {
            *((_BYTE *)&a15 + ((v84 + (_BYTE)v83) & 0x1F)) = v52[v83 + 9];
            ++v83;
          }
          while (v83 != 4);
        }
        else
        {
          v82 = v66;
          LOWORD(a13) = *(_WORD *)(v52 + 5);
          *(_WORD *)((char *)&a13 + 3) = *(_WORD *)(v52 + 7);
          BYTE2(a13) = 0;
          LOWORD(a15) = *(_WORD *)(v52 + 9);
          *(_WORD *)((char *)&a15 + 3) = *(_WORD *)(v52 + 11);
          BYTE2(a15) = 0;
          v85 = v128;
        }
        v86 = v69;
        v87 = v78;
        if (v62 && (int)vars0_4 > 1)
        {
          v88 = (_WORD *)(v137 - 2);
          v89 = &a17;
          v90 = v129;
          do
          {
            *(_WORD *)v89 = *v88;
            v89 += 2;
            v88 = (_WORD *)((char *)v88 + v85);
            --v90;
          }
          while (v90);
        }
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v125[v79])(v137, v85, &a13, v82, &a17, v136, v129);
        v78 = v87;
        v69 = v86;
      }
      v57 = *((int *)v131 + 4);
      v139 += v57;
      v137 += v57;
      v138 += v57;
      v136 += v57;
      v52 += 16;
      ++v64;
      v61 = *((_DWORD *)v131 + 5) - 1;
      v56 = v130;
      v62 = v78;
      v63 = v69;
    }
    while (v64 < v61);
    v91 = v69;
    v127 = v78;
    LODWORD(v56) = v130;
    v50 = v131;
    v54 = v128;
  }
  v92 = sub_1B6855254(vars8, v64, a3, v56 & 0xFFFFFFFD);
  v93 = v92;
  v94 = *(_DWORD *)(*v50 + 276) - v61 * v57;
  v95 = *v52;
  if ((v95 & 1) != 0)
  {
    v96 = (v95 >> 1) & 7;
    if (v96 > 4)
      return result;
    if ((_DWORD)v96 == 4)
    {
      v97 = 0;
      v98 = v52[13];
      result = 0uLL;
      a13 = 0u;
      a14 = 0u;
      v99 = vars0_4;
      do
      {
        *((_BYTE *)&a13 + ((v98 + (_BYTE)v97) & 0x1F)) = v52[v97 + 1];
        ++v97;
      }
      while (v97 != 4);
    }
    else
    {
      LOWORD(a13) = *(_WORD *)(v52 + 1);
      *(_WORD *)((char *)&a13 + 3) = *(_WORD *)(v52 + 3);
      BYTE2(a13) = 0;
      v99 = vars0_4;
    }
    if ((int)v99 > 0 && v91)
    {
      v101 = (char *)(v139 - 1);
      v102 = v99;
      v103 = &a33;
      do
      {
        *v103++ = *v101;
        v101 += v53;
        --v102;
      }
      while (v102);
    }
    if (v94 >= 64)
    {
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v50[v96 + 26])(v139, v53, &a13, v92, &a33, v138, v99);
LABEL_66:
      LODWORD(v95) = *v52;
      goto LABEL_67;
    }
    v104 = v94 >> 3;
    if ((v94 & 0x20) != 0)
    {
      v104 -= 4;
      if (v104)
        v105 = v92 | 2;
      else
        v105 = v92;
      vars8a = v92 | 1;
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t))v50[v96 + 21])(v139, v53, &a13, v105, &a33, v138);
      v138 += 32;
      v139 += 32;
      if ((v104 & 2) == 0)
      {
LABEL_64:
        if (v104)
          ((void (*)(uint64_t, uint64_t, __int128 *, _QWORD, char *, uint64_t, _QWORD))v123[v96])(v139, v53, &a13, vars8a, &a33, v138, vars0_4);
        goto LABEL_66;
      }
    }
    else
    {
      vars8a = v92;
      if ((v104 & 2) == 0)
        goto LABEL_64;
    }
    v104 -= 2;
    if (v104)
      v106 = vars8a | 2;
    else
      v106 = vars8a;
    vars8a |= 1u;
    ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))v50[v96 + 16])(v139, v53, &a13, v106, &a33, v138, vars0_4);
    v138 += 16;
    v139 += 16;
    goto LABEL_64;
  }
LABEL_67:
  if ((v95 & 0x10) == 0)
  {
LABEL_98:
    *(int8x16_t *)(v50 + 5) = vextq_s8(*(int8x16_t *)(v50 + 5), *(int8x16_t *)(v50 + 5), 8uLL);
    result = vextq_s8(*(int8x16_t *)(v50 + 7), *(int8x16_t *)(v50 + 7), 8uLL);
    *(int8x16_t *)(v50 + 7) = result;
    return result;
  }
  if (v95 <= 0x9F)
  {
    v107 = v95 >> 5;
    if (v95 >> 5 == 4)
    {
      v108 = 0;
      v109 = v52[14];
      a13 = 0u;
      a14 = 0u;
      v110 = vars0_4;
      v111 = v127;
      do
      {
        *((_BYTE *)&a13 + ((v109 + (_BYTE)v108) & 0x1F)) = v52[v108 + 5];
        ++v108;
      }
      while (v108 != 4);
      v112 = 0;
      v113 = v52[15];
      a15 = 0u;
      a16 = 0u;
      do
      {
        *((_BYTE *)&a15 + ((v113 + (_BYTE)v112) & 0x1F)) = v52[v112 + 9];
        ++v112;
      }
      while (v112 != 4);
    }
    else
    {
      LOWORD(a13) = *(_WORD *)(v52 + 5);
      *(_WORD *)((char *)&a13 + 3) = *(_WORD *)(v52 + 7);
      BYTE2(a13) = 0;
      LOWORD(a15) = *(_WORD *)(v52 + 9);
      *(_WORD *)((char *)&a15 + 3) = *(_WORD *)(v52 + 11);
      BYTE2(a15) = 0;
      v110 = vars0_4;
      v111 = v127;
    }
    if (v110 > 1 && v111)
    {
      v115 = (_WORD *)(v137 - 2);
      v116 = &a17;
      v117 = v129;
      do
      {
        *(_WORD *)v116 = *v115;
        v116 += 2;
        v115 = (_WORD *)((char *)v115 + v54);
        --v117;
      }
      while (v117);
    }
    if (v94 >= 64)
    {
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v50[v107 + 46])(v137, v54, &a13, v93, &a17, v136, v129);
      goto LABEL_98;
    }
    v118 = v94 >> 3;
    v119 = &v50[v107];
    if ((v94 & 0x20) != 0)
    {
      v118 -= 4;
      if (v118)
        v120 = v93 | 2;
      else
        v120 = v93;
      v93 = v93 | 1;
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v119[41])(v137, v54, &a13, v120, &a17, v136, v129);
      v136 += 32;
      v137 += 32;
      if ((v118 & 2) == 0)
      {
LABEL_87:
        if (!v118)
          goto LABEL_98;
        goto LABEL_97;
      }
    }
    else if ((v118 & 2) == 0)
    {
      goto LABEL_87;
    }
    v121 = v118 - 2;
    if (v121)
      v122 = v93 | 2;
    else
      v122 = v93;
    v93 = v93 | 1;
    ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v119[36])(v137, v54, &a13, v122, &a17, v136, v129);
    v136 += 16;
    v137 += 16;
    if (!v121)
      goto LABEL_98;
LABEL_97:
    ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v50[v107 + 31])(v137, v54, &a13, v93, &a17, v136, v129);
    goto LABEL_98;
  }
  return result;
}

int8x16_t sub_1B68534AC(_QWORD **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  _QWORD *v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  int v65;
  int v66;
  BOOL v67;
  BOOL v68;
  int v69;
  _QWORD *v70;
  int8x16_t result;
  unint64_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  int v77;
  uint64_t v78;
  int v79;
  _BOOL4 v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;
  _WORD *v98;
  char *v99;
  uint64_t v100;
  _BOOL4 v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 v110;
  int v111;
  uint64_t v112;
  _BOOL4 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BOOL4 v127;
  unsigned int v128;
  uint64_t v129;
  unsigned __int8 v130;
  int v131;
  uint64_t v132;
  unsigned __int8 v133;
  uint64_t v134;
  _WORD *v136;
  char *v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  _QWORD *v145;
  char *__dst;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int vars0;
  _BOOL4 vars0_4a;
  _BOOL4 vars0_4;
  unsigned int vars8;
  int vars8_4;
  _BOOL4 vars8_4a;
  int vars8_4b;
  int vars8_4c;
  uint64_t v161;
  BOOL v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;

  v54 = a1;
  a52 = *MEMORY[0x1E0C80C00];
  v55 = *a1;
  v56 = (unsigned __int8 *)(v55[83] + 16 * *((_DWORD *)v54 + 5) * a3);
  v57 = v55[15];
  v161 = v55[14];
  v58 = *((_DWORD *)v54 + 3);
  v170 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*v55 + 16))(v55, 0, (*((_DWORD *)v54 + 4) * a3), 0);
  v59 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)*v54 + 16))(*v54, 0, ((*((_DWORD *)v54 + 4) * a3) >> 1), 1);
  v167 = v59;
  v168 = v54[5];
  v165 = v54[7];
  if (a3)
    v60 = 6;
  else
    v60 = 2;
  v169 = a3;
  if (*((_DWORD *)v54 + 6) - 1 <= a3)
  {
    LODWORD(v62) = *((_DWORD *)v54 + 4);
    v63 = *(_DWORD *)(*v54 + 280) - v62 * a3;
  }
  else
  {
    v61 = v59;
    if (*(_BYTE *)(a2 + 496))
      memcpy((void *)v54[6], (const void *)(v170 + v161 * (*((int *)v54 + 4) - 1)), *(int *)(*v54 + 276));
    v60 = v60 | 8;
    if (*(_BYTE *)(a2 + 497))
      memcpy((void *)v54[8], (const void *)(v61 + v57 * ((*((int *)v54 + 4) >> 1) - 1)), *(int *)(*v54 + 276));
    LODWORD(v62) = *((_DWORD *)v54 + 4);
    v63 = v62;
  }
  v64 = v54 + 11;
  v151 = v57;
  v152 = (v63 >> 1);
  v65 = *((_DWORD *)v54 + 5);
  v66 = v65 - 1;
  v166 = v63;
  if (v65 <= 1)
  {
    v69 = 0;
    v101 = 0;
    v92 = 0;
  }
  else
  {
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v144 = v54 + 11;
    v70 = &v64[5 * v58];
    v147 = v70 + 5;
    v148 = v70 - 15;
    v149 = v54;
    v150 = v63;
    vars8 = v60 | 1;
    __dst = (char *)(a2 + 4392);
    do
    {
      v162 = v67;
      v163 = sub_1B6855254((_QWORD *)a2, v69, v169, v60);
      v72 = *v56;
      v73 = (v72 & 1) == 0;
      if ((v72 & 1) != 0)
      {
        v74 = (v72 >> 1) & 7;
        if (v74 > 4)
          return result;
        if ((_DWORD)v74 == 4)
        {
          v75 = 0;
          v76 = v56[13];
          a17 = 0u;
          a18 = 0u;
          v77 = v166;
          v78 = v161;
          v79 = v169;
          do
          {
            *((_BYTE *)&a17 + ((v76 + (_BYTE)v75) & 0x1F)) = v56[v75 + 1];
            ++v75;
          }
          while (v75 != 4);
        }
        else
        {
          LOWORD(a17) = *(_WORD *)(v56 + 1);
          *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v56 + 3);
          BYTE2(a17) = 0;
          v77 = v166;
          v78 = v161;
          v79 = v169;
        }
        v80 = v73;
        if (v68 && v77 > 0)
        {
          v81 = (char *)(v170 - 1);
          v82 = &a37;
          v83 = v150;
          do
          {
            *v82++ = *v81;
            v81 += v78;
            --v83;
          }
          while (v83);
        }
        v84 = *((_DWORD *)v54 + 3);
        vars8_4 = v69;
        v85 = (v69 << v84);
        v86 = a2;
        v87 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 1360) + 16))(*(_QWORD *)(a2 + 1360), v85, (v79 << v84), 0);
        if (v166 >= 1)
        {
          v88 = (char *)v87;
          v89 = *(_QWORD *)(*(_QWORD *)(a2 + 1360) + 112);
          v90 = __dst;
          v91 = v150;
          do
          {
            memcpy(v90, v88, (int)v62);
            v88 += v89;
            v90 += (int)v62;
            --v91;
          }
          while (v91);
        }
        ((void (*)(uint64_t, uint64_t, __int128 *, _QWORD, char *, uint64_t, _QWORD))v148[v74])(v170, v161, &a17, v163, &a37, v168, v166);
        v54 = v149;
        a2 = v86;
        v69 = vars8_4;
        sub_1B67C8928(a2, vars8_4 << *((_DWORD *)v149 + 3), v169 << *((_DWORD *)v149 + 3), *((_DWORD *)v149 + 4), v166, 0);
        LODWORD(v72) = *v56;
        v73 = v80;
      }
      v92 = (v72 & 0x10) == 0;
      if ((v72 & 0x10) != 0)
      {
        if (v72 > 0x9F)
          return result;
        vars0 = v72 >> 5;
        if (v72 >> 5 == 4)
        {
          v93 = 0;
          v94 = v56[14];
          a17 = 0u;
          a18 = 0u;
          do
          {
            *((_BYTE *)&a17 + ((v94 + (_BYTE)v93) & 0x1F)) = v56[v93 + 5];
            ++v93;
          }
          while (v93 != 4);
          v95 = 0;
          v96 = v56[15];
          a19 = 0u;
          a20 = 0u;
          v97 = v151;
          do
          {
            *((_BYTE *)&a19 + ((v96 + (_BYTE)v95) & 0x1F)) = v56[v95 + 9];
            ++v95;
          }
          while (v95 != 4);
        }
        else
        {
          LOWORD(a17) = *(_WORD *)(v56 + 5);
          *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v56 + 7);
          BYTE2(a17) = 0;
          LOWORD(a19) = *(_WORD *)(v56 + 9);
          *(_WORD *)((char *)&a19 + 3) = *(_WORD *)(v56 + 11);
          BYTE2(a19) = 0;
          v97 = v151;
        }
        vars8_4a = v73;
        vars0_4a = v92;
        if (v162 && v166 > 1)
        {
          v98 = (_WORD *)(v167 - 2);
          v99 = &a21;
          v100 = v152;
          do
          {
            *(_WORD *)v99 = *v98;
            v99 += 2;
            v98 = (_WORD *)((char *)v98 + v97);
            --v100;
          }
          while (v100);
        }
        sub_1B67C87EC(a2, v69 << *((_DWORD *)v54 + 3), v169 << *((_DWORD *)v54 + 3), *((_DWORD *)v54 + 4), v166, 1);
        ((void (*)(uint64_t, uint64_t, __int128 *, _QWORD, char *, uint64_t, uint64_t))v147[vars0])(v167, v97, &a17, v163, &a21, v165, v152);
        sub_1B67C8928(a2, v69 << *((_DWORD *)v54 + 3), v169 << *((_DWORD *)v54 + 3), *((_DWORD *)v54 + 4), v166, 1);
        v73 = vars8_4a;
      }
      v62 = *((int *)v54 + 4);
      v170 += v62;
      v167 += v62;
      v168 += v62;
      v165 += v62;
      v56 += 16;
      ++v69;
      v66 = *((_DWORD *)v54 + 5) - 1;
      v60 = vars8;
      v67 = v92;
      v68 = v73;
    }
    while (v69 < v66);
    v101 = v73;
    LODWORD(v60) = vars8;
    v64 = v144;
  }
  v102 = v60 & 0xFFFFFFFD;
  v103 = v169;
  v104 = sub_1B6855254((_QWORD *)a2, v69, v169, v102);
  v105 = *(int *)(*v54 + 276) - (uint64_t)(v66 * (int)v62);
  v106 = *v56;
  v107 = v167;
  if ((v106 & 1) != 0)
  {
    vars0_4 = v92;
    v108 = (v106 >> 1) & 7;
    if (v108 > 4)
      return result;
    vars8_4b = v69;
    if ((_DWORD)v108 == 4)
    {
      v109 = 0;
      v110 = v56[13];
      a17 = 0u;
      a18 = 0u;
      v111 = v166;
      v112 = v161;
      do
      {
        *((_BYTE *)&a17 + ((v110 + (_BYTE)v109) & 0x1F)) = v56[v109 + 1];
        ++v109;
      }
      while (v109 != 4);
    }
    else
    {
      LOWORD(a17) = *(_WORD *)(v56 + 1);
      *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v56 + 3);
      BYTE2(a17) = 0;
      v111 = v166;
      v112 = v161;
    }
    v164 = v104;
    v145 = v64;
    v113 = v111 > 0 && v101;
    v114 = v111;
    if (v113)
    {
      v115 = (char *)(v170 - 1);
      v116 = &a37;
      v117 = v111;
      do
      {
        *v116++ = *v115;
        v115 += v112;
        --v117;
      }
      while (v117);
    }
    v118 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 1360) + 16))(*(_QWORD *)(a2 + 1360), (vars8_4b << *((_DWORD *)v54 + 3)), (v169 << *((_DWORD *)v54 + 3)), 0);
    if (v166 >= 1)
    {
      v119 = (char *)v118;
      v120 = (char *)(a2 + 4392);
      v121 = *(_QWORD *)(*(_QWORD *)(a2 + 1360) + 112);
      do
      {
        memcpy(v120, v119, v105);
        v119 += v121;
        v120 += v105;
        --v114;
      }
      while (v114);
    }
    if ((int)v105 < 64)
    {
      v123 = (int)v105 >> 3;
      if ((v105 & 0x20) != 0)
      {
        v123 -= 4;
        if (v123)
          v125 = v164 | 2;
        else
          v125 = v164;
        v124 = v164 | 1;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))v54[v108
                                                                                                + 21])(v170, v161, &a17, v125, &a37, v168, v166);
        v170 += 32;
        v168 += 32;
      }
      else
      {
        v124 = v164;
      }
      v107 = v167;
      if ((v123 & 2) != 0)
      {
        v123 -= 2;
        if (v123)
          v126 = v124 | 2;
        else
          v126 = v124;
        v124 = v124 | 1;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))v54[v108
                                                                                                + 16])(v170, v161, &a17, v126, &a37, v168, v166);
        v170 += 16;
        v168 += 16;
      }
      v122 = v166;
      if (v123)
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))v145[v108])(v170, v161, &a17, v124, &a37, v168, v166);
    }
    else
    {
      v122 = v166;
      ((void (*)(uint64_t, uint64_t, __int128 *, _QWORD, char *, uint64_t, _QWORD))v54[v108 + 26])(v170, v161, &a17, v164, &a37, v168, v166);
      v107 = v167;
    }
    v69 = vars8_4b;
    v103 = v169;
    sub_1B67C8928(a2, vars8_4b << *((_DWORD *)v54 + 3), v169 << *((_DWORD *)v54 + 3), v105, v122, 0);
    LODWORD(v106) = *v56;
    v92 = vars0_4;
    v104 = v164;
  }
  if ((v106 & 0x10) == 0)
  {
LABEL_105:
    *(int8x16_t *)(v54 + 5) = vextq_s8(*(int8x16_t *)(v54 + 5), *(int8x16_t *)(v54 + 5), 8uLL);
    result = vextq_s8(*(int8x16_t *)(v54 + 7), *(int8x16_t *)(v54 + 7), 8uLL);
    *(int8x16_t *)(v54 + 7) = result;
    return result;
  }
  if (v106 <= 0x9F)
  {
    v127 = v92;
    v128 = v106 >> 5;
    if (v106 >> 5 == 4)
    {
      v129 = 0;
      v130 = v56[14];
      a17 = 0u;
      a18 = 0u;
      v131 = v166;
      do
      {
        *((_BYTE *)&a17 + ((v130 + (_BYTE)v129) & 0x1F)) = v56[v129 + 5];
        ++v129;
      }
      while (v129 != 4);
      v132 = 0;
      v133 = v56[15];
      a19 = 0u;
      a20 = 0u;
      do
      {
        *((_BYTE *)&a19 + ((v133 + (_BYTE)v132) & 0x1F)) = v56[v132 + 9];
        ++v132;
      }
      while (v132 != 4);
    }
    else
    {
      LOWORD(a17) = *(_WORD *)(v56 + 5);
      *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v56 + 7);
      BYTE2(a17) = 0;
      LOWORD(a19) = *(_WORD *)(v56 + 9);
      *(_WORD *)((char *)&a19 + 3) = *(_WORD *)(v56 + 11);
      BYTE2(a19) = 0;
      v131 = v166;
    }
    v134 = v104;
    if (v131 > 1 && v127)
    {
      v136 = (_WORD *)(v107 - 2);
      v137 = &a21;
      v138 = v152;
      do
      {
        *(_WORD *)v137 = *v136;
        v137 += 2;
        v136 = (_WORD *)((char *)v136 + v151);
        --v138;
      }
      while (v138);
    }
    vars8_4c = v69;
    sub_1B67C87EC(a2, v69 << *((_DWORD *)v54 + 3), v103 << *((_DWORD *)v54 + 3), v105, v131, 1);
    if ((int)v105 < 64)
    {
      v139 = (int)v105 >> 3;
      v140 = &v54[v128];
      if ((v105 & 0x20) != 0)
      {
        v139 -= 4;
        if (v139)
          v141 = v134 | 2;
        else
          v141 = v134;
        v134 = v134 | 1;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v140[41])(v107, v151, &a17, v141, &a21, v165, v152);
        v107 += 32;
        v165 += 32;
      }
      if ((v139 & 2) != 0)
      {
        v139 -= 2;
        if (v139)
          v142 = v134 | 2;
        else
          v142 = v134;
        v134 = v134 | 1;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v140[36])(v107, v151, &a17, v142, &a21, v165, v152);
        v107 += 16;
        v165 += 16;
      }
      v143 = v166;
      if (!v139)
        goto LABEL_104;
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v54[v128 + 31])(v107, v151, &a17, v134, &a21, v165, v152);
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v54[v128 + 46])(v107, v151, &a17, v134, &a21, v165, v152);
    }
    v143 = v166;
LABEL_104:
    sub_1B67C8928(a2, vars8_4c << *((_DWORD *)v54 + 3), v169 << *((_DWORD *)v54 + 3), v105, v143, 1);
    goto LABEL_105;
  }
  return result;
}

int8x16_t sub_1B6853F14(_QWORD **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  _QWORD *v70;
  _QWORD *v71;
  unsigned __int8 *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  int v79;
  int v80;
  BOOL v81;
  BOOL v82;
  int v83;
  _QWORD *v84;
  uint64_t v85;
  int8x16_t result;
  unint64_t v87;
  _BOOL4 v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  signed int v92;
  _BOOL4 v93;
  _WORD *v94;
  char *v95;
  uint64_t v96;
  _BOOL4 v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _DWORD *v106;
  char *v107;
  uint64_t v108;
  _BOOL4 v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  _WORD *v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned __int8 v129;
  int v130;
  _BOOL4 v131;
  uint64_t v132;
  unsigned __int8 v133;
  _DWORD *v135;
  char *v136;
  uint64_t v137;
  int v138;
  _QWORD *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t vars0;
  unsigned int vars8_4;
  _QWORD *v150;
  unsigned int v151;
  BOOL v152;
  _BOOL4 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v70 = a1;
  a68 = *MEMORY[0x1E0C80C00];
  v71 = *a1;
  v72 = (unsigned __int8 *)(v71[83] + 16 * *((_DWORD *)v70 + 5) * a3);
  v146 = v71[15];
  v147 = v71[14];
  v73 = *((_DWORD *)v70 + 3);
  v157 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*v71 + 16))(v71, 0, (*((_DWORD *)v70 + 4) * a3), 0);
  v74 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)*v70 + 16))(*v70, 0, ((*((_DWORD *)v70 + 4) * a3) >> 1), 1);
  v155 = v70[5];
  v156 = v74;
  v154 = v70[7];
  if (a3)
    v75 = 6;
  else
    v75 = 2;
  if (*((_DWORD *)v70 + 6) - 1 <= a3)
  {
    LODWORD(v76) = *((_DWORD *)v70 + 4);
    v77 = *(_DWORD *)(*v70 + 280) - v76 * a3;
  }
  else
  {
    if (*(_BYTE *)(a2 + 496))
      memcpy((void *)v70[6], (const void *)(v157 + 2 * v147 * (*((int *)v70 + 4) - 1)), 2 * *(int *)(*v70 + 276));
    v75 = v75 | 8;
    if (*(_BYTE *)(a2 + 497))
      memcpy((void *)v70[8], (const void *)(v156 + 2 * v146 * ((*((int *)v70 + 4) >> 1) - 1)), 2 * *(int *)(*v70 + 276));
    LODWORD(v76) = *((_DWORD *)v70 + 4);
    v77 = v76;
  }
  v78 = v70 + 11;
  vars0 = (v77 >> 1);
  v79 = *((_DWORD *)v70 + 5);
  v80 = v79 - 1;
  v151 = v77;
  if (v79 <= 1)
  {
    v83 = 0;
    v109 = 0;
    v153 = 0;
  }
  else
  {
    v150 = v70;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = &v78[5 * v73];
    v144 = v84 + 5;
    v145 = v84 - 15;
    v143 = v77;
    vars8_4 = v75 | 1;
    do
    {
      v152 = v81;
      v85 = sub_1B6855254((_QWORD *)a2, v83, a3, v75);
      v87 = *v72;
      v88 = (v87 & 1) == 0;
      if ((v87 & 1) != 0)
      {
        v89 = (v87 >> 1) & 7;
        if (v89 > 4)
          return result;
        if ((_DWORD)v89 == 4)
        {
          v90 = 0;
          v91 = v72[13];
          a17 = 0u;
          a18 = 0u;
          v92 = v151;
          do
          {
            *((_BYTE *)&a17 + ((v91 + (_BYTE)v90) & 0x1F)) = v72[v90 + 1];
            ++v90;
          }
          while (v90 != 4);
        }
        else
        {
          LOWORD(a17) = *(_WORD *)(v72 + 1);
          *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 3);
          BYTE2(a17) = 0;
          v92 = v151;
        }
        v93 = v88;
        if (v82 && v92 > 0)
        {
          v94 = (_WORD *)(v157 - 2);
          v95 = &a45;
          v96 = v143;
          do
          {
            *(_WORD *)v95 = *v94;
            v95 += 2;
            v94 += v147;
            --v96;
          }
          while (v96);
        }
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t))v145[v89])(v157, v147, &a17, v85, &a45, v155);
        LODWORD(v87) = *v72;
        v88 = v93;
      }
      v97 = (v87 & 0x10) == 0;
      if ((v87 & 0x10) != 0)
      {
        if (v87 > 0x9F)
          return result;
        v98 = v87 >> 5;
        if (v98 == 4)
        {
          v99 = 0;
          v100 = v72[14];
          a17 = 0u;
          a18 = 0u;
          do
          {
            *((_BYTE *)&a17 + ((v100 + (_BYTE)v99) & 0x1F)) = v72[v99 + 5];
            ++v99;
          }
          while (v99 != 4);
          v101 = v85;
          v102 = 0;
          v103 = v72[15];
          a19 = 0u;
          a20 = 0u;
          do
          {
            *((_BYTE *)&a19 + ((v103 + (_BYTE)v102) & 0x1F)) = v72[v102 + 9];
            ++v102;
          }
          while (v102 != 4);
        }
        else
        {
          v101 = v85;
          LOWORD(a17) = *(_WORD *)(v72 + 5);
          *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 7);
          BYTE2(a17) = 0;
          LOWORD(a19) = *(_WORD *)(v72 + 9);
          *(_WORD *)((char *)&a19 + 3) = *(_WORD *)(v72 + 11);
          BYTE2(a19) = 0;
        }
        v104 = v88;
        v105 = v97;
        if (v152 && (int)v151 > 1)
        {
          v106 = (_DWORD *)(v156 - 4);
          v107 = &a21;
          v108 = vars0;
          do
          {
            *(_DWORD *)v107 = *v106;
            v107 += 4;
            v106 = (_DWORD *)((char *)v106 + 2 * v146);
            --v108;
          }
          while (v108);
        }
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v144[v98])(v156, v146, &a17, v101, &a21, v154, vars0);
        v97 = v105;
        v88 = v104;
      }
      v76 = *((int *)v150 + 4);
      v156 += 2 * v76;
      v157 += 2 * v76;
      v154 += 2 * v76;
      v155 += 2 * v76;
      v72 += 16;
      ++v83;
      v80 = *((_DWORD *)v150 + 5) - 1;
      v75 = vars8_4;
      v81 = v97;
      v82 = v88;
    }
    while (v83 < v80);
    v109 = v88;
    v153 = v97;
    LODWORD(v75) = vars8_4;
    v70 = v150;
  }
  v110 = sub_1B6855254((_QWORD *)a2, v83, a3, v75 & 0xFFFFFFFD);
  v111 = v110;
  v112 = *(_DWORD *)(*v70 + 276) - v80 * v76;
  v113 = *v72;
  if ((v113 & 1) != 0)
  {
    v114 = (v113 >> 1) & 7;
    if (v114 > 4)
      return result;
    if ((_DWORD)v114 == 4)
    {
      v115 = 0;
      v116 = v72[13];
      result = 0uLL;
      a17 = 0u;
      a18 = 0u;
      v117 = v151;
      do
      {
        *((_BYTE *)&a17 + ((v116 + (_BYTE)v115) & 0x1F)) = v72[v115 + 1];
        ++v115;
      }
      while (v115 != 4);
    }
    else
    {
      LOWORD(a17) = *(_WORD *)(v72 + 1);
      *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 3);
      BYTE2(a17) = 0;
      v117 = v151;
    }
    if ((int)v117 > 0 && v109)
    {
      v119 = (_WORD *)(v157 - 2);
      v120 = &a45;
      v121 = v117;
      do
      {
        *(_WORD *)v120 = *v119;
        v120 += 2;
        v119 += v147;
        --v121;
      }
      while (v121);
    }
    if (v112 >= 64)
    {
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v70[v114 + 26])(v157, v147, &a17, v110, &a45, v155, v117);
LABEL_66:
      LODWORD(v113) = *v72;
      goto LABEL_67;
    }
    v122 = v78;
    v123 = v112 >> 3;
    if ((v112 & 0x20) != 0)
    {
      v123 -= 4;
      if (v123)
        v125 = v110 | 2;
      else
        v125 = v110;
      v124 = v110 | 1;
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t))v70[v114 + 21])(v157, v147, &a17, v125, &a45, v155);
      v157 += 64;
      v155 += 64;
      if ((v123 & 2) == 0)
      {
LABEL_64:
        if (v123)
          ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))v122[v114])(v157, v147, &a17, v124, &a45, v155, v151);
        goto LABEL_66;
      }
    }
    else
    {
      v124 = v110;
      if ((v123 & 2) == 0)
        goto LABEL_64;
    }
    v123 -= 2;
    if (v123)
      v126 = v124 | 2;
    else
      v126 = v124;
    v124 = v124 | 1;
    ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))v70[v114 + 16])(v157, v147, &a17, v126, &a45, v155, v151);
    v157 += 32;
    v155 += 32;
    goto LABEL_64;
  }
LABEL_67:
  if ((v113 & 0x10) == 0)
  {
LABEL_98:
    *(int8x16_t *)(v70 + 5) = vextq_s8(*(int8x16_t *)(v70 + 5), *(int8x16_t *)(v70 + 5), 8uLL);
    result = vextq_s8(*(int8x16_t *)(v70 + 7), *(int8x16_t *)(v70 + 7), 8uLL);
    *(int8x16_t *)(v70 + 7) = result;
    return result;
  }
  if (v113 <= 0x9F)
  {
    v127 = v113 >> 5;
    if (v113 >> 5 == 4)
    {
      v128 = 0;
      v129 = v72[14];
      a17 = 0u;
      a18 = 0u;
      v130 = v151;
      v131 = v153;
      do
      {
        *((_BYTE *)&a17 + ((v129 + (_BYTE)v128) & 0x1F)) = v72[v128 + 5];
        ++v128;
      }
      while (v128 != 4);
      v132 = 0;
      v133 = v72[15];
      a19 = 0u;
      a20 = 0u;
      do
      {
        *((_BYTE *)&a19 + ((v133 + (_BYTE)v132) & 0x1F)) = v72[v132 + 9];
        ++v132;
      }
      while (v132 != 4);
    }
    else
    {
      LOWORD(a17) = *(_WORD *)(v72 + 5);
      *(_WORD *)((char *)&a17 + 3) = *(_WORD *)(v72 + 7);
      BYTE2(a17) = 0;
      LOWORD(a19) = *(_WORD *)(v72 + 9);
      *(_WORD *)((char *)&a19 + 3) = *(_WORD *)(v72 + 11);
      BYTE2(a19) = 0;
      v130 = v151;
      v131 = v153;
    }
    if (v130 > 1 && v131)
    {
      v135 = (_DWORD *)(v156 - 4);
      v136 = &a21;
      v137 = vars0;
      do
      {
        *(_DWORD *)v136 = *v135;
        v136 += 4;
        v135 = (_DWORD *)((char *)v135 + 2 * v146);
        --v137;
      }
      while (v137);
    }
    if (v112 >= 64)
    {
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v70[v127 + 46])(v156, v146, &a17, v111, &a21, v154, vars0);
      goto LABEL_98;
    }
    v138 = v112 >> 3;
    v139 = &v70[v127];
    if ((v112 & 0x20) != 0)
    {
      v138 -= 4;
      if (v138)
        v140 = v111 | 2;
      else
        v140 = v111;
      v111 = v111 | 1;
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v139[41])(v156, v146, &a17, v140, &a21, v154, vars0);
      v156 += 64;
      v154 += 64;
      if ((v138 & 2) == 0)
      {
LABEL_87:
        if (!v138)
          goto LABEL_98;
        goto LABEL_97;
      }
    }
    else if ((v138 & 2) == 0)
    {
      goto LABEL_87;
    }
    v141 = v138 - 2;
    if (v141)
      v142 = v111 | 2;
    else
      v142 = v111;
    v111 = v111 | 1;
    ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v139[36])(v156, v146, &a17, v142, &a21, v154, vars0);
    v156 += 32;
    v154 += 32;
    if (!v141)
      goto LABEL_98;
LABEL_97:
    ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v70[v127 + 31])(v156, v146, &a17, v111, &a21, v154, vars0);
    goto LABEL_98;
  }
  return result;
}

int8x16_t sub_1B6854794(_QWORD **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _QWORD *v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  int v60;
  int v61;
  BOOL v62;
  BOOL v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned int v67;
  int8x16_t result;
  unint64_t v69;
  _BOOL4 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  int v75;
  _WORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  size_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _BOOL4 v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  unsigned __int8 v89;
  _DWORD *v90;
  char *v91;
  uint64_t v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  int v103;
  int v104;
  _BOOL4 v105;
  uint64_t v106;
  _WORD *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned __int8 v124;
  uint64_t v125;
  int v126;
  _BOOL4 v127;
  uint64_t v128;
  unsigned __int8 v129;
  _DWORD *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t vars0;
  uint64_t vars8;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  _BOOL4 v151;
  _BOOL4 v152;
  BOOL v153;
  int v154;
  unsigned int v155;
  _BOOL4 v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;

  v51 = a1;
  STACK[0x4F8] = *MEMORY[0x1E0C80C00];
  v52 = *a1;
  v53 = (unsigned __int8 *)(v52[83] + 16 * *((_DWORD *)v51 + 5) * a3);
  v145 = v52[15];
  vars0 = v52[14];
  v54 = *((_DWORD *)v51 + 3);
  v163 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*v52 + 16))(v52, 0, (*((_DWORD *)v51 + 4) * a3), 0);
  v55 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)*v51 + 16))(*v51, 0, ((*((_DWORD *)v51 + 4) * a3) >> 1), 1);
  v161 = v51[5];
  v162 = v55;
  v160 = v51[7];
  if (a3)
    v56 = 6;
  else
    v56 = 2;
  v158 = a2;
  if (*((_DWORD *)v51 + 6) - 1 <= a3)
  {
    LODWORD(v57) = *((_DWORD *)v51 + 4);
    v58 = *(_DWORD *)(*v51 + 280) - v57 * a3;
  }
  else
  {
    if (*(_BYTE *)(a2 + 496))
      memcpy((void *)v51[6], (const void *)(v163 + 2 * vars0 * (*((int *)v51 + 4) - 1)), 2 * *(int *)(*v51 + 276));
    v56 = v56 | 8;
    if (*(_BYTE *)(a2 + 497))
      memcpy((void *)v51[8], (const void *)(v162 + 2 * v145 * ((*((int *)v51 + 4) >> 1) - 1)), 2 * *(int *)(*v51 + 276));
    LODWORD(v57) = *((_DWORD *)v51 + 4);
    v58 = v57;
  }
  v59 = v51 + 11;
  vars8 = (v58 >> 1);
  v60 = *((_DWORD *)v51 + 5);
  v61 = v60 - 1;
  v154 = v58;
  if (v60 <= 1)
  {
    v64 = 0;
    v93 = 0;
    v152 = 0;
  }
  else
  {
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = &v59[5 * v54];
    v141 = v65 + 5;
    v142 = v65 - 15;
    v143 = v51;
    v144 = v58;
    v149 = v56 | 1;
    v139 = v51 + 11;
    do
    {
      v153 = v62;
      v66 = v158;
      v164 = v64;
      v67 = sub_1B6855254((_QWORD *)v158, v64, a3, v56);
      v69 = *v53;
      v70 = (v69 & 1) == 0;
      v71 = v154;
      v155 = v67;
      v156 = v70;
      if ((v69 & 1) != 0)
      {
        v72 = (v69 >> 1) & 7;
        if (v72 > 4)
          return result;
        v150 = v72;
        if ((_DWORD)v72 == 4)
        {
          v73 = 0;
          v74 = v53[13];
          a21 = 0u;
          a22 = 0u;
          v75 = v164;
          do
          {
            *((_BYTE *)&a21 + ((v74 + (_BYTE)v73) & 0x1F)) = v53[v73 + 1];
            ++v73;
          }
          while (v73 != 4);
        }
        else
        {
          LOWORD(a21) = *(_WORD *)(v53 + 1);
          *(_WORD *)((char *)&a21 + 3) = *(_WORD *)(v53 + 3);
          BYTE2(a21) = 0;
          v75 = v164;
        }
        if (v63 && v154 > 0)
        {
          v76 = (_WORD *)(v163 - 2);
          v77 = &a49;
          v78 = v144;
          do
          {
            *(_WORD *)v77 = *v76;
            v77 += 2;
            v76 += vars0;
            --v78;
          }
          while (v78);
        }
        v79 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v158 + 1360) + 16))(*(_QWORD *)(v158 + 1360), (v75 << *((_DWORD *)v51 + 3)), (a3 << *((_DWORD *)v51 + 3)), 0);
        if (v154 >= 1)
        {
          v80 = (char *)v79;
          v81 = 2 * (int)v57;
          v82 = 2 * *(_QWORD *)(*(_QWORD *)(v158 + 1360) + 112);
          v83 = (char *)(v158 + 4392);
          v84 = v144;
          do
          {
            memcpy(v83, v80, v81);
            v80 += v82;
            v83 += v81;
            --v84;
          }
          while (v84);
        }
        v71 = v154;
        ((void (*)(uint64_t, uint64_t, __int128 *, _QWORD, char *, uint64_t, _QWORD))v142[v150])(v163, vars0, &a21, v155, &a49, v161, v154);
        v51 = v143;
        v66 = v158;
        sub_1B67C8A6C(v158, v164 << *((_DWORD *)v143 + 3), a3 << *((_DWORD *)v143 + 3), *((_DWORD *)v143 + 4), v154, 0);
        LODWORD(v69) = *v53;
        v70 = v156;
      }
      v85 = (v69 & 0x10) == 0;
      if ((v69 & 0x10) != 0)
      {
        if (v69 > 0x9F)
          return result;
        v148 = v69 >> 5;
        if (v69 >> 5 == 4)
        {
          v86 = 0;
          v87 = v53[14];
          a21 = 0u;
          a22 = 0u;
          do
          {
            *((_BYTE *)&a21 + ((v87 + (_BYTE)v86) & 0x1F)) = v53[v86 + 5];
            ++v86;
          }
          while (v86 != 4);
          v88 = 0;
          v89 = v53[15];
          a23 = 0u;
          a24 = 0u;
          do
          {
            *((_BYTE *)&a23 + ((v89 + (_BYTE)v88) & 0x1F)) = v53[v88 + 9];
            ++v88;
          }
          while (v88 != 4);
        }
        else
        {
          LOWORD(a21) = *(_WORD *)(v53 + 5);
          *(_WORD *)((char *)&a21 + 3) = *(_WORD *)(v53 + 7);
          BYTE2(a21) = 0;
          LOWORD(a23) = *(_WORD *)(v53 + 9);
          *(_WORD *)((char *)&a23 + 3) = *(_WORD *)(v53 + 11);
          BYTE2(a23) = 0;
        }
        v151 = v85;
        if (v153 && v71 > 1)
        {
          v90 = (_DWORD *)(v162 - 4);
          v91 = &a25;
          v92 = vars8;
          do
          {
            *(_DWORD *)v91 = *v90;
            v91 += 4;
            v90 = (_DWORD *)((char *)v90 + 2 * v145);
            --v92;
          }
          while (v92);
        }
        sub_1B67C8888(v66, v164 << *((_DWORD *)v51 + 3), a3 << *((_DWORD *)v51 + 3), *((_DWORD *)v51 + 4), v71, 1);
        ((void (*)(uint64_t, uint64_t, __int128 *, _QWORD, char *, uint64_t, uint64_t))v141[v148])(v162, v145, &a21, v155, &a25, v160, vars8);
        sub_1B67C8A6C(v66, v164 << *((_DWORD *)v51 + 3), a3 << *((_DWORD *)v51 + 3), *((_DWORD *)v51 + 4), v71, 1);
        v85 = v151;
        v70 = v156;
      }
      v57 = *((int *)v51 + 4);
      v162 += 2 * v57;
      v163 += 2 * v57;
      v160 += 2 * v57;
      v161 += 2 * v57;
      v53 += 16;
      v64 = v164 + 1;
      v61 = *((_DWORD *)v51 + 5) - 1;
      v56 = v149;
      v62 = v85;
      v63 = v70;
    }
    while (v164 + 1 < v61);
    v93 = v70;
    v152 = v85;
    LODWORD(v56) = v149;
    v59 = v139;
  }
  v165 = v64;
  v94 = sub_1B6855254((_QWORD *)v158, v64, a3, v56 & 0xFFFFFFFD);
  v95 = v94;
  v96 = *(_DWORD *)(*v51 + 276) - v61 * v57;
  v97 = *v53;
  v98 = v154;
  if ((v97 & 1) != 0)
  {
    v99 = (v97 >> 1) & 7;
    if (v99 > 4)
      return result;
    v140 = v59;
    v159 = v94;
    v157 = v99;
    if ((_DWORD)v99 == 4)
    {
      v100 = 0;
      v101 = v53[13];
      a21 = 0u;
      a22 = 0u;
      v102 = v158;
      v103 = v165;
      do
      {
        *((_BYTE *)&a21 + ((v101 + (_BYTE)v100) & 0x1F)) = v53[v100 + 1];
        ++v100;
      }
      while (v100 != 4);
    }
    else
    {
      LOWORD(a21) = *(_WORD *)(v53 + 1);
      *(_WORD *)((char *)&a21 + 3) = *(_WORD *)(v53 + 3);
      BYTE2(a21) = 0;
      v102 = v158;
      v103 = v165;
    }
    v104 = v96;
    v105 = v154 > 0 && v93;
    v106 = v154;
    if (v105)
    {
      v107 = (_WORD *)(v163 - 2);
      v108 = &a49;
      v109 = v154;
      do
      {
        *(_WORD *)v108 = *v107;
        v108 += 2;
        v107 += vars0;
        --v109;
      }
      while (v109);
    }
    v110 = v102;
    v111 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v102 + 1360) + 16))(*(_QWORD *)(v102 + 1360), (v103 << *((_DWORD *)v51 + 3)), (a3 << *((_DWORD *)v51 + 3)), 0);
    if (v154 >= 1)
    {
      v112 = (char *)v111;
      v113 = (char *)(v110 + 4392);
      v114 = 2 * v96;
      v115 = 2 * *(_QWORD *)(*(_QWORD *)(v110 + 1360) + 112);
      do
      {
        memcpy(v113, v112, 2 * v104);
        v112 += v115;
        v113 += v114;
        --v106;
      }
      while (v106);
    }
    v96 = v104;
    if (v104 >= 64)
    {
      v116 = v154;
      ((void (*)(uint64_t, uint64_t, __int128 *, _QWORD, char *, uint64_t, _QWORD))v51[v157 + 26])(v163, vars0, &a21, v159, &a49, v161, v154);
      goto LABEL_72;
    }
    v117 = v104 >> 3;
    if ((v104 & 0x20) != 0)
    {
      v117 -= 4;
      if (v117)
        v119 = v159 | 2;
      else
        v119 = v159;
      v118 = v159 | 1;
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))v51[v157 + 21])(v163, vars0, &a21, v119, &a49, v161, v154);
      v163 += 64;
      v161 += 64;
      if ((v117 & 2) == 0)
        goto LABEL_70;
    }
    else
    {
      v118 = v159;
      if ((v117 & 2) == 0)
      {
LABEL_70:
        v121 = v165;
        v116 = v154;
        if (!v117)
        {
LABEL_73:
          sub_1B67C8A6C(v110, v121 << *((_DWORD *)v51 + 3), a3 << *((_DWORD *)v51 + 3), v104, v116, 0);
          LODWORD(v97) = *v53;
          v98 = v116;
          v95 = v159;
          goto LABEL_74;
        }
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))v140[v157])(v163, vars0, &a21, v118, &a49, v161, v154);
LABEL_72:
        v121 = v165;
        goto LABEL_73;
      }
    }
    v117 -= 2;
    if (v117)
      v120 = v118 | 2;
    else
      v120 = v118;
    v118 = v118 | 1;
    ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, _QWORD))v51[v157 + 16])(v163, vars0, &a21, v120, &a49, v161, v154);
    v163 += 32;
    v161 += 32;
    goto LABEL_70;
  }
LABEL_74:
  if ((v97 & 0x10) == 0)
  {
LABEL_106:
    *(int8x16_t *)(v51 + 5) = vextq_s8(*(int8x16_t *)(v51 + 5), *(int8x16_t *)(v51 + 5), 8uLL);
    result = vextq_s8(*(int8x16_t *)(v51 + 7), *(int8x16_t *)(v51 + 7), 8uLL);
    *(int8x16_t *)(v51 + 7) = result;
    return result;
  }
  if (v97 <= 0x9F)
  {
    v122 = v97 >> 5;
    if (v97 >> 5 == 4)
    {
      v123 = 0;
      v124 = v53[14];
      a21 = 0u;
      a22 = 0u;
      v125 = v158;
      v126 = v165;
      v127 = v152;
      do
      {
        *((_BYTE *)&a21 + ((v124 + (_BYTE)v123) & 0x1F)) = v53[v123 + 5];
        ++v123;
      }
      while (v123 != 4);
      v128 = 0;
      v129 = v53[15];
      a23 = 0u;
      a24 = 0u;
      do
      {
        *((_BYTE *)&a23 + ((v129 + (_BYTE)v128) & 0x1F)) = v53[v128 + 9];
        ++v128;
      }
      while (v128 != 4);
    }
    else
    {
      LOWORD(a21) = *(_WORD *)(v53 + 5);
      *(_WORD *)((char *)&a21 + 3) = *(_WORD *)(v53 + 7);
      BYTE2(a21) = 0;
      LOWORD(a23) = *(_WORD *)(v53 + 9);
      *(_WORD *)((char *)&a23 + 3) = *(_WORD *)(v53 + 11);
      BYTE2(a23) = 0;
      v125 = v158;
      v126 = v165;
      v127 = v152;
    }
    if (v98 > 1 && v127)
    {
      v131 = (_DWORD *)(v162 - 4);
      v132 = &a25;
      v133 = vars8;
      do
      {
        *(_DWORD *)v132 = *v131;
        v132 += 4;
        v131 = (_DWORD *)((char *)v131 + 2 * v145);
        --v133;
      }
      while (v133);
    }
    sub_1B67C8888(v125, v126 << *((_DWORD *)v51 + 3), a3 << *((_DWORD *)v51 + 3), v96, v98, 1);
    if (v96 < 64)
    {
      v134 = v95;
      v135 = v96 >> 3;
      if ((v96 & 0x20) != 0)
      {
        v135 -= 4;
        if (v135)
          v136 = v134 | 2;
        else
          v136 = v134;
        v134 = v134 | 1;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v51[v122 + 41])(v162, v145, &a21, v136, &a25, v160, vars8);
        v162 += 64;
        v160 += 64;
      }
      if ((v135 & 2) != 0)
      {
        v135 -= 2;
        if (v135)
          v137 = v134 | 2;
        else
          v137 = v134;
        v134 = v134 | 1;
        ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v51[v122 + 36])(v162, v145, &a21, v137, &a25, v160, vars8);
        v162 += 32;
        v160 += 32;
      }
      v138 = v165;
      if (!v135)
        goto LABEL_105;
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v51[v122 + 31])(v162, v145, &a21, v134, &a25, v160, vars8);
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t, char *, uint64_t, uint64_t))v51[v122 + 46])(v162, v145, &a21, v95, &a25, v160, vars8);
    }
    v138 = v165;
LABEL_105:
    sub_1B67C8A6C(v125, v138 << *((_DWORD *)v51 + 3), a3 << *((_DWORD *)v51 + 3), v96, v98, 1);
    goto LABEL_106;
  }
  return result;
}

uint64_t sub_1B6855254(_QWORD *a1, int a2, int a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;

  v9 = a1[433];
  v10 = a1[173];
  if ((unint64_t)(a1[434] - v9) < 0x11 || *(_BYTE *)(v10 + 28))
    goto LABEL_10;
  v12 = *(_DWORD *)sub_1B67C8BC0(a1, a2, a3);
  if ((a4 & 1) == 0)
  {
    if ((a4 & 2) == 0)
      goto LABEL_5;
LABEL_20:
    v17 = (_DWORD *)sub_1B67C8BC0(a1, a2 + 1, a3);
    LODWORD(v9) = a4 & 0xFFFFFFFD;
    if (*v17 == v12)
      a4 = a4;
    else
      a4 = v9;
    if ((a4 & 4) == 0)
    {
LABEL_6:
      if ((a4 & 8) == 0)
        goto LABEL_10;
      goto LABEL_7;
    }
    goto LABEL_24;
  }
  v16 = (_DWORD *)sub_1B67C8BC0(a1, a2 - 1, a3);
  LODWORD(v9) = a4 & 0xFFFFFFFE;
  if (*v16 == v12)
    a4 = a4;
  else
    a4 = v9;
  if ((a4 & 2) != 0)
    goto LABEL_20;
LABEL_5:
  if ((a4 & 4) == 0)
    goto LABEL_6;
LABEL_24:
  v18 = (_DWORD *)sub_1B67C8BC0(a1, a2, a3 - 1);
  LODWORD(v9) = a4 & 0xFFFFFFFB;
  if (*v18 == v12)
    a4 = a4;
  else
    a4 = v9;
  if ((a4 & 8) != 0)
  {
LABEL_7:
    v13 = (_DWORD *)sub_1B67C8BC0(a1, a2, a3 + 1);
    LODWORD(v9) = a4 & 0xFFFFFFF7;
    if (*v13 == v12)
      a4 = a4;
    else
      a4 = v9;
  }
LABEL_10:
  if (*(_BYTE *)(v10 + 20) && !*(_BYTE *)(v10 + 27))
  {
    v14 = *(_DWORD *)(v10 + 1688);
    if (v14 > a2)
    {
      LODWORD(v9) = *(_DWORD *)(v10 + 1692);
      if ((int)v9 > a3)
      {
        v4 = *(unsigned __int8 *)(v10 + 1696);
        if (*(_BYTE *)(v10 + 1696))
        {
          v15 = *(_QWORD *)(v10 + 1656) + 12 * a2;
          v5 = *(_DWORD *)(v15 + 4);
          v14 = *(_DWORD *)(v15 + 8);
          v9 = *(_QWORD *)(v10 + 1672) + 12 * a3;
          v4 = *(_DWORD *)(v9 + 4);
          LODWORD(v9) = *(_DWORD *)(v9 + 8);
        }
        else
        {
          v5 = 0;
        }
      }
    }
    if (v5 == a2)
      v19 = a4 & 0xFFFFFFFE;
    else
      v19 = a4;
    if (v14 - 1 == a2)
      v20 = v19 & 0xFFFFFFFD;
    else
      v20 = v19;
    if (v4 == a3)
      v20 &= ~4u;
    if ((_DWORD)v9 - 1 == a3)
      return v20 & 0xFFFFFFF7;
    else
      return v20;
  }
  return a4;
}

unsigned int *sub_1B68553EC(unsigned int *result, uint64_t a2, int *a3)
{
  unsigned int *v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;

  v4 = result;
  v5 = *a3;
  if (*a3 >= *(_DWORD *)(*(_QWORD *)result + 280))
  {
    v7 = result[6];
  }
  else
  {
    v6 = result[3];
    v7 = v5 >> v6;
    *a3 = v5 >> v6 << v6;
  }
  v8 = result[2];
  if ((int)v8 < v7)
  {
    do
    {
      v9 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))*((_QWORD *)v4 + 51);
      v10 = *((_QWORD *)v4 + 52);
      v11 = (_QWORD *)((char *)v4 + (v10 >> 1));
      if ((v10 & 1) != 0)
        v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v11 + v9);
      result = (unsigned int *)v9(v11, a2, v8);
      if ((_DWORD)result)
        v12 = 1;
      else
        v12 = v7 - 1 == (_DWORD)v8;
      v8 = (v8 + 1);
    }
    while (!v12);
  }
  v4[2] = v7;
  return result;
}

void sub_1B685548C(__CFString *a1, const void *a2)
{
  CFTypeID TypeID;
  const __CFString *v5;
  const __CFString *v6;
  CFTypeID v7;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  Float64 Seconds;
  __CFString *context;
  char v13;
  CMTime time;
  CMTime v15;

  if (!a2)
  {
    v6 = CFSTR("NULL");
    goto LABEL_13;
  }
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    v7 = CFArrayGetTypeID();
    if (v7 != CFGetTypeID(a2))
    {
      CFStringAppendFormat(a1, 0, CFSTR("%@"), a2);
      return;
    }
    Count = CFArrayGetCount((CFArrayRef)a2);
    CFStringAppend(a1, CFSTR("["));
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, i);
        if (i)
          CFStringAppend(a1, CFSTR(", "));
        sub_1B685548C(a1, ValueAtIndex);
      }
    }
    v6 = CFSTR("]");
LABEL_13:
    CFStringAppend(a1, v6);
    return;
  }
  memset(&v15, 0, sizeof(v15));
  CMTimeMakeFromDictionary(&v15, (CFDictionaryRef)a2);
  if ((v15.flags & 1) != 0)
  {
    if ((v15.flags & 4) != 0)
    {
      v5 = CFSTR("+inf");
    }
    else if ((v15.flags & 8) != 0)
    {
      v5 = CFSTR("-inf");
    }
    else
    {
      if ((v15.flags & 0x10) == 0)
      {
        time = v15;
        Seconds = CMTimeGetSeconds(&time);
        CFStringAppendFormat(a1, 0, CFSTR("%1.3f"), *(_QWORD *)&Seconds);
        return;
      }
      v5 = CFSTR("indef");
    }
  }
  else
  {
    context = a1;
    v13 = 0;
    CFStringAppend(a1, CFSTR("["));
    CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_1B685565C, &context);
    v5 = CFSTR("]");
  }
  CFStringAppend(a1, v5);
}

uint64_t sub_1B685565C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  if (*((_BYTE *)a3 + 8))
    CFStringAppend((CFMutableStringRef)*a3, CFSTR(", "));
  sub_1B685548C(*a3, a1);
  CFStringAppend((CFMutableStringRef)*a3, CFSTR(" = "));
  result = sub_1B685548C(*a3, a2);
  *((_BYTE *)a3 + 8) = 1;
  return result;
}

uint64_t sub_1B68556D0(int a1, int a2, CFMutableDictionaryRef *a3)
{
  const CFDictionaryKeyCallBacks *v6;
  const CFDictionaryValueCallBacks *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  CFMutableDictionaryRef v10;
  BOOL v11;
  uint64_t result;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  int valuePtr;
  int v20;
  int v21;

  v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = CFDictionaryCreateMutable(0, 0, v6, v7);
  v10 = v9;
  if (Mutable)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
  {
    if (Mutable)
      CFRelease(Mutable);
    if (v10)
      CFRelease(v10);
    return 4294954392;
  }
  else
  {
    valuePtr = a1;
    v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v13)
    {
      v14 = v13;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA90E0], v13);
      CFRelease(v14);
    }
    v20 = a2;
    v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v20);
    if (v15)
    {
      v16 = v15;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FD8], v15);
      CFRelease(v16);
    }
    v21 = 1111970369;
    v17 = CFNumberCreate(0, kCFNumberSInt32Type, &v21);
    if (v17)
    {
      v18 = v17;
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9040], v17);
      CFRelease(v18);
    }
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v10);
    CFRelease(v10);
    result = 0;
    *a3 = Mutable;
  }
  return result;
}

void sub_1B685585C(uint64_t a1, unint64_t a2, double a3, double a4, double a5)
{
  std::mutex *v10;
  int v11;
  int v12;
  double v13;
  double v14;
  double v15;
  int v16;
  double v17;
  double v18;
  double *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  double v26;
  double *v27;
  double v28;
  uint64_t v29;

  v10 = (std::mutex *)(a1 + 96);
  std::mutex::lock((std::mutex *)(a1 + 96));
  v11 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = v11 + 1;
  v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v12 + 1;
  if (a5 < 5.0)
  {
    ++*(_DWORD *)(a1 + 36);
    ++*(_DWORD *)(a1 + 44);
    goto LABEL_20;
  }
  v13 = (double)a2 * a3;
  v14 = v13 / a4;
  v15 = v13 / a4 + *(double *)a1;
  *(double *)a1 = v15;
  v16 = *(_DWORD *)(a1 + 36);
  if (v11 >= v16)
    *(double *)(a1 + 16) = v15 / (double)(v11 + 1 - v16);
  if (v11)
    v13 = v13 * 0.5 + *(double *)(a1 + 88) * 0.5;
  *(double *)(a1 + 88) = v13;
  if (*(_DWORD *)(a1 + 56))
  {
    if (v12 < 0)
      goto LABEL_20;
    v17 = v14 + *(double *)(a1 + 8);
    *(double *)(a1 + 8) = v17;
    v18 = v17 / (double)(v12 + 1 - *(_DWORD *)(a1 + 44));
LABEL_19:
    *(double *)(a1 + 24) = v18;
    goto LABEL_20;
  }
  v19 = (double *)operator new(0x38uLL);
  v19[1] = 0.0;
  v19[2] = 0.0;
  v19[3] = a3;
  *(_QWORD *)v19 = &off_1E6A15A20;
  *((_QWORD *)v19 + 6) = a2;
  v19[4] = a4;
  v19[5] = a5;
  v20 = operator new(0x20uLL);
  v21 = (_QWORD *)(a1 + 64);
  v20[2] = v19 + 3;
  v20[3] = v19;
  v22 = *(_QWORD **)(a1 + 72);
  *v20 = a1 + 64;
  v20[1] = v22;
  *v22 = v20;
  v23 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v20;
  *(_QWORD *)(a1 + 80) = v23 + 1;
  if ((unint64_t)(v23 + 1) >= 0xB)
  {
    v24 = *(uint64_t **)(a1 + 64);
    v25 = *v24;
    *(_QWORD *)(v25 + 8) = v24[1];
    *(_QWORD *)v24[1] = v25;
    *(_QWORD *)(a1 + 80) = v23;
    sub_1B6772C88((uint64_t)(v24 + 2));
    operator delete(v24);
    v20 = *(_QWORD **)(a1 + 72);
  }
  if (v20 != v21)
  {
    v26 = 0.0;
    v27 = (double *)&qword_1B692D3B8;
    v28 = 0.0;
    do
    {
      v29 = v20[2];
      if (*(double *)(v29 + 16) >= 5.0)
      {
        v28 = v28 + *(double *)v29 * (double)*(unint64_t *)(v29 + 24) / *(double *)(v29 + 8) * *v27;
        v26 = v26 + *v27;
      }
      v20 = (_QWORD *)v20[1];
      ++v27;
    }
    while (v20 != v21);
    if (v26 > 0.0)
    {
      v18 = v28 / v26;
      goto LABEL_19;
    }
  }
LABEL_20:
  std::mutex::unlock(v10);
}

void sub_1B6855A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  sub_1B6772C88((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_1B6855A94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B6855AA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B6855ADC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    MEMORY[0x1BCC9814C](v2, 0x1000C407A37F5ACLL);
  *(_QWORD *)(a1 + 8) = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 384));
  sub_1B677A398((_QWORD *)(a1 + 360));
  v3 = 320;
  do
  {
    std::mutex::~mutex((std::mutex *)(a1 + v3 - 48));
    sub_1B6803F4C((uint64_t *)(a1 + v3 - 80));
    v3 -= 160;
  }
  while (v3);
  return a1;
}

uint64_t sub_1B6855B54(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  BOOL v11;
  char v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;

  a1[43] = a2;
  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 64);
  if (v4 > 41)
  {
    if (v4 == 43)
    {
      v5 = 4;
      goto LABEL_10;
    }
    if (v4 == 42)
    {
      v5 = 2;
      goto LABEL_10;
    }
  }
  else
  {
    if (v4 == 20)
    {
      v6 = 1;
      v5 = 1;
      goto LABEL_12;
    }
    if (v4 == 38)
    {
      v5 = 3;
LABEL_10:
      v6 = v5;
      goto LABEL_12;
    }
  }
  v6 = 0;
  v5 = 0;
LABEL_12:
  *((_DWORD *)a1 + 88) = v6;
  if (!*(_DWORD *)(v3 + 468))
  {
    v7 = operator new(0x28uLL, MEMORY[0x1E0DE4E10]);
    if (!v7)
    {
      a1[1] = 0;
      return 4294954392;
    }
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    v8 = dword_1B6922614[v5];
    *((_DWORD *)v7 + 6) = 2;
    *((_DWORD *)v7 + 7) = v8;
    *((_DWORD *)v7 + 8) = v8;
    a1[1] = (uint64_t)v7;
  }
  v9 = 0;
  v11 = v4 == 20 || v4 == 38;
  *((_BYTE *)a1 + 336) = v11;
  v12 = 1;
  do
  {
    v13 = v12;
    v14 = *(int *)(v3 + 132);
    v15 = *(_DWORD *)(v3 + 468);
    v16 = &a1[20 * v9];
    *((_OWORD *)v16 + 1) = 0uLL;
    *((_OWORD *)v16 + 2) = 0uLL;
    v16[13] = 0x3FF0000000000000;
    v16[8] = v14;
    *((_OWORD *)v16 + 3) = xmmword_1B6917940;
    *((_DWORD *)v16 + 18) = v15;
    v9 = 1;
    v12 = 0;
  }
  while ((v13 & 1) != 0);
  return 0;
}

void sub_1B6855C90(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  double *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  double v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  double v45;
  double v46;
  int v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;

  v4 = a2[376];
  v5 = *(_DWORD *)(a1 + 356);
  v6 = v4 + 976;
  v7 = v4 + 120 * v5 + 136;
  if (v5 >= 7)
    v7 = 0;
  if (v5 == 9)
    v8 = v6;
  else
    v8 = v7;
  *(_QWORD *)(v8 + 112) = **(_QWORD **)(a1 + 8);
  v56 = 0;
  v57 = 0;
  sub_1B680F4BC(&v54, *(_QWORD *)(*(_QWORD *)(a1 + 344) + 48), 0);
  v9 = *(_QWORD *)(a1 + 344);
  v10 = (_QWORD *)(v9 + 1024);
  v11 = *(_QWORD **)(v9 + 1032);
  if (v11 != (_QWORD *)(v9 + 1024))
  {
    v12 = *(_DWORD *)(a2[76] + 680);
    while (1)
    {
      v13 = (_QWORD *)v11[2];
      v14 = (std::__shared_weak_count *)v11[3];
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = v13[76];
      if (*(_DWORD *)(v17 + 680) == v12)
        goto LABEL_34;
      v18 = *(_DWORD *)(a1 + 356);
      if (*(_DWORD *)(v17 + 12) > (signed int)v18)
        goto LABEL_34;
      v19 = v13[376];
      v20 = (int)(*(double *)(v19 + 56) + (double)*(int *)(v8 + 112));
      *(_DWORD *)(v8 + 112) = v20;
      if (v56)
        break;
      v22 = v54;
      if (v54)
      {
        v21 = (uint64_t *)(v54 + 24);
        goto LABEL_17;
      }
LABEL_18:
      v23 = (double *)(v19 + 976);
      v24 = v19 + 120 * v18 + 136;
      if (v18 >= 7)
        v24 = 0;
      if (v18 == 9)
        v25 = v23;
      else
        v25 = (double *)v24;
      v26 = *v25;
      if (v22 < 1
        || ((v27 = v13[74], v28 = *(_QWORD *)(v27 + 16), v29 = *(_DWORD *)(v27 + 32), v30 = v28 - v22, v28 >= 1)
          ? (v31 = v29 < 1)
          : (v31 = 1),
            !v31 ? (v32 = v30 < 1) : (v32 = 1),
            v32))
      {
        v33 = v25[1];
      }
      else
      {
        v26 = v26 * (double)v30;
        v33 = (double)v29;
      }
      *(_DWORD *)(v8 + 112) = v20 - (int)(v26 / v33);
      sub_1B67B665C(&v56, (uint64_t)v13, (uint64_t)v14);
LABEL_34:
      if (v14)
      {
        v34 = (unint64_t *)&v14->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v11 = (_QWORD *)v11[1];
      if (v11 == v10)
        goto LABEL_40;
    }
    v21 = (uint64_t *)(*(_QWORD *)(v56 + 592) + 16);
LABEL_17:
    v22 = *v21;
    goto LABEL_18;
  }
LABEL_40:
  if (v56)
  {
    v36 = (uint64_t *)(*(_QWORD *)(v56 + 592) + 16);
LABEL_44:
    v37 = *v36;
    goto LABEL_45;
  }
  v37 = v54;
  if (v54)
  {
    v36 = (uint64_t *)(v54 + 24);
    goto LABEL_44;
  }
LABEL_45:
  v38 = *(double *)v8;
  if (v37 < 1
    || ((v39 = a2[74], v40 = *(_QWORD *)(v39 + 16), v41 = *(_DWORD *)(v39 + 32), v42 = v40 - v37, v40 >= 1)
      ? (v43 = v41 < 1)
      : (v43 = 1),
        !v43 ? (v44 = v42 < 1) : (v44 = 1),
        v44))
  {
    v45 = v38 / *(double *)(v8 + 8);
  }
  else
  {
    v45 = v38 * (double)v42 / (double)v41;
  }
  v46 = v38 * (double)*(int *)(v8 + 16) / 1000.0;
  v47 = (*(_DWORD *)(v8 + 112) - (int)v45) & ~((*(_DWORD *)(v8 + 112) - (int)v45) >> 31);
  *(_DWORD *)(v8 + 112) = v47;
  *(_DWORD *)(v8 + 116) = ((int)v46 - v47) & ~(((int)v46 - v47) >> 31);
  v48 = v55;
  if (v55)
  {
    v49 = (unint64_t *)&v55->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v57;
  if (v57)
  {
    v52 = (unint64_t *)&v57->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_1B6855F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B6772C88((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1B6855F98(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  _DWORD *v3;
  uint64_t v4;
  double *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double v21;
  int v22;
  int v23;
  int v24;
  int v25;
  double result;

  v3 = (_DWORD *)a3[376];
  v4 = (uint64_t)&v3[30 * a2 + 34];
  if (a2 >= 7)
    v4 = 0;
  if (a2 == 9)
    v5 = (double *)(v3 + 244);
  else
    v5 = (double *)v4;
  v6 = *(unsigned __int8 *)a3;
  v7 = a3[363];
  v8 = v3[8];
  v9 = v3[4];
  v10 = v3[10];
  v11 = a3[74];
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_DWORD *)(v11 + 32);
  v14 = *v5;
  v15 = *((_DWORD *)v5 + 4);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = v12 - v16;
  if (v12 < 1 || v13 < 1 || v16 < 1 || v17 < 1)
    v21 = v14 / v5[1];
  else
    v21 = v14 * (double)v17 / (double)v13;
  v22 = *(_DWORD *)a1 - (int)v21;
  *(_QWORD *)(a1 + 8) = v12;
  v23 = v8 + v7 + v9 + v10;
  if (v6)
    v24 = 0;
  else
    v24 = v23;
  v25 = (v22 & ~(v22 >> 31)) + v24;
  result = v14 * (double)v15 / 1000.0;
  *(_DWORD *)a1 = v25;
  *(_DWORD *)(a1 + 4) = ((int)result - v25) & ~(((int)result - v25) >> 31);
  return result;
}

void sub_1B6856070(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;

  v3 = 0;
  v4 = *(_DWORD *)(a1 + 356);
  v5 = a2 + 120 * v4 + 136;
  if (v4 >= 7)
    v5 = 0;
  if (v4 == 9)
    v6 = a2 + 976;
  else
    v6 = v5;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = v6 + 40 * v3;
    v10 = a1 + 160 * v3;
    v11 = (std::mutex *)(v10 + 112);
    std::mutex::lock((std::mutex *)(v10 + 112));
    v14 = *(_QWORD *)(v9 + 64);
    v13 = (_QWORD *)(v9 + 64);
    v12 = v14;
    v15 = *(_QWORD *)(v10 + 104);
    *(v13 - 4) = *(_QWORD *)(v10 + 40);
    *(v13 - 3) = v15;
    if (v14)
    {
      v16 = *(uint64_t **)(v6 + 40 * v3 + 56);
      v17 = *v16;
      *(_QWORD *)(v17 + 8) = v16[1];
      *(_QWORD *)v16[1] = v17;
      *v13 = v12 - 1;
      sub_1B6772C88((uint64_t)(v16 + 2));
      operator delete(v16);
    }
    v18 = a1 + 160 * v3;
    v19 = (_QWORD *)(v18 + 80);
    v20 = *(_QWORD **)(v18 + 88);
    if (v20 != (_QWORD *)(v18 + 80))
    {
      v21 = v13 - 2;
      do
      {
        v22 = operator new(0x20uLL);
        v23 = v20[3];
        v22[2] = v20[2];
        v22[3] = v23;
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = *v21;
        *v22 = *v21;
        v22[1] = v21;
        *(_QWORD *)(v26 + 8) = v22;
        *v21 = (uint64_t)v22;
        ++v21[2];
        v20 = (_QWORD *)v20[1];
      }
      while (v20 != v19);
    }
    std::mutex::unlock(v11);
    v7 = 0;
    v3 = 1;
  }
  while ((v8 & 1) != 0);
}

void sub_1B68561B8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sub_1B68561CC(uint64_t a1, uint64_t a2, int a3, int a4, _BYTE *a5, double a6, double a7, float a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _BOOL4 v15;
  double v16;
  BOOL v17;
  double v18;

  v8 = *(_QWORD *)(a2 + 3008);
  v9 = *(_DWORD *)(a1 + 356);
  v10 = v8 + 976;
  v11 = v8 + 120 * v9 + 136;
  if (v9 >= 7)
    v11 = 0;
  if (v9 == 9)
    v11 = v10;
  *a5 = 0;
  v12 = 0.0;
  if (!*(_DWORD *)(*(_QWORD *)a1 + 468))
  {
    if (*(_BYTE *)(a2 + 2464))
    {
      v15 = 1;
      if (!a3)
        goto LABEL_11;
    }
    else
    {
      v15 = *(_BYTE *)(a2 + 2465) != 0;
      if (!a3)
        goto LABEL_11;
    }
    if (*(unsigned __int8 *)(a2 + 640) >= 2u)
    {
      v12 = exp2(((float)(a8 + 3.0) + -12.0) / 6.0) * 0.850000024;
LABEL_20:
      if (v15 && !*(_BYTE *)(a1 + 336))
      {
        std::mutex::lock((std::mutex *)(a1 + 112));
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
        std::mutex::unlock((std::mutex *)(a1 + 112));
      }
      return v12;
    }
LABEL_11:
    if (a4)
    {
      v16 = *(double *)(v11 + 72) / a7;
      v17 = a7 <= 0.0;
      v18 = 1.0;
      if (!v17)
        v18 = v16;
      v12 = v18 * a6;
    }
    else
    {
      if (a7 <= 0.0)
        v12 = exp2((a8 + -12.0) / 6.0) * 0.850000024 * 1.51452804;
      else
        v12 = *(double *)(v11 + 32) / a7 * a6;
      *a5 = 1;
    }
    goto LABEL_20;
  }
  return v12;
}

double sub_1B685633C(uint64_t a1, _DWORD *a2)
{
  int v2;
  BOOL v4;
  double result;

  *(_DWORD *)(a1 + 316) = 38;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a2;
  *(_DWORD *)(a1 + 400) = a2[33];
  *(_DWORD *)(a1 + 404) = a2[117];
  v2 = a2[16];
  v4 = v2 == 20 || v2 == 38;
  *(_BYTE *)(a1 + 408) = v4;
  result = 0.0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_BYTE *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 656) = a1 + 656;
  *(_QWORD *)(a1 + 664) = a1 + 656;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 680) = a1 + 680;
  *(_QWORD *)(a1 + 688) = a1 + 680;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 704) = a1 + 704;
  *(_QWORD *)(a1 + 712) = a1 + 704;
  *(_QWORD *)(a1 + 720) = 0;
  return result;
}

uint64_t sub_1B68563C0(uint64_t a1)
{
  __CVBuffer *v2;
  const void *v3;

  v2 = *(__CVBuffer **)(a1 + 16);
  if (v2)
  {
    CVPixelBufferRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t sub_1B6856400(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  const std::nothrow_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  int v31;
  uint64_t i;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t j;
  unint64_t v45;
  uint64_t v46;
  __int16 v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  __int16 v57;
  __int16 v58;
  _WORD *v59;
  uint64_t v60;
  _OWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int32x2_t v68;
  _OWORD *v69;
  int v70;
  BOOL v71;
  _QWORD *v72;
  _QWORD *v73;
  __CFDictionary *Mutable;
  CFNumberRef v75;
  uint64_t v76;
  void *v77;
  int v78;
  _BOOL4 v79;
  int v80;
  int16x4_t v81;
  int16x4_t v82;
  uint64_t v83;
  __int32 v84;
  int8x8_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  double v92;
  double v93;
  __int16 *v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  float v102;
  float v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  char *v108;
  __int16 v109;
  __int16 v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  _WORD *v114;
  int v115;
  uint8_t buf[8];
  __int16 v117;
  int v118;
  __int16 v119;
  uint64_t v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned __int16 *)(a1 + 410);
  *(_QWORD *)(a1 + 840) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  v4 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(v4 + 96);
  *(_WORD *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 756) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(v4 + 344);
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 624) = *(_BYTE *)(a2 + 1016);
  *(_OWORD *)(a1 + 628) = xmmword_1B6917950;
  *(_QWORD *)(a1 + 644) = 0;
  *(_QWORD *)(a1 + 432) = 0x7FEFFFFFFFFFFFFFLL;
  result = (***(uint64_t (****)(_QWORD))a2)(*(_QWORD *)a2);
  v6 = *(_QWORD *)(a1 + 392);
  if ((_DWORD)result && !*(_BYTE *)(v6 + 58) && *(_DWORD *)(v6 + 560) == 1)
    return result;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0x200000002;
  *(_BYTE *)(a1 + 324) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  v7 = *(_DWORD *)(v6 + 64);
  if (v7 > 41)
  {
    if (v7 == 43)
    {
      v8 = 4;
      goto LABEL_14;
    }
    if (v7 == 42)
    {
      v8 = 2;
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 == 20)
    {
      v8 = 1;
      goto LABEL_14;
    }
    if (v7 == 38)
    {
      v8 = 3;
      goto LABEL_14;
    }
  }
  v8 = 0;
LABEL_14:
  *(_DWORD *)(a1 + 320) = v8;
  *(_QWORD *)(a1 + 416) = 0x402E000000000000;
  *(_DWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 410) = *(_DWORD *)(v6 + 86);
  if (*(int *)(v6 + 560) < 1)
  {
LABEL_21:
    result = (uint64_t)operator new(0x1C0uLL, MEMORY[0x1E0DE4E10]);
    if (!result)
    {
      *(_QWORD *)(a1 + 904) = 0;
      return result;
    }
    v13 = 0;
    *(_QWORD *)result = v6;
    do
    {
      v14 = result + v13;
      *(_QWORD *)(v14 + 80) = v14 + 80;
      *(_QWORD *)(v14 + 88) = v14 + 80;
      *(_QWORD *)(v14 + 96) = 0;
      *(_QWORD *)(v14 + 112) = 850045863;
      *(_OWORD *)(v14 + 120) = 0uLL;
      *(_OWORD *)(v14 + 136) = 0uLL;
      *(_OWORD *)(v14 + 152) = 0uLL;
      v13 += 160;
      *(_QWORD *)(v14 + 168) = 0;
    }
    while (v13 != 320);
    *(_DWORD *)(result + 356) = 9;
    *(_QWORD *)(result + 360) = result + 360;
    *(_QWORD *)(result + 368) = result + 360;
    *(_QWORD *)(result + 376) = 0;
    *(_QWORD *)(result + 384) = 850045863;
    *(_QWORD *)(result + 440) = 0;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_QWORD *)(a1 + 904) = result;
    sub_1B6855B54((uint64_t *)result, *(_QWORD *)(a1 + 840));
    v15 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)&v16 = *(_QWORD *)(v15 + 96);
    if (*(double *)&v16 > 0.0)
    {
      v17 = 61 * *(_DWORD *)(v15 + 540);
      if (*(double *)&v16 > (double)v17)
        *(double *)&v16 = (double)v17;
      *(_QWORD *)(a1 + 416) = v16;
    }
    *(_QWORD *)(a1 + 360) = 0;
    v18 = *(unsigned __int16 *)(a1 + 410);
    v19 = *(unsigned __int16 *)(a1 + 412);
    if (v18 <= v19)
      v20 = *(unsigned __int16 *)(a1 + 412);
    else
      v20 = *(unsigned __int16 *)(a1 + 410);
    if (v18 >= v19)
      v21 = *(unsigned __int16 *)(a1 + 412);
    else
      v21 = *(unsigned __int16 *)(a1 + 410);
    v22 = (float)v20 / (float)v21;
    if (*(_BYTE *)(v15 + 58))
    {
      if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 840) + 8))(**(_QWORD **)(a1 + 840)))
      {
        v23 = *(_QWORD *)(a1 + 392);
        v24 = *(__int16 *)(v23 + 88) * *(__int16 *)(v23 + 86) <= 230400 && *(double *)(v23 + 96) <= 30.0
           || *(unsigned __int16 *)(v23 + 86) == *(unsigned __int16 *)(v23 + 88);
        if (*(unsigned __int16 *)(a1 + 410) == *(unsigned __int16 *)(a1 + 412))
        {
          v29 = 7;
        }
        else
        {
          v30 = !v24;
          if (fabsf(v22 + -1.33) >= fabsf(v22 + -1.77))
          {
            v29 = 3;
            v31 = 6;
          }
          else
          {
            v29 = 2;
            v31 = 5;
          }
          if (!v30)
            v29 = v31;
        }
        *(_DWORD *)(a1 + 764) = v29;
        result = sub_1B68576B4(a1);
        if (v18 > v19 || (_DWORD)result)
        {
          if ((_DWORD)result)
            return result;
        }
        else
        {
          for (i = 0; i != 256; i += 8)
          {
            HIDWORD(v33) = *(_DWORD *)(a1 + i + 24);
            LODWORD(v33) = HIDWORD(v33);
            *(_DWORD *)(a1 + i + 24) = v33 >> 16;
          }
        }
      }
      else
      {
        v25 = 0;
        *(_OWORD *)(a1 + 212) = xmmword_1B6922D1C;
        *(_OWORD *)(a1 + 228) = unk_1B6922D2C;
        *(_OWORD *)(a1 + 244) = xmmword_1B6922D3C;
        *(_OWORD *)(a1 + 260) = unk_1B6922D4C;
        *(_OWORD *)(a1 + 148) = xmmword_1B6922CDC;
        *(_OWORD *)(a1 + 164) = unk_1B6922CEC;
        *(_OWORD *)(a1 + 180) = xmmword_1B6922CFC;
        *(_OWORD *)(a1 + 196) = unk_1B6922D0C;
        *(_OWORD *)(a1 + 84) = xmmword_1B6922C9C;
        *(_OWORD *)(a1 + 100) = unk_1B6922CAC;
        *(_OWORD *)(a1 + 116) = xmmword_1B6922CBC;
        *(_OWORD *)(a1 + 132) = unk_1B6922CCC;
        *(_OWORD *)(a1 + 20) = xmmword_1B6922C5C;
        *(_OWORD *)(a1 + 36) = unk_1B6922C6C;
        DWORD1(v16) = 0;
        *(_OWORD *)(a1 + 52) = xmmword_1B6922C7C;
        *(_DWORD *)(a1 + 764) = 4;
        v26 = *(_WORD *)(a1 + 410);
        v27 = *(_WORD *)(a1 + 412);
        *(_OWORD *)(a1 + 68) = unk_1B6922C8C;
        do
        {
          v28 = a1 + v25;
          *(_WORD *)(v28 + 24) = v26;
          *(_WORD *)(v28 + 26) = v27;
          v25 += 8;
        }
        while (v25 != 256);
      }
    }
    v34 = *(_DWORD *)(a1 + 320);
    if (v34 == 1)
    {
      if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 840) + 16))(**(_QWORD **)(a1 + 840)))
      {
        if (fabsf(v22 + -1.33) >= fabsf(v22 + -1.77))
          v35 = 9;
        else
          v35 = 8;
        v36 = 412;
        if (v18 <= v19)
          v37 = 412;
        else
          v37 = 410;
        v38 = *(unsigned __int16 *)(a1 + v37);
        if (v18 <= v19)
          v36 = 410;
        v39 = *(unsigned __int16 *)(a1 + v36);
        *(_DWORD *)(a1 + 764) = v35;
        v40 = (float *)((char *)&unk_1B692285C + 256 * v35);
        if (*((__int16 *)v40 + 2) < v38
          || *((__int16 *)v40 + 3) < v39
          || ((v39 | v38) & 0xF) != 0
          || (v93 = *(double *)(*(_QWORD *)(a1 + 840) + 3280), v93 > *v40))
        {
          if (dword_1EF137CD0 >= 2)
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", v38, v39, *(double *)(*(_QWORD *)(a1 + 840) + 3280));
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              v41 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + 3280);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&buf[4] = v38;
              v117 = 1024;
              v118 = v39;
              v119 = 2048;
              v120 = v41;
              _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", buf, 0x18u);
            }
          }
          v42 = 0;
          *(_OWORD *)(a1 + 212) = xmmword_1B6922D1C;
          *(_OWORD *)(a1 + 260) = unk_1B6922D4C;
          *(_OWORD *)(a1 + 228) = unk_1B6922D2C;
          *(_OWORD *)(a1 + 244) = xmmword_1B6922D3C;
          *(_OWORD *)(a1 + 148) = xmmword_1B6922CDC;
          *(_OWORD *)(a1 + 164) = unk_1B6922CEC;
          *(_OWORD *)(a1 + 180) = xmmword_1B6922CFC;
          *(_OWORD *)(a1 + 196) = unk_1B6922D0C;
          *(_OWORD *)(a1 + 84) = xmmword_1B6922C9C;
          *(_OWORD *)(a1 + 100) = unk_1B6922CAC;
          *(_OWORD *)(a1 + 116) = xmmword_1B6922CBC;
          *(_OWORD *)(a1 + 132) = unk_1B6922CCC;
          *(_OWORD *)(a1 + 20) = xmmword_1B6922C5C;
          *(_OWORD *)(a1 + 36) = unk_1B6922C6C;
          DWORD1(v16) = 0;
          *(_OWORD *)(a1 + 52) = xmmword_1B6922C7C;
          *(_DWORD *)(a1 + 764) = 4;
          *(_OWORD *)(a1 + 68) = unk_1B6922C8C;
          do
          {
            v43 = a1 + v42;
            *(_WORD *)(v43 + 24) = v38;
            *(_WORD *)(v43 + 26) = v39;
            v42 += 8;
          }
          while (v42 != 256);
        }
        else
        {
          v94 = (__int16 *)((char *)&unk_1B692285C + 256 * v35 + 6);
          v95 = -32;
          while (*(v94 - 1) > v38 || *v94 > v39 || v93 < *(float *)(v94 - 3))
          {
            v94 += 4;
            if (__CFADD__(v95++, 1))
            {
              if (dword_1EF137CD0 >= 2)
              {
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", v38, v39, *(double *)(*(_QWORD *)(a1 + 840) + 3280));
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                {
                  v97 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + 3280);
                  *(_DWORD *)buf = 67109632;
                  *(_DWORD *)&buf[4] = v38;
                  v117 = 1024;
                  v118 = v39;
                  v119 = 2048;
                  v120 = v97;
                  _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", buf, 0x18u);
                }
              }
              v98 = 0;
              *(_OWORD *)(a1 + 212) = xmmword_1B6922D1C;
              *(_OWORD *)(a1 + 260) = unk_1B6922D4C;
              *(_OWORD *)(a1 + 228) = unk_1B6922D2C;
              *(_OWORD *)(a1 + 244) = xmmword_1B6922D3C;
              *(_OWORD *)(a1 + 148) = xmmword_1B6922CDC;
              *(_OWORD *)(a1 + 164) = unk_1B6922CEC;
              *(_OWORD *)(a1 + 180) = xmmword_1B6922CFC;
              *(_OWORD *)(a1 + 196) = unk_1B6922D0C;
              *(_OWORD *)(a1 + 84) = xmmword_1B6922C9C;
              *(_OWORD *)(a1 + 100) = unk_1B6922CAC;
              *(_OWORD *)(a1 + 116) = xmmword_1B6922CBC;
              *(_OWORD *)(a1 + 132) = unk_1B6922CCC;
              *(_OWORD *)(a1 + 20) = xmmword_1B6922C5C;
              *(_OWORD *)(a1 + 36) = unk_1B6922C6C;
              DWORD1(v16) = 0;
              *(_OWORD *)(a1 + 52) = xmmword_1B6922C7C;
              *(_DWORD *)(a1 + 764) = 4;
              *(_OWORD *)(a1 + 68) = unk_1B6922C8C;
              do
              {
                v99 = a1 + v98;
                *(_WORD *)(v99 + 24) = v38;
                *(_WORD *)(v99 + 26) = v39;
                v98 += 8;
              }
              while (v98 != 256);
              goto LABEL_75;
            }
          }
          v100 = (v95 + 32);
          if ((_DWORD)v95 == -32)
          {
            v104 = 0;
          }
          else
          {
            v101 = (char *)&unk_1B692285C + 256 * v35;
            v102 = *(float *)&v101[8 * v100];
            if (v93 == v102)
            {
              v104 = 0;
            }
            else
            {
              *(_WORD *)(a1 + 24) = v38;
              *(_WORD *)(a1 + 26) = v39;
              v103 = v93;
              *(float *)(a1 + 20) = v103;
              v104 = 1;
            }
            if (*(__int16 *)&v101[8 * v100 + 4] != v38
              || *((__int16 *)&unk_1B692285C + 128 * v35 + 4 * v100 + 3) != v39)
            {
              v105 = a1 + 8 * v104;
              *(_WORD *)(v105 + 24) = v38;
              *(_WORD *)(v105 + 26) = v39;
              *(float *)(v105 + 20) = v102;
              ++v104;
            }
          }
          if (32 - v104 >= -(int)v95)
            v106 = -(int)v95;
          else
            v106 = 32 - v104;
          memcpy((void *)(a1 + 8 * v104 + 20), (char *)&unk_1B692285C + 256 * v35 + 8 * v100, 8 * v106);
          if (v106 + v104 <= 0x1F)
          {
            v107 = -v95;
            v108 = (char *)&unk_1B692285C + 256 * (uint64_t)*(int *)(a1 + 764);
            v109 = *((_WORD *)v108 + 126);
            v110 = *((_WORD *)v108 + 127);
            v111 = *((_DWORD *)v108 + 62);
            if (-v95 >= (unint64_t)(32 - v104))
              v107 = 32 - v104;
            v112 = v104 + v107;
            v113 = v112 - 1;
            v114 = (_WORD *)(a1 + 8 * v112 + 26);
            do
            {
              *(_DWORD *)(v114 - 3) = v111;
              *(v114 - 1) = v109;
              *v114 = v110;
              v114 += 4;
              ++v113;
            }
            while (v113 < 0x1F);
          }
        }
LABEL_75:
        if (v18 <= v19)
        {
          for (j = 0; j != 256; j += 8)
          {
            HIDWORD(v45) = *(_DWORD *)(a1 + j + 24);
            LODWORD(v45) = HIDWORD(v45);
            *(_DWORD *)(a1 + j + 24) = v45 >> 16;
          }
        }
      }
      else if (*(_BYTE *)(*(_QWORD *)(a1 + 392) + 58))
      {
        v46 = 0;
        *(_OWORD *)(a1 + 212) = xmmword_1B6922D1C;
        *(_OWORD *)(a1 + 228) = unk_1B6922D2C;
        *(_OWORD *)(a1 + 244) = xmmword_1B6922D3C;
        *(_OWORD *)(a1 + 260) = unk_1B6922D4C;
        *(_OWORD *)(a1 + 148) = xmmword_1B6922CDC;
        *(_OWORD *)(a1 + 164) = unk_1B6922CEC;
        *(_OWORD *)(a1 + 180) = xmmword_1B6922CFC;
        *(_OWORD *)(a1 + 196) = unk_1B6922D0C;
        *(_OWORD *)(a1 + 84) = xmmword_1B6922C9C;
        *(_OWORD *)(a1 + 100) = unk_1B6922CAC;
        *(_OWORD *)(a1 + 116) = xmmword_1B6922CBC;
        *(_OWORD *)(a1 + 132) = unk_1B6922CCC;
        *(_OWORD *)(a1 + 20) = xmmword_1B6922C5C;
        *(_OWORD *)(a1 + 36) = unk_1B6922C6C;
        DWORD1(v16) = 0;
        *(_OWORD *)(a1 + 52) = xmmword_1B6922C7C;
        *(_DWORD *)(a1 + 764) = 4;
        v47 = *(_WORD *)(a1 + 410);
        v48 = *(_WORD *)(a1 + 412);
        *(_OWORD *)(a1 + 68) = unk_1B6922C8C;
        do
        {
          v49 = a1 + v46;
          *(_WORD *)(v49 + 24) = v47;
          *(_WORD *)(v49 + 26) = v48;
          v46 += 8;
        }
        while (v46 != 256);
      }
      v34 = *(_DWORD *)(a1 + 320);
    }
    if (v34 == 4)
    {
      v50 = *(_QWORD *)(a1 + 392);
      v51 = *(unsigned __int8 *)(v50 + 116);
      v52 = *(_DWORD *)(v50 + 120);
      v53 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 840) + 8))(**(_QWORD **)(a1 + 840));
      if (v51)
        v54 = 1;
      else
        v54 = v53 == 0;
      if (v54)
      {
        if (v51)
          v55 = *(_BYTE *)(*(_QWORD *)(a1 + 392) + 58) == 0;
        else
          v55 = 1;
        if (!v55)
        {
          v56 = 0;
          *(_DWORD *)(a1 + 764) = 4;
          v57 = *(_WORD *)(a1 + 410);
          v58 = *(_WORD *)(a1 + 412);
          v59 = (_WORD *)(a1 + 26);
          do
          {
            v60 = v56 + 6;
            if (v56 >= 0x1A)
              v60 = 31;
            *(_DWORD *)(v59 - 3) = *((_DWORD *)&unk_1B692285C + 2 * v60 + 256);
            *(v59 - 1) = v57;
            *v59 = v58;
            v59 += 4;
            ++v56;
          }
          while (v56 != 32);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 764) = v52;
        v61 = (_OWORD *)((char *)&unk_1B692285C + 256 * (uint64_t)v52);
        *(_OWORD *)(a1 + 212) = v61[12];
        *(_OWORD *)(a1 + 228) = v61[13];
        *(_OWORD *)(a1 + 244) = v61[14];
        *(_OWORD *)(a1 + 260) = v61[15];
        *(_OWORD *)(a1 + 148) = v61[8];
        *(_OWORD *)(a1 + 164) = v61[9];
        *(_OWORD *)(a1 + 180) = v61[10];
        *(_OWORD *)(a1 + 196) = v61[11];
        *(_OWORD *)(a1 + 84) = v61[4];
        *(_OWORD *)(a1 + 100) = v61[5];
        *(_OWORD *)(a1 + 116) = v61[6];
        *(_OWORD *)(a1 + 132) = v61[7];
        *(_OWORD *)(a1 + 20) = *v61;
        *(_OWORD *)(a1 + 36) = v61[1];
        *(_OWORD *)(a1 + 52) = v61[2];
        v16 = v61[3];
        *(_OWORD *)(a1 + 68) = v16;
      }
    }
    *(_DWORD *)(a1 + 16) = 0;
    v62 = *(_QWORD *)(a1 + 392);
    LODWORD(v63) = *(_DWORD *)(v62 + 560);
    if ((int)v63 >= 1)
    {
      v64 = 0;
      v65 = -1;
      do
      {
        *(_DWORD *)(a1 + 920 + 4 * v64++) = v63 + v65;
        v63 = *(int *)(v62 + 560);
        --v65;
      }
      while (v64 < v63);
    }
    *(_QWORD *)(a1 + 344) = 0;
    if (*(_BYTE *)(v62 + 7804))
    {
      v66 = operator new();
      v62 = *(_QWORD *)(a1 + 392);
      LODWORD(v16) = *v3;
      DWORD1(v16) = v3[1];
      v67 = *(_DWORD *)(v62 + 404);
      v68 = *(int32x2_t *)(v62 + 528);
      *(int32x2_t *)v66 = vadd_s32((int32x2_t)vand_s8((int8x8_t)vneg_s32(*(int32x2_t *)&v16), (int8x8_t)0xF0000000FLL), *(int32x2_t *)&v16);
      *(_DWORD *)(v66 + 8) = vmul_s32(v68, v68).u32[0] >> 1;
      *(int32x2_t *)(v66 + 12) = v68;
      *(_DWORD *)(v66 + 20) = v67;
      *(_BYTE *)(v66 + 24) = v67 < 0;
      v69 = (_OWORD *)MEMORY[0x1E0CA2E68];
      *(_QWORD *)(v66 + 44) = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      *(_OWORD *)(v66 + 28) = *v69;
      *(_DWORD *)(v66 + 68) = 0;
      *(_QWORD *)(v66 + 52) = 0;
      *(_QWORD *)(v66 + 60) = 0;
      DWORD1(v16) = 7;
      *(_QWORD *)(v66 + 72) = 0x700000005;
      *(_DWORD *)(v66 + 80) = 16;
      *(_QWORD *)(a1 + 344) = v66;
    }
    if (*(_DWORD *)(v62 + 540) != 1 || ((v70 = *(_DWORD *)(v62 + 64), v70 != 42) ? (v71 = v70 == 20) : (v71 = 1), !v71))
    {
LABEL_123:
      LODWORD(v16) = *(_DWORD *)(v62 + 110);
      *(int32x4_t *)(a1 + 288) = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&v16));
      v78 = *(_DWORD *)(v62 + 560);
      v79 = v78 >= 2 && v78 == *(_DWORD *)(v62 + 564);
      *(_DWORD *)(a1 + 916) = v79;
      v80 = *(_DWORD *)(v62 + 504);
      result = (****(uint64_t (*****)(_QWORD))(a1 + 840))(**(_QWORD **)(a1 + 840));
      if (v80 == 1)
      {
        if ((_DWORD)result)
        {
          v83 = *(_QWORD *)(a1 + 392);
          v84 = *(unsigned __int16 *)(v83 + 86);
          LODWORD(v83) = *(unsigned __int16 *)(v83 + 88);
          v81.i32[0] = v83;
          v82.i32[0] = v84;
          v85 = vbsl_s8((int8x8_t)vdup_lane_s16(vceq_s16(v82, v81), 0), (int8x8_t)0x2800000023, (int8x8_t)0x210000001CLL);
          if (v84 == (_DWORD)v83)
            v86 = 40;
          else
            v86 = 33;
        }
        else
        {
          v85 = (int8x8_t)0x2D00000028;
          v86 = 45;
        }
      }
      else
      {
        if ((_DWORD)result)
          v87 = -1;
        else
          v87 = 0;
        v85 = vbsl_s8((int8x8_t)vdup_n_s32(v87), (int8x8_t)0x2800000023, (int8x8_t)0x2D00000028);
        if ((_DWORD)result)
          v86 = 40;
        else
          v86 = 45;
      }
      *(int8x8_t *)(a1 + 280) = v85;
      v88 = *(_QWORD *)(a1 + 392);
      if (*(int *)(v88 + 560) >= 2)
      {
        *(_QWORD *)(a1 + 280) = 0x2D00000025;
        if (*(_DWORD *)(a1 + 916))
          *(_DWORD *)(a1 + 280) = 40;
        v86 = 45;
      }
      if (*(_DWORD *)(v88 + 64) == 43)
      {
        *(_QWORD *)(a1 + 280) = 0x220000001ELL;
        v86 = 34;
      }
      if (*(char *)(v88 + 107) >= 1)
        *(_DWORD *)(a1 + 280) = *(unsigned __int8 *)(v88 + 107);
      if (*(char *)(v88 + 108) >= 1)
      {
        v86 = *(unsigned __int8 *)(v88 + 108);
        *(_DWORD *)(a1 + 284) = v86;
      }
      *(_BYTE *)(a1 + 763) = *(_BYTE *)(v88 + 338);
      *(_BYTE *)(a1 + 761) = *(_BYTE *)(v88 + 336);
      *(_BYTE *)(a1 + 762) = *(_BYTE *)(v88 + 337);
      *(_QWORD *)(a1 + 304) = 0x8000000080000000;
      *(_DWORD *)(a1 + 312) = 0x80000000;
      *(_DWORD *)(a1 + 772) = 0;
      *(_QWORD *)(a1 + 776) = 0xFFFFFFFF00000000;
      *(_OWORD *)(a1 + 784) = xmmword_1B6917960;
      *(_QWORD *)(a1 + 800) = 0x4010000000000000;
      v89 = *(unsigned int *)(a1 + 320);
      if ((_DWORD)v89 == 4)
      {
        *(_QWORD *)(a1 + 816) = 0x4044000000000000;
        *(_BYTE *)(a1 + 824) = 0;
        LODWORD(v89) = 4;
        v90 = 0x4044000000000000;
LABEL_162:
        *(_QWORD *)(a1 + 808) = v90;
LABEL_163:
        *(double *)(a1 + 832) = (double)dword_1B692263C[v89];
        if ((_DWORD)v89 == 1 && *(_DWORD *)(*(_QWORD *)(a1 + 392) + 180) <= 0x4C4B40u)
          *(_QWORD *)(a1 + 832) = 0x4036000000000000;
        if (*(_DWORD *)(a1 + 916))
          *(_QWORD *)(a1 + 832) = 0x4030000000000000;
        return result;
      }
      v91 = v86 + *(char *)(v88 + 109);
      if (dword_1B6922628[v89] > v91)
        v91 = dword_1B6922628[v89];
      *(double *)(a1 + 816) = (double)v91;
      if ((v89 | 2) == 3)
      {
        if (!*(_BYTE *)(v88 + 58)
          || (result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 840) + 16))(**(_QWORD **)(a1 + 840)),
              (result & 1) != 0))
        {
          *(_BYTE *)(a1 + 824) = 1;
          goto LABEL_159;
        }
        LODWORD(v89) = *(_DWORD *)(a1 + 320);
      }
      *(_BYTE *)(a1 + 824) = (_DWORD)v89 == 2;
      if ((_DWORD)v89 != 2)
      {
        v90 = *(_QWORD *)(a1 + 816);
        goto LABEL_162;
      }
LABEL_159:
      *(_QWORD *)(a1 + 784) = 0x3FF0000000000000;
      result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 840) + 16))(**(_QWORD **)(a1 + 840));
      v92 = 10.0;
      if ((_DWORD)result)
        v92 = 5.0;
      *(double *)(a1 + 808) = *(double *)(a1 + 816) - v92;
      *(_DWORD *)(a1 + 780) = 0;
      LODWORD(v89) = *(_DWORD *)(a1 + 320);
      goto LABEL_163;
    }
    v72 = operator new(0x18uLL, MEMORY[0x1E0DE4E10]);
    if (v72)
    {
      v73 = v72;
      v72[1] = 0;
      v72[2] = 0;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED700], (const void *)*MEMORY[0x1E0C9AE50]);
      *(_DWORD *)buf = 16;
      v75 = CFNumberCreate(0, kCFNumberSInt32Type, buf);
      if (v75)
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED708], v75);
        CFRelease(v75);
      }
      if (!VTMotionEstimationSessionCreate())
      {
        v115 = 0;
        *(_QWORD *)buf = 4;
        sysctlbyname("hw.optional.arm.FEAT_FP16", &v115, (size_t *)buf, 0, 0);
        v77 = sub_1B6857588;
        if (!v115)
          v77 = sub_1B6857504;
        *v73 = v77;
        CFRelease(Mutable);
        goto LABEL_122;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to create VTMotionEstimationSession\n", buf, 2u);
      }
      CFRelease(Mutable);
      v76 = sub_1B68563C0((uint64_t)v73);
      MEMORY[0x1BCC9814C](v76, 0xA0C409BE6959DLL);
    }
    if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to create LowResolutionMotionEsitmation", buf, 2u);
    }
    v73 = 0;
LABEL_122:
    *(_QWORD *)(a1 + 384) = v73;
    v62 = *(_QWORD *)(a1 + 392);
    goto LABEL_123;
  }
  v9 = 0;
  v10 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = (uint64_t)operator new(0x1C0uLL, v10);
    if (!result)
      break;
    v11 = 0;
    *(_QWORD *)result = v6;
    do
    {
      v12 = result + v11;
      *(_QWORD *)(v12 + 80) = v12 + 80;
      *(_QWORD *)(v12 + 88) = v12 + 80;
      *(_QWORD *)(v12 + 96) = 0;
      *(_QWORD *)(v12 + 112) = 850045863;
      *(_OWORD *)(v12 + 120) = 0uLL;
      *(_OWORD *)(v12 + 136) = 0uLL;
      *(_OWORD *)(v12 + 152) = 0uLL;
      v11 += 160;
      *(_QWORD *)(v12 + 168) = 0;
    }
    while (v11 != 320);
    *(_DWORD *)(result + 356) = v9;
    *(_QWORD *)(result + 360) = result + 360;
    *(_QWORD *)(result + 368) = result + 360;
    *(_QWORD *)(result + 376) = 0;
    *(_QWORD *)(result + 384) = 850045863;
    *(_QWORD *)(result + 440) = 0;
    *(_OWORD *)(result + 392) = 0uLL;
    *(_OWORD *)(result + 408) = 0uLL;
    *(_OWORD *)(result + 424) = 0uLL;
    *(_QWORD *)(a1 + 8 * v9 + 848) = result;
    result = sub_1B6855B54((uint64_t *)result, *(_QWORD *)(a1 + 840));
    if ((_DWORD)result)
      return result;
    *(_DWORD *)(a1 + 4 * v9++ + 920) = 0;
    v6 = *(_QWORD *)(a1 + 392);
    if (v9 >= *(int *)(v6 + 560))
      goto LABEL_21;
  }
  *(_QWORD *)(a1 + 8 * v9 + 848) = 0;
  return result;
}

uint64_t sub_1B6857504(uint64_t result, unsigned int a2, int a3, unsigned int a4, float *a5, float *a6)
{
  int i;
  uint64_t v7;

  *a5 = 0.0;
  *a6 = 0.0;
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (a2)
      {
        v7 = 0;
        do
        {
          _H0 = *(_WORD *)(result + v7);
          __asm { FCVT            S0, H0 }
          _S0 = fabsf(_S0);
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          *a5 = *a5 + _S0;
          LOWORD(_S0) = *(_WORD *)(result + v7 + 2);
          __asm { FCVT            S0, H0 }
          _S0 = fabsf(_S0);
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          *a6 = *a6 + _S0;
          v7 += 4;
        }
        while (4 * a2 != v7);
      }
      result += 2 * a4;
    }
  }
  return result;
}

const __int16 *sub_1B6857588(const __int16 *result, unsigned int a2, int a3, unsigned int a4, float *a5, float *a6)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  float16x8_t v9;
  const __int16 *v10;
  float16x8_t v11;
  unsigned int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unsigned int v17;
  unint64_t v18;
  int16x8x2_t v26;

  *a5 = 0.0;
  *a6 = 0.0;
  if (a3)
  {
    v6 = 0;
    v7 = a2 & 0xFFFFFFF8;
    do
    {
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = 0uLL;
        v10 = result;
        v11 = 0uLL;
        do
        {
          v26 = vld2q_s16(v10);
          v10 += 16;
          v11 = vaddq_f16(v11, vabsq_f16((float16x8_t)v26.val[0]));
          v9 = vaddq_f16(v9, vabsq_f16((float16x8_t)v26.val[1]));
          v8 += 8;
        }
        while (v8 < v7);
        v12 = ((v7 - 1) & 0xFFFFFFF8) + 8;
      }
      else
      {
        v12 = 0;
        v11 = 0uLL;
        v9 = 0uLL;
      }
      v13 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL));
      v14 = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
      *a5 = *a5
          + (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v13, v13))
                  + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14)));
      v15 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL));
      v16 = vcvtq_f32_f16(*(float16x4_t *)v9.i8);
      *a6 = *a6
          + (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15))
                  + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)));
      if (v12 < a2)
      {
        v17 = 2 * v12;
        v18 = a2 - (unint64_t)v12;
        do
        {
          _H0 = fabsl(*(short float *)&result[v17]);
          __asm { FCVT            S0, H0 }
          *a5 = *a5 + _S0;
          *(short float *)&_S0 = fabsl(*(short float *)&result[v17 + 1]);
          __asm { FCVT            S0, H0 }
          *a6 = *a6 + _S0;
          v17 += 2;
          --v18;
        }
        while (v18);
      }
      result += a4;
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

uint64_t sub_1B68576B4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  __int16 *v8;
  uint64_t v9;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  float *v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  __int16 v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  _WORD *v26;
  uint8_t buf[4];
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned __int16 *)(a1 + 410);
  v2 = *(unsigned __int16 *)(a1 + 412);
  if (v1 <= v2)
    v3 = *(unsigned __int16 *)(a1 + 412);
  else
    v3 = *(unsigned __int16 *)(a1 + 410);
  if (v1 >= v2)
    v4 = *(unsigned __int16 *)(a1 + 412);
  else
    v4 = *(unsigned __int16 *)(a1 + 410);
  v5 = *(unsigned int *)(a1 + 764);
  if (v5 <= 7)
  {
    v8 = (__int16 *)((char *)&unk_1B692285C + 256 * v5 + 6);
    v9 = -32;
    while (*(v8 - 1) > v3 || *v8 > v4)
    {
      v8 += 4;
      if (__CFADD__(v9++, 1))
      {
        if (dword_1EF137CD0 >= 2)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", v1, v2, *(double *)(*(_QWORD *)(a1 + 840) + 3280));
          v11 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
          v1 = *(unsigned __int16 *)(a1 + 410);
          v2 = *(unsigned __int16 *)(a1 + 412);
          if (v11)
          {
            v12 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + 3280);
            *(_DWORD *)buf = 67109632;
            v28 = v1;
            v29 = 1024;
            v30 = v2;
            v31 = 2048;
            v32 = v12;
            _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Resolution (%d x %d) and Frame rate (%.2f) is not supported in quality table. Switch to frame dropping only.", buf, 0x18u);
            LOWORD(v1) = *(_WORD *)(a1 + 410);
            LOWORD(v2) = *(_WORD *)(a1 + 412);
          }
        }
        v13 = 0;
        *(_OWORD *)(a1 + 212) = xmmword_1B6922D1C;
        *(_OWORD *)(a1 + 260) = unk_1B6922D4C;
        *(_OWORD *)(a1 + 228) = unk_1B6922D2C;
        *(_OWORD *)(a1 + 244) = xmmword_1B6922D3C;
        *(_OWORD *)(a1 + 148) = xmmword_1B6922CDC;
        *(_OWORD *)(a1 + 164) = unk_1B6922CEC;
        *(_OWORD *)(a1 + 180) = xmmword_1B6922CFC;
        *(_OWORD *)(a1 + 196) = unk_1B6922D0C;
        *(_OWORD *)(a1 + 84) = xmmword_1B6922C9C;
        *(_OWORD *)(a1 + 100) = unk_1B6922CAC;
        *(_OWORD *)(a1 + 116) = xmmword_1B6922CBC;
        *(_OWORD *)(a1 + 132) = unk_1B6922CCC;
        *(_OWORD *)(a1 + 20) = xmmword_1B6922C5C;
        *(_OWORD *)(a1 + 36) = unk_1B6922C6C;
        *(_OWORD *)(a1 + 52) = xmmword_1B6922C7C;
        *(_DWORD *)(a1 + 764) = 4;
        *(_OWORD *)(a1 + 68) = unk_1B6922C8C;
        do
        {
          v14 = a1 + v13;
          *(_WORD *)(v14 + 24) = v1;
          *(_WORD *)(v14 + 26) = v2;
          v13 += 8;
        }
        while (v13 != 256);
        return 0;
      }
    }
    v15 = (char *)&unk_1B692285C + 256 * v5;
    v16 = (float *)&v15[8 * (v9 + 32)];
    if (*((__int16 *)v16 + 2) >= v3
      && *(__int16 *)&v15[8 * (v9 + 32) + 6] >= v4
      && *(double *)(a1 + 736) <= *v16)
    {
      v18 = 0;
    }
    else
    {
      v17 = *(double *)(a1 + 736);
      *(float *)(a1 + 20) = v17;
      *(_WORD *)(a1 + 24) = v3;
      *(_WORD *)(a1 + 26) = v4;
      v18 = 1;
    }
    if (v18 - v9 <= 0x20)
      v19 = -(int)v9;
    else
      v19 = 32 - v18;
    memcpy((void *)(a1 + 8 * v18 + 20), v16, 8 * v19);
    if (v19 + v18 <= 0x1F)
    {
      v20 = (char *)&unk_1B692285C + 256 * (uint64_t)*(int *)(a1 + 764);
      v21 = *((_WORD *)v20 + 126);
      v22 = *((_WORD *)v20 + 127);
      v23 = *((_DWORD *)v20 + 62);
      v24 = 32;
      if ((unint64_t)v18 - v9 < 0x20)
        v24 = v18 - v9;
      v25 = v24 - 1;
      v26 = (_WORD *)(a1 + 8 * v24 + 26);
      do
      {
        *(_DWORD *)(v26 - 3) = v23;
        *(v26 - 1) = v21;
        *v26 = v22;
        v26 += 4;
        ++v25;
      }
      while (v25 < 0x1F);
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v28 = v5;
      _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "FillTable: table_index_ = %d is out of range!", buf, 8u);
    }
    return 4294954386;
  }
}

_QWORD *sub_1B68579F4(_QWORD *result, int a2)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;

  if (a2 >= 31)
    v2 = 31;
  else
    v2 = a2;
  v3 = v2 & ~(v2 >> 31);
  v4 = *((_DWORD *)result + 4);
  if (v3 != v4)
  {
    v5 = result;
    *((_BYTE *)result + 276) = v3 < v4;
    *((_DWORD *)result + 3) = 0;
    *((_DWORD *)result + 4) = v3;
    sub_1B677A398(result + 82);
    return sub_1B677A398(v5 + 85);
  }
  return result;
}

double sub_1B6857A50(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  double *v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double result;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  double *v26;
  double v27;
  unint64_t v28;
  _BOOL4 v30;
  BOOL v31;
  double *v32;
  double *v33;
  double *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  double v44;
  double v45;
  uint64_t v46;
  unint64_t v47;
  int **v48;
  int *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  unint64_t v60;
  char **v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  char *v68;
  double v69;
  double v70;
  int v71;
  double v72;
  double v73;
  float v74;
  _QWORD v75[4];

  v75[3] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 916);
  v7 = 72;
  if (!v6)
    v7 = 76;
  v8 = *(_DWORD *)(a2 + v7);
  v9 = (double *)(a2 + 976);
  v10 = (double *)(a2 + 136);
  v11 = a2 + 136 + 120 * v8;
  if (v8 >= 7)
    v11 = 0;
  if (v8 == 9)
    v12 = (double *)(a2 + 976);
  else
    v12 = (double *)v11;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 392) + 560) == 1)
  {
    v13 = *v12;
    v14 = v12[1];
    if (v14 >= *(double *)a2)
      v14 = *(double *)a2;
LABEL_11:
    result = v13 / v14;
    goto LABEL_59;
  }
  memset(v75, 0, 24);
  v16 = *(double *)(a2 + 176) * *(double *)(a2 + 144);
  v74 = v16;
  v17 = *(unsigned int *)(a2 + 76);
  if ((int)v17 >= 1)
  {
    v18 = 0;
    v19 = 1;
    v20 = a2 + 136;
    do
    {
      v21 = v20 + 120;
      if (v19 >= 7)
        v22 = 0;
      else
        v22 = v20 + 120;
      if (v18 == 32)
        v22 = a2 + 976;
      if (v19 >= 8)
        v20 = 0;
      if (v19 == 10)
        v20 = a2 + 976;
      v16 = v16 + *(double *)(v22 + 40) * (*(double *)(v22 + 8) - *(double *)(v20 + 8));
      *(float *)((char *)v75 + v18) = v16;
      ++v19;
      v18 += 4;
      v20 = v21;
    }
    while (v19 != v17 + 1);
  }
  if (v6)
  {
    if ((v17 & 0x80000000) != 0)
    {
      result = 1.79769313e308;
    }
    else
    {
      v23 = 0;
      v24 = v12[5];
      v25 = v17 + 1;
      result = 1.79769313e308;
      do
      {
        if (v23 >= 7)
          v26 = 0;
        else
          v26 = v10;
        if (v23 == 9)
          v26 = (double *)(a2 + 976);
        v27 = *(&v74 + v23);
        if (*v26 * v24 / v27 < result)
          result = *v26 * v24 / v27;
        ++v23;
        v10 += 15;
      }
      while (v25 != v23);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 912) = v17;
    v28 = *(unsigned int *)(a2 + 72);
    v30 = v28 == 9 || v28 < 7;
    v31 = v17 <= 6 || (_DWORD)v17 == 9;
    result = 0.0;
    if (v31 && v30)
    {
      v32 = &v10[15 * v28];
      if (v28 >= 7)
        v32 = 0;
      if ((_DWORD)v28 == 9)
        v33 = (double *)(a2 + 976);
      else
        v33 = v32;
      v34 = &v10[15 * v17];
      if (v17 >= 7)
        v34 = 0;
      if ((_DWORD)v17 == 9)
        v34 = (double *)(a2 + 976);
      v13 = v33[5] * *v34;
      v14 = *(&v74 + v17);
      goto LABEL_11;
    }
  }
LABEL_59:
  *(double *)(a2 + 56) = result;
  if (!v8 && *(_DWORD *)(a1 + 424))
  {
    if (a3 <= 3 && a3 != 1)
    {
      v35 = (unint64_t)result;
      v36 = operator new(0x18uLL);
      v36[1] = a1 + 704;
      v36[2] = v35;
      v37 = *(_QWORD *)(a1 + 704);
      *v36 = v37;
      *(_QWORD *)(v37 + 8) = v36;
      *(_QWORD *)(a1 + 704) = v36;
      v38 = *(_QWORD *)(a1 + 720);
      *(_QWORD *)(a1 + 720) = v38 + 1;
      if ((unint64_t)(v38 + 1) >= 0x1F)
      {
        v39 = *(uint64_t **)(a1 + 712);
        v40 = *v39;
        *(_QWORD *)(v40 + 8) = v39[1];
        *(_QWORD *)v39[1] = v40;
        *(_QWORD *)(a1 + 720) = v38;
        operator delete(v39);
      }
    }
    v41 = *(_QWORD *)(a1 + 720);
    if (v41)
    {
      v42 = *(_QWORD *)(a1 + 712);
      if (v42 == a1 + 704)
      {
        v44 = 0.0;
      }
      else
      {
        v43 = 0;
        do
        {
          v43 += *(_DWORD *)(v42 + 16);
          v42 = *(_QWORD *)(v42 + 8);
        }
        while (v42 != a1 + 704);
        v44 = (double)v43;
      }
      v45 = *(double *)(a2 + 984) * (v44 / (double)v41 + v44 / (double)v41);
      if (v45 >= *(double *)(a2 + 976))
        v45 = *(double *)(a2 + 976);
      *(double *)(a2 + 976) = v45;
    }
    if (a3)
    {
      result = *(double *)(a2 + 984);
      if (*(double *)(a1 + 416) <= result)
        goto LABEL_79;
      result = fmax(*v12 - *v9, 0.0) / (v12[1] - result);
    }
    else
    {
      result = *(double *)(a2 + 976) / *(double *)(a2 + 984);
    }
    *(double *)(a2 + 56) = result;
  }
LABEL_79:
  if (!*(_DWORD *)(a1 + 404))
  {
    v46 = *(_QWORD *)(a1 + 536);
    v47 = *(_QWORD *)(a1 + 560);
    if (*(_QWORD *)(a1 + 544) == v46)
    {
      v53 = 0;
      v51 = *(_QWORD *)(a1 + 568);
    }
    else
    {
      v48 = (int **)(v46 + 8 * (v47 >> 10));
      v49 = *v48;
      v50 = &(*v48)[*(_QWORD *)(a1 + 560) & 0x3FFLL];
      v51 = *(_QWORD *)(a1 + 568);
      v52 = *(_QWORD *)(v46 + (((v51 + v47) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v51 + v47) & 0x3FF);
      if (v50 == (int *)v52)
      {
        v53 = 0;
      }
      else
      {
        LODWORD(v53) = 0;
        do
        {
          v55 = *v50++;
          v54 = v55;
          if ((char *)v50 - (char *)v49 == 4096)
          {
            v56 = v48[1];
            ++v48;
            v49 = v56;
            v50 = v56;
          }
          v53 = v54 + (int)v53;
        }
        while (v50 != (int *)v52);
      }
    }
    v57 = *(int *)(a2 + 16);
    if (v51)
      v57 = v53
          + v57
          - *(int *)(*(_QWORD *)(v46 + (((v47 + v51 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v47 + v51 - 1) & 0x3FF));
    v58 = *(_QWORD *)(a1 + 488);
    v59 = 0.0;
    if (*(_QWORD *)(a1 + 496) != v58)
    {
      v60 = *(_QWORD *)(a1 + 512);
      v61 = (char **)(v58 + 8 * (v60 >> 10));
      v62 = *v61;
      v63 = &(*v61)[4 * (v60 & 0x3FF)];
      v64 = *(_QWORD *)(v58 + (((*(_QWORD *)(a1 + 520) + v60) >> 7) & 0x1FFFFFFFFFFFFF8))
          + 4 * ((*(_QWORD *)(a1 + 520) + v60) & 0x3FF);
      if (v63 != (char *)v64)
      {
        v65 = 0;
        do
        {
          v67 = *(_DWORD *)v63;
          v63 += 4;
          v66 = v67;
          if (v63 - v62 == 4096)
          {
            v68 = v61[1];
            ++v61;
            v62 = v68;
            v63 = v68;
          }
          v65 += v66;
        }
        while (v63 != (char *)v64);
        if (v65 >= 1)
          v59 = (double)v57 / (double)v65;
      }
    }
    v69 = fmin(v59, 3.3);
    v70 = *(double *)(a2 + 24);
    v71 = *(_DWORD *)(a2 + 32);
    if (v70 < v69)
      v70 = v69;
    v72 = *(double *)(a2 + 56);
    v73 = v72 * 0.5 / (v69 + 1.0 + 0.5);
    if (v73 >= (double)v71)
      v73 = (double)v71;
    *(double *)(a2 + 24) = v70;
    *(_DWORD *)(a2 + 36) = (int)v73;
    result = (v72 - v73) / (v70 + 1.0);
    *(double *)(a2 + 56) = result;
  }
  return result;
}

CFTypeRef sub_1B6857F4C(uint64_t a1, CFTypeRef cf)
{
  const void *v4;
  CFTypeRef result;

  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  result = CFRetain(cf);
  *(_QWORD *)(a1 + 16) = cf;
  return result;
}

BOOL sub_1B6857F84(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  double v6;

  v2 = *(int *)(a1 + 16);
  if ((int)v2 < 1)
    return 0;
  if (*(unsigned __int16 *)(a1 + 20 + 8 * v2 + 4) == *(unsigned __int16 *)(a1 + 20 + 8 * (v2 - 1) + 4))
    return 1;
  if (*(int *)(a1 + 12) < 5)
    return 0;
  v4 = *(_QWORD *)(a1 + 688);
  if (v4 == a1 + 680)
  {
    v6 = 0.0;
  }
  else
  {
    v5 = 0;
    do
    {
      v5 += *(_DWORD *)(v4 + 16);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a1 + 680);
    v6 = (double)(10 * v5);
  }
  return (double)(unint64_t)(9 * *(_QWORD *)(a1 + 696)) * a2 > v6;
}

uint64_t sub_1B6858020(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  __int16 *v7;
  double v8;

  v2 = result;
  v3 = 0;
  LODWORD(result) = 0;
  v4 = *(double *)(v2 + 736);
  v5 = 1.0e20;
  v6 = -(float)(*(float *)(v2 + 8 * a2 + 20) * (float)*(int *)(*(_QWORD *)(v2 + 392) + 540));
  v7 = (__int16 *)((char *)&unk_1B6922650 + 92 * *(unsigned int *)(v2 + 320) + 2);
  do
  {
    v8 = fabs(v6 + v4 * ((double)*(v7 - 1) / (double)*v7));
    if (v8 >= v5)
      result = result;
    else
      result = v3;
    if (v8 < v5)
      v5 = v8;
    ++v3;
    v7 += 2;
  }
  while (v3 != 23);
  return result;
}

void sub_1B68580AC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  _BOOL4 v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  _BOOL4 v12;
  float v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  double v23;
  int *v24;
  int v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  double v36;
  _BOOL4 v37;
  double v38;
  _BOOL4 v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  char v47;

  v6 = *(_QWORD *)(a3 + 3008);
  v7 = *(double *)(v6 + 56);
  v47 = 0;
  if (*(_BYTE *)(a1 + 408))
  {
    if (*(_BYTE *)(v6 + 111))
      v8 = 1;
    else
      v8 = *(_BYTE *)(v6 + 110) != 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(a1 + 368);
  if (v9)
  {
    v10 = *(unsigned __int8 *)(v9 + 32);
    v12 = (v10 < 2 || ((v10 & 0xFE) == 2 ? (v11 = *(_BYTE *)(v9 + 110) == 0) : (v11 = 1), !v11))
       && *(_DWORD *)(a1 + 424) == 0;
    v13 = *(float *)(v9 + 116);
  }
  else
  {
    v12 = 0;
    v13 = 0.0;
  }
  if (*(_BYTE *)(a1 + 824))
    v13 = *(double *)(a1 + 448);
  if (*(int *)(*(_QWORD *)(a1 + 392) + 560) >= 2 && *(_DWORD *)(a1 + 916))
  {
    sub_1B680F590(&v45, *(_QWORD *)(*(_QWORD *)(a3 + 584) + 48), *(_DWORD *)(v6 + 72));
    if (v45)
      v13 = *(float *)(v45 + 116);
    v14 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v17 = 0.0;
  if (*(_DWORD *)(a1 + 404))
  {
    v18 = v7;
    v19 = 0.0;
  }
  else
  {
    v20 = 72;
    if (!*(_DWORD *)(a1 + 916))
      v20 = 76;
    v21 = *(_DWORD *)(v6 + v20);
    v22 = *(_DWORD *)(*(_QWORD *)(a1 + 392) + 560);
    if ((int)v21 >= v22)
    {
      v23 = 1.79769313e308;
      v18 = v7;
    }
    else
    {
      v23 = 1.79769313e308;
      do
      {
        v24 = (int *)(v6 + 136 + 120 * v21);
        if (v21 >= 7)
          v24 = 0;
        if (v21 == 9)
          v24 = (int *)(v6 + 976);
        v25 = v24[28];
        v18 = v7;
        if ((v25 & 0x80000000) == 0)
        {
          v26 = fmax(*(double *)v6 * (double)v24[4] / 1000.0, 10.0);
          if (v22 <= 1 && !*(_BYTE *)(a1 + 824))
            v26 = 10.0;
          v27 = v24[29];
          v28 = (double)v25 / v26;
          if (v7 * 0.25 < v28)
            v28 = v7 * 0.25;
          v29 = v7 - v28;
          if (v29 <= (double)v27)
            v18 = v29;
          else
            v18 = (double)v27;
        }
        if (v18 < v23)
          v23 = v18;
        ++v21;
      }
      while (v22 != v21);
    }
    if (a2 || !*(_DWORD *)(a1 + 424))
    {
      v31 = *(_QWORD *)(a1 + 8 * *(int *)(v6 + 72) + 848);
      v32 = a3;
      v33 = v12;
      v34 = v8;
    }
    else
    {
      if (*(double *)(v6 + 976) > 0.0)
      {
        v30 = *(double *)(v6 + 24) + 1.0;
        if ((2040109460.0 - (double)*(int *)(v6 + 36)) / v30 >= v7)
          v18 = v7;
        else
          v18 = (2040109460.0 - (double)*(int *)(v6 + 36)) / v30;
      }
      v31 = *(_QWORD *)(a1 + 904);
      v32 = a3;
      v33 = 0;
      v34 = 0;
      v23 = v18;
    }
    v17 = sub_1B68561CC(v31, v32, v33, v34, &v47, *(double *)(a3 + 2472), v23, v13);
    v19 = 1.0;
  }
  v35 = *(unsigned int *)(a1 + 320);
  if (v17 >= flt_1B6922848[v35])
    v36 = v17;
  else
    v36 = flt_1B6922848[v35];
  if (v47)
  {
    v37 = a2 == 0;
    v38 = v13;
    v39 = *(_DWORD *)(a1 + 424) != 0;
    v40 = v13 + 2.91256094;
    v41 = v37 && v39;
    if (v37 && v39)
      v40 = v13;
    if (v12)
      v38 = v40;
    v42 = exp2((v38 + -12.0) / 6.0) * 0.850000024;
    if (v41)
    {
      v43 = 2.51984191;
      v44 = v42 * 2.51984191;
    }
    else
    {
      v43 = 1.51452804;
      v44 = v42 * 1.51452804;
      v42 = v42 / 1.51452804;
      if (v19 >= 0.95)
      {
LABEL_73:
        if (v44 > v36)
          v44 = v36;
        if (v42 >= v36)
          v36 = v42;
        else
          v36 = v44;
        goto LABEL_78;
      }
    }
    v42 = v42 / v43;
    goto LABEL_73;
  }
LABEL_78:
  log(v36 / 0.850000024);
  if (!*(_DWORD *)(a1 + 404) && sub_1B67EE3C8() && *(int *)(*(_QWORD *)(a1 + 392) + 560) >= 2)
    *(double *)(a1 + 432) = v18;
}

double sub_1B68585B0(uint64_t a1, uint64_t a2, CMTime *a3, double a4, double a5)
{
  double v8;
  uint64_t v10;
  float v11;
  _DWORD *v12;
  BOOL v13;
  double v15;
  unsigned __int8 v17;
  int32_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  double v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  float v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime time1;

  v8 = a4;
  v10 = *(_QWORD *)(a1 + 368);
  if (v10)
    v11 = *(float *)(v10 + 116);
  else
    v11 = 51.0;
  if (*(_BYTE *)(a2 + 3))
  {
    if (*(int *)(a1 + 352) >= 2)
      v8 = fmax(((double)*(int *)(a1 + 284) - a4) * 0.5, 0.0) + a4;
    if (*(_BYTE *)a2)
    {
      v12 = *(_DWORD **)(a1 + 344);
      v13 = *(_DWORD *)(a2 + 8) <= v12[19] || *(_DWORD *)(a2 + 4) <= v12[18];
      if (!v13 || *(_DWORD *)(a2 + 12) > v12[20])
      {
        v15 = (double)*(int *)(a1 + 280);
        if (a5 <= 6000000.0 && v8 < v15)
          v8 = v8 + (double)((int)(v15 - v8) >> (int)(a5 / 2000001.0));
        if (v12[14] == 1)
        {
          v17 = atomic_load((unsigned __int8 *)&qword_1EF1391D8);
          if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1EF1391D8))
          {
            CMTimeMake((CMTime *)byte_1EF1391C0, 500, 1000);
            __cxa_guard_release(&qword_1EF1391D8);
          }
          lhs = *a3;
          rhs = *(CMTime *)(*(_QWORD *)(a1 + 344) + 28);
          CMTimeSubtract(&time1, &lhs, &rhs);
          time2 = *(CMTime *)byte_1EF1391C0;
          v18 = CMTimeCompare(&time1, &time2);
          if (a5 <= 10000000.0 && v18 >= 1 && v8 < 28.0)
            v8 = 28.0;
        }
      }
    }
LABEL_59:
    v30 = *(_QWORD *)(a1 + 368);
    if (v30
      && !*(_DWORD *)(*(_QWORD *)(a1 + 344) + 60)
      && !*(_DWORD *)(a2 + 16)
      && v11 <= 28.0
      && v8 < v11
      && 5 * *(_QWORD *)(v30 + 56) < (unint64_t)(2 * *(_QWORD *)(v30 + 40))
      && v8 < v11 + -0.5)
    {
      return v11 + -0.5;
    }
    return v8;
  }
  v19 = *(_QWORD *)(a1 + 344);
  v20 = *(_DWORD *)(v19 + 52);
  if (v20 == 1)
  {
    v21 = *(_OWORD *)&a3->value;
    *(_QWORD *)(v19 + 44) = a3->epoch;
    *(_OWORD *)(v19 + 28) = v21;
    v19 = *(_QWORD *)(a1 + 344);
    v20 = *(_DWORD *)(v19 + 52);
  }
  if (v20 <= 1)
    v20 = 1;
  if (*(_DWORD *)(v19 + 68) != 3)
  {
    if (v20 <= 2)
    {
      v24 = v20 - 1;
      v25 = *(_QWORD *)(a1 + 368);
      if (v25 && (*(_BYTE *)(v25 + 140) || *(_BYTE *)(v25 + 141)))
      {
        if ((float)(v11 - (float)*((int *)&unk_1B692D474 + v24)) > v8)
          v8 = (float)(v11 - (float)*((int *)&unk_1B692D474 + v24));
      }
      else
      {
        sub_1B680F4BC(&v32, *(_QWORD *)(*(_QWORD *)(a1 + 840) + 48), 1u);
        if (v32 && (*(_BYTE *)(v32 + 140) || *(_BYTE *)(v32 + 141)))
        {
          v26 = *(float *)(v32 + 116);
          if ((float)(v26 - (float)*((int *)&unk_1B692D474 + v24)) > v8)
            v8 = (float)(v26 - (float)*((int *)&unk_1B692D474 + v24));
        }
        v27 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
    }
    goto LABEL_59;
  }
  v22 = (float)(v11 + -1.0);
  if (v22 < v8)
    v8 = (float)(v11 + -1.0);
  v23 = *(_QWORD *)(a1 + 368);
  if (v23)
  {
    if (*(double *)(v23 + 64) > (double)*(unint64_t *)(v23 + 56)
      && *(int *)(v19 + 60) >= 3
      && !*(_BYTE *)(v23 + 111)
      && (int)(v22 - v8) <= 1
      && v8 > (double)dword_1B692281C[*(unsigned int *)(a1 + 320)])
    {
      v8 = v8 + -1.0;
    }
    goto LABEL_59;
  }
  return v8;
}

void sub_1B6858968(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EF1391D8);
  _Unwind_Resume(a1);
}

void sub_1B6858980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  double v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  unint64_t v31;
  unsigned int v32;
  double v33;
  uint64_t v34;
  int v35;
  int v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  unint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;

  v6 = *(_QWORD *)(a2 + 3008);
  v7 = *(_QWORD *)(a2 + 2904);
  v8 = *(unsigned __int8 *)(a2 + 640);
  v9 = *(_DWORD *)(*(_QWORD *)(a2 + 608) + 680);
  if (v9 >= 2)
    v9 = 2;
  *(double *)(a1 + 440) = (*(float *)(a2 + 2720) + *(double *)(a1 + 440) * (double)v9) / (double)(v9 + 1);
  if (!*(_BYTE *)a2)
  {
    sub_1B677A440((_QWORD *)(a1 + 528), (_DWORD *)(v6 + 16));
    v10 = *(_QWORD *)(a1 + 568);
    if (v10 >= 0x11)
    {
      v11 = *(_QWORD *)(a1 + 560);
      *(_QWORD *)(a1 + 568) = v10 - 1;
      *(_QWORD *)(a1 + 560) = v11 + 1;
      sub_1B677A4C4(a1 + 528);
    }
    v60 = v7;
    sub_1B677A440((_QWORD *)(a1 + 480), &v60);
    v12 = *(_QWORD *)(a1 + 520);
    if (v12 >= 0x11)
    {
      v13 = *(_QWORD *)(a1 + 512);
      *(_QWORD *)(a1 + 520) = v12 - 1;
      *(_QWORD *)(a1 + 512) = v13 + 1;
      sub_1B677A4C4(a1 + 480);
    }
    if (*(_BYTE *)(a1 + 624))
    {
      v59 = *(_QWORD *)(a2 + 2920);
      sub_1B677A440((_QWORD *)(a1 + 576), &v59);
      v14 = *(_QWORD *)(a1 + 616);
      if (v14 >= 0x11)
      {
        v15 = *(_QWORD *)(a1 + 608);
        *(_QWORD *)(a1 + 616) = v14 - 1;
        *(_QWORD *)(a1 + 608) = v15 + 1;
        sub_1B677A4C4(a1 + 576);
      }
      v16 = *(_DWORD *)(a1 + 640) + v7;
      *(_DWORD *)(a1 + 640) = v16;
      v17 = *(_DWORD *)(a1 + 644) + *(_DWORD *)(a2 + 2920);
      *(_DWORD *)(a1 + 644) = v17;
      v18 = (double)v17 * 100.0 / (double)v16;
      *(float *)(a1 + 648) = v18;
    }
  }
  if (a3 || !*(_DWORD *)(a1 + 424) || v8)
  {
    v19 = a1 + 8 * *(int *)(v6 + 72) + 848;
  }
  else
  {
    a3 = 0;
    v19 = a1 + 904;
  }
  v20 = *(_QWORD *)v19;
  v21 = *(unsigned __int8 *)(*(_QWORD *)v19 + 336);
  if (*(_BYTE *)(*(_QWORD *)v19 + 336))
  {
    v22 = *(_QWORD *)(a2 + 3008);
    if (*(_BYTE *)(v22 + 111))
      v23 = 1;
    else
      v23 = *(_BYTE *)(v22 + 110) != 0;
  }
  else
  {
    v23 = 0;
  }
  v24 = *(_QWORD *)(a2 + 1064);
  v25 = *(double *)(v24 + 2472);
  if (*(_QWORD *)(v24 + 400))
  {
    v26 = *(uint64_t **)(v24 + 392);
    if (v26[1])
    {
      v27 = *v26;
      if (v27)
      {
        v28 = *(_QWORD *)(v24 + 584);
        if (*(_BYTE *)(v28 + 3400))
        {
          if (*(_QWORD *)(a2 + 1072) && *(_BYTE *)(v28 + 3768) && *(_BYTE *)(a2 + 2466))
          {
            if (*(unsigned __int8 *)(v24 + 640) > 1u)
            {
              if (*(_BYTE *)(a2 + 2464))
                goto LABEL_36;
            }
            else if (*(_DWORD *)(a2 + 2044))
            {
              goto LABEL_36;
            }
            v29 = ((double)*(unint64_t *)(v27 + 552) + (double)(*(int *)(a2 + 848) >> 1))
                / (double)*(int *)(a2 + 848);
            v30 = fabs(sqrt(v29)) * 0.5;
            if (v29 == -INFINITY)
              v25 = INFINITY;
            else
              v25 = v30;
          }
        }
      }
    }
  }
LABEL_36:
  v31 = *(_QWORD *)(a2 + 2904);
  v32 = *(unsigned __int8 *)(a2 + 640);
  v33 = exp2((*(float *)(a2 + 2720) + -12.0) / 6.0) * 0.850000024;
  v34 = *(_QWORD *)(a2 + 592);
  v35 = *(_DWORD *)(v34 + 276);
  v36 = *(_DWORD *)(v34 + 280);
  v37 = v25 * (double)v35 * (double)v36;
  if (*(_BYTE *)(v34 + 136))
  {
    v35 = *(_DWORD *)(v34 + 248);
    if (v35 <= 0)
      v35 = *(_DWORD *)(v34 + 240);
    v36 = *(_DWORD *)(v34 + 252);
    if (v36 <= 0)
      v36 = *(_DWORD *)(v34 + 244);
  }
  v38 = v37 / (double)(v36 * v35);
  if (v32 >= 4)
    v39 = v33 / 1.29999995;
  else
    v39 = v33;
  if (a3)
  {
    v40 = exp2((*(float *)(a3 + 16) + -12.0) / 6.0) * 0.850000024;
    if (v32 >= 4)
      v40 = v40 / 1.29999995;
    v41 = v20 + 16;
    v42 = (v39 + v40) * 0.5;
    v43 = (*(_QWORD *)a3 + v31) >> 1;
    v44 = v25;
    v45 = v38;
    goto LABEL_54;
  }
  if (!v21)
  {
    v41 = v20 + 16;
    goto LABEL_53;
  }
  if (v23 || (sub_1B685585C(v20 + 16, v31, v39, v25, v38), *(int *)(a2 + 644) <= 1))
  {
    v41 = v20 + 176;
LABEL_53:
    v42 = v39;
    v44 = v25;
    v45 = v38;
    v43 = v31;
LABEL_54:
    sub_1B685585C(v41, v43, v42, v44, v45);
  }
  v46 = *(int *)(v6 + 72);
  if ((int)v46 < *(_DWORD *)(*(_QWORD *)(a1 + 392) + 560))
  {
    do
    {
      v47 = *(_QWORD *)(a1 + 8 * v46 + 848);
      v48 = *(_QWORD *)(a2 + 2904);
      v49 = *(_DWORD *)(a2 + 2720);
      v50 = *(_QWORD *)(a2 + 592);
      v51 = *(_QWORD *)(v50 + 16);
      v52 = *(_DWORD *)(v50 + 32);
      std::mutex::lock((std::mutex *)(v47 + 384));
      v53 = operator new(0x30uLL);
      v53[2] = v51;
      *((_DWORD *)v53 + 6) = v52;
      v53[4] = v48;
      *((_DWORD *)v53 + 10) = v49;
      v54 = *(_QWORD *)(v47 + 360);
      *v53 = v54;
      v53[1] = v47 + 360;
      *(_QWORD *)(v54 + 8) = v53;
      *(_QWORD *)(v47 + 360) = v53;
      v55 = *(uint64_t **)(v47 + 368);
      ++*(_QWORD *)(v47 + 376);
      v56 = v52 + 3;
      if (v52 >= 0)
        v56 = v52;
      if (v51 - v55[2] > v56 >> 2)
      {
        v57 = (uint64_t)v56 >> 2;
        do
        {
          v58 = *v55;
          *(_QWORD *)(v58 + 8) = v55[1];
          *(_QWORD *)v55[1] = v58;
          --*(_QWORD *)(v47 + 376);
          operator delete(v55);
          v55 = *(uint64_t **)(v47 + 368);
        }
        while (*(_QWORD *)(*(_QWORD *)(v47 + 360) + 16) - v55[2] > v57);
      }
      std::mutex::unlock((std::mutex *)(v47 + 384));
      ++v46;
    }
    while (v46 < *(int *)(*(_QWORD *)(a1 + 392) + 560));
  }
}

void sub_1B6858E58(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6858E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v8;
  int v9;
  float v10;
  float v11;
  double v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v21;
  float v22;
  int v23;
  double v25;

  if (!*(_BYTE *)(a1 + 57))
    return 0;
  v3 = *(_QWORD *)(a2 + 3008);
  v4 = *(_QWORD *)(a2 + 2904);
  v5 = (int)((double)(*(_DWORD *)(v3 + 68) - *(_DWORD *)(v3 + 36)) / (*(double *)(v3 + 24) + 1.0));
  if (v4 <= v5 || *(unsigned __int8 *)(a2 + 4) > 1u)
    return 0;
  v8 = (int)(*(float *)(a2 + 2720) + 0.5);
  v9 = *(_DWORD *)(v3 + 44);
  v10 = (float)v8;
  v11 = (float)v8 + 1.0;
  v12 = v11;
  if (v11 < 50.0)
  {
    v13 = *(_QWORD *)(a2 + 2928);
    v25 = (double)(v4 - v13);
    v14 = exp2((v10 + -12.0) / 6.0) * 0.850000024;
    v15 = (float)(v10 + 3.0);
    while (1)
    {
      v16 = exp2((v12 + -12.0) / 6.0) * 0.850000024;
      if (v16 < 0.100000001)
        v16 = 0.100000001;
      v17 = v14 / v16;
      v18 = pow(v14 / v16, 1.1) * (double)v13;
      v19 = fabs(sqrt(v17));
      if (v17 == -INFINITY)
        v19 = INFINITY;
      if (v18 + v19 * v25 < (double)v5 || v12 >= v15)
        break;
      v12 = v12 + 1.0;
      if (v12 >= 50.0)
        goto LABEL_21;
    }
    if (v12 > v15)
      v12 = (float)(v10 + 3.0);
  }
LABEL_21:
  v21 = 51.0;
  if (v12 <= 51.0)
    v21 = v12;
  v22 = v21;
  v23 = (int)v22;
  if (*(_BYTE *)(a1 + 58) && *(int *)(a2 + 644) >= 1 && v9 < v23)
  {
    *(_BYTE *)(v3 + 49) = 1;
    v23 = v9;
  }
  if (v23 <= v8)
    return 0;
  *(float *)(a2 + 2720) = (float)v23;
  return 1;
}

void sub_1B6859090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  double v18;
  __int16 *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int16 *v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  float *v64;
  __int16 *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  _DWORD *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  int v79;
  int *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, int, int, int, CVPixelBufferRef);
  void *v85;
  float **v86;
  uint64_t v87;
  float *v88;
  float **v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t);
  uint64_t *(*v92)(uint64_t);
  uint64_t v93;

  v4 = *(_QWORD *)(a2 + 3008);
  sub_1B680F36C(&v80, *(_QWORD *)(*(_QWORD *)(a2 + 584) + 48));
  v5 = v80;
  v6 = *(_QWORD *)(a1 + 392);
  v7 = *(_DWORD *)(v6 + 512);
  if (v80)
    v8 = v7 <= 1;
  else
    v8 = 0;
  if (v8)
  {
    if (*((_BYTE *)v80 + 111))
    {
      *(_DWORD *)(v4 + 16) += v80[2];
      *(_DWORD *)(v4 + 32) += v5[4];
      v10 = v5 + 5;
      goto LABEL_10;
    }
  }
  else if (v7 == 2)
  {
    v9 = *(_QWORD *)(a1 + 840);
    if (*(_BYTE *)(v9 + 1152))
    {
      *(_DWORD *)(v4 + 16) += *(_DWORD *)(v9 + 1156);
      *(_DWORD *)(v4 + 32) += *(_DWORD *)(v9 + 1160);
      v10 = (_DWORD *)(v9 + 1164);
LABEL_10:
      *(_DWORD *)(v4 + 40) += *v10;
    }
  }
  if (*(_BYTE *)(v6 + 59) == 1)
  {
    v11 = *(_DWORD *)(a2 + 2888);
    if (v11 != *(_DWORD *)(a1 + 8))
    {
      v12 = *(_DWORD *)(a1 + 764);
      if (v11)
      {
        if (v12 <= 1)
        {
          v13 = 2;
          goto LABEL_18;
        }
      }
      else if ((v12 & 0xFFFFFFFE) == 2)
      {
        v13 = -2;
LABEL_18:
        v14 = v12 + v13;
        v15 = a1 + 8 * *(int *)(a1 + 16);
        v16 = *(__int16 *)(v15 + 24);
        v17 = *(__int16 *)(v15 + 26);
        v18 = *(double *)(a1 + 416);
        *(_DWORD *)(a1 + 764) = v14;
        sub_1B68576B4(a1);
        v19 = (__int16 *)(a1 + 26);
        v20 = -1;
        while (v20 != 31)
        {
          v21 = (float)(*(float *)(v19 - 3) * (float)(*v19 * *(v19 - 1)));
          ++v20;
          v19 += 4;
          if (v18 * (double)(v17 * v16) >= v21)
            goto LABEL_23;
        }
        LODWORD(v20) = 32;
LABEL_23:
        *(_DWORD *)(a1 + 16) = v20;
        *(_DWORD *)(a1 + 728) = sub_1B6858020(a1, v20);
      }
      *(_DWORD *)(a1 + 8) = v11;
    }
  }
  if ((*(_DWORD *)(a1 + 320) | 2) != 3 || (v22 = *(_QWORD *)(a1 + 344)) == 0)
  {
    v23 = 0;
    v25 = 1;
    goto LABEL_37;
  }
  if (*(_BYTE *)(v22 + 24) || !*(_BYTE *)(*(_QWORD *)(a1 + 840) + 320))
  {
    *(_QWORD *)(v22 + 64) = 0;
    *(_DWORD *)(v22 + 60) = 0;
LABEL_29:
    v23 = 0;
    v24 = *(_DWORD *)(v22 + 68);
    goto LABEL_30;
  }
  sub_1B680F4BC(&v88, *(_QWORD *)(*(_QWORD *)(a2 + 584) + 48), 0);
  if (v88)
  {
    if (*((_BYTE *)v88 + 111))
    {
      v29 = 0;
      v30 = 1;
    }
    else
    {
      v30 = 0;
      v29 = v88[29] < 18.0;
    }
  }
  else
  {
    v29 = 0;
    v30 = 0;
  }
  v70 = *(_DWORD **)(a1 + 344);
  v71 = v70[15] + (v30 ^ 1);
  v72 = v70[16] + v30;
  v70[15] = v71;
  v70[16] = v72;
  if (v71)
  {
    if (v71 <= dword_1B6922830[*(unsigned int *)(a1 + 320)])
    {
      v70[17] = 0;
      goto LABEL_141;
    }
    v73 = 3;
  }
  else
  {
    v73 = 2;
  }
  v70[17] = v73;
LABEL_141:
  v74 = v70[5];
  if (v71 < v74 && v72 + v71 >= ((28 - v74) & ~((28 - v74) >> 31)))
    v70[17] = 2;
  v75 = (std::__shared_weak_count *)v89;
  if (v89)
  {
    v76 = (unint64_t *)(v89 + 1);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v22 = *(_QWORD *)(a1 + 344);
  if (!v29)
    goto LABEL_29;
  v78 = *(_DWORD *)(v22 + 60);
  if (v78 <= 0)
    goto LABEL_29;
  v79 = *(_DWORD *)(v22 + 20);
  v24 = *(_DWORD *)(v22 + 68);
  if (v78 <= v79)
  {
    v23 = 0;
  }
  else
  {
    v23 = 1;
    *(_BYTE *)(*(_QWORD *)(a1 + 840) + 321) = 1;
  }
LABEL_30:
  v25 = (v24 - 3) < 0xFFFFFFFE;
  v26 = *(_QWORD *)(a1 + 840);
  if (*(_BYTE *)(v26 + 321) && ((***(uint64_t (****)(_QWORD))v26)(*(_QWORD *)v26) & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 16))
      *(_DWORD *)(a1 + 16) = 0;
    if (*(_DWORD *)(a1 + 728))
      *(_DWORD *)(a1 + 728) = 0;
  }
LABEL_37:
  sub_1B680F36C((int **)&v88, *(_QWORD *)(*(_QWORD *)(a2 + 584) + 48));
  if (v88 && *((_BYTE *)v88 + 130))
  {
    v27 = *((_DWORD *)v88 + 28);
    if (*((_BYTE *)v88 + 111))
    {
      if (v27)
      {
        v28 = word_1B6922650[46 * *(unsigned int *)(a1 + 320) + 1 + 2 * *(int *)(a1 + 728)];
      }
      else
      {
        v28 = *(_DWORD *)(a1 + 756);
        if (v28 <= 1)
          v28 = 1;
      }
      v31 = v28 - 1;
LABEL_51:
      *(_DWORD *)(a1 + 756) = v31;
      goto LABEL_52;
    }
    if (v27 < 1)
    {
      if ((v27 & 0x80000000) == 0)
        goto LABEL_52;
      v65 = &word_1B6922650[46 * *(unsigned int *)(a1 + 320) + 2 * *(int *)(a1 + 728)];
      v31 = v65[1] - *v65;
      goto LABEL_51;
    }
    *(_DWORD *)(a1 + 756) = 0;
  }
LABEL_52:
  v32 = (std::__shared_weak_count *)v89;
  if (v89)
  {
    v33 = (unint64_t *)(v89 + 1);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = *(_DWORD *)(a1 + 320);
  if (v35 == 3)
  {
    sub_1B680F4BC(&v88, *(_QWORD *)(*(_QWORD *)(a2 + 584) + 48), 0);
    if (v88)
    {
      if (*(double *)(a1 + 832) >= v88[29])
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 840) + 320))
        {
          v36 = *(_DWORD *)(a1 + 460);
          if (v36 > *(_DWORD *)(a1 + 772))
          {
            ++*(_DWORD *)(a1 + 456);
            *(_DWORD *)(a1 + 460) = v36 + 1;
            v23 = 1;
          }
        }
      }
    }
    v37 = (std::__shared_weak_count *)v89;
    if (v89)
    {
      v38 = (unint64_t *)(v89 + 1);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v35 = *(_DWORD *)(a1 + 320);
  }
  v40 = &word_1B6922650[46 * v35 + 2 * *(int *)(a1 + 728)];
  v41 = *(_DWORD *)(a1 + 756);
  v42 = v40[1];
  v43 = *v40;
  v44 = *(_QWORD *)(a1 + 840);
  *(_BYTE *)(a2 + 2) = *(_BYTE *)(v44 + 320);
  if (*(int *)(*(_QWORD *)(a1 + 392) + 560) >= 2)
  {
    *(_DWORD *)(v4 + 72) = -1;
    sub_1B680F36C((int **)&v88, *(_QWORD *)(v44 + 48));
    v45 = *(_QWORD *)(a1 + 392);
    if (v88 && *(int *)(v45 + 512) <= 1 && *((_BYTE *)v88 + 130) && *((_BYTE *)v88 + 111))
      --*(_QWORD *)(a1 + 360);
    v46 = *(unsigned int *)(v45 + 560);
    if ((int)v46 >= 1)
    {
      v47 = *(_QWORD *)(a1 + 360);
      do
      {
        v48 = v46 - 1;
        if (!(v47 % (1 << *(_DWORD *)(a1 + 4 * (v46 - 1) + 920))))
          *(_DWORD *)(v4 + 72) = v46 - 1;
        --v46;
      }
      while ((unint64_t)(v48 + 1) > 1);
    }
    v49 = *(_DWORD *)(v4 + 76);
    if (*(_DWORD *)(v4 + 72) > v49)
      *(_DWORD *)(v4 + 72) = v49;
    ++*(_QWORD *)(a1 + 360);
    v50 = (std::__shared_weak_count *)v89;
    if (v89)
    {
      v51 = (unint64_t *)(v89 + 1);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  if (!*(_BYTE *)(a2 + 416))
  {
    if ((v23 & 1) != 0
      || ((v53 = *(_QWORD *)(a1 + 392), *(_BYTE *)(v53 + 58)) ? (v54 = v25) : (v54 = 0),
          v54 && *(int *)(a1 + 728) >= 1 && v41 % v42 < v42 - v43
       || (*(_DWORD *)(v4 + 72) & 0x80000000) != 0 && *(int *)(v53 + 560) >= 2))
    {
      *(_BYTE *)a2 = 1;
    }
  }
  ++*(_DWORD *)(a1 + 756);
  if (*(_BYTE *)(a1 + 824)
    && !*(_BYTE *)a2
    && *(_DWORD *)(a1 + 460) > *(_DWORD *)(a1 + 772)
    && !*(_BYTE *)(*(_QWORD *)(a1 + 840) + 320))
  {
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(*(_QWORD *)(a2 + 592) + 16);
    v55 = *(_DWORD *)(v4 + 76);
    v56 = v4 + 120 * v55 + 136;
    if (v55 >= 7)
      v56 = 0;
    if (v55 == 9)
      v57 = v4 + 976;
    else
      v57 = v56;
    *(_DWORD *)(a1 + 468) = (*(double *)(v57 + 8) * 100.0 / 1000.0);
  }
  v58 = *(_QWORD *)(a1 + 384);
  if (v58 && !*(_BYTE *)a2 && *(_DWORD *)(a1 + 468))
  {
    v62 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 592) + 88))(*(_QWORD *)(a2 + 592));
    if (!*(_QWORD *)(v58 + 8) || (v62 ? (v63 = *(_QWORD *)(v58 + 16) == 0) : (v63 = 1), v63))
    {
      v64 = 0;
    }
    else
    {
      v88 = 0;
      v89 = &v88;
      v90 = 0x3002000000;
      v91 = sub_1B68599E0;
      v92 = sub_1B68599F0;
      v66 = operator new();
      *(_QWORD *)(v66 + 16) = 0;
      *(_QWORD *)(v66 + 24) = 850045863;
      *(_OWORD *)(v66 + 32) = 0u;
      *(_OWORD *)(v66 + 48) = 0u;
      *(_OWORD *)(v66 + 64) = 0u;
      *(_QWORD *)(v66 + 80) = 0;
      *(_QWORD *)(v66 + 88) = 1018212795;
      *(_OWORD *)(v66 + 124) = 0u;
      *(_OWORD *)(v66 + 96) = 0u;
      *(_OWORD *)(v66 + 112) = 0u;
      *(_QWORD *)v66 = &off_1E6A14668;
      *(_QWORD *)(v66 + 8) = 0;
      v93 = v66;
      v64 = v89[5];
      if (!v64)
        sub_1B6780564(3u);
      sub_1B67804AC((uint64_t)v89[5]);
      v82 = MEMORY[0x1E0C809B0];
      v83 = 0x40000000;
      v84 = sub_1B68599F8;
      v85 = &unk_1E6A175E0;
      v86 = &v88;
      v87 = v58;
      VTMotionEstimationSessionEstimateMotionVectors();
      _Block_object_dispose(&v88, 8);
      sub_1B6859B7C(&v93);
    }
    v67 = *(unint64_t **)(v4 + 96);
    *(_QWORD *)(v4 + 96) = v64;
    if (v67)
    {
      v68 = v67 + 1;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
        (*(void (**)(unint64_t *))(*v67 + 16))(v67);
    }
  }
  v59 = v81;
  if (v81)
  {
    p_shared_owners = (unint64_t *)&v81->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1B6859964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t *v17;
  unint64_t *v18;
  unint64_t *v20;
  unint64_t v21;

  _Block_object_dispose(&a17, 8);
  sub_1B6859B7C(v17);
  if (v18)
  {
    v20 = v18 + 1;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
      (*(void (**)(unint64_t *))(*v18 + 16))(v18);
  }
  sub_1B6772C88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B68599E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t *sub_1B68599F0(uint64_t a1)
{
  return sub_1B6859B7C((uint64_t *)(a1 + 40));
}

void sub_1B68599F8(uint64_t a1, int a2, int a3, int a4, CVPixelBufferRef pixelBuffer)
{
  void (**v7)(void *, size_t, size_t, _QWORD, std::exception_ptr *, float *);
  size_t Width;
  size_t Height;
  unsigned int BytesPerRow;
  void (*v11)(void *, size_t, size_t, _QWORD, std::exception_ptr *, float *);
  void *BaseAddress;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  std::exception_ptr v17;

  v7 = *(void (***)(void *, size_t, size_t, _QWORD, std::exception_ptr *, float *))(a1 + 40);
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v16 = 0.0;
  LODWORD(v17.__ptr_) = 0;
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 843264104)
  {
    v11 = *v7;
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
    v11(BaseAddress, Width, Height, BytesPerRow >> 1, &v17, &v16);
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  v13 = 0.0;
  if ((_DWORD)Width && (_DWORD)Height)
    v13 = fmin((float)((float)((float)(*(float *)&v17.__ptr_ + v16) / (float)(Height * Width)) / 120.0), 1.0);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (!v14)
    sub_1B6780564(3u);
  std::mutex::lock((std::mutex *)(v14 + 24));
  if ((*(_BYTE *)(v14 + 136) & 1) != 0
    || (v17.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v17), v15))
  {
    sub_1B6780564(2u);
  }
  *(float *)(v14 + 140) = v13;
  *(_DWORD *)(v14 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
  std::mutex::unlock((std::mutex *)(v14 + 24));
}

void sub_1B6859B68(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B6859B7C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 136) & 1) == 0)
    {
      v12.__ptr_ = 0;
      v3 = *(_QWORD *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v12);
      v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        v7 = std::future_category();
        MEMORY[0x1BCC97F9C](&v10, 4, v7);
        exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
        v9 = std::logic_error::logic_error(exception, &v10);
        v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE4F88] + 16);
        v9[1] = v11;
        __cxa_throw(v9, (struct type_info *)&unk_1E6A14AE8, (void (*)(void *))MEMORY[0x1E0DE4540]);
      }
    }
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

void sub_1B6859C54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x1BCC97FA8](&a11);
  JUMPOUT(0x1B6859BC4);
}

void sub_1B6859C90(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1B6859CDC(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B6859D3C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

BOOL sub_1B6859D48(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 840);
  if (!*(_BYTE *)(v1 + 993) || *(int *)(v1 + 152) > 600000)
    return 0;
  v2 = *(unsigned __int16 *)(a1 + 8 * *(int *)(a1 + 16) + 24);
  if (v2 == 544)
    return *(unsigned __int16 *)(*(_QWORD *)(a1 + 392) + 86) == 1088;
  if (v2 == 816)
  {
    if (*(_WORD *)(*(_QWORD *)(a1 + 392) + 86) != 1664)
      return 0;
  }
  else if (v2 != 960 || *(_WORD *)(*(_QWORD *)(a1 + 392) + 86) != 1920)
  {
    return 0;
  }
  return 1;
}

uint64_t sub_1B6859DD0(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

BOOL sub_1B6859E18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96) != 255;
}

BOOL sub_1B6859E28(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 97) != 255;
}

BOOL sub_1B6859E38(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 98) != 255;
}

BOOL sub_1B6859E48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 99) != 255;
}

BOOL sub_1B6859E58(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 100) != 255;
}

BOOL sub_1B6859E68(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 103) != 255;
}

BOOL sub_1B6859E78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 101) != 255;
}

BOOL sub_1B6859E88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 102) != 255;
}

BOOL sub_1B6859E98(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104) != 255;
}

BOOL sub_1B6859EA8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 105) != 255;
}

BOOL sub_1B6859EB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 106) != 255;
}

BOOL sub_1B6859EC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 107) != 255;
}

BOOL sub_1B6859ED8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 108) != 255;
}

BOOL sub_1B6859EE8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 109) != 255;
}

BOOL sub_1B6859EF8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 111) != 255;
}

uint64_t sub_1B6859F08(uint64_t a1)
{
  return *(char *)(a1 + 96);
}

uint64_t sub_1B6859F10(uint64_t a1)
{
  return *(char *)(a1 + 97);
}

uint64_t sub_1B6859F18(uint64_t a1)
{
  return *(char *)(a1 + 98);
}

uint64_t sub_1B6859F20(uint64_t a1)
{
  return *(char *)(a1 + 99);
}

uint64_t sub_1B6859F28(uint64_t a1)
{
  return *(char *)(a1 + 100);
}

uint64_t sub_1B6859F30(uint64_t a1)
{
  return *(char *)(a1 + 103);
}

uint64_t sub_1B6859F38(uint64_t a1)
{
  return *(char *)(a1 + 101);
}

uint64_t sub_1B6859F40(uint64_t a1)
{
  return *(char *)(a1 + 102);
}

uint64_t sub_1B6859F48(uint64_t a1)
{
  return *(char *)(a1 + 104);
}

uint64_t sub_1B6859F50(uint64_t a1)
{
  return *(char *)(a1 + 105);
}

uint64_t sub_1B6859F58(uint64_t a1)
{
  return *(char *)(a1 + 106);
}

uint64_t sub_1B6859F60(uint64_t a1)
{
  return *(char *)(a1 + 107);
}

uint64_t sub_1B6859F68(uint64_t a1)
{
  return *(char *)(a1 + 108);
}

uint64_t sub_1B6859F70(uint64_t a1)
{
  return *(char *)(a1 + 109);
}

uint64_t sub_1B6859F78(uint64_t a1)
{
  return *(char *)(a1 + 111);
}

CFStringRef sub_1B6859F80(uint64_t a1)
{
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const char **)(a1 + 8), 0);
}

uint64_t sub_1B6859F98(uint64_t result)
{
  *(_WORD *)(result + 96) = -1;
  return result;
}

uint64_t sub_1B6859FA4(uint64_t result)
{
  *(_BYTE *)(result + 103) = -1;
  return result;
}

uint64_t sub_1B6859FB0(_BYTE *a1, char *__s1, uint64_t a3, uint64_t a4, int a5)
{
  size_t v7;
  uint64_t result;
  size_t v9;
  char *v10;
  char *v11;
  const char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *__lasts;
  char __str[2000];
  char __dst[150];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)a1 + 9) = a5;
  *((_DWORD *)a1 + 10) = 0;
  if (__s1)
  {
    a1[32] = 1;
    v7 = strnlen(__s1, 0x95uLL) + 1;
    *((_QWORD *)a1 + 3) = v7;
    if (v7 > 0x95)
      return 4294954386;
    result = sub_1B67EBDA0((void **)a1 + 1, v7);
    if (!(_DWORD)result)
    {
      memcpy(*((void **)a1 + 1), __s1, *((_QWORD *)a1 + 3));
      if (a1[32])
      {
        *((_DWORD *)a1 + 10) = 0;
        v9 = *((_QWORD *)a1 + 3);
        if (v9 > 0x96)
          return 4294954386;
        __lasts = 0;
        v10 = strncpy(__dst, *((const char **)a1 + 1), v9);
        v11 = strtok_r(v10, ";", &__lasts);
        if (v11)
        {
          v12 = v11;
          v13 = 0;
          do
          {
            if (!v13 && !strncmp(v12, "FLS", 3uLL))
              v13 = 0;
            else
              strlcpy(&__str[20 * v13++], v12, 0x14uLL);
            v14 = strtok_r(0, ";", &__lasts);
            if (!v14)
              break;
            v12 = v14;
          }
          while (v13 < 0x64);
          if (v13)
          {
            v15 = __str;
            do
            {
              v16 = strtok_r(v15, ":", &__lasts);
              v17 = strtok_r(0, ":", &__lasts);
              if (v16)
              {
                if (v17)
                  v18 = atoi(v17);
                else
                  v18 = 0xFFFFFFFFLL;
                (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)a1 + 312))(a1, v16, v18);
              }
              v15 += 20;
              --v13;
            }
            while (v13);
          }
        }
        (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 304))(a1);
      }
      return 0;
    }
  }
  else
  {
    result = 0;
    a1[32] = 0;
  }
  return result;
}

void sub_1B685A1C0()
{
  JUMPOUT(0x1BCC9814CLL);
}

BOOL sub_1B685A1D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 187) != 255 || *(unsigned __int8 *)(a1 + 188) != 255;
}

BOOL sub_1B685A1F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 190) != 255;
}

BOOL sub_1B685A208(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 191) != 255;
}

BOOL sub_1B685A218(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 189) != 255;
}

BOOL sub_1B685A228(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 192) != 255;
}

BOOL sub_1B685A238(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 193) != 255;
}

BOOL sub_1B685A248(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 194) != 255;
}

BOOL sub_1B685A258(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 195) != 255;
}

BOOL sub_1B685A268(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 196) != 255;
}

BOOL sub_1B685A278(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 197) != 255;
}

BOOL sub_1B685A288(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 198) != 255;
}

BOOL sub_1B685A298(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 199) != 255;
}

BOOL sub_1B685A2A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 200) != 255;
}

uint64_t sub_1B685A2B8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 187) = a2;
  return result;
}

uint64_t sub_1B685A2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;

  v9 = a3 - 1;
  v10 = *(unsigned __int8 *)(a2 + a3 - 1);
  *(_BYTE *)(a1 + 186) = v10;
  *(_QWORD *)(a1 + 187) = -1;
  *(_WORD *)(a1 + 195) = -1;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 197) = -1;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  sub_1B685AE68(a1, v10, a4);
  if (*(char *)(a1 + 186) < 0)
  {
    v9 = v9 != 0;
    v11 = a3;
    while (1)
    {
      v12 = v11 - 1;
      if ((unint64_t)(v11 - 1) < 2)
        break;
      v13 = *(char *)(a2 - 2 + v11--);
      if ((v13 & 0x80000000) == 0)
      {
        v9 = v12 - 1;
        break;
      }
    }
  }
  sub_1B685B1E8((char *)a1);
  v15 = v9 - *(unsigned int *)(a1 + 264);
  v16 = a2 + v15;
  v17 = *(char *)(a1 + 187);
  if (v17 != -1)
  {
    v18 = *(unsigned int *)(a1 + 4 * v17 + 236);
    *(_DWORD *)(a1 + 8) = 8 * *(unsigned __int8 *)(v16 + v18);
    *(_DWORD *)(a1 + 12) = 8 * *(unsigned __int8 *)(v16 + (v18 + 1));
  }
  v19 = *(char *)(a1 + 188);
  if (v19 != -1)
  {
    v20 = (unsigned __int16 *)(v16 + *(unsigned int *)(a1 + 4 * v19 + 236));
    v21 = bswap32(*v20) >> 16;
    LODWORD(v20) = bswap32(v20[1]) >> 16;
    *(_DWORD *)(a1 + 8) = v21;
    *(_DWORD *)(a1 + 12) = (_DWORD)v20;
  }
  v22 = *(char *)(a1 + 191);
  if (v22 != -1)
  {
    v23 = *(unsigned int *)(a1 + 4 * v22 + 236);
    *(_DWORD *)(a1 + 20) = 16 * *(unsigned __int8 *)(v16 + v23);
    *(_DWORD *)(a1 + 24) = 16 * *(unsigned __int8 *)(v16 + (v23 + 1));
    *(_DWORD *)(a1 + 28) = 16 * *(char *)(v16 + (v23 + 2));
    *(_DWORD *)(a1 + 32) = 16 * *(char *)(v16 + (v23 + 3));
  }
  v24 = *(char *)(a1 + 190);
  if (v24 != -1)
  {
    v25 = *(unsigned int *)(a1 + 4 * v24 + 236);
    v26 = *(unsigned __int8 *)(v16 + v25);
    *(_WORD *)(a1 + 16) = v26 << 8;
    *(_WORD *)(a1 + 16) = *(unsigned __int8 *)(v16 + (v25 + 1)) | (unsigned __int16)(v26 << 8);
  }
  v27 = *(char *)(a1 + 193);
  if (v27 != -1)
  {
    v28 = *(unsigned int *)(a1 + 4 * v27 + 236);
    LOBYTE(v14) = *(_BYTE *)(v16 + v28);
    *(float *)&v29 = (float)v14 / 255.0;
    *(float *)(a1 + 52) = *(float *)&v29;
    LOBYTE(v29) = *(_BYTE *)(v16 + (v28 + 1));
    *(float *)&v30 = (float)v29 / 255.0;
    *(float *)(a1 + 56) = *(float *)&v30;
    LOBYTE(v30) = *(_BYTE *)(v16 + (v28 + 2));
    *(float *)&v31 = (float)v30 / 255.0;
    *(float *)(a1 + 60) = *(float *)&v31;
    LOBYTE(v31) = *(_BYTE *)(v16 + (v28 + 3));
    *(float *)(a1 + 64) = (float)v31 / 255.0;
  }
  v32 = *(char *)(a1 + 194);
  if (v32 != -1)
  {
    v33 = *(unsigned int *)(a1 + 4 * v32 + 236);
    *(_DWORD *)(a1 + 68) = 16 * *(unsigned __int8 *)(v16 + v33);
    *(_DWORD *)(a1 + 72) = 16 * *(unsigned __int8 *)(v16 + (v33 + 1));
    *(_DWORD *)(a1 + 76) = *(unsigned __int8 *)(v16 + (v33 + 2));
  }
  v34 = *(unsigned __int8 *)(a1 + 192);
  if (v34 != 255)
    *(_BYTE *)(a1 + 80) = (*(unsigned __int8 *)(a1 + 186) >> v34) & 1;
  v35 = *(char *)(a1 + 196);
  if (v35 != -1)
    *(_QWORD *)(a1 + 88) = bswap64(*(_QWORD *)(v16 + *(unsigned int *)(a1 + 4 * v35 + 236)));
  v36 = *(unsigned __int8 *)(a1 + 197);
  if (v36 != 255)
    *(_BYTE *)(a1 + 96) = (*(unsigned __int8 *)(a1 + 186) >> v36) & 1;
  v37 = *(char *)(a1 + 198);
  if (v37 != -1)
  {
    v38 = (unsigned __int16 *)(v16 + *(unsigned int *)(a1 + 4 * v37 + 236));
    *(_WORD *)(a1 + 98) = bswap32(*v38) >> 16;
    *(_WORD *)(a1 + 100) = bswap32(v38[1]) >> 16;
  }
  v39 = *(char *)(a1 + 199);
  if (v39 != -1)
    *(_BYTE *)(a1 + 102) = *(_BYTE *)(v16 + *(unsigned int *)(a1 + 4 * v39 + 236));
  v40 = *(char *)(a1 + 200);
  if (v40 != -1)
  {
    v41 = (unsigned __int16 *)(v16 + *(unsigned int *)(a1 + 4 * v40 + 236));
    *(_WORD *)(a1 + 104) = bswap32(*v41) >> 16;
    *(_WORD *)(a1 + 106) = bswap32(v41[1]) >> 16;
    *(_WORD *)(a1 + 108) = bswap32(v41[2]) >> 16;
    *(_WORD *)(a1 + 110) = bswap32(v41[3]) >> 16;
  }
  *a5 = a3 - v15;
  return 0;
}

uint64_t sub_1B685A618(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _BYTE *v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  _WORD *v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _WORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)(a1 + 187) = -1;
  *(_WORD *)(a1 + 195) = -1;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 197) = -1;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  sub_1B685AE68(a1, a4, a3);
  sub_1B685B1E8((char *)a1);
  *(_BYTE *)(a1 + 186) = 0;
  v10 = *(char *)(a1 + 187);
  if (v10 == -1)
  {
    v13 = 0;
  }
  else
  {
    v11 = (_BYTE *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v10 + 236));
    *v11 = *(_DWORD *)(a1 + 8) >> 3;
    v11[1] = *(_DWORD *)(a1 + 12) >> 3;
    v12 = *(unsigned __int8 *)(a1 + 186);
    v13 = v12 | (1 << *(_BYTE *)(a1 + 187));
    *(_BYTE *)(a1 + 186) = v12 | (1 << *(_BYTE *)(a1 + 187));
  }
  v14 = *(char *)(a1 + 188);
  if (v14 != -1)
  {
    v15 = *(unsigned __int16 *)(a1 + 12);
    v16 = (_WORD *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v14 + 236));
    *v16 = bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16;
    v16[1] = bswap32(v15) >> 16;
    v13 |= 1 << v14;
    *(_BYTE *)(a1 + 186) = v13;
  }
  v17 = *(char *)(a1 + 191);
  if (v17 != -1)
  {
    v18 = (_BYTE *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v17 + 236));
    *v18 = *(_DWORD *)(a1 + 20) >> 4;
    v18[1] = *(_DWORD *)(a1 + 24) >> 4;
    v18[2] = *(_DWORD *)(a1 + 28) >> 4;
    v18[3] = *(_DWORD *)(a1 + 32) >> 4;
    v19 = *(unsigned __int8 *)(a1 + 186);
    v13 = v19 | (1 << *(_BYTE *)(a1 + 191));
    *(_BYTE *)(a1 + 186) = v19 | (1 << *(_BYTE *)(a1 + 191));
  }
  v20 = *(char *)(a1 + 190);
  if (v20 != -1)
  {
    v21 = (_BYTE *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v20 + 236));
    *v21 = *(_BYTE *)(a1 + 17);
    v21[1] = *(_BYTE *)(a1 + 16);
    v22 = *(unsigned __int8 *)(a1 + 186);
    v13 = v22 | (1 << *(_BYTE *)(a1 + 190));
    *(_BYTE *)(a1 + 186) = v22 | (1 << *(_BYTE *)(a1 + 190));
  }
  v23 = *(char *)(a1 + 193);
  if (v23 != -1)
  {
    v24 = *(unsigned int *)(a1 + 4 * v23 + 236);
    v25 = (int)(float)((float)(*(float *)(a1 + 52) * 255.0) + 0.5);
    if (v25 >= 255)
      v25 = 255;
    v26 = (_BYTE *)(a2 + a5 + v24);
    *v26 = v25 & ~(v25 >> 31);
    v27 = (int)(float)((float)(*(float *)(a1 + 56) * 255.0) + 0.5);
    if (v27 >= 255)
      v27 = 255;
    v26[1] = v27 & ~(v27 >> 31);
    v28 = (int)(float)((float)(*(float *)(a1 + 60) * 255.0) + 0.5);
    if (v28 >= 255)
      v28 = 255;
    v26[2] = v28 & ~(v28 >> 31);
    v29 = (int)(float)((float)(*(float *)(a1 + 64) * 255.0) + 0.5);
    if (v29 >= 255)
      v29 = 255;
    v26[3] = v29 & ~(v29 >> 31);
    v30 = *(unsigned __int8 *)(a1 + 186);
    v13 = v30 | (1 << *(_BYTE *)(a1 + 193));
    *(_BYTE *)(a1 + 186) = v30 | (1 << *(_BYTE *)(a1 + 193));
  }
  v31 = *(char *)(a1 + 194);
  if (v31 != -1)
  {
    v32 = (_BYTE *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v31 + 236));
    *v32 = *(_DWORD *)(a1 + 68) >> 4;
    v32[1] = *(_DWORD *)(a1 + 72) >> 4;
    v32[2] = *(_DWORD *)(a1 + 76);
    v33 = *(unsigned __int8 *)(a1 + 186);
    v13 = v33 | (1 << *(_BYTE *)(a1 + 194));
    *(_BYTE *)(a1 + 186) = v33 | (1 << *(_BYTE *)(a1 + 194));
  }
  v34 = *(unsigned __int8 *)(a1 + 189);
  if (v34 != 255)
  {
    v13 |= 1 << v34;
    *(_BYTE *)(a1 + 186) = v13;
  }
  v35 = *(unsigned __int8 *)(a1 + 192);
  if (v35 != 255 && *(_BYTE *)(a1 + 80))
  {
    v13 |= 1 << v35;
    *(_BYTE *)(a1 + 186) = v13;
  }
  v36 = *(char *)(a1 + 196);
  if (v36 != -1)
  {
    *(_QWORD *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v36 + 236)) = bswap64(*(_QWORD *)(a1 + 88));
    v13 |= 1 << v36;
    *(_BYTE *)(a1 + 186) = v13;
  }
  v37 = *(unsigned __int8 *)(a1 + 197);
  if (v37 != 255)
  {
    v38 = 1 << v37;
    v39 = v13 | v38;
    v13 &= ~v38;
    if (*(_BYTE *)(a1 + 96))
      v13 = v39;
    *(_BYTE *)(a1 + 186) = v13;
  }
  v40 = *(char *)(a1 + 198);
  if (v40 != -1)
  {
    v41 = (_WORD *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v40 + 236));
    *v41 = bswap32(*(unsigned __int16 *)(a1 + 98)) >> 16;
    v41[1] = bswap32(*(unsigned __int16 *)(a1 + 100)) >> 16;
    v13 |= 1 << v40;
    *(_BYTE *)(a1 + 186) = v13;
  }
  v42 = *(char *)(a1 + 199);
  if (v42 != -1)
  {
    *(_BYTE *)(a2 + *(unsigned int *)(a1 + 4 * v42 + 236) + a5) = *(_BYTE *)(a1 + 102);
    v43 = *(unsigned __int8 *)(a1 + 186);
    v13 = v43 | (1 << *(_BYTE *)(a1 + 199));
    *(_BYTE *)(a1 + 186) = v43 | (1 << *(_BYTE *)(a1 + 199));
  }
  v44 = *(char *)(a1 + 200);
  if (v44 != -1)
  {
    v45 = (_WORD *)(a2 + a5 + *(unsigned int *)(a1 + 4 * v44 + 236));
    *v45 = bswap32(*(unsigned __int16 *)(a1 + 104)) >> 16;
    v45[1] = bswap32(*(unsigned __int16 *)(a1 + 106)) >> 16;
    v45[2] = bswap32(*(unsigned __int16 *)(a1 + 108)) >> 16;
    v45[3] = bswap32(*(unsigned __int16 *)(a1 + 110)) >> 16;
    v13 |= 1 << v44;
    *(_BYTE *)(a1 + 186) = v13;
  }
  v46 = *(unsigned int *)(a1 + 264);
  v47 = v46 + a5;
  v48 = ~(v46 + a5) + a6;
  if (v48 < 1)
  {
    if (!(_BYTE)v13)
    {
      v46 = (v46 + 1);
      *(_BYTE *)(a2 + v47) = 0;
      v47 = v46 + a5;
      LOBYTE(v13) = 0x80;
    }
  }
  else
  {
    *(_BYTE *)(a2 + v47) = 0;
    memset((void *)(a2 + a5 + v46 + 1), 128, v48 - 1);
    v46 = (v46 + v48);
    LOBYTE(v13) = *(_BYTE *)(a1 + 186) | 0x80;
    *(_BYTE *)(a1 + 186) = v13;
    v47 = v46 + a5;
  }
  *(_BYTE *)(a2 + v47) = v13;
  return (v46 + 1);
}

uint64_t sub_1B685AADC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v9;
  int v10;
  int v12;
  int v13;
  int v15;
  int v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  v4 = 0;
  v5 = 0;
  v6 = *(_DWORD *)(a1 + 264);
  *(_BYTE *)(a1 + 186) = 0;
  do
  {
    v7 = *(char *)(a1 + 187);
    if (v7 != -1 && v5 == v7)
    {
      sub_1B67C8FE0(a2, *(int *)(a1 + 8) >> 3, 8);
      sub_1B67C8FE0(a2, *(int *)(a1 + 12) >> 3, 8);
      v9 = *(unsigned __int8 *)(a1 + 186);
      v4 = v9 | (1 << *(_BYTE *)(a1 + 187));
      *(_BYTE *)(a1 + 186) = v9 | (1 << *(_BYTE *)(a1 + 187));
    }
    v10 = *(char *)(a1 + 188);
    if (v10 != -1 && v5 == v10)
    {
      sub_1B67C8FE0(a2, *(_DWORD *)(a1 + 8), 16);
      sub_1B67C8FE0(a2, *(_DWORD *)(a1 + 12), 16);
      v12 = *(unsigned __int8 *)(a1 + 186);
      v4 = v12 | (1 << *(_BYTE *)(a1 + 188));
      *(_BYTE *)(a1 + 186) = v12 | (1 << *(_BYTE *)(a1 + 188));
    }
    v13 = *(char *)(a1 + 191);
    if (v13 != -1 && v5 == v13)
    {
      sub_1B67C8FE0(a2, *(int *)(a1 + 20) >> 4, 8);
      sub_1B67C8FE0(a2, *(int *)(a1 + 24) >> 4, 8);
      sub_1B67C8FE0(a2, *(int *)(a1 + 28) >> 4, 8);
      sub_1B67C8FE0(a2, *(int *)(a1 + 32) >> 4, 8);
      v15 = *(unsigned __int8 *)(a1 + 186);
      v4 = v15 | (1 << *(_BYTE *)(a1 + 191));
      *(_BYTE *)(a1 + 186) = v15 | (1 << *(_BYTE *)(a1 + 191));
    }
    v16 = *(char *)(a1 + 190);
    if (v16 != -1 && v5 == v16)
    {
      sub_1B67C8FE0(a2, *(unsigned __int16 *)(a1 + 16), 16);
      v18 = *(unsigned __int8 *)(a1 + 186);
      v4 = v18 | (1 << *(_BYTE *)(a1 + 190));
      *(_BYTE *)(a1 + 186) = v18 | (1 << *(_BYTE *)(a1 + 190));
    }
    v19 = *(char *)(a1 + 193);
    if (v19 != -1 && v5 == v19)
    {
      v20 = (int)(float)((float)(*(float *)(a1 + 52) * 255.0) + 0.5);
      if (v20 >= 255)
        v20 = 255;
      sub_1B67C8FE0(a2, v20 & ~(v20 >> 31), 8);
      v21 = (int)(float)((float)(*(float *)(a1 + 56) * 255.0) + 0.5);
      if (v21 >= 255)
        v21 = 255;
      sub_1B67C8FE0(a2, v21 & ~(v21 >> 31), 8);
      v22 = (int)(float)((float)(*(float *)(a1 + 60) * 255.0) + 0.5);
      if (v22 >= 255)
        v22 = 255;
      sub_1B67C8FE0(a2, v22 & ~(v22 >> 31), 8);
      v23 = (int)(float)((float)(*(float *)(a1 + 64) * 255.0) + 0.5);
      if (v23 >= 255)
        v23 = 255;
      sub_1B67C8FE0(a2, v23 & ~(v23 >> 31), 8);
      v24 = *(unsigned __int8 *)(a1 + 186);
      v4 = v24 | (1 << *(_BYTE *)(a1 + 193));
      *(_BYTE *)(a1 + 186) = v24 | (1 << *(_BYTE *)(a1 + 193));
    }
    v25 = *(char *)(a1 + 194);
    if (v25 != -1 && v5 == v25)
    {
      sub_1B67C8FE0(a2, *(int *)(a1 + 68) >> 4, 8);
      sub_1B67C8FE0(a2, *(int *)(a1 + 72) >> 4, 8);
      sub_1B67C8FE0(a2, *(_DWORD *)(a1 + 76), 8);
      v26 = *(unsigned __int8 *)(a1 + 186);
      v4 = v26 | (1 << *(_BYTE *)(a1 + 194));
      *(_BYTE *)(a1 + 186) = v26 | (1 << *(_BYTE *)(a1 + 194));
    }
    if (*(unsigned __int8 *)(a1 + 187) != 255 && v5 == *(char *)(a1 + 199))
    {
      sub_1B67C8FE0(a2, *(unsigned __int8 *)(a1 + 102), 8);
      v27 = *(unsigned __int8 *)(a1 + 186);
      v4 = v27 | (1 << *(_BYTE *)(a1 + 199));
      *(_BYTE *)(a1 + 186) = v27 | (1 << *(_BYTE *)(a1 + 199));
    }
    ++v5;
  }
  while (v5 != 7);
  v28 = *(unsigned __int8 *)(a1 + 192);
  if (v28 != 255 && *(_BYTE *)(a1 + 80))
  {
    v4 |= 1 << v28;
    *(_BYTE *)(a1 + 186) = v4;
  }
  sub_1B67C8FE0(a2, v4, 8);
  return (v6 + 1);
}

uint64_t sub_1B685AE10(uint64_t a1, unsigned int a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 187) = -1;
  *(_WORD *)(a1 + 195) = -1;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 197) = -1;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  sub_1B685AE68(a1, a2, a3);
  sub_1B685B1E8((char *)a1);
  return *(unsigned int *)(a1 + 264);
}

uint64_t sub_1B685AE68(uint64_t result, unsigned int a2, uint64_t a3)
{
  _BYTE *v5;

  if (a3)
  {
    v5 = (_BYTE *)result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 128))(a3)) & 1) != 0)
    {
      v5[187] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 128))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 136))(a3)) & 1) != 0)
    {
      v5[188] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 136))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 160))(a3)) & 1) != 0)
    {
      v5[191] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 160))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3)) & 1) != 0)
    {
      v5[190] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 144))(a3)) & 1) != 0)
    {
      v5[189] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 144))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 176))(a3)) & 1) != 0)
    {
      v5[193] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 176))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 184))(a3)) & 1) != 0)
    {
      v5[194] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 184))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3))
      v5[192] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 168))(a3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 192))(a3)) & 1) != 0)
    {
      v5[195] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 192))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 80))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3)) & 1) != 0)
    {
      v5[196] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 88))(a3))
      v5[197] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 208))(a3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 216))(a3)) & 1) != 0)
    {
      v5[198] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 216))(a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3)
      && ((a2 >> (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 224))(a3)) & 1) != 0)
    {
      v5[199] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 224))(a3);
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
    if ((_DWORD)result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 232))(a3);
      if (((a2 >> result) & 1) != 0)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 232))(a3);
        v5[200] = result;
      }
    }
  }
  return result;
}

uint64_t sub_1B685B1E8(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;

  v2 = a1[187];
  if (v2 != -1)
    *(_DWORD *)&a1[4 * v2 + 204] = 2;
  v3 = a1[188];
  if (v3 != -1)
    *(_DWORD *)&a1[4 * v3 + 204] = 4;
  if ((*(unsigned int (**)(char *))(*(_QWORD *)a1 + 32))(a1))
    *(_DWORD *)&a1[4 * a1[191] + 204] = 4;
  if ((*(unsigned int (**)(char *))(*(_QWORD *)a1 + 24))(a1))
    *(_DWORD *)&a1[4 * a1[190] + 204] = 2;
  if ((*(unsigned int (**)(char *))(*(_QWORD *)a1 + 40))(a1))
    *(_DWORD *)&a1[4 * a1[189] + 204] = 1;
  if ((*(unsigned int (**)(char *))(*(_QWORD *)a1 + 56))(a1))
    *(_DWORD *)&a1[4 * a1[193] + 204] = 4;
  if ((*(unsigned int (**)(char *))(*(_QWORD *)a1 + 64))(a1))
    *(_DWORD *)&a1[4 * a1[194] + 204] = 3;
  if ((*(unsigned int (**)(char *))(*(_QWORD *)a1 + 72))(a1))
    *(_DWORD *)&a1[4 * a1[195] + 204] = 1;
  if ((*(unsigned int (**)(char *))(*(_QWORD *)a1 + 80))(a1))
    *(_DWORD *)&a1[4 * a1[196] + 204] = 8;
  if ((*(unsigned int (**)(char *))(*(_QWORD *)a1 + 96))(a1))
    *(_DWORD *)&a1[4 * a1[198] + 204] = 4;
  if ((*(unsigned int (**)(char *))(*(_QWORD *)a1 + 104))(a1))
    *(_DWORD *)&a1[4 * a1[199] + 204] = 1;
  result = (*(uint64_t (**)(char *))(*(_QWORD *)a1 + 112))(a1);
  if ((_DWORD)result)
    *(_DWORD *)&a1[4 * a1[200] + 204] = 8;
  v5 = 0;
  v6 = 0;
  *((_DWORD *)a1 + 59) = 0;
  do
  {
    v6 += *(_DWORD *)&a1[v5 + 204];
    *(_DWORD *)&a1[v5 + 240] = v6;
    v5 += 4;
  }
  while (v5 != 28);
  return result;
}

void sub_1B685B3C8(_QWORD *a1)
{
  sub_1B67EC644(a1);
  JUMPOUT(0x1BCC9814CLL);
}

BOOL sub_1B685B3EC(unsigned __int8 *a1)
{
  return a1[96] != 255
      || a1[98] != 255
      || a1[99] != 255
      || a1[100] != 255
      || a1[101] != 255
      || a1[103] != 255
      || a1[102] != 255
      || a1[97] != 255;
}

uint64_t sub_1B685B458(_BYTE *a1)
{
  BOOL v2;

  v2 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1)
    || a1[107] != 255
    || a1[106] != 255
    || a1[105] != 255
    || a1[108] != 255
    || a1[109] != 255;
  a1[33] = v2;
  return 0;
}

uint64_t sub_1B685B4D0(_BYTE *a1, char *a2, char a3)
{
  uint64_t result;

  result = sub_1B685B524(a1, a2, a3);
  if ((_DWORD)result)
  {
    result = strcmp(a2, "CF");
    if ((_DWORD)result)
      return 4294954386;
    else
      a1[103] = a3;
  }
  return result;
}

uint64_t sub_1B685B524(_BYTE *a1, char *__s1, char a3)
{
  uint64_t result;

  result = strcmp(__s1, "LR");
  if ((_DWORD)result)
  {
    result = strcmp(__s1, "EOD");
    if ((_DWORD)result)
    {
      result = strcmp(__s1, "RVRA1");
      if ((_DWORD)result)
      {
        result = strcmp(__s1, "VRAE");
        if ((_DWORD)result)
        {
          result = strcmp(__s1, "QS");
          if ((_DWORD)result)
          {
            result = strcmp(__s1, "CR");
            if ((_DWORD)result)
            {
              result = strcmp(__s1, "CH1");
              if ((_DWORD)result)
              {
                result = strcmp(__s1, "FA");
                if ((_DWORD)result)
                {
                  result = strcmp(__s1, "POS");
                  if ((_DWORD)result)
                  {
                    result = strcmp(__s1, "HTS");
                    if ((_DWORD)result)
                    {
                      result = strcmp(__s1, "RR");
                      if ((_DWORD)result)
                      {
                        result = strcmp(__s1, "SW");
                        if ((_DWORD)result)
                        {
                          result = strcmp(__s1, "QP");
                          if ((_DWORD)result)
                          {
                            result = strcmp(__s1, "MLS");
                            if ((_DWORD)result)
                              return 4294954386;
                            else
                              a1[111] = a3;
                          }
                          else
                          {
                            a1[108] = a3;
                          }
                        }
                        else
                        {
                          a1[109] = a3;
                        }
                      }
                      else
                      {
                        a1[107] = a3;
                      }
                    }
                    else
                    {
                      a1[105] = a3;
                    }
                  }
                  else
                  {
                    a1[102] = a3;
                  }
                }
                else
                {
                  a1[101] = a3;
                }
              }
              else
              {
                a1[99] = a3;
              }
            }
            else
            {
              a1[100] = a3;
            }
          }
          else
          {
            a1[98] = a3;
          }
        }
        else
        {
          a1[97] = a3;
        }
      }
      else
      {
        a1[96] = a3;
      }
    }
    else
    {
      a1[106] = a3;
    }
  }
  else
  {
    a1[110] = 1;
  }
  return result;
}

void sub_1B685B6E4(_QWORD *a1)
{
  sub_1B67EC644(a1);
  JUMPOUT(0x1BCC9814CLL);
}

BOOL sub_1B685B708(unsigned __int8 *a1)
{
  return a1[96] != 255
      || a1[98] != 255
      || a1[99] != 255
      || a1[100] != 255
      || a1[101] != 255
      || a1[102] != 255
      || a1[104] != 255;
}

uint64_t sub_1B685B768(_BYTE *a1)
{
  BOOL v2;

  v2 = (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 296))(a1)
    || a1[106] != 255
    || a1[107] != 255
    || a1[108] != 255
    || a1[109] != 255
    || a1[105] != 255;
  a1[33] = v2;
  return 0;
}

uint64_t sub_1B685B7E0(_BYTE *a1, char *a2, char a3)
{
  uint64_t result;

  result = sub_1B685B524(a1, a2, a3);
  if ((_DWORD)result)
  {
    result = strcmp(a2, "MS");
    if ((_DWORD)result)
    {
      result = strcmp(a2, "CABAC");
      if ((_DWORD)result)
      {
        result = strcmp(a2, "LTR");
        if ((_DWORD)result)
        {
          result = strcmp(a2, "RVRA");
          if ((_DWORD)result)
          {
            result = strcmp(a2, "PR");
            if ((_DWORD)result)
            {
              result = strcmp(a2, "CH");
              if ((_DWORD)result)
              {
                result = strcmp(a2, "AS");
                if ((_DWORD)result)
                  return 4294954386;
                else
                  a1[104] = a3;
              }
              else
              {
                a1[99] = a3;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

char *sub_1B685B8B4(char *__s1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  char *v9;
  uint64_t (**v10)();
  char *v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  int v16;
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!__s1 || strncmp(__s1, "FLBA;", 5uLL) && strncmp(__s1, "FLBN;", 5uLL) && strncmp(__s1, "FLS2;", 5uLL))
  {
    if ((_DWORD)a4 == 1)
    {
      v14 = (char *)operator new(0x70uLL, MEMORY[0x1E0DE4E10]);
      v9 = v14;
      if (v14)
      {
        *((_OWORD *)v14 + 4) = 0u;
        *((_OWORD *)v14 + 5) = 0u;
        *((_OWORD *)v14 + 2) = 0u;
        *((_OWORD *)v14 + 3) = 0u;
        *(_OWORD *)v14 = 0u;
        *((_OWORD *)v14 + 1) = 0u;
        *((_QWORD *)v14 + 12) = -1;
        *(_QWORD *)(v14 + 102) = -1;
        *((_WORD *)v14 + 55) = -256;
        v10 = off_1E6A15650;
        goto LABEL_16;
      }
    }
    else
    {
      if ((_DWORD)a4)
      {
        v9 = 0;
        goto LABEL_18;
      }
      v8 = (char *)operator new(0x70uLL, MEMORY[0x1E0DE4E10]);
      v9 = v8;
      if (v8)
      {
        *((_OWORD *)v8 + 4) = 0u;
        *((_OWORD *)v8 + 5) = 0u;
        *((_OWORD *)v8 + 2) = 0u;
        *((_OWORD *)v8 + 3) = 0u;
        *(_OWORD *)v8 = 0u;
        *((_OWORD *)v8 + 1) = 0u;
        *((_QWORD *)v8 + 12) = -1;
        *(_QWORD *)(v8 + 102) = -1;
        *((_WORD *)v8 + 55) = -256;
        v10 = off_1E6A157A0;
LABEL_16:
        *(_QWORD *)v9 = v10;
      }
    }
LABEL_18:
    if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v16 = 136446978;
      v17 = __s1;
      v18 = 1024;
      v19 = a2;
      v20 = 1024;
      v21 = a3;
      v22 = 1024;
      v23 = a4;
      v12 = MEMORY[0x1E0C81028];
      v13 = "NegotiationString is created based on %{public}s encoder %d usage %d codec_type %d \n";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v11 = (char *)operator new(0x80uLL, MEMORY[0x1E0DE4E10]);
  v9 = v11;
  if (v11)
  {
    *((_DWORD *)v11 + 9) = 0;
    *((_DWORD *)v11 + 10) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *((_QWORD *)v11 + 3) = 0;
    *((_WORD *)v11 + 16) = 0;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *(_QWORD *)v11 = off_1E6A15350;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 12) = 0;
    *((_QWORD *)v11 + 13) = 0;
  }
  if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v16 = 136446978;
    v17 = __s1;
    v18 = 1024;
    v19 = a2;
    v20 = 1024;
    v21 = a3;
    v22 = 1024;
    v23 = a4;
    v12 = MEMORY[0x1E0C81028];
    v13 = "NegotiationBitField is created based on %{public}s encoder %d usage %d codec_type %d \n";
LABEL_21:
    _os_log_impl(&dword_1B676B000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v16, 0x1Eu);
  }
LABEL_22:
  if (v9)
    (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 288))(v9, __s1, a2, a3, a4);
  return v9;
}

CFDataRef sub_1B685BB60(const std::string *__s)
{
  const std::string *v1;
  uint64_t v2;
  std::string::__raw *v3;
  uint64_t size;
  const std::string *v5;
  uint64_t v6;
  char *v7;
  std::string::__raw *v8;
  char *v9;
  CFDataRef v11;
  char *v13;
  std::string *v14;
  char *v15;
  char *v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::string::size_type v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  std::string v36;
  uint8_t buf[4];
  const std::string *v38;
  uint64_t v39;

  v1 = __s;
  v39 = *MEMORY[0x1E0C80C00];
  v2 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (std::string::__raw *)__s->__r_.__value_.__r.__words[0];
    size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    v3 = (std::string::__raw *)__s;
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  }
  if (size < 5)
    goto LABEL_5;
  v7 = (char *)v3 + size;
  v8 = v3;
  while (1)
  {
    if (size == 4)
      goto LABEL_5;
    v9 = (char *)memchr(v8, 70, size - 4);
    if (!v9)
      goto LABEL_5;
    if (*(_DWORD *)v9 == 1094863942 && v9[4] == 59)
      break;
    v8 = (std::string::__raw *)(v9 + 1);
    size = v7 - (char *)v8;
    if (v7 - (char *)v8 < 5)
      goto LABEL_5;
  }
  if (v9 == v7 || (v17 = (char *)(v9 - (char *)v3), v9 - (char *)v3 == -1))
  {
LABEL_5:
    if ((v2 & 0x80) != 0)
    {
      v5 = (const std::string *)v1->__r_.__value_.__r.__words[0];
      v6 = v1->__r_.__value_.__l.__size_;
    }
    else
    {
      v5 = v1;
      v6 = v2;
    }
    if (v6 >= 5)
    {
      v13 = (char *)v5 + v6;
      v14 = (std::string *)v5;
      do
      {
        if (v6 == 4)
          break;
        v15 = (char *)memchr(v14, 70, v6 - 4);
        if (!v15)
          break;
        if (*(_DWORD *)v15 == 1312967750 && v15[4] == 59)
        {
          if (v15 == v13)
            break;
          v17 = (char *)(v15 - (char *)v5);
          if (v15 - (char *)v5 == -1)
            break;
          goto LABEL_39;
        }
        v14 = (std::string *)(v15 + 1);
        v6 = v13 - (char *)v14;
      }
      while (v13 - (char *)v14 >= 5);
    }
    if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      if ((v2 & 0x80) != 0)
        v1 = (const std::string *)v1->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      v38 = v1;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Invalid FLB string %{public}s", buf, 0xCu);
    }
    return 0;
  }
  else
  {
LABEL_39:
    v18 = std::string::basic_string(&v36, v1, (std::string::size_type)(v17 + 5), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)buf);
    v24 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      v25 = v36.__r_.__value_.__l.__size_;
      if ((v36.__r_.__value_.__s.__data_[8] & 1) != 0)
      {
        v11 = 0;
LABEL_59:
        operator delete(v36.__r_.__value_.__l.__data_);
        return v11;
      }
    }
    else
    {
      if ((*((_BYTE *)&v36.__r_.__value_.__s + 23) & 1) != 0)
        return 0;
      v25 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    v26 = v25 >> 1;
    v27 = (v25 >> 1) + 7;
    v28 = (v27 >> 2) & 0x3FFFFFFFFFFFFFFELL;
    MEMORY[0x1E0C80A78](v18, v19, v20, v21, v22, v23);
    v29 = (char *)&v35 - ((v28 + 15) & 0x7FFFFFFFFFFFFFF0);
    bzero(v29, v28);
    if (v25 >= 2)
    {
      v30 = 0;
      if (v26 <= 1)
        v31 = 1;
      else
        v31 = v25 >> 1;
      v32 = &v36;
      if (v24 < 0)
        v32 = (std::string *)v36.__r_.__value_.__r.__words[0];
      do
      {
        if (v32->__r_.__value_.__s.__data_[v30] == 49)
          v29[v30 >> 3] |= 1 << (v30 & 7);
        ++v30;
      }
      while (v31 != v30);
      v33 = 0;
      v34 = (char *)v32 + v26;
      do
      {
        if (v34[v33] == 49)
          v29[(v27 >> 3) + (v33 >> 3)] |= 1 << (v33 & 7);
        ++v33;
      }
      while (v31 != v33);
    }
    v11 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&v35 - ((v28 + 15) & 0x7FFFFFFFFFFFFFF0), (v27 >> 2) & 0x3FFFFFFFFFFFFFFELL);
    if (v24 < 0)
      goto LABEL_59;
  }
  return v11;
}

void sub_1B685BEA8(_Unwind_Exception *exception_object)
{
  char v1;
  uint64_t v2;

  if (v1 < 0)
    operator delete(*(void **)(v2 - 120));
  _Unwind_Resume(exception_object);
}

const __CFData *sub_1B685BEC8(const __CFData *result, const char *a2, char *a3, int a4)
{
  const __CFData *v7;
  CFIndex Length;
  int v9;
  uint64_t i;
  uint64_t v11;
  char v12;

  if (result)
  {
    v7 = result;
    Length = CFDataGetLength(result);
    result = (const __CFData *)strlen(a2);
    if ((unint64_t)result + 8 * Length <= a4)
    {
      v9 = (int)result;
      strncpy(a3, a2, (size_t)result);
      result = (const __CFData *)CFDataGetBytePtr(v7);
      if (Length)
      {
        for (i = 0; i != Length; ++i)
        {
          v11 = 0;
          do
          {
            if (((*(unsigned __int8 *)result >> v11) & 1) != 0)
              v12 = 49;
            else
              v12 = 48;
            a3[v9 + v11++] = v12;
          }
          while ((_DWORD)v11 != 8);
          v9 += 8;
          result = (const __CFData *)((char *)result + 1);
        }
      }
      a3[v9] = 0;
    }
  }
  return result;
}

CFDataRef sub_1B685BF8C(char *__s)
{
  CFDataRef v1;
  std::string __p;
  std::string v4;

  if (!__s)
    return 0;
  sub_1B6781C7C(&v4, __s);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    sub_1B67EB704(&__p, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
  else
    __p = v4;
  v1 = sub_1B685BB60(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1B685C01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef sub_1B685C050(const __CFString *a1, const __CFString *a2)
{
  CFIndex Length;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  CFIndex v10;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  CFIndex v17;
  std::string::size_type size;
  void *v19;
  void *v20;
  char v21;
  std::string::size_type v22;
  void *v23;
  std::string::size_type v24;
  char v25;
  const char *v26;
  CFStringRef v27;
  std::string v29;
  void *v30[2];
  char v31;
  std::string v32;
  std::string v33;
  void *v34[2];
  _BYTE v35[7];
  char v36;
  std::string v37;
  _DWORD v38[2];
  _DWORD v39[2];
  std::string v40;
  std::string v41;
  std::string __dst;
  std::string __str;
  std::string v44;
  std::string v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(a1);
  v9 = (char *)&v29 - ((MEMORY[0x1E0C80A78](Length, v5, Length + 1, v6, v7, v8) + 16) & 0xFFFFFFFFFFFFFFF0);
  CFStringGetCString(a1, v9, v10, 0);
  v11 = CFStringGetLength(a2);
  v16 = (char *)&v29 - ((MEMORY[0x1E0C80A78](v11, v12, v11 + 1, v13, v14, v15) + 16) & 0xFFFFFFFFFFFFFFF0);
  CFStringGetCString(a2, v16, v17, 0);
  sub_1B6781C7C(&v45, v9);
  sub_1B6781C7C(&v44, v16);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    sub_1B67EB704(&__dst, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    __dst = v45;
  sub_1B67EB78C((std::string::size_type *)&__str, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    sub_1B67EB704(&v40, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v40 = v44;
  sub_1B67EB78C((std::string::size_type *)&v41, &v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  *(_DWORD *)((char *)v39 + 3) = 0;
  v39[0] = 0;
  *(_DWORD *)((char *)v38 + 3) = 0;
  v38[0] = 0;
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::basic_string(&v37, &__str, 5uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
    v20 = (void *)v37.__r_.__value_.__l.__size_;
    v19 = (void *)v37.__r_.__value_.__r.__words[0];
    v39[0] = v37.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v39 + 3) = *(_DWORD *)((char *)&v37.__r_.__value_.__r.__words[2] + 3);
    v21 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
  }
  v22 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v22 = v41.__r_.__value_.__l.__size_;
  if (v22)
  {
    std::string::basic_string(&v37, &v41, 5uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
    v24 = v37.__r_.__value_.__l.__size_;
    v23 = (void *)v37.__r_.__value_.__r.__words[0];
    v38[0] = v37.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v38 + 3) = *(_DWORD *)((char *)&v37.__r_.__value_.__r.__words[2] + 3);
    v25 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    if ((v21 & 0x80) == 0)
    {
LABEL_20:
      v34[0] = v19;
      v34[1] = v20;
      *(_DWORD *)v35 = v39[0];
      *(_DWORD *)&v35[3] = *(_DWORD *)((char *)v39 + 3);
      v36 = v21;
      goto LABEL_23;
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    if ((v21 & 0x80) == 0)
      goto LABEL_20;
  }
  sub_1B67EB704(v34, v19, (unint64_t)v20);
LABEL_23:
  if (v25 < 0)
  {
    sub_1B67EB704(&v33, v23, v24);
  }
  else
  {
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v33.__r_.__value_.__l.__size_ = v24;
    LODWORD(v33.__r_.__value_.__r.__words[2]) = v38[0];
    *(_DWORD *)((char *)&v33.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v38 + 3);
    *((_BYTE *)&v33.__r_.__value_.__s + 23) = v25;
  }
  sub_1B67EC014(&v37, (uint64_t)v34, &v33);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (v36 < 0)
    operator delete(v34[0]);
  std::operator+<char>();
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    sub_1B67EB704(&v29, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    v29 = v32;
  sub_1B67ED300((uint64_t)v30, &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v31 >= 0)
    v26 = (const char *)v30;
  else
    v26 = (const char *)v30[0];
  v27 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v26, 0);
  if (v31 < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v25 & 0x80) == 0)
      goto LABEL_44;
LABEL_55:
    operator delete(v23);
    if ((v21 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_56;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  if (v25 < 0)
    goto LABEL_55;
LABEL_44:
  if ((v21 & 0x80) == 0)
    goto LABEL_45;
LABEL_56:
  operator delete(v19);
LABEL_45:
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  return v27;
}

void sub_1B685C454(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v3;
  char v4;
  char v5;
  uint64_t v6;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*(void **)(v1 + 48));
  if (*(char *)(v1 + 143) < 0)
    operator delete(*(void **)(v1 + 120));
  if (v5 < 0)
    operator delete(v3);
  if (v4 < 0)
    operator delete(v2);
  if (*(char *)(v1 + 207) < 0)
    operator delete(*(void **)(v1 + 184));
  if (*(char *)(v6 - 137) < 0)
    operator delete(*(void **)(v6 - 160));
  if (*(char *)(v6 - 113) < 0)
    operator delete(*(void **)(v6 - 136));
  if (*(char *)(v6 - 89) < 0)
    operator delete(*(void **)(v6 - 112));
  _Unwind_Resume(exception_object);
}

CFDataRef sub_1B685C598(const __CFString *a1)
{
  CFIndex Length;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  CFIndex v8;
  int v9;
  CFDataRef v10;
  std::string __s;
  std::string __dst;
  std::string v14;
  std::string v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(a1);
  v7 = (char *)&__s - ((MEMORY[0x1E0C80A78](Length, v3, Length + 1, v4, v5, v6) + 16) & 0xFFFFFFFFFFFFFFF0);
  CFStringGetCString(a1, v7, v8, 0);
  sub_1B6781C7C(&v15, v7);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    sub_1B67EB704(&__dst, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    __dst = v15;
  sub_1B67EB78C((std::string::size_type *)&v14, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v9 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    sub_1B67EB704(&__s, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    __s = v14;
  v10 = sub_1B685BB60(&__s);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
      goto LABEL_11;
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
LABEL_11:
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1B685C6E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  operator delete(*(void **)(v1 - 72));
  if (*(char *)(v1 - 25) < 0)
    operator delete(*(void **)(v1 - 48));
  _Unwind_Resume(a1);
}

CFStringRef sub_1B685C744(const __CFData *a1)
{
  CFIndex Length;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  const char *v10;
  CFStringRef v11;
  std::string __dst;
  void *v14[2];
  char v15;
  std::string v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Length = CFDataGetLength(a1);
  MEMORY[0x1E0C80A78](Length, v3, v4, (8 * Length) | 6, v5, v6);
  v8 = (char *)&__dst - ((v7 + 21) & 0xFFFFFFFFFFFFFFF0);
  sub_1B685BEC8(a1, "FLBN;", v8, v9);
  sub_1B6781C7C(&v16, v8);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    sub_1B67EB704(&__dst, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    __dst = v16;
  sub_1B67ED300((uint64_t)v14, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v15 >= 0)
    v10 = (const char *)v14;
  else
    v10 = (const char *)v14[0];
  v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10, 0);
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1B685C87C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 25) < 0)
    operator delete(*(void **)(v1 - 48));
  _Unwind_Resume(exception_object);
}

char *sub_1B685C8CC(char *result)
{
  if (result)
  {
    if (result[32] && *((_DWORD *)result + 10) == 1)
    {
      result = (char *)operator new(0x120uLL, MEMORY[0x1E0DE4E10]);
      if (result)
      {
        *((_OWORD *)result + 16) = 0u;
        *((_OWORD *)result + 17) = 0u;
        *((_OWORD *)result + 14) = 0u;
        *((_OWORD *)result + 15) = 0u;
        *((_OWORD *)result + 12) = 0u;
        *((_OWORD *)result + 13) = 0u;
        *((_OWORD *)result + 10) = 0u;
        *((_OWORD *)result + 11) = 0u;
        *((_OWORD *)result + 8) = 0u;
        *((_OWORD *)result + 9) = 0u;
        *((_OWORD *)result + 6) = 0u;
        *((_OWORD *)result + 7) = 0u;
        *((_OWORD *)result + 4) = 0u;
        *((_OWORD *)result + 5) = 0u;
        *((_OWORD *)result + 2) = 0u;
        *((_OWORD *)result + 3) = 0u;
        *(_OWORD *)result = 0u;
        *((_OWORD *)result + 1) = 0u;
        *(_QWORD *)result = &off_1E6A152A0;
        *((_QWORD *)result + 25) = 0;
        *((_QWORD *)result + 26) = 0;
        *((_QWORD *)result + 24) = 0;
      }
    }
    else
    {
      result = (char *)operator new(0x110uLL, MEMORY[0x1E0DE4E10]);
      if (result)
      {
        *(_QWORD *)result = &off_1E6A15180;
        *((_QWORD *)result + 1) = 0;
        *((_WORD *)result + 8) = 0;
        *((_QWORD *)result + 11) = 0;
        result[96] = 0;
        *(_DWORD *)(result + 98) = 0;
        *(_QWORD *)(result + 28) = 0;
        *(_QWORD *)(result + 20) = 0;
        *(_QWORD *)(result + 52) = 0;
        *(_QWORD *)(result + 68) = 0;
        *(_QWORD *)(result + 60) = 0;
        *((_DWORD *)result + 19) = 0;
        *(_QWORD *)(result + 187) = -1;
        *(_WORD *)(result + 195) = -1;
        result[80] = 0;
        *(_DWORD *)(result + 197) = -1;
      }
    }
  }
  return result;
}

uint64_t sub_1B685C9A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  size_t v4;
  char v7;
  uint64_t v8;
  char v9;

  v3 = a3 - a2;
  v4 = a3 - a2 - 1;
  if (a3 - a2 < 1)
    return 0;
  v7 = *(_BYTE *)(a2 + a1 - 1);
  if (*(unsigned __int8 *)(a2 + a1 - 3) | *(unsigned __int8 *)(a2 + a1 - 2))
  {
    v9 = 0;
    v8 = a2;
  }
  else
  {
    *(_BYTE *)(a1 + a2) = 0;
    v8 = a2 + 1;
    v9 = 3;
  }
  *(_BYTE *)(a1 + a2 - 1) = v9;
  memset((void *)(a1 + v8), 128, v4);
  *(_BYTE *)(a1 + v8 + v4) = v7 | 0x80;
  return v3 - a2 + v8;
}

uint64_t sub_1B685CA48(_DWORD *a1, int a2, int a3, int a4)
{
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = a1[9];
  if (v4 <= a2 && a1[11] <= a3 && a4 - 1 + a2 <= a1[10] && a4 - 1 + a3 <= a1[12])
    return 2;
  v5 = a4 + a2 <= v4 || a1[10] < a2;
  v6 = a4 + a3 <= a1[11] || a1[12] < a3;
  return !v5 && !v6;
}

uint64_t sub_1B685CADC(uint64_t a1, uint64_t a2, int a3, OpaqueCMBlockBuffer *a4, _QWORD *a5, size_t *a6, _QWORD *a7, int a8)
{
  uint64_t result;
  int v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  size_t v26;
  size_t v27;
  uint64_t v29;
  uint64_t v30;
  size_t i;
  size_t *v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  size_t *v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  char temporaryBlock;
  size_t v43;
  size_t offsetIntoDestination;
  uint64_t v45;
  int v46;
  char v47;
  char *sourceBytes;
  char *returnedPointerOut[10];

  returnedPointerOut[8] = *(char **)MEMORY[0x1E0C80C00];
  offsetIntoDestination = 0;
  v45 = 0;
  v43 = 0;
  temporaryBlock = 0;
  result = sub_1B685CE28(a4, 4u, a3, &offsetIntoDestination, &v43, &v45);
  if (!(_DWORD)result)
  {
    returnedPointerOut[0] = 0;
    result = CMBlockBufferAccessDataBytes(a4, v43 - 1, 1uLL, &temporaryBlock, returnedPointerOut);
    if (!(_DWORD)result)
    {
      temporaryBlock = *returnedPointerOut[0];
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
      v17 = v43;
      v18 = offsetIntoDestination;
      sourceBytes = 0;
      result = CMBlockBufferAccessDataBytes(a4, v43 - 1, 1uLL, &v47, &sourceBytes);
      if (!(_DWORD)result)
      {
        v19 = v17 - v18 - 5;
        v40 = v19;
        if (*sourceBytes < 0)
        {
          v35 = v18;
          v37 = a6;
          v39 = v16;
          v29 = 5;
          if (v19 <= 5)
            v30 = 5;
          else
            v30 = v19;
          v34 = v30 - 4;
          for (i = v17 - 2; ; --i)
          {
            result = CMBlockBufferAccessDataBytes(a4, i, 1uLL, &v47, &sourceBytes);
            if ((_DWORD)result)
              break;
            if (v30 == v29)
            {
              v18 = v35;
              a6 = v37;
              v16 = v39;
              v20 = v34;
              goto LABEL_6;
            }
            if ((*sourceBytes & 0x80000000) == 0)
            {
              v20 = v29 - 4;
              v18 = v35;
              a6 = v37;
              v16 = v39;
              goto LABEL_6;
            }
            ++v29;
          }
        }
        else
        {
          v20 = 0;
LABEL_6:
          v21 = v20 + v16;
          if (v40 <= v21 + 4)
          {
            return 0xFFFFFFFFLL;
          }
          else
          {
            v38 = v16;
            v22 = v16 < 1;
            v23 = v16 - 1;
            v36 = v21;
            if (v22 || (v24 = v17 - v20, v25 = v17 - v20 - 4, v26 = v18 + 4, v25 < v18 + 4))
            {
              v41 = 0;
LABEL_29:
              if (v23 == -1)
              {
                v32 = a6;
                v33 = v36 + v41 + 1;
                if (!a8
                  || (LODWORD(sourceBytes) = bswap32(v45 - v33),
                      result = CMBlockBufferReplaceDataBytes(&sourceBytes, a4, offsetIntoDestination, 4uLL),
                      !(_DWORD)result))
                {
                  *a5 += v33;
                  *((_BYTE *)returnedPointerOut + v38) = temporaryBlock & 0x7F;
                  sourceBytes = 0;
                  result = (*(uint64_t (**)(uint64_t, char **, _QWORD, uint64_t, char **))(*(_QWORD *)a1 + 128))(a1, returnedPointerOut, v38 + 1, a2, &sourceBytes);
                  if (!(_DWORD)result)
                  {
                    if (sourceBytes == (char *)(v38 + 1))
                    {
                      if (a7)
                        *a7 = v43;
                      result = 0;
                      if (v32)
                        *v32 = offsetIntoDestination;
                    }
                    else
                    {
                      return 4294954385;
                    }
                  }
                }
              }
              else
              {
                return 4294954387;
              }
            }
            else
            {
              v41 = 0;
              v27 = v24 - 5;
              while (1)
              {
                v46 = 0;
                result = CMBlockBufferAccessDataBytes(a4, v27 + 1, 4uLL, &v46, &sourceBytes);
                if ((_DWORD)result)
                  break;
                if (*sourceBytes || sourceBytes[1] || sourceBytes[2] != 3)
                  *((_BYTE *)returnedPointerOut + v23--) = sourceBytes[2];
                else
                  ++v41;
                if ((v23 & 0x8000000000000000) == 0 && v27-- >= v26)
                  continue;
                goto LABEL_29;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B685CE28(OpaqueCMBlockBuffer *a1, unsigned int a2, int a3, size_t *a4, size_t *a5, _QWORD *a6)
{
  size_t DataLength;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t result;
  size_t *v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _BOOL4 v23;
  unsigned int v24;
  _QWORD *v25;
  uint8_t buf[16];
  char *returnedPointerOut;
  uint64_t temporaryBlock;

  DataLength = CMBlockBufferGetDataLength(a1);
  returnedPointerOut = 0;
  temporaryBlock = 0;
  v13 = (DataLength & 0xFFFFFFFF80000000) != 0 || DataLength < a2;
  if (v13)
    v14 = -12909;
  else
    v14 = 0;
  if (v13)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    result = 4294954387;
LABEL_12:
    v19 = a4;
    if (a4)
LABEL_13:
      *v19 = v16;
LABEL_14:
    if (a6)
      *a6 = v15;
    if (a5)
      *a5 = v17;
  }
  else
  {
    v20 = DataLength;
    v24 = v14;
    v25 = a6;
    v21 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    while (1)
    {
      result = CMBlockBufferAccessDataBytes(a1, v21, a2, &temporaryBlock, &returnedPointerOut);
      if ((_DWORD)result)
        break;
      switch(a2)
      {
        case 4u:
          v22 = bswap32(*(_DWORD *)returnedPointerOut);
          break;
        case 2u:
          v22 = bswap32(*(unsigned __int16 *)returnedPointerOut) >> 16;
          break;
        case 1u:
          v22 = *returnedPointerOut;
          break;
        default:
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "value of nalu_length_size should be 1, 2 or 4", buf, 2u);
          }
          v15 = 0;
          v16 = 0;
          v17 = 0;
          result = 4294954385;
          a6 = v25;
          goto LABEL_12;
      }
      temporaryBlock = v22;
      buf[0] = 0;
      result = CMBlockBufferAccessDataBytes(a1, v21 + a2, 1uLL, buf, &returnedPointerOut);
      if ((_DWORD)result)
        return result;
      v23 = (*returnedPointerOut & 0x1Fu) - 1 < 5;
      if (!a3)
        v23 = (*returnedPointerOut & 0x40) == 0;
      if (v23)
      {
        v15 = temporaryBlock;
        v16 = v21;
        v17 = temporaryBlock + v21 + a2;
      }
      if (temporaryBlock + v21 + 8 >= v20)
      {
        a6 = v25;
        v19 = a4;
        result = v24;
        if (a4)
          goto LABEL_13;
        goto LABEL_14;
      }
      v21 += a2 + temporaryBlock;
    }
  }
  return result;
}

uint64_t sub_1B685D040(uint64_t a1, int a2, int a3, unsigned int a4, int a5)
{
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, int, int, _QWORD *, _QWORD *);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD **);
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD **);
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD **);
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  char v23;
  uint64_t result;

  if (a3 == 8)
  {
    *(_QWORD *)(a1 + 312) = sub_1B685D2D8;
    *(_QWORD *)(a1 + 320) = sub_1B685D37C;
    *(_QWORD *)(a1 + 328) = sub_1B685D52C;
    v10 = 8;
    v11 = sub_1B685DB00;
    v12 = sub_1B685D9C4;
    v13 = sub_1B685D8FC;
    v14 = sub_1B685D84C;
    v15 = sub_1B685D7F8;
    v16 = sub_1B685D7AC;
  }
  else
  {
    if (a3 > 16)
      return 4294954386;
    *(_QWORD *)(a1 + 24) = sub_1B685DB8C;
    *(_QWORD *)(a1 + 32) = sub_1B685DB8C;
    *(_QWORD *)(a1 + 40) = sub_1B685DB8C;
    *(_QWORD *)(a1 + 48) = sub_1B685DB8C;
    *(_QWORD *)(a1 + 56) = sub_1B685DB8C;
    *(_QWORD *)(a1 + 64) = sub_1B685DBF4;
    *(_QWORD *)(a1 + 72) = sub_1B685DBF4;
    *(_QWORD *)(a1 + 80) = sub_1B685DBF4;
    *(_QWORD *)(a1 + 88) = sub_1B685DBF4;
    *(_QWORD *)(a1 + 96) = sub_1B685DBF4;
    *(_QWORD *)(a1 + 104) = sub_1B685DC60;
    *(_QWORD *)(a1 + 112) = sub_1B685DDB0;
    *(_QWORD *)(a1 + 120) = sub_1B685DF08;
    *(_QWORD *)(a1 + 128) = sub_1B685DFE4;
    *(_QWORD *)(a1 + 144) = sub_1B685DC60;
    *(_QWORD *)(a1 + 152) = sub_1B685DDB0;
    *(_QWORD *)(a1 + 184) = sub_1B685E0C0;
    *(_QWORD *)(a1 + 192) = sub_1B685E0C0;
    *(_QWORD *)(a1 + 200) = sub_1B685E0C0;
    *(_QWORD *)(a1 + 208) = sub_1B685E0C0;
    *(_QWORD *)(a1 + 216) = sub_1B685E12C;
    *(_QWORD *)(a1 + 224) = sub_1B685E12C;
    *(_QWORD *)(a1 + 232) = sub_1B685E12C;
    *(_QWORD *)(a1 + 240) = sub_1B685E12C;
    v11 = sub_1B685EAFC;
    *(_QWORD *)(a1 + 248) = sub_1B685E19C;
    *(_QWORD *)(a1 + 256) = sub_1B685E20C;
    *(_QWORD *)(a1 + 264) = sub_1B685E27C;
    v12 = sub_1B685E940;
    v13 = sub_1B685E814;
    *(_QWORD *)(a1 + 280) = sub_1B685E19C;
    *(_QWORD *)(a1 + 288) = sub_1B685E20C;
    v14 = sub_1B685E768;
    v15 = sub_1B685E710;
    *(_QWORD *)(a1 + 312) = sub_1B685E2EC;
    *(_QWORD *)(a1 + 320) = sub_1B685E3B8;
    v16 = sub_1B685E6CC;
    *(_QWORD *)(a1 + 328) = sub_1B685E500;
    v10 = a3;
  }
  *(_QWORD *)(a1 + 336) = v16;
  *(_QWORD *)(a1 + 344) = v15;
  *(_QWORD *)(a1 + 352) = v14;
  *(_QWORD *)(a1 + 360) = v13;
  *(_QWORD *)(a1 + 368) = v12;
  *(_QWORD *)(a1 + 376) = v11;
  sub_1B6880DF4((_QWORD *)a1, v10);
  if (a2 <= 7)
  {
    v17 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 112) = v17;
LABEL_9:
    *(_QWORD *)(a1 + 120) = v17;
    v18 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 256) = v18;
    goto LABEL_10;
  }
  if (a2 <= 0xF)
  {
    v17 = *(_QWORD *)(a1 + 112);
    goto LABEL_9;
  }
  if (a2 >= 0x20)
  {
    v17 = *(_QWORD *)(a1 + 128);
    v18 = *(_QWORD *)(a1 + 264);
    goto LABEL_11;
  }
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 256);
LABEL_10:
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 264) = v18;
LABEL_11:
  *(_QWORD *)(a1 + 136) = v17;
  *(_QWORD *)(a1 + 272) = v18;
  v19 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 160) = v19;
  *(_QWORD *)(a1 + 168) = v19;
  *(_QWORD *)(a1 + 176) = v19;
  v20 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 296) = v20;
  *(_QWORD *)(a1 + 304) = v20;
  if (a4)
    v21 = 1;
  else
    v21 = a5 < 3;
  v22 = v21;
  *(_BYTE *)(a1 + 20) = v22;
  v23 = a5 - (a5 > 0);
  if (v23 == 3 && a3 == 10)
    v23 = 4;
  *(_BYTE *)(a1 + 22) = v23;
  *(_BYTE *)(a1 + 21) = v23;
  if (a4 <= 0x2B && ((1 << a4) & 0x88000000002) != 0 && v23 == 2)
    *(_WORD *)(a1 + 21) = 1;
  result = 0;
  *(_BYTE *)(a1 + 23) = a3 == 10;
  return result;
}

uint64_t sub_1B685D2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v10;
  __n128 v11;
  uint8x8_t v12;
  uint64_t v13;
  _DWORD *v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t result;

  v10 = sub_1B685F65C(a1, a2, a3, a4);
  v13 = 0;
  *a5 = v10;
  v14 = a5 + 1;
  v15 = 1;
  do
  {
    v16 = 0;
    v17 = v15;
    v18 = a1 + v13 * a2;
    v19 = 1;
    v20 = a3 + v13 * a4;
    do
    {
      v21 = v19;
      result = sub_1B685F708((unsigned __int32 *)(v18 + v16), a2, (__int32 *)(v20 + v16), a4, v11, v12);
      v19 = 0;
      *v14++ = result;
      v16 = 4;
    }
    while ((v21 & 1) != 0);
    v15 = 0;
    v13 = 4;
  }
  while ((v17 & 1) != 0);
  return result;
}

uint64_t sub_1B685D37C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8x8_t *v11;
  uint8x8_t *v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  int v26;
  __n128 v27;
  uint8x8_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t result;
  unint64_t v32;
  BOOL v33;
  _QWORD v34[2];
  int v35[4096];
  uint64_t v36;

  v0 = MEMORY[0x1E0C80A78]();
  v4 = v3;
  v5 = v2;
  v7 = v6;
  v8 = v1;
  v9 = v0;
  v10 = 0;
  v36 = *MEMORY[0x1E0C80C00];
  v34[0] = 0;
  v34[1] = 0;
  v11 = (uint8x8_t *)v0;
  v12 = v6;
  do
  {
    v13 = (int16x8_t)vsubl_u8(*v11, *v12);
    v14 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v11->i8, *(uint8x16_t *)v12->i8);
    v15 = (int32x4_t *)&v35[v10];
    v15[2] = vmovl_s16(*(int16x4_t *)v14.i8);
    v15[3] = vmovl_high_s16(v14);
    *v15 = vmovl_s16(*(int16x4_t *)v13.i8);
    v15[1] = vmovl_high_s16(v13);
    v11 = (uint8x8_t *)((char *)v11 + v1);
    v12 = (uint8x8_t *)((char *)v12 + v2);
    v10 += 64;
  }
  while (v10 != 1024);
  v16 = sub_1B685EC6C(16, 16, v35, 0x10u, v34, 0);
  v17 = 0;
  *v4 = v16;
  v18 = v4 + 1;
  v19 = 1;
  do
  {
    v20 = 0;
    v21 = v19;
    v22 = v9 + v17 * v8;
    v23 = 1;
    v24 = (uint64_t)v7 + v17 * v5;
    do
    {
      v25 = v23;
      v26 = sub_1B685F65C(v22 + v20, v8, v24 + v20, v5);
      v23 = 0;
      *v18++ = v26;
      v20 = 8;
    }
    while ((v25 & 1) != 0);
    v19 = 0;
    v17 = 8;
  }
  while ((v21 & 1) != 0);
  v29 = 0;
  do
  {
    v30 = 0;
    do
    {
      result = sub_1B685F708((unsigned __int32 *)(v9 + v30 * 4), v8, (__int32 *)((char *)v7 + v30 * 4), v5, v27, v28);
      v18[v30] = result;
      v32 = v30 * 4 + 4;
      v33 = v30++ >= 3;
    }
    while (!v33);
    v18 = (_DWORD *)((char *)v18 + v32);
    v7 = (uint8x8_t *)((char *)v7 + 4 * v5);
    v9 += 4 * v8;
    v33 = v29 >= 0xC;
    v29 += 4;
  }
  while (!v33);
  return result;
}

uint64_t sub_1B685D52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t *v15;
  uint8x16_t v16;
  uint8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint8x8_t *v31;
  uint8x8_t *v32;
  int16x8_t v33;
  int16x8_t v34;
  int32x4_t *v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __n128 v41;
  uint8x8_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t result;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50[4096];
  uint64_t v51;

  v0 = MEMORY[0x1E0C80A78]();
  v4 = v3;
  v5 = v2;
  v7 = v6;
  v8 = v1;
  v9 = v0;
  v10 = 0;
  v51 = *MEMORY[0x1E0C80C00];
  v48 = 0;
  v49 = 0;
  v11 = v50;
  v12 = v0;
  v13 = v6;
  do
  {
    v14 = 0;
    v15 = (int32x4_t *)v11;
    do
    {
      v16 = *(uint8x16_t *)(v12 + v14);
      v17 = *(uint8x16_t *)(v13 + v14);
      v18 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v16.i8, *(uint8x8_t *)v17.i8);
      v19 = (int16x8_t)vsubl_high_u8(v16, v17);
      v15[2] = vmovl_s16(*(int16x4_t *)v19.i8);
      v15[3] = vmovl_high_s16(v19);
      *v15 = vmovl_s16(*(int16x4_t *)v18.i8);
      v15[1] = vmovl_high_s16(v18);
      v15 += 4;
      v14 += 16;
    }
    while (v14 != 32);
    ++v10;
    v12 += v1;
    v13 += v2;
    v11 += 64;
  }
  while (v10 != 32);
  v20 = sub_1B685EC6C(32, 32, v50, 0x20u, &v48, 0);
  v21 = 0;
  *v4 = v20;
  v22 = v4 + 1;
  v23 = 1;
  do
  {
    v24 = 0;
    v25 = v23;
    v26 = v9 + v21 * v8;
    v27 = 1;
    v28 = v7 + v21 * v5;
    do
    {
      v29 = 0;
      v30 = v27;
      v31 = (uint8x8_t *)(v26 + v24);
      v32 = (uint8x8_t *)(v28 + v24);
      v48 = 0;
      v49 = 0;
      do
      {
        v33 = (int16x8_t)vsubl_u8(*v31, *v32);
        v34 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v31->i8, *(uint8x16_t *)v32->i8);
        v35 = (int32x4_t *)&v50[v29];
        v35[2] = vmovl_s16(*(int16x4_t *)v34.i8);
        v35[3] = vmovl_high_s16(v34);
        *v35 = vmovl_s16(*(int16x4_t *)v33.i8);
        v35[1] = vmovl_high_s16(v33);
        v31 = (uint8x8_t *)((char *)v31 + v8);
        v32 = (uint8x8_t *)((char *)v32 + v5);
        v29 += 64;
      }
      while (v29 != 1024);
      v36 = sub_1B685EC6C(16, 16, v50, 0x10u, &v48, 0);
      v27 = 0;
      *v22++ = v36;
      v24 = 16;
    }
    while ((v30 & 1) != 0);
    v23 = 0;
    v21 = 16;
  }
  while ((v25 & 1) != 0);
  v37 = 0;
  v38 = v9;
  v39 = v7;
  do
  {
    v40 = 0;
    do
    {
      *v22++ = sub_1B685F65C(v38 + v40, v8, v39 + v40, v5);
      v43 = v40 >= 0x18;
      v40 += 8;
    }
    while (!v43);
    v39 += 8 * v5;
    v38 += 8 * v8;
    v43 = v37 >= 0x18;
    v37 += 8;
  }
  while (!v43);
  v44 = 0;
  do
  {
    v45 = 0;
    do
    {
      result = sub_1B685F708((unsigned __int32 *)(v9 + v45 * 4), v8, (__int32 *)(v7 + v45 * 4), v5, v41, v42);
      v22[v45] = result;
      v47 = v45 * 4 + 4;
      v43 = v45++ >= 7;
    }
    while (!v43);
    v22 = (_DWORD *)((char *)v22 + v47);
    v7 += 4 * v5;
    v9 += 4 * v8;
    v43 = v44 >= 0x1C;
    v44 += 4;
  }
  while (!v43);
  return result;
}

float sub_1B685D7AC(unsigned __int32 *a1, uint64_t a2, unsigned __int32 *a3, uint64_t a4, double a5, uint32x4_t a6, uint32x4_t a7)
{
  float v7;
  int v8;
  float result;

  v7 = 0.0;
  v8 = 4;
  do
  {
    a6.i32[0] = *a1;
    a6 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8));
    a7.i32[0] = *a3;
    a7 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a7.i8));
    result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vabaq_u32((uint32x4_t)LODWORD(v7), a6, a7)));
    v7 = result;
    a1 = (unsigned __int32 *)((char *)a1 + a2);
    a3 = (unsigned __int32 *)((char *)a3 + a4);
    --v8;
  }
  while (v8);
  return result;
}

uint64_t sub_1B685D7F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v5;
  int v6;
  uint64_t i;
  int v8;
  _DWORD *v9;

  v5 = result;
  v6 = 0;
  LODWORD(result) = 0;
  do
  {
    for (i = 0; i != 8; ++i)
    {
      v8 = *(unsigned __int8 *)(v5 + i) - *(unsigned __int8 *)(a3 + i);
      if (v8 < 0)
        v8 = *(unsigned __int8 *)(a3 + i) - *(unsigned __int8 *)(v5 + i);
      result = (v8 + result);
    }
    ++v6;
    v5 += a2;
    a3 += a4;
  }
  while (v6 != 8);
  v9 = *a5;
  *v9 = result;
  *a5 = v9 + 1;
  return result;
}

uint64_t sub_1B685D84C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  int v21;

  v5 = result;
  v6 = 0;
  LODWORD(result) = 0;
  v7 = *a5;
  v8 = *a5 + 1;
  *a5 = v8;
  v9 = 1;
  do
  {
    v10 = 0;
    v11 = v9;
    v12 = v5 + v6 * a2;
    v13 = 1;
    v14 = a3 + v6 * a4;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v13;
      v18 = v12 + v10;
      v19 = v14 + v10;
      do
      {
        for (i = 0; i != 8; ++i)
        {
          v21 = *(unsigned __int8 *)(v18 + i) - *(unsigned __int8 *)(v19 + i);
          if (v21 < 0)
            v21 = *(unsigned __int8 *)(v19 + i) - *(unsigned __int8 *)(v18 + i);
          v16 += v21;
        }
        ++v15;
        v18 += a2;
        v19 += a4;
      }
      while (v15 != 8);
      v13 = 0;
      *v8++ = v16;
      *a5 = v8;
      result = (v16 + result);
      v10 = 8;
    }
    while ((v17 & 1) != 0);
    v9 = 0;
    v6 = 8;
  }
  while ((v11 & 1) != 0);
  *v7 = result;
  return result;
}

uint64_t sub_1B685D8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  int v19;
  _DWORD *v21;

  v10 = 0;
  LODWORD(v11) = 0;
  v21 = (*a5)++;
  v12 = 1;
  do
  {
    v13 = 0;
    v14 = v12;
    v15 = a1 + v10 * a2;
    v16 = 1;
    v17 = a3 + v10 * a4;
    do
    {
      v18 = v16;
      v19 = sub_1B685D84C(v15 + v13, a2, v17 + v13, a4, a5);
      v16 = 0;
      v11 = (v19 + v11);
      v13 = 16;
    }
    while ((v18 & 1) != 0);
    v12 = 0;
    v10 = 16;
  }
  while ((v14 & 1) != 0);
  *v21 = v11;
  return v11;
}

uint64_t sub_1B685D9C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD **a5)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  char v31;
  int v32;

  v25 = result;
  v8 = 0;
  LODWORD(result) = 0;
  v24 = (*a5)++;
  v9 = 1;
  do
  {
    v10 = 0;
    v27 = v9;
    v29 = v25 + v8 * a2;
    v11 = 1;
    v28 = a3 + v8 * a4;
    do
    {
      v31 = v11;
      v32 = result;
      v12 = 0;
      v13 = 0;
      v14 = v29 + v10;
      v15 = v28 + v10;
      v30 = (*a5)++;
      v16 = 1;
      do
      {
        v17 = 0;
        v18 = v16;
        v19 = v14 + v12 * a2;
        v20 = 1;
        v21 = v15 + v12 * a4;
        do
        {
          v22 = v20;
          v23 = sub_1B685D84C(v19 + v17, a2, v21 + v17, a4, a5);
          v20 = 0;
          v13 += v23;
          v17 = 16;
        }
        while ((v22 & 1) != 0);
        v16 = 0;
        v12 = 16;
      }
      while ((v18 & 1) != 0);
      v11 = 0;
      *v30 = v13;
      result = (v13 + v32);
      v10 = 32;
    }
    while ((v31 & 1) != 0);
    v9 = 0;
    v8 = 32;
  }
  while ((v27 & 1) != 0);
  *v24 = result;
  return result;
}

uint64_t sub_1B685DB00(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, _QWORD *a7, _QWORD *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a6 < 1)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      if (a5 >= 1)
      {
        v11 = 0;
        do
        {
          v12 = *(unsigned __int8 *)(result + v11 + 1) - *(unsigned __int8 *)(a3 + v11 + 1);
          v10 += (*(unsigned __int8 *)(result + v11) - *(unsigned __int8 *)(a3 + v11))
               * (*(unsigned __int8 *)(result + v11) - *(unsigned __int8 *)(a3 + v11));
          v9 += (v12 * v12);
          v11 += 2;
        }
        while (2 * a5 != v11);
      }
      ++v8;
      result += a2;
      a3 += a4;
    }
    while (v8 != a6);
  }
  *a7 = v10;
  *a8 = v9;
  return result;
}

uint64_t sub_1B685DB8C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  int v10;

  if (a2 < 1)
    return 0;
  v7 = 0;
  result = 0;
  do
  {
    if (a1 >= 1)
    {
      v9 = 0;
      do
      {
        v10 = *(unsigned __int16 *)(a3 + v9) - *(unsigned __int16 *)(a5 + v9);
        result = (result + v10 * v10);
        v9 += 2;
      }
      while (2 * a1 != v9);
    }
    ++v7;
    a5 += 2 * a6;
    a3 += 2 * a4;
  }
  while (v7 != a2);
  return result;
}

uint64_t sub_1B685DBF4(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  int v10;

  if (a2 < 1)
    return 0;
  v7 = 0;
  result = 0;
  do
  {
    if (a1 >= 1)
    {
      v9 = 0;
      do
      {
        v10 = *(unsigned __int16 *)(a3 + v9) - *(unsigned __int16 *)(a5 + v9);
        if (v10 < 0)
          v10 = *(unsigned __int16 *)(a5 + v9) - *(unsigned __int16 *)(a3 + v9);
        result = (v10 + result);
        v9 += 2;
      }
      while (2 * a1 != v9);
    }
    ++v7;
    a5 += 2 * a6;
    a3 += 2 * a4;
  }
  while (v7 != a2);
  return result;
}

uint64_t sub_1B685DC60(int a1, int a2, uint16x4_t *a3, uint64_t a4, uint16x4_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint16x4_t *v14;
  uint64_t v15;
  uint16x4_t *v16;
  uint16x4_t *v17;
  uint64_t v19;
  uint64_t v20;
  uint16x4_t *v22;
  _BYTE v23[64];
  _BYTE v24[64];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2 < 1)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 2 * a4;
  v19 = a6;
  v20 = 8 * a4;
  v12 = 2 * a6;
  do
  {
    v22 = a5;
    if (a1 >= 1)
    {
      v13 = 0;
      v14 = a3;
      do
      {
        v15 = 0;
        v16 = a5;
        v17 = v14;
        do
        {
          *(uint32x4_t *)&v23[v15] = vsubl_u16(*v17, *v16);
          v15 += 16;
          v17 = (uint16x4_t *)((char *)v17 + v11);
          v16 = (uint16x4_t *)((char *)v16 + v12);
        }
        while (v15 != 64);
        sub_1B685F4D0((uint64_t)v23, (uint64_t)v24);
        sub_1B685F4D0((uint64_t)v24, (uint64_t)v23);
        v10 = sub_1B685F540((uint64_t)v23) + v10;
        v13 += 4;
        ++v14;
        ++a5;
      }
      while ((int)v13 < a1);
    }
    v9 += 4;
    a3 = (uint16x4_t *)((char *)a3 + v20);
    a5 = &v22[v19];
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1B685DDB0(int a1, int a2, uint16x8_t *a3, uint64_t a4, uint16x8_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint16x8_t *v14;
  uint64_t v15;
  uint16x8_t *v16;
  uint16x8_t *v17;
  uint32x4_t v18;
  uint32x4_t *v19;
  uint64_t v21;
  uint64_t v22;
  uint16x8_t *v24;
  _BYTE v25[256];
  _BYTE v26[256];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a2 < 1)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 2 * a4;
  v21 = a6;
  v22 = 16 * a4;
  v12 = 2 * a6;
  do
  {
    v24 = a5;
    if (a1 >= 1)
    {
      v13 = 0;
      v14 = a3;
      do
      {
        v15 = 0;
        v16 = a5;
        v17 = v14;
        do
        {
          v18 = vsubl_high_u16(*v17, *v16);
          v19 = (uint32x4_t *)&v25[v15];
          *v19 = vsubl_u16(*(uint16x4_t *)v17->i8, *(uint16x4_t *)v16->i8);
          v19[1] = v18;
          v15 += 32;
          v17 = (uint16x8_t *)((char *)v17 + v11);
          v16 = (uint16x8_t *)((char *)v16 + v12);
        }
        while (v15 != 256);
        sub_1B685F160((uint64_t)v25, (uint64_t)v26);
        sub_1B685F160((uint64_t)v26, (uint64_t)v25);
        v10 = sub_1B685F240((uint64_t)v25) + v10;
        v13 += 8;
        ++v14;
        ++a5;
      }
      while ((int)v13 < a1);
    }
    v9 += 8;
    a3 = (uint16x8_t *)((char *)a3 + v22);
    a5 = &v24[v21];
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1B685DF08()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t i;
  _QWORD v10[2];
  int v11[4096];
  uint64_t v12;

  v0 = MEMORY[0x1E0C80A78]();
  v12 = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v10[1] = 0;
  if (v1 >= 1)
  {
    v6 = 0;
    v7 = v11;
    do
    {
      if (v0 >= 1)
      {
        for (i = 0; i != v0; ++i)
          v7[i] = *(unsigned __int16 *)(v2 + 2 * i) - *(unsigned __int16 *)(v4 + 2 * i);
      }
      ++v6;
      v7 += 64;
      v4 += 2 * v5;
      v2 += 2 * v3;
    }
    while (v6 != v1);
  }
  return sub_1B685EC6C(v0, v1, v11, 0x10u, v10, 1);
}

uint64_t sub_1B685DFE4()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t i;
  _QWORD v10[2];
  int v11[4096];
  uint64_t v12;

  v0 = MEMORY[0x1E0C80A78]();
  v12 = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v10[1] = 0;
  if (v1 >= 1)
  {
    v6 = 0;
    v7 = v11;
    do
    {
      if (v0 >= 1)
      {
        for (i = 0; i != v0; ++i)
          v7[i] = *(unsigned __int16 *)(v2 + 2 * i) - *(unsigned __int16 *)(v4 + 2 * i);
      }
      ++v6;
      v7 += 64;
      v4 += 2 * v5;
      v2 += 2 * v3;
    }
    while (v6 != v1);
  }
  return sub_1B685EC6C(v0, v1, v11, 0x20u, v10, 1);
}

uint64_t sub_1B685E0C0(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  int v10;

  if (a2 < 1)
    return 0;
  v7 = 0;
  result = 0;
  do
  {
    if (a1 >= 1)
    {
      v9 = 0;
      do
      {
        v10 = *(unsigned __int16 *)(a3 + v9) - *(unsigned __int16 *)(a5 + v9);
        result = (result + v10 * v10);
        v9 += 2;
      }
      while (2 * (2 * a1) != v9);
    }
    ++v7;
    a5 += 2 * a6;
    a3 += 2 * a4;
  }
  while (v7 != a2);
  return result;
}

uint64_t sub_1B685E12C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  int v10;

  if (a2 < 1)
    return 0;
  v7 = 0;
  result = 0;
  do
  {
    if (a1 >= 1)
    {
      v9 = 0;
      do
      {
        v10 = *(unsigned __int16 *)(a3 + v9) - *(unsigned __int16 *)(a5 + v9);
        if (v10 < 0)
          v10 = *(unsigned __int16 *)(a5 + v9) - *(unsigned __int16 *)(a3 + v9);
        result = (v10 + result);
        v9 += 2;
      }
      while (2 * (2 * a1) != v9);
    }
    ++v7;
    a5 += 2 * a6;
    a3 += 2 * a4;
  }
  while (v7 != a2);
  return result;
}

uint64_t sub_1B685E19C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;

  v12 = sub_1B685F370(a1, a2, a3, a4, a5, a6);
  return sub_1B685F370(a1, a2, a3 + 2, a4, a5 + 2, a6) + v12;
}

uint64_t sub_1B685E20C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;

  v12 = sub_1B685F000(a1, a2, a3, a4, a5, a6);
  return sub_1B685F000(a1, a2, a3 + 2, a4, a5 + 2, a6) + v12;
}

uint64_t sub_1B685E27C()
{
  int v0;

  v0 = sub_1B685EB90();
  return sub_1B685EB90() + v0;
}

uint64_t sub_1B685E2EC(uint16x8_t *a1, uint64_t a2, uint16x8_t *a3, uint64_t a4, _DWORD *a5)
{
  int v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  uint64_t v14;
  char v15;
  __int8 *v16;
  __int8 *v17;
  char v18;
  char v19;
  uint64_t result;

  v10 = sub_1B685DDB0(8, 8, a1, a2, a3, a4);
  v11 = 0;
  *a5 = v10;
  v12 = a5 + 1;
  v13 = 1;
  do
  {
    v14 = 0;
    v15 = v13;
    v16 = &a1->i8[2 * v11 * a2];
    v17 = &a3->i8[2 * v11 * a4];
    v18 = 1;
    do
    {
      v19 = v18;
      result = sub_1B685DC60(4, 4, (uint16x4_t *)&v16[2 * v14], a2, (uint16x4_t *)&v17[2 * v14], a4);
      v18 = 0;
      *v12++ = result;
      v14 = 4;
    }
    while ((v19 & 1) != 0);
    v13 = 0;
    v11 = 4;
  }
  while ((v15 & 1) != 0);
  return result;
}

uint64_t sub_1B685E3B8(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4, _DWORD *a5)
{
  int v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  uint64_t v14;
  char v15;
  char *v16;
  char *v17;
  char v18;
  char v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint16x4_t *v23;
  uint16x4_t *v24;
  uint64_t result;
  unint64_t v26;
  BOOL v27;

  v10 = sub_1B685DF08();
  v11 = 0;
  *a5 = v10;
  v12 = a5 + 1;
  v13 = 1;
  do
  {
    v14 = 0;
    v15 = v13;
    v16 = (char *)a1 + 2 * v11 * a2;
    v17 = (char *)a3 + 2 * v11 * a4;
    v18 = 1;
    do
    {
      v19 = v18;
      v20 = sub_1B685DDB0(8, 8, (uint16x8_t *)&v16[2 * v14], a2, (uint16x8_t *)&v17[2 * v14], a4);
      v18 = 0;
      *v12++ = v20;
      v14 = 8;
    }
    while ((v19 & 1) != 0);
    v13 = 0;
    v11 = 8;
  }
  while ((v15 & 1) != 0);
  v21 = 0;
  do
  {
    v22 = 0;
    v23 = a1;
    v24 = a3;
    do
    {
      result = sub_1B685DC60(4, 4, v23, a2, v24, a4);
      v12[v22] = result;
      v26 = v22 * 4 + 4;
      ++v24;
      ++v23;
      v27 = v22++ >= 3;
    }
    while (!v27);
    v12 = (_DWORD *)((char *)v12 + v26);
    a3 += a4;
    a1 += a2;
    v27 = v21 >= 0xC;
    v21 += 4;
  }
  while (!v27);
  return result;
}

uint64_t sub_1B685E500(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4, _DWORD *a5)
{
  _DWORD *v10;
  char v11;
  char v12;
  char v13;
  char v14;
  int v15;
  unint64_t v16;
  uint16x8_t *v17;
  uint16x8_t *v18;
  unint64_t v19;
  uint16x8_t *v20;
  uint16x8_t *v21;
  BOOL v22;
  unint64_t v23;
  uint16x4_t *v24;
  unint64_t v25;
  uint16x4_t *v26;
  uint16x4_t *v27;
  uint64_t result;
  unint64_t v29;
  uint16x4_t *v30;

  *a5 = sub_1B685DFE4();
  v10 = a5 + 1;
  v11 = 1;
  do
  {
    v12 = v11;
    v13 = 1;
    do
    {
      v14 = v13;
      v15 = sub_1B685DF08();
      v13 = 0;
      *v10++ = v15;
    }
    while ((v14 & 1) != 0);
    v11 = 0;
  }
  while ((v12 & 1) != 0);
  v16 = 0;
  v17 = (uint16x8_t *)a1;
  v30 = a3;
  v18 = (uint16x8_t *)a3;
  do
  {
    v19 = -8;
    v20 = v17;
    v21 = v18;
    do
    {
      *v10++ = sub_1B685DDB0(8, 8, v20, a2, v21, a4);
      v19 += 8;
      ++v21;
      ++v20;
    }
    while (v19 < 0x18);
    v18 += a4;
    v17 += a2;
    v22 = v16 >= 0x18;
    v16 += 8;
  }
  while (!v22);
  v23 = 0;
  v24 = v30;
  do
  {
    v25 = 0;
    v26 = a1;
    v27 = v24;
    do
    {
      result = sub_1B685DC60(4, 4, v26, a2, v24, a4);
      v10[v25] = result;
      v29 = v25 * 4 + 4;
      ++v24;
      ++v26;
      v22 = v25++ >= 7;
    }
    while (!v22);
    v10 = (_DWORD *)((char *)v10 + v29);
    v24 = &v27[a4];
    a1 += a2;
    v22 = v23 >= 0x1C;
    v23 += 4;
  }
  while (!v22);
  return result;
}

float sub_1B685E6CC(uint16x4_t *a1, uint64_t a2, uint16x4_t *a3, uint64_t a4)
{
  float v4;
  int v5;
  float result;

  v4 = 0.0;
  v5 = 4;
  do
  {
    result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vabal_u16((uint32x4_t)LODWORD(v4), *a1, *a3)));
    v4 = result;
    a3 = (uint16x4_t *)((char *)a3 + 2 * a4);
    a1 = (uint16x4_t *)((char *)a1 + 2 * a2);
    --v5;
  }
  while (v5);
  return result;
}

float sub_1B685E710(uint16x8_t *a1, uint64_t a2, uint16x8_t *a3, uint64_t a4, float **a5)
{
  float v5;
  int v6;
  uint16x8_t v7;
  float result;
  float *v9;

  v5 = 0.0;
  v6 = 8;
  do
  {
    v7 = vabdq_u16(*a1, *a3);
    result = COERCE_FLOAT(vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)LODWORD(v5), *(uint16x4_t *)v7.i8), v7)));
    v5 = result;
    a3 = (uint16x8_t *)((char *)a3 + 2 * a4);
    a1 = (uint16x8_t *)((char *)a1 + 2 * a2);
    --v6;
  }
  while (v6);
  v9 = *a5;
  *v9 = result;
  *a5 = v9 + 1;
  return result;
}

uint64_t sub_1B685E768(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  char v16;
  uint16x8_t *v17;
  uint16x8_t *v18;
  uint16x8_t v19;

  v5 = result;
  v6 = 0;
  LODWORD(result) = 0;
  v7 = *a5;
  v8 = *a5 + 1;
  v9 = 1;
  do
  {
    v10 = 0;
    v11 = v9;
    v12 = v5 + 2 * v6 * a2;
    v13 = a3 + 2 * v6 * a4;
    LOBYTE(v14) = 1;
    do
    {
      v15 = 0;
      v16 = v14;
      v14 = 8;
      v17 = (uint16x8_t *)(v12 + 2 * v10);
      v18 = (uint16x8_t *)(v13 + 2 * v10);
      do
      {
        v19 = vabdq_u16(*v17, *v18);
        v15 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v19.i8), v19));
        v18 = (uint16x8_t *)((char *)v18 + 2 * a4);
        v17 = (uint16x8_t *)((char *)v17 + 2 * a2);
        --v14;
      }
      while (v14);
      *v8++ = v15;
      result = v15 + result;
      v10 = 8;
    }
    while ((v16 & 1) != 0);
    v9 = 0;
    v6 = 8;
  }
  while ((v11 & 1) != 0);
  *a5 = v8;
  *v7 = result;
  return result;
}

uint64_t sub_1B685E814(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  char v28;
  uint16x8_t *v29;
  uint16x8_t *v30;
  uint16x8_t v31;

  v5 = result;
  v6 = 0;
  LODWORD(result) = 0;
  v7 = *a5;
  v8 = *a5 + 1;
  v9 = 1;
  do
  {
    v10 = 0;
    v11 = v9;
    v12 = v5 + 2 * v6 * a2;
    v13 = a3 + 2 * v6 * a4;
    v14 = 1;
    v15 = v8;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = v14;
      v8 = v15 + 1;
      v19 = 1;
      v20 = v12 + 2 * v10;
      v21 = v13 + 2 * v10;
      do
      {
        v22 = 0;
        v23 = v19;
        v24 = v20 + 2 * v16 * a2;
        v25 = v21 + 2 * v16 * a4;
        LOBYTE(v26) = 1;
        do
        {
          v27 = 0;
          v28 = v26;
          v26 = 8;
          v29 = (uint16x8_t *)(v24 + 2 * v22);
          v30 = (uint16x8_t *)(v25 + 2 * v22);
          do
          {
            v31 = vabdq_u16(*v29, *v30);
            v27 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v27, *(uint16x4_t *)v31.i8), v31));
            v30 = (uint16x8_t *)((char *)v30 + 2 * a4);
            v29 = (uint16x8_t *)((char *)v29 + 2 * a2);
            --v26;
          }
          while (v26);
          *v8++ = v27;
          v17 += v27;
          v22 = 8;
        }
        while ((v28 & 1) != 0);
        v19 = 0;
        v16 = 8;
      }
      while ((v23 & 1) != 0);
      v14 = 0;
      *v15 = v17;
      result = v17 + result;
      v10 = 16;
      v15 = v8;
    }
    while ((v18 & 1) != 0);
    v9 = 0;
    v6 = 16;
  }
  while ((v11 & 1) != 0);
  *a5 = v8;
  *v7 = result;
  return result;
}

uint64_t sub_1B685E940(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  uint64_t v5;
  unsigned int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  uint16x8_t *v37;
  uint16x8_t *v38;
  uint16x8_t v39;
  unsigned int *v40;
  uint64_t v42;
  char v44;

  v42 = result;
  v5 = 0;
  LODWORD(result) = 0;
  v40 = *a5;
  v6 = *a5 + 1;
  v7 = 1;
  do
  {
    v8 = 0;
    v44 = v7;
    v9 = v42 + 2 * v5 * a2;
    v10 = a3 + 2 * v5 * a4;
    v11 = 1;
    v12 = v6;
    do
    {
      v13 = 0;
      v14 = 0;
      v15 = v11;
      v6 = v12 + 1;
      v16 = 1;
      v17 = v9 + 2 * v8;
      v18 = v10 + 2 * v8;
      do
      {
        v19 = 0;
        v20 = v16;
        v21 = v17 + 2 * v13 * a2;
        v22 = v18 + 2 * v13 * a4;
        v23 = 1;
        v24 = v6;
        do
        {
          v25 = 0;
          v26 = 0;
          v27 = v23;
          v6 = v24 + 1;
          v28 = 1;
          v29 = v21 + 2 * v19;
          v30 = v22 + 2 * v19;
          do
          {
            v31 = 0;
            v32 = v28;
            v33 = v29 + 2 * v25 * a2;
            v34 = v30 + 2 * v25 * a4;
            LOBYTE(v25) = 1;
            do
            {
              v35 = 0;
              v36 = v25;
              LODWORD(v25) = 8;
              v37 = (uint16x8_t *)(v33 + 2 * v31);
              v38 = (uint16x8_t *)(v34 + 2 * v31);
              do
              {
                v39 = vabdq_u16(*v37, *v38);
                v35 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v35, *(uint16x4_t *)v39.i8), v39));
                v38 = (uint16x8_t *)((char *)v38 + 2 * a4);
                v37 = (uint16x8_t *)((char *)v37 + 2 * a2);
                LODWORD(v25) = v25 - 1;
              }
              while ((_DWORD)v25);
              *v6++ = v35;
              v26 += v35;
              v31 = 8;
            }
            while ((v36 & 1) != 0);
            v28 = 0;
            v25 = 8;
          }
          while ((v32 & 1) != 0);
          v23 = 0;
          *v24 = v26;
          v14 += v26;
          v19 = 16;
          v24 = v6;
        }
        while ((v27 & 1) != 0);
        v16 = 0;
        v13 = 16;
      }
      while ((v20 & 1) != 0);
      v11 = 0;
      *v12 = v14;
      result = v14 + result;
      v12 = v6;
      v8 = 32;
    }
    while ((v15 & 1) != 0);
    v7 = 0;
    v5 = 32;
  }
  while ((v44 & 1) != 0);
  *a5 = v6;
  *v40 = result;
  return result;
}

uint64_t sub_1B685EAFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, _QWORD *a7, _QWORD *a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a6 < 1)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      if (a5 >= 1)
      {
        v11 = 0;
        do
        {
          v12 = *(unsigned __int16 *)(result + v11 + 2) - *(unsigned __int16 *)(a3 + v11 + 2);
          v10 += (*(unsigned __int16 *)(result + v11) - *(unsigned __int16 *)(a3 + v11))
               * (*(unsigned __int16 *)(result + v11) - *(unsigned __int16 *)(a3 + v11));
          v9 += (v12 * v12);
          v11 += 4;
        }
        while (4 * a5 != v11);
      }
      ++v8;
      a3 += 2 * a4;
      result += 2 * a2;
    }
    while (v8 != a6);
  }
  *a7 = v10;
  *a8 = v9;
  return result;
}

uint64_t sub_1B685EB90()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t i;
  _QWORD v10[2];
  int v11[4096];
  uint64_t v12;

  v0 = MEMORY[0x1E0C80A78]();
  v12 = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v10[1] = 0;
  if (v1 >= 1)
  {
    v6 = 0;
    v7 = v11;
    do
    {
      if (v0 >= 1)
      {
        for (i = 0; i != v0; ++i)
          v7[i] = *(unsigned __int16 *)(v2 + i * 4) - *(unsigned __int16 *)(v4 + i * 4);
      }
      ++v6;
      v7 += 64;
      v4 += 2 * v5;
      v2 += 2 * v3;
    }
    while (v6 != v1);
  }
  return sub_1B685EC6C(v0, v1, v11, 0x10u, v10, 1);
}

uint64_t sub_1B685EC6C(int a1, int a2, int *a3, unsigned int a4, _QWORD *a5, int a6)
{
  unsigned int v6;
  int v7;
  BOOL v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int *v26;
  int *v27;
  int *v28;
  int *v29;
  int *v30;
  int *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int i;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  int v54;
  unsigned int v55;
  int v56;
  char v57;
  int v58;
  char v61;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int *v71;
  int *v72;
  int *v73;
  uint64_t v74;

  *a5 = 0;
  a5[1] = 0;
  v74 = a1;
  v66 = a2;
  v6 = __clz(__rbit32(a4));
  v61 = a6;
  v57 = v6;
  v58 = a2 >> v6;
  if (a4 == 32)
    v7 = a6;
  else
    v7 = 1;
  v8 = v7 == 0;
  if (v7)
    v9 = 0;
  else
    v9 = -2;
  if (v8)
    v10 = -3;
  else
    v10 = -1;
  v55 = v10 + v6;
  v56 = a1 >> v6;
  v11 = 1;
  v54 = 1 << (v6 + v9 - 2);
  v12 = a4;
  v13 = -1;
  do
  {
    v64 = v13;
    v14 = (v61 & 1) == 0 && a4 == 32 && v11 == 8;
    v65 = 2 * v11;
    if (a2 >= 1)
    {
      v16 = 0;
      v73 = &a3[65 * v11];
      v68 = (uint64_t)v65 << 8;
      v17 = 4 * v65;
      v71 = a3;
      v72 = &a3[v11];
      v70 = &a3[64 * (uint64_t)v11];
      do
      {
        v69 = v16;
        if (a1 >= 1)
        {
          v18 = 0;
          v19 = v70;
          v20 = v71;
          v21 = v72;
          v22 = v73;
          do
          {
            if (v11 >= 1)
            {
              v23 = 0;
              v24 = v20;
              v25 = v19;
              v26 = v21;
              v27 = v22;
              do
              {
                v28 = v24;
                v29 = v25;
                v30 = v26;
                v31 = v27;
                v32 = v11;
                do
                {
                  v33 = *v29 + *v28;
                  v34 = *v28 - *v29;
                  v35 = *v31 + *v30;
                  v36 = *v30 - *v31;
                  if (v14)
                  {
                    v37 = v34 + 1;
                    v38 = v35 + 1;
                    v39 = v36 + 1;
                    *v28 = (v38 >> 1) + ((v33 + 1) >> 1);
                    *v29 = (v39 >> 1) + (v37 >> 1);
                    *v30 = ((v33 + 1) >> 1) - (v38 >> 1);
                    *v31 = (v37 >> 1) - (v39 >> 1);
                    *v28 >>= 1;
                    *v29 >>= 1;
                    v40 = *v30 >> 1;
                    v41 = *v31 >> 1;
                  }
                  else
                  {
                    *v28 = v35 + v33;
                    *v29 = v36 + v34;
                    v40 = v33 - v35;
                    v41 = v34 - v36;
                  }
                  *v30++ = v40;
                  *v31++ = v41;
                  ++v29;
                  ++v28;
                  --v32;
                }
                while (v32);
                ++v23;
                v27 += 64;
                v26 += 64;
                v25 += 64;
                v24 += 64;
              }
              while (v23 != v11);
            }
            v18 += v65;
            v22 = (int *)((char *)v22 + v17);
            v21 = (int *)((char *)v21 + v17);
            v19 = (int *)((char *)v19 + v17);
            v20 = (int *)((char *)v20 + v17);
          }
          while (v18 < v74);
        }
        v16 += v65;
        v73 = (int *)((char *)v73 + v68);
        v72 = (int *)((char *)v72 + v68);
        v70 = (int *)((char *)v70 + v68);
        v71 = (int *)((char *)v71 + v68);
      }
      while (v69 + v65 < v66);
    }
    if ((v64 & 0x80000000) == 0)
    {
      if (v58 < 1)
      {
        v43 = 0;
      }
      else
      {
        v42 = 0;
        v43 = 0;
        do
        {
          if (v56 >= 1)
          {
            for (i = 0; i != v56; ++i)
            {
              v45 = 0;
              v46 = 0;
              v47 = (uint64_t)&a3[64 * (uint64_t)(v42 << v57) + (i << v57)];
              do
              {
                v48 = (int *)v47;
                v49 = v12;
                do
                {
                  v51 = *v48++;
                  v50 = v51;
                  if (v51 < 0)
                    v50 = -v50;
                  v46 += v50;
                  --v49;
                }
                while (v49);
                ++v45;
                v47 += 256;
              }
              while (v45 != v12);
              v52 = (v46 + v54) >> v55;
              if (!v55)
                v52 = v46;
              v43 += v52;
            }
          }
          ++v42;
        }
        while (v42 != v58);
      }
      *((_DWORD *)a5 + v64) = v43;
    }
    v13 = v64 + 1;
    v11 *= 2;
  }
  while (v65 < (int)a4);
  return *((unsigned int *)a5 + v64);
}

uint64_t sub_1B685F000(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[256];
  _BYTE v26[256];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a2 < 1)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 2 * a6;
  v22 = 16 * a4;
  v23 = 16 * a6;
  v12 = 2 * a4;
  do
  {
    if (a1 >= 1)
    {
      v13 = 0;
      v14 = a3;
      v15 = a5;
      do
      {
        v16 = 0;
        v17 = v25;
        v18 = v14;
        v19 = v15;
        do
        {
          for (i = 0; i != 32; i += 4)
            *(_DWORD *)&v17[i] = *(unsigned __int16 *)(v18 + i) - *(unsigned __int16 *)(v19 + i);
          ++v16;
          v17 += 32;
          v19 += v11;
          v18 += v12;
        }
        while (v16 != 8);
        sub_1B685F160((uint64_t)v25, (uint64_t)v26);
        sub_1B685F160((uint64_t)v26, (uint64_t)v25);
        v10 = sub_1B685F240((uint64_t)v25) + v10;
        v13 += 8;
        v15 += 32;
        v14 += 32;
      }
      while ((int)v13 < a1);
    }
    v9 += 8;
    a5 += v23;
    a3 += v22;
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1B685F160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t result;
  int v26;
  int v27;
  int v28;

  v2 = 0;
  v3 = (_DWORD *)(a2 + 128);
  v4 = a1 + 28;
  do
  {
    v5 = *(_DWORD *)(v4 + v2 - 28);
    *(v3 - 32) = v5;
    v6 = *(_DWORD *)(v4 + v2 - 24);
    *(v3 - 24) = v6;
    v7 = *(_DWORD *)(v4 + v2 - 20);
    *(v3 - 16) = v7;
    v8 = *(_DWORD *)(v4 + v2 - 16);
    *(v3 - 8) = v8;
    v9 = *(_DWORD *)(v4 + v2 - 12);
    *v3 = v9;
    v10 = *(_DWORD *)(v4 + v2 - 8);
    v3[8] = v10;
    v11 = *(_DWORD *)(v4 + v2 - 4);
    v3[16] = v11;
    v12 = v6 + v5;
    v13 = v5 - v6;
    v14 = v8 + v7;
    v15 = v7 - v8;
    v16 = v14 + v12;
    v17 = v12 - v14;
    v18 = v15 + v13;
    v19 = *(_DWORD *)(v4 + v2);
    v20 = v13 - v15;
    v21 = v10 + v9;
    v22 = v9 - v10;
    v23 = v19 + v11;
    v24 = v11 - v19;
    result = (v23 + v21);
    v26 = v21 - v23;
    v27 = v24 + v22;
    v28 = v22 - v24;
    *(v3 - 32) = result + v16;
    *v3 = v16 - result;
    *(v3 - 24) = v27 + v18;
    v3[8] = v18 - v27;
    *(v3 - 16) = v26 + v17;
    v3[16] = v17 - v26;
    *(v3 - 8) = v28 + v20;
    v3[24] = v20 - v28;
    v2 += 32;
    ++v3;
  }
  while (v2 != 256);
  return result;
}

uint64_t sub_1B685F240(uint64_t a1)
{
  unsigned __int8 v1;
  _DWORD *v2;
  unsigned __int8 v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int32x4_t v8;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v1 = atomic_load((unsigned __int8 *)&qword_1EF1391E8);
  v2 = &unk_1EF139000;
  if ((v1 & 1) == 0)
  {
    v14 = a1;
    v10 = __cxa_guard_acquire(&qword_1EF1391E8);
    v2 = &unk_1EF139000;
    v11 = v10;
    a1 = v14;
    if (v11)
    {
      dword_1EF1391E0 = 2;
      __cxa_guard_release(&qword_1EF1391E8);
      v2 = (_DWORD *)&unk_1EF139000;
      a1 = v14;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EF1391F8);
  v4 = &unk_1EF139000;
  if ((v3 & 1) == 0)
  {
    v15 = a1;
    v12 = __cxa_guard_acquire(&qword_1EF1391F8);
    v4 = &unk_1EF139000;
    v2 = &unk_1EF139000;
    v13 = v12;
    a1 = v15;
    if (v13)
    {
      dword_1EF1391F0 = 1 << (dword_1EF1391E0 - 1);
      __cxa_guard_release(&qword_1EF1391F8);
      v4 = (_DWORD *)&unk_1EF139000;
      v2 = (_DWORD *)&unk_1EF139000;
      a1 = v15;
    }
  }
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = 0;
    v8 = (int32x4_t)v6;
    do
    {
      v8 = vaddq_s32(vabsq_s32(*(int32x4_t *)(a1 + v7)), v8);
      v7 += 16;
    }
    while (v7 != 32);
    v6 = vaddvq_s32(v8);
    ++v5;
    a1 += 32;
  }
  while (v5 != 8);
  return ((int)(v4[124] + v6) >> v2[120]);
}

uint64_t sub_1B685F370(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[64];
  _BYTE v26[64];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a2 < 1)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 2 * a6;
  v22 = 8 * a4;
  v23 = 8 * a6;
  v12 = 2 * a4;
  do
  {
    if (a1 >= 1)
    {
      v13 = 0;
      v14 = a3;
      v15 = a5;
      do
      {
        v16 = 0;
        v17 = v25;
        v18 = v14;
        v19 = v15;
        do
        {
          for (i = 0; i != 16; i += 4)
            *(_DWORD *)&v17[i] = *(unsigned __int16 *)(v18 + i) - *(unsigned __int16 *)(v19 + i);
          ++v16;
          v17 += 16;
          v19 += v11;
          v18 += v12;
        }
        while (v16 != 4);
        sub_1B685F4D0((uint64_t)v25, (uint64_t)v26);
        sub_1B685F4D0((uint64_t)v26, (uint64_t)v25);
        v10 = sub_1B685F540((uint64_t)v25) + v10;
        v13 += 4;
        v15 += 16;
        v14 += 16;
      }
      while ((int)v13 < a1);
    }
    v9 += 4;
    a5 += v23;
    a3 += v22;
  }
  while ((int)v9 < a2);
  return v10;
}

uint64_t sub_1B685F4D0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v2 = 0;
  v3 = (_DWORD *)(a2 + 32);
  v4 = result + 12;
  do
  {
    v5 = *(_DWORD *)(result + v2);
    *(v3 - 8) = v5;
    v6 = *(_DWORD *)(v4 + v2 - 8);
    *(v3 - 4) = v6;
    v7 = *(_DWORD *)(v4 + v2 - 4);
    *v3 = v7;
    v8 = *(_DWORD *)(v4 + v2);
    v9 = v6 + v5;
    v10 = v5 - v6;
    v11 = v8 + v7;
    v12 = v7 - v8;
    *(v3 - 8) = v11 + v9;
    *v3 = v9 - v11;
    *(v3 - 4) = v12 + v10;
    v3[4] = v10 - v12;
    v2 += 16;
    ++v3;
  }
  while (v2 != 64);
  return result;
}

uint64_t sub_1B685F540(uint64_t a1)
{
  unsigned __int8 v1;
  _DWORD *v2;
  unsigned __int8 v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v1 = atomic_load((unsigned __int8 *)&qword_1EF139208);
  v2 = &unk_1EF139000;
  if ((v1 & 1) == 0)
  {
    v12 = a1;
    v8 = __cxa_guard_acquire(&qword_1EF139208);
    v2 = &unk_1EF139000;
    v9 = v8;
    a1 = v12;
    if (v9)
    {
      dword_1EF139200 = 1;
      __cxa_guard_release(&qword_1EF139208);
      v2 = (_DWORD *)&unk_1EF139000;
      a1 = v12;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EF139218);
  v4 = &unk_1EF139000;
  if ((v3 & 1) == 0)
  {
    v13 = a1;
    v10 = __cxa_guard_acquire(&qword_1EF139218);
    v4 = &unk_1EF139000;
    v2 = &unk_1EF139000;
    v11 = v10;
    a1 = v13;
    if (v11)
    {
      dword_1EF139210 = 1 << (dword_1EF139200 - 1);
      __cxa_guard_release(&qword_1EF139218);
      v4 = (_DWORD *)&unk_1EF139000;
      v2 = (_DWORD *)&unk_1EF139000;
      a1 = v13;
    }
  }
  v5 = 0;
  v6 = 0;
  do
  {
    v6 = vaddvq_s32(vaddq_s32(vabsq_s32(*(int32x4_t *)(a1 + v5)), (int32x4_t)v6));
    v5 += 16;
  }
  while (v5 != 64);
  return ((int)(v4[132] + v6) >> v2[128]);
}

uint64_t sub_1B685F65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t i;
  _BYTE v8[256];
  _BYTE v9[256];
  uint64_t v10;

  v4 = 0;
  v10 = *MEMORY[0x1E0C80C00];
  v5 = v8;
  do
  {
    for (i = 0; i != 8; ++i)
      *(_DWORD *)&v5[4 * i] = *(unsigned __int8 *)(a1 + i) - *(unsigned __int8 *)(a3 + i);
    ++v4;
    a1 += a2;
    a3 += a4;
    v5 += 32;
  }
  while (v4 != 8);
  sub_1B685F160((uint64_t)v8, (uint64_t)v9);
  sub_1B685F160((uint64_t)v9, (uint64_t)v8);
  return sub_1B685F240((uint64_t)v8);
}

uint64_t sub_1B685F708(unsigned __int32 *a1, uint64_t a2, __int32 *a3, uint64_t a4, __n128 a5, uint8x8_t a6)
{
  uint64_t v6;
  _BYTE v8[64];
  _BYTE v9[64];
  uint64_t v10;

  v6 = 0;
  v10 = *MEMORY[0x1E0C80C00];
  do
  {
    a5.n128_u32[0] = *a1;
    a6.i32[0] = *a3;
    a6 = (uint8x8_t)vmovl_u8(a6).u64[0];
    a5 = (__n128)vsubl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)a5.n128_u64[0]), (uint16x4_t)a6);
    *(__n128 *)&v8[v6] = a5;
    a1 = (unsigned __int32 *)((char *)a1 + a2);
    a3 = (__int32 *)((char *)a3 + a4);
    v6 += 16;
  }
  while (v6 != 64);
  sub_1B685F4D0((uint64_t)v8, (uint64_t)v9);
  sub_1B685F4D0((uint64_t)v9, (uint64_t)v8);
  return sub_1B685F540((uint64_t)v8);
}

uint64_t sub_1B685F7A0(uint64_t result, int a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  __int16 *v6;
  __int16 v7;
  __int16 v8;
  int v9;

  v3 = a3 + a2;
  if (a3 + a2 >= 63)
    v3 = 63;
  v4 = v3 & ~(v3 >> 31);
  v5 = dword_1B6923630[70 * *(unsigned __int8 *)(result + 22) + v4];
  *(_WORD *)result = v5;
  v6 = (__int16 *)((char *)&unk_1B6924478 + 700 * *(unsigned __int8 *)(result + 20) + 2 * v4);
  v7 = v6[70 * *(unsigned __int8 *)(result + 21)];
  *(_WORD *)(result + 2) = v7;
  v8 = *v6;
  *(_WORD *)(result + 4) = *v6;
  *(_WORD *)(result + 6) = v6[70];
  if (a2 >= 51)
    v9 = 51;
  else
    v9 = a2;
  *(_WORD *)(result + 18) = word_1B69243A8[v9 & ~(v9 >> 31)];
  *(_WORD *)(result + 10) = v7;
  *(_WORD *)(result + 12) = v7;
  *(_WORD *)(result + 14) = v7;
  *(_WORD *)(result + 8) = v5;
  *(_WORD *)(result + 16) = v8;
  return result;
}

double sub_1B685F844(uint64_t a1, uint64_t a2, int a3, int a4, int a5, unsigned __int8 *a6)
{
  return sub_1B685F88C(a1, a2, a3, a4, a5, *(unsigned __int8 *)(*((_QWORD *)a6 + 12)+ 16* (((a3 - *((_DWORD *)a6 + 1)) >> 2)+ ((unint64_t)*a6 >> 2) * ((a4 - *((_DWORD *)a6 + 2)) >> 2))+ 10), (*(unsigned __int16 *)(*((_QWORD *)a6 + 11)+ 2* (((a3 - *((_DWORD *)a6 + 1)) >> 3)+ ((unint64_t)*a6 >> 3) * ((a4 - *((_DWORD *)a6 + 2)) >> 3))) >> 4) & 7);
}

double sub_1B685F88C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  double result;

  v7 = *(_QWORD *)(a1 + 2376);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2009);
  *(_QWORD *)(a1 + 2072) = v7;
  v9 = v8 - a5;
  *(_DWORD *)(a1 + 2048) = v9;
  *(_DWORD *)(a1 + 2052) = a6;
  *(_DWORD *)(a1 + 2056) = a7;
  if (a6 == 1)
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 1368) + 245);
    if (a7)
      ++v10;
  }
  else
  {
    v11 = *(_QWORD *)(v7 + 1368);
    v12 = (v9 - *(unsigned __int8 *)(v11 + 2010)) & ~((v9 - *(unsigned __int8 *)(v11 + 2010)) >> 31);
    v10 = *(unsigned __int8 *)(v11 + 244);
    if (v12 < v10)
      v10 = v12;
  }
  *(_DWORD *)(a1 + 2060) = v10;
  *(_QWORD *)(a1 + 2216) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_QWORD *)(a1 + 2400) = a2;
  *(_DWORD *)(a1 + 2424) = a3;
  *(_DWORD *)(a1 + 2428) = a4;
  *(_DWORD *)(a1 + 2432) = a5;
  *(_QWORD *)(a1 + 2408) = a2 + 984;
  *(_BYTE *)(a1 + 2416) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t sub_1B685F924(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int v12;
  uint64_t v13;
  int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x1E0C80C00];
  if (a3 < 4)
    return 0xFFFFFFFFLL;
  LODWORD(v4) = 1 << a3;
  if (a3 == 31)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v8 = 0;
    LODWORD(v7) = 0;
    LODWORD(v6) = 0;
    LODWORD(v5) = 0;
    if ((int)v4 <= 1)
      v9 = 1;
    else
      v9 = v4;
    v10 = a2;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        v12 = *(unsigned __int8 *)(v10 + i);
        v5 = (v5 + i * v12);
        v6 = (v6 + v8 * v12);
        v7 = (v7 + v12);
      }
      v10 += a1;
      ++v8;
    }
    while (v8 != (_DWORD)v9);
  }
  v13 = 0;
  v14 = (int *)((char *)&unk_1B692BF3C + 36 * (a3 - 2) + 8);
  do
  {
    v21[v13++] = v5 * *(v14 - 2) + v6 * *(v14 - 1) + v7 * *v14;
    v14 += 3;
  }
  while (v13 != 3);
  if (a3 == 31)
  {
    v15 = 0;
  }
  else
  {
    v16 = 0;
    v15 = 0;
    v17 = v21[2];
    if ((int)v4 <= 1)
      v4 = 1;
    else
      v4 = v4;
    do
    {
      v18 = 0;
      v19 = v17;
      do
      {
        v20 = *(unsigned __int8 *)(a2 + v18) - (v19 >> 24);
        v15 += v20 * v20;
        ++v18;
        v19 += v21[0];
      }
      while (v4 != v18);
      a2 += a1;
      ++v16;
      v17 += v21[1];
    }
    while (v16 != v4);
  }
  return v15 >> (2 * a3);
}

uint64_t sub_1B685FA98(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x1E0C80C00];
  if (a3 < 4)
    return 0xFFFFFFFFLL;
  LODWORD(v4) = 1 << a3;
  v5 = 2 * a1;
  if (a3 == 31)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v9 = 0;
    LODWORD(v8) = 0;
    LODWORD(v7) = 0;
    LODWORD(v6) = 0;
    if ((int)v4 <= 1)
      v10 = 1;
    else
      v10 = v4;
    v11 = a2;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        v13 = *(unsigned __int16 *)(v11 + 2 * i);
        v6 = (v6 + i * v13);
        v7 = (v7 + v9 * v13);
        v8 = (v8 + v13);
      }
      ++v9;
      v11 += v5;
    }
    while (v9 != (_DWORD)v10);
  }
  v14 = 0;
  v15 = (int *)((char *)&unk_1B692BF3C + 36 * (a3 - 2) + 8);
  do
  {
    v22[v14++] = v6 * *(v15 - 2) + v7 * *(v15 - 1) + v8 * *v15;
    v15 += 3;
  }
  while (v14 != 3);
  if (a3 == 31)
  {
    v16 = 0;
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v18 = v22[2];
    if ((int)v4 <= 1)
      v4 = 1;
    else
      v4 = v4;
    do
    {
      v19 = 0;
      v20 = v18;
      do
      {
        v21 = *(unsigned __int16 *)(a2 + v19) - (v20 >> 24);
        v16 += v21 * v21;
        v19 += 2;
        v20 += v22[0];
      }
      while (2 * v4 != v19);
      ++v17;
      a2 += v5;
      v18 += v22[1];
    }
    while (v17 != v4);
  }
  return v16 >> (2 * a3);
}

uint64_t sub_1B685FC14(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t result;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;

  v10 = *(_QWORD *)(a1 + 2400);
  v11 = a2 - *(_DWORD *)(v10 + 808);
  v12 = a3 - *(_DWORD *)(v10 + 812);
  v13 = (uint64_t)v12 >> 3;
  if (((*(unsigned __int16 *)(*(_QWORD *)(v10 + 856) + 2 * (*(_QWORD *)(v10 + 832) * v13 + (v11 >> 3))) >> 2) & 3) <= (int)a5)
  {
    v42 = *(_DWORD *)(a1 + 2420);
    if ((v42 & 1) != 0)
    {
      result = *(unsigned __int8 *)(*(_QWORD *)(v10 + 896)
                                  + (*(uint64_t *)(v10 + 816) >> 2) * ((uint64_t)v12 >> 2)
                                  + (v11 >> 2)) != 0;
      if ((v42 & 2) == 0)
        return result;
    }
    else
    {
      result = 0;
      if ((v42 & 2) == 0)
        return result;
    }
    if (a6 == 3 || *(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2012) < a4)
    {
      v43 = ((uint64_t)v11 >> 3) + (*(uint64_t *)(v10 + 824) >> 2) * v13;
      v44 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 904) + v43);
      v45 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 912) + v43);
      v46 = ((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - a5))
          + byte_1B6924F90[a5]
          + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - a5) << a5);
      v47 = a1 + 4 * (v46 >> 5);
      *(_DWORD *)(v47 + 2136) |= (v44 != 0) << (((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - a5))
                                              + byte_1B6924F90[a5]
                                              + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - a5) << a5));
      *(_DWORD *)(v47 + 2180) |= (v45 != 0) << v46;
      if (v44 | v45)
        return 1;
      else
        return result;
    }
  }
  else
  {
    v14 = (a4 - 1);
    v15 = 1 << (a4 - 1);
    v16 = (v15 + a2);
    v17 = (v15 + a3);
    v18 = a5 + 1;
    v19 = sub_1B685FC14(a1, a2, a3, v14, v18, 0);
    v20 = v19 | sub_1B685FC14(a1, v16, a3, v14, a5 + 1, 1);
    v21 = sub_1B685FC14(a1, a2, v17, v14, a5 + 1, 2);
    result = v20 | v21 | sub_1B685FC14(a1, v16, v17, v14, a5 + 1, 3);
    if ((*(_BYTE *)(a1 + 2420) & 2) != 0)
    {
      v23 = *(_DWORD *)(a1 + 2048);
      v24 = v23 - v18;
      v25 = byte_1B6924F90[v18];
      v26 = (a3 & 0x3F) >> (v23 - v18) << v18;
      v27 = ((a2 & 0x3F) >> (v23 - v18)) + v25;
      v28 = (v27 + v26) >> 5;
      v29 = 1;
      v30 = 1 << (((a2 & 0x3F) >> (v23 - v18)) + v25 + v26);
      if ((v30 & *(_DWORD *)(a1 + 4 * v28 + 2136)) == 0)
      {
        v31 = ((v16 & 0x3F) >> v24) + v25;
        if (((*(_DWORD *)(a1 + 4 * ((v31 + v26) >> 5) + 2136) >> (((v16 & 0x3F) >> v24)
                                                                                 + v25
                                                                                 + v26)) & 1) != 0
          || (v32 = (v17 & 0x3F) >> v24 << v18,
              ((*(_DWORD *)(a1 + 4 * ((v27 + v32) >> 5) + 2136) >> (v27 + v32)) & 1) != 0))
        {
          v29 = 1;
        }
        else
        {
          v29 = (*(_DWORD *)(a1 + 4 * ((v31 + v32) >> 5) + 2136) >> (v31 + v32)) & 1;
        }
      }
      v33 = v23 - a5;
      v34 = (a2 & 0x3F) >> v33;
      v35 = (a3 & 0x3F) >> v33 << a5;
      v36 = v34 + byte_1B6924F90[a5];
      v37 = a1 + 4 * ((v35 + v36) >> 5);
      *(_DWORD *)(v37 + 2136) |= v29 << (v35 + v34 + byte_1B6924F90[a5]);
      if ((v30 & *(_DWORD *)(a1 + 4 * v28 + 2180)) != 0
        || (v38 = ((v16 & 0x3F) >> v24) + v25,
            ((*(_DWORD *)(a1 + 4 * ((v38 + v26) >> 5) + 2180) >> (v38 + v26)) & 1) != 0)
        || (v39 = (v17 & 0x3F) >> v24 << v18,
            ((*(_DWORD *)(a1 + 4 * ((v27 + v39) >> 5) + 2180) >> (v27 + v39)) & 1) != 0))
      {
        v40 = 1;
      }
      else
      {
        v40 = (*(_DWORD *)(a1 + 4 * ((v38 + v39) >> 5) + 2180) >> (v38 + v39)) & 1;
      }
      v41 = a1 + 4 * ((v36 + v35) >> 5);
      *(_DWORD *)(v41 + 2180) |= v40 << (v36 + v35);
    }
  }
  return result;
}

unint64_t *sub_1B685FFAC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *result;
  int v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  int64_t v24;
  int v25;
  unint64_t *v26;
  int v27;
  char v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  int v52;
  unint64_t *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _BOOL4 v65;
  int v66;
  int v67;
  int v68;
  BOOL v69;
  int v70;
  unint64_t *v71;
  int v72;
  int v73;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _BOOL4 v84;
  int v85;
  int v86;
  int v88;
  __int16 *v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  BOOL v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  unsigned __int8 *v108;
  unsigned int v109;
  int v110;
  _BOOL4 v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  char v116;
  unsigned int v117;
  char v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  int v135;
  int v136;
  unint64_t *v137;
  char v138;
  _BOOL4 v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  __int16 *v153;
  uint64_t v154;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;

  v9 = 0;
  v10 = 0;
  v154 = a4;
  v11 = (int)a5;
  v164 = a5 << 32;
  v138 = a5 - 1;
  v12 = -(int)a5;
  v150 = (a4 - 1);
  v161 = a5;
  v132 = 76 - a4;
  v133 = (int)a5;
  v13 = &byte_1B6924F90[(int)a5];
  v158 = -(int)a5;
  v156 = v13;
  while (1)
  {
    v14 = (unsigned __int8 *)(v11 + v10);
    v15 = v154 + v9;
    v16 = *(_QWORD *)(a1 + 2400);
    result = *(unint64_t **)(v16 + 944);
    v18 = *(_DWORD *)(a1 + 2052);
    if (v18 == 3)
    {
      v20 = 0;
      if (v11 == v9 && *(_DWORD *)(a1 + 2056))
      {
        v21 = *(_QWORD *)(a1 + 2384);
        if (!*(_BYTE *)(v21 + 244))
        {
          v22 = v15 > *(unsigned __int8 *)(v21 + 2010);
          goto LABEL_22;
        }
        v20 = 0;
      }
    }
    else if (v18 == 1)
    {
      v19 = v11 != v9 || *(_DWORD *)(a1 + 2056) == 0;
      v20 = !v19;
    }
    else
    {
      v20 = 0;
    }
    v22 = 1;
    if (!v20)
    {
      v23 = *(_QWORD *)(a1 + 2384);
      if (v15 <= *(unsigned __int8 *)(v23 + 2011))
      {
        if (v15 <= *(unsigned __int8 *)(v23 + 2010) || (uint64_t)v14 >= *(int *)(a1 + 2060))
        {
          v22 = 0;
        }
        else
        {
          v24 = ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v16 + 856)
                                                       + 2
                                                       * (*(_QWORD *)(v16 + 832)
                                                        * ((uint64_t)((int)a3 - *(_DWORD *)(v16 + 812)) >> 3)
                                                        + (((int)a2 - *(_DWORD *)(v16 + 808)) >> 3))) >> 2) & 3;
          v22 = (uint64_t)v14 < v24;
          if ((*(_BYTE *)(a1 + 2420) & 1) != 0)
          {
            v25 = a6;
            v26 = result;
            sub_1B67CC270(result, (uint64_t)v14 < v24, (_BYTE *)result + v132 + v10);
            v13 = v156;
            LOBYTE(v12) = v158;
            result = v26;
            v11 = v133;
            a6 = v25;
          }
        }
      }
    }
LABEL_22:
    v27 = a4 + v9;
    if ((*(_BYTE *)(a1 + 2420) & 2) == 0)
      goto LABEL_41;
    if (v15 <= 2 && v11 != v9)
    {
      v28 = v12 + v9 + *(_DWORD *)(a1 + 2048);
      v29 = &v13[v10];
      v30 = *(v29 - 1);
      v31 = ((a2 & 0x3F) >> (v28 + 1))
          + v30
          + ((a3 & 0x3F) >> (v28 + 1) << (v138 + v10));
      LODWORD(v29) = *v29;
      v32 = ((a3 & 0x3F) >> v28 << (v161 + v10)) + ((a2 & 0x3F) >> v28) + (_DWORD)v29;
      *(_DWORD *)(a1 + 2136 + 4 * (v32 >> 5)) |= ((*(_DWORD *)(a1 + 2136 + 4 * (v31 >> 5)) >> v31) & 1) << v32;
      LOBYTE(v32) = v12 + v9 + *(_DWORD *)(a1 + 2048);
      v33 = ((a2 & 0x3F) >> (v32 + 1))
          + v30
          + ((a3 & 0x3F) >> (v32 + 1) << (v138 + v10));
      v34 = ((a2 & 0x3F) >> v32) + (_DWORD)v29 + ((a3 & 0x3F) >> v32 << (v161 + v10));
      *(_DWORD *)(a1 + 2180 + 4 * (v34 >> 5)) |= ((*(_DWORD *)(a1 + 2180 + 4 * (v33 >> 5)) >> v33) & 1) << v34;
      goto LABEL_41;
    }
    v35 = a2 & ~(1 << v27);
    v36 = a3 & ~(1 << v27);
    v37 = *(_DWORD *)(a1 + 2048);
    v38 = v164 >> 32;
    v140 = a3;
    v142 = a2;
    v145 = (int)v14;
    v147 = a6;
    v139 = v22;
    if (v11 == v9
      || (v39 = v13[v10 - 1],
          v40 = ((v35 & 0x3F) >> (v12 + v9 + v37 + 1))
              + v39
              + ((v36 & 0x3F) >> (v12 + v9 + v37 + 1) << (v138 + v10)),
          v41 = 1 << (((v35 & 0x3F) >> (v12 + v9 + v37 + 1))
                    + v39
                    + ((v36 & 0x3F) >> (v12 + v9 + v37 + 1) << (v138 + v10))),
          (v41 & *(_DWORD *)(a1 + 4 * (v40 >> 5) + 2136)) != 0))
    {
      v135 = a2 & ~(1 << v27);
      v136 = a3 & ~(1 << v27);
      v134 = a2 & 0x3F;
      v42 = a3 & 0x3F;
      v43 = v13[v10];
      v44 = (v134 >> (v12 + v9 + v37)) + v43 + (v42 >> (v12 + v9 + v37) << (v161 + v10));
      v45 = *(_DWORD *)(a1 + 4 * (v44 >> 5) + 2136) >> v44;
      if (v15 <= 2)
        v46 = 0;
      else
        v46 = v164 >> 32;
      v137 = result;
      v47 = v12;
      v14 = v13;
      sub_1B67CC270(result, v45 & 1, (_BYTE *)result + v46 + 76);
      v37 = *(_DWORD *)(a1 + 2048);
      if (v11 == v9)
      {
        v48 = 0;
        result = v137;
        v11 = v133;
        v49 = v134;
        goto LABEL_40;
      }
      v13 = v14;
      result = v137;
      v50 = ((v135 & 0x3F) >> (v47 + v9 + v37 + 1))
          + v14[v10 - 1]
          + ((v136 & 0x3F) >> (v47 + v9 + v37 + 1) << (v138 + v10));
      v51 = (uint64_t)v50 >> 5;
      v41 = 1 << v50;
      a3 = v140;
      a2 = v142;
      v27 = a4 + v9;
      LODWORD(v14) = v145;
      a6 = v147;
      v11 = v133;
      v38 = v164 >> 32;
      v22 = v139;
    }
    else
    {
      v51 = (uint64_t)v40 >> 5;
    }
    if ((v41 & *(_DWORD *)(a1 + 4 * v51 + 2180)) == 0)
      goto LABEL_41;
    v43 = v13[v10];
    v49 = a2 & 0x3F;
    v48 = v161 + v10;
    v42 = a3 & 0x3F;
    v46 = v15 <= 2 ? 0 : v38;
LABEL_40:
    v52 = (*(_DWORD *)(a1 + 4 * ((int)((v49 >> (v37 - v48)) + v43 + (v42 >> (v37 - v48) << v48)) >> 5) + 2180) >> ((v49 >> (v37 - v48)) + v43 + (v42 >> (v37 - v48) << v48))) & 1;
    v53 = result;
    sub_1B67CC270(result, v52, (_BYTE *)result + v46 + 76);
    result = v53;
    a3 = v140;
    a2 = v142;
    v27 = a4 + v9;
    LODWORD(v14) = v145;
    a6 = v147;
    v22 = v139;
LABEL_41:
    if (!v22)
      break;
    v54 = 1 << (v150 + v9);
    v55 = (v54 + a2);
    v56 = (v54 + a3);
    v57 = (v161 + v10 + 1);
    sub_1B685FFAC(a1, a2, a3, v150 + v9, v57, 0);
    sub_1B685FFAC(a1, v55, a3, v150 + v9, v57, 1);
    sub_1B685FFAC(a1, a2, v56, v150 + v9, v57, 2);
    v13 = v156;
    LOBYTE(v12) = v158;
    ++v10;
    --v9;
    v164 += 0x100000000;
    a6 = 3;
    a2 = v55;
    a3 = v56;
  }
  v58 = *(_QWORD *)(a1 + 2400);
  v59 = *(_DWORD *)(v58 + 808);
  v60 = a2 - v59;
  v61 = *(_DWORD *)(v58 + 812);
  v62 = a3 - v61;
  v63 = *(unsigned __int8 *)(v58 + 804);
  v64 = *(_DWORD *)(a1 + 2420);
  if ((v64 & 2) != 0)
  {
    v66 = ((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14))
        + byte_1B6924F90[(int)v14]
        + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14) << (char)v14);
    v65 = 1;
    v67 = 1 << (((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14))
              + byte_1B6924F90[(int)v14]
              + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14) << (char)v14));
    if ((v67 & *(_DWORD *)(a1 + 4 * (v66 >> 5) + 2136)) == 0)
      v65 = (*(_DWORD *)(a1 + 4 * ((uint64_t)v66 >> 5) + 2180) & v67) != 0;
  }
  else
  {
    v65 = 0;
  }
  v68 = *(unsigned __int8 *)(*(_QWORD *)(v58 + 896) + (*(uint64_t *)(v58 + 816) >> 2) * ((uint64_t)v62 >> 2) + (v60 >> 2));
  if ((v64 & 1) != 0)
  {
    v69 = (_DWORD)v14 || *(_DWORD *)(a1 + 2052) == 1;
    v70 = v69 || v65;
    if (v70 == 1)
    {
      if ((_DWORD)v14)
        v71 = result;
      else
        v71 = (unint64_t *)((char *)result + 1);
      v72 = a6;
      v73 = v27;
      result = sub_1B67CC270(result, v68 != 0, (_BYTE *)v71 + 74);
      v27 = v73;
      a6 = v72;
      v58 = *(_QWORD *)(a1 + 2400);
      v59 = *(_DWORD *)(v58 + 808);
      v61 = *(_DWORD *)(v58 + 812);
      v63 = *(unsigned __int8 *)(v58 + 804);
      v60 = a2 - v59;
      v62 = a3 - v61;
    }
  }
  if (v60 < v63 && v62 < v63)
    v75 = *(_QWORD *)(v58 + 856) + 2 * (*(_QWORD *)(v58 + 832) * ((uint64_t)v62 >> 3) + (v60 >> 3));
  else
    v75 = 0;
  v76 = 0;
  v77 = (unsigned __int8 *)(*(_QWORD *)(v58 + 864) + 16 * (*(_QWORD *)(v58 + 840) * ((uint64_t)v62 >> 2) + (v60 >> 2)));
  v78 = *(_QWORD *)(v58 + 944);
  v80 = *(_QWORD *)(v78 + 16);
  v79 = *(_QWORD *)(v78 + 24);
  v81 = *(_QWORD *)(v78 + 208);
  v82 = *(_QWORD *)(v78 + 8);
  if (v27 <= 3 && *(_DWORD *)(a1 + 2052) == 1)
    v76 = byte_1B6924C10[*v77];
  v83 = *(_DWORD *)(a1 + 2420);
  if ((v83 & 2) == 0)
  {
    v84 = 0;
    goto LABEL_72;
  }
  v85 = ((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14))
      + byte_1B6924F90[(int)v14]
      + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14) << (char)v14);
  v86 = 1 << (((a2 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14))
            + byte_1B6924F90[(int)v14]
            + ((a3 & 0x3F) >> (*(_DWORD *)(a1 + 2048) - (_BYTE)v14) << (char)v14));
  if ((v86 & *(_DWORD *)(a1 + 4 * (v85 >> 5) + 2136)) == 0)
  {
    v84 = (*(_DWORD *)(a1 + 4 * ((uint64_t)v85 >> 5) + 2180) & v86) != 0;
LABEL_72:
    if (!v68 && !v84)
      goto LABEL_124;
  }
  if ((v83 & 1) != 0)
  {
    if (!*(_BYTE *)(a1 + 2064))
      goto LABEL_98;
    v155 = v77;
    v157 = *(_QWORD *)(v78 + 208);
    v159 = *(_QWORD *)(v78 + 16);
    v162 = *(_QWORD *)(v78 + 24);
    v165 = *(_QWORD *)(v78 + 8);
    v144 = v27;
    v146 = (int)v14;
    v148 = a6;
    *(_BYTE *)(a1 + 2064) = 0;
    v141 = a3;
    v143 = a2;
    v88 = a2;
    v89 = (__int16 *)v75;
    v90 = sub_1B6843C28(v58, v88, a3, *(_DWORD *)(a1 + 2432), *(unsigned __int8 **)(v58 + 848), *(_DWORD *)(a1 + 2068), *(unsigned __int8 *)(v58 + 800));
    v153 = v89;
    v91 = *(_QWORD *)(a1 + 2424) - v59;
    v92 = v90;
    v93 = *(_QWORD *)(v58 + 832) * ((uint64_t)(int)(HIDWORD(*(_QWORD *)(a1 + 2424)) - v61) >> 3) + (v91 >> 3);
    v151 = *v89 >> 9;
    v94 = v151 - v90;
    *(_WORD *)(*(_QWORD *)(v58 + 856) + 2 * v93) = *v89 & 0xFE00 | *(_WORD *)(*(_QWORD *)(v58 + 856) + 2 * v93) & 0x1FF;
    if (v151 - v90 >= 0)
      v95 = v151 - v90;
    else
      v95 = v90 - v151;
    if (v95 >= 5)
      v96 = 5;
    else
      v96 = v95;
    result = sub_1B67CC270((unint64_t *)v78, v96 != 0, (_BYTE *)(v78 + 49));
    if (v96)
    {
      if (v96 != 1)
      {
        v97 = 1 - v96;
        do
        {
          sub_1B67CC270((unint64_t *)v78, 1, (_BYTE *)(v78 + 50));
          v98 = __CFADD__(v97++, 1);
        }
        while (!v98);
      }
      if (v95 <= 4)
      {
        result = sub_1B67CC270((unint64_t *)v78, 0, (_BYTE *)(v78 + 50));
        goto LABEL_94;
      }
LABEL_93:
      sub_1B67CC5B0((unint64_t *)v78, v95 - 5, 0);
      LODWORD(a3) = v141;
      LODWORD(a2) = v143;
      goto LABEL_95;
    }
    if (v95 >= 5)
      goto LABEL_93;
LABEL_94:
    LODWORD(a3) = v141;
    LODWORD(a2) = v143;
    if (v151 != v92)
LABEL_95:
      result = sub_1B67CC34C((unint64_t *)v78, v94 < 1);
    v77 = v155;
    *(_DWORD *)(a1 + 2068) = *v153 >> 9;
    v83 = *(_DWORD *)(a1 + 2420);
    v27 = v144;
    LODWORD(v14) = v146;
    a6 = v148;
    LODWORD(v79) = v162;
    LODWORD(v82) = v165;
    LODWORD(v80) = v159;
    LODWORD(v81) = v157;
    if ((v83 & 1) != 0)
    {
LABEL_98:
      if (v68 && !*(_BYTE *)(*(_QWORD *)(a1 + 2400) + 803))
      {
        v102 = v27;
        v103 = v76;
        v149 = a6;
        v104 = v82;
        v105 = v79;
        v106 = v80;
        v107 = v81;
        v108 = v77;
        result = sub_1B6860B50(a1, a2, a3, v27, v103, 0);
        v77 = v108;
        LODWORD(v81) = v107;
        LODWORD(v80) = v106;
        LODWORD(v79) = v105;
        LODWORD(v82) = v104;
        v27 = v102;
        a6 = v149;
        if ((*(_DWORD *)(a1 + 2420) & 2) == 0)
          goto LABEL_124;
LABEL_100:
        v99 = *(_QWORD *)(a1 + 2400);
        if (*(_BYTE *)(v99 + 803))
          goto LABEL_124;
        if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2012) >= v27)
        {
          if (a6 != 3)
            goto LABEL_125;
          v100 = a2 - 2 * v27;
          v101 = a3 - 2 * v27;
        }
        else
        {
          --v27;
          v100 = a2;
          v101 = a3;
        }
        if (*(_DWORD *)(a1 + 2052) != 1)
          goto LABEL_118;
        v109 = v77[1];
        if (v109 == 35)
          v109 = *(unsigned __int8 *)(*(_QWORD *)(v99 + 864)
                                    + 16
                                    * (*(_QWORD *)(v99 + 840)
                                     * ((uint64_t)(int)(HIDWORD(*(_QWORD *)(a1 + 2424)) - *(_DWORD *)(v99 + 812)) >> 2)
                                     + ((int)(*(_QWORD *)(a1 + 2424) - *(_DWORD *)(v99 + 808)) >> 2)));
        if ((v27 - 1) <= 1)
        {
          v110 = 26 - v109;
          if (v109 >= 0x1A)
            v110 = v109 - 26;
          v111 = v110 < 5;
          v112 = 10 - v109;
          v98 = v109 >= 0xA;
          v113 = v109 - 10;
          if (!v98)
            v113 = v112;
          if (v113 >= 5)
            v114 = v111;
          else
            v114 = 2;
        }
        else
        {
LABEL_118:
          v114 = 0;
        }
        v115 = a2 & 0x3F;
        v116 = *(_DWORD *)(a1 + 2048) - (_BYTE)v14;
        v117 = a3 & 0x3F;
        v118 = (char)v14;
        v119 = byte_1B6924F90[(int)v14];
        v120 = (v115 >> v116) + v119 + (v117 >> v116 << v118);
        v121 = 1 << ((v115 >> v116) + v119 + (v117 >> v116 << v118));
        v166 = v100;
        v163 = v101;
        v160 = v114;
        if ((v121 & *(_DWORD *)(a1 + 4 * (v120 >> 5) + 2136)) != 0)
        {
          v122 = v27;
          v123 = v82;
          v124 = v79;
          v125 = v80;
          v126 = v81;
          result = sub_1B6860B50(a1, v100, v101, v27, v114, 1);
          LODWORD(v81) = v126;
          LODWORD(v80) = v125;
          LODWORD(v79) = v124;
          LODWORD(v82) = v123;
          v27 = v122;
          v127 = (uint64_t)(int)((v115 >> (*(_DWORD *)(a1 + 2048) - v118))
                              + v119
                              + (v117 >> (*(_DWORD *)(a1 + 2048) - v118) << v118)) >> 5;
          v121 = 1 << ((v115 >> (*(_DWORD *)(a1 + 2048) - v118))
                     + v119
                     + (v117 >> (*(_DWORD *)(a1 + 2048) - v118) << v118));
        }
        else
        {
          v127 = (uint64_t)v120 >> 5;
        }
        if ((v121 & *(_DWORD *)(a1 + 4 * v127 + 2180)) != 0)
        {
          v128 = v82;
          v129 = v79;
          v130 = v80;
          v131 = v81;
          result = sub_1B6860B50(a1, v166, v163, v27, v160, 2);
          LODWORD(v81) = v131;
          LODWORD(v80) = v130;
          LODWORD(v79) = v129;
          LODWORD(v82) = v128;
        }
        goto LABEL_124;
      }
    }
  }
  if ((v83 & 2) != 0)
    goto LABEL_100;
LABEL_124:
  v99 = *(_QWORD *)(a1 + 2400);
LABEL_125:
  *(_DWORD *)(v99 + 212) += v82
                          - (*(_DWORD *)(*(_QWORD *)(v99 + 944) + 8)
                           + (((_DWORD)v80 + 8 * ((_DWORD)v79 - (_DWORD)v81)) << 8))
                          + ((*(_DWORD *)(*(_QWORD *)(v99 + 944) + 16)
                            + 8
                            * (*(_DWORD *)(*(_QWORD *)(v99 + 944) + 24) - *(_DWORD *)(*(_QWORD *)(v99 + 944) + 208))) << 8);
  return result;
}

unint64_t *sub_1B6860B50(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;

  v7 = a5;
  v12 = *(_QWORD *)(a1 + 2400);
  v13 = *(_QWORD *)(v12 + 8 * (a6 > 0) + 816);
  if (((a3 | a2) & 0x80000000) == 0
    && ((v14 = a2 - *(_DWORD *)(v12 + 808),
         v15 = a3 - *(_DWORD *)(v12 + 812),
         v16 = *(unsigned __int8 *)(v12 + 804),
         v14 < v16)
      ? (v17 = v15 < v16)
      : (v17 = 0),
        v17))
  {
    v18 = (char *)(*(_QWORD *)(v12 + 8 * a6 + 872) + 2 * (v13 * (v15 >> (a6 > 0)) + (v14 >> (a6 > 0))));
  }
  else
  {
    v18 = 0;
  }
  if (a4 != 31)
  {
    v24 = a5;
    v19 = 0;
    v20 = 2 << a4;
    if (1 << a4 <= 1)
      v21 = 1;
    else
      v21 = (1 << a4);
    v22 = 2 * v13;
    do
    {
      memcpy((void *)(a1 + 2 * (int)((_DWORD)v19++ << a4)), v18, v20);
      v18 += v22;
    }
    while (v21 != v19);
    v7 = v24;
  }
  return sub_1B6860C84(a1, a1, a2, a3, a4, v7, a6);
}

unint64_t *sub_1B6860C84(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  unsigned int v7;
  unint64_t *result;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int v20;
  unint64_t *v21;
  int v22;
  int v23;
  unint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  _BYTE *v59;
  int v60;
  _BOOL4 v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  signed int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unint64_t *v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  int v84;
  char *v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  _WORD v101[16];
  _WORD v102[68];
  _DWORD v103[2];
  uint64_t v104;

  v7 = a6;
  v104 = *MEMORY[0x1E0C80C00];
  v87 = a5 - 2;
  result = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, _WORD *))(a1 + 8 * v87 + 2344))(a2, a6, v103, v102);
  if ((result & 0x80000000) == 0)
  {
    v12 = result;
    v13 = v103[0];
    v14 = v103[1];
    v15 = *(_QWORD *)(a1 + 2400);
    v97 = *(unint64_t **)(v15 + 944);
    if (a5 == 2 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1384) + 11))
    {
      v16 = v15 + 800;
      v17 = a3 - *(_DWORD *)(v15 + 808);
      v18 = a4 - *(_DWORD *)(v15 + 812);
      if (a7)
        v19 = 3;
      else
        v19 = 2;
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v16 + 8 * a7 + 120)
                               + (*(uint64_t *)(v16 + 8 * (a7 > 0) + 16) >> 2) * (v18 >> v19)
                               + (v17 >> v19));
      if (a7 <= 0)
        v21 = v97;
      else
        v21 = (unint64_t *)((char *)v97 + 1);
      sub_1B67CC270(v97, v20 != 0, (_BYTE *)v21 + 81);
    }
    if (v7 == 2)
      v22 = v13;
    else
      v22 = v14;
    if (v7 == 2)
      v23 = v14;
    else
      v23 = v13;
    sub_1B68613F0(v97, v23, a5, a7, (uint64_t)v97 + 83);
    result = sub_1B68613F0(v97, v22, a5, a7, (uint64_t)v97 + 101);
    if ((unint64_t)(v23 - 4) <= 0x1B)
      result = sub_1B67CC498(v97, v23 - byte_1B6924EF0[byte_1B6924ED0[v23]], (byte_1B6924ED0[v23] - 2) >> 1);
    if ((unint64_t)(v22 - 4) <= 0x1B)
      result = sub_1B67CC498(v97, v22 - byte_1B6924EF0[byte_1B6924ED0[v22]], (byte_1B6924ED0[v22] - 2) >> 1);
    v91 = 0;
    v24 = v97 + 5;
    LODWORD(v25) = 4 * v7;
    v86 = (1 << v87) - 1;
    if (v7)
      v26 = 15;
    else
      v26 = 9;
    if (a5 == 3)
      v25 = v25;
    else
      v25 = 0;
    if (a5 == 3)
      v27 = 9;
    else
      v27 = 12;
    v89 = v27;
    if (a5 != 3)
      v26 = 21;
    v84 = v26;
    v82 = (uint64_t)v24 + 2 * (a7 > 0) + 79;
    v28 = &v24[2 * (a7 > 0)];
    v79 = (uint64_t)v24 + 4 * (a7 > 0) + 151;
    v85 = (char *)*(&off_1E6A17608 + v87) + v25;
    v29 = v12 >> 4;
    v30 = v12 & 0xF;
    v31 = v97;
    v83 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1384) + 5);
    if (a7 <= 0)
      v32 = 0;
    else
      v32 = 27;
    v95 = v32;
    v33 = &byte_1B692C060[64 * (unint64_t)v7 + 16 * a5];
    v34 = v29;
    v88 = 1;
    v98 = v33;
    v99 = v29;
    v80 = (uint64_t)v28 + 127;
    do
    {
      v35 = v85[v34];
      v36 = v35 >> v87;
      if ((int)(v86 & v35) >= v86)
        v37 = 0;
      else
        v37 = (v91 >> v35) & 2;
      v38 = (v91 >> ((1 << v87) + v35)) & 1;
      if (v36 >= v86)
        LODWORD(v38) = 0;
      v93 = v38 | v37;
      v39 = (unsigned __int16)v102[v34];
      if (v34 != v29 && v34)
      {
        v40 = (_BYTE *)((_DWORD)v93 ? v82 + 1 : v82);
        result = sub_1B67CC270(v31, v39 != 0, v40);
        v33 = v98;
        v29 = v99;
        if (!v39)
          goto LABEL_127;
      }
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = v36 * (4 << a5) + 4 * (v35 & ~(-1 << v87));
      v90 = 1 << v35;
      v45 = v30;
      do
      {
        v46 = v33[v45 - 32];
        v47 = v46 + v44;
        if ((v34 < v29 || v45 < v30) && (!v34 || v45 || v43 >= 1))
        {
          if (a5 == 2)
          {
            v48 = byte_1B6924F95[v47 + 64];
          }
          else if ((int)v47 < 1)
          {
            v48 = 0;
          }
          else
          {
            v49 = byte_1B6924F95[16 * v93 + (v46 & 3 | (4 * ((v47 >> a5) & 3)))];
            if (a7)
            {
              v48 = v89 + v49;
            }
            else
            {
              if ((v47 >> a5 >> 2) + ((v47 & ~(-1 << a5)) >> 2))
                v49 += 3;
              v48 = v49 + v84;
            }
          }
          result = sub_1B67CC270(v97, (v39 >> v45) & 1, (_BYTE *)v97 + (v48 + v95) + 123);
          v33 = v98;
          v29 = v99;
        }
        if (((v39 >> v45) & 1) != 0)
        {
          v50 = *(__int16 *)(a2 + 2 * (int)v47);
          if (v50 >= 0)
            v51 = *(__int16 *)(a2 + 2 * (int)v47);
          else
            v51 = -v50;
          v101[v43] = v51;
          v42 = __PAIR64__(v42, v50) >> 31;
          v41 += (v51 > 1) << v43++;
        }
        v52 = v45-- <= 0;
      }
      while (!v52);
      v91 |= v90;
      if (v39)
      {
        if (v34)
          v52 = a7 <= 0;
        else
          v52 = 0;
        if (v52)
          v53 = 2;
        else
          v53 = 0;
        if (v83)
          v54 = (int)((__clz(v39) ^ 0x1F) - __clz(__rbit32(v39))) > 3;
        else
          v54 = 0;
        v55 = v42 >> v54;
        if (v43 < 1)
        {
          v88 = 1;
        }
        else
        {
          v94 = v54;
          if (v43 >= 8)
            v56 = 8;
          else
            v56 = v43;
          v81 = v53 | (v88 == 0);
          v57 = 1;
          v58 = v41;
          do
          {
            v59 = (_BYTE *)(v80 + (int)(v57 + 4 * v81));
            if ((v57 - 1) >= 2)
              v60 = v57;
            else
              v60 = v57 + 1;
            if ((v58 & 1) != 0)
              v57 = 0;
            else
              v57 = v60;
            sub_1B67CC270(v97, v58 & 1, v59);
            v58 >>= 1;
            --v56;
          }
          while (v56);
          v88 = v60;
          v54 = v94;
          if (!v57)
          {
            v61 = (unsigned __int16)v101[__clz(__rbit32(v41))] > 2u;
            v31 = v97;
            sub_1B67CC270(v97, v61, (_BYTE *)(v79 + v81));
            result = sub_1B67CC498(v97, v55, v43 - v94);
            v88 = 0;
LABEL_97:
            v33 = v98;
            v29 = v99;
            v62 = 0;
            v63 = 0;
            if (v43 <= 1)
              v64 = 1;
            else
              v64 = v43;
            v65 = 1;
            do
            {
              v66 = v65 + 2;
              if (v62 >= 8)
                v66 = 1;
              v67 = (unsigned __int16)v101[v62];
              v68 = v67 - v66;
              if (v67 >= v66)
              {
                v69 = 3 << v63;
                v70 = v68 - (3 << v63);
                if ((int)v68 >= 3 << v63)
                {
                  v73 = 1 << v63;
                  v74 = v63;
                  while (v70 >= v73)
                  {
                    ++v74;
                    v70 -= v73;
                    v73 = 1 << v74;
                  }
                  sub_1B67CC498(v97, (1 << (v74 - v63 + 4)) - 2, v74 - v63 + 4);
                  v75 = v97;
                  v76 = v70;
                  v77 = v74;
                  v31 = v97;
                }
                else
                {
                  if (v69 >= (int)(v68 >> v63))
                    v71 = v68 >> v63;
                  else
                    v71 = 3 << v63;
                  v72 = (int)(v68 >> v63) < v69;
                  if (v71 > 21)
                    sub_1B67CC554(v31, v71, v72);
                  else
                    sub_1B67CC498(v31, ~v72, v71 + v72);
                  v76 = v68 & ~(-1 << v63);
                  v75 = v31;
                  v77 = v63;
                }
                result = sub_1B67CC498(v75, v76, v77);
                if (v63 >= 3)
                  v78 = 3;
                else
                  v78 = v63;
                if (v69 < v67)
                  v63 = v78 + 1;
                v33 = v98;
                v29 = v99;
              }
              if (v67 > 1)
                v65 = 0;
              ++v62;
            }
            while (v62 != v64);
            v30 = 15;
            goto LABEL_127;
          }
        }
        v31 = v97;
        result = sub_1B67CC498(v97, v55, v43 - v54);
        if (v43 >= 9)
          goto LABEL_97;
        v30 = 15;
        v33 = v98;
        v29 = v99;
      }
      else
      {
        v30 = 15;
        v31 = v97;
      }
LABEL_127:
      v52 = v34-- <= 0;
    }
    while (!v52);
  }
  return result;
}

unint64_t *sub_1B68613F0(unint64_t *result, int a2, int a3, int a4, uint64_t a5)
{
  unint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;

  v8 = result;
  v9 = byte_1B6924ED0[a2];
  if (a2)
  {
    if (v9 <= 1)
      v10 = 1;
    else
      v10 = byte_1B6924ED0[a2];
    v11 = &byte_1B6924FE5[28 * (a4 > 0) - 2 + a3 + (a3 - 2) * a3];
    v12 = v10;
    do
    {
      v13 = *v11++;
      result = sub_1B67CC270(v8, 1, (_BYTE *)(a5 + v13));
      --v12;
    }
    while (v12);
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (v9 < byte_1B6924ED0[~(-1 << a3)])
    return sub_1B67CC270(v8, 0, (_BYTE *)(a5 + byte_1B6924FE5[28 * (a4 > 0) - 2 + (int)v10 + a3 + (a3 - 2) * a3]));
  return result;
}

unint64_t *sub_1B6861500(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, _BYTE *a6, int a7)
{
  int v12;
  _BOOL8 v13;
  int v14;
  int v15;
  int v16;
  unint64_t *result;

  if (a7)
  {
    v12 = *(_DWORD *)(a1 + 2056);
    v13 = v12 != 0;
    if (v12)
      v14 = -1;
    else
      v14 = 0;
    v15 = v14 - a4 + *(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2009);
    v16 = 1;
  }
  else
  {
    v13 = 0;
    *(_QWORD *)(a1 + 2216) = 0;
    *(_OWORD *)(a1 + 2184) = 0u;
    *(_OWORD *)(a1 + 2200) = 0u;
    *(_OWORD *)(a1 + 2152) = 0u;
    *(_OWORD *)(a1 + 2168) = 0u;
    *(_OWORD *)(a1 + 2136) = 0u;
    v15 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2009) - a4;
    v16 = 2 * (*(_BYTE *)(a1 + 2416) == 0);
  }
  *(_DWORD *)(a1 + 2420) = v16;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 2400) + 801))
    sub_1B685FC14(a1, a2, a3, v15, v13, 0);
  *(_DWORD *)(a1 + 2068) = *a5;
  *(_BYTE *)(a1 + 2064) = *a6;
  result = sub_1B685FFAC(a1, a2, a3, v15, v13, 0);
  *a5 = *(_DWORD *)(a1 + 2068);
  *a6 = *(_BYTE *)(a1 + 2064);
  return result;
}

uint64_t *sub_1B6861610(uint64_t *result, char a2, int a3, uint64_t a4, _BYTE *a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = result[1];
  v6 = a3 - 1;
  if (v5 < *(_QWORD *)(a4 + 24 * v6 + 8))
  {
    if (v5 >= *(_QWORD *)(a4 + 8))
    {
      v12 = a3 - 2;
      if (a3 >= 2)
      {
        while (v5 < *(_QWORD *)(a4 + 24 * v12 + 8))
        {
          v9 = (int)v12-- <= 0;
          if (v9)
            return result;
        }
        v13 = v12 + 1;
        if ((int)v6 > (int)v13)
        {
          do
          {
            v14 = a4 + 24 * (v6 - 1);
            v15 = a4 + 24 * v6;
            *(_DWORD *)(v15 + 16) = *(_DWORD *)(v14 + 16);
            *(_OWORD *)v15 = *(_OWORD *)v14;
            a5[v6] = a5[(v6 - 1)];
            LODWORD(v6) = v6 - 1;
          }
          while ((int)v6 > (int)v13);
          v5 = result[1];
        }
        v16 = *result;
        v17 = a4 + 24 * v13;
        *(_DWORD *)(v17 + 16) = *((_DWORD *)result + 4);
        *(_QWORD *)v17 = v16;
        *(_QWORD *)(v17 + 8) = v5;
        a5[v13] = a2;
      }
    }
    else
    {
      if (a3 >= 2)
      {
        v7 = v6;
        v8 = (_DWORD *)(a4 + 24 * v6 + 16);
        do
        {
          v9 = v7 > 1;
          v10 = a4 + 24 * (v7 - 1);
          *v8 = *(_DWORD *)(v10 + 16);
          *((_OWORD *)v8 - 1) = *(_OWORD *)v10;
          v8 -= 6;
          a5[v7] = a5[(v7 - 1)];
          --v7;
        }
        while (v9);
        v5 = result[1];
      }
      v11 = *result;
      *(_DWORD *)(a4 + 16) = *((_DWORD *)result + 4);
      *(_QWORD *)a4 = v11;
      *(_QWORD *)(a4 + 8) = v5;
      *a5 = a2;
    }
  }
  return result;
}

void *sub_1B6861738(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10, uint64_t a11)
{
  int v11;
  unsigned __int8 *v12;
  uint64_t v14;
  __int16 *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _BOOL4 v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, _QWORD, _QWORD, uint64_t, _QWORD);
  uint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  void *result;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 *v85;
  __int16 *v86;
  uint64_t v87;
  int v88;
  int v89;
  size_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  int v101;
  int v102;
  uint64_t v104;
  int v105;
  int v106;
  BOOL v107;
  unsigned __int8 *v108;
  char v109;
  unsigned __int8 v110;
  __int128 v111;
  int v112;
  __int16 v113;
  __int128 v114;
  int v115;
  __int16 v116;

  v11 = a5;
  v12 = a4;
  v14 = a2;
  v16 = 0;
  v17 = *(unsigned __int8 **)(a1 + 2384);
  v18 = v17[245];
  v19 = v17[2010];
  v20 = v17[2011];
  v21 = *(_DWORD *)(a1 + 2048) - (a8 == 3) - v18;
  if (v21 >= v20)
    v22 = v20;
  else
    v22 = *(_DWORD *)(a1 + 2048) - (a8 == 3) - v18;
  v23 = a9;
  if (v21 <= v19)
    v24 = v19;
  else
    v24 = v22;
  v26 = v20 >= (int)a5 || v24 >= (int)a5;
  v115 = 0;
  v114 = xmmword_1B6917860;
  v116 = 0;
  v112 = 0;
  v111 = xmmword_1B6917860;
  v113 = 0;
  v27 = a2 - *((_DWORD *)a4 + 1);
  if ((v27 & 0x80000000) == 0)
  {
    v28 = a3 - *((_DWORD *)a4 + 2);
    if ((v28 & 0x80000000) == 0)
    {
      v16 = 0;
      v29 = *a4;
      if (v27 < v29 && v28 < v29)
        v16 = (__int16 *)(*((_QWORD *)a4 + 11)
                        + 2 * ((v27 >> 3) + (v29 >> 3) * (unint64_t)(v28 >> 3)));
    }
  }
  v30 = a10;
  v31 = (unsigned __int8 *)*((_QWORD *)a4 + 18);
  v99 = **((unsigned __int8 **)a4 + 17);
  v95 = *(_DWORD *)(a1 + 2424);
  v97 = *(_DWORD *)(a1 + 2428);
  v98 = *((_QWORD *)v31 + 4);
  v96 = *v31;
  v110 = 0;
  v102 = a5;
  v101 = a6;
  if (v20 < (int)a5)
  {
    v94 = 0;
    v92 = -1;
    v93 = 0;
    if (v26)
      goto LABEL_57;
  }
  else
  {
    v107 = v26;
    if (a7 == 1)
    {
      v32 = 0;
    }
    else
    {
      v33 = 10 - a7;
      if (a7 >= 10)
        v33 = a7 - 10;
      v34 = 26 - a7;
      if (a7 >= 26)
        v34 = a7 - 26;
      if (v33 >= v34)
        v33 = v34;
      v32 = v33 > byte_1B6924F5D[(int)a5];
    }
    if (a6 >= 1)
    {
      v35 = *(_QWORD *)(a1 + 2400);
      v36 = *(unsigned int *)(a1 + 2432);
      v37 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, _QWORD, _QWORD, uint64_t, _QWORD))(v35 + 8160);
      v38 = *(_QWORD *)(v35 + 8168);
      v39 = (_QWORD *)(v35 + (v38 >> 1));
      if ((v38 & 1) != 0)
        v37 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, _QWORD, _QWORD, uint64_t, _QWORD))(*v39 + v37);
      v37(v39, a2, a3, v36, v12, a8, a9, a5, *((_QWORD *)v12 + 19));
      if (v32)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 2376) + 8 * v11 + 1416))(*((_QWORD *)v12 + 19), *((_QWORD *)v12 + 20));
    }
    v40 = (unsigned __int8 *)*((_QWORD *)v12 + 18);
    v41 = **((unsigned __int8 **)v12 + 17);
    v42 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 10) + 24))(*((_QWORD *)v40 + 10), *((_QWORD *)v40 + 11) - *(int *)(a1 + 2424) + (int)v14 + *v40 * ((int)a3 - (uint64_t)*(int *)(a1 + 2428)));
    v43 = &v12[8 * v32];
    v44 = v41;
    sub_1B67D57F4(*(_QWORD *)(a1 + 2376) + 1424, a7, v11, *((_QWORD *)v43 + 19), v41, v42);
    if (a11)
    {
      v45 = *(_QWORD *)(a1 + 2400);
      v46 = *(unsigned __int8 **)(v45 + 376);
      v104 = *v46;
      v47 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v46 + 10) + 24))(*((_QWORD *)v46 + 10), *((_QWORD *)v46 + 11));
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 8144))((1 << v11), (1 << v11), v44, v42, v104, v47);
    }
    v48 = **((unsigned __int8 **)v12 + 17);
    v49 = *(_QWORD *)(*((_QWORD *)v12 + 18) + 56)
        + 2
        * (**((unsigned __int8 **)v12 + 18) * ((int)a3 - (uint64_t)*(int *)(a1 + 2428)) - *(int *)(a1 + 2424) + (int)v14);
    v50 = *(_QWORD *)(a1 + 2400);
    *(_DWORD *)(v50 + 808) = v14;
    *(_DWORD *)(v50 + 812) = a3;
    v51 = (v14 - *((_DWORD *)v12 + 1));
    if ((v51 & 0x80000000) != 0
      || (v52 = a3 - *((_DWORD *)v12 + 2), (v52 & 0x80000000) != 0)
      || (v53 = *v12, v51 >= v53)
      || v52 >= v53)
    {
      v54 = v14;
      v55 = v42;
      v58 = 0;
      *(_QWORD *)(v50 + 864) = 0;
    }
    else
    {
      v54 = v14;
      v55 = v42;
      *(_QWORD *)(v50 + 864) = *((_QWORD *)v12 + 12)
                             + 16 * ((v51 >> 2) + (v53 >> 2) * (unint64_t)(v52 >> 2));
      v56 = v48;
      v57 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v12 + 3) + 24))(*((_QWORD *)v12 + 3), v51 + v12[1] * (unint64_t)v52 + *((_QWORD *)v12 + 4));
      v48 = v56;
      v58 = v57;
    }
    v59 = v48;
    sub_1B686350C(a1, v54, a3, v16, v58, v12[1], v55, v44, v55, v44, v49, v48, v102, &v110, 0);
    v60 = sub_1B6865CC8((_QWORD *)a1, v54, a3, v12, v55, v44, v49, v59, 1 << v102, &v115);
    v94 = v115;
    v92 = v114
        + v60
        + ((v115 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 2408) + 2 * v116 + 8)) >> (8 * (v116 == 0)));
    v93 = v114 + v60;
    if (a11)
    {
      v61 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 2400) + 376);
      v62 = *v61;
      v63 = *((_QWORD *)v61 + 7);
      v64 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v61 + 10) + 24))(*((_QWORD *)v61 + 10), *((_QWORD *)v61 + 11));
      v65 = 0;
      v109 = 0;
      v66 = (v54 - *((_DWORD *)v12 + 1));
      LODWORD(v14) = v54;
      if ((v66 & 0x80000000) != 0)
      {
        v11 = v102;
      }
      else
      {
        v67 = a3 - *((_DWORD *)v12 + 2);
        v11 = v102;
        if ((v67 & 0x80000000) == 0)
        {
          v65 = 0;
          v68 = *v12;
          if (v66 < v68 && v67 < v68)
            v65 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v12 + 3) + 24))(*((_QWORD *)v12 + 3), v66 + v12[1] * (unint64_t)v67 + *((_QWORD *)v12 + 4));
        }
      }
      sub_1B686350C(a1, v54, a3, v16, v65, v12[1], v64, v62, v64, v62, v63, v62, v11, &v109, 1);
      **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 2400) + 376) + 32) = v109;
      *(_QWORD *)a11 = sub_1B6865CC8((_QWORD *)a1, v54, a3, v12, v64, v62, v63, v62, 1 << v102, (_DWORD *)(a11 + 16));
      v30 = a10;
      v23 = a9;
      a6 = v101;
      if (v107)
        goto LABEL_57;
    }
    else
    {
      v30 = a10;
      v23 = a9;
      a6 = v101;
      v11 = v102;
      LODWORD(v14) = v54;
      if (v107)
        goto LABEL_57;
    }
  }
  v69 = 0;
  v70 = 1 << (v11 - 1);
  v106 = v70 + v14;
  v108 = v12;
  v105 = v70 + a3;
  v71 = (a6 + 1);
  do
  {
    v72 = v23;
    v73 = sub_1B683B42C(v23, v69, v106 < *(_DWORD *)(*(_QWORD *)(a1 + 2400) + 16), v105 < *(_DWORD *)(*(_QWORD *)(a1 + 2400) + 20));
    result = (void *)sub_1B6861738(a1, ((v69 & 1) << (v11 - 1)) + (int)v14, (v69 >> 1 << (v11 - 1)) + a3, v108, (v11 - 1), v71, a7, a8, v73, &v111, 0);
    v23 = v72;
    ++v69;
  }
  while (v69 != 4);
  v75 = v112;
  v76 = *(_QWORD *)(a1 + 2408);
  LOBYTE(v11) = v102;
  v30 = a10;
  LOBYTE(a6) = v101;
  v12 = v108;
  if ((unint64_t)v111
     + ((v112 * *(unsigned __int16 *)(v76 + 2 * v113 + 8)) >> (8 * (v113 == 0))) < v92)
  {
    v77 = *(_QWORD *)a10 + v111;
    *(_QWORD *)a10 = v77;
    v78 = *(_DWORD *)(a10 + 16) + v75;
    goto LABEL_65;
  }
LABEL_57:
  v79 = (char *)(v98 + ((uint64_t)((int)v14 - v95) >> 2) + (int)(v96 >> 2) * (uint64_t)(((int)a3 - v97) >> 2));
  *v16 = *v16 & 0xFFF3 | (4 * (a6 & 3));
  v80 = *v12;
  if (v80 >> a6 >= 8)
  {
    v81 = 0;
    v82 = v80 >> 3;
    v83 = v80 >> a6 >> 3;
    v84 = 2 * v82;
    v85 = v16;
    do
    {
      v86 = v85;
      v87 = v83;
      do
      {
        *v86++ = *v16;
        --v87;
      }
      while (v87);
      ++v81;
      v85 = (__int16 *)((char *)v85 + v84);
    }
    while (v81 != v83);
  }
  v88 = 1 << (v11 - 2);
  v89 = v110;
  v90 = v88;
  v91 = v88;
  do
  {
    --v91;
    result = memset(v79, v89, v90);
    v79 += v99 >> 2;
  }
  while (v91);
  v76 = *(_QWORD *)(a1 + 2408);
  v77 = *(_QWORD *)v30 + v93;
  *(_QWORD *)v30 = v77;
  v78 = *(_DWORD *)(v30 + 16) + v94;
LABEL_65:
  *(_DWORD *)(v30 + 16) = v78;
  *(_QWORD *)(v30 + 8) = v77
                       + ((v78 * *(unsigned __int16 *)(v76 + 2 * *(__int16 *)(v30 + 20) + 8)) >> (8 * (*(_WORD *)(v30 + 20) == 0)));
  return result;
}

__n128 sub_1B6861F44(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, int *a7, int a8)
{
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t i;
  _QWORD *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  int v45;
  int v46;
  int v47;
  char v48;

  v8 = a8;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v15 = *(__int128 **)(*(_QWORD *)(a1 + 2400) + 944);
  v16 = v15[10];
  v17 = v15[11];
  v18 = v15[8];
  *(__int128 *)((char *)v15 + 360) = v15[9];
  *(__int128 *)((char *)v15 + 376) = v16;
  *(__int128 *)((char *)v15 + 392) = v17;
  v19 = v15[6];
  v20 = v15[7];
  v21 = v15[4];
  *(__int128 *)((char *)v15 + 296) = v15[5];
  *(__int128 *)((char *)v15 + 312) = v19;
  *(__int128 *)((char *)v15 + 328) = v20;
  *(__int128 *)((char *)v15 + 344) = v18;
  v22 = *v15;
  *(__int128 *)((char *)v15 + 232) = v15[1];
  v23 = v15[3];
  *(__int128 *)((char *)v15 + 248) = v15[2];
  *(__int128 *)((char *)v15 + 264) = v23;
  *(__int128 *)((char *)v15 + 280) = v21;
  v48 = 0;
  *((_QWORD *)v15 + 51) = *((_QWORD *)v15 + 24);
  *(__int128 *)((char *)v15 + 216) = v22;
  v24 = 8 * (*((_DWORD *)v15 + 52) - *((_DWORD *)v15 + 6));
  *((_QWORD *)v15 + 4) = 0;
  *((_QWORD *)v15 + 1) = 510;
  *((_QWORD *)v15 + 2) = v24;
  v47 = *((_DWORD *)a5 + 5);
  v25 = *a7;
  if (*a7 == a6)
    goto LABEL_5;
  v26 = a7[1];
  if (v26 == a6)
  {
    v45 = 0;
    v46 = a8;
    v27 = a5;
    v28 = a3;
    v29 = a4;
    goto LABEL_6;
  }
  v30 = a7[2];
  if (v30 == a6)
  {
LABEL_5:
    v46 = a8;
    v27 = a5;
    v28 = a3;
    v29 = a4;
    v45 = 1;
LABEL_6:
    sub_1B67CC270((unint64_t *)v15, 1, (_BYTE *)v15 + 56);
    sub_1B67CC34C((unint64_t *)v15, v25 != v9);
    v11 = v29;
    v12 = v28;
    v10 = v27;
    v8 = v46;
    if (v25 != v9)
      sub_1B67CC34C((unint64_t *)v15, v45);
    goto LABEL_19;
  }
  if (v25 <= v26)
  {
    v31 = a7[1];
    v26 = *a7;
  }
  else
  {
    *a7 = v26;
    a7[1] = v25;
    v31 = v25;
  }
  if (v26 <= v30)
  {
    v26 = v30;
  }
  else
  {
    *a7 = v30;
    a7[2] = v26;
  }
  if (v31 > v26)
  {
    a7[1] = v26;
    a7[2] = v31;
  }
  for (i = 2; i != -1; --i)
    v9 -= v9 > a7[i];
  sub_1B67CC270((unint64_t *)v15, 0, (_BYTE *)v15 + 56);
  sub_1B67CC498((unint64_t *)v15, v9, 5);
LABEL_19:
  v33 = *(_QWORD **)(a1 + 2400);
  if (v8)
  {
    v34 = 0;
    v35 = (unsigned __int8 *)v33[47];
    v33[102] = *v35;
    v33[109] = *((_QWORD *)v35 + 7);
    *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 896) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2400) + 376) + 32);
    v36 = a2 - *((_DWORD *)v10 + 1);
    if ((v36 & 0x80000000) == 0)
    {
      v37 = v12 - *((_DWORD *)v10 + 2);
      if ((v37 & 0x80000000) == 0)
      {
        v34 = 0;
        v38 = *v10;
        if (v36 < v38 && v37 < v38)
          v34 = *(_QWORD *)(*((_QWORD *)v10 + 18) + 8)
              + (v36 >> 2)
              + ((unint64_t)**((unsigned __int8 **)v10 + 18) >> 2) * (v37 >> 2);
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 920) = v34;
  }
  else
  {
    sub_1B6841DFC((uint64_t)v33, a2, v12, v10, 1, 0, 0, 0, 1);
  }
  sub_1B6861500(a1, a2, v12, v11, &v47, &v48, 1);
  v39 = *(__int128 *)((char *)v15 + 392);
  v15[10] = *(__int128 *)((char *)v15 + 376);
  v15[11] = v39;
  *((_QWORD *)v15 + 24) = *((_QWORD *)v15 + 51);
  v40 = *(__int128 *)((char *)v15 + 328);
  v15[6] = *(__int128 *)((char *)v15 + 312);
  v15[7] = v40;
  v41 = *(__int128 *)((char *)v15 + 360);
  v15[8] = *(__int128 *)((char *)v15 + 344);
  v15[9] = v41;
  v42 = *(__int128 *)((char *)v15 + 264);
  v15[2] = *(__int128 *)((char *)v15 + 248);
  v15[3] = v42;
  v43 = *(__int128 *)((char *)v15 + 296);
  v15[4] = *(__int128 *)((char *)v15 + 280);
  v15[5] = v43;
  result = *(__n128 *)((char *)v15 + 232);
  *v15 = *(__int128 *)((char *)v15 + 216);
  v15[1] = (__int128)result;
  return result;
}

unint64_t *sub_1B6862264(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BOOL4 v31;
  _BOOL4 v32;
  int v33;
  int v34;
  void (*v35)(_QWORD *);
  uint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unint64_t v54;
  int v55;
  size_t v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  size_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  char *v102;
  char *v103;
  unsigned __int8 *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  char *v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unint64_t *result;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int16 *v148;
  __int16 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  uint64_t v158;
  uint64_t v159;
  char *__src;
  uint64_t v161;
  char *__dst;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  _BOOL4 v169;
  __int16 *v170;
  uint64_t v171;
  char *__b;
  uint64_t v173;
  int v174;
  char v176;
  unsigned int v177;
  unsigned int v179;
  uint64_t __len;
  uint64_t __n;
  uint64_t v183;
  uint64_t v184;
  int v185;
  _WORD __c[9];
  uint64_t v187;
  __int128 v188;
  int v189;
  __int16 v190;
  __int128 v191;
  uint64_t v192;
  _QWORD v193[2];
  void *v194;
  void *v195;
  _QWORD v196[2];
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[5];

  v10 = a5;
  v11 = a4;
  v12 = a3;
  v13 = a1;
  v14 = 0;
  v199[2] = *MEMORY[0x1E0C80C00];
  v15 = *(unsigned __int8 **)(a1 + 2384);
  v16 = v15[2011];
  v17 = *(_DWORD *)(a1 + 2048) - v15[245];
  if (v17 >= v16)
    v18 = v15[2011];
  else
    v18 = *(_DWORD *)(a1 + 2048) - v15[245];
  if (v17 <= v15[2010])
    v19 = v15[2010];
  else
    v19 = v18;
  v167 = v19;
  LODWORD(v192) = 0;
  v191 = xmmword_1B6917860;
  WORD2(v192) = 0;
  v189 = 0;
  v188 = xmmword_1B6917860;
  v190 = 0;
  v20 = a2 - *((_DWORD *)a4 + 1);
  if ((v20 & 0x80000000) == 0)
  {
    v21 = a3 - *((_DWORD *)a4 + 2);
    if ((v21 & 0x80000000) == 0)
    {
      v14 = 0;
      v22 = *a4;
      if (v20 < v22 && v21 < v22)
        v14 = *((_QWORD *)a4 + 11) + 2 * ((v20 >> 3) + (v22 >> 3) * (unint64_t)(v21 >> 3));
    }
  }
  v170 = (__int16 *)v14;
  v23 = a9;
  v24 = *(_QWORD **)(a1 + 2400);
  v25 = (__int128 *)v24[118];
  v26 = v15[2009];
  v27 = (1 << a5);
  v28 = *(_QWORD *)(a1 + 2392);
  if (*(_BYTE *)(v28 + 352))
  {
    v29 = *(unsigned __int8 *)(v28 + 353);
    v31 = a5 == 2 && v29 == 0;
    v169 = v31;
  }
  else
  {
    v169 = 0;
  }
  v168 = v26 - a5;
  v179 = a3;
  v177 = a2;
  v171 = (1 << a5);
  v155 = v16;
  if (v16 >= a5)
  {
    if ((_DWORD)a7 == 1)
    {
      v32 = 0;
    }
    else
    {
      v33 = 10 - a7;
      if ((int)a7 >= 10)
        v33 = a7 - 10;
      v34 = 26 - a7;
      if ((int)a7 >= 26)
        v34 = a7 - 26;
      if (v33 >= v34)
        v33 = v34;
      v32 = v33 > byte_1B6924F5D[a5];
    }
    v35 = (void (*)(_QWORD *))v24[1020];
    v36 = v24[1021];
    v37 = (_QWORD *)((char *)v24 + (v36 >> 1));
    v156 = a7;
    if ((v36 & 1) != 0)
      v35 = *(void (**)(_QWORD *))(*v37 + v35);
    v154 = a8;
    v35(v37);
    if (v32)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v13 + 2376) + 8 * v10 + 1416))(*((_QWORD *)a4 + 19), *((_QWORD *)a4 + 20));
    v195 = 0;
    __c[0] = 0;
    v193[0] = &v191;
    v193[1] = &__c[1];
    v39 = *(unsigned __int8 **)(*(_QWORD *)(v13 + 2400) + 32 * v168 + 216);
    v40 = *v39;
    v198 = 0;
    v199[0] = v40;
    v197 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v39 + 10) + 24))(*((_QWORD *)v39 + 10), *((_QWORD *)v39 + 11));
    v41 = *(unsigned __int8 **)(*(_QWORD *)(v13 + 2400) + 32 * v168 + 216);
    v42 = *v41;
    v196[0] = v42;
    __dst = (char *)*((_QWORD *)v41 + 7);
    v163 = v197;
    v194 = __dst;
    v164 = v40;
    sub_1B67D57F4(*(_QWORD *)(v13 + 2376) + 1424, v156, v10, *(_QWORD *)&a4[8 * v32 + 152], v40, v197);
    v44 = 0;
    v45 = *(_QWORD *)(v13 + 2400);
    a2 = v177;
    *(_DWORD *)(v45 + 808) = v177;
    *(_DWORD *)(v45 + 812) = v12;
    v46 = v177 - *((_DWORD *)a4 + 1);
    v11 = a4;
    if ((v46 & 0x80000000) == 0)
    {
      v47 = v12 - *((_DWORD *)a4 + 2);
      if ((v47 & 0x80000000) == 0)
      {
        v44 = 0;
        v48 = *a4;
        if (v46 < v48 && v47 < v48)
          v44 = *((_QWORD *)a4 + 12) + 16 * ((v46 >> 2) + (v48 >> 2) * (unint64_t)(v47 >> 2));
      }
    }
    *(_QWORD *)(v45 + 864) = v44;
    if (v169)
    {
      v49 = *(unsigned __int8 **)(v45 + 376);
      v50 = *v49;
      v196[1] = v50;
      __src = (char *)*((_QWORD *)v49 + 7);
      v195 = __src;
      v199[1] = v50;
      v198 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v49 + 10) + 24))(*((_QWORD *)v49 + 10), *((_QWORD *)v49 + 11));
      LODWORD(v187) = 0;
      *(_OWORD *)&__c[1] = xmmword_1B6917860;
      WORD2(v187) = 0;
      v159 = v198;
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 2400) + 8144))((1 << v10), (1 << v10), v164, v163, v50);
      v43 = v50;
      v11 = a4;
      a2 = v177;
      v45 = *(_QWORD *)(v13 + 2400);
    }
    else
    {
      v159 = 0;
      __src = 0;
    }
    v176 = 0;
    v51 = 0;
    v52 = (uint64_t)v25 + 40;
    v53 = *(unsigned __int8 **)(v45 + 32 * v168 + 216);
    v54 = (unint64_t)*v53 >> 2;
    v55 = 1;
    v166 = a5 - 2;
    v56 = 1 << v166;
    v57 = (__int128 *)((char *)v25 + 216);
    if (!a6)
      v52 = (uint64_t)v25 + 41;
    v165 = (_BYTE *)(v52 + 34);
    v161 = v43;
    v183 = 2 * v43;
    v184 = 2 * v42;
    v158 = (int)v27;
    __len = (uint64_t)(int)v27 >> 2;
    __n = 2 * (int)v27;
    __b = (char *)*((_QWORD *)v53 + 4);
    while (1)
    {
      v174 = v55;
      v58 = 0;
      v59 = (a2 - *((_DWORD *)v11 + 1));
      if ((v59 & 0x80000000) != 0)
      {
        v60 = v12;
      }
      else
      {
        v60 = v12;
        v61 = v12 - *((_DWORD *)v11 + 2);
        if ((v61 & 0x80000000) == 0)
        {
          v62 = *v11;
          if (v59 >= v62 || v61 >= v62)
          {
            v58 = 0;
          }
          else
          {
            v64 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v11 + 3) + 24))(*((_QWORD *)v11 + 3), v59 + v11[1] * (unint64_t)v61 + *((_QWORD *)v11 + 4));
            v11 = a4;
            a2 = v177;
            v58 = v64;
          }
        }
      }
      v65 = *(&v197 + v51);
      v66 = v199[v51];
      v173 = (uint64_t)*(&v194 + v51);
      sub_1B686350C(a1, a2, v60, v170, v58, v11[1], v65, v66, v65, v66, v173, v196[v51], a5, (_BYTE *)__c + v51, v176 & 1);
      if ((v176 & 1) != 0 && !*((_BYTE *)__c + v51))
        break;
      v67 = 0;
      v68 = *(_QWORD *)(a1 + 2408);
      v69 = a4;
      v70 = v177 - *((_DWORD *)a4 + 1);
      if ((v70 & 0x80000000) == 0)
      {
        v71 = v60 - *((_DWORD *)a4 + 2);
        if ((v71 & 0x80000000) == 0)
        {
          v67 = 0;
          v72 = *a4;
          if (v70 < v72 && v71 < v72)
          {
            v73 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)a4 + 3) + 24))(*((_QWORD *)a4 + 3), v70 + a4[1] * (unint64_t)v71 + *((_QWORD *)a4 + 4), 0);
            v69 = a4;
            v67 = v73;
          }
        }
      }
      v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 8 * v166 + 24))(v171, v171, v67, v69[1], v65, v66);
      v75 = v193[v51];
      *(_QWORD *)v75 = v74;
      v76 = *((unsigned __int8 *)__c + v51);
      v77 = 1 << v166;
      v78 = __b;
      do
      {
        --v77;
        memset(v78, v76, v56);
        v78 += v54;
      }
      while (v77);
      v79 = v25[11];
      *(__int128 *)((char *)v25 + 376) = v25[10];
      *(__int128 *)((char *)v25 + 392) = v79;
      *((_QWORD *)v25 + 51) = *((_QWORD *)v25 + 24);
      v80 = v25[7];
      *(__int128 *)((char *)v25 + 312) = v25[6];
      *(__int128 *)((char *)v25 + 328) = v80;
      v81 = v25[9];
      *(__int128 *)((char *)v25 + 344) = v25[8];
      *(__int128 *)((char *)v25 + 360) = v81;
      v82 = v25[3];
      *(__int128 *)((char *)v25 + 248) = v25[2];
      *(__int128 *)((char *)v25 + 264) = v82;
      v83 = v25[5];
      *(__int128 *)((char *)v25 + 280) = v25[4];
      *(__int128 *)((char *)v25 + 296) = v83;
      v84 = v25[1];
      *v57 = *v25;
      *(__int128 *)((char *)v25 + 232) = v84;
      v85 = 8 * (*((_DWORD *)v25 + 52) - *((_DWORD *)v25 + 6));
      *((_QWORD *)v25 + 4) = 0;
      *((_QWORD *)v25 + 1) = 510;
      *((_QWORD *)v25 + 2) = v85;
      if (v167 < a5)
        sub_1B67CC270((unint64_t *)v25, 0, (_BYTE *)v25 - a5 + 76);
      sub_1B67CC270((unint64_t *)v25, v76 != 0, v165);
      v12 = v179;
      v13 = a1;
      if (v76)
      {
        v86 = a5;
        if (a5 > 3)
          v87 = 0;
        else
          v87 = byte_1B6924C10[(int)v156];
        v88 = v177;
        v89 = __len;
        v90 = *(_QWORD *)(a1 + 2400);
        if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 352) && a5 >= 2)
        {
          v91 = *(unsigned __int8 **)(v90 + 32 * v168 + 216);
          v92 = (unint64_t)*v91 >> 2;
          v93 = (char *)*((_QWORD *)v91 + 1);
          v94 = __len;
          do
          {
            --v94;
            memset(v93, v51, v89);
            v89 = __len;
            v93 += v92;
          }
          while (v94);
          v13 = a1;
          v90 = *(_QWORD *)(a1 + 2400);
          v12 = v179;
          v88 = v177;
          v86 = a5;
        }
        *(_QWORD *)(v90 + 920) = *(_QWORD *)(*(_QWORD *)(v90 + 32 * v168 + 216) + 8);
        sub_1B6860C84(v13, v173, v88, v12, v86, v87, 0);
      }
      *(_DWORD *)(v75 + 16) = ((*((_DWORD *)v25 + 4) + 8 * (*((_DWORD *)v25 + 6) - *((_DWORD *)v25 + 52))) << 8)
                            - *((_DWORD *)v25 + 2)
                            + 510;
      v95 = *(__int128 *)((char *)v25 + 264);
      v25[2] = *(__int128 *)((char *)v25 + 248);
      v25[3] = v95;
      v96 = *(__int128 *)((char *)v25 + 328);
      v25[6] = *(__int128 *)((char *)v25 + 312);
      v25[7] = v96;
      v97 = *(__int128 *)((char *)v25 + 296);
      v25[4] = *(__int128 *)((char *)v25 + 280);
      v25[5] = v97;
      *((_QWORD *)v25 + 24) = *((_QWORD *)v25 + 51);
      v98 = *(__int128 *)((char *)v25 + 392);
      v25[10] = *(__int128 *)((char *)v25 + 376);
      v25[11] = v98;
      v99 = *(__int128 *)((char *)v25 + 360);
      v25[8] = *(__int128 *)((char *)v25 + 344);
      v25[9] = v99;
      v100 = *(__int128 *)((char *)v25 + 232);
      *v25 = *v57;
      v25[1] = v100;
      *(_QWORD *)(v75 + 8) = *(_QWORD *)v75
                           + ((*(_DWORD *)(v75 + 16)
                             * *(unsigned __int16 *)(*(_QWORD *)(v13 + 2408)
                                                                 + 2 * *(__int16 *)(v75 + 20)
                                                                 + 8)) >> (8 * (*(_WORD *)(v75 + 20) == 0)));
      if ((v176 & 1) == 0)
        goto LABEL_87;
      if (*((_QWORD *)&v191 + 1) <= *(_QWORD *)&__c[5])
        goto LABEL_82;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 2400) + 8144))(v171, v171, v161, v159, v164, v163);
      v191 = *(_OWORD *)&__c[1];
      v192 = v187;
      v101 = v158;
      v102 = __dst;
      v103 = __src;
      do
      {
        --v101;
        memcpy(v102, v103, __n);
        v102 += v184;
        v103 += v183;
      }
      while (v101);
LABEL_87:
      v176 = 1;
      v51 = 1;
      v55 = 0;
      a2 = v177;
      v11 = a4;
      if ((v174 & v169 & 1) == 0)
      {
        v27 = v171;
        v10 = a5;
        a8 = v154;
        a7 = v156;
        v23 = a9;
        goto LABEL_89;
      }
    }
    *(_QWORD *)&__c[5] = -1;
    v13 = a1;
LABEL_82:
    if (a5 >= 2)
    {
      v104 = *(unsigned __int8 **)(*(_QWORD *)(v13 + 2400) + 32 * v168 + 216);
      v105 = (unint64_t)*v104 >> 2;
      v106 = (char *)*((_QWORD *)v104 + 1);
      v107 = __len;
      do
      {
        --v107;
        bzero(v106, __len);
        v106 += v105;
      }
      while (v107);
    }
    v108 = LOBYTE(__c[0]);
    v109 = 1 << v166;
    v110 = __b;
    v12 = v179;
    do
    {
      --v109;
      memset(v110, v108, v56);
      v110 += v54;
    }
    while (v109);
    goto LABEL_87;
  }
LABEL_89:
  if (v167 >= v10)
    goto LABEL_96;
  v111 = 0;
  v112 = (v10 - 1);
  v113 = 1 << (v10 - 1);
  v114 = v113 + a2;
  v185 = v113 + v12;
  v115 = a2;
  v116 = v11;
  v117 = a8;
  v118 = a7;
  do
  {
    v119 = sub_1B683B42C(v23, v111, v114 < *(_DWORD *)(*(_QWORD *)(a1 + 2400) + 16), v185 < *(_DWORD *)(*(_QWORD *)(a1 + 2400) + 20));
    v13 = a1;
    LODWORD(v12) = v179;
    result = (unint64_t *)sub_1B6862264(a1, ((v111 & 1) << v112) + v115, (v111 >> 1 << v112) + v179, v116, v112, (a6 + 1), v118, v117, v119, &v188);
    v23 = a9;
    ++v111;
  }
  while (v111 != 4);
  v121 = v25[10];
  v122 = v25[11];
  v123 = v25[8];
  *(__int128 *)((char *)v25 + 360) = v25[9];
  *(__int128 *)((char *)v25 + 376) = v121;
  *(__int128 *)((char *)v25 + 392) = v122;
  v124 = v25[6];
  v125 = v25[7];
  v126 = v25[4];
  *(__int128 *)((char *)v25 + 296) = v25[5];
  *(__int128 *)((char *)v25 + 312) = v124;
  *(__int128 *)((char *)v25 + 328) = v125;
  *(__int128 *)((char *)v25 + 344) = v123;
  v127 = *v25;
  *(__int128 *)((char *)v25 + 232) = v25[1];
  v128 = v25[3];
  *(__int128 *)((char *)v25 + 248) = v25[2];
  *(__int128 *)((char *)v25 + 264) = v128;
  *(__int128 *)((char *)v25 + 280) = v126;
  *((_QWORD *)v25 + 51) = *((_QWORD *)v25 + 24);
  *(__int128 *)((char *)v25 + 216) = v127;
  v129 = *((_QWORD *)v25 + 26);
  v130 = *((_QWORD *)v25 + 3);
  v131 = 8 * ((int)v129 - (int)v130);
  *((_QWORD *)v25 + 4) = 0;
  v132 = 510;
  *((_QWORD *)v25 + 1) = 510;
  *((_QWORD *)v25 + 2) = v131;
  if (v155 >= a5)
  {
    result = sub_1B67CC270((unint64_t *)v25, 1, (_BYTE *)v25 - a5 + 76);
    v129 = *((_QWORD *)v25 + 26);
    v131 = *((_QWORD *)v25 + 2);
    v130 = *((_QWORD *)v25 + 3);
    v132 = *((_DWORD *)v25 + 2);
  }
  v11 = a4;
  v27 = v171;
  v133 = v189 - v132 + (((_DWORD)v131 + 8 * ((_DWORD)v130 - (_DWORD)v129)) << 8) + 510;
  v134 = *(__int128 *)((char *)v25 + 264);
  v25[2] = *(__int128 *)((char *)v25 + 248);
  v25[3] = v134;
  v135 = *(__int128 *)((char *)v25 + 328);
  v25[6] = *(__int128 *)((char *)v25 + 312);
  v25[7] = v135;
  v136 = *(__int128 *)((char *)v25 + 296);
  v25[4] = *(__int128 *)((char *)v25 + 280);
  v25[5] = v136;
  *((_QWORD *)v25 + 24) = *((_QWORD *)v25 + 51);
  v137 = *(__int128 *)((char *)v25 + 392);
  v25[10] = *(__int128 *)((char *)v25 + 376);
  v25[11] = v137;
  v138 = *(__int128 *)((char *)v25 + 360);
  v25[8] = *(__int128 *)((char *)v25 + 344);
  v25[9] = v138;
  v139 = *(__int128 *)((char *)v25 + 232);
  *v25 = *(__int128 *)((char *)v25 + 216);
  v25[1] = v139;
  v140 = *(_QWORD *)(a1 + 2408);
  if ((unint64_t)v188
     + ((v133 * *(unsigned __int16 *)(v140 + 2 * v190 + 8)) >> (8 * (v190 == 0))) >= *((_QWORD *)&v191 + 1))
  {
LABEL_96:
    *v170 = *v170 & 0xFFF3 | (4 * (a6 & 3));
    v143 = *v11;
    if (v143 >> a6 >= 8)
    {
      v144 = 0;
      v145 = v143 >> 3;
      v146 = v143 >> a6 >> 3;
      v147 = 2 * v145;
      v148 = v170;
      do
      {
        v149 = v148;
        v150 = v146;
        do
        {
          *v149++ = *v170;
          --v150;
        }
        while (v150);
        ++v144;
        v148 = (__int16 *)((char *)v148 + v147);
      }
      while (v144 != v146);
    }
    v151 = *(_QWORD *)(v13 + 2408);
    v152 = *(_QWORD *)a10 + v191;
    *(_QWORD *)a10 = v152;
    v153 = *(_DWORD *)(a10 + 16) + v192;
    *(_DWORD *)(a10 + 16) = v153;
    *(_QWORD *)(a10 + 8) = v152
                         + ((v153 * *(unsigned __int16 *)(v151 + 2 * *(__int16 *)(a10 + 20) + 8)) >> (8 * (*(_WORD *)(a10 + 20) == 0)));
    return (unint64_t *)sub_1B683ABA0(*(_QWORD *)(v13 + 2400), *((unsigned __int8 **)v11 + 18), *(unsigned __int8 **)(*(_QWORD *)(v13 + 2400) + 32 * (int)v168 + 216), v177 - *(_DWORD *)(v13 + 2424), (int)v12 - *(_DWORD *)(v13 + 2428), 0, 0, v27);
  }
  else
  {
    v141 = *(_QWORD *)a10 + v188;
    *(_QWORD *)a10 = v141;
    v142 = *(_DWORD *)(a10 + 16) + v133;
    *(_DWORD *)(a10 + 16) = v142;
    *(_QWORD *)(a10 + 8) = v141
                         + ((v142 * *(unsigned __int16 *)(v140 + 2 * *(__int16 *)(a10 + 20) + 8)) >> (8 * (*(_WORD *)(a10 + 20) == 0)));
  }
  return result;
}

uint64_t sub_1B6862EB0(uint64_t result, uint64_t a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, int a6, int a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  _BOOL4 v52;
  signed int v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD *, uint64_t, _QWORD, _QWORD, unsigned __int8 *, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v60;
  _QWORD *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __int16 *v68;
  __int16 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v80;
  int v81;
  int v83;
  _BOOL4 v84;
  unint64_t v85;
  signed int v86;
  uint64_t v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned __int8 v92;
  __int128 v93;
  int v94;
  __int16 v95;

  v10 = a8;
  v11 = a4;
  v14 = result;
  v15 = 0;
  v16 = a10;
  v17 = a9;
  v18 = *(unsigned __int8 **)(result + 2384);
  v19 = v18[2010];
  v20 = v18[2011];
  v21 = *(_DWORD *)(result + 2048) - ((_DWORD)a8 == 3) - v18[245];
  if (v21 >= v20)
    v22 = v18[2011];
  else
    v22 = *(_DWORD *)(result + 2048) - ((_DWORD)a8 == 3) - v18[245];
  if (v21 <= v19)
    v23 = v19;
  else
    v23 = v22;
  v24 = *(__int16 *)(a10 + 20);
  v94 = 0;
  v93 = xmmword_1B6917860;
  v80 = v24;
  v95 = v24;
  v25 = a2 - *((_DWORD *)a4 + 1);
  if ((v25 & 0x80000000) == 0)
  {
    v26 = a3 - *((_DWORD *)a4 + 2);
    if ((v26 & 0x80000000) == 0)
    {
      v15 = 0;
      v27 = *a4;
      if (v25 < v27 && v26 < v27)
        v15 = (__int16 *)(*((_QWORD *)a4 + 11)
                        + 2 * ((v25 >> 3) + (v27 >> 3) * (unint64_t)(v26 >> 3)));
    }
  }
  v92 = 0;
  v81 = v23;
  v83 = a6;
  if (v23 >= a6)
  {
    v33 = 0;
    v34 = 0;
    v35 = -1;
  }
  else
  {
    v76 = v20;
    v28 = 0;
    v29 = (a6 - 1);
    v30 = 1 << (a6 - 1);
    v88 = v30 + a2;
    v86 = v30 + a3;
    v90 = a8;
    v84 = a5 == 0;
    do
    {
      v31 = v17;
      v32 = sub_1B683B42C(v17, v28, v88 < *(_DWORD *)(*(_QWORD *)(v14 + 2400) + 16), v86 < *(_DWORD *)(*(_QWORD *)(v14 + 2400) + 20));
      result = sub_1B6862EB0(v14, ((v28 & 1) << v29) + (int)a2, (v28 >> 1 << v29) + a3, a4, v84, v29, (a7 + 1), v90, v32, &v93);
      v17 = v31;
      ++v28;
    }
    while (v28 != 4);
    a6 = v83;
    v20 = v76;
    if (v76 < v83)
      v33 = v94;
    else
      v33 = v94 + 1;
    v34 = v93;
    v35 = v93
        + ((v33 * *(unsigned __int16 *)(*(_QWORD *)(v14 + 2408) + 2 * v95 + 8)) >> (8 * (v95 == 0)));
    v11 = a4;
    v10 = v90;
  }
  if (v20 < a6)
    goto LABEL_60;
  v36 = (a2 - *((_DWORD *)v11 + 1));
  v37 = a3 - *((_DWORD *)v11 + 2);
  v89 = v33;
  v85 = v35;
  v87 = v34;
  if ((v36 & 0x80000000) != 0
    || (v37 & 0x80000000) != 0
    || (v38 = *v11, v36 >= v38)
    || v37 >= v38)
  {
    v39 = 0;
    v74 = 0;
    v75 = v11[1];
    v40 = **((unsigned __int8 **)v11 + 17);
  }
  else
  {
    v39 = (unsigned __int8 *)(*((_QWORD *)v11 + 12)
                            + 16 * ((v36 >> 2) + (v38 >> 2) * (unint64_t)(v37 >> 2)));
    v40 = **((unsigned __int8 **)v11 + 17);
    v75 = v11[1];
    v41 = v17;
    v42 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v11 + 3) + 24))(*((_QWORD *)v11 + 3), v36 + v75 * v37 + *((_QWORD *)v11 + 4));
    v17 = v41;
    a6 = v83;
    v74 = v42;
    LODWORD(v36) = a2 - *((_DWORD *)v11 + 1);
    v37 = a3 - *((_DWORD *)v11 + 2);
  }
  v43 = 0;
  v78 = a3;
  if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
  {
    v43 = 0;
    v44 = *v11;
    if (v36 < v44 && v37 < v44)
    {
      v45 = *(unsigned __int8 **)&v11[8 * a5 + 136];
      v46 = v17;
      v43 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v45 + 10) + 24))(*((_QWORD *)v45 + 10), *((_QWORD *)v45 + 11) + v36 + *v45 * (unint64_t)v37);
      v17 = v46;
      a6 = v83;
      LODWORD(v36) = a2 - *((_DWORD *)v11 + 1);
      v37 = a3 - *((_DWORD *)v11 + 2);
    }
  }
  v47 = 0;
  if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
  {
    v47 = 0;
    v48 = *v11;
    if (v36 < v48 && v37 < v48)
    {
      v49 = *(unsigned __int8 **)&v11[8 * a5 + 136];
      v47 = *((_QWORD *)v49 + 7) + 2 * (v36 + *v49 * (unint64_t)v37);
    }
  }
  v50 = (1 << a6);
  v51 = *v39;
  if (v51 == 1)
  {
    v52 = 0;
  }
  else
  {
    v53 = 10 - v51;
    if (v51 >= 0xA)
      v53 = v51 - 10;
    v54 = 26 - v51;
    v55 = v51 >= 0x1A;
    v56 = v51 - 26;
    if (!v55)
      v56 = v54;
    if (v53 < v56)
      v56 = v53;
    v52 = v56 > byte_1B6924F5D[a6];
  }
  v77 = v47;
  v57 = v43;
  if (a7 >= 1)
  {
    v58 = *(_QWORD *)(v14 + 2400);
    v59 = *(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, unsigned __int8 *, uint64_t, uint64_t, _QWORD, _QWORD))(v58 + 8160);
    v60 = *(_QWORD *)(v58 + 8168);
    v61 = (_QWORD *)(v58 + (v60 >> 1));
    if ((v60 & 1) != 0)
      v59 = *(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, unsigned __int8 *, uint64_t, uint64_t, _QWORD, _QWORD))(*v61 + v59);
    v59(v61, a2, v78, *(unsigned int *)(v14 + 2432), v11, v10, v17, v83, *((_QWORD *)v11 + 19));
    a6 = v83;
    if (v52)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v14 + 2376) + 8 * v83 + 1416))(*((_QWORD *)v11 + 19), *((_QWORD *)v11 + 20));
      a6 = v83;
    }
  }
  sub_1B67D57F4(*(_QWORD *)(v14 + 2376) + 1424, *v39, a6, *(_QWORD *)&a4[8 * v52 + 152], v40, v57);
  v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v14 + 2408)
                                                                                       + 8 * v83
                                                                                       + 88))(v50, v50, v74, v75, v57, v40);
  v63 = v62;
  v64 = *(unsigned __int16 *)(*(_QWORD *)(v14 + 2408) + 2 * v80 + 8);
  if (v81 >= v83)
    v64 = 0;
  v65 = (v64 >> (8 * ((_DWORD)v80 == 0))) + (unint64_t)v62;
  result = sub_1B686350C(v14, a2, v78, v15, v74, v75, v57, v40, v57, v40, v77, v40, v83, &v92, 0);
  v34 = v87;
  v55 = v65 >= v85;
  v11 = a4;
  v33 = v89;
  v16 = a10;
  if (v55)
  {
LABEL_60:
    *(int8x16_t *)(v11 + 136) = vextq_s8(*(int8x16_t *)(v11 + 136), *(int8x16_t *)(v11 + 136), 8uLL);
    v71 = *(_QWORD *)(v14 + 2408);
    v72 = *(_QWORD *)v16 + v34;
    *(_QWORD *)v16 = v72;
    v73 = *(_DWORD *)(v16 + 16) + v33;
  }
  else
  {
    *v15 = *v15 & 0xFFF3 | (4 * (a7 & 3));
    if ((int)v50 >= 8)
    {
      v66 = 0;
      v67 = 2 * ((unint64_t)*a4 >> 3);
      v68 = v15;
      do
      {
        v69 = v68;
        v70 = v50 >> 3;
        do
        {
          *v69++ = *v15;
          --v70;
        }
        while (v70);
        ++v66;
        v68 = (__int16 *)((char *)v68 + v67);
      }
      while (v66 != v50 >> 3);
    }
    result = (uint64_t)sub_1B688DE74(a4, a2, v78, (int)v50 >> 2, 0, v92, a5);
    v71 = *(_QWORD *)(v14 + 2408);
    v72 = *(_QWORD *)a10 + v63;
    *(_QWORD *)a10 = v72;
    v73 = *(_DWORD *)(a10 + 16) + (v81 < v83);
  }
  *(_DWORD *)(v16 + 16) = v73;
  *(_QWORD *)(v16 + 8) = v72
                       + ((v73 * *(unsigned __int16 *)(v71 + 2 * *(__int16 *)(v16 + 20) + 8)) >> (8 * (*(_WORD *)(v16 + 20) == 0)));
  return result;
}

uint64_t sub_1B686350C(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, _BYTE *a14, char a15)
{
  uint64_t v20;
  _BOOL4 v22;
  __int16 v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BOOL4 v28;

  LODWORD(v20) = 1 << a13;
  v22 = a13 == 2 && *(_DWORD *)(a1 + 2052) == 1;
  v28 = v22;
  sub_1B67D0230(*(_QWORD *)(a1 + 2376) + 1840, a5, a6, a7, a8, a1, a13, v22, a15);
  v23 = *a4;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 128))
  {
    v20 = (int)v20;
    result = sub_1B686370C(a1, a2, a3, (v23 >> 9), a1, (int)v20, a11, a12, a13, *(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2009) - ((v23 & 3) + a13), 0);
    *a14 = result;
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    v20 = (int)v20;
    result = sub_1B6864E4C(a1, a2, a3, (v23 >> 9), a1, (int)v20, a11, a12, a13, 0, 1);
    *a14 = result;
    if ((result & 1) == 0)
      return result;
  }
  sub_1B68652B4(a1, *a4, a11, a12, a1, v20, a13, 0);
  v25 = *(_QWORD *)(a1 + 2376);
  if (a15)
  {
    v26 = v25 + 8 * a13;
    (*(void (**)(uint64_t))(v25 + 1984))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 1976))(a9, a10, a1);
  }
  else
  {
    if (v28)
      v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 1848);
    else
      v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8 * a13 + 1840);
    return v27(a9, a10, a1, 1024);
  }
}

BOOL sub_1B686370C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, _BOOL4 a10, int a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  char v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  int v64;
  int v65;
  double v66;
  int v67;
  uint64_t v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  double v82;
  _BOOL4 v83;
  _BOOL4 v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  double *v89;
  __int128 *v90;
  BOOL v91;
  double v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  unsigned int v127;
  __int16 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  int v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  int v157;
  _BOOL4 v158;
  double v159;
  double v160;
  double v161;
  uint64_t v162;
  BOOL v163;
  int v164;
  uint64_t v165;
  int v166;
  double v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double *v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  BOOL v180;
  int v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  int v187;
  double v188;
  uint64_t v189;
  int v190;
  char v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  unsigned int v200;
  int v201;
  int v203;
  int v204;
  int v205;
  unsigned int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  unsigned int v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  __int16 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  int v244;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BOOL4 v250;
  _BOOL4 v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  double v256;
  uint64_t v257;
  double v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  int v262;
  int v263;
  __int128 *v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  int v273;
  int v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  int v280;
  unsigned int v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  double v288;
  unsigned int v289;
  unsigned int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  unsigned __int8 *v296;
  int v297;
  int v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  int v303;
  int v304;
  char v305;
  int v306;
  int v307;
  int v308;
  int v309;
  char v310;
  _BYTE v311[12];
  char *v312;
  int v313;
  uint64_t v314;
  unsigned int v315;
  double v316;
  double v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  int v331;
  int v332;
  unsigned __int8 *v333;
  uint64_t *v334;
  uint64_t v335;
  unsigned int v336;
  __int16 v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  char v343;
  uint64_t v344;
  int v345;
  int v346;
  uint64_t v347;
  int v348;
  int v349;
  unsigned int v350;
  double *v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  double v360[3072];
  int v361;
  int v362;
  _QWORD v363[975];
  _BYTE v364[8192];
  _QWORD v365[2420];

  v11 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v16 = v15;
  v18 = v17;
  v318 = v19;
  v320 = v20;
  v21 = v14;
  v22 = a9;
  v365[2418] = *MEMORY[0x1E0C80C00];
  v23 = 1;
  v361 = 0;
  if (((v13 | v12) & 0x80000000) == 0
    && ((v24 = *(_QWORD *)(v11 + 2400),
         v25 = v12 - *(_DWORD *)(v24 + 808),
         v26 = v13 - *(_DWORD *)(v24 + 812),
         v27 = *(unsigned __int8 *)(v24 + 804),
         v25 < v27)
      ? (v28 = v26 < v27)
      : (v28 = 0),
        v28))
  {
    v29 = (unsigned __int8 *)(*(_QWORD *)(v24 + 864) + 16 * (*(_QWORD *)(v24 + 840) * ((uint64_t)v26 >> 2) + (v25 >> 2)));
  }
  else
  {
    v29 = 0;
  }
  v363[0] = 0;
  v362 = 0;
  v347 = v11;
  sub_1B6865394(v11, v29, v14, a9, a11, (int *)v363 + 1, &v362, v363, &v361, 1);
  LODWORD(v30) = a9 - 2;
  if (a9 >= 2)
  {
    v31 = 1 << a9;
    v32 = 4 * v361;
    if (a9 != 3)
      v32 = 0;
    v33 = (char *)*(&off_1E6A17608 + v30) + v32;
    v34 = &byte_1B692C060[64 * (uint64_t)v361 + 16 * v30];
    v35 = v31 << a9;
    v333 = v34;
    v312 = v33;
    if (v31 << a9 <= 15)
    {
      v175 = 0;
      *(_DWORD *)v311 = 1 << v30;
      v176 = -1;
      LODWORD(v29) = -1;
      v52 = v320;
      v53 = v347;
      goto LABEL_161;
    }
    v296 = v29;
    v299 = v21;
    v300 = v18;
    v301 = v16;
    LODWORD(v36) = 0;
    *(_DWORD *)&v311[8] = 0;
    v37 = SHIDWORD(v363[0]) % 6;
    v38 = dbl_1B6924D50[24 * (SLODWORD(v363[0]) > 0) + 6 * v30 + v37];
    v39 = v362;
    v40 = 1 << (v362 - 1);
    v298 = v31 << a9;
    v41 = v35 >> 4;
    LODWORD(v29) = -1;
    v309 = ~(-1 << v30);
    *(_QWORD *)v311 = (1 << v30);
    v307 = *(_DWORD *)v311 - 1;
    v308 = 4 << a9;
    v42 = v31 - 1;
    v297 = v361;
    if (v361)
      v43 = 15;
    else
      v43 = 9;
    if (a9 == 3)
      v44 = 9;
    else
      v44 = 12;
    v304 = v44;
    v303 = ~(-1 << a9);
    if (a9 != 3)
      v43 = 21;
    v302 = v43;
    if (a11 <= 0)
      v45 = 0;
    else
      v45 = 27;
    v305 = v362 - 8;
    v306 = v45;
    v46 = word_1B6925024[v37];
    v47 = v40 ^ 0x7FFFFFFF;
    v48 = 0.0;
    v332 = 1;
    v49 = 0.0;
    LODWORD(v50) = -1;
    v51 = v318;
    v52 = v320;
    v53 = v347;
    v323 = 1 << (v362 - 1);
    v324 = v31 - 1;
    v343 = v362;
    v321 = v40 ^ 0x7FFFFFFF;
    v322 = v46;
LABEL_24:
    v54 = 16 * v41 - 16;
    v55 = v48;
LABEL_25:
    v356 = 0;
    v56 = 0;
    v325 = v41;
    v326 = 0;
    v57 = 0;
    v58 = v33[--v41];
    v59 = v58 >> v30;
    if ((int)(v307 & v58) >= v307)
      v60 = 0;
    else
      v60 = (*(_QWORD *)&v311[4] >> v58) & 2;
    v61 = (*(_QWORD *)&v311[4] >> (v311[0] + v58)) & 1;
    if (v59 >= v307)
      LODWORD(v61) = 0;
    if ((_DWORD)v41)
      v62 = a11 <= 0;
    else
      v62 = 0;
    v63 = v54 & 0xFFFFFFF0;
    v310 = v33[v41];
    v64 = v59 * v308 + 4 * (v58 & v309);
    v313 = v36;
    v314 = v60 | v61;
    if (v62)
      v65 = 2;
    else
      v65 = 0;
    v350 = v65 | (v332 == 0);
    v36 = (int)v36;
    v66 = 0.0;
    v67 = 1;
    v68 = 15;
    v69 = 0.0;
    v70 = 0.0;
    v332 = 1;
    v330 = v41;
    v329 = v64;
    v327 = v54 & 0xFFFFFFF0;
    v328 = v54;
    while (2)
    {
      v353 = v67;
      v331 = v57;
      v71 = v68;
      v340 = v36;
      while (1)
      {
        v72 = v34[v71];
        v73 = v72 + v64;
        v74 = (unsigned __int8 *)(v63 + v71);
        v75 = *(__int16 *)(v52 + 2 * (((int)v73 >> v22) * v51 + (int)(v73 & v42)));
        v76 = v75 >= 0 ? *(__int16 *)(v52 + 2 * (((int)v73 >> v22) * v51 + (int)(v73 & v42))) : -v75;
        v77 = v76 * v46;
        v78 = v77 >= v47 ? v47 : v77;
        v79 = v77 ? v78 : 0;
        v80 = (v79 + v40) >> v39;
        v81 = (__int16)v80;
        v82 = v38 * ((double)v79 * (double)v79);
        v49 = v49 + v82;
        *((_WORD *)&v363[1] + v73) = v80;
        v83 = (__int16)v80 > 0;
        v84 = (int)v29 < 0;
        v50 = v83 && v84 ? v41 : v50;
        v29 = v83 && v84 ? (unsigned __int8 *)v74 : (unsigned __int8 *)v29;
        if ((v29 & 0x80000000) == 0)
          break;
        v55 = v82 + v55;
        if (--v71 == -1)
        {
          if (!HIDWORD(v326))
          {
            v54 -= 16;
            LOBYTE(v30) = a9 - 2;
            v33 = v312;
            if (v325 > 1)
              goto LABEL_25;
            goto LABEL_159;
          }
LABEL_137:
          LOBYTE(v30) = a9 - 2;
          v33 = v312;
LABEL_138:
          v163 = (int)v29 >= 0;
          *(_QWORD *)&v311[4] |= 1 << v310;
          v48 = v55;
          goto LABEL_139;
        }
      }
      if (v22 == 2)
      {
        v85 = byte_1B6924F95[v73 + 64];
      }
      else if ((int)v73 < 1)
      {
        v85 = 0;
      }
      else
      {
        v86 = byte_1B6924F95[16 * v314 + (v72 & 3 | (4 * ((v73 >> v22) & 3)))];
        if (a11)
        {
          v85 = v304 + v86;
        }
        else
        {
          if ((v73 >> v22 >> 2) + ((v73 & v303) >> 2))
            v86 += 3;
          v85 = v86 + v302;
        }
      }
      v348 = (unsigned __int16)v75 >> 15;
      v87 = v80 << 16;
      v345 = v332 + 4 * v350;
      v88 = v85 + v306;
      v89 = &v360[v36];
      v89[1024] = v82;
      v334 = (uint64_t *)(v89 + 2048);
      v90 = *(__int128 **)(*(_QWORD *)(v53 + 2400) + 944);
      v89[2048] = 0.0;
      v91 = v80 << 16 > 0x20000 || v74 == v29;
      v315 = v88;
      v319 = v80 << 16;
      if (v91)
      {
        v339 = 0;
        v360[v36] = 1.79769313e308;
        v92 = 1.79769313e308;
      }
      else
      {
        v336 = v56;
        v93 = v90[10];
        v94 = v90[11];
        v95 = v90[8];
        *(__int128 *)((char *)v90 + 360) = v90[9];
        *(__int128 *)((char *)v90 + 376) = v93;
        *(__int128 *)((char *)v90 + 392) = v94;
        v96 = v90[6];
        v97 = v90[7];
        v98 = v90[4];
        *(__int128 *)((char *)v90 + 296) = v90[5];
        *(__int128 *)((char *)v90 + 312) = v96;
        *(__int128 *)((char *)v90 + 328) = v97;
        *(__int128 *)((char *)v90 + 344) = v95;
        v99 = *v90;
        *(__int128 *)((char *)v90 + 232) = v90[1];
        v100 = v90[3];
        *(__int128 *)((char *)v90 + 248) = v90[2];
        *(__int128 *)((char *)v90 + 264) = v100;
        *(__int128 *)((char *)v90 + 280) = v98;
        v101 = *((_DWORD *)v90 + 52) - *((_DWORD *)v90 + 6);
        *((_QWORD *)v90 + 51) = *((_QWORD *)v90 + 24);
        *(__int128 *)((char *)v90 + 216) = v99;
        *((_QWORD *)v90 + 4) = 0;
        *((_QWORD *)v90 + 1) = 510;
        *((_QWORD *)v90 + 2) = 8 * v101;
        sub_1B67CC270((unint64_t *)v90, 0, (_BYTE *)v90 + v88 + 123);
        v53 = v347;
        v102 = *(_QWORD *)(v347 + 2408);
        v103 = ((*((_DWORD *)v90 + 4) + 8 * (*((_DWORD *)v90 + 6) - *((_DWORD *)v90 + 52))) << 8)
             - *((_DWORD *)v90 + 2)
             + 510;
        v104 = *(unsigned __int16 *)(v102 + 8);
        if (a11)
          v105 = ((v104 * v103) << 15) / *(unsigned __int16 *)(v102 + 18);
        else
          v105 = (v104 * v103) << 7;
        v39 = v343;
        v106 = v340;
        v56 = v336;
        v87 = v319;
        v339 = v105;
        *v334 = v105;
        v107 = *(__int128 *)((char *)v90 + 392);
        v90[10] = *(__int128 *)((char *)v90 + 376);
        v90[11] = v107;
        *((_QWORD *)v90 + 24) = *((_QWORD *)v90 + 51);
        v108 = *(__int128 *)((char *)v90 + 328);
        v90[6] = *(__int128 *)((char *)v90 + 312);
        v90[7] = v108;
        v109 = *(__int128 *)((char *)v90 + 360);
        v90[8] = *(__int128 *)((char *)v90 + 344);
        v90[9] = v109;
        v110 = *(__int128 *)((char *)v90 + 264);
        v90[2] = *(__int128 *)((char *)v90 + 248);
        v90[3] = v110;
        v111 = *(__int128 *)((char *)v90 + 296);
        v90[4] = *(__int128 *)((char *)v90 + 280);
        v90[5] = v111;
        v112 = *(__int128 *)((char *)v90 + 232);
        *v90 = *(__int128 *)((char *)v90 + 216);
        v90[1] = v112;
        v92 = v82 + (double)v105;
        v360[v340] = v92;
        v34 = v333;
        v40 = v323;
        v42 = v324;
        v41 = v330;
        v47 = v321;
        v46 = v322;
        v64 = v329;
        v63 = v327;
        v54 = v328;
        if (!v319)
        {
          v128 = 0;
          goto LABEL_94;
        }
        v88 = v315;
      }
      if (v74 == v29)
      {
        v316 = v70;
        v113 = 0;
      }
      else
      {
        v114 = v56;
        v115 = v90[10];
        v116 = v90[11];
        v117 = v90[8];
        *(__int128 *)((char *)v90 + 360) = v90[9];
        *(__int128 *)((char *)v90 + 376) = v115;
        *(__int128 *)((char *)v90 + 392) = v116;
        v118 = v90[6];
        v119 = v90[7];
        v120 = v90[4];
        *(__int128 *)((char *)v90 + 296) = v90[5];
        *(__int128 *)((char *)v90 + 312) = v118;
        *(__int128 *)((char *)v90 + 328) = v119;
        *(__int128 *)((char *)v90 + 344) = v117;
        v121 = *v90;
        *(__int128 *)((char *)v90 + 232) = v90[1];
        v122 = v90[3];
        *(__int128 *)((char *)v90 + 248) = v90[2];
        *(__int128 *)((char *)v90 + 264) = v122;
        *(__int128 *)((char *)v90 + 280) = v120;
        v123 = *((_DWORD *)v90 + 52) - *((_DWORD *)v90 + 6);
        *((_QWORD *)v90 + 51) = *((_QWORD *)v90 + 24);
        *(__int128 *)((char *)v90 + 216) = v121;
        *((_QWORD *)v90 + 4) = 0;
        *((_QWORD *)v90 + 1) = 510;
        *((_QWORD *)v90 + 2) = 8 * v123;
        sub_1B67CC270((unint64_t *)v90, 1, (_BYTE *)v90 + v88 + 123);
        v53 = v347;
        v124 = *(_QWORD *)(v347 + 2408);
        v125 = ((*((_DWORD *)v90 + 4) + 8 * (*((_DWORD *)v90 + 6) - *((_DWORD *)v90 + 52))) << 8)
             - *((_DWORD *)v90 + 2)
             + 510;
        v126 = *(unsigned __int16 *)(v124 + 8);
        if (a11)
          v127 = ((v126 * v125) << 15) / *(unsigned __int16 *)(v124 + 18);
        else
          v127 = (v126 * v125) << 7;
        v39 = v343;
        v56 = v114;
        v87 = v319;
        v316 = v70;
        v129 = *(__int128 *)((char *)v90 + 392);
        v113 = v127;
        v90[10] = *(__int128 *)((char *)v90 + 376);
        v90[11] = v129;
        *((_QWORD *)v90 + 24) = *((_QWORD *)v90 + 51);
        v130 = *(__int128 *)((char *)v90 + 328);
        v90[6] = *(__int128 *)((char *)v90 + 312);
        v90[7] = v130;
        v131 = *(__int128 *)((char *)v90 + 360);
        v90[8] = *(__int128 *)((char *)v90 + 344);
        v90[9] = v131;
        v132 = *(__int128 *)((char *)v90 + 264);
        v90[2] = *(__int128 *)((char *)v90 + 248);
        v90[3] = v132;
        v133 = *(__int128 *)((char *)v90 + 296);
        v90[4] = *(__int128 *)((char *)v90 + 280);
        v90[5] = v133;
        v134 = *(__int128 *)((char *)v90 + 232);
        *v90 = *(__int128 *)((char *)v90 + 216);
        v90[1] = v134;
      }
      v317 = v69;
      if (v87 <= 0x10000)
        v135 = 1;
      else
        v135 = v81 - 1;
      if (v135 <= v81)
      {
        v337 = 0;
        do
        {
          v136 = (double)(v79 - (v81 << v39)) * (double)(v79 - (v81 << v39)) * v38;
          v137 = v56;
          sub_1B6865520(v53, (__int16)v81, v348, v345, v350, v356, v56, v353, a11);
          v139 = v136 + (double)v138 + (double)v113;
          if (v139 < v92)
          {
            v360[v340] = v139;
            *v334 = v113;
            v339 = v113;
            v92 = v136 + (double)v138 + (double)v113;
            v337 = v81;
          }
          v28 = v81-- <= v135;
          v53 = v347;
          v39 = v343;
          v56 = v137;
        }
        while (!v28);
      }
      else
      {
        v337 = 0;
      }
      v51 = v318;
      v34 = v333;
      v40 = v323;
      v42 = v324;
      v41 = v330;
      v47 = v321;
      v46 = v322;
      v106 = v340;
      v64 = v329;
      v63 = v327;
      v54 = v328;
      v70 = v316;
      v69 = v317;
      v128 = v337;
LABEL_94:
      v140 = v128;
      *((_WORD *)&v363[1] + v73) = v128;
      v22 = a9;
      if (*(_BYTE *)(*(_QWORD *)(v53 + 2392) + 129))
      {
        v365[v106 + 1330] = (v79 - (v128 << v39)) >> v305;
        if (v128)
        {
          v141 = v53;
          v338 = v56;
          sub_1B6865520(v53, v128, v348, v345, v350, v356, v56, v353, a11);
          v335 = v142;
          sub_1B6865520(v141, (__int16)(v140 + 1), v348, v345, v350, v356, v338, v353, a11);
          v365[v340 + 306] = v143 - v335;
          v144 = v340;
          sub_1B6865520(v347, (__int16)(v140 - 1), v348, v345, v350, v356, v338, v353, a11);
          v146 = v145 - v335;
          v147 = v364;
        }
        else
        {
          v144 = v106;
          v338 = v56;
          sub_1B6865520(v53, 1, v348, v345, v350, v356, v56, v353, a11);
          v147 = v365;
        }
        *(_QWORD *)&v147[8 * v144 + 2448] = v146;
        v106 = v144;
        if (v74 == v29)
        {
          v148 = 0;
          v34 = v333;
          v53 = v347;
        }
        else
        {
          v149 = v144;
          sub_1B686581C(*(__int128 **)(*(_QWORD *)(v347 + 2400) + 944), 1, v315);
          v151 = v150;
          sub_1B686581C(*(__int128 **)(*(_QWORD *)(v347 + 2400) + 944), 0, v315);
          v106 = v149;
          v53 = v347;
          v148 = v151 - v152;
          v34 = v333;
        }
        v40 = v323;
        v42 = v324;
        v39 = v343;
        v41 = v330;
        v47 = v321;
        v46 = v322;
        v64 = v329;
        v63 = v327;
        v54 = v328;
        v56 = v338;
        v363[v106 + 257] = v148;
      }
      v67 = v353;
      v153 = v353 + 2;
      if ((int)v56 >= 8)
        v153 = 1;
      v154 = v356;
      if (v356 >= 3)
        v155 = 3;
      else
        v155 = v356;
      if (3 << v356 < v140 && v153 <= v140)
        v154 = v155 + 1;
      v356 = v154;
      if (v140 < 1)
      {
        v57 = v331 + v339;
        v158 = v71 != 0;
        v159 = (double)v339;
        v161 = -0.0;
        if (!v71)
          v161 = (double)v339;
        v70 = v70 + v161;
        if (!v140)
        {
LABEL_128:
          v52 = v320;
          v36 = v106 + 1;
          v55 = v92 + v55;
          v68 = v71 - 1;
          if (v71)
            continue;
          v365[(int)v50 - (int)v41 + 2354] = 0;
          if (!(_DWORD)v41)
            goto LABEL_137;
          v162 = (int)v50 - (int)v41;
          if (HIDWORD(v326))
          {
            v33 = v312;
            if ((int)v50 < v325)
            {
              v52 = v320;
              LOBYTE(v30) = a9 - 2;
              goto LABEL_138;
            }
            v341 = v36;
            v166 = (int)((double)v57 - v70);
            v167 = 0.0;
            if (!(_DWORD)v326)
              v167 = v70;
            v168 = v55 - v167;
            if ((_DWORD)v326)
              v166 = v57;
            v357 = v166;
            v30 = v53;
            sub_1B6865914(v53, 1, v314, a11);
            v170 = v169;
            sub_1B6865914(v30, 0, v314, a11);
            v365[v162 + 2354] = v170;
            v55 = v168 + (double)v170;
            v48 = v168 + v69 + (double)v171 - v66 - (double)v357;
            LOBYTE(v30) = a9 - 2;
            if (v48 >= v55)
            {
              v52 = v320;
              v34 = v333;
              v53 = v347;
              v40 = v323;
              v42 = v324;
              v39 = v343;
              v41 = v330;
              v47 = v321;
              v46 = v322;
              LODWORD(v36) = v341;
              goto LABEL_138;
            }
            v365[v162 + 2354] = v171;
            v172 = 15;
            v34 = v333;
            v53 = v347;
            v40 = v323;
            v42 = v324;
            v39 = v343;
            v41 = v330;
            v47 = v321;
            v46 = v322;
            LODWORD(v36) = v341;
            do
            {
              v173 = v333[v172] + (uint64_t)v329;
              if (*((_WORD *)&v363[1] + v173))
              {
                *((_WORD *)&v363[1] + v173) = 0;
                v174 = &v360[v313];
                *v174 = v174[1024];
                v174[2048] = 0.0;
              }
              --v172;
              ++v313;
            }
            while (v172 != -1);
            v163 = 1;
            v52 = v320;
          }
          else
          {
            v164 = v36;
            sub_1B6865914(v53, 0, v314, a11);
            LODWORD(v36) = v164;
            v41 = v330;
            v40 = v323;
            v42 = v324;
            v39 = v343;
            v53 = v347;
            v34 = v333;
            v48 = v55 + (double)(v165 - v57);
            v365[v162 + 2354] = v165;
            v47 = v321;
            v46 = v322;
            v163 = 1;
            v52 = v320;
            LOBYTE(v30) = a9 - 2;
            v33 = v312;
          }
LABEL_139:
          if (v325 >= 2)
            goto LABEL_24;
          if (!v163)
          {
LABEL_159:
            v175 = 0;
            v176 = -1;
            v18 = v300;
            v16 = v301;
            goto LABEL_160;
          }
          if (v296[10] != 1)
          {
            if ((v296[11] & 1) != 0)
            {
              if (!__PAIR64__(a11, a10) && *(_DWORD *)(v53 + 2056))
                goto LABEL_250;
            }
            else if (!__PAIR64__(a11, a10))
            {
LABEL_250:
              v246 = v53;
              sub_1B6865A58(v53, 1);
              v248 = v247;
              sub_1B6865A58(v246, 0);
LABEL_258:
              v34 = v333;
              if ((v50 & 0x80000000) == 0)
              {
                v255 = 0;
                v256 = v49 + (double)v249;
                v257 = (16 * v50);
                v176 = -1;
                v258 = v48 + (double)v248;
                v259 = v50;
                v53 = v347;
                do
                {
                  v260 = v33[v259];
                  v342 = v259;
                  v258 = v258 - (double)(uint64_t)v365[v50 - v259 + 2354];
                  if (((*(_QWORD *)&v311[4] >> v260) & 1) != 0)
                  {
                    v346 = (v260 >> v30) * v308 + 4 * (v260 & v309);
                    v261 = 15;
                    v344 = v257;
                    while (1)
                    {
                      v262 = v257 + v261;
                      if ((int)v257 + (int)v261 <= (int)v29)
                      {
                        v263 = v346 + v34[v261];
                        if (*((_WORD *)&v363[1] + v263))
                        {
                          v349 = v255;
                          v351 = &v360[v255];
                          v355 = *((__int16 *)&v363[1] + v263);
                          v359 = v176;
                          v264 = *(__int128 **)(*(_QWORD *)(v53 + 2400) + 944);
                          v265 = v264[10];
                          v266 = v264[11];
                          v267 = v264[8];
                          *(__int128 *)((char *)v264 + 360) = v264[9];
                          *(__int128 *)((char *)v264 + 376) = v265;
                          *(__int128 *)((char *)v264 + 392) = v266;
                          v268 = v264[6];
                          v269 = v264[7];
                          v270 = v264[4];
                          *(__int128 *)((char *)v264 + 296) = v264[5];
                          *(__int128 *)((char *)v264 + 312) = v268;
                          *(__int128 *)((char *)v264 + 328) = v269;
                          *(__int128 *)((char *)v264 + 344) = v267;
                          v271 = *v264;
                          *(__int128 *)((char *)v264 + 232) = v264[1];
                          v272 = v264[3];
                          *(__int128 *)((char *)v264 + 248) = v264[2];
                          *(__int128 *)((char *)v264 + 264) = v272;
                          *(__int128 *)((char *)v264 + 280) = v270;
                          v273 = v263 & v303;
                          v274 = v263 >> a9;
                          if (v297 == 2)
                            v275 = v274;
                          else
                            v275 = v273;
                          if (v297 == 2)
                            v276 = v273;
                          else
                            v276 = v274;
                          *((_QWORD *)v264 + 51) = *((_QWORD *)v264 + 24);
                          *(__int128 *)((char *)v264 + 216) = v271;
                          v277 = 8 * (*((_DWORD *)v264 + 52) - *((_DWORD *)v264 + 6));
                          *((_QWORD *)v264 + 4) = 0;
                          *((_QWORD *)v264 + 1) = 510;
                          *((_QWORD *)v264 + 2) = v277;
                          sub_1B68613F0((unint64_t *)v264, v275, a9, a11, (uint64_t)v264 + 83);
                          sub_1B68613F0((unint64_t *)v264, v276, a9, a11, (uint64_t)v264 + 101);
                          if ((unint64_t)(v275 - 4) <= 0x1B)
                            sub_1B67CC498((unint64_t *)v264, v275 - byte_1B6924EF0[byte_1B6924ED0[v275]], (byte_1B6924ED0[v275] - 2) >> 1);
                          if ((unint64_t)(v276 - 4) <= 0x1B)
                            sub_1B67CC498((unint64_t *)v264, v276 - byte_1B6924EF0[byte_1B6924ED0[v276]], (byte_1B6924ED0[v276] - 2) >> 1);
                          v53 = v347;
                          v278 = *(_QWORD *)(v347 + 2408);
                          v279 = ((*((_DWORD *)v264 + 4) + 8 * (*((_DWORD *)v264 + 6) - *((_DWORD *)v264 + 52))) << 8)
                               - *((_DWORD *)v264 + 2)
                               + 510;
                          v280 = *(unsigned __int16 *)(v278 + 8);
                          v34 = v333;
                          v176 = v359;
                          if (a11)
                            v281 = ((v280 * v279) << 15) / *(unsigned __int16 *)(v278 + 18);
                          else
                            v281 = (v280 * v279) << 7;
                          v52 = v320;
                          v282 = *(__int128 *)((char *)v264 + 392);
                          v264[10] = *(__int128 *)((char *)v264 + 376);
                          v264[11] = v282;
                          *((_QWORD *)v264 + 24) = *((_QWORD *)v264 + 51);
                          v283 = *(__int128 *)((char *)v264 + 328);
                          v264[6] = *(__int128 *)((char *)v264 + 312);
                          v264[7] = v283;
                          v284 = *(__int128 *)((char *)v264 + 360);
                          v264[8] = *(__int128 *)((char *)v264 + 344);
                          v264[9] = v284;
                          v285 = *(__int128 *)((char *)v264 + 264);
                          v264[2] = *(__int128 *)((char *)v264 + 248);
                          v264[3] = v285;
                          v286 = *(__int128 *)((char *)v264 + 296);
                          v264[4] = *(__int128 *)((char *)v264 + 280);
                          v264[5] = v286;
                          v287 = *(__int128 *)((char *)v264 + 232);
                          *v264 = *(__int128 *)((char *)v264 + 216);
                          v264[1] = v287;
                          v288 = v258 + (double)v281 - (double)*((uint64_t *)v351 + 2048);
                          if (v288 < v256)
                            v176 = v262;
                          if (v355 > 1)
                          {
                            LOBYTE(v30) = a9 - 2;
                            v33 = v312;
                            goto LABEL_291;
                          }
                          v255 = v349;
                          if (v288 < v256)
                            v256 = v258 + (double)v281 - (double)*((uint64_t *)v351 + 2048);
                          v258 = v258 - v360[v349] + v360[v349 + 1024];
                          LOBYTE(v30) = a9 - 2;
                          v33 = v312;
                          v257 = v344;
                        }
                        else
                        {
                          v258 = v258 - (double)*(uint64_t *)&v360[v255 + 2048];
                          LOBYTE(v30) = a9 - 2;
                          v33 = v312;
                        }
                        ++v255;
                      }
                      if (--v261 == -1)
                        goto LABEL_288;
                    }
                  }
                  v255 += 16;
LABEL_288:
                  v257 -= 16;
                  v259 = v342 - 1;
                }
                while (v342 > 0);
LABEL_291:
                v35 = v298;
                v21 = v299;
                v31 = 1 << a9;
                v175 = 0;
                if (v176 < 0)
                {
                  v18 = v300;
                  v16 = v301;
                  LOBYTE(v22) = a9;
                }
                else
                {
                  v289 = 0;
                  LOBYTE(v22) = a9;
                  v18 = v300;
                  v16 = v301;
                  do
                  {
                    v290 = v33[(unint64_t)v289 >> 4];
                    v291 = v34[v289 & 0xF] + 4 * ((*(_DWORD *)v311 + 255) & v290) + (v290 >> v30) * (4 << a9);
                    v292 = v291 >> a9;
                    v293 = v292 * v318 + (v291 & v324);
                    v294 = v292 * v301 + (v291 & v324);
                    v295 = *((__int16 *)&v363[1] + v291);
                    v175 += v295;
                    if (*(__int16 *)(v52 + 2 * v293) < 0)
                      v295 = -v295;
                    *(_WORD *)(v300 + 2 * v294) = v295;
                    ++v289;
                  }
                  while (v176 + 1 != v289);
                }
LABEL_161:
                v177 = v176 + 1;
                if (v176 + 1 < v35)
                {
                  do
                  {
                    if (v177 <= 0)
                      v178 = -(-v177 & 0xF);
                    else
                      v178 = v177 & 0xF;
                    v179 = v34[v178]
                         + 4 * ((v311[0] - 1) & v33[v177 >> 4])
                         + (v33[v177 >> 4] >> v30) * (4 << v22);
                    *(_WORD *)(v18 + 2 * ((v179 >> v22) * v16 + (v179 & (v31 - 1)))) = 0;
                    ++v177;
                  }
                  while (v35 != v177);
                }
                if (*(_BYTE *)(*(_QWORD *)(v53 + 2392) + 129))
                  v180 = v175 < 2;
                else
                  v180 = 1;
                if (v180)
                  return v176 >= 0;
                v181 = *(unsigned __int8 *)(*(_QWORD *)(v53 + 2384) + 2001) + v21;
                v182 = *(_QWORD *)(v53 + 2408);
                if (v181 >= 63)
                  v183 = 63;
                else
                  v183 = *(unsigned __int8 *)(*(_QWORD *)(v53 + 2384) + 2001) + v21;
                v184 = v183 & ~(v183 >> 31);
                if (a11)
                {
                  v185 = word_1B6923BA8[512 * (unint64_t)*(unsigned __int8 *)(v182 + 23)
                                      + 64 * (unint64_t)*(unsigned __int8 *)(v182 + 22)
                                      + v184];
                  if (v176 < 0)
                    return v176 >= 0;
                }
                else
                {
                  v185 = dword_1B6923630[70 * *(unsigned __int8 *)(v182 + 22) + v184];
                  if (v176 < 0)
                    return v176 >= 0;
                }
                v186 = v181 / 6;
                v187 = a39H[v181 % 6];
                v188 = (float)((float)((v187 * v187) << (2 * v186)) / (float)v185) * 0.0625 + 0.5;
                v189 = v176 >> 4;
                v190 = (_DWORD)v29 - v176;
                v191 = ~(-1 << v30);
                v192 = 4 << v22;
                v193 = ~(-1 << v22);
                v194 = (uint64_t)v188;
                v195 = v189;
                v358 = v176;
                v354 = ~(-1 << v30);
                v352 = 4 << v22;
                while (1)
                {
                  v196 = 0;
                  v197 = 0;
                  v198 = (v33[v195] >> v30) * v192 + 4 * (v33[v195] & v191);
                  v199 = 16;
                  v200 = -1;
                  do
                  {
                    v201 = *(unsigned __int16 *)(v18
                                               + 2
                                               * (((v198 + v34[v196]) & v193)
                                                + ((v198 + v34[v196]) >> v22) * v16));
                    if (v199 == 16 && v201 != 0)
                      v199 = v196;
                    v203 = (__int16)v201;
                    if ((v201 & 0x8000u) != 0)
                      v203 = -(__int16)v201;
                    v204 = v197 + v203;
                    if (*(_WORD *)(v18
                                  + 2 * (((v198 + v34[v196]) & v193) + ((v198 + v34[v196]) >> v22) * v16)))
                    {
                      v200 = v196;
                      v197 = v204;
                    }
                    ++v196;
                  }
                  while (v196 != 16);
                  if ((int)(v200 - v199) > 3)
                  {
                    v205 = v198 + v34[v199];
                    v206 = *(unsigned __int16 *)(v18 + 2 * ((v205 & v193) + (v205 >> v22) * v16));
                    if ((v197 & 1) != v206 >> 15)
                      break;
                  }
                  if (v195 == v189)
                    v207 = v200 + 1;
                  else
                    v207 = 16;
                  v190 += v207;
LABEL_244:
                  v28 = v195-- <= 0;
                  if (v28)
                    return v176 >= 0;
                }
                if (v195 == v189)
                  v208 = v200;
                else
                  v208 = 15;
                if ((v208 & 0x80000000) != 0)
                {
                  v211 = 0;
                  v219 = -1;
LABEL_234:
                  v236 = v219 & v193;
                  v237 = v219 >> v22;
                  v238 = v236 + v237 * v16;
                  v239 = *(__int16 *)(v18 + 2 * v238);
                  v240 = v236 + v237 * v318;
                  if (v239 >= 0)
                    LOWORD(v241) = *(_WORD *)(v18 + 2 * v238);
                  else
                    v241 = -v239;
                  v242 = *(__int16 *)(v52 + 2 * v240);
                  if ((unsigned __int16)v241 == 0x7FFF)
                    v243 = -1;
                  else
                    v243 = v211;
                  if (v242 >= 0)
                    LOWORD(v244) = v243;
                  else
                    v244 = -v243;
                  *(_WORD *)(v18 + 2 * v238) = v244 + v239;
                  goto LABEL_244;
                }
                v209 = v16;
                v210 = 0;
                v211 = 0;
                v212 = v199;
                v213 = v206 >> 15;
                v214 = &v363[v190 + 257];
                v215 = &v365[v190 + 306];
                v217 = v208 - v199;
                v218 = 0x7FFFFFFFFFFFFFFFLL;
                v219 = -1;
                v220 = v208;
                v221 = v208 - v200;
                while (1)
                {
                  v222 = v198 + v34[v220];
                  v223 = v222 & v193;
                  v224 = v222 >> a9;
                  v225 = *(_WORD *)(v18 + 2 * (v223 + v224 * v209));
                  v216 = &v365[v190 + 1330];
                  v226 = v216[v210];
                  if (v225)
                  {
                    v227 = v226 * v194;
                    v228 = v227 + (*(_QWORD *)&v364[8 * v190 + 2448 + 8 * v210] << 7);
                    LOWORD(v229) = v225;
                    if (v225 < 0)
                      v229 = -v225;
                    if ((unsigned __int16)v229 == 1)
                      v228 = v228 - (v214[v210] << 7) - 0x8000;
                    v230 = (v215[v210] << 7) - v227;
                    if ((unsigned __int16)v229 == 1 && v221 == v210 && v195 == v189)
                      v228 -= 0x20000;
                    if (v230 >= v228)
                    {
                      if ((unsigned __int16)v229 == 1 && v217 == v210)
                        v230 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v230 = v228;
                      v234 = -1;
                      goto LABEL_228;
                    }
                  }
                  else
                  {
                    if (v226 >= 0)
                      v235 = v216[v210];
                    else
                      v235 = -v226;
                    v230 = (v215[v210] << 7) - v235 * v194 + (v214[v210] << 7);
                    if (v220 < v212 && v213 != *(unsigned __int16 *)(v320 + 2 * (v223 + v224 * v318)) >> 15)
                      v230 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  v234 = 1;
LABEL_228:
                  v34 = v333;
                  if (v230 < v218)
                  {
                    v218 = v230;
                    v211 = v234;
                    v219 = v222;
                  }
                  ++v210;
                  v28 = v220-- <= 0;
                  if (v28)
                  {
                    v190 += v208 + 1;
                    v16 = v209;
                    v52 = v320;
                    LOBYTE(v22) = a9;
                    LOBYTE(v30) = a9 - 2;
                    v33 = v312;
                    v176 = v358;
                    v191 = v354;
                    v192 = v352;
                    goto LABEL_234;
                  }
                }
              }
              v175 = 0;
              v176 = -1;
              v18 = v300;
              v16 = v301;
              v53 = v347;
LABEL_160:
              v35 = v298;
              v21 = v299;
              v31 = 1 << a9;
              goto LABEL_161;
            }
          }
          v250 = v22 > 2 && a10;
          if (a11)
            v251 = v250;
          else
            v251 = !a10;
          v252 = v53;
          sub_1B6865B88(v53, 1, v251, a11);
          v248 = v253;
          v254 = v251;
          v52 = v320;
          sub_1B6865B88(v252, 0, v254, a11);
          goto LABEL_258;
        }
      }
      else
      {
        v56 = (v56 + 1);
        if ((v332 - 1) >= 2)
          v157 = v332;
        else
          v157 = v332 + 1;
        if (v140 != 1)
          v157 = 0;
        v332 = v157;
        if (v140 != 1)
          v67 = 0;
        v57 = v331 + v339;
        v158 = v71 != 0;
        v159 = (double)v339;
        v160 = -0.0;
        if (!v71)
          v160 = (double)v339;
        v70 = v70 + v160;
      }
      break;
    }
    v69 = v69 + v82;
    v66 = v66 + v92 - v159;
    LODWORD(v326) = v326 + v158;
    HIDWORD(v326) = 1;
    goto LABEL_128;
  }
  return v23;
}

uint64_t sub_1B6864E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, char a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t result;
  int v34;
  char *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v49;
  int v50;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  signed int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  _BOOL4 v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  char v75;
  char *v76;
  uint64_t v77;
  int v78;
  int v79;
  _QWORD v80[515];

  v11 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = v11;
  v80[513] = *MEMORY[0x1E0C80C00];
  v78 = 0;
  if (((v13 | v12) & 0x80000000) == 0
    && ((v24 = *(_QWORD *)(v11 + 2400),
         v25 = v12 - *(_DWORD *)(v24 + 808),
         v26 = v13 - *(_DWORD *)(v24 + 812),
         v27 = *(unsigned __int8 *)(v24 + 804),
         v25 < v27)
      ? (v28 = v26 < v27)
      : (v28 = 0),
        v28))
  {
    v29 = (unsigned __int8 *)(*(_QWORD *)(v24 + 864) + 16 * (*(_QWORD *)(v24 + 840) * ((uint64_t)v26 >> 2) + (v25 >> 2)));
  }
  else
  {
    v29 = 0;
  }
  v80[0] = 0;
  v79 = 0;
  sub_1B6865394(v11, v29, v14, a9, a10, (int *)v80 + 1, &v79, v80, &v78, a11);
  if (*(_BYTE *)(*(_QWORD *)(v23 + 2376) + 10) == 2)
    v30 = 171;
  else
    v30 = 85;
  v31 = a9 - 2;
  v32 = 1 << a9;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(v23 + 8 * v31 + 2280))((1 << a9), (v30 << (v79 - 9)));
  if (a11 && *(_BYTE *)(*(_QWORD *)(v23 + 2392) + 129))
  {
    v74 = result;
    v77 = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *, char *))(v23 + 8 * (a9 > 2) + 2224))((1 << a9), v16, v18, &v77, (char *)&v77 + 4);
    if (HIDWORD(v77) >= 2)
    {
      v34 = 4 * v78;
      if (a9 != 3)
        v34 = 0;
      if (v32 << a9 >= 16)
      {
        v35 = (char *)*(&off_1E6A17608 + v31) + v34;
        v36 = &byte_1B692C060[64 * (uint64_t)v78 + 16 * v31];
        v37 = (v32 << a9) >> 4;
        v38 = ~(-1 << v31);
        v39 = v32 - 1;
        v40 = -1;
        v76 = v35;
        v75 = v38;
        do
        {
          v41 = 0;
          v42 = 0;
          v43 = v37--;
          v44 = (v35[v37] >> v31) * (4 << a9)
              + 4 * (v35[v37] & v38);
          LODWORD(v45) = 16;
          v46 = -1;
          do
          {
            v47 = *(unsigned __int16 *)(v18 + 2 * (((v44 + v36[v41]) >> a9) * v16 + ((v44 + v36[v41]) & v39)));
            if ((_DWORD)v45 != 16 || v47 == 0)
              v45 = v45;
            else
              v45 = v41;
            v49 = (__int16)v47;
            if ((v47 & 0x8000u) != 0)
              v49 = -(__int16)v47;
            v50 = v42 + v49;
            if (*(_WORD *)(v18 + 2 * (((v44 + v36[v41]) >> a9) * v16 + ((v44 + v36[v41]) & v39))))
            {
              v46 = v41;
              v42 = v50;
            }
            ++v41;
          }
          while (v41 != 16);
          if (v40 == -1 && v46 > -1)
            v40 = v37;
          if (v46 - (int)v45 > 3)
          {
            v52 = v44 + v36[(int)v45];
            v53 = *(unsigned __int16 *)(v18 + 2 * ((v52 >> a9) * v16 + (v52 & v39)));
            if ((v42 & 1) != v53 >> 15)
            {
              v54 = 0;
              if (v40 == (_DWORD)v37)
                v55 = v46;
              else
                v55 = 15;
              if ((v55 & 0x80000000) == 0)
              {
                v56 = 0;
                v57 = v53 >> 15;
                v58 = 0x80000000;
                v59 = -1;
                while (1)
                {
                  v60 = v44 + v36[v55];
                  v61 = v60 >> a9;
                  LOWORD(v62) = *(_WORD *)(v18 + 2 * (v61 * v16 + (v60 & v39)));
                  v63 = *((_DWORD *)&v80[16 * v61 + 1] + (v60 & v39));
                  if ((_WORD)v62)
                  {
                    if (v63 <= 0)
                    {
                      v64 = v45 == v55;
                      if ((v62 & 0x8000u) != 0)
                        v62 = -(__int16)v62;
                      v65 = (unsigned __int16)v62 == 1;
                      if (v64 && v65)
                        v63 = 0x80000000;
                      else
                        v63 = -v63;
                      if (!v64 || !v65)
                        v56 = -1;
                      goto LABEL_55;
                    }
                  }
                  else if (v55 < (int)v45 && v57 != *(unsigned __int16 *)(v22 + 2 * ((v60 & v39) + v61 * v20)) >> 15)
                  {
                    v63 = 0x80000000;
                  }
                  v56 = 1;
LABEL_55:
                  if (v63 > v58)
                  {
                    v58 = v63;
                    v54 = v56;
                    v59 = v44 + v36[v55];
                  }
                  v28 = v55-- <= 0;
                  if (v28)
                    goto LABEL_61;
                }
              }
              v59 = -1;
LABEL_61:
              v66 = v59 >> a9;
              v67 = v66 * v16 + (v59 & v39);
              v68 = *(__int16 *)(v18 + 2 * v67);
              v69 = v66 * v20 + (v59 & v39);
              if (v68 >= 0)
                LOWORD(v70) = *(_WORD *)(v18 + 2 * v67);
              else
                v70 = -v68;
              v71 = *(__int16 *)(v22 + 2 * v69);
              if ((unsigned __int16)v70 == 0x7FFF)
                v72 = -1;
              else
                v72 = v54;
              if (v71 >= 0)
                LOWORD(v73) = v72;
              else
                v73 = -v72;
              *(_WORD *)(v18 + 2 * v67) = v73 + v68;
              v35 = v76;
              LOBYTE(v38) = v75;
            }
          }
        }
        while (v43 > 1);
      }
    }
    return v74;
  }
  return result;
}

uint64_t sub_1B68652B4(uint64_t result, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;

  v8 = *(_QWORD *)(result + 2072);
  v9 = a2 >> 9;
  if (a8)
  {
    v10 = v9 + *(char *)(v8 + a8 + 624);
    v11 = *(_QWORD *)(v8 + 1368);
    v12 = *(unsigned __int8 *)(v11 + 2003);
    if (v10 >= 57)
      v13 = 57;
    else
      v13 = v10;
    if (v10 <= -v12)
      v9 = -v12;
    else
      v9 = v13;
    if (v9 >= 30)
      v9 = byte_1B692B6F0[v9 - 30];
    v14 = (unsigned __int8 *)(v11 + 195);
  }
  else
  {
    v15 = *(_QWORD *)(v8 + 1368);
    v12 = *(unsigned __int8 *)(v15 + 2001);
    v14 = (unsigned __int8 *)(v15 + 194);
  }
  v16 = a7 + 3;
  if (v9 < 0)
  {
    v9 += v12;
    v16 += *v14;
  }
  if (!*(_BYTE *)(*(_QWORD *)(result + 2384) + 246))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(result
                                                                                                 + 8 * a7
                                                                                                 + 2296))((1 << a7), (v16 - 4), a39H[v9 % 6] << (v9 / 6), a3, a4, a5, a6);
  return result;
}

uint64_t sub_1B6865394(uint64_t result, unsigned __int8 *a2, int a3, int a4, int a5, int *a6, _DWORD *a7, _DWORD *a8, int *a9, char a10)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;

  if (!a5)
  {
    *a6 = a3;
    v23 = *(_QWORD *)(result + 2384);
    v14 = *(unsigned __int8 *)(v23 + 2001);
    *a8 = *(unsigned __int8 *)(v23 + 194);
    if (!a10 || *(_DWORD *)(result + 2052) != 1)
      goto LABEL_34;
    if (a4 > 3)
      v22 = 0;
    else
      v22 = byte_1B6924C10[*a2];
    goto LABEL_33;
  }
  v10 = 544;
  if (a5 != 1)
    v10 = 545;
  v11 = 14;
  if (a5 != 1)
    v11 = 15;
  v12 = *(char *)(*(_QWORD *)(result + 2376) + v10)
      + a3
      + *(char *)(*(_QWORD *)(*(_QWORD *)(result + 2376) + 1384) + v11);
  v13 = *(_QWORD *)(result + 2384);
  v14 = *(unsigned __int8 *)(v13 + 2003);
  if (v12 >= 57)
    v15 = 57;
  else
    v15 = v12;
  if (v12 <= -v14)
    v16 = -v14;
  else
    v16 = v15;
  if (v16 >= 30)
    v16 = byte_1B692B6F0[v16 - 30];
  *a6 = v16;
  *a8 = *(unsigned __int8 *)(v13 + 195);
  if (a10 && *(_DWORD *)(result + 2052) == 1)
  {
    v17 = a2[1];
    if (v17 == 35)
      v17 = **(unsigned __int8 **)(*(_QWORD *)(result + 2400) + 864);
    if ((a4 - 1) <= 1)
    {
      v18 = 26 - v17;
      if (v17 >= 0x1A)
        v18 = v17 - 26;
      v19 = 10 - v17;
      v20 = v17 >= 0xA;
      v21 = v17 - 10;
      if (!v20)
        v21 = v19;
      if (v18 < 5 || v21 <= 4)
      {
        if (v21 >= 5)
          v22 = 1;
        else
          v22 = 2;
LABEL_33:
        *a9 = v22;
      }
    }
  }
LABEL_34:
  v24 = *a6;
  if (*a6 < 0)
  {
    v26 = v24 + v14;
    *a6 = v26;
    v25 = v26 / 6 - (*a8 + a4);
  }
  else
  {
    v25 = v24 / 6 - a4;
  }
  *a7 = v25 + 21;
  return result;
}

__n128 sub_1B6865520(uint64_t a1, int a2, int a3, int a4, unsigned int a5, int a6, int a7, int a8, int a9)
{
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  _BYTE *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t *v33;
  int v34;
  int v35;
  unint64_t *v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __n128 result;

  v13 = *(__int128 **)(*(_QWORD *)(a1 + 2400) + 944);
  v14 = v13[10];
  v15 = v13[11];
  v16 = v13[8];
  *(__int128 *)((char *)v13 + 360) = v13[9];
  *(__int128 *)((char *)v13 + 376) = v14;
  *(__int128 *)((char *)v13 + 392) = v15;
  v17 = v13[6];
  v18 = v13[7];
  v19 = v13[4];
  *(__int128 *)((char *)v13 + 296) = v13[5];
  *(__int128 *)((char *)v13 + 312) = v17;
  *(__int128 *)((char *)v13 + 328) = v18;
  *(__int128 *)((char *)v13 + 344) = v16;
  v20 = *v13;
  *(__int128 *)((char *)v13 + 232) = v13[1];
  v21 = v13[3];
  *(__int128 *)((char *)v13 + 248) = v13[2];
  *(__int128 *)((char *)v13 + 264) = v21;
  *(__int128 *)((char *)v13 + 280) = v19;
  *((_QWORD *)v13 + 51) = *((_QWORD *)v13 + 24);
  *(__int128 *)((char *)v13 + 216) = v20;
  v22 = 8 * (*((_DWORD *)v13 + 52) - *((_DWORD *)v13 + 6));
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 1) = 510;
  *((_QWORD *)v13 + 2) = v22;
  sub_1B67CC34C((unint64_t *)v13, a3 != 0);
  v23 = (uint64_t)&v13[(a9 > 0) + 10] + 7;
  v24 = a8 + 2;
  if (a7 >= 8)
    v24 = 1;
  v25 = a2 - v24;
  if (a2 >= v24)
  {
    v27 = 3 << a6;
    v28 = v25 - (3 << a6);
    if ((int)v25 >= 3 << a6)
    {
      v31 = 1 << a6;
      v32 = a6;
      while (v28 >= v31)
      {
        ++v32;
        v28 -= v31;
        v31 = 1 << v32;
      }
      sub_1B67CC498((unint64_t *)v13, (1 << (v32 - a6 + 4)) - 2, v32 - a6 + 4);
      v33 = (unint64_t *)v13;
      v34 = v28;
      v35 = v32;
    }
    else
    {
      if (v27 >= (int)(v25 >> a6))
        v29 = v25 >> a6;
      else
        v29 = 3 << a6;
      v30 = (int)(v25 >> a6) < v27;
      if (v29 > 21)
        sub_1B67CC554((unint64_t *)v13, v29, v30);
      else
        sub_1B67CC498((unint64_t *)v13, ~v30, v29 + v30);
      v34 = v25 & ~(-1 << a6);
      v33 = (unint64_t *)v13;
      v35 = a6;
    }
    sub_1B67CC498(v33, v34, v35);
    if (a7 <= 7)
    {
      sub_1B67CC270((unint64_t *)v13, 1, (_BYTE *)(v23 + a4));
      if (a8)
      {
        v26 = (char *)v13 + 4 * (a9 > 0) + a5 + 191;
        v36 = (unint64_t *)v13;
        v37 = 1;
        goto LABEL_24;
      }
    }
  }
  else
  {
    if (a2 == 2)
    {
      sub_1B67CC270((unint64_t *)v13, 1, (_BYTE *)(v23 + a4));
      v26 = (char *)v13 + 4 * (a9 > 0) + a5 + 191;
      goto LABEL_18;
    }
    if (a2 == 1)
    {
      v26 = (_BYTE *)(v23 + a4);
LABEL_18:
      v36 = (unint64_t *)v13;
      v37 = 0;
LABEL_24:
      sub_1B67CC270(v36, v37, v26);
    }
  }
  v38 = *(__int128 *)((char *)v13 + 392);
  v13[10] = *(__int128 *)((char *)v13 + 376);
  v13[11] = v38;
  *((_QWORD *)v13 + 24) = *((_QWORD *)v13 + 51);
  v39 = *(__int128 *)((char *)v13 + 328);
  v13[6] = *(__int128 *)((char *)v13 + 312);
  v13[7] = v39;
  v40 = *(__int128 *)((char *)v13 + 360);
  v13[8] = *(__int128 *)((char *)v13 + 344);
  v13[9] = v40;
  v41 = *(__int128 *)((char *)v13 + 264);
  v13[2] = *(__int128 *)((char *)v13 + 248);
  v13[3] = v41;
  v42 = *(__int128 *)((char *)v13 + 296);
  v13[4] = *(__int128 *)((char *)v13 + 280);
  v13[5] = v42;
  result = *(__n128 *)((char *)v13 + 232);
  *v13 = *(__int128 *)((char *)v13 + 216);
  v13[1] = (__int128)result;
  return result;
}

__n128 sub_1B686581C(__int128 *a1, int a2, unsigned int a3)
{
  __int128 v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;

  v4 = a1[10];
  v5 = a1[11];
  v6 = (__int128 *)((char *)a1 + 216);
  v7 = a1[8];
  *(__int128 *)((char *)a1 + 360) = a1[9];
  *(__int128 *)((char *)a1 + 376) = v4;
  *(__int128 *)((char *)a1 + 392) = v5;
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[4];
  *(__int128 *)((char *)a1 + 296) = a1[5];
  *(__int128 *)((char *)a1 + 312) = v8;
  *(__int128 *)((char *)a1 + 328) = v9;
  *(__int128 *)((char *)a1 + 344) = v7;
  v11 = *a1;
  *(__int128 *)((char *)a1 + 232) = a1[1];
  v12 = a1[3];
  *(__int128 *)((char *)a1 + 248) = a1[2];
  *(__int128 *)((char *)a1 + 264) = v12;
  *(__int128 *)((char *)a1 + 280) = v10;
  *((_QWORD *)a1 + 51) = *((_QWORD *)a1 + 24);
  v13 = 8 * (*((_DWORD *)a1 + 52) - *((_DWORD *)a1 + 6));
  *(__int128 *)((char *)a1 + 216) = v11;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 1) = 510;
  *((_QWORD *)a1 + 2) = v13;
  sub_1B67CC270((unint64_t *)a1, a2 != 0, (_BYTE *)a1 + a3 + 123);
  v14 = v6[9];
  v15 = v6[11];
  a1[10] = v6[10];
  a1[11] = v15;
  *((_QWORD *)a1 + 24) = *((_QWORD *)a1 + 51);
  v16 = v6[5];
  v17 = v6[7];
  v18 = v6[8];
  a1[6] = v6[6];
  a1[7] = v17;
  a1[8] = v18;
  a1[9] = v14;
  v19 = v6[3];
  v20 = v6[4];
  a1[2] = *(__int128 *)((char *)a1 + 248);
  a1[3] = v19;
  result = *(__n128 *)((char *)a1 + 232);
  a1[4] = v20;
  a1[5] = v16;
  *a1 = *(__int128 *)((char *)a1 + 216);
  a1[1] = (__int128)result;
  return result;
}

__n128 sub_1B6865914(uint64_t a1, int a2, int a3, int a4)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;

  v4 = *(__int128 **)(*(_QWORD *)(a1 + 2400) + 944);
  v5 = v4[10];
  v6 = v4[11];
  v7 = v4[8];
  *(__int128 *)((char *)v4 + 360) = v4[9];
  *(__int128 *)((char *)v4 + 376) = v5;
  *(__int128 *)((char *)v4 + 392) = v6;
  v8 = v4[6];
  v9 = v4[7];
  v10 = v4[4];
  *(__int128 *)((char *)v4 + 296) = v4[5];
  *(__int128 *)((char *)v4 + 312) = v8;
  *(__int128 *)((char *)v4 + 328) = v9;
  *(__int128 *)((char *)v4 + 344) = v7;
  v11 = *v4;
  *(__int128 *)((char *)v4 + 232) = v4[1];
  v12 = v4[3];
  *(__int128 *)((char *)v4 + 248) = v4[2];
  *(__int128 *)((char *)v4 + 264) = v12;
  *(__int128 *)((char *)v4 + 280) = v10;
  *((_QWORD *)v4 + 51) = *((_QWORD *)v4 + 24);
  *(__int128 *)((char *)v4 + 216) = v11;
  v13 = 8 * (*((_DWORD *)v4 + 52) - *((_DWORD *)v4 + 6));
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 1) = 510;
  *((_QWORD *)v4 + 2) = v13;
  v14 = (uint64_t)v4 + 2 * (a4 > 0);
  if (a3 > 0)
    ++v14;
  sub_1B67CC270((unint64_t *)v4, a2 != 0, (_BYTE *)(v14 + 119));
  v15 = *(__int128 *)((char *)v4 + 392);
  v4[10] = *(__int128 *)((char *)v4 + 376);
  v4[11] = v15;
  *((_QWORD *)v4 + 24) = *((_QWORD *)v4 + 51);
  v16 = *(__int128 *)((char *)v4 + 328);
  v4[6] = *(__int128 *)((char *)v4 + 312);
  v4[7] = v16;
  v17 = *(__int128 *)((char *)v4 + 360);
  v4[8] = *(__int128 *)((char *)v4 + 344);
  v4[9] = v17;
  v18 = *(__int128 *)((char *)v4 + 264);
  v4[2] = *(__int128 *)((char *)v4 + 248);
  v4[3] = v18;
  v19 = *(__int128 *)((char *)v4 + 296);
  v4[4] = *(__int128 *)((char *)v4 + 280);
  v4[5] = v19;
  result = *(__n128 *)((char *)v4 + 232);
  *v4 = *(__int128 *)((char *)v4 + 216);
  v4[1] = (__int128)result;
  return result;
}

__n128 sub_1B6865A58(uint64_t a1, int a2)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  v2 = *(__int128 **)(*(_QWORD *)(a1 + 2400) + 944);
  v3 = v2[10];
  v4 = v2[11];
  v5 = v2[8];
  *(__int128 *)((char *)v2 + 360) = v2[9];
  *(__int128 *)((char *)v2 + 376) = v3;
  *(__int128 *)((char *)v2 + 392) = v4;
  v6 = v2[6];
  v7 = v2[7];
  v8 = v2[4];
  *(__int128 *)((char *)v2 + 296) = v2[5];
  *(__int128 *)((char *)v2 + 312) = v6;
  *(__int128 *)((char *)v2 + 328) = v7;
  *(__int128 *)((char *)v2 + 344) = v5;
  v9 = *v2;
  *(__int128 *)((char *)v2 + 232) = v2[1];
  v10 = v2[3];
  *(__int128 *)((char *)v2 + 248) = v2[2];
  *(__int128 *)((char *)v2 + 264) = v10;
  *(__int128 *)((char *)v2 + 280) = v8;
  *((_QWORD *)v2 + 51) = *((_QWORD *)v2 + 24);
  *(__int128 *)((char *)v2 + 216) = v9;
  v11 = 8 * (*((_DWORD *)v2 + 52) - *((_DWORD *)v2 + 6));
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 1) = 510;
  *((_QWORD *)v2 + 2) = v11;
  sub_1B67CC270((unint64_t *)v2, a2 != 0, (_BYTE *)v2 + 70);
  v12 = *(__int128 *)((char *)v2 + 392);
  v2[10] = *(__int128 *)((char *)v2 + 376);
  v2[11] = v12;
  *((_QWORD *)v2 + 24) = *((_QWORD *)v2 + 51);
  v13 = *(__int128 *)((char *)v2 + 328);
  v2[6] = *(__int128 *)((char *)v2 + 312);
  v2[7] = v13;
  v14 = *(__int128 *)((char *)v2 + 360);
  v2[8] = *(__int128 *)((char *)v2 + 344);
  v2[9] = v14;
  v15 = *(__int128 *)((char *)v2 + 264);
  v2[2] = *(__int128 *)((char *)v2 + 248);
  v2[3] = v15;
  v16 = *(__int128 *)((char *)v2 + 296);
  v2[4] = *(__int128 *)((char *)v2 + 280);
  v2[5] = v16;
  result = *(__n128 *)((char *)v2 + 232);
  *v2 = *(__int128 *)((char *)v2 + 216);
  v2[1] = (__int128)result;
  return result;
}

__n128 sub_1B6865B88(uint64_t a1, int a2, int a3, int a4)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;

  v4 = *(__int128 **)(*(_QWORD *)(a1 + 2400) + 944);
  v5 = v4[10];
  v6 = v4[11];
  v7 = v4[8];
  *(__int128 *)((char *)v4 + 360) = v4[9];
  *(__int128 *)((char *)v4 + 376) = v5;
  *(__int128 *)((char *)v4 + 392) = v6;
  v8 = v4[6];
  v9 = v4[7];
  v10 = v4[4];
  *(__int128 *)((char *)v4 + 296) = v4[5];
  *(__int128 *)((char *)v4 + 312) = v8;
  *(__int128 *)((char *)v4 + 328) = v9;
  *(__int128 *)((char *)v4 + 344) = v7;
  v11 = *v4;
  *(__int128 *)((char *)v4 + 232) = v4[1];
  v12 = v4[3];
  *(__int128 *)((char *)v4 + 248) = v4[2];
  *(__int128 *)((char *)v4 + 264) = v12;
  *(__int128 *)((char *)v4 + 280) = v10;
  *((_QWORD *)v4 + 51) = *((_QWORD *)v4 + 24);
  *(__int128 *)((char *)v4 + 216) = v11;
  v13 = 8 * (*((_DWORD *)v4 + 52) - *((_DWORD *)v4 + 6));
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 1) = 510;
  *((_QWORD *)v4 + 2) = v13;
  v14 = (uint64_t)v4 + 74;
  if (a4)
    v14 = (uint64_t)v4 + 76;
  sub_1B67CC270((unint64_t *)v4, a2 != 0, (_BYTE *)(v14 + a3));
  v15 = *(__int128 *)((char *)v4 + 392);
  v4[10] = *(__int128 *)((char *)v4 + 376);
  v4[11] = v15;
  *((_QWORD *)v4 + 24) = *((_QWORD *)v4 + 51);
  v16 = *(__int128 *)((char *)v4 + 328);
  v4[6] = *(__int128 *)((char *)v4 + 312);
  v4[7] = v16;
  v17 = *(__int128 *)((char *)v4 + 360);
  v4[8] = *(__int128 *)((char *)v4 + 344);
  v4[9] = v17;
  v18 = *(__int128 *)((char *)v4 + 264);
  v4[2] = *(__int128 *)((char *)v4 + 248);
  v4[3] = v18;
  v19 = *(__int128 *)((char *)v4 + 296);
  v4[4] = *(__int128 *)((char *)v4 + 280);
  v4[5] = v19;
  result = *(__n128 *)((char *)v4 + 232);
  *v4 = *(__int128 *)((char *)v4 + 216);
  v4[1] = (__int128)result;
  return result;
}

uint64_t sub_1B6865CC8(_QWORD *a1, int a2, int a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, _DWORD *a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v27;

  v18 = 0;
  v27 = 0;
  v19 = a1[301];
  v20 = (a2 - *((_DWORD *)a4 + 1));
  if ((v20 & 0x80000000) == 0)
  {
    v21 = a3 - *((_DWORD *)a4 + 2);
    if ((v21 & 0x80000000) == 0)
    {
      v22 = *a4;
      if (v20 >= v22 || v21 >= v22)
        v18 = 0;
      else
        v18 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)a4 + 3) + 24))(*((_QWORD *)a4 + 3), v20 + a4[1] * (unint64_t)v21 + *((_QWORD *)a4 + 4), 0);
    }
  }
  v24 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(v19
                                                                                     + 8 * __clz(__rbit32(a9))
                                                                                     + 8))(a9, a9, v18, a4[1], a5, a6);
  if (!*(_BYTE *)(a1[300] + 188))
  {
    ((void (*)(_QWORD, uint64_t, uint64_t, char *, uint64_t *))a1[((a9 & 7) == 0) + 278])(a9, a8, a7, (char *)&v27 + 4, &v27);
    v25 = (unsigned __int8 *)&unk_1B6924AF8
        + *(unsigned __int8 *)(*(_QWORD *)(a1[297] + 1368) + 2001)
        + (uint64_t)(*(__int16 *)(*((_QWORD *)a4 + 11)
                               + 2
                               * (((a2 - *((_DWORD *)a4 + 1)) >> 3)
                                + ((unint64_t)*a4 >> 3) * ((a3 - *((_DWORD *)a4 + 2)) >> 3))) >> 9);
    *a10 = (HIDWORD(v27) * *v25 + (_DWORD)v27 * v25[70] + *a10) << 8;
  }
  return v24;
}

unint64_t sub_1B6865E60(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned int a6, int a7, int a8, int a9, int a10, unsigned int a11)
{
  int v11;
  unsigned __int8 *v13;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  __int16 *v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  _BOOL4 v35;
  int v36;
  int v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD *, uint64_t, uint64_t, _QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD, int, _QWORD);
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  unsigned __int8 *v77;
  uint64_t v78;
  int v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  int v85;
  int v86;
  int v87;
  __int16 *v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  int v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  unsigned int v185;
  char *v186;
  unsigned int v187;
  uint64_t v188;
  unsigned __int8 *v189;
  int v190;
  unsigned int v191;
  unint64_t *v192;
  unsigned int v193;
  unsigned int v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unint64_t v200;
  int v201;
  uint64_t v202;
  unsigned __int8 *v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  char *v215;
  unsigned int v216;
  uint64_t v217;
  unsigned __int8 *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  int v226;
  unint64_t v227;
  int v228;
  unint64_t v229;
  int v230;
  char v231;
  int v232;
  int v233;
  int v234;
  uint64_t v235;
  __int16 *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  unint64_t v240;
  _BOOL4 v241;
  int v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t v248;
  int v249;
  int v250;
  unsigned int v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  __int16 v257;
  unsigned __int8 v258[10];

  v11 = a8;
  v249 = a7;
  v13 = a4;
  v15 = a2;
  v17 = a2 - *((_DWORD *)a5 + 1);
  v18 = a3 - *((_DWORD *)a5 + 2);
  v19 = *a5;
  if (v17 >= v19 || v18 >= v19)
    v21 = 0;
  else
    v21 = (__int16 *)(*((_QWORD *)a5 + 11) + 2 * ((v17 >> 3) + (v19 >> 3) * (unint64_t)(v18 >> 3)));
  if (a7 == 35)
    v249 = *(unsigned __int8 *)(*((_QWORD *)a5 + 12)
                              + 16 * ((v17 >> 2) + (v19 >> 2) * (unint64_t)(v18 >> 2)));
  v22 = a9 > 0;
  v252 = a1;
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2012) >= a8)
  {
    if (a10)
      return 0;
    v22 = 0;
    *(_WORD *)v258 = 0;
  }
  else
  {
    v23 = ((unsigned __int16)*v21 >> 2) & 3;
    v24 = (a8 - 1);
    *(_WORD *)v258 = 0;
    if (v23 != a9)
    {
      v27 = 0;
      LODWORD(v25) = 0;
      v28 = a8 - 2;
      v29 = a3;
      v30 = (1 << (a8 - 1)) + a3;
      do
      {
        v31 = a11;
        if (v28 >= *(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2012))
        {
          v31 = sub_1B683B42C(a11, v27, (1 << v24) + (int)v15 < *(_DWORD *)(*(_QWORD *)(a1 + 2400) + 16), v30 < *(_DWORD *)(*(_QWORD *)(a1 + 2400) + 20));
          a1 = v252;
        }
        v32 = sub_1B6865E60(a1, ((v27 & 1) << v24) + (int)v15, (v27 >> 1 << v24) + v29, a4, a5, a6, v249, v24, __PAIR64__(v27, a9 + 1), v31);
        a1 = v252;
        v25 = (v32 + v25);
        ++v27;
      }
      while (v27 != 4);
      return v25;
    }
    v11 = a8 - 1;
  }
  v245 = a4[1];
  v33 = *(_QWORD *)(a1 + 2392);
  if (*(_BYTE *)(v33 + 352))
    v34 = v11 == 2;
  else
    v34 = 0;
  v35 = v34;
  if (*(_BYTE *)(v33 + 353) && v35)
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
    v40 = *((_QWORD *)v39 + 1);
    v41 = (unint64_t)*v39 >> 2;
    do
    {
      v38 += *(unsigned __int8 *)(v40
                                + ((v17 + (v37 & 4)) >> 2)
                                + v41 * (unint64_t)((v18 + (v36 & 0x7FFFFFFC)) >> 2));
      v37 += 4;
      v36 += 2;
    }
    while (v37 != 16);
    v35 = v38 != 0;
  }
  v42 = 0;
  v43 = *(unsigned __int8 *)(*((_QWORD *)a4 + 18) + 1);
  v44 = (a2 - *((_DWORD *)a4 + 1));
  v45 = a3 - *((_DWORD *)a4 + 2);
  v236 = v21;
  v241 = v35;
  if ((v44 & 0x80000000) == 0 && (v45 & 0x80000000) == 0)
  {
    v42 = 0;
    v46 = *a4;
    if (v44 < v46 && v45 < v46)
    {
      v47 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a4 + 5) + 24))(*((_QWORD *)a4 + 5), v44 + a4[1] * (unint64_t)(v45 >> 1) + *((_QWORD *)a4 + 6));
      a1 = v252;
      v42 = v47;
      LODWORD(v44) = v15 - *((_DWORD *)v13 + 1);
      v45 = a3 - *((_DWORD *)v13 + 2);
    }
  }
  v48 = 0;
  if ((v44 & 0x80000000) == 0 && (v45 & 0x80000000) == 0)
  {
    v48 = 0;
    v49 = *v13;
    if (v44 < v49 && v45 < v49)
    {
      v50 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)v13 + 18) + 96) + 24))(*(_QWORD *)(*((_QWORD *)v13 + 18) + 96), *(_QWORD *)(*((_QWORD *)v13 + 18) + 104)+ v44+ *(unsigned __int8 *)(*((_QWORD *)v13 + 18) + 1) * (unint64_t)(v45 & 0xFFFFFFFE));
      a1 = v252;
      v48 = v50;
    }
  }
  v243 = v42;
  v51 = 2 * v43;
  v52 = *(_QWORD *)(a1 + 2400);
  if (v22 || !*(_BYTE *)(v52 + 4699))
  {
    v53 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD, int, _QWORD))(v52 + 8176);
    v54 = *(_QWORD *)(v52 + 8184);
    v55 = (_QWORD *)(v52 + (v54 >> 1));
    if ((v54 & 1) != 0)
      v53 = *(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD, int, _QWORD))(*v55 + v53);
    v53(v55, v15, a3, *(unsigned int *)(a1 + 2432), v13, 1, a6, a11, v11, *((_QWORD *)v13 + 19));
    a1 = v252;
  }
  v251 = a3;
  v56 = a1;
  sub_1B67D5868(*(_QWORD *)(a1 + 2376) + 1424, v249, v11, *((_QWORD *)v13 + 19), 2 * v43, v48);
  if (v241)
  {
    v57 = *(_QWORD *)(v56 + 2400);
    v58 = *(unsigned __int8 **)(v57 + 376);
    v59 = 2 * *v58;
    v60 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v58 + 10) + 24))(*((_QWORD *)v58 + 10), *((_QWORD *)v58 + 11));
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 8144))((2 << v11), (1 << v11), v51, v48, v59, v60);
  }
  v61 = *(_QWORD *)(v56 + 2408);
  v62 = v11 - 2;
  v238 = (1 << v11);
  v248 = v48;
  v25 = (*(unsigned __int16 *)(v61 + 18)
       * (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 8 * v62 + 248))(v238, v238, v42, v245, v48, v51)) >> 8;
  if (a9 >= 1)
  {
    v63 = *((_QWORD *)v13 + 18);
    v64 = *(unsigned __int8 *)(v63 + 1);
    v65 = v15 - *((_DWORD *)v13 + 1);
    v66 = v251;
    if ((v65 & 0x80000000) != 0 || (v67 = v251 - *((_DWORD *)v13 + 2), (v67 & 0x80000000) != 0))
    {
      v73 = 0;
      v72 = 0;
      v75 = 0;
      v69 = (_QWORD *)v252;
    }
    else
    {
      v68 = *v13;
      v69 = (_QWORD *)v252;
      if (v65 < v68 && v67 < v68)
      {
        v70 = (v65 >> 1) + *(unsigned __int8 *)(v63 + 1) * (unint64_t)(v67 >> 1);
        v71 = *(_QWORD *)(v63 + 72);
        v72 = *(_QWORD *)(v63 + 64) + 2 * v70;
        v73 = v71 + 2 * v70;
        v74 = *(_QWORD *)(v252 + 2400);
        *(_DWORD *)(v74 + 808) = v15;
        *(_DWORD *)(v74 + 812) = v251;
        v75 = *((_QWORD *)v13 + 12) + 16 * ((v65 >> 2) + (v68 >> 2) * (unint64_t)(v67 >> 2));
        goto LABEL_57;
      }
      v73 = 0;
      v72 = 0;
      v75 = 0;
    }
    v74 = v69[300];
    *(_DWORD *)(v74 + 808) = v15;
    *(_DWORD *)(v74 + 812) = v251;
LABEL_57:
    *(_QWORD *)(v74 + 864) = v75;
    v76 = v69;
    sub_1B6867058(v69, v15, v251, v11, v236, v42, v245, v248, v51, v248, v51, v72, v73, v64, (BOOL *)&v258[1], v258, 0, 0);
    if (!v241)
    {
      v96 = v258[1];
      v97 = v258[0];
LABEL_165:
      sub_1B688DE74(v13, v15, v66, 1 << v62, 1, v96, 1);
      sub_1B688DE74(v13, v15, v66, 1 << v62, 2, v97, 1);
      return v25;
    }
    v235 = v51;
    v231 = v11 - 2;
    v77 = *(unsigned __int8 **)(v76[300] + 376);
    v78 = *v77;
    v79 = v11;
    v80 = (char *)*((_QWORD *)v77 + 7);
    v81 = (char *)*((_QWORD *)v77 + 8);
    v82 = 2 * v78;
    v237 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v77 + 10) + 24))(*((_QWORD *)v77 + 10), *((_QWORD *)v77 + 11));
    v239 = 0;
    v257 = 0;
    v83 = v76[300];
    v84 = *(__int128 **)(v83 + 944);
    *(_DWORD *)(v83 + 808) = v15;
    *(_DWORD *)(v83 + 812) = v251;
    v242 = v79;
    if ((v79 - 1) <= 1)
    {
      v85 = 26 - v249;
      if (v249 >= 26)
        v85 = v249 - 26;
      v86 = v85 < 5;
      v87 = 10 - v249;
      if (v249 >= 10)
        v87 = v249 - 10;
      if (v87 < 5)
        v86 = 2;
      v239 = v86;
    }
    v88 = 0;
    v89 = v15 - *((_DWORD *)v13 + 1);
    if ((v89 & 0x80000000) == 0)
    {
      v90 = v251 - *((_DWORD *)v13 + 2);
      if ((v90 & 0x80000000) == 0)
      {
        v88 = 0;
        v91 = *v13;
        if (v89 < v91 && v90 < v91)
          v88 = (__int16 *)(*((_QWORD *)v13 + 11)
                          + 2 * ((v89 >> 3) + (v91 >> 3) * (unint64_t)(v90 >> 3)));
      }
    }
    sub_1B6867058(v76, v15, v251, v79, v88, v243, v245, v237, 2 * v78, v237, 2 * v78, (uint64_t)v80, (uint64_t)v81, v78, (BOOL *)&v257 + 1, &v257, 1, 1);
    v92 = v15 - *((_DWORD *)v13 + 1);
    v93 = v251 - *((_DWORD *)v13 + 2);
    if ((v92 & 0x80000000) != 0 || (v93 & 0x80000000) != 0)
    {
      v95 = v252;
    }
    else
    {
      v94 = *v13;
      v95 = v252;
      if (v92 < v94 && v93 < v94)
      {
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v13 + 18) + 16)
                 + (v92 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v13 + 18) + 1) >> 2) * (v93 >> 3)) = 0;
        v92 = v15 - *((_DWORD *)v13 + 1);
        v93 = v251 - *((_DWORD *)v13 + 2);
      }
    }
    if ((v92 & 0x80000000) == 0 && (v93 & 0x80000000) == 0)
    {
      v98 = *v13;
      if (v92 < v98 && v93 < v98)
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v13 + 18) + 24)
                 + (v92 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v13 + 18) + 1) >> 2) * (v93 >> 3)) = 0;
    }
    *(_QWORD *)(*(_QWORD *)(v95 + 2400) + 824) = *(unsigned __int8 *)(*((_QWORD *)v13 + 17) + 1);
    v255 = 0;
    v256 = 0;
    v99 = *(_QWORD *)(v95 + 2408);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v99 + 376))(v243, v245, v248, v235, v238, v238, &v256, &v255);
    v100 = *(unsigned __int16 *)(v99 + 18);
    v255 = (v255 * v100) >> 8;
    v256 = (v256 * v100) >> 8;
    v232 = v258[1];
    if (!v258[1])
    {
      v228 = 0;
      goto LABEL_94;
    }
    v101 = v84[2];
    v102 = v84[4];
    v103 = v84[5];
    *(__int128 *)((char *)v84 + 264) = v84[3];
    *(__int128 *)((char *)v84 + 280) = v102;
    *(__int128 *)((char *)v84 + 248) = v101;
    v104 = *v84;
    *(__int128 *)((char *)v84 + 232) = v84[1];
    v105 = v84[6];
    v106 = v84[8];
    v107 = v84[9];
    *(__int128 *)((char *)v84 + 328) = v84[7];
    *(__int128 *)((char *)v84 + 344) = v106;
    *(__int128 *)((char *)v84 + 296) = v103;
    *(__int128 *)((char *)v84 + 312) = v105;
    v108 = v84[11];
    *(__int128 *)((char *)v84 + 376) = v84[10];
    *(__int128 *)((char *)v84 + 392) = v108;
    *(__int128 *)((char *)v84 + 360) = v107;
    *((_QWORD *)v84 + 51) = *((_QWORD *)v84 + 24);
    *(__int128 *)((char *)v84 + 216) = v104;
    v109 = 8 * (*((_DWORD *)v84 + 52) - *((_DWORD *)v84 + 6));
    *((_QWORD *)v84 + 4) = 0;
    *((_QWORD *)v84 + 1) = 510;
    *((_QWORD *)v84 + 2) = v109;
    v110 = v15 - *((_DWORD *)v13 + 1);
    if ((v110 & 0x80000000) != 0 || (v111 = v251 - *((_DWORD *)v13 + 2), (v111 & 0x80000000) != 0))
    {
      v114 = 0;
      v113 = v252;
    }
    else
    {
      v112 = *v13;
      v113 = v252;
      if (v110 < v112 && v111 < v112)
      {
        *(_QWORD *)(*(_QWORD *)(v252 + 2400) + 880) = *(_QWORD *)(*((_QWORD *)v13 + 18) + 64)
                                                      + 2
                                                      * ((v110 >> 1)
                                                       + *(unsigned __int8 *)(*((_QWORD *)v13 + 18) + 1)
                                                       * (unint64_t)(v111 >> 1));
        v114 = *(_QWORD *)(*((_QWORD *)v13 + 18) + 16)
             + (v110 >> 3)
             + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v13 + 18) + 1) >> 2) * (v111 >> 3);
LABEL_93:
        *(_QWORD *)(*(_QWORD *)(v113 + 2400) + 928) = v114;
        sub_1B6860B50(v113, v15, v251, v79, v239, 1);
        v228 = ((*((_DWORD *)v84 + 4) + 8 * (*((_DWORD *)v84 + 6) - *((_DWORD *)v84 + 52))) << 8)
             - *((_DWORD *)v84 + 2)
             + 510;
        v115 = *(__int128 *)((char *)v84 + 392);
        v84[10] = *(__int128 *)((char *)v84 + 376);
        v84[11] = v115;
        *((_QWORD *)v84 + 24) = *((_QWORD *)v84 + 51);
        v116 = *(__int128 *)((char *)v84 + 328);
        v84[6] = *(__int128 *)((char *)v84 + 312);
        v84[7] = v116;
        v117 = *(__int128 *)((char *)v84 + 360);
        v84[8] = *(__int128 *)((char *)v84 + 344);
        v84[9] = v117;
        v118 = *(__int128 *)((char *)v84 + 264);
        v84[2] = *(__int128 *)((char *)v84 + 248);
        v84[3] = v118;
        v119 = *(__int128 *)((char *)v84 + 296);
        v84[4] = *(__int128 *)((char *)v84 + 280);
        v84[5] = v119;
        v120 = *(__int128 *)((char *)v84 + 232);
        *v84 = *(__int128 *)((char *)v84 + 216);
        v84[1] = v120;
LABEL_94:
        v226 = v258[0];
        if (v258[0])
        {
          v121 = v84[2];
          v122 = v84[4];
          v123 = v84[5];
          *(__int128 *)((char *)v84 + 264) = v84[3];
          *(__int128 *)((char *)v84 + 280) = v122;
          *(__int128 *)((char *)v84 + 248) = v121;
          v124 = *v84;
          *(__int128 *)((char *)v84 + 232) = v84[1];
          v125 = v84[6];
          v126 = v84[8];
          v127 = v84[9];
          *(__int128 *)((char *)v84 + 328) = v84[7];
          *(__int128 *)((char *)v84 + 344) = v126;
          *(__int128 *)((char *)v84 + 296) = v123;
          *(__int128 *)((char *)v84 + 312) = v125;
          v128 = v84[11];
          *(__int128 *)((char *)v84 + 376) = v84[10];
          *(__int128 *)((char *)v84 + 392) = v128;
          *(__int128 *)((char *)v84 + 360) = v127;
          *((_QWORD *)v84 + 51) = *((_QWORD *)v84 + 24);
          *(__int128 *)((char *)v84 + 216) = v124;
          v129 = 8 * (*((_DWORD *)v84 + 52) - *((_DWORD *)v84 + 6));
          *((_QWORD *)v84 + 4) = 0;
          *((_QWORD *)v84 + 1) = 510;
          *((_QWORD *)v84 + 2) = v129;
          v130 = v15 - *((_DWORD *)v13 + 1);
          if ((v130 & 0x80000000) != 0
            || (v131 = v251 - *((_DWORD *)v13 + 2), (v131 & 0x80000000) != 0)
            || (v132 = *v13, v130 >= v132)
            || v131 >= v132)
          {
            v133 = 0;
            *(_QWORD *)(*(_QWORD *)(v252 + 2400) + 888) = 0;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v252 + 2400) + 888) = *(_QWORD *)(*((_QWORD *)v13 + 18) + 72)
                                                          + 2
                                                          * ((v130 >> 1)
                                                           + *(unsigned __int8 *)(*((_QWORD *)v13 + 18) + 1)
                                                           * (unint64_t)(v131 >> 1));
            v133 = *(_QWORD *)(*((_QWORD *)v13 + 18) + 24)
                 + (v130 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v13 + 18) + 1) >> 2) * (v131 >> 3);
          }
          *(_QWORD *)(*(_QWORD *)(v252 + 2400) + 936) = v133;
          sub_1B6860B50(v252, v15, v251, v79, v239, 2);
          v134 = v252;
          v230 = ((*((_DWORD *)v84 + 4) + 8 * (*((_DWORD *)v84 + 6) - *((_DWORD *)v84 + 52))) << 8)
               - *((_DWORD *)v84 + 2)
               + 510;
          v135 = *(__int128 *)((char *)v84 + 392);
          v84[10] = *(__int128 *)((char *)v84 + 376);
          v84[11] = v135;
          *((_QWORD *)v84 + 24) = *((_QWORD *)v84 + 51);
          v136 = *(__int128 *)((char *)v84 + 328);
          v84[6] = *(__int128 *)((char *)v84 + 312);
          v84[7] = v136;
          v137 = *(__int128 *)((char *)v84 + 360);
          v84[8] = *(__int128 *)((char *)v84 + 344);
          v84[9] = v137;
          v138 = *(__int128 *)((char *)v84 + 264);
          v84[2] = *(__int128 *)((char *)v84 + 248);
          v84[3] = v138;
          v139 = *(__int128 *)((char *)v84 + 296);
          v84[4] = *(__int128 *)((char *)v84 + 280);
          v84[5] = v139;
          v140 = *(__int128 *)((char *)v84 + 232);
          *v84 = *(__int128 *)((char *)v84 + 216);
          v84[1] = v140;
        }
        else
        {
          v230 = 0;
          v134 = v252;
        }
        v141 = *(_QWORD *)(v134 + 2408);
        v227 = v256;
        v234 = *(unsigned __int16 *)(v141 + 8);
        v229 = v255;
        v253 = 0;
        v254 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v141 + 376))(v243, v245, v237, 2 * v78, v238, v238, &v254, &v253);
        v142 = *(unsigned __int16 *)(v141 + 18);
        v253 = (v253 * v142) >> 8;
        v254 = (v254 * v142) >> 8;
        v143 = *(_QWORD *)(v252 + 2400);
        *(_QWORD *)(v143 + 824) = v78;
        **(_BYTE **)(*(_QWORD *)(v143 + 376) + 16) = 1;
        **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(v252 + 2400) + 376) + 24) = 1;
        v144 = HIBYTE(v257);
        if (HIBYTE(v257))
        {
          v145 = v84[2];
          v146 = v84[4];
          v147 = v84[5];
          *(__int128 *)((char *)v84 + 264) = v84[3];
          *(__int128 *)((char *)v84 + 280) = v146;
          *(__int128 *)((char *)v84 + 248) = v145;
          v148 = *v84;
          *(__int128 *)((char *)v84 + 232) = v84[1];
          v149 = v84[6];
          v150 = v84[8];
          v151 = v84[9];
          *(__int128 *)((char *)v84 + 328) = v84[7];
          *(__int128 *)((char *)v84 + 344) = v150;
          *(__int128 *)((char *)v84 + 296) = v147;
          *(__int128 *)((char *)v84 + 312) = v149;
          v152 = v84[11];
          *(__int128 *)((char *)v84 + 376) = v84[10];
          *(__int128 *)((char *)v84 + 392) = v152;
          *(__int128 *)((char *)v84 + 360) = v151;
          *((_QWORD *)v84 + 51) = *((_QWORD *)v84 + 24);
          *(__int128 *)((char *)v84 + 216) = v148;
          v153 = 8 * (*((_DWORD *)v84 + 52) - *((_DWORD *)v84 + 6));
          *((_QWORD *)v84 + 4) = 0;
          *((_QWORD *)v84 + 1) = 510;
          *((_QWORD *)v84 + 2) = v153;
          *(_QWORD *)(*(_QWORD *)(v252 + 2400) + 880) = v80;
          *(_QWORD *)(*(_QWORD *)(v252 + 2400) + 928) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v252 + 2400) + 376)
                                                                    + 16);
          sub_1B6860B50(v252, v15, v251, v79, v239, 1);
          v154 = ((*((_DWORD *)v84 + 4) + 8 * (*((_DWORD *)v84 + 6) - *((_DWORD *)v84 + 52))) << 8)
               - *((_DWORD *)v84 + 2)
               + 510;
          v155 = *(__int128 *)((char *)v84 + 360);
          v156 = *(__int128 *)((char *)v84 + 392);
          v84[10] = *(__int128 *)((char *)v84 + 376);
          v84[11] = v156;
          *((_QWORD *)v84 + 24) = *((_QWORD *)v84 + 51);
          v157 = *(__int128 *)((char *)v84 + 296);
          v158 = *(__int128 *)((char *)v84 + 328);
          v159 = *(__int128 *)((char *)v84 + 344);
          v84[6] = *(__int128 *)((char *)v84 + 312);
          v84[7] = v158;
          v84[8] = v159;
          v84[9] = v155;
          v160 = *(__int128 *)((char *)v84 + 264);
          v161 = *(__int128 *)((char *)v84 + 280);
          v84[2] = *(__int128 *)((char *)v84 + 248);
          v84[3] = v160;
          v162 = *(__int128 *)((char *)v84 + 232);
          v84[4] = v161;
          v84[5] = v157;
          *v84 = *(__int128 *)((char *)v84 + 216);
          v84[1] = v162;
        }
        else
        {
          v154 = 0;
        }
        v250 = v15;
        v246 = v257;
        if ((_BYTE)v257)
        {
          v163 = v84[2];
          v164 = v84[4];
          v165 = v84[5];
          *(__int128 *)((char *)v84 + 264) = v84[3];
          *(__int128 *)((char *)v84 + 280) = v164;
          *(__int128 *)((char *)v84 + 248) = v163;
          v166 = *v84;
          *(__int128 *)((char *)v84 + 232) = v84[1];
          v167 = v84[6];
          v168 = v84[8];
          v169 = v84[9];
          *(__int128 *)((char *)v84 + 328) = v84[7];
          *(__int128 *)((char *)v84 + 344) = v168;
          *(__int128 *)((char *)v84 + 296) = v165;
          *(__int128 *)((char *)v84 + 312) = v167;
          v170 = v84[11];
          *(__int128 *)((char *)v84 + 376) = v84[10];
          *(__int128 *)((char *)v84 + 392) = v170;
          *(__int128 *)((char *)v84 + 360) = v169;
          *((_QWORD *)v84 + 51) = *((_QWORD *)v84 + 24);
          *(__int128 *)((char *)v84 + 216) = v166;
          v171 = 8 * (*((_DWORD *)v84 + 52) - *((_DWORD *)v84 + 6));
          *((_QWORD *)v84 + 4) = 0;
          *((_QWORD *)v84 + 1) = 510;
          *((_QWORD *)v84 + 2) = v171;
          v172 = v252;
          *(_QWORD *)(*(_QWORD *)(v252 + 2400) + 888) = v81;
          *(_QWORD *)(*(_QWORD *)(v252 + 2400) + 936) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v252 + 2400) + 376)
                                                                    + 24);
          v66 = v251;
          sub_1B6860B50(v252, v15, v251, v242, v239, 2);
          v173 = ((*((_DWORD *)v84 + 4) + 8 * (*((_DWORD *)v84 + 6) - *((_DWORD *)v84 + 52))) << 8)
               - *((_DWORD *)v84 + 2)
               + 510;
          v174 = *(__int128 *)((char *)v84 + 360);
          v175 = *(__int128 *)((char *)v84 + 392);
          v84[10] = *(__int128 *)((char *)v84 + 376);
          v84[11] = v175;
          *((_QWORD *)v84 + 24) = *((_QWORD *)v84 + 51);
          v176 = *(__int128 *)((char *)v84 + 296);
          v177 = *(__int128 *)((char *)v84 + 328);
          v178 = *(__int128 *)((char *)v84 + 344);
          v84[6] = *(__int128 *)((char *)v84 + 312);
          v84[7] = v177;
          v84[8] = v178;
          v84[9] = v174;
          v179 = *(__int128 *)((char *)v84 + 264);
          v180 = *(__int128 *)((char *)v84 + 280);
          v84[2] = *(__int128 *)((char *)v84 + 248);
          v84[3] = v179;
          v181 = *(__int128 *)((char *)v84 + 232);
          v84[4] = v180;
          v84[5] = v176;
          *v84 = *(__int128 *)((char *)v84 + 216);
          v84[1] = v181;
        }
        else
        {
          v173 = 0;
          v172 = v252;
          v66 = v251;
        }
        v182 = *(unsigned __int16 *)(*(_QWORD *)(v172 + 2408) + 8);
        v183 = v253;
        if (v144 && v227 + ((v228 * v234) >> 8) > v254 + ((v154 * v182) >> 8))
        {
          v244 = v173;
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v172 + 2400) + 8152))((2 << v242), v238, v82, v237, v235, v248);
          v184 = v250 - *((_DWORD *)v13 + 1);
          v240 = v183;
          if ((v184 & 0x80000000) != 0 || (v185 = v66 - *((_DWORD *)v13 + 2), (v185 & 0x80000000) != 0))
          {
            v190 = v66;
            v186 = 0;
            v189 = v13;
            v188 = *((_QWORD *)v13 + 18);
          }
          else
          {
            v186 = 0;
            v187 = *v13;
            v188 = *((_QWORD *)v13 + 18);
            v189 = v13;
            if (v184 >= v187)
            {
              v190 = v251;
            }
            else
            {
              v190 = v251;
              if (v185 < v187)
                v186 = (char *)(*(_QWORD *)(v188 + 64)
                              + 2 * ((v184 >> 1) + *(unsigned __int8 *)(v188 + 1) * (unint64_t)(v185 >> 1)));
            }
          }
          v196 = 2 * *(unsigned __int8 *)(v188 + 1);
          v197 = (int)v238;
          do
          {
            --v197;
            memcpy(v186, v80, 2 * (int)v238);
            v186 += v196;
            v80 += v82;
          }
          while (v197);
          v13 = v189;
          v191 = v250 - *((_DWORD *)v189 + 1);
          v192 = &v254;
          v96 = 1;
          if ((v191 & 0x80000000) != 0)
          {
            v66 = v190;
            v172 = v252;
            v173 = v244;
            v183 = v240;
LABEL_134:
            v200 = *v192;
            if (v246 && v229 + ((v230 * v234) >> 8) > v183 + ((v173 * v182) >> 8))
            {
              v201 = v66;
              v202 = *(_QWORD *)(v172 + 2400);
              v203 = v13;
              v204 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v202 + 376) + 80) + 24))(*(_QWORD *)(*(_QWORD *)(v202 + 376) + 80), *(_QWORD *)(*(_QWORD *)(v202 + 376) + 88) + 1);
              v205 = 0;
              v206 = v250 - *((_DWORD *)v203 + 1) + 1;
              if ((v206 & 0x80000000) != 0)
              {
                v208 = v238;
              }
              else
              {
                v207 = v201 - *((_DWORD *)v203 + 2);
                v208 = v238;
                if ((v207 & 0x80000000) == 0)
                {
                  v205 = 0;
                  v209 = *v203;
                  if (v206 < v209 && v207 < v209)
                    v205 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)v203 + 18)
                                                                                             + 96)
                                                                               + 24))(*(_QWORD *)(*((_QWORD *)v203 + 18) + 96), *(_QWORD *)(*((_QWORD *)v203 + 18) + 104)+ v206+ *(unsigned __int8 *)(*((_QWORD *)v203 + 18) + 1) * (unint64_t)(v207 & 0xFFFFFFFE));
                }
              }
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v202 + 8152))((2 << v242), v208, v82, v204, v235, v205);
              v213 = v250 - *((_DWORD *)v203 + 1);
              v233 = v96;
              if ((v213 & 0x80000000) != 0 || (v214 = v201 - *((_DWORD *)v203 + 2), (v214 & 0x80000000) != 0))
              {
                v215 = 0;
                v218 = v203;
                v217 = *((_QWORD *)v203 + 18);
              }
              else
              {
                v215 = 0;
                v216 = *v203;
                v217 = *((_QWORD *)v203 + 18);
                v218 = v203;
                if (v213 < v216 && v214 < v216)
                  v215 = (char *)(*(_QWORD *)(v217 + 72)
                                + 2 * ((v213 >> 1) + *(unsigned __int8 *)(v217 + 1) * (unint64_t)(v214 >> 1)));
              }
              v219 = 2 * *(unsigned __int8 *)(v217 + 1);
              v220 = (int)v208;
              do
              {
                --v220;
                memcpy(v215, v81, 2 * (int)v208);
                v215 += v219;
                v81 += v82;
              }
              while (v220);
              v13 = v218;
              v221 = v250 - *((_DWORD *)v218 + 1);
              v66 = v201;
              if ((v221 & 0x80000000) == 0)
              {
                v222 = v201 - *((_DWORD *)v218 + 2);
                if ((v222 & 0x80000000) == 0)
                {
                  v223 = *v218;
                  if (v221 < v223 && v222 < v223)
                    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v218 + 18) + 24)
                             + (v221 >> 3)
                             + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v218 + 18) + 1) >> 2) * (v222 >> 3)) = 1;
                }
              }
              v25 = v253 + v200;
              v97 = 1;
              LODWORD(v15) = v250;
              v96 = v233;
            }
            else
            {
              LODWORD(v15) = v250;
              v210 = v250 - *((_DWORD *)v13 + 1);
              if ((v210 & 0x80000000) == 0)
              {
                v211 = v66 - *((_DWORD *)v13 + 2);
                if ((v211 & 0x80000000) == 0)
                {
                  v212 = *v13;
                  if (v210 < v212 && v211 < v212)
                    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v13 + 18) + 24)
                             + (v210 >> 3)
                             + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v13 + 18) + 1) >> 2) * (v211 >> 3)) = 0;
                }
              }
              v25 = v255 + v200;
              v97 = v226;
            }
            LOBYTE(v62) = v231;
            goto LABEL_165;
          }
          v66 = v190;
          v193 = v190 - *((_DWORD *)v13 + 2);
          v172 = v252;
          v173 = v244;
          v183 = v240;
          if ((v193 & 0x80000000) != 0)
            goto LABEL_134;
          v198 = *v13;
          v195 = 1;
          if (v191 >= v198 || v193 >= v198)
            goto LABEL_134;
        }
        else
        {
          v191 = v250 - *((_DWORD *)v13 + 1);
          v192 = &v256;
          if ((v191 & 0x80000000) != 0)
          {
            v96 = v232;
            goto LABEL_134;
          }
          v193 = v66 - *((_DWORD *)v13 + 2);
          v96 = v232;
          if ((v193 & 0x80000000) != 0)
            goto LABEL_134;
          v194 = *v13;
          if (v191 >= v194 || v193 >= v194)
            goto LABEL_134;
          v195 = 0;
        }
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v13 + 18) + 16)
                 + (v191 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v13 + 18) + 1) >> 2) * (v193 >> 3)) = v195;
        goto LABEL_134;
      }
      v114 = 0;
    }
    *(_QWORD *)(*(_QWORD *)(v113 + 2400) + 880) = 0;
    goto LABEL_93;
  }
  return v25;
}

uint64_t sub_1B6867058(_QWORD *a1, unsigned int a2, unsigned int a3, int a4, __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, BOOL *a15, _BYTE *a16, char a17, char a18)
{
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (**v25)(_QWORD *);
  void (**v26)(_QWORD *);
  void (**v27)(_QWORD *);
  void (**v28)(void *);
  __int16 v29;
  int v30;
  uint64_t v31;
  char v32;
  BOOL *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v41;
  uint64_t v44;

  v21 = 1 << a4;
  v41 = 1 << a4 << a4;
  v22 = (char *)a1 + 2 * (1 << a4 << a4);
  v23 = a1[297];
  v44 = a4 - 2;
  v24 = v23 + 8 * v44;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, char *))(v24 + 2080))(a6, a7, a8, a9, a1, v22);
  v25 = (void (**)(_QWORD *))(v24 + 1928);
  v26 = (void (**)(_QWORD *))(v23 + 1976);
  if (a17)
    v27 = v26;
  else
    v27 = v25;
  (*v27)(a1);
  if (a18)
    v28 = (void (**)(void *))v26;
  else
    v28 = (void (**)(void *))v25;
  (*v28)(v22);
  v29 = *a5;
  if (*(_BYTE *)(a1[299] + 128))
  {
    v30 = *(unsigned __int8 *)(a1[298] + 2009) + ~((v29 & 3) + a4);
    *a15 = sub_1B686370C((uint64_t)a1, a2, a3, (v29 >> 9), (uint64_t)a1, v21, a12, a14, a4, v30, 1);
    v31 = a13;
    v32 = sub_1B686370C((uint64_t)a1, a2, a3, (*a5 >> 9), (uint64_t)v22, v21, a13, a14, a4, v30, 2);
    v33 = a15;
    v34 = a14;
  }
  else
  {
    v34 = a14;
    *a15 = sub_1B6864E4C((uint64_t)a1, a2, a3, (v29 >> 9), (uint64_t)a1, v21, a12, a14, a4, 1, 1);
    v31 = a13;
    v32 = sub_1B6864E4C((uint64_t)a1, a2, a3, (*a5 >> 9), (uint64_t)v22, v21, a13, a14, a4, 2, 1);
    v33 = a15;
  }
  *a16 = v32;
  if (*v33)
  {
    v35 = 1 << a4;
    sub_1B68652B4((uint64_t)a1, *a5, a12, v34, (uint64_t)a1, 1 << a4, a4, 1u);
  }
  else
  {
    bzero(a1, 2 * v41);
    v35 = 1 << a4;
  }
  if (*a16)
    sub_1B68652B4((uint64_t)a1, *a5, v31, v34, (uint64_t)v22, v35, a4, 2u);
  else
    bzero(v22, 2 * v41);
  if (a18)
    v36 = -1;
  else
    v36 = 256;
  if (*a16)
    v37 = v36;
  else
    v37 = 0;
  if (a17)
    v38 = -1;
  else
    v38 = 256;
  if (*v33)
    v39 = v38;
  else
    v39 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, char *, uint64_t, uint64_t))(a1[297] + 8 * v44 + 1952))(a10, a11, a1, v22, v39, v37);
}

unint64_t sub_1B6867384(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned int a6, unsigned int a7, int a8, int a9, int a10, int a11, unsigned int a12, _DWORD *a13)
{
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  _BOOL4 v47;
  int v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD *, uint64_t, unsigned __int8 *, _QWORD, unsigned __int8 *, _QWORD, _QWORD, _QWORD, int, _QWORD);
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  __int16 *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  unsigned __int8 *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  int v97;
  int v98;
  int v99;
  __int16 *v100;
  unsigned int v101;
  unsigned int v102;
  unint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned __int8 *v128;
  unint64_t v129;
  int v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned __int8 *v149;
  unint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  int v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  int v200;
  unint64_t v201;
  char *v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  int v207;
  unsigned __int8 *v208;
  unsigned __int8 *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unint64_t *v215;
  unsigned int v216;
  unsigned int v217;
  char v218;
  unsigned int v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  char *v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  int v234;
  int v235;
  unsigned __int8 *v236;
  unsigned __int8 *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  uint64_t v248;
  int v250;
  unint64_t v251;
  int v252;
  unint64_t v253;
  int v254;
  int v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  _BOOL4 v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  int v265;
  int v266;
  uint64_t v267;
  int v268;
  unsigned int v269;
  int v270;
  uint64_t v272;
  int v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  __int16 v283;
  unsigned __int8 v284[10];

  v274 = a8;
  v14 = a4;
  v15 = a3;
  v16 = a2;
  v18 = 0;
  v19 = a2 - *((_DWORD *)a5 + 1);
  v20 = (_DWORD)a3 - *((_DWORD *)a5 + 2);
  if ((v19 & 0x80000000) == 0 && (v20 & 0x80000000) == 0)
  {
    v21 = *a5;
    if (v19 >= v21 || v20 >= v21)
      v18 = 0;
    else
      v18 = (unsigned __int16 *)(*((_QWORD *)a5 + 11)
                               + 2 * ((v19 >> 3) + (v21 >> 3) * (unint64_t)(v20 >> 3)));
  }
  v23 = *(unsigned __int8 *)(*((_QWORD *)a4 + 17) + 1);
  *(_WORD *)v284 = 0;
  if (a8 == 35)
    v274 = *(unsigned __int8 *)(*((_QWORD *)a5 + 12) + 16 * ((v19 >> 2) + ((unint64_t)*a5 >> 2) * (v20 >> 2)));
  v24 = a10;
  v25 = *(_QWORD *)(a1 + 2384);
  v277 = a1;
  if (*(unsigned __int8 *)(v25 + 2011) < a9)
  {
    v265 = a9 - 1;
    goto LABEL_15;
  }
  if (*(unsigned __int8 *)(v25 + 2012) >= a9)
  {
    if (a11)
      return 0;
    v265 = a9;
    goto LABEL_23;
  }
  v265 = a9 - 1;
  if (((*v18 >> 2) & 3) == a10)
  {
LABEL_23:
    v35 = 0;
    v267 = a4[1];
    v36 = (a2 - *((_DWORD *)a4 + 1));
    v37 = (_DWORD)a3 - *((_DWORD *)a4 + 2);
    if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
    {
      v35 = 0;
      v38 = *a4;
      if (v36 < v38 && v37 < v38)
      {
        v39 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a4 + 5) + 24))(*((_QWORD *)a4 + 5), v36 + a4[1] * (unint64_t)(v37 >> 1) + *((_QWORD *)a4 + 6));
        a1 = v277;
        v35 = v39;
        v24 = a10;
        LODWORD(v36) = v16 - *((_DWORD *)v14 + 1);
        v37 = (_DWORD)v15 - *((_DWORD *)v14 + 2);
      }
    }
    v40 = 0;
    if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
    {
      v40 = 0;
      v41 = *v14;
      if (v36 < v41 && v37 < v41)
      {
        v42 = *(_QWORD *)&v14[8 * a6 + 136];
        v43 = v24;
        v44 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v42 + 96) + 24))(*(_QWORD *)(v42 + 96), *(_QWORD *)(v42 + 104)+ v36+ *(unsigned __int8 *)(v42 + 1) * (unint64_t)(v37 & 0xFFFFFFFE));
        a1 = v277;
        v40 = v44;
        v24 = v43;
      }
    }
    v45 = *(_QWORD *)(a1 + 2392);
    if (*(_BYTE *)(v45 + 352))
      v46 = v265 == 2;
    else
      v46 = 0;
    v47 = v46;
    if (*(_BYTE *)(v45 + 353) && v47)
    {
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
      v52 = *((_QWORD *)v51 + 1);
      v53 = (unint64_t)*v51 >> 2;
      do
      {
        v50 += *(unsigned __int8 *)(v52
                                  + (((v49 & 4) + v16 - *((_DWORD *)a5 + 1)) >> 2)
                                  + v53
                                  * (unint64_t)(((v48 & 0x7FFFFFFC) + v15 - *((_DWORD *)a5 + 2)) >> 2));
        v49 += 4;
        v48 += 2;
      }
      while (v49 != 16);
      v47 = v50 != 0;
    }
    v261 = v47;
    v54 = 2 * v23;
    v55 = (1 << v265);
    v56 = *(_QWORD *)(a1 + 2400);
    if (v24 > 0 || !*(_BYTE *)(v56 + 4699))
    {
      v57 = *(void (**)(_QWORD *, uint64_t, unsigned __int8 *, _QWORD, unsigned __int8 *, _QWORD, _QWORD, _QWORD, int, _QWORD))(v56 + 8176);
      v58 = *(_QWORD *)(v56 + 8184);
      v59 = (_QWORD *)(v56 + (v58 >> 1));
      if ((v58 & 1) != 0)
        v57 = *(void (**)(_QWORD *, uint64_t, unsigned __int8 *, _QWORD, unsigned __int8 *, _QWORD, _QWORD, _QWORD, int, _QWORD))(*v59 + v57);
      v57(v59, v16, v15, *(unsigned int *)(a1 + 2432), v14, a6, a7, a12, v265, *((_QWORD *)v14 + 19));
      a1 = v277;
    }
    v60 = v40;
    v61 = v40;
    v62 = (_QWORD *)a1;
    sub_1B67D5868(*(_QWORD *)(a1 + 2376) + 1424, v274, v265, *((_QWORD *)v14 + 19), v54, v61);
    v276 = (1 << v265);
    v272 = v54;
    v263 = v35;
    if (v261)
    {
      v63 = v14;
      v64 = v62[300];
      v65 = *(unsigned __int8 **)(v64 + 376);
      v66 = 2 * *v65;
      v67 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v65 + 10) + 24))(*((_QWORD *)v65 + 10), *((_QWORD *)v65 + 11));
      v68 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 8144);
      v14 = v63;
      v55 = (1 << v265);
      v69 = v66;
      v35 = v263;
      v68((2 << v265), v276, v54, v60, v69, v67);
    }
    v70 = 0;
    v71 = v62[300];
    *(_DWORD *)(v71 + 808) = v16;
    *(_DWORD *)(v71 + 812) = (_DWORD)v15;
    v72 = *((_QWORD *)v14 + 12);
    v73 = ((v16 - *((_DWORD *)v14 + 1)) >> 2)
        + ((unint64_t)*v14 >> 2) * (((_DWORD)v15 - *((_DWORD *)v14 + 2)) >> 2);
    *(_QWORD *)(v71 + 864) = v72 + 16 * v73;
    *(_BYTE *)(v72 + 16 * v73) = *(_BYTE *)(*((_QWORD *)a5 + 12)
                                          + 16
                                          * (((v16 - *((_DWORD *)a5 + 1)) >> 2)
                                           + ((unint64_t)*a5 >> 2)
                                           * (((_DWORD)v15 - *((_DWORD *)a5 + 2)) >> 2)));
    v74 = v16 - *((_DWORD *)v14 + 1);
    if ((v74 & 0x80000000) != 0)
      goto LABEL_56;
    v75 = (_DWORD)v15 - *((_DWORD *)v14 + 2);
    v76 = 0;
    v77 = 0;
    if ((v75 & 0x80000000) != 0)
      goto LABEL_57;
    v70 = 0;
    v78 = *v14;
    if (v74 >= v78)
    {
LABEL_56:
      v76 = 0;
      v77 = 0;
    }
    else
    {
      v76 = 0;
      v77 = 0;
      if (v75 < v78)
      {
        v76 = (__int16 *)(*((_QWORD *)v14 + 11)
                        + 2 * ((v74 >> 3) + (v78 >> 3) * (unint64_t)(v75 >> 3)));
        v79 = *(_QWORD *)&v14[8 * a6 + 136];
        v80 = (v74 >> 1) + *(unsigned __int8 *)(v79 + 1) * (unint64_t)(v75 >> 1);
        v81 = *(_QWORD *)(v79 + 72);
        v70 = *(_QWORD *)(v79 + 64) + 2 * v80;
        v77 = v81 + 2 * v80;
      }
    }
LABEL_57:
    sub_1B6867058(v62, v16, v15, v265, v76, v35, v267, v60, v54, v60, v54, v70, v77, *(unsigned __int8 *)(*((_QWORD *)v14 + 17) + 1), (BOOL *)&v284[1], v284, 0, 0);
    v82 = 188;
    if (!*(_BYTE *)(v277 + 2416))
      v82 = 0;
    if (!*(_BYTE *)(*(_QWORD *)(v277 + 2400) + v82))
    {
      v28 = 0;
      goto LABEL_68;
    }
    v83 = 0;
    v84 = v16 - *((_DWORD *)v14 + 1);
    if ((v84 & 0x80000000) == 0)
    {
      v85 = (_DWORD)v15 - *((_DWORD *)v14 + 2);
      v86 = 0;
      if ((v85 & 0x80000000) != 0)
      {
LABEL_67:
        v28 = sub_1B6868700(v277, v16, (int)v15, v14, v60, v54, v83, v86, *(unsigned __int8 *)(*((_QWORD *)v14 + 17) + 1), v55, a13);
LABEL_68:
        if (!v261)
        {
          v109 = v284[1];
          v110 = v284[0];
LABEL_173:
          sub_1B688DE74(v14, v16, (int)v15, 1 << (v265 - 2), 1, v109, a6);
          sub_1B688DE74(v14, v16, (int)v15, 1 << (v265 - 2), 2, v110, a6);
          return v28;
        }
        v258 = v60;
        v90 = *(unsigned __int8 **)(*(_QWORD *)(v277 + 2400) + 376);
        v91 = (char *)*((_QWORD *)v90 + 7);
        v92 = (char *)*((_QWORD *)v90 + 8);
        v259 = *v90;
        v93 = 2 * v259;
        v94 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v90 + 10) + 24))(*((_QWORD *)v90 + 10), *((_QWORD *)v90 + 11));
        v262 = v94;
        v269 = 0;
        v283 = 0;
        v95 = *(_QWORD *)(v277 + 2400);
        v96 = *(__int128 **)(v95 + 944);
        *(_DWORD *)(v95 + 808) = v16;
        *(_DWORD *)(v95 + 812) = (_DWORD)v15;
        if ((v265 - 1) <= 1)
        {
          v97 = 26 - v274;
          if (v274 >= 26)
            v97 = v274 - 26;
          v98 = v97 < 5;
          v99 = 10 - v274;
          if (v274 >= 10)
            v99 = v274 - 10;
          if (v99 < 5)
            v98 = 2;
          v269 = v98;
        }
        v100 = 0;
        v101 = v16 - *((_DWORD *)v14 + 1);
        if ((v101 & 0x80000000) == 0)
        {
          v102 = (_DWORD)v15 - *((_DWORD *)v14 + 2);
          if ((v102 & 0x80000000) == 0)
          {
            v100 = 0;
            v103 = *v14;
            if (v101 < v103 && v102 < v103)
              v100 = (__int16 *)(*((_QWORD *)v14 + 11)
                               + 2 * ((v101 >> 3) + (v103 >> 3) * (unint64_t)(v102 >> 3)));
          }
        }
        sub_1B6867058((_QWORD *)v277, v16, v15, v265, v100, v263, v267, v94, v93, v94, v93, (uint64_t)v91, (uint64_t)v92, v259, (BOOL *)&v283 + 1, &v283, 1, 1);
        v104 = v16 - *((_DWORD *)v14 + 1);
        v105 = (_DWORD)v15 - *((_DWORD *)v14 + 2);
        if ((v104 & 0x80000000) != 0 || (v105 & 0x80000000) != 0)
        {
          v107 = v277;
        }
        else
        {
          v106 = *v14;
          v107 = v277;
          if (v104 < v106 && v105 < v106)
          {
            v108 = *(_QWORD *)&v14[8 * a6 + 136];
            *(_BYTE *)(*(_QWORD *)(v108 + 16)
                     + (v104 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(v108 + 1) >> 2) * (v105 >> 3)) = 0;
            v104 = v16 - *((_DWORD *)v14 + 1);
            v105 = (_DWORD)v15 - *((_DWORD *)v14 + 2);
          }
        }
        if ((v104 & 0x80000000) == 0 && (v105 & 0x80000000) == 0)
        {
          v111 = *v14;
          if (v104 < v111 && v105 < v111)
          {
            v112 = *(_QWORD *)&v14[8 * a6 + 136];
            *(_BYTE *)(*(_QWORD *)(v112 + 24)
                     + (v104 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(v112 + 1) >> 2) * (v105 >> 3)) = 0;
          }
        }
        *(_QWORD *)(*(_QWORD *)(v107 + 2400) + 824) = *(unsigned __int8 *)(*((_QWORD *)v14 + 17) + 1);
        v281 = 0;
        v282 = 0;
        v113 = *(_QWORD *)(v107 + 2408);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v113 + 376))(v263, v267, v258, v272, v55, v55, &v282, &v281);
        v114 = *(unsigned __int16 *)(v113 + 18);
        v281 = (v281 * v114) >> 8;
        v282 = (v282 * v114) >> 8;
        v256 = v284[1];
        if (!v284[1])
        {
          v130 = 0;
          goto LABEL_105;
        }
        v115 = v96[2];
        v116 = v96[4];
        v117 = v96[5];
        *(__int128 *)((char *)v96 + 264) = v96[3];
        *(__int128 *)((char *)v96 + 280) = v116;
        *(__int128 *)((char *)v96 + 248) = v115;
        v118 = *v96;
        *(__int128 *)((char *)v96 + 232) = v96[1];
        v119 = v96[6];
        v120 = v96[8];
        v121 = v96[9];
        *(__int128 *)((char *)v96 + 328) = v96[7];
        *(__int128 *)((char *)v96 + 344) = v120;
        *(__int128 *)((char *)v96 + 296) = v117;
        *(__int128 *)((char *)v96 + 312) = v119;
        v122 = v96[11];
        *(__int128 *)((char *)v96 + 376) = v96[10];
        *(__int128 *)((char *)v96 + 392) = v122;
        *(__int128 *)((char *)v96 + 360) = v121;
        *((_QWORD *)v96 + 51) = *((_QWORD *)v96 + 24);
        *(__int128 *)((char *)v96 + 216) = v118;
        v123 = 8 * (*((_DWORD *)v96 + 52) - *((_DWORD *)v96 + 6));
        *((_QWORD *)v96 + 4) = 0;
        *((_QWORD *)v96 + 1) = 510;
        *((_QWORD *)v96 + 2) = v123;
        v124 = v16 - *((_DWORD *)v14 + 1);
        if ((v124 & 0x80000000) != 0 || (v125 = (_DWORD)v15 - *((_DWORD *)v14 + 2), (v125 & 0x80000000) != 0))
        {
          v129 = 0;
          v127 = v277;
        }
        else
        {
          v126 = *v14;
          v127 = v277;
          if (v124 < v126 && v125 < v126)
          {
            v128 = &v14[8 * a6];
            *(_QWORD *)(*(_QWORD *)(v277 + 2400) + 880) = *(_QWORD *)(*((_QWORD *)v128 + 17) + 64)
                                                          + 2
                                                          * ((v124 >> 1)
                                                           + *(unsigned __int8 *)(*((_QWORD *)v128 + 17) + 1)
                                                           * (unint64_t)(v125 >> 1));
            v129 = *(_QWORD *)(*((_QWORD *)v128 + 17) + 16)
                 + (v124 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v128 + 17) + 1) >> 2) * (v125 >> 3);
LABEL_104:
            *(_QWORD *)(*(_QWORD *)(v127 + 2400) + 928) = v129;
            sub_1B6860B50(v127, v16, (int)v15, v265, v269, 1);
            v130 = ((*((_DWORD *)v96 + 4) + 8 * (*((_DWORD *)v96 + 6) - *((_DWORD *)v96 + 52))) << 8)
                 - *((_DWORD *)v96 + 2)
                 + 510;
            v131 = *(__int128 *)((char *)v96 + 392);
            v96[10] = *(__int128 *)((char *)v96 + 376);
            v96[11] = v131;
            *((_QWORD *)v96 + 24) = *((_QWORD *)v96 + 51);
            v132 = *(__int128 *)((char *)v96 + 328);
            v96[6] = *(__int128 *)((char *)v96 + 312);
            v96[7] = v132;
            v133 = *(__int128 *)((char *)v96 + 360);
            v96[8] = *(__int128 *)((char *)v96 + 344);
            v96[9] = v133;
            v134 = *(__int128 *)((char *)v96 + 264);
            v96[2] = *(__int128 *)((char *)v96 + 248);
            v96[3] = v134;
            v135 = *(__int128 *)((char *)v96 + 296);
            v96[4] = *(__int128 *)((char *)v96 + 280);
            v96[5] = v135;
            v136 = *(__int128 *)((char *)v96 + 232);
            *v96 = *(__int128 *)((char *)v96 + 216);
            v96[1] = v136;
LABEL_105:
            v250 = v284[0];
            v252 = v130;
            if (v284[0])
            {
              v137 = v96[2];
              v138 = v96[4];
              v139 = v96[5];
              *(__int128 *)((char *)v96 + 264) = v96[3];
              *(__int128 *)((char *)v96 + 280) = v138;
              *(__int128 *)((char *)v96 + 248) = v137;
              v140 = *v96;
              *(__int128 *)((char *)v96 + 232) = v96[1];
              v141 = v96[6];
              v142 = v96[8];
              v143 = v96[9];
              *(__int128 *)((char *)v96 + 328) = v96[7];
              *(__int128 *)((char *)v96 + 344) = v142;
              *(__int128 *)((char *)v96 + 296) = v139;
              *(__int128 *)((char *)v96 + 312) = v141;
              v144 = v96[11];
              *(__int128 *)((char *)v96 + 376) = v96[10];
              *(__int128 *)((char *)v96 + 392) = v144;
              *(__int128 *)((char *)v96 + 360) = v143;
              *((_QWORD *)v96 + 51) = *((_QWORD *)v96 + 24);
              *(__int128 *)((char *)v96 + 216) = v140;
              v145 = 8 * (*((_DWORD *)v96 + 52) - *((_DWORD *)v96 + 6));
              *((_QWORD *)v96 + 4) = 0;
              *((_QWORD *)v96 + 1) = 510;
              *((_QWORD *)v96 + 2) = v145;
              v146 = v16 - *((_DWORD *)v14 + 1);
              if ((v146 & 0x80000000) != 0
                || (v147 = (_DWORD)v15 - *((_DWORD *)v14 + 2), (v147 & 0x80000000) != 0)
                || (v148 = *v14, v146 >= v148)
                || v147 >= v148)
              {
                v150 = 0;
                *(_QWORD *)(*(_QWORD *)(v277 + 2400) + 888) = 0;
              }
              else
              {
                v149 = &v14[8 * a6];
                *(_QWORD *)(*(_QWORD *)(v277 + 2400) + 888) = *(_QWORD *)(*((_QWORD *)v149 + 17) + 72)
                                                              + 2
                                                              * ((v146 >> 1)
                                                               + *(unsigned __int8 *)(*((_QWORD *)v149 + 17) + 1)
                                                               * (unint64_t)(v147 >> 1));
                v150 = *(_QWORD *)(*((_QWORD *)v149 + 17) + 24)
                     + (v146 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v149 + 17) + 1) >> 2) * (v147 >> 3);
              }
              *(_QWORD *)(*(_QWORD *)(v277 + 2400) + 936) = v150;
              sub_1B6860B50(v277, v16, (int)v15, v265, v269, 2);
              v151 = v277;
              v254 = ((*((_DWORD *)v96 + 4) + 8 * (*((_DWORD *)v96 + 6) - *((_DWORD *)v96 + 52))) << 8)
                   - *((_DWORD *)v96 + 2)
                   + 510;
              v152 = *(__int128 *)((char *)v96 + 392);
              v96[10] = *(__int128 *)((char *)v96 + 376);
              v96[11] = v152;
              *((_QWORD *)v96 + 24) = *((_QWORD *)v96 + 51);
              v153 = *(__int128 *)((char *)v96 + 328);
              v96[6] = *(__int128 *)((char *)v96 + 312);
              v96[7] = v153;
              v154 = *(__int128 *)((char *)v96 + 360);
              v96[8] = *(__int128 *)((char *)v96 + 344);
              v96[9] = v154;
              v155 = *(__int128 *)((char *)v96 + 264);
              v96[2] = *(__int128 *)((char *)v96 + 248);
              v96[3] = v155;
              v156 = *(__int128 *)((char *)v96 + 296);
              v96[4] = *(__int128 *)((char *)v96 + 280);
              v96[5] = v156;
              v157 = *(__int128 *)((char *)v96 + 232);
              *v96 = *(__int128 *)((char *)v96 + 216);
              v96[1] = v157;
            }
            else
            {
              v254 = 0;
              v151 = v277;
            }
            v275 = (int)v15;
            v158 = *(_QWORD *)(v151 + 2408);
            v251 = v282;
            v255 = *(unsigned __int16 *)(v158 + 8);
            v253 = v281;
            v279 = 0;
            v280 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v158 + 376))(v263, v267, v262, v93, v55, v55, &v280, &v279);
            v159 = *(unsigned __int16 *)(v158 + 18);
            v279 = (v279 * v159) >> 8;
            v280 = (v280 * v159) >> 8;
            v160 = *(_QWORD *)(v277 + 2400);
            *(_QWORD *)(v160 + 824) = v259;
            **(_BYTE **)(*(_QWORD *)(v160 + 376) + 16) = 1;
            **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(v277 + 2400) + 376) + 24) = 1;
            v161 = HIBYTE(v283);
            if (HIBYTE(v283))
            {
              v162 = v96[2];
              v163 = v96[4];
              v164 = v96[5];
              *(__int128 *)((char *)v96 + 264) = v96[3];
              *(__int128 *)((char *)v96 + 280) = v163;
              *(__int128 *)((char *)v96 + 248) = v162;
              v165 = *v96;
              *(__int128 *)((char *)v96 + 232) = v96[1];
              v166 = v96[6];
              v167 = v96[8];
              v168 = v96[9];
              *(__int128 *)((char *)v96 + 328) = v96[7];
              *(__int128 *)((char *)v96 + 344) = v167;
              *(__int128 *)((char *)v96 + 296) = v164;
              *(__int128 *)((char *)v96 + 312) = v166;
              v169 = v96[11];
              *(__int128 *)((char *)v96 + 376) = v96[10];
              *(__int128 *)((char *)v96 + 392) = v169;
              *(__int128 *)((char *)v96 + 360) = v168;
              *((_QWORD *)v96 + 51) = *((_QWORD *)v96 + 24);
              *(__int128 *)((char *)v96 + 216) = v165;
              v170 = 8 * (*((_DWORD *)v96 + 52) - *((_DWORD *)v96 + 6));
              *((_QWORD *)v96 + 4) = 0;
              *((_QWORD *)v96 + 1) = 510;
              *((_QWORD *)v96 + 2) = v170;
              *(_QWORD *)(*(_QWORD *)(v277 + 2400) + 880) = v91;
              *(_QWORD *)(*(_QWORD *)(v277 + 2400) + 928) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v277 + 2400) + 376)
                                                                        + 16);
              sub_1B6860B50(v277, v16, (int)v15, v265, v269, 1);
              v171 = ((*((_DWORD *)v96 + 4) + 8 * (*((_DWORD *)v96 + 6) - *((_DWORD *)v96 + 52))) << 8)
                   - *((_DWORD *)v96 + 2)
                   + 510;
              v172 = *(__int128 *)((char *)v96 + 360);
              v173 = *(__int128 *)((char *)v96 + 392);
              v96[10] = *(__int128 *)((char *)v96 + 376);
              v96[11] = v173;
              *((_QWORD *)v96 + 24) = *((_QWORD *)v96 + 51);
              v174 = *(__int128 *)((char *)v96 + 296);
              v175 = *(__int128 *)((char *)v96 + 328);
              v176 = *(__int128 *)((char *)v96 + 344);
              v96[6] = *(__int128 *)((char *)v96 + 312);
              v96[7] = v175;
              v96[8] = v176;
              v96[9] = v172;
              v177 = *(__int128 *)((char *)v96 + 264);
              v178 = *(__int128 *)((char *)v96 + 280);
              v96[2] = *(__int128 *)((char *)v96 + 248);
              v96[3] = v177;
              v179 = *(__int128 *)((char *)v96 + 232);
              v96[4] = v178;
              v96[5] = v174;
              *v96 = *(__int128 *)((char *)v96 + 216);
              v96[1] = v179;
            }
            else
            {
              v171 = 0;
            }
            v268 = v283;
            if ((_BYTE)v283)
            {
              v180 = v96[2];
              v181 = v96[4];
              v182 = v96[5];
              *(__int128 *)((char *)v96 + 264) = v96[3];
              *(__int128 *)((char *)v96 + 280) = v181;
              *(__int128 *)((char *)v96 + 248) = v180;
              v183 = *v96;
              *(__int128 *)((char *)v96 + 232) = v96[1];
              v184 = v96[6];
              v185 = v96[8];
              v186 = v96[9];
              *(__int128 *)((char *)v96 + 328) = v96[7];
              *(__int128 *)((char *)v96 + 344) = v185;
              *(__int128 *)((char *)v96 + 296) = v182;
              *(__int128 *)((char *)v96 + 312) = v184;
              v187 = v96[11];
              *(__int128 *)((char *)v96 + 376) = v96[10];
              *(__int128 *)((char *)v96 + 392) = v187;
              *(__int128 *)((char *)v96 + 360) = v186;
              *((_QWORD *)v96 + 51) = *((_QWORD *)v96 + 24);
              *(__int128 *)((char *)v96 + 216) = v183;
              v188 = 8 * (*((_DWORD *)v96 + 52) - *((_DWORD *)v96 + 6));
              *((_QWORD *)v96 + 4) = 0;
              *((_QWORD *)v96 + 1) = 510;
              *((_QWORD *)v96 + 2) = v188;
              *(_QWORD *)(*(_QWORD *)(v277 + 2400) + 888) = v92;
              *(_QWORD *)(*(_QWORD *)(v277 + 2400) + 936) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v277 + 2400) + 376)
                                                                        + 24);
              v189 = v171;
              sub_1B6860B50(v277, v16, (int)v15, v265, v269, 2);
              v171 = v189;
              v190 = v277;
              v55 = (1 << v265);
              v191 = ((*((_DWORD *)v96 + 4) + 8 * (*((_DWORD *)v96 + 6) - *((_DWORD *)v96 + 52))) << 8)
                   - *((_DWORD *)v96 + 2)
                   + 510;
              v192 = *(__int128 *)((char *)v96 + 360);
              v193 = *(__int128 *)((char *)v96 + 392);
              v96[10] = *(__int128 *)((char *)v96 + 376);
              v96[11] = v193;
              *((_QWORD *)v96 + 24) = *((_QWORD *)v96 + 51);
              v194 = *(__int128 *)((char *)v96 + 296);
              v195 = *(__int128 *)((char *)v96 + 328);
              v196 = *(__int128 *)((char *)v96 + 344);
              v96[6] = *(__int128 *)((char *)v96 + 312);
              v96[7] = v195;
              v96[8] = v196;
              v96[9] = v192;
              v197 = *(__int128 *)((char *)v96 + 264);
              v198 = *(__int128 *)((char *)v96 + 280);
              v96[2] = *(__int128 *)((char *)v96 + 248);
              v96[3] = v197;
              v199 = *(__int128 *)((char *)v96 + 232);
              v96[4] = v198;
              v96[5] = v194;
              *v96 = *(__int128 *)((char *)v96 + 216);
              v96[1] = v199;
            }
            else
            {
              v191 = 0;
              v190 = v277;
            }
            v200 = *(unsigned __int16 *)(*(_QWORD *)(v190 + 2408) + 8);
            v201 = v279;
            if (v161 && v251 + ((v252 * v255) >> 8) > v280 + ((v171 * v200) >> 8))
            {
              v260 = *(unsigned __int16 *)(*(_QWORD *)(v190 + 2408) + 8);
              v264 = v279;
              v270 = v191;
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v190 + 2400)
                                                                                          + 8152))((2 << v265), v55, v93, v262, v272, v258);
              v202 = 0;
              v203 = v16 - *((_DWORD *)v14 + 1);
              if ((v203 & 0x80000000) == 0)
              {
                v204 = (_DWORD)v15 - *((_DWORD *)v14 + 2);
                if ((v204 & 0x80000000) == 0)
                {
                  v202 = 0;
                  v205 = *v14;
                  if (v203 < v205 && v204 < v205)
                  {
                    v206 = *(_QWORD *)&v14[8 * a6 + 136];
                    v202 = (char *)(*(_QWORD *)(v206 + 64)
                                  + 2 * ((v203 >> 1) + *(unsigned __int8 *)(v206 + 1) * (unint64_t)(v204 >> 1)));
                  }
                }
              }
              v207 = v16;
              v208 = v14;
              v209 = &v14[8 * a6];
              v211 = *((_QWORD *)v209 + 17);
              v210 = (uint64_t)(v209 + 136);
              v212 = 2 * *(unsigned __int8 *)(v211 + 1);
              v213 = (int)v276;
              do
              {
                --v213;
                memcpy(v202, v91, 2 * (int)v276);
                v202 += v212;
                v91 += v93;
              }
              while (v213);
              v14 = v208;
              v214 = v207 - *((_DWORD *)v208 + 1);
              v215 = &v280;
              v109 = 1;
              if ((v214 & 0x80000000) != 0)
              {
                LODWORD(v15) = v275;
                LODWORD(v16) = v207;
                v190 = v277;
                v191 = v270;
                v201 = v264;
                v200 = v260;
                goto LABEL_145;
              }
              LODWORD(v15) = v275;
              v216 = v275 - *((_DWORD *)v14 + 2);
              LODWORD(v16) = v207;
              v190 = v277;
              v191 = v270;
              v201 = v264;
              v200 = v260;
              if ((v216 & 0x80000000) == 0)
              {
                v217 = *v14;
                v218 = 1;
                if (v214 < v217 && v216 < v217)
                  goto LABEL_142;
              }
            }
            else
            {
              v214 = v16 - *((_DWORD *)v14 + 1);
              v215 = &v282;
              if ((v214 & 0x80000000) != 0)
              {
                v109 = v256;
                goto LABEL_145;
              }
              v216 = (_DWORD)v15 - *((_DWORD *)v14 + 2);
              v109 = v256;
              if ((v216 & 0x80000000) == 0)
              {
                v220 = *v14;
                if (v214 < v220 && v216 < v220)
                {
                  v218 = 0;
                  v210 = (uint64_t)&v14[8 * a6 + 136];
                  v215 = &v282;
LABEL_142:
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v210 + 16)
                           + (v214 >> 3)
                           + ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v210 + 1) >> 2) * (v216 >> 3)) = v218;
                }
              }
            }
LABEL_145:
            v221 = *v215;
            if (v268 && v253 + ((v254 * v255) >> 8) > v201 + ((v191 * v200) >> 8))
            {
              v278 = *v215;
              v222 = *(_QWORD *)(v190 + 2400);
              v223 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v222 + 376) + 80) + 24))(*(_QWORD *)(*(_QWORD *)(v222 + 376) + 80), *(_QWORD *)(*(_QWORD *)(v222 + 376) + 88) + 1);
              v224 = 0;
              v225 = v16 - *((_DWORD *)v14 + 1) + 1;
              if ((v225 & 0x80000000) == 0)
              {
                v226 = (_DWORD)v15 - *((_DWORD *)v14 + 2);
                if ((v226 & 0x80000000) == 0)
                {
                  v224 = 0;
                  v227 = *v14;
                  if (v225 < v227 && v226 < v227)
                  {
                    v228 = *(_QWORD *)&v14[8 * a6 + 136];
                    v224 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v228 + 96) + 24))(*(_QWORD *)(v228 + 96), *(_QWORD *)(v228 + 104)+ v225+ *(unsigned __int8 *)(v228 + 1) * (unint64_t)(v226 & 0xFFFFFFFE));
                  }
                }
              }
              (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v222 + 8152))((2 << v265), v276, v93, v223, v272, v224);
              v229 = 0;
              v230 = v16 - *((_DWORD *)v14 + 1);
              if ((v230 & 0x80000000) == 0)
              {
                v231 = (_DWORD)v15 - *((_DWORD *)v14 + 2);
                if ((v231 & 0x80000000) == 0)
                {
                  v229 = 0;
                  v232 = *v14;
                  if (v230 < v232 && v231 < v232)
                  {
                    v233 = *(_QWORD *)&v14[8 * a6 + 136];
                    v229 = (char *)(*(_QWORD *)(v233 + 72)
                                  + 2 * ((v230 >> 1) + *(unsigned __int8 *)(v233 + 1) * (unint64_t)(v231 >> 1)));
                  }
                }
              }
              v257 = v109;
              v234 = v16;
              v235 = (int)v15;
              v15 = v14;
              v236 = &v14[8 * a6];
              v238 = *((_QWORD *)v236 + 17);
              v237 = v236 + 136;
              v239 = 2 * *(unsigned __int8 *)(v238 + 1);
              v240 = (int)v276;
              do
              {
                --v240;
                memcpy(v229, v92, 2 * (int)v276);
                v229 += v239;
                v92 += v93;
              }
              while (v240);
              v14 = v15;
              v241 = v234 - *((_DWORD *)v15 + 1);
              LODWORD(v15) = v235;
              if ((v241 & 0x80000000) == 0)
              {
                v242 = v235 - *((_DWORD *)v14 + 2);
                if ((v242 & 0x80000000) == 0)
                {
                  v243 = *v14;
                  if (v241 < v243 && v242 < v243)
                    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v237 + 24)
                             + (v241 >> 3)
                             + ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)v237 + 1) >> 2) * (v242 >> 3)) = 1;
                }
              }
              v28 = v279 + v278;
              v110 = 1;
              LODWORD(v16) = v234;
              v109 = v257;
            }
            else
            {
              v245 = v16 - *((_DWORD *)v14 + 1);
              if ((v245 & 0x80000000) == 0)
              {
                v246 = (_DWORD)v15 - *((_DWORD *)v14 + 2);
                if ((v246 & 0x80000000) == 0)
                {
                  v247 = *v14;
                  if (v245 < v247 && v246 < v247)
                  {
                    v248 = *(_QWORD *)&v14[8 * a6 + 136];
                    *(_BYTE *)(*(_QWORD *)(v248 + 24)
                             + (v245 >> 3)
                             + ((unint64_t)*(unsigned __int8 *)(v248 + 1) >> 2) * (v246 >> 3)) = 0;
                  }
                }
              }
              v28 = v281 + v221;
              v110 = v250;
            }
            goto LABEL_173;
          }
          v129 = 0;
        }
        *(_QWORD *)(*(_QWORD *)(v127 + 2400) + 880) = 0;
        goto LABEL_104;
      }
      v83 = 0;
      v87 = *v14;
      if (v84 < v87)
      {
        v86 = 0;
        if (v85 < v87)
        {
          v88 = *(_QWORD *)&v14[8 * a6 + 136];
          v89 = (v84 >> 1) + *(unsigned __int8 *)(v88 + 1) * (unint64_t)(v85 >> 1);
          v83 = *(_QWORD *)(v88 + 64) + 2 * v89;
          v86 = *(_QWORD *)(v88 + 72) + 2 * v89;
        }
        goto LABEL_67;
      }
    }
    v86 = 0;
    goto LABEL_67;
  }
LABEL_15:
  v27 = 0;
  LODWORD(v28) = 0;
  v29 = a2;
  v266 = (1 << v265) + a2;
  v30 = (int)a3;
  v31 = (1 << v265) + (_DWORD)a3;
  do
  {
    v32 = *(_QWORD *)(a1 + 2384);
    v33 = a12;
    if (a9 - 2 >= *(unsigned __int8 *)(v32 + 2012))
    {
      v33 = sub_1B683B42C(a12, v27, v266 < *(_DWORD *)(v32 + 176), v31 < *(_DWORD *)(v32 + 180));
      a1 = v277;
    }
    v34 = sub_1B6867384(a1, ((v27 & 1) << v265) + v29, (v27 >> 1 << v265) + v30, a4, a5, a6, a7, v274, __PAIR64__(a10 + 1, v265), __PAIR64__(v33, v27), a13);
    a1 = v277;
    v28 = (v34 + v28);
    ++v27;
  }
  while (v27 != 4);
  return v28;
}

unint64_t sub_1B6868700(uint64_t a1, int a2, int a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, _DWORD *a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v40;
  uint64_t v41;

  v17 = 0;
  v18 = *(_QWORD *)(a1 + 2408);
  v19 = (a2 - *((_DWORD *)a4 + 1));
  if ((v19 & 0x80000000) == 0)
  {
    v20 = a3 - *((_DWORD *)a4 + 2);
    if ((v20 & 0x80000000) == 0)
    {
      v21 = *a4;
      if (v19 < v21 && v20 < v21)
      {
        v17 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)a4 + 5) + 24))(*((_QWORD *)a4 + 5), v19 + a4[1] * (unint64_t)(v20 >> 1) + *((_QWORD *)a4 + 6), 0);
        v23 = *(_QWORD *)(a1 + 2408);
        goto LABEL_10;
      }
      v17 = 0;
    }
  }
  v23 = *(_QWORD *)(a1 + 2408);
LABEL_10:
  v24 = (*(unsigned __int16 *)(v23 + 18)
       * (unint64_t)(*(unsigned int (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 8 * __clz(__rbit32(a10)) + 168))(a10, a10, v17, a4[1], a5, a6)) >> 8;
  v40 = 0;
  v41 = 0;
  v25 = a1 + 8 * ((a10 & 7) == 0);
  (*(void (**)(_QWORD, uint64_t, uint64_t, char *, char *))(v25 + 2224))(a10, a9, a7, (char *)&v41 + 4, (char *)&v40 + 4);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t *))(v25 + 2224))(a10, a9, a8, &v41, &v40);
  v26 = *(_QWORD *)(a1 + 2376);
  v27 = *(unsigned __int8 *)(*(_QWORD *)(v26 + 1368) + 2003);
  v28 = v27 + 57;
  v29 = *(_QWORD *)(v26 + 1384);
  v30 = v27
      + (*(__int16 *)(*((_QWORD *)a4 + 11)
                    + 2
                    * (((a2 - *((_DWORD *)a4 + 1)) >> 3)
                     + ((unint64_t)*a4 >> 3) * ((a3 - *((_DWORD *)a4 + 2)) >> 3))) >> 9);
  v31 = v30 + *(char *)(v29 + 14) + *(char *)(v26 + 544);
  if (v31 >= v28)
    v32 = v28;
  else
    v32 = v30 + *(char *)(v29 + 14) + *(char *)(v26 + 544);
  if (v31 <= 0)
    v33 = 0;
  else
    v33 = v32;
  v34 = v30 + *(char *)(v29 + 15) + *(char *)(v26 + 545);
  if (v34 >= v28)
    v35 = v28;
  else
    v35 = v34;
  if (v34 <= 0)
    v36 = 0;
  else
    v36 = v35;
  *a11 = (HIDWORD(v41) * byte_1B6924AF8[v33]
        + HIDWORD(v40) * byte_1B6924AF8[v33 + 70]
        + (_DWORD)v41 * byte_1B6924AF8[v36]
        + (_DWORD)v40 * byte_1B6924AF8[v36 + 70]) << 8;
  return v24;
}

uint64_t sub_1B6868918(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned __int8 *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  char v18;
  _WORD *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  _WORD *v28;
  uint64_t v29;

  LODWORD(v7) = a5;
  LODWORD(v8) = a4;
  v11 = result;
  while (1)
  {
    v12 = *(unsigned __int8 **)(v11 + 2384);
    v13 = v12[244];
    if (*(_DWORD *)(v11 + 2056))
      v14 = (v8 | v13) == 0;
    else
      v14 = 0;
    v15 = v14;
    v16 = *(_DWORD *)(v11 + 2048) - v13 - v15;
    if (v16 <= v12[2010])
      v16 = v12[2010];
    v17 = v12[2011];
    if (v16 > v17)
      v16 = v17 - v15;
    v18 = v16 < (int)v7 ? v15 : 0;
    if ((v18 & 1) == 0 && (int)v7 <= v17)
      break;
    v7 = (v7 - 1);
    v8 = (v8 + 1);
    sub_1B6868918(v11, a2, a3, v8, v7, a6);
    sub_1B6868918(v11, ((1 << v7) + a2), a3, v8, v7, a6);
    result = sub_1B6868918(v11, a2, ((1 << v7) + a3), v8, v7, a6);
    a2 = ((1 << v7) + a2);
    a3 = ((1 << v7) + a3);
  }
  if (a6)
  {
    v19 = 0;
    v20 = a2 - *((_DWORD *)a6 + 1);
    v21 = *a6;
    if ((v20 & 0x80000000) == 0)
    {
      v22 = a3 - *((_DWORD *)a6 + 2);
      if ((v22 & 0x80000000) == 0)
      {
        v19 = 0;
        if (v20 < v21 && v22 < v21)
          v19 = (_WORD *)(*((_QWORD *)a6 + 11)
                        + 2 * ((v20 >> 3) + (v21 >> 3) * (unint64_t)(v22 >> 3)));
      }
    }
    v23 = v21 >> 3;
  }
  else
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v11 + 2376) + 1360);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v24 + 276) <= (int)a2
      || *(_DWORD *)(v24 + 280) <= (int)a3)
    {
      v19 = 0;
    }
    else
    {
      v19 = (_WORD *)(*(_QWORD *)(v24 + 512) + 2 * (*(_QWORD *)(v24 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    }
    v23 = *(_QWORD *)(v24 + 488);
  }
  *v19 = *v19 & 0xFFF3 | (4 * (v8 & 3));
  if (1 << v7 >= 8)
  {
    v25 = 0;
    v26 = 2 * v23;
    v27 = v19;
    do
    {
      v28 = v27;
      v29 = (1 << v7) >> 3;
      do
      {
        *v28++ = *v19;
        --v29;
      }
      while (v29);
      ++v25;
      v27 = (_WORD *)((char *)v27 + v26);
    }
    while (v25 != (1 << v7) >> 3);
  }
  return result;
}

uint64_t sub_1B6868B3C(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, int a5, int a6, uint64_t *a7, int a8)
{
  int v8;
  uint64_t v11;
  __int16 *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  int v22;
  signed int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  _BOOL4 v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unsigned int v37;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _DWORD *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  _WORD *v82;
  _WORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _BOOL4 v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  BOOL v92;
  int v93;
  uint64_t *v94;
  __int16 v95;

  v8 = a5;
  if (a8)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1360);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v11 + 276) <= (int)a2
      || *(_DWORD *)(v11 + 280) <= a3)
    {
      v12 = 0;
    }
    else
    {
      v12 = (__int16 *)(*(_QWORD *)(v11 + 512) + 2 * (*(_QWORD *)(v11 + 488) * ((uint64_t)a3 >> 3) + ((int)a2 >> 3)));
    }
    v17 = *(_QWORD *)(v11 + 488);
  }
  else
  {
    v12 = 0;
    v13 = a2 - *((_DWORD *)a4 + 1);
    v14 = *a4;
    if ((v13 & 0x80000000) == 0)
    {
      v15 = a3 - *((_DWORD *)a4 + 2);
      if ((v15 & 0x80000000) == 0)
      {
        if (v13 >= v14 || v15 >= v14)
          v12 = 0;
        else
          v12 = (__int16 *)(*((_QWORD *)a4 + 11)
                          + 2 * ((v13 >> 3) + (v14 >> 3) * (unint64_t)(v15 >> 3)));
      }
    }
    v17 = v14 >> 3;
  }
  v89 = v17;
  v18 = *(unsigned __int8 **)(a1 + 2384);
  v19 = v18[244];
  if (*(_DWORD *)(a1 + 2056))
    v20 = v19 == 0;
  else
    v20 = 0;
  v21 = v20 && a6 == 0;
  v22 = *(_DWORD *)(a1 + 2048) - v19 - v21;
  if (v22 <= v18[2010])
    v22 = v18[2010];
  v23 = v18[2011];
  if (v22 <= v23)
    v24 = v22;
  else
    v24 = v23 - v21;
  v25 = v24 < a5;
  if (v24 >= a5)
    v21 = 0;
  v26 = !v21;
  if (v23 >= a5)
    v27 = v26;
  else
    v27 = 0;
  v28 = v23 > a5 && a6 == 0;
  v29 = v23 != a5 && !v28;
  v94 = a7;
  v93 = v27;
  if (!v29)
  {
    v92 = v24 < a5;
    v30 = 0;
    v31 = **((unsigned __int8 **)a4 + 17);
    v32 = a4[1];
    v33 = (a2 - *((_DWORD *)a4 + 1));
    v34 = a3;
    v35 = a3 - *((_DWORD *)a4 + 2);
    v36 = a4;
    if ((v33 & 0x80000000) == 0 && (v35 & 0x80000000) == 0)
    {
      v30 = 0;
      v37 = *a4;
      if (v33 < v37 && v35 < v37)
      {
        v39 = a6;
        v40 = **((unsigned __int8 **)a4 + 17);
        v41 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a4 + 3) + 24))(*((_QWORD *)a4 + 3), v33 + a4[1] * (unint64_t)v35 + *((_QWORD *)a4 + 4));
        v31 = v40;
        a4 = v36;
        a6 = v39;
        v8 = a5;
        v30 = v41;
        LODWORD(v33) = a2 - *((_DWORD *)v36 + 1);
        v35 = v34 - *((_DWORD *)v36 + 2);
      }
    }
    v42 = 0;
    v43 = a6;
    if ((v33 & 0x80000000) == 0 && (v35 & 0x80000000) == 0)
    {
      v42 = 0;
      v44 = *a4;
      if (v33 < v44 && v35 < v44)
      {
        v90 = v31;
        v45 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*((_QWORD *)a4 + 17) + 80)
                                                                          + 24))(*(_QWORD *)(*((_QWORD *)a4 + 17) + 80), *(_QWORD *)(*((_QWORD *)a4 + 17) + 88)+ v33+ **((unsigned __int8 **)a4 + 17) * (unint64_t)v35, 0);
        v31 = v90;
        v42 = v45;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2408) + 8 * v8 + 288))(v30, v32, v42, v31, *(_QWORD *)(a1 + 2400) + 384);
    a6 = v43;
    a7 = v94;
    a3 = v34;
    v27 = v93;
    v25 = v92;
  }
  if (v24 < v8)
    v46 = v27;
  else
    v46 = 0;
  if (v46 != 1)
  {
    v47 = (_QWORD *)(a1 + 2408);
    v48 = *((unsigned __int16 *)a7 + 10);
    v95 = *((_WORD *)a7 + 10);
    if (!v27)
    {
      result = 0;
      v74 = 0;
      if (v24 >= v8)
        goto LABEL_85;
      v86 = 0;
      v87 = 0;
      v88 = (_QWORD *)(a1 + 2408);
      goto LABEL_77;
    }
    v49 = *(_QWORD *)(a1 + 2400);
    v50 = *(_DWORD *)(a1 + 2048);
    v51 = v50 - *(unsigned __int8 *)(*(_QWORD *)(v49 + 1880) + 2011);
    v52 = v51 & ~(v51 >> 31);
    v53 = ((_BYTE)a2 - *(_DWORD *)(a1 + 2424)) & 0x1F;
    v54 = (a3 - *(_DWORD *)(a1 + 2428)) & 0x1F;
    goto LABEL_79;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 615) || a6 || !*(_DWORD *)(a1 + 2056))
  {
    v55 = *v12 >> 9;
    v50 = *(_DWORD *)(a1 + 2048);
    v56 = v50 - *(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2011);
    v57 = v56 & ~(v56 >> 31);
    if (v55 >= 40)
      v55 = 40;
    if (v55 <= 20)
      v55 = 20;
    v58 = v55 - 20;
    v59 = a6 + 1 - v57;
    v49 = *(_QWORD *)(a1 + 2400);
    v60 = v50 - *(unsigned __int8 *)(*(_QWORD *)(v49 + 1880) + 2011);
    v52 = v60 & ~(v60 >> 31);
    v53 = ((_BYTE)a2 - *(_DWORD *)(a1 + 2424)) & 0x1F;
    v54 = ((_BYTE)a3 - *(_DWORD *)(a1 + 2428)) & 0x1F;
    v61 = v49
        + 4
        * (byte_1B6924F90[a6 + 1 - v52]
         + (unint64_t)(v53 >> (v50 - (a6 + 1)))
         + qword_1B6924F68[a6 + 1 - v52] * (v54 >> (v50 - (a6 + 1))));
    v62 = v61 + 384;
    v63 = *(_DWORD *)(v61 + 384);
    LODWORD(v61) = *(_DWORD *)(v61 + 388);
    v64 = (_DWORD *)(v62 + 4 * qword_1B6924F68[v59]);
    LODWORD(v62) = *v64;
    LODWORD(v64) = v64[1];
    v65 = (_DWORD)v64 + v62 + v61 + v63;
    v66 = v61 + v63 - ((_DWORD)v64 + v62);
    LODWORD(v61) = v63 - v61;
    v67 = v61 - v62 + (_DWORD)v64;
    v68 = v62 + v61 - (_DWORD)v64;
    if (v66 >= 0)
      v69 = v66;
    else
      v69 = -v66;
    if (v67 >= 0)
      v70 = v67;
    else
      v70 = -v67;
    v71 = v69 + v70;
    if (v68 < 0)
      v68 = -v68;
    v72 = (v71 + v68) * dword_1B69249F0[21 * a6 - 21 + 21 * *(_DWORD *)(a1 + 2432) + v58];
    v47 = (_QWORD *)(a1 + 2408);
    v48 = *((unsigned __int16 *)a7 + 10);
    v95 = *((_WORD *)a7 + 10);
    if (v72 > v65 << 6)
    {
      v88 = (_QWORD *)(a1 + 2408);
      v86 = 0;
      v87 = 0;
      goto LABEL_77;
    }
    v25 = 0;
LABEL_79:
    result = v24 < v8;
    v74 = *(unsigned int *)(v49
                          + 4
                          * (byte_1B6924F90[a6 - v52]
                           + (unint64_t)(v53 >> (v50 - a6))
                           + qword_1B6924F68[a6 - v52] * (v54 >> (v50 - a6)))
                          + 384);
    v76 = *(unsigned __int16 *)(*v47 + 2 * (__int16)v48 + 8);
    if (v24 >= v8)
      v76 = 0;
    if (!v25)
      goto LABEL_85;
    v87 = v24 < v8;
    v88 = v47;
    v86 = v74;
    v75 = (v76 >> (8 * (v48 == 0))) + v74;
    goto LABEL_83;
  }
  v86 = 0;
  v87 = 0;
  v88 = (_QWORD *)(a1 + 2408);
  v95 = *((_WORD *)a7 + 10);
LABEL_77:
  v75 = -1;
LABEL_83:
  v85 = v75;
  v77 = ((1 << (v8 - 1)) + a2);
  v91 = a6;
  sub_1B6868B3C(a1, a2);
  sub_1B6868B3C(a1, v77);
  sub_1B6868B3C(a1, a2);
  sub_1B6868B3C(a1, v77);
  LOBYTE(a6) = v91;
  v78 = *(_QWORD *)(a1 + 2408);
  a7 = v94;
  v74 = v86;
  v47 = v88;
  result = v87;
  if ((v93 * *(unsigned __int16 *)(v78 + 2 * v95 + 8)) >> (8 * (v95 == 0)) < v85)
  {
    v79 = *v94;
    *v94 = *v94;
    v80 = *((_DWORD *)v94 + 4) + v93;
    goto LABEL_91;
  }
LABEL_85:
  *v12 = *v12 & 0xFFF3 | (4 * (a6 & 3));
  if (1 << v8 >= 8)
  {
    v81 = 0;
    v82 = v12;
    do
    {
      v83 = v82;
      v84 = (1 << v8) >> 3;
      do
      {
        *v83++ = *v12;
        --v84;
      }
      while (v84);
      ++v81;
      v82 += v89;
    }
    while (v81 != (1 << v8) >> 3);
  }
  v78 = *v47;
  v79 = *a7 + v74;
  *a7 = v79;
  v80 = *((_DWORD *)a7 + 4) + result;
LABEL_91:
  *((_DWORD *)a7 + 4) = v80;
  a7[1] = v79
        + ((v80 * *(unsigned __int16 *)(v78 + 2 * *((__int16 *)a7 + 10) + 8)) >> (8
                                                                                                * (*((_WORD *)a7 + 10) == 0)));
  return result;
}

uint64_t sub_1B6869230(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5, int a6, int a7, uint64_t a8, char a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _WORD *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  _WORD *v74;
  _WORD *v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unsigned __int8 *v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  __int16 v97;

  v10 = a3;
  v11 = a2;
  v12 = (a5 - 1);
  v13 = *(unsigned __int8 **)(result + 2384);
  if (a9)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(result + 2376) + 1360);
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v14 + 276) <= (int)a2
      || *(_DWORD *)(v14 + 280) <= (int)a3)
    {
      v15 = 0;
    }
    else
    {
      v15 = (_WORD *)(*(_QWORD *)(v14 + 512) + 2 * (*(_QWORD *)(v14 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    }
    v20 = *(_QWORD *)(v14 + 488);
  }
  else
  {
    v15 = 0;
    v16 = a2 - *((_DWORD *)a4 + 1);
    v17 = *a4;
    if ((v16 & 0x80000000) == 0)
    {
      v18 = a3 - *((_DWORD *)a4 + 2);
      if ((v18 & 0x80000000) == 0)
      {
        if (v16 >= v17 || v18 >= v17)
          v15 = 0;
        else
          v15 = (_WORD *)(*((_QWORD *)a4 + 11)
                        + 2 * ((v16 >> 3) + (v17 >> 3) * (unint64_t)(v18 >> 3)));
      }
    }
    v20 = v17 >> 3;
  }
  v86 = v20;
  v92 = 1 << a5;
  v21 = *(_DWORD *)(result + 2056);
  v22 = v13[244];
  if (v21)
    v23 = (a6 | v22) == 0;
  else
    v23 = 0;
  v24 = v23;
  v25 = *(_DWORD *)(result + 2048) - v22 - v24;
  if (v25 <= v13[2010])
    v25 = v13[2010];
  v26 = v13[2011];
  if (v25 <= v26)
    v27 = v25;
  else
    v27 = v26 - v24;
  v28 = ((v27 >= a5) | ~v24) & ((int)v26 >= a5);
  v29 = *(__int16 *)(a8 + 20);
  v96 = 0;
  v95 = xmmword_1B6917860;
  v97 = v29;
  v93 = a8;
  v94 = result;
  v91 = v28;
  if (!*(_BYTE *)(*(_QWORD *)(result + 2392) + 615) || (v28 ? (v30 = v27 < a5) : (v30 = 0), !v30))
  {
    if (!v28)
    {
      v32 = 0;
      v31 = 0;
      v45 = -1;
      goto LABEL_69;
    }
LABEL_38:
    v83 = v29;
    v33 = 0;
    v34 = **((unsigned __int8 **)a4 + 17);
    v35 = a4[1];
    v36 = (a2 - *((_DWORD *)a4 + 1));
    v37 = a3 - *((_DWORD *)a4 + 2);
    v90 = a4;
    if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
    {
      v33 = 0;
      v38 = *a4;
      if (v36 < v38 && v37 < v38)
      {
        v39 = a6;
        v40 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a4 + 3) + 24))(*((_QWORD *)a4 + 3), v36 + a4[1] * (unint64_t)v37 + *((_QWORD *)a4 + 4));
        a4 = v90;
        a6 = v39;
        v33 = v40;
        a8 = v93;
        result = v94;
        LODWORD(v36) = v11 - *((_DWORD *)v90 + 1);
        v37 = v10 - *((_DWORD *)v90 + 2);
      }
    }
    v84 = v10;
    v41 = v11;
    v42 = 0;
    v43 = a6;
    if ((v36 & 0x80000000) == 0 && (v37 & 0x80000000) == 0)
    {
      v42 = 0;
      v44 = *a4;
      if (v36 < v44 && v37 < v44)
      {
        v42 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a4 + 17) + 80) + 24))(*(_QWORD *)(*((_QWORD *)a4 + 17) + 80), *(_QWORD *)(*((_QWORD *)a4 + 17) + 88)+ v36+ **((unsigned __int8 **)a4 + 17) * (unint64_t)v37);
        a8 = v93;
        result = v94;
      }
    }
    v31 = (*(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 2408)
                                                                                             + 40
                                                                                             * *(__int16 *)(a8 + 20)
                                                                                             + 8 * a5
                                                                                             + 8))(v92, v92, v33, v35, v42, v34);
    result = v94;
    if (*(_BYTE *)(v94 + 2416))
    {
      a6 = v43;
      v11 = v41;
      a8 = v93;
    }
    else
    {
      v46 = v12;
      a6 = v43;
      a8 = v93;
      if (*(unsigned __int8 *)(*(_QWORD *)(v94 + 2384) + 2012) < a5 || (v46 = a5, !a7))
      {
        v47 = 0;
        v48 = v90;
        v49 = 2 * *(unsigned __int8 *)(*((_QWORD *)v90 + 17) + 1);
        v50 = v90[1];
        v51 = (v41 - *((_DWORD *)v90 + 1));
        v52 = v84 - *((_DWORD *)v90 + 2);
        v87 = v31;
        if ((v51 & 0x80000000) == 0 && (v52 & 0x80000000) == 0)
        {
          v47 = 0;
          v53 = *v90;
          if (v51 < v53 && v52 < v53)
          {
            v81 = 2 * *(unsigned __int8 *)(*((_QWORD *)v90 + 17) + 1);
            v54 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)v90 + 5) + 24))(*((_QWORD *)v90 + 5), v51 + v90[1] * (unint64_t)(v52 >> 1) + *((_QWORD *)v90 + 6), 0);
            v49 = v81;
            v48 = v90;
            a6 = v43;
            v47 = v54;
            a8 = v93;
            result = v94;
            LODWORD(v51) = v41 - *((_DWORD *)v90 + 1);
            v52 = v84 - *((_DWORD *)v90 + 2);
          }
        }
        v55 = 0;
        v56 = a6;
        if ((v51 & 0x80000000) == 0 && (v52 & 0x80000000) == 0)
        {
          v55 = 0;
          v57 = *v48;
          if (v51 < v57 && v52 < v57)
          {
            v58 = v49;
            v82 = v50;
            v59 = v47;
            v60 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)v48 + 17) + 96)
                                                                      + 24))(*(_QWORD *)(*((_QWORD *)v48 + 17) + 96), *(_QWORD *)(*((_QWORD *)v48 + 17) + 104)+ v51+ *(unsigned __int8 *)(*((_QWORD *)v48 + 17) + 1) * (unint64_t)(v52 & 0xFFFFFFFE));
            v47 = v59;
            v50 = v82;
            v49 = v58;
            v55 = v60;
            a8 = v93;
            result = v94;
          }
        }
        v61 = *(_QWORD *)(result + 2408);
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v61
                                                                                            + 32
                                                                                            * *(__int16 *)(a8 + 20)
                                                                                            + 8 * v46
                                                                                            + 168))((1 << v46), (1 << v46), v47, v50, v55, v49);
        a4 = v90;
        v63 = *(unsigned __int16 *)(v61 + 18) * (unint64_t)v62;
        a8 = v93;
        result = v94;
        v31 = v87 + (v63 >> 8);
        a6 = v56;
        v11 = v41;
        goto LABEL_66;
      }
      v11 = v41;
    }
    a4 = v90;
LABEL_66:
    v10 = v84;
    v32 = v27 < a5;
    v64 = *(unsigned __int16 *)(*(_QWORD *)(result + 2408) + 2 * v83 + 8);
    if (v27 >= a5)
      v64 = 0;
    v45 = v31 + (v64 >> (8 * ((_DWORD)v83 == 0)));
LABEL_69:
    v89 = v45;
    if (v27 >= a5)
      goto LABEL_72;
    goto LABEL_70;
  }
  if (a6 || !v21)
    goto LABEL_38;
  v31 = 0;
  v32 = 0;
  v89 = -1;
LABEL_70:
  v88 = v31;
  v85 = a6;
  v65 = ((1 << v12) + v11);
  v66 = ((1 << v12) + v10);
  v67 = (a6 + 1);
  v68 = a4;
  sub_1B6869230(v94, v11, v10, a4, v12, v67, 0, &v95, a9);
  LOBYTE(v77) = a9;
  sub_1B6869230(v94, v65, v10, v68, v12, v67, 1, &v95, v77);
  LOBYTE(v78) = a9;
  sub_1B6869230(v94, v11, v66, v68, v12, v67, 2, &v95, v78);
  LOBYTE(v79) = a9;
  sub_1B6869230(v94, v65, v66, v68, v12, v67, 3, &v95, v79);
  a8 = v93;
  result = v94;
  LOBYTE(a6) = v85;
  v96 += v91;
  v69 = v96;
  v70 = *(_QWORD *)(v94 + 2408);
  *((_QWORD *)&v95 + 1) = v95 + ((v96 * *(unsigned __int16 *)(v70 + 2 * v97 + 8)) >> (8 * (v97 == 0)));
  v31 = v88;
  if (*((_QWORD *)&v95 + 1) < v89)
  {
    v71 = *(_QWORD *)v93 + v95;
    *(_QWORD *)v93 = v71;
    v72 = *(_DWORD *)(v93 + 16) + v69;
    goto LABEL_78;
  }
LABEL_72:
  *v15 = *v15 & 0xFFF3 | (4 * (a6 & 3));
  if ((int)v92 >= 8)
  {
    v73 = 0;
    v74 = v15;
    do
    {
      v75 = v74;
      v76 = v92 >> 3;
      do
      {
        *v75++ = *v15;
        --v76;
      }
      while (v76);
      ++v73;
      v74 += v86;
    }
    while (v73 != v92 >> 3);
  }
  v70 = *(_QWORD *)(result + 2408);
  v71 = *(_QWORD *)a8 + v31;
  *(_QWORD *)a8 = v71;
  v72 = *(_DWORD *)(a8 + 16) + v32;
LABEL_78:
  *(_DWORD *)(a8 + 16) = v72;
  *(_QWORD *)(a8 + 8) = v71
                      + ((v72 * *(unsigned __int16 *)(v70 + 2 * *(__int16 *)(a8 + 20) + 8)) >> (8 * (*(_WORD *)(a8 + 20) == 0)));
  return result;
}

uint64_t sub_1B68698B0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = (a6 - 1);
  if (*(unsigned __int8 *)(a1[298] + 2011) < a6)
  {
    v11 = 0;
    v12 = (a4 + 1);
    do
    {
      result = sub_1B68698B0(a1, ((v11 & 1) << v10) + (int)a2, (v11 >> 1 << v10) + a3, v12, a5, v10);
      if ((_DWORD)result)
        v14 = v11 == 3;
      else
        v14 = 1;
      ++v11;
    }
    while (!v14);
    return result;
  }
  v16 = 0;
  v17 = a2 - *((_DWORD *)a5 + 1);
  v18 = a3 - *((_DWORD *)a5 + 2);
  v19 = *a5;
  if ((v17 & 0x80000000) == 0 && (v18 & 0x80000000) == 0)
  {
    if (v17 >= v19 || v18 >= v19)
    {
      v16 = 0;
    }
    else
    {
      v16 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 80) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 80), *(_QWORD *)(*((_QWORD *)a5 + 17) + 88) + v17 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v18);
      v19 = *a5;
      v17 = a2 - *((_DWORD *)a5 + 1);
      v18 = a3 - *((_DWORD *)a5 + 2);
    }
  }
  v21 = 0;
  if ((v17 & 0x80000000) == 0 && (v18 & 0x80000000) == 0)
  {
    if (v17 >= v19 || v18 >= v19)
    {
      v21 = 0;
    }
    else
    {
      v21 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 96), *(_QWORD *)(*((_QWORD *)a5 + 17) + 104)+ v17+ *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (unint64_t)(v18 & 0xFFFFFFFE));
      v19 = *a5;
      v17 = a2 - *((_DWORD *)a5 + 1);
      v18 = a3 - *((_DWORD *)a5 + 2);
    }
  }
  v23 = 0;
  v30 = v21;
  v31 = **((unsigned __int8 **)a5 + 17);
  v32 = a5[1];
  if ((v17 & 0x80000000) == 0 && (v18 & 0x80000000) == 0)
  {
    v23 = 0;
    if (v17 < v19 && v18 < v19)
    {
      v23 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 3) + 24))(*((_QWORD *)a5 + 3), v17 + a5[1] * (unint64_t)v18 + *((_QWORD *)a5 + 4));
      v19 = *a5;
      v17 = a2 - *((_DWORD *)a5 + 1);
      v18 = a3 - *((_DWORD *)a5 + 2);
    }
  }
  v24 = 0;
  if ((v17 & 0x80000000) == 0 && (v18 & 0x80000000) == 0)
  {
    v24 = 0;
    if (v17 < v19 && v18 < v19)
    {
      v24 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 5) + 24))(*((_QWORD *)a5 + 5), v17 + a5[1] * (unint64_t)(v18 >> 1) + *((_QWORD *)a5 + 6));
      v19 = *a5;
      v17 = a2 - *((_DWORD *)a5 + 1);
      v18 = a3 - *((_DWORD *)a5 + 2);
    }
  }
  v25 = *(unsigned __int8 *)(a1[299] + 605);
  v26 = (*(__int16 *)(*((_QWORD *)a5 + 11) + 2 * ((v17 >> 3) + (v19 >> 3) * (unint64_t)(v18 >> 3))) >> 9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(a1[297] + 8 * a6 + 1880))(v23, v32, v16, v31, a1);
  result = sub_1B6864E4C((uint64_t)a1, a2, a3, v26, (uint64_t)a1, 1 << a6, (uint64_t)a1, 1 << a6, a6, 0, 0) ^ 1;
  if (!v25 && (result & 1) == 0)
    result = sub_1B6869C98((uint64_t)a1, 1 << a6, a6);
  if (a6 >= 3 && (_DWORD)result)
  {
    if (v10 <= *(unsigned __int8 *)(a1[298] + 2012))
      LODWORD(v10) = *(unsigned __int8 *)(a1[298] + 2012);
    v27 = 1 << v10;
    v28 = a1[297] + 8 * (int)v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))(v28 + 2064))(v24, v32, v30, v31, a1, (uint64_t)a1 + 2 * (1 << v10 << v10));
    (*(void (**)(_QWORD *))(v28 + 1912))(a1);
    (*(void (**)(uint64_t))(v28 + 1912))((uint64_t)a1 + 2 * (1 << v10 << v10));
    v29 = sub_1B6864E4C((uint64_t)a1, a2, a3, v26, (uint64_t)a1, v27, (uint64_t)a1, v27, v10, 1, 0);
    if (v25 || !v29)
    {
      if ((v29 & 1) == 0)
        goto LABEL_45;
    }
    else if ((sub_1B6869C98((uint64_t)a1, v27, v10) & 1) != 0)
    {
LABEL_45:
      result = sub_1B6864E4C((uint64_t)a1, a2, a3, v26, (uint64_t)a1 + 2 * (v27 << v10), v27, (uint64_t)a1 + 2 * (v27 << v10), v27, v10, 2, 0) ^ 1;
      if (!v25 && (result & 1) == 0)
        return sub_1B6869C98((uint64_t)a1 + 2 * (v27 << v10), v27, v10);
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1B6869C98(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  BOOL v10;
  unsigned int v11;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0u;
  v7 = a3 - 2;
  while (2)
  {
    for (i = 0; i != 16; ++i)
    {
      LOWORD(v9) = *(_WORD *)(a1
                            + 2 * (*((unsigned __int8 *)*(&off_1E6A17608 + v7) + v4) >> v7) * a2
                            + 2 * (*((unsigned __int8 *)*(&off_1E6A17608 + v7) + v4) & ~(-1 << v7))
                            + 2 * byte_1B692C060[16 * v7 + i]);
      if ((_WORD)v9)
      {
        if ((v9 & 0x8000u) != 0)
          v9 = -(__int16)v9;
        v10 = (unsigned __int16)v9 <= 1u && (unint64_t)(v3 & 0xFFFFFFF0) + i >= byte_1B691826C[v7];
        if (!v10 || (v5 += byte_1B693D9DF[v6], v5 > 5))
        {
          v11 = 0;
          goto LABEL_19;
        }
        v6 = -1;
      }
      if (v6 >= 6)
        v6 = 6;
      ++v6;
    }
    ++v4;
    v3 += 16;
    if (!(v4 >> (2 * a3 - 4)))
      continue;
    break;
  }
  v11 = 1;
LABEL_19:
  if (v5 < 6)
    return v11;
  else
    return 0;
}

uint64_t sub_1B6869D9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v27;

  v10 = (a2 - *((_DWORD *)a5 + 1));
  v11 = a3 - *((_DWORD *)a5 + 2);
  v12 = *((_QWORD *)a5 + 11);
  v13 = (v10 >> 3) + ((unint64_t)*a5 >> 3) * (v11 >> 3);
  v27 = *(_WORD *)(v12 + 2 * v13);
  v14 = a5[1];
  v15 = **((unsigned __int8 **)a5 + 17);
  v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a5 + 3) + 24))(*((_QWORD *)a5 + 3), v10 + v14 * v11 + *((_QWORD *)a5 + 4));
  v17 = 0;
  v18 = a2 - *((_DWORD *)a5 + 1);
  if ((v18 & 0x80000000) == 0)
  {
    v19 = a3 - *((_DWORD *)a5 + 2);
    if ((v19 & 0x80000000) == 0)
    {
      v17 = 0;
      v20 = *a5;
      if (v18 < v20 && v19 < v20)
        v17 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 80)
                                                                          + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 80), *(_QWORD *)(*((_QWORD *)a5 + 17) + 88) + v18 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v19, 0);
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2376) + 8 * a4 + 1880))(v16, v14, v17, v15, a1);
  v21 = 3;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 234))
  {
    v22 = v27;
    v23 = v27 >> 9;
    if (v23 >= 47)
      LOWORD(v23) = 47;
    v24 = ((_WORD)v23 << 9) + 2048;
    *(_WORD *)(v12 + 2 * v13) = v24 & 0xFE00 | *(_WORD *)(v12 + 2 * v13) & 0x1FF;
    v25 = sub_1B6864E4C(a1, a2, a3, (v24 >> 9), a1, 1 << a4, a1, 1 << a4, a4, 0, 0);
    *(_WORD *)(v12 + 2 * v13) = v22 & 0xFE00 | *(_WORD *)(v12 + 2 * v13) & 0x1FF;
    if (v25)
      return 3;
    else
      return 0;
  }
  return v21;
}

uint64_t sub_1B6869F44(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned __int8 *a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 *v9;
  int v10;
  __int16 *v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  __int128 v24;
  unsigned __int8 *v25;
  int v26;
  BOOL v27;
  int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  char v34;
  unsigned __int8 **v35;
  int v36;
  int v37;
  char v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t i;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  int v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  unint64_t v101;
  unsigned int v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108;
  uint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  __int128 *v133;
  uint64_t *v134;
  unsigned __int8 *v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  size_t v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  unint64_t v155;
  size_t v156;
  uint64_t v157;
  char *v158;
  size_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unsigned __int8 *v187;
  int v188;
  int v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  int v208;
  int v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int v234;
  unsigned __int8 *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  __int128 *v242;
  uint64_t *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  int v248;
  unsigned __int8 *v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  unint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 *v273;
  uint64_t v274;
  uint64_t *v275;
  int v276;
  __int128 *v277;
  uint64_t *v278;
  uint64_t v279;
  int v280;
  __int128 *v281;
  unint64_t v282;
  uint64_t *v283;
  int v284;
  char *v285;
  unint64_t v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  int v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  unsigned __int8 *v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  size_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  size_t v318;
  char *v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  BOOL v330;
  int v331;
  int v332;
  __int128 *v333;
  int v334;
  _BYTE *v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  _QWORD *v343;
  unsigned __int8 *v344;
  unsigned __int8 *v345;
  unsigned __int8 *v346;
  unsigned __int8 *v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  uint64_t result;
  uint64_t v359;
  unint64_t v360;
  __int16 *v361;
  __int16 *v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  uint64_t v366;
  int v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  int v373;
  int v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t v384;
  uint64_t v385;
  int v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  uint64_t v397;
  unsigned int v398;
  uint64_t v399;
  unint64_t v400;
  int v401;
  uint64_t v402;
  int __c[2];
  int __ca[2];
  int __cb;
  int v406;
  int v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  int v411;
  int v412;
  int v413;
  int v414;
  unsigned int v415;
  char v419;
  uint64_t v420;
  unsigned int v421;
  int v422;
  uint64_t v423;
  unint64_t v424;
  int v425;
  int v426;
  int v427;
  unsigned __int8 *v429;
  unsigned int v430;
  uint64_t v431;
  __int16 v434;
  __int128 v435;
  int v436;
  __int16 v437;
  __int128 v438;
  int v439;
  __int16 v440;
  __int128 v441;
  int v442;
  __int16 v443;
  unsigned __int8 v444;
  _WORD __len[5];
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  __int128 v449;
  uint64_t v450;
  __int128 v451;
  uint64_t v452;
  __int128 v453;
  uint64_t v454;
  __int128 v455;
  uint64_t v456;
  __int128 v457;
  uint64_t v458;
  __int128 v459;
  _QWORD v460[4];

  v9 = a5;
  LOBYTE(v10) = a4;
  v11 = 0;
  v460[1] = *MEMORY[0x1E0C80C00];
  v12 = a2 - *((_DWORD *)a5 + 1);
  v13 = a3 - *((_DWORD *)a5 + 2);
  if ((v12 & 0x80000000) == 0 && (v13 & 0x80000000) == 0)
  {
    v14 = *a5;
    if (v12 >= v14 || v13 >= v14)
      v11 = 0;
    else
      v11 = (__int16 *)(*((_QWORD *)a5 + 11)
                      + 2
                      * ((v12 >> 3) + (v14 >> 3)
                                                  * (unint64_t)(v13 >> 3)));
  }
  v16 = *(_QWORD *)(a1 + 2400);
  v17 = *(__int128 **)(v16 + 944);
  v18 = *(int *)(a1 + 2048);
  v19 = v18 - a4;
  v20 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1368) + 2009) - (uint64_t)(int)v19;
  v21 = *(_QWORD *)(a1 + 2392);
  v425 = *(unsigned __int8 *)(v21 + 227);
  v409 = *(unsigned __int8 *)(a1 + 2416);
  if (*(_BYTE *)(v21 + 352))
    v22 = (_DWORD)v19 == 2;
  else
    v22 = 0;
  v23 = v22;
  v406 = v23;
  __len[0] = 0;
  v444 = 0;
  v442 = 0;
  v24 = xmmword_1B6917860;
  v441 = xmmword_1B6917860;
  v443 = 0;
  v439 = 0;
  v438 = xmmword_1B6917860;
  v440 = 0;
  v436 = 0;
  v435 = xmmword_1B6917860;
  v437 = 0;
  v25 = *(unsigned __int8 **)(a1 + 2384);
  v26 = v25[244];
  if (*(_DWORD *)(a1 + 2056))
    v27 = v26 == 0;
  else
    v27 = 0;
  v29 = v27 && a4 == 0;
  v30 = v18 - v26 - v29;
  if (v30 <= v25[2010])
    v30 = v25[2010];
  v31 = v25[2011];
  v32 = v31 - v29;
  if (v30 <= v31)
    v32 = v30;
  if (v32 < (int)v19)
    v33 = v29;
  else
    v33 = 0;
  if ((int)v19 > v31)
    v34 = 1;
  else
    v34 = v33;
  v413 = v25[2009] - v31;
  if ((int)v20 <= v413 || (_DWORD)v20 == *(_DWORD *)(a1 + 2432))
  {
    v35 = (unsigned __int8 **)(a5 + 136);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v35 = (unsigned __int8 **)(v16 + 32 * v20 + 8 * a6 + 216);
  }
  v414 = v20;
  v429 = *v35;
  v412 = v32;
  v426 = v13;
  v427 = v12;
  v431 = v19;
  v430 = a2;
  if (v32 >= (int)v19)
    goto LABEL_48;
  v419 = v34;
  v36 = sub_1B6869F44(a1);
  v37 = v36 | sub_1B6869F44(a1);
  LOBYTE(v36) = sub_1B6869F44(a1);
  v9 = a5;
  v38 = sub_1B6869F44(a1);
  v34 = v419;
  v39 = v37 | v36 | v38;
  if ((v419 & 1) == 0)
  {
    v40 = ((unsigned __int8 *)v17 - (int)v19)[76];
    if ((v40 & 1) != 0)
      v41 = *((_QWORD *)v17 + 1) - byte_1B6920D90[(*((_QWORD *)v17 + 1) & 0xC0) + (v40 >> 1)];
    else
      v41 = byte_1B6920D90[(*((_QWORD *)v17 + 1) & 0xC0) + (v40 >> 1)];
    v42 = __clz(v41);
    v436 += *((_QWORD *)v17 + 1) - (v41 << (v42 - 55)) + ((v42 - 55) << 8);
    *((_QWORD *)&v435 + 1) = v435
                           + ((v436 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 2408) + 2 * v437 + 8)) >> (8 * (v437 == 0)));
  }
  v12 = v427;
  LOBYTE(v10) = a4;
  a2 = v430;
  v24 = xmmword_1B6917860;
  if ((v39 & 1) != 0)
  {
    v43 = 1;
    goto LABEL_49;
  }
  v44 = *(_QWORD *)(a1 + 2384);
  if (*(_BYTE *)(v44 + 244) && (int)v19 <= *(unsigned __int8 *)(v44 + 2011))
  {
    v43 = 0;
    v436 = 0;
    v435 = xmmword_1B6917860;
    v437 = 0;
  }
  else
  {
LABEL_48:
    v43 = 0;
  }
LABEL_49:
  v415 = v43;
  if ((v34 & 1) != 0)
  {
    v45 = 0;
    v46 = 0;
    v422 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = -1;
    v51 = a1;
    goto LABEL_266;
  }
  for (i = 0; i != 72; i += 24)
  {
    v53 = (char *)&v455 + i;
    *((_DWORD *)v53 + 4) = 0;
    *(_OWORD *)v53 = v24;
    *((_WORD *)v53 + 10) = 0;
    v54 = (char *)&v449 + i;
    *((_DWORD *)v54 + 4) = 0;
    *(_OWORD *)v54 = v24;
    *((_WORD *)v54 + 10) = 0;
  }
  v55 = 0;
  v420 = (1 << v19);
  v56 = v9[1];
  v57 = *v429;
  v58 = a2 - *((_DWORD *)v9 + 1);
  v59 = a3 - *((_DWORD *)v9 + 2);
  if ((v58 & 0x80000000) == 0 && (v59 & 0x80000000) == 0)
  {
    v60 = *v9;
    if (v58 >= v60 || v59 >= v60)
    {
      v55 = 0;
    }
    else
    {
      v55 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v9 + 3) + 24))(*((_QWORD *)v9 + 3), v58 + v9[1] * (unint64_t)v59 + *((_QWORD *)v9 + 4));
      LODWORD(v58) = v430 - *((_DWORD *)v9 + 1);
      v59 = a3 - *((_DWORD *)v9 + 2);
    }
  }
  v423 = 0;
  if ((v58 & 0x80000000) == 0 && (v59 & 0x80000000) == 0)
  {
    v423 = 0;
    v62 = *v9;
    if (v58 < v62 && v59 < v62)
      v423 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v9 + 7) + 24))(*((_QWORD *)v9 + 7), v58 + v9[1] * (unint64_t)v59 + *((_QWORD *)v9 + 8));
  }
  v63 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v429 + 10) + 24))(*((_QWORD *)v429 + 10), *((_QWORD *)v429 + 11) + v427 + *v429 * (uint64_t)v13);
  v64 = *((_QWORD *)v429 + 7);
  v65 = *v429;
  *(_QWORD *)__c = v57;
  v391 = v63;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2400) + 8144))(v420, v420, v56, v423, v57);
  v401 = v13 >> 2;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 352) && v19 >= 2)
  {
    v66 = (unint64_t)*v429 >> 2;
    v67 = (char *)(*((_QWORD *)v429 + 1) + ((uint64_t)v427 >> 2) + (int)v66 * (uint64_t)v401);
    v68 = (uint64_t)(int)v420 >> 2;
    do
    {
      --v68;
      bzero(v67, (uint64_t)(int)v420 >> 2);
      v67 += v66;
    }
    while (v68);
  }
  if (v425)
  {
    v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2408)
                                                                                          + 8 * (int)v431
                                                                                          + 8))(v420, v420, v55, v56, v423, v56);
    LODWORD(v450) = 0;
    *(_QWORD *)&v449 = v69;
    *((_QWORD *)&v449 + 1) = v69;
  }
  v394 = v56;
  v397 = v55;
  v70 = 0;
  v71 = *(_QWORD *)(a1 + 2400);
  *(_DWORD *)(v71 + 808) = v430;
  *(_DWORD *)(v71 + 812) = a3;
  v72 = v430 - *((_DWORD *)a5 + 1);
  if ((v72 & 0x80000000) != 0)
  {
    v74 = *(_QWORD *)__c;
    v75 = v391;
  }
  else
  {
    v73 = a3 - *((_DWORD *)a5 + 2);
    v74 = *(_QWORD *)__c;
    v75 = v391;
    if ((v73 & 0x80000000) == 0)
    {
      v70 = 0;
      v76 = *a5;
      if (v72 < v76 && v73 < v76)
        v70 = *((_QWORD *)a5 + 12) + 16 * ((v72 >> 2) + (v76 >> 2) * (unint64_t)(v73 >> 2));
    }
  }
  *(_QWORD *)(v71 + 864) = v70;
  v388 = v64 + 2 * (v427 + v65 * (uint64_t)v426);
  sub_1B686350C(a1, v430, a3, v11, v397, v56, v423, v56, v75, v74, v388, v74, v431, (_BYTE *)__len + 1, 0);
  v385 = (int)v431 - 2;
  v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2408)
                                                                                       + 8 * v385
                                                                                       + 24);
  v78 = *(_QWORD *)(a1 + 2400);
  *(_DWORD *)(v78 + 808) = v430;
  *(_DWORD *)(v78 + 812) = a3;
  *(_QWORD *)(v78 + 816) = v74;
  if (!HIBYTE(__len[0]))
  {
    if (v425)
    {
      v84 = 0;
      v85 = 1;
      v81 = v420;
      goto LABEL_94;
    }
    v81 = v420;
    v102 = v77(v420, v420, v397, v56, v391, v74);
    v84 = 0;
    LODWORD(v450) = 0;
    *(_QWORD *)&v449 = v102;
    *((_QWORD *)&v449 + 1) = v102;
    v456 = v450;
    v455 = v449;
    goto LABEL_93;
  }
  v79 = v77(v420, v420, v397, v56, v75, v74);
  *(_QWORD *)&v455 = v79;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 251))
  {
    v80 = 0;
    LODWORD(v447) = 0;
    *(_DWORD *)&__len[1] = 0;
    v81 = v420;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 2400) + 188))
    {
      (*(void (**)(uint64_t, int *, uint64_t, unint64_t *, _WORD *))(a1
                                                                                   + 8 * (v431 > 2)
                                                                                   + 2224))(v420, *(int **)__c, v388, &v447, &__len[1]);
      v82 = &byte_1B6924C34[*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1368) + 2001)
                          + (uint64_t)(*(__int16 *)(*((_QWORD *)a5 + 11)
                                                 + 2
                                                 * (((v430 - *((_DWORD *)a5 + 1)) >> 3)
                                                  + ((unint64_t)*a5 >> 3) * ((a3 - *((_DWORD *)a5 + 2)) >> 3))) >> 9)];
      v80 = ((((_DWORD)v447 * *v82 + *(_DWORD *)&__len[1] * v82[70]) << 6) + 128) & 0xFFFFFF00;
    }
    v83 = a1;
    LODWORD(v456) = v80;
  }
  else
  {
    v86 = v17[2];
    v87 = v17[4];
    v88 = v17[5];
    *(__int128 *)((char *)v17 + 264) = v17[3];
    *(__int128 *)((char *)v17 + 280) = v87;
    *(__int128 *)((char *)v17 + 248) = v86;
    v89 = *v17;
    *(__int128 *)((char *)v17 + 232) = v17[1];
    v90 = v17[6];
    v91 = v17[8];
    v92 = v17[9];
    *(__int128 *)((char *)v17 + 328) = v17[7];
    *(__int128 *)((char *)v17 + 344) = v91;
    *(__int128 *)((char *)v17 + 296) = v88;
    *(__int128 *)((char *)v17 + 312) = v90;
    v93 = v17[11];
    *(__int128 *)((char *)v17 + 376) = v17[10];
    *(__int128 *)((char *)v17 + 392) = v93;
    *(__int128 *)((char *)v17 + 360) = v92;
    *((_QWORD *)v17 + 51) = *((_QWORD *)v17 + 24);
    *(__int128 *)((char *)v17 + 216) = v89;
    v94 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
    *((_QWORD *)v17 + 4) = 0;
    *((_QWORD *)v17 + 1) = 510;
    *((_QWORD *)v17 + 2) = v94;
    *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 872) = v388;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 352))
      *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 920) = *((_QWORD *)v429 + 1)
                                                  + ((uint64_t)v427 >> 2)
                                                  + ((unint64_t)*v429 >> 2) * v401;
    sub_1B6860B50(a1, v430, a3, v431, 0, 0);
    v80 = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
        - *((_DWORD *)v17 + 2)
        + 510;
    v83 = a1;
    LODWORD(v456) = v80;
    v95 = *(__int128 *)((char *)v17 + 392);
    v17[10] = *(__int128 *)((char *)v17 + 376);
    v17[11] = v95;
    *((_QWORD *)v17 + 24) = *((_QWORD *)v17 + 51);
    v96 = *(__int128 *)((char *)v17 + 328);
    v17[6] = *(__int128 *)((char *)v17 + 312);
    v17[7] = v96;
    v97 = *(__int128 *)((char *)v17 + 360);
    v17[8] = *(__int128 *)((char *)v17 + 344);
    v17[9] = v97;
    v98 = *(__int128 *)((char *)v17 + 264);
    v17[2] = *(__int128 *)((char *)v17 + 248);
    v17[3] = v98;
    v99 = *(__int128 *)((char *)v17 + 296);
    v17[4] = *(__int128 *)((char *)v17 + 280);
    v17[5] = v99;
    v100 = *(__int128 *)((char *)v17 + 232);
    *v17 = *(__int128 *)((char *)v17 + 216);
    v17[1] = v100;
    v81 = v420;
  }
  v85 = 0;
  v101 = v79
       + ((v80 * *(unsigned __int16 *)(*(_QWORD *)(v83 + 2408) + 2 * SWORD2(v456) + 8)) >> (8 * (WORD2(v456) == 0)));
  *((_QWORD *)&v455 + 1) = v101;
  v84 = 1;
  if (v425 && *((_QWORD *)&v449 + 1) < v101)
  {
    HIBYTE(__len[0]) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)(a1 + 2400) + 8144))(v81, v81, v56, v423, *(int **)__c, v391);
    v84 = 0;
LABEL_93:
    v85 = 1;
  }
LABEL_94:
  if (!v406)
  {
    if (v85)
      v133 = &v449;
    else
      v133 = &v455;
    v389 = *(_QWORD *)v133;
    v134 = &v456;
    if (v85)
      v134 = &v450;
    v407 = *(_DWORD *)v134;
    v12 = v427;
    v132 = a1;
    goto LABEL_111;
  }
  v103 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 2400) + 376);
  v104 = *v103;
  v105 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v103 + 10) + 24))(*((_QWORD *)v103 + 10), *((_QWORD *)v103 + 11));
  v106 = *(_QWORD *)(a1 + 2400);
  v107 = *(_QWORD *)(*(_QWORD *)(v106 + 376) + 56);
  LOBYTE(v447) = 0;
  v373 = v85;
  if (v85)
    v108 = &v449;
  else
    v108 = &v455;
  v389 = *(_QWORD *)v108;
  v109 = &v456;
  if (v85)
    v109 = &v450;
  v407 = *(_DWORD *)v109;
  v110 = *((_QWORD *)&v455 + 1);
  v371 = *((_QWORD *)&v449 + 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 8144))(v81, v81, v394, v423, v104, v105);
  v375 = v107;
  v380 = v105;
  sub_1B686350C(a1, v430, a3, v11, v397, v394, v423, v394, v105, v104, v107, v104, 2, &v447, 1);
  if (!(_BYTE)v447)
  {
    v12 = v427;
    v136 = (uint64_t)v426 >> 2;
    v121 = (uint64_t)v427 >> 2;
LABEL_114:
    v132 = a1;
    v135 = v429;
    *(_BYTE *)(*((_QWORD *)v429 + 1) + v121 + (int)v136 * (uint64_t)((unint64_t)*v429 >> 2)) = 0;
    goto LABEL_115;
  }
  v111 = v371;
  if (!v373)
    v111 = v110;
  v424 = v111;
  v398 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2408)
                                                                                         + 8 * v385
                                                                                         + 24))(v420, v420, v397, v394, v105, v104);
  v112 = v17[10];
  v113 = v17[11];
  v114 = v17[8];
  *(__int128 *)((char *)v17 + 360) = v17[9];
  *(__int128 *)((char *)v17 + 376) = v112;
  *(__int128 *)((char *)v17 + 392) = v113;
  v115 = v17[6];
  v116 = v17[7];
  v117 = v17[4];
  *(__int128 *)((char *)v17 + 296) = v17[5];
  *(__int128 *)((char *)v17 + 312) = v115;
  *(__int128 *)((char *)v17 + 328) = v116;
  *(__int128 *)((char *)v17 + 344) = v114;
  v118 = *v17;
  *(__int128 *)((char *)v17 + 232) = v17[1];
  v119 = v17[3];
  *(__int128 *)((char *)v17 + 248) = v17[2];
  *(__int128 *)((char *)v17 + 264) = v119;
  *(__int128 *)((char *)v17 + 280) = v117;
  *(_QWORD *)&v455 = v398;
  *((_QWORD *)v17 + 51) = *((_QWORD *)v17 + 24);
  *(__int128 *)((char *)v17 + 216) = v118;
  v120 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
  *((_QWORD *)v17 + 4) = 0;
  *((_QWORD *)v17 + 1) = 510;
  *((_QWORD *)v17 + 2) = v120;
  v121 = (uint64_t)v427 >> 2;
  memset((void *)(*((_QWORD *)v429 + 1) + v121 + ((unint64_t)*v429 >> 2) * v401), 1, v420 >> 2);
  *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 872) = v375;
  v122 = *(_QWORD *)(a1 + 2400);
  *(_QWORD *)(v122 + 816) = v104;
  *(_QWORD *)(v122 + 920) = *((_QWORD *)v429 + 1) + v121 + ((unint64_t)*v429 >> 2) * v401;
  sub_1B6860B50(a1, v430, a3, 2, 0, 0);
  LODWORD(v456) = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
                - *((_DWORD *)v17 + 2)
                + 510;
  v123 = v456;
  v125 = *(__int128 *)((char *)v17 + 264);
  v124 = *(__int128 *)((char *)v17 + 280);
  v17[2] = *(__int128 *)((char *)v17 + 248);
  v17[3] = v125;
  v127 = *(__int128 *)((char *)v17 + 328);
  v126 = *(__int128 *)((char *)v17 + 344);
  v128 = *(__int128 *)((char *)v17 + 296);
  v17[6] = *(__int128 *)((char *)v17 + 312);
  v17[7] = v127;
  v17[4] = v124;
  v17[5] = v128;
  v129 = *(__int128 *)((char *)v17 + 392);
  v130 = *(__int128 *)((char *)v17 + 360);
  v17[10] = *(__int128 *)((char *)v17 + 376);
  v17[11] = v129;
  v131 = *(__int128 *)((char *)v17 + 232);
  *((_QWORD *)v17 + 24) = *((_QWORD *)v17 + 51);
  v17[8] = v126;
  v17[9] = v130;
  *v17 = *(__int128 *)((char *)v17 + 216);
  v17[1] = v131;
  *((_QWORD *)&v455 + 1) = ((v123 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 2408) + 2 * SWORD2(v456) + 8)) >> (8 * (WORD2(v456) == 0)))
                         + (unint64_t)v398;
  if (v424 <= *((_QWORD *)&v455 + 1))
  {
    v12 = v427;
    v136 = (uint64_t)v426 >> 2;
    goto LABEL_114;
  }
  HIBYTE(__len[0]) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)(a1 + 2400) + 8144))(v420, v420, v104, v380, *(int **)__c, v391);
  v84 = 1;
  v407 = v123;
  v389 = v398;
  v12 = v427;
  v132 = a1;
LABEL_111:
  v135 = v429;
LABEL_115:
  v137 = (unint64_t)*v135 >> 2;
  v138 = (char *)(*((_QWORD *)v135 + 4) + ((uint64_t)v12 >> 2) + (int)v137 * (uint64_t)v401);
  v139 = 1 << v385;
  v9 = a5;
  do
  {
    --v139;
    memset(v138, v84, 1 << v385);
    v138 += v137;
  }
  while (v139);
  LOBYTE(v140) = v409 != 0;
  v422 = v84;
  if (!*(_BYTE *)(v132 + 2416))
  {
    v10 = a4;
    if ((int)v431 <= *(unsigned __int8 *)(*(_QWORD *)(v132 + 2384) + 2012))
    {
      v141 = 0;
      if (a6)
        v143 = 0;
      else
        v143 = v431;
      LOBYTE(v140) = 1;
      v142 = v430;
      if (a6 || v409)
      {
        v46 = 0;
        goto LABEL_246;
      }
    }
    else
    {
      v142 = v430;
      if (v409)
      {
        v141 = 0;
        v46 = 0;
        LOBYTE(v140) = 1;
        goto LABEL_246;
      }
      v143 = v431 - 1;
    }
    v399 = 0;
    v144 = (1 << v143);
    v410 = a5[1];
    v392 = v429[1];
    v145 = v142 - *((_DWORD *)a5 + 1);
    v146 = a3 - *((_DWORD *)a5 + 2);
    v421 = v143;
    if ((v145 & 0x80000000) == 0 && (v146 & 0x80000000) == 0)
    {
      v399 = 0;
      v147 = *a5;
      if (v145 < v147 && v146 < v147)
      {
        v399 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 5) + 24))(*((_QWORD *)a5 + 5), v145 + a5[1] * (unint64_t)(v146 >> 1) + *((_QWORD *)a5 + 6));
        LODWORD(v145) = v430 - *((_DWORD *)a5 + 1);
        v146 = a3 - *((_DWORD *)a5 + 2);
      }
    }
    v148 = 0;
    v402 = 2 * v392;
    v395 = v144;
    if ((v145 & 0x80000000) == 0 && (v146 & 0x80000000) == 0)
    {
      v148 = 0;
      v149 = *a5;
      if (v145 < v149 && v146 < v149)
        v148 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 9) + 24))(*((_QWORD *)a5 + 9), v145 + a5[1] * (unint64_t)(v146 >> 1) + *((_QWORD *)a5 + 10));
    }
    v376 = 2 * (v426 >> 1);
    v384 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v429 + 12) + 24))(*((_QWORD *)v429 + 12), *((_QWORD *)v429 + 13) + v427 + v376 * (unint64_t)v429[1]);
    v386 = v429[1];
    v150 = (uint64_t)v12 >> 1;
    *(_QWORD *)__ca = *((_QWORD *)v429 + 8);
    v377 = *((_QWORD *)v429 + 9);
    v381 = 2 << v421;
    (*(void (**)(void))(*(_QWORD *)(v132 + 2400) + 8144))();
    if (v425)
    {
      v151 = *(_QWORD *)(v132 + 2408);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *))(v151 + 376))(v399, v410, v148, v410, v144, v144, &v451, &v453);
      v152 = *(unsigned __int16 *)(v151 + 18);
      *(_QWORD *)&v451 = (unint64_t)(v451 * v152) >> 8;
      *(_QWORD *)&v453 = (unint64_t)(v453 * v152) >> 8;
      LODWORD(v452) = 0;
      LODWORD(v454) = 0;
    }
    v382 = v148;
    v153 = v150 + v386 * (uint64_t)(v426 >> 1);
    v387 = v426 >> 3;
    v154 = v421;
    if (*(_BYTE *)(*(_QWORD *)(v132 + 2392) + 352) && v421 >= 2)
    {
      v155 = (unint64_t)v429[1] >> 2;
      v156 = (uint64_t)(int)v144 >> 2;
      v157 = (uint64_t)v427 >> 3;
      v158 = (char *)(*((_QWORD *)v429 + 2) + v157 + (int)v155 * (uint64_t)v387);
      v159 = v156;
      do
      {
        --v159;
        bzero(v158, v156);
        v158 += v155;
      }
      while (v159);
      v160 = (unint64_t)v429[1] >> 2;
      v161 = (char *)(*((_QWORD *)v429 + 3) + v157 + (int)v160 * (uint64_t)(v426 >> 3));
      v162 = (uint64_t)(int)v395 >> 2;
      v154 = v421;
      do
      {
        --v162;
        bzero(v161, v156);
        v161 += v160;
      }
      while (v162);
    }
    v163 = 0;
    v164 = *(_QWORD *)__ca + 2 * v153;
    v165 = v377 + 2 * v153;
    v166 = *(_QWORD *)(v132 + 2400);
    *(_DWORD *)(v166 + 808) = v430;
    *(_DWORD *)(v166 + 812) = a3;
    v167 = v430 - *((_DWORD *)a5 + 1);
    if ((v167 & 0x80000000) != 0)
    {
      v169 = v399;
      v170 = v382;
    }
    else
    {
      v168 = a3 - *((_DWORD *)a5 + 2);
      v169 = v399;
      v170 = v382;
      if ((v168 & 0x80000000) == 0)
      {
        v171 = *a5;
        if (v167 >= v171 || v168 >= v171)
          v163 = 0;
        else
          v163 = *((_QWORD *)a5 + 12) + 16 * ((v167 >> 2) + (v171 >> 2) * (unint64_t)(v168 >> 2));
      }
    }
    *(_QWORD *)(v166 + 864) = v163;
    v378 = v165;
    sub_1B6867058((_QWORD *)v132, v430, a3, v154, v11, v169, v410, v170, v410, v384, v402, v164, v165, v392, (BOOL *)__len, &v444, 0, 0);
    *(_QWORD *)(*(_QWORD *)(v132 + 2400) + 824) = v392;
    v173 = LOBYTE(__len[0]);
    v174 = v444;
    if (!LOBYTE(__len[0]) && !v444 && v425)
    {
      v175 = 0;
      __cb = 0;
      v176 = 1;
      v177 = v427;
      v178 = v407;
LABEL_160:
      v179 = v421;
      goto LABEL_203;
    }
    v180 = *(_QWORD *)(v132 + 2408);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v180 + 376))(v169, v410, v384, v402, v395, v395, &v447, &v448);
    v181 = *(unsigned __int16 *)(v180 + 18);
    v182 = (v447 * v181) >> 8;
    v447 = v182;
    v183 = (v448 * v181) >> 8;
    v448 = v183;
    if (v173)
    {
      *(_QWORD *)&v457 = v182;
      if (*(_BYTE *)(*(_QWORD *)(v132 + 2392) + 251))
      {
        v184 = v164;
        v185 = v395;
        v186 = sub_1B686C480(v132, v430, a3, a5, 0, v184, v392, v395);
        LODWORD(v458) = v186;
        v177 = v427;
      }
      else
      {
        v190 = v17[2];
        v191 = v17[4];
        v192 = v17[5];
        *(__int128 *)((char *)v17 + 264) = v17[3];
        *(__int128 *)((char *)v17 + 280) = v191;
        *(__int128 *)((char *)v17 + 248) = v190;
        v193 = *v17;
        *(__int128 *)((char *)v17 + 232) = v17[1];
        v194 = v17[6];
        v195 = v17[8];
        v196 = v17[9];
        *(__int128 *)((char *)v17 + 328) = v17[7];
        *(__int128 *)((char *)v17 + 344) = v195;
        *(__int128 *)((char *)v17 + 296) = v192;
        *(__int128 *)((char *)v17 + 312) = v194;
        v197 = v17[11];
        *(__int128 *)((char *)v17 + 376) = v17[10];
        *(__int128 *)((char *)v17 + 392) = v197;
        *(__int128 *)((char *)v17 + 360) = v196;
        *((_QWORD *)v17 + 51) = *((_QWORD *)v17 + 24);
        *(__int128 *)((char *)v17 + 216) = v193;
        v198 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
        *((_QWORD *)v17 + 4) = 0;
        *((_QWORD *)v17 + 1) = 510;
        *((_QWORD *)v17 + 2) = v198;
        *(_QWORD *)(*(_QWORD *)(v132 + 2400) + 880) = v164;
        v177 = v427;
        if (*(_BYTE *)(*(_QWORD *)(v132 + 2392) + 352))
          *(_QWORD *)(*(_QWORD *)(v132 + 2400) + 928) = *((_QWORD *)v429 + 2)
                                                        + ((uint64_t)v427 >> 3)
                                                        + ((unint64_t)v429[1] >> 2) * v387;
        sub_1B6860B50(v132, v430, a3, v421, 0, 1);
        v186 = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
             - *((_DWORD *)v17 + 2)
             + 510;
        LODWORD(v458) = v186;
        v199 = *(__int128 *)((char *)v17 + 392);
        v17[10] = *(__int128 *)((char *)v17 + 376);
        v17[11] = v199;
        *((_QWORD *)v17 + 24) = *((_QWORD *)v17 + 51);
        v200 = *(__int128 *)((char *)v17 + 328);
        v17[6] = *(__int128 *)((char *)v17 + 312);
        v17[7] = v200;
        v201 = *(__int128 *)((char *)v17 + 360);
        v17[8] = *(__int128 *)((char *)v17 + 344);
        v17[9] = v201;
        v202 = *(__int128 *)((char *)v17 + 264);
        v17[2] = *(__int128 *)((char *)v17 + 248);
        v17[3] = v202;
        v203 = *(__int128 *)((char *)v17 + 296);
        v17[4] = *(__int128 *)((char *)v17 + 280);
        v17[5] = v203;
        v204 = *(__int128 *)((char *)v17 + 232);
        *v17 = *(__int128 *)((char *)v17 + 216);
        v17[1] = v204;
        v185 = v395;
      }
      v205 = *(_QWORD *)(v132 + 2408) + 8;
      v206 = v182
           + ((v186 * *(unsigned __int16 *)(v205 + 2 * SWORD2(v458))) >> (8 * (WORD2(v458) == 0)));
      *((_QWORD *)&v457 + 1) = v206;
      v207 = v451
           + ((v452 * *(unsigned __int16 *)(v205 + 2 * SWORD2(v452))) >> (8 * (WORD2(v452) == 0)));
      *((_QWORD *)&v451 + 1) = v207;
      v208 = 1;
      v178 = v407;
      if (v425)
      {
        v187 = a5;
        v188 = a3;
        if (v207 < v206)
        {
          LOBYTE(__len[0]) = 0;
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v132 + 2400) + 8152))(v381, v185, v410, v382, v402, v384);
          v178 = v407;
          v208 = 0;
        }
      }
      else
      {
        v187 = a5;
        v188 = a3;
      }
      __cb = v208;
      v189 = v430;
      if (v174)
      {
        v183 = v448;
        goto LABEL_176;
      }
      v179 = v421;
      if (v425)
      {
        v175 = 0;
        v176 = 1;
        goto LABEL_203;
      }
      v183 = v448;
    }
    else
    {
      if (v425)
      {
        v178 = v407;
        v185 = v395;
        if (!v174)
        {
          v176 = 1;
          __cb = 0;
          v177 = v427;
          v179 = v421;
          v175 = 0;
          goto LABEL_203;
        }
        __cb = 0;
        v187 = a5;
        v188 = a3;
        v189 = v430;
        goto LABEL_176;
      }
      __cb = 0;
      *(_QWORD *)&v451 = v182;
      LODWORD(v452) = 0;
      v457 = v451;
      v458 = v452;
      v187 = a5;
      v188 = a3;
      v189 = v430;
      v178 = v407;
      v185 = v395;
      if (v174)
      {
LABEL_176:
        *(_QWORD *)&v459 = v183;
        if (*(_BYTE *)(*(_QWORD *)(v132 + 2392) + 251))
        {
          v209 = sub_1B686C480(v132, v189, v188, v187, 1, v378, v392, v185);
          LODWORD(v460[0]) = v209;
          v179 = v421;
        }
        else
        {
          v210 = v17[2];
          v211 = v17[4];
          v212 = v17[5];
          *(__int128 *)((char *)v17 + 264) = v17[3];
          *(__int128 *)((char *)v17 + 280) = v211;
          *(__int128 *)((char *)v17 + 248) = v210;
          v213 = *v17;
          *(__int128 *)((char *)v17 + 232) = v17[1];
          v214 = v17[6];
          v215 = v17[8];
          v216 = v17[9];
          *(__int128 *)((char *)v17 + 328) = v17[7];
          *(__int128 *)((char *)v17 + 344) = v215;
          *(__int128 *)((char *)v17 + 296) = v212;
          *(__int128 *)((char *)v17 + 312) = v214;
          v217 = v17[11];
          *(__int128 *)((char *)v17 + 376) = v17[10];
          *(__int128 *)((char *)v17 + 392) = v217;
          *(__int128 *)((char *)v17 + 360) = v216;
          *((_QWORD *)v17 + 51) = *((_QWORD *)v17 + 24);
          *(__int128 *)((char *)v17 + 216) = v213;
          v218 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
          *((_QWORD *)v17 + 4) = 0;
          *((_QWORD *)v17 + 1) = 510;
          *((_QWORD *)v17 + 2) = v218;
          *(_QWORD *)(*(_QWORD *)(v132 + 2400) + 888) = v378;
          v179 = v421;
          if (*(_BYTE *)(*(_QWORD *)(v132 + 2392) + 352))
            *(_QWORD *)(*(_QWORD *)(v132 + 2400) + 936) = *((_QWORD *)v429 + 3)
                                                          + ((uint64_t)v427 >> 3)
                                                          + ((unint64_t)v429[1] >> 2) * v387;
          sub_1B6860B50(v132, v189, v188, v421, 0, 2);
          v209 = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
               - *((_DWORD *)v17 + 2)
               + 510;
          LODWORD(v460[0]) = v209;
          v219 = *(__int128 *)((char *)v17 + 392);
          v17[10] = *(__int128 *)((char *)v17 + 376);
          v17[11] = v219;
          *((_QWORD *)v17 + 24) = *((_QWORD *)v17 + 51);
          v220 = *(__int128 *)((char *)v17 + 328);
          v17[6] = *(__int128 *)((char *)v17 + 312);
          v17[7] = v220;
          v221 = *(__int128 *)((char *)v17 + 360);
          v17[8] = *(__int128 *)((char *)v17 + 344);
          v17[9] = v221;
          v222 = *(__int128 *)((char *)v17 + 264);
          v17[2] = *(__int128 *)((char *)v17 + 248);
          v17[3] = v222;
          v223 = *(__int128 *)((char *)v17 + 296);
          v17[4] = *(__int128 *)((char *)v17 + 280);
          v17[5] = v223;
          v224 = *(__int128 *)((char *)v17 + 232);
          *v17 = *(__int128 *)((char *)v17 + 216);
          v17[1] = v224;
        }
        v176 = 0;
        v225 = *(_QWORD *)(v132 + 2408) + 8;
        v226 = v183
             + ((v209 * *(unsigned __int16 *)(v225 + 2 * SWORD2(v460[0]))) >> (8 * (WORD2(v460[0]) == 0)));
        *((_QWORD *)&v459 + 1) = v226;
        v227 = v453
             + ((v454 * *(unsigned __int16 *)(v225 + 2 * SWORD2(v454))) >> (8 * (WORD2(v454) == 0)));
        *((_QWORD *)&v453 + 1) = v227;
        v175 = 1;
        v178 = v407;
        if (v425)
        {
          v177 = v427;
          if (v227 < v226)
          {
            v228 = 0;
            v444 = 0;
            v229 = *(_QWORD *)(v132 + 2400);
            v230 = v430 + 1 - *((_DWORD *)v187 + 1);
            v231 = v188 - *((_DWORD *)v187 + 2);
            if ((v230 & 0x80000000) == 0 && (v231 & 0x80000000) == 0)
            {
              v228 = 0;
              v232 = *v187;
              if (v230 < v232 && v231 < v232)
              {
                v228 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v187 + 9) + 24))(*((_QWORD *)v187 + 9), v230 + v187[1] * (unint64_t)(v231 >> 1) + *((_QWORD *)v187 + 10));
                LODWORD(v230) = v430 + 1 - *((_DWORD *)v187 + 1);
                v231 = v188 - *((_DWORD *)v187 + 2);
              }
            }
            v233 = 0;
            if ((v230 & 0x80000000) != 0)
            {
              v179 = v421;
            }
            else
            {
              v179 = v421;
              if ((v231 & 0x80000000) == 0)
              {
                v233 = 0;
                v234 = *v187;
                if (v230 < v234 && v231 < v234)
                  v233 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)v187 + 17)
                                                                                           + 96)
                                                                             + 24))(*(_QWORD *)(*((_QWORD *)v187 + 17) + 96), *(_QWORD *)(*((_QWORD *)v187 + 17) + 104)+ v230+ *(unsigned __int8 *)(*((_QWORD *)v187 + 17) + 1) * (unint64_t)(v231 & 0xFFFFFFFE));
              }
            }
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v229 + 8152))(v381, v395, v410, v228, v402, v233);
            v175 = 0;
            v176 = 1;
            v178 = v407;
          }
        }
        else
        {
          v177 = v427;
        }
LABEL_203:
        if (!*(_BYTE *)(*(_QWORD *)(v132 + 2392) + 352) || v179 != 2)
        {
          v273 = &v457;
          if (!__cb)
            v273 = &v451;
          v274 = *(_QWORD *)v273 + v389;
          v275 = &v458;
          if (!__cb)
            v275 = &v452;
          v276 = *(_DWORD *)v275 + v178;
          v277 = &v459;
          if (v176)
            v277 = &v453;
          v389 = v274 + *(_QWORD *)v277;
          v278 = v460;
          if (v176)
            v278 = &v454;
          v407 = v276 + *(_DWORD *)v278;
          goto LABEL_238;
        }
        v393 = v176;
        v396 = v175;
        v235 = *(unsigned __int8 **)(*(_QWORD *)(v132 + 2400) + 376);
        v236 = *v235;
        v237 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v235 + 10) + 24))(*((_QWORD *)v235 + 10), *((_QWORD *)v235 + 11));
        v238 = *(_QWORD *)(v132 + 2400);
        v239 = *(_QWORD *)(v238 + 376);
        v240 = *(_QWORD *)(v239 + 56);
        v241 = *(_QWORD *)(v239 + 64);
        v434 = 0;
        v242 = &v457;
        if (!__cb)
          v242 = &v451;
        v372 = *(_QWORD *)v242;
        v243 = &v458;
        if (!__cb)
          v243 = &v452;
        v374 = *(_DWORD *)v243;
        v244 = (char *)&v457 + 8;
        if (!__cb)
          v244 = (char *)&v451 + 8;
        v369 = *(_QWORD *)v244;
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v238 + 8144))(v381, 4, v410, v382, 2 * v236, v237);
        v368 = v241;
        v370 = v241;
        v245 = v240;
        v379 = 2 * v236;
        v246 = v237;
        sub_1B6867058((_QWORD *)v132, v430, a3, 2, v11, v399, v410, v382, v410, v237, 2 * v236, v240, v368, v236, (BOOL *)&v434 + 1, &v434, 1, 1);
        *(_QWORD *)(*(_QWORD *)(v132 + 2400) + 824) = v236;
        v247 = HIBYTE(v434);
        v248 = v434;
        v249 = v429;
        if (!(HIBYTE(v434) | v434))
          goto LABEL_224;
        v250 = *(_QWORD *)(v132 + 2408);
        v251 = v434;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *, unint64_t *))(v250 + 376))(v399, v410, v237, v379, 4, 4, &__len[1], &v446);
        v248 = v251;
        v252 = *(unsigned __int16 *)(v250 + 18);
        v249 = v429;
        v253 = (unint64_t)(*(_QWORD *)&__len[1] * v252) >> 8;
        *(_QWORD *)&__len[1] = v253;
        v446 = (v446 * v252) >> 8;
        if (!v247)
          goto LABEL_224;
        v254 = v17[10];
        v255 = v17[11];
        v256 = v17[8];
        *(__int128 *)((char *)v17 + 360) = v17[9];
        *(__int128 *)((char *)v17 + 376) = v254;
        *(__int128 *)((char *)v17 + 392) = v255;
        v257 = v17[6];
        v258 = v17[7];
        v259 = v17[4];
        *(__int128 *)((char *)v17 + 296) = v17[5];
        *(__int128 *)((char *)v17 + 312) = v257;
        *(__int128 *)((char *)v17 + 328) = v258;
        *(__int128 *)((char *)v17 + 344) = v256;
        v260 = *v17;
        *(__int128 *)((char *)v17 + 232) = v17[1];
        v261 = v17[3];
        *(__int128 *)((char *)v17 + 248) = v17[2];
        *(__int128 *)((char *)v17 + 264) = v261;
        *(__int128 *)((char *)v17 + 280) = v259;
        *(_QWORD *)&v457 = v253;
        *((_QWORD *)v17 + 51) = *((_QWORD *)v17 + 24);
        *(__int128 *)((char *)v17 + 216) = v260;
        v262 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
        *((_QWORD *)v17 + 4) = 0;
        *((_QWORD *)v17 + 1) = 510;
        *((_QWORD *)v17 + 2) = v262;
        v263 = (uint64_t)v427 >> 3;
        *(_BYTE *)(*((_QWORD *)v429 + 2) + v263 + ((unint64_t)v429[1] >> 2) * v387) = 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 880) = v245;
        *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 928) = *((_QWORD *)v429 + 2)
                                                    + v263
                                                    + ((unint64_t)v429[1] >> 2) * v387;
        sub_1B6860B50(a1, v430, a3, 2, 0, 1);
        v248 = v251;
        LODWORD(v458) = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
                      - *((_DWORD *)v17 + 2)
                      + 510;
        v264 = v458;
        v266 = *(__int128 *)((char *)v17 + 264);
        v265 = *(__int128 *)((char *)v17 + 280);
        v17[2] = *(__int128 *)((char *)v17 + 248);
        v17[3] = v266;
        v268 = *(__int128 *)((char *)v17 + 328);
        v267 = *(__int128 *)((char *)v17 + 344);
        v269 = *(__int128 *)((char *)v17 + 296);
        v17[6] = *(__int128 *)((char *)v17 + 312);
        v17[7] = v268;
        v17[4] = v265;
        v17[5] = v269;
        v270 = *(__int128 *)((char *)v17 + 392);
        v271 = *(__int128 *)((char *)v17 + 360);
        v17[10] = *(__int128 *)((char *)v17 + 376);
        v17[11] = v270;
        v272 = *(__int128 *)((char *)v17 + 232);
        *((_QWORD *)v17 + 24) = *((_QWORD *)v17 + 51);
        v17[8] = v267;
        v17[9] = v271;
        *v17 = *(__int128 *)((char *)v17 + 216);
        v17[1] = v272;
        *((_QWORD *)&v457 + 1) = v253
                               + ((v264
                                 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 2408) + 2 * SWORD2(v458) + 8)) >> (8 * (WORD2(v458) == 0)));
        v132 = a1;
        if (v369 > *((_QWORD *)&v457 + 1))
        {
          LOBYTE(__len[0]) = 1;
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2400) + 8152))(v381, 4, v379, v246, v402, v384);
          v248 = v251;
          __cb = 1;
          v177 = v427;
        }
        else
        {
LABEL_224:
          v177 = v427;
          *(_BYTE *)(*((_QWORD *)v249 + 2) + ((uint64_t)v427 >> 3) + ((unint64_t)v249[1] >> 2) * v387) = 0;
          v253 = v372;
          v264 = v374;
        }
        v279 = v253 + v389;
        v280 = v264 + v407;
        v281 = &v459;
        if (v393)
          v281 = &v453;
        v282 = *(_QWORD *)v281;
        v283 = v460;
        if (v393)
          v283 = &v454;
        v284 = *(_DWORD *)v283;
        v175 = v396;
        if (v248)
        {
          v390 = *(_DWORD *)v283;
          v400 = v282;
          v408 = v279;
          v411 = v280;
          v285 = (char *)&v459 + 8;
          if (v393)
            v285 = (char *)&v453 + 8;
          v286 = *(_QWORD *)v285;
          v287 = v17[10];
          v288 = v17[11];
          v289 = v17[8];
          *(__int128 *)((char *)v17 + 360) = v17[9];
          *(__int128 *)((char *)v17 + 376) = v287;
          *(__int128 *)((char *)v17 + 392) = v288;
          v290 = v17[6];
          v291 = v17[7];
          v292 = v17[4];
          *(__int128 *)((char *)v17 + 296) = v17[5];
          *(__int128 *)((char *)v17 + 312) = v290;
          *(__int128 *)((char *)v17 + 328) = v291;
          *(__int128 *)((char *)v17 + 344) = v289;
          v293 = *v17;
          *(__int128 *)((char *)v17 + 232) = v17[1];
          v294 = v17[3];
          *(__int128 *)((char *)v17 + 248) = v17[2];
          *(__int128 *)((char *)v17 + 264) = v294;
          *(__int128 *)((char *)v17 + 280) = v292;
          v282 = v446;
          *(_QWORD *)&v459 = v446;
          *((_QWORD *)v17 + 51) = *((_QWORD *)v17 + 24);
          *(__int128 *)((char *)v17 + 216) = v293;
          v295 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
          *((_QWORD *)v17 + 4) = 0;
          *((_QWORD *)v17 + 1) = 510;
          *((_QWORD *)v17 + 2) = v295;
          v296 = (uint64_t)v177 >> 3;
          *(_BYTE *)(*((_QWORD *)v249 + 3) + v296 + ((unint64_t)v249[1] >> 2) * v387) = 1;
          *(_QWORD *)(*(_QWORD *)(v132 + 2400) + 888) = v370;
          *(_QWORD *)(*(_QWORD *)(v132 + 2400) + 936) = *((_QWORD *)v249 + 3)
                                                        + v296
                                                        + ((unint64_t)v249[1] >> 2) * v387;
          sub_1B6860B50(v132, v430, a3, 2, 0, 2);
          v297 = v177;
          LODWORD(v460[0]) = ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
                           - *((_DWORD *)v17 + 2)
                           + 510;
          v298 = v460[0];
          v300 = *(__int128 *)((char *)v17 + 264);
          v299 = *(__int128 *)((char *)v17 + 280);
          v17[2] = *(__int128 *)((char *)v17 + 248);
          v17[3] = v300;
          v302 = *(__int128 *)((char *)v17 + 328);
          v301 = *(__int128 *)((char *)v17 + 344);
          v303 = *(__int128 *)((char *)v17 + 296);
          v17[6] = *(__int128 *)((char *)v17 + 312);
          v17[7] = v302;
          v17[4] = v299;
          v17[5] = v303;
          v304 = *(__int128 *)((char *)v17 + 392);
          v305 = *(__int128 *)((char *)v17 + 360);
          v17[10] = *(__int128 *)((char *)v17 + 376);
          v17[11] = v304;
          v306 = *(__int128 *)((char *)v17 + 232);
          *((_QWORD *)v17 + 24) = *((_QWORD *)v17 + 51);
          v17[8] = v301;
          v17[9] = v305;
          *v17 = *(__int128 *)((char *)v17 + 216);
          v17[1] = v306;
          *((_QWORD *)&v459 + 1) = v282
                                 + ((v298
                                   * *(unsigned __int16 *)(*(_QWORD *)(v132 + 2408)
                                                                       + 2 * SWORD2(v460[0])
                                                                       + 8)) >> (8 * (WORD2(v460[0]) == 0)));
          if (v286 > *((_QWORD *)&v459 + 1))
          {
            v444 = 1;
            v307 = v249;
            v308 = *(_QWORD *)(v132 + 2400);
            v309 = v297;
            v310 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v308 + 376) + 80) + 24))(*(_QWORD *)(*(_QWORD *)(v308 + 376) + 80), *(_QWORD *)(*(_QWORD *)(v308 + 376) + 88) + 1);
            v311 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v307 + 12) + 24))(*((_QWORD *)v307 + 12), *((_QWORD *)v307 + 13) + v309 + 1 + v376 * (unint64_t)v307[1]);
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v308 + 8152))(v381, 4, v379, v310, v402, v311);
            v175 = 1;
            v284 = v298;
            v177 = v309;
            v280 = v411;
            v279 = v408;
LABEL_237:
            v389 = v279 + v282;
            v407 = v280 + v284;
            LOBYTE(v179) = v421;
LABEL_238:
            v313 = (1 << (v179 - 2));
            v314 = v429[1];
            if (v314 < 4)
              v315 = 1;
            else
              v315 = v314 >> 2;
            v316 = (uint64_t)v177 >> 3;
            v317 = (char *)(*((_QWORD *)v429 + 5) + v316 + (int)(v314 >> 2) * (uint64_t)v387);
            v318 = v313;
            do
            {
              --v318;
              memset(v317, __cb, v313);
              v317 += v315;
            }
            while (v318);
            v319 = (char *)(*((_QWORD *)v429 + 6) + v316 + ((unint64_t)v429[1] >> 2) * (v426 >> 3));
            v140 = v313;
            v132 = a1;
            do
            {
              --v140;
              memset(v319, v175, v313);
              v319 += v315;
            }
            while (v140);
            v12 = v427;
            v9 = a5;
            v10 = a4;
            v46 = __cb;
            v141 = v175;
            goto LABEL_246;
          }
          v312 = (uint64_t)v426 >> 3;
          v177 = v297;
          v280 = v411;
          v279 = v408;
          v282 = v400;
          v284 = v390;
        }
        else
        {
          v312 = (uint64_t)v426 >> 3;
          v296 = (uint64_t)v177 >> 3;
        }
        *(_BYTE *)(*((_QWORD *)v249 + 3) + v296 + (int)v312 * (uint64_t)((unint64_t)v249[1] >> 2)) = 0;
        goto LABEL_237;
      }
    }
    v175 = 0;
    *(_QWORD *)&v453 = v183;
    LODWORD(v454) = 0;
    v459 = v453;
    v460[0] = v454;
    v176 = 1;
    v177 = v427;
    goto LABEL_160;
  }
  v141 = 0;
  v46 = 0;
  v10 = a4;
LABEL_246:
  v320 = v17[2];
  v321 = v17[4];
  v322 = v17[5];
  *(__int128 *)((char *)v17 + 264) = v17[3];
  *(__int128 *)((char *)v17 + 280) = v321;
  *(__int128 *)((char *)v17 + 248) = v320;
  v323 = *v17;
  *(__int128 *)((char *)v17 + 232) = v17[1];
  v324 = v17[6];
  v325 = v17[8];
  v326 = v17[9];
  *(__int128 *)((char *)v17 + 328) = v17[7];
  *(__int128 *)((char *)v17 + 344) = v325;
  *(__int128 *)((char *)v17 + 296) = v322;
  *(__int128 *)((char *)v17 + 312) = v324;
  v327 = v17[11];
  *(__int128 *)((char *)v17 + 376) = v17[10];
  *(__int128 *)((char *)v17 + 392) = v327;
  *(__int128 *)((char *)v17 + 360) = v326;
  *((_QWORD *)v17 + 51) = *((_QWORD *)v17 + 24);
  *(__int128 *)((char *)v17 + 216) = v323;
  v328 = 8 * (*((_DWORD *)v17 + 52) - *((_DWORD *)v17 + 6));
  *((_QWORD *)v17 + 4) = 0;
  *((_QWORD *)v17 + 1) = 510;
  *((_QWORD *)v17 + 2) = v328;
  v329 = v132;
  v45 = v141;
  if (*(_BYTE *)(v132 + 2416))
    v330 = 1;
  else
    v330 = (v46 | v141) == 0;
  v331 = !v330;
  v332 = v46;
  if (v10 || v331)
  {
    if (v10)
      v333 = v17;
    else
      v333 = (__int128 *)((char *)v17 + 1);
    sub_1B67CC270((unint64_t *)v17, v422, (_BYTE *)v333 + 74);
    v46 = v332;
  }
  if ((v140 & 1) == 0)
  {
    if ((int)v431 <= 2)
      v334 = 0;
    else
      v334 = v10;
    v335 = (char *)v17 + v334 + 76;
    sub_1B67CC270((unint64_t *)v17, v46, v335);
    sub_1B67CC270((unint64_t *)v17, v45, v335);
    v46 = v332;
  }
  LODWORD(v19) = v431;
  if (v412 < (int)v431)
  {
    sub_1B67CC270((unint64_t *)v17, 0, (_BYTE *)v17 - v431 + 76);
    v46 = v332;
  }
  v47 = v407;
  v49 = v407
      - *((_DWORD *)v17 + 2)
      + ((*((_DWORD *)v17 + 4) + 8 * (*((_DWORD *)v17 + 6) - *((_DWORD *)v17 + 52))) << 8)
      + 510;
  v336 = *(__int128 *)((char *)v17 + 264);
  v17[2] = *(__int128 *)((char *)v17 + 248);
  v17[3] = v336;
  v337 = *(__int128 *)((char *)v17 + 328);
  v17[6] = *(__int128 *)((char *)v17 + 312);
  v17[7] = v337;
  v338 = *(__int128 *)((char *)v17 + 296);
  v17[4] = *(__int128 *)((char *)v17 + 280);
  v17[5] = v338;
  *((_QWORD *)v17 + 24) = *((_QWORD *)v17 + 51);
  v339 = *(__int128 *)((char *)v17 + 392);
  v17[10] = *(__int128 *)((char *)v17 + 376);
  v17[11] = v339;
  v340 = *(__int128 *)((char *)v17 + 360);
  v17[8] = *(__int128 *)((char *)v17 + 344);
  v17[9] = v340;
  v341 = *(__int128 *)((char *)v17 + 232);
  *v17 = *(__int128 *)((char *)v17 + 216);
  v17[1] = v341;
  v51 = v329;
  v48 = v389;
  v50 = v389 + ((v49 * *(unsigned __int16 *)(*(_QWORD *)(v329 + 2408) + 8)) >> 8);
LABEL_266:
  if (v50 > *((_QWORD *)&v435 + 1))
  {
    if (v414 >= v413)
    {
      v342 = *(_QWORD *)(v51 + 2400);
      v343 = (_QWORD *)(v342 + 32 * v414);
      v344 = (unsigned __int8 *)v343[31];
      v345 = (unsigned __int8 *)v343[32];
      v347 = (unsigned __int8 *)v343[33];
      v346 = (unsigned __int8 *)v343[34];
      v348 = (1 << (v19 - 1));
      sub_1B683ABA0(v342, v429, v344, v12, v426, 0, 0, v348);
      sub_1B683ABA0(*(_QWORD *)(v51 + 2400), v429, v345, v12 + v348, v426, 0, 0, v348);
      v349 = v426 + v348;
      sub_1B683ABA0(*(_QWORD *)(v51 + 2400), v429, v347, v12, v426 + v348, 0, 0, v348);
      sub_1B683ABA0(*(_QWORD *)(v51 + 2400), v429, v346, v12 + v348, v426 + v348, 0, 0, v348);
      if (!*(_BYTE *)(v51 + 2416))
      {
        sub_1B683ADE4(*(_QWORD *)(v51 + 2400), (uint64_t)v429, (uint64_t)v344, v12, v426, 0, 0, v344[1]);
        if ((int)v19 - 1 > *(unsigned __int8 *)(*(_QWORD *)(v51 + 2384) + 2012))
        {
          sub_1B683ADE4(*(_QWORD *)(v51 + 2400), (uint64_t)v429, (uint64_t)v345, v12 + v348, v426, 0, 0, v345[1]);
          sub_1B683ADE4(*(_QWORD *)(v51 + 2400), (uint64_t)v429, (uint64_t)v347, v12, v349, 0, 0, v347[1]);
          sub_1B683ADE4(*(_QWORD *)(v51 + 2400), (uint64_t)v429, (uint64_t)v346, v12 + v348, v349, 0, 0, v346[1]);
        }
      }
    }
    v350 = *(_QWORD *)(v51 + 2408);
    v351 = *(_QWORD *)a7 + v435;
    *(_QWORD *)a7 = v351;
    v352 = *(_DWORD *)(a7 + 16) + v436;
    *(_DWORD *)(a7 + 16) = v352;
    *(_QWORD *)(a7 + 8) = v351
                        + ((v352 * *(unsigned __int16 *)(v350 + 8 + 2 * *(__int16 *)(a7 + 20))) >> (8 * (*(_WORD *)(a7 + 20) == 0)));
    v353 = *(_QWORD *)a9 + v438;
    *(_QWORD *)a9 = v353;
    v354 = *(_DWORD *)(a9 + 16) + v439;
    *(_DWORD *)(a9 + 16) = v354;
    *(_QWORD *)(a9 + 8) = v353
                        + ((v354 * *(unsigned __int16 *)(v350 + 8 + 2 * *(__int16 *)(a9 + 20))) >> (8 * (*(_WORD *)(a9 + 20) == 0)));
    v355 = a8;
    v356 = *(_QWORD *)a8 + v441;
    *(_QWORD *)a8 = v356;
    v357 = *(_DWORD *)(a8 + 16) + v442;
    *(_DWORD *)(a8 + 16) = v357;
    result = v415;
LABEL_282:
    *(_QWORD *)(v355 + 8) = v356
                          + ((v357 * *(unsigned __int16 *)(v350 + 2 * *(__int16 *)(v355 + 20) + 8)) >> (8 * (*(_WORD *)(v355 + 20) == 0)));
    return result;
  }
  *v11 = *v11 & 0xFFF3 | (4 * (v10 & 3));
  result = (v422 | v46 | v45) != 0;
  if (1 << v19 >= 8)
  {
    v359 = 0;
    v360 = 2 * ((unint64_t)*v9 >> 3);
    v361 = v11;
    do
    {
      v362 = v361;
      v363 = (1 << v19) >> 3;
      do
      {
        *v362++ = *v11;
        --v363;
      }
      while (v363);
      ++v359;
      v361 = (__int16 *)((char *)v361 + v360);
    }
    while (v359 != (1 << v19) >> 3);
  }
  v350 = *(_QWORD *)(v51 + 2408);
  v364 = *(_QWORD *)a7 + v48;
  *(_QWORD *)a7 = v364;
  v365 = *(_DWORD *)(a7 + 16) + v49;
  *(_DWORD *)(a7 + 16) = v365;
  *(_QWORD *)(a7 + 8) = v364
                      + ((v365 * *(unsigned __int16 *)(v350 + 8 + 2 * *(__int16 *)(a7 + 20))) >> (8 * (*(_WORD *)(a7 + 20) == 0)));
  v366 = *(_QWORD *)a8 + v48;
  *(_QWORD *)a8 = v366;
  LODWORD(v364) = *(_DWORD *)(a8 + 16) + v47;
  *(_DWORD *)(a8 + 16) = v364;
  *(_QWORD *)(a8 + 8) = v366
                      + ((v364 * *(unsigned __int16 *)(v350 + 8 + 2 * *(__int16 *)(a8 + 20))) >> (8 * (*(_WORD *)(a8 + 20) == 0)));
  if (a9 && v425)
  {
    v356 = *(_QWORD *)a9 + v449;
    *(_QWORD *)a9 = v356;
    v357 = *(_DWORD *)(a9 + 16) + v450;
    *(_DWORD *)(a9 + 16) = v357;
    if (!*(_BYTE *)(v51 + 2416))
    {
      v367 = v452;
      v356 += v453 + v451;
      *(_QWORD *)a9 = v356;
      v357 += v454 + v367;
      *(_DWORD *)(a9 + 16) = v357;
    }
    v355 = a9;
    goto LABEL_282;
  }
  return result;
}

uint64_t sub_1B686C480(uint64_t a1, int a2, int a3, unsigned __int8 *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v20;

  v20 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t *))(a1 + 8 * ((a8 & 7) == 0) + 2224))(a8, a7, a6, (char *)&v20 + 4, &v20);
  v13 = *(_QWORD *)(a1 + 2376);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 1368) + 2003);
  v15 = 544;
  v16 = 14;
  if (a5)
  {
    v16 = 15;
    v15 = 545;
  }
  v17 = *(char *)(v13 + v15)
      + *(char *)(*(_QWORD *)(v13 + 1384) + v16)
      + v14
      + (*(__int16 *)(*((_QWORD *)a4 + 11)
                    + 2
                    * (((a2 - *((_DWORD *)a4 + 1)) >> 3)
                     + ((unint64_t)*a4 >> 3) * ((a3 - *((_DWORD *)a4 + 2)) >> 3))) >> 9);
  if (v17 >= v14 + 57)
    v18 = v14 + 57;
  else
    v18 = v17;
  if (v17 <= 0)
    v18 = 0;
  return (((HIDWORD(v20) * byte_1B6924C34[v18 + 140] + (_DWORD)v20 * byte_1B6924C34[v18 + 210]) << 6) + 128) & 0xFFFFFF00;
}

uint64_t sub_1B686C594(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned __int8 *a5, int a6)
{
  int v8;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  BOOL v51;
  char v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unsigned int v75;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  size_t v79;
  char *v80;
  int v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unint64_t v140;
  unsigned int v141;
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  int v149;
  int v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  unint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unint64_t v198;
  unsigned int v199;
  int v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  char v223;
  int v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int16 *v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  char v236;
  uint64_t v237;
  int v238;
  unsigned int v239;
  unsigned int v240;
  _QWORD *v241;
  int v242;
  __int16 v243;
  __int16 v244;
  unint64_t v245;
  unint64_t v246;
  __int128 v247;
  int v248;
  __int16 v249;
  __int128 v250;
  int v251;
  __int16 v252;
  uint64_t v253;

  v8 = a4;
  v242 = 0;
  v253 = *MEMORY[0x1E0C80C00];
  v11 = -a4;
  while (1)
  {
    v12 = *(_DWORD *)(a1 + 2048);
    v13 = (a2 - *((_DWORD *)a5 + 1));
    v14 = a3 - *((_DWORD *)a5 + 2);
    v15 = *((_QWORD *)a5 + 11);
    v16 = (v13 >> 3) + ((unint64_t)*a5 >> 3) * (v14 >> 3);
    if (v8 >= ((*(unsigned __int16 *)(v15 + 2 * v16) >> 2) & 3))
      break;
    v17 = 1 << (--v11 + v12);
    v18 = (v17 + a2);
    v19 = v17 + a3;
    ++v8;
    v20 = a2;
    v21 = sub_1B686C594(a1, a2);
    v22 = v21 | sub_1B686C594(a1, v18);
    v242 |= sub_1B686C594(a1, v20) | v22;
    a6 = 3;
    a2 = v18;
    a3 = v19;
  }
  v240 = a3;
  v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2392) + 227);
  v244 = 0;
  v241 = (_QWORD *)a1;
  v24 = *(__int128 **)(*(_QWORD *)(a1 + 2400) + 944);
  v248 = 0;
  v247 = xmmword_1B6917860;
  v249 = 0;
  v251 = 0;
  v250 = xmmword_1B6917860;
  v252 = 0;
  v25 = *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1);
  v26 = 2 * v25;
  v233 = a5[1];
  v234 = 2 * v25;
  if (v23)
    v26 = a5[1];
  v230 = v26;
  v239 = a2;
  v27 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 5) + 24))(*((_QWORD *)a5 + 5), v13 + a5[1] * (unint64_t)(v14 >> 1) + *((_QWORD *)a5 + 6));
  v28 = v239;
  v232 = v27;
  v29 = 0;
  v30 = *((_DWORD *)a5 + 1);
  v31 = *((_DWORD *)a5 + 2);
  v32 = v239 - v30;
  if (((v239 - v30) & 0x80000000) != 0)
  {
    v33 = v240;
  }
  else
  {
    v33 = v240;
    v34 = v240 - v31;
    if (((v240 - v31) & 0x80000000) == 0)
    {
      v29 = 0;
      v35 = *a5;
      if (v32 < v35 && v34 < v35)
      {
        v36 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 96), *(_QWORD *)(*((_QWORD *)a5 + 17) + 104)+ v32+ *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (unint64_t)(v34 & 0xFFFFFFFE));
        v28 = v239;
        v33 = v240;
        v29 = v36;
        v30 = *((_DWORD *)a5 + 1);
        v31 = *((_DWORD *)a5 + 2);
      }
    }
  }
  v227 = v25;
  if (v23)
  {
    v237 = 0;
    v37 = v28 - v30;
    if ((v37 & 0x80000000) == 0)
    {
      v38 = v33 - v31;
      if (((v33 - v31) & 0x80000000) == 0)
      {
        v237 = 0;
        v39 = *a5;
        if (v37 < v39 && v38 < v39)
        {
          v40 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 9) + 24))(*((_QWORD *)a5 + 9), v37 + a5[1] * (unint64_t)(v38 >> 1) + *((_QWORD *)a5 + 10));
          v28 = v239;
          v33 = v240;
          v237 = v40;
          v30 = *((_DWORD *)a5 + 1);
          v31 = *((_DWORD *)a5 + 2);
        }
      }
    }
  }
  else
  {
    v237 = v29;
  }
  v41 = 0;
  v42 = v11 + v12;
  v43 = v28 - v30;
  if ((v43 & 0x80000000) != 0)
    goto LABEL_24;
  v44 = v33 - v31;
  v45 = 0;
  if ((v44 & 0x80000000) != 0)
    goto LABEL_25;
  v41 = 0;
  v46 = *a5;
  if (v43 >= v46)
  {
LABEL_24:
    v45 = 0;
  }
  else
  {
    v45 = 0;
    if (v44 < v46)
    {
      v47 = *((_QWORD *)a5 + 17);
      v48 = (v43 >> 1) + *(unsigned __int8 *)(v47 + 1) * (unint64_t)(v44 >> 1);
      v41 = *(_QWORD *)(v47 + 64) + 2 * v48;
      v45 = *(_QWORD *)(v47 + 72) + 2 * v48;
    }
  }
LABEL_25:
  if (v42 <= *(unsigned __int8 *)(v241[298] + 2012))
  {
    if (a6)
    {
      v49 = 0;
      return (v242 | v49) & 1;
    }
  }
  else
  {
    --v42;
  }
  v50 = (1 << v42);
  v235 = v42;
  if (*(_BYTE *)(v241[299] + 352))
    v51 = v42 == 2;
  else
    v51 = 0;
  v52 = v51;
  v223 = v52;
  v225 = v23;
  if (v51)
  {
    v53 = v241[300];
    v54 = *(unsigned __int8 **)(v53 + 376);
    v55 = 2 * *v54;
    v56 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v54 + 10) + 24))(*((_QWORD *)v54 + 10), *((_QWORD *)v54 + 11));
    v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 8144);
    v23 = v225;
    v57(8, 4, v230, v237, v55, v56);
  }
  v229 = (__int16 *)(v15 + 2 * v16);
  if (v23)
  {
    v58 = v241[301];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *))(v58 + 376))(v232, v233, v237, v233, v50, v50, &v247, &v250);
    v59 = *(unsigned __int16 *)(v58 + 18);
    *(_QWORD *)&v247 = (unint64_t)(v247 * v59) >> 8;
    *(_QWORD *)&v250 = (unint64_t)(v250 * v59) >> 8;
    v60 = v241[301] + 8;
    *((_QWORD *)&v247 + 1) = ((v248 * *(unsigned __int16 *)(v60 + 2 * v249)) >> (8 * (v249 == 0)))
                           + (_QWORD)v247;
    *((_QWORD *)&v250 + 1) = ((v251 * *(unsigned __int16 *)(v60 + 2 * v252)) >> (8 * (v252 == 0)))
                           + (_QWORD)v250;
  }
  v61 = 0;
  v62 = v241[300];
  *(_DWORD *)(v62 + 808) = v239;
  *(_DWORD *)(v62 + 812) = v240;
  v63 = v239 - *((_DWORD *)a5 + 1);
  if ((v63 & 0x80000000) == 0)
  {
    v64 = v240 - *((_DWORD *)a5 + 2);
    if ((v64 & 0x80000000) == 0)
    {
      v61 = 0;
      v65 = *a5;
      if (v63 < v65 && v64 < v65)
        v61 = *((_QWORD *)a5 + 12) + 16 * ((v63 >> 2) + (v65 >> 2) * (unint64_t)(v64 >> 2));
    }
  }
  *(_QWORD *)(v62 + 864) = v61;
  v220 = v227;
  v228 = v29;
  sub_1B6867058(v241, v239, v240, v235, v229, v232, v233, v237, v230, v29, v234, v41, v45, v220, (BOOL *)&v244 + 1, &v244, 0, 0);
  sub_1B6841DFC(v241[300], v239, v240, a5, 1, 0, 0, 0, 0);
  if (*(_BYTE *)(v241[299] + 352))
  {
    LODWORD(v67) = (int)v50 >> 2;
    v68 = v239 - *((_DWORD *)a5 + 1);
    v69 = v240 - *((_DWORD *)a5 + 2);
    if ((v68 & 0x80000000) == 0 && (v69 & 0x80000000) == 0)
    {
      v70 = *a5;
      if (v68 < v70 && v69 < v70 && v235 >= 2)
      {
        v71 = *((_QWORD *)a5 + 17);
        v72 = (unint64_t)*(unsigned __int8 *)(v71 + 1) >> 2;
        v73 = (char *)(*(_QWORD *)(v71 + 16) + (v68 >> 3) + v72 * (unint64_t)(v69 >> 3));
        v74 = (int)v67;
        do
        {
          --v74;
          bzero(v73, (int)v67);
          v73 += v72;
        }
        while (v74);
        v68 = v239 - *((_DWORD *)a5 + 1);
        v69 = v240 - *((_DWORD *)a5 + 2);
      }
    }
    if ((v68 & 0x80000000) == 0 && (v69 & 0x80000000) == 0)
    {
      v75 = *a5;
      v76 = v68 >= v75 || v69 >= v75;
      if (!v76 && v235 >= 2)
      {
        v77 = *((_QWORD *)a5 + 17);
        v78 = (unint64_t)*(unsigned __int8 *)(v77 + 1) >> 2;
        v79 = (int)v67;
        v80 = (char *)(*(_QWORD *)(v77 + 24) + (v68 >> 3) + v78 * (unint64_t)(v69 >> 3));
        v67 = (int)v67;
        do
        {
          --v67;
          bzero(v80, v79);
          v80 += v78;
        }
        while (v67);
      }
    }
  }
  v81 = HIBYTE(v244);
  v82 = v244;
  if (HIBYTE(v244))
    v83 = 0;
  else
    v83 = v244 == 0;
  if (v83)
  {
    v82 = 0;
    v109 = -1;
    goto LABEL_81;
  }
  v84 = (uint64_t)v241;
  v85 = v241[301];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v85 + 376))(v232, v233, v29, v234, v50, v50, &v245, &v246);
  v86 = *(unsigned __int16 *)(v85 + 18);
  v87 = (v245 * v86) >> 8;
  v245 = v87;
  v246 = (v246 * v86) >> 8;
  if (!v81)
  {
    v109 = -1;
    v110 = v239;
    v66 = v240;
    v97 = v225;
    if (v82)
      goto LABEL_107;
LABEL_81:
    v111 = -1;
    goto LABEL_82;
  }
  v88 = v24[2];
  v89 = v24[4];
  v90 = v24[5];
  *(__int128 *)((char *)v24 + 264) = v24[3];
  *(__int128 *)((char *)v24 + 280) = v89;
  *(__int128 *)((char *)v24 + 248) = v88;
  v91 = *v24;
  *(__int128 *)((char *)v24 + 232) = v24[1];
  v92 = v24[6];
  v93 = v24[8];
  v94 = v24[9];
  *(__int128 *)((char *)v24 + 328) = v24[7];
  *(__int128 *)((char *)v24 + 344) = v93;
  *(__int128 *)((char *)v24 + 296) = v90;
  *(__int128 *)((char *)v24 + 312) = v92;
  v95 = v24[11];
  *(__int128 *)((char *)v24 + 376) = v24[10];
  *(__int128 *)((char *)v24 + 392) = v95;
  *(__int128 *)((char *)v24 + 360) = v94;
  *((_QWORD *)v24 + 51) = *((_QWORD *)v24 + 24);
  *(__int128 *)((char *)v24 + 216) = v91;
  v96 = 8 * (*((_DWORD *)v24 + 52) - *((_DWORD *)v24 + 6));
  *((_QWORD *)v24 + 4) = 0;
  *((_QWORD *)v24 + 1) = 510;
  *((_QWORD *)v24 + 2) = v96;
  v97 = v225;
  if (*(_BYTE *)(v241[299] + 352))
  {
    v98 = 0;
    v99 = v239 - *((_DWORD *)a5 + 1);
    if ((v99 & 0x80000000) == 0)
    {
      v100 = v240 - *((_DWORD *)a5 + 2);
      if ((v100 & 0x80000000) == 0)
      {
        v98 = 0;
        v101 = *a5;
        if (v99 < v101 && v100 < v101)
          v98 = *(_QWORD *)(*((_QWORD *)a5 + 17) + 16)
              + (v99 >> 3)
              + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) >> 2) * (v100 >> 3);
      }
    }
    v84 = (uint64_t)v241;
    *(_QWORD *)(v241[300] + 928) = v98;
  }
  sub_1B6860B50(v84, v239, v240, v235, 0, 1);
  v102 = (*((_DWORD *)v24 + 4) << 8)
       - *((_DWORD *)v24 + 2)
       + ((*((_DWORD *)v24 + 6) - *((_DWORD *)v24 + 52)) << 11)
       + 510;
  v103 = *(__int128 *)((char *)v24 + 264);
  v24[2] = *(__int128 *)((char *)v24 + 248);
  v24[3] = v103;
  v104 = *(__int128 *)((char *)v24 + 328);
  v24[6] = *(__int128 *)((char *)v24 + 312);
  v24[7] = v104;
  v105 = *(__int128 *)((char *)v24 + 296);
  v24[4] = *(__int128 *)((char *)v24 + 280);
  v24[5] = v105;
  *((_QWORD *)v24 + 24) = *((_QWORD *)v24 + 51);
  v106 = *(__int128 *)((char *)v24 + 392);
  v24[10] = *(__int128 *)((char *)v24 + 376);
  v24[11] = v106;
  v107 = *(__int128 *)((char *)v24 + 360);
  v24[8] = *(__int128 *)((char *)v24 + 344);
  v24[9] = v107;
  v108 = *(__int128 *)((char *)v24 + 232);
  *v24 = *(__int128 *)((char *)v24 + 216);
  v24[1] = v108;
  v109 = ((v102 * *(unsigned __int16 *)(*(_QWORD *)(v84 + 2408) + 8)) >> 8) + v87;
  if (v225 && *((_QWORD *)&v247 + 1) < v109)
  {
    HIBYTE(v244) = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v241[300] + 8152))((2 << v235), v50, v230, v237, v234, v29);
    v82 = v244;
  }
  v110 = v239;
  v66 = v240;
  if (!v82)
    goto LABEL_81;
LABEL_107:
  v155 = v24[2];
  v156 = v24[4];
  v157 = v24[5];
  *(__int128 *)((char *)v24 + 264) = v24[3];
  *(__int128 *)((char *)v24 + 280) = v156;
  *(__int128 *)((char *)v24 + 248) = v155;
  v158 = *v24;
  *(__int128 *)((char *)v24 + 232) = v24[1];
  v159 = v24[6];
  v160 = v24[8];
  v161 = v24[9];
  *(__int128 *)((char *)v24 + 328) = v24[7];
  *(__int128 *)((char *)v24 + 344) = v160;
  *(__int128 *)((char *)v24 + 296) = v157;
  *(__int128 *)((char *)v24 + 312) = v159;
  v162 = v24[11];
  *(__int128 *)((char *)v24 + 376) = v24[10];
  *(__int128 *)((char *)v24 + 392) = v162;
  *(__int128 *)((char *)v24 + 360) = v161;
  v163 = v246;
  *((_QWORD *)v24 + 51) = *((_QWORD *)v24 + 24);
  *(__int128 *)((char *)v24 + 216) = v158;
  v164 = 8 * (*((_DWORD *)v24 + 52) - *((_DWORD *)v24 + 6));
  *((_QWORD *)v24 + 4) = 0;
  *((_QWORD *)v24 + 1) = 510;
  *((_QWORD *)v24 + 2) = v164;
  v165 = (uint64_t)v241;
  if (*(_BYTE *)(v241[299] + 352))
  {
    v166 = 0;
    v167 = v110 - *((_DWORD *)a5 + 1);
    if ((v167 & 0x80000000) == 0)
    {
      v168 = v66 - *((_DWORD *)a5 + 2);
      if ((v168 & 0x80000000) == 0)
      {
        v166 = 0;
        v169 = *a5;
        if (v167 < v169 && v168 < v169)
          v166 = *(_QWORD *)(*((_QWORD *)a5 + 17) + 24)
               + (v167 >> 3)
               + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) >> 2) * (v168 >> 3);
      }
    }
    v165 = (uint64_t)v241;
    *(_QWORD *)(v241[300] + 936) = v166;
  }
  sub_1B6860B50(v165, v110, v66, v235, 0, 2);
  v170 = (*((_DWORD *)v24 + 4) << 8)
       - *((_DWORD *)v24 + 2)
       + ((*((_DWORD *)v24 + 6) - *((_DWORD *)v24 + 52)) << 11)
       + 510;
  v171 = *(__int128 *)((char *)v24 + 264);
  v24[2] = *(__int128 *)((char *)v24 + 248);
  v24[3] = v171;
  v172 = *(__int128 *)((char *)v24 + 328);
  v24[6] = *(__int128 *)((char *)v24 + 312);
  v24[7] = v172;
  v173 = *(__int128 *)((char *)v24 + 296);
  v24[4] = *(__int128 *)((char *)v24 + 280);
  v24[5] = v173;
  *((_QWORD *)v24 + 24) = *((_QWORD *)v24 + 51);
  v174 = *(__int128 *)((char *)v24 + 392);
  v24[10] = *(__int128 *)((char *)v24 + 376);
  v24[11] = v174;
  v175 = *(__int128 *)((char *)v24 + 360);
  v24[8] = *(__int128 *)((char *)v24 + 344);
  v24[9] = v175;
  v176 = *(__int128 *)((char *)v24 + 232);
  *v24 = *(__int128 *)((char *)v24 + 216);
  v24[1] = v176;
  v111 = ((v170 * *(unsigned __int16 *)(*(_QWORD *)(v165 + 2408) + 8)) >> 8) + v163;
  if (v97 && *((_QWORD *)&v250 + 1) < v111)
  {
    v177 = 0;
    LOBYTE(v244) = 0;
    v178 = v241[300];
    v179 = v239 + 1 - *((_DWORD *)a5 + 1);
    v180 = v240 - *((_DWORD *)a5 + 2);
    if ((v179 & 0x80000000) == 0 && (v180 & 0x80000000) == 0)
    {
      v177 = 0;
      v181 = *a5;
      if (v179 < v181 && v180 < v181)
      {
        v177 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 9) + 24))(*((_QWORD *)a5 + 9), v179 + a5[1] * (unint64_t)(v180 >> 1) + *((_QWORD *)a5 + 10));
        LODWORD(v179) = v239 + 1 - *((_DWORD *)a5 + 1);
        v180 = v240 - *((_DWORD *)a5 + 2);
      }
    }
    v182 = 0;
    if ((v179 & 0x80000000) != 0)
    {
      v112 = v223;
    }
    else
    {
      v112 = v223;
      if ((v180 & 0x80000000) == 0)
      {
        v182 = 0;
        v183 = *a5;
        if (v179 < v183 && v180 < v183)
          v182 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 96), *(_QWORD *)(*((_QWORD *)a5 + 17) + 104)+ v179+ *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (unint64_t)(v180 & 0xFFFFFFFE));
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v178 + 8152))((2 << v235), v50, v230, v177, v234, v182);
    v82 = 0;
    goto LABEL_83;
  }
LABEL_82:
  v112 = v223;
LABEL_83:
  v113 = v235 - 2;
  if ((v112 & 1) != 0)
  {
    v231 = v111;
    v236 = v235 - 2;
    v238 = v82;
    v114 = *(unsigned __int8 **)(v241[300] + 376);
    v115 = *v114;
    v116 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v114 + 10) + 24))(*((_QWORD *)v114 + 10), *((_QWORD *)v114 + 11), v66);
    v117 = v116;
    v118 = *(_QWORD *)(v241[300] + 376);
    v120 = *(_QWORD *)(v118 + 56);
    v119 = *(_QWORD *)(v118 + 64);
    v243 = 0;
    v121 = *((_QWORD *)&v247 + 1);
    v224 = HIBYTE(v244);
    if (HIBYTE(v244))
      v121 = v109;
    v221 = v121;
    v222 = v119;
    v226 = 2 * v115;
    sub_1B6867058(v241, v239, v240, 2, v229, v232, v233, v116, 2 * v115, v116, 2 * v115, v120, v119, v115, (BOOL *)&v243 + 1, &v243, 1, 1);
    *(_QWORD *)(v241[300] + 824) = v115;
    v122 = HIBYTE(v243);
    v123 = v243;
    if (!(HIBYTE(v243) | v243))
      goto LABEL_101;
    v124 = v241[301];
    v125 = v243;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v124 + 376))(v232, v233, v117, v226, 4, 4, &v245, &v246);
    v123 = v125;
    v126 = *(unsigned __int16 *)(v124 + 18);
    v127 = (v245 * v126) >> 8;
    v245 = v127;
    v246 = (v246 * v126) >> 8;
    if (!v122)
      goto LABEL_101;
    v128 = v24[2];
    v129 = v24[4];
    v130 = v24[5];
    *(__int128 *)((char *)v24 + 264) = v24[3];
    *(__int128 *)((char *)v24 + 280) = v129;
    *(__int128 *)((char *)v24 + 248) = v128;
    v131 = *v24;
    *(__int128 *)((char *)v24 + 232) = v24[1];
    v132 = v24[6];
    v133 = v24[8];
    v134 = v24[9];
    *(__int128 *)((char *)v24 + 328) = v24[7];
    *(__int128 *)((char *)v24 + 344) = v133;
    *(__int128 *)((char *)v24 + 296) = v130;
    *(__int128 *)((char *)v24 + 312) = v132;
    v135 = v24[11];
    *(__int128 *)((char *)v24 + 376) = v24[10];
    *(__int128 *)((char *)v24 + 392) = v135;
    *(__int128 *)((char *)v24 + 360) = v134;
    *((_QWORD *)v24 + 51) = *((_QWORD *)v24 + 24);
    *(__int128 *)((char *)v24 + 216) = v131;
    v136 = 8 * (*((_DWORD *)v24 + 52) - *((_DWORD *)v24 + 6));
    *((_QWORD *)v24 + 4) = 0;
    *((_QWORD *)v24 + 1) = 510;
    *((_QWORD *)v24 + 2) = v136;
    v137 = v239 - *((_DWORD *)a5 + 1);
    v138 = v240 - *((_DWORD *)a5 + 2);
    if ((v137 & 0x80000000) == 0 && (v138 & 0x80000000) == 0)
    {
      v139 = *a5;
      if (v137 < v139 && v138 < v139)
      {
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a5 + 17) + 16)
                 + (v137 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) >> 2) * (v138 >> 3)) = 1;
        v137 = v239 - *((_DWORD *)a5 + 1);
        v138 = v240 - *((_DWORD *)a5 + 2);
      }
    }
    v140 = 0;
    *(_QWORD *)(v241[300] + 880) = v120;
    if ((v137 & 0x80000000) == 0 && (v138 & 0x80000000) == 0)
    {
      v140 = 0;
      v141 = *a5;
      if (v137 < v141 && v138 < v141)
        v140 = *(_QWORD *)(*((_QWORD *)a5 + 17) + 16)
             + (v137 >> 3)
             + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) >> 2) * (v138 >> 3);
    }
    *(_QWORD *)(v241[300] + 928) = v140;
    sub_1B6860B50((uint64_t)v241, v239, v240, 2, 0, 1);
    v142 = (*((_DWORD *)v24 + 4) << 8)
         - *((_DWORD *)v24 + 2)
         + ((*((_DWORD *)v24 + 6) - *((_DWORD *)v24 + 52)) << 11)
         + 510;
    v143 = *(__int128 *)((char *)v24 + 264);
    v24[2] = *(__int128 *)((char *)v24 + 248);
    v24[3] = v143;
    v144 = *(__int128 *)((char *)v24 + 328);
    v24[6] = *(__int128 *)((char *)v24 + 312);
    v24[7] = v144;
    v145 = *(__int128 *)((char *)v24 + 296);
    v24[4] = *(__int128 *)((char *)v24 + 280);
    v24[5] = v145;
    *((_QWORD *)v24 + 24) = *((_QWORD *)v24 + 51);
    v146 = *(__int128 *)((char *)v24 + 392);
    v24[10] = *(__int128 *)((char *)v24 + 376);
    v24[11] = v146;
    v147 = *(__int128 *)((char *)v24 + 360);
    v24[8] = *(__int128 *)((char *)v24 + 344);
    v24[9] = v147;
    v148 = *(__int128 *)((char *)v24 + 232);
    *v24 = *(__int128 *)((char *)v24 + 216);
    v24[1] = v148;
    v123 = v125;
    if (v221 > ((v142 * *(unsigned __int16 *)(v241[301] + 8)) >> 8) + v127)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v241[300] + 8152))(8, 4, v226, v117, v234, v228);
      v123 = v125;
      v149 = 1;
      v150 = v240;
      v151 = v239;
      v82 = v238;
    }
    else
    {
LABEL_101:
      v152 = v239 - *((_DWORD *)a5 + 1);
      v151 = v239;
      if ((v152 & 0x80000000) != 0)
      {
        v150 = v240;
        v82 = v238;
        v149 = v224;
      }
      else
      {
        v150 = v240;
        v153 = v240 - *((_DWORD *)a5 + 2);
        v82 = v238;
        v149 = v224;
        if ((v153 & 0x80000000) == 0)
        {
          v154 = *a5;
          if (v152 < v154 && v153 < v154)
            *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a5 + 17) + 16)
                     + (v152 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) >> 2) * (v153 >> 3)) = 0;
        }
      }
    }
    if (v82)
      v184 = v231;
    else
      v184 = *((_QWORD *)&v250 + 1);
    if (!v123)
      goto LABEL_148;
    v185 = v24[2];
    v186 = v24[4];
    v187 = v24[5];
    *(__int128 *)((char *)v24 + 264) = v24[3];
    *(__int128 *)((char *)v24 + 280) = v186;
    *(__int128 *)((char *)v24 + 248) = v185;
    v188 = *v24;
    *(__int128 *)((char *)v24 + 232) = v24[1];
    v189 = v24[6];
    v190 = v24[8];
    v191 = v24[9];
    *(__int128 *)((char *)v24 + 328) = v24[7];
    *(__int128 *)((char *)v24 + 344) = v190;
    *(__int128 *)((char *)v24 + 296) = v187;
    *(__int128 *)((char *)v24 + 312) = v189;
    v192 = v24[11];
    *(__int128 *)((char *)v24 + 376) = v24[10];
    *(__int128 *)((char *)v24 + 392) = v192;
    *(__int128 *)((char *)v24 + 360) = v191;
    v193 = v246;
    *((_QWORD *)v24 + 51) = *((_QWORD *)v24 + 24);
    *(__int128 *)((char *)v24 + 216) = v188;
    v194 = 8 * (*((_DWORD *)v24 + 52) - *((_DWORD *)v24 + 6));
    *((_QWORD *)v24 + 4) = 0;
    *((_QWORD *)v24 + 1) = 510;
    *((_QWORD *)v24 + 2) = v194;
    v195 = v151 - *((_DWORD *)a5 + 1);
    v196 = v150 - *((_DWORD *)a5 + 2);
    if ((v195 & 0x80000000) == 0 && (v196 & 0x80000000) == 0)
    {
      v197 = *a5;
      if (v195 < v197 && v196 < v197)
      {
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a5 + 17) + 24)
                 + (v195 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) >> 2) * (v196 >> 3)) = 1;
        v195 = v151 - *((_DWORD *)a5 + 1);
        v196 = v150 - *((_DWORD *)a5 + 2);
      }
    }
    v198 = 0;
    *(_QWORD *)(v241[300] + 888) = v222;
    if ((v195 & 0x80000000) == 0 && (v196 & 0x80000000) == 0)
    {
      v198 = 0;
      v199 = *a5;
      if (v195 < v199 && v196 < v199)
        v198 = *(_QWORD *)(*((_QWORD *)a5 + 17) + 24)
             + (v195 >> 3)
             + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) >> 2) * (v196 >> 3);
    }
    *(_QWORD *)(v241[300] + 936) = v198;
    sub_1B6860B50((uint64_t)v241, v151, v150, 2, 0, 2);
    v151 = v239;
    v150 = v240;
    v200 = (*((_DWORD *)v24 + 4) << 8)
         - *((_DWORD *)v24 + 2)
         + ((*((_DWORD *)v24 + 6) - *((_DWORD *)v24 + 52)) << 11)
         + 510;
    v201 = *(__int128 *)((char *)v24 + 264);
    v24[2] = *(__int128 *)((char *)v24 + 248);
    v24[3] = v201;
    v202 = *(__int128 *)((char *)v24 + 328);
    v24[6] = *(__int128 *)((char *)v24 + 312);
    v24[7] = v202;
    v203 = *(__int128 *)((char *)v24 + 296);
    v24[4] = *(__int128 *)((char *)v24 + 280);
    v24[5] = v203;
    *((_QWORD *)v24 + 24) = *((_QWORD *)v24 + 51);
    v204 = *(__int128 *)((char *)v24 + 392);
    v24[10] = *(__int128 *)((char *)v24 + 376);
    v24[11] = v204;
    v205 = *(__int128 *)((char *)v24 + 360);
    v24[8] = *(__int128 *)((char *)v24 + 344);
    v24[9] = v205;
    v206 = *(__int128 *)((char *)v24 + 232);
    *v24 = *(__int128 *)((char *)v24 + 216);
    v24[1] = v206;
    if (v184 > ((v200 * *(unsigned __int16 *)(v241[301] + 8)) >> 8) + v193)
    {
      v207 = v241[300];
      v208 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(v207 + 376) + 80) + 24))(*(_QWORD *)(*(_QWORD *)(v207 + 376) + 80), *(_QWORD *)(*(_QWORD *)(v207 + 376) + 88) + 1, v240);
      v209 = 0;
      v210 = v239 - *((_DWORD *)a5 + 1) + 1;
      if ((v210 & 0x80000000) == 0)
      {
        v211 = v240 - *((_DWORD *)a5 + 2);
        if ((v211 & 0x80000000) == 0)
        {
          v209 = 0;
          v212 = *a5;
          if (v210 < v212 && v211 < v212)
            v209 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 96)
                                                                       + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 96), *(_QWORD *)(*((_QWORD *)a5 + 17) + 104)+ v210+ *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (unint64_t)(v211 & 0xFFFFFFFE));
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v207 + 8152))(8, 4, v226, v208, v234, v209);
      v82 = 1;
      v151 = v239;
      v150 = v240;
    }
    else
    {
LABEL_148:
      v213 = v151 - *((_DWORD *)a5 + 1);
      if ((v213 & 0x80000000) == 0)
      {
        v214 = v150 - *((_DWORD *)a5 + 2);
        if ((v214 & 0x80000000) == 0)
        {
          v215 = *a5;
          if (v213 < v215 && v214 < v215)
            *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a5 + 17) + 24)
                     + (v213 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) >> 2) * (v214 >> 3)) = 0;
        }
      }
    }
    v113 = v236;
  }
  else
  {
    v149 = HIBYTE(v244);
    v151 = v239;
    v150 = v240;
  }
  v216 = 1 << v113;
  v217 = v150;
  v218 = v151;
  sub_1B688DE74(a5, v151, v150, 1 << v113, 1, v149, 0);
  sub_1B688DE74(a5, v218, v217, v216, 2, v82, 0);
  v49 = (v82 | v149) != 0;
  return (v242 | v49) & 1;
}

uint64_t sub_1B686D734(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v13;
  int v14;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  __int128 *v26;
  char *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  BOOL v150;
  int v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  int v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int v180;
  __int128 *v181;
  uint64_t v182;
  uint64_t *v183;
  int v184;
  __int128 *v185;
  uint64_t *v186;
  __int128 *v187;
  uint64_t v188;
  uint64_t *v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  int v214;
  int v215;
  unsigned int v216;
  int v217;
  int v220;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  _QWORD v236[4];

  LODWORD(v10) = a4;
  v13 = a1;
  v220 = 0;
  v236[2] = *MEMORY[0x1E0C80C00];
  v14 = -a4;
  while (1)
  {
    v16 = *(_DWORD *)(v13 + 2048);
    v17 = (a2 - *((_DWORD *)a5 + 1));
    v18 = a3 - *((_DWORD *)a5 + 2);
    if ((int)v10 >= ((*(unsigned __int16 *)(*((_QWORD *)a5 + 11)
                                           + 2 * ((v17 >> 3) + ((unint64_t)*a5 >> 3) * (v18 >> 3))) >> 2) & 3))
      break;
    v19 = 1 << (--v14 + v16);
    v20 = (v19 + a2);
    v21 = (v19 + a3);
    v10 = (v10 + 1);
    v22 = sub_1B686D734(v13, a2, a3, v10, a5, 0, a7, a8);
    v23 = v22 | sub_1B686D734(a1, v20, a3, v10, a5, 1, a7, a8);
    v13 = a1;
    v220 |= sub_1B686D734(a1, a2, v21, v10, a5, 2, a7, a8) | v23;
    a6 = 3;
    a2 = v20;
    a3 = v21;
  }
  v24 = 0;
  v25 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 2392) + 227);
  v215 = v14 + v16;
  v26 = *(__int128 **)(*(_QWORD *)(v13 + 2400) + 944);
  do
  {
    v27 = (char *)&v231 + v24;
    *((_DWORD *)v27 + 4) = 0;
    *(_OWORD *)v27 = xmmword_1B6917860;
    *((_WORD *)v27 + 10) = 0;
    v28 = (char *)&v225 + v24;
    *((_DWORD *)v28 + 4) = 0;
    *(_OWORD *)v28 = xmmword_1B6917860;
    v24 += 24;
    *((_WORD *)v28 + 10) = 0;
  }
  while (v24 != 72);
  v29 = (unsigned __int8 *)*((_QWORD *)a5 + 17);
  v30 = *(unsigned __int8 *)(*((_QWORD *)v29 + 4) + (v17 >> 2)
                                                  + ((unint64_t)*v29 >> 2) * (v18 >> 2));
  v209 = *v29;
  v211 = a5[1];
  if (v25)
    v31 = a5[1];
  else
    v31 = *v29;
  v32 = (*(uint64_t (**)(_QWORD, unint64_t, __int128))(**((_QWORD **)a5 + 3) + 24))(*((_QWORD *)a5 + 3), v17 + a5[1] * (unint64_t)v18 + *((_QWORD *)a5 + 4), xmmword_1B6917860);
  v33 = 0;
  v34 = *((_DWORD *)a5 + 1);
  v35 = *((_DWORD *)a5 + 2);
  v36 = a2 - v34;
  v200 = v31;
  if ((((_DWORD)a2 - v34) & 0x80000000) == 0)
  {
    v37 = a3 - v35;
    if ((((_DWORD)a3 - v35) & 0x80000000) == 0)
    {
      v33 = 0;
      v38 = *a5;
      if (v36 < v38 && v37 < v38)
      {
        v39 = v32;
        v40 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 80) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 80), *(_QWORD *)(*((_QWORD *)a5 + 17) + 88) + v36 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v37);
        v32 = v39;
        v33 = v40;
        v34 = *((_DWORD *)a5 + 1);
        v35 = *((_DWORD *)a5 + 2);
      }
    }
  }
  v217 = a2;
  if (v25)
  {
    v41 = 0;
    v42 = (a2 - v34);
    if ((v42 & 0x80000000) == 0)
    {
      v43 = a3 - v35;
      if ((((_DWORD)a3 - v35) & 0x80000000) == 0)
      {
        v41 = 0;
        v44 = *a5;
        if (v42 < v44 && v43 < v44)
        {
          v45 = v30;
          v46 = v25;
          v47 = v33;
          v48 = v32;
          v49 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 7) + 24))(*((_QWORD *)a5 + 7), v42 + a5[1] * (unint64_t)v43 + *((_QWORD *)a5 + 8));
          v32 = v48;
          v33 = v47;
          v25 = v46;
          v30 = v45;
          v41 = v49;
          v34 = *((_DWORD *)a5 + 1);
          v35 = *((_DWORD *)a5 + 2);
        }
      }
    }
  }
  else
  {
    v41 = v33;
  }
  v50 = 0;
  v51 = v215;
  v52 = (1 << v215);
  v53 = (v217 - v34);
  if ((v53 & 0x80000000) == 0)
  {
    v54 = a3 - v35;
    if ((v54 & 0x80000000) == 0)
    {
      v50 = 0;
      v55 = *a5;
      if (v53 < v55 && v54 < v55)
      {
        v50 = *(_QWORD *)(*((_QWORD *)a5 + 17) + 56)
            + 2 * (v53 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v54);
        v51 = v215;
      }
    }
  }
  v205 = v33;
  if (!v25)
  {
    v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 2408)
                                                                                + 8 * (v51 - 2)
                                                                                + 24);
    v64 = *(_QWORD *)(v13 + 2400);
    v56 = (_QWORD *)(v13 + 2408);
    *(_DWORD *)(v64 + 808) = v217;
    *(_DWORD *)(v64 + 812) = a3;
    *(_QWORD *)(v64 + 816) = v209;
    if (v30)
    {
      v202 = v50;
      v198 = v41;
      v213 = 0;
      v207 = (_QWORD *)(v13 + 2408);
      v63 = *((_QWORD *)&v225 + 1);
      v62 = v51 - 2;
      goto LABEL_31;
    }
    v87 = v60(v52, v52, v32, v211, v41);
    v85 = 0;
    LODWORD(v226) = 0;
    *(_QWORD *)&v225 = v87;
    *((_QWORD *)&v225 + 1) = v87;
    v232 = v226;
    v231 = v225;
LABEL_38:
    v86 = a7;
    goto LABEL_39;
  }
  v202 = v50;
  v56 = (_QWORD *)(v13 + 2408);
  v57 = v51 - 2;
  v58 = v32;
  v198 = v41;
  v59 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v13 + 2408) + 8 * v57 + 24))((1 << v215), (1 << v215));
  LODWORD(v226) = 0;
  *(_QWORD *)&v225 = v59;
  *((_QWORD *)&v225 + 1) = v59;
  v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 2408) + 8 * v57 + 24);
  v61 = *(_QWORD *)(v13 + 2400);
  *(_DWORD *)(v61 + 808) = v217;
  *(_DWORD *)(v61 + 812) = a3;
  *(_QWORD *)(v61 + 816) = v209;
  if (!v30)
  {
    v85 = 0;
    goto LABEL_38;
  }
  v213 = v25;
  v207 = (_QWORD *)(v13 + 2408);
  v33 = v205;
  v32 = v58;
  v52 = (1 << v215);
  v62 = v57;
  v63 = v59;
LABEL_31:
  v65 = v60(v52, v52, v32, v211, v33);
  v66 = v26[2];
  v67 = v26[4];
  v68 = v26[5];
  *(__int128 *)((char *)v26 + 264) = v26[3];
  *(__int128 *)((char *)v26 + 280) = v67;
  *(__int128 *)((char *)v26 + 248) = v66;
  v69 = *v26;
  *(__int128 *)((char *)v26 + 232) = v26[1];
  v70 = v26[6];
  v71 = v26[8];
  v72 = v26[9];
  *(__int128 *)((char *)v26 + 328) = v26[7];
  *(__int128 *)((char *)v26 + 344) = v71;
  *(__int128 *)((char *)v26 + 296) = v68;
  *(__int128 *)((char *)v26 + 312) = v70;
  v73 = v26[11];
  *(__int128 *)((char *)v26 + 376) = v26[10];
  *(__int128 *)((char *)v26 + 392) = v73;
  *(__int128 *)((char *)v26 + 360) = v72;
  *(_QWORD *)&v231 = v65;
  *((_QWORD *)v26 + 51) = *((_QWORD *)v26 + 24);
  *(__int128 *)((char *)v26 + 216) = v69;
  v74 = 8 * (*((_DWORD *)v26 + 52) - *((_DWORD *)v26 + 6));
  *((_QWORD *)v26 + 4) = 0;
  *((_QWORD *)v26 + 1) = 510;
  *((_QWORD *)v26 + 2) = v74;
  *(_QWORD *)(*(_QWORD *)(v13 + 2400) + 872) = v202;
  sub_1B6860B50(v13, v217, a3, v215, 0, 0);
  LODWORD(v232) = ((*((_DWORD *)v26 + 4) + 8 * (*((_DWORD *)v26 + 6) - *((_DWORD *)v26 + 52))) << 8)
                - *((_DWORD *)v26 + 2)
                + 510;
  v75 = v232;
  v77 = *(__int128 *)((char *)v26 + 264);
  v76 = *(__int128 *)((char *)v26 + 280);
  v26[2] = *(__int128 *)((char *)v26 + 248);
  v26[3] = v77;
  v79 = *(__int128 *)((char *)v26 + 328);
  v78 = *(__int128 *)((char *)v26 + 344);
  v80 = *(__int128 *)((char *)v26 + 296);
  v26[6] = *(__int128 *)((char *)v26 + 312);
  v26[7] = v79;
  v26[4] = v76;
  v26[5] = v80;
  v81 = *(__int128 *)((char *)v26 + 392);
  v82 = *(__int128 *)((char *)v26 + 360);
  v26[10] = *(__int128 *)((char *)v26 + 376);
  v26[11] = v81;
  v83 = *(__int128 *)((char *)v26 + 232);
  *((_QWORD *)v26 + 24) = *((_QWORD *)v26 + 51);
  v26[8] = v78;
  v26[9] = v82;
  *v26 = *(__int128 *)((char *)v26 + 216);
  v26[1] = v83;
  v84 = ((v75 * *(unsigned __int16 *)(*(_QWORD *)(v13 + 2408) + 2 * SWORD2(v232) + 8)) >> (8 * (WORD2(v232) == 0)))
      + (unint64_t)v65;
  *((_QWORD *)&v231 + 1) = v84;
  v85 = 1;
  if (v213)
  {
    v86 = a7;
    if (v63 < v84)
    {
      sub_1B688DE74(a5, v217, a3, 1 << v62, 0, 0, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2400) + 8144))(v52, v52, v200, v198, v209, v205);
      v85 = 0;
    }
  }
  else
  {
    v86 = a7;
  }
  v56 = v207;
  v25 = v213;
LABEL_39:
  if (*(_BYTE *)(a1 + 2416))
  {
    v88 = 0;
    v89 = 0;
    goto LABEL_113;
  }
  v90 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2012);
  if (a6)
    v91 = 0;
  else
    v91 = v215;
  if (v215 > v90)
    v92 = v215 - 1;
  else
    v92 = v91;
  if (!a6 || (v88 = 0, v89 = 0, v215 > v90))
  {
    v214 = v25;
    v206 = v85;
    v93 = (v217 - *((_DWORD *)a5 + 1));
    v94 = a3 - *((_DWORD *)a5 + 2);
    v95 = *((_QWORD *)a5 + 17);
    v203 = *(unsigned __int8 *)(v95 + 1);
    v96 = (v93 >> 3) + (v203 >> 2) * (unint64_t)(v94 >> 3);
    v97 = *(unsigned __int8 *)(*(_QWORD *)(v95 + 40) + v96);
    v212 = *(unsigned __int8 *)(*(_QWORD *)(v95 + 48) + v96);
    v98 = a5[1];
    v99 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a5 + 5) + 24))(*((_QWORD *)a5 + 5), v93 + v98 * (v94 >> 1) + *((_QWORD *)a5 + 6));
    v100 = 0;
    v101 = *((_DWORD *)a5 + 1);
    v102 = *((_DWORD *)a5 + 2);
    v103 = v217 - v101;
    v208 = v56;
    if (((v217 - v101) & 0x80000000) == 0)
    {
      v104 = a3 - v102;
      if ((((_DWORD)a3 - v102) & 0x80000000) == 0)
      {
        v100 = 0;
        v105 = *a5;
        if (v103 < v105 && v104 < v105)
        {
          v106 = v99;
          v100 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 96) + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 96), *(_QWORD *)(*((_QWORD *)a5 + 17) + 104)+ v103+ *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (unint64_t)(v104 & 0xFFFFFFFE));
          v99 = v106;
          v101 = *((_DWORD *)a5 + 1);
          v102 = *((_DWORD *)a5 + 2);
        }
      }
    }
    v199 = v100;
    if (v25)
    {
      v107 = 0;
      v108 = (v217 - v101);
      if ((v108 & 0x80000000) == 0)
      {
        v109 = a3 - v102;
        if ((((_DWORD)a3 - v102) & 0x80000000) == 0)
        {
          v107 = 0;
          v110 = *a5;
          if (v108 < v110 && v109 < v110)
          {
            v111 = v99;
            v112 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 9) + 24))(*((_QWORD *)a5 + 9), v108 + a5[1] * (unint64_t)(v109 >> 1) + *((_QWORD *)a5 + 10));
            v99 = v111;
            v107 = v112;
            v101 = *((_DWORD *)a5 + 1);
            v102 = *((_DWORD *)a5 + 2);
          }
        }
      }
    }
    else
    {
      v107 = v100;
    }
    v113 = 0;
    v216 = 1 << v92;
    v114 = v217 - v101;
    if ((v114 & 0x80000000) != 0)
      goto LABEL_66;
    v115 = a3 - v102;
    v116 = 0;
    if ((v115 & 0x80000000) != 0)
      goto LABEL_67;
    v113 = 0;
    v117 = *a5;
    if (v114 >= v117)
    {
LABEL_66:
      v116 = 0;
    }
    else
    {
      v116 = 0;
      if (v115 < v117)
      {
        v118 = *((_QWORD *)a5 + 17);
        v119 = (v114 >> 1) + *(unsigned __int8 *)(v118 + 1) * (unint64_t)(v115 >> 1);
        v113 = *(_QWORD *)(v118 + 64) + 2 * v119;
        v116 = *(_QWORD *)(v118 + 72) + 2 * v119;
      }
    }
LABEL_67:
    v196 = v107;
    v197 = v116;
    v210 = v92;
    v201 = v98;
    if (v25)
    {
      v120 = *(_QWORD *)(a1 + 2408);
      v121 = v98;
      v122 = v99;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int128 *, __int128 *))(v120 + 376))(v99, v121, v107, v121, v216, v216, &v227, &v229);
      v99 = v122;
      v88 = 0;
      v89 = 0;
      v123 = *(unsigned __int16 *)(v120 + 18);
      *(_QWORD *)&v227 = (unint64_t)(v227 * v123) >> 8;
      *(_QWORD *)&v229 = (unint64_t)(v229 * v123) >> 8;
      *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 824) = v203;
      v124 = v203;
      LODWORD(v228) = 0;
      LODWORD(v230) = 0;
      if (!(v97 | v212))
        goto LABEL_102;
    }
    else
    {
      v124 = v203;
      *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 824) = v203;
    }
    v125 = *v208;
    v204 = 2 * v124;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*v208 + 376))(v99, v201, v199);
    v126 = *(unsigned __int16 *)(v125 + 18);
    v127 = (unint64_t)(v222 * v126) >> 8;
    v128 = (unint64_t)(v223 * v126) >> 8;
    v224 = v128;
    if (v97)
    {
      v129 = v26[2];
      v130 = v26[4];
      v131 = v26[5];
      *(__int128 *)((char *)v26 + 264) = v26[3];
      *(__int128 *)((char *)v26 + 280) = v130;
      *(__int128 *)((char *)v26 + 248) = v129;
      v132 = *v26;
      *(__int128 *)((char *)v26 + 232) = v26[1];
      v133 = v26[6];
      v134 = v26[8];
      v135 = v26[9];
      *(__int128 *)((char *)v26 + 328) = v26[7];
      *(__int128 *)((char *)v26 + 344) = v134;
      *(__int128 *)((char *)v26 + 296) = v131;
      *(__int128 *)((char *)v26 + 312) = v133;
      v136 = v26[11];
      *(__int128 *)((char *)v26 + 376) = v26[10];
      *(__int128 *)((char *)v26 + 392) = v136;
      *(__int128 *)((char *)v26 + 360) = v135;
      *(_QWORD *)&v233 = (unint64_t)(v222 * v126) >> 8;
      *((_QWORD *)v26 + 51) = *((_QWORD *)v26 + 24);
      *(__int128 *)((char *)v26 + 216) = v132;
      v137 = 8 * (*((_DWORD *)v26 + 52) - *((_DWORD *)v26 + 6));
      *((_QWORD *)v26 + 4) = 0;
      *((_QWORD *)v26 + 1) = 510;
      *((_QWORD *)v26 + 2) = v137;
      *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 880) = v113;
      sub_1B6860B50(a1, v217, a3, v210, 0, 1);
      LODWORD(v234) = ((*((_DWORD *)v26 + 4) + 8 * (*((_DWORD *)v26 + 6) - *((_DWORD *)v26 + 52))) << 8)
                    - *((_DWORD *)v26 + 2)
                    + 510;
      v138 = v234;
      v140 = *(__int128 *)((char *)v26 + 264);
      v139 = *(__int128 *)((char *)v26 + 280);
      v26[2] = *(__int128 *)((char *)v26 + 248);
      v26[3] = v140;
      v142 = *(__int128 *)((char *)v26 + 328);
      v141 = *(__int128 *)((char *)v26 + 344);
      v143 = *(__int128 *)((char *)v26 + 296);
      v26[6] = *(__int128 *)((char *)v26 + 312);
      v26[7] = v142;
      v26[4] = v139;
      v26[5] = v143;
      v144 = *(__int128 *)((char *)v26 + 392);
      v145 = *(__int128 *)((char *)v26 + 360);
      v26[10] = *(__int128 *)((char *)v26 + 376);
      v26[11] = v144;
      v146 = *(__int128 *)((char *)v26 + 232);
      *((_QWORD *)v26 + 24) = *((_QWORD *)v26 + 51);
      v26[8] = v141;
      v26[9] = v145;
      *v26 = *(__int128 *)((char *)v26 + 216);
      v26[1] = v146;
      v147 = *(_QWORD *)(a1 + 2408) + 8;
      v148 = v127
           + ((v138 * *(unsigned __int16 *)(v147 + 2 * SWORD2(v234))) >> (8 * (WORD2(v234) == 0)));
      *((_QWORD *)&v233 + 1) = v148;
      v149 = v227
           + ((v228 * *(unsigned __int16 *)(v147 + 2 * SWORD2(v228))) >> (8 * (WORD2(v228) == 0)));
      *((_QWORD *)&v227 + 1) = v149;
      if (v214)
        v150 = v149 >= v148;
      else
        v150 = 1;
      v151 = !v150;
      if (v151 == 1)
      {
        sub_1B688DE74(a5, v217, a3, 1 << (v210 - 2), 1, 0, 0);
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2400) + 8152))((2 << v210), v216, v201, v196, v204, v199);
      }
      v88 = v151 ^ 1;
      v86 = a7;
      if (v212)
      {
        v128 = v224;
        goto LABEL_88;
      }
      if (v214)
      {
LABEL_101:
        v89 = 0;
        goto LABEL_102;
      }
      v128 = v224;
    }
    else
    {
      if (v214)
      {
        v88 = 0;
        v89 = 0;
        v86 = a7;
        if (!v212)
          goto LABEL_102;
        goto LABEL_88;
      }
      v88 = 0;
      *(_QWORD *)&v227 = (unint64_t)(v222 * v126) >> 8;
      LODWORD(v228) = 0;
      v233 = v227;
      v234 = v228;
      v86 = a7;
      if (v212)
      {
LABEL_88:
        v152 = v26[2];
        v153 = v26[4];
        v154 = v26[5];
        *(__int128 *)((char *)v26 + 264) = v26[3];
        *(__int128 *)((char *)v26 + 280) = v153;
        *(__int128 *)((char *)v26 + 248) = v152;
        v155 = *v26;
        *(__int128 *)((char *)v26 + 232) = v26[1];
        v156 = v26[6];
        v157 = v26[8];
        v158 = v26[9];
        *(__int128 *)((char *)v26 + 328) = v26[7];
        *(__int128 *)((char *)v26 + 344) = v157;
        *(__int128 *)((char *)v26 + 296) = v154;
        *(__int128 *)((char *)v26 + 312) = v156;
        v159 = v26[11];
        *(__int128 *)((char *)v26 + 376) = v26[10];
        *(__int128 *)((char *)v26 + 392) = v159;
        *(__int128 *)((char *)v26 + 360) = v158;
        *(_QWORD *)&v235 = v128;
        *((_QWORD *)v26 + 51) = *((_QWORD *)v26 + 24);
        *(__int128 *)((char *)v26 + 216) = v155;
        v160 = 8 * (*((_DWORD *)v26 + 52) - *((_DWORD *)v26 + 6));
        *((_QWORD *)v26 + 4) = 0;
        *((_QWORD *)v26 + 1) = 510;
        *((_QWORD *)v26 + 2) = v160;
        *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 888) = v197;
        v161 = v128;
        sub_1B6860B50(a1, v217, a3, v210, 0, 2);
        v162 = ((*((_DWORD *)v26 + 4) + 8 * (*((_DWORD *)v26 + 6) - *((_DWORD *)v26 + 52))) << 8)
             - *((_DWORD *)v26 + 2)
             + 510;
        LODWORD(v236[0]) = v162;
        v164 = *(__int128 *)((char *)v26 + 264);
        v163 = *(__int128 *)((char *)v26 + 280);
        v26[2] = *(__int128 *)((char *)v26 + 248);
        v26[3] = v164;
        v166 = *(__int128 *)((char *)v26 + 328);
        v165 = *(__int128 *)((char *)v26 + 344);
        v167 = *(__int128 *)((char *)v26 + 296);
        v26[6] = *(__int128 *)((char *)v26 + 312);
        v26[7] = v166;
        v26[4] = v163;
        v26[5] = v167;
        v168 = *(__int128 *)((char *)v26 + 392);
        v169 = *(__int128 *)((char *)v26 + 360);
        v26[10] = *(__int128 *)((char *)v26 + 376);
        v26[11] = v168;
        v170 = *(__int128 *)((char *)v26 + 232);
        *((_QWORD *)v26 + 24) = *((_QWORD *)v26 + 51);
        v26[8] = v165;
        v26[9] = v169;
        *v26 = *(__int128 *)((char *)v26 + 216);
        v26[1] = v170;
        v171 = *(_QWORD *)(a1 + 2408) + 8;
        v172 = *(unsigned __int16 *)(v171 + 2 * SWORD2(v236[0]));
        v173 = v229
             + ((v230 * *(unsigned __int16 *)(v171 + 2 * SWORD2(v230))) >> (8 * (WORD2(v230) == 0)));
        *((_QWORD *)&v229 + 1) = v173;
        v89 = 1;
        if (v214 && v173 < v161 + ((v162 * v172) >> (8 * (WORD2(v236[0]) == 0))))
        {
          sub_1B688DE74(a5, v217, a3, 1 << (v210 - 2), 2, 0, 0);
          v174 = 0;
          v175 = *(_QWORD *)(a1 + 2400);
          v176 = (v217 + 1 - *((_DWORD *)a5 + 1));
          v177 = a3 - *((_DWORD *)a5 + 2);
          if ((v176 & 0x80000000) == 0 && (v177 & 0x80000000) == 0)
          {
            v174 = 0;
            v178 = *a5;
            if (v176 < v178 && v177 < v178)
            {
              v174 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 9) + 24))(*((_QWORD *)a5 + 9), v176 + a5[1] * (unint64_t)(v177 >> 1) + *((_QWORD *)a5 + 10));
              LODWORD(v176) = v217 + 1 - *((_DWORD *)a5 + 1);
              v177 = a3 - *((_DWORD *)a5 + 2);
            }
          }
          v179 = 0;
          if ((v176 & 0x80000000) == 0 && (v177 & 0x80000000) == 0)
          {
            v179 = 0;
            v180 = *a5;
            if (v176 < v180 && v177 < v180)
              v179 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 96)
                                                                         + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 96), *(_QWORD *)(*((_QWORD *)a5 + 17) + 104)+ v176+ 2 * *(unsigned __int8 *)(*((_QWORD *)a5 + 17) + 1) * (unint64_t)(v177 >> 1));
          }
          (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v175 + 8152))((2 << v210), v216, v201, v174, v204, v179);
          goto LABEL_101;
        }
LABEL_102:
        if (v86)
        {
LABEL_103:
          v181 = &v233;
          if (!v88)
            v181 = &v227;
          v182 = *(_QWORD *)v86 + *(_QWORD *)v181;
          v183 = &v234;
          if (!v88)
            v183 = &v228;
          v184 = *(_DWORD *)(v86 + 16) + *(_DWORD *)v183;
          v185 = &v235;
          if (!v89)
            v185 = &v229;
          *(_QWORD *)v86 = *(_QWORD *)v185 + v182;
          v186 = v236;
          if (!v89)
            v186 = &v230;
          *(_DWORD *)(v86 + 16) = *(_DWORD *)v186 + v184;
        }
LABEL_112:
        v56 = v208;
        v85 = v206;
        v25 = v214;
        goto LABEL_113;
      }
    }
    v89 = 0;
    *(_QWORD *)&v229 = v128;
    LODWORD(v230) = 0;
    v235 = v229;
    v236[0] = v230;
    if (v86)
      goto LABEL_103;
    goto LABEL_112;
  }
LABEL_113:
  if (v86)
  {
    if (v85)
      v187 = &v231;
    else
      v187 = &v225;
    v188 = *(_QWORD *)v86 + *(_QWORD *)v187;
    *(_QWORD *)v86 = v188;
    v189 = &v226;
    if (v85)
      v189 = &v232;
    v190 = *(_DWORD *)(v86 + 16) + *(_DWORD *)v189;
    *(_DWORD *)(v86 + 16) = v190;
    *(_QWORD *)(v86 + 8) = v188
                         + ((v190 * *(unsigned __int16 *)(*v56 + 2 * *(__int16 *)(v86 + 20) + 8)) >> (8 * (*(_WORD *)(v86 + 20) == 0)));
  }
  if (a8 && v25)
  {
    v191 = *(_DWORD *)(a8 + 16) + v226;
    v192 = v228;
    v193 = v229 + v227 + *(_QWORD *)a8 + v225;
    *(_QWORD *)a8 = v193;
    v194 = v230 + v192 + v191;
    *(_DWORD *)(a8 + 16) = v194;
    *(_QWORD *)(a8 + 8) = v193
                        + ((v194 * *(unsigned __int16 *)(*v56 + 2 * *(__int16 *)(a8 + 20) + 8)) >> (8 * (*(_WORD *)(a8 + 20) == 0)));
  }
  return (v220 | v85 | v88 | v89) & 1;
}

uint64_t sub_1B686E6C0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7, unsigned __int8 *a8)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v29;
  int v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 *v39;
  __int16 *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  void (**v53)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD *);
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unsigned __int8 v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  _BOOL4 v82;
  int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v128;
  int v129;
  _BOOL4 v130;
  uint64_t v131;
  _QWORD *v132;
  int v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned __int8 *v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _BOOL4 v159;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  __int16 *v165;
  __int16 *v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  int v171;
  int v172;
  unsigned __int8 *v173;
  int v174;
  uint64_t v175;
  unsigned __int8 *v176;
  unsigned int (*v177)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v178)(_QWORD, uint64_t, uint64_t, _BYTE *, _BYTE *);
  uint64_t v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  __int16 *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t (*v194)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE __c[11];
  uint64_t v206;
  unint64_t v207;
  int v208;
  _QWORD v209[34];

  v10 = a6;
  v12 = a3;
  v13 = a2;
  v209[32] = *MEMORY[0x1E0C80C00];
  v15 = *(_DWORD *)(a1 + 2048) - a4;
  v16 = *(_QWORD *)(a1 + 2376);
  v17 = *(_QWORD *)(v16 + 1360);
  if (*(_DWORD *)(v17 + 276) <= (int)a2 || *(_DWORD *)(v17 + 280) <= (int)a3)
  {
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v18 = (__int16 *)(*(_QWORD *)(v17 + 512) + 2 * (*(_QWORD *)(v17 + 488) * ((uint64_t)(int)a3 >> 3) + ((int)a2 >> 3)));
    v19 = *(_QWORD *)(v17 + 576) + 16 * (*(_QWORD *)(v17 + 552) * ((uint64_t)(int)a3 >> 2) + ((int)a2 >> 2));
  }
  v20 = v15 - 1;
  v174 = *(_DWORD *)(a1 + 2048) - a4;
  if ((((unsigned __int16)*v18 >> 2) & 3) > a4)
  {
    v22 = 1;
    v23 = ((1 << v20) + a2);
    v201 = (1 << v20) + a3;
    v24 = (a4 + 1);
    v193 = (a6 & 0xF0) != 0;
    if ((a6 & 0xF0) != 0)
      v25 = 15;
    else
      v25 = 0;
    v26 = v25 | a6 & 0x1FF0;
    v29 = (a6 & 0x1E00) != 0;
    if ((a6 & 0x1E00) != 0)
      v30 = 122880;
    else
      v30 = 0;
    v197 = sub_1B686E6C0(a1, a2, a3, (a4 + 1), 0, v26 | v30, a6, a8);
    v31 = sub_1B686E6C0(a1, v23, a3, v24, 1, v10 & 0x1FE00 | (v29 << 8) | 0xF0, v10, a8);
    v32 = sub_1B686E6C0(a1, v13, v201, v24, 2, v10 | (v193 << 8) | 0x1FE00u, v10, a8);
    v33 = a1;
    v34 = v32;
    v35 = sub_1B686E6C0(v33, v23, v201, v24, 3, 8176, v10, a8);
    if ((v197 & 1) == 0 && (v31 & 1) == 0 && (v34 & 1) == 0 && (v35 & 1) == 0)
    {
      if ((*v18 & 0xC) != 0
        && (v36 = *(_QWORD *)(a1 + 2384), *(_BYTE *)(v36 + 244))
        && v174 <= *(unsigned __int8 *)(v36 + 2011)
        && (*v18 = *v18 & 0xFFF3 | (*v18 + 12) & 0xC, 1 << v174 >= 8))
      {
        v37 = 0;
        v38 = 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1360) + 488);
        v39 = v18;
        do
        {
          v40 = v39;
          v41 = (1 << v174) >> 3;
          do
          {
            *v40++ = *v18;
            --v41;
          }
          while (v41);
          v22 = 0;
          ++v37;
          v39 = (__int16 *)((char *)v39 + v38);
        }
        while (v37 != (1 << v174) >> 3);
      }
      else
      {
        return 0;
      }
    }
    return v22;
  }
  v173 = (unsigned __int8 *)v19;
  v169 = v15 - 1;
  *(_WORD *)&__c[1] = 0;
  __c[0] = 0;
  v42 = *(_QWORD **)(*(_QWORD *)(v16 + 79216) + 592);
  v191 = v42[14];
  v43 = *(_QWORD *)(v17 + 112);
  v167 = **((unsigned __int8 **)a8 + 17);
  v189 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*v42 + 16))(v42, a2, a3, 0);
  v202 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 2376) + 1360)
                                                                     + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1360), v13, v12, 0);
  v44 = 0;
  v45 = (v13 - *((_DWORD *)a8 + 1));
  if ((v45 & 0x80000000) != 0)
  {
    v47 = v174;
    v48 = v173;
  }
  else
  {
    v46 = v12 - *((_DWORD *)a8 + 2);
    v47 = v174;
    v48 = v173;
    if ((v46 & 0x80000000) == 0)
    {
      v44 = 0;
      v49 = *a8;
      if (v45 < v49 && v46 < v49)
        v44 = *(_QWORD *)(*((_QWORD *)a8 + 17) + 56)
            + 2 * (v45 + **((unsigned __int8 **)a8 + 17) * (unint64_t)v46);
    }
  }
  v168 = 1 << (v47 - 2);
  v186 = v13;
  v185 = v12;
  if (v48[10] != 1)
    goto LABEL_155;
  v187 = v43;
  v188 = *(int *)(a1 + 2048) - (uint64_t)a4;
  v50 = *(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1360);
  v163 = a7;
  v164 = v10;
  v162 = v44;
  if (*(_DWORD *)(v50 + 276) <= (int)v13 || *(_DWORD *)(v50 + 280) <= (int)v12)
  {
    v184 = 0;
    v10 = 0;
  }
  else
  {
    v184 = (__int16 *)(*(_QWORD *)(v50 + 512) + 2
                                              * (*(_QWORD *)(v50 + 488) * ((uint64_t)(int)v12 >> 3) + ((int)v13 >> 3)));
    v10 = *(_QWORD *)(v50 + 576) + 16 * (*(_QWORD *)(v50 + 552) * ((uint64_t)(int)v12 >> 2) + ((int)v13 >> 2));
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD, BOOL, BOOL))(v50 + 1072))(v13, v12, (2 << v188), (v164 & 0xF) != 0, (v164 & 0x1E000) != 0);
  v51 = v12;
  v52 = *(_QWORD *)(a1 + 2392);
  if (*(_DWORD *)(v52 + 592) == 3)
  {
    v53 = (void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(a1 + 2376) + 1424);
    v54 = *(unsigned __int8 *)v10;
    (*v53)(v188, v164, v43, v202, v209);
    LODWORD(v10) = v164;
    if ((_DWORD)v54 != 1)
    {
      v55 = 10 - v54;
      if (v54 >= 0xA)
        v55 = v54 - 10;
      v56 = 26 - v54;
      if (v54 >= 0x1A)
        v56 = v54 - 26;
      if (v55 >= v56)
        v55 = v56;
      if (v55 > byte_1B6924F5D[v188])
        ((void (*)(_QWORD *, _QWORD *))v53[(int)v188 - 1])(v209, v209);
    }
    sub_1B67D57F4((uint64_t)v53, v54, v188, (uint64_t)v209, v43, v202);
    v12 = v185;
    v44 = v162;
    v47 = v174;
LABEL_154:
    v48 = v173;
LABEL_155:
    v110 = a1;
    v122 = *(_QWORD *)(a1 + 2400);
    *(_DWORD *)(v122 + 808) = v13;
    *(_DWORD *)(v122 + 812) = v12;
    *(_QWORD *)(v122 + 864) = v48;
    v161 = v43;
    v123 = v43;
    v119 = v47;
    sub_1B686350C(a1, v13, v12, v18, v189, v191, v202, v123, v202, v161, v44, v167, v47, &__c[2], 0);
    goto LABEL_156;
  }
  v57 = sub_1B6851A28(*(_QWORD *)(a1 + 2400), v13, v51, v188);
  v206 = 0;
  v58 = *(char *)(v52 + 587);
  if (v58 >= 9)
    v58 = 9;
  if (v58 <= -2)
    LOBYTE(v58) = -2;
  if (((*(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2013) - 1) & v51) != 0)
  {
    if ((((v51 - 1) | v13) & 0x80000000) != 0
      || (v59 = *(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1360), *(_DWORD *)(v59 + 276) <= (int)v13)
      || *(_DWORD *)(v59 + 280) < v51
      || (v60 = *(_QWORD *)(v59 + 576)) == 0
      || (v61 = (char *)(v60 + 16 * (*(_QWORD *)(v59 + 552) * ((uint64_t)(v51 - 1) >> 2) + ((int)v13 >> 2))), v61[10] != 1))
    {
      v61 = &byte_1B6924AEC;
    }
  }
  else
  {
    v61 = &byte_1B6924AEC;
  }
  if ((((_DWORD)v13 - 1) | v51) < 0
    || (v62 = *(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1360), *(_DWORD *)(v62 + 276) < (int)v13)
    || *(_DWORD *)(v62 + 280) <= v51
    || (v63 = *(_QWORD *)(v62 + 576)) == 0
    || (v64 = (char *)(v63 + 16 * (*(_QWORD *)(v62 + 552) * ((uint64_t)v51 >> 2) + (((int)v13 - 1) >> 2))), v64[10] != 1))
  {
    v64 = &byte_1B6924AEC;
  }
  v65 = v58 + 2;
  v66 = *v64;
  v67 = *v61;
  if (v66 == v67)
  {
    v68 = v202;
    if (v66 < 2)
    {
      v207 = 0x100000000;
      v69 = 26;
    }
    else
    {
      LODWORD(v207) = v66;
      HIDWORD(v207) = (((_BYTE)v66 + 29) & 0x1F) + 2;
      v69 = (((_BYTE)v66 - 1) & 0x1F) + 2;
    }
  }
  else
  {
    v207 = __PAIR64__(v67, v66);
    v68 = v202;
    if (v66 && v67)
    {
      v69 = 0;
    }
    else if (v67 + v66 > 1)
    {
      v69 = 1;
    }
    else
    {
      v69 = 26;
    }
  }
  v70 = v65;
  v208 = v69;
  v71 = a1;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 2376) + 1424))(v188, v164, v187, v68, *((_QWORD *)a8 + 19));
  if ((v188 - 3) <= 2)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 2376) + 8 * (v188 - 3) + 1440))(*((_QWORD *)a8 + 19), *((_QWORD *)a8 + 20));
  v72 = *(_QWORD *)(a1 + 2408);
  v73 = (int)v188 - 2;
  if (v57 == 2)
    v74 = 2;
  else
    v74 = v70;
  v75 = v68;
  v175 = (int)v188 - 2;
  v198 = v74;
  v165 = v18;
  if ((_DWORD)v74)
  {
    v76 = 0;
    v182 = 0;
    v171 = 0;
    v194 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 8 * v73 + 144);
    v77 = -1;
    v78 = &byte_1B6924EFA[11 * v57];
    v79 = -1;
    v80 = v188;
    do
    {
      v81 = v78[v76];
      if (v81 == 1)
      {
        v82 = 0;
      }
      else
      {
        v83 = 10 - v81;
        if (v81 >= 10)
          v83 = v81 - 10;
        v84 = 26 - v81;
        if (v81 >= 26)
          v84 = v81 - 26;
        if (v83 >= v84)
          v83 = v84;
        v82 = v83 > byte_1B6924F5D[v80];
      }
      sub_1B67D57F4(*(_QWORD *)(a1 + 2376) + 1424, v78[v76], v80, *(_QWORD *)&a8[8 * v82 + 152], v187, v75);
      v85 = v194((1 << v188), (1 << v188), v189, v191, v75, v187);
      v86 = 0;
      while (*((_DWORD *)&v207 + v86) != v81)
      {
        if (++v86 == 3)
        {
          v87 = 6;
          goto LABEL_99;
        }
      }
      if ((_DWORD)v86)
        v87 = 3;
      else
        v87 = 2;
LABEL_99:
      v72 = *(_QWORD *)(a1 + 2408);
      v88 = v85 + v87 * *(unsigned __int16 *)(v72 + 14);
      v80 = v188;
      if (v88 >= v77)
      {
        v89 = v79;
        v79 = v77;
      }
      else if (v88 >= v79)
      {
        v182 = v81;
        v89 = v79;
        v79 = v88;
      }
      else
      {
        v182 = v171;
        v171 = v81;
        v89 = v85 + v87 * *(unsigned __int16 *)(v72 + 14);
      }
      ++v76;
      v77 = v79;
      v79 = v89;
    }
    while (v76 != v198);
    HIDWORD(v206) = v182;
    v71 = a1;
    v73 = (int)v188 - 2;
    LODWORD(v74) = v171;
  }
  else
  {
    LODWORD(v80) = v188;
  }
  v172 = v74;
  LODWORD(v206) = v74;
  v90 = (unsigned __int8 *)*((_QWORD *)a8 + 17);
  v181 = *v90;
  v183 = 0;
  v91 = (v186 - *((_DWORD *)a8 + 1));
  if ((v91 & 0x80000000) == 0)
  {
    v92 = v185 - *((_DWORD *)a8 + 2);
    if ((v92 & 0x80000000) == 0)
    {
      v183 = 0;
      v93 = *a8;
      if (v91 < v93 && v92 < v93)
        v183 = *((_QWORD *)v90 + 7) + 2 * (v91 + *v90 * (unint64_t)v92);
    }
  }
  LODWORD(v94) = 0;
  v95 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v71 + 2376) + 1368) + 2001) + (uint64_t)(*v184 >> 9);
  *(_QWORD *)&__c[3] = 0;
  v177 = *(unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 8 * v73 + 24);
  v178 = (void (**)(_QWORD, uint64_t, uint64_t, _BYTE *, _BYTE *))(v71 + 8 * (v80 > 2) + 2224);
  v179 = v95;
  v176 = &byte_1B6924AF8[v95 + 70];
  v96 = -1;
  v97 = 1;
  v180 = 1 << v188;
  do
  {
    v98 = *((unsigned int *)&v206 + v97);
    v199 = v94;
    v195 = v97;
    if ((_DWORD)v98 == 1)
    {
      v99 = a1;
      v100 = v187;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2376) + 8 * v175 + 1584))(1, *((_QWORD *)a8 + 19), v187, v75);
      v101 = v75;
      v102 = v188;
    }
    else
    {
      v103 = 10 - v98;
      if ((int)v98 >= 10)
        v103 = v98 - 10;
      v104 = 26 - v98;
      if ((int)v98 >= 26)
        v104 = v98 - 26;
      if (v103 >= v104)
        v103 = v104;
      v101 = v75;
      v100 = v187;
      v102 = v188;
      v99 = a1;
      sub_1B67D57F4(*(_QWORD *)(a1 + 2376) + 1424, v98, v188, *(_QWORD *)&a8[8 * (v103 > byte_1B6924F5D[v188]) + 152], v187, v101);
    }
    *(_BYTE *)v10 = v98;
    v105 = *(_QWORD *)(v99 + 2400);
    *(_DWORD *)(v105 + 808) = v186;
    *(_DWORD *)(v105 + 812) = v185;
    *(_QWORD *)(v105 + 864) = v10;
    sub_1B686350C(v99, v186, v185, v184, v189, v191, v202, v100, v101, v100, v183, v181, v102, &__c[2], 0);
    v75 = v202;
    v106 = v177(v180, v180, v189, v191, v202, v100);
    (*v178)(v180, v181, v183, &__c[7], &__c[3]);
    v107 = 0;
    while (*((_DWORD *)&v207 + v107) != (_DWORD)v98)
    {
      if (++v107 == 3)
      {
        v108 = 6;
        goto LABEL_129;
      }
    }
    if ((_DWORD)v107)
      v108 = 3;
    else
      v108 = 2;
LABEL_129:
    if ((unint64_t)(((*(_DWORD *)&__c[7] * byte_1B6924AF8[v179] + *(_DWORD *)&__c[3] * *v176 + v108)
                           * *(unsigned __int16 *)(*(_QWORD *)(a1 + 2408) + 8)) >> 8)
       + v106 >= v96)
    {
      v94 = v199;
    }
    else
    {
      v96 = (((*(_DWORD *)&__c[7] * byte_1B6924AF8[v179] + *(_DWORD *)&__c[3] * *v176 + v108)
            * *(unsigned __int16 *)(*(_QWORD *)(a1 + 2408) + 8)) >> 8)
          + v106;
      v94 = v98;
    }
    v97 = v195 - 1;
  }
  while (v195);
  *(_BYTE *)v10 = v94;
  v109 = v94;
  v110 = a1;
  v13 = v186;
  v12 = v185;
  a7 = v163;
  v43 = v187;
  if (v180 >= 4)
  {
    v111 = 0;
    LODWORD(v112) = v180 >> 2;
    if (v180 >> 2 <= 1)
      v112 = 1;
    else
      v112 = v112;
    v113 = 16 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1360) + 552);
    v114 = (_QWORD *)v10;
    do
    {
      v115 = v114;
      v116 = v112;
      do
      {
        v117 = *(_QWORD *)v10;
        *(_QWORD *)((char *)v115 + 6) = *(_QWORD *)(v10 + 6);
        *v115 = v117;
        v115 += 2;
        --v116;
      }
      while (v116);
      ++v111;
      v114 = (_QWORD *)((char *)v114 + v113);
    }
    while (v111 != v180 >> 2);
    v109 = *(_BYTE *)v10;
  }
  if (v172 != v109)
  {
    LODWORD(v10) = v164;
    if ((_DWORD)v94 == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2376) + 8 * v175 + 1584))(1, *((_QWORD *)a8 + 19), v187, v202);
    }
    else
    {
      v120 = 10 - v94;
      if ((int)v94 >= 10)
        v120 = v94 - 10;
      v121 = 26 - v94;
      if ((int)v94 >= 26)
        v121 = v94 - 26;
      if (v120 >= v121)
        v120 = v121;
      sub_1B67D57F4(*(_QWORD *)(a1 + 2376) + 1424, v94, v188, *(_QWORD *)&a8[8 * (v120 > byte_1B6924F5D[v188]) + 152], v187, v202);
    }
    v18 = v165;
    v44 = v162;
    v47 = v174;
    goto LABEL_154;
  }
  v118 = *(_QWORD *)(a1 + 2400);
  *(_DWORD *)(v118 + 808) = v186;
  *(_DWORD *)(v118 + 812) = v185;
  *(_QWORD *)(v118 + 864) = v173;
  v18 = v165;
  LODWORD(v10) = v164;
  v119 = v174;
LABEL_156:
  v124 = __c[2];
  sub_1B688DE74(a8, v13, v12, v168, 0, __c[2], 0);
  v125 = *(unsigned __int8 *)(*(_QWORD *)(v110 + 2384) + 2012);
  if (v119 <= v125)
    v126 = a7;
  else
    v126 = v10;
  if (v119 <= v125 && a5 == 0)
    v128 = v119;
  else
    v128 = v169;
  if (a5 && v119 <= v125)
  {
    v129 = 0;
    v130 = 1;
  }
  else
  {
    v190 = v126;
    v166 = v18;
    v131 = *(_QWORD *)(v110 + 2376);
    v132 = *(_QWORD **)(*(_QWORD *)(v131 + 79216) + 592);
    v133 = v12;
    v134 = *(_QWORD *)(*(_QWORD *)(v131 + 1360) + 120);
    v196 = *(unsigned __int8 *)(*((_QWORD *)a8 + 17) + 1);
    v200 = v132[15];
    v135 = (_QWORD *)v110;
    v136 = (v186 >> 1);
    v192 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v132 + 16))(v132, v136, ((int)v12 >> 1), 1);
    v137 = v135;
    v203 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v135[297] + 1360) + 16))(*(_QWORD *)(v135[297] + 1360), v136, ((int)v12 >> 1), 1);
    v138 = 0;
    v139 = v186 - *((_DWORD *)a8 + 1);
    if ((v139 & 0x80000000) != 0)
    {
      v141 = 0;
      v142 = v173;
    }
    else
    {
      v140 = v12 - *((_DWORD *)a8 + 2);
      v141 = 0;
      v142 = v173;
      if ((v140 & 0x80000000) == 0)
      {
        v138 = 0;
        v143 = *a8;
        v141 = 0;
        if (v139 < v143 && v140 < v143)
        {
          v144 = *((_QWORD *)a8 + 17);
          v145 = (v139 >> 1) + *(unsigned __int8 *)(v144 + 1) * (unint64_t)(v140 >> 1);
          v138 = *(_QWORD *)(v144 + 64) + 2 * v145;
          v141 = *(_QWORD *)(v144 + 72) + 2 * v145;
        }
      }
    }
    if (v142[10] == 1)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, BOOL, BOOL))(*(_QWORD *)(v137[297] + 1360) + 1080))(v136, (v133 >> 1), (2 << v128), (v190 & 0xF) != 0, (v190 & 0x1E000) != 0);
      v146 = v173[1];
      if ((_DWORD)v146 == *v173)
      {
        v173[1] = 35;
        v147 = 1 << v128;
        if (1 << v128 >= 4)
        {
          v148 = 0;
          v149 = v147 >> 2;
          LODWORD(v150) = v147 >> 2;
          if ((int)v150 <= 1)
            v150 = 1;
          else
            v150 = v150;
          v151 = 16 * *(_QWORD *)(*(_QWORD *)(v137[297] + 1360) + 552);
          v152 = v173;
          do
          {
            v153 = v152;
            v154 = v150;
            do
            {
              v155 = *(_QWORD *)v173;
              *(_QWORD *)((char *)v153 + 6) = *(_QWORD *)(v173 + 6);
              *v153 = v155;
              v153 += 2;
              --v154;
            }
            while (v154);
            ++v148;
            v152 = (_QWORD *)((char *)v152 + v151);
          }
          while (v148 != v149);
        }
      }
      v156 = v137[297];
      v157 = v156 + 1424;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD *))(v156 + 1432))(v128, v190, v134 >> 1, v203, v209);
      v137 = (_QWORD *)a1;
      sub_1B67D5868(v157, v146, v128, (uint64_t)v209, v134, v203);
      v142 = v173;
    }
    v158 = v137[300];
    *(_DWORD *)(v158 + 808) = v186;
    *(_DWORD *)(v158 + 812) = v185;
    *(_QWORD *)(v158 + 864) = v142;
    sub_1B6867058(v137, v186, v185, v128, v166, v192, v200, v203, v134, v203, v134, v138, v141, v196, &__c[1], __c, 0, 0);
    v130 = __c[1] == 0;
    sub_1B688DE74(a8, v186, v185, 1 << (v128 - 2), 1, __c[1], 0);
    v129 = __c[0];
    sub_1B688DE74(a8, v186, v185, 1 << (v128 - 2), 2, __c[0], 0);
  }
  v159 = v129 != 0;
  if (!v130)
    v159 = 1;
  return v124 || v159;
}

BOOL sub_1B686F790(uint64_t a1, int a2, uint64_t a3, int a4, unsigned __int8 *a5, int a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, unsigned __int8 a11)
{
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int16 *v27;
  __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 *v33;
  int v34;
  __n128 v35;
  char *v36;
  char *v37;
  int v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned __int8 *v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  int v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned __int8 *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  __int128 *v117;
  uint64_t *v118;
  char *v119;
  int v120;
  unsigned int v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unsigned __int8 *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned __int8 *v150;
  unint64_t v151;
  size_t v152;
  char *v153;
  int v154;
  int v155;
  int v156;
  BOOL v157;
  char v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  int v169;
  int v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  char *v177;
  unsigned int v178;
  unsigned int v179;
  char *v180;
  unsigned int v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unsigned __int8 *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  unsigned int v192;
  unint64_t v193;
  unint64_t v194;
  int v195;
  unsigned __int8 v196;
  char v197;
  int v198;
  int v199;
  char v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  unint64_t v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  uint64_t v254;
  unint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  int v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  int v274;
  int v275;
  unsigned __int8 *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  char *v281;
  __int128 *v282;
  uint64_t *v283;
  char *v284;
  _BOOL4 v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  unint64_t v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unint64_t v301;
  unsigned int v302;
  int v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  uint64_t v315;
  unint64_t v316;
  char *v317;
  uint64_t v318;
  __int128 *v319;
  uint64_t *v320;
  char *v321;
  unint64_t v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  uint64_t v334;
  unint64_t v335;
  char *v336;
  uint64_t v337;
  unint64_t v338;
  unsigned int v339;
  int v341;
  int v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  uint64_t v358;
  unint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  char v363;
  __int128 *v364;
  uint64_t v365;
  uint64_t *v366;
  int v367;
  __int128 *v368;
  uint64_t *v369;
  int v370;
  BOOL v371;
  __int128 *v372;
  uint64_t v373;
  uint64_t *v374;
  int v375;
  int v376;
  int v377;
  uint64_t v378;
  int v379;
  int v381;
  uint64_t v382;
  char v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  int v388;
  int v389;
  __int128 v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  int v394[2];
  int v395[2];
  int v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  uint64_t __c;
  int __ca;
  unsigned int __cb;
  unsigned __int8 *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  char v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  int v425;
  __int16 *v427;
  int v428;
  unint64_t v429;
  int v430;
  uint64_t v431;
  char v433;
  int v434;
  char v436;
  unsigned __int8 v437;
  BOOL v438;
  unsigned __int8 v439;
  __int16 v440;
  unint64_t v441;
  unint64_t v442;
  __int128 v443;
  uint64_t v444;
  __int128 v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  __int128 v449;
  uint64_t v450;
  __int128 v451;
  uint64_t v452;
  __int128 v453;
  _QWORD v454[4];

  v14 = (_QWORD *)a1;
  v15 = a10;
  v454[1] = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 2376) + 1360);
  v17 = *(int *)(a1 + 2048) - (uint64_t)a4;
  if (a10)
  {
    if (((a3 | a2) & 0x80000000) != 0
      || *(_DWORD *)(v16 + 276) <= a2
      || *(_DWORD *)(v16 + 280) <= (int)a3)
    {
      v18 = 0;
    }
    else
    {
      v18 = (__int16 *)(*(_QWORD *)(v16 + 512) + 2 * (*(_QWORD *)(v16 + 488) * ((uint64_t)(int)a3 >> 3) + (a2 >> 3)));
    }
    v22 = *(_QWORD *)(v16 + 488);
  }
  else
  {
    v18 = 0;
    v19 = a2 - *((_DWORD *)a5 + 1);
    v20 = *a5;
    if ((v19 & 0x80000000) == 0)
    {
      v21 = a3 - *((_DWORD *)a5 + 2);
      if ((v21 & 0x80000000) == 0)
      {
        v18 = 0;
        if (v19 < v20 && v21 < v20)
          v18 = (__int16 *)(*((_QWORD *)a5 + 11)
                          + 2 * ((v19 >> 3) + (v20 >> 3) * (unint64_t)(v21 >> 3)));
      }
    }
    v22 = v20 >> 3;
  }
  v427 = v18;
  v430 = *(_DWORD *)(a1 + 2048) - a4;
  if ((((unsigned __int16)*v18 >> 2) & 3) > a4)
  {
    v408 = v22;
    v23 = 1;
    v433 = sub_1B686F790(a1);
    v421 = sub_1B686F790(v14);
    v436 = sub_1B686F790(v14);
    v24 = sub_1B686F790(v14);
    if ((v433 & 1) == 0 && (v421 & 1) == 0 && (v436 & 1) == 0 && (v24 & 1) == 0)
    {
      if ((*v427 & 0xC) != 0
        && (v25 = *(_QWORD *)(a1 + 2384), *(_BYTE *)(v25 + 244))
        && (int)v17 <= *(unsigned __int8 *)(v25 + 2011)
        && (*v427 = *v427 & 0xFFF3 | (*v427 + 12) & 0xC, 1 << v17 >= 8))
      {
        v26 = 0;
        v27 = v427;
        do
        {
          v28 = v27;
          v29 = (1 << v17) >> 3;
          do
          {
            *v28++ = *v427;
            --v29;
          }
          while (v29);
          v23 = 0;
          ++v26;
          v27 += v408;
        }
        while (v26 != (1 << v17) >> 3);
      }
      else
      {
        return 0;
      }
    }
    return v23;
  }
  v30 = 0;
  v31 = *(_QWORD *)(a1 + 2392);
  v434 = *(unsigned __int8 *)(v31 + 227);
  v32 = 1 << *(_BYTE *)(v16 + 286);
  v440 = 0;
  v439 = 0;
  v33 = *(__int128 **)(*(_QWORD *)(a1 + 2400) + 944);
  v34 = *(unsigned __int8 *)(v31 + 352);
  v35 = (__n128)xmmword_1B6917860;
  do
  {
    v36 = (char *)&v449 + v30;
    *((_DWORD *)v36 + 4) = 0;
    *(_OWORD *)v36 = xmmword_1B6917860;
    *((_WORD *)v36 + 10) = 0;
    v37 = (char *)&v443 + v30;
    *((_DWORD *)v37 + 4) = 0;
    *(_OWORD *)v37 = xmmword_1B6917860;
    v30 += 24;
    *((_WORD *)v37 + 10) = 0;
  }
  while (v30 != 72);
  v38 = (a10 | a11) ^ 1;
  if (v34)
    v39 = (_DWORD)v17 == 2;
  else
    v39 = 0;
  v40 = v39;
  if (!v39)
    v38 = 0;
  v409 = v38;
  v41 = a5[1];
  if ((a10 & 1) != 0)
  {
    v42 = *(_QWORD *)(v16 + 112);
    v391 = **((unsigned __int8 **)a5 + 17);
  }
  else
  {
    v391 = **((unsigned __int8 **)a5 + 17);
    v42 = v391;
  }
  v417 = 0;
  v397 = v42;
  if (v434)
    v43 = a5[1];
  else
    v43 = v42;
  v405 = v43;
  v44 = (a2 - *((_DWORD *)a5 + 1));
  if ((v44 & 0x80000000) == 0)
  {
    v45 = a3 - *((_DWORD *)a5 + 2);
    if ((v45 & 0x80000000) == 0)
    {
      v417 = 0;
      v46 = *a5;
      if (v44 < v46 && v45 < v46)
      {
        v47 = (*(uint64_t (**)(_QWORD, unint64_t, __int128))(**((_QWORD **)a5 + 3) + 24))(*((_QWORD *)a5 + 3), v44 + a5[1] * (unint64_t)v45 + *((_QWORD *)a5 + 4), xmmword_1B6917860);
        v15 = a10;
        v417 = v47;
      }
    }
  }
  if (v15)
  {
    v48 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, __n128))(**(_QWORD **)(v14[297] + 1360) + 16))(*(_QWORD *)(v14[297] + 1360), a2, a3, 0, v35);
LABEL_51:
    v49 = v48;
    goto LABEL_52;
  }
  v49 = 0;
  v56 = a2 - *((_DWORD *)a5 + 1);
  if ((v56 & 0x80000000) == 0)
  {
    v57 = a3 - *((_DWORD *)a5 + 2);
    if ((v57 & 0x80000000) == 0)
    {
      v49 = 0;
      v58 = *a5;
      if (v56 < v58 && v57 < v58)
      {
        v48 = (*(uint64_t (**)(_QWORD, unint64_t, __n128))(**(_QWORD **)(*((_QWORD *)a5 + 17) + 80)
                                                                          + 24))(*(_QWORD *)(*((_QWORD *)a5 + 17) + 80), *(_QWORD *)(*((_QWORD *)a5 + 17) + 88) + v56 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v57, v35);
        goto LABEL_51;
      }
    }
  }
LABEL_52:
  v393 = a7;
  v51 = *((_DWORD *)a5 + 1);
  v50 = *((_DWORD *)a5 + 2);
  v403 = v49;
  v381 = v32;
  if (v434)
  {
    v422 = 0;
    v52 = (a2 - v51);
    if ((v52 & 0x80000000) == 0)
    {
      v53 = a3 - v50;
      if ((((_DWORD)a3 - v50) & 0x80000000) == 0)
      {
        v422 = 0;
        v54 = *a5;
        if (v52 < v54 && v53 < v54)
        {
          v55 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)a5 + 7) + 24))(*((_QWORD *)a5 + 7), v52 + a5[1] * (unint64_t)v53 + *((_QWORD *)a5 + 8));
          v49 = v403;
          v422 = v55;
          v51 = *((_DWORD *)a5 + 1);
          v50 = *((_DWORD *)a5 + 2);
        }
      }
    }
  }
  else
  {
    v422 = v49;
  }
  v59 = 0;
  v60 = (1 << v17);
  v61 = (a2 - v51);
  if ((v61 & 0x80000000) == 0)
  {
    v62 = a3 - v50;
    if ((v62 & 0x80000000) == 0)
    {
      v59 = 0;
      v63 = *a5;
      if (v61 < v63 && v62 < v63)
        v59 = (char *)(*(_QWORD *)(*((_QWORD *)a5 + 17) + 56)
                     + 2 * (v61 + **((unsigned __int8 **)a5 + 17) * (unint64_t)v62));
    }
  }
  if (v434)
  {
    v64 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v14[301] + 8 * v17 + 8))((1 << v17), (1 << v17), v417, v41, v422, v41);
    v49 = v403;
    LODWORD(v444) = 0;
    *(_QWORD *)&v443 = v64;
    *((_QWORD *)&v443 + 1) = v64;
  }
  v65 = v14[300];
  __c = v41;
  if (v409)
  {
    v66 = *(unsigned __int8 **)(v65 + 376);
    v67 = *v66;
    v68 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v66 + 10) + 24))(*((_QWORD *)v66 + 10), *((_QWORD *)v66 + 11));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 8144))(v60, v60, v405, v422, v67, v68);
    v49 = v403;
    v65 = v14[300];
  }
  *(_DWORD *)(v65 + 808) = a2;
  *(_DWORD *)(v65 + 812) = a3;
  v69 = a2 - *((_DWORD *)a5 + 1);
  v416 = a5;
  v399 = v60;
  if ((v69 & 0x80000000) != 0 || (v70 = a3 - *((_DWORD *)a5 + 2), (v70 & 0x80000000) != 0))
  {
    v73 = a3;
    v384 = 0;
    v74 = 0;
    *(_QWORD *)(v65 + 864) = 0;
  }
  else
  {
    v71 = 0;
    v72 = *a5;
    if (v69 < v72 && v70 < v72)
      v71 = *((_QWORD *)a5 + 12) + 16 * ((v69 >> 2) + (v72 >> 2) * (unint64_t)(v70 >> 2));
    *(_QWORD *)(v65 + 864) = v71;
    v73 = a3;
    if ((v40 & a11 & 1) != 0)
    {
      v74 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a5 + 17) + 8)
                               + (v69 >> 2)
                               + ((unint64_t)**((unsigned __int8 **)a5 + 17) >> 2) * (v70 >> 2));
      v384 = 1;
    }
    else
    {
      v384 = 0;
      v74 = 0;
    }
  }
  v75 = v430;
  v76 = v49;
  sub_1B686350C((uint64_t)v14, a2, v73, v427, v417, __c, v422, v405, v49, v397, (uint64_t)v59, v391, v430, (_BYTE *)&v440 + 1, v74 != 0);
  *(_QWORD *)v394 = v430 - 2;
  v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14[301]
                                                                                            + 8 * *(_QWORD *)v394
                                                                                            + 24);
  v78 = v14[300];
  *(_DWORD *)(v78 + 808) = a2;
  v79 = v73;
  *(_DWORD *)(v78 + 812) = v73;
  *(_QWORD *)(v78 + 816) = v391;
  if (HIBYTE(v440))
  {
    v382 = v77(v399, v399, v417, __c, v76, v397);
    *(_QWORD *)&v449 = v382;
    v80 = v33[10];
    v81 = v33[11];
    v82 = v33[8];
    *(__int128 *)((char *)v33 + 360) = v33[9];
    *(__int128 *)((char *)v33 + 376) = v80;
    *(__int128 *)((char *)v33 + 392) = v81;
    v83 = v33[6];
    v84 = v33[7];
    v85 = v33[4];
    *(__int128 *)((char *)v33 + 296) = v33[5];
    *(__int128 *)((char *)v33 + 312) = v83;
    *(__int128 *)((char *)v33 + 328) = v84;
    *(__int128 *)((char *)v33 + 344) = v82;
    v86 = *v33;
    *(__int128 *)((char *)v33 + 232) = v33[1];
    v87 = v33[3];
    *(__int128 *)((char *)v33 + 248) = v33[2];
    *(__int128 *)((char *)v33 + 264) = v87;
    *(__int128 *)((char *)v33 + 280) = v85;
    *((_QWORD *)v33 + 51) = *((_QWORD *)v33 + 24);
    *(__int128 *)((char *)v33 + 216) = v86;
    v88 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
    *((_QWORD *)v33 + 4) = 0;
    *((_QWORD *)v33 + 1) = 510;
    *((_QWORD *)v33 + 2) = v88;
    if ((v384 & 1) == 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 352))
      {
        v89 = a2 - *((_DWORD *)v416 + 1);
        if ((v89 & 0x80000000) == 0)
        {
          v90 = v73 - *((_DWORD *)v416 + 2);
          if ((v90 & 0x80000000) == 0)
          {
            v91 = *v416;
            if (v89 < v91 && v90 < v91 && v430 >= 2)
            {
              v92 = (unsigned __int8 *)*((_QWORD *)v416 + 17);
              v93 = (unint64_t)*v92 >> 2;
              v94 = (char *)(*((_QWORD *)v92 + 1) + (v89 >> 2) + v93 * (unint64_t)(v90 >> 2));
              v95 = (int)v399 >> 2;
              do
              {
                --v95;
                bzero(v94, (int)v399 >> 2);
                v94 += v93;
              }
              while (v95);
            }
          }
        }
      }
    }
    v14 = (_QWORD *)a1;
    *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 872) = v59;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 352))
    {
      v96 = 0;
      v97 = a2 - *((_DWORD *)v416 + 1);
      if ((v97 & 0x80000000) == 0)
      {
        v98 = v73 - *((_DWORD *)v416 + 2);
        if ((v98 & 0x80000000) == 0)
        {
          v96 = 0;
          v99 = *v416;
          if (v97 < v99 && v98 < v99)
            v96 = *(_QWORD *)(*((_QWORD *)v416 + 17) + 8)
                + (v97 >> 2)
                + ((unint64_t)**((unsigned __int8 **)v416 + 17) >> 2) * (v98 >> 2);
        }
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 920) = v96;
    }
    sub_1B6860B50(a1, a2, v73, v430, 0, 0);
    v100 = 0;
    LODWORD(v450) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                  - *((_DWORD *)v33 + 2)
                  + 510;
    v101 = v450;
    v102 = *(__int128 *)((char *)v33 + 328);
    v33[6] = *(__int128 *)((char *)v33 + 312);
    v33[7] = v102;
    v103 = *(__int128 *)((char *)v33 + 296);
    v33[4] = *(__int128 *)((char *)v33 + 280);
    v33[5] = v103;
    *((_QWORD *)v33 + 24) = *((_QWORD *)v33 + 51);
    v104 = *(__int128 *)((char *)v33 + 392);
    v33[10] = *(__int128 *)((char *)v33 + 376);
    v33[11] = v104;
    v105 = *(__int128 *)((char *)v33 + 360);
    v33[8] = *(__int128 *)((char *)v33 + 344);
    v33[9] = v105;
    v106 = *(__int128 *)((char *)v33 + 264);
    v33[2] = *(__int128 *)((char *)v33 + 248);
    v33[3] = v106;
    v107 = *(__int128 *)((char *)v33 + 232);
    *v33 = *(__int128 *)((char *)v33 + 216);
    v33[1] = v107;
    v108 = v382
         + ((v101 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 2408) + 2 * SWORD2(v450) + 8)) >> (8 * (WORD2(v450) == 0)));
    *((_QWORD *)&v449 + 1) = v108;
    v109 = 1;
    if (v434)
    {
      v75 = v430;
      v110 = __c;
      if (*((_QWORD *)&v443 + 1) < v108)
      {
        HIBYTE(v440) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2400) + 8144))(v399, v399, v405, v422, v397, v403);
        v109 = 0;
        v100 = 1;
      }
    }
    else
    {
      v75 = v430;
      v110 = __c;
    }
  }
  else if (v434)
  {
    v109 = 0;
    v100 = 1;
    v110 = __c;
  }
  else
  {
    v110 = __c;
    v111 = v77(v399, v399, v417, __c, v422, v397);
    v109 = 0;
    LODWORD(v444) = 0;
    *(_QWORD *)&v443 = v111;
    *((_QWORD *)&v443 + 1) = v111;
    v450 = v444;
    v449 = v443;
    v100 = 1;
  }
  if (v409)
  {
    __ca = v109;
    v112 = *(unsigned __int8 **)(v14[300] + 376);
    v113 = *v112;
    v114 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v112 + 10) + 24))(*((_QWORD *)v112 + 10), *((_QWORD *)v112 + 11));
    v115 = v114;
    v116 = *(char **)(*(_QWORD *)(v14[300] + 376) + 56);
    LOBYTE(v441) = 0;
    if (v100)
      v117 = &v443;
    else
      v117 = &v449;
    v410 = *(_QWORD *)v117;
    v118 = &v450;
    if (v100)
      v118 = &v444;
    v406 = *(_DWORD *)v118;
    v119 = (char *)&v449 + 8;
    if (v100)
      v119 = (char *)&v443 + 8;
    v423 = *(_QWORD *)v119;
    v120 = v79;
    sub_1B686350C((uint64_t)v14, a2, v79, v427, v417, v110, v114, v113, v114, v113, (uint64_t)v116, v113, 2, &v441, 1);
    if ((_BYTE)v441)
    {
      v121 = (*(uint64_t (**)(void))(v14[301] + 8 * *(_QWORD *)v394 + 24))();
      v122 = v33[6];
      v123 = v33[8];
      v124 = v33[9];
      *(__int128 *)((char *)v33 + 328) = v33[7];
      *(__int128 *)((char *)v33 + 344) = v123;
      v125 = v33[4];
      *(__int128 *)((char *)v33 + 296) = v33[5];
      *(__int128 *)((char *)v33 + 312) = v122;
      v126 = v33[11];
      *(__int128 *)((char *)v33 + 376) = v33[10];
      *(__int128 *)((char *)v33 + 392) = v126;
      *(_QWORD *)&v449 = v121;
      *(__int128 *)((char *)v33 + 360) = v124;
      v127 = v33[2];
      *(__int128 *)((char *)v33 + 264) = v33[3];
      *(__int128 *)((char *)v33 + 280) = v125;
      *(__int128 *)((char *)v33 + 248) = v127;
      v128 = *v33;
      *(__int128 *)((char *)v33 + 232) = v33[1];
      *((_QWORD *)v33 + 51) = *((_QWORD *)v33 + 24);
      *(__int128 *)((char *)v33 + 216) = v128;
      v129 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
      *((_QWORD *)v33 + 4) = 0;
      *((_QWORD *)v33 + 1) = 510;
      *((_QWORD *)v33 + 2) = v129;
      v130 = v416;
      v131 = a2 - *((_DWORD *)v416 + 1);
      v132 = v120 - *((_DWORD *)v416 + 2);
      v418 = v121;
      v385 = v115;
      if ((v131 & 0x80000000) == 0 && (v132 & 0x80000000) == 0)
      {
        v133 = *v416;
        if (v131 < v133 && v132 < v133)
        {
          memset((void *)(*(_QWORD *)(*((_QWORD *)v416 + 17) + 8)+ (v131 >> 2)+ ((unint64_t)**((unsigned __int8 **)v416 + 17) >> 2) * (v132 >> 2)), 1, v399 >> 2);
          v131 = a2 - *((_DWORD *)v416 + 1);
          v132 = v120 - *((_DWORD *)v416 + 2);
        }
      }
      v134 = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 872) = v116;
      v135 = *(_QWORD *)(a1 + 2400);
      *(_QWORD *)(v135 + 816) = v113;
      if ((v131 & 0x80000000) == 0 && (v132 & 0x80000000) == 0)
      {
        v134 = 0;
        v136 = *v416;
        if (v131 < v136 && v132 < v136)
          v134 = *(_QWORD *)(*((_QWORD *)v416 + 17) + 8)
               + (v131 >> 2)
               + ((unint64_t)**((unsigned __int8 **)v416 + 17) >> 2) * (v132 >> 2);
      }
      LODWORD(v137) = v399 >> 2;
      *(_QWORD *)(v135 + 920) = v134;
      sub_1B6860B50(a1, a2, v120, 2, 0, 0);
      LODWORD(v450) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                    - *((_DWORD *)v33 + 2)
                    + 510;
      v138 = v450;
      v139 = *(__int128 *)((char *)v33 + 328);
      v33[6] = *(__int128 *)((char *)v33 + 312);
      v33[7] = v139;
      v140 = *(__int128 *)((char *)v33 + 296);
      v33[4] = *(__int128 *)((char *)v33 + 280);
      v33[5] = v140;
      *((_QWORD *)v33 + 24) = *((_QWORD *)v33 + 51);
      v141 = *(__int128 *)((char *)v33 + 392);
      v33[10] = *(__int128 *)((char *)v33 + 376);
      v33[11] = v141;
      v142 = *(__int128 *)((char *)v33 + 360);
      v33[8] = *(__int128 *)((char *)v33 + 344);
      v33[9] = v142;
      v143 = *(__int128 *)((char *)v33 + 264);
      v33[2] = *(__int128 *)((char *)v33 + 248);
      v33[3] = v143;
      v144 = *(__int128 *)((char *)v33 + 232);
      v14 = (_QWORD *)a1;
      *v33 = *(__int128 *)((char *)v33 + 216);
      v33[1] = v144;
      *((_QWORD *)&v449 + 1) = v418
                             + ((v138
                               * *(unsigned __int16 *)(*(_QWORD *)(a1 + 2408) + 2 * SWORD2(v450) + 8)) >> (8 * (WORD2(v450) == 0)));
      if (v423 > *((_QWORD *)&v449 + 1))
      {
        HIBYTE(v440) = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2400) + 8144))(v399, v399, v113, v385, v397, v403);
        v145 = (int)v399;
        do
        {
          --v145;
          memcpy(v59, v116, 2 * (int)v399);
          v59 += 2 * v391;
          v116 += 2 * v113;
        }
        while (v145);
        v109 = 1;
        v75 = v430;
        v14 = (_QWORD *)a1;
LABEL_139:
        v146 = v393;
        goto LABEL_140;
      }
    }
    else
    {
      LODWORD(v137) = 1;
      v130 = v416;
    }
    v147 = a2 - *((_DWORD *)v130 + 1);
    v75 = v430;
    if ((v147 & 0x80000000) == 0)
    {
      v148 = v120 - *((_DWORD *)v130 + 2);
      if ((v148 & 0x80000000) == 0)
      {
        v149 = *v130;
        if (v147 < v149 && v148 < v149)
        {
          v150 = (unsigned __int8 *)*((_QWORD *)v130 + 17);
          v151 = (unint64_t)*v150 >> 2;
          v152 = v137;
          v153 = (char *)(*((_QWORD *)v150 + 1) + (v147 >> 2) + v151 * (unint64_t)(v148 >> 2));
          v137 = v137;
          do
          {
            --v137;
            bzero(v153, v152);
            v153 += v151;
          }
          while (v137);
        }
      }
    }
    LODWORD(v450) = v406;
    *(_QWORD *)&v449 = v410;
    *((_QWORD *)&v449 + 1) = v423;
    v109 = __ca;
    goto LABEL_139;
  }
  v146 = v393;
  v120 = v79;
  v130 = v416;
LABEL_140:
  sub_1B688DE74(v130, a2, v120, 1 << SLOBYTE(v394[0]), 0, v109, 0);
  if (a9)
  {
    v154 = *(unsigned __int8 *)(v14[298] + 2012);
    v155 = a6 ? 0 : v75;
    v156 = v75 > v154 ? v75 - 1 : v155;
    if (!a6 || v75 > v154)
    {
      if (*(_BYTE *)(v14[299] + 352))
        v157 = v156 == 2;
      else
        v157 = 0;
      v158 = !v157;
      v159 = a10 | a11;
      if (!v157)
        v159 = 1;
      v400 = v159;
      v160 = v130[1];
      v161 = a10;
      if (a10)
      {
        v162 = *(_QWORD *)(*(_QWORD *)(v14[297] + 1360) + 120);
        v398 = *(unsigned __int8 *)(*((_QWORD *)v130 + 17) + 1);
      }
      else
      {
        v398 = *(unsigned __int8 *)(*((_QWORD *)v130 + 17) + 1);
        v162 = 2 * v398;
      }
      v163 = 0;
      v404 = v162;
      if (v434)
        v164 = v130[1];
      else
        v164 = v162;
      v165 = (a2 - *((_DWORD *)v130 + 1));
      if ((v165 & 0x80000000) == 0)
      {
        v166 = v120 - *((_DWORD *)v130 + 2);
        if ((v166 & 0x80000000) == 0)
        {
          v163 = 0;
          v167 = *v130;
          if (v165 < v167 && v166 < v167)
          {
            v163 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v130 + 5) + 24))(*((_QWORD *)v130 + 5), v165 + v130[1] * (unint64_t)(v166 >> 1) + *((_QWORD *)v130 + 6));
            v161 = a10;
          }
        }
      }
      v407 = v163;
      if (v161)
      {
        v168 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v14[297] + 1360) + 16))(*(_QWORD *)(v14[297] + 1360), (a2 >> 1), (v120 >> 1), 1);
      }
      else
      {
        v411 = 0;
        v174 = a2 - *((_DWORD *)v130 + 1);
        if ((v174 & 0x80000000) != 0)
          goto LABEL_171;
        v175 = v120 - *((_DWORD *)v130 + 2);
        if ((v175 & 0x80000000) != 0)
          goto LABEL_171;
        v411 = 0;
        v176 = *v130;
        if (v174 >= v176 || v175 >= v176)
          goto LABEL_171;
        v168 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)v130 + 17) + 96) + 24))(*(_QWORD *)(*((_QWORD *)v130 + 17) + 96), *(_QWORD *)(*((_QWORD *)v130 + 17) + 104)+ v174+ *(unsigned __int8 *)(*((_QWORD *)v130 + 17) + 1) * (unint64_t)(v175 & 0xFFFFFFFE));
      }
      v411 = v168;
LABEL_171:
      v170 = *((_DWORD *)v130 + 1);
      v169 = *((_DWORD *)v130 + 2);
      if (v434)
      {
        v424 = 0;
        v171 = (a2 - v170);
        if ((v171 & 0x80000000) == 0)
        {
          v172 = v120 - v169;
          if (((v120 - v169) & 0x80000000) == 0)
          {
            v424 = 0;
            v173 = *v130;
            if (v171 < v173 && v172 < v173)
            {
              v424 = (*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)v130 + 9) + 24))(*((_QWORD *)v130 + 9), v171 + v130[1] * (unint64_t)(v172 >> 1) + *((_QWORD *)v130 + 10));
              v170 = *((_DWORD *)v130 + 1);
              v169 = *((_DWORD *)v130 + 2);
            }
          }
        }
      }
      else
      {
        v424 = v411;
      }
      v419 = v160;
      v177 = 0;
      v431 = (1 << v156);
      v178 = a2 - v170;
      if ((v178 & 0x80000000) != 0)
        goto LABEL_188;
      v179 = v120 - v169;
      v180 = 0;
      if ((v179 & 0x80000000) != 0)
        goto LABEL_189;
      v177 = 0;
      v181 = *v130;
      if (v178 >= v181)
      {
LABEL_188:
        v180 = 0;
      }
      else
      {
        v180 = 0;
        if (v179 < v181)
        {
          v182 = *((_QWORD *)v130 + 17);
          v183 = (v178 >> 1) + *(unsigned __int8 *)(v182 + 1) * (unint64_t)(v179 >> 1);
          v177 = (char *)(*(_QWORD *)(v182 + 64) + 2 * v183);
          v180 = (char *)(*(_QWORD *)(v182 + 72) + 2 * v183);
        }
      }
LABEL_189:
      __cb = v156;
      if ((v400 & 1) == 0)
      {
        v184 = *(_QWORD *)(a1 + 2400);
        v185 = *(unsigned __int8 **)(v184 + 376);
        v186 = 2 * *v185;
        v187 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v185 + 10) + 24))(*((_QWORD *)v185 + 10), *((_QWORD *)v185 + 11));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 8144))(8, v431, v164, v424, v186, v187);
      }
      if (v434)
      {
        v188 = *(_QWORD *)(a1 + 2408);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, __int128 *))(v188 + 376))(v407, v419, v424, v419, v431, v431, &v445, &v447);
        v189 = *(unsigned __int16 *)(v188 + 18);
        *(_QWORD *)&v445 = (unint64_t)(v445 * v189) >> 8;
        *(_QWORD *)&v447 = (unint64_t)(v447 * v189) >> 8;
        LODWORD(v446) = 0;
        LODWORD(v448) = 0;
      }
      v190 = *(_QWORD *)(a1 + 2400);
      *(_DWORD *)(v190 + 808) = a2;
      *(_DWORD *)(v190 + 812) = v120;
      v191 = a2 - *((_DWORD *)v130 + 1);
      if ((v191 & 0x80000000) != 0 || (v192 = v120 - *((_DWORD *)v130 + 2), (v192 & 0x80000000) != 0))
      {
        v197 = 0;
        v198 = 0;
        *(_QWORD *)(v190 + 864) = 0;
        v199 = 1;
        v195 = __cb;
      }
      else
      {
        v193 = 0;
        v194 = *v130;
        v195 = __cb;
        if (v191 >= v194)
        {
          v196 = a11;
        }
        else
        {
          v196 = a11;
          if (v192 < v194)
            v193 = *((_QWORD *)v130 + 12)
                 + 16 * ((v191 >> 2) + (v194 >> 2) * (unint64_t)(v192 >> 2));
        }
        v197 = 0;
        *(_QWORD *)(v190 + 864) = v193;
        v200 = v158 | v196 ^ 1;
        v199 = 1;
        v198 = 0;
        if ((v200 & 1) == 0 && (a10 & 1) == 0)
        {
          v199 = 0;
          v201 = *((_QWORD *)v130 + 17);
          v202 = (v191 >> 3) + ((unint64_t)*(unsigned __int8 *)(v201 + 1) >> 2) * (v192 >> 3);
          v203 = *(_QWORD *)(v201 + 24);
          v197 = *(_BYTE *)(*(_QWORD *)(v201 + 16) + v202) != 0;
          v198 = *(unsigned __int8 *)(v203 + v202);
        }
      }
      sub_1B6867058((_QWORD *)a1, a2, v120, v195, v427, v407, v419, v424, v164, v411, v404, (uint64_t)v177, (uint64_t)v180, v398, (BOOL *)&v440, &v439, v197, v198 != 0);
      v204 = *(_QWORD *)(a1 + 2408);
      *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 824) = v398;
      v205 = v440;
      v206 = v439;
      if (!(_BYTE)v440 && !v439 && v434)
      {
LABEL_254:
        if (v400)
        {
          v273 = v439;
          v274 = v440;
          v14 = (_QWORD *)a1;
          v146 = v393;
          v275 = a2;
LABEL_326:
          v363 = __cb - 2;
          if (v146)
          {
            v364 = &v451;
            if (!v274)
              v364 = &v445;
            v365 = *(_QWORD *)v146 + *(_QWORD *)v364;
            v366 = &v452;
            if (!v274)
              v366 = &v446;
            v367 = *(_DWORD *)(v146 + 16) + *(_DWORD *)v366;
            v368 = &v453;
            if (!v273)
              v368 = &v447;
            *(_QWORD *)v146 = *(_QWORD *)v368 + v365;
            v369 = v454;
            if (!v273)
              v369 = &v448;
            *(_DWORD *)(v146 + 16) = *(_DWORD *)v369 + v367;
          }
          v370 = 1 << v363;
          sub_1B688DE74(v130, v275, v120, 1 << v363, 1, v274, 0);
          sub_1B688DE74(v130, v275, v120, v370, 2, v273, 0);
          goto LABEL_337;
        }
        v276 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 2400) + 376);
        v277 = *v276;
        v278 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v276 + 10) + 24))(*((_QWORD *)v276 + 10), *((_QWORD *)v276 + 11));
        v279 = *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 376);
        v281 = *(char **)(v279 + 56);
        v280 = *(char **)(v279 + 64);
        v438 = 0;
        v437 = 0;
        v282 = &v451;
        v396 = v440;
        if (!(_BYTE)v440)
          v282 = &v445;
        *(_QWORD *)&v390 = *(_QWORD *)v282;
        v283 = &v452;
        if (!(_BYTE)v440)
          v283 = &v446;
        v388 = *(_DWORD *)v283;
        v284 = (char *)&v451 + 8;
        if (!(_BYTE)v440)
          v284 = (char *)&v445 + 8;
        *((_QWORD *)&v390 + 1) = *(_QWORD *)v284;
        v401 = 2 * v277;
        v425 = v120;
        v387 = v278;
        sub_1B6867058((_QWORD *)a1, a2, v120, 2, v427, v407, v419, v278, 2 * v277, v278, 2 * v277, (uint64_t)v281, (uint64_t)v280, v277, &v438, &v437, 1, 1);
        *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 824) = v277;
        v285 = v438;
        v386 = (int)v431 >> 2;
        v428 = v437;
        if (!(v438 | v437))
          goto LABEL_278;
        v286 = *(_QWORD *)(a1 + 2408);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v286 + 376))(v407, v419, v387, v401, v431, v431, &v441, &v442);
        v287 = *(unsigned __int16 *)(v286 + 18);
        v130 = v416;
        v288 = (v441 * v287) >> 8;
        v441 = v288;
        v442 = (v442 * v287) >> 8;
        if (!v285)
          goto LABEL_278;
        v289 = v33[6];
        v290 = v33[8];
        v291 = v33[9];
        *(__int128 *)((char *)v33 + 328) = v33[7];
        *(__int128 *)((char *)v33 + 344) = v290;
        v292 = v33[4];
        *(__int128 *)((char *)v33 + 296) = v33[5];
        *(__int128 *)((char *)v33 + 312) = v289;
        v293 = v33[11];
        *(__int128 *)((char *)v33 + 376) = v33[10];
        *(__int128 *)((char *)v33 + 392) = v293;
        v294 = v288;
        *(_QWORD *)&v451 = v288;
        *(__int128 *)((char *)v33 + 360) = v291;
        v295 = v33[2];
        *(__int128 *)((char *)v33 + 264) = v33[3];
        *(__int128 *)((char *)v33 + 280) = v292;
        *(__int128 *)((char *)v33 + 248) = v295;
        v296 = *v33;
        *(__int128 *)((char *)v33 + 232) = v33[1];
        *((_QWORD *)v33 + 51) = *((_QWORD *)v33 + 24);
        *(__int128 *)((char *)v33 + 216) = v296;
        v297 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
        *((_QWORD *)v33 + 4) = 0;
        *((_QWORD *)v33 + 1) = 510;
        *((_QWORD *)v33 + 2) = v297;
        v298 = a2 - *((_DWORD *)v416 + 1);
        v299 = v120 - *((_DWORD *)v416 + 2);
        if ((v298 & 0x80000000) == 0 && (v299 & 0x80000000) == 0)
        {
          v300 = *v416;
          if (v298 < v300 && v299 < v300)
          {
            memset((void *)(*(_QWORD *)(*((_QWORD *)v416 + 17) + 16)+ (v298 >> 3)+ ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v416 + 17) + 1) >> 2) * (v299 >> 3)), 1, v431 >> 2);
            v298 = a2 - *((_DWORD *)v416 + 1);
            v299 = v120 - *((_DWORD *)v416 + 2);
          }
        }
        v301 = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 880) = v281;
        if ((v298 & 0x80000000) == 0 && (v299 & 0x80000000) == 0)
        {
          v301 = 0;
          v302 = *v416;
          if (v298 < v302 && v299 < v302)
            v301 = *(_QWORD *)(*((_QWORD *)v416 + 17) + 16)
                 + (v298 >> 3)
                 + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v416 + 17) + 1) >> 2) * (v299 >> 3);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 928) = v301;
        sub_1B6860B50(a1, a2, v120, 2, 0, 1);
        LODWORD(v452) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                      - *((_DWORD *)v33 + 2)
                      + 510;
        v303 = v452;
        v304 = *(__int128 *)((char *)v33 + 328);
        v33[6] = *(__int128 *)((char *)v33 + 312);
        v33[7] = v304;
        v305 = *(__int128 *)((char *)v33 + 296);
        v33[4] = *(__int128 *)((char *)v33 + 280);
        v33[5] = v305;
        *((_QWORD *)v33 + 24) = *((_QWORD *)v33 + 51);
        v306 = *(__int128 *)((char *)v33 + 392);
        v33[10] = *(__int128 *)((char *)v33 + 376);
        v33[11] = v306;
        v307 = *(__int128 *)((char *)v33 + 360);
        v33[8] = *(__int128 *)((char *)v33 + 344);
        v33[9] = v307;
        v308 = *(__int128 *)((char *)v33 + 264);
        v33[2] = *(__int128 *)((char *)v33 + 248);
        v33[3] = v308;
        v309 = *(__int128 *)((char *)v33 + 232);
        *v33 = *(__int128 *)((char *)v33 + 216);
        v33[1] = v309;
        *((_QWORD *)&v451 + 1) = v294
                               + ((v303
                                 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 2408) + 2 * SWORD2(v452) + 8)) >> (8 * (WORD2(v452) == 0)));
        v130 = v416;
        if (*((_QWORD *)&v390 + 1) > *((_QWORD *)&v451 + 1))
        {
          LOBYTE(v440) = 1;
          v310 = v401;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2400) + 8152))(8, v431, v401, v387, v404, v411);
          v311 = (int)v431;
          do
          {
            --v311;
            memcpy(v177, v281, 2 * (int)v431);
            v177 += 2 * v398;
            v281 += v401;
          }
          while (v311);
          v396 = 1;
          v14 = (_QWORD *)a1;
        }
        else
        {
LABEL_278:
          v312 = a2 - *((_DWORD *)v130 + 1);
          if ((v312 & 0x80000000) == 0)
          {
            v313 = v120 - *((_DWORD *)v416 + 2);
            if ((v313 & 0x80000000) == 0)
            {
              v314 = *v416;
              if (v312 < v314 && v313 < v314)
              {
                v315 = *((_QWORD *)v416 + 17);
                v316 = (unint64_t)*(unsigned __int8 *)(v315 + 1) >> 2;
                v317 = (char *)(*(_QWORD *)(v315 + 16) + (v312 >> 3)
                                                       + v316 * (unint64_t)(v313 >> 3));
                v318 = v386;
                do
                {
                  --v318;
                  bzero(v317, v386);
                  v317 += v316;
                }
                while (v318);
              }
            }
          }
          LODWORD(v452) = v388;
          v451 = v390;
          v14 = (_QWORD *)a1;
          v310 = v401;
        }
        v273 = v439;
        v319 = &v453;
        if (!v439)
          v319 = &v447;
        v420 = *(_QWORD *)v319;
        v320 = v454;
        if (!v439)
          v320 = &v448;
        v412 = *(_DWORD *)v320;
        v321 = (char *)&v453 + 8;
        if (!v439)
          v321 = (char *)&v447 + 8;
        v130 = v416;
        if (v428)
        {
          v322 = *(_QWORD *)v321;
          v323 = v33[6];
          v324 = v33[8];
          v325 = v33[9];
          *(__int128 *)((char *)v33 + 328) = v33[7];
          *(__int128 *)((char *)v33 + 344) = v324;
          v326 = v33[4];
          *(__int128 *)((char *)v33 + 296) = v33[5];
          *(__int128 *)((char *)v33 + 312) = v323;
          v327 = v33[11];
          *(__int128 *)((char *)v33 + 376) = v33[10];
          *(__int128 *)((char *)v33 + 392) = v327;
          v429 = v442;
          *(_QWORD *)&v453 = v442;
          *(__int128 *)((char *)v33 + 360) = v325;
          v328 = v33[2];
          *(__int128 *)((char *)v33 + 264) = v33[3];
          *(__int128 *)((char *)v33 + 280) = v326;
          *(__int128 *)((char *)v33 + 248) = v328;
          v329 = *v33;
          *(__int128 *)((char *)v33 + 232) = v33[1];
          *((_QWORD *)v33 + 51) = *((_QWORD *)v33 + 24);
          *(__int128 *)((char *)v33 + 216) = v329;
          v330 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
          *((_QWORD *)v33 + 4) = 0;
          *((_QWORD *)v33 + 1) = 510;
          *((_QWORD *)v33 + 2) = v330;
          v331 = a2 - *((_DWORD *)v416 + 1);
          v332 = v120 - *((_DWORD *)v416 + 2);
          if ((v331 & 0x80000000) == 0 && (v332 & 0x80000000) == 0)
          {
            v333 = *v416;
            if (v331 < v333 && v332 < v333)
            {
              v402 = v322;
              v334 = *((_QWORD *)v416 + 17);
              v335 = (unint64_t)*(unsigned __int8 *)(v334 + 1) >> 2;
              v336 = (char *)(*(_QWORD *)(v334 + 24) + (v331 >> 3) + v335 * (unint64_t)(v332 >> 3));
              v337 = v386;
              do
              {
                --v337;
                memset(v336, 1, v386);
                v336 += v335;
              }
              while (v337);
              v130 = v416;
              v331 = a2 - *((_DWORD *)v416 + 1);
              v332 = v120 - *((_DWORD *)v416 + 2);
              v14 = (_QWORD *)a1;
              v322 = v402;
            }
          }
          v338 = 0;
          *(_QWORD *)(v14[300] + 888) = v280;
          if ((v331 & 0x80000000) == 0 && (v332 & 0x80000000) == 0)
          {
            v339 = *v130;
            if (v331 >= v339 || v332 >= v339)
              v338 = 0;
            else
              v338 = *(_QWORD *)(*((_QWORD *)v130 + 17) + 24)
                   + (v331 >> 3)
                   + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v130 + 17) + 1) >> 2) * (v332 >> 3);
          }
          *(_QWORD *)(v14[300] + 936) = v338;
          v341 = a2;
          sub_1B6860B50((uint64_t)v14, a2, v425, 2, 0, 2);
          LODWORD(v454[0]) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                           - *((_DWORD *)v33 + 2)
                           + 510;
          v342 = v454[0];
          v343 = *(__int128 *)((char *)v33 + 328);
          v33[6] = *(__int128 *)((char *)v33 + 312);
          v33[7] = v343;
          v344 = *(__int128 *)((char *)v33 + 296);
          v33[4] = *(__int128 *)((char *)v33 + 280);
          v33[5] = v344;
          *((_QWORD *)v33 + 24) = *((_QWORD *)v33 + 51);
          v345 = *(__int128 *)((char *)v33 + 392);
          v33[10] = *(__int128 *)((char *)v33 + 376);
          v33[11] = v345;
          v346 = *(__int128 *)((char *)v33 + 360);
          v33[8] = *(__int128 *)((char *)v33 + 344);
          v33[9] = v346;
          v347 = *(__int128 *)((char *)v33 + 264);
          v33[2] = *(__int128 *)((char *)v33 + 248);
          v33[3] = v347;
          v348 = *(__int128 *)((char *)v33 + 232);
          *v33 = *(__int128 *)((char *)v33 + 216);
          v33[1] = v348;
          if (v322 > v429
                    + ((v342 * *(unsigned __int16 *)(v14[301] + 2 * SWORD2(v454[0]) + 8)) >> (8 * (WORD2(v454[0]) == 0))))
          {
            v439 = 1;
            v349 = v14[300];
            v350 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v349 + 376) + 80) + 24))(*(_QWORD *)(*(_QWORD *)(v349 + 376) + 80), *(_QWORD *)(*(_QWORD *)(v349 + 376) + 88) + 1);
            v351 = 0;
            v352 = a2 - *((_DWORD *)v130 + 1) + 1;
            if ((v352 & 0x80000000) != 0)
            {
              v120 = v425;
            }
            else
            {
              v120 = v425;
              v353 = v425 - *((_DWORD *)v130 + 2);
              if ((v353 & 0x80000000) == 0)
              {
                v351 = 0;
                v354 = *v130;
                if (v352 < v354 && v353 < v354)
                  v351 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*((_QWORD *)v130 + 17)
                                                                                           + 96)
                                                                             + 24))(*(_QWORD *)(*((_QWORD *)v130 + 17) + 96), *(_QWORD *)(*((_QWORD *)v130 + 17) + 104)+ v352+ *(unsigned __int8 *)(*((_QWORD *)v130 + 17) + 1) * (unint64_t)(v353 & 0xFFFFFFFE));
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v349 + 8152))(8, v431, v310, v350, v404, v351);
            v362 = (int)v431;
            do
            {
              --v362;
              memcpy(v180, v280, 2 * (int)v431);
              v180 += 2 * v398;
              v280 += v310;
            }
            while (v362);
            v273 = 1;
LABEL_325:
            v146 = v393;
            v275 = a2;
            v274 = v396;
            goto LABEL_326;
          }
        }
        else
        {
          v341 = a2;
        }
        v355 = v341 - *((_DWORD *)v130 + 1);
        v120 = v425;
        if ((v355 & 0x80000000) == 0)
        {
          v356 = v425 - *((_DWORD *)v130 + 2);
          if ((v356 & 0x80000000) == 0)
          {
            v357 = *v130;
            if (v355 < v357 && v356 < v357)
            {
              v358 = *((_QWORD *)v130 + 17);
              v359 = (unint64_t)*(unsigned __int8 *)(v358 + 1) >> 2;
              v360 = (char *)(*(_QWORD *)(v358 + 24) + (v355 >> 3) + v359 * (unint64_t)(v356 >> 3));
              v361 = v386;
              do
              {
                --v361;
                bzero(v360, v386);
                v360 += v359;
              }
              while (v361);
            }
          }
        }
        *(_QWORD *)&v453 = v420;
        LODWORD(v454[0]) = v412;
        goto LABEL_325;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *))(v204 + 376))(v407, v419, v411, v404, v431, v431, &v441, &v442);
      v207 = *(unsigned __int16 *)(v204 + 18);
      v208 = (v441 * v207) >> 8;
      v209 = (v442 * v207) >> 8;
      v441 = v208;
      v442 = v209;
      if (v205)
      {
        v389 = v206;
        v392 = v208;
        *(_QWORD *)&v451 = v208;
        v210 = v33[10];
        v211 = v33[11];
        v212 = v33[8];
        *(__int128 *)((char *)v33 + 360) = v33[9];
        *(__int128 *)((char *)v33 + 376) = v210;
        *(__int128 *)((char *)v33 + 392) = v211;
        v213 = v33[6];
        v214 = v33[7];
        v215 = v33[4];
        *(__int128 *)((char *)v33 + 296) = v33[5];
        *(__int128 *)((char *)v33 + 312) = v213;
        *(__int128 *)((char *)v33 + 328) = v214;
        *(__int128 *)((char *)v33 + 344) = v212;
        v216 = *v33;
        *(__int128 *)((char *)v33 + 232) = v33[1];
        v217 = v33[3];
        *(__int128 *)((char *)v33 + 248) = v33[2];
        *(__int128 *)((char *)v33 + 264) = v217;
        *(__int128 *)((char *)v33 + 280) = v215;
        *((_QWORD *)v33 + 51) = *((_QWORD *)v33 + 24);
        *(__int128 *)((char *)v33 + 216) = v216;
        v218 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
        *((_QWORD *)v33 + 4) = 0;
        *((_QWORD *)v33 + 1) = 510;
        *((_QWORD *)v33 + 2) = v218;
        if (v199)
        {
          if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 352))
          {
            v219 = a2 - *((_DWORD *)v130 + 1);
            if ((v219 & 0x80000000) == 0)
            {
              v220 = v120 - *((_DWORD *)v130 + 2);
              if ((v220 & 0x80000000) == 0)
              {
                v221 = *v130;
                if (v219 < v221 && v220 < v221 && __cb >= 2)
                {
                  v222 = *((_QWORD *)v130 + 17);
                  v223 = (unint64_t)*(unsigned __int8 *)(v222 + 1) >> 2;
                  v224 = (char *)(*(_QWORD *)(v222 + 16)
                                + (v219 >> 3)
                                + v223 * (unint64_t)(v220 >> 3));
                  v225 = (int)v431 >> 2;
                  do
                  {
                    --v225;
                    bzero(v224, (int)v431 >> 2);
                    v224 += v223;
                  }
                  while (v225);
                }
              }
            }
          }
        }
        v226 = a1;
        *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 880) = v177;
        v227 = v389;
        if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 352))
        {
          v228 = 0;
          v229 = a2 - *((_DWORD *)v130 + 1);
          if ((v229 & 0x80000000) == 0)
          {
            v230 = v120 - *((_DWORD *)v130 + 2);
            if ((v230 & 0x80000000) == 0)
            {
              v228 = 0;
              v231 = *v130;
              if (v229 < v231 && v230 < v231)
                v228 = *(_QWORD *)(*((_QWORD *)v130 + 17) + 16)
                     + (v229 >> 3)
                     + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v130 + 17) + 1) >> 2) * (v230 >> 3);
            }
          }
          v226 = a1;
          *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 928) = v228;
        }
        sub_1B6860B50(v226, a2, v120, __cb, 0, 1);
        LODWORD(v452) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                      - *((_DWORD *)v33 + 2)
                      + 510;
        v232 = v452;
        v233 = *(__int128 *)((char *)v33 + 328);
        v33[6] = *(__int128 *)((char *)v33 + 312);
        v33[7] = v233;
        v234 = *(__int128 *)((char *)v33 + 296);
        v33[4] = *(__int128 *)((char *)v33 + 280);
        v33[5] = v234;
        *((_QWORD *)v33 + 24) = *((_QWORD *)v33 + 51);
        v235 = *(__int128 *)((char *)v33 + 392);
        v33[10] = *(__int128 *)((char *)v33 + 376);
        v33[11] = v235;
        v236 = *(__int128 *)((char *)v33 + 360);
        v33[8] = *(__int128 *)((char *)v33 + 344);
        v33[9] = v236;
        v237 = *(__int128 *)((char *)v33 + 264);
        v33[2] = *(__int128 *)((char *)v33 + 248);
        v33[3] = v237;
        v238 = *(__int128 *)((char *)v33 + 232);
        *v33 = *(__int128 *)((char *)v33 + 216);
        v33[1] = v238;
        v239 = *(_QWORD *)(v226 + 2408) + 8;
        v240 = v392
             + ((v232 * *(unsigned __int16 *)(v239 + 2 * SWORD2(v452))) >> (8 * (WORD2(v452) == 0)));
        *((_QWORD *)&v451 + 1) = v240;
        v241 = v445
             + ((v446 * *(unsigned __int16 *)(v239 + 2 * SWORD2(v446))) >> (8 * (WORD2(v446) == 0)));
        *((_QWORD *)&v445 + 1) = v241;
        if (v434 && v241 < v240)
        {
          LOBYTE(v440) = 0;
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2400) + 8152))((2 << __cb), v431, v419, v424, v404, v411);
          v227 = v439;
        }
        if (v227)
        {
          v209 = v442;
          goto LABEL_231;
        }
        if (v434)
          goto LABEL_254;
        v209 = v442;
      }
      else
      {
        if (v434)
        {
          if (!v206)
            goto LABEL_254;
          goto LABEL_231;
        }
        *(_QWORD *)&v445 = v208;
        LODWORD(v446) = 0;
        v451 = v445;
        v452 = v446;
        if (v206)
        {
LABEL_231:
          *(_QWORD *)v395 = v209;
          *(_QWORD *)&v453 = v209;
          v242 = v33[10];
          v243 = v33[11];
          v244 = v33[8];
          *(__int128 *)((char *)v33 + 360) = v33[9];
          *(__int128 *)((char *)v33 + 376) = v242;
          *(__int128 *)((char *)v33 + 392) = v243;
          v245 = v33[6];
          v246 = v33[7];
          v247 = v33[4];
          *(__int128 *)((char *)v33 + 296) = v33[5];
          *(__int128 *)((char *)v33 + 312) = v245;
          *(__int128 *)((char *)v33 + 328) = v246;
          *(__int128 *)((char *)v33 + 344) = v244;
          v248 = *v33;
          *(__int128 *)((char *)v33 + 232) = v33[1];
          v249 = v33[3];
          *(__int128 *)((char *)v33 + 248) = v33[2];
          *(__int128 *)((char *)v33 + 264) = v249;
          *(__int128 *)((char *)v33 + 280) = v247;
          *((_QWORD *)v33 + 51) = *((_QWORD *)v33 + 24);
          *(__int128 *)((char *)v33 + 216) = v248;
          v250 = 8 * (*((_DWORD *)v33 + 52) - *((_DWORD *)v33 + 6));
          *((_QWORD *)v33 + 4) = 0;
          *((_QWORD *)v33 + 1) = 510;
          *((_QWORD *)v33 + 2) = v250;
          if (v199)
          {
            if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 352))
            {
              v251 = a2 - *((_DWORD *)v130 + 1);
              if ((v251 & 0x80000000) == 0)
              {
                v252 = v120 - *((_DWORD *)v130 + 2);
                if ((v252 & 0x80000000) == 0)
                {
                  v253 = *v130;
                  if (v251 < v253 && v252 < v253 && __cb >= 2)
                  {
                    v254 = *((_QWORD *)v130 + 17);
                    v255 = (unint64_t)*(unsigned __int8 *)(v254 + 1) >> 2;
                    v256 = (char *)(*(_QWORD *)(v254 + 24)
                                  + (v251 >> 3)
                                  + v255 * (unint64_t)(v252 >> 3));
                    v257 = (int)v431 >> 2;
                    do
                    {
                      --v257;
                      bzero(v256, (int)v431 >> 2);
                      v256 += v255;
                    }
                    while (v257);
                  }
                }
              }
            }
          }
          v258 = a1;
          *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 888) = v180;
          if (*(_BYTE *)(*(_QWORD *)(a1 + 2392) + 352))
          {
            v259 = 0;
            v260 = a2 - *((_DWORD *)v130 + 1);
            if ((v260 & 0x80000000) == 0)
            {
              v261 = v120 - *((_DWORD *)v130 + 2);
              if ((v261 & 0x80000000) == 0)
              {
                v259 = 0;
                v262 = *v130;
                if (v260 < v262 && v261 < v262)
                  v259 = *(_QWORD *)(*((_QWORD *)v130 + 17) + 24)
                       + (v260 >> 3)
                       + ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v130 + 17) + 1) >> 2) * (v261 >> 3);
              }
            }
            v258 = a1;
            *(_QWORD *)(*(_QWORD *)(a1 + 2400) + 936) = v259;
          }
          sub_1B6860B50(v258, a2, v120, __cb, 0, 2);
          LODWORD(v454[0]) = ((*((_DWORD *)v33 + 4) + 8 * (*((_DWORD *)v33 + 6) - *((_DWORD *)v33 + 52))) << 8)
                           - *((_DWORD *)v33 + 2)
                           + 510;
          v263 = v454[0];
          v264 = *(__int128 *)((char *)v33 + 328);
          v33[6] = *(__int128 *)((char *)v33 + 312);
          v33[7] = v264;
          v265 = *(__int128 *)((char *)v33 + 296);
          v33[4] = *(__int128 *)((char *)v33 + 280);
          v33[5] = v265;
          *((_QWORD *)v33 + 24) = *((_QWORD *)v33 + 51);
          v266 = *(__int128 *)((char *)v33 + 392);
          v33[10] = *(__int128 *)((char *)v33 + 376);
          v33[11] = v266;
          v267 = *(__int128 *)((char *)v33 + 360);
          v33[8] = *(__int128 *)((char *)v33 + 344);
          v33[9] = v267;
          v268 = *(__int128 *)((char *)v33 + 264);
          v33[2] = *(__int128 *)((char *)v33 + 248);
          v33[3] = v268;
          v269 = *(__int128 *)((char *)v33 + 232);
          *v33 = *(__int128 *)((char *)v33 + 216);
          v33[1] = v269;
          v270 = *(_QWORD *)(v258 + 2408) + 8;
          v271 = *(_QWORD *)v395
               + ((v263 * *(unsigned __int16 *)(v270 + 2 * SWORD2(v454[0]))) >> (8
                                                                                               * (WORD2(v454[0]) == 0)));
          *((_QWORD *)&v453 + 1) = v271;
          v272 = v447
               + ((v448 * *(unsigned __int16 *)(v270 + 2 * SWORD2(v448))) >> (8 * (WORD2(v448) == 0)));
          *((_QWORD *)&v447 + 1) = v272;
          if (v434 && v272 < v271)
          {
            v439 = 0;
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2400) + 8152))((2 << __cb), v431, v419, v424 + v381, v404, v411 + v381);
          }
          goto LABEL_254;
        }
      }
      *(_QWORD *)&v447 = v209;
      LODWORD(v448) = 0;
      v453 = v447;
      v454[0] = v448;
      goto LABEL_254;
    }
  }
LABEL_337:
  if (v146)
  {
    v371 = HIBYTE(v440) == 0;
    if (HIBYTE(v440))
      v372 = &v449;
    else
      v372 = &v443;
    v373 = *(_QWORD *)v146 + *(_QWORD *)v372;
    *(_QWORD *)v146 = v373;
    v374 = &v450;
    if (v371)
      v374 = &v444;
    v375 = *(_DWORD *)(v146 + 16) + *(_DWORD *)v374;
    *(_DWORD *)(v146 + 16) = v375;
    *(_QWORD *)(v146 + 8) = v373
                          + ((v375 * *(unsigned __int16 *)(v14[301] + 2 * *(__int16 *)(v146 + 20) + 8)) >> (8 * (*(_WORD *)(v146 + 20) == 0)));
  }
  if (a8 && v434)
  {
    v376 = *(_DWORD *)(a8 + 16) + v444;
    v377 = v446;
    v378 = v447 + v445 + *(_QWORD *)a8 + v443;
    *(_QWORD *)a8 = v378;
    v379 = v448 + v377 + v376;
    *(_DWORD *)(a8 + 16) = v379;
    *(_QWORD *)(a8 + 8) = v378
                        + ((v379 * *(unsigned __int16 *)(v14[301] + 2 * *(__int16 *)(a8 + 20) + 8)) >> (8 * (*(_WORD *)(a8 + 20) == 0)));
  }
  return HIBYTE(v440) | v440 || v439 != 0;
}

uint64_t sub_1B6871B34(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  int v21;
  int v22;
  int v24;

  v4 = *(_QWORD *)(a1 + 2400);
  v5 = *(_QWORD *)(v4 + 856);
  v6 = *(_QWORD *)(v4 + 832);
  v7 = a2 - *(_DWORD *)(v4 + 808);
  v8 = a3 - *(_DWORD *)(v4 + 812);
  if (((*(unsigned __int16 *)(v5 + 2 * (v6 * ((uint64_t)v8 >> 3) + (v7 >> 3))) >> 2) & 3) <= a4)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    LODWORD(v9) = a4;
    v10 = a3;
    v11 = a2;
    v20 = *(_QWORD *)(a1 + 2400);
    v12 = 0;
    v13 = ~(*(_DWORD *)(a1 + 2432) + a4) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 2384) + 2009);
    v21 = *(_DWORD *)(v4 + 812);
    v22 = *(_DWORD *)(v4 + 808);
    do
    {
      v24 = v12;
      v14 = ((1 << v13) + v11);
      v15 = ((1 << v13) + v10);
      v9 = (v9 + 1);
      v16 = sub_1B6871B34(a1, v11, v10, v9, 0);
      v17 = v16 | sub_1B6871B34(a1, v14, v10, v9, 1);
      v18 = sub_1B6871B34(a1, v11, v15, v9, 2);
      v7 = v14 - v22;
      v8 = v15 - v21;
      v12 = v24 | v18 | v17;
      --v13;
      v10 = v15;
      v11 = v14;
    }
    while ((int)v9 < ((*(unsigned __int16 *)(v5 + 2 * (v6 * ((uint64_t)((int)v15 - v21) >> 3) + (((int)v14 - v22) >> 3))) >> 2) & 3));
    v4 = v20;
  }
  return v12 & 1 | (*(_BYTE *)(*(_QWORD *)(v4 + 896)
                                           + (*(uint64_t *)(v4 + 816) >> 2) * ((uint64_t)v8 >> 2)
                                           + (v7 >> 2)) != 0);
}

uint64_t sub_1B6871CD4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t *v13;
  uint64_t v14;

  if (a6)
  {
    v6 = 0;
    v7 = a5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      if (v7)
      {
        v8 = 0;
        for (i = 0; i < v7; i += 32)
        {
          v10 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 16), 6uLL);
          v11 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 32), 6uLL);
          v12 = vshlq_n_s16(*(int16x8_t *)(a3 + v8 + 48), 6uLL);
          v13 = (int16x8_t *)(result + v8);
          *v13 = vshlq_n_s16(*(int16x8_t *)(a3 + v8), 6uLL);
          v13[1] = v10;
          v13[2] = v11;
          v13[3] = v12;
          v8 += 64;
        }
      }
      else
      {
        LODWORD(i) = 0;
      }
      i = i;
      if (i < a5)
      {
        v14 = 2 * i;
        do
        {
          *(int16x8_t *)(result + v14) = vshlq_n_s16(*(int16x8_t *)(a3 + v14), 6uLL);
          i += 8;
          v14 += 16;
        }
        while (i < a5);
      }
      ++v6;
      a3 += 2 * a4;
      result += 2 * a2;
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1B6871D78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t *v13;
  uint64_t v14;

  if (a6)
  {
    v6 = 0;
    v7 = a5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      if (v7)
      {
        v8 = 0;
        for (i = 0; i < v7; i += 32)
        {
          v10 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 16), 6uLL);
          v11 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 32), 6uLL);
          v12 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8 + 48), 6uLL);
          v13 = (uint16x8_t *)(result + v8);
          *v13 = vshrq_n_u16(*(uint16x8_t *)(a3 + v8), 6uLL);
          v13[1] = v10;
          v13[2] = v11;
          v13[3] = v12;
          v8 += 64;
        }
      }
      else
      {
        LODWORD(i) = 0;
      }
      i = i;
      if (i < a5)
      {
        v14 = 2 * i;
        do
        {
          *(uint16x8_t *)(result + v14) = vshrq_n_u16(*(uint16x8_t *)(a3 + v14), 6uLL);
          i += 8;
          v14 += 16;
        }
        while (i < a5);
      }
      ++v6;
      a3 += 2 * a4;
      result += 2 * a2;
    }
    while (v6 != a6);
  }
  return result;
}

float sub_1B6871E1C(unint64_t a1, unint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6, unsigned int *a7)
{
  unsigned int v7;
  int32x4_t v8;
  uint64_t v9;
  unint64_t v10;
  __int16 v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  int16x8_t *v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  int8x8_t v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  int v28;
  unsigned int v29;
  char *v30;
  int v31;
  unsigned int v32;
  int v33;
  char *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float result;

  v7 = *a7;
  v8 = 0uLL;
  if (a2 >= 2)
  {
    v9 = 0;
    v10 = a2 >> 1;
    v11 = v7 + a2 * a1;
    v12.i64[0] = 0x43004300430043;
    v12.i64[1] = 0x43004300430043;
    v13.i64[0] = 0x200020002000200;
    v13.i64[1] = 0x200020002000200;
    v14.i64[0] = 0x3000300030003;
    v14.i64[1] = 0x3000300030003;
    v15 = *a7;
    v16 = *a7;
    do
    {
      v15 = ((_WORD)v15 + (_WORD)a1) & 0xFFF;
      v17 = v11 & 0xFFF;
      if (a1 == 7)
      {
        LODWORD(v19) = 0;
      }
      else
      {
        v18 = 0;
        v19 = 0;
        do
        {
          v20 = (int16x8_t *)(*a4 + v18);
          v21 = vbsl_s8(vmovn_s16(vcgtq_s16(*v20, v12)), *(int8x8_t *)((char *)&unk_1B692904C + v16), *(int8x8_t *)((char *)&unk_1B692A053 + v16));
          v16 = ((_WORD)v16 + 8) & 0xFFF;
          v22 = vqshrun_n_s16(vaddw_s8(*v20, v21), 2uLL);
          v23 = vqshrun_n_s16(vaddw_s8(*(int16x8_t *)((char *)v20 + 2 * *a3), vbsl_s8(vmovn_s16(vcgtq_s16(*(int16x8_t *)((char *)v20 + 2 * *a3), v12)), *(int8x8_t *)((char *)&unk_1B692904C + v15), *(int8x8_t *)((char *)&unk_1B692A053 + v15))), 2uLL);
          v24 = vqshrun_n_s16(vaddw_s8(*(int16x8_t *)(a4[1] + v18), vbsl_s8(vand_s8(vmovn_s16(vcgtq_s16(vabdq_s16(*(int16x8_t *)(a4[1] + v18), v13), v14)), (int8x8_t)vcgt_u8((uint8x8_t)v22, (uint8x8_t)0x1111111111111111)), *(int8x8_t *)((char *)&unk_1B692904C + v17), *(int8x8_t *)((char *)&unk_1B692A053 + v17))), 2uLL);
          *(int8x8_t *)(*a6 + v19) = v22;
          *(int8x8_t *)(*a6 + *a5 + v19) = v23;
          *(int8x8_t *)(a6[1] + v19) = v24;
          v19 += 8;
          v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, vpadal_u8(vpadal_u8(vpaddl_u8((uint8x8_t)vand_s8(v23, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v22, (int8x8_t)0x101010101010101)), (uint8x8_t)vand_s8(v24, (int8x8_t)0x101010101010101)));
          v15 = ((_WORD)v15 + 8) & 0xFFF;
          v17 = ((_WORD)v17 + 8) & 0xFFF;
          v18 += 16;
        }
        while (a1 - 7 > v19);
      }
      v19 = v19;
      if (v19 >= a1)
      {
        v36 = *a5;
      }
      else
      {
        v25 = *a6;
        do
        {
          v26 = *(unsigned __int16 *)(*a4 + 2 * v19);
          if (v26 <= 0x43)
            v27 = (char *)&unk_1B692A053;
          else
            v27 = (char *)&unk_1B692904C;
          v28 = (int)(v27[v16] + v26) >> 2;
          if (v28 >= 255)
            v28 = 255;
          *(_BYTE *)(v25 + v19) = v28 & ~(v28 >> 31);
          v29 = *(unsigned __int16 *)(*a4 + 2 * (v19 + *a3));
          if (v29 <= 0x43)
            v30 = (char *)&unk_1B692A053;
          else
            v30 = (char *)&unk_1B692904C;
          v31 = (int)(v30[v15] + v29) >> 2;
          if (v31 >= 255)
            v31 = 255;
          *(_BYTE *)(*a6 + *a5 + v19) = v31 & ~(v31 >> 31);
          v32 = *(unsigned __int16 *)(a4[1] + 2 * v19);
          if (*(unsigned __int8 *)(*a6 + v19) < 0x12u)
            goto LABEL_24;
          v33 = v32 - 512;
          if (v32 < 0x200)
            v33 = 512 - v32;
          v34 = (char *)&unk_1B692904C;
          if (v33 <= 3)
LABEL_24:
            v34 = (char *)&unk_1B692A053;
          v16 = ((_WORD)v16 + 1) & 0xFFF;
          v15 = ((_WORD)v15 + 1) & 0xFFF;
          v35 = (int)(v34[v17] + v32) >> 2;
          v17 = ((_WORD)v17 + 1) & 0xFFF;
          if (v35 >= 255)
            v35 = 255;
          *(_BYTE *)(a6[1] + v19) = v35 & ~(v35 >> 31);
          v25 = *a6;
          v36 = *a5;
          *a7 += (*(_BYTE *)(a6[1] + v19) & 1) + (*(_BYTE *)(*a6 + v19 + *a5) & 1) + (*(_BYTE *)(*a6 + v19) & 1);
          ++v19;
        }
        while (a1 != v19);
      }
      v37 = dword_1B6925030[((_WORD)v7 + (_WORD)v9) & 0xFFF];
      LOWORD(v15) = v37 + v15;
      v11 = v37 + v17;
      v38 = a4[1] + 2 * a3[1];
      v16 = v15 & 0xFFF;
      ++v9;
      *a4 += 4 * *a3;
      a4[1] = v38;
      v39 = *a6 + 2 * v36;
      v40 = a6[1] + a5[1];
      *a6 = v39;
      a6[1] = v40;
    }
    while (v9 != v10);
    v7 = *a7;
  }
  result = COERCE_FLOAT(vaddvq_s32(v8));
  *a7 = LODWORD(result) + v7;
  return result;
}

uint64_t sub_1B6872128(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E6A14DE8;
  return sub_1B682B3E0(a1);
}

void sub_1B6872138(_QWORD *a1)
{
  *a1 = &off_1E6A14DE8;
  sub_1B682B3E0((uint64_t)a1);
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B6872168(uint64_t a1, uint64_t a2, CMSampleBufferRef sbuf)
{
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFData *Value;
  const __CFData *v8;
  const UInt8 *BytePtr;
  int Length;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;

  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (!SampleAttachmentsArray)
    return 4294954394;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
  if (!ValueAtIndex)
    return 4294954394;
  Value = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, CFSTR("MBStatistics"));
  if (!Value)
    return 4294954394;
  v8 = Value;
  BytePtr = CFDataGetBytePtr(Value);
  Length = CFDataGetLength(v8);
  result = 4294954394;
  if (BytePtr && Length >= 1)
  {
    v12 = Length == 320 * *(int *)(a1 + 108) ? 0 : 4294954394;
    if (Length == 320 * *(int *)(a1 + 108))
    {
      if (*(_QWORD *)(a2 + 400) && (v13 = *(_QWORD *)(a2 + 392), *(_QWORD *)(v13 + 8)))
        v14 = *(_QWORD **)v13;
      else
        v14 = 0;
      v15 = 0;
      do
      {
        (*(void (**)(const UInt8 *, _QWORD *))(a1 + 2560))(BytePtr, v14);
        BytePtr += 320;
        ++v15;
      }
      while (v15 < *(_DWORD *)(a1 + 108));
      sub_1B682B5C8(a1, a2, v14);
      return v12;
    }
  }
  return result;
}

uint64_t sub_1B6872268(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];

  v2 = 0;
  v50[2] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(result + 240);
  v4 = (v3 >> 12);
  v5 = (_DWORD)v3 << 22;
  v6 = (int)((_DWORD)v3 << 22) >> 21;
  v7 = (int)((_DWORD)v3 << 22) >> 20;
  v8 = *a2;
  v9 = *a2 * 4 * v4 + v6;
  v10 = *a2 * ((4 * (_DWORD)v4) | 2u) + v6;
  v50[0] = v9;
  v50[1] = v10;
  v11 = 16 * v8 * v4 + v7;
  do
  {
    v47[v2++] = v11;
    v11 += 4 * v8;
  }
  while (v2 != 4);
  v12 = v8 * v4 + (v5 >> 22);
  *(_BYTE *)(a2[1] + v12) = *(_BYTE *)(result + 80) & 0x3F;
  *(_BYTE *)(a2[16] + v12) = *(_BYTE *)(result + 83) & 0x3F;
  *(_BYTE *)(a2[3] + v12) = (*(_DWORD *)(result + 80) & 0x400000) != 0;
  *(_WORD *)(a2[4] + 2 * v12) = *(_WORD *)(result + 102);
  *(_WORD *)(a2[18] + 2 * v12) = *(_WORD *)(result + 106);
  *(_BYTE *)(a2[13] + v9) = *(_BYTE *)(result + 92) & 0xF;
  v13 = v9 | 1;
  *(_BYTE *)(a2[13] + v13) = *(_BYTE *)(result + 92) >> 4;
  *(_BYTE *)(a2[13] + v10) = *(_BYTE *)(result + 93) & 0xF;
  v14 = v10 | 1;
  *(_BYTE *)(a2[13] + v14) = (unsigned __int16)*(_DWORD *)(result + 92) >> 12;
  v15 = v47[0];
  v16 = v47[1];
  *(_BYTE *)(a2[14] + v47[0]) = *(_BYTE *)(result + 84) & 0xF;
  *(_BYTE *)(v15 + a2[14] + 1) = *(_BYTE *)(result + 84) >> 4;
  *(_BYTE *)(v15 + a2[14] + 2) = *(_BYTE *)(result + 85) & 0xF;
  *(_BYTE *)(v15 + a2[14] + 3) = (unsigned __int16)*(_DWORD *)(result + 84) >> 12;
  *(_BYTE *)(a2[14] + v16) = *(_BYTE *)(result + 86) & 0xF;
  *(_BYTE *)(v16 + a2[14] + 1) = (*(_DWORD *)(result + 84) >> 20) & 0xF;
  *(_BYTE *)(v16 + a2[14] + 2) = *(_BYTE *)(result + 87) & 0xF;
  *(_BYTE *)(v16 + a2[14] + 3) = *(_DWORD *)(result + 84) >> 28;
  v17 = v48;
  v18 = v49;
  *(_BYTE *)(a2[14] + v48) = *(_BYTE *)(result + 88) & 0xF;
  *(_BYTE *)(v17 + a2[14] + 1) = *(_BYTE *)(result + 88) >> 4;
  *(_BYTE *)(v17 + a2[14] + 2) = *(_BYTE *)(result + 89) & 0xF;
  *(_BYTE *)(v17 + a2[14] + 3) = (unsigned __int16)*(_DWORD *)(result + 88) >> 12;
  *(_BYTE *)(a2[14] + v18) = *(_BYTE *)(result + 90) & 0xF;
  *(_BYTE *)(v18 + a2[14] + 1) = (*(_DWORD *)(result + 88) >> 20) & 0xF;
  *(_BYTE *)(v18 + a2[14] + 2) = *(_BYTE *)(result + 91) & 0xF;
  *(_BYTE *)(v18 + a2[14] + 3) = *(_DWORD *)(result + 88) >> 28;
  *(_BYTE *)(a2[12] + v12) = *(_BYTE *)(result + 94) & 3;
  *(_BYTE *)(a2[15] + v12) = (*(_DWORD *)(result + 92) >> 20) & 3;
  *(_BYTE *)(a2[40] + v9) = *(_BYTE *)(result + 96) & 0x1F;
  *(_BYTE *)(a2[40] + v13) = (*(_DWORD *)(result + 96) >> 5) & 0x1F;
  *(_BYTE *)(a2[40] + v10) = (*(_DWORD *)(result + 96) >> 10) & 0x1F;
  *(_BYTE *)(a2[40] + v14) = (*(_DWORD *)(result + 96) >> 15) & 0x1F;
  if (*((int *)a2 + 272) >= 1)
  {
    v19 = 0;
    v20 = result + 108;
    do
    {
      v21 = 0;
      v22 = 0;
      v23 = &a2[v19];
      v24 = v23 + 20;
      v25 = v23 + 22;
      do
      {
        v26 = 0;
        v27 = v47[v21];
        v28 = v22;
        v29 = v20 + 4 * v22;
        v30 = 4 * v27;
        do
        {
          *(_WORD *)(*v24 + v30) = (__int16)(32 * *(_WORD *)(v29 + 4 * v26)) >> 5;
          *(_WORD *)(*v24 + v30 + 2) = (__int16)(*(_DWORD *)(v29 + 4 * v26) >> 6) >> 6;
          *(_BYTE *)(*v25 + v27 + v26) = (32 * *(_DWORD *)(v29 + 4 * v26)) >> 29;
          ++v26;
          v30 += 4;
        }
        while (v26 != 4);
        v22 = v28 + 4;
        ++v21;
      }
      while (v21 != 4);
      ++v19;
      v20 += 64;
    }
    while (v19 < *((int *)a2 + 272));
  }
  v31 = 0;
  v32 = 0;
  v33 = 4 * v12;
  *(_WORD *)(a2[24] + v33) = (__int16)(32 * *(_WORD *)result) >> 5;
  *(_WORD *)(a2[24] + 4 * v12 + 2) = (__int16)(*(_DWORD *)result >> 6) >> 6;
  *(_WORD *)(a2[28] + 2 * v12) = *(_DWORD *)(result + 4);
  *(_WORD *)(a2[25] + v33) = (__int16)(32 * *(_WORD *)(result + 32)) >> 5;
  *(_WORD *)(a2[25] + 4 * v12 + 2) = (__int16)(*(_DWORD *)(result + 32) >> 6) >> 6;
  *(_WORD *)(a2[29] + 2 * v12) = *(_DWORD *)(result + 36);
  v34 = 1;
  do
  {
    v35 = 0;
    v36 = 0;
    v37 = v34;
    v38 = v50[v31];
    while (1)
    {
      v39 = result + 4 * v32 + 4 * v35;
      v40 = v38 + v36;
      v41 = 4 * v40;
      *(_WORD *)(a2[32] + v41) = (__int16)(32 * *(_WORD *)(v39 + 8)) >> 5;
      *(_WORD *)(a2[32] + 4 * v40 + 2) = (__int16)(*(_DWORD *)(v39 + 8) >> 6) >> 6;
      *(_WORD *)(a2[33] + v41) = (__int16)(32 * *(_WORD *)(v39 + 40)) >> 5;
      *(_WORD *)(a2[33] + 4 * v40 + 2) = (__int16)(*(_DWORD *)(v39 + 40) >> 6) >> 6;
      v42 = (uint64_t)(v32 + (int)v35) >> 1;
      v43 = *(_DWORD *)(result + 4 * ((v32 + (int)v35) >> 1) + 24);
      if ((_DWORD)v35 == 1)
        break;
      *(_WORD *)(a2[36] + 2 * v40) = v43;
      *(_WORD *)(a2[37] + 2 * v40) = *(_DWORD *)(result + 4 * v42 + 56);
      ++v35;
      v36 = 1;
    }
    v34 = 0;
    *(_WORD *)(a2[36] + 2 * v40) = HIWORD(v43);
    *(_WORD *)(a2[37] + 2 * v40) = *(_WORD *)(result + 4 * v42 + 58);
    v32 += 2;
    v31 = 1;
  }
  while ((v37 & 1) != 0);
  v44 = 0;
  v45 = result + 256;
  v46 = a2 + 42;
  do
  {
    *(_WORD *)(*v46 + 2 * v12) = *(_DWORD *)(v45 + v44 - 12);
    *(_DWORD *)(v46[3] + 4 * v12) = *(_DWORD *)(v45 + v44) & 0xFFFFFF;
    v44 += 4;
    ++v46;
  }
  while (v44 != 12);
  return result;
}

__n128 sub_1B687277C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  uint64_t v25;
  uint64_t v26;
  int16x8_t v27;
  int16x8_t v28;
  uint64_t v29;
  int16x8_t v30;
  uint64_t v31;
  __n128 result;
  __int128 v33;
  _QWORD v34[5];

  v2 = 0;
  v34[4] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a1 + 240);
  v4 = (v3 >> 12);
  v5 = (_DWORD)v3 << 22;
  v6 = *a2;
  v7 = 16 * *a2 * v4 + ((int)((_DWORD)v3 << 22) >> 20);
  v8 = 4 * *a2;
  do
  {
    v34[v2++] = v7;
    v7 += v8;
  }
  while (v2 != 4);
  v9 = 0;
  v10 = v5 >> 22;
  v11 = v5 >> 21;
  v12 = v6 * v4 + v10;
  v13 = v6 * 4 * v4 + v11;
  *(_BYTE *)(a2[1] + v12) = *(_BYTE *)(a1 + 80) & 0x3F;
  *(_BYTE *)(a2[3] + v12) = (*(_DWORD *)(a1 + 80) & 0x400000) != 0;
  *(_WORD *)(a2[4] + 2 * v12) = *(_WORD *)(a1 + 102);
  v14 = v6 * ((4 * (_DWORD)v4) | 2u) + v11;
  *(_BYTE *)(a2[16] + v12) = *(_BYTE *)(a1 + 83) & 0x3F;
  *(_WORD *)(a2[18] + 2 * v12) = *(_WORD *)(a1 + 106);
  v15 = *(int8x16_t *)(a1 + 84);
  v16.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v16.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v17 = vandq_s8(v15, v16);
  v18 = (int8x16_t)vshrq_n_u8((uint8x16_t)v15, 4uLL);
  v19 = vzip1q_s8(v17, v18);
  v20 = v34[1];
  *(_DWORD *)(a2[14] + v34[0]) = v19.i32[0];
  *(_DWORD *)(a2[14] + v20) = v19.i32[1];
  v21 = v34[3];
  *(_DWORD *)(a2[14] + v34[2]) = v19.i32[2];
  v22 = vzip2q_s8(v17, v18);
  *(_DWORD *)(a2[14] + v21) = v19.i32[3];
  *(_WORD *)(a2[13] + v13) = v22.i16[0];
  *(_WORD *)(a2[13] + v14) = v22.i16[1];
  v17.i64[0] = 0x303030303030303;
  v17.i64[1] = 0x303030303030303;
  v23 = vandq_s8(v22, v17);
  *(_BYTE *)(a2[12] + v12) = v23.i8[4];
  *(_BYTE *)(a2[15] + v12) = v23.i8[5];
  *(_BYTE *)(a2[40] + v13) = *(_BYTE *)(a1 + 96) & 0x1F;
  *(_BYTE *)(a2[40] + (v13 | 1)) = (*(_DWORD *)(a1 + 96) >> 5) & 0x1F;
  *(_BYTE *)(a2[40] + v14) = (*(_DWORD *)(a1 + 96) >> 10) & 0x1F;
  *(_BYTE *)(a2[40] + (v14 | 1)) = (*(_DWORD *)(a1 + 96) >> 15) & 0x1F;
  do
  {
    v24 = *(int16x8_t *)(a1 + 16 * v9 + 108);
    v25 = v34[v9];
    *(int16x8_t *)(a2[20] + 4 * v25) = vtrn1q_s16(vshrq_n_s16(vshlq_n_s16(v24, 5uLL), 5uLL), (int16x8_t)vshrq_n_s32(vshlq_n_s32((int32x4_t)v24, 0xAuLL), 0x16uLL));
    *(_DWORD *)(a2[22] + v25) = vqtbl1q_s8(vshrq_n_s8(vshlq_n_s8((int8x16_t)v24, 5uLL), 5uLL), (int8x16_t)xmmword_1B69175A0).u32[0];
    ++v9;
  }
  while (v9 != 4);
  v26 = 4 * v12;
  *(_WORD *)(a2[24] + v26) = (__int16)(32 * *(_WORD *)a1) >> 5;
  *(_WORD *)(a2[24] + 4 * v12 + 2) = (__int16)(*(_DWORD *)a1 >> 6) >> 6;
  *(_WORD *)(a2[28] + 2 * v12) = *(_DWORD *)(a1 + 4);
  *(_WORD *)(a2[25] + v26) = (__int16)(32 * *(_WORD *)(a1 + 32)) >> 5;
  *(_WORD *)(a2[25] + 4 * v12 + 2) = (__int16)(*(_DWORD *)(a1 + 32) >> 6) >> 6;
  *(_WORD *)(a2[29] + 2 * v12) = *(_DWORD *)(a1 + 36);
  v27 = vtrn1q_s16(vshrq_n_s16(vshlq_n_s16(*(int16x8_t *)(a1 + 8), 5uLL), 5uLL), (int16x8_t)vshrq_n_s32(vshlq_n_s32(*(int32x4_t *)(a1 + 8), 0xAuLL), 0x16uLL));
  v28 = *(int16x8_t *)(a1 + 40);
  v29 = 4 * v13;
  *(_QWORD *)(a2[32] + v29) = v27.i64[0];
  v30 = vtrn1q_s16(vshrq_n_s16(vshlq_n_s16(v28, 5uLL), 5uLL), (int16x8_t)vshrq_n_s32(vshlq_n_s32((int32x4_t)v28, 0xAuLL), 0x16uLL));
  *(_QWORD *)(a2[32] + 4 * v14) = v27.i64[1];
  *(_QWORD *)(a2[33] + v29) = v30.i64[0];
  *(_QWORD *)(a2[33] + 4 * v14) = v30.i64[1];
  v27.i64[0] = *(_QWORD *)(a1 + 24);
  v30.i64[0] = *(_QWORD *)(a1 + 56);
  v31 = 2 * v13;
  *(_DWORD *)(a2[36] + v31) = v27.i32[0];
  *(_DWORD *)(a2[36] + 2 * v14) = v27.i32[1];
  *(_DWORD *)(a2[37] + v31) = v30.i32[0];
  *(_DWORD *)(a2[37] + 2 * v14) = v30.i32[1];
  result = *(__n128 *)(a1 + 244);
  v33 = *(_OWORD *)(a1 + 256);
  *(_WORD *)(a2[42] + 2 * v12) = result.n128_u16[0];
  *(_WORD *)(a2[43] + 2 * v12) = result.n128_u16[2];
  *(_WORD *)(a2[44] + 2 * v12) = result.n128_u16[4];
  *(_DWORD *)(a2[45] + 4 * v12) = v33 & 0xFFFFFF;
  *(_DWORD *)(a2[46] + 4 * v12) = DWORD1(v33) & 0xFFFFFF;
  *(_DWORD *)(a2[47] + 4 * v12) = DWORD2(v33) & 0xFFFFFF;
  return result;
}

uint64_t sub_1B6872AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1B682B2F4(a1, a2);
  *(_QWORD *)v3 = &off_1E6A14DE8;
  *(_DWORD *)(v3 + 148) = 1;
  if (*(_BYTE *)(*(_QWORD *)(v3 + 88) + 581))
  {
    *(_QWORD *)(a1 + 2560) = sub_1B6872268;
    if (qword_1EDBB4CB8 != -1)
      dispatch_once_f(&qword_1EDBB4CB8, 0, (dispatch_function_t)sub_1B67ED9E8);
    if (dword_1EDBB4CB0 >= 2)
      *(_QWORD *)(a1 + 2560) = sub_1B687277C;
  }
  return a1;
}

void sub_1B6872B74(uint64_t a1)
{
  sub_1B6872B98(a1);
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B6872B98(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  *(_QWORD *)a1 = &off_1E6A15120;
  v2 = *(NSObject **)(a1 + 120);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_sync(*(dispatch_queue_t *)(a1 + 112), &unk_1E6A17670);
    dispatch_release(*(dispatch_object_t *)(a1 + 120));
    *(_QWORD *)(a1 + 120) = 0;
  }
  v3 = *(NSObject **)(a1 + 112);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 112) = 0;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  sub_1B6830A90(*(_QWORD **)(a1 + 32));
  return a1;
}

void sub_1B6872C10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD, double);
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v1 = *(_QWORD *)(a1 + 32);
  std::mutex::lock((std::mutex *)(v1 + 48));
  v2 = sub_1B67ED8E0();
  v3 = v2;
  v4 = *(void (**)(_QWORD, double))(v1 + 8);
  if (v4)
    v4(*(_QWORD *)(v1 + 16), (double)((v2 - *(_QWORD *)(v1 + 128)) * qword_1EF13914C / HIDWORD(qword_1EF13914C)) / 1000000000.0);
  v5 = *(_QWORD **)(v1 + 24);
  if (v5 != (_QWORD *)(v1 + 32))
  {
    do
    {
      if (*((_DWORD *)v5 + 12) == 2)
        v5[5] = 0;
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != (_QWORD *)(v1 + 32));
  }
  *(_QWORD *)(v1 + 128) = v3;
  std::mutex::unlock((std::mutex *)(v1 + 48));
}

void sub_1B6872CE4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6872CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD handler[5];

  *(_QWORD *)a1 = &off_1E6A15120;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 850045863;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = sub_1B67ED8E0();
  v4 = dispatch_queue_create("com.apple.videoprocessing.statsq", 0);
  *(_QWORD *)(a1 + 112) = v4;
  if (!v4)
  {
    v5 = *(NSObject **)(a1 + 120);
    if (!v5)
      return a1;
    goto LABEL_3;
  }
  v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v4);
  *(_QWORD *)(a1 + 120) = v5;
  if (v5)
  {
LABEL_3:
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = sub_1B6872C10;
    handler[3] = &unk_1E6A17630;
    handler[4] = a1;
    dispatch_source_set_event_handler(v5, handler);
    v6 = *(NSObject **)(a1 + 120);
    v7 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v6, v7, 0x3B9ACA00uLL, 0x5F5E100uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 120));
  }
  return a1;
}

void sub_1B6872E28(_Unwind_Exception *a1)
{
  std::mutex *v1;
  _QWORD **v2;

  std::mutex::~mutex(v1);
  sub_1B6830A90(*v2);
  _Unwind_Resume(a1);
}

void sub_1B6872E44(uint64_t a1, uint64_t *a2, double a3)
{
  std::mutex *v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;

  v9 = a2;
  v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v7 = sub_1B6872EE0((uint64_t **)(a1 + 24), (unint64_t)a2, &v9);
  v8 = *((_DWORD *)v7 + 12);
  if (v8 == 2)
    goto LABEL_4;
  if (!v8)
  {
    *((_DWORD *)v7 + 12) = 2;
LABEL_4:
    *((double *)v7 + 5) = *((double *)v7 + 5) + a3;
  }
  std::mutex::unlock(v6);
}

void sub_1B6872ECC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1B6872EE0(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x38uLL);
    v10 = *a3;
    v7[5] = 0;
    v7[6] = 0;
    v7[4] = v10;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1B6779C90(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1B6872FAC(uint64_t a1, uint64_t *a2, double a3)
{
  std::mutex *v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;

  v9 = a2;
  v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v7 = sub_1B6872EE0((uint64_t **)(a1 + 24), (unint64_t)a2, &v9);
  v8 = *((_DWORD *)v7 + 12);
  if (v8 == 1)
    goto LABEL_4;
  if (!v8)
  {
    *((_DWORD *)v7 + 12) = 1;
LABEL_4:
    *((double *)v7 + 5) = a3;
  }
  std::mutex::unlock(v6);
}

void sub_1B687302C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6873040(uint64_t result, _QWORD *a2, int a3, __int16 *a4, char a5)
{
  uint64_t i;
  int v6;

  if (a3 >= 1)
  {
    for (i = 0; i != a3; *(_BYTE *)(result + i++) = v6 & ~(v6 >> 31))
    {
      v6 = ((1 << (a5 - 1))
          + *a4 * *(unsigned __int8 *)(*a2 + i)
          + a4[1] * *(unsigned __int8 *)(a2[1] + i)
          + a4[2] * *(unsigned __int8 *)(a2[2] + i)
          + a4[3] * *(unsigned __int8 *)(a2[3] + i)) >> a5;
      if (v6 >= 255)
        v6 = 255;
    }
  }
  return result;
}

uint64_t sub_1B68730BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void (*v12)(char *, __int128 *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const std::nothrow_t *v17;
  _WORD *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  _BYTE *v27;
  _WORD *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _WORD *v38;
  int v39;
  int v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t i;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  void (*v63)(char *, __int128 *);
  uint64_t v64;
  int v65;
  uint64_t v66;
  size_t v67;
  const std::nothrow_t *v68;
  _WORD *v69;
  _BYTE *v70;
  __int16 v71;
  int v72;
  uint64_t v73;
  _BYTE *v74;
  _WORD *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _WORD *v83;
  int v84;
  int v85;
  char *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  char *v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  char *v104;
  unint64_t v105;
  _QWORD v106[2];
  _QWORD *v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  void (*v113)(uint64_t, char *, uint64_t, uint64_t *, _WORD *, uint64_t, uint64_t);
  void (*v114)(char *, __int128 *, uint64_t, uint64_t *);
  void (*v115)(char *, __int128 *);
  uint64_t v116;
  uint64_t v117;
  _WORD *v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  uint64_t *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = a1[2];
  if (*a1 == v7 || a1[1] == a1[3])
    return 0xFFFFFFFFLL;
  v108 = v106;
  v107 = v106;
  v8 = *((unsigned int *)a1 + 18);
  v120 = *((_DWORD *)a1 + 19);
  v9 = *((int *)a1 + 16);
  LODWORD(v111) = *((_DWORD *)a1 + 17);
  v10 = 8 * (int)v8 / (int)v9;
  if (v10 >= 8)
    v10 = 8;
  if (v10 <= 1)
    v10 = 1;
  v11 = a1[4];
  v12 = (void (*)(char *, __int128 *))a1[6];
  v121 = &a1[32 * (unint64_t)(v10 - 1)];
  v13 = *((unsigned int *)a1 + 1060);
  v114 = (void (*)(char *, __int128 *, uint64_t, uint64_t *))a1[14];
  v115 = v12;
  v109 = a1;
  v113 = (void (*)(uint64_t, char *, uint64_t, uint64_t *, _WORD *, uint64_t, uint64_t))a1[16];
  v123 = 0u;
  v124 = 0u;
  MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v112 = (char *)v106 - ((v14 + 15) & 0x1FFFFFFF0);
  v15 = (v8 + 16);
  if ((int)v8 < -16)
    v16 = -1;
  else
    v16 = 2 * (int)v15;
  v17 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v18 = operator new[](v16, MEMORY[0x1E0DE4E10]);
  v19 = operator new[]((int)v15, v17);
  if ((int)v8 < 1)
  {
    v32 = 0;
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v27 = v19;
    v28 = v18;
    v29 = v8;
    do
    {
      v30 = v26 >> 16;
      v31 = v26 >> 8;
      v26 += ((_DWORD)v9 << 16) / (int)v8;
      *v27++ = v31 & 0xF0;
      *v28++ = v30 - v25;
      v25 = v30;
      --v29;
    }
    while (v29);
    v32 = v8;
  }
  v117 = v9;
  v34 = v121;
  v122 = v121 + 274;
  if ((int)v32 < (int)v15)
  {
    v35 = (int)v8 - 1;
    v36 = v15 - v32;
    v37 = &v19[v32];
    v38 = &v18[v32];
    do
    {
      *v38++ = v18[v35];
      *v37++ = v19[v35];
      --v36;
    }
    while (v36);
  }
  v118 = v18;
  v119 = (uint64_t)v19;
  v116 = v8;
  v121 = v34 + 18;
  if (v120 >= 1)
  {
    v39 = 0;
    v40 = 0;
    v41 = (char *)((unint64_t)(v112 + 31) & 0xFFFFFFFFFFFFFFF0);
    v42 = (_DWORD)v111 << 16;
    LODWORD(v112) = (_DWORD)v111 - 2;
    v43 = (_DWORD)v111 - 1;
    LODWORD(v111) = (_DWORD)v111 - 3;
    v110 = v117 - 1;
    v44 = v42 / v120;
    do
    {
      v45 = v39 >> 16;
      v46 = (v39 >> 16) - 1;
      if (v39 < 0x10000)
        v46 = 0;
      *(_QWORD *)&v123 = v6 + v11 * v46;
      *((_QWORD *)&v123 + 1) = v6 + v11 * ((uint64_t)v39 >> 16);
      if (v45 <= (int)v112)
        v47 = v45 + 1;
      else
        v47 = v43;
      v48 = v6 + v11 * v47;
      v49 = v45 <= (int)v111;
      v50 = v45 + 2;
      if (!v49)
        v50 = v43;
      *(_QWORD *)&v124 = v48;
      *((_QWORD *)&v124 + 1) = v6 + v11 * v50;
      v51 = v13;
      v52 = v117;
      v53 = v51;
      v114(v41, &v123, v117, &v121[2 * ((unsigned __int16)v39 >> 12)]);
      v54 = *v41;
      v55 = v41[v110];
      for (i = -1; i != -5; --i)
      {
        v41[i] = v54;
        v41[v52++] = v55;
      }
      v39 += v44;
      v13 = v53;
      v113(v7, v41, v116, v122, v118, v119, v53);
      v7 += (uint64_t)v115;
      ++v40;
    }
    while (v40 != v120);
  }
  if (v118)
    MEMORY[0x1BCC9811C](v118, 0x1000C80BDFB0063);
  v57 = v119;
  if (v119)
    v57 = MEMORY[0x1BCC9811C](v119, 0x1000C8077774924);
  v107 = v106;
  v106[1] = v106;
  v58 = v109[1];
  v59 = v109[5];
  v60 = *((int *)v109 + 16);
  LODWORD(v112) = *((_DWORD *)v109 + 17);
  v61 = v109[3];
  v117 = v109[7];
  v62 = *((_DWORD *)v109 + 18);
  LODWORD(v113) = *((_DWORD *)v109 + 19);
  v120 = *((_DWORD *)v109 + 1060);
  v63 = (void (*)(char *, __int128 *))v109[14];
  v114 = (void (*)(char *, __int128 *, uint64_t, uint64_t *))v109[17];
  v115 = v63;
  v123 = 0u;
  v124 = 0u;
  MEMORY[0x1E0C80A78](v57, v20, v21, v22, v23, v24);
  v111 = (char *)v106 - ((v64 + 15) & 0x1FFFFFFF0);
  v65 = v62 >> 1;
  v66 = ((v62 >> 1) + 16);
  if (v62 < -32)
    v67 = -1;
  else
    v67 = 2 * (int)v66;
  v68 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v69 = operator new[](v67, MEMORY[0x1E0DE4E10]);
  v70 = operator new[]((int)v66, v68);
  if (v62 < 2)
  {
    LODWORD(v73) = 0;
    v77 = v60;
  }
  else
  {
    v71 = 0;
    v72 = 0;
    if (v65 <= 1)
      v73 = 1;
    else
      v73 = v65;
    v74 = v70;
    v75 = v69;
    v76 = v73;
    v77 = v60;
    do
    {
      v78 = v72 >> 15;
      v79 = v72 >> 8;
      v72 += ((_DWORD)v60 << 16) / v62;
      LOWORD(v78) = v78 & 0xFFFE;
      *v74++ = v79 & 0xF0;
      *v75++ = v78 - v71;
      v71 = v78;
      --v76;
    }
    while (v76);
  }
  LODWORD(v116) = v62;
  if ((int)v73 < (int)v66)
  {
    v80 = v65 - 1;
    v81 = v66 - v73;
    v82 = &v70[v73];
    v83 = &v69[v73];
    do
    {
      *v83++ = v69[v80];
      *v82++ = v70[v80];
      --v81;
    }
    while (v81);
  }
  v118 = v69;
  v119 = (uint64_t)v70;
  if ((int)v113 >= 2)
  {
    v84 = 0;
    v85 = 0;
    v86 = (char *)((unint64_t)(v111 + 31) & 0xFFFFFFFFFFFFFFF0);
    v87 = (int)v113 >> 1;
    v88 = (int)v112 >> 1 << 16;
    LODWORD(v113) = ((int)v112 >> 1) - 2;
    v89 = ((int)v112 >> 1) - 1;
    LODWORD(v112) = ((int)v112 >> 1) - 3;
    if (v87 <= 1)
      v90 = 1;
    else
      v90 = v87;
    LODWORD(v111) = v90;
    v109 = (uint64_t *)(v77 - 2);
    v110 = v77 - 1;
    LODWORD(v108) = v88 / v87;
    v91 = &v86[v77];
    do
    {
      v92 = v84 >> 16;
      v93 = (v84 >> 16) - 1;
      if (v84 < 0x10000)
        v93 = 0;
      *(_QWORD *)&v123 = v58 + v59 * v93;
      *((_QWORD *)&v123 + 1) = v58 + v59 * ((uint64_t)v84 >> 16);
      if (v92 <= (int)v113)
        v94 = v92 + 1;
      else
        v94 = v89;
      v95 = v58 + v59 * v94;
      v49 = v92 <= (int)v112;
      v96 = v92 + 2;
      if (!v49)
        v96 = v89;
      *(_QWORD *)&v124 = v95;
      *((_QWORD *)&v124 + 1) = v58 + v59 * v96;
      v97 = v77;
      v115(v86, &v123);
      v98 = *v86;
      v99 = v86[1];
      v100 = -2;
      v101 = 1;
      v102 = v86[v110];
      v103 = *((_BYTE *)v109 + (_QWORD)v86);
      do
      {
        v104 = &v86[v100];
        *v104 = v98;
        v104[1] = v99;
        v91[v101] = v102;
        v91[v101 - 1] = v103;
        v105 = v101 - 1;
        v101 += 2;
        v100 -= 2;
      }
      while (v105 < 6);
      v84 += (int)v108;
      ((void (*)(uint64_t, char *, _QWORD, uint64_t *, _WORD *, uint64_t, _QWORD))v114)(v61, v86, v116, v122, v118, v119, v120);
      v61 += v117;
      ++v85;
      v77 = v97;
    }
    while (v85 != (_DWORD)v111);
  }
  if (v118)
    MEMORY[0x1BCC9811C](v118, 0x1000C80BDFB0063, v77);
  if (v119)
    MEMORY[0x1BCC9811C](v119, 0x1000C8077774924, v77);
  return 0;
}

int32x4_t sub_1B6873778(uint64_t *a1, _DWORD *a2, _QWORD *a3, uint64x2_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int32x4_t v8;
  uint64x2_t v9;
  int8x16_t v10;
  uint64x2_t v11;
  int8x16_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int v22;
  uint64_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint8x8_t *v44;
  uint64_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int v48;
  int32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t *v67;
  int8x16_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  uint64_t v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  uint8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int32x4_t result;
  int16x8_t v92;

  v4 = *a1;
  v5 = a1[2];
  v6 = *((_DWORD *)a1 + 8);
  v7 = *((_DWORD *)a1 + 12);
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v7) & 8);
  v8 = 0uLL;
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = (int8x16_t)vshlq_u64(v9, a4);
  v11.i64[0] = 0;
  v11.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v6 & 8))+ ((v7 >> 1) | 0x1FFFFFFE)));
  v12 = (int8x16_t)vshlq_u64(v9, v11);
  v13 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
  v14 = (v6 - 16);
  if (v6 > 16)
  {
    v16 = a1[1];
    v17 = a1[3];
    if (v13 < 1)
    {
      v27 = 0uLL;
      v26 = 0uLL;
      v25 = 0uLL;
      v20 = 0uLL;
      v21 = 0uLL;
    }
    else
    {
      v20 = 0uLL;
      v21 = 0uLL;
      v22 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
      v23 = *a1;
      v24 = (int8x16_t *)a1[2];
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      do
      {
        v28 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v23 - 1), v10);
        v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)v23, v10);
        v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v23 + 1), v10);
        v31 = (uint8x16_t)vandq_s8(*v24, v10);
        v32 = (int8x16_t)vcgtq_u8(v29, v28);
        v33 = (int8x16_t)vcgtq_u8(v29, v30);
        v34 = (int8x16_t)vcgtq_u8(v28, v29);
        v35 = (int8x16_t)vcgtq_u8(v30, v29);
        v36 = vandq_s8(v35, v34);
        v37 = vandq_s8(v33, v32);
        v38 = veorq_s8(v33, v32);
        v39 = veorq_s8(v35, v34);
        v40 = vbicq_s8(v39, v38);
        v41 = vbicq_s8(v38, v39);
        v20 = vsubq_s8(v20, v36);
        v25 = vsubq_s8(v25, v40);
        v26 = vsubq_s8(v26, v41);
        v27 = vsubq_s8(v27, v37);
        v42 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v29.i8);
        v43 = (int8x16_t)vsubl_high_u8(v31, v29);
        v21 = vpadalq_s16(v21, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v36.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v36))), vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v40)))));
        v8 = vpadalq_s16(v8, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v41))), vaddq_s16((int16x8_t)vandq_s8(v42, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_high_s8(v37)))));
        v23 += v16;
        v24 = (int8x16_t *)((char *)v24 + v17);
        --v22;
      }
      while (v22);
    }
    v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v20, v25));
    v18 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v26, v27));
    v8 = vpaddq_s32(v21, v8);
    LODWORD(v15) = 16;
  }
  else
  {
    LODWORD(v15) = 0;
    v12 = vandq_s8(v12, v10);
    v16 = a1[1];
    v17 = a1[3];
    v18 = 0uLL;
    v19 = 0uLL;
  }
  if ((int)v15 < (int)v14)
  {
    v15 = v15;
    do
    {
      if (v13 < 1)
      {
        v49 = 0uLL;
        v52 = 0uLL;
        v51 = 0uLL;
        v50 = 0uLL;
        v46 = 0uLL;
        v47 = 0uLL;
      }
      else
      {
        v44 = (uint8x8_t *)(v5 + v15);
        v45 = v4 + v15;
        v46 = 0uLL;
        v47 = 0uLL;
        v48 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        v52 = 0uLL;
        do
        {
          v53 = *(uint8x16_t *)(v45 - 1);
          v54 = *(uint8x16_t *)(v45 + 1);
          v55 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v45, v53);
          v56 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v45, v54);
          v57 = (int8x16_t)vcgtq_u8(v53, *(uint8x16_t *)v45);
          v58 = (int8x16_t)vcgtq_u8(v54, *(uint8x16_t *)v45);
          v59 = vandq_s8(v58, v57);
          v60 = vandq_s8(v56, v55);
          v61 = veorq_s8(v56, v55);
          v62 = veorq_s8(v58, v57);
          v63 = vbicq_s8(v62, v61);
          v64 = vbicq_s8(v61, v62);
          v46 = vsubq_s8(v46, v59);
          v50 = vsubq_s8(v50, v63);
          v51 = vsubq_s8(v51, v64);
          v52 = vsubq_s8(v52, v60);
          v65 = (int8x16_t)vsubl_u8(*v44, *(uint8x8_t *)v45);
          v66 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v44->i8, *(uint8x16_t *)v45);
          v47 = vpadalq_s16(v47, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v59.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v59))), vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v63.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v63)))));
          v49 = vpadalq_s16(v49, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v64.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v64))), vaddq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)vmovl_s8(*(int8x8_t *)v60.i8)), (int16x8_t)vandq_s8(v66, (int8x16_t)vmovl_high_s8(v60)))));
          v45 += v16;
          v44 = (uint8x8_t *)((char *)v44 + v17);
          --v48;
        }
        while (v48);
      }
      v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v46, v50));
      v18 = vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(v51, v52));
      v8 = vaddq_s32(vpaddq_s32(v47, v49), v8);
      v15 += 16;
    }
    while (v15 < v14);
  }
  if (v13 < 1)
  {
    v70 = 0uLL;
    v73 = 0uLL;
    v72 = 0uLL;
    v71 = 0uLL;
    v68 = 0uLL;
    v69 = 0uLL;
  }
  else
  {
    v67 = (int8x16_t *)(v5 + v15);
    v68 = 0uLL;
    v69 = 0uLL;
    v70 = 0uLL;
    v71 = 0uLL;
    v72 = 0uLL;
    v73 = 0uLL;
    v74 = v4 + v15;
    do
    {
      v75 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v74 - 1), v12);
      v76 = (uint8x16_t)vandq_s8(*(int8x16_t *)v74, v12);
      v77 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v74 + 1), v12);
      v78 = (uint8x16_t)vandq_s8(*v67, v12);
      v79 = (int8x16_t)vcgtq_u8(v76, v75);
      v80 = (int8x16_t)vcgtq_u8(v76, v77);
      v81 = (int8x16_t)vcgtq_u8(v75, v76);
      v82 = (int8x16_t)vcgtq_u8(v77, v76);
      v83 = vandq_s8(v82, v81);
      v84 = vandq_s8(v80, v79);
      v85 = veorq_s8(v80, v79);
      v86 = veorq_s8(v82, v81);
      v87 = vbicq_s8(v86, v85);
      v88 = vbicq_s8(v85, v86);
      v68 = vsubq_s8(v68, v83);
      v71 = vsubq_s8(v71, v87);
      v72 = vsubq_s8(v72, v88);
      v73 = vsubq_s8(v73, v84);
      v89 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v78.i8, *(uint8x8_t *)v76.i8);
      v90 = (int8x16_t)vsubl_high_u8(v78, v76);
      v69 = vpadalq_s16(v69, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v83.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v83))), vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v87.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v87)))));
      v70 = vpadalq_s16(v70, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v88.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v88))), vaddq_s16((int16x8_t)vandq_s8(v89, (int8x16_t)vmovl_s8(*(int8x8_t *)v84.i8)), (int16x8_t)vandq_s8(v90, (int8x16_t)vmovl_high_s8(v84)))));
      v74 += v16;
      v67 = (int8x16_t *)((char *)v67 + v17);
      --v13;
    }
    while (v13);
  }
  result = vaddq_s32(vpaddq_s32(v69, v70), v8);
  v92 = vpaddq_s16((int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v68, v71)), (int16x8_t)vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(v72, v73)));
  v92.i64[0] = vpaddq_s16(v92, v92).u64[0];
  *a2 = v92.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v92.i32[1];
  *a3 = result.i64[0];
  *(_QWORD *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1B6873BB8(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64x2_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint8x16_t *v18;
  int32x4_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x8_t *v31;
  uint8x16_t *v32;
  uint8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int v46;
  uint64x2_t v47;
  int8x16_t v48;
  int8x16_t *v49;
  uint8x16_t v50;
  uint8x16_t v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  uint8x16_t v60;
  uint8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int32x4_t result;
  int16x8_t v75;

  v3 = *((_DWORD *)a1 + 11);
  v4 = *((_DWORD *)a1 + 12);
  v5 = ~(v4 >> 2) & 1;
  v6 = (v4 >> 3) | 0xFFFFFFFE;
  if (v3)
    v7 = -1;
  else
    v7 = 0;
  v8 = *((_DWORD *)a1 + 8);
  v9.i64[0] = 0;
  v10 = v6 + *((_DWORD *)a1 + 9) + v7 - v3 - v5 + 1;
  v12 = *a1;
  v11 = a1[1];
  v13 = *a1 + v11 * v5;
  v14 = a1[3];
  v15 = a1[2] + v14 * v5;
  v16 = v11 + v11 * v5;
  v17 = 0;
  if (v8 <= 16)
  {
    v19 = 0uLL;
    v21 = 0uLL;
    v20 = 0uLL;
  }
  else
  {
    v18 = (uint8x16_t *)(v12 + v16);
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    do
    {
      v22 = 0uLL;
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      if (v10 >= 1)
      {
        v28 = 0;
        v29 = *(uint8x16_t *)(v13 + v17);
        v30 = *(uint8x16_t *)(v13 + v17 - v11);
        v31 = (uint8x8_t *)(v15 + v17);
        v32 = v18;
        do
        {
          v33 = *v32;
          v34 = (int8x16_t)vcgtq_u8(v29, v30);
          v35 = (int8x16_t)vcgtq_u8(v29, *v32);
          v36 = (int8x16_t)vcgtq_u8(v30, v29);
          v37 = (int8x16_t)vcgtq_u8(*v32, v29);
          v38 = vandq_s8(v37, v36);
          v39 = vandq_s8(v35, v34);
          v40 = veorq_s8(v35, v34);
          v41 = veorq_s8(v37, v36);
          v42 = vbicq_s8(v41, v40);
          v43 = vbicq_s8(v40, v41);
          v25 = vsubq_s8(v25, v38);
          v24 = vsubq_s8(v24, v42);
          v23 = vsubq_s8(v23, v43);
          v22 = vsubq_s8(v22, v39);
          v44 = (int8x16_t)vsubl_u8(*v31, *(uint8x8_t *)v29.i8);
          v45 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v31->i8, v29);
          v27 = vpadalq_s16(v27, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v38))), vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v42)))));
          v31 = (uint8x8_t *)((char *)v31 + v14);
          ++v28;
          v26 = vpadalq_s16(v26, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v43))), vaddq_s16((int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v39)))));
          v32 = (uint8x16_t *)((char *)v32 + v11);
          v30 = v29;
          v29 = v33;
        }
        while (v28 < v10);
      }
      v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v25, v24));
      v21 = vpadalq_u8(v21, (uint8x16_t)vpaddq_s8(v23, v22));
      v19 = vaddq_s32(vpaddq_s32(v27, v26), v19);
      v17 += 16;
      ++v18;
    }
    while (v17 < (v8 - 16));
    v17 = (v8 - 1) & 0xFFFFFFF0;
  }
  if (v10 < 1)
  {
    v56 = 0uLL;
    v59 = 0uLL;
    v58 = 0uLL;
    v57 = 0uLL;
    v54 = 0uLL;
    v55 = 0uLL;
  }
  else
  {
    v46 = 0;
    v9.u64[1] = (unint64_t)vdup_n_s32(-8 * (((_DWORD)a1[4] & 8u) + *((_DWORD *)a1 + 10)));
    v47.i64[0] = -1;
    v47.i64[1] = -1;
    v48 = (int8x16_t)vshlq_u64(v47, v9);
    v49 = (int8x16_t *)(v13 + v17);
    v50 = (uint8x16_t)vandq_s8(*v49, v48);
    v51 = (uint8x16_t)vandq_s8(*(int8x16_t *)((char *)v49 - v11), v48);
    v52 = (int8x16_t *)(v15 + v17);
    v53 = (int8x16_t *)(v12 + v17 + v16);
    v54 = 0uLL;
    v55 = 0uLL;
    v56 = 0uLL;
    v57 = 0uLL;
    v58 = 0uLL;
    v59 = 0uLL;
    do
    {
      v60 = (uint8x16_t)vandq_s8(*v53, v48);
      v61 = (uint8x16_t)vandq_s8(*v52, v48);
      v62 = (int8x16_t)vcgtq_u8(v50, v51);
      v63 = (int8x16_t)vcgtq_u8(v50, v60);
      v64 = (int8x16_t)vcgtq_u8(v51, v50);
      v65 = (int8x16_t)vcgtq_u8(v60, v50);
      v66 = vandq_s8(v65, v64);
      v67 = vandq_s8(v63, v62);
      v68 = veorq_s8(v63, v62);
      v69 = veorq_s8(v65, v64);
      v70 = vbicq_s8(v69, v68);
      v71 = vbicq_s8(v68, v69);
      v54 = vsubq_s8(v54, v66);
      v57 = vsubq_s8(v57, v70);
      v58 = vsubq_s8(v58, v71);
      v59 = vsubq_s8(v59, v67);
      v72 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v61.i8, *(uint8x8_t *)v50.i8);
      v73 = (int8x16_t)vsubl_high_u8(v61, v50);
      v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
      v52 = (int8x16_t *)((char *)v52 + v14);
      ++v46;
      v56 = vpadalq_s16(v56, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
      v53 = (int8x16_t *)((char *)v53 + v11);
      v51 = v50;
      v50 = v60;
    }
    while (v46 < v10);
  }
  result = vaddq_s32(vpaddq_s32(v55, v56), v19);
  v75 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v54, v57)), (int16x8_t)vpadalq_u8(v21, (uint8x16_t)vpaddq_s8(v58, v59)));
  v75.i64[0] = vpaddq_s16(v75, v75).u64[0];
  *a2 = v75.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v75.i32[1];
  *a3 = result.i64[0];
  *(_QWORD *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1B6873EEC(uint64_t *a1, _DWORD *a2, _QWORD *a3, uint64x2_t a4)
{
  int v4;
  unsigned int v5;
  _BOOL8 v6;
  int32x4_t v7;
  uint64x2_t v8;
  int8x16_t v9;
  uint64x2_t v10;
  int8x16_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  unsigned int v18;
  uint16x8_t v19;
  uint16x8_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int v23;
  uint64_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8x8_t *v51;
  int8x16_t v52;
  int32x4_t v53;
  int v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int32x4_t result;
  int16x8_t v101;

  v4 = *((_DWORD *)a1 + 8);
  v5 = *((_DWORD *)a1 + 12);
  v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v5) & 8);
  v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 8))+ ((v5 >> 1) | 0x1FFFFFFE)));
  v11 = (int8x16_t)vshlq_u64(v8, v10);
  v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  v14 = *a1;
  v13 = a1[1];
  v15 = v13 * v6;
  v16 = a1[3];
  v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 17)
  {
    if (v12 < 1)
    {
      v28 = 0uLL;
      v27 = 0uLL;
      v26 = 0uLL;
      v21 = 0uLL;
      v22 = 0uLL;
    }
    else
    {
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = v12;
      v24 = v14;
      v25 = v17;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      do
      {
        v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 * (v6 - 1) - 1), v9);
        v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v15), v9);
        v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 + v13 * v6 + 1), v9);
        v32 = (uint8x16_t)vandq_s8(*v25, v9);
        v33 = (int8x16_t)vcgtq_u8(v30, v29);
        v34 = (int8x16_t)vcgtq_u8(v30, v31);
        v35 = (int8x16_t)vcgtq_u8(v29, v30);
        v36 = (int8x16_t)vcgtq_u8(v31, v30);
        v37 = vandq_s8(v36, v35);
        v38 = vandq_s8(v34, v33);
        v39 = veorq_s8(v34, v33);
        v40 = veorq_s8(v36, v35);
        v41 = vbicq_s8(v40, v39);
        v42 = vbicq_s8(v39, v40);
        v21 = vsubq_s8(v21, v37);
        v26 = vsubq_s8(v26, v41);
        v27 = vsubq_s8(v27, v42);
        v28 = vsubq_s8(v28, v38);
        v43 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v30.i8);
        v44 = (int8x16_t)vsubl_high_u8(v32, v30);
        v22 = vpadalq_s16(v22, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v37))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v41)))));
        v7 = vpadalq_s16(v7, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v42))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v38)))));
        v25 = (int8x16_t *)((char *)v25 + v16);
        v24 += v13;
        --v23;
      }
      while (v23);
    }
    v20 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v21, v26));
    v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v27, v28));
    v7 = vpaddq_s32(v22, v7);
    v18 = 16;
  }
  else
  {
    v18 = 0;
    v11 = vandq_s8(v11, v9);
    v19 = 0uLL;
    v20 = 0uLL;
  }
  v45 = (v4 - 16);
  if ((int)v18 < (int)v45)
  {
    v46 = v18;
    v47 = v13 + v13 * v6 + v18 + v14 + 1;
    v48 = v13 * (v6 - 1) + v18 + v14 - 1;
    v49 = v14 + v15 + v18;
    do
    {
      if (v12 < 1)
      {
        v55 = 0uLL;
        v58 = 0uLL;
        v57 = 0uLL;
        v56 = 0uLL;
        v52 = 0uLL;
        v53 = 0uLL;
      }
      else
      {
        v50 = 0;
        v51 = (uint8x8_t *)&v17->i8[v46];
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = v12;
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = 0uLL;
        do
        {
          v59 = *(uint8x16_t *)(v49 + v50);
          v60 = *(uint8x16_t *)(v48 + v50);
          v61 = *(uint8x16_t *)(v47 + v50);
          v62 = (int8x16_t)vcgtq_u8(v59, v60);
          v63 = (int8x16_t)vcgtq_u8(v59, v61);
          v64 = (int8x16_t)vcgtq_u8(v60, v59);
          v65 = (int8x16_t)vcgtq_u8(v61, v59);
          v66 = vandq_s8(v65, v64);
          v67 = vandq_s8(v63, v62);
          v68 = veorq_s8(v63, v62);
          v69 = veorq_s8(v65, v64);
          v70 = vbicq_s8(v69, v68);
          v71 = vbicq_s8(v68, v69);
          v52 = vsubq_s8(v52, v66);
          v56 = vsubq_s8(v56, v70);
          v57 = vsubq_s8(v57, v71);
          v58 = vsubq_s8(v58, v67);
          v72 = (int8x16_t)vsubl_u8(*v51, *(uint8x8_t *)v59.i8);
          v73 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v51->i8, v59);
          v53 = vpadalq_s16(v53, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
          v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
          v51 = (uint8x8_t *)((char *)v51 + v16);
          v50 += v13;
          --v54;
        }
        while (v54);
      }
      v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v52, v56));
      v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v57, v58));
      v46 += 16;
      v7 = vaddq_s32(vpaddq_s32(v53, v55), v7);
      v47 += 16;
      v48 += 16;
      v49 += 16;
    }
    while (v46 < v45);
    v18 = v46;
  }
  if (v12 < 1)
  {
    v80 = 0uLL;
    v83 = 0uLL;
    v82 = 0uLL;
    v81 = 0uLL;
    v78 = 0uLL;
    v79 = 0uLL;
  }
  else
  {
    v74 = (int8x16_t *)((char *)v17 + v18);
    v75 = v13 + v13 * v6 + 1;
    v76 = v14 + v18;
    v77 = v13 * (v6 - 1) - 1;
    v78 = 0uLL;
    v79 = 0uLL;
    v80 = 0uLL;
    v81 = 0uLL;
    v82 = 0uLL;
    v83 = 0uLL;
    do
    {
      v84 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v77), v11);
      v85 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v15), v11);
      v86 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v75), v11);
      v87 = (uint8x16_t)vandq_s8(*v74, v11);
      v88 = (int8x16_t)vcgtq_u8(v85, v84);
      v89 = (int8x16_t)vcgtq_u8(v85, v86);
      v90 = (int8x16_t)vcgtq_u8(v84, v85);
      v91 = (int8x16_t)vcgtq_u8(v86, v85);
      v92 = vandq_s8(v91, v90);
      v93 = vandq_s8(v89, v88);
      v94 = veorq_s8(v89, v88);
      v95 = veorq_s8(v91, v90);
      v96 = vbicq_s8(v95, v94);
      v97 = vbicq_s8(v94, v95);
      v78 = vsubq_s8(v78, v92);
      v81 = vsubq_s8(v81, v96);
      v82 = vsubq_s8(v82, v97);
      v83 = vsubq_s8(v83, v93);
      v98 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v85.i8);
      v99 = (int8x16_t)vsubl_high_u8(v87, v85);
      v79 = vpadalq_s16(v79, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v92.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v92))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v96)))));
      v80 = vpadalq_s16(v80, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v97))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v93.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v93)))));
      v74 = (int8x16_t *)((char *)v74 + v16);
      v76 += v13;
      --v12;
    }
    while (v12);
  }
  result = vaddq_s32(vpaddq_s32(v79, v80), v7);
  v101 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v78, v81)), (int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v82, v83)));
  v101.i64[0] = vpaddq_s16(v101, v101).u64[0];
  *a2 = v101.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v101.i32[1];
  *a3 = result.i64[0];
  *(_QWORD *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int32x4_t sub_1B68743B8(uint64_t *a1, _DWORD *a2, _QWORD *a3, uint64x2_t a4)
{
  int v4;
  unsigned int v5;
  _BOOL8 v6;
  int32x4_t v7;
  uint64x2_t v8;
  int8x16_t v9;
  uint64x2_t v10;
  int8x16_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  unsigned int v18;
  uint16x8_t v19;
  uint16x8_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int v23;
  uint64_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8x8_t *v51;
  int8x16_t v52;
  int32x4_t v53;
  int v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int32x4_t result;
  int16x8_t v101;

  v4 = *((_DWORD *)a1 + 8);
  v5 = *((_DWORD *)a1 + 12);
  v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(8 * v5) & 8);
  v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(8* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 8))+ ((v5 >> 1) | 0x1FFFFFFE)));
  v11 = (int8x16_t)vshlq_u64(v8, v10);
  v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  v14 = *a1;
  v13 = a1[1];
  v15 = v13 * v6;
  v16 = a1[3];
  v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 17)
  {
    if (v12 < 1)
    {
      v28 = 0uLL;
      v27 = 0uLL;
      v26 = 0uLL;
      v21 = 0uLL;
      v22 = 0uLL;
    }
    else
    {
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = v12;
      v24 = v14;
      v25 = v17;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      do
      {
        v29 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 + v13 * v6 - 1), v9);
        v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v15), v9);
        v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v24 + v13 * (v6 - 1) + 1), v9);
        v32 = (uint8x16_t)vandq_s8(*v25, v9);
        v33 = (int8x16_t)vcgtq_u8(v30, v29);
        v34 = (int8x16_t)vcgtq_u8(v30, v31);
        v35 = (int8x16_t)vcgtq_u8(v29, v30);
        v36 = (int8x16_t)vcgtq_u8(v31, v30);
        v37 = vandq_s8(v36, v35);
        v38 = vandq_s8(v34, v33);
        v39 = veorq_s8(v34, v33);
        v40 = veorq_s8(v36, v35);
        v41 = vbicq_s8(v40, v39);
        v42 = vbicq_s8(v39, v40);
        v21 = vsubq_s8(v21, v37);
        v26 = vsubq_s8(v26, v41);
        v27 = vsubq_s8(v27, v42);
        v28 = vsubq_s8(v28, v38);
        v43 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v30.i8);
        v44 = (int8x16_t)vsubl_high_u8(v32, v30);
        v22 = vpadalq_s16(v22, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v37.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v37))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v41.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v41)))));
        v7 = vpadalq_s16(v7, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v42))), vaddq_s16((int16x8_t)vandq_s8(v43, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_high_s8(v38)))));
        v25 = (int8x16_t *)((char *)v25 + v16);
        v24 += v13;
        --v23;
      }
      while (v23);
    }
    v20 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v21, v26));
    v19 = vpaddlq_u8((uint8x16_t)vpaddq_s8(v27, v28));
    v7 = vpaddq_s32(v22, v7);
    v18 = 16;
  }
  else
  {
    v18 = 0;
    v11 = vandq_s8(v11, v9);
    v19 = 0uLL;
    v20 = 0uLL;
  }
  v45 = (v4 - 16);
  if ((int)v18 < (int)v45)
  {
    v46 = v18;
    v47 = v13 * (v6 - 1) + v18 + v14 + 1;
    v48 = v13 + v13 * v6 + v18 + v14 - 1;
    v49 = v14 + v15 + v18;
    do
    {
      if (v12 < 1)
      {
        v55 = 0uLL;
        v58 = 0uLL;
        v57 = 0uLL;
        v56 = 0uLL;
        v52 = 0uLL;
        v53 = 0uLL;
      }
      else
      {
        v50 = 0;
        v51 = (uint8x8_t *)&v17->i8[v46];
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = v12;
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = 0uLL;
        do
        {
          v59 = *(uint8x16_t *)(v49 + v50);
          v60 = *(uint8x16_t *)(v48 + v50);
          v61 = *(uint8x16_t *)(v47 + v50);
          v62 = (int8x16_t)vcgtq_u8(v59, v60);
          v63 = (int8x16_t)vcgtq_u8(v59, v61);
          v64 = (int8x16_t)vcgtq_u8(v60, v59);
          v65 = (int8x16_t)vcgtq_u8(v61, v59);
          v66 = vandq_s8(v65, v64);
          v67 = vandq_s8(v63, v62);
          v68 = veorq_s8(v63, v62);
          v69 = veorq_s8(v65, v64);
          v70 = vbicq_s8(v69, v68);
          v71 = vbicq_s8(v68, v69);
          v52 = vsubq_s8(v52, v66);
          v56 = vsubq_s8(v56, v70);
          v57 = vsubq_s8(v57, v71);
          v58 = vsubq_s8(v58, v67);
          v72 = (int8x16_t)vsubl_u8(*v51, *(uint8x8_t *)v59.i8);
          v73 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v51->i8, v59);
          v53 = vpadalq_s16(v53, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v66.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v66))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v70.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v70)))));
          v55 = vpadalq_s16(v55, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v71))), vaddq_s16((int16x8_t)vandq_s8(v72, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_high_s8(v67)))));
          v51 = (uint8x8_t *)((char *)v51 + v16);
          v50 += v13;
          --v54;
        }
        while (v54);
      }
      v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v52, v56));
      v19 = vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v57, v58));
      v46 += 16;
      v7 = vaddq_s32(vpaddq_s32(v53, v55), v7);
      v47 += 16;
      v48 += 16;
      v49 += 16;
    }
    while (v46 < v45);
    v18 = v46;
  }
  if (v12 < 1)
  {
    v80 = 0uLL;
    v83 = 0uLL;
    v82 = 0uLL;
    v81 = 0uLL;
    v78 = 0uLL;
    v79 = 0uLL;
  }
  else
  {
    v74 = (int8x16_t *)((char *)v17 + v18);
    v75 = v13 * (v6 - 1) + 1;
    v76 = v14 + v18;
    v77 = v13 + v13 * v6 - 1;
    v78 = 0uLL;
    v79 = 0uLL;
    v80 = 0uLL;
    v81 = 0uLL;
    v82 = 0uLL;
    v83 = 0uLL;
    do
    {
      v84 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v77), v11);
      v85 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v15), v11);
      v86 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v76 + v75), v11);
      v87 = (uint8x16_t)vandq_s8(*v74, v11);
      v88 = (int8x16_t)vcgtq_u8(v85, v84);
      v89 = (int8x16_t)vcgtq_u8(v85, v86);
      v90 = (int8x16_t)vcgtq_u8(v84, v85);
      v91 = (int8x16_t)vcgtq_u8(v86, v85);
      v92 = vandq_s8(v91, v90);
      v93 = vandq_s8(v89, v88);
      v94 = veorq_s8(v89, v88);
      v95 = veorq_s8(v91, v90);
      v96 = vbicq_s8(v95, v94);
      v97 = vbicq_s8(v94, v95);
      v78 = vsubq_s8(v78, v92);
      v81 = vsubq_s8(v81, v96);
      v82 = vsubq_s8(v82, v97);
      v83 = vsubq_s8(v83, v93);
      v98 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v85.i8);
      v99 = (int8x16_t)vsubl_high_u8(v87, v85);
      v79 = vpadalq_s16(v79, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v92.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v92))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v96)))));
      v80 = vpadalq_s16(v80, vpaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v97))), vaddq_s16((int16x8_t)vandq_s8(v98, (int8x16_t)vmovl_s8(*(int8x8_t *)v93.i8)), (int16x8_t)vandq_s8(v99, (int8x16_t)vmovl_high_s8(v93)))));
      v74 = (int8x16_t *)((char *)v74 + v16);
      v76 += v13;
      --v12;
    }
    while (v12);
  }
  result = vaddq_s32(vpaddq_s32(v79, v80), v7);
  v101 = vpaddq_s16((int16x8_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(v78, v81)), (int16x8_t)vpadalq_u8(v19, (uint8x16_t)vpaddq_s8(v82, v83)));
  v101.i64[0] = vpaddq_s16(v101, v101).u64[0];
  *a2 = v101.i32[0];
  *(_DWORD *)((char *)a2 + 6) = v101.i32[1];
  *a3 = result.i64[0];
  *(_QWORD *)((char *)a3 + 12) = result.i64[1];
  return result;
}

int8x16_t sub_1B6874884(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int16x8_t v8;
  uint64x2_t v9;
  int8x16_t v10;
  uint64x2_t v11;
  int8x16_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint16x8_t v18;
  int32x4_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int v27;
  uint64_t v28;
  int8x16_t *v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  uint8x8_t *v52;
  int v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  uint64_t v58;
  int16x8_t v59;
  int16x8_t v60;
  uint8x16_t v61;
  uint8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  uint64_t v78;
  int16x8_t v79;
  int8x16_t *v80;
  uint64_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  uint8x16_t v88;
  uint8x16_t v89;
  uint8x16_t v90;
  uint8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t result;

  v4 = *a1;
  v5 = a1[2];
  v6 = *((_DWORD *)a1 + 8);
  v7 = *((_DWORD *)a1 + 12);
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v7) & 0x10);
  v8 = 0uLL;
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = (int8x16_t)vshlq_u64(v9, a4);
  v11.i64[0] = 0;
  v11.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v6 & 4))+ ((v7 >> 1) | 0xFFFFFFE)));
  v12 = (int8x16_t)vshlq_u64(v9, v11);
  v13 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
  v14 = (v6 - 8);
  if (v6 > 8)
  {
    v16 = a1[1];
    v20 = 0uLL;
    v17 = a1[3];
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    if (v13 >= 1)
    {
      v27 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
      v28 = *a1;
      v29 = (int8x16_t *)a1[2];
      do
      {
        v30 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v28 - 2), v10);
        v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)v28, v10);
        v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v28 + 2), v10);
        v33 = (uint8x16_t)vandq_s8(*v29, v10);
        v34 = (int8x16_t)vcgtq_u8(v31, v30);
        v35 = (int8x16_t)vcgtq_u8(v31, v32);
        v36 = (int8x16_t)vcgtq_u8(v30, v31);
        v37 = (int8x16_t)vcgtq_u8(v32, v31);
        v38 = vandq_s8(v37, v36);
        v39 = vandq_s8(v35, v34);
        v40 = veorq_s8(v35, v34);
        v41 = veorq_s8(v37, v36);
        v42 = vbicq_s8(v41, v40);
        v43 = vbicq_s8(v40, v41);
        v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v38);
        v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v42);
        v20 = (int16x8_t)vsubq_s8((int8x16_t)v20, v43);
        v8 = (int16x8_t)vsubq_s8((int8x16_t)v8, v39);
        v44 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v33.i8, *(uint8x8_t *)v31.i8);
        v45 = (int8x16_t)vsubl_high_u8(v33, v31);
        v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v38)), v26), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v38.i8)));
        v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v42)), v25), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)));
        v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v43)), v24), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        v23 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_high_s8(v39)), v23), (int16x8_t)vandq_s8(v44, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        v28 += v16;
        v29 = (int8x16_t *)((char *)v29 + v17);
        --v27;
      }
      while (v27);
    }
    v46 = (int8x16_t)vpaddq_s16(v22, v21);
    v47 = (int8x16_t)vpaddq_s16(v20, v8);
    v18 = vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v46, v47), vuzp2q_s8(v46, v47)));
    v48 = vuzp1q_s16(v24, v23);
    v49 = vpaddq_s16(vuzp2q_s16(v26, v25), vuzp2q_s16(v24, v23));
    v19 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v26, v25), v48));
    v8 = (int16x8_t)vpaddlq_s16(v49);
    LODWORD(v15) = 8;
  }
  else
  {
    LODWORD(v15) = 0;
    v12 = vandq_s8(v12, v10);
    v16 = a1[1];
    v17 = a1[3];
    v18 = 0uLL;
    v19 = 0uLL;
  }
  if ((int)v15 < (int)v14)
  {
    v15 = v15;
    do
    {
      if (v13 < 1)
      {
        v56 = 0uLL;
        v60 = 0uLL;
        v59 = 0uLL;
        v57 = 0uLL;
        v50 = 0uLL;
        v55 = 0uLL;
        v54 = 0uLL;
        v51 = 0uLL;
      }
      else
      {
        v50 = 0uLL;
        v51 = 0uLL;
        v52 = (uint8x8_t *)(v5 + 2 * v15);
        v53 = *((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 11);
        v54 = 0uLL;
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = v4 + 2 * v15;
        v59 = 0uLL;
        v60 = 0uLL;
        do
        {
          v61 = *(uint8x16_t *)(v58 - 2);
          v62 = *(uint8x16_t *)(v58 + 2);
          v63 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v58, v61);
          v64 = (int8x16_t)vcgtq_u8(*(uint8x16_t *)v58, v62);
          v65 = (int8x16_t)vcgtq_u8(v61, *(uint8x16_t *)v58);
          v66 = (int8x16_t)vcgtq_u8(v62, *(uint8x16_t *)v58);
          v67 = vandq_s8(v66, v65);
          v68 = vandq_s8(v64, v63);
          v69 = veorq_s8(v64, v63);
          v70 = veorq_s8(v66, v65);
          v71 = vbicq_s8(v70, v69);
          v72 = vbicq_s8(v69, v70);
          v50 = (int16x8_t)vsubq_s8((int8x16_t)v50, v67);
          v57 = (int16x8_t)vsubq_s8((int8x16_t)v57, v71);
          v59 = (int16x8_t)vsubq_s8((int8x16_t)v59, v72);
          v60 = (int16x8_t)vsubq_s8((int8x16_t)v60, v68);
          v73 = (int8x16_t)vsubl_u8(*v52, *(uint8x8_t *)v58);
          v74 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v52->i8, *(uint8x16_t *)v58);
          v51 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v67)), v51), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v67.i8)));
          v54 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v71)), v54), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v71.i8)));
          v55 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v72)), v55), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v74, (int8x16_t)vmovl_high_s8(v68)), v56), (int16x8_t)vandq_s8(v73, (int8x16_t)vmovl_s8(*(int8x8_t *)v68.i8)));
          v58 += v16;
          v52 = (uint8x8_t *)((char *)v52 + v17);
          --v53;
        }
        while (v53);
      }
      v75 = (int8x16_t)vpaddq_s16(v50, v57);
      v76 = (int8x16_t)vpaddq_s16(v59, v60);
      v18 = vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v75, v76), vuzp2q_s8(v75, v76)));
      v19 = vpadalq_s16(v19, vpaddq_s16(vuzp1q_s16(v51, v54), vuzp1q_s16(v55, v56)));
      v8 = (int16x8_t)vpadalq_s16((int32x4_t)v8, vpaddq_s16(vuzp2q_s16(v51, v54), vuzp2q_s16(v55, v56)));
      v15 += 8;
    }
    while (v15 < v14);
  }
  if (v13 < 1)
  {
    v87 = 0uLL;
    v86 = 0uLL;
    v85 = 0uLL;
    v77 = 0uLL;
    v84 = 0uLL;
    v83 = 0uLL;
    v82 = 0uLL;
    v79 = 0uLL;
  }
  else
  {
    v77 = 0uLL;
    v78 = (2 * v15);
    v79 = 0uLL;
    v80 = (int8x16_t *)(v5 + v78);
    v81 = v4 + v78;
    v82 = 0uLL;
    v83 = 0uLL;
    v84 = 0uLL;
    v85 = 0uLL;
    v86 = 0uLL;
    v87 = 0uLL;
    do
    {
      v88 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v81 - 2), v12);
      v89 = (uint8x16_t)vandq_s8(*(int8x16_t *)v81, v12);
      v90 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v81 + 2), v12);
      v91 = (uint8x16_t)vandq_s8(*v80, v12);
      v92 = (int8x16_t)vcgtq_u8(v89, v88);
      v93 = (int8x16_t)vcgtq_u8(v89, v90);
      v94 = (int8x16_t)vcgtq_u8(v88, v89);
      v95 = (int8x16_t)vcgtq_u8(v90, v89);
      v96 = vandq_s8(v95, v94);
      v97 = vandq_s8(v93, v92);
      v98 = veorq_s8(v93, v92);
      v99 = veorq_s8(v95, v94);
      v100 = vbicq_s8(v99, v98);
      v101 = vbicq_s8(v98, v99);
      v77 = (int16x8_t)vsubq_s8((int8x16_t)v77, v96);
      v85 = (int16x8_t)vsubq_s8((int8x16_t)v85, v100);
      v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v101);
      v87 = (int16x8_t)vsubq_s8((int8x16_t)v87, v97);
      v102 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v91.i8, *(uint8x8_t *)v89.i8);
      v103 = (int8x16_t)vsubl_high_u8(v91, v89);
      v79 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v96)), v79), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v96.i8)));
      v82 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v100)), v82), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v100.i8)));
      v83 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v101)), v83), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v101.i8)));
      v84 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v103, (int8x16_t)vmovl_high_s8(v97)), v84), (int16x8_t)vandq_s8(v102, (int8x16_t)vmovl_s8(*(int8x8_t *)v97.i8)));
      v81 += v16;
      v80 = (int8x16_t *)((char *)v80 + v17);
      --v13;
    }
    while (v13);
  }
  v104 = (int8x16_t)vpaddq_s16(v77, v85);
  v105 = (int8x16_t)vpaddq_s16(v86, v87);
  v106 = (int8x16_t)vpadalq_u8(v18, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v104, v105), vuzp2q_s8(v104, v105)));
  v107 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp1q_s16(v79, v82), vuzp1q_s16(v83, v84)));
  v108 = (int8x16_t)vpadalq_s16((int32x4_t)v8, vpaddq_s16(vuzp2q_s16(v79, v82), vuzp2q_s16(v83, v84)));
  *(_DWORD *)a2 = v106.i32[0];
  v104.i64[0] = vextq_s8(v106, v106, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v106.i8, *(int8x8_t *)v104.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v104.i32[1];
  *(_QWORD *)a3 = v107.i64[0];
  result = vextq_s8(v107, v108, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(_QWORD *)(a3 + 32) = v108.i64[1];
  return result;
}

int8x16_t sub_1B6874D48(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64x2_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8x16_t *v19;
  uint16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int v31;
  uint8x16_t *v32;
  uint8x16_t v33;
  uint8x16_t v34;
  uint8x8_t *v35;
  uint8x16_t *v36;
  uint8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  int v53;
  uint64x2_t v54;
  int8x16_t v55;
  int8x16_t *v56;
  uint8x16_t v57;
  uint8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int8x16_t *v61;
  int8x16_t *v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x8_t v88;
  int8x16_t result;

  v3 = *((_DWORD *)a1 + 11);
  v4 = *((_DWORD *)a1 + 12);
  v5 = ~(v4 >> 2) & 1;
  v6 = (v4 >> 3) | 0xFFFFFFFE;
  if (v3)
    v7 = -1;
  else
    v7 = 0;
  v8 = *((_DWORD *)a1 + 8);
  v9.i64[0] = 0;
  v10 = v6 + *((_DWORD *)a1 + 9) + v7 - v3 - v5 + 1;
  v12 = *a1;
  v11 = a1[1];
  v13 = *a1 + v11 * v5;
  v14 = a1[3];
  v15 = a1[2] + v14 * v5;
  v16 = v11 + v11 * v5;
  if (v8 <= 8)
  {
    v52 = 0;
    v18 = -v11;
    v20 = 0uLL;
    v22 = 0uLL;
    v21 = 0uLL;
  }
  else
  {
    v17 = 0;
    v18 = -v11;
    v19 = (uint8x16_t *)(v12 + v16);
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    do
    {
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      v30 = 0uLL;
      if (v10 >= 1)
      {
        v31 = 0;
        v32 = (uint8x16_t *)(v13 + 2 * v17);
        v33 = *v32;
        v34 = *(uint8x16_t *)((char *)v32 - v11);
        v35 = (uint8x8_t *)(v15 + 2 * v17);
        v36 = v19;
        do
        {
          v37 = *v36;
          v38 = (int8x16_t)vcgtq_u8(v33, *v36);
          v39 = (int8x16_t)vcgtq_u8(v33, v34);
          v40 = (int8x16_t)vcgtq_u8(*v36, v33);
          v41 = (int8x16_t)vcgtq_u8(v34, v33);
          v42 = vandq_s8(v40, v41);
          v43 = vandq_s8(v38, v39);
          v44 = veorq_s8(v38, v39);
          v45 = veorq_s8(v40, v41);
          v46 = vbicq_s8(v45, v44);
          v47 = vbicq_s8(v44, v45);
          v26 = (int16x8_t)vsubq_s8((int8x16_t)v26, v42);
          v25 = (int16x8_t)vsubq_s8((int8x16_t)v25, v46);
          v24 = (int16x8_t)vsubq_s8((int8x16_t)v24, v47);
          v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v43);
          v48 = (int8x16_t)vsubl_u8(*v35, *(uint8x8_t *)v33.i8);
          v49 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v35->i8, v33);
          v30 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v42)), v30), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v42.i8)));
          v29 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v46)), v29), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v46.i8)));
          v28 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v47)), v28), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v47.i8)));
          v35 = (uint8x8_t *)((char *)v35 + v14);
          ++v31;
          v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v49, (int8x16_t)vmovl_high_s8(v43)), v27), (int16x8_t)vandq_s8(v48, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
          v36 = (uint8x16_t *)((char *)v36 + v11);
          v34 = v33;
          v33 = v37;
        }
        while (v31 < v10);
      }
      v50 = (int8x16_t)vpaddq_s16(v26, v25);
      v51 = (int8x16_t)vpaddq_s16(v24, v23);
      v20 = vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v50, v51), vuzp2q_s8(v50, v51)));
      v21 = vpadalq_s16(v21, vpaddq_s16(vuzp1q_s16(v30, v29), vuzp1q_s16(v28, v27)));
      v22 = vpadalq_s16(v22, vpaddq_s16(vuzp2q_s16(v30, v29), vuzp2q_s16(v28, v27)));
      v17 += 8;
      ++v19;
    }
    while (v17 < (v8 - 8));
    v52 = (2 * (v8 + 2147483639) + 16) & 0xFFFFFFF0;
  }
  if (v10 < 1)
  {
    v68 = 0uLL;
    v67 = 0uLL;
    v66 = 0uLL;
    v59 = 0uLL;
    v65 = 0uLL;
    v64 = 0uLL;
    v63 = 0uLL;
    v60 = 0uLL;
  }
  else
  {
    v53 = 0;
    v9.u64[1] = (unint64_t)vdup_n_s32(-16 * (((_DWORD)a1[4] & 4u) + *((_DWORD *)a1 + 10)));
    v54.i64[0] = -1;
    v54.i64[1] = -1;
    v55 = (int8x16_t)vshlq_u64(v54, v9);
    v56 = (int8x16_t *)(v13 + v52);
    v57 = (uint8x16_t)vandq_s8(*v56, v55);
    v58 = (uint8x16_t)vandq_s8(*(int8x16_t *)((char *)v56 + v18), v55);
    v59 = 0uLL;
    v60 = 0uLL;
    v61 = (int8x16_t *)(v15 + v52);
    v62 = (int8x16_t *)(v12 + v52 + v16);
    v63 = 0uLL;
    v64 = 0uLL;
    v65 = 0uLL;
    v66 = 0uLL;
    v67 = 0uLL;
    v68 = 0uLL;
    do
    {
      v69 = (uint8x16_t)vandq_s8(*v62, v55);
      v70 = (uint8x16_t)vandq_s8(*v61, v55);
      v71 = (int8x16_t)vcgtq_u8(v57, v69);
      v72 = (int8x16_t)vcgtq_u8(v57, v58);
      v73 = (int8x16_t)vcgtq_u8(v69, v57);
      v74 = (int8x16_t)vcgtq_u8(v58, v57);
      v75 = vandq_s8(v73, v74);
      v76 = vandq_s8(v71, v72);
      v77 = veorq_s8(v71, v72);
      v78 = veorq_s8(v73, v74);
      v79 = vbicq_s8(v78, v77);
      v80 = vbicq_s8(v77, v78);
      v59 = (int16x8_t)vsubq_s8((int8x16_t)v59, v75);
      v66 = (int16x8_t)vsubq_s8((int8x16_t)v66, v79);
      v67 = (int16x8_t)vsubq_s8((int8x16_t)v67, v80);
      v68 = (int16x8_t)vsubq_s8((int8x16_t)v68, v76);
      v81 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v70.i8, *(uint8x8_t *)v57.i8);
      v82 = (int8x16_t)vsubl_high_u8(v70, v57);
      v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v75)), v60), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v75.i8)));
      v63 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v79)), v63), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v79.i8)));
      v64 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v80)), v64), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v80.i8)));
      v61 = (int8x16_t *)((char *)v61 + v14);
      ++v53;
      v65 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)vmovl_high_s8(v76)), v65), (int16x8_t)vandq_s8(v81, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
      v62 = (int8x16_t *)((char *)v62 + v11);
      v58 = v57;
      v57 = v69;
    }
    while (v53 < v10);
  }
  v83 = (int8x16_t)vpaddq_s16(v59, v66);
  v84 = (int8x16_t)vpaddq_s16(v67, v68);
  v85 = (int8x16_t)vpadalq_u8(v20, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v83, v84), vuzp2q_s8(v83, v84)));
  v86 = (int8x16_t)vpadalq_s16(v21, vpaddq_s16(vuzp1q_s16(v60, v63), vuzp1q_s16(v64, v65)));
  v87 = (int8x16_t)vpadalq_s16(v22, vpaddq_s16(vuzp2q_s16(v60, v63), vuzp2q_s16(v64, v65)));
  *(_DWORD *)a2 = v85.i32[0];
  v88 = (int8x8_t)vextq_s8(v85, v85, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v85.i8, v88, 4uLL);
  *(_DWORD *)(a2 + 16) = v88.i32[1];
  *(_QWORD *)a3 = v86.i64[0];
  result = vextq_s8(v86, v87, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(_QWORD *)(a3 + 32) = v87.i64[1];
  return result;
}

int8x16_t sub_1B6875104(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  int v4;
  unsigned int v5;
  _BOOL8 v6;
  int16x8_t v7;
  uint64x2_t v8;
  int8x16_t v9;
  uint64x2_t v10;
  int8x16_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  unsigned int v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int v28;
  uint64_t v29;
  int8x16_t *v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int16x8_t v55;
  int16x8_t v56;
  uint8x8_t *v57;
  int v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  uint64_t v82;
  int8x16_t *v83;
  uint64_t v84;
  uint64_t v85;
  int16x8_t v86;
  int16x8_t v87;
  uint64_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  uint8x16_t v95;
  uint8x16_t v96;
  uint8x16_t v97;
  uint8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t result;

  v4 = *((_DWORD *)a1 + 8);
  v5 = *((_DWORD *)a1 + 12);
  v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v5) & 0x10);
  v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 4))+ ((v5 >> 1) | 0xFFFFFFE)));
  v11 = (int8x16_t)vshlq_u64(v8, v10);
  v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  v14 = *a1;
  v13 = a1[1];
  v15 = v13 * v6;
  v16 = a1[3];
  v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 9)
  {
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    if (v12 >= 1)
    {
      v28 = v12;
      v29 = v14;
      v30 = v17;
      do
      {
        v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 * (v6 - 1) - 2), v9);
        v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v15), v9);
        v33 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 + v13 * v6 + 2), v9);
        v34 = (uint8x16_t)vandq_s8(*v30, v9);
        v35 = (int8x16_t)vcgtq_u8(v32, v31);
        v36 = (int8x16_t)vcgtq_u8(v32, v33);
        v37 = (int8x16_t)vcgtq_u8(v31, v32);
        v38 = (int8x16_t)vcgtq_u8(v33, v32);
        v39 = vandq_s8(v38, v37);
        v40 = vandq_s8(v36, v35);
        v41 = veorq_s8(v36, v35);
        v42 = veorq_s8(v38, v37);
        v43 = vbicq_s8(v42, v41);
        v44 = vbicq_s8(v41, v42);
        v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v39);
        v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v43);
        v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v44);
        v7 = (int16x8_t)vsubq_s8((int8x16_t)v7, v40);
        v45 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v32.i8);
        v46 = (int8x16_t)vsubl_high_u8(v34, v32);
        v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v39)), v27), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v43)), v26), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v44)), v25), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v44.i8)));
        v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v40)), v24), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)));
        v30 = (int8x16_t *)((char *)v30 + v16);
        v29 += v13;
        --v28;
      }
      while (v28);
    }
    v47 = (int8x16_t)vpaddq_s16(v23, v22);
    v48 = (int8x16_t)vpaddq_s16(v21, v7);
    v7 = (int16x8_t)vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v47, v48), vuzp2q_s8(v47, v48)));
    v20 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v27, v26), vuzp1q_s16(v25, v24)));
    v19 = vpaddlq_s16(vpaddq_s16(vuzp2q_s16(v27, v26), vuzp2q_s16(v25, v24)));
    v18 = 8;
  }
  else
  {
    v18 = 0;
    v11 = vandq_s8(v11, v9);
    v19 = 0uLL;
    v20 = 0uLL;
  }
  v49 = (v4 - 8);
  if ((int)v18 < (int)v49)
  {
    v50 = v18;
    v51 = v13 + v13 * v6 + 2 * v18 + v14 + 2;
    v52 = v13 * (v6 - 1) + 2 * v18 + v14 - 2;
    v53 = v14 + v15 + 2 * v18;
    do
    {
      if (v12 < 1)
      {
        v61 = 0uLL;
        v64 = 0uLL;
        v63 = 0uLL;
        v62 = 0uLL;
        v55 = 0uLL;
        v60 = 0uLL;
        v59 = 0uLL;
        v56 = 0uLL;
      }
      else
      {
        v54 = 0;
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = (uint8x8_t *)((char *)v17 + 2 * v50);
        v58 = v12;
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        do
        {
          v65 = *(uint8x16_t *)(v53 + v54);
          v66 = *(uint8x16_t *)(v52 + v54);
          v67 = *(uint8x16_t *)(v51 + v54);
          v68 = (int8x16_t)vcgtq_u8(v65, v66);
          v69 = (int8x16_t)vcgtq_u8(v65, v67);
          v70 = (int8x16_t)vcgtq_u8(v66, v65);
          v71 = (int8x16_t)vcgtq_u8(v67, v65);
          v72 = vandq_s8(v71, v70);
          v73 = vandq_s8(v69, v68);
          v74 = veorq_s8(v69, v68);
          v75 = veorq_s8(v71, v70);
          v76 = vbicq_s8(v75, v74);
          v77 = vbicq_s8(v74, v75);
          v55 = (int16x8_t)vsubq_s8((int8x16_t)v55, v72);
          v62 = (int16x8_t)vsubq_s8((int8x16_t)v62, v76);
          v63 = (int16x8_t)vsubq_s8((int8x16_t)v63, v77);
          v64 = (int16x8_t)vsubq_s8((int8x16_t)v64, v73);
          v78 = (int8x16_t)vsubl_u8(*v57, *(uint8x8_t *)v65.i8);
          v79 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v57->i8, v65);
          v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v72)), v56), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          v59 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v76)), v59), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
          v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v77)), v60), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v77.i8)));
          v61 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v73)), v61), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v73.i8)));
          v57 = (uint8x8_t *)((char *)v57 + v16);
          v54 += v13;
          --v58;
        }
        while (v58);
      }
      v80 = (int8x16_t)vpaddq_s16(v55, v62);
      v81 = (int8x16_t)vpaddq_s16(v63, v64);
      v7 = (int16x8_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v80, v81), vuzp2q_s8(v80, v81)));
      v20 = vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v56, v59), vuzp1q_s16(v60, v61)));
      v50 += 8;
      v19 = vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v56, v59), vuzp2q_s16(v60, v61)));
      v51 += 16;
      v52 += 16;
      v53 += 16;
    }
    while (v50 < v49);
    v18 = v50;
  }
  if (v12 < 1)
  {
    v94 = 0uLL;
    v93 = 0uLL;
    v92 = 0uLL;
    v86 = 0uLL;
    v91 = 0uLL;
    v90 = 0uLL;
    v89 = 0uLL;
    v87 = 0uLL;
  }
  else
  {
    v82 = 2 * v18;
    v83 = (int8x16_t *)((char *)v17 + v82);
    v84 = v13 + v13 * v6 + 2;
    v85 = v14 + v82;
    v86 = 0uLL;
    v87 = 0uLL;
    v88 = v13 * (v6 - 1) - 2;
    v89 = 0uLL;
    v90 = 0uLL;
    v91 = 0uLL;
    v92 = 0uLL;
    v93 = 0uLL;
    v94 = 0uLL;
    do
    {
      v95 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v88), v11);
      v96 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v15), v11);
      v97 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v84), v11);
      v98 = (uint8x16_t)vandq_s8(*v83, v11);
      v99 = (int8x16_t)vcgtq_u8(v96, v95);
      v100 = (int8x16_t)vcgtq_u8(v96, v97);
      v101 = (int8x16_t)vcgtq_u8(v95, v96);
      v102 = (int8x16_t)vcgtq_u8(v97, v96);
      v103 = vandq_s8(v102, v101);
      v104 = vandq_s8(v100, v99);
      v105 = veorq_s8(v100, v99);
      v106 = veorq_s8(v102, v101);
      v107 = vbicq_s8(v106, v105);
      v108 = vbicq_s8(v105, v106);
      v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v103);
      v92 = (int16x8_t)vsubq_s8((int8x16_t)v92, v107);
      v93 = (int16x8_t)vsubq_s8((int8x16_t)v93, v108);
      v94 = (int16x8_t)vsubq_s8((int8x16_t)v94, v104);
      v109 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v98.i8, *(uint8x8_t *)v96.i8);
      v110 = (int8x16_t)vsubl_high_u8(v98, v96);
      v87 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v103)), v87), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v103.i8)));
      v89 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v107)), v89), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v107.i8)));
      v90 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v108)), v90), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v108.i8)));
      v91 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v104)), v91), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v104.i8)));
      v83 = (int8x16_t *)((char *)v83 + v16);
      v85 += v13;
      --v12;
    }
    while (v12);
  }
  v111 = (int8x16_t)vpaddq_s16(v86, v92);
  v112 = (int8x16_t)vpaddq_s16(v93, v94);
  v113 = (int8x16_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v111, v112), vuzp2q_s8(v111, v112)));
  v114 = (int8x16_t)vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v87, v89), vuzp1q_s16(v90, v91)));
  v115 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v87, v89), vuzp2q_s16(v90, v91)));
  *(_DWORD *)a2 = v113.i32[0];
  v111.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v113.i8, *(int8x8_t *)v111.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v111.i32[1];
  *(_QWORD *)a3 = v114.i64[0];
  result = vextq_s8(v114, v115, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(_QWORD *)(a3 + 32) = v115.i64[1];
  return result;
}

int8x16_t sub_1B6875654(uint64_t *a1, uint64_t a2, uint64_t a3, uint64x2_t a4)
{
  int v4;
  unsigned int v5;
  _BOOL8 v6;
  int16x8_t v7;
  uint64x2_t v8;
  int8x16_t v9;
  uint64x2_t v10;
  int8x16_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  unsigned int v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int v28;
  uint64_t v29;
  int8x16_t *v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int16x8_t v55;
  int16x8_t v56;
  uint8x8_t *v57;
  int v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  uint64_t v82;
  int8x16_t *v83;
  uint64_t v84;
  uint64_t v85;
  int16x8_t v86;
  int16x8_t v87;
  uint64_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  uint8x16_t v95;
  uint8x16_t v96;
  uint8x16_t v97;
  uint8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t result;

  v4 = *((_DWORD *)a1 + 8);
  v5 = *((_DWORD *)a1 + 12);
  v6 = (v5 & 4) == 0;
  *(int32x2_t *)a4.i8 = vdup_n_s32(~(16 * v5) & 0x10);
  v7 = 0uLL;
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = (int8x16_t)vshlq_u64(v8, a4);
  v10.i64[0] = 0;
  v10.u64[1] = (unint64_t)vdup_n_s32(16* ((*((_DWORD *)a1 + 10) == 0)- (*((_DWORD *)a1 + 10)+ (v4 & 4))+ ((v5 >> 1) | 0xFFFFFFE)));
  v11 = (int8x16_t)vshlq_u64(v8, v10);
  v12 = ((v5 >> 3) | 0xFFFFFFFE) - (*((_DWORD *)a1 + 11) != 0) - (*((_DWORD *)a1 + 11) + v6) + *((_DWORD *)a1 + 9) + 1;
  v14 = *a1;
  v13 = a1[1];
  v15 = v13 * v6;
  v16 = a1[3];
  v17 = (int8x16_t *)(a1[2] + v16 * v6);
  if (v4 >= 9)
  {
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    if (v12 >= 1)
    {
      v28 = v12;
      v29 = v14;
      v30 = v17;
      do
      {
        v31 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 + v13 * v6 - 2), v9);
        v32 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v15), v9);
        v33 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v29 + v13 * (v6 - 1) + 2), v9);
        v34 = (uint8x16_t)vandq_s8(*v30, v9);
        v35 = (int8x16_t)vcgtq_u8(v32, v31);
        v36 = (int8x16_t)vcgtq_u8(v32, v33);
        v37 = (int8x16_t)vcgtq_u8(v31, v32);
        v38 = (int8x16_t)vcgtq_u8(v33, v32);
        v39 = vandq_s8(v38, v37);
        v40 = vandq_s8(v36, v35);
        v41 = veorq_s8(v36, v35);
        v42 = veorq_s8(v38, v37);
        v43 = vbicq_s8(v42, v41);
        v44 = vbicq_s8(v41, v42);
        v23 = (int16x8_t)vsubq_s8((int8x16_t)v23, v39);
        v22 = (int16x8_t)vsubq_s8((int8x16_t)v22, v43);
        v21 = (int16x8_t)vsubq_s8((int8x16_t)v21, v44);
        v7 = (int16x8_t)vsubq_s8((int8x16_t)v7, v40);
        v45 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v32.i8);
        v46 = (int8x16_t)vsubl_high_u8(v34, v32);
        v27 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v39)), v27), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v39.i8)));
        v26 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v43)), v26), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v43.i8)));
        v25 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v44)), v25), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v44.i8)));
        v24 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v46, (int8x16_t)vmovl_high_s8(v40)), v24), (int16x8_t)vandq_s8(v45, (int8x16_t)vmovl_s8(*(int8x8_t *)v40.i8)));
        v30 = (int8x16_t *)((char *)v30 + v16);
        v29 += v13;
        --v28;
      }
      while (v28);
    }
    v47 = (int8x16_t)vpaddq_s16(v23, v22);
    v48 = (int8x16_t)vpaddq_s16(v21, v7);
    v7 = (int16x8_t)vpaddlq_u8((uint8x16_t)vpaddq_s8(vuzp1q_s8(v47, v48), vuzp2q_s8(v47, v48)));
    v20 = vpaddlq_s16(vpaddq_s16(vuzp1q_s16(v27, v26), vuzp1q_s16(v25, v24)));
    v19 = vpaddlq_s16(vpaddq_s16(vuzp2q_s16(v27, v26), vuzp2q_s16(v25, v24)));
    v18 = 8;
  }
  else
  {
    v18 = 0;
    v11 = vandq_s8(v11, v9);
    v19 = 0uLL;
    v20 = 0uLL;
  }
  v49 = (v4 - 8);
  if ((int)v18 < (int)v49)
  {
    v50 = v18;
    v51 = v13 * (v6 - 1) + 2 * v18 + v14 + 2;
    v52 = v13 + v13 * v6 + 2 * v18 + v14 - 2;
    v53 = v14 + v15 + 2 * v18;
    do
    {
      if (v12 < 1)
      {
        v61 = 0uLL;
        v64 = 0uLL;
        v63 = 0uLL;
        v62 = 0uLL;
        v55 = 0uLL;
        v60 = 0uLL;
        v59 = 0uLL;
        v56 = 0uLL;
      }
      else
      {
        v54 = 0;
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = (uint8x8_t *)((char *)v17 + 2 * v50);
        v58 = v12;
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        do
        {
          v65 = *(uint8x16_t *)(v53 + v54);
          v66 = *(uint8x16_t *)(v52 + v54);
          v67 = *(uint8x16_t *)(v51 + v54);
          v68 = (int8x16_t)vcgtq_u8(v65, v66);
          v69 = (int8x16_t)vcgtq_u8(v65, v67);
          v70 = (int8x16_t)vcgtq_u8(v66, v65);
          v71 = (int8x16_t)vcgtq_u8(v67, v65);
          v72 = vandq_s8(v71, v70);
          v73 = vandq_s8(v69, v68);
          v74 = veorq_s8(v69, v68);
          v75 = veorq_s8(v71, v70);
          v76 = vbicq_s8(v75, v74);
          v77 = vbicq_s8(v74, v75);
          v55 = (int16x8_t)vsubq_s8((int8x16_t)v55, v72);
          v62 = (int16x8_t)vsubq_s8((int8x16_t)v62, v76);
          v63 = (int16x8_t)vsubq_s8((int8x16_t)v63, v77);
          v64 = (int16x8_t)vsubq_s8((int8x16_t)v64, v73);
          v78 = (int8x16_t)vsubl_u8(*v57, *(uint8x8_t *)v65.i8);
          v79 = (int8x16_t)vsubl_high_u8(*(uint8x16_t *)v57->i8, v65);
          v56 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v72)), v56), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8)));
          v59 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v76)), v59), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v76.i8)));
          v60 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v77)), v60), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v77.i8)));
          v61 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v79, (int8x16_t)vmovl_high_s8(v73)), v61), (int16x8_t)vandq_s8(v78, (int8x16_t)vmovl_s8(*(int8x8_t *)v73.i8)));
          v57 = (uint8x8_t *)((char *)v57 + v16);
          v54 += v13;
          --v58;
        }
        while (v58);
      }
      v80 = (int8x16_t)vpaddq_s16(v55, v62);
      v81 = (int8x16_t)vpaddq_s16(v63, v64);
      v7 = (int16x8_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v80, v81), vuzp2q_s8(v80, v81)));
      v20 = vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v56, v59), vuzp1q_s16(v60, v61)));
      v50 += 8;
      v19 = vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v56, v59), vuzp2q_s16(v60, v61)));
      v51 += 16;
      v52 += 16;
      v53 += 16;
    }
    while (v50 < v49);
    v18 = v50;
  }
  if (v12 < 1)
  {
    v94 = 0uLL;
    v93 = 0uLL;
    v92 = 0uLL;
    v86 = 0uLL;
    v91 = 0uLL;
    v90 = 0uLL;
    v89 = 0uLL;
    v87 = 0uLL;
  }
  else
  {
    v82 = 2 * v18;
    v83 = (int8x16_t *)((char *)v17 + v82);
    v84 = v13 * (v6 - 1) + 2;
    v85 = v14 + v82;
    v86 = 0uLL;
    v87 = 0uLL;
    v88 = v13 + v13 * v6 - 2;
    v89 = 0uLL;
    v90 = 0uLL;
    v91 = 0uLL;
    v92 = 0uLL;
    v93 = 0uLL;
    v94 = 0uLL;
    do
    {
      v95 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v88), v11);
      v96 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v15), v11);
      v97 = (uint8x16_t)vandq_s8(*(int8x16_t *)(v85 + v84), v11);
      v98 = (uint8x16_t)vandq_s8(*v83, v11);
      v99 = (int8x16_t)vcgtq_u8(v96, v95);
      v100 = (int8x16_t)vcgtq_u8(v96, v97);
      v101 = (int8x16_t)vcgtq_u8(v95, v96);
      v102 = (int8x16_t)vcgtq_u8(v97, v96);
      v103 = vandq_s8(v102, v101);
      v104 = vandq_s8(v100, v99);
      v105 = veorq_s8(v100, v99);
      v106 = veorq_s8(v102, v101);
      v107 = vbicq_s8(v106, v105);
      v108 = vbicq_s8(v105, v106);
      v86 = (int16x8_t)vsubq_s8((int8x16_t)v86, v103);
      v92 = (int16x8_t)vsubq_s8((int8x16_t)v92, v107);
      v93 = (int16x8_t)vsubq_s8((int8x16_t)v93, v108);
      v94 = (int16x8_t)vsubq_s8((int8x16_t)v94, v104);
      v109 = (int8x16_t)vsubl_u8(*(uint8x8_t *)v98.i8, *(uint8x8_t *)v96.i8);
      v110 = (int8x16_t)vsubl_high_u8(v98, v96);
      v87 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v103)), v87), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v103.i8)));
      v89 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v107)), v89), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v107.i8)));
      v90 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v108)), v90), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v108.i8)));
      v91 = vaddq_s16(vaddq_s16((int16x8_t)vandq_s8(v110, (int8x16_t)vmovl_high_s8(v104)), v91), (int16x8_t)vandq_s8(v109, (int8x16_t)vmovl_s8(*(int8x8_t *)v104.i8)));
      v83 = (int8x16_t *)((char *)v83 + v16);
      v85 += v13;
      --v12;
    }
    while (v12);
  }
  v111 = (int8x16_t)vpaddq_s16(v86, v92);
  v112 = (int8x16_t)vpaddq_s16(v93, v94);
  v113 = (int8x16_t)vpadalq_u8((uint16x8_t)v7, (uint8x16_t)vpaddq_s8(vuzp1q_s8(v111, v112), vuzp2q_s8(v111, v112)));
  v114 = (int8x16_t)vpadalq_s16(v20, vpaddq_s16(vuzp1q_s16(v87, v89), vuzp1q_s16(v90, v91)));
  v115 = (int8x16_t)vpadalq_s16(v19, vpaddq_s16(vuzp2q_s16(v87, v89), vuzp2q_s16(v90, v91)));
  *(_DWORD *)a2 = v113.i32[0];
  v111.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
  *(int8x8_t *)(a2 + 6) = vext_s8(*(int8x8_t *)v113.i8, *(int8x8_t *)v111.i8, 4uLL);
  *(_DWORD *)(a2 + 16) = v111.i32[1];
  *(_QWORD *)a3 = v114.i64[0];
  result = vextq_s8(v114, v115, 8uLL);
  *(int8x16_t *)(a3 + 12) = result;
  *(_QWORD *)(a3 + 32) = v115.i64[1];
  return result;
}

BOOL sub_1B6875BA4(uint64_t a1, __int16 *a2, __int16 *a3)
{
  int v3;
  int v5;

  if (*((unsigned __int8 *)a2 + 8) != *((unsigned __int8 *)a3 + 8))
    return 1;
  v3 = *a2 - *a3;
  if (v3 < 0)
    v3 = *a3 - *a2;
  if (v3 > 3)
    return 1;
  v5 = a2[1] - a3[1];
  if (v5 < 0)
    v5 = a3[1] - a2[1];
  return v5 > 3;
}

uint64_t sub_1B6875BF0(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  signed int v39;
  __int16 *v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _DWORD *v49;

  v11 = 0;
  v12 = result + 3544;
  v13 = result + 3800;
  v14 = result + 3544 + 16 * a4;
  v15 = *(_DWORD *)(*(_QWORD *)v14 + 36);
  v16 = 1;
  do
  {
    v17 = v16;
    v18 = *(_QWORD *)(a7 + 8 * v11);
    if (v18 && *(_BYTE *)(v18 + 10) == 1)
    {
      if (*(char *)(v18 + 12) == a4)
      {
        v26 = *(unsigned __int8 *)(a11 + 48);
        *(_BYTE *)(a11 + 48) = v26 + 1;
        *(_DWORD *)(a11 + 4 * v26) = *(_DWORD *)(v18 + 4);
        goto LABEL_41;
      }
      v19 = *(char *)(v18 + 13);
      if (v19 != -1 && *(_DWORD *)(*(_QWORD *)v14 + 680) == *(_DWORD *)(*(_QWORD *)(v13 + 16 * v19) + 680))
      {
        v27 = *(_DWORD **)(a9 + 8 * v11);
        v28 = *(unsigned __int8 *)(a11 + 48);
        *(_BYTE *)(a11 + 48) = v28 + 1;
        *(_DWORD *)(a11 + 4 * v28) = *v27;
        goto LABEL_41;
      }
    }
    v16 = 0;
    v11 = 1;
  }
  while ((v17 & 1) != 0);
  v20 = 0;
  v21 = 1;
  while (1)
  {
    v22 = v21;
    v23 = *(_QWORD *)(a7 + 8 * v20);
    if (v23)
    {
      if (*(_BYTE *)(v23 + 10) == 1)
      {
        v24 = *(char *)(v23 + 12);
        if (v24 != -1 && ((v15 ^ *(unsigned __int8 *)(*(_QWORD *)(v12 + 16 * v24) + 36)) & 2) == 0)
        {
          v29 = *(unsigned __int8 *)(a11 + 48);
          *(_BYTE *)(a11 + 48) = v29 + 1;
          *(_DWORD *)(a11 + 4 * v29) = *(_DWORD *)(v23 + 4);
          v30 = (char *)(*(_QWORD *)(a7 + 8 * v20) + 12);
          if ((v15 & 2) != 0)
            goto LABEL_41;
          goto LABEL_22;
        }
        v25 = *(char *)(v23 + 13);
        if (v25 != -1 && ((v15 ^ *(unsigned __int8 *)(*(_QWORD *)(v13 + 16 * v25) + 36)) & 2) == 0)
          break;
      }
    }
    v21 = 0;
    v20 = 1;
    if ((v22 & 1) == 0)
      goto LABEL_41;
  }
  v31 = *(_DWORD **)(a9 + 8 * v20);
  v32 = *(unsigned __int8 *)(a11 + 48);
  *(_BYTE *)(a11 + 48) = v32 + 1;
  *(_DWORD *)(a11 + 4 * v32) = *v31;
  v30 = (char *)(*(_QWORD *)(a7 + 8 * v20) + 13);
  v12 = result + 3800;
  if ((v15 & 2) != 0)
    goto LABEL_41;
LABEL_22:
  v33 = *(_DWORD *)(*(_QWORD *)(v12 + 16 * *v30) + 680);
  v34 = *(_DWORD *)(result + 608);
  v35 = v34 - v33;
  v36 = v34 - *(_DWORD *)(*(_QWORD *)v14 + 680);
  if (v35 >= 127)
    v37 = 127;
  else
    v37 = v35;
  if (v37 <= -128)
    v37 = -128;
  if (v37)
  {
    if (v37 >= 0)
      v38 = v37;
    else
      v38 = -v37;
    v37 = (__int16)((__int16)((v38 >> 1) + 0x4000) / (__int16)v37);
  }
  if (v36 >= 127)
    v36 = 127;
  if (v36 <= -128)
    v36 = -128;
  v39 = (v37 * v36 + 32) >> 6;
  if (v39 >= 4095)
    v39 = 4095;
  if (v39 <= -4096)
    v39 = -4096;
  v40 = (__int16 *)(a11 + 4 * (*(unsigned __int8 *)(a11 + 48) - 1));
  v41.i32[0] = *v40;
  v41.i32[1] = v40[1];
  v42 = vmul_s32(vdup_n_s32(v39), v41);
  v43 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v42), (int32x2_t)0x7F0000007FLL), 8uLL);
  v44 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v42), (int8x8_t)vneg_s32(v43), (int8x8_t)v43), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
  *v40 = v44.i16[0];
  v40[1] = v44.i16[2];
LABEL_41:
  v45 = 0;
  while (1)
  {
    v46 = *(_QWORD *)(a8 + 8 * v45);
    if (!v46 || *(_BYTE *)(v46 + 10) != 1)
      goto LABEL_47;
    if (*(char *)(v46 + 12) == a4)
      break;
    v47 = *(char *)(v46 + 13);
    if (v47 != -1 && *(_DWORD *)(*(_QWORD *)v14 + 680) == *(_DWORD *)(*(_QWORD *)(v13 + 16 * v47) + 680))
    {
      v48 = *(unsigned __int8 *)(a11 + 48);
      if (!*(_BYTE *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)(v46 + 4))
      {
        v49 = *(_DWORD **)(a10 + 8 * v45);
        goto LABEL_55;
      }
      return result;
    }
LABEL_47:
    if (++v45 == 3)
      return result;
  }
  v48 = *(unsigned __int8 *)(a11 + 48);
  if (!*(_BYTE *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)v46)
  {
    v49 = (_DWORD *)(v46 + 4);
LABEL_55:
    *(_BYTE *)(a11 + 48) = v48 + 1;
    *(_DWORD *)(a11 + 4 * v48) = *v49;
  }
  return result;
}

uint64_t sub_1B6875EF8(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  signed int v39;
  __int16 *v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _DWORD *v49;

  v11 = 0;
  v12 = result + 3544;
  v13 = result + 3800;
  v14 = result + 3800 + 16 * a4;
  v15 = *(_DWORD *)(*(_QWORD *)v14 + 36);
  v16 = 1;
  do
  {
    v17 = v16;
    v18 = *(_QWORD *)(a7 + 8 * v11);
    if (v18 && *(_BYTE *)(v18 + 10) == 1)
    {
      if (*(char *)(v18 + 13) == a4)
      {
        v26 = *(_DWORD **)(a9 + 8 * v11);
        v27 = *(unsigned __int8 *)(a11 + 48);
        *(_BYTE *)(a11 + 48) = v27 + 1;
        *(_DWORD *)(a11 + 4 * v27) = *v26;
        goto LABEL_41;
      }
      v19 = *(char *)(v18 + 12);
      if (v19 != -1 && *(_DWORD *)(*(_QWORD *)v14 + 680) == *(_DWORD *)(*(_QWORD *)(v12 + 16 * v19) + 680))
      {
        v28 = *(unsigned __int8 *)(a11 + 48);
        *(_BYTE *)(a11 + 48) = v28 + 1;
        *(_DWORD *)(a11 + 4 * v28) = *(_DWORD *)(v18 + 4);
        goto LABEL_41;
      }
    }
    v16 = 0;
    v11 = 1;
  }
  while ((v17 & 1) != 0);
  v20 = 0;
  v21 = 1;
  while (1)
  {
    v22 = v21;
    v23 = *(_QWORD *)(a7 + 8 * v20);
    if (v23)
    {
      if (*(_BYTE *)(v23 + 10) == 1)
      {
        v24 = *(char *)(v23 + 13);
        if (v24 != -1 && ((v15 ^ *(unsigned __int8 *)(*(_QWORD *)(v13 + 16 * v24) + 36)) & 2) == 0)
        {
          v29 = *(_DWORD **)(a9 + 8 * v20);
          v30 = *(unsigned __int8 *)(a11 + 48);
          *(_BYTE *)(a11 + 48) = v30 + 1;
          *(_DWORD *)(a11 + 4 * v30) = *v29;
          v31 = (char *)(*(_QWORD *)(a7 + 8 * v20) + 13);
          if ((v15 & 2) != 0)
            goto LABEL_41;
          goto LABEL_22;
        }
        v25 = *(char *)(v23 + 12);
        if (v25 != -1 && ((v15 ^ *(unsigned __int8 *)(*(_QWORD *)(v12 + 16 * v25) + 36)) & 2) == 0)
          break;
      }
    }
    v21 = 0;
    v20 = 1;
    if ((v22 & 1) == 0)
      goto LABEL_41;
  }
  v32 = *(unsigned __int8 *)(a11 + 48);
  *(_BYTE *)(a11 + 48) = v32 + 1;
  *(_DWORD *)(a11 + 4 * v32) = *(_DWORD *)(v23 + 4);
  v31 = (char *)(*(_QWORD *)(a7 + 8 * v20) + 12);
  v13 = result + 3544;
  if ((v15 & 2) != 0)
    goto LABEL_41;
LABEL_22:
  v33 = *(_DWORD *)(*(_QWORD *)(v13 + 16 * *v31) + 680);
  v34 = *(_DWORD *)(result + 608);
  v35 = v34 - v33;
  v36 = v34 - *(_DWORD *)(*(_QWORD *)v14 + 680);
  if (v35 >= 127)
    v37 = 127;
  else
    v37 = v35;
  if (v37 <= -128)
    v37 = -128;
  if (v37)
  {
    if (v37 >= 0)
      v38 = v37;
    else
      v38 = -v37;
    v37 = (__int16)((__int16)((v38 >> 1) + 0x4000) / (__int16)v37);
  }
  if (v36 >= 127)
    v36 = 127;
  if (v36 <= -128)
    v36 = -128;
  v39 = (v37 * v36 + 32) >> 6;
  if (v39 >= 4095)
    v39 = 4095;
  if (v39 <= -4096)
    v39 = -4096;
  v40 = (__int16 *)(a11 + 4 * (*(unsigned __int8 *)(a11 + 48) - 1));
  v41.i32[0] = *v40;
  v41.i32[1] = v40[1];
  v42 = vmul_s32(vdup_n_s32(v39), v41);
  v43 = (int32x2_t)vshr_n_u32((uint32x2_t)vadd_s32(vabs_s32(v42), (int32x2_t)0x7F0000007FLL), 8uLL);
  v44 = vmax_s32(vmin_s32((int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v42), (int8x8_t)vneg_s32(v43), (int8x8_t)v43), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
  *v40 = v44.i16[0];
  v40[1] = v44.i16[2];
LABEL_41:
  v45 = 0;
  while (1)
  {
    v46 = *(_QWORD *)(a8 + 8 * v45);
    if (!v46 || *(_BYTE *)(v46 + 10) != 1)
      goto LABEL_47;
    if (*(char *)(v46 + 13) == a4)
      break;
    v47 = *(char *)(v46 + 12);
    if (v47 != -1 && *(_DWORD *)(*(_QWORD *)v14 + 680) == *(_DWORD *)(*(_QWORD *)(v12 + 16 * v47) + 680))
    {
      v48 = *(unsigned __int8 *)(a11 + 48);
      if (!*(_BYTE *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)v46)
      {
        v49 = (_DWORD *)(v46 + 4);
        goto LABEL_55;
      }
      return result;
    }
LABEL_47:
    if (++v45 == 3)
      return result;
  }
  v48 = *(unsigned __int8 *)(a11 + 48);
  if (!*(_BYTE *)(a11 + 48) || *(_DWORD *)a11 != *(_DWORD *)(v46 + 4))
  {
    v49 = *(_DWORD **)(a10 + 8 * v45);
LABEL_55:
    *(_BYTE *)(a11 + 48) = v48 + 1;
    *(_DWORD *)(a11 + 4 * v48) = *v49;
  }
  return result;
}

void sub_1B6876200(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;

  v2 = *(void **)a1;
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)a1 + v4;
        if (*(_QWORD *)v6)
        {
          free(*(void **)v6);
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          v3 = *(_QWORD *)(a1 + 8);
        }
        v4 += 56;
      }
      v2 = *(void **)a1;
    }
    free(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1B6876274(char **a1)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  char *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  char *v21;

  v2 = *a1;
  if (v2)
  {
    if (a1[1])
    {
      v3 = 0;
      v4 = 4648;
      do
      {
        v5 = *a1;
        v6 = (uint64_t)&(*a1)[v4];
        v7 = *(_QWORD *)(v6 + 208);
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v10 = *(void **)(v6 + 184);
        v9 = (_QWORD *)(v6 + 184);
        v8 = v10;
        if (v10)
        {
          free(v8);
          *v9 = 0;
          v9[1] = 0;
        }
        v11 = &v5[v4];
        v12 = *(void **)&v5[v4 + 168];
        if (v12)
        {
          free(v12);
          *(_QWORD *)&v5[v4 + 168] = 0;
          *(_QWORD *)&v5[v4 + 176] = 0;
        }
        v15 = (void *)*((_QWORD *)v11 + 19);
        v14 = v11 + 152;
        v13 = v15;
        if (v15)
        {
          free(v13);
          *v14 = 0;
          v14[1] = 0;
        }
        v16 = &v5[v4];
        sub_1B6836DAC((uint64_t)&v5[v4 + 136]);
        v17 = *(void **)&v5[v4 + 120];
        if (v17)
        {
          free(v17);
          *(_QWORD *)&v5[v4 + 120] = 0;
          *((_QWORD *)v16 + 16) = 0;
        }
        v20 = (void *)*((_QWORD *)v16 + 13);
        v19 = v16 + 104;
        v18 = v20;
        if (v20)
        {
          free(v18);
          *v19 = 0;
          v19[1] = 0;
        }
        v21 = &v5[v4];
        sub_1B6836E18((uint64_t)(v21 + 88));
        if (*(_QWORD *)v21)
        {
          free(*(void **)v21);
          *(_QWORD *)v21 = 0;
          *((_QWORD *)v21 + 1) = 0;
        }
        sub_1B682BFAC((uint64_t)(v21 - 3280));
        ++v3;
        v4 += 0x2000;
      }
      while (v3 < (unint64_t)a1[1]);
      v2 = *a1;
    }
    free(v2);
    *a1 = 0;
    a1[1] = 0;
  }
}

uint64_t sub_1B6876380(uint64_t a1, __n128 *a2, int a3, int a4, int a5)
{
  __n128 *v6;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  __n128 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  BOOL v42;
  NSObject *v43;
  const char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  BOOL v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  BOOL v61;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  BOOL v82;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  int v89;
  BOOL v90;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  int v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  _QWORD *v115;
  int v116;
  int v117;
  int v118;
  NSObject *v119;
  const char *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  int v129;
  uint64_t v130;
  _QWORD *v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  __n128 *v142;
  uint64_t v143;
  size_t v144;
  char *v145;
  unsigned int v146;
  size_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  __n128 v170;
  __n128 v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  const char *v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t (*v182)(uint64_t, __int16 *, int, int, int, int);
  uint64_t (*v183)(uint64_t, unsigned int *, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  __n128 v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  float v194;
  double v195;
  uint64_t v196;
  uint8_t *v197;
  double v198;
  double v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t i;
  uint64_t v206;
  int v207;
  int v208;
  int v209;
  uint64_t v211;
  char v212;
  int v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  double v219;
  double v220;
  double v221;
  __int16 v222;
  _WORD *v223;
  std::__shared_weak_count *v224;
  unint64_t *p_shared_owners;
  unint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  __int16 v229;
  unint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  _BYTE *v252;
  _BYTE *v253;
  _BYTE *v254;
  uint64_t v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  uint8_t buf[4];
  int v260;
  uint64_t v261;

  v6 = a2;
  v261 = *MEMORY[0x1E0C80C00];
  v8 = a1 + 79088;
  v9 = (_BYTE *)a2[36].n128_u64[1];
  v10 = (char)v9[3288];
  v11 = a2[2].n128_i64[1];
  v12 = (16 << *(_BYTE *)(v11 + 196)) - 1;
  v247 = *(_DWORD *)(v11 + 2016);
  v13 = *(_DWORD *)(v11 + 2020) * v247;
  v14 = (v10 + 2 * v13) / (2 * v10);
  v15 = v14 * a3;
  v16 = v13 - v14 * a3;
  if (v10 - 1 <= a3)
    v17 = v16;
  else
    v17 = v14;
  *(_QWORD *)(a1 + 79216) = v6;
  *(_QWORD *)(a1 + 1360) = v6[38].n128_u64[0];
  v250 = a1 + 1368;
  sub_1B67B665C((_QWORD *)(a1 + 1368), v11, v6[3].n128_i64[0]);
  v248 = a1 + 1384;
  sub_1B67B665C((_QWORD *)(a1 + 1384), v6[3].n128_i64[1], v6[4].n128_i64[0]);
  v18 = *(_BYTE *)(*(_QWORD *)(v8 + 128) + 640) == 0;
  *(_BYTE *)(a1 + 600) = v18;
  *(_BYTE *)(a1 + 601) = v18;
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(*(_QWORD *)(a1 + 1360) + 680);
  *(_DWORD *)(v8 + 220) = v15 + v17 - 1;
  *(_BYTE *)(a1 + 620) = 5;
  *(_QWORD *)(v8 + 224) = 0;
  *(_QWORD *)v8 = v9 + 3184;
  v249 = (_QWORD *)(a1 + 4056);
  sub_1B67C7674((_QWORD *)(a1 + 4056));
  *(_BYTE *)(a1 + 627) = 1;
  *(_WORD *)(a1 + 500) = 0;
  v19 = v6[40].n128_i8[0];
  if (v19 < 2)
  {
    LOBYTE(v26) = 0;
    v25 = 2;
    *(_BYTE *)(a1 + 10) = 2;
  }
  else
  {
    if (v19 - 3 < 2)
    {
      *(_BYTE *)(a1 + 10) = 0;
      v20 = *(_QWORD *)(v8 + 128);
      v21 = *(_DWORD *)(v20 + 656);
      if (v21 >= **(_DWORD **)(v20 + 1096))
        LOBYTE(v21) = **(_DWORD **)(v20 + 1096);
      *(_BYTE *)(a1 + 500) = v21;
      v22 = *(int **)(v20 + 1096);
      v23 = *(_DWORD *)(v20 + 656);
      v24 = *v22;
      if (v23 >= v24)
        LOBYTE(v23) = v24;
      *(_BYTE *)(a1 + 501) = v23;
      goto LABEL_11;
    }
    if (v19 == 2)
    {
      v25 = 1;
      *(_BYTE *)(a1 + 10) = 1;
      v27 = *(_QWORD *)(v8 + 128);
      v28 = *(int **)(v27 + 1096);
      v26 = *(_DWORD *)(v27 + 656);
      v29 = *v28;
      if (v26 >= v29)
        LOBYTE(v26) = v29;
      *(_BYTE *)(a1 + 500) = v26;
    }
    else
    {
      LOBYTE(v21) = 0;
      LOBYTE(v26) = 0;
      v25 = *(unsigned __int8 *)(a1 + 10);
      if (!*(_BYTE *)(a1 + 10))
      {
LABEL_11:
        v25 = 0;
        *(_QWORD *)(v8 + 80) = sub_1B68779D4;
        *(_QWORD *)(v8 + 88) = 0;
        LOBYTE(v26) = v21;
      }
    }
  }
  *(_BYTE *)a1 = a3 == 0;
  *(_BYTE *)(a1 + 2) = **(_BYTE **)(a1 + 1384);
  *(_DWORD *)(a1 + 4) = v15;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a1 + 601);
  *(_BYTE *)(a1 + 8) = 0;
  v30 = *(_QWORD *)(a1 + 1360);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v30 + 680) & v12;
  v31 = v9[3496];
  *(_BYTE *)(a1 + 502) = v31;
  *(_BYTE *)(a1 + 519) = v9[3497];
  *(_WORD *)(a1 + 11) = 1;
  *(_WORD *)(a1 + 538) = 1;
  if (v25 >= 2)
  {
    v34 = *(_BYTE *)(v8 + 72);
    goto LABEL_27;
  }
  v246 = v30;
  v32 = (unsigned int *)v6[68].n128_u64[1];
  if ((int)*v32 <= (char)v26)
    v33 = (char)v26;
  else
    v33 = *v32;
  if ((int)v33 > 16)
  {
    if (dword_1EF137CD0 >= 1)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Too many (%d) active refs!\n", v33);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v260 = v33;
        _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Too many (%d) active refs!\n", buf, 8u);
      }
    }
    goto LABEL_290;
  }
  if ((int)v33 >= 1)
  {
    v253 = v9;
    v45 = 0;
    v46 = a1 + 3544;
    do
    {
      if ((int)v32[1] >= 1)
      {
        v47 = v45;
        v48 = (_QWORD *)(v46 + 16 * v45);
        v49 = (uint64_t *)(v32 + 8);
        v50 = 1;
        do
        {
          v51 = sub_1B67B665C(v48, *(v49 - 1), *v49);
          v52 = v50 + 1;
          v49 += 2;
          v48 = v51 + 2;
          v53 = v50 < (int)v32[1] && v47 + v50 < v33;
          ++v50;
        }
        while (v53);
        v45 = v47 + v52 - 1;
      }
      if ((int)v32[2] >= 1 && v45 < (int)v33)
      {
        v55 = v45;
        v56 = (_QWORD *)(v46 + 16 * v45);
        v57 = (uint64_t *)(v32 + 72);
        v58 = 1;
        do
        {
          v59 = sub_1B67B665C(v56, *(v57 - 1), *v57);
          v60 = v58 + 1;
          v57 += 2;
          v56 = v59 + 2;
          v61 = v58 < (int)v32[2] && v55 + v58 < v33;
          ++v58;
        }
        while (v61);
        v45 = v55 + v60 - 1;
      }
      if ((int)v32[3] >= 1 && v45 < (int)v33)
      {
        v63 = v45;
        v64 = (_QWORD *)(v46 + 16 * v45);
        v65 = (uint64_t *)(v32 + 136);
        v66 = 1;
        do
        {
          v67 = sub_1B67B665C(v64, *(v65 - 1), *v65);
          v68 = v66 + 1;
          v65 += 2;
          v64 = v67 + 2;
          v69 = v66 < (int)v32[3] && v63 + v66 < v33;
          ++v66;
        }
        while (v69);
        v45 = v63 + v68 - 1;
      }
    }
    while (v45 < (int)v33);
    v31 = *(unsigned __int8 *)(a1 + 502);
    v9 = v253;
  }
  v70 = v246;
  if (v31)
    sub_1B67C76D0(a1 + 3544, *(char *)(a1 + 500) - 1, (unsigned __int8 *)(a1 + 503));
  if (!*(_BYTE *)(a1 + 10))
  {
    LODWORD(v72) = *(char *)(a1 + 501);
    if ((int)*v32 <= (int)v72)
      v73 = v72;
    else
      v73 = *v32;
    if ((int)v73 >= 1)
    {
      v254 = v9;
      v74 = 0;
      v75 = a1 + 3800;
      do
      {
        if ((int)v32[2] >= 1)
        {
          v76 = v74;
          v77 = (_QWORD *)(v75 + 16 * v74);
          v78 = (uint64_t *)(v32 + 72);
          v79 = 1;
          do
          {
            v80 = sub_1B67B665C(v77, *(v78 - 1), *v78);
            v81 = v79 + 1;
            v78 += 2;
            v77 = v80 + 2;
            v82 = v79 < (int)v32[2] && v76 + v79 < v73;
            ++v79;
          }
          while (v82);
          v74 = v76 + v81 - 1;
        }
        if ((int)v32[1] >= 1 && v74 < (int)v73)
        {
          v84 = v74;
          v85 = (_QWORD *)(v75 + 16 * v74);
          v86 = (uint64_t *)(v32 + 8);
          v87 = 1;
          do
          {
            v88 = sub_1B67B665C(v85, *(v86 - 1), *v86);
            v89 = v87 + 1;
            v86 += 2;
            v85 = v88 + 2;
            v90 = v87 < (int)v32[1] && v84 + v87 < v73;
            ++v87;
          }
          while (v90);
          v74 = v84 + v89 - 1;
        }
        if ((int)v32[3] >= 1 && v74 < (int)v73)
        {
          v92 = v74;
          v93 = (_QWORD *)(v75 + 16 * v74);
          v94 = (uint64_t *)(v32 + 136);
          v95 = 1;
          do
          {
            v96 = sub_1B67B665C(v93, *(v94 - 1), *v94);
            v97 = v95 + 1;
            v94 += 2;
            v93 = v96 + 2;
            v98 = v95 < (int)v32[3] && v92 + v95 < v73;
            ++v95;
          }
          while (v98);
          v74 = v92 + v97 - 1;
        }
      }
      while (v74 < (int)v73);
      LOBYTE(v72) = *(_BYTE *)(a1 + 501);
      v9 = v254;
    }
    v70 = v246;
    if (*(_BYTE *)(a1 + 519))
    {
      sub_1B67C76D0(a1 + 3800, (char)v72 - 1, (unsigned __int8 *)(a1 + 520));
      LOBYTE(v72) = *(_BYTE *)(a1 + 501);
    }
    LODWORD(v72) = *(char *)(a1 + 500) <= (char)v72 ? v72 : *(_BYTE *)(a1 + 500);
    if ((int)v72 >= 1)
    {
      v72 = v72;
      v179 = a1 + 3800;
      while (1)
      {
        v180 = *(_QWORD *)(v179 - 256);
        if (v180)
        {
          if (*(_DWORD *)(v180 + 680) > *(_DWORD *)(a1 + 608))
            break;
        }
        if (*(_QWORD *)v179 && *(_DWORD *)(*(_QWORD *)v179 + 680) > *(_DWORD *)(a1 + 608))
          break;
        v179 += 16;
        if (!--v72)
          goto LABEL_75;
      }
      *(_BYTE *)(a1 + 627) = 0;
    }
  }
LABEL_75:
  if (*(_BYTE *)(*(_QWORD *)v250 + 322))
  {
    if (*(_BYTE *)(a1 + 10))
      v71 = 0;
    else
      v71 = *(unsigned __int8 *)(a1 + 538) ^ 1;
    v99 = a1 + (v71 << 8) + 16 * *(unsigned __int8 *)(a1 + 539);
    v100 = *(_QWORD *)(v99 + 3544);
    if (!v100)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v119 = MEMORY[0x1E0C81028];
        v120 = "Temporal MVP enabled but pointing to invalid reference\n";
LABEL_289:
        _os_log_error_impl(&dword_1B676B000, v119, OS_LOG_TYPE_ERROR, v120, buf, 2u);
      }
LABEL_290:
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294954387;
      *(_WORD *)buf = 0;
      v43 = MEMORY[0x1E0C81028];
      v44 = "InitReferenceLists failed\n";
      goto LABEL_293;
    }
    if (!*(_BYTE *)a1 && *v249 != v100)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v119 = MEMORY[0x1E0C81028];
        v120 = "Temporal reference changed between slices\n";
        goto LABEL_289;
      }
      goto LABEL_290;
    }
    sub_1B67B665C(v249, v100, *(_QWORD *)(v99 + 3552));
    v101 = 0;
    v102 = a1 + 3800;
    v103 = (BOOL *)(v70 + 820);
    do
    {
      v104 = *(_QWORD *)(v102 + v101 - 256);
      if (v104)
      {
        *((_DWORD *)v103 - 33) = *(_DWORD *)(v104 + 680);
        *(v103 - 128) = (*(_BYTE *)(v104 + 36) & 2) != 0;
      }
      v105 = *(_QWORD *)(v102 + v101);
      if (v105)
      {
        *((_DWORD *)v103 - 1) = *(_DWORD *)(v105 + 680);
        *v103 = (*(_BYTE *)(v105 + 36) & 2) != 0;
      }
      v101 += 16;
      v103 += 8;
    }
    while (v101 != 256);
  }
  v106 = *(char *)(a1 + 500);
  v107 = *(unsigned __int8 *)(a1 + 500);
  if ((int)v106 >= 1)
  {
    v108 = (_QWORD *)(a1 + 3544);
    v109 = *(unsigned __int8 *)(a1 + 500);
    while (*v108)
    {
      v108 += 2;
      if (!--v109)
        goto LABEL_127;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_290;
    *(_WORD *)buf = 0;
    v119 = MEMORY[0x1E0C81028];
    v120 = "L0 found too few reference frames\n";
    goto LABEL_289;
  }
LABEL_127:
  v110 = *(unsigned __int8 *)(a1 + 10);
  if (!*(_BYTE *)(a1 + 10) && *(char *)(a1 + 501) >= 1)
  {
    v121 = *(unsigned __int8 *)(a1 + 501);
    v122 = (_QWORD *)(a1 + 3800);
    while (*v122)
    {
      v122 += 2;
      if (!--v121)
        goto LABEL_128;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_290;
    *(_WORD *)buf = 0;
    v119 = MEMORY[0x1E0C81028];
    v120 = "L1 found too few reference frames\n";
    goto LABEL_289;
  }
LABEL_128:
  if ((int)v106 < 1)
  {
    LOBYTE(v117) = 1;
    if (*(_BYTE *)(a1 + 10))
    {
LABEL_143:
      v118 = 3;
      goto LABEL_251;
    }
  }
  else
  {
    v111 = 0;
    v112 = a1 + 4080;
    v113 = 1;
    do
    {
      if (v111)
      {
        v114 = 0;
        v115 = (_QWORD *)(a1 + 3544);
        while (*(_QWORD *)(a1 + 3544 + 16 * v111) != *v115)
        {
          ++v114;
          v115 += 2;
          if (v111 == v114)
            goto LABEL_134;
        }
        v116 = *(unsigned __int8 *)(v112 + v114);
      }
      else
      {
LABEL_134:
        v116 = 0;
      }
      if (v116)
        v117 = v113;
      else
        v117 = v113 + 1;
      if (v116)
        LOBYTE(v113) = v116;
      *(_BYTE *)(v112 + v111++) = v113;
      v113 = v117;
    }
    while (v111 != v106);
    if (v110)
      goto LABEL_143;
  }
  if (*(char *)(a1 + 501) < 1)
  {
    v125 = 1;
  }
  else
  {
    v123 = 0;
    v124 = *(unsigned __int8 *)(a1 + 501);
    v125 = 1;
    do
    {
      v126 = *(_QWORD *)(a1 + 16 * v123 + 3800);
      if ((char)v107 < 1)
        goto LABEL_162;
      v127 = 0;
      v128 = (_QWORD *)(a1 + 3544);
      while (v126 != *v128)
      {
        ++v127;
        v128 += 2;
        if (v106 == v127)
          goto LABEL_162;
      }
      v125 = 0;
      v129 = *(unsigned __int8 *)(a1 + 4080 + v127);
      if (!v129)
      {
LABEL_162:
        if (v123)
        {
          v130 = 0;
          v131 = (_QWORD *)(a1 + 3800);
          while (v126 != *v131)
          {
            ++v130;
            v131 += 2;
            if (v123 == v130)
              goto LABEL_166;
          }
          v129 = *(unsigned __int8 *)(a1 + v130 + 4096);
        }
        else
        {
LABEL_166:
          v129 = 0;
        }
      }
      if (v129)
        v132 = v129;
      else
        v132 = v117;
      if (!v129)
        LOBYTE(v117) = v117 + 1;
      *(_BYTE *)(a1 + v123++ + 4096) = v132;
    }
    while (v123 != v124);
  }
  v118 = (v125 << 31 >> 31) & 3;
LABEL_251:
  if ((_DWORD)v106 == 1)
    v181 = 4;
  else
    v181 = 1;
  if (v110 != 1)
    v181 = v118;
  if (!*(_BYTE *)a1)
  {
    if (*(_DWORD *)(a1 + 4352) == v181)
      goto LABEL_260;
    v181 = 0;
  }
  *(_DWORD *)(a1 + 4352) = v181;
LABEL_260:
  *(_QWORD *)(a1 + 4360) = sub_1B67C64E8;
  *(_QWORD *)(a1 + 4368) = 0;
  if (v181 != 4)
  {
    if (v181 == 3)
    {
      v182 = sub_1B67C67C8;
      goto LABEL_265;
    }
    if (v181 != 1)
      goto LABEL_266;
  }
  v182 = sub_1B67C661C;
LABEL_265:
  *(_QWORD *)(a1 + 4360) = v182;
LABEL_266:
  v183 = sub_1B67C6C64;
  if ((!*(_BYTE *)(*(_QWORD *)v248 + 17) || v110 != 1) && (v110 || *(_BYTE *)(*(_QWORD *)v248 + 18) == 0))
    v183 = sub_1B67C6A50;
  *(_QWORD *)(a1 + 4376) = v183;
  *(_QWORD *)(a1 + 4384) = 0;
  switch(v181)
  {
    case 4:
      v185 = sub_1B687CEF4;
      goto LABEL_279;
    case 3:
      v185 = sub_1B687D080;
      goto LABEL_279;
    case 1:
      v185 = sub_1B687CD18;
LABEL_279:
      *(_QWORD *)(a1 + 4360) = v185;
      *(_QWORD *)(a1 + 4368) = 0;
      break;
  }
  if ((_DWORD)v107 != *(unsigned __int8 *)(a1 + 501))
  {
LABEL_286:
    v34 = 0;
    *(_BYTE *)(v8 + 72) = 0;
    goto LABEL_27;
  }
  v34 = 1;
  *(_BYTE *)(v8 + 72) = 1;
  if ((char)v107 >= 1)
  {
    v186 = a1 + 3800;
    while (*(_DWORD *)(*(_QWORD *)(v186 - 256) + 680) == *(_DWORD *)(*(_QWORD *)v186 + 680))
    {
      v186 += 16;
      v34 = 1;
      if (!--v107)
        goto LABEL_27;
    }
    goto LABEL_286;
  }
LABEL_27:
  v252 = v9;
  v35 = (_QWORD *)(a1 + 1400);
  *(_BYTE *)(a1 + 536) = v34;
  *(_QWORD *)(a1 + 1416) = v6[2].n128_u64[0];
  v36 = v6[1];
  *(int8x16_t *)(a1 + 1400) = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL);
  if (a4 && (**(unsigned int (***)(unint64_t, __n128))v36.n128_u64[0])(v36.n128_u64[0], v36))
  {
    v37 = *(_QWORD *)(a1 + 1400);
    v38 = *(_DWORD *)(v37 + 8);
    v39 = *(_QWORD *)(a1 + 1360);
    if (v38 > *(_DWORD *)(v39 + 276)
      || ((v40 = *(_DWORD *)(v37 + 12), v40 >= 17) ? (v41 = v38 < 17) : (v41 = 1),
          !v41 ? (v42 = v40 <= *(_DWORD *)(v39 + 280)) : (v42 = 0),
          !v42))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 4294954387;
      *(_WORD *)buf = 0;
      v43 = MEMORY[0x1E0C81028];
      v44 = "ScaleActiveReference failed\n";
LABEL_293:
      _os_log_error_impl(&dword_1B676B000, v43, OS_LOG_TYPE_ERROR, v44, buf, 2u);
      return 4294954387;
    }
    if (*(_BYTE *)(a1 + 10) != 2 && *(char *)(a1 + 500) >= 1)
    {
      v245 = v8;
      v133 = 0;
      v256 = a1 + 3544;
      do
      {
        v134 = *(_QWORD *)(v256 + 16 * v133);
        if (*(_DWORD *)(v134 + 248) == v38 && *(_DWORD *)(v134 + 252) == v40)
        {
          if ((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v134 + 32))(*(_QWORD *)(v256 + 16 * v133), 0) != *(_QWORD *)(v134 + 192))
            *(_BYTE *)(v134 + 272) = 1;
          *(_OWORD *)(v134 + 88) = *(_OWORD *)(v134 + 192);
          *(_OWORD *)(v134 + 112) = *(_OWORD *)(v134 + 216);
        }
        else if (*(_DWORD *)(v134 + 240) == v38 && *(_DWORD *)(v134 + 244) == v40)
        {
          v135 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v134 + 32))(*(_QWORD *)(v256 + 16 * v133), 0);
          if (v135 != (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v134 + 48))(v134, 0))
            *(_BYTE *)(v134 + 272) = 1;
          v136 = 0;
          v137 = 1;
          do
          {
            v138 = v137;
            v139 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 48))(v134, v136);
            v137 = 0;
            v140 = (_QWORD *)(v134 + 8 * v136);
            v140[11] = v139;
            v140[14] = v140[21];
            v136 = 1;
          }
          while ((v138 & 1) != 0);
        }
        else
        {
          v141 = *(int *)(v134 + 280);
          if ((_DWORD)v141)
          {
            v142 = v6;
            v143 = *(_QWORD *)(v134 + 216);
            v144 = *(int *)(v134 + 276);
            v145 = *(char **)(v134 + 192);
            do
            {
              --v141;
              memset(v145, 128, v144);
              v145 += v143;
            }
            while (v141);
            v146 = *(_DWORD *)(v134 + 280);
            v6 = v142;
            if (v146 >= 2)
            {
              v147 = *(int *)(v134 + 276);
              v148 = *(_QWORD *)(v134 + 224);
              v149 = (uint64_t)(int)v146 >> 1;
              v150 = *(char **)(v134 + 200);
              do
              {
                --v149;
                memset(v150, 128, v147);
                v150 += v148;
              }
              while (v149);
            }
          }
          v151 = 0;
          v152 = 1;
          do
          {
            v153 = v152;
            v154 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v134 + 48))(v134, v151);
            v152 = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 1416) + 8 * v151) = v154;
            v159 = (_QWORD *)(v134 + 8 * v151);
            *(_QWORD *)(*(_QWORD *)(a1 + 1416) + 8 * v151 + 16) = v159[24];
            v160 = *(_QWORD *)(a1 + 1416);
            v161 = v160 + 8 * v151;
            *(_QWORD *)(v161 + 32) = v159[21];
            *(_QWORD *)(v161 + 48) = v159[27];
            v151 = 1;
          }
          while ((v153 & 1) != 0);
          *(_QWORD *)(v160 + 64) = *(_QWORD *)(v134 + 240);
          *(_DWORD *)(v160 + 72) = v38;
          *(_DWORD *)(v160 + 76) = v40;
          sub_1B685223C(v160, v155, v156, v157, v158);
          *(_OWORD *)(v134 + 88) = *(_OWORD *)(v134 + 192);
          *(_OWORD *)(v134 + 112) = *(_OWORD *)(v134 + 216);
          *(_DWORD *)(v134 + 248) = v38;
          *(_DWORD *)(v134 + 252) = v40;
          *(_BYTE *)(v134 + 272) = 1;
        }
        ++v133;
      }
      while (v133 < *(char *)(a1 + 500));
      v39 = *(_QWORD *)(a1 + 1360);
      v8 = v245;
    }
    *(_DWORD *)(v39 + 240) = v38;
    *(_DWORD *)(v39 + 244) = v40;
    *(_QWORD *)(v39 + 248) = 0;
    v35 = (_QWORD *)(a1 + 1400);
  }
  if (!*(_BYTE *)(a1 + 600))
  {
    *(_BYTE *)(a1 + 20) = 0;
    v165 = *(_QWORD *)(a1 + 1368);
    v166 = *(unsigned int *)(v165 + 260);
    if ((_DWORD)v166)
    {
      v167 = 0;
      v168 = *(unsigned __int8 **)(*(_QWORD *)(v8 + 128) + 1112);
      v169 = *(unsigned __int8 **)(v165 + 264);
      while (!sub_1B688E0B4(v168, v169))
      {
        ++v167;
        v169 += 248;
        if (v166 == v167)
          goto LABEL_203;
      }
      *(_DWORD *)(a1 + 272) = v167;
      *(_BYTE *)(a1 + 20) = 1;
    }
  }
LABEL_203:
  v162 = v252;
  v163 = (char)v252[3334];
  *(_DWORD *)(a1 + 276) = v163;
  *(_DWORD *)(a1 + 280) = v163;
  *(_BYTE *)(a1 + 498) = v252[3430];
  *(_BYTE *)(a1 + 499) = 1;
  *(_BYTE *)(a1 + 537) = 0;
  *(_BYTE *)(a1 + 542) = 5 - *(_BYTE *)(a1 + 620);
  if (v252[3400])
  {
    v164 = (int)(*(float *)(*(_QWORD *)(v8 + 128) + 2720) + 0.5)
         - *(unsigned __int8 *)(*(_QWORD *)(a1 + 1384) + 9)
         - 26;
LABEL_212:
    *(_BYTE *)(a1 + 543) = v164;
    goto LABEL_213;
  }
  *(_BYTE *)(a1 + 543) = 0;
  if (*(unsigned __int8 *)(a1 + 10) <= 1u)
  {
    v164 = *(_DWORD *)(*(_QWORD *)(v8 + 128) + 652);
    goto LABEL_212;
  }
LABEL_213:
  *(_WORD *)(a1 + 544) = 0;
  sub_1B67C8710(a1);
  *(_BYTE *)(a1 + 543) = *(_BYTE *)(a1 + 621) - *(_BYTE *)(*(_QWORD *)(a1 + 1384) + 9) - 26;
  *(_BYTE *)(a1 + 546) = 0;
  v172 = *(unsigned __int8 *)(v6[3].n128_u64[1] + 31);
  *(_BYTE *)(a1 + 547) = v172;
  if (!v172 || *(_BYTE *)(*(_QWORD *)(a1 + 1408) + 33) && *(_BYTE *)(*v35 + 80))
  {
    v173 = sub_1B67F067C((_QWORD *)(a1 + 3320), a1, 1);
    if ((_DWORD)v173)
    {
      v174 = v173;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v175 = MEMORY[0x1E0C81028];
        v176 = "Deblock initialize failed\n";
        goto LABEL_219;
      }
      return v174;
    }
    if (!v252[3532] && (char)v252[3770] < 1)
      goto LABEL_298;
    *(_BYTE *)(a1 + 546) = 0;
    *(_WORD *)(a1 + 548) = *(_WORD *)(*(_QWORD *)(a1 + 1384) + 32);
    if (!*(_BYTE *)(*(_QWORD *)v8 + 224) || (v177 = *(char *)(*(_QWORD *)v8 + 586), v177 <= 0))
    {
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v35 + 16))(*v35))
      {
LABEL_298:
        *(_BYTE *)(a1 + 628) = 2 * *(_BYTE *)(a1 + 548);
        *(_BYTE *)(a1 + 629) = 2 * *(_BYTE *)(a1 + 549);
        goto LABEL_299;
      }
      v178 = *(_DWORD *)(*v35 + 12);
      if (*(_DWORD *)(*v35 + 8) > v178)
        v178 = *(_DWORD *)(*v35 + 8);
      if (v178 >= 192)
      {
        if (v178 >= 0x100)
        {
          if (v178 > 0x13F)
          {
LABEL_297:
            *(_BYTE *)(a1 + 546) = 1;
            goto LABEL_298;
          }
          LOBYTE(v177) = 4;
        }
        else
        {
          LOBYTE(v177) = 6;
        }
      }
      else
      {
        LOBYTE(v177) = 3;
      }
    }
    *(_BYTE *)(a1 + 548) = v177;
    *(_BYTE *)(a1 + 549) = v177;
    goto LABEL_297;
  }
LABEL_299:
  *(_BYTE *)(a1 + 550) = 0;
  v187 = v252[3418];
  *(_BYTE *)(a1 + 496) = (char)v252[3418] > 0;
  *(_BYTE *)(a1 + 497) = v187 == 2;
  v188 = a1 + 79096;
  v189 = 0uLL;
  *(_OWORD *)(a1 + 79096) = 0u;
  *(_OWORD *)(a1 + 79112) = 0u;
  *(_OWORD *)(a1 + 79128) = 0u;
  *(_OWORD *)(a1 + 79144) = 0u;
  v190 = v6[3].n128_u64[1];
  if (*(_BYTE *)(v190 + 17) || *(_BYTE *)(v190 + 18))
  {
    if (v252[3533])
    {
      v257 = 0;
      v258 = 0;
      if (*(_BYTE *)(a1 + 10) == 1)
      {
        LODWORD(v191) = *(char *)(a1 + 500);
        if ((int)v191 <= 0)
        {
          v200 = 0;
          v170.n128_u64[0] = 0xFFEFFFFFFFFFFFFFLL;
        }
        else
        {
          v192 = 0;
          v193 = (uint64_t *)(a1 + 3552);
          do
          {
            sub_1B67B665C(&v257, *(v193 - 1), *v193);
            v194 = *(float *)(v257 + 84);
            if (v194 == 0.0)
              v195 = 1.0;
            else
              v195 = *(float *)(*(_QWORD *)(*(_QWORD *)(v8 + 128) + 592) + 84) / v194;
            *(long double *)&buf[8 * v192++] = pow(v195, 0.454545455);
            v191 = *(char *)(a1 + 500);
            v193 += 2;
          }
          while (v192 < v191);
          if ((int)v191 < 1)
          {
            v200 = 0;
            v170.n128_u64[0] = 0xFFEFFFFFFFFFFFFFLL;
            v162 = v252;
          }
          else
          {
            v196 = v191;
            v197 = buf;
            v170.n128_u64[0] = 0xFFEFFFFFFFFFFFFFLL;
            v162 = v252;
            do
            {
              v198 = *(double *)v197;
              v197 += 8;
              v199 = v198;
              if (v170.n128_f64[0] < v198)
                v170.n128_f64[0] = v199;
              --v196;
            }
            while (v196);
            v200 = 1;
          }
        }
        v208 = 7;
        do
        {
          v209 = 1 << v208;
          v189.n128_f64[0] = (double)(1 << v208);
          if (v208-- == 0)
            break;
          v171.n128_f64[0] = v170.n128_f64[0] * v189.n128_f64[0];
        }
        while (v170.n128_f64[0] * v189.n128_f64[0] > (double)(v209 + 127));
        if (v200)
        {
          v211 = 0;
          v212 = v208 + 1;
          v213 = (v208 + 1);
          v214 = *(_QWORD *)(a1 + 1368);
          v215 = *(unsigned __int8 *)(v214 + 2000);
          v216 = *(unsigned __int8 *)(v214 + 2002);
          v217 = a1 + 640;
          v170.n128_u64[0] = 0.5;
          v171.n128_u64[0] = 0x405FC00000000000;
          do
          {
            v218 = 0;
            v219 = *(double *)&buf[8 * v211] * v189.n128_f64[0] + 0.5 - v189.n128_f64[0];
            if (v219 < 127.0)
              v220 = *(double *)&buf[8 * v211] * v189.n128_f64[0] + 0.5 - v189.n128_f64[0];
            else
              v220 = 127.0;
            if (v219 <= -128.0)
              v221 = -128.0;
            else
              v221 = v220;
            do
            {
              if (v218)
                v222 = 0;
              else
                v222 = (int)v221;
              v223 = (_WORD *)(v217 + v218);
              v223[48] = v222 + v209;
              *v223 = 0;
              v223[144] = v209;
              v223[96] = 0;
              v218 += 2;
            }
            while (v218 != 6);
            if ((int)v221)
              *(_WORD *)(v188 + 2 * v211) = 1;
            ++v211;
            v217 += 6;
          }
          while (v211 != v191);
          *(_BYTE *)(a1 + 540) = v212;
          *(_BYTE *)(a1 + 630) = v212;
          *(_BYTE *)(a1 + 541) = 0;
          *(_DWORD *)(a1 + 632) = v213 + 14 - v215;
          *(_DWORD *)(a1 + 636) = v213 + 14 - v216;
        }
      }
      v224 = v258;
      if (v258)
      {
        p_shared_owners = (unint64_t *)&v258->__shared_owners_;
        do
          v226 = __ldaxr(p_shared_owners);
        while (__stlxr(v226 - 1, p_shared_owners));
        if (!v226)
        {
          ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128))v224->__on_zero_shared)(v224, v189, v170, v171);
          std::__shared_weak_count::__release_weak(v224);
        }
      }
    }
    else if (v252[3534])
    {
      if (*(char *)(a1 + 500) >= 1)
      {
        v201 = 0;
        do
          sub_1B6877BE4((_QWORD *)a1, 0, v201++);
        while (v201 < *(char *)(a1 + 500));
      }
      v202 = *(unsigned __int8 *)(a1 + 501);
      if (*(_BYTE *)(a1 + 79160))
      {
        if ((char)v202 >= 1)
        {
          v203 = 0;
          v204 = a1 + 640;
          do
          {
            for (i = 0; i != 6; i += 2)
            {
              v206 = v204 + i;
              *(_WORD *)(v206 + 288) = *(_WORD *)(v204 + i + 96);
              *(_WORD *)(v206 + 192) = *(_WORD *)(v204 + i);
            }
            *(_WORD *)(a1 + 2 * v203 + 79128) = *(_WORD *)(v188 + 2 * v203);
            ++v203;
            v204 += 6;
          }
          while (v203 != v202);
        }
      }
      else if ((char)v202 >= 1)
      {
        v207 = 0;
        do
          sub_1B6877BE4((_QWORD *)a1, 1u, v207++);
        while (v207 < *(char *)(a1 + 501));
      }
    }
  }
  if (!a5)
    return 0;
  v227 = *(_QWORD **)(a1 + 1360);
  if (v227[61] * v227[60])
  {
    v228 = 0;
    v229 = *(unsigned __int8 *)(a1 + 621) << 9;
    do
    {
      *(_WORD *)(v227[64] + 2 * v228) = *(_WORD *)(v227[64] + 2 * v228) & 0x1FF | v229;
      ++v228;
    }
    while (v227[61] * v227[60] > v228);
  }
  if (*((_DWORD *)v162 + 840) == 4)
  {
    v230 = ((~*(_DWORD *)(a1 + 4) + v247 + *(_DWORD *)(v8 + 220)) / v247 - 1);
    *(_DWORD *)(a1 + 552) = v230;
    v174 = sub_1B67E7FE0((void **)(a1 + 560), v230);
    if ((_DWORD)v174)
      return v174;
  }
  else
  {
    *(_DWORD *)(a1 + 552) = 0;
  }
  v231 = *(char *)(a1 + 500);
  if (v231 >= 1)
  {
    v232 = 0;
    v233 = a1 + 3544;
    do
    {
      v234 = *(_QWORD *)v233;
      if (*(_BYTE *)(*(_QWORD *)v233 + 272))
      {
        v235 = sub_1B6834960((_QWORD *)(v234 + 944), *(unsigned __int8 *)(v6[2].n128_u64[1] + 2013));
        if ((_DWORD)v235)
          return v235;
        sub_1B68352E8((_QWORD *)(v234 + 944), *(unsigned int *)(v234 + 280));
        *(_BYTE *)(v234 + 272) = 0;
        LOBYTE(v231) = *(_BYTE *)(a1 + 500);
      }
      ++v232;
      v233 += 16;
    }
    while (v232 < (char)v231);
  }
  v236 = *(char *)(a1 + 501);
  if (v236 >= 1)
  {
    v237 = 0;
    v238 = a1 + 3800;
    do
    {
      v239 = *(_QWORD *)v238;
      if (*(_BYTE *)(*(_QWORD *)v238 + 272))
      {
        v240 = sub_1B6834960((_QWORD *)(v239 + 944), *(unsigned __int8 *)(v6[2].n128_u64[1] + 2013));
        if ((_DWORD)v240)
        {
          v174 = v240;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v175 = MEMORY[0x1E0C81028];
            v176 = "Interpolation cache initialize failed\n";
            goto LABEL_219;
          }
          return v174;
        }
        sub_1B68352E8((_QWORD *)(v239 + 944), *(unsigned int *)(v239 + 280));
        *(_BYTE *)(v239 + 272) = 0;
        LOBYTE(v236) = *(_BYTE *)(a1 + 501);
      }
      ++v237;
      v238 += 16;
    }
    while (v237 < (char)v236);
  }
  v241 = sub_1B67D02B8((_QWORD *)(a1 + 1424), *(unsigned __int8 *)(*(_QWORD *)(a1 + 1368) + 2000), *(unsigned __int8 *)(v6[2].n128_u64[1] + 323), 0);
  if ((_DWORD)v241)
  {
    v174 = v241;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v175 = MEMORY[0x1E0C81028];
      v176 = "Intra initialize failed\n";
      goto LABEL_219;
    }
    return v174;
  }
  v242 = sub_1B67CF370(a1 + 1840, *(unsigned __int8 *)(*(_QWORD *)(a1 + 1368) + 2000));
  if ((_DWORD)v242)
  {
    v174 = v242;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v175 = MEMORY[0x1E0C81028];
      v176 = "Trans initialize failed\n";
      goto LABEL_219;
    }
    return v174;
  }
  v243 = sub_1B67D59F4((_QWORD *)(a1 + 2104), *(unsigned __int8 *)(*(_QWORD *)(a1 + 1368) + 2000));
  if (!(_DWORD)v243)
  {
    if (*(_BYTE *)(a1 + 496) || *(_BYTE *)(a1 + 497))
      sub_1B687B2FC(a1 + 78120, *(char *)(a1 + 621), a1);
    return 0;
  }
  v174 = v243;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    v175 = MEMORY[0x1E0C81028];
    v176 = "Mocomp initialize failed\n";
LABEL_219:
    _os_log_error_impl(&dword_1B676B000, v175, OS_LOG_TYPE_ERROR, v176, buf, 2u);
  }
  return v174;
}

BOOL sub_1B68779D4(uint64_t a1, __int16 *a2, __int16 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  __int16 *v14;
  _BOOL8 result;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  v3 = *((char *)a2 + 8);
  if (v3 == -1)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 16 * v3 + 3544);
  v5 = *((char *)a2 + 9);
  if (v5 == -1)
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 16 * v5 + 3800);
  v7 = *((char *)a3 + 8);
  if (v7 == -1)
    v8 = 0;
  else
    v8 = *(_QWORD *)(a1 + 16 * v7 + 3544);
  v9 = *((char *)a3 + 9);
  if (v9 == -1)
    v10 = 0;
  else
    v10 = *(_QWORD *)(a1 + 16 * v9 + 3800);
  if (v4 == v8 && v6 == v10)
  {
    if (v4 != v6)
    {
      v11 = *a3 - *a2;
      if (v11 < 0)
        v11 = *a2 - *a3;
      if (v11 <= 3)
      {
        v12 = a3[1] - a2[1];
        if (v12 < 0)
          v12 = a2[1] - a3[1];
        if (v12 <= 3)
        {
          v13 = a3[2] - a2[2];
          if (v13 < 0)
            v13 = a2[2] - a3[2];
          if (v13 <= 3)
          {
            v14 = a3 + 3;
LABEL_62:
            v28 = *v14 - a2[3];
            if (v28 < 0)
              v28 = -v28;
            return v28 > 3;
          }
        }
      }
      return 1;
    }
    goto LABEL_39;
  }
  result = 1;
  if (v4 != v10 || v6 != v8)
    return result;
  if (v4 == v6)
  {
LABEL_39:
    v19 = *a3;
    v20 = *a2;
    v21 = v19 - v20;
    if (v19 - v20 < 0)
      v21 = v20 - v19;
    if (v21 <= 3)
    {
      v22 = a3[1] - a2[1];
      if (v22 < 0)
        v22 = a2[1] - a3[1];
      if (v22 <= 3)
      {
        v23 = a3[2] - a2[2];
        if (v23 < 0)
          v23 = a2[2] - a3[2];
        if (v23 <= 3)
        {
          v24 = a3[3] - a2[3];
          if (v24 < 0)
            v24 = a2[3] - a3[3];
          if (v24 < 4)
            return 0;
        }
      }
    }
    v25 = a3[2] - v20;
    if (v25 < 0)
      v25 = -v25;
    if (v25 > 3)
      return 1;
    v26 = a3[3] - a2[1];
    if (v26 < 0)
      v26 = a2[1] - a3[3];
    if (v26 > 3)
      return 1;
    v27 = v19 - a2[2];
    if (v27 < 0)
      v27 = -v27;
    if (v27 > 3)
      return 1;
LABEL_61:
    v14 = a3 + 1;
    goto LABEL_62;
  }
  v16 = a3[2] - *a2;
  if (v16 < 0)
    v16 = *a2 - a3[2];
  if (v16 <= 3)
  {
    v17 = a3[3] - a2[1];
    if (v17 < 0)
      v17 = a2[1] - a3[3];
    if (v17 <= 3)
    {
      v18 = *a3 - a2[2];
      if (v18 < 0)
        v18 = a2[2] - *a3;
      if (v18 <= 3)
        goto LABEL_61;
    }
  }
  return result;
}

uint64_t sub_1B6877BE4(_QWORD *a1, unsigned int a2, int a3)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint32x4_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  uint8x16_t v56;
  uint16x8_t v57;
  uint32x4_t v58;
  uint16x8_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  uint16x8_t v70;
  uint32x4_t v71;
  uint32x4_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  uint16x4_t v103;
  uint32x4_t v104;
  int8x16_t v105;
  int64x2_t v106;
  int64x2_t v107;
  uint32x4_t v108;
  int64x2_t v109;
  int64x2_t v110;
  uint32x4_t v111;
  uint32x4_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  uint16x4_t v136;
  uint32x4_t v137;
  uint16x4_t v138;
  uint32x4_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  float v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  uint8x16_t v172;
  uint16x8_t v173;
  uint32x4_t v174;
  uint16x8_t v175;
  uint32x4_t v176;
  uint32x4_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  int64x2_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t v185;
  uint16x8_t v186;
  uint32x4_t v187;
  uint32x4_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  BOOL v196;
  uint64_t v197;
  uint64_t v198;
  BOOL v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  __int16 v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  char v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  unint64_t v235;
  _WORD *v236;
  _WORD *v237;
  _WORD *v238;
  _WORD *v239;
  uint64_t result;
  unint64_t v241;
  unsigned int v242;
  char v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD v299[2];

  v12 = a1[171];
  v5 = *(_BYTE *)(v12 + 194);
  v6 = *(_BYTE *)(v12 + 195);
  v7 = *(unsigned __int8 *)(v12 + 2000);
  v8 = a2;
  v9 = a3;
  v10 = (unint64_t)&a1[32 * (unint64_t)a2 + 2 * a3];
  v11 = a1[9902];
  LODWORD(v12) = *(_DWORD *)(*(_QWORD *)(v10 + 3544) + 8) - *(_DWORD *)(v11 + 644);
  if ((v12 & 0x80000000) == 0)
    v12 = v12;
  else
    v12 = (*(_DWORD *)(v11 + 644) - *(_DWORD *)(*(_QWORD *)(v10 + 3544) + 8));
  v241 = v12;
  v258 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v11 + 592) + 16))(*(_QWORD *)(v11 + 592), 0, 0, 0);
  v13 = *(_QWORD **)(a1[9902] + 592);
  v263 = v13[14];
  v282 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t))(*v13 + 16))(v13, 0, 0, 1);
  v14 = *(_QWORD *)(*(_QWORD *)(a1[9902] + 592) + 120);
  v262 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v10 + 3544) + 16))(*(_QWORD *)(v10 + 3544), 0, 0, 0);
  v15 = *(_QWORD **)(v10 + 3544);
  v16 = v15[14];
  v17 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t))(*v15 + 16))(v15, 0, 0, 1);
  v20 = a1[170];
  v21 = *(_DWORD *)(v20 + 280);
  v22 = (v21 - 32);
  v246 = v8;
  v247 = a1;
  v245 = v9;
  v243 = v5;
  v244 = v6;
  v242 = a2;
  if (v21 >= 32)
  {
    v25 = 0;
    v26 = 0;
    v281 = 0;
    v257 = 230 << v7;
    v27 = 20 << v7;
    v28 = 45 << v7;
    v29 = *(_QWORD *)(*(_QWORD *)(v10 + 3544) + 120);
    v298 = 0;
    v299[0] = 0;
    v296 = 0;
    v297 = 0;
    v294 = 0;
    v295 = 0;
    v250 = v20;
    v30 = *(int *)(v20 + 276);
    v292 = 0;
    v293 = 0;
    v289 = v30 - 32;
    v290 = 0;
    v31 = 2 * v29;
    v291 = 0;
    v252 = v14 << 6;
    v253 = v29 << 6;
    v32 = 2 * v14;
    v33 = v282;
    v284 = v17;
    v34 = v17;
    v35 = v258;
    v37 = v262;
    v36 = v263;
    v38 = v16;
    v261 = v16;
    v259 = 45 << v7;
    v260 = 20 << v7;
    do
    {
      if ((int)v30 >= 33)
      {
        v39 = 0;
        v40 = v33;
        v41 = v34;
        v42 = v281;
        do
        {
          if (*(_BYTE *)(a1[171] + 2000) == 8)
          {
            v43 = 0;
            v44 = 0;
            v45 = v17 + v29 * (v25 >> 1) + v39;
            v46 = v282 + v14 * (v25 >> 1) + v39;
            do
            {
              v47 = 0;
              v48 = 0uLL;
              v49 = (int64x2_t)(unint64_t)v44;
              v50 = 0uLL;
              v51 = 0uLL;
              v52 = 0uLL;
              v53 = 0uLL;
              v54 = 0uLL;
              v55 = 0uLL;
              do
              {
                v56 = vabdq_u8(*(uint8x16_t *)(v46 + v47), *(uint8x16_t *)(v45 + v47));
                v57 = vmovl_u8(*(uint8x8_t *)v56.i8);
                v18 = (int64x2_t)vmovl_u16(*(uint16x4_t *)v57.i8);
                v58 = vmovl_high_u16(v57);
                v59 = vmovl_high_u8(v56);
                v60 = vmovl_u16(*(uint16x4_t *)v59.i8);
                v61 = vmovl_high_u16(v59);
                v53 = (int64x2_t)vaddw_high_u32((uint64x2_t)v53, v60);
                v51 = (int64x2_t)vaddw_high_u32((uint64x2_t)v51, v58);
                v54 = (int64x2_t)vaddw_u32((uint64x2_t)v54, *(uint32x2_t *)v61.i8);
                v52 = (int64x2_t)vaddw_u32((uint64x2_t)v52, *(uint32x2_t *)v60.i8);
                v50 = (int64x2_t)vaddw_u32((uint64x2_t)v50, *(uint32x2_t *)v58.i8);
                v48 = (int64x2_t)vaddw_high_u32((uint64x2_t)v48, (uint32x4_t)v18);
                v55 = (int64x2_t)vaddw_high_u32((uint64x2_t)v55, v61);
                v49 = (int64x2_t)vaddw_u32((uint64x2_t)v49, *(uint32x2_t *)v18.i8);
                v47 += 16;
              }
              while (v47 != 32);
              v44 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v49, v52), vaddq_s64(v50, v54)), vaddq_s64(vaddq_s64(v48, v53), vaddq_s64(v51, v55))));
              v46 += v14;
              v45 += v29;
              ++v43;
            }
            while (v43 != 16);
          }
          else
          {
            v62 = 0;
            v44 = 0;
            v63 = v40;
            v64 = v41;
            do
            {
              v65 = 0;
              v66 = 0uLL;
              v67 = (int64x2_t)(unint64_t)v44;
              v68 = 0uLL;
              v69 = 0uLL;
              do
              {
                v70 = vabdq_u16(*(uint16x8_t *)(v63 + v65), *(uint16x8_t *)(v64 + v65));
                v71 = vmovl_u16(*(uint16x4_t *)v70.i8);
                v72 = vmovl_high_u16(v70);
                v69 = (int64x2_t)vaddw_high_u32((uint64x2_t)v69, v72);
                v68 = (int64x2_t)vaddw_u32((uint64x2_t)v68, *(uint32x2_t *)v72.i8);
                v66 = (int64x2_t)vaddw_high_u32((uint64x2_t)v66, v71);
                v67 = (int64x2_t)vaddw_u32((uint64x2_t)v67, *(uint32x2_t *)v71.i8);
                v65 += 16;
              }
              while (v65 != 64);
              v44 = vaddvq_s64(vaddq_s64(vaddq_s64(v67, v68), vaddq_s64(v66, v69)));
              ++v62;
              v64 += v31;
              v63 += v32;
            }
            while (v62 != 16);
          }
          v42 += v44;
          v39 += 64;
          v41 += 128;
          v40 += 128;
        }
        while (v39 < v289);
        v281 = v42;
        v26 += ((v30 - 33) >> 6) + 1;
        v37 = v262;
        v36 = v263;
        v38 = v16;
        v28 = 45 << v7;
        v27 = 20 << v7;
      }
      v25 += 64;
      v34 += v253;
      v33 += v252;
    }
    while (v25 <= v22);
    if (v26 > 0)
      v281 = (uint64_t)(v281 + ((unint64_t)v26 >> 1)) / v26;
    v73 = 230 << v7;
    v256 = 0;
    v269 = 0;
    v270 = 0;
    v274 = 0;
    v275 = 0;
    v271 = 0;
    v272 = 0;
    v24 = 0;
    v273 = 0;
    v267 = 0;
    v268 = 0;
    v276 = 0;
    v277 = 0;
    v278 = 0;
    v23 = 0;
    v74 = 8000;
    if (v7 == 8)
      v74 = 2000;
    v280 = v74;
    v75 = 4000;
    if (v7 == 8)
      v75 = 1000;
    v251 = v75;
    v76 = 1600;
    if (v7 == 8)
      v76 = 100;
    v249 = v76;
    v248 = *(_DWORD *)(v20 + 276);
    v77 = 2 * v36;
    v78 = 2 * v38;
    v79.i64[0] = 255;
    v79.i64[1] = 255;
    v255 = v282;
    v254 = v284;
    do
    {
      if (v248 >= 33)
      {
        v80 = 0;
        v286 = v38 * (int)v256;
        v287 = v36 * (int)v256;
        v279 = v256 >> 1;
        v81 = *(unsigned __int8 *)(v247[171] + 2000);
        v82 = v254;
        v83 = v255;
        v288 = v81;
        do
        {
          if (v81 == 8)
          {
            v84 = 0;
            v85 = 0;
            v86 = 0;
            v87 = 0;
            v88 = 0;
            v89 = 0;
            v90 = v37 + v286 + (int)v80;
            v91 = v35 + v287 + (int)v80;
            do
            {
              v92 = 0;
              v93 = (int64x2_t)(unint64_t)v84;
              v94 = 0uLL;
              v95 = (int64x2_t)(unint64_t)v85;
              v96 = (int64x2_t)(unint64_t)v86;
              v97 = (int64x2_t)v87;
              v98 = (int64x2_t)(unint64_t)v88;
              v99 = 0uLL;
              v100 = 0uLL;
              v101 = 0uLL;
              v102 = 0uLL;
              do
              {
                v18.i32[0] = *(_DWORD *)(v91 + v92);
                v103 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v18.i8).u64[0];
                v104 = vmovl_u16(v103);
                v105.i64[0] = v104.u32[0];
                v105.i64[1] = v104.u32[1];
                v106 = (int64x2_t)vandq_s8(v105, v79);
                v105.i64[0] = v104.u32[2];
                v105.i64[1] = v104.u32[3];
                v107 = (int64x2_t)vandq_s8(v105, v79);
                v94 = vaddq_s64(v94, v107);
                v93 = vaddq_s64(v93, v106);
                v19.i32[0] = *(_DWORD *)(v90 + v92);
                v19.i64[0] = vmovl_u8(*(uint8x8_t *)v19.i8).u64[0];
                v108 = vmovl_u16(*(uint16x4_t *)v19.i8);
                v105.i64[0] = v108.u32[0];
                v105.i64[1] = v108.u32[1];
                v109 = (int64x2_t)vandq_s8(v105, v79);
                v105.i64[0] = v108.u32[2];
                v105.i64[1] = v108.u32[3];
                v110 = (int64x2_t)vandq_s8(v105, v79);
                v99 = vaddq_s64(v99, v110);
                v95 = vaddq_s64(v95, v109);
                v111 = vmull_u16(v103, v103);
                v100 = (int64x2_t)vaddw_high_u32((uint64x2_t)v100, v111);
                v96 = (int64x2_t)vaddw_u32((uint64x2_t)v96, *(uint32x2_t *)v111.i8);
                v112 = vmull_u16(*(uint16x4_t *)v19.i8, *(uint16x4_t *)v19.i8);
                v101 = (int64x2_t)vaddw_high_u32((uint64x2_t)v101, v112);
                v106.i64[0] *= v109.i64[0];
                v106.i64[1] *= v109.i64[1];
                v97 = (int64x2_t)vaddw_u32((uint64x2_t)v97, *(uint32x2_t *)v112.i8);
                v18.i64[0] = v110.i64[0] * v107.i64[0];
                v18.i64[1] = v110.i64[1] * v107.i64[1];
                v102 = vaddq_s64(v18, v102);
                v98 = vaddq_s64(v106, v98);
                v92 += 4;
              }
              while (v92 != 32);
              v113 = vaddvq_s64(vaddq_s64(v98, v102));
              v88 = v113;
              v114 = vaddvq_s64(vaddq_s64(v97, v101));
              v87 = v114;
              v115 = vaddvq_s64(vaddq_s64(v96, v100));
              v86 = v115;
              v116 = vaddvq_s64(vaddq_s64(v95, v99));
              v85 = v116;
              v117 = vaddvq_s64(vaddq_s64(v93, v94));
              v84 = v117;
              v91 += v36;
              v90 += v38;
              ++v89;
            }
            while (v89 != 32);
            v118 = (v115 << 10) - v117 * v117;
            v119 = (v114 << 10) - v116 * v116;
            if (v118 < 1 || v119 < 1)
            {
              if (v119 <= 0 && v118 <= 0)
                v149 = 1.0;
              else
                v149 = 0.0;
            }
            else
            {
              v149 = (float)((v113 << 10) - v116 * v117) / sqrtf((float)v118 * (float)v119);
            }
            v81 = v288;
          }
          else
          {
            v84 = 0;
            v85 = 0;
            v86 = 0;
            v87 = 0;
            v88 = 0;
            v122 = 0;
            v123 = v35 + 2 * (v287 + (int)v80);
            v124 = v37 + 2 * (v286 + (int)v80);
            do
            {
              v125 = 0;
              v126 = (int64x2_t)(unint64_t)v84;
              v127 = 0uLL;
              v128 = (int64x2_t)(unint64_t)v85;
              v129 = (int64x2_t)(unint64_t)v86;
              v130 = (int64x2_t)v87;
              v131 = (int64x2_t)(unint64_t)v88;
              v132 = 0uLL;
              v133 = 0uLL;
              v134 = 0uLL;
              v135 = 0uLL;
              do
              {
                v136 = *(uint16x4_t *)(v123 + v125);
                v137 = vmovl_u16(v136);
                v127 = (int64x2_t)vaddw_high_u32((uint64x2_t)v127, v137);
                v126 = (int64x2_t)vaddw_u32((uint64x2_t)v126, *(uint32x2_t *)v137.i8);
                v138 = *(uint16x4_t *)(v124 + v125);
                v19 = vmovl_u16(v138);
                v132 = (int64x2_t)vaddw_high_u32((uint64x2_t)v132, v19);
                v128 = (int64x2_t)vaddw_u32((uint64x2_t)v128, *(uint32x2_t *)v19.i8);
                v139 = vmull_u16(v136, v136);
                v133 = (int64x2_t)vaddw_high_u32((uint64x2_t)v133, v139);
                v129 = (int64x2_t)vaddw_u32((uint64x2_t)v129, *(uint32x2_t *)v139.i8);
                v18 = (int64x2_t)vmull_u16(v138, v138);
                v134 = (int64x2_t)vaddw_high_u32((uint64x2_t)v134, (uint32x4_t)v18);
                v130 = (int64x2_t)vaddw_u32((uint64x2_t)v130, *(uint32x2_t *)v18.i8);
                v135 = (int64x2_t)vmlal_high_u32((uint64x2_t)v135, v19, v137);
                v131 = (int64x2_t)vmlal_u32((uint64x2_t)v131, *(uint32x2_t *)v19.i8, *(uint32x2_t *)v137.i8);
                v125 += 8;
              }
              while (v125 != 64);
              v140 = vaddvq_s64(vaddq_s64(v131, v135));
              v88 = v140;
              v141 = vaddvq_s64(vaddq_s64(v130, v134));
              v87 = v141;
              v142 = vaddvq_s64(vaddq_s64(v129, v133));
              v86 = v142;
              v143 = vaddvq_s64(vaddq_s64(v128, v132));
              v85 = v143;
              v144 = vaddvq_s64(vaddq_s64(v126, v127));
              v84 = v144;
              ++v122;
              v123 += v77;
              v124 += v78;
            }
            while (v122 != 32);
            v145 = (v142 << 10) - v144 * v144;
            v146 = (v141 << 10) - v143 * v143;
            if (v145 < 1 || v146 < 1)
            {
              if (v146 <= 0 && v145 <= 0)
                v149 = 1.0;
              else
                v149 = 0.0;
            }
            else
            {
              v149 = (float)((v140 << 10) - v143 * v144) / sqrtf((float)v145 * (float)v146);
            }
          }
          v150 = (v84 << 8) + 1535;
          if (v84 << 8 >= -512)
            v150 = (v84 << 8) + 512;
          v151 = v150 >> 10;
          v152 = (v85 << 8) + 1535;
          if (v85 << 8 >= -512)
            v152 = (v85 << 8) + 512;
          v153 = v152 >> 10;
          if (v73 >= (int)v151 && v73 >= (int)v153 && v27 <= (int)v151 && v27 <= (int)v153)
          {
            v157 = v151 - v153;
            if (v157 < 0)
              v157 = -v157;
            if (v157 <= v28)
            {
              v285 = v83;
              if (v81 == 8)
              {
                v158 = 0;
                v159 = 0;
                v160 = v80;
                v161 = v284 + v29 * (v256 >> 1) + v80;
                v162 = v282 + v14 * (v256 >> 1) + v80;
                do
                {
                  v163 = 0;
                  v164 = 0uLL;
                  v165 = (int64x2_t)(unint64_t)v159;
                  v166 = 0uLL;
                  v167 = 0uLL;
                  v168 = 0uLL;
                  v169 = 0uLL;
                  v170 = 0uLL;
                  v171 = 0uLL;
                  do
                  {
                    v172 = vabdq_u8(*(uint8x16_t *)(v162 + v163), *(uint8x16_t *)(v161 + v163));
                    v173 = vmovl_u8(*(uint8x8_t *)v172.i8);
                    v174 = vmovl_u16(*(uint16x4_t *)v173.i8);
                    v18 = (int64x2_t)vmovl_high_u16(v173);
                    v175 = vmovl_high_u8(v172);
                    v176 = vmovl_u16(*(uint16x4_t *)v175.i8);
                    v177 = vmovl_high_u16(v175);
                    v169 = (int64x2_t)vaddw_high_u32((uint64x2_t)v169, v176);
                    v167 = (int64x2_t)vaddw_high_u32((uint64x2_t)v167, (uint32x4_t)v18);
                    v170 = (int64x2_t)vaddw_u32((uint64x2_t)v170, *(uint32x2_t *)v177.i8);
                    v168 = (int64x2_t)vaddw_u32((uint64x2_t)v168, *(uint32x2_t *)v176.i8);
                    v166 = (int64x2_t)vaddw_u32((uint64x2_t)v166, *(uint32x2_t *)v18.i8);
                    v164 = (int64x2_t)vaddw_high_u32((uint64x2_t)v164, v174);
                    v171 = (int64x2_t)vaddw_high_u32((uint64x2_t)v171, v177);
                    v165 = (int64x2_t)vaddw_u32((uint64x2_t)v165, *(uint32x2_t *)v174.i8);
                    v163 += 16;
                  }
                  while (v163 != 32);
                  v159 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v165, v168), vaddq_s64(v166, v170)), vaddq_s64(vaddq_s64(v164, v169), vaddq_s64(v167, v171))));
                  v162 += v14;
                  v161 += v29;
                  ++v158;
                }
                while (v158 != 16);
              }
              else
              {
                v178 = v83;
                v160 = v80;
                v179 = 0;
                v159 = 0;
                v180 = v82;
                do
                {
                  v181 = 0;
                  v182 = 0uLL;
                  v183 = (int64x2_t)(unint64_t)v159;
                  v184 = 0uLL;
                  v185 = 0uLL;
                  do
                  {
                    v186 = vabdq_u16(*(uint16x8_t *)(v178 + v181), *(uint16x8_t *)(v180 + v181));
                    v187 = vmovl_u16(*(uint16x4_t *)v186.i8);
                    v188 = vmovl_high_u16(v186);
                    v185 = (int64x2_t)vaddw_high_u32((uint64x2_t)v185, v188);
                    v184 = (int64x2_t)vaddw_u32((uint64x2_t)v184, *(uint32x2_t *)v188.i8);
                    v182 = (int64x2_t)vaddw_high_u32((uint64x2_t)v182, v187);
                    v183 = (int64x2_t)vaddw_u32((uint64x2_t)v183, *(uint32x2_t *)v187.i8);
                    v181 += 16;
                  }
                  while (v181 != 64);
                  v159 = vaddvq_s64(vaddq_s64(vaddq_s64(v183, v184), vaddq_s64(v182, v185)));
                  ++v179;
                  v180 += v31;
                  v178 += v32;
                }
                while (v179 != 16);
              }
              v189 = (v86 << 10) - v84 * v84;
              v190 = v189 + 0x80000;
              v191 = v189 + 1572863;
              if (v190 < 0)
                v190 = v191;
              v192 = (v87 << 10) - v85 * v85;
              v193 = v192 + 0x80000;
              v194 = v192 + 1572863;
              if (v193 >= 0)
                v194 = v193;
              v196 = v281 >= v280 || v159 < v280;
              if (v149 >= 0.9 && v196
                || (v281 >= v280 || v159 < v251)
                && ((v198 = v194 >> 20, v190 >> 20 < v249) ? (v199 = v198 < v249) : (v199 = 0), v199 && v149 >= 0.4))
              {
                if (v149 < 0.9)
                {
                  v87 = (unint64_t)(v85 * v85 + 512) >> 10;
                  v197 = v85 * v84 + 1535;
                  if (v85 * v84 >= -512)
                    v197 = v85 * v84 + 512;
                  v88 = v197 >> 10;
                }
                v266 = v24;
                v265 = v23;
                v283 = v160;
                v264 = v82;
                if (v81 == 8)
                {
                  sub_1B6878C18(v160, v279, v282, v14, v284, v29, v299, &v298, &v297, &v296, &v295, 0);
                  sub_1B6878C18(v283, v279, v282, v14, v284, v29, &v294, &v293, &v292, &v291, &v290, 1u);
                }
                else
                {
                  sub_1B6878CDC(v160, v279, v282, v14, v284, v29, v299, &v298, &v297, &v296, &v295, 0);
                  sub_1B6878CDC(v283, v279, v282, v14, v284, v29, &v294, &v293, &v292, &v291, &v290, 1u);
                }
                v36 = v263;
                v82 = v264;
                v81 = v288;
                v80 = v283;
                v79.i64[0] = 255;
                v79.i64[1] = 255;
                v23 = v265;
                v28 = v259;
                v27 = v260;
                v73 = v257;
                v38 = v261;
                v37 = v262;
                v35 = v258;
                v83 = v285;
                ++v278;
                v276 += v84;
                v277 += v85;
                v272 += v87;
                v267 += v88;
                v274 += v299[0];
                v273 += v296;
                v24 = v295 + v266;
                v275 += v293;
                v268 += v298;
                v269 += v291;
                v270 += v290;
                v271 += v294;
              }
              else
              {
                v80 = v160;
                v83 = v285;
              }
            }
          }
          ++v23;
          v80 += 64;
          v82 += 128;
          v83 += 128;
        }
        while ((int)v289 > (int)v80);
      }
      v254 += v253;
      v255 += v252;
      v256 += 64;
    }
    while (*(_DWORD *)(v250 + 280) - 32 >= (int)v256);
  }
  else
  {
    v23 = 0;
    v278 = 0;
    v276 = 0;
    v277 = 0;
    v272 = 0;
    v273 = 0;
    v267 = 0;
    v268 = 0;
    v274 = 0;
    v275 = 0;
    v24 = 0;
    v270 = 0;
    v271 = 0;
    v269 = 0;
  }
  v200 = v247[171];
  if (v23 >= 4 * v278)
  {
    LOWORD(v215) = 0;
    LOWORD(v216) = 0;
    v217 = 0;
    v202 = *(unsigned __int8 *)(v200 + 2000);
    goto LABEL_134;
  }
  v201 = v278 << 10;
  v202 = *(unsigned __int8 *)(v200 + 2000);
  v203 = (v201 << (v202 - 8)) * v241;
  v204 = v203 + v277;
  v205 = v277 - v203;
  if (v276 <= v204 && v276 >= v205)
  {
    LOWORD(v215) = 0;
    LOWORD(v216) = 0;
    v217 = 0;
LABEL_134:
    LOWORD(v209) = 64;
    LOWORD(v218) = 64;
    v219 = 64;
    v221 = v245;
    v220 = v246;
    v223 = v243;
    v222 = v244;
    v224 = v242;
    goto LABEL_170;
  }
  v207 = ((int)v201 * (uint64_t)(int)v201) << (2 * v202 - 16);
  v208 = v272 * v201 - v277 * v277;
  LODWORD(v209) = 64;
  if (v208 <= 16 * v207)
  {
    v211 = v274;
    v213 = v270;
    v212 = v271;
    v214 = v269;
  }
  else
  {
    v210 = v267 * v201 - v277 * v276;
    v211 = v274;
    v213 = v270;
    v212 = v271;
    v214 = v269;
    if (v210 > 16 * v207)
      v209 = ((v210 << 6) + (v208 >> 1)) / v208;
  }
  if ((int)v209 >= 127)
    LODWORD(v209) = 127;
  if ((int)v209 <= -128)
    LODWORD(v209) = -128;
  v215 = (unint64_t)(((v201 >> 1) + (v276 << 6) - v277 * (int)v209) / v201 + 32) >> 6;
  if ((int)v215 >= 127)
    LODWORD(v215) = 127;
  if ((int)v215 <= -128)
    LOWORD(v215) = -128;
  v225 = v201 >> 2;
  v226 = v273 * (v201 >> 2) - v268 * v268;
  v227 = 16 * (((int)v225 * (uint64_t)(int)v225) << (2 * v202 - 16));
  LODWORD(v218) = 64;
  if (v226 <= v227)
  {
    v228 = v268;
    v221 = v245;
    v220 = v246;
    v223 = v243;
    v222 = v244;
    v224 = v242;
  }
  else
  {
    v228 = v268;
    v229 = v24 * v225 - v268 * v211;
    v221 = v245;
    v220 = v246;
    v223 = v243;
    v222 = v244;
    v224 = v242;
    if (v229 > v227)
      v218 = ((v229 << 6) + (v226 >> 1)) / v226;
  }
  if ((int)v218 >= 127)
    LODWORD(v218) = 127;
  if ((int)v218 <= -128)
    LODWORD(v218) = -128;
  v230 = v201 >> 3;
  v216 = (unint64_t)(((v211 << 6) + (v201 >> 3) - v228 * (int)v218) / v225 + 32) >> 6;
  if ((int)v216 >= 127)
    LODWORD(v216) = 127;
  if ((int)v216 <= -128)
    LOWORD(v216) = -128;
  v231 = v214 * v225 - v275 * v275;
  LODWORD(v232) = 64;
  if (v231 > v227)
  {
    v233 = v213 * v225 - v275 * v212;
    if (v233 > v227)
      v232 = ((v233 << 6) + (v231 >> 1)) / v231;
  }
  if ((int)v232 >= 127)
    LODWORD(v232) = 127;
  if ((int)v232 <= -128)
    v234 = -128;
  else
    v234 = v232;
  v235 = (unint64_t)((v230 + (v212 << 6) - v275 * v234) / v225 + 32) >> 6;
  if ((int)v235 >= 127)
    LODWORD(v235) = 127;
  if ((int)v235 <= -128)
    v217 = -128;
  else
    v217 = v235;
  v219 = (unsigned __int16)v234;
LABEL_170:
  *((_WORD *)v247 + 270) = 6;
  *((_BYTE *)v247 + 630) = 6;
  v236 = (_WORD *)v247 + 3 * (int)v221;
  v237 = v236 + 464;
  if (!v224)
    v237 = v236 + 368;
  v238 = v236 + 416;
  v239 = v236 + 320;
  if (v224)
    v239 = v238;
  *v237 = v209;
  result = (-1 << v223);
  *v239 = v215 & result;
  v237[1] = v218;
  v239[1] = v216 & (-1 << v222);
  v237[2] = v219;
  v239[2] = v217 & (-1 << v222);
  *((_DWORD *)v247 + 158) = 20 - v202;
  *((_DWORD *)v247 + 159) = 20 - *(unsigned __int8 *)(v200 + 2002);
  if (*v239 || *v237 != 64)
    *((_BYTE *)&v247[4 * v220 + 9887] + 2 * v221) = 1;
  if (v239[1] || v237[1] != 64 || ((unsigned __int16)v217 & (unsigned __int16)(-1 << v222)) != 0 || v219 != 64)
    *((_BYTE *)&v247[4 * v220 + 9887] + 2 * v221 + 1) = 1;
  return result;
}

uint64_t sub_1B6878C18(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11, unsigned int a12)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;

  v12 = 0;
  v13 = a12 + (uint64_t)(int)result;
  v14 = a5 + v13 + a2 * a6;
  *a7 = 0;
  *a8 = 0;
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  v15 = a3 + v13 + a2 * a4;
  do
  {
    v16 = 0;
    do
    {
      *a7 += *(unsigned __int8 *)(v15 + v16);
      *a8 += *(unsigned __int8 *)(v14 + v16);
      *a9 += *(unsigned __int8 *)(v15 + v16) * *(unsigned __int8 *)(v15 + v16);
      *a10 += *(unsigned __int8 *)(v14 + v16) * *(unsigned __int8 *)(v14 + v16);
      *a11 += *(unsigned __int8 *)(v14 + v16) * (unint64_t)*(unsigned __int8 *)(v15 + v16);
      v17 = v16 >= 0x1E;
      v16 += 2;
    }
    while (!v17);
    v15 += a4;
    v14 += a6;
    ++v12;
  }
  while (v12 != 16);
  return result;
}

uint64_t sub_1B6878CDC(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _QWORD *a10, uint64_t *a11, unsigned int a12)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  BOOL v20;

  v12 = 0;
  v13 = a12 + (uint64_t)a1;
  v14 = a5 + 2 * (v13 + a2 * a6);
  *a7 = 0;
  *a8 = 0;
  v15 = a3 + 2 * (v13 + a2 * a4);
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  do
  {
    v16 = 0;
    do
    {
      v17 = *(unsigned __int16 *)(v15 + 2 * v16);
      v18 = *(unsigned __int16 *)(v14 + 2 * v16);
      *a7 += v17;
      *a8 += v18;
      *a9 += (v17 * v17);
      *a10 += (v18 * v18);
      result = *a11;
      *a11 += v18 * (unint64_t)v17;
      v20 = v16 >= 0x1E;
      v16 += 2;
    }
    while (!v20);
    ++v12;
    v14 += 2 * a6;
    v15 += 2 * a4;
  }
  while (v12 != 16);
  return result;
}

uint64_t sub_1B6878D98(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  dispatch_queue_global_t global_queue;
  dispatch_group_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  dispatch_semaphore_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *queue;
  int v42;
  int v43;
  uint8_t v44[16];
  uint8_t buf[16];
  uint8_t v46[16];

  v4 = a1 + 79216;
  v5 = *(_DWORD *)(a1 + 4);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 1368) + 2016);
  global_queue = dispatch_get_global_queue(*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 79216) + 584) + 3404), 0);
  if (!*(_QWORD *)(v4 + 72))
  {
    v8 = dispatch_group_create();
    *(_QWORD *)(v4 + 72) = v8;
    if (!v8)
    {
LABEL_10:
      v11 = 4294954392;
      goto LABEL_39;
    }
  }
  v9 = (void **)(v4 + 56);
  v10 = a2;
  if (*(_QWORD *)(v4 + 64) >= (unint64_t)a2)
    goto LABEL_15;
  if (a2 > 0x215555)
    goto LABEL_50;
  if (*v9)
  {
    free(*v9);
    *v9 = 0;
    *(_QWORD *)(v4 + 64) = 0;
  }
  if (malloc_type_posix_memalign((void **)(v4 + 56), 0x10uLL, 48 * a2, 0x10200405C8DC180uLL) || !*v9)
  {
LABEL_50:
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v46 = 0;
      _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "SubstreamContext creation failed\n", v46, 2u);
    }
    goto LABEL_10;
  }
  v12 = 16;
  v13 = a2;
  do
  {
    v14 = (char *)*v9 + v12;
    *v14 = 0;
    v14[1] = 0;
    v12 += 48;
    --v13;
  }
  while (v13);
  *(_QWORD *)(v4 + 64) = a2;
LABEL_15:
  v11 = sub_1B6879178(v4 + 8, a2);
  if (!(_DWORD)v11)
  {
    queue = global_queue;
    v43 = a2;
    v15 = a2 - 1;
    if (a2 < 1)
    {
LABEL_21:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 1368) + 2016))
      {
        v29 = 0;
        do
        {
          dispatch_semaphore_signal(*((dispatch_semaphore_t *)*v9 + 3));
          ++v29;
        }
        while (v29 < *(unsigned int *)(*(_QWORD *)(a1 + 1368) + 2016));
      }
      a2 = v43;
      if (!v43)
      {
        dispatch_group_wait(*(dispatch_group_t *)(v4 + 72), 0xFFFFFFFFFFFFFFFFLL);
        return 0;
      }
      v30 = 0;
      do
      {
        dispatch_group_async_f(*(dispatch_group_t *)(v4 + 72), queue, (void *)(*(_QWORD *)(v4 + 56) + v30), (dispatch_function_t)sub_1B687A140);
        v30 += 48;
        --v10;
      }
      while (v10);
      dispatch_group_wait(*(dispatch_group_t *)(v4 + 72), 0xFFFFFFFFFFFFFFFFLL);
      if (v43 < 1)
      {
        v11 = 0;
      }
      else
      {
        v31 = *(_QWORD *)(v4 + 96);
        v32 = v43;
        v33 = (unsigned int *)(*(_QWORD *)(v4 + 56) + 44);
        do
        {
          v34 = *v33;
          v33 += 12;
          v31 += v34;
          --v32;
        }
        while (v32);
        v11 = 0;
        *(_QWORD *)(v4 + 96) = v31;
      }
    }
    else
    {
      v16 = v5;
      v17 = 0;
      v18 = v6;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = *(_QWORD **)(v4 + 56);
      v42 = v16 / v18;
      while (1)
      {
        v23 = &v22[v20];
        v24 = *(_DWORD *)(*(_QWORD *)(a1 + 1368) + 2016) * (v42 + v21);
        v25 = *(_QWORD *)(v4 + 24) + v17;
        *v23 = a1;
        v23[1] = v25;
        v26 = *(_QWORD *)(v4 + 8) + v19;
        v23[2] = v26;
        v23[5] = v24;
        v27 = sub_1B6835480(v26, a1);
        if ((_DWORD)v27)
          break;
        v28 = dispatch_semaphore_create(0);
        v22 = *v9;
        *(_QWORD *)((char *)*v9 + v20 * 8 + 24) = v28;
        if (!v28)
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v44 = 0;
            _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Can't create semaphore\n", v44, 2u);
          }
          v11 = 4294954392;
          goto LABEL_37;
        }
        ++v21;
        v20 += 6;
        v22[6 * (v15 % v43) + 4] = v28;
        v19 += 0x2000;
        v17 += 416;
        ++v15;
        if (6 * v43 == v20)
          goto LABEL_21;
      }
      v11 = v27;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "LCUEnc init failed\n", buf, 2u);
      }
LABEL_37:
      a2 = v43;
    }
  }
LABEL_39:
  v35 = *(_QWORD *)(v4 + 56);
  if (v35)
    v36 = a2 == 0;
  else
    v36 = 1;
  if (!v36)
  {
    v37 = a2;
    v38 = 24;
    do
    {
      v39 = *(NSObject **)(v35 + v38);
      if (v39)
      {
        dispatch_release(v39);
        v35 = *(_QWORD *)(v4 + 56);
        *(_QWORD *)(v35 + v38) = 0;
      }
      v38 += 48;
      --v37;
    }
    while (v37);
  }
  return v11;
}

uint64_t sub_1B6879178(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;

  if (*(_QWORD *)(a1 + 8) >= a2)
    return 0;
  if (a2 > 0x3200)
    return 4294954392;
  sub_1B6876274((char **)a1);
  if (malloc_type_posix_memalign((void **)a1, 0x20uLL, a2 << 13, 0x10F0040FE6B764CuLL) || !*(_QWORD *)a1)
    return 4294954392;
  v5 = 0;
  v6 = 4200;
  do
  {
    v7 = *(_QWORD *)a1 + v6;
    v8 = (_OWORD *)(v7 - 2664);
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    bzero((void *)(v7 - 2280), 0x800uLL);
    *(_QWORD *)v7 = sub_1B688CF78;
    *(_QWORD *)(v7 + 8) = sub_1B688D020;
    *(_QWORD *)(v7 + 16) = sub_1B688D0F4;
    *(_QWORD *)(v7 + 24) = sub_1B688D228;
    *(_QWORD *)(v7 + 32) = sub_1B688D2CC;
    *(_QWORD *)(v7 + 40) = sub_1B688D334;
    *(_QWORD *)(v7 + 48) = sub_1B688D3B4;
    *(_QWORD *)(v7 + 56) = sub_1B688D424;
    *(_QWORD *)(v7 + 448) = 0;
    *(_QWORD *)(v7 + 456) = 0;
    v9 = (_QWORD *)(v7 - 2328);
    *(_DWORD *)(v7 + 216) = 0;
    *(_DWORD *)(v7 + 228) = 0;
    *(_DWORD *)(v7 + 232) = 0;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *(_OWORD *)(v7 + 536) = 0u;
    *(_OWORD *)(v7 + 552) = 0u;
    *(_OWORD *)(v7 + 568) = 0u;
    *(_OWORD *)(v7 + 584) = 0u;
    *(_OWORD *)(v7 + 600) = 0u;
    *(_OWORD *)(v7 + 616) = 0u;
    *(_OWORD *)(v7 + 632) = 0u;
    *(_DWORD *)(v7 + 648) = 0;
    *(_QWORD *)(v7 + 720) = 0;
    *(_OWORD *)(v7 + 688) = 0u;
    *(_OWORD *)(v7 + 704) = 0u;
    *(_OWORD *)(v7 + 656) = 0u;
    *(_OWORD *)(v7 + 672) = 0u;
    *(_BYTE *)(v7 + 240) = 1;
    *(_BYTE *)(v7 + 250) = 0;
    *(_WORD *)(v7 + 248) = -1;
    ++v5;
    v6 += 0x2000;
    *(_BYTE *)(v7 + 3920) = 0;
  }
  while (a2 != v5);
  result = 0;
  *(_QWORD *)(a1 + 8) = a2;
  return result;
}

uint64_t sub_1B68792FC(unsigned __int8 *a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  signed int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  signed int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  signed int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  _BYTE *v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unint64_t v79;
  NSObject *v81;
  const char *v82;
  int v83;
  int v84;
  __int16 v85;
  signed int v86;
  __int16 v87;
  signed int v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 79216;
  v3 = *((_QWORD *)a1 + 9902);
  v4 = *(_DWORD **)(v3 + 608);
  v5 = *(char *)(*(_QWORD *)(v3 + 584) + 3288);
  if (a1[600])
  {
    v6 = 19;
  }
  else if ((int)v4[170] >= 0)
  {
    v6 = 1;
  }
  else
  {
    v6 = 7;
  }
  v7 = sub_1B67C8F84((void **)a1 + 436, (2 * (v5 + v4[70] * v4[69]) - 2) / v5);
  if ((_DWORD)v7)
  {
    v8 = v7;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v83) = 0;
      _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Bitstream initialization for SliceEnc failed\n", (uint8_t *)&v83, 2u);
    }
    return v8;
  }
  sub_1B67C8FE0((uint64_t)(a1 + 3488), 0, 1);
  sub_1B67C8FE0((uint64_t)(a1 + 3488), v6, 6);
  sub_1B67C8FE0((uint64_t)(a1 + 3488), 0, 6);
  sub_1B67C8FE0((uint64_t)(a1 + 3488), 1, 3);
  sub_1B67C8FE0((uint64_t)(a1 + 3488), *a1, 1);
  if (a1[601])
    sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[1], 1);
  v9 = a1[2] + 1;
  v10 = __clz(v9);
  sub_1B67C8FE0((uint64_t)(a1 + 3488), (v9 - (0x80000000 >> v10)) | (0x80000000 >> v10), (2 * v10) ^ 0x3F);
  if (!*a1)
  {
    if (*(_BYTE *)(*((_QWORD *)a1 + 173) + 2))
      sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[8], 1);
    v11 = *((_DWORD *)a1 + 1) + 1;
    v12 = __clz(v11);
    sub_1B67C8FE0((uint64_t)(a1 + 3488), (v11 - (0x80000000 >> v12)) | (0x80000000 >> v12), 63 - 2 * v12);
  }
  if (!a1[8])
  {
    v13 = a1[10] + 1;
    v14 = __clz(v13);
    sub_1B67C8FE0((uint64_t)(a1 + 3488), (v13 - (0x80000000 >> v14)) | (0x80000000 >> v14), (2 * v14) ^ 0x3F);
    if (*(_BYTE *)(*((_QWORD *)a1 + 173) + 3))
      sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[11], 1);
    v15 = *((_QWORD *)a1 + 171);
    if (!a1[600])
    {
      sub_1B67C8FE0((uint64_t)(a1 + 3488), *((_DWORD *)a1 + 4), *(unsigned __int8 *)(v15 + 196) + 4);
      sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[20], 1);
      if (a1[20])
      {
        v16 = *(_DWORD *)(*((_QWORD *)a1 + 171) + 260);
        if (v16 >= 2)
        {
          v17 = __clz(v16) ^ 0x1F;
          if ((v16 & (v16 - 1)) != 0)
            v18 = v17 + 1;
          else
            v18 = v17;
          sub_1B67C8FE0((uint64_t)(a1 + 3488), *((_DWORD *)a1 + 68), v18);
        }
      }
      else
      {
        v8 = sub_1B688F0F0(*(_QWORD *)(*(_QWORD *)v2 + 1112), (uint64_t)(a1 + 3488), *((_QWORD *)a1 + 171), *(_DWORD *)(*((_QWORD *)a1 + 171) + 260));
        if ((_DWORD)v8)
          return v8;
      }
      v15 = *((_QWORD *)a1 + 171);
      if (*(_BYTE *)(v15 + 280))
      {
        if (*(_DWORD *)(v15 + 284))
        {
          v19 = *((_DWORD *)a1 + 69) + 1;
          v20 = __clz(v19);
          sub_1B67C8FE0((uint64_t)(a1 + 3488), (v19 - (0x80000000 >> v20)) | (0x80000000 >> v20), 63 - 2 * v20);
        }
        v21 = *((_DWORD *)a1 + 70) + 1;
        v22 = __clz(v21);
        sub_1B67C8FE0((uint64_t)(a1 + 3488), (v21 - (0x80000000 >> v22)) | (0x80000000 >> v22), 63 - 2 * v22);
        LODWORD(v23) = *((_DWORD *)a1 + 69);
        if ((_DWORD)v23)
        {
          v24 = 0;
          v25 = a1 + 284;
          do
          {
            v26 = v25[v24] + 1;
            v27 = __clz(v26);
            sub_1B67C8FE0((uint64_t)(a1 + 3488), (v26 - (0x80000000 >> v27)) | (0x80000000 >> v27), (2 * v27) ^ 0x3F);
            v28 = (1 << v24) & *((unsigned __int16 *)a1 + 247);
            sub_1B67C8FE0((uint64_t)(a1 + 3488), v28 != 0, 1);
            if (v28)
            {
              v29 = *(_DWORD *)&v25[4 * v24 + 80] + 1;
              v30 = __clz(v29);
              sub_1B67C8FE0((uint64_t)(a1 + 3488), (v29 - (0x80000000 >> v30)) | (0x80000000 >> v30), 63 - 2 * v30);
            }
            ++v24;
            v23 = *((unsigned int *)a1 + 69);
          }
          while (v24 < v23);
        }
        if (v23 < *((_DWORD *)a1 + 70) + (int)v23)
        {
          v31 = (int)v23;
          v32 = a1 + 300;
          do
          {
            v33 = *(unsigned __int16 *)&v32[2 * v31] + 1;
            v34 = __clz(v33);
            sub_1B67C8FE0((uint64_t)(a1 + 3488), (v33 - (0x80000000 >> v34)) | (0x80000000 >> v34), (2 * v34) ^ 0x3F);
            v35 = (1 << v31) & *((unsigned __int16 *)a1 + 247);
            sub_1B67C8FE0((uint64_t)(a1 + 3488), (*((unsigned __int16 *)a1 + 246) >> v31) & 1, 1);
            sub_1B67C8FE0((uint64_t)(a1 + 3488), v35 != 0, 1);
            if (v35)
            {
              v36 = *(_DWORD *)&v32[4 * v31 + 64] + 1;
              v37 = __clz(v36);
              sub_1B67C8FE0((uint64_t)(a1 + 3488), (v36 - (0x80000000 >> v37)) | (0x80000000 >> v37), 63 - 2 * v37);
            }
            ++v31;
          }
          while (*((_DWORD *)a1 + 70) + *((_DWORD *)a1 + 69) > v31);
        }
        v15 = *((_QWORD *)a1 + 171);
      }
      if (*(_BYTE *)(v15 + 322))
      {
        sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[498], 1);
        v15 = *((_QWORD *)a1 + 171);
      }
    }
    if (*(_BYTE *)(v15 + 249))
    {
      sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[496], 1);
      sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[497], 1);
    }
    if (a1[10] > 1u)
      goto LABEL_86;
    sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[499], 1);
    if (a1[499])
    {
      v38 = (char)a1[500];
      v39 = __clz(v38);
      sub_1B67C8FE0((uint64_t)(a1 + 3488), (v38 - (0x80000000 >> v39)) | (0x80000000 >> v39), 63 - 2 * v39);
      if (!a1[10])
      {
        v40 = (char)a1[501];
        v41 = __clz(v40);
        sub_1B67C8FE0((uint64_t)(a1 + 3488), (v40 - (0x80000000 >> v41)) | (0x80000000 >> v41), 63 - 2 * v41);
      }
    }
    if (*(_BYTE *)(*((_QWORD *)a1 + 173) + 1595))
    {
      v42 = **(_DWORD **)(*(_QWORD *)v2 + 1096);
      if (v42 >= 2)
      {
        sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[502], 1);
        if (a1[502])
        {
          v43 = __clz(v42) ^ 0x1F;
          v44 = (v42 & (v42 - 1)) != 0 ? v43 + 1 : v43;
          if ((char)a1[500] >= 1)
          {
            v45 = 0;
            while (1)
            {
              v46 = a1[v45 + 503];
              if (v42 <= v46)
                break;
              sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[v45++ + 503], v44);
              if (v45 >= (char)a1[500])
                goto LABEL_58;
            }
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              return 4294954394;
            v83 = 67109632;
            v84 = v45;
            v85 = 1024;
            v86 = v46;
            v87 = 1024;
            v88 = v42;
            v81 = MEMORY[0x1E0C81028];
            v82 = "list_entry_l0_[%d] (%d) out of range [0, %d]\n";
            goto LABEL_127;
          }
        }
LABEL_58:
        if (a1[10])
        {
LABEL_69:
          if (*(_BYTE *)(*((_QWORD *)a1 + 173) + 6))
            sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[537], 1);
          if (!a1[498])
            goto LABEL_77;
          if (!a1[10])
            sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[538], 1);
          if (a1[538])
          {
            if ((char)a1[500] <= 1)
            {
LABEL_77:
              v53 = *((_QWORD *)a1 + 173);
              if (*(_BYTE *)(v53 + 17) && a1[10] == 1 || *(_BYTE *)(v53 + 18) && !a1[10])
              {
                v54 = a1[540] + 1;
                v55 = __clz(v54);
                sub_1B67C8FE0((uint64_t)(a1 + 3488), (v54 - (0x80000000 >> v55)) | (0x80000000 >> v55), (2 * v55) ^ 0x3F);
                if (*(_BYTE *)(*((_QWORD *)a1 + 171) + 173))
                  sub_1B67C9368((uint64_t)(a1 + 3488), (char)a1[541]);
                sub_1B6879DD0((uint64_t)a1, 0);
                if (!a1[10])
                  sub_1B6879DD0((uint64_t)a1, 1);
              }
              v56 = a1[542] + 1;
              v57 = __clz(v56);
              sub_1B67C8FE0((uint64_t)(a1 + 3488), (v56 - (0x80000000 >> v57)) | (0x80000000 >> v57), (2 * v57) ^ 0x3F);
LABEL_86:
              v58 = (char)a1[543];
              if (v58 <= 0)
                v59 = -2 * v58;
              else
                v59 = 2 * v58 - 1;
              v60 = v59 + 1;
              v61 = __clz(v60);
              sub_1B67C8FE0((uint64_t)(a1 + 3488), (v60 - (0x80000000 >> v61)) | (0x80000000 >> v61), 63 - 2 * v61);
              v62 = (_BYTE *)*((_QWORD *)a1 + 173);
              if (v62[16])
              {
                v63 = (char)a1[544];
                if (v63 <= 0)
                  v64 = -2 * v63;
                else
                  v64 = 2 * v63 - 1;
                v65 = v64 + 1;
                v66 = __clz(v65);
                sub_1B67C8FE0((uint64_t)(a1 + 3488), (v65 - (0x80000000 >> v66)) | (0x80000000 >> v66), 63 - 2 * v66);
                v67 = (char)a1[545];
                if (v67 <= 0)
                  v68 = -2 * v67;
                else
                  v68 = 2 * v67 - 1;
                v69 = v68 + 1;
                v70 = __clz(v69);
                sub_1B67C8FE0((uint64_t)(a1 + 3488), (v69 - (0x80000000 >> v70)) | (0x80000000 >> v70), 63 - 2 * v70);
                v62 = (_BYTE *)*((_QWORD *)a1 + 173);
              }
              if (v62[29])
              {
                if (v62[30])
                  sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[546], 1);
                if (a1[546])
                {
                  sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[547], 1);
                  if (!a1[547])
                  {
                    sub_1B67C9368((uint64_t)(a1 + 3488), (char)a1[548]);
                    sub_1B67C9368((uint64_t)(a1 + 3488), (char)a1[549]);
                  }
                }
              }
              if (*(_BYTE *)(*((_QWORD *)a1 + 173) + 28) && (a1[496] || a1[497] || !a1[547]))
                sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[550], 1);
              goto LABEL_107;
            }
          }
          else if ((char)a1[501] < 2)
          {
            goto LABEL_77;
          }
          v51 = a1[539] + 1;
          v52 = __clz(v51);
          sub_1B67C8FE0((uint64_t)(a1 + 3488), (v51 - (0x80000000 >> v52)) | (0x80000000 >> v52), (2 * v52) ^ 0x3F);
          goto LABEL_77;
        }
        sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[519], 1);
        if (a1[519])
        {
          v47 = __clz(v42) ^ 0x1F;
          v48 = (v42 & (v42 - 1)) != 0 ? v47 + 1 : v47;
          if ((char)a1[501] >= 1)
          {
            v49 = 0;
            while (1)
            {
              v50 = a1[v49 + 520];
              if (v42 <= v50)
                break;
              sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[v49++ + 520], v48);
              if (v49 >= (char)a1[501])
                goto LABEL_67;
            }
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              return 4294954394;
            v83 = 67109632;
            v84 = v49;
            v85 = 1024;
            v86 = v50;
            v87 = 1024;
            v88 = v42;
            v81 = MEMORY[0x1E0C81028];
            v82 = "list_entry_l1_[%d] (%d) out of range [0, %d]\n";
LABEL_127:
            _os_log_error_impl(&dword_1B676B000, v81, OS_LOG_TYPE_ERROR, v82, (uint8_t *)&v83, 0x14u);
            return 4294954394;
          }
        }
      }
    }
LABEL_67:
    if (!a1[10])
      sub_1B67C8FE0((uint64_t)(a1 + 3488), a1[536], 1);
    goto LABEL_69;
  }
LABEL_107:
  v71 = *((_QWORD *)a1 + 173);
  if (*(_BYTE *)(v71 + 20) || *(_BYTE *)(v71 + 21))
  {
    v72 = *((_DWORD *)a1 + 138) + 1;
    v73 = __clz(v72);
    sub_1B67C8FE0((uint64_t)(a1 + 3488), (v72 - (0x80000000 >> v73)) | (0x80000000 >> v73), 63 - 2 * v73);
    if (*((_DWORD *)a1 + 138))
    {
      v74 = a1[556] + 1;
      v75 = __clz(v74);
      sub_1B67C8FE0((uint64_t)(a1 + 3488), (v74 - (0x80000000 >> v75)) | (0x80000000 >> v75), (2 * v75) ^ 0x3F);
      if (*((_DWORD *)a1 + 138))
      {
        v76 = 0;
        do
          sub_1B67C8FE0((uint64_t)(a1 + 3488), *(_DWORD *)(*((_QWORD *)a1 + 70) + 4 * v76++), a1[556] + 1);
        while (v76 < *((unsigned int *)a1 + 138));
      }
    }
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 173) + 1598))
  {
    v77 = *((unsigned __int16 *)a1 + 288) + 1;
    v78 = __clz(v77);
    sub_1B67C8FE0((uint64_t)(a1 + 3488), (v77 - (0x80000000 >> v78)) | (0x80000000 >> v78), (2 * v78) ^ 0x3F);
    if (*((_WORD *)a1 + 288))
    {
      v79 = 0;
      do
        sub_1B67C8FE0((uint64_t)(a1 + 3488), *(unsigned __int8 *)(*((_QWORD *)a1 + 73) + v79++), 8);
      while (v79 < *((unsigned __int16 *)a1 + 288));
    }
  }
  sub_1B67C939C((uint64_t)(a1 + 3488));
  return 0;
}

uint64_t sub_1B6879DD0(uint64_t result, int a2)
{
  __int16 *v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int16 *v18;
  _WORD *v19;
  _DWORD *v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  char v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  char v45;
  __int16 *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _DWORD v50[2];
  _QWORD v51[25];

  v51[23] = *MEMORY[0x1E0C80C00];
  v2 = (__int16 *)(result + 928);
  if (!a2)
    v2 = (__int16 *)(result + 736);
  v46 = v2;
  v47 = result;
  if (a2)
    v3 = (_WORD *)(result + 832);
  else
    v3 = (_WORD *)(result + 640);
  if (*(_BYTE *)(result + 500))
  {
    v4 = 0;
    v5 = 0;
    v6 = v2;
    v7 = *(_QWORD *)(result + 1368);
    v44 = *(_BYTE *)(v7 + 194);
    v8 = *(_BYTE *)(result + 540);
    v9 = -1 << v8;
    v10 = 1 << (*(_BYTE *)(result + 541) + v8);
    v11 = result + 3488;
    v45 = *(_BYTE *)(v7 + 195);
    v49 = *(char *)(result + 500);
    v12 = v50;
    v13 = v3;
    do
    {
      v14 = *v6;
      v6 += 3;
      *v12 = v9 + v14;
      if (v9 + v14 || *v13)
        v15 = v5 | (unsigned __int16)(1 << v4);
      else
        v15 = v5;
      v5 = v15;
      result = sub_1B67C8FE0(v11, (v15 >> v4++) & 1, 1);
      v13 += 3;
      v12 += 3;
    }
    while (v49 != v4);
    if (*(_BYTE *)(*(_QWORD *)(v47 + 1368) + 173))
    {
      v16 = 0;
      v17 = 0;
      v18 = v46 + 2;
      v19 = v3 + 2;
      v20 = v51;
      do
      {
        v21 = *v18;
        v22 = *(v18 - 1) - v10;
        *(v20 - 1) = v22;
        *v20 = v21 - v10;
        if (v22)
          v23 = 0;
        else
          v23 = v21 == v10;
        if (!v23 || *(v19 - 1) || *v19)
          v17 |= (unsigned __int16)(1 << v16);
        v18 += 3;
        result = sub_1B67C8FE0(v11, (v17 >> v16++) & 1, 1);
        v19 += 3;
        v20 += 3;
      }
      while (v49 != v16);
    }
    else
    {
      v17 = 0;
    }
    v24 = 0;
    do
    {
      if ((v5 & 1) != 0)
      {
        v25 = v50[3 * v24];
        if (v25 <= 0)
          v26 = -2 * v25;
        else
          v26 = 2 * v25 - 1;
        v27 = v26 + 1;
        v28 = __clz(v27);
        sub_1B67C8FE0(v11, (v27 - (0x80000000 >> v28)) | (0x80000000 >> v28), 63 - 2 * v28);
        v29 = (__int16)v3[3 * v24] >> v44;
        if (v29 <= 0)
          v30 = -2 * v29;
        else
          v30 = 2 * v29 - 1;
        v31 = v30 + 1;
        v32 = __clz(v31);
        result = sub_1B67C8FE0(v11, (v31 - (0x80000000 >> v32)) | (0x80000000 >> v32), 63 - 2 * v32);
      }
      v48 = v17;
      if ((v17 & 1) != 0)
      {
        v33 = 1;
        v34 = 1;
        do
        {
          v35 = v33;
          v36 = v50[3 * v24 + v34];
          if (v36 <= 0)
            v37 = -2 * v36;
          else
            v37 = 2 * v36 - 1;
          v38 = v37 + 1;
          v39 = __clz(v38);
          sub_1B67C8FE0(v11, (v38 - (0x80000000 >> v39)) | (0x80000000 >> v39), 63 - 2 * v39);
          v40 = ((v46[3 * v24 + v34] << 7 >> *(_BYTE *)(v47 + 630)) + (__int16)v3[3 * v24 + v34] - 128) >> v45;
          if (v40 <= 0)
            v41 = -2 * v40;
          else
            v41 = 2 * v40 - 1;
          v42 = v41 + 1;
          v43 = __clz(v42);
          result = sub_1B67C8FE0(v11, (v42 - (0x80000000 >> v43)) | (0x80000000 >> v43), 63 - 2 * v43);
          v33 = 0;
          v34 = 2;
        }
        while ((v35 & 1) != 0);
      }
      ++v24;
      LODWORD(v5) = v5 >> 1;
      v17 = v48 >> 1;
    }
    while (v24 != v49);
  }
  return result;
}

intptr_t sub_1B687A140(intptr_t result)
{
  intptr_t v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  unsigned int i;
  unsigned int v19;
  int v20;

  v1 = result;
  v3 = *(_QWORD *)result;
  v2 = *(unint64_t **)(result + 8);
  v4 = *(_QWORD *)result + 79088;
  v5 = *(_QWORD *)(*(_QWORD *)result + 1368);
  v6 = *(_DWORD *)(v5 + 2016);
  v7 = *(_DWORD *)(v5 + 2020);
  v8 = *(_DWORD *)(*(_QWORD *)v4 + 144);
  v9 = *(_DWORD *)(result + 40);
  v10 = v9 / v6;
  v11 = *(_QWORD *)(*(_QWORD *)result + 79256);
  v12 = v11 + 56 * (v9 / v6);
  v13 = *(_QWORD *)(v12 + 24);
  v14 = *(_QWORD *)(v12 + 32);
  if (*(_DWORD *)(v12 + 44))
    v15 = v13 >= v14;
  else
    v15 = 1;
  if (!v15)
    *(_QWORD *)(v12 + 24) = ++v13;
  *(_QWORD *)(v11 + 56 * (v9 / v6) + 40) = 0;
  *(_OWORD *)v2 = xmmword_1B69175D0;
  v2[25] = v12;
  v2[26] = v13;
  v2[2] = -1;
  v2[3] = v13;
  v2[4] = v14;
  if (v9 <= *(_DWORD *)(v4 + 220))
  {
    if (v8 < v7)
      v7 = v8;
    v16 = (v7 - 1) * v6;
    do
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v1 + 24), 0xFFFFFFFFFFFFFFFFLL);
      v20 = *(_DWORD *)(*(_QWORD *)(v3 + 1024) + 4 * v10);
      sub_1B683B978(*(_QWORD *)(v1 + 16), v9, (uint64_t)v2);
      sub_1B683C070(*(_QWORD *)(v1 + 16), &v20);
      result = (intptr_t)sub_1B68514F8(*(_QWORD *)(v1 + 16), (int *)(*(_QWORD *)(v3 + 1024) + 4 * v10));
      *(_DWORD *)(v1 + 44) += *(_DWORD *)(*(_QWORD *)(v1 + 16) + 212);
      if (++v9 % v6)
      {
        if (v9 % v6 >= 2)
          result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 32));
      }
      else
      {
        sub_1B67CC3E0(v2, 1);
        result = (intptr_t)sub_1B67CC1BC(v2);
        v17 = *(_DWORD *)(*(_QWORD *)(v3 + 1368) + 2016);
        if (v17 >= 2)
          v17 = 2;
        if (v17)
        {
          for (i = 0; i < v19; ++i)
          {
            result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 32));
            v19 = *(_DWORD *)(*(_QWORD *)(v3 + 1368) + 2016);
            if (v19 >= 2)
              v19 = 2;
          }
        }
        v9 += v16;
        v10 = v9 / v6;
        if (v9 / v6 < (*(_DWORD *)(v3 + 552) + 1))
        {
          result = sub_1B67CC0F0(*(_QWORD *)(v1 + 8), *(_QWORD *)(v4 + 168) + 56 * v10, *(unsigned __int8 *)(v3 + 10), *(char *)(v3 + 621));
          v2 = *(unint64_t **)(v1 + 8);
        }
      }
    }
    while (v9 <= *(_DWORD *)(v4 + 220));
  }
  return result;
}

uint64_t sub_1B687A334(uint64_t result, int a2, int a3, int a4, int a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v7 = 0;
  v8 = *(_QWORD *)(result + 1368);
  v9 = *(unsigned __int8 *)(v8 + 2013);
  v10 = a3 - 1;
  v11 = (v9 - 1) & a2;
  v12 = word_1B694BB1E[(((v9 - 1) & (a3 - 1 + a5)) - v9 + 64) >> 2];
  v13 = a2 - 1;
  v14 = a5 + a3;
  if (((v12 >> (v11 >> 2)) & 1) != 0 && ((v14 | v13) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(result + 1360);
    if (*(_DWORD *)(v15 + 276) < a2 || *(_DWORD *)(v15 + 280) <= v14)
      v7 = 0;
    else
      v7 = *(_QWORD *)(v15 + 576) + 16 * (*(_QWORD *)(v15 + 552) * ((uint64_t)v14 >> 2) + (v13 >> 2));
  }
  v16 = *(_BYTE *)(v8 + 2008);
  *a6 = v7;
  if (((v14 - 1) | v13) < 0
    || (v17 = *(_QWORD *)(result + 1360), *(_DWORD *)(v17 + 276) < a2)
    || *(_DWORD *)(v17 + 280) < v14)
  {
    v18 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(v17 + 576) + 16 * (*(_QWORD *)(v17 + 552) * ((uint64_t)(v14 - 1) >> 2) + (v13 >> 2));
  }
  v19 = 0;
  a6[1] = v18;
  v20 = *(unsigned __int8 *)(*(_QWORD *)(result + 1368) + 2013);
  v21 = (v20 - 1) & a3;
  v22 = (((v20 - 1) & (v13 + a4)) - v20 + 64) >> 2;
  v23 = a4 + a2;
  if (((word_1B692B05A[v21 >> 2] >> v22) & 1) != 0 && ((v23 | v10) & 0x80000000) == 0)
  {
    v24 = *(_QWORD *)(result + 1360);
    if (*(_DWORD *)(v24 + 276) <= v23 || *(_DWORD *)(v24 + 280) <= v10)
      v19 = 0;
    else
      v19 = *(_QWORD *)(v24 + 576) + 16 * (*(_QWORD *)(v24 + 552) * ((uint64_t)v10 >> 2) + (v23 >> 2));
  }
  v25 = 1 << (v16 - 1);
  *a7 = v19;
  v26 = v23 - v25;
  if ((v26 | v10) < 0
    || (v27 = *(_QWORD *)(result + 1360), *(_DWORD *)(v27 + 276) <= v26)
    || *(_DWORD *)(v27 + 280) <= v10)
  {
    v28 = 0;
  }
  else
  {
    v28 = *(_QWORD *)(v27 + 576) + 16 * (*(_QWORD *)(v27 + 552) * ((uint64_t)v10 >> 2) + (v26 >> 2));
  }
  a7[1] = v28;
  v29 = a2 - v25;
  if ((v29 | v10) < 0
    || (v30 = *(_QWORD *)(result + 1360), *(_DWORD *)(v30 + 276) <= v29)
    || *(_DWORD *)(v30 + 280) <= v10)
  {
    v31 = 0;
  }
  else
  {
    v31 = *(_QWORD *)(v30 + 576) + 16 * (*(_QWORD *)(v30 + 552) * ((uint64_t)v10 >> 2) + (v29 >> 2));
  }
  a7[2] = v31;
  return result;
}

void sub_1B687A560(uint64_t a1, int a2, int a3, unsigned int a4, int a5, int a6, int a7, __int32 *a8)
{
  uint64_t v16[3];
  uint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v17[0] = 0;
  v17[1] = 0;
  memset(v16, 0, sizeof(v16));
  sub_1B687A334(a1, a2, a3, a6, a7, v17, v16);
  sub_1B67C7B4C(a1, a2, a3, a4, a5, a6, a7, a8, v17, (uint64_t)v16);
}

void sub_1B687A63C(_BYTE *a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v12[3];
  uint64_t v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v13[0] = 0;
  v13[1] = 0;
  memset(v12, 0, sizeof(v12));
  sub_1B687A334((uint64_t)a1, a2, a3, a4, a5, v13, v12);
  sub_1B67C8110(a1, a2, a3, a4, a5, a6, v13, v12);
}

uint64_t sub_1B687A6EC(uint64_t a1, unsigned int *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];

  v31[1] = *MEMORY[0x1E0C80C00];
  v18 = *((char *)a2 + 9);
  if (v18 == -1)
  {
    v20 = *(_DWORD **)(a1 + 16 * *((char *)a2 + 8) + 3544);
    v22 = *a2;
    return sub_1B687AA24(a1, v20, 0, v22, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  v19 = *((char *)a2 + 8);
  if (v19 == -1)
    return sub_1B687AA24(a1, *(_DWORD **)(a1 + 16 * v18 + 3800), 1u, a2[1], (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  v20 = *(_DWORD **)(a1 + 3544 + 16 * v19);
  v21 = *(_QWORD *)(a1 + 3544 + 16 * v18 + 256);
  v22 = *a2;
  v23 = a2[1];
  if (v20 == (_DWORD *)v21 && (_DWORD)v22 == (_DWORD)v23)
    return sub_1B687AA24(a1, v20, 0, v22, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10);
  v30 = 0;
  v31[0] = 0;
  v28 = 0;
  v29 = 0;
  v26 = v20;
  v27 = v22;
  sub_1B67C7020(v20, v22, a3, a4, a5, a6, &v30, &v28);
  result = sub_1B67C7020((_DWORD *)v21, v23, a3, a4, a5, a6, v31, &v29);
  if (a8)
  {
    if (*(_BYTE *)(a1 + 2 * *((char *)a2 + 8) + 79096) || *(_BYTE *)(a1 + 2 * *((char *)a2 + 9) + 79128))
      result = sub_1B67DDDC4(a1 + 2104, a5, a6, *(unsigned int *)(a1 + 632), *(__int16 *)(a1 + 6 * *((char *)a2 + 8) + 736), *(__int16 *)(a1 + 6 * *((char *)a2 + 8) + 640), v27, *((_QWORD *)v26 + 14), v30, *(_WORD *)(a1 + 6 * *((char *)a2 + 9) + 928), *(_WORD *)(a1 + 6 * *((char *)a2 + 9) + 832), v23, *(_QWORD *)(v21 + 112), v31[0]);
    else
      result = sub_1B67DD8DC(a1 + 2104, a5, a6, v27, *((_QWORD *)v26 + 14), v30, v23, *(_QWORD *)(v21 + 112), v31[0], a7, a8);
  }
  if (a10)
  {
    if (*(_BYTE *)(a1 + 2 * *((char *)a2 + 8) + 79097) || *(_BYTE *)(a1 + 2 * *((char *)a2 + 9) + 79129))
      return sub_1B67DDF7C(a1 + 2104, ((int)a5 >> 1), ((int)a6 >> 1), *(unsigned int *)(a1 + 636), a1 + 6 * *((char *)a2 + 8) + 738, a1 + 6 * *((char *)a2 + 8) + 642, v27, *((_QWORD *)v26 + 15), v28, a1 + 6 * *((char *)a2 + 9) + 930, a1 + 6 * *((char *)a2 + 9) + 834, v23, *(_QWORD *)(v21 + 120), v29);
    else
      return sub_1B67DDA3C(a1 + 2104, ((int)a5 >> 1), ((int)a6 >> 1), v27, *((_QWORD *)v26 + 15), v28, v23, *(_QWORD *)(v21 + 120), v29, a9, a10);
  }
  return result;
}

uint64_t sub_1B687AA24(uint64_t a1, _DWORD *a2, unsigned int a3, unint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v34;
  __int16 *v35;
  __int16 *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v51;

  v16 = -3 - a8;
  v17 = a2[69];
  v18 = v17 + 2;
  v19 = a6 + ((__int16)a4 >> 2);
  if (v19 < v17 + 2)
    v18 = a6 + ((__int16)a4 >> 2);
  if (v19 <= v16)
    v20 = v16;
  else
    v20 = v18;
  v21 = -3 - a9;
  v22 = a7 + ((int)a4 >> 18);
  v23 = a2[70];
  v24 = (a6 >> 1) + ((__int16)a4 >> 3);
  v25 = v23 + 2;
  if (v22 < v23 + 2)
    v25 = a7 + ((int)a4 >> 18);
  if (v22 <= v21)
    v26 = v21;
  else
    v26 = v25;
  v27 = v17 >> 1;
  if (v24 < v17 >> 1)
    v27 = (a6 >> 1) + ((__int16)a4 >> 3);
  if (v24 <= ~((int)a8 >> 1))
    v28 = ~((int)a8 >> 1);
  else
    v28 = v27;
  v29 = v23 >> 1;
  v30 = (a7 >> 1) + ((int)a4 >> 19);
  if (v30 < v23 >> 1)
    v29 = (a7 >> 1) + ((int)a4 >> 19);
  if (v30 <= ~(a9 >> 1))
    v31 = ~(a9 >> 1);
  else
    v31 = v29;
  v51 = a5 + a3;
  v49 = a9 >> 1;
  v43 = (int)a8 >> 1;
  if ((a4 & 0x10001) != 0
    || !*(_BYTE *)(*(_QWORD *)(a1 + 79088) + 244)
    || *(_BYTE *)(a1 + 32 * a3 + 2 * *(char *)(v51 + 8) + 79096))
  {
    LODWORD(v45) = (unsigned __int16)a4;
    HIDWORD(v45) = a4 & 0xFFFF0000;
    v46 = *((_QWORD *)a2 + 14);
    v44 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v20, v26, 0);
  }
  else
  {
    v37 = &a2[2 * ((a4 >> 16) & 2 | (a4 >> 1) & 1)];
    v45 = 0;
    v46 = *((_QWORD *)v37 + 125);
    v44 = *((_QWORD *)v37 + 121) + ((v46 * (int)v26 + (int)v20) << *((_BYTE *)a2 + 1036));
  }
  v48 = *((_QWORD *)a2 + 15);
  v47 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v28, v31, 1);
  result = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD *))a2 + 136))(v20, v26, v28, v31, a8, a9, a2);
  if (a11)
  {
    if (*(_BYTE *)(a1 + 32 * a3 + 2 * *(char *)(v51 + 8) + 79096))
    {
      if (a3)
      {
        v34 = a1 + 6 * *(char *)(a5 + 9);
        v35 = (__int16 *)(v34 + 928);
        v36 = (__int16 *)(v34 + 832);
      }
      else
      {
        v38 = a1 + 6 * *(char *)(a5 + 8);
        v35 = (__int16 *)(v38 + 736);
        v36 = (__int16 *)(v38 + 640);
      }
      result = sub_1B67DDB9C(a1 + 2104, a8, a9, *(unsigned int *)(a1 + 632), *v35, *v36, HIDWORD(v45) | v45, v46, v44, a10, a11);
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(a1
                                                 + (((unint64_t)(((HIDWORD(v45) | v45) & 3) != 0) << 6) | ((unint64_t)(((HIDWORD(v45) | v45) & 0x30000) != 0) << 7))
                                                 + 8 * byte_1B6920C45[((int)a8 >> 2) - 1]
                                                 + 2104))(a9);
    }
  }
  if (a13)
  {
    if (*(_BYTE *)(a1 + 32 * a3 + 2 * *(char *)(v51 + 8) + 79097))
    {
      if (a3)
      {
        v39 = a1 + 6 * *(char *)(a5 + 9);
        v40 = v39 + 930;
        v41 = v39 + 834;
      }
      else
      {
        v42 = a1 + 6 * *(char *)(a5 + 8);
        v40 = v42 + 738;
        v41 = v42 + 642;
      }
      return sub_1B67DDCB8(a1 + 2104, v43, v49, *(unsigned int *)(a1 + 636), v40, v41, *(unsigned int *)(a5 + 4 * a3), v48, v47, a12, a13);
    }
    else
    {
      return (*(uint64_t (**)(_QWORD))(a1
                                               + (((unint64_t)((*(_DWORD *)(a5 + 4 * a3) & 7) != 0) << 6) | ((unint64_t)((*(_DWORD *)(a5 + 4 * a3) & 0x70000) != 0) << 7))
                                               + 8 * byte_1B6920C45[((int)a8 >> 2) - 1]
                                               + 2360))(v49);
    }
  }
  return result;
}

void sub_1B687AE2C()
{
  uint64_t v0;
  char *v1;
  char *v2;
  int8x16_t v3;
  int8x16x2_t v4;

  v0 = 0;
  v1 = (char *)&xmmword_1EF139270;
  v2 = (char *)&xmmword_1EF139230;
  v3.i64[0] = 0x101010101010101;
  v3.i64[1] = 0x101010101010101;
  do
  {
    v4.val[0] = vaddq_s8((int8x16_t)xmmword_1B692B520[v0], (int8x16_t)xmmword_1B692B520[v0]);
    v4.val[1] = vorrq_s8(v4.val[0], v3);
    vst2q_s8(v2, v4);
    v2 += 32;
    v4.val[0] = vaddq_s8((int8x16_t)xmmword_1B692B540[v0], (int8x16_t)xmmword_1B692B540[v0]);
    v4.val[1] = vorrq_s8(v4.val[0], v3);
    vst2q_s8(v1, v4);
    v1 += 32;
    ++v0;
  }
  while (v0 != 2);
}

uint64_t sub_1B687AE84(uint64_t result, int a2, uint64_t a3, int a4, int a5, int a6)
{
  unsigned int v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int8x16x4_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  int8x16x2_t v37;
  int8x16x4_t v38;

  if (a6)
    v6 = 6;
  else
    v6 = 0;
  if (a5 >= 1)
  {
    v7 = 0;
    v8 = &dword_1B692B0D0[11 * v6];
    v9 = v8[1];
    v10 = v8[2];
    v11 = v8[3];
    v12 = (int)v11 / (v10 * v9);
    v13 = v12 * v9;
    v14 = 4 * a2;
    v33 = v10 * (uint64_t)a2;
    v15 = dword_1B692B0D0[11 * v6 + 5];
    v16 = 8 * v12;
    v17 = v13;
    v36 = result + 3 * a2;
    v35 = result + 2 * a2;
    v18 = result + a2;
    do
    {
      if (a4 >= 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = v18;
        v23 = v35;
        v22 = v36;
        do
        {
          v24 = 0;
          v25 = result + v19;
          v26 = (int8x16x4_t *)(a3 + v20 * v11);
          v27 = v21;
          v28 = v23;
          v29 = v22;
          do
          {
            if ((int)v17 >= 1)
            {
              v30 = 0;
              do
              {
                if (v12 == 2)
                {
                  v38 = *v26;
                  *(int8x16_t *)(v25 + v30) = vqtbl4q_s8(*v26, (int8x16_t)xmmword_1EF139230);
                  *(int8x16_t *)(v27 + v30) = vqtbl4q_s8(v38, (int8x16_t)xmmword_1EF139240);
                  *(int8x16_t *)(v28 + v30) = vqtbl4q_s8(v38, (int8x16_t)xmmword_1EF139250);
                  *(int8x16_t *)(v29 + v30) = vqtbl4q_s8(v38, (int8x16_t)xmmword_1EF139260);
                }
                else if (v12 == 1)
                {
                  v37 = *(int8x16x2_t *)v26->val[0].i8;
                  v31 = vqtbl2q_s8(*(int8x16x2_t *)v26->val[0].i8, (int8x16_t)xmmword_1B69174A0);
                  *(_QWORD *)(v25 + v30) = v31.i64[0];
                  *(_QWORD *)(v27 + v30) = vextq_s8(v31, v31, 8uLL).u64[0];
                  v37.val[0] = vqtbl2q_s8(v37, (int8x16_t)xmmword_1B6917490);
                  *(_QWORD *)(v28 + v30) = v37.val[0].i64[0];
                  *(_QWORD *)(v29 + v30) = vextq_s8(v37.val[0], v37.val[0], 8uLL).u64[0];
                }
                v26 = (int8x16x4_t *)((char *)v26 + v15);
                if (v30 + v16 >= v17)
                  break;
                v32 = v16 + v19 + v30;
                v30 += v16;
              }
              while (v32 < a4);
            }
            v24 += 4;
            if (v24 >= v10)
              break;
            v25 += v14;
            v29 += v14;
            v28 += v14;
            v27 += v14;
          }
          while (v24 + v7 < a5);
          v19 += v17;
          ++v20;
          v22 += v17;
          v23 += v17;
          v21 += v17;
        }
        while (v19 < a4);
      }
      a3 += v10 * a4;
      result += v33;
      v7 += v10;
      v36 += v33;
      v35 += v33;
      v18 += v33;
    }
    while (v7 < a5);
  }
  return result;
}

uint64_t sub_1B687B0C0(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int8x16_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  int8x16x2_t v43;
  int8x16x4_t v44;

  if (a6)
    v6 = 6;
  else
    v6 = 0;
  if (a5 >= 1)
  {
    v7 = 0;
    v8 = &dword_1B692B0D0[11 * v6];
    v9 = v8[1];
    v10 = v8[2];
    v11 = v8[3];
    v12 = (int)v11 / (v10 * v9);
    v13 = v12 * v9;
    v14 = 4 * a3;
    v40 = v10 * (uint64_t)a3;
    v15 = dword_1B692B0D0[11 * v6 + 5];
    v16 = 8 * v12;
    v17 = v13;
    v18 = (int8x16_t)xmmword_1EF139270;
    v19 = (int8x16_t)unk_1EF139280;
    v20 = (int8x16_t)xmmword_1EF139290;
    v21 = (int8x16_t)unk_1EF1392A0;
    v42 = a2 + 3 * a3;
    v22 = a2 + 2 * a3;
    v23 = a2 + a3;
    do
    {
      if (a4 < 1)
        goto LABEL_21;
      v24 = 0;
      v25 = 0;
      v26 = v23;
      v27 = v22;
      v28 = v42;
      v29 = 8 * v12;
      do
      {
        v30 = 0;
        v31 = a2 + v24;
        v32 = (int8x16_t *)(result + v25 * v11);
        v33 = v26;
        v34 = v27;
        v35 = v28;
        do
        {
          if ((int)v17 >= 1)
          {
            v36 = 0;
            while (1)
            {
              if (v12 == 2)
              {
                v44.val[0] = *(int8x16_t *)(v31 + v36);
                v44.val[1] = *(int8x16_t *)(v33 + v36);
                v44.val[2] = *(int8x16_t *)(v34 + v36);
                v44.val[3] = *(int8x16_t *)(v35 + v36);
                *v32 = vqtbl4q_s8(v44, v18);
                v32[1] = vqtbl4q_s8(v44, v19);
                v32[2] = vqtbl4q_s8(v44, v20);
                v37 = vqtbl4q_s8(v44, v21);
                v38 = 3;
              }
              else
              {
                if (v12 != 1)
                  goto LABEL_16;
                v43.val[0].i64[0] = *(_QWORD *)(v31 + v36);
                v43.val[0].i64[1] = *(_QWORD *)(v33 + v36);
                v43.val[1].i64[0] = *(_QWORD *)(v34 + v36);
                v43.val[1].i64[1] = *(_QWORD *)(v35 + v36);
                *v32 = vqtbl2q_s8(v43, (int8x16_t)xmmword_1B6917970);
                v37 = vqtbl2q_s8(v43, (int8x16_t)xmmword_1B6917980);
                v38 = 1;
              }
              v32[v38] = v37;
LABEL_16:
              v32 = (int8x16_t *)((char *)v32 + v15);
              if (v36 + v16 < v17)
              {
                v39 = v29 + v36;
                v36 += v16;
                if (v39 < a4)
                  continue;
              }
              break;
            }
          }
          v30 += 4;
          if (v30 >= v10)
            break;
          v31 += v14;
          v35 += v14;
          v34 += v14;
          v33 += v14;
        }
        while (v30 + v7 < a5);
        v24 += v17;
        ++v25;
        v29 += v17;
        v28 += v17;
        v27 += v17;
        v26 += v17;
      }
      while (v24 < a4);
LABEL_21:
      result += v10 * a4;
      a2 += v40;
      v7 += v10;
      v42 += v40;
      v22 += v40;
      v23 += v40;
    }
    while (v7 < a5);
  }
  return result;
}

void sub_1B687B2FC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint8_t v23[16];

  v5 = *(_QWORD *)(a3 + 79216);
  v6 = *(_QWORD *)(v5 + 584);
  *(_WORD *)(a1 + 912) = *(_WORD *)(a3 + 496);
  *(_QWORD *)a1 = *(_QWORD *)(v5 + 608);
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(v5 + 592);
  v7 = *(_QWORD *)(v5 + 40);
  v8 = *(unsigned __int8 *)(v7 + 2009);
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = *(unsigned __int8 *)(v7 + 2013);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(v7 + 2016);
  *(_DWORD *)(a1 + 28) = *(unsigned __int8 *)(v7 + 2008);
  v9 = *(char *)(v6 + 3498);
  if (v9 == 10)
  {
    sub_1B6852888(a1, a3);
    *(_QWORD *)(a1 + 832) = sub_1B687B808;
    *(_QWORD *)(a1 + 840) = sub_1B687B8F8;
    *(_QWORD *)(a1 + 848) = sub_1B687BA00;
    *(_QWORD *)(a1 + 856) = sub_1B687BB4C;
    *(_QWORD *)(a1 + 864) = sub_1B687BC98;
    *(_QWORD *)(a1 + 872) = sub_1B687BD44;
    *(_QWORD *)(a1 + 880) = sub_1B687BDB0;
    *(_QWORD *)(a1 + 888) = sub_1B687BE1C;
    *(_QWORD *)(a1 + 896) = sub_1B687BE88;
    *(_QWORD *)(a1 + 904) = sub_1B687BEF4;
  }
  else
  {
    if (v9 != 8)
      return;
    sub_1B6852888(a1, a3);
    *(_QWORD *)(a1 + 864) = sub_1B687B6FC;
    *(_QWORD *)(a1 + 904) = sub_1B687B79C;
    *(_QWORD *)(a1 + 832) = sub_1B6873778;
    *(_QWORD *)(a1 + 840) = sub_1B6873BB8;
    *(_QWORD *)(a1 + 848) = sub_1B6873EEC;
    *(_QWORD *)(a1 + 856) = sub_1B68743B8;
    *(_QWORD *)(a1 + 872) = sub_1B6874884;
    *(_QWORD *)(a1 + 880) = sub_1B6874D48;
    *(_QWORD *)(a1 + 888) = sub_1B6875104;
    *(_QWORD *)(a1 + 896) = sub_1B6875654;
  }
  v10 = *(char *)(v6 + 3419);
  *(_DWORD *)(a1 + 916) = v10;
  *(_BYTE *)(a1 + 920) = *(_BYTE *)(v6 + 3420);
  *(_DWORD *)(a1 + 824) = *(unsigned __int8 *)(*(_QWORD *)(v5 + 40) + 2001);
  if (v10 == 2)
  {
    *(_DWORD *)(a1 + 960) = 2;
    if (*(_BYTE *)(v6 + 3498) == 10)
      return;
  }
  else
  {
    *(_DWORD *)(a1 + 960) = *(unsigned __int8 *)(a1 + 33);
  }
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v11 = ((*(_DWORD *)(*(_QWORD *)a1 + 276) << (*(unsigned __int8 *)(a1 + 32) > 8u)) + 31) & 0xFFFFFFFFFFFFFFE0;
  if (!sub_1B67C2364((void **)(a1 + 72), (int)((v11 >> 5 << 7) | 0x40), 0x20uLL))
  {
    v12 = *(_QWORD *)(a1 + 72) + 32;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v12 + (int)v11;
    *(_QWORD *)(a1 + 56) = v12 + 2 * v11;
    *(_QWORD *)(a1 + 64) = v12 + 3 * (int)v11;
    v13 = *(int *)(a1 + 24) * (uint64_t)*(int *)(a1 + 20);
    if (*(_QWORD *)(a1 + 936) < v13)
    {
      if (v13 > 0x3200000)
        return;
      v14 = (_QWORD *)(a1 + 928);
      v15 = *(void **)(a1 + 928);
      if (v15)
      {
        free(v15);
        *v14 = 0;
        *(_QWORD *)(a1 + 936) = 0;
      }
      if (malloc_type_posix_memalign((void **)(a1 + 928), 0x10uLL, 2 * v13, 0x1000040BDFB0063uLL) || !*v14)
        return;
      v16 = 0;
      do
        *(_WORD *)(*v14 + 2 * v16++) = 0;
      while (v13 != v16);
      *(_QWORD *)(a1 + 936) = v13;
    }
    v17 = sub_1B685D040(a1 + 440, *(_DWORD *)(v6 + 3424), *(unsigned __int8 *)(*(_QWORD *)(v5 + 40) + 2000), *(_DWORD *)(v6 + 3248), *(char *)(v5 + 640));
    sub_1B685F7A0(a1 + 440, a2, *(unsigned __int8 *)(*(_QWORD *)(v5 + 40) + 2001));
    if (v17)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v23 = 0;
        _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "RDCost init failed in SAOEnc\n", v23, 2u);
      }
    }
    else
    {
      if (a2 > 51)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
      else
      {
        v18 = *(_DWORD *)(a1 + 824) + a2;
        if (v18 >= 63)
          v18 = 63;
        v19 = v18 & ~(v18 >> 31);
        v20 = dword_1B6923630[70 * *(unsigned __int8 *)(a1 + 462) + v19];
        v21 = word_1B6923BA8[512 * (unint64_t)*(unsigned __int8 *)(a1 + 463)
                           + 256 * (unint64_t)(*(_DWORD *)(a1 + 916) == 3)
                           + 64 * (unint64_t)*(unsigned __int8 *)(a1 + 462)
                           + v19];
        v22 = (unsigned __int16)word_1B69243A8[52 * (*(_DWORD *)(a1 + 916) == 3) + (a2 & ~(a2 >> 31))];
      }
      *(_DWORD *)(a1 + 424) = v20;
      *(_DWORD *)(a1 + 428) = v21;
      *(_DWORD *)(a1 + 432) = v22;
      *(_QWORD *)(a1 + 952) = *(_QWORD *)(v5 + 24);
      *(_BYTE *)(a1 + 436) = *(_BYTE *)(v6 + 3800);
    }
  }
}

uint64_t sub_1B687B6FC(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  unint64_t v14;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_DWORD *)(result + 32);
  v6 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 36) - *(_DWORD *)(result + 44);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (v5 - v6);
    v10 = *(_QWORD *)(result + 8);
    v11 = *(_QWORD *)(result + 24);
    do
    {
      if ((int)v9 >= 1)
      {
        for (i = 0; i != v9; ++i)
        {
          v13 = *(unsigned __int8 *)(v3 + i);
          v14 = v13 >> 3;
          result = *(unsigned __int8 *)(v4 + i);
          *((_DWORD *)a3 + v14) = *((_DWORD *)a3 + (v13 >> 3)) - v13 + result;
          *((_WORD *)a2 + v14) = *((_WORD *)a2 + (v13 >> 3)) + 1;
        }
      }
      v3 += v10;
      v4 += v11;
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t *sub_1B687B79C(__int128 *a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = a1[1];
  v8 = *a1;
  v9 = v5;
  v10 = a1[2];
  v11 = *((_QWORD *)a1 + 6);
  v6 = *((_QWORD *)a1 + 2) + 1;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 1;
  *(_QWORD *)&v9 = v6;
  sub_1B687C4B0((uint64_t *)a1, a2, a3);
  return sub_1B687C4B0((uint64_t *)&v8, a2 + 4, a3 + 8);
}

uint64_t *sub_1B687B808(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  v3 = *result;
  v4 = result[2];
  v5 = *((_DWORD *)result + 8);
  v6 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  v8 = *((_DWORD *)result + 12);
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (v7 >= 1)
  {
    v9 = 0;
    v10 = (v8 & 2) != 0 && v6 == 0;
    v11 = !v10;
    v12 = (v5 - v6 - v11);
    v10 = (v8 & 1) == 0;
    v13 = !(v8 & 1);
    v14 = 2 * result[3];
    v15 = v10;
    v16 = 2 * v15;
    v17 = (uint64_t *)(v12 - v15);
    v18 = 2 * result[1];
    do
    {
      result = v17;
      v19 = v16;
      if (v13 < (int)v12)
      {
        do
        {
          v20 = *(unsigned __int16 *)(v3 + v19);
          v21 = *(unsigned __int16 *)(v3 + v19 - 2);
          v22 = __OFSUB__(v20, v21);
          v23 = v20 - v21;
          if ((v23 < 0) ^ v22 | (v23 == 0))
            v24 = 0;
          else
            v24 = 1;
          v25 = v24 | (v23 >> 31);
          v26 = *(unsigned __int16 *)(v3 + v19 + 2);
          v22 = __OFSUB__(v20, v26);
          v27 = v20 - v26;
          if ((v27 < 0) ^ v22 | (v27 == 0))
            v28 = 0;
          else
            v28 = 1;
          v29 = v25 + (v28 | (v27 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v29) = *(_DWORD *)(a3 + 4 * v29) - v20 + *(unsigned __int16 *)(v4 + v19);
          ++*(_WORD *)(a2 + 2 * v29);
          v19 += 2;
          result = (uint64_t *)((char *)result - 1);
        }
        while (result);
      }
      ++v9;
      v4 += v14;
      v3 += v18;
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t sub_1B687B8F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)result;
  v6 = *(_DWORD *)(result + 32);
  v8 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 44);
  v9 = *(_DWORD *)(result + 36) - v7;
  v11 = (*(_DWORD *)(result + 48) & 8) == 0 || v7 != 0;
  v12 = v9 - v11;
  v13 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v13 < v12)
  {
    v14 = *(_QWORD *)(result + 24);
    v15 = v6 - v8;
    v16 = v4 + 2 * v14 * v13;
    v17 = v5 + 2 * v3 * v13;
    v18 = 2 * v14;
    v19 = v5 + v3 * (2 * v13 + 2);
    v20 = 2 * v3;
    result = 2 * v13 - 2;
    v21 = v5 + v3 * result;
    do
    {
      if (v15 >= 1)
      {
        result = 0;
        do
        {
          v22 = *(unsigned __int16 *)(v17 + result);
          v23 = *(unsigned __int16 *)(v21 + result);
          v24 = __OFSUB__(v22, v23);
          v25 = v22 - v23;
          if ((v25 < 0) ^ v24 | (v25 == 0))
            v26 = 0;
          else
            v26 = 1;
          v27 = v26 | (v25 >> 31);
          v28 = *(unsigned __int16 *)(v19 + result);
          v24 = __OFSUB__(v22, v28);
          v29 = v22 - v28;
          if ((v29 < 0) ^ v24 | (v29 == 0))
            v30 = 0;
          else
            v30 = 1;
          v31 = v27 + (v30 | (v29 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v31) = *(_DWORD *)(a3 + 4 * v31) - v22 + *(unsigned __int16 *)(v16 + result);
          ++*(_WORD *)(a2 + 2 * v31);
          result += 2;
        }
        while (2 * v15 != result);
      }
      LODWORD(v13) = v13 + 1;
      v16 += v18;
      v19 += v20;
      v21 += v20;
      v17 += v20;
    }
    while ((_DWORD)v13 != v12);
  }
  return result;
}

uint64_t *sub_1B687BA00(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;

  v3 = result[1];
  v4 = result[2];
  v5 = *result;
  v6 = *((_DWORD *)result + 8);
  v8 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 11);
  v9 = *((_DWORD *)result + 9) - v7;
  v10 = *((_DWORD *)result + 12);
  v12 = (v10 & 8) == 0 || v7 != 0;
  v13 = v9 - v12;
  v14 = (result[6] & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    v15 = result[3];
    v17 = (v10 & 2) == 0 || v8 != 0;
    v18 = (v6 - v8 - v17);
    v19 = !(v10 & 1);
    v20 = (v10 & 1) == 0;
    v21 = v18 - v20;
    v22 = v4 + 2 * v15 * v14 + 2 * v20;
    v23 = 2 * v15;
    v24 = v3 * (2 * v14 + 2) + 2 * v20 + v5 + 2;
    v25 = 2 * v3;
    v26 = v3 * (2 * v14 - 2) + 2 * v20 + v5 - 2;
    result = (uint64_t *)(v5 + 2 * v3 * v14 + 2 * v20);
    do
    {
      if (v19 < (int)v18)
      {
        v27 = 0;
        do
        {
          v28 = *((unsigned __int16 *)result + v27);
          v29 = *(unsigned __int16 *)(v26 + 2 * v27);
          v30 = __OFSUB__(v28, v29);
          v31 = v28 - v29;
          if ((v31 < 0) ^ v30 | (v31 == 0))
            v32 = 0;
          else
            v32 = 1;
          v33 = v32 | (v31 >> 31);
          v34 = *(unsigned __int16 *)(v24 + 2 * v27);
          v30 = __OFSUB__(v28, v34);
          v35 = v28 - v34;
          if ((v35 < 0) ^ v30 | (v35 == 0))
            v36 = 0;
          else
            v36 = 1;
          v37 = v33 + (v36 | (v35 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v37) = *(_DWORD *)(a3 + 4 * v37) - v28 + *(unsigned __int16 *)(v22 + 2 * v27);
          ++*(_WORD *)(a2 + 2 * v37);
          ++v27;
        }
        while (v21 != v27);
      }
      LODWORD(v14) = v14 + 1;
      v22 += v23;
      v24 += v25;
      v26 += v25;
      result = (uint64_t *)((char *)result + v25);
    }
    while ((_DWORD)v14 != v13);
  }
  return result;
}

uint64_t *sub_1B687BB4C(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;

  v3 = result[1];
  v4 = result[2];
  v5 = *result;
  v6 = *((_DWORD *)result + 8);
  v8 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 11);
  v9 = *((_DWORD *)result + 9) - v7;
  v10 = *((_DWORD *)result + 12);
  v12 = (v10 & 8) == 0 || v7 != 0;
  v13 = v9 - v12;
  v14 = (result[6] & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    v15 = result[3];
    v17 = (v10 & 2) == 0 || v8 != 0;
    v18 = (v6 - v8 - v17);
    v19 = !(v10 & 1);
    v20 = (v10 & 1) == 0;
    v21 = v18 - v20;
    v22 = v4 + 2 * v15 * v14 + 2 * v20;
    v23 = 2 * v15;
    v24 = v3 * (2 * v14 + 2) + 2 * v20 + v5 - 2;
    v25 = 2 * v3;
    v26 = v3 * (2 * v14 - 2) + 2 * v20 + v5 + 2;
    result = (uint64_t *)(v5 + 2 * v3 * v14 + 2 * v20);
    do
    {
      if (v19 < (int)v18)
      {
        v27 = 0;
        do
        {
          v28 = *((unsigned __int16 *)result + v27);
          v29 = *(unsigned __int16 *)(v26 + 2 * v27);
          v30 = __OFSUB__(v28, v29);
          v31 = v28 - v29;
          if ((v31 < 0) ^ v30 | (v31 == 0))
            v32 = 0;
          else
            v32 = 1;
          v33 = v32 | (v31 >> 31);
          v34 = *(unsigned __int16 *)(v24 + 2 * v27);
          v30 = __OFSUB__(v28, v34);
          v35 = v28 - v34;
          if ((v35 < 0) ^ v30 | (v35 == 0))
            v36 = 0;
          else
            v36 = 1;
          v37 = v33 + (v36 | (v35 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v37) = *(_DWORD *)(a3 + 4 * v37) - v28 + *(unsigned __int16 *)(v22 + 2 * v27);
          ++*(_WORD *)(a2 + 2 * v37);
          ++v27;
        }
        while (v21 != v27);
      }
      LODWORD(v14) = v14 + 1;
      v22 += v23;
      v24 += v25;
      v26 += v25;
      result = (uint64_t *)((char *)result + v25);
    }
    while ((_DWORD)v14 != v13);
  }
  return result;
}

uint64_t *sub_1B687BC98(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *result;
  v4 = result[2];
  v5 = *((_DWORD *)result + 8);
  v6 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = v5 - v6;
    v10 = 2 * result[3];
    v11 = 2 * result[1];
    do
    {
      if (v9 >= 1)
      {
        v12 = 0;
        do
        {
          v13 = *(unsigned __int16 *)(v3 + v12);
          result = (uint64_t *)(v13 >> 5);
          *((_DWORD *)a3 + (_QWORD)result) = *((_DWORD *)a3 + (v13 >> 5)) - v13 + *(unsigned __int16 *)(v4 + v12);
          *((_WORD *)a2 + (_QWORD)result) = *((_WORD *)a2 + (v13 >> 5)) + 1;
          v12 += 2;
        }
        while (2 * v9 != v12);
      }
      ++v8;
      v4 += v10;
      v3 += v11;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1B687BD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = *(_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)a1;
  v9 = v5;
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 16) + 2;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 2;
  *(_QWORD *)&v9 = v6;
  sub_1B687C3BC(a1, a2, a3);
  return sub_1B687C3BC((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1B687BDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = *(_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)a1;
  v9 = v5;
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 16) + 2;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 2;
  *(_QWORD *)&v9 = v6;
  sub_1B687C2B0(a1, a2, a3);
  return sub_1B687C2B0((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1B687BE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = *(_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)a1;
  v9 = v5;
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 16) + 2;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 2;
  *(_QWORD *)&v9 = v6;
  sub_1B687C160(a1, a2, a3);
  return sub_1B687C160((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t sub_1B687BE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = *(_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)a1;
  v9 = v5;
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 16) + 2;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 2;
  *(_QWORD *)&v9 = v6;
  sub_1B687C010(a1, a2, a3);
  return sub_1B687C010((uint64_t)&v8, a2 + 10, a3 + 20);
}

uint64_t *sub_1B687BEF4(__int128 *a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = a1[1];
  v8 = *a1;
  v9 = v5;
  v10 = a1[2];
  v11 = *((_QWORD *)a1 + 6);
  v6 = *((_QWORD *)a1 + 2) + 2;
  *(_QWORD *)&v8 = *(_QWORD *)a1 + 2;
  *(_QWORD *)&v9 = v6;
  sub_1B687BF60((uint64_t *)a1, a2, a3);
  return sub_1B687BF60((uint64_t *)&v8, a2 + 4, a3 + 8);
}

uint64_t *sub_1B687BF60(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *result;
  v4 = result[2];
  v5 = *((_DWORD *)result + 8);
  v6 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = v5 - v6;
    v10 = 2 * result[3];
    v11 = 2 * result[1];
    do
    {
      if (v9 >= 1)
      {
        v12 = 0;
        do
        {
          v13 = *(unsigned __int16 *)(v3 + 2 * v12);
          result = (uint64_t *)(v13 >> 5);
          *((_DWORD *)a3 + (_QWORD)result) = *((_DWORD *)a3 + (v13 >> 5)) - v13 + *(unsigned __int16 *)(v4 + 2 * v12);
          *((_WORD *)a2 + (_QWORD)result) = *((_WORD *)a2 + (v13 >> 5)) + 1;
          v12 += 2;
        }
        while (v12 < 2 * v9);
      }
      ++v8;
      v4 += v10;
      v3 += v11;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1B687C010(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)result;
  v6 = *(_DWORD *)(result + 32);
  v8 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 44);
  v9 = *(_DWORD *)(result + 36) - v7;
  v10 = *(_DWORD *)(result + 48);
  v12 = (v10 & 8) == 0 || v7 != 0;
  v13 = v9 - v12;
  v14 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    v15 = *(_QWORD *)(result + 24);
    v17 = (v10 & 2) == 0 || v8 != 0;
    v18 = 2 * (v6 - v8 - v17);
    v19 = ~(2 * (_BYTE)v10) & 2;
    v20 = v18;
    v21 = v4 + 2 * v15 * v14 + 2 * v19;
    v22 = 2 * v15;
    v23 = v3 * (2 * v14 + 2) + 2 * v19 + v5 - 4;
    v24 = 2 * v3;
    v25 = v3 * (2 * v14 - 2) + 2 * v19 + v5 + 4;
    result = 2 * v3 * v14 + 2 * v19;
    v26 = v5 + result;
    do
    {
      if ((int)v19 < (int)v20)
      {
        result = 0;
        do
        {
          v27 = *(unsigned __int16 *)(v26 + 2 * result);
          v28 = *(unsigned __int16 *)(v25 + 2 * result);
          v29 = __OFSUB__(v27, v28);
          v30 = v27 - v28;
          if ((v30 < 0) ^ v29 | (v30 == 0))
            v31 = 0;
          else
            v31 = 1;
          v32 = v31 | (v30 >> 31);
          v33 = *(unsigned __int16 *)(v23 + 2 * result);
          v29 = __OFSUB__(v27, v33);
          v34 = v27 - v33;
          if ((v34 < 0) ^ v29 | (v34 == 0))
            v35 = 0;
          else
            v35 = 1;
          v36 = v32 + (v35 | (v34 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v36) = *(_DWORD *)(a3 + 4 * v36) - v27 + *(unsigned __int16 *)(v21 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v36);
          result += 2;
        }
        while (v19 + result < v20);
      }
      LODWORD(v14) = v14 + 1;
      v21 += v22;
      v23 += v24;
      v25 += v24;
      v26 += v24;
    }
    while ((_DWORD)v14 != v13);
  }
  return result;
}

uint64_t sub_1B687C160(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)result;
  v6 = *(_DWORD *)(result + 32);
  v8 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 44);
  v9 = *(_DWORD *)(result + 36) - v7;
  v10 = *(_DWORD *)(result + 48);
  v12 = (v10 & 8) == 0 || v7 != 0;
  v13 = v9 - v12;
  v14 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v14 < v13)
  {
    v15 = *(_QWORD *)(result + 24);
    v17 = (v10 & 2) == 0 || v8 != 0;
    v18 = 2 * (v6 - v8 - v17);
    v19 = ~(2 * (_BYTE)v10) & 2;
    v20 = v18;
    v21 = v4 + 2 * v15 * v14 + 2 * v19;
    v22 = 2 * v15;
    v23 = v3 * (2 * v14 + 2) + 2 * v19 + v5 + 4;
    v24 = 2 * v3;
    v25 = v3 * (2 * v14 - 2) + 2 * v19 + v5 - 4;
    result = 2 * v3 * v14 + 2 * v19;
    v26 = v5 + result;
    do
    {
      if ((int)v19 < (int)v20)
      {
        result = 0;
        do
        {
          v27 = *(unsigned __int16 *)(v26 + 2 * result);
          v28 = *(unsigned __int16 *)(v25 + 2 * result);
          v29 = __OFSUB__(v27, v28);
          v30 = v27 - v28;
          if ((v30 < 0) ^ v29 | (v30 == 0))
            v31 = 0;
          else
            v31 = 1;
          v32 = v31 | (v30 >> 31);
          v33 = *(unsigned __int16 *)(v23 + 2 * result);
          v29 = __OFSUB__(v27, v33);
          v34 = v27 - v33;
          if ((v34 < 0) ^ v29 | (v34 == 0))
            v35 = 0;
          else
            v35 = 1;
          v36 = v32 + (v35 | (v34 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v36) = *(_DWORD *)(a3 + 4 * v36) - v27 + *(unsigned __int16 *)(v21 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v36);
          result += 2;
        }
        while (v19 + result < v20);
      }
      LODWORD(v14) = v14 + 1;
      v21 += v22;
      v23 += v24;
      v25 += v24;
      v26 += v24;
    }
    while ((_DWORD)v14 != v13);
  }
  return result;
}

uint64_t sub_1B687C2B0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)result;
  v6 = *(_DWORD *)(result + 32);
  v8 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 44);
  v9 = *(_DWORD *)(result + 36) - v7;
  v11 = (*(_DWORD *)(result + 48) & 8) == 0 || v7 != 0;
  v12 = v9 - v11;
  v13 = (*(_DWORD *)(result + 48) & 4) == 0;
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if ((int)v13 < v12)
  {
    v14 = *(_QWORD *)(result + 24);
    v15 = v6 - v8;
    v16 = v4 + 2 * v14 * v13;
    v17 = v5 + 2 * v3 * v13;
    v18 = 2 * v14;
    v19 = v5 + v3 * (2 * v13 + 2);
    v20 = 2 * v3;
    result = 2 * v13 - 2;
    v21 = v5 + v3 * result;
    do
    {
      if (v15 >= 1)
      {
        result = 0;
        do
        {
          v22 = *(unsigned __int16 *)(v17 + 2 * result);
          v23 = *(unsigned __int16 *)(v21 + 2 * result);
          v24 = __OFSUB__(v22, v23);
          v25 = v22 - v23;
          if ((v25 < 0) ^ v24 | (v25 == 0))
            v26 = 0;
          else
            v26 = 1;
          v27 = v26 | (v25 >> 31);
          v28 = *(unsigned __int16 *)(v19 + 2 * result);
          v24 = __OFSUB__(v22, v28);
          v29 = v22 - v28;
          if ((v29 < 0) ^ v24 | (v29 == 0))
            v30 = 0;
          else
            v30 = 1;
          v31 = v27 + (v30 | (v29 >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v31) = *(_DWORD *)(a3 + 4 * v31) - v22 + *(unsigned __int16 *)(v16 + 2 * result);
          ++*(_WORD *)(a2 + 2 * v31);
          result += 2;
        }
        while (result < 2 * v15);
      }
      LODWORD(v13) = v13 + 1;
      v16 += v18;
      v19 += v20;
      v21 += v20;
      v17 += v20;
    }
    while ((_DWORD)v13 != v12);
  }
  return result;
}

uint64_t sub_1B687C3BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_DWORD *)(result + 32);
  v6 = *(_DWORD *)(result + 40);
  v7 = *(_DWORD *)(result + 36) - *(_DWORD *)(result + 44);
  v8 = *(_DWORD *)(result + 48);
  *(_WORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (v7 >= 1)
  {
    v9 = 0;
    v10 = (v8 & 2) != 0 && v6 == 0;
    v11 = v5 - v6;
    v12 = !v10;
    v13 = 2 * (v11 - v12);
    v14 = ~(2 * (_BYTE)v8) & 2;
    v15 = 2 * *(_QWORD *)(result + 24);
    v16 = (unsigned __int16 *)(v3 + 2 * v14);
    v17 = 2 * *(_QWORD *)(result + 8);
    do
    {
      v18 = v16;
      v19 = v14;
      if ((int)v14 < (int)v13)
      {
        do
        {
          v20 = *v18;
          v21 = *(v18 - 2);
          v22 = __OFSUB__(v20, v21);
          v23 = v20 - v21;
          if ((v23 < 0) ^ v22 | (v23 == 0))
            v24 = 0;
          else
            v24 = 1;
          v25 = v18[2];
          v18 += 2;
          v26 = (v24 | (v23 >> 31)) + ((v20 > v25) | ((v20 - v25) >> 31)) + 2;
          *(_DWORD *)(a3 + 4 * v26) = *(_DWORD *)(a3 + 4 * v26) - v20 + *(unsigned __int16 *)(v4 + 2 * v19);
          result = *(unsigned __int16 *)(a2 + 2 * v26);
          *(_WORD *)(a2 + 2 * v26) = result + 1;
          v19 += 2;
        }
        while (v19 < v13);
      }
      ++v9;
      v4 += v15;
      v16 = (unsigned __int16 *)((char *)v16 + v17);
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t *sub_1B687C4B0(uint64_t *result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *result;
  v4 = result[2];
  v5 = *((_DWORD *)result + 8);
  v6 = *((_DWORD *)result + 10);
  v7 = *((_DWORD *)result + 9) - *((_DWORD *)result + 11);
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = v5 - v6;
    v10 = result[1];
    v11 = result[3];
    do
    {
      if (v9 >= 1)
      {
        v12 = 0;
        do
        {
          v13 = *(unsigned __int8 *)(v3 + v12);
          result = (uint64_t *)(v13 >> 3);
          *((_DWORD *)a3 + (_QWORD)result) = *((_DWORD *)a3 + (v13 >> 3)) - v13 + *(unsigned __int8 *)(v4 + v12);
          *((_WORD *)a2 + (_QWORD)result) = *((_WORD *)a2 + (v13 >> 3)) + 1;
          v12 += 2;
        }
        while (v12 < 2 * v9);
      }
      v3 += v10;
      v4 += v11;
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t sub_1B687C558(_QWORD *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;

  v9 = *((_DWORD *)a1 + 3) - a4;
  v10 = (a2 << v9);
  v11 = (a3 << v9);
  if ((_DWORD)a4)
    v12 = 2;
  else
    v12 = 4;
  v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, v10, v11);
  v14 = *a1;
  v41 = v13;
  v42 = *(_QWORD *)(v14 + 8 * a4 + 112);
  v43 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[118] + 16))(a1[118], v10, v11, a4);
  v44 = *(_QWORD *)(a1[118] + 8 * a4 + 112);
  v15 = 1 << (*((_DWORD *)a1 + 3) - a4);
  v45 = v15;
  v46 = v15;
  v47 = v12;
  v48 = v12;
  v49 = 0;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[119] + 16))(a1[119]) & 1) != 0
    || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[119] + 32))(a1[119]), (_DWORD)result))
  {
    v17 = (_DWORD *)a1[119];
    v18 = *((_DWORD *)a1 + 3);
    result = sub_1B685CA48(v17, v10, v11, 1 << v18);
    v19 = v15;
    if ((_DWORD)result == 1)
    {
      v20 = 1 << (v18 - a4);
      v21 = v17[10];
      v22 = (int)v17[9] >> a4;
      if ((int)v10 <= v22)
        v23 = v22;
      else
        v23 = v10;
      v24 = v17[12];
      v25 = (int)v17[11] >> a4;
      if ((int)v11 <= v25)
        v26 = v25;
      else
        v26 = v11;
      v27 = v21 >> a4;
      if (v27 >= (int)v10 + v20 - 1)
        v28 = v10 + v20 - 1;
      else
        v28 = v27;
      v29 = v11 + v20 - 1;
      if (v24 >> a4 < v29)
        v29 = v24 >> a4;
      v39 = v29;
      v41 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, v23, v26, a4);
      v42 = *(_QWORD *)(*a1 + 8 * a4 + 112);
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[118] + 16))(a1[118], v23, v26, a4);
      v43 = result;
      v44 = *(_QWORD *)(a1[118] + 8 * a4 + 112);
      v19 = v28 - v23 + 1;
      v15 = v39 - v26 + 1;
      v45 = v19;
      v46 = v15;
    }
  }
  else
  {
    v19 = v15;
  }
  v30 = *a1;
  v31 = 240;
  if (!*(_BYTE *)(*a1 + 136))
    v31 = 276;
  v32 = 244;
  if (!*(_BYTE *)(*a1 + 136))
    v32 = 280;
  v33 = *(int *)(v30 + v31) >> a4;
  v34 = *(int *)(v30 + v32) >> a4;
  if (v19 + (int)v10 > v33)
    v45 = v33 - v10;
  if (v15 + (int)v11 > v34)
    v46 = v34 - v11;
  v35 = a2 != 0;
  if (a3)
    v35 |= 4u;
  if (a2 | a3)
    v49 = v35;
  if (*((_DWORD *)a1 + 5) - 1 <= a2)
  {
    v47 = 0;
  }
  else
  {
    v35 |= 2u;
    v49 = v35;
  }
  if (*((_DWORD *)a1 + 6) - 1 <= a3)
    v48 = 0;
  else
    v49 = v35 | 8;
  if (!*((_BYTE *)a1 + 920) || (a4 & 1) == 0)
  {
    v36 = 0;
    v37 = a5 + 20 * a4;
    v38 = a5 + 10 * a4 + 240;
    do
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))a1[5 * a4 + 104 + v36++])(&v41, v38, v37);
      v37 += 60;
      v38 += 30;
    }
    while (v36 != 4);
    if (!*((_BYTE *)a1 + 920))
      return ((uint64_t (*)(uint64_t *, unint64_t, unint64_t))a1[5 * a4 + 108])(&v41, a5 + ((unint64_t)a4 << 6) + 744, a5 + ((unint64_t)a4 << 7) + 360);
  }
  if ((_DWORD)a4)
    return ((uint64_t (*)(uint64_t *, unint64_t, unint64_t))a1[5 * a4 + 108])(&v41, a5 + ((unint64_t)a4 << 6) + 744, a5 + ((unint64_t)a4 << 7) + 360);
  return result;
}

uint64_t sub_1B687C8D4(uint64_t a1, int a2, int a3, int *a4, int *a5, int a6, int a7)
{
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  int v13;
  int v14;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;

  v8 = *a4;
  if (*a4)
  {
    if (v8 < 1)
      v9 = 1;
    else
      v9 = -1;
    if (v8 == v9)
    {
      v10 = 0;
      v11 = 0;
      result = 0;
    }
    else
    {
      result = 0;
      v11 = 0;
      v10 = 0;
      v16 = *(unsigned __int8 *)(a1 + 33);
      v17 = v8 * a2 - 2 * a3;
      v18 = v9 * a2;
      v19 = 0x7FFFFFFF;
      do
      {
        v20 = v8;
        v21 = a6 == 4;
        v22 = v17 * v8;
        if (v20 >= 0)
          v23 = v20;
        else
          v23 = -v20;
        if (!v20)
          v21 = 0;
        if (v23 + 1 < v16)
          v24 = v23 + 1;
        else
          v24 = v16;
        v25 = (v24 + v21);
        if (v22 + (int)v25 * a7 < v19)
        {
          v10 = v20;
          v11 = v22;
          result = v25;
          v19 = v22 + v25 * a7;
        }
        v8 = v20 + v9;
        v17 += v18;
      }
      while (v20);
    }
    *a4 = v10;
    *a5 = v11;
  }
  else
  {
    *a5 = 0;
    v13 = *a4;
    v14 = *(unsigned __int8 *)(a1 + 33);
    v15 = a6 == 4;
    if (*a4 < 0)
      v13 = -v13;
    if (!*a4)
      v15 = 0;
    if (v13 + 1 < v14)
      v14 = v13 + 1;
    return (v14 + v15);
  }
  return result;
}

uint64_t sub_1B687C9B8(uint64_t result, uint64_t a2, int a3, char *a4, unsigned int a5, int *a6, int *a7, int a8)
{
  int v8;
  int v9;
  _BOOL8 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _BOOL4 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _BOOL4 v40;
  int v41;
  BOOL v42;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;

  v46 = a2 + 30 * a3 + 10 * a5 + 240;
  v45 = a2 + 60 * a3 + 20 * a5;
  do
  {
    v8 = *a4;
    v9 = a4[1];
    v10 = v8 < v9;
    if (v8 <= v9)
      v11 = a4[1];
    else
      v11 = *a4;
    if (v8 > v9)
      v12 = a4[1];
    else
      v12 = *a4;
    v13 = a4[2];
    v14 = a4[3];
    if (v13 < v14)
      v15 = 3;
    else
      v15 = 4;
    if (v13 >= v14)
      v16 = a4[3];
    else
      v16 = a4[2];
    if (v13 < v14)
      v17 = a4[3];
    else
      v17 = a4[2];
    v18 = v11 - v16;
    if (v11 - v16 < 5)
      break;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = *(unsigned __int16 *)(v46 + 2 * v10);
    v24 = *(unsigned __int16 *)(v46 + 2 * v15);
    v49 = v18 - 4;
    v25 = v18 - 3;
    v26 = -2 * *(_DWORD *)(v45 + 4 * v15);
    v27 = -2 * *(_DWORD *)(v45 + 4 * v10);
    v28 = v16 + 4;
    v29 = 0x7FFFFFFF;
    v47 = v27;
    v48 = v26;
LABEL_19:
    v30 = 1 - (v16 + v19);
    v31 = v26 + v24 * (v16 + v19);
    v32 = v27 + v23 * (v28 + v19);
    do
    {
      if ((v16 - 1 + v19) >= 0xFFFFFFFB)
      {
        v33 = v16 + v19;
        v34 = a3 == 4;
        v35 = v16 + v19 + 4;
        v36 = v31 * (v16 + v19) + v32 * v35;
        v37 = *(unsigned __int8 *)(result + 33);
        v38 = -4 - (v16 + v19);
        if (v35 >= 0)
          v38 = v16 + v19 + 4;
        if (v38 + 1 < v37)
          v39 = v38 + 1;
        else
          v39 = *(unsigned __int8 *)(result + 33);
        v40 = v33 != -4 && a3 == 4;
        if (v30 < v37)
          v37 = v30;
        if (!v33)
          v34 = 0;
        v41 = v40 + v34 + v37 + v39;
        if (v36 + v41 * a8 < v29)
        {
          *a6 = v36;
          *a7 = v41;
          v22 = 1;
          v29 = v36 + v41 * a8;
          v20 = v16 + v19;
          v21 = v33 + 4;
          v26 = v48;
          v42 = v19++ == v49;
          v28 = v16 + 4;
          v27 = v47;
          if (!v42)
            goto LABEL_19;
          goto LABEL_40;
        }
      }
      ++v19;
      --v30;
      v31 += v24;
      v32 += v23;
    }
    while (v25 != v19);
    v35 = v21;
    v33 = v20;
    if ((v22 & 1) == 0)
      continue;
LABEL_40:
    a4[byte_1B692B560[v15] - 1] = v33;
    a4[byte_1B692B560[v10] - 1] = v35;
    v21 = v35;
    v20 = v33;
  }
  while (v12 - v17 > 4 || v12 - v20 > 4 || v21 - v17 > 4);
  return result;
}

unint64_t *sub_1B687CBF0(int a1, unint64_t *a2, char *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v6 = *a3;
  if (a1 >= v6)
    v7 = *a3;
  else
    v7 = a1;
  v8 = v6 < a1;
  if (v7 > 21)
    sub_1B67CC554(a2, v7, v8);
  else
    sub_1B67CC498(a2, ~v8, v7 + v8);
  v9 = a3[1];
  if (a1 >= v9)
    v10 = a3[1];
  else
    v10 = a1;
  v11 = v9 < a1;
  if (v10 > 21)
    sub_1B67CC554(a2, v10, v11);
  else
    sub_1B67CC498(a2, ~v11, v10 + v11);
  v12 = a3[2];
  if (a1 >= -v12)
    v13 = -v12;
  else
    v13 = a1;
  v14 = -v12 < a1;
  if (v13 > 21)
    sub_1B67CC554(a2, v13, v14);
  else
    sub_1B67CC498(a2, ~v14, v13 + v14);
  v15 = a3[3];
  if (a1 >= -v15)
    v16 = -v15;
  else
    v16 = a1;
  v17 = -v15 < a1;
  if (v16 > 21)
    return sub_1B67CC554(a2, v16, v17);
  else
    return sub_1B67CC498(a2, ~v17, v16 + v17);
}

int8x16_t *sub_1B687CD18(int8x16_t *result, const float *a2, int a3, int a4, int a5, int a6)
{
  int8x16_t v6;
  int16x8_t v7;
  const char *v8;
  int8x16_t v9;
  int8x16_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint16x8_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int16x8_t v22;
  int8x16_t v23;
  const float *v24;
  uint8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint16x8_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int8x16_t v40;
  uint8x16_t v41;
  const float *v42;
  uint8x16_t v43;

  v6 = result[255];
  v7 = (int16x8_t)vld1q_dup_f32(a2);
  v8 = (const char *)(a2 + 2);
  v9 = vld1q_dup_s8(v8);
  v10 = vqtbl1q_s8(v6, v9);
  v11 = (_QWORD *)result[85].i64[0];
  v12 = v11[69];
  if (a4 && (a4 & 7) == 0)
  {
    v13 = 0;
    v14 = v11[78] + v11[76] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    v15 = *(int8x16_t *)((char *)&unk_1B692B666 - (a5 >> 2) + 16);
    v16 = (uint64_t)&a2[-3 * v12 + 6];
    v17.i64[0] = 0x3000300030003;
    v17.i64[1] = 0x3000300030003;
    v18.i64[0] = 0x101010101010101;
    v18.i64[1] = 0x101010101010101;
    do
    {
      v19 = *(int32x4_t *)(v16 - 24);
      v20 = *(int32x4_t *)(v16 - 12);
      v21 = *(int32x4_t *)(v16 + 12);
      v22 = (int16x8_t)vzip1q_s64((int64x2_t)vzip1q_s32(v19, v20), (int64x2_t)vzip1q_s32(*(int32x4_t *)v16, v21));
      v23 = vceqq_s8(vqtbl1q_s8(v6, (int8x16_t)vzip1q_s16((int16x8_t)vzip2q_s8((int8x16_t)v19, (int8x16_t)v20), (int16x8_t)vzip2q_s8(*(int8x16_t *)v16, (int8x16_t)v21))), v10);
      v24 = (const float *)(v14 + v13);
      v25 = (uint8x16_t)vld1q_dup_f32(v24);
      *(_DWORD *)(v14 + v13) = vmaxq_u8((uint8x16_t)vandq_s8(vsubq_s8(vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v22, v7)), v17)), (int8x16_t)xmmword_1B6917990), v18), v23), vmvnq_s8(v23)), v15), v25).u32[0];
      v15 = vextq_s8(v15, v15, 4uLL);
      v13 += 4;
      v16 += 48;
    }
    while (v13 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    v26 = 0;
    v27 = v11[80] + v11[77] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    v28 = *(int8x16_t *)((char *)&unk_1B692B666 - (a6 >> 2) + 16);
    v29 = (int8x16_t *)(a2 - 3);
    v30 = 36 * v12;
    v31 = 3 * v12;
    v32 = 48 * v12;
    v33 = 8 * v31;
    v34 = 4 * v31;
    v35.i64[0] = 0x3000300030003;
    v35.i64[1] = 0x3000300030003;
    v36.i64[0] = 0x101010101010101;
    v36.i64[1] = 0x101010101010101;
    do
    {
      v37 = *(int32x4_t *)((char *)v29 + v34);
      v38 = *(int32x4_t *)((char *)v29 + v33);
      v39 = *(int32x4_t *)((char *)v29 + v30);
      v40 = vceqq_s8(vqtbl1q_s8(v6, (int8x16_t)vzip1q_s16((int16x8_t)vzip2q_s8(*v29, (int8x16_t)v37), (int16x8_t)vzip2q_s8((int8x16_t)v38, (int8x16_t)v39))), v10);
      v41 = (uint8x16_t)vandq_s8(vsubq_s8(vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16((int16x8_t)vzip1q_s64((int64x2_t)vzip1q_s32(*(int32x4_t *)v29, v37), (int64x2_t)vzip1q_s32(v38, v39)), v7)), v35)), (int8x16_t)xmmword_1B6917990), v36), v40), vmvnq_s8(v40)), v28);
      v42 = (const float *)(v27 + v26);
      v43 = (uint8x16_t)vld1q_dup_f32(v42);
      *(_DWORD *)(v27 + v26) = vmaxq_u8(v41, v43).u32[0];
      v28 = vextq_s8(v28, v28, 4uLL);
      v26 += 4;
      v29 = (int8x16_t *)((char *)v29 + v32);
    }
    while (v26 < (uint64_t)a6 >> 2);
  }
  return result;
}

__int32 *sub_1B687CEF4(__int32 *result, const float *a2, int a3, int a4, int a5, int a6)
{
  int16x8_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  __int32 *v12;
  uint16x8_t v13;
  int8x16_t v14;
  int16x8_t v15;
  const float *v16;
  uint8x16_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  __int32 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint16x8_t v27;
  int8x16_t v28;
  int16x8_t v29;
  const float *v30;
  uint8x16_t v31;

  v6 = (int16x8_t)vld1q_dup_f32(a2);
  v7 = (_QWORD *)*((_QWORD *)result + 170);
  v8 = v7[69];
  if (a4 && (a4 & 7) == 0)
  {
    v9 = 0;
    v10 = v7[78] + v7[76] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    v11 = *(int8x16_t *)((char *)&unk_1B692B666 - (a5 >> 2) + 16);
    v12 = (__int32 *)&a2[-3 * v8 + 6];
    v13.i64[0] = 0x3000300030003;
    v13.i64[1] = 0x3000300030003;
    v14.i64[0] = 0x101010101010101;
    v14.i64[1] = 0x101010101010101;
    do
    {
      result = v12 + 3;
      v15.i32[0] = *(v12 - 6);
      v15.i32[1] = *(v12 - 3);
      v15.i32[2] = *v12;
      v15.i32[3] = v12[3];
      v16 = (const float *)(v10 + v9);
      v17 = (uint8x16_t)vld1q_dup_f32(v16);
      *(_DWORD *)(v10 + v9) = vmaxq_u8((uint8x16_t)vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v15, v6)), v13)), (int8x16_t)xmmword_1B6917990), v14), v11), v17).u32[0];
      v11 = vextq_s8(v11, v11, 4uLL);
      v9 += 4;
      v12 += 12;
    }
    while (v9 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    v18 = 0;
    v19 = v7[80] + v7[77] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    v20 = *(int8x16_t *)((char *)&unk_1B692B666 - (a6 >> 2) + 16);
    v21 = (__int32 *)(a2 - 3);
    v22 = 9 * v8;
    v23 = 3 * v8;
    v24 = 48 * v8;
    v25 = 2 * v23;
    v26 = v23;
    v27.i64[0] = 0x3000300030003;
    v27.i64[1] = 0x3000300030003;
    v28.i64[0] = 0x101010101010101;
    v28.i64[1] = 0x101010101010101;
    do
    {
      result = &v21[v22];
      v29.i32[0] = *v21;
      v29.i32[1] = v21[v26];
      v29.i32[2] = v21[v25];
      v29.i32[3] = v21[v22];
      v30 = (const float *)(v19 + v18);
      v31 = (uint8x16_t)vld1q_dup_f32(v30);
      *(_DWORD *)(v19 + v18) = vmaxq_u8((uint8x16_t)vandq_s8(vaddq_s8(vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v29, v6)), v27)), (int8x16_t)xmmword_1B6917990), v28), v20), v31).u32[0];
      v20 = vextq_s8(v20, v20, 4uLL);
      v18 += 4;
      v21 = (__int32 *)((char *)v21 + v24);
    }
    while (v18 < (uint64_t)a6 >> 2);
  }
  return result;
}

int8x16_t *sub_1B687D080(int8x16_t *result, const double *a2, int a3, int a4, int a5, int a6)
{
  int8x16_t v6;
  int8x16_t v7;
  const double *v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  uint64_t v17;
  int16x8_t v18;
  uint16x8_t v19;
  int8x16_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  const float *v30;
  uint8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  int16x8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  int8x16_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  const float *v52;
  uint8x16_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;

  v6 = result[255];
  v7 = result[256];
  v8 = a2;
  v9 = (int16x8_t)vld1q_dup_f64(v8++);
  v10 = (int8x16_t)vld1q_dup_s16((const __int16 *)v8);
  v54.val[0] = vqtbl1q_s8(v6, v10);
  v54.val[1] = vqtbl1q_s8(v7, v10);
  v11 = vqtbl2q_s8(v54, (int8x16_t)xmmword_1B69179A0);
  v12 = (_QWORD *)result[85].i64[0];
  v13 = v12[69];
  if (a4 && (a4 & 7) == 0)
  {
    v14 = 0;
    v15 = v12[78] + v12[76] * ((uint64_t)a4 >> 3) + (a3 >> 2);
    v16 = *(int8x16_t *)((char *)&unk_1B692B666 - (a5 >> 2) + 16);
    v17 = (uint64_t)a2 - 12 * v13 + 24;
    v18.i64[0] = -1;
    v18.i64[1] = -1;
    v19.i64[0] = 0x3000300030003;
    v19.i64[1] = 0x3000300030003;
    v20.i64[0] = 0x101010101010101;
    v20.i64[1] = 0x101010101010101;
    do
    {
      v21 = *(int16x8_t *)(v17 - 24);
      v22 = *(int16x8_t *)(v17 - 12);
      v23 = *(int16x8_t *)(v17 + 12);
      v24 = (int32x4_t)vzip2q_s16(v21, v22);
      v25 = (int16x8_t)vzip1q_s64((int64x2_t)v21, (int64x2_t)v22);
      v26 = (int16x8_t)vzip1q_s64(*(int64x2_t *)v17, (int64x2_t)v23);
      v27 = (int8x16_t)vzip1q_s32(v24, (int32x4_t)vzip2q_s16(*(int16x8_t *)v17, v23));
      v55.val[0] = vqtbl1q_s8(v6, v27);
      v55.val[1] = vqtbl1q_s8(v7, v27);
      v28 = (int8x16_t)vceqq_s16((int16x8_t)vceqq_s8(vqtbl2q_s8(v55, (int8x16_t)xmmword_1B69179A0), v11), v18);
      v29 = (uint8x16_t)vandq_s8(vaddq_s8(vandq_s8(vuzp1q_s8(v28, v28), vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vuzp1q_s8((int8x16_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v25, v9)), v19), (int8x16_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v26, v9)), v19))), (int8x16_t)xmmword_1B6917990)), v20), v16);
      v30 = (const float *)(v15 + v14);
      v31 = (uint8x16_t)vld1q_dup_f32(v30);
      *(_DWORD *)(v15 + v14) = vmaxq_u8(v29, v31).u32[0];
      v16 = vextq_s8(v16, v16, 4uLL);
      v14 += 4;
      v17 += 48;
    }
    while (v14 < (uint64_t)a5 >> 2);
  }
  if (a3 && (a3 & 7) == 0)
  {
    v32 = 0;
    v33 = v12[80] + v12[77] * ((uint64_t)a3 >> 3) + (a4 >> 2);
    v34 = *(int8x16_t *)((char *)&unk_1B692B666 - (a6 >> 2) + 16);
    v35 = (int16x8_t *)((char *)a2 - 12);
    v36 = 36 * v13;
    v37 = 3 * v13;
    v38 = 48 * v13;
    v39 = 8 * v37;
    v40 = 4 * v37;
    v41.i64[0] = -1;
    v41.i64[1] = -1;
    v42.i64[0] = 0x3000300030003;
    v42.i64[1] = 0x3000300030003;
    v43.i64[0] = 0x101010101010101;
    v43.i64[1] = 0x101010101010101;
    do
    {
      v44 = *(int16x8_t *)((char *)v35 + v40);
      v45 = *(int16x8_t *)((char *)v35 + v39);
      v46 = *(int16x8_t *)((char *)v35 + v36);
      v47 = (int32x4_t)vzip2q_s16(v45, v46);
      v48 = (int16x8_t)vzip1q_s64((int64x2_t)v45, (int64x2_t)v46);
      v49 = (int8x16_t)vzip1q_s32((int32x4_t)vzip2q_s16(*v35, v44), v47);
      v56.val[0] = vqtbl1q_s8(v6, v49);
      v56.val[1] = vqtbl1q_s8(v7, v49);
      v50 = (int8x16_t)vceqq_s16((int16x8_t)vceqq_s8(vqtbl2q_s8(v56, (int8x16_t)xmmword_1B69179A0), v11), v41);
      v51 = (uint8x16_t)vandq_s8(vaddq_s8(vandq_s8(vuzp1q_s8(v50, v50), vqtbl1q_s8((int8x16_t)vceqzq_s32((int32x4_t)vuzp1q_s8((int8x16_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16((int16x8_t)vzip1q_s64(*(int64x2_t *)v35, (int64x2_t)v44), v9)), v42), (int8x16_t)vcgtq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v48, v9)), v42))), (int8x16_t)xmmword_1B6917990)), v43), v34);
      v52 = (const float *)(v33 + v32);
      v53 = (uint8x16_t)vld1q_dup_f32(v52);
      *(_DWORD *)(v33 + v32) = vmaxq_u8(v51, v53).u32[0];
      v34 = vextq_s8(v34, v34, 4uLL);
      v32 += 4;
      v35 = (int16x8_t *)((char *)v35 + v38);
    }
    while (v32 < (uint64_t)a6 >> 2);
  }
  return result;
}

unint64_t sub_1B687D2A0(unint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  int8x16_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t *v14;
  int v15;
  const __int16 *v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int8x16_t v34;
  int v35;
  int v36;
  int64x2_t v38;
  int64x2_t v39;
  uint16x8_t v61;
  unsigned __int128 v62;
  uint64_t v64;
  unint64_t v65;
  uint8x16_t v66;
  uint64_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  uint8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  uint8x16_t v75;
  int8x16_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x16_t v85;
  uint8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  __int128 v89;
  __int128 v90;
  unsigned __int128 v91;
  unsigned __int128 v92;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v103;
  int8x16_t v105;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t *v110;
  int32x4_t v111;
  int32x4_t v112;
  int8x16_t v113;
  uint8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  _DWORD *v117;
  int8x16_t v118;
  int16x8_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  _QWORD *v123;
  _QWORD *v124;
  int8x16_t v125;
  int16x8_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t *v129;
  _OWORD v130[8];
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(result + 1360);
  v8 = (uint64_t)a3 >> 3;
  v10 = *(_QWORD *)(v7 + 488);
  v9 = *(_QWORD *)(v7 + 496);
  v11 = *(_QWORD *)(v7 + 608);
  v12 = *(_QWORD *)(v7 + 624);
  v13 = *(_QWORD *)(v7 + 616);
  v14 = (int32x4_t *)(*(_QWORD *)(v7 + 640) + v13 * ((uint64_t)(a2 + 8) >> 3) + (a3 >> 2));
  v15 = *(unsigned __int8 *)(v7 + 284);
  v16 = (const __int16 *)(*(_QWORD *)(result + 1384) + 14);
  v17 = *(int32x4_t *)((char *)v14 + v13);
  v18 = *(int32x4_t *)((char *)v14 + 2 * v13);
  v19 = *(int32x4_t *)((char *)v14 + 3 * v13);
  v20 = *(int32x4_t *)((char *)v14 + 4 * v13);
  v21 = *(int32x4_t *)((char *)v14 + 5 * v13);
  v22 = *(int32x4_t *)((char *)v14 + 6 * v13);
  v23 = *(int32x4_t *)((char *)v14 + 7 * v13);
  v24 = (int64x2_t)vtrn1q_s32(*v14, v17);
  v25 = (int64x2_t)vtrn2q_s32(*v14, v17);
  v26 = (int64x2_t)vtrn1q_s32(v18, v19);
  v27 = (int64x2_t)vtrn2q_s32(v18, v19);
  v28 = vzip1q_s64(v24, v26);
  v29 = vzip2q_s64(v24, v26);
  v30 = vzip1q_s64(v25, v27);
  v31 = vzip2q_s64(v25, v27);
  v32 = (int64x2_t)vtrn1q_s32(v20, v21);
  v33 = (int64x2_t)vtrn1q_s32(v22, v23);
  v130[0] = v28;
  v130[1] = vzip1q_s64(v32, v33);
  v34 = (int8x16_t)vld1q_dup_s16(v16);
  v35 = *(unsigned __int8 *)(result + 628);
  v36 = *(unsigned __int8 *)(result + 629);
  _X8 = v9 + 2 * (v10 * v8 + (a2 >> 3));
  v38 = (int64x2_t)vtrn2q_s32(v20, v21);
  v39 = (int64x2_t)vtrn2q_s32(v22, v23);
  v130[2] = v30;
  v130[3] = vzip1q_s64(v38, v39);
  v130[4] = v29;
  v130[5] = vzip2q_s64(v32, v33);
  v130[6] = v31;
  v130[7] = vzip2q_s64(v38, v39);
  _X14 = &v14->i8[8 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[9 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[10 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[11 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[12 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[13 * v13];
  __asm { PRFM            #0, [X14] }
  _X14 = &v14->i8[14 * v13];
  __asm { PRFM            #0, [X14] }
  _X9 = (uint64_t)v14[v13].i64 - v13;
  __asm { PRFM            #0, [X9] }
  if (a3)
  {
    _X9 = (uint16x8_t *)(_X8 - 2 * v10);
    v61 = *_X9;
    _X9 += 2;
    v62 = (unsigned __int128)vshrq_n_u16(v61, 2uLL);
    __asm { PRFM            #0, [X9] }
  }
  else
  {
    v62 = 0uLL;
  }
  if (a5 >= 8)
  {
    v64 = 0;
    v65 = 0;
    v66 = (uint8x16_t)vdupq_n_s8(v15 - 8);
    v67 = (uint64_t)a2 >> 2;
    v68 = vshlq_u8((uint8x16_t)xmmword_1B69179B0, v66);
    v69 = vshlq_u8((uint8x16_t)xmmword_1B69179C0, v66);
    v70 = vshlq_u8((uint8x16_t)xmmword_1B69179D0, v66);
    v71 = vshlq_u8((uint8x16_t)xmmword_1B69179E0, v66);
    v72 = vshlq_u8((uint8x16_t)xmmword_1B69179F0, v66);
    v73 = vdupq_n_s8(v35 - 16);
    v74 = vdupq_n_s8(v36 - 20);
    v75 = vshlq_u8((uint8x16_t)xmmword_1B6917A00, v66);
    v76 = vdupq_n_s8(v36 - 16);
    v77 = a5 >> 3;
    v78 = 2 * v10;
    v79 = 2 * v11;
    v80 = v12 + v11 * v8;
    v81 = v12 + v11 + v11 * v8;
    v82 = 4 * v10;
    result = 384;
    v83 = 256;
    v84 = 576;
    v85.i64[0] = 0x2323232323232323;
    v85.i64[1] = 0x2323232323232323;
    v86.i64[0] = 0x101010101010101;
    v86.i64[1] = 0x101010101010101;
    v87.i64[0] = 0x1E1E1E1E1E1E1E1ELL;
    v87.i64[1] = 0x1E1E1E1E1E1E1E1ELL;
    v88.i64[0] = 0xE2E2E2E2E2E2E2E2;
    v88.i64[1] = 0xE2E2E2E2E2E2E2E2;
    v89 = xmmword_1B6917A20;
    v90 = xmmword_1B6917A30;
    do
    {
      v91 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)_X8, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      v92 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)(_X8 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      _X6 = _X8 + v78;
      *(int8x8_t *)v6.i8 = vraddhn_s16((int16x8_t)v62, (int16x8_t)v91);
      v62 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)(_X8 + v78), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
      v94 = vzip1q_s8(v6, v6);
      v95 = vraddhn_high_s16(*(int8x8_t *)v6.i8, (int16x8_t)v91, (int16x8_t)v62);
      *(int8x8_t *)&v91 = vraddhn_s16((int16x8_t)v91, (int16x8_t)v92);
      *(int8x8_t *)&v92 = vraddhn_s16((int16x8_t)v62, (int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)(_X8 + v78 + 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80)));
      v96 = vzip1q_s8((int8x16_t)v91, (int8x16_t)v92);
      __asm
      {
        PRFM            #0, [X8,#0x20]
        PRFM            #0, [X6,#0x20]
      }
      *(int8x16_t *)(a6 + v84) = vqtbl3q_s8(*(int8x16x3_t *)v68.i8, vminq_s8(vaddq_s8(v95, v73), v85));
      v99 = vqtbl3q_s8(*(int8x16x3_t *)v68.i8, vminq_s8(vaddq_s8(v96, v73), v85));
      *(_WORD *)(a6 + v65 + 520) = v99.i16[1];
      *(_WORD *)(a6 + v65 + 528) = v99.i16[2];
      *(_WORD *)(a6 + v65 + 536) = v99.i16[3];
      *(_WORD *)(a6 + v65 + 544) = v99.i16[4];
      *(_WORD *)(a6 + v65 + 552) = v99.i16[5];
      *(_WORD *)(a6 + v65 + 560) = v99.i16[6];
      *(_WORD *)(a6 + v65 + 568) = v99.i16[7];
      *(_WORD *)(a6 + v65 + 512) = v99.i16[0];
      v100 = vaddq_s8(v95, v74);
      v101 = vzip1q_s8(v100, v100);
      _X4 = v80 + v67 + 16;
      v103 = *(int8x16_t *)(v80 + v67);
      _X6 = v81 + v67 + 16;
      v105 = *(int8x16_t *)(v81 + v67);
      __asm
      {
        PRFM            #0, [X4]
        PRFM            #0, [X6]
      }
      v108 = vceqzq_s8(v105);
      v109 = vminq_s8(vaddq_s8(vaddq_s8(v105, v105), vzip2q_s8(v100, v100)), v85);
      v110 = (int8x16_t *)(a6 + 16 * v65);
      v111 = (int32x4_t)v130[result / 0x10 - 24];
      v112 = (int32x4_t)v130[result / 0x10 - 23];
      v113 = vaddq_s8(v96, v74);
      v114 = (uint8x16_t)vuzp2q_s32(v111, v112);
      v115 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v71.i8, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v111, (int8x16_t)v111), vzip1q_s8(v113, v113)), v85)), vceqzq_s8((int8x16_t)v111));
      v116 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v71.i8, vminq_s8(vaddq_s8(vaddq_s8((int8x16_t)v112, (int8x16_t)v112), vzip2q_s8(v113, v113)), v85)), vceqzq_s8((int8x16_t)v112));
      v117 = (_DWORD *)(a6 + v64);
      v110[8] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v71.i8, vminq_s8(vaddq_s8(vaddq_s8(v103, v103), v101), v85)), vceqzq_s8(v103));
      v110[9] = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v71.i8, v109), v108);
      *(_DWORD *)(a6 + v64 + 16) = v115.i32[1];
      *(_DWORD *)(a6 + v64 + 32) = v115.i32[2];
      v118 = vaddq_s8(vqtbl1q_s8(v96, (int8x16_t)xmmword_1B6917A10), v34);
      *v117 = v115.i32[0];
      *(_DWORD *)(a6 + v64 + 48) = v115.i32[3];
      v119 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)v71.i8, vminq_s8(vaddq_s8(vbslq_s8(vcgtq_s8(v87, v118), v118, vqtbl2q_s8(*(int8x16x2_t *)&v90, vaddq_s8(v118, v88))), v76), v85));
      v117[16] = v116.i32[0];
      v120 = (int8x16_t)vcgtq_u8(v114, v86);
      v121 = vandq_s8((int8x16_t)vzip1q_s16(v119, v119), (int8x16_t)vmovl_s8(*(int8x8_t *)v120.i8));
      *(_DWORD *)(a6 + v64 + 80) = v116.i32[1];
      v122 = vandq_s8((int8x16_t)vzip2q_s16(v119, v119), (int8x16_t)vmovl_high_s8(v120));
      v123 = (_QWORD *)(a6 + v83);
      v124 = (_QWORD *)(a6 + v83 + 96);
      *(_DWORD *)(a6 + v64 + 96) = v116.i32[2];
      v125 = vaddq_s8(v94, v34);
      *(_DWORD *)(a6 + v64 + 112) = v116.i32[3];
      v126 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)v71.i8, vminq_s8(vaddq_s8(vbslq_s8(vcgtq_s8(v87, v125), v125, vqtbl2q_s8(*(int8x16x2_t *)&v90, vaddq_s8(v125, v88))), v76), v85));
      *v123 = v121.i64[0];
      v127 = (int8x16_t)vcgtq_u8((uint8x16_t)v103, v86);
      v128 = (int8x16_t)vmovl_s8(*(int8x8_t *)v127.i8);
      v6 = (int8x16_t)vmovl_high_s8(v127);
      *(_QWORD *)(a6 + v83 + 32) = v121.i64[1];
      v129 = (int8x16_t *)(a6 + result);
      v65 += 2;
      v80 += v79;
      v123[8] = v122.i64[0];
      result += 32;
      v81 += v79;
      v83 += 8;
      _X8 += v82;
      *v124 = v122.i64[1];
      *v129 = vandq_s8((int8x16_t)vzip1q_s16(v126, v126), v128);
      v129[1] = vandq_s8((int8x16_t)vzip2q_s16(v126, v126), v6);
      v84 += 16;
      v64 += 4;
    }
    while (v65 < v77);
  }
  return result;
}

unsigned __int8 *sub_1B687D7A0(uint64_t a1, int a2, int a3, int a4, int a5, int8x16_t *a6)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int8x16_t v22;
  int v23;
  int v24;
  unsigned __int8 *result;
  int v26;
  int8x16_t v27;
  int v28;
  int v29;
  int v30;
  int8x16_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8x16_t v42;
  int8x16_t v44;
  int8x16_t v51;
  int8x16_t *v52;
  int8x16_t v53;
  int8x16_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t *v61;
  int8x16_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint8x16_t v66;
  int8x16_t v69;
  int8x16_t v72;

  v6 = *(_QWORD *)(a1 + 1360);
  v7 = *(_BYTE *)(v6 + 284);
  v8 = *(char *)(a1 + 621);
  v9 = *(_QWORD *)(a1 + 1384);
  v10 = *(char *)(v9 + 14) + v8;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1368) + 2003);
  v12 = -v11;
  if (v10 >= 57)
    v13 = 57;
  else
    v13 = *(char *)(v9 + 14) + v8;
  if (v10 <= v12)
    v14 = -v11;
  else
    v14 = v13;
  if (v14 >= 30)
    v14 = byte_1B692B6F0[v14 - 30];
  v15 = *(char *)(a1 + 629);
  v16 = *(char *)(a1 + 628);
  v17 = v7 - 8;
  v18 = *(char *)(v9 + 15) + v8;
  if (v18 >= 57)
    v19 = 57;
  else
    v19 = v18;
  if (v18 <= v12)
    v20 = v12;
  else
    v20 = v19;
  if (v20 >= 30)
    v20 = byte_1B692B6F0[v20 - 30];
  v21 = v8 + v16;
  if (v8 + v16 >= 51)
    v21 = 51;
  if (v21 <= 15)
    v21 = 15;
  v22 = vdupq_n_s8(byte_1B692B685[v21 - 15] << v17);
  v23 = v8 + v15;
  if (v23 >= 53)
    v24 = 53;
  else
    v24 = v23;
  if (v24 <= 17)
    v24 = 17;
  result = byte_1B692B6B6;
  v26 = byte_1B692B6B6[v24 - 17] << v7;
  if (v23 >= 51)
    v23 = 51;
  if (v23 <= 15)
    v23 = 15;
  v27 = (int8x16_t)vdupq_n_s32((byte_1B692B6B6[v23 - 15] << (v7 + 8)) | v26);
  v28 = v14 + v15;
  if (v28 >= 51)
    v28 = 51;
  if (v28 <= 15)
    v28 = 15;
  v29 = byte_1B692B6B6[v28 - 15];
  v30 = v20 + v15;
  if (v30 >= 51)
    v30 = 51;
  if (v30 <= 15)
    v30 = 15;
  v31 = (int8x16_t)vdupq_n_s16((byte_1B692B6B6[v30 - 15] << v7) | (v29 << v17));
  if (a5 >= 8)
  {
    v32 = 0;
    v33 = *(_QWORD *)(v6 + 608);
    v34 = *(_QWORD *)(v6 + 624);
    v35 = v33 * ((uint64_t)a3 >> 3);
    v36 = (uint64_t)a2 >> 2;
    v37 = 2 * v33;
    v38 = v34 + v35;
    v39 = v34 + v33 + v35;
    v40 = 36;
    v41 = 24;
    v42.i64[0] = 0x101010101010101;
    v42.i64[1] = 0x101010101010101;
    do
    {
      _X17 = v38 + v36 + 16;
      v44 = *(int8x16_t *)(v38 + v36);
      result = (unsigned __int8 *)(v39 + v36 + 16);
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X0]
      }
      v51 = vqtbl1q_s8(v27, *(int8x16_t *)(v39 + v36));
      v52 = &a6[v32];
      v52[8] = vqtbl1q_s8(v27, v44);
      v52[9] = v51;
      v53 = (int8x16_t)vcgtq_u8((uint8x16_t)v44, v42);
      v54 = &a6[v41];
      *v54 = vandq_s8(v31, (int8x16_t)vmovl_s8(*(int8x8_t *)v53.i8));
      v54[1] = vandq_s8(v31, (int8x16_t)vmovl_high_s8(v53));
      a6[v40] = v22;
      v32 += 2;
      ++v40;
      v38 += v37;
      v41 += 2;
      v39 += v37;
    }
    while (v32 < a5 >> 3);
  }
  if (a4 >= 8)
  {
    v55 = 0;
    v56 = *(_QWORD *)(v6 + 616);
    v57 = *(_QWORD *)(v6 + 640);
    v58 = v56 * ((uint64_t)(a2 + 8) >> 3);
    v59 = (uint64_t)a3 >> 2;
    v60 = 2 * v56;
    v61 = a6 + 16;
    v62 = a6 + 32;
    v63 = v57 + v56;
    v64 = v57 + v58;
    v65 = v63 + v58;
    v66.i64[0] = 0x101010101010101;
    v66.i64[1] = 0x101010101010101;
    do
    {
      _X16 = v64 + v59 + 16;
      _X17 = v65 + v59 + 16;
      v69 = *(int8x16_t *)(v65 + v59);
      __asm
      {
        PRFM            #0, [X16]
        PRFM            #0, [X17]
      }
      v61[-16] = vqtbl1q_s8(v27, *(int8x16_t *)(v64 + v59));
      v61[-15] = vqtbl1q_s8(v27, v69);
      v72 = (int8x16_t)vcgtq_u8((uint8x16_t)v69, v66);
      *v61 = vandq_s8(v31, (int8x16_t)vmovl_s8(*(int8x8_t *)v72.i8));
      v61[1] = vandq_s8(v31, (int8x16_t)vmovl_high_s8(v72));
      v61 += 2;
      *v62++ = v22;
      v55 += 2;
      v64 += v60;
      v65 += v60;
    }
    while (v55 < a4 >> 3);
  }
  return result;
}

void *sub_1B687DA30(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, int16x8_t a7, int16x8_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint16x8_t *v11;
  uint16x8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int128 v16;
  unsigned __int128 v17;
  uint16x8_t *v18;
  unsigned __int128 v19;
  unsigned __int128 v20;
  uint16x8_t *v21;
  unsigned __int128 v22;
  unsigned __int128 v23;
  uint16x8_t *v24;
  unsigned __int128 v25;
  unsigned __int128 v26;
  uint16x8_t *v27;
  unsigned __int128 v28;
  unsigned __int128 v29;
  uint16x8_t *v30;
  unsigned __int128 v31;
  unsigned __int128 v32;
  uint16x8_t *v33;
  unsigned __int128 v34;
  unsigned __int128 v35;
  uint16x8_t *v36;
  unsigned __int128 v37;
  unsigned __int128 v38;
  int8x16_t *v39;
  int16x8_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  float32x2x2_t v49;
  float32x2x2_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float *v53;
  float *v54;
  uint8x16_t v55;
  int8x16_t v56;
  uint8x16_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  int v61;
  const __int16 *v62;
  uint64_t v63;
  uint8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t *v68;
  _OWORD *v69;
  int8x16_t v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int8x16_t v75;
  uint8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  void *result;
  uint64_t v80;
  int v81;
  int8x16_t v82;
  int8x16_t v83;
  uint64_t v84;
  int8x16_t v85;
  int8x16_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t *v95;
  int8x16_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x8_t v100;
  _BYTE *v101;
  int v102;
  int8x16_t v103;
  unsigned __int128 v104;
  int8x16_t v105;
  int8x16_t v106;
  _WORD *v107;
  _WORD *v108;
  int v109;
  _OWORD v110[2];
  int8x8_t v111;
  _QWORD v112[11];
  int8x16x2_t v113;
  int8x16x2_t v114;

  v112[9] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 1360);
  v9 = (uint64_t)a3 >> 3;
  v10 = *(_QWORD *)(v8 + 488);
  v11 = (uint16x8_t *)(*(_QWORD *)(v8 + 512) + 2 * (v10 * v9 + (a2 >> 3)));
  if (a3)
  {
    v12 = (uint16x8_t *)((char *)v11 - 2 * v10);
    a7 = (int16x8_t)(*(_OWORD *)&vshrq_n_u16(*v12, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80));
    a8 = (int16x8_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v12 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80));
  }
  v13 = 0;
  v14 = 0;
  v15 = (uint64_t)a2 >> 3;
  v16 = *(_OWORD *)&vshrq_n_u16(*v11, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v17 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v11 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v18 = (uint16x8_t *)((char *)v11 + 2 * v10);
  v19 = *(_OWORD *)&vshrq_n_u16(*v18, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v20 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v18 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v21 = (uint16x8_t *)((char *)v11 + 4 * v10);
  v22 = *(_OWORD *)&vshrq_n_u16(*v21, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v23 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v21 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v24 = (uint16x8_t *)((char *)v11 + 6 * v10);
  v25 = *(_OWORD *)&vshrq_n_u16(*v24, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v26 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v24 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v27 = (uint16x8_t *)((char *)v11 + 8 * v10);
  v28 = *(_OWORD *)&vshrq_n_u16(*v27, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v29 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v27 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v30 = (uint16x8_t *)((char *)v11 + 10 * v10);
  v31 = *(_OWORD *)&vshrq_n_u16(*v30, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v32 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v30 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v33 = (uint16x8_t *)((char *)v11 + 12 * v10);
  v34 = *(_OWORD *)&vshrq_n_u16(*v33, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v35 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v33 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v36 = (uint16x8_t *)((char *)v11 + 14 * v10);
  v37 = *(_OWORD *)&vshrq_n_u16(*v36, 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v38 = *(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)((char *)v36 - 2), 2uLL) & __PAIR128__(0xFF80FF80FF80FF80, 0xFF80FF80FF80FF80);
  v39 = (int8x16_t *)v112;
  v112[0] = vraddhn_s16(a7, (int16x8_t)v16);
  v112[1] = vraddhn_s16((int16x8_t)v16, (int16x8_t)v19);
  v112[2] = vraddhn_s16((int16x8_t)v19, (int16x8_t)v22);
  v112[3] = vraddhn_s16((int16x8_t)v22, (int16x8_t)v25);
  v112[4] = vraddhn_s16((int16x8_t)v25, (int16x8_t)v28);
  v112[5] = vraddhn_s16((int16x8_t)v28, (int16x8_t)v31);
  v112[6] = vraddhn_s16((int16x8_t)v31, (int16x8_t)v34);
  v112[7] = vraddhn_s16((int16x8_t)v34, (int16x8_t)v37);
  v40 = (int16x8_t)vzip1q_s64((int64x2_t)vzip1q_s32((int32x4_t)vzip1q_s16(a8, (int16x8_t)v17), (int32x4_t)vzip1q_s16((int16x8_t)v20, (int16x8_t)v23)), (int64x2_t)vzip1q_s32((int32x4_t)vzip1q_s16((int16x8_t)v26, (int16x8_t)v29), (int32x4_t)vzip1q_s16((int16x8_t)v32, (int16x8_t)v35)));
  v112[8] = vraddhn_s16(v40, (int16x8_t)vextq_s8((int8x16_t)v40, (int8x16_t)v38, 2uLL));
  v41 = vraddhn_high_s16(vraddhn_s16((int16x8_t)v16, (int16x8_t)v17), (int16x8_t)v28, (int16x8_t)v29);
  v42 = vraddhn_high_s16(vraddhn_s16((int16x8_t)v19, (int16x8_t)v20), (int16x8_t)v31, (int16x8_t)v32);
  v43 = vraddhn_high_s16(vraddhn_s16((int16x8_t)v22, (int16x8_t)v23), (int16x8_t)v34, (int16x8_t)v35);
  v44 = vraddhn_high_s16(vraddhn_s16((int16x8_t)v25, (int16x8_t)v26), (int16x8_t)v37, (int16x8_t)v38);
  v45 = (int16x8_t)vzip1q_s8(v41, v42);
  v46 = (int16x8_t)vzip2q_s8(v41, v42);
  v47 = (int16x8_t)vzip1q_s8(v43, v44);
  v48 = (int16x8_t)vzip2q_s8(v43, v44);
  v49 = (float32x2x2_t)vzip1q_s16(v45, v47);
  v50 = (float32x2x2_t)vzip2q_s16(v45, v47);
  v51 = (int32x4_t)vzip1q_s16(v46, v48);
  v52 = (int32x4_t)vzip2q_s16(v46, v48);
  v53 = (float *)&v109;
  vst2_f32(v53, v49);
  v53 += 4;
  *(int32x4_t *)v53 = vzip2q_s32((int32x4_t)v49, v51);
  v54 = (float *)v110;
  vst2_f32(v54, v50);
  v110[1] = vzip2q_s32((int32x4_t)v50, v52);
  v111 = vraddhn_s16(a7, a8);
  v55 = (uint8x16_t)vdupq_n_s8(*(unsigned __int8 *)(v8 + 284) - 8);
  v56 = (int8x16_t)vshlq_u8((uint8x16_t)xmmword_1B69179B0, v55);
  v57 = vshlq_u8((uint8x16_t)xmmword_1B69179C0, v55);
  v58 = vshlq_u8((uint8x16_t)xmmword_1B69179D0, v55);
  v59 = vshlq_u8((uint8x16_t)xmmword_1B69179E0, v55);
  v60 = vshlq_u8((uint8x16_t)xmmword_1B69179F0, v55);
  v61 = *(unsigned __int8 *)(a1 + 629);
  v63 = *(_QWORD *)(v8 + 608);
  v64 = vshlq_u8((uint8x16_t)xmmword_1B6917A00, v55);
  v65 = vdupq_n_s8(*(unsigned __int8 *)(a1 + 628) - 16);
  v66 = vdupq_n_s8(v61 - 20);
  v67 = vdupq_n_s8(v61 - 16);
  v68 = (int8x16_t *)(*(_QWORD *)(v8 + 624) + v63 * v9 + (a2 >> 2));
  v69 = (_OWORD *)((char *)&unk_1B692B710 + ((64 - a4) >> 2));
  if (a4 + a2 < *(_DWORD *)(v8 + 276))
    v69 = (_OWORD *)((char *)v69 + 1);
  v62 = (const __int16 *)(*(_QWORD *)(a1 + 1384) + 14);
  v70 = (int8x16_t)vld1q_dup_s16(v62);
  v71 = (char *)&unk_1B692B710 + ((64 - a5) >> 2);
  v72 = a5 + a3;
  v73 = 1;
  v74 = 182;
  v75.i64[0] = 0x2323232323232323;
  v75.i64[1] = 0x2323232323232323;
  v76.i64[0] = 0x101010101010101;
  v76.i64[1] = 0x101010101010101;
  v77.i64[0] = 0x1E1E1E1E1E1E1E1ELL;
  v77.i64[1] = 0x1E1E1E1E1E1E1E1ELL;
  v78.i64[0] = 0xE2E2E2E2E2E2E2E2;
  v78.i64[1] = 0xE2E2E2E2E2E2E2E2;
  result = &unk_1B6917000;
  do
  {
    v80 = v73;
    v81 = a5 >> 3;
    v82.i16[0] = 0;
    v82.i16[2] = 0;
    v82.i64[1] = 0;
    v83 = 0uLL;
    if (a5 >= 8)
    {
      v84 = 0;
      v85 = *(int8x16_t *)v69;
      v86 = v39;
      v87 = v13;
      v88 = v74;
      v89 = v14;
      do
      {
        v90 = *v86++;
        v91 = vqtbl3q_s8(*(int8x16x3_t *)v56.i8, vminq_s8(vaddq_s8(v90, v65), v75));
        *(_QWORD *)(a6 + v87 + 673) = v91.i64[0];
        *(_QWORD *)(a6 + v87 + 683) = v91.i64[1];
        v92 = vandq_s8(*v68, v85);
        v93 = vandq_s8(*(int8x16_t *)((char *)v68 + v63), v85);
        v83 = vextq_s8(v83, v56, 4uLL);
        v83.i16[6] = v68[-1].i16[7];
        v83.i16[7] = *(__int16 *)((char *)&v68->i16[-1] + v63);
        v94 = vaddq_s8(v90, v66);
        v95 = (int8x16_t *)(a6 + v88);
        *(int8x16_t *)((char *)v95 - 20) = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v59.i8, vminq_s8(vaddq_s8(vaddq_s8(v92, v92), vzip1q_s8(v94, v94)), v75)), vceqzq_s8(v92));
        *v95 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v59.i8, vminq_s8(vaddq_s8(vaddq_s8(v93, v93), vzip2q_s8(v94, v94)), v75)), vceqzq_s8(v93));
        v96 = vaddq_s8(vzip1q_s8(v90, v90), v70);
        v114.val[1] = (int8x16_t)xmmword_1B6917A20;
        v114.val[0] = (int8x16_t)xmmword_1B6917A30;
        v97 = (int16x8_t)vqtbl3q_s8(*(int8x16x3_t *)v59.i8, vminq_s8(vaddq_s8(vbslq_s8(vcgtq_s8(v77, v96), v96, vqtbl2q_s8(v114, vaddq_s8(v96, v78))), v67), v75));
        v98 = (int8x16_t)vcgtq_u8((uint8x16_t)v92, v76);
        v84 += 2;
        v68 = (int8x16_t *)((char *)v68 + 2 * v63);
        *(int8x16_t *)(a6 + v89 + 458) = vandq_s8((int8x16_t)vzip1q_s16(v97, v97), (int8x16_t)vmovl_s8(*(int8x8_t *)v98.i8));
        *(int8x16_t *)(a6 + v89 + 474) = vandq_s8((int8x16_t)vzip2q_s16(v97, v97), (int8x16_t)vmovl_high_s8(v98));
        v89 += 34;
        v88 += 40;
        v87 += 20;
      }
      while (v84 < v81);
    }
    v99 = 0uLL;
    if (a2)
    {
      *(int8x8_t *)v82.i8 = *(&v111 + 9 * v80);
      v100 = vqtbl3_s8(*(int8x16x3_t *)v56.i8, vmin_s8(vadd_s8(*(int8x8_t *)v82.i8, *(int8x8_t *)v65.i8), (int8x8_t)0x2323232323232323));
      v101 = (_BYTE *)(a6 + 80 * v80);
      v101[592] = v100.i8[0];
      v101[602] = v100.i8[1];
      v101[612] = v100.i8[2];
      v101[622] = v100.i8[3];
      v101[632] = v100.i8[4];
      v101[642] = v100.i8[5];
      v101[652] = v100.i8[6];
      v101[662] = v100.i8[7];
      if (a5 <= 63)
      {
        v102 = v81 - 2;
        do
        {
          v83 = vextq_s8(v83, v83, 4uLL);
          v102 += 2;
        }
        while (v102 < 6);
      }
      v103 = vzip1q_s8(v82, v82);
      v104 = *(_OWORD *)&v83 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00);
      v99 = vbicq_s8(vqtbl3q_s8(*(int8x16x3_t *)v59.i8, vminq_s8(vaddq_s8(vaddq_s8(v103, v66), vaddq_s8((int8x16_t)v104, (int8x16_t)v104)), v75)), vceqzq_s8((int8x16_t)v104));
      v105 = vaddq_s8(v103, v70);
      v113.val[1] = (int8x16_t)xmmword_1B6917A20;
      v113.val[0] = (int8x16_t)xmmword_1B6917A30;
      v106 = (int8x16_t)vcgtq_u8((uint8x16_t)v104, v76);
      v82 = vandq_s8(vqtbl3q_s8(*(int8x16x3_t *)v59.i8, vminq_s8(vaddq_s8(vbslq_s8(vcgtq_s8(v77, v105), v105, vqtbl2q_s8(v113, vaddq_s8(v105, v78))), v67), v75)), vtrn2q_s8(v106, v106));
    }
    v107 = (_WORD *)(a6 + 160 * v80);
    *v107 = v99.i16[0];
    v107[10] = v99.i16[1];
    v107[20] = v99.i16[2];
    v107[30] = v99.i16[3];
    v107[40] = v99.i16[4];
    v107[50] = v99.i16[5];
    v107[60] = v99.i16[6];
    v107[70] = v99.i16[7];
    v108 = (_WORD *)(a6 + 136 * v80);
    v108[177] = v82.i16[2];
    v108[194] = v82.i16[4];
    v108[160] = v82.i16[0];
    v108[211] = v82.i16[6];
    v63 = *(_QWORD *)(v8 + 616);
    v68 = (int8x16_t *)(*(_QWORD *)(v8 + 640) + ((uint64_t)a3 >> 2) + v63 * v15);
    if (v72 >= *(_DWORD *)(v8 + 280))
      v69 = v71;
    else
      v69 = v71 + 1;
    v73 = v80 - 1;
    v14 -= 136;
    v74 -= 160;
    v13 -= 80;
    v39 = (int8x16_t *)((char *)v39 - 72);
    a5 = a4;
    a2 = a3;
  }
  while (v80);
  return result;
}

uint64_t sub_1B687E070(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int8x8_t v16;
  int8x8_t v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  int8x8_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  int32x2_t v37;
  int32x2_t v38;
  int32x2_t v39;
  uint8x8_t v40;
  int8x8_t v41;
  uint8x8_t v42;
  uint8x8_t v43;
  int8x8_t v44;
  uint8x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int8x16_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int16x8_t v71;
  uint8x8_t v72;
  uint8x8_t v73;
  int8x8_t v74;
  uint8x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int8x8_t v79;
  int8x8_t v80;
  int8x8_t v81;
  int8x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int8x16_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int8x8_t v92;
  int8x8_t v93;
  int8x8_t v94;
  int8x8_t v95;
  int8x8_t v96;
  int16x4_t v97;
  int16x4_t v98;
  int16x4_t v99;
  int16x4_t v100;
  int16x4_t v101;
  int16x4_t v102;
  int32x2_t v103;
  int32x2_t v104;
  int32x2_t v105;
  int32x2_t v106;
  int32x2_t v107;
  int32x2_t v108;
  int32x2_t v109;
  int16x8_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int8x8_t v118;
  int16x4_t v119;
  int16x4_t v120;
  int16x4_t v121;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = 2 * a2;
    v7 = 3 * a2;
    v8 = 4 * a2;
    v9 = 7 * a2;
    v10 = 6 * a2;
    v11.i64[0] = 0x2000200020002;
    v11.i64[1] = 0x2000200020002;
    v12.i64[0] = 0xA000A000A000ALL;
    v12.i64[1] = 0xA000A000A000ALL;
    v13 = 5 * a2;
    do
    {
      v15 = *a4++;
      v14 = v15;
      if (v15)
      {
        v16 = *(int8x8_t *)(result - 4);
        v17 = *(int8x8_t *)(result + a2 - 4);
        v18 = *(int8x8_t *)(result + v6 - 4);
        v19 = *(int8x8_t *)(result + v7 - 4);
        v20 = *(int8x8_t *)(result + v8 - 4);
        v21 = *(int8x8_t *)(result + v13 - 4);
        v22 = *(int8x8_t *)(result + v10 - 4);
        v23 = *(int8x8_t *)(result + v9 - 4);
        v24 = (int16x4_t)vtrn1_s8(v16, v17);
        v25 = (int16x4_t)vtrn2_s8(v16, v17);
        v26 = (int16x4_t)vtrn1_s8(v18, v19);
        v27 = (int16x4_t)vtrn2_s8(v18, v19);
        v28 = (int16x4_t)vtrn1_s8(v20, v21);
        v29 = (int16x4_t)vtrn2_s8(v20, v21);
        v30 = (int16x4_t)vtrn1_s8(v22, v23);
        v31 = (int16x4_t)vtrn2_s8(v22, v23);
        v32 = (int32x2_t)vtrn1_s16(v24, v26);
        v33 = (int32x2_t)vtrn2_s16(v24, v26);
        v34 = (int32x2_t)vtrn1_s16(v25, v27);
        v35 = (int32x2_t)vtrn2_s16(v25, v27);
        v36 = (int32x2_t)vtrn1_s16(v28, v30);
        v37 = (int32x2_t)vtrn2_s16(v28, v30);
        v38 = (int32x2_t)vtrn1_s16(v29, v31);
        v39 = (int32x2_t)vtrn2_s16(v29, v31);
        v40 = (uint8x8_t)vzip2_s32(v32, v36);
        v41 = (int8x8_t)vzip1_s32(v34, v38);
        v42 = (uint8x8_t)vzip2_s32(v34, v38);
        v43 = (uint8x8_t)vzip1_s32(v33, v37);
        v44 = (int8x8_t)vzip2_s32(v33, v37);
        v45 = (uint8x8_t)vzip1_s32(v35, v39);
        v46 = vdupq_n_s16(*a3);
        v47 = (int16x8_t)vaddl_u8((uint8x8_t)v41, v45);
        v48 = (int16x8_t)vshll_n_u8(v43, 1uLL);
        v49 = vabdq_s16(v47, v48);
        v50 = (int16x8_t)vaddl_u8((uint8x8_t)v44, v40);
        v51 = (int16x8_t)vshll_n_u8(v42, 1uLL);
        v52 = vabdq_s16(v50, v51);
        v53 = (int8x16_t)vabaq_s16(vrev64q_s16(v49), v47, v48);
        v54 = (int8x16_t)vabaq_s16(vrev64q_s16(v52), v50, v51);
        v55 = (int16x8_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1B6917A50);
        v56 = (int16x8_t)vqtbl1q_s8(v54, (int8x16_t)xmmword_1B6917A50);
        v57 = (int8x16_t)vcgtq_s16(v46, vaddq_s16(v56, v55));
        if (vaddlvq_u16((uint16x8_t)v57))
        {
          v58 = (int8x8_t)vzip1_s32(v32, v36);
          v59 = (int8x8_t)vzip2_s32(v35, v39);
          v60 = (int16x8_t)vmovl_u8(v43);
          v61 = (int16x8_t)vmovl_u8(v45);
          v62 = (int16x8_t)vmovl_u8(v42);
          v63 = (int16x8_t)vmovl_u8(v40);
          v64 = (int16x8_t)vandq_s8(v57, vqtbl1q_s8((int8x16_t)vdupq_n_s16(v14), (int8x16_t)xmmword_1B6917A40));
          v65 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v64, vshlq_n_s16(v64, 2uLL)), (int16x8_t)vabdl_u8(v45, v40)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v46, 3uLL), vaddq_s16(v52, v49)), (int8x16_t)vcgtq_u16(vshrq_n_u16((uint16x8_t)v46, 3uLL), vabal_u8(vabdl_u8((uint8x8_t)v59, v40), (uint8x8_t)v58, v45))));
          v66 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v65), (int8x16_t)v65), (int8x16_t)xmmword_1B6917A50);
          v67 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v46, (uint16x8_t)v46, 1uLL), 3uLL);
          v68 = (int8x16_t)vcgtq_s16(v67, v55);
          v69 = (int8x16_t)vcgtq_s16(v67, v56);
          v70 = (int16x8_t)vbicq_s8((int8x16_t)v64, (int8x16_t)v66);
          v71 = (int16x8_t)vsubl_u8(v42, v43);
          v72 = vrhadd_u8((uint8x8_t)v41, v45);
          v73 = vrhadd_u8((uint8x8_t)v44, v40);
          if (vaddlvq_u16((uint16x8_t)v66))
          {
            v74 = vmovn_s16(v64);
            v75 = (uint8x8_t)vadd_s8(v74, v74);
            v76 = (int16x8_t)vaddl_u8((uint8x8_t)v41, v43);
            v77 = (int16x8_t)vaddl_u8(v45, v40);
            v78 = (int16x8_t)vaddl_u8(v42, (uint8x8_t)v44);
            v79 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v77, v60), vhadd_u8((uint8x8_t)v41, v42)), 2uLL), vqadd_u8(v45, v75)), vqsub_u8(v45, v75));
            v80 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v77, v62), vhadd_u8((uint8x8_t)v44, v43)), 2uLL), vqadd_u8(v40, v75)), vqsub_u8(v40, v75));
            v81 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v76, v77), 2uLL), vqadd_u8(v43, v75)), vqsub_u8(v43, v75));
            v82 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v78, v77), 2uLL), vqadd_u8(v42, v75)), vqsub_u8(v42, v75));
            v83 = (int16x8_t)vsubl_u8(v40, v45);
            v84.i64[0] = 0x9000900090009;
            v84.i64[1] = 0x9000900090009;
            v85 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v83, v84), v71, v11), 4uLL);
            v86 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v12), vabsq_s16(v85));
            v87 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v85, v86), v70), vnegq_s16(v70));
            v88 = vshrq_n_s16(v70, 1uLL);
            v89 = (int16x8_t)vsubl_u8(v72, v43);
            v90 = vnegq_s16(v88);
            v91 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v73, v42), v87), v88), v90), vandq_s8(v69, v86)), v62);
            v92 = vqmovn_s16(v66);
            v93 = vbsl_s8(v92, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v58, (uint8x8_t)v41), (int16x8_t)vhaddq_u16((uint16x8_t)v76, (uint16x8_t)v77)), 2uLL), vqadd_u8((uint8x8_t)v41, v75)), vqsub_u8((uint8x8_t)v41, v75)), v41);
            v94 = vbsl_s8(v92, v81, vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(v89, v87), v88), v90), vandq_s8(v68, v86)), v60)));
            *(int8x8_t *)v89.i8 = vbsl_s8(v92, v79, vqmovun_s16(vaddq_s16(v87, v61)));
            v95 = vbsl_s8(v92, v80, vqmovun_s16(vsubq_s16(v63, v87)));
            v96 = vbsl_s8(v92, v82, vqmovun_s16(v91));
            *(int8x8_t *)v91.i8 = vbsl_s8(v92, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v44, (uint8x8_t)v59), (int16x8_t)vhaddq_u16((uint16x8_t)v78, (uint16x8_t)v77)), 2uLL), vqadd_u8((uint8x8_t)v44, v75)), vqsub_u8((uint8x8_t)v44, v75)), v44);
            v97 = (int16x4_t)vtrn1_s8(v58, v93);
            v98 = (int16x4_t)vtrn2_s8(v58, v93);
            v99 = (int16x4_t)vtrn1_s8(v94, *(int8x8_t *)v89.i8);
            v100 = (int16x4_t)vtrn2_s8(v94, *(int8x8_t *)v89.i8);
            *(int8x8_t *)v89.i8 = vtrn1_s8(v95, v96);
            v101 = (int16x4_t)vtrn2_s8(v95, v96);
            v102 = (int16x4_t)vtrn1_s8(*(int8x8_t *)v91.i8, v59);
            *(int8x8_t *)v91.i8 = vtrn2_s8(*(int8x8_t *)v91.i8, v59);
            v103 = (int32x2_t)vtrn1_s16(v97, v99);
            v104 = (int32x2_t)vtrn2_s16(v97, v99);
            v105 = (int32x2_t)vtrn1_s16(v98, v100);
            v106 = (int32x2_t)vtrn2_s16(v98, v100);
            v107 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v89.i8, v102);
            *(int16x4_t *)v89.i8 = vtrn2_s16(*(int16x4_t *)v89.i8, v102);
            v108 = (int32x2_t)vtrn1_s16(v101, *(int16x4_t *)v91.i8);
            *(int32x2_t *)(result - 4) = vzip1_s32(v103, v107);
            *(int32x2_t *)(result + a2 - 4) = vzip1_s32(v105, v108);
            v109 = (int32x2_t)vtrn2_s16(v101, *(int16x4_t *)v91.i8);
            *(int32x2_t *)(result + v6 - 4) = vzip1_s32(v104, *(int32x2_t *)v89.i8);
            *(int32x2_t *)(result + v7 - 4) = vzip1_s32(v106, v109);
            *(int32x2_t *)(result + v8 - 4) = vzip2_s32(v103, v107);
            *(int32x2_t *)(result + v13 - 4) = vzip2_s32(v105, v108);
            *(int32x2_t *)(result + v10 - 4) = vzip2_s32(v104, *(int32x2_t *)v89.i8);
            *(int32x2_t *)(result + v9 - 4) = vzip2_s32(v106, v109);
          }
          else
          {
            v110 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v40, (uint8x8_t)0x909090909090909), v45, (uint8x8_t)0x909090909090909), v71, v11), 4uLL);
            v111 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v12), vabsq_s16(v110));
            v112 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v110, v111), v70), vnegq_s16(v70));
            v113 = vaddq_s16(v112, v61);
            v114 = vsubq_s16(v63, v112);
            v115 = vshrq_n_s16(v70, 1uLL);
            v116 = vnegq_s16(v115);
            v117 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v73, v42), v112), v115), v116), vandq_s8(v69, v111)), v62);
            *(int8x8_t *)v112.i8 = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v72, v43), v112), v115), v116), vandq_s8(v68, v111)), v60));
            *(int8x8_t *)v113.i8 = vqmovun_s16(v113);
            v118 = vqmovun_s16(v114);
            *(int8x8_t *)v117.i8 = vqmovun_s16(v117);
            v119 = (int16x4_t)vtrn1_s8(*(int8x8_t *)v112.i8, *(int8x8_t *)v113.i8);
            *(int8x8_t *)v112.i8 = vtrn2_s8(*(int8x8_t *)v112.i8, *(int8x8_t *)v113.i8);
            *(int8x8_t *)v113.i8 = vtrn1_s8(v118, *(int8x8_t *)v117.i8);
            *(int8x8_t *)v117.i8 = vtrn2_s8(v118, *(int8x8_t *)v117.i8);
            v120 = vtrn1_s16(v119, *(int16x4_t *)v113.i8);
            *(int16x4_t *)v113.i8 = vtrn2_s16(v119, *(int16x4_t *)v113.i8);
            v121 = vtrn1_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v117.i8);
            *(int16x4_t *)v117.i8 = vtrn2_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v117.i8);
            *(_DWORD *)(result - 2) = v120.i32[0];
            *(_DWORD *)(result + a2 - 2) = v121.i32[0];
            *(_DWORD *)(result + v6 - 2) = v113.i32[0];
            *(_DWORD *)(result + v7 - 2) = v117.i32[0];
            *(_DWORD *)(result + v8 - 2) = v120.i32[1];
            *(_DWORD *)(result + v13 - 2) = v121.i32[1];
            *(_DWORD *)(result + v10 - 2) = v113.i32[1];
            *(_DWORD *)(result + v9 - 2) = v117.i32[1];
          }
        }
      }
      result += 8 * a2;
      ++a3;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1B687E550(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int16x8_t v18;
  uint64_t v19;
  int8x8_t v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  int8x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t v35;
  uint8x8_t v36;
  uint8x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int16x8_t v49;
  uint8x8_t v50;
  uint8x8_t v51;
  int8x8_t v52;
  uint8x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int8x8_t v61;
  int8x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int8x8_t v72;
  int8x8_t v73;
  int8x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;

  if (a5 <= 7)
  {
    v7 = -4 * a2;
    v8 = 3 * a2;
    v9 = -3 * a2;
    v10 = 2 * a2;
    v11 = -a2;
    v12 = -2 * a2;
  }
  else
  {
    v5 = 0;
    v6 = a5 >> 3;
    v7 = -4 * a2;
    v8 = 3 * a2;
    v9 = -3 * a2;
    v10 = 2 * a2;
    v11 = -a2;
    v12 = -2 * a2;
    v13 = result + a2;
    v14 = result + 2 * a2;
    v15 = result - a2;
    v16 = result - 3 * a2;
    v17 = result - 2 * a2;
    v18.i64[0] = 0xA000A000A000ALL;
    v18.i64[1] = 0xA000A000A000ALL;
    v19 = result;
    do
    {
      if (*(_WORD *)(a4 + 2 * v5))
      {
        v20 = *(int8x8_t *)(v16 + 8 * v5);
        v21 = *(uint8x8_t *)(v17 + 8 * v5);
        v22 = *(uint8x8_t *)(v15 + 8 * v5);
        v23 = *(uint8x8_t *)(result + 8 * v5);
        v24 = *(uint8x8_t *)(v13 + 8 * v5);
        v25 = *(int8x8_t *)(v14 + 8 * v5);
        v26 = vdupq_n_s16(*(unsigned __int8 *)(a3 + v5));
        v27 = (int16x8_t)vaddl_u8(v22, (uint8x8_t)v20);
        v28 = (int16x8_t)vshll_n_u8(v21, 1uLL);
        v29 = vabdq_s16(v27, v28);
        v30 = (int16x8_t)vaddl_u8((uint8x8_t)v25, v23);
        v31 = (int16x8_t)vshll_n_u8(v24, 1uLL);
        v32 = vabdq_s16(v30, v31);
        v33 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v29), v27, v28), (int8x16_t)xmmword_1B6917A50);
        v34 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v32), v30, v31), (int8x16_t)xmmword_1B6917A50);
        v35 = (int8x16_t)vcgtq_s16(v26, vaddq_s16(v34, v33));
        if (vaddlvq_u16((uint16x8_t)v35))
        {
          v36 = *(uint8x8_t *)(result - 4 * a2 + 8 * v5);
          v37 = *(uint8x8_t *)(result + 3 * a2 + 8 * v5);
          v38 = (int16x8_t)vmovl_u8(v21);
          v39 = (int16x8_t)vmovl_u8(v22);
          v40 = (int16x8_t)vmovl_u8(v24);
          v41 = (int16x8_t)vmovl_u8(v23);
          v42 = (int16x8_t)vandq_s8(v35, vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v5)), (int8x16_t)xmmword_1B6917A40));
          v43 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v42, vshlq_n_s16(v42, 2uLL)), (int16x8_t)vabdl_u8(v22, v23)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v26, 3uLL), vaddq_s16(v32, v29)), (int8x16_t)vcgtq_u16(vshrq_n_u16((uint16x8_t)v26, 3uLL), vabal_u8(vabdl_u8(v37, v23), v36, v22))));
          v44 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v43), (int8x16_t)v43), (int8x16_t)xmmword_1B6917A50);
          v45 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v26, (uint16x8_t)v26, 1uLL), 3uLL);
          v46 = (int8x16_t)vcgtq_s16(v45, v33);
          v47 = (int8x16_t)vcgtq_s16(v45, v34);
          v48 = (int16x8_t)vbicq_s8((int8x16_t)v42, (int8x16_t)v44);
          v49 = (int16x8_t)vsubl_u8(v24, v21);
          v50 = vrhadd_u8((uint8x8_t)v20, v22);
          v51 = vrhadd_u8((uint8x8_t)v25, v23);
          if (vaddlvq_u16((uint16x8_t)v44))
          {
            v52 = vmovn_s16(v42);
            v53 = (uint8x8_t)vadd_s8(v52, v52);
            v54 = (int16x8_t)vaddl_u8((uint8x8_t)v20, v36);
            v55 = (int16x8_t)vaddl_u8(v21, (uint8x8_t)v20);
            v56 = (int16x8_t)vaddl_u8(v23, v22);
            v57 = (int16x8_t)vaddl_u8((uint8x8_t)v25, v24);
            v58 = (int16x8_t)vaddl_u8(v37, (uint8x8_t)v25);
            v59 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v56, v38), vhadd_u8((uint8x8_t)v20, v24)), 2uLL), vqadd_u8(v22, v53)), vqsub_u8(v22, v53));
            v60 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v56, v40), vhadd_u8((uint8x8_t)v25, v21)), 2uLL), vqadd_u8(v23, v53)), vqsub_u8(v23, v53));
            v61 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v56, v55), 2uLL), vqadd_u8(v21, v53)), vqsub_u8(v21, v53));
            v62 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v57, v56), 2uLL), vqadd_u8(v24, v53)), vqsub_u8(v24, v53));
            v63 = (int16x8_t)vsubl_u8(v23, v22);
            v64.i64[0] = 0x9000900090009;
            v64.i64[1] = 0x9000900090009;
            v65 = vmulq_s16(v63, v64);
            v64.i64[0] = 0x2000200020002;
            v64.i64[1] = 0x2000200020002;
            v66 = vrshrq_n_s16(vmlaq_s16(v65, v49, v64), 4uLL);
            v67 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v18), vabsq_s16(v66));
            v68 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v66, v67), v48), vnegq_s16(v48));
            v69 = vshrq_n_s16(v48, 1uLL);
            v70 = vnegq_s16(v69);
            v71 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v51, v24), v68), v69), v70), vandq_s8(v47, v67)), v40);
            v72 = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v50, v21), v68), v69), v70), vandq_s8(v46, v67)), v38));
            v73 = vqmovun_s16(vaddq_s16(v68, v39));
            v74 = vqmovun_s16(vsubq_s16(v41, v68));
            *(int8x8_t *)v68.i8 = vqmovn_s16(v44);
            *(int8x8_t *)(v16 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v54, (int16x8_t)vhaddq_u16((uint16x8_t)v55, (uint16x8_t)v56)), 2uLL), vqadd_u8((uint8x8_t)v20, v53)), vqsub_u8((uint8x8_t)v20, v53)), v20);
            *(int8x8_t *)(v17 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v61, v72);
            *(int8x8_t *)(v15 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v59, v73);
            *(int8x8_t *)(result + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v60, v74);
            *(int8x8_t *)(v13 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, v62, vqmovun_s16(v71));
            *(int8x8_t *)(v14 + 8 * v5) = vbsl_s8(*(int8x8_t *)v68.i8, (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v58, (int16x8_t)vhaddq_u16((uint16x8_t)v57, (uint16x8_t)v56)), 2uLL), vqadd_u8((uint8x8_t)v25, v53)), vqsub_u8((uint8x8_t)v25, v53)), v25);
          }
          else
          {
            v75.i64[0] = 0x2000200020002;
            v75.i64[1] = 0x2000200020002;
            v76 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v23, (uint8x8_t)0x909090909090909), v22, (uint8x8_t)0x909090909090909), v49, v75), 4uLL);
            v77 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v18), vabsq_s16(v76));
            v78 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v76, v77), v48), vnegq_s16(v48));
            v79 = vaddq_s16(v78, v39);
            v80 = vsubq_s16(v41, v78);
            v81 = vshrq_n_s16(v48, 1uLL);
            v82 = vnegq_s16(v81);
            *(int8x8_t *)(v17 + 8 * v5) = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(v50, v21), v78), v81), v82), vandq_s8(v46, v77)), v38));
            *(int8x8_t *)(v15 + 8 * v5) = vqmovun_s16(v79);
            *(int8x8_t *)(result + 8 * v5) = vqmovun_s16(v80);
            *(int8x8_t *)(v13 + 8 * v5) = vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(v51, v24), v78), v81), v82), vandq_s8(v47, v77)), v40));
          }
        }
      }
      ++v5;
      v19 += 8;
    }
    while (v6 != v5);
    result = v19;
  }
  _X9 = result + 64 + v7;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v9;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v12;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v11;
  __asm
  {
    PRFM            #0x10, [X9]
    PRFM            #0x10, [X0,#0x40]
  }
  _X9 = result + 64 + a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result + 64 + v10;
  __asm { PRFM            #0x10, [X9] }
  _X8 = result + 64 + v8;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1B687E980(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  uint8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 3 * a2;
    v7 = 4 * a2;
    v8 = 5 * a2;
    v9 = 6 * a2;
    v10 = 7 * a2;
    v11.i64[0] = 0x101010101010101;
    v11.i64[1] = 0x101010101010101;
    do
    {
      if (*(_QWORD *)(a3 + v4))
      {
        v12.i64[0] = *(_QWORD *)(result - 4);
        v13.i64[0] = *(_QWORD *)(result + a2 - 4);
        v14.i64[0] = *(_QWORD *)(result + v5 - 4);
        v15.i64[0] = *(_QWORD *)(result + v6 - 4);
        v12.i64[1] = *(_QWORD *)(result + v7 - 4);
        v13.i64[1] = *(_QWORD *)(result + v8 - 4);
        v14.i64[1] = *(_QWORD *)(result + v9 - 4);
        v15.i64[1] = *(_QWORD *)(result + v10 - 4);
        v16 = (int32x4_t)vtrn1q_s16(v12, v13);
        v17 = (int32x4_t)vtrn2q_s16(v12, v13);
        v18 = (int32x4_t)vtrn1q_s16(v14, v15);
        v19 = vtrn2q_s16(v14, v15);
        v20 = (uint8x16_t)vtrn1q_s32(v16, v18);
        v21 = (int8x16_t)vtrn2q_s32(v16, v18);
        v22 = (int8x16_t)vtrn1q_s32(v17, (int32x4_t)v19);
        v23 = (uint8x16_t)vtrn2q_s32(v17, (int32x4_t)v19);
        v19.i64[0] = *(_QWORD *)(a3 + v4);
        v24 = (int8x16_t)vzip1q_s16(v19, v19);
        v25 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8((uint8x16_t)v21, (uint8x16_t)v22), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(v20, v23), 1uLL), vandq_s8(veorq_s8(v21, v22), v11))), v24), vnegq_s8(v24));
        v26 = (int16x8_t)vsqaddq_u8((uint8x16_t)v22, v25);
        v27 = (int16x8_t)vsqaddq_u8((uint8x16_t)v21, vnegq_s8(v25));
        v28 = vzip1q_s16(v26, v27);
        *(_DWORD *)(result - 2) = v28.i32[0];
        *(_DWORD *)(result + a2 - 2) = v28.i32[1];
        *(_DWORD *)(result + v5 - 2) = v28.i32[2];
        *(_DWORD *)(result + v6 - 2) = v28.i32[3];
        v29 = vzip2q_s16(v26, v27);
        *(_DWORD *)(result + v7 - 2) = v29.i32[0];
        *(_DWORD *)(result + v8 - 2) = v29.i32[1];
        *(_DWORD *)(result + v9 - 2) = v29.i32[2];
        *(_DWORD *)(result + v10 - 2) = v29.i32[3];
      }
      v4 += 8;
      result += 8 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

uint8x16_t *sub_1B687EABC(uint8x16_t *result, uint64_t a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, int16x8_t a10)
{
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint8x16_t v14;

  if (a4 >= 1)
  {
    v10 = 0;
    v11.i64[0] = 0x101010101010101;
    v11.i64[1] = 0x101010101010101;
    do
    {
      if (*(_QWORD *)(a3 + v10))
      {
        v12 = *(int8x16_t *)((char *)result - a2);
        a10.i64[0] = *(_QWORD *)(a3 + v10);
        a10 = vzip1q_s16(a10, a10);
        v13 = vmaxq_s8(vminq_s8(vqaddq_s8((int8x16_t)vhsubq_u8(*result, (uint8x16_t)v12), vrhaddq_s8(vshrq_n_s8((int8x16_t)vhsubq_u8(*(uint8x16_t *)((char *)result - 2 * a2), *(uint8x16_t *)((char *)result + a2)), 1uLL), vandq_s8(veorq_s8(*(int8x16_t *)result, v12), v11))), (int8x16_t)a10), vnegq_s8((int8x16_t)a10));
        v14 = vsqaddq_u8(*result, vnegq_s8(v13));
        *(uint8x16_t *)((char *)result - a2) = vsqaddq_u8((uint8x16_t)v12, v13);
        *result = v14;
      }
      v10 += 8;
      ++result;
    }
    while (v10 < a4);
  }
  return result;
}

uint64_t sub_1B687EB48(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  unsigned int v5;
  int16x8_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int16x8_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  int8x8_t v30;
  uint8x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int8x16_t v40;
  int16x8_t v41;
  int16x8_t v42;
  uint16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x8_t v51;
  uint8x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int8x8_t v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int8x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int8x16_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  uint8x8_t v94;
  uint8x8_t v95;
  int8x8_t v96;
  uint8x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x8_t v116;
  uint8x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int8x8_t v121;
  int8x8_t v122;
  int8x8_t v123;
  int8x8_t v124;
  int8x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int8x16_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  uint64_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int8x16_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int16x8_t v162;
  int8x16_t v163;
  int8x8_t v164;
  int8x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int8x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int8x16_t v171;
  uint8x8_t v172;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = vdupq_n_s16(a3);
    v170 = vshrq_n_s16(v6, 3uLL);
    v171 = (int8x16_t)vdupq_n_s16(a4);
    v169 = vshrq_n_s16(vsraq_n_s16(v6, v6, 1uLL), 3uLL);
    v7 = (int8x16_t *)(result - 8);
    v8 = (int8x16_t)xmmword_1B6917A50;
    v166 = v6;
    do
    {
      v9 = *(int8x16_t *)((char *)v7 + a2);
      v10 = *(int8x16_t *)((char *)v7 + 2 * a2);
      v11 = *(int8x16_t *)((char *)v7 + 3 * a2);
      v12 = *(int8x16_t *)((char *)v7 + 4 * a2);
      v13 = *(int8x16_t *)((char *)v7 + 5 * a2);
      v14 = *(int8x16_t *)((char *)v7 + 6 * a2);
      v15 = *(int8x16_t *)((char *)v7 + 7 * a2);
      v16 = (int16x8_t)vtrn1q_s8(*v7, v9);
      v17 = (int16x8_t)vtrn1q_s8(v10, v11);
      v18 = (int16x8_t)vtrn1q_s8(v12, v13);
      v19 = (int16x8_t)vtrn1q_s8(v14, v15);
      v20 = (int32x4_t)vtrn1q_s16(v16, v17);
      v21 = (int32x4_t)vtrn2q_s16(v16, v17);
      v22 = (int32x4_t)vtrn1q_s16(v18, v19);
      v23 = (int32x4_t)vtrn2q_s16(v18, v19);
      v24 = (int8x16_t)vtrn1q_s32(v20, v22);
      v25 = (int16x8_t)vtrn2q_s32(v20, v22);
      v26 = (int8x16_t)vtrn1q_s32(v21, v23);
      v27 = (int8x16_t)vtrn2q_s32(v21, v23);
      v28 = (uint8x8_t)vextq_s8(v24, v24, 8uLL).u64[0];
      v29 = (uint8x8_t)vextq_s8(v26, v26, 8uLL).u64[0];
      v30 = (int8x8_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
      v31 = (uint8x8_t)vextq_s8(v27, v27, 8uLL).u64[0];
      v32 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8);
      v33 = (int16x8_t)vshll_n_u8(*(uint8x8_t *)v25.i8, 1uLL);
      v34 = vabdq_s16(v32, v33);
      v35 = (int16x8_t)vaddl_high_u8((uint8x16_t)v25, (uint8x16_t)v24);
      v36 = (int16x8_t)vshll_high_n_u8((uint8x16_t)v26, 1uLL);
      v37 = vabdq_s16(v35, v36);
      v38 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v34), v32, v33), v8);
      v39 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v37), v35, v36), v8);
      v40 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v39, v38));
      v41 = vrshrq_n_s16(v6, 3uLL);
      v172 = v31;
      if (vaddlvq_u16((uint16x8_t)v40))
      {
        v42 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v25.i8);
        v43 = vmovl_u8(*(uint8x8_t *)v27.i8);
        v44 = (int16x8_t)vmovl_u8(v29);
        v45 = (int16x8_t)vmovl_u8(v28);
        v46 = (int16x8_t)vandq_s8(v171, v40);
        v47 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v46, vshlq_n_s16(v46, 2uLL)), (int16x8_t)vabdl_u8(*(uint8x8_t *)v27.i8, v28)), vandq_s8((int8x16_t)vcgtq_s16(v41, vaddq_s16(v37, v34)), (int8x16_t)vcgtq_s16(v170, (int16x8_t)vabal_u8(vabdl_u8(v31, v28), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v27.i8))));
        v48 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v47), (int8x16_t)v47), v8);
        v49 = (int8x16_t)vcgtq_s16(v169, v38);
        v50 = (int8x16_t)vcgtq_s16(v169, v39);
        if (vaddlvq_u16((uint16x8_t)v48))
        {
          v51 = vmovn_s16(v46);
          v52 = (uint8x8_t)vadd_s8(v51, v51);
          v162 = (int16x8_t)v43;
          v53 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v25.i8);
          v54 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v27.i8, v28);
          v55 = (int16x8_t)vaddl_high_u8((uint8x16_t)v26, (uint8x16_t)v25);
          v167 = v41;
          v164 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v54, v42), vhadd_u8(*(uint8x8_t *)v26.i8, v29)), 2uLL), vqadd_u8(*(uint8x8_t *)v27.i8, v52)), vqsub_u8(*(uint8x8_t *)v27.i8, v52));
          v56 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v54, v44), vhadd_u8((uint8x8_t)v30, *(uint8x8_t *)v25.i8)), 2uLL), vqadd_u8(v28, v52)), vqsub_u8(v28, v52));
          v57 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v53, v54), 2uLL), vqadd_u8(*(uint8x8_t *)v25.i8, v52)), vqsub_u8(*(uint8x8_t *)v25.i8, v52));
          v58 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v55, v54), 2uLL), vqadd_u8(v29, v52)), vqsub_u8(v29, v52));
          v59 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v26.i8), (int16x8_t)vhaddq_u16((uint16x8_t)v53, (uint16x8_t)v54)), 2uLL), vqadd_u8(*(uint8x8_t *)v26.i8, v52)), vqsub_u8(*(uint8x8_t *)v26.i8, v52));
          v60 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_high_u8((uint8x16_t)v25, (uint8x16_t)v27), (int16x8_t)vhaddq_u16((uint16x8_t)v55, (uint16x8_t)v54)), 2uLL), vqadd_u8((uint8x8_t)v30, v52)), vqsub_u8((uint8x8_t)v30, v52));
          v61 = (int16x8_t)vbicq_s8((int8x16_t)v46, (int8x16_t)v48);
          v62.i64[0] = 0x9000900090009;
          v62.i64[1] = 0x9000900090009;
          v63 = vmulq_s16((int16x8_t)vsubl_u8(v28, *(uint8x8_t *)v27.i8), v62);
          v62.i64[0] = 0x2000200020002;
          v62.i64[1] = 0x2000200020002;
          v64 = vrshrq_n_s16(vmlaq_s16(v63, (int16x8_t)vsubl_u8(v29, *(uint8x8_t *)v25.i8), v62), 4uLL);
          v62.i64[0] = 0xA000A000A000ALL;
          v62.i64[1] = 0xA000A000A000ALL;
          v65 = (int8x16_t)vcgtq_s16(vmulq_s16(v61, v62), vabsq_s16(v64));
          v66 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v64, v65), v61), vnegq_s16(v61));
          v67 = vshrq_n_s16(v61, 1uLL);
          v68 = vnegq_s16(v67);
          v25 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8), *(uint8x8_t *)v25.i8), v66), v67), v68), vandq_s8(v49, v65)), v42);
          v69 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v30, v28), v29), v66), v67), v68), vandq_s8(v50, v65)), v44);
          v8 = (int8x16_t)xmmword_1B6917A50;
          v70 = vqmovn_s16(v48);
          *(int8x8_t *)v26.i8 = vbsl_s8(v70, v59, *(int8x8_t *)v26.i8);
          *(int8x8_t *)v25.i8 = vbsl_s8(v70, v57, vqmovun_s16(v25));
          *(int8x8_t *)v27.i8 = vbsl_s8(v70, v164, vqmovun_s16(vaddq_s16(v66, v162)));
          v28 = (uint8x8_t)vbsl_s8(v70, v56, vqmovun_s16(vsubq_s16(v45, v66)));
          v6 = v166;
          v41 = v167;
          v29 = (uint8x8_t)vbsl_s8(v70, v58, vqmovun_s16(v69));
          v30 = vbsl_s8(v70, v60, v30);
        }
        else
        {
          v71 = (int16x8_t)vbicq_s8((int8x16_t)v46, (int8x16_t)v48);
          v72 = (int16x8_t)v43;
          v73.i64[0] = 0x2000200020002;
          v73.i64[1] = 0x2000200020002;
          v74 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v28, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v27.i8, (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8(v29, *(uint8x8_t *)v25.i8), v73), 4uLL);
          v73.i64[0] = 0xA000A000A000ALL;
          v73.i64[1] = 0xA000A000A000ALL;
          v75 = (int8x16_t)vcgtq_s16(vmulq_s16(v71, v73), vabsq_s16(v74));
          v76 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v74, v75), v71), vnegq_s16(v71));
          v77 = vaddq_s16(v76, v72);
          v78 = vshrq_n_s16(v71, 1uLL);
          v79 = vnegq_s16(v78);
          v80 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v27.i8), *(uint8x8_t *)v25.i8), v76), v78), v79), vandq_s8(v49, v75)), v42);
          v81 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v30, v28), v29), v76), v78), v79), vandq_s8(v50, v75)), v44);
          *(int8x8_t *)v25.i8 = vqmovun_s16(v80);
          *(int8x8_t *)v27.i8 = vqmovun_s16(v77);
          v28 = (uint8x8_t)vqmovun_s16(vsubq_s16(v45, v76));
          v29 = (uint8x8_t)vqmovun_s16(v81);
        }
      }
      v82 = (int16x8_t)vtrn2q_s8(*v7, v9);
      v83 = (int16x8_t)vtrn2q_s8(v10, v11);
      v84 = (int16x8_t)vtrn2q_s8(v12, v13);
      v85 = (int16x8_t)vtrn2q_s8(v14, v15);
      v86 = (int32x4_t)vtrn1q_s16(v82, v83);
      v87 = (int32x4_t)vtrn2q_s16(v82, v83);
      v88 = (int32x4_t)vtrn1q_s16(v84, v85);
      v89 = (int32x4_t)vtrn2q_s16(v84, v85);
      v90 = (int8x16_t)vtrn1q_s32(v86, v88);
      v91 = (int8x16_t)vtrn2q_s32(v86, v88);
      v92 = (int8x16_t)vtrn1q_s32(v87, v89);
      v93 = (int8x16_t)vtrn2q_s32(v87, v89);
      v94 = (uint8x8_t)vextq_s8(v90, v90, 8uLL).u64[0];
      v95 = (uint8x8_t)vextq_s8(v92, v92, 8uLL).u64[0];
      v96 = (int8x8_t)vextq_s8(v91, v91, 8uLL).u64[0];
      v97 = (uint8x8_t)vextq_s8(v93, v93, 8uLL).u64[0];
      v98 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8);
      v99 = (int16x8_t)vshll_n_u8(*(uint8x8_t *)v91.i8, 1uLL);
      v100 = vabdq_s16(v98, v99);
      v101 = (int16x8_t)vaddl_high_u8((uint8x16_t)v91, (uint8x16_t)v90);
      v102 = (int16x8_t)vshll_high_n_u8((uint8x16_t)v92, 1uLL);
      v103 = vabdq_s16(v101, v102);
      v104 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v100), v98, v99), v8);
      v105 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v103), v101, v102), v8);
      v106 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v105, v104));
      if (vaddlvq_u16((uint16x8_t)v106))
      {
        v168 = v30;
        v107 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v91.i8);
        v108 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v93.i8);
        v109 = (int16x8_t)vmovl_u8(v95);
        v110 = (int16x8_t)vmovl_u8(v94);
        v111 = (int16x8_t)vandq_s8(v171, v106);
        v112 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v111, vshlq_n_s16(v111, 2uLL)), (int16x8_t)vabdl_u8(*(uint8x8_t *)v93.i8, v94)), vandq_s8((int8x16_t)vcgtq_s16(v41, vaddq_s16(v103, v100)), (int8x16_t)vcgtq_s16(v170, (int16x8_t)vabal_u8(vabdl_u8(v97, v94), *(uint8x8_t *)v90.i8, *(uint8x8_t *)v93.i8))));
        v113 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v112), (int8x16_t)v112), v8);
        v114 = (int8x16_t)vcgtq_s16(v169, v104);
        v115 = (int8x16_t)vcgtq_s16(v169, v105);
        if (vaddlvq_u16((uint16x8_t)v113))
        {
          v116 = vmovn_s16(v111);
          v117 = (uint8x8_t)vadd_s8(v116, v116);
          v118 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v91.i8);
          v119 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v93.i8, v94);
          v120 = (int16x8_t)vaddl_high_u8((uint8x16_t)v92, (uint8x16_t)v91);
          v163 = v115;
          v165 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v119, v107), vhadd_u8(*(uint8x8_t *)v92.i8, v95)), 2uLL), vqadd_u8(*(uint8x8_t *)v93.i8, v117)), vqsub_u8(*(uint8x8_t *)v93.i8, v117));
          v121 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v119, v109), vhadd_u8((uint8x8_t)v96, *(uint8x8_t *)v91.i8)), 2uLL), vqadd_u8(v94, v117)), vqsub_u8(v94, v117));
          v122 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v118, v119), 2uLL), vqadd_u8(*(uint8x8_t *)v91.i8, v117)), vqsub_u8(*(uint8x8_t *)v91.i8, v117));
          v123 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v120, v119), 2uLL), vqadd_u8(v95, v117)), vqsub_u8(v95, v117));
          v124 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)v90.i8, *(uint8x8_t *)v92.i8), (int16x8_t)vhaddq_u16((uint16x8_t)v118, (uint16x8_t)v119)), 2uLL), vqadd_u8(*(uint8x8_t *)v92.i8, v117)), vqsub_u8(*(uint8x8_t *)v92.i8, v117));
          v125 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_high_u8((uint8x16_t)v91, (uint8x16_t)v93), (int16x8_t)vhaddq_u16((uint16x8_t)v120, (uint16x8_t)v119)), 2uLL), vqadd_u8((uint8x8_t)v96, v117)), vqsub_u8((uint8x8_t)v96, v117));
          v126 = (int16x8_t)vbicq_s8((int8x16_t)v111, (int8x16_t)v113);
          v127.i64[0] = 0x9000900090009;
          v127.i64[1] = 0x9000900090009;
          v128 = vmulq_s16((int16x8_t)vsubl_u8(v94, *(uint8x8_t *)v93.i8), v127);
          v127.i64[0] = 0x2000200020002;
          v127.i64[1] = 0x2000200020002;
          v129 = vrshrq_n_s16(vmlaq_s16(v128, (int16x8_t)vsubl_u8(v95, *(uint8x8_t *)v91.i8), v127), 4uLL);
          v127.i64[0] = 0xA000A000A000ALL;
          v127.i64[1] = 0xA000A000A000ALL;
          v130 = (int8x16_t)vcgtq_s16(vmulq_s16(v126, v127), vabsq_s16(v129));
          v131 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v129, v130), v126), vnegq_s16(v126));
          v132 = vshrq_n_s16(v126, 1uLL);
          v133 = vnegq_s16(v132);
          v134 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8), *(uint8x8_t *)v91.i8), v131), v132), v133), vandq_s8(v114, v130)), v107);
          v135 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v96, v94), v95), v131), v132), v133), vandq_s8(v163, v130)), v109);
          *(int8x8_t *)v127.i8 = vqmovn_s16(v113);
          *(int8x8_t *)v92.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v124, *(int8x8_t *)v92.i8);
          *(int8x8_t *)v91.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v122, vqmovun_s16(v134));
          v8 = (int8x16_t)xmmword_1B6917A50;
          v6 = v166;
          *(int8x8_t *)v93.i8 = vbsl_s8(*(int8x8_t *)v127.i8, v165, vqmovun_s16(vaddq_s16(v131, v108)));
          v94 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v127.i8, v121, vqmovun_s16(vsubq_s16(v110, v131)));
          v95 = (uint8x8_t)vbsl_s8(*(int8x8_t *)v127.i8, v123, vqmovun_s16(v135));
          v96 = vbsl_s8(*(int8x8_t *)v127.i8, v125, v96);
        }
        else
        {
          v137 = (int16x8_t)vbicq_s8((int8x16_t)v111, (int8x16_t)v113);
          v138.i64[0] = 0x2000200020002;
          v138.i64[1] = 0x2000200020002;
          v139 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8(v94, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v93.i8, (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8(v95, *(uint8x8_t *)v91.i8), v138), 4uLL);
          v138.i64[0] = 0xA000A000A000ALL;
          v138.i64[1] = 0xA000A000A000ALL;
          v140 = (int8x16_t)vcgtq_s16(vmulq_s16(v137, v138), vabsq_s16(v139));
          v141 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v139, v140), v137), vnegq_s16(v137));
          v142 = vshrq_n_s16(v137, 1uLL);
          v143 = vnegq_s16(v142);
          v144 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8(*(uint8x8_t *)v92.i8, *(uint8x8_t *)v93.i8), *(uint8x8_t *)v91.i8), v141), v142), v143), vandq_s8(v114, v140)), v107);
          v145 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v96, v94), v95), v141), v142), v143), vandq_s8(v115, v140)), v109);
          *(int8x8_t *)v91.i8 = vqmovun_s16(v144);
          *(int8x8_t *)v93.i8 = vqmovun_s16(vaddq_s16(v141, v108));
          v94 = (uint8x8_t)vqmovun_s16(vsubq_s16(v110, v141));
          v95 = (uint8x8_t)vqmovun_s16(v145);
        }
        v136 = (uint64_t)v172;
        v30 = v168;
      }
      else
      {
        v136 = (uint64_t)v172;
      }
      v24.u64[1] = (unint64_t)v28;
      v26.u64[1] = (unint64_t)v29;
      v25.u64[1] = (unint64_t)v30;
      v27.i64[1] = v136;
      v90.u64[1] = (unint64_t)v94;
      v92.u64[1] = (unint64_t)v95;
      v91.u64[1] = (unint64_t)v96;
      v93.u64[1] = (unint64_t)v97;
      v146 = (int16x8_t)vtrn1q_s8(v24, v90);
      v147 = (int16x8_t)vtrn2q_s8(v24, v90);
      v148 = (int16x8_t)vtrn1q_s8(v26, v92);
      v149 = (int16x8_t)vtrn2q_s8(v26, v92);
      v150 = (int16x8_t)vtrn1q_s8((int8x16_t)v25, v91);
      v151 = (int16x8_t)vtrn2q_s8((int8x16_t)v25, v91);
      v152 = (int16x8_t)vtrn1q_s8(v27, v93);
      v153 = (int16x8_t)vtrn2q_s8(v27, v93);
      v154 = (int32x4_t)vtrn1q_s16(v146, v148);
      v155 = (int32x4_t)vtrn2q_s16(v146, v148);
      v156 = (int32x4_t)vtrn1q_s16(v147, v149);
      v157 = (int32x4_t)vtrn2q_s16(v147, v149);
      v158 = (int32x4_t)vtrn1q_s16(v150, v152);
      v159 = (int32x4_t)vtrn2q_s16(v150, v152);
      v160 = (int32x4_t)vtrn1q_s16(v151, v153);
      v161 = (int32x4_t)vtrn2q_s16(v151, v153);
      *(int32x4_t *)v7 = vtrn1q_s32(v154, v158);
      *(int32x4_t *)((char *)v7 + a2) = vtrn1q_s32(v156, v160);
      *(int32x4_t *)((char *)v7 + 2 * a2) = vtrn1q_s32(v155, v159);
      *(int32x4_t *)((char *)v7 + 3 * a2) = vtrn1q_s32(v157, v161);
      *(int32x4_t *)((char *)v7 + 4 * a2) = vtrn2q_s32(v154, v158);
      *(int32x4_t *)((char *)v7 + 5 * a2) = vtrn2q_s32(v156, v160);
      *(int32x4_t *)((char *)v7 + 6 * a2) = vtrn2q_s32(v155, v159);
      *(int32x4_t *)((char *)v7 + 7 * a2) = vtrn2q_s32(v157, v161);
      v7 = (int8x16_t *)((char *)v7 + 8 * a2);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1B687F330(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int16 *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int16x8_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = 2 * a2;
    v7 = 4 * a2;
    v8 = 6 * a2;
    v9 = 8 * a2;
    v10 = 12 * a2;
    v11 = 10 * a2;
    v12.i64[0] = 0x9000900090009;
    v12.i64[1] = 0x9000900090009;
    v13.i64[0] = 0x2000200020002;
    v13.i64[1] = 0x2000200020002;
    v14.i64[0] = 0xA000A000A000ALL;
    v14.i64[1] = 0xA000A000A000ALL;
    v15.i64[0] = 0xFC00FC00FC00FC00;
    v15.i64[1] = 0xFC00FC00FC00FC00;
    v16 = 14 * a2;
    do
    {
      v18 = *a4++;
      v17 = v18;
      if (v18)
      {
        v19 = *(int16x8_t *)(result - 8);
        v20 = *(int16x8_t *)(result + v6 - 8);
        v21 = *(int16x8_t *)(result + v7 - 8);
        v22 = *(int16x8_t *)(result + v8 - 8);
        v23 = *(int16x8_t *)(result + v9 - 8);
        v24 = *(int16x8_t *)(result + v11 - 8);
        v25 = *(int16x8_t *)(result + v10 - 8);
        v26 = *(int16x8_t *)(result + v16 - 8);
        v27 = (int32x4_t)vtrn1q_s16(v19, v20);
        v28 = (int32x4_t)vtrn2q_s16(v19, v20);
        v29 = (int32x4_t)vtrn1q_s16(v21, v22);
        v30 = (int32x4_t)vtrn2q_s16(v21, v22);
        v31 = (int64x2_t)vtrn1q_s32(v27, v29);
        v32 = (int64x2_t)vtrn2q_s32(v27, v29);
        v33 = (int64x2_t)vtrn1q_s32(v28, v30);
        v34 = (int64x2_t)vtrn2q_s32(v28, v30);
        v35 = (int32x4_t)vtrn1q_s16(v23, v24);
        v36 = (int32x4_t)vtrn2q_s16(v23, v24);
        v37 = (int32x4_t)vtrn1q_s16(v25, v26);
        v38 = (int32x4_t)vtrn2q_s16(v25, v26);
        v39 = (int64x2_t)vtrn1q_s32(v35, v37);
        v40 = (int64x2_t)vtrn2q_s32(v35, v37);
        v41 = (int64x2_t)vtrn1q_s32(v36, v38);
        v42 = (int64x2_t)vtrn2q_s32(v36, v38);
        v43 = (int16x8_t)vzip2q_s64(v31, v39);
        v44 = (int16x8_t)vzip1q_s64(v33, v41);
        v45 = (int16x8_t)vzip2q_s64(v33, v41);
        v46 = (int16x8_t)vzip1q_s64(v32, v40);
        v47 = (int16x8_t)vzip2q_s64(v32, v40);
        v48 = (int16x8_t)vzip1q_s64(v34, v42);
        v49 = vdupq_n_s16(*a3);
        v50 = vabsq_s16(vsubq_s16(vaddq_s16(v44, v48), vaddq_s16(v46, v46)));
        v51 = vabsq_s16(vsubq_s16(vaddq_s16(v47, v43), vaddq_s16(v45, v45)));
        v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v50), v50), (int8x16_t)xmmword_1B6917A50);
        v53 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v51), v51), (int8x16_t)xmmword_1B6917A50);
        v54 = (int8x16_t)vcgtq_s16(v49, vaddq_s16(v53, v52));
        if (vaddlvq_u16((uint16x8_t)v54))
        {
          v55 = (int16x8_t)vzip1q_s64(v31, v39);
          v56 = (int16x8_t)vzip2q_s64(v34, v42);
          v57 = (int16x8_t)vandq_s8(v54, vqtbl1q_s8((int8x16_t)vdupq_n_s16(v17), (int8x16_t)xmmword_1B6917A40));
          v58 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v57, vshlq_n_s16(v57, 2uLL)), vabdq_s16(v48, v43)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v49, 3uLL), vaddq_s16(v51, v50)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v49, 3uLL), vabaq_s16(vabdq_s16(v56, v43), v55, v48))));
          v59 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v58), (int8x16_t)v58), (int8x16_t)xmmword_1B6917A50);
          v60 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v49, (uint16x8_t)v49, 1uLL), 3uLL);
          v61 = (int8x16_t)vcgtq_s16(v60, v52);
          v62 = (int8x16_t)vcgtq_s16(v60, v53);
          v63 = vsubq_s16(v43, v48);
          v64 = vsubq_s16(v45, v46);
          v65 = vrhaddq_s16(v44, v48);
          v66 = vrhaddq_s16(v47, v43);
          if (vaddlvq_u16((uint16x8_t)v59))
          {
            v67 = vaddq_s16(v57, v57);
            v68 = vaddq_s16(v44, v46);
            v69 = vaddq_s16(v48, v43);
            v70 = vaddq_s16(v45, v47);
            v71 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v46), (int16x8_t)vhaddq_u16((uint16x8_t)v44, (uint16x8_t)v45)), 2uLL), vaddq_s16(v67, v48)), vsubq_s16(v48, v67));
            v72 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v69, v45), (int16x8_t)vhaddq_u16((uint16x8_t)v47, (uint16x8_t)v46)), 2uLL), vaddq_s16(v67, v43)), vsubq_s16(v43, v67));
            v73 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v68, v69), 2uLL), vaddq_s16(v67, v46)), vsubq_s16(v46, v67));
            v74 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v70, v69), 2uLL), vaddq_s16(v67, v45)), vsubq_s16(v45, v67));
            v75 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v55, v44), (int16x8_t)vhaddq_u16((uint16x8_t)v68, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v44)), vsubq_s16(v44, v67));
            v76 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v47, v56), (int16x8_t)vhaddq_u16((uint16x8_t)v70, (uint16x8_t)v69)), 2uLL), vaddq_s16(v67, v47)), vsubq_s16(v47, v67));
            v77 = (int16x8_t)vbicq_s8((int8x16_t)v57, v59);
            v78 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            v79 = (int8x16_t)vcgtq_s16(vmulq_s16(v77, v14), vabsq_s16(v78));
            v80 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v78, v79), v77), vnegq_s16(v77));
            v81 = vshrq_n_s16(v77, 1uLL);
            v82 = vnegq_s16(v81);
            v83 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v75, (int8x16_t)v44), (int16x8_t)0), v15);
            v84 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v73, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v80), v81), v82), vandq_s8(v61, v79)), v46)), (int16x8_t)0), v15);
            v85 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v71, (int8x16_t)vaddq_s16(v80, v48)), (int16x8_t)0), v15);
            v86 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v72, (int8x16_t)vsubq_s16(v43, v80)), (int16x8_t)0), v15);
            v87 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v74, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v80), v81), v82), vandq_s8(v62, v79)), v45)), (int16x8_t)0), v15);
            v88 = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v59, v76, (int8x16_t)v47), (int16x8_t)0), v15);
            v89 = (int32x4_t)vtrn1q_s16(v55, v83);
            v90 = (int32x4_t)vtrn2q_s16(v55, v83);
            v91 = (int32x4_t)vtrn1q_s16(v84, v85);
            v92 = (int32x4_t)vtrn2q_s16(v84, v85);
            v93 = (int64x2_t)vtrn1q_s32(v89, v91);
            v94 = (int64x2_t)vtrn2q_s32(v89, v91);
            v95 = (int64x2_t)vtrn1q_s32(v90, v92);
            v96 = (int64x2_t)vtrn2q_s32(v90, v92);
            v97 = (int32x4_t)vtrn1q_s16(v86, v87);
            v98 = (int32x4_t)vtrn2q_s16(v86, v87);
            v99 = (int32x4_t)vtrn1q_s16(v88, v56);
            v100 = (int32x4_t)vtrn2q_s16(v88, v56);
            v101 = (int64x2_t)vtrn1q_s32(v97, v99);
            v102 = (int64x2_t)vtrn2q_s32(v97, v99);
            v103 = (int64x2_t)vtrn1q_s32(v98, v100);
            *(int64x2_t *)(result - 8) = vzip1q_s64(v93, v101);
            *(int64x2_t *)(result + v6 - 8) = vzip1q_s64(v95, v103);
            v104 = (int64x2_t)vtrn2q_s32(v98, v100);
            *(int64x2_t *)(result + v7 - 8) = vzip1q_s64(v94, v102);
            *(int64x2_t *)(result + v8 - 8) = vzip1q_s64(v96, v104);
            *(int64x2_t *)(result + v9 - 8) = vzip2q_s64(v93, v101);
            *(int64x2_t *)(result + v11 - 8) = vzip2q_s64(v95, v103);
            *(int64x2_t *)(result + v10 - 8) = vzip2q_s64(v94, v102);
            *(int64x2_t *)(result + v16 - 8) = vzip2q_s64(v96, v104);
          }
          else
          {
            v105 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v63, v12), v64, v13), 4uLL);
            v106 = (int8x16_t)vcgtq_s16(vmulq_s16(v57, v14), vabsq_s16(v105));
            v107 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v105, v106), v57), vnegq_s16(v57));
            v108 = vshrq_n_s16(v57, 1uLL);
            v109 = vnegq_s16(v108);
            v110 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v65, v46), v107), v108), v109), vandq_s8(v61, v106)), v46), (int16x8_t)0), v15);
            v111 = vminq_s16(vmaxq_s16(vaddq_s16(v107, v48), (int16x8_t)0), v15);
            v112 = vminq_s16(vmaxq_s16(vsubq_s16(v43, v107), (int16x8_t)0), v15);
            v113 = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v66, v45), v107), v108), v109), vandq_s8(v62, v106)), v45), (int16x8_t)0), v15);
            v114 = (int32x4_t)vtrn1q_s16(v110, v111);
            v115 = (int32x4_t)vtrn2q_s16(v110, v111);
            v116 = (int32x4_t)vtrn1q_s16(v112, v113);
            v117 = (int32x4_t)vtrn2q_s16(v112, v113);
            v118 = vtrn1q_s32(v114, v116);
            v119 = vtrn2q_s32(v114, v116);
            v120 = vtrn1q_s32(v115, v117);
            v121 = vtrn2q_s32(v115, v117);
            *(_QWORD *)(result - 4) = v118.i64[0];
            *(_QWORD *)(result + v6 - 4) = v120.i64[0];
            *(_QWORD *)(result + v7 - 4) = v119.i64[0];
            *(_QWORD *)(result + v8 - 4) = v121.i64[0];
            *(_QWORD *)(result + v9 - 4) = v118.i64[1];
            *(_QWORD *)(result + v11 - 4) = v120.i64[1];
            *(_QWORD *)(result + v10 - 4) = v119.i64[1];
            *(_QWORD *)(result + v16 - 4) = v121.i64[1];
          }
        }
      }
      ++a3;
      result += 16 * a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1B687F838(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int16x8_t v29;
  uint64_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;

  _X9 = result + 192 - 8 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X9 = result - 6 * a2;
  __asm { PRFM            #0x10, [X9,#0xC0] }
  _X12 = result - 4 * a2;
  __asm { PRFM            #0x10, [X12,#0xC0] }
  _X14 = result - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X14,#0xC0]
    PRFM            #0x10, [X0,#0xC0]
  }
  _X14 = result + 192 + 2 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X14 = result + 192 + 4 * a2;
  __asm { PRFM            #0x10, [X14] }
  _X13 = result + 192 + 6 * a2;
  __asm { PRFM            #0x10, [X13] }
  if (a5 < 8)
  {
    _X5 = result;
  }
  else
  {
    v24 = 0;
    v25 = a5 >> 3;
    v26 = result + 2 * a2;
    v27 = result - 2 * a2;
    v28 = result - 4 * a2;
    v29.i64[0] = 0x2000200020002;
    v29.i64[1] = 0x2000200020002;
    v30 = result - 6 * a2;
    v31.i64[0] = 0xA000A000A000ALL;
    v31.i64[1] = 0xA000A000A000ALL;
    v32.i64[0] = 0xFC00FC00FC00FC00;
    v32.i64[1] = 0xFC00FC00FC00FC00;
    _X5 = result;
    v34 = result + 4 * a2;
    do
    {
      if (*(_WORD *)(a4 + 2 * v24))
      {
        v35 = *(int16x8_t *)(v30 + 16 * v24);
        v36 = *(int16x8_t *)(v28 + 16 * v24);
        v37 = *(int16x8_t *)(v27 + 16 * v24);
        v38 = *(int16x8_t *)(result + 16 * v24);
        v39 = *(int16x8_t *)(v26 + 16 * v24);
        v40 = *(int16x8_t *)(v34 + 16 * v24);
        v41 = vdupq_n_s16(*(unsigned __int8 *)(a3 + v24));
        v42 = vabsq_s16(vsubq_s16(vaddq_s16(v37, v35), vaddq_s16(v36, v36)));
        v43 = vabsq_s16(vsubq_s16(vaddq_s16(v40, v38), vaddq_s16(v39, v39)));
        v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v42), v42), (int8x16_t)xmmword_1B6917A50);
        v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v43), v43), (int8x16_t)xmmword_1B6917A50);
        v46 = (int8x16_t)vcgtq_s16(v41, vaddq_s16(v45, v44));
        if (vaddlvq_u16((uint16x8_t)v46))
        {
          v47 = *(int16x8_t *)(result - 8 * a2 + 16 * v24);
          v48 = *(int16x8_t *)(result + 6 * a2 + 16 * v24);
          v49 = (int16x8_t)vandq_s8(v46, vqtbl1q_s8((int8x16_t)vdupq_n_s16(*(unsigned __int16 *)(a4 + 2 * v24)), (int8x16_t)xmmword_1B6917A40));
          v50 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v49, vshlq_n_s16(v49, 2uLL)), vabdq_s16(v37, v38)), vandq_s8((int8x16_t)vcgtq_s16(vrshrq_n_s16(v41, 3uLL), vaddq_s16(v43, v42)), (int8x16_t)vcgtq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v41, 3uLL), vabaq_s16(vabdq_s16(v48, v38), v47, v37))));
          v51 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v50), (int8x16_t)v50), (int8x16_t)xmmword_1B6917A50);
          v52 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v41, (uint16x8_t)v41, 1uLL), 3uLL);
          v53 = (int8x16_t)vcgtq_s16(v52, v44);
          v54 = (int8x16_t)vcgtq_s16(v52, v45);
          v55 = vsubq_s16(v38, v37);
          v56 = vsubq_s16(v39, v36);
          v57 = vrhaddq_s16(v35, v37);
          v58 = vrhaddq_s16(v40, v38);
          if (vaddlvq_u16((uint16x8_t)v51))
          {
            v59 = vaddq_s16(v49, v49);
            v60 = vaddq_s16(v36, v35);
            v61 = vaddq_s16(v38, v37);
            v62 = vaddq_s16(v40, v39);
            v63 = vaddq_s16(v48, v40);
            v64 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v36), (int16x8_t)vhaddq_u16((uint16x8_t)v35, (uint16x8_t)v39)), 2uLL), vaddq_s16(v59, v37)), vsubq_s16(v37, v59));
            v65 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v61, v39), (int16x8_t)vhaddq_u16((uint16x8_t)v40, (uint16x8_t)v36)), 2uLL), vaddq_s16(v59, v38)), vsubq_s16(v38, v59));
            v66 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v61, v60), 2uLL), vaddq_s16(v59, v36)), vsubq_s16(v36, v59));
            v67 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v62, v61), 2uLL), vaddq_s16(v59, v39)), vsubq_s16(v39, v59));
            v68 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v35, v47), (int16x8_t)vhaddq_u16((uint16x8_t)v60, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v35)), vsubq_s16(v35, v59));
            v69 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v63, (int16x8_t)vhaddq_u16((uint16x8_t)v62, (uint16x8_t)v61)), 2uLL), vaddq_s16(v59, v40)), vsubq_s16(v40, v59));
            v70 = (int16x8_t)vbicq_s8((int8x16_t)v49, v51);
            v61.i64[0] = 0x9000900090009;
            v61.i64[1] = 0x9000900090009;
            v71 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v61), v56, v29), 4uLL);
            v72 = (int8x16_t)vcgtq_s16(vmulq_s16(v70, v31), vabsq_s16(v71));
            v73 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v71, v72), v70), vnegq_s16(v70));
            v74 = vshrq_n_s16(v70, 1uLL);
            v75 = vnegq_s16(v74);
            *(int16x8_t *)(v30 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v68, (int8x16_t)v35), (int16x8_t)0), v32);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v66, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v73), v74), v75), vandq_s8(v53, v72)), v36)), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v64, (int8x16_t)vaddq_s16(v73, v37)), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v65, (int8x16_t)vsubq_s16(v38, v73)), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v67, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v73), v74), v75), vandq_s8(v54, v72)), v39)), (int16x8_t)0), v32);
            *(int16x8_t *)(v34 + 16 * v24) = vminq_s16(vmaxq_s16((int16x8_t)vbslq_s8(v51, v69, (int8x16_t)v40), (int16x8_t)0), v32);
          }
          else
          {
            v76.i64[0] = 0x9000900090009;
            v76.i64[1] = 0x9000900090009;
            v77 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v55, v76), v56, v29), 4uLL);
            v78 = (int8x16_t)vcgtq_s16(vmulq_s16(v49, v31), vabsq_s16(v77));
            v79 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v77, v78), v49), vnegq_s16(v49));
            v80 = vshrq_n_s16(v49, 1uLL);
            v81 = vnegq_s16(v80);
            *(int16x8_t *)(v28 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(v57, v36), v79), v80), v81), vandq_s8(v53, v78)), v36), (int16x8_t)0), v32);
            *(int16x8_t *)(v27 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16(v79, v37), (int16x8_t)0), v32);
            *(int16x8_t *)(result + 16 * v24) = vminq_s16(vmaxq_s16(vsubq_s16(v38, v79), (int16x8_t)0), v32);
            *(int16x8_t *)(v26 + 16 * v24) = vminq_s16(vmaxq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(v58, v39), v79), v80), v81), vandq_s8(v54, v78)), v39), (int16x8_t)0), v32);
          }
        }
      }
      ++v24;
      _X5 += 16;
    }
    while (v25 != v24);
  }
  _X10 = _X5 + 128 - 8 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 6 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 4 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X10 = _X5 + 128 - 2 * a2;
  __asm
  {
    PRFM            #0x10, [X10]
    PRFM            #0x10, [X5,#0x80]
  }
  _X10 = _X5 + 128 + 2 * a2;
  __asm { PRFM            #0x10, [X10] }
  _X9 = _X5 + 128 + 4 * a2;
  __asm { PRFM            #0x10, [X9] }
  _X8 = _X5 + 128 + 6 * a2;
  __asm { PRFM            #0x10, [X8] }
  return result;
}

uint64_t sub_1B687FCAC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x8_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = 4 * a2;
    v7 = 6 * a2;
    v8 = 8 * a2;
    v9 = 12 * a2;
    v10 = 10 * a2;
    v11.i64[0] = 0xFC00FC00FC00FC00;
    v11.i64[1] = 0xFC00FC00FC00FC00;
    v12 = 14 * a2;
    do
    {
      v13 = *(_QWORD *)(a3 + v4);
      if (v13)
      {
        v14 = *(int32x4_t *)(result - 8);
        v15 = *(int32x4_t *)(result + v5 - 8);
        v16 = *(int32x4_t *)(result + v6 - 8);
        v17 = *(int32x4_t *)(result + v7 - 8);
        v18 = *(int32x4_t *)(result + v8 - 8);
        v19 = *(int32x4_t *)(result + v10 - 8);
        v20 = *(int32x4_t *)(result + v9 - 8);
        v21 = *(int32x4_t *)(result + v12 - 8);
        v22 = (int64x2_t)vtrn1q_s32(v14, v15);
        v23 = (int64x2_t)vtrn2q_s32(v14, v15);
        v24 = (int64x2_t)vtrn1q_s32(v16, v17);
        v25 = (int64x2_t)vtrn2q_s32(v16, v17);
        v26 = (int16x8_t)vzip1q_s64(v22, v24);
        v27 = (int16x8_t)vzip2q_s64(v22, v24);
        v28 = (int16x8_t)vzip1q_s64(v23, v25);
        v29 = (int16x8_t)vzip2q_s64(v23, v25);
        v30 = (int64x2_t)vtrn1q_s32(v18, v19);
        v31 = (int64x2_t)vtrn2q_s32(v18, v19);
        v32 = (int64x2_t)vtrn1q_s32(v20, v21);
        v33 = (int64x2_t)vtrn2q_s32(v20, v21);
        v34 = (int16x8_t)vzip1q_s64(v30, v32);
        v35 = (int16x8_t)vzip2q_s64(v30, v32);
        v36 = (int16x8_t)vzip1q_s64(v31, v33);
        v37 = (int16x8_t)vzip2q_s64(v31, v33);
        v38 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v13), (int8x16_t)xmmword_1B6917A60);
        v39 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v27, v28), vsubq_s16(v26, v29), 2uLL), 1uLL), v38), vnegq_s16(v38));
        v40 = (int16x8_t)vsqaddq_u16((uint16x8_t)v28, v39);
        v41 = vsubq_s16(v27, v39);
        v42 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(HIDWORD(v13)), (int8x16_t)xmmword_1B6917A60);
        v43 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v35, v36), vsubq_s16(v34, v37), 2uLL), 1uLL), v42), vnegq_s16(v42));
        v44 = (int16x8_t)vsqaddq_u16((uint16x8_t)v36, v43);
        v45 = vsubq_s16(v35, v43);
        v46 = (int32x4_t)vminq_s16(v40, v11);
        v47 = (int32x4_t)vminq_s16(v44, v11);
        v48 = (int32x4_t)vminq_s16(vmaxq_s16(v41, (int16x8_t)0), v11);
        v49 = vzip1q_s32(v46, v48);
        *(_QWORD *)(result - 4) = v49.i64[0];
        *(_QWORD *)(result + v5 - 4) = v49.i64[1];
        v50 = (int32x4_t)vminq_s16(vmaxq_s16(v45, (int16x8_t)0), v11);
        v51 = vzip2q_s32(v46, v48);
        v52 = vzip1q_s32(v47, v50);
        *(_QWORD *)(result + v6 - 4) = v51.i64[0];
        *(_QWORD *)(result + v7 - 4) = v51.i64[1];
        v53 = vzip2q_s32(v47, v50);
        *(_QWORD *)(result + v8 - 4) = v52.i64[0];
        *(_QWORD *)(result + v10 - 4) = v52.i64[1];
        *(_QWORD *)(result + v9 - 4) = v53.i64[0];
        *(_QWORD *)(result + v12 - 4) = v53.i64[1];
      }
      v4 += 8;
      result += 16 * a2;
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t *sub_1B687FE50(int16x8_t *result, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  int16x8_t *v5;
  uint64_t v6;
  int16x8_t v7;
  uint64_t v8;
  int16x8_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = result + 1;
    v6 = 2 * a2;
    v7.i64[0] = 0xFC00FC00FC00FC00;
    v7.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v8 = *(_QWORD *)(a3 + v4);
      if (v8)
      {
        v9 = (int16x8_t *)((char *)v5 - 2 * a2);
        v10 = v9[-1];
        v11 = v5[-1];
        result = (int16x8_t *)((char *)v5 + v6);
        v12 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(v8), (int8x16_t)xmmword_1B6917A60);
        v13 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(v11, v10), vsubq_s16(*(int16x8_t *)((char *)v5 - 4 * a2 - 16), *(int16x8_t *)((char *)&v5[-1] + v6)), 2uLL), 1uLL), v12), vnegq_s16(v12));
        v14 = (int16x8_t)vsqaddq_u16((uint16x8_t)v10, v13);
        v15 = vsubq_s16(v11, v13);
        v16 = (int16x8_t)vqtbl1q_s8((int8x16_t)vdupq_n_s32(HIDWORD(v8)), (int8x16_t)xmmword_1B6917A60);
        v17 = vmaxq_s16(vminq_s16(vrshrq_n_s16(vsraq_n_s16(vsubq_s16(*v5, *v9), vsubq_s16(*(int16x8_t *)((char *)v5 - 4 * a2), *(int16x8_t *)((char *)v5 + 2 * a2)), 2uLL), 1uLL), v16), vnegq_s16(v16));
        v18 = (int16x8_t)vsqaddq_u16(*(uint16x8_t *)v9, v17);
        v19 = vmaxq_s16(vsubq_s16(*v5, v17), (int16x8_t)0);
        v9[-1] = vminq_s16(v14, v7);
        v5[-1] = vminq_s16(vmaxq_s16(v15, (int16x8_t)0), v7);
        *v9 = vminq_s16(v18, v7);
        *v5 = vminq_s16(v19, v7);
      }
      v4 += 8;
      v5 += 2;
    }
    while (v4 < a4);
  }
  return result;
}

uint64_t sub_1B687FF3C(uint64_t result, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4, int a5)
{
  unsigned int v5;
  int16x8_t v6;
  uint64_t v7;
  const __int16 *v8;
  int16x8_t v9;
  int16x8_t v10;
  const __int16 *v11;
  const __int16 *v12;
  const __int16 *v13;
  const __int16 *v14;
  const __int16 *v15;
  const __int16 *v16;
  const __int16 *v17;
  const __int16 *v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int8x16_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int8x16_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int8x16_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  __int16 *v98;
  __int16 *v99;
  __int16 *v100;
  __int16 *v101;
  __int16 *v102;
  __int16 *v103;
  int8x16_t v104;
  int16x8_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int16x8_t v113;
  int16x8x2_t v114;
  int16x8x2_t v115;
  int16x8x2_t v116;
  int16x8x2_t v117;
  int16x8x2_t v118;
  int16x8x2_t v119;
  int16x8x2_t v120;
  int16x8x2_t v121;
  int16x8x2_t v122;
  int16x8x2_t v123;
  int16x8x2_t v124;
  int16x8x2_t v125;
  int16x8x2_t v126;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = vdupq_n_s16(a3);
    v7 = a2;
    v110 = (int16x8_t)vshrq_n_u16((uint16x8_t)v6, 3uLL);
    v111 = vqtbl1q_s8((int8x16_t)vdupq_n_s16(a4 | (a4 << 8)), (int8x16_t)xmmword_1B6917A40);
    v109 = (int16x8_t)vshrq_n_u16(vsraq_n_u16((uint16x8_t)v6, (uint16x8_t)v6, 1uLL), 3uLL);
    v8 = (const __int16 *)(result - 8 * a2);
    v9 = 0uLL;
    v10.i64[0] = 0xFC00FC00FC00FC00;
    v10.i64[1] = 0xFC00FC00FC00FC00;
    v108 = v6;
    while (1)
    {
      v11 = v8;
      v126 = vld2q_s16(v11);
      v12 = &v11[v7];
      v124 = vld2q_s16(v12);
      v13 = &v12[v7];
      v125 = vld2q_s16(v13);
      v14 = &v13[v7];
      v122 = vld2q_s16(v14);
      v15 = &v14[v7];
      v119 = vld2q_s16(v15);
      v16 = &v15[v7];
      v121 = vld2q_s16(v16);
      v17 = &v16[v7];
      v118 = vld2q_s16(v17);
      v18 = &v17[v7];
      v116 = vld2q_s16(v18);
      v19 = vabsq_s16(vsubq_s16(vaddq_s16(v122.val[0], v124.val[0]), vaddq_s16(v125.val[0], v125.val[0])));
      v20 = vabsq_s16(vsubq_s16(vaddq_s16(v118.val[0], v119.val[0]), vaddq_s16(v121.val[0], v121.val[0])));
      v21 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v19), v19), (int8x16_t)xmmword_1B6917A50);
      v22 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v20), v20), (int8x16_t)xmmword_1B6917A50);
      v23 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v22, v21));
      v24 = vrshrq_n_s16(v6, 3uLL);
      if (!vaddlvq_u16((uint16x8_t)v23))
        break;
      v25 = (int16x8_t)vandq_s8(v23, v111);
      v26 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v25, vshlq_n_s16(v25, 2uLL)), vabdq_s16(v122.val[0], v119.val[0])), vandq_s8((int8x16_t)vcgtq_s16(v24, vaddq_s16(v20, v19)), (int8x16_t)vcgtq_s16(v110, vabaq_s16(vabdq_s16(v116.val[0], v119.val[0]), v126.val[0], v122.val[0]))));
      v27 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v26), (int8x16_t)v26), (int8x16_t)xmmword_1B6917A50);
      v28 = (int8x16_t)vcgtq_s16(v109, v21);
      v29 = (int8x16_t)vcgtq_s16(v109, v22);
      if (!vaddlvq_u16((uint16x8_t)v27))
      {
        v54.i64[0] = 0x9000900090009;
        v54.i64[1] = 0x9000900090009;
        v55 = vmulq_s16(vsubq_s16(v119.val[0], v122.val[0]), v54);
        v54.i64[0] = 0x2000200020002;
        v54.i64[1] = 0x2000200020002;
        v56 = vrshrq_n_s16(vmlaq_s16(v55, vsubq_s16(v121.val[0], v125.val[0]), v54), 4uLL);
        v54.i64[0] = 0xA000A000A000ALL;
        v54.i64[1] = 0xA000A000A000ALL;
        v57 = (int8x16_t)vcgtq_s16(vmulq_s16(v25, v54), vabsq_s16(v56));
        v58 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v56, v57), v25), vnegq_s16(v25));
        v59 = vshrq_n_s16(v25, 1uLL);
        v60 = vnegq_s16(v59);
        v49 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(vrhaddq_s16(v124.val[0], v122.val[0]), v125.val[0]), v58), v59), v60), vandq_s8(v28, v57)), v125.val[0]);
        v52 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(vrhaddq_s16(v118.val[0], v119.val[0]), v121.val[0]), v58), v59), v60), vandq_s8(v29, v57)), v121.val[0]);
        v50 = vaddq_s16(v58, v122.val[0]);
        v51 = vsubq_s16(v119.val[0], v58);
        goto LABEL_8;
      }
      v30 = vaddq_s16(v25, v25);
      v31 = vaddq_s16(v125.val[0], v124.val[0]);
      v32 = vaddq_s16(v119.val[0], v122.val[0]);
      v33 = vaddq_s16(v118.val[0], v121.val[0]);
      v106 = v29;
      v112 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v32, v125.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v124.val[0], (uint16x8_t)v121.val[0])), 2uLL), vaddq_s16(v30, v122.val[0])), vsubq_s16(v122.val[0], v30));
      v34 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v32, v121.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v118.val[0], (uint16x8_t)v125.val[0])), 2uLL), vaddq_s16(v30, v119.val[0])), vsubq_s16(v119.val[0], v30));
      v35 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v32, v31), 2uLL), vaddq_s16(v30, v125.val[0])), vsubq_s16(v125.val[0], v30));
      v36 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v33, v32), 2uLL), vaddq_s16(v30, v121.val[0])), vsubq_s16(v121.val[0], v30));
      v37 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v124.val[0], v126.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v31, (uint16x8_t)v32)), 2uLL), vaddq_s16(v30, v124.val[0])), vsubq_s16(v124.val[0], v30));
      v38 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v116.val[0], v118.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v33, (uint16x8_t)v32)), 2uLL), vaddq_s16(v30, v118.val[0])), vsubq_s16(v118.val[0], v30));
      v39 = (int16x8_t)vbicq_s8((int8x16_t)v25, v27);
      v40.i64[0] = 0x9000900090009;
      v40.i64[1] = 0x9000900090009;
      v41 = vmulq_s16(vsubq_s16(v119.val[0], v122.val[0]), v40);
      v40.i64[0] = 0x2000200020002;
      v40.i64[1] = 0x2000200020002;
      v42 = vrshrq_n_s16(vmlaq_s16(v41, vsubq_s16(v121.val[0], v125.val[0]), v40), 4uLL);
      v40.i64[0] = 0xA000A000A000ALL;
      v40.i64[1] = 0xA000A000A000ALL;
      v43 = (int8x16_t)vcgtq_s16(vmulq_s16(v39, v40), vabsq_s16(v42));
      v44 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v42, v43), v39), vnegq_s16(v39));
      v45 = vshrq_n_s16(v39, 1uLL);
      v46 = vnegq_s16(v45);
      v47 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(vrhaddq_s16(v124.val[0], v122.val[0]), v125.val[0]), v44), v45), v46), vandq_s8(v28, v43));
      v48 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(vrhaddq_s16(v118.val[0], v119.val[0]), v121.val[0]), v44), v45), v46), vandq_s8(v106, v43));
      v6 = v108;
      v49 = (int16x8_t)vbslq_s8(v27, v35, (int8x16_t)vaddq_s16(v47, v125.val[0]));
      v50 = (int16x8_t)vbslq_s8(v27, v112, (int8x16_t)vaddq_s16(v44, v122.val[0]));
      v51 = (int16x8_t)vbslq_s8(v27, v34, (int8x16_t)vsubq_s16(v119.val[0], v44));
      v52 = (int16x8_t)vbslq_s8(v27, v36, (int8x16_t)vaddq_s16(v48, v121.val[0]));
      v113 = (int16x8_t)vbslq_s8(v27, v37, (int8x16_t)v124.val[0]);
      v53 = (int16x8_t)vbslq_s8(v27, v38, (int8x16_t)v118.val[0]);
LABEL_9:
      v61 = vabsq_s16(vsubq_s16(vaddq_s16(v122.val[1], v124.val[1]), vaddq_s16(v125.val[1], v125.val[1])));
      v62 = vabsq_s16(vsubq_s16(vaddq_s16(v118.val[1], v119.val[1]), vaddq_s16(v121.val[1], v121.val[1])));
      v63 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v61), v61), (int8x16_t)xmmword_1B6917A50);
      v64 = (int16x8_t)vqtbl1q_s8((int8x16_t)vaddq_s16(vrev64q_s16(v62), v62), (int8x16_t)xmmword_1B6917A50);
      v65 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v64, v63));
      if (vaddlvq_u16((uint16x8_t)v65))
      {
        v66 = (int16x8_t)vandq_s8(v65, v111);
        v67 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v66, vshlq_n_s16(v66, 2uLL)), vabdq_s16(v122.val[1], v119.val[1])), vandq_s8((int8x16_t)vcgtq_s16(v24, vaddq_s16(v62, v61)), (int8x16_t)vcgtq_s16(v110, vabaq_s16(vabdq_s16(v116.val[1], v119.val[1]), v126.val[1], v122.val[1]))));
        v68 = vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v67), (int8x16_t)v67), (int8x16_t)xmmword_1B6917A50);
        v69 = (int8x16_t)vcgtq_s16(v109, v63);
        v70 = (int8x16_t)vcgtq_s16(v109, v64);
        if (vaddlvq_u16((uint16x8_t)v68))
        {
          v71 = vaddq_s16(v66, v66);
          v72 = vaddq_s16(v124.val[1], v126.val[1]);
          v73 = vaddq_s16(v125.val[1], v124.val[1]);
          v74 = vaddq_s16(v119.val[1], v122.val[1]);
          v105 = v52;
          v107 = v53;
          v75 = vaddq_s16(v118.val[1], v121.val[1]);
          v76 = vaddq_s16(v116.val[1], v118.val[1]);
          v104 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v74, v125.val[1]), (int16x8_t)vhaddq_u16((uint16x8_t)v124.val[1], (uint16x8_t)v121.val[1])), 2uLL), vaddq_s16(v71, v122.val[1])), vsubq_s16(v122.val[1], v71));
          v77 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(vaddq_s16(v74, v121.val[1]), (int16x8_t)vhaddq_u16((uint16x8_t)v118.val[1], (uint16x8_t)v125.val[1])), 2uLL), vaddq_s16(v71, v119.val[1])), vsubq_s16(v119.val[1], v71));
          v78 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v74, v73), 2uLL), vaddq_s16(v71, v125.val[1])), vsubq_s16(v125.val[1], v71));
          v79 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v75, v74), 2uLL), vaddq_s16(v71, v121.val[1])), vsubq_s16(v121.val[1], v71));
          v80 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v72, (int16x8_t)vhaddq_u16((uint16x8_t)v73, (uint16x8_t)v74)), 2uLL), vaddq_s16(v71, v124.val[1])), vsubq_s16(v124.val[1], v71));
          v81 = (int8x16_t)vmaxq_s16(vminq_s16(vrshrq_n_s16(vaddq_s16(v76, (int16x8_t)vhaddq_u16((uint16x8_t)v75, (uint16x8_t)v74)), 2uLL), vaddq_s16(v71, v118.val[1])), vsubq_s16(v118.val[1], v71));
          v82 = (int16x8_t)vbicq_s8((int8x16_t)v66, v68);
          v76.i64[0] = 0x9000900090009;
          v76.i64[1] = 0x9000900090009;
          v83 = vmulq_s16(vsubq_s16(v119.val[1], v122.val[1]), v76);
          v76.i64[0] = 0x2000200020002;
          v76.i64[1] = 0x2000200020002;
          v84 = vrshrq_n_s16(vmlaq_s16(v83, vsubq_s16(v121.val[1], v125.val[1]), v76), 4uLL);
          v76.i64[0] = 0xA000A000A000ALL;
          v76.i64[1] = 0xA000A000A000ALL;
          v85 = (int8x16_t)vcgtq_s16(vmulq_s16(v82, v76), vabsq_s16(v84));
          v86 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v84, v85), v82), vnegq_s16(v82));
          v87 = vshrq_n_s16(v82, 1uLL);
          v88 = vnegq_s16(v87);
          v89 = (int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(vrhaddq_s16(v124.val[1], v122.val[1]), v125.val[1]), v86), v87), v88);
          v9 = 0uLL;
          v90 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(vrhaddq_s16(v118.val[1], v119.val[1]), v121.val[1]), v86), v87), v88), vandq_s8(v70, v85)), v121.val[1]);
          v124.val[1] = (int16x8_t)vbslq_s8(v68, v80, (int8x16_t)v124.val[1]);
          v125.val[1] = (int16x8_t)vbslq_s8(v68, v78, (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(v89, vandq_s8(v69, v85)), v125.val[1]));
          v52 = v105;
          v53 = v107;
          v122.val[1] = (int16x8_t)vbslq_s8(v68, v104, (int8x16_t)vaddq_s16(v86, v122.val[1]));
          v119.val[1] = (int16x8_t)vbslq_s8(v68, v77, (int8x16_t)vsubq_s16(v119.val[1], v86));
          v121.val[1] = (int16x8_t)vbslq_s8(v68, v79, v90);
          v6 = v108;
          v118.val[1] = (int16x8_t)vbslq_s8(v68, v81, (int8x16_t)v118.val[1]);
        }
        else
        {
          v91.i64[0] = 0x9000900090009;
          v91.i64[1] = 0x9000900090009;
          v92 = vmulq_s16(vsubq_s16(v119.val[1], v122.val[1]), v91);
          v91.i64[0] = 0x2000200020002;
          v91.i64[1] = 0x2000200020002;
          v93 = vrshrq_n_s16(vmlaq_s16(v92, vsubq_s16(v121.val[1], v125.val[1]), v91), 4uLL);
          v91.i64[0] = 0xA000A000A000ALL;
          v91.i64[1] = 0xA000A000A000ALL;
          v94 = (int8x16_t)vcgtq_s16(vmulq_s16(v66, v91), vabsq_s16(v93));
          v95 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v93, v94), v66), vnegq_s16(v66));
          v96 = vshrq_n_s16(v66, 1uLL);
          v97 = vnegq_s16(v96);
          v125.val[1] = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(vsubq_s16(vrhaddq_s16(v124.val[1], v122.val[1]), v125.val[1]), v95), v96), v97), vandq_s8(v69, v94)), v125.val[1]);
          v121.val[1] = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(vsubq_s16(vrhaddq_s16(v118.val[1], v119.val[1]), v121.val[1]), v95), v96), v97), vandq_s8(v70, v94)), v121.val[1]);
          v122.val[1] = vaddq_s16(v95, v122.val[1]);
          v119.val[1] = vsubq_s16(v119.val[1], v95);
        }
      }
      v114.val[0] = vminq_s16(vmaxq_s16(v113, v9), v10);
      v114.val[1] = vminq_s16(vmaxq_s16(v124.val[1], v9), v10);
      v115.val[0] = vminq_s16(vmaxq_s16(v49, v9), v10);
      v115.val[1] = vminq_s16(vmaxq_s16(v125.val[1], v9), v10);
      v117.val[0] = vminq_s16(vmaxq_s16(v50, v9), v10);
      v117.val[1] = vminq_s16(vmaxq_s16(v122.val[1], v9), v10);
      v123.val[0] = vminq_s16(vmaxq_s16(v51, v9), v10);
      v123.val[1] = vminq_s16(vmaxq_s16(v119.val[1], v9), v10);
      v120.val[0] = vminq_s16(vmaxq_s16(v52, v9), v10);
      v120.val[1] = vminq_s16(vmaxq_s16(v121.val[1], v9), v10);
      v98 = (__int16 *)&v18[-6 * a2];
      vst2q_s16(v98, v114);
      v99 = &v98[v7];
      vst2q_s16(v99, v115);
      v100 = &v99[v7];
      v114.val[0] = vminq_s16(vmaxq_s16(v53, v9), v10);
      vst2q_s16(v100, v117);
      v101 = &v100[v7];
      vst2q_s16(v101, v123);
      v102 = &v101[v7];
      v114.val[1] = vminq_s16(vmaxq_s16(v118.val[1], v9), v10);
      vst2q_s16(v102, v120);
      v103 = &v102[v7];
      vst2q_s16(v103, v114);
      v8 += 16;
      if (!--v5)
        return result;
    }
    v49 = v125.val[0];
    v50 = v122.val[0];
    v51 = v119.val[0];
    v52 = v121.val[0];
LABEL_8:
    v53 = v118.val[0];
    v113 = v124.val[0];
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1B6880664(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  unsigned int v5;
  int16x8_t v6;
  const char *v7;
  int8x16_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  int16x8_t v13;
  const char *v14;
  int16x8_t v15;
  int16x8_t v16;
  const char *v17;
  const char *v18;
  int16x8_t v19;
  const char *v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  uint8x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int8x16_t v56;
  int16x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int8x8_t v61;
  int8x8_t v62;
  int8x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int8x16_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x8_t v88;
  uint8x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int8x16_t v93;
  int8x8_t v94;
  int8x8_t v95;
  int8x8_t v96;
  uint8x8_t v97;
  int8x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  uint8x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int8x16_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int8x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int8x16_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  char *v125;
  int8x8_t v126;
  char *v127;
  int8x8_t v128;
  char *v129;
  char *v130;
  int8x8_t v131;
  char *v132;
  int8x8_t v133;
  char *v134;
  int8x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int8x16_t v143;
  int16x8_t v144;
  int8x16_t v145;
  uint8x8_t v146;
  int8x8_t v147;
  uint8x8_t v148;
  int8x8_t v149;
  int8x8_t v150;
  int8x8x2_t v151;
  int8x8x2_t v152;
  int8x8x2_t v153;
  int8x8x2_t v154;
  int8x8x2_t v155;
  int8x8x2_t v156;
  int8x8x2_t v157;
  int8x8x2_t v158;
  int8x8x2_t v159;

  if (a5 >= 8)
  {
    v5 = a5 >> 3;
    v6 = vdupq_n_s16(a3);
    v142 = vshrq_n_s16(v6, 3uLL);
    v143 = (int8x16_t)vdupq_n_s16(a4);
    v141 = vshrq_n_s16(vsraq_n_s16(v6, v6, 1uLL), 3uLL);
    v7 = (const char *)(result - 4 * a2);
    v8 = (int8x16_t)xmmword_1B6917A50;
    v136 = v6;
    while (1)
    {
      v9 = v7;
      v151 = vld2_s8(v9);
      v10 = &v9[a2];
      v154 = vld2_s8(v10);
      v11 = &v10[a2];
      v157 = vld2_s8(v11);
      v12 = &v11[a2];
      v13 = (int16x8_t)vshll_n_u8((uint8x8_t)v157.val[0], 1uLL);
      v158 = vld2_s8(v12);
      v14 = &v12[a2];
      v15 = (int16x8_t)vaddl_u8((uint8x8_t)v158.val[0], (uint8x8_t)v154.val[0]);
      v16 = vabdq_s16(v15, v13);
      v156 = vld2_s8(v14);
      v17 = &v14[a2];
      v155 = vld2_s8(v17);
      v18 = &v17[a2];
      v19 = (int16x8_t)vshll_n_u8((uint8x8_t)v155.val[0], 1uLL);
      v153 = vld2_s8(v18);
      v20 = &v18[a2];
      v21 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]);
      v152 = vld2_s8(v20);
      v22 = vabdq_s16(v21, v19);
      v23 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v16), v15, v13), v8);
      v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v22), v21, v19), v8);
      v25 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v24, v23));
      v26 = vrshrq_n_s16(v6, 3uLL);
      v148 = (uint8x8_t)v151.val[1];
      v146 = (uint8x8_t)v152.val[1];
      v144 = v26;
      if (!vaddlvq_u16((uint16x8_t)v25))
        break;
      v27 = (int16x8_t)vmovl_u8((uint8x8_t)v157.val[0]);
      v28 = (int16x8_t)vmovl_u8((uint8x8_t)v158.val[0]);
      v29 = (int16x8_t)vmovl_u8((uint8x8_t)v155.val[0]);
      v30 = (int16x8_t)vmovl_u8((uint8x8_t)v156.val[0]);
      v31 = (int16x8_t)vandq_s8(v143, v25);
      v32 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v31, vshlq_n_s16(v31, 2uLL)), (int16x8_t)vabdl_u8((uint8x8_t)v158.val[0], (uint8x8_t)v156.val[0])), vandq_s8((int8x16_t)vcgtq_s16(v26, vaddq_s16(v22, v16)), (int8x16_t)vcgtq_s16(v142, (int16x8_t)vabal_u8(vabdl_u8((uint8x8_t)v152.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v151.val[0], (uint8x8_t)v158.val[0]))));
      v33 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v32), (int8x16_t)v32), v8);
      v34 = (int8x16_t)vcgtq_s16(v141, v23);
      v35 = (int8x16_t)vcgtq_s16(v141, v24);
      if (!vaddlvq_u16((uint16x8_t)v33))
      {
        v64 = (int16x8_t)vbicq_s8((int8x16_t)v31, (int8x16_t)v33);
        v65.i64[0] = 0x2000200020002;
        v65.i64[1] = 0x2000200020002;
        v66 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8((uint8x8_t)v156.val[0], (uint8x8_t)0x909090909090909), (uint8x8_t)v158.val[0], (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8((uint8x8_t)v155.val[0], (uint8x8_t)v157.val[0]), v65), 4uLL);
        v65.i64[0] = 0xA000A000A000ALL;
        v65.i64[1] = 0xA000A000A000ALL;
        v67 = (int8x16_t)vcgtq_s16(vmulq_s16(v64, v65), vabsq_s16(v66));
        v68 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v66, v67), v64), vnegq_s16(v64));
        v69 = vsubq_s16(v30, v68);
        v70 = vshrq_n_s16(v64, 1uLL);
        v71 = vnegq_s16(v70);
        v72 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v158.val[0]), (uint8x8_t)v157.val[0]), v68), v70), v71), vandq_s8(v34, v67)), v27);
        v73 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v155.val[0]), v68), v70), v71), vandq_s8(v35, v67));
        v60 = vqmovun_s16(v72);
        v150 = vqmovun_s16(vaddq_s16(v68, v28));
        v61 = vqmovun_s16(v69);
        v62 = vqmovun_s16(vaddq_s16(v73, v29));
        v59 = v154.val[0];
        goto LABEL_8;
      }
      v36 = vmovn_s16(v31);
      v37 = (uint8x8_t)vadd_s8(v36, v36);
      v38 = (int16x8_t)vaddl_u8((uint8x8_t)v154.val[0], (uint8x8_t)v151.val[0]);
      v39 = (int16x8_t)vaddl_u8((uint8x8_t)v157.val[0], (uint8x8_t)v154.val[0]);
      v40 = (uint8x8_t)v152.val[0];
      v41 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[0], (uint8x8_t)v158.val[0]);
      v42 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[0], (uint8x8_t)v155.val[0]);
      v43 = v35;
      v149 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v41, v27), vhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v155.val[0])), 2uLL), vqadd_u8((uint8x8_t)v158.val[0], v37)), vqsub_u8((uint8x8_t)v158.val[0], v37));
      v44 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v41, v29), vhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v157.val[0])), 2uLL), vqadd_u8((uint8x8_t)v156.val[0], v37)), vqsub_u8((uint8x8_t)v156.val[0], v37));
      v45 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v41, v39), 2uLL), vqadd_u8((uint8x8_t)v157.val[0], v37)), vqsub_u8((uint8x8_t)v157.val[0], v37));
      v46 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v42, v41), 2uLL), vqadd_u8((uint8x8_t)v155.val[0], v37)), vqsub_u8((uint8x8_t)v155.val[0], v37));
      *(uint8x8_t *)v38.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v38, (int16x8_t)vhaddq_u16((uint16x8_t)v39, (uint16x8_t)v41)), 2uLL), vqadd_u8((uint8x8_t)v154.val[0], v37)), vqsub_u8((uint8x8_t)v154.val[0], v37));
      v47 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(v40, (uint8x8_t)v153.val[0]), (int16x8_t)vhaddq_u16((uint16x8_t)v42, (uint16x8_t)v41)), 2uLL), vqadd_u8((uint8x8_t)v153.val[0], v37)), vqsub_u8((uint8x8_t)v153.val[0], v37));
      v48 = (int16x8_t)vbicq_s8((int8x16_t)v31, (int8x16_t)v33);
      v49.i64[0] = 0x9000900090009;
      v49.i64[1] = 0x9000900090009;
      v50 = vmulq_s16((int16x8_t)vsubl_u8((uint8x8_t)v156.val[0], (uint8x8_t)v158.val[0]), v49);
      v49.i64[0] = 0x2000200020002;
      v49.i64[1] = 0x2000200020002;
      v51 = vrshrq_n_s16(vmlaq_s16(v50, (int16x8_t)vsubl_u8((uint8x8_t)v155.val[0], (uint8x8_t)v157.val[0]), v49), 4uLL);
      v49.i64[0] = 0xA000A000A000ALL;
      v49.i64[1] = 0xA000A000A000ALL;
      v52 = (int8x16_t)vcgtq_s16(vmulq_s16(v48, v49), vabsq_s16(v51));
      v53 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v51, v52), v48), vnegq_s16(v48));
      v54 = vshrq_n_s16(v48, 1uLL);
      v55 = vnegq_s16(v54);
      v56 = (int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[0], (uint8x8_t)v158.val[0]), (uint8x8_t)v157.val[0]), v53), v54), v55);
      v57 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[0], (uint8x8_t)v156.val[0]), (uint8x8_t)v155.val[0]), v53), v54), v55), vandq_s8(v43, v52)), v29);
      *(int8x8_t *)v55.i8 = vqmovun_s16(vsubq_s16(v30, v53));
      v58 = vqmovn_s16(v33);
      v59 = vbsl_s8(v58, *(int8x8_t *)v38.i8, v154.val[0]);
      v60 = vbsl_s8(v58, v45, vqmovun_s16(vaddq_s16((int16x8_t)vandq_s8(v56, vandq_s8(v34, v52)), v27)));
      v150 = vbsl_s8(v58, v149, vqmovun_s16(vaddq_s16(v53, v28)));
      v61 = vbsl_s8(v58, v44, *(int8x8_t *)v55.i8);
      v8 = (int8x16_t)xmmword_1B6917A50;
      v6 = v136;
      v62 = vbsl_s8(v58, v46, vqmovun_s16(v57));
      v63 = vbsl_s8(v58, v47, v153.val[0]);
LABEL_9:
      v74 = (int16x8_t)vaddl_u8((uint8x8_t)v158.val[1], (uint8x8_t)v154.val[1]);
      v75 = (int16x8_t)vshll_n_u8((uint8x8_t)v157.val[1], 1uLL);
      v76 = vabdq_s16(v74, v75);
      v77 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]);
      v78 = (int16x8_t)vshll_n_u8((uint8x8_t)v155.val[1], 1uLL);
      v79 = vabdq_s16(v77, v78);
      v80 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v76), v74, v75), v8);
      v81 = (int16x8_t)vqtbl1q_s8((int8x16_t)vabaq_s16(vrev64q_s16(v79), v77, v78), v8);
      v82 = (int8x16_t)vcgtq_s16(v6, vaddq_s16(v81, v80));
      if (vaddlvq_u16((uint16x8_t)v82))
      {
        v138 = (int16x8_t)vmovl_u8((uint8x8_t)v158.val[1]);
        v139 = (int16x8_t)vmovl_u8((uint8x8_t)v157.val[1]);
        v140 = (int16x8_t)vmovl_u8((uint8x8_t)v155.val[1]);
        v137 = (int16x8_t)vmovl_u8((uint8x8_t)v156.val[1]);
        v83 = (int16x8_t)vandq_s8(v143, v82);
        v84 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_s16(vrhaddq_s16(v83, vshlq_n_s16(v83, 2uLL)), (int16x8_t)vabdl_u8((uint8x8_t)v158.val[1], (uint8x8_t)v156.val[1])), vandq_s8((int8x16_t)vcgtq_s16(v144, vaddq_s16(v79, v76)), (int8x16_t)vcgtq_s16(v142, (int16x8_t)vabal_u8(vabdl_u8(v146, (uint8x8_t)v156.val[1]), (uint8x8_t)v151.val[1], (uint8x8_t)v158.val[1]))));
        v85 = (int16x8_t)vqtbl1q_s8(vandq_s8((int8x16_t)vrev64q_s16(v84), (int8x16_t)v84), v8);
        v86 = (int8x16_t)vcgtq_s16(v141, v80);
        v87 = (int8x16_t)vcgtq_s16(v141, v81);
        if (vaddlvq_u16((uint16x8_t)v85))
        {
          v88 = vmovn_s16(v83);
          v89 = (uint8x8_t)vadd_s8(v88, v88);
          v145 = v86;
          v90 = (int16x8_t)vaddl_u8((uint8x8_t)v157.val[1], (uint8x8_t)v154.val[1]);
          v91 = (int16x8_t)vaddl_u8((uint8x8_t)v156.val[1], (uint8x8_t)v158.val[1]);
          v92 = (int16x8_t)vaddl_u8((uint8x8_t)v153.val[1], (uint8x8_t)v155.val[1]);
          v93 = v87;
          v147 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v91, v139), vhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v155.val[1])), 2uLL), vqadd_u8((uint8x8_t)v158.val[1], v89)), vqsub_u8((uint8x8_t)v158.val[1], v89));
          v94 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vaddw_u8((uint16x8_t)vaddq_s16(v91, v140), vhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v157.val[1])), 2uLL), vqadd_u8((uint8x8_t)v156.val[1], v89)), vqsub_u8((uint8x8_t)v156.val[1], v89));
          v95 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v91, v90), 2uLL), vqadd_u8((uint8x8_t)v157.val[1], v89)), vqsub_u8((uint8x8_t)v157.val[1], v89));
          v96 = (int8x8_t)vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16(v92, v91), 2uLL), vqadd_u8((uint8x8_t)v155.val[1], v89)), vqsub_u8((uint8x8_t)v155.val[1], v89));
          *(uint8x8_t *)v90.i8 = vmax_u8(vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8((uint8x8_t)v154.val[1], v148), (int16x8_t)vhaddq_u16((uint16x8_t)v90, (uint16x8_t)v91)), 2uLL), vqadd_u8((uint8x8_t)v154.val[1], v89)), vqsub_u8((uint8x8_t)v154.val[1], v89));
          v97 = vmin_u8((uint8x8_t)vrshrn_n_s16(vaddq_s16((int16x8_t)vaddl_u8(v146, (uint8x8_t)v153.val[1]), (int16x8_t)vhaddq_u16((uint16x8_t)v92, (uint16x8_t)v91)), 2uLL), vqadd_u8((uint8x8_t)v153.val[1], v89));
          v8 = (int8x16_t)xmmword_1B6917A50;
          v6 = v136;
          v98 = (int8x8_t)vmax_u8(v97, vqsub_u8((uint8x8_t)v153.val[1], v89));
          v99 = (int16x8_t)vsubl_u8((uint8x8_t)v156.val[1], (uint8x8_t)v158.val[1]);
          v100 = (int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v158.val[1]), (uint8x8_t)v157.val[1]);
          v101 = (int16x8_t)vsubl_u8((uint8x8_t)v155.val[1], (uint8x8_t)v157.val[1]);
          v102.i64[0] = 0x9000900090009;
          v102.i64[1] = 0x9000900090009;
          v103.i64[0] = 0x2000200020002;
          v103.i64[1] = 0x2000200020002;
          v104 = vrhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]);
          v105 = (int16x8_t)vbicq_s8((int8x16_t)v83, (int8x16_t)v85);
          v106 = vrshrq_n_s16(vmlaq_s16(vmulq_s16(v99, v102), v101, v103), 4uLL);
          v107 = (int16x8_t)vsubl_u8(v104, (uint8x8_t)v155.val[1]);
          v108.i64[0] = 0xA000A000A000ALL;
          v108.i64[1] = 0xA000A000A000ALL;
          v109 = (int8x16_t)vcgtq_s16(vmulq_s16(v105, v108), vabsq_s16(v106));
          v110 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v106, v109), v105), vnegq_s16(v105));
          v111 = vshrq_n_s16(v105, 1uLL);
          v112 = vnegq_s16(v111);
          v113 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16(v100, v110), v111), v112), vandq_s8(v145, v109)), v139);
          v114 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16(v107, v110), v111), v112), vandq_s8(v93, v109)), v140);
          v115 = vqmovn_s16(v85);
          v154.val[1] = vbsl_s8(v115, *(int8x8_t *)v90.i8, v154.val[1]);
          v153.val[1] = vbsl_s8(v115, v98, v153.val[1]);
          v157.val[1] = vbsl_s8(v115, v95, vqmovun_s16(v113));
          v158.val[1] = vbsl_s8(v115, v147, vqmovun_s16(vaddq_s16(v110, v138)));
          v156.val[1] = vbsl_s8(v115, v94, vqmovun_s16(vsubq_s16(v137, v110)));
          v155.val[1] = vbsl_s8(v115, v96, vqmovun_s16(v114));
        }
        else
        {
          v116 = (int16x8_t)vbicq_s8((int8x16_t)v83, (int8x16_t)v85);
          v117.i64[0] = 0x2000200020002;
          v117.i64[1] = 0x2000200020002;
          v118 = vrshrq_n_s16(vmlaq_s16((int16x8_t)vmlsl_u8(vmull_u8((uint8x8_t)v156.val[1], (uint8x8_t)0x909090909090909), (uint8x8_t)v158.val[1], (uint8x8_t)0x909090909090909), (int16x8_t)vsubl_u8((uint8x8_t)v155.val[1], (uint8x8_t)v157.val[1]), v117), 4uLL);
          v117.i64[0] = 0xA000A000A000ALL;
          v117.i64[1] = 0xA000A000A000ALL;
          v119 = (int8x16_t)vcgtq_s16(vmulq_s16(v116, v117), vabsq_s16(v118));
          v120 = vmaxq_s16(vminq_s16((int16x8_t)vandq_s8((int8x16_t)v118, v119), v116), vnegq_s16(v116));
          v121 = vshrq_n_s16(v116, 1uLL);
          v122 = vnegq_s16(v121);
          v123 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhaddq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v154.val[1], (uint8x8_t)v158.val[1]), (uint8x8_t)v157.val[1]), v120), v121), v122), vandq_s8(v86, v119)), v139);
          v124 = (int16x8_t)vandq_s8((int8x16_t)vmaxq_s16(vminq_s16(vhsubq_s16((int16x8_t)vsubl_u8(vrhadd_u8((uint8x8_t)v153.val[1], (uint8x8_t)v156.val[1]), (uint8x8_t)v155.val[1]), v120), v121), v122), vandq_s8(v87, v119));
          v157.val[1] = vqmovun_s16(v123);
          v158.val[1] = vqmovun_s16(vaddq_s16(v120, v138));
          v156.val[1] = vqmovun_s16(vsubq_s16(v137, v120));
          v155.val[1] = vqmovun_s16(vaddq_s16(v124, v140));
        }
      }
      v159.val[0] = v150;
      v125 = (char *)&v20[-6 * a2];
      v126 = v154.val[1];
      vst2_s8(v125, *(int8x8x2_t *)v59.i8);
      v127 = &v125[a2];
      v128 = v157.val[1];
      vst2_s8(v127, *(int8x8x2_t *)v60.i8);
      v129 = &v127[a2];
      v159.val[1] = v158.val[1];
      vst2_s8(v129, v159);
      v130 = &v129[a2];
      v131 = v156.val[1];
      vst2_s8(v130, *(int8x8x2_t *)v61.i8);
      v132 = &v130[a2];
      v133 = v155.val[1];
      vst2_s8(v132, *(int8x8x2_t *)v62.i8);
      v134 = &v132[a2];
      v135 = v153.val[1];
      vst2_s8(v134, *(int8x8x2_t *)v63.i8);
      v7 += 16;
      if (!--v5)
        return result;
    }
    v59 = v154.val[0];
    v60 = v157.val[0];
    v150 = v158.val[0];
    v61 = v156.val[0];
    v62 = v155.val[0];
LABEL_8:
    v63 = v153.val[0];
    goto LABEL_9;
  }
  return result;
}

_QWORD *sub_1B6880DF4(_QWORD *result, int a2)
{
  if (a2 == 8)
  {
    result[3] = sub_1B6880ECC;
    result[4] = sub_1B6880ECC;
    result[5] = sub_1B6880ECC;
    result[6] = sub_1B6880ECC;
    result[7] = sub_1B6880ECC;
    result[8] = sub_1B68810CC;
    result[9] = sub_1B6881154;
    result[10] = sub_1B68811D8;
    result[11] = sub_1B68811D8;
    result[12] = sub_1B68811D8;
    result[23] = sub_1B6881288;
    result[24] = sub_1B6881288;
    result[25] = sub_1B6881288;
    result[26] = sub_1B6881288;
    result[27] = sub_1B6881290;
    result[28] = sub_1B6881318;
    result[29] = sub_1B6881318;
    result[30] = sub_1B6881318;
    result[13] = sub_1B6881320;
    result[14] = sub_1B688133C;
    result[15] = sub_1B6881560;
    result[16] = sub_1B6881744;
    result[31] = sub_1B6881A08;
    result[32] = sub_1B6881C9C;
    result[33] = sub_1B6881FE8;
    result[18] = sub_1B6881320;
    result[19] = sub_1B688133C;
    result[35] = sub_1B6881A08;
    result[36] = sub_1B6881C9C;
    result[39] = sub_1B68822E4;
    result[40] = sub_1B68824F8;
    result[41] = sub_1B68826B8;
  }
  return result;
}

uint64_t sub_1B6880ECC(int a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  int v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  uint8x8_t *v14;
  uint8x8_t v15;
  uint8x8_t *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t v21;
  int v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  __int32 *v27;
  uint8x8_t v28;
  __int32 *v29;
  __int32 *v30;
  uint8x8_t v31;
  __int32 *v32;
  uint8x8_t v33;
  __int32 *v34;
  __int32 *v35;
  uint8x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int32x2_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t v45;
  int v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int8x16_t v58;
  BOOL v59;

  if (a1 == 4)
  {
    v22 = a2 + 4;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    do
    {
      v27 = (__int32 *)((char *)a3 + a4);
      v28.i32[0] = a3->i32[0];
      v29 = (__int32 *)((char *)a3 + a4 + a4);
      v28.i32[1] = *v29;
      v30 = (__int32 *)((char *)v29 + a4);
      v31.i32[0] = *v27;
      v31.i32[1] = *v30;
      a3 = (uint8x8_t *)((char *)v30 + a4);
      v32 = (__int32 *)((char *)a5 + a6);
      v33.i32[0] = a5->i32[0];
      v34 = (__int32 *)((char *)a5 + a6 + a6);
      v33.i32[1] = *v34;
      v35 = (__int32 *)((char *)v34 + a6);
      v36.i32[0] = *v32;
      v36.i32[1] = *v35;
      a5 = (uint8x8_t *)((char *)v35 + a6);
      v37 = (int16x8_t)vsubl_u8(v28, v33);
      v38 = (int16x8_t)vsubl_u8(v31, v36);
      v23 = vmlal_s16(v23, *(int16x4_t *)v37.i8, *(int16x4_t *)v37.i8);
      v24 = vmlal_s16(v24, *(int16x4_t *)v38.i8, *(int16x4_t *)v38.i8);
      v25 = vmlal_high_s16(v25, v37, v37);
      v26 = vmlal_high_s16(v26, v38, v38);
      v22 -= 4;
    }
    while (v22 > 4);
    v21 = (int8x16_t)vaddq_s32(vaddq_s32(v24, v23), vaddq_s32(v25, v26));
    goto LABEL_9;
  }
  if (a1 == 8)
  {
    v6 = a2 + 4;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
    do
    {
      v11 = (uint8x8_t *)((char *)a3 + a4 + a4);
      v12 = *v11;
      v13 = (uint8x8_t *)((char *)v11 + a4);
      v14 = (uint8x8_t *)((char *)a5 + a6 + a6);
      v15 = *v14;
      v16 = (uint8x8_t *)((char *)v14 + a6);
      v17 = (int16x8_t)vsubl_u8(*a3, *a5);
      v18 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a3 + a4), *(uint8x8_t *)((char *)a5 + a6));
      v19 = (int16x8_t)vsubl_u8(v12, v15);
      v20 = (int16x8_t)vsubl_u8(*v13, *v16);
      v7 = vmlal_high_s16(vmlal_s16(v7, *(int16x4_t *)v17.i8, *(int16x4_t *)v17.i8), v17, v17);
      v8 = vmlal_high_s16(vmlal_s16(v8, *(int16x4_t *)v18.i8, *(int16x4_t *)v18.i8), v18, v18);
      v9 = vmlal_high_s16(vmlal_s16(v9, *(int16x4_t *)v19.i8, *(int16x4_t *)v19.i8), v19, v19);
      v10 = vmlal_high_s16(vmlal_s16(v10, *(int16x4_t *)v20.i8, *(int16x4_t *)v20.i8), v20, v20);
      v6 -= 4;
      a3 = (uint8x8_t *)((char *)v13 + a4);
      a5 = (uint8x8_t *)((char *)v16 + a6);
    }
    while (v6 > 4);
    v21 = (int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32(v8, v7), v9), v10);
LABEL_9:
    v39 = vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
    return vpadd_s32(v39, v39).u32[0];
  }
  LODWORD(v40) = 0;
  v41 = (char *)a5 + a6;
  v42 = (char *)a3 + a4;
  do
  {
    v43 = 0;
    v44 = 0;
    v45 = 0uLL;
    v46 = a2 + 2;
    v47 = 0uLL;
    v48 = 0uLL;
    v49 = 0uLL;
    do
    {
      v50 = *(uint8x16_t *)&a3->i8[v43];
      v51 = *(uint8x16_t *)&v42[v43];
      v52 = *(uint8x16_t *)&a5->i8[v44];
      v53 = *(uint8x16_t *)&v41[v44];
      v54 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v52.i8);
      v55 = (int16x8_t)vsubl_high_u8(v50, v52);
      v56 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v53.i8);
      v57 = (int16x8_t)vsubl_high_u8(v51, v53);
      v45 = vmlal_high_s16(vmlal_s16(v45, *(int16x4_t *)v54.i8, *(int16x4_t *)v54.i8), v54, v54);
      v47 = vmlal_high_s16(vmlal_s16(v47, *(int16x4_t *)v56.i8, *(int16x4_t *)v56.i8), v56, v56);
      v48 = vmlal_high_s16(vmlal_s16(v48, *(int16x4_t *)v55.i8, *(int16x4_t *)v55.i8), v55, v55);
      v49 = vmlal_high_s16(vmlal_s16(v49, *(int16x4_t *)v57.i8, *(int16x4_t *)v57.i8), v57, v57);
      v44 += 2 * a6;
      v43 += 2 * a4;
      v46 -= 2;
    }
    while (v46 > 2);
    v58 = (int8x16_t)vaddq_s32(vaddq_s32(v47, v45), vaddq_s32(v48, v49));
    *(int32x2_t *)v58.i8 = vadd_s32(*(int32x2_t *)v58.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL));
    v40 = vpadd_s32(*(int32x2_t *)v58.i8, *(int32x2_t *)v58.i8).u32[0] + v40;
    a3 += 2;
    a5 += 2;
    v41 += 16;
    v42 += 16;
    v59 = __OFSUB__(a1, 16);
    a1 -= 16;
  }
  while (!((a1 < 0) ^ v59 | (a1 == 0)));
  return v40;
}

uint64_t sub_1B68810CC(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint16x8_t v10;
  uint64_t v11;
  uint64_t i;
  uint8x8_t v13;
  uint8x8_t v14;

  if (a2 < 1)
  {
    v10 = 0uLL;
  }
  else
  {
    v6 = 0;
    v7 = 2 * a4;
    v8 = 2 * a6;
    v9 = a5 + a6;
    v10 = 0uLL;
    v11 = a3 + a4;
    do
    {
      if (a1 >= 1)
      {
        for (i = 0; i < a1; i += 4)
        {
          v13 = *(uint8x8_t *)(a3 + i);
          v14 = *(uint8x8_t *)(a5 + i);
          v13.i32[1] = *(_DWORD *)(v11 + i);
          v14.i32[1] = *(_DWORD *)(v9 + i);
          v10 = vabal_u8(v10, v13, v14);
        }
      }
      v6 += 2;
      a3 += v7;
      a5 += v8;
      v9 += v8;
      v11 += v7;
    }
    while (v6 < a2);
  }
  return vaddlvq_u16(v10);
}

uint64_t sub_1B6881154(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint16x8_t v10;
  uint64_t v11;
  uint64_t i;

  if (a2 < 1)
  {
    v10 = 0uLL;
  }
  else
  {
    v6 = 0;
    v7 = 2 * a4;
    v8 = 2 * a6;
    v9 = a5 + a6;
    v10 = 0uLL;
    v11 = a3 + a4;
    do
    {
      if (a1 >= 1)
      {
        for (i = 0; i < a1; i += 8)
          v10 = vabal_u8(vabal_u8(v10, *(uint8x8_t *)(a3 + i), *(uint8x8_t *)(a5 + i)), *(uint8x8_t *)(v11 + i), *(uint8x8_t *)(v9 + i));
      }
      v6 += 2;
      a3 += v7;
      a5 += v8;
      v9 += v8;
      v11 += v7;
    }
    while (v6 < a2);
  }
  return vaddlvq_u16(v10);
}

uint64_t sub_1B68811D8(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint64_t i;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;

  if (a2 < 1)
  {
    v20 = 0uLL;
    v21 = 0uLL;
  }
  else
  {
    v6 = 0;
    v7 = 2 * a4;
    v8 = 2 * a6;
    v9 = a5 + a6;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = a3 + a4;
    v13 = 0uLL;
    v14 = 0uLL;
    do
    {
      if (a1 >= 1)
      {
        for (i = 0; i < a1; i += 16)
        {
          v16 = *(uint8x16_t *)(a3 + i);
          v17 = *(uint8x16_t *)(a5 + i);
          v18 = *(uint8x16_t *)(v12 + i);
          v19 = *(uint8x16_t *)(v9 + i);
          v14 = (int16x8_t)vabal_u8((uint16x8_t)v14, *(uint8x8_t *)v16.i8, *(uint8x8_t *)v17.i8);
          v13 = (int16x8_t)vabal_high_u8((uint16x8_t)v13, v16, v17);
          v11 = (int16x8_t)vabal_u8((uint16x8_t)v11, *(uint8x8_t *)v18.i8, *(uint8x8_t *)v19.i8);
          v10 = (int16x8_t)vabal_high_u8((uint16x8_t)v10, v18, v19);
        }
      }
      v6 += 2;
      a3 += v7;
      a5 += v8;
      v9 += v8;
      v12 += v7;
    }
    while (v6 < a2);
    v20 = (uint16x8_t)vaddq_s16(v13, v14);
    v21 = (uint16x8_t)vaddq_s16(v10, v11);
  }
  return vaddlvq_u16(v21) + vaddlvq_u16(v20);
}

uint64_t sub_1B6881288(int a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  return sub_1B6880ECC(2 * a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1B6881290(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint16x8_t v12;
  uint64_t i;

  if (a2 < 1)
  {
    v12 = 0uLL;
  }
  else
  {
    v6 = 0;
    v7 = 2 * a4;
    v8 = 2 * a6;
    v9 = 2 * a1;
    v10 = a5 + a6;
    v11 = a3 + a4;
    v12 = 0uLL;
    do
    {
      if ((int)v9 >= 1)
      {
        for (i = 0; i < v9; i += 8)
          v12 = vabal_u8(vabal_u8(v12, *(uint8x8_t *)(a3 + i), *(uint8x8_t *)(a5 + i)), *(uint8x8_t *)(v11 + i), *(uint8x8_t *)(v10 + i));
      }
      v6 += 2;
      a3 += v7;
      a5 += v8;
      v10 += v8;
      v11 += v7;
    }
    while (v6 < a2);
  }
  return vaddlvq_u16(v12);
}

uint64_t sub_1B6881318(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B68811D8(2 * a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1B6881320(unsigned int a1)
{
  return off_1E6A147F8[__clz(__rbit32(a1)) - 2]();
}

uint64_t sub_1B688133C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v8;
  uint8x8_t *v9;
  uint8x8_t v10;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  uint8x8_t *v14;
  uint8x8_t v15;
  uint8x8_t *v16;
  uint8x8_t v17;
  uint8x8_t *v18;
  uint8x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint8x8_t *v22;
  uint8x8_t v23;
  int16x8_t v24;
  uint8x8_t *v25;
  uint8x8_t v26;
  uint8x8_t *v27;
  uint8x8_t v28;
  uint8x8_t v29;
  uint8x8_t *v30;
  uint8x8_t v31;
  uint8x8_t *v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int64x2_t v87;
  int16x8_t v88;
  int64x2_t v89;
  int16x8_t v90;
  int64x2_t v91;
  int16x8_t v92;
  int64x2_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  BOOL v98;

  result = 0;
  do
  {
    if (a1 >= 1)
    {
      v8 = 0;
      do
      {
        v9 = (uint8x8_t *)(a3 + v8 + a4);
        v10 = *v9;
        v11 = (uint8x8_t *)((char *)v9 + a4);
        v12 = *v11;
        v13 = (uint8x8_t *)((char *)v11 + a4);
        v14 = (uint8x8_t *)(a5 + v8 + a6);
        v15 = *v14;
        v16 = (uint8x8_t *)((char *)v14 + a6);
        v17 = *v16;
        v18 = (uint8x8_t *)((char *)v16 + a6);
        v19 = *v13;
        v20 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a3 + v8), *(uint8x8_t *)(a5 + v8));
        v21 = (int16x8_t)vsubl_u8(v10, v15);
        v22 = (uint8x8_t *)((char *)v13 + a4);
        v23 = *v22;
        v24 = (int16x8_t)vsubl_u8(v12, v17);
        v25 = (uint8x8_t *)((char *)v22 + a4);
        v26 = *v25;
        v27 = (uint8x8_t *)((char *)v25 + a4);
        v28 = *(uint8x8_t *)((char *)v27 + a4);
        v29 = *v27;
        v30 = (uint8x8_t *)((char *)v18 + a6 + a6);
        v31 = *v30;
        v32 = (uint8x8_t *)((char *)v30 + a6);
        v33 = (int16x8_t)vsubl_u8(v19, *v18);
        v34 = (int16x8_t)vsubl_u8(v23, *(uint8x8_t *)((char *)v18 + a6));
        v35 = (int16x8_t)vsubl_u8(v26, v31);
        v36 = (int16x8_t)vsubl_u8(v29, *v32);
        v37 = (int16x8_t)vsubl_u8(v28, *(uint8x8_t *)((char *)v32 + a6));
        v38 = vaddq_s16(v21, v20);
        v39 = vsubq_s16(v20, v21);
        v40 = vaddq_s16(v33, v24);
        v41 = vsubq_s16(v24, v33);
        v42 = vtrn1q_s16(v38, v39);
        v43 = vtrn2q_s16(v38, v39);
        v44 = vtrn1q_s16(v40, v41);
        v45 = vtrn2q_s16(v40, v41);
        v46 = vaddq_s16(v43, v42);
        v47 = vsubq_s16(v42, v43);
        v48 = vaddq_s16(v45, v44);
        v49 = vsubq_s16(v44, v45);
        v50 = (int32x4_t)vaddq_s16(v48, v46);
        v51 = (int32x4_t)vsubq_s16(v46, v48);
        v52 = (int32x4_t)vaddq_s16(v49, v47);
        v53 = (int32x4_t)vsubq_s16(v47, v49);
        v54 = (int16x8_t)vtrn1q_s32(v50, v51);
        v55 = (int16x8_t)vtrn2q_s32(v50, v51);
        v56 = (int16x8_t)vtrn1q_s32(v52, v53);
        v57 = (int16x8_t)vtrn2q_s32(v52, v53);
        v58 = vaddq_s16(v55, v54);
        v59 = vaddq_s16(v35, v34);
        v60 = vsubq_s16(v54, v55);
        v61 = vsubq_s16(v34, v35);
        v62 = vaddq_s16(v37, v36);
        v63 = vsubq_s16(v36, v37);
        v64 = vtrn1q_s16(v59, v61);
        v65 = vtrn2q_s16(v59, v61);
        v66 = vaddq_s16(v57, v56);
        v67 = vtrn1q_s16(v62, v63);
        v68 = vtrn2q_s16(v62, v63);
        v69 = vaddq_s16(v65, v64);
        v70 = vsubq_s16(v64, v65);
        v71 = vaddq_s16(v68, v67);
        v72 = vsubq_s16(v56, v57);
        v73 = vsubq_s16(v67, v68);
        v74 = (int32x4_t)vaddq_s16(v71, v69);
        v75 = (int32x4_t)vsubq_s16(v69, v71);
        v76 = (int32x4_t)vaddq_s16(v73, v70);
        v77 = (int32x4_t)vsubq_s16(v70, v73);
        v78 = (int16x8_t)vtrn1q_s32(v74, v75);
        v79 = (int16x8_t)vtrn2q_s32(v74, v75);
        v80 = (int16x8_t)vtrn1q_s32(v76, v77);
        v81 = (int16x8_t)vtrn2q_s32(v76, v77);
        v82 = vaddq_s16(v79, v78);
        v83 = vsubq_s16(v78, v79);
        v84 = vaddq_s16(v81, v80);
        v85 = vsubq_s16(v80, v81);
        v86 = vaddq_s16(v82, v58);
        v87 = (int64x2_t)vsubq_s16(v58, v82);
        v88 = vaddq_s16(v84, v66);
        v89 = (int64x2_t)vsubq_s16(v66, v84);
        v90 = vaddq_s16(v83, v60);
        v91 = (int64x2_t)vsubq_s16(v60, v83);
        v92 = vaddq_s16(v85, v72);
        v93 = (int64x2_t)vsubq_s16(v72, v85);
        v94 = (int16x8_t)vzip2q_s64((int64x2_t)v86, v87);
        v95 = (int16x8_t)vzip2q_s64((int64x2_t)v88, v89);
        v96 = (int16x8_t)vzip2q_s64((int64x2_t)v90, v91);
        v97 = (int16x8_t)vzip2q_s64((int64x2_t)v92, v93);
        v86.i64[1] = v87.i64[0];
        v88.i64[1] = v89.i64[0];
        v90.i64[1] = v91.i64[0];
        v92.i64[1] = v93.i64[0];
        result = result
               + ((vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v88), (uint16x8_t)vabsq_s16(v95)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v86), (uint16x8_t)vabsq_s16(v94))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v90), (uint16x8_t)vabsq_s16(v96)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v92), (uint16x8_t)vabsq_s16(v97)))))+ 1) >> 1);
        v8 += 8;
      }
      while (v8 < a1);
    }
    a3 += 8 * a4;
    a5 += 8 * a6;
    v98 = __OFSUB__(a2, 8);
    a2 -= 8;
  }
  while (!((a2 < 0) ^ v98 | (a2 == 0)));
  return result;
}

uint64_t sub_1B6881560(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  uint64_t i;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  BOOL v47;
  uint64_t v49;
  int16x8_t v50[32];
  uint64_t v51;

  v12 = 0;
  v51 = *MEMORY[0x1E0C80C00];
  v49 = 16 * a4;
  v13 = 16 * a6;
  do
  {
    if (a1 >= 1)
    {
      v14 = 0;
      do
      {
        sub_1B6882B8C((uint8x8_t *)(a3 + v14), a4, (uint8x8_t *)(a5 + v14), a6, 16, v50);
        v15 = 0uLL;
        for (i = 9; i != 17; i += 2)
        {
          v17 = v50[i - 9];
          v18 = v50[i - 8];
          v19 = v50[i - 1];
          v20 = v50[i];
          v21 = v50[i + 7];
          v22 = v50[i + 8];
          v23 = v50[i + 15];
          v24 = v50[i + 16];
          v25 = vaddq_s16(v19, v17);
          v26 = vaddq_s16(v20, v18);
          v27 = (int64x2_t)vsubq_s16(v17, v19);
          v28 = (int64x2_t)vsubq_s16(v18, v20);
          v29 = vaddq_s16(v23, v21);
          v30 = vaddq_s16(v24, v22);
          v31 = (int64x2_t)vsubq_s16(v21, v23);
          v32 = (int64x2_t)vsubq_s16(v22, v24);
          v33 = (int16x8_t)vzip2q_s64((int64x2_t)v25, v27);
          v34 = (int16x8_t)vzip2q_s64((int64x2_t)v26, v28);
          v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
          v36 = (int16x8_t)vzip2q_s64((int64x2_t)v30, v32);
          v25.i64[1] = v27.i64[0];
          v26.i64[1] = v28.i64[0];
          v37 = vaddq_s16(v33, v25);
          v29.i64[1] = v31.i64[0];
          v38 = vaddq_s16(v34, v26);
          v39 = vsubq_s16(v25, v33);
          v30.i64[1] = v32.i64[0];
          v40 = vaddq_s16(v35, v29);
          v41 = vaddq_s16(v36, v30);
          v42 = vsubq_s16(v26, v34);
          v43 = vsubq_s16(v29, v35);
          v44 = vsubq_s16(v30, v36);
          v45 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v37, v40)), (uint16x8_t)vabsq_s16(vsubq_s16(v38, v41))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v40, v37)), (uint16x8_t)vabsq_s16(vaddq_s16(v41, v38))));
          v46 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v39, v43)), (uint16x8_t)vabsq_s16(vsubq_s16(v42, v44))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v43, v39)), (uint16x8_t)vabsq_s16(vaddq_s16(v44, v42))));
          v15 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v15, v45), *(uint16x4_t *)v45.i8), v46), *(uint16x4_t *)v46.i8);
        }
        v12 = v12 + ((vaddvq_s32(v15) + 2) >> 2);
        v14 += 16;
      }
      while ((int)v14 < a1);
    }
    a3 += v49;
    a5 += v13;
    v47 = __OFSUB__(a2, 16);
    a2 -= 16;
  }
  while (!((a2 < 0) ^ v47 | (a2 == 0)));
  return v12;
}

uint64_t sub_1B6881744(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int16x8_t *v12;
  int i;
  uint64_t j;
  int16x8_t *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  uint64_t v52;
  int32x4_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int16x8_t v71[64];
  int16x8_t v72[64];
  uint64_t v73;

  v10 = 0;
  v73 = *MEMORY[0x1E0C80C00];
  v67 = 32 * a6;
  v68 = 32 * a4;
  do
  {
    v69 = a2;
    if (a1 >= 1)
    {
      v11 = 0;
      do
      {
        v12 = v71;
        sub_1B6882B8C((uint8x8_t *)(a3 + v11), a4, (uint8x8_t *)(a5 + v11), a6, 32, v71);
        sub_1B6882B8C((uint8x8_t *)(a3 + v11 + 16), a4, (uint8x8_t *)(a5 + v11 + 16), a6, 32, v72);
        for (i = 0; i != 4; ++i)
        {
          for (j = 9; j != 17; j += 2)
          {
            v15 = &v12[j];
            v16 = v12[j - 9];
            v17 = v12[j - 8];
            v18 = v12[j - 1];
            v19 = v12[j];
            v20 = v12[j + 7];
            v21 = v12[j + 8];
            v22 = v12[j + 15];
            v23 = v12[j + 16];
            v24 = vaddq_s16(v18, v16);
            v25 = vaddq_s16(v19, v17);
            v26 = (int64x2_t)vsubq_s16(v16, v18);
            v27 = (int64x2_t)vsubq_s16(v17, v19);
            v28 = vaddq_s16(v22, v20);
            v29 = vaddq_s16(v23, v21);
            v30 = (int64x2_t)vsubq_s16(v20, v22);
            v31 = (int64x2_t)vsubq_s16(v21, v23);
            v32 = (int16x8_t)vzip2q_s64((int64x2_t)v24, v26);
            v33 = (int16x8_t)vzip2q_s64((int64x2_t)v25, v27);
            v34 = (int16x8_t)vzip2q_s64((int64x2_t)v28, v30);
            v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
            v24.i64[1] = v26.i64[0];
            v25.i64[1] = v27.i64[0];
            v36 = vaddq_s16(v32, v24);
            v37 = vaddq_s16(v33, v25);
            v38 = vsubq_s16(v24, v32);
            v39 = vsubq_s16(v25, v33);
            v28.i64[1] = v30.i64[0];
            v29.i64[1] = v31.i64[0];
            v40 = vaddq_s16(v34, v28);
            v41 = vaddq_s16(v35, v29);
            v42 = vsubq_s16(v28, v34);
            v43 = vsubq_s16(v29, v35);
            v44 = vrhaddq_s16(v36, v40);
            v45 = vrhaddq_s16(v37, v41);
            v46 = vrshrq_n_s16(vsubq_s16(v36, v40), 1uLL);
            v47 = vrshrq_n_s16(vsubq_s16(v37, v41), 1uLL);
            v48 = vrhaddq_s16(v38, v42);
            v49 = vrhaddq_s16(v39, v43);
            v50 = vrshrq_n_s16(vsubq_s16(v38, v42), 1uLL);
            v15[-9] = vhaddq_s16(v44, v45);
            v15[-8] = vhaddq_s16(v46, v47);
            v51 = vrshrq_n_s16(vsubq_s16(v39, v43), 1uLL);
            v15[-1] = vhaddq_s16(v48, v49);
            *v15 = vhaddq_s16(v50, v51);
            v15[7] = vhsubq_s16(v44, v45);
            v15[8] = vhsubq_s16(v46, v47);
            v15[15] = vhsubq_s16(v48, v49);
            v15[16] = vhsubq_s16(v50, v51);
          }
          v12 += 32;
        }
        v52 = 0;
        v53 = 0uLL;
        do
        {
          v54 = v71[v52];
          v55 = v71[v52 + 1];
          v56 = v71[v52 + 64];
          v57 = v72[v52 + 1];
          v58 = v71[v52 + 32];
          v59 = v71[v52 + 33];
          v60 = v72[v52 + 32];
          v61 = v72[v52 + 33];
          v62 = vaddq_s16(v58, v54);
          v63 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v54, v58)), (uint16x8_t)vabsq_s16(vsubq_s16(v56, v60)));
          v64 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v59, v55)), (uint16x8_t)vabsq_s16(vaddq_s16(v61, v57))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v62), (uint16x8_t)vabsq_s16(vaddq_s16(v60, v56))));
          v65 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v55, v59)), (uint16x8_t)vabsq_s16(vsubq_s16(v57, v61))), v63);
          v53 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v53, v64), *(uint16x4_t *)v64.i8), v65), *(uint16x4_t *)v65.i8);
          v52 += 2;
        }
        while (v52 != 32);
        v10 = v10 + ((vaddvq_s32(v53) + 1) >> 1);
        v11 += 32;
      }
      while ((int)v11 < a1);
    }
    a3 += v68;
    a5 += v67;
    a2 = v69 - 32;
  }
  while (v69 > 32);
  return v10;
}

float sub_1B6881A08(int a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  int v6;
  int16x8_t v7;
  uint8x8_t *v8;
  uint8x8_t v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  int32x4_t v43;
  int32x4_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t i;
  uint8x16_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  uint16x8_t v100;

  if (a1 >= 8)
  {
    v35 = 4 * a4;
    v36 = 4 * a6;
    v37 = (char *)a5 + 3 * a6;
    v38 = (char *)a5 + 2 * a6;
    v39 = (char *)a5 + a6;
    v40 = (char *)a3 + 3 * a4;
    v41 = (char *)a3 + 2 * a4;
    v42 = (char *)a3 + a4;
    v43 = 0uLL;
    v44 = 0uLL;
    v45 = a1;
    do
    {
      v46 = 0;
      for (i = 0; i < v45; i += 8)
      {
        v48 = *(uint8x16_t *)a3[v46 / 8].i8;
        v49 = *(uint8x16_t *)&v42[v46];
        v50 = *(uint8x16_t *)&v41[v46];
        v51 = *(uint8x16_t *)&v40[v46];
        v52 = *(uint8x16_t *)a5[v46 / 8].i8;
        v53 = *(uint8x16_t *)&v39[v46];
        v54 = *(uint8x16_t *)&v38[v46];
        v55 = *(uint8x16_t *)&v37[v46];
        v56 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v52.i8);
        v57 = (int16x8_t)vsubl_high_u8(v48, v52);
        v58 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v49.i8, *(uint8x8_t *)v53.i8);
        v59 = (int16x8_t)vsubl_high_u8(v49, v53);
        v60 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v54.i8);
        v61 = (int16x8_t)vsubl_high_u8(v50, v54);
        v62 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v55.i8);
        v63 = (int16x8_t)vsubl_high_u8(v51, v55);
        v64 = vaddq_s16(v58, v56);
        v65 = vsubq_s16(v56, v58);
        v66 = vaddq_s16(v62, v60);
        v67 = vsubq_s16(v60, v62);
        v68 = vzip1q_s16(v64, v65);
        v69 = vzip2q_s16(v64, v65);
        v70 = vzip1q_s16(v66, v67);
        v71 = vzip2q_s16(v66, v67);
        v72 = (int32x4_t)vaddq_s16(v70, v68);
        v73 = (int32x4_t)vsubq_s16(v68, v70);
        v74 = (int32x4_t)vaddq_s16(v71, v69);
        v75 = (int32x4_t)vsubq_s16(v69, v71);
        v76 = (int16x8_t)vzip1q_s32(v72, v73);
        v77 = (int16x8_t)vzip2q_s32(v72, v73);
        v78 = (int16x8_t)vzip1q_s32(v74, v75);
        v79 = (int16x8_t)vzip2q_s32(v74, v75);
        v80 = vaddq_s16(v78, v76);
        v81 = vsubq_s16(v76, v78);
        v82 = vaddq_s16(v79, v77);
        v83 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v81), (uint16x8_t)vabsq_s16(vsubq_s16(v77, v79)));
        v84 = vaddq_s16(v59, v57);
        v85 = vsubq_s16(v57, v59);
        v86 = vaddq_s16(v63, v61);
        v87 = vsubq_s16(v61, v63);
        v88 = vzip1q_s16(v84, v85);
        v89 = vzip2q_s16(v84, v85);
        v90 = vzip1q_s16(v86, v87);
        v91 = vzip2q_s16(v86, v87);
        v92 = (int32x4_t)vaddq_s16(v90, v88);
        v93 = (int32x4_t)vsubq_s16(v88, v90);
        v94 = (int32x4_t)vaddq_s16(v91, v89);
        v95 = (int32x4_t)vsubq_s16(v89, v91);
        v96 = (int16x8_t)vzip1q_s32(v92, v93);
        v97 = (int16x8_t)vzip2q_s32(v92, v93);
        v98 = (int16x8_t)vzip1q_s32(v94, v95);
        v99 = (int16x8_t)vzip2q_s32(v94, v95);
        v100 = (uint16x8_t)vaddq_s16(vaddq_s16(v83, (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v80), (uint16x8_t)vabsq_s16(v82))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v98, v96)), (uint16x8_t)vabsq_s16(vaddq_s16(v99, v97))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v96, v98)), (uint16x8_t)vabsq_s16(vsubq_s16(v97, v99)))));
        v44 = (int32x4_t)vaddw_u16((uint32x4_t)v44, *(uint16x4_t *)v100.i8);
        v43 = (int32x4_t)vaddw_high_u16((uint32x4_t)v43, v100);
        v46 += 16;
      }
      a3 = (uint8x8_t *)((char *)a3 + v35);
      a5 = (uint8x8_t *)((char *)a5 + v36);
      v37 += v36;
      v38 += v36;
      v39 += v36;
      v40 += v35;
      v41 += v35;
      v42 += v35;
      a2 -= 4;
    }
    while (a2);
    return COERCE_FLOAT(vaddvq_s32(vaddq_s32(v44, v43)));
  }
  else
  {
    v6 = a2 + 4;
    v7 = 0uLL;
    do
    {
      v8 = (uint8x8_t *)((char *)a3 + a4 + a4);
      v9 = *v8;
      v10 = (uint8x8_t *)((char *)v8 + a4);
      v11 = (uint8x8_t *)((char *)a5 + a6 + a6);
      v12 = *v11;
      v13 = (uint8x8_t *)((char *)v11 + a6);
      v14 = (int16x8_t)vsubl_u8(*a3, *a5);
      v15 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a3 + a4), *(uint8x8_t *)((char *)a5 + a6));
      v16 = (int16x8_t)vsubl_u8(v9, v12);
      v17 = (int16x8_t)vsubl_u8(*v10, *v13);
      v18 = vaddq_s16(v15, v14);
      v19 = vsubq_s16(v14, v15);
      v20 = vaddq_s16(v17, v16);
      v21 = vsubq_s16(v16, v17);
      v22 = vzip1q_s16(v18, v19);
      v23 = vzip2q_s16(v18, v19);
      v24 = vzip1q_s16(v20, v21);
      v25 = vzip2q_s16(v20, v21);
      v26 = (int32x4_t)vaddq_s16(v24, v22);
      v27 = (int32x4_t)vsubq_s16(v22, v24);
      v28 = (int32x4_t)vaddq_s16(v25, v23);
      v29 = (int32x4_t)vsubq_s16(v23, v25);
      v30 = (int16x8_t)vzip1q_s32(v26, v27);
      v31 = (int16x8_t)vzip2q_s32(v26, v27);
      v32 = (int16x8_t)vzip1q_s32(v28, v29);
      v33 = (int16x8_t)vzip2q_s32(v28, v29);
      v7 = vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v32, v30)), (uint16x8_t)vabsq_s16(vaddq_s16(v33, v31))), v7), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v30, v32)), (uint16x8_t)vabsq_s16(vsubq_s16(v31, v33))));
      v6 -= 4;
      a3 = (uint8x8_t *)((char *)v10 + a4);
      a5 = (uint8x8_t *)((char *)v13 + a6);
    }
    while (v6 > 4);
    return COERCE_FLOAT(vaddlvq_u16((uint16x8_t)v7));
  }
}

float sub_1B6881C9C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int32x2_t v6;
  uint64_t v7;
  uint64_t i;
  uint8x16_t v9;
  uint8x16_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint8x8_t *v13;
  uint8x8_t *v14;
  int16x8_t v15;
  int16x8_t v16;
  uint8x8_t *v17;
  uint8x8_t *v18;
  int16x8_t v19;
  int16x8_t v20;
  uint8x8_t *v21;
  uint8x8_t *v22;
  int16x8_t v23;
  int16x8_t v24;
  uint8x8_t *v25;
  uint8x8_t *v26;
  int16x8_t v27;
  int16x8_t v28;
  uint8x8_t *v29;
  uint8x8_t *v30;
  int16x8_t v31;
  int16x8_t v32;
  uint8x8_t *v33;
  uint8x8_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int16x8_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int32x4_t v143;
  BOOL v144;
  float result;

  v6 = 0;
  do
  {
    if (a1 >= 1)
    {
      v7 = 0;
      for (i = 0; i < a1; i += 8)
      {
        v9 = *(uint8x16_t *)(a3 + v7);
        v10 = *(uint8x16_t *)(a5 + v7);
        v11 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v10.i8);
        v12 = (int16x8_t)vsubl_high_u8(v9, v10);
        v13 = (uint8x8_t *)(a3 + v7 + a4);
        v14 = (uint8x8_t *)(a5 + v7 + a6);
        v15 = (int16x8_t)vsubl_u8(*v13, *v14);
        v16 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v13->i8, *(uint8x16_t *)v14->i8);
        v17 = (uint8x8_t *)((char *)v13 + a4);
        v18 = (uint8x8_t *)((char *)v14 + a6);
        v19 = (int16x8_t)vsubl_u8(*v17, *v18);
        v20 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v17->i8, *(uint8x16_t *)v18->i8);
        v21 = (uint8x8_t *)((char *)v17 + a4);
        v22 = (uint8x8_t *)((char *)v18 + a6);
        v23 = (int16x8_t)vsubl_u8(*v21, *v22);
        v24 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v21->i8, *(uint8x16_t *)v22->i8);
        v25 = (uint8x8_t *)((char *)v21 + a4);
        v26 = (uint8x8_t *)((char *)v22 + a6);
        v27 = (int16x8_t)vsubl_u8(*v25, *v26);
        v28 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v25->i8, *(uint8x16_t *)v26->i8);
        v29 = (uint8x8_t *)((char *)v25 + a4);
        v30 = (uint8x8_t *)((char *)v26 + a6);
        v31 = (int16x8_t)vsubl_u8(*v29, *v30);
        v32 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v29->i8, *(uint8x16_t *)v30->i8);
        v33 = (uint8x8_t *)((char *)v29 + a4);
        v34 = (uint8x8_t *)((char *)v30 + a6);
        v35 = (int16x8_t)vsubl_u8(*v33, *v34);
        v36 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v33->i8, *(uint8x16_t *)v34->i8);
        v37 = *(uint8x16_t *)&v33->i8[a4];
        v38 = *(uint8x16_t *)&v34->i8[a6];
        v39 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v38.i8);
        v40 = (int16x8_t)vsubl_high_u8(v37, v38);
        v41 = vaddq_s16(v15, v11);
        v42 = vsubq_s16(v11, v15);
        v43 = vaddq_s16(v23, v19);
        v44 = vsubq_s16(v19, v23);
        v45 = vzip1q_s16(v41, v42);
        v46 = vzip2q_s16(v41, v42);
        v47 = vzip1q_s16(v43, v44);
        v48 = vzip2q_s16(v43, v44);
        v49 = (int32x4_t)vaddq_s16(v47, v45);
        v50 = (int32x4_t)vsubq_s16(v45, v47);
        v51 = (int32x4_t)vaddq_s16(v48, v46);
        v52 = (int32x4_t)vsubq_s16(v46, v48);
        v53 = (int16x8_t)vzip1q_s32(v49, v50);
        v54 = (int16x8_t)vzip2q_s32(v49, v50);
        v55 = (int16x8_t)vzip1q_s32(v51, v52);
        v56 = (int16x8_t)vzip2q_s32(v51, v52);
        v57 = vaddq_s16(v54, v53);
        v58 = vsubq_s16(v53, v54);
        v59 = vaddq_s16(v56, v55);
        v60 = vsubq_s16(v55, v56);
        v61 = vaddq_s16(v16, v12);
        v62 = vsubq_s16(v12, v16);
        v63 = vaddq_s16(v57, v59);
        v64 = vaddq_s16(v24, v20);
        v65 = vsubq_s16(v20, v24);
        v66 = vzip1q_s16(v61, v62);
        v67 = vzip2q_s16(v61, v62);
        v68 = vzip1q_s16(v64, v65);
        v69 = vsubq_s16(v57, v59);
        v70 = vzip2q_s16(v64, v65);
        v71 = (int32x4_t)vaddq_s16(v68, v66);
        v72 = (int32x4_t)vsubq_s16(v66, v68);
        v73 = (int32x4_t)vaddq_s16(v70, v67);
        v74 = (int32x4_t)vsubq_s16(v67, v70);
        v75 = vaddq_s16(v60, v58);
        v76 = (int16x8_t)vzip1q_s32(v71, v72);
        v77 = (int16x8_t)vzip2q_s32(v71, v72);
        v78 = (int16x8_t)vzip1q_s32(v73, v74);
        v79 = (int16x8_t)vzip2q_s32(v73, v74);
        v80 = vaddq_s16(v77, v76);
        v81 = vsubq_s16(v58, v60);
        v82 = vsubq_s16(v76, v77);
        v83 = vaddq_s16(v79, v78);
        v84 = vsubq_s16(v78, v79);
        v85 = vaddq_s16(v80, v83);
        v86 = vsubq_s16(v80, v83);
        v87 = vaddq_s16(v84, v82);
        v88 = vsubq_s16(v82, v84);
        v89 = vaddq_s16(v85, v63);
        v90 = vsubq_s16(v63, v85);
        v91 = vaddq_s16(v87, v75);
        v92 = vsubq_s16(v75, v87);
        v93 = vaddq_s16(v86, v69);
        v94 = vaddq_s16(v31, v27);
        v95 = vsubq_s16(v27, v31);
        v96 = vaddq_s16(v39, v35);
        v97 = vsubq_s16(v35, v39);
        v98 = vzip1q_s16(v94, v95);
        v99 = vsubq_s16(v69, v86);
        v100 = vzip2q_s16(v94, v95);
        v101 = vzip1q_s16(v96, v97);
        v102 = vzip2q_s16(v96, v97);
        v103 = (int32x4_t)vaddq_s16(v101, v98);
        v104 = (int32x4_t)vsubq_s16(v98, v101);
        v105 = (int32x4_t)vaddq_s16(v102, v100);
        v106 = (int32x4_t)vsubq_s16(v100, v102);
        v107 = (int16x8_t)vzip1q_s32(v103, v104);
        v108 = (int16x8_t)vzip2q_s32(v103, v104);
        v109 = (int16x8_t)vzip1q_s32(v105, v106);
        v110 = (int16x8_t)vzip2q_s32(v105, v106);
        v111 = vaddq_s16(v108, v107);
        v112 = vsubq_s16(v107, v108);
        v113 = vaddq_s16(v110, v109);
        v114 = vsubq_s16(v109, v110);
        v115 = vaddq_s16(v111, v113);
        v116 = vaddq_s16(v32, v28);
        v117 = vsubq_s16(v28, v32);
        v118 = vaddq_s16(v40, v36);
        v119 = vsubq_s16(v36, v40);
        v120 = vzip1q_s16(v116, v117);
        v121 = vsubq_s16(v111, v113);
        v122 = vzip2q_s16(v116, v117);
        v123 = vzip1q_s16(v118, v119);
        v124 = vzip2q_s16(v118, v119);
        v125 = (int32x4_t)vaddq_s16(v123, v120);
        v126 = (int32x4_t)vsubq_s16(v120, v123);
        v127 = vaddq_s16(v114, v112);
        v128 = (int32x4_t)vaddq_s16(v124, v122);
        v129 = (int32x4_t)vsubq_s16(v122, v124);
        v130 = (int16x8_t)vzip1q_s32(v125, v126);
        v131 = (int16x8_t)vzip2q_s32(v125, v126);
        v132 = (int16x8_t)vzip1q_s32(v128, v129);
        v133 = vsubq_s16(v112, v114);
        v134 = (int16x8_t)vzip2q_s32(v128, v129);
        v135 = vaddq_s16(v131, v130);
        v136 = vsubq_s16(v130, v131);
        v137 = vaddq_s16(v134, v132);
        v138 = vsubq_s16(v132, v134);
        v139 = vaddq_s16(v135, v137);
        v140 = vsubq_s16(v135, v137);
        v141 = vaddq_s16(v138, v136);
        v142 = vsubq_s16(v136, v138);
        v143 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v90), (uint16x8_t)vabsq_s16(vsubq_s16(v115, v139))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v89), (uint16x8_t)vabsq_s16(vaddq_s16(v139, v115)))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v91), (uint16x8_t)vabsq_s16(vaddq_s16(v141, v127))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v92), (uint16x8_t)vabsq_s16(vsubq_s16(v127, v141))))), vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16(
                                                                       (uint16x8_t)vabsq_s16(v93),
                                                                       (uint16x8_t)vabsq_s16(vaddq_s16(v140, v121))),
                                                          (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v99), (uint16x8_t)vabsq_s16(vsubq_s16(v121, v140)))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v88, v81)), (uint16x8_t)vabsq_s16(vaddq_s16(v142, v133))))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v81, v88)), (uint16x8_t)vabsq_s16(vsubq_s16(v133, v142)))));
        v7 += 16;
        v6 = (int32x2_t)vrsra_n_u32((uint32x2_t)v6, (uint32x2_t)*(_OWORD *)&vpaddq_s32(v143, v143), 1uLL);
      }
    }
    a3 += 8 * a4;
    a5 += 8 * a6;
    v144 = __OFSUB__(a2, 8);
    a2 -= 8;
  }
  while (!((a2 < 0) ^ v144 | (a2 == 0)));
  LODWORD(result) = vpadd_s32(v6, v6).u32[0];
  return result;
}

float sub_1B6881FE8(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int32x2_t v6;
  uint64_t i;
  unsigned int v8;
  uint64_t v9;
  int16x8_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint8x8_t *v14;
  uint8x8_t *v15;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  uint8x16_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  BOOL v78;
  uint64_t v79;
  int32x4_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  BOOL v97;
  float result;
  _BYTE v99[1032];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  do
  {
    if (a1 >= 1)
    {
      for (i = 0; i < a1; i += 16)
      {
        v8 = 0;
        v9 = a3 + 2 * i;
        v10 = (int16x8_t *)v99;
        v11 = a5 + 2 * i;
        do
        {
          v12 = 0;
          v13 = 1;
          do
          {
            v14 = (uint8x8_t *)(v9 + v12);
            v15 = (uint8x8_t *)(v11 + v12);
            v16 = *(uint8x16_t *)&v14->i8[a4];
            v17 = *(uint8x16_t *)&v14->i8[2 * a4];
            v18 = *(uint8x16_t *)&v14->i8[3 * a4];
            v19 = *(uint8x16_t *)&v15->i8[a6];
            v20 = *(uint8x16_t *)&v15->i8[2 * a6];
            v21 = (int16x8_t)vsubl_u8(*v14, *v15);
            v22 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v14->i8, *(uint8x16_t *)v15->i8);
            v23 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v16.i8, *(uint8x8_t *)v19.i8);
            v24 = (int16x8_t)vsubl_high_u8(v16, v19);
            v25 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v20.i8);
            v26 = (int16x8_t)vsubl_high_u8(v17, v20);
            v27 = *(uint8x16_t *)&v15->i8[3 * a6];
            v28 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v27.i8);
            v29 = (int16x8_t)vsubl_high_u8(v18, v27);
            v30 = vaddq_s16(v23, v21);
            v31 = vsubq_s16(v21, v23);
            v32 = vaddq_s16(v28, v25);
            v33 = vsubq_s16(v25, v28);
            v34 = vzip1q_s16(v30, v31);
            v35 = vzip2q_s16(v30, v31);
            v36 = vzip1q_s16(v32, v33);
            v37 = vzip2q_s16(v32, v33);
            v38 = (int32x4_t)vaddq_s16(v36, v34);
            v39 = (int32x4_t)vsubq_s16(v34, v36);
            v40 = (int32x4_t)vaddq_s16(v37, v35);
            v41 = (int32x4_t)vsubq_s16(v35, v37);
            v42 = (int16x8_t)vzip1q_s32(v38, v39);
            v43 = (int16x8_t)vzip2q_s32(v38, v39);
            v44 = (int16x8_t)vzip1q_s32(v40, v41);
            v45 = (int16x8_t)vzip2q_s32(v40, v41);
            v46 = vaddq_s16(v43, v42);
            v47 = vsubq_s16(v42, v43);
            v48 = vaddq_s16(v45, v44);
            v49 = vsubq_s16(v44, v45);
            v50 = vaddq_s16(v46, v48);
            v51 = vsubq_s16(v46, v48);
            v52 = vaddq_s16(v49, v47);
            v53 = vsubq_s16(v47, v49);
            v54 = vaddq_s16(v24, v22);
            v55 = vsubq_s16(v22, v24);
            v56 = vaddq_s16(v29, v26);
            v57 = vsubq_s16(v26, v29);
            v58 = vzip1q_s16(v54, v55);
            v59 = vzip2q_s16(v54, v55);
            v60 = vzip1q_s16(v56, v57);
            v61 = vzip2q_s16(v56, v57);
            v62 = (int32x4_t)vaddq_s16(v60, v58);
            v63 = (int32x4_t)vsubq_s16(v58, v60);
            v64 = (int32x4_t)vaddq_s16(v61, v59);
            v65 = (int32x4_t)vsubq_s16(v59, v61);
            v66 = (int16x8_t)vzip1q_s32(v62, v63);
            v67 = (int16x8_t)vzip2q_s32(v62, v63);
            v68 = (int16x8_t)vzip1q_s32(v64, v65);
            v69 = (int16x8_t)vzip2q_s32(v64, v65);
            v70 = vaddq_s16(v67, v66);
            v71 = vsubq_s16(v66, v67);
            v72 = vaddq_s16(v69, v68);
            v73 = vsubq_s16(v68, v69);
            v74 = vaddq_s16(v70, v72);
            v75 = vsubq_s16(v70, v72);
            v76 = vaddq_s16(v73, v71);
            *v10 = vaddq_s16(v74, v50);
            v10[1] = vaddq_s16(v76, v52);
            LOBYTE(v14) = v13;
            v77 = vsubq_s16(v71, v73);
            v10[2] = vaddq_s16(v75, v51);
            v10[3] = vaddq_s16(v77, v53);
            v10[4] = vsubq_s16(v50, v74);
            v10[5] = vsubq_s16(v52, v76);
            v10[6] = vsubq_s16(v51, v75);
            v10[7] = vsubq_s16(v53, v77);
            v10 += 8;
            v12 = 16;
            v13 = 0;
          }
          while ((v14 & 1) != 0);
          v9 += 4 * a4;
          v11 += 4 * a6;
          v78 = v8 >= 0xC;
          v8 += 4;
        }
        while (!v78);
        v79 = 0;
        v80 = 0uLL;
        do
        {
          v81 = *(int16x8_t *)&v99[v79];
          v82 = *(int16x8_t *)&v99[v79 + 128];
          v83 = *(int16x8_t *)&v99[v79 + 256];
          v84 = *(int16x8_t *)&v99[v79 + 384];
          v85 = *(int16x8_t *)&v99[v79 + 512];
          v86 = *(int16x8_t *)&v99[v79 + 640];
          v87 = *(int16x8_t *)&v99[v79 + 768];
          v88 = *(int16x8_t *)&v99[v79 + 896];
          v89 = vaddq_s16(v83, v81);
          v90 = vaddq_s16(v84, v82);
          v91 = vsubq_s16(v81, v83);
          v92 = vsubq_s16(v82, v84);
          v93 = vaddq_s16(v87, v85);
          v94 = vaddq_s16(v88, v86);
          v95 = vsubq_s16(v85, v87);
          v96 = vsubq_s16(v86, v88);
          v80 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v80, (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v89, v93)), (uint16x8_t)vabsq_s16(vsubq_s16(v90, v94))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v93, v89)), (uint16x8_t)vabsq_s16(vaddq_s16(v94, v90))))), (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v91, v95)), (uint16x8_t)vabsq_s16(vsubq_s16(v92, v96))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v95, v91)), (uint16x8_t)vabsq_s16(vaddq_s16(v96, v92)))));
          v79 += 16;
        }
        while (v79 != 128);
        v6 = (int32x2_t)vrsra_n_u32((uint32x2_t)v6, (uint32x2_t)*(_OWORD *)&vpaddq_s32(v80, v80), 2uLL);
      }
    }
    a3 += 16 * a4;
    a5 += 16 * a6;
    v97 = __OFSUB__(a2, 16);
    a2 -= 16;
  }
  while (!((a2 < 0) ^ v97 | (a2 == 0)));
  LODWORD(result) = vpadd_s32(v6, v6).u32[0];
  return result;
}

float sub_1B68822E4(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int64x2_t v64;
  int16x8_t v65;
  int64x2_t v66;
  int16x8_t v67;
  int64x2_t v68;
  int16x8_t v69;
  int64x2_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  float result;

  v5 = (int16x8_t)vsubl_u8(*a1, *a3);
  v6 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + a2), *(uint8x8_t *)((char *)a3 + a4));
  v7 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2), *(uint8x8_t *)((char *)a3 + 2 * a4));
  v8 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a1 + 3 * a2), *(uint8x8_t *)((char *)a3 + 3 * a4));
  v9 = (uint8x8_t *)((char *)a1 + 4 * a2);
  v10 = (uint8x8_t *)((char *)a3 + 4 * a4);
  v11 = (int16x8_t)vsubl_u8(*v9, *v10);
  v12 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + a2), *(uint8x8_t *)((char *)v10 + a4));
  v13 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + 2 * a2), *(uint8x8_t *)((char *)v10 + 2 * a4));
  v14 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + 3 * a2), *(uint8x8_t *)((char *)v10 + 3 * a4));
  v15 = vaddq_s16(v6, v5);
  v16 = vsubq_s16(v5, v6);
  v17 = vaddq_s16(v8, v7);
  v18 = vsubq_s16(v7, v8);
  v19 = vtrn1q_s16(v15, v16);
  v20 = vtrn2q_s16(v15, v16);
  v21 = vtrn1q_s16(v17, v18);
  v22 = vtrn2q_s16(v17, v18);
  v23 = vaddq_s16(v20, v19);
  v24 = vsubq_s16(v19, v20);
  v25 = vaddq_s16(v22, v21);
  v26 = vsubq_s16(v21, v22);
  v27 = (int32x4_t)vaddq_s16(v25, v23);
  v28 = (int32x4_t)vsubq_s16(v23, v25);
  v29 = (int32x4_t)vaddq_s16(v26, v24);
  v30 = (int32x4_t)vsubq_s16(v24, v26);
  v31 = (int16x8_t)vtrn1q_s32(v27, v28);
  v32 = (int16x8_t)vtrn2q_s32(v27, v28);
  v33 = (int16x8_t)vtrn1q_s32(v29, v30);
  v34 = (int16x8_t)vtrn2q_s32(v29, v30);
  v35 = vaddq_s16(v32, v31);
  v36 = vsubq_s16(v31, v32);
  v37 = vaddq_s16(v34, v33);
  v38 = vsubq_s16(v33, v34);
  v39 = vaddq_s16(v12, v11);
  v40 = vsubq_s16(v11, v12);
  v41 = vaddq_s16(v14, v13);
  v42 = vsubq_s16(v13, v14);
  v43 = vtrn1q_s16(v39, v40);
  v44 = vtrn2q_s16(v39, v40);
  v45 = vtrn1q_s16(v41, v42);
  v46 = vtrn2q_s16(v41, v42);
  v47 = vaddq_s16(v44, v43);
  v48 = vsubq_s16(v43, v44);
  v49 = vaddq_s16(v46, v45);
  v50 = vsubq_s16(v45, v46);
  v51 = (int32x4_t)vaddq_s16(v49, v47);
  v52 = (int32x4_t)vsubq_s16(v47, v49);
  v53 = (int32x4_t)vaddq_s16(v50, v48);
  v54 = (int32x4_t)vsubq_s16(v48, v50);
  v55 = (int16x8_t)vtrn1q_s32(v51, v52);
  v56 = (int16x8_t)vtrn2q_s32(v51, v52);
  v57 = (int16x8_t)vtrn1q_s32(v53, v54);
  v58 = (int16x8_t)vtrn2q_s32(v53, v54);
  v59 = vaddq_s16(v56, v55);
  v60 = vsubq_s16(v55, v56);
  v61 = vaddq_s16(v58, v57);
  v62 = vsubq_s16(v57, v58);
  *(uint32x4_t *)(a5 + 4) = vshrq_n_u32(vpaddlq_u16((uint16x8_t)vpaddq_s16(vaddq_s16(vaddq_s16(vabsq_s16(v37), vabsq_s16(v35)), vaddq_s16(vabsq_s16(v36), vabsq_s16(v38))), vaddq_s16(vaddq_s16(vabsq_s16(v61), vabsq_s16(v59)), vaddq_s16(vabsq_s16(v60), vabsq_s16(v62))))), 1uLL);
  v63 = vaddq_s16(v59, v35);
  v64 = (int64x2_t)vsubq_s16(v35, v59);
  v65 = vaddq_s16(v61, v37);
  v66 = (int64x2_t)vsubq_s16(v37, v61);
  v67 = vaddq_s16(v60, v36);
  v68 = (int64x2_t)vsubq_s16(v36, v60);
  v69 = vaddq_s16(v62, v38);
  v70 = (int64x2_t)vsubq_s16(v38, v62);
  v71 = (int16x8_t)vzip2q_s64((int64x2_t)v63, v64);
  v72 = (int16x8_t)vzip2q_s64((int64x2_t)v65, v66);
  v73 = (int16x8_t)vzip2q_s64((int64x2_t)v67, v68);
  v74 = (int16x8_t)vzip2q_s64((int64x2_t)v69, v70);
  v63.i64[1] = v64.i64[0];
  v65.i64[1] = v66.i64[0];
  v67.i64[1] = v68.i64[0];
  v69.i64[1] = v70.i64[0];
  result = COERCE_FLOAT(vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v65), (uint16x8_t)vabsq_s16(v72)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v63), (uint16x8_t)vabsq_s16(v71))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v67), (uint16x8_t)vabsq_s16(v73)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v69), (uint16x8_t)vabsq_s16(v74))))));
  *(_DWORD *)a5 = (LODWORD(result) + 1) >> 1;
  return result;
}

float sub_1B68824F8(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  int32x4_t v6;
  uint64_t v7;
  uint32x4_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  float result;
  int16x8_t v42[32];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  sub_1B68829F4(a1, a2, a3, a4, 16, v42, 4u, (uint32x4_t *)(a5 + 20));
  v6 = 0uLL;
  v7 = 9;
  v8 = 0uLL;
  do
  {
    v9 = v42[v7 - 9];
    v10 = v42[v7 - 8];
    v11 = v42[v7 - 1];
    v12 = v42[v7];
    v13 = v42[v7 + 7];
    v14 = v42[v7 + 8];
    v15 = v42[v7 + 15];
    v16 = v42[v7 + 16];
    v17 = vaddq_s16(v11, v9);
    v18 = vaddq_s16(v12, v10);
    v19 = (int64x2_t)vsubq_s16(v9, v11);
    v20 = (int64x2_t)vsubq_s16(v10, v12);
    v21 = vaddq_s16(v15, v13);
    v22 = vaddq_s16(v16, v14);
    v23 = (int64x2_t)vsubq_s16(v13, v15);
    v24 = (int64x2_t)vsubq_s16(v14, v16);
    v25 = (int16x8_t)vzip2q_s64((int64x2_t)v17, v19);
    v26 = (int16x8_t)vzip2q_s64((int64x2_t)v18, v20);
    v27 = (int16x8_t)vzip2q_s64((int64x2_t)v21, v23);
    v28 = (int16x8_t)vzip2q_s64((int64x2_t)v22, v24);
    v17.i64[1] = v19.i64[0];
    v18.i64[1] = v20.i64[0];
    v29 = vaddq_s16(v25, v17);
    v30 = vaddq_s16(v26, v18);
    v31 = vsubq_s16(v17, v25);
    v21.i64[1] = v23.i64[0];
    v22.i64[1] = v24.i64[0];
    v32 = vsubq_s16(v18, v26);
    v33 = vaddq_s16(v27, v21);
    v34 = vaddq_s16(v28, v22);
    v35 = vsubq_s16(v21, v27);
    v36 = vsubq_s16(v22, v28);
    v37 = vaddq_s16(vabsq_s16(v31), vabsq_s16(v29));
    v38 = vaddq_s16(vabsq_s16(v32), vabsq_s16(v30));
    v39 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v29, v33)), (uint16x8_t)vabsq_s16(vsubq_s16(v30, v34))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v33, v29)), (uint16x8_t)vabsq_s16(vaddq_s16(v34, v30))));
    v40 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v31, v35)), (uint16x8_t)vabsq_s16(vsubq_s16(v32, v36))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v35, v31)), (uint16x8_t)vabsq_s16(vaddq_s16(v36, v32))));
    v8 = vpadalq_u16(v8, (uint16x8_t)vpaddq_s16(vpaddq_s16(v37, v38), vpaddq_s16(vaddq_s16(vabsq_s16(v35), vabsq_s16(v33)), vaddq_s16(vabsq_s16(v36), vabsq_s16(v34)))));
    v6 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v6, v39), *(uint16x4_t *)v39.i8), v40), *(uint16x4_t *)v40.i8);
    v7 += 2;
  }
  while (v7 != 17);
  *(uint32x4_t *)(a5 + 4) = vrshrq_n_u32(v8, 2uLL);
  result = COERCE_FLOAT(vaddvq_s32(v6));
  *(_DWORD *)a5 = (LODWORD(result) + 2) >> 2;
  return result;
}

float sub_1B68826B8(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  int16x8_t *v10;
  unsigned int i;
  int32x4_t v12;
  uint64_t v13;
  uint32x4_t v14;
  int16x8_t *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  uint32x4_t v56;
  int v57;
  uint64_t v58;
  int32x4_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  float result;
  int16x8_t v73[64];
  int16x8_t v74[64];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v10 = v73;
  sub_1B68829F4(a1, a2, a3, a4, 32, v73, 8u, (uint32x4_t *)(a5 + 84));
  sub_1B68829F4(a1 + 2, a2, a3 + 2, a4, 32, v74, 8u, (uint32x4_t *)(a5 + 100));
  for (i = 0; i != 4; ++i)
  {
    v12 = 0uLL;
    v13 = 9;
    v14 = 0uLL;
    do
    {
      v15 = &v10[v13];
      v16 = v10[v13 - 9];
      v17 = v10[v13 - 8];
      v18 = v10[v13 - 1];
      v19 = v10[v13];
      v20 = v10[v13 + 7];
      v21 = v10[v13 + 8];
      v22 = vaddq_s16(v18, v16);
      v23 = vaddq_s16(v19, v17);
      v24 = v10[v13 + 15];
      v25 = v10[v13 + 16];
      v26 = (int64x2_t)vsubq_s16(v16, v18);
      v27 = (int64x2_t)vsubq_s16(v17, v19);
      v28 = vaddq_s16(v24, v20);
      v29 = vaddq_s16(v25, v21);
      v30 = (int64x2_t)vsubq_s16(v20, v24);
      v31 = (int64x2_t)vsubq_s16(v21, v25);
      v32 = (int16x8_t)vzip2q_s64((int64x2_t)v22, v26);
      v33 = (int16x8_t)vzip2q_s64((int64x2_t)v23, v27);
      v34 = (int16x8_t)vzip2q_s64((int64x2_t)v28, v30);
      v35 = (int16x8_t)vzip2q_s64((int64x2_t)v29, v31);
      v22.i64[1] = v26.i64[0];
      v23.i64[1] = v27.i64[0];
      v36 = vaddq_s16(v32, v22);
      v37 = vaddq_s16(v33, v23);
      v38 = vsubq_s16(v22, v32);
      v39 = vsubq_s16(v23, v33);
      v28.i64[1] = v30.i64[0];
      v29.i64[1] = v31.i64[0];
      v40 = vaddq_s16(v34, v28);
      v41 = vaddq_s16(v35, v29);
      v42 = vsubq_s16(v28, v34);
      v43 = vsubq_s16(v29, v35);
      v14 = vpadalq_u16(v14, (uint16x8_t)vpaddq_s16(vpaddq_s16(vaddq_s16(vabsq_s16(v38), vabsq_s16(v36)), vaddq_s16(vabsq_s16(v39), vabsq_s16(v37))), vpaddq_s16(vaddq_s16(vabsq_s16(v42), vabsq_s16(v40)), vaddq_s16(vabsq_s16(v43), vabsq_s16(v41)))));
      v44 = vsubq_s16(v36, v40);
      v45 = vsubq_s16(v37, v41);
      v46 = vsubq_s16(v38, v42);
      v47 = vsubq_s16(v39, v43);
      v12 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v12, (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v44), (uint16x8_t)vabsq_s16(v45)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v40, v36)), (uint16x8_t)vabsq_s16(vaddq_s16(v41, v37))))), (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v46), (uint16x8_t)vabsq_s16(v47)), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v42, v38)), (uint16x8_t)vabsq_s16(vaddq_s16(v43, v39)))));
      v48 = vrhaddq_s16(v36, v40);
      v49 = vrhaddq_s16(v37, v41);
      v50 = vrshrq_n_s16(v44, 1uLL);
      v51 = vrshrq_n_s16(v45, 1uLL);
      v52 = vrhaddq_s16(v38, v42);
      v53 = vrhaddq_s16(v39, v43);
      v54 = vrshrq_n_s16(v46, 1uLL);
      v15[-9] = vhaddq_s16(v48, v49);
      v15[-8] = vhaddq_s16(v50, v51);
      v55 = vrshrq_n_s16(v47, 1uLL);
      v15[-1] = vhaddq_s16(v52, v53);
      *v15 = vhaddq_s16(v54, v55);
      v15[7] = vhsubq_s16(v48, v49);
      v15[8] = vhsubq_s16(v50, v51);
      v15[15] = vhsubq_s16(v52, v53);
      v15[16] = vhsubq_s16(v54, v55);
      v13 += 2;
    }
    while (v13 != 17);
    v56 = vrshrq_n_u32(v14, 2uLL);
    v57 = (i & 0x7FFFFFFE) + 8 * (i & 1);
    *(_QWORD *)(a5 + 4 * (v57 + 5)) = v56.i64[0];
    *(_QWORD *)(a5 + 4 * (v57 + 9)) = v56.i64[1];
    *(_DWORD *)(a5 + 4 * ((i >> 1) + 2 * (i & 1) + 1)) = (vaddvq_s32(v12) + 2) >> 2;
    v10 += 32;
  }
  v58 = 0;
  v59 = 0uLL;
  do
  {
    v60 = v73[v58];
    v61 = v73[v58 + 1];
    v62 = v73[v58 + 64];
    v63 = v74[v58 + 1];
    v64 = v73[v58 + 32];
    v65 = v73[v58 + 33];
    v66 = v74[v58 + 32];
    v67 = v74[v58 + 33];
    v68 = vaddq_s16(v64, v60);
    v69 = (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v60, v64)), (uint16x8_t)vabsq_s16(vsubq_s16(v62, v66)));
    v70 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vaddq_s16(v65, v61)), (uint16x8_t)vabsq_s16(vaddq_s16(v67, v63))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(v68), (uint16x8_t)vabsq_s16(vaddq_s16(v66, v62))));
    v71 = (uint16x8_t)vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16(vsubq_s16(v61, v65)), (uint16x8_t)vabsq_s16(vsubq_s16(v63, v67))), v69);
    v59 = (int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_u16(vaddw_high_u16((uint32x4_t)v59, v70), *(uint16x4_t *)v70.i8), v71), *(uint16x4_t *)v71.i8);
    v58 += 2;
  }
  while (v58 != 32);
  result = COERCE_FLOAT(vaddvq_s32(v59));
  *(_DWORD *)a5 = (LODWORD(result) + 1) >> 1;
  return result;
}

uint8x8_t *sub_1B68829F4(uint8x8_t *result, uint64_t a2, uint8x8_t *a3, uint64_t a4, int a5, int16x8_t *a6, unsigned int a7, uint32x4_t *a8)
{
  int v8;
  uint8x16_t v9;
  uint8x16_t *v10;
  uint8x16_t v11;
  uint8x8_t *v12;
  uint8x16_t v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x8_t *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;

  v8 = a5 + 4;
  do
  {
    v9 = *(uint8x16_t *)&result->i8[a2];
    v10 = (uint8x16_t *)((char *)result + a2 + a2);
    v11 = *v10;
    v12 = (uint8x8_t *)&v10->i8[a2];
    v13 = *(uint8x16_t *)&a3->i8[a4];
    v14 = (uint8x16_t *)((char *)a3 + a4 + a4);
    v15 = *v14;
    v16 = (uint8x8_t *)&v14->i8[a4];
    v17 = (int16x8_t)vsubl_u8(*result, *a3);
    v18 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)result->i8, *(uint8x16_t *)a3->i8);
    v19 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v13.i8);
    v20 = (int16x8_t)vsubl_high_u8(v9, v13);
    v21 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v11.i8, *(uint8x8_t *)v15.i8);
    v22 = (int16x8_t)vsubl_high_u8(v11, v15);
    v23 = (int16x8_t)vsubl_u8(*v12, *v16);
    v24 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v12->i8, *(uint8x16_t *)v16->i8);
    v25 = vaddq_s16(v19, v17);
    v26 = vaddq_s16(v20, v18);
    v27 = vsubq_s16(v17, v19);
    v28 = vsubq_s16(v18, v20);
    v29 = vaddq_s16(v23, v21);
    v30 = vaddq_s16(v24, v22);
    v31 = vsubq_s16(v21, v23);
    v32 = vsubq_s16(v22, v24);
    v33 = vtrn1q_s16(v25, v27);
    v34 = vtrn2q_s16(v25, v27);
    v35 = vtrn1q_s16(v26, v28);
    v36 = vtrn2q_s16(v26, v28);
    v37 = vtrn1q_s16(v29, v31);
    v38 = vtrn2q_s16(v29, v31);
    v39 = vtrn1q_s16(v30, v32);
    v40 = vtrn2q_s16(v30, v32);
    v41 = vaddq_s16(v34, v33);
    v42 = vaddq_s16(v36, v35);
    v43 = vsubq_s16(v33, v34);
    v44 = vsubq_s16(v35, v36);
    v45 = vaddq_s16(v38, v37);
    v46 = vaddq_s16(v40, v39);
    v47 = vsubq_s16(v37, v38);
    v48 = vsubq_s16(v39, v40);
    v49 = (int32x4_t)vaddq_s16(v45, v41);
    v50 = (int32x4_t)vaddq_s16(v46, v42);
    v51 = (int32x4_t)vsubq_s16(v41, v45);
    v52 = (int32x4_t)vsubq_s16(v42, v46);
    v53 = (int32x4_t)vaddq_s16(v47, v43);
    v54 = (int32x4_t)vaddq_s16(v48, v44);
    v55 = (int32x4_t)vsubq_s16(v43, v47);
    v56 = (int32x4_t)vsubq_s16(v44, v48);
    v57 = (int16x8_t)vtrn1q_s32(v49, v51);
    v58 = (int16x8_t)vtrn2q_s32(v49, v51);
    v59 = (int16x8_t)vtrn1q_s32(v50, v52);
    v60 = (int16x8_t)vtrn2q_s32(v50, v52);
    v61 = (int16x8_t)vtrn1q_s32(v53, v55);
    v62 = (int16x8_t)vtrn2q_s32(v53, v55);
    v63 = (int16x8_t)vtrn1q_s32(v54, v56);
    v64 = (int16x8_t)vtrn2q_s32(v54, v56);
    v65 = vaddq_s16(v58, v57);
    v66 = vaddq_s16(v60, v59);
    v67 = vsubq_s16(v57, v58);
    v68 = vsubq_s16(v59, v60);
    v69 = vaddq_s16(v62, v61);
    v70 = vaddq_s16(v64, v63);
    v71 = vsubq_s16(v61, v62);
    v72 = vsubq_s16(v63, v64);
    *a8 = vshrq_n_u32(vpaddlq_u16((uint16x8_t)vpaddq_s16(vaddq_s16(vaddq_s16(vabsq_s16(v69), vabsq_s16(v65)), vaddq_s16(vabsq_s16(v67), vabsq_s16(v71))), vaddq_s16(vaddq_s16(vabsq_s16(v70), vabsq_s16(v66)), vaddq_s16(vabsq_s16(v68), vabsq_s16(v72))))), 1uLL);
    *a6 = v65;
    a6[1] = v66;
    a6[2] = v69;
    a6[3] = v70;
    a6[4] = v67;
    a6[5] = v68;
    v8 -= 4;
    a8 = (uint32x4_t *)((char *)a8 + 4 * a7);
    a6[6] = v71;
    a6[7] = v72;
    result = (uint8x8_t *)((char *)v12 + a2);
    a3 = (uint8x8_t *)((char *)v16 + a4);
    a6 += 8;
  }
  while (v8 > 4);
  return result;
}

uint8x8_t *sub_1B6882B8C(uint8x8_t *result, uint64_t a2, uint8x8_t *a3, uint64_t a4, int a5, int16x8_t *a6)
{
  int v6;
  uint8x16_t v7;
  uint8x16_t *v8;
  uint8x16_t v9;
  uint8x8_t *v10;
  uint8x16_t v11;
  uint8x16_t *v12;
  uint8x16_t v13;
  uint8x8_t *v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;

  v6 = a5 + 4;
  do
  {
    v7 = *(uint8x16_t *)&result->i8[a2];
    v8 = (uint8x16_t *)((char *)result + a2 + a2);
    v9 = *v8;
    v10 = (uint8x8_t *)&v8->i8[a2];
    v11 = *(uint8x16_t *)&a3->i8[a4];
    v12 = (uint8x16_t *)((char *)a3 + a4 + a4);
    v13 = *v12;
    v14 = (uint8x8_t *)&v12->i8[a4];
    v15 = (int16x8_t)vsubl_u8(*result, *a3);
    v16 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)result->i8, *(uint8x16_t *)a3->i8);
    v17 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v7.i8, *(uint8x8_t *)v11.i8);
    v18 = (int16x8_t)vsubl_high_u8(v7, v11);
    v19 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v13.i8);
    v20 = (int16x8_t)vsubl_high_u8(v9, v13);
    v21 = (int16x8_t)vsubl_u8(*v10, *v14);
    v22 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v10->i8, *(uint8x16_t *)v14->i8);
    v23 = vaddq_s16(v17, v15);
    v24 = vaddq_s16(v18, v16);
    v25 = vsubq_s16(v15, v17);
    v26 = vsubq_s16(v16, v18);
    v27 = vaddq_s16(v21, v19);
    v28 = vaddq_s16(v22, v20);
    v29 = vsubq_s16(v19, v21);
    v30 = vsubq_s16(v20, v22);
    v31 = vtrn1q_s16(v23, v25);
    v32 = vtrn2q_s16(v23, v25);
    v33 = vtrn1q_s16(v24, v26);
    v34 = vtrn2q_s16(v24, v26);
    v35 = vtrn1q_s16(v27, v29);
    v36 = vtrn2q_s16(v27, v29);
    v37 = vtrn1q_s16(v28, v30);
    v38 = vtrn2q_s16(v28, v30);
    v39 = vaddq_s16(v32, v31);
    v40 = vaddq_s16(v34, v33);
    v41 = vsubq_s16(v31, v32);
    v42 = vsubq_s16(v33, v34);
    v43 = vaddq_s16(v36, v35);
    v44 = vaddq_s16(v38, v37);
    v45 = vsubq_s16(v35, v36);
    v46 = vsubq_s16(v37, v38);
    v47 = (int32x4_t)vaddq_s16(v43, v39);
    v48 = (int32x4_t)vaddq_s16(v44, v40);
    v49 = (int32x4_t)vsubq_s16(v39, v43);
    v50 = (int32x4_t)vsubq_s16(v40, v44);
    v51 = (int32x4_t)vaddq_s16(v45, v41);
    v52 = (int32x4_t)vaddq_s16(v46, v42);
    v53 = (int32x4_t)vsubq_s16(v41, v45);
    v54 = (int32x4_t)vsubq_s16(v42, v46);
    v55 = (int16x8_t)vtrn1q_s32(v47, v49);
    v56 = (int16x8_t)vtrn2q_s32(v47, v49);
    v57 = (int16x8_t)vtrn1q_s32(v48, v50);
    v58 = (int16x8_t)vtrn2q_s32(v48, v50);
    v59 = (int16x8_t)vtrn1q_s32(v51, v53);
    v60 = (int16x8_t)vtrn2q_s32(v51, v53);
    v61 = (int16x8_t)vtrn1q_s32(v52, v54);
    *a6 = vaddq_s16(v56, v55);
    a6[1] = vaddq_s16(v58, v57);
    v62 = (int16x8_t)vtrn2q_s32(v52, v54);
    a6[2] = vaddq_s16(v60, v59);
    a6[3] = vaddq_s16(v62, v61);
    a6[4] = vsubq_s16(v55, v56);
    a6[5] = vsubq_s16(v57, v58);
    v6 -= 4;
    a6[6] = vsubq_s16(v59, v60);
    a6[7] = vsubq_s16(v61, v62);
    result = (uint8x8_t *)((char *)v10 + a2);
    a3 = (uint8x8_t *)((char *)v14 + a4);
    a6 += 8;
  }
  while (v6 > 4);
  return result;
}

uint64_t sub_1B6882CD4(uint64_t a1, int a2, __int32 *a3, uint64_t a4, __int32 *a5, uint64_t a6)
{
  int v6;
  int16x8_t v7;
  __int32 *v8;
  uint8x8_t v9;
  __int32 *v10;
  __int32 *v11;
  uint8x8_t v12;
  __int32 *v13;
  uint8x8_t v14;
  __int32 *v15;
  __int32 *v16;
  uint8x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int64x2_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;

  v6 = a2 + 4;
  v7 = 0uLL;
  do
  {
    v8 = (__int32 *)((char *)a3 + a4);
    v9.i32[0] = *a3;
    v10 = (__int32 *)((char *)a3 + a4 + a4);
    v9.i32[1] = *v10;
    v11 = (__int32 *)((char *)v10 + a4);
    v12.i32[0] = *v8;
    v12.i32[1] = *v11;
    a3 = (__int32 *)((char *)v11 + a4);
    v13 = (__int32 *)((char *)a5 + a6);
    v14.i32[0] = *a5;
    v15 = (__int32 *)((char *)a5 + a6 + a6);
    v14.i32[1] = *v15;
    v16 = (__int32 *)((char *)v15 + a6);
    v17.i32[0] = *v13;
    v17.i32[1] = *v16;
    a5 = (__int32 *)((char *)v16 + a6);
    v18 = (int16x8_t)vsubl_u8(v9, v14);
    v19 = (int16x8_t)vsubl_u8(v12, v17);
    v20 = vaddq_s16(v19, v18);
    v21 = vsubq_s16(v18, v19);
    v22 = vtrn1q_s16(v20, v21);
    v23 = vtrn2q_s16(v20, v21);
    v24 = vaddq_s16(v23, v22);
    v25 = (int64x2_t)vsubq_s16(v22, v23);
    v26 = (int16x8_t)vzip2q_s64((int64x2_t)v24, v25);
    v24.i64[1] = v25.i64[0];
    v27 = (int32x4_t)vaddq_s16(v26, v24);
    v28 = (int32x4_t)vsubq_s16(v24, v26);
    v7 = vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v27, v28)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v27, v28))), v7);
    v6 -= 4;
  }
  while (v6 > 4);
  return vaddlvq_u16((uint16x8_t)v7);
}

uint64_t sub_1B6882D6C(uint64_t a1, int a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6)
{
  int v6;
  int16x8_t v7;
  uint8x8_t *v8;
  uint8x8_t v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;

  v6 = a2 + 4;
  v7 = 0uLL;
  do
  {
    v8 = (uint8x8_t *)((char *)a3 + a4 + a4);
    v9 = *v8;
    v10 = (uint8x8_t *)((char *)v8 + a4);
    v11 = (uint8x8_t *)((char *)a5 + a6 + a6);
    v12 = *v11;
    v13 = (uint8x8_t *)((char *)v11 + a6);
    v14 = (int16x8_t)vsubl_u8(*a3, *a5);
    v15 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)a3 + a4), *(uint8x8_t *)((char *)a5 + a6));
    v16 = (int16x8_t)vsubl_u8(v9, v12);
    v17 = (int16x8_t)vsubl_u8(*v10, *v13);
    v18 = vaddq_s16(v15, v14);
    v19 = vsubq_s16(v14, v15);
    v20 = vaddq_s16(v17, v16);
    v21 = vsubq_s16(v16, v17);
    v22 = vtrn1q_s16(v18, v19);
    v23 = vtrn2q_s16(v18, v19);
    v24 = vtrn1q_s16(v20, v21);
    v25 = vtrn2q_s16(v20, v21);
    v26 = vaddq_s16(v23, v22);
    v27 = vsubq_s16(v22, v23);
    v28 = vaddq_s16(v25, v24);
    v29 = vsubq_s16(v24, v25);
    v30 = (int32x4_t)vaddq_s16(v28, v26);
    v31 = (int32x4_t)vsubq_s16(v26, v28);
    v32 = (int32x4_t)vaddq_s16(v29, v27);
    v33 = (int32x4_t)vsubq_s16(v27, v29);
    v7 = vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v30, v31)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v30, v31))), v7), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v32, v33)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v32, v33))));
    v6 -= 4;
    a3 = (uint8x8_t *)((char *)v10 + a4);
    a5 = (uint8x8_t *)((char *)v13 + a6);
  }
  while (v6 > 4);
  return vaddlvq_u16((uint16x8_t)v7);
}

uint64_t sub_1B6882E4C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint8x16_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint16x8_t v65;

  v6 = 4 * a4;
  v7 = 4 * a6;
  v8 = a5 + 3 * a6;
  v9 = a5 + a6;
  v10 = a3 + 3 * a4;
  v11 = 0uLL;
  v12 = 0uLL;
  v13 = a3 + a4;
  v14 = a5 + 2 * a6;
  v15 = a3 + 2 * a4;
  do
  {
    if (a1 >= 1)
    {
      for (i = 0; i < a1; i += 16)
      {
        v17 = *(uint8x16_t *)(a3 + i);
        v18 = *(uint8x16_t *)(v13 + i);
        v19 = *(uint8x16_t *)(v15 + i);
        v20 = *(uint8x16_t *)(v10 + i);
        v21 = *(uint8x16_t *)(a5 + i);
        v22 = *(uint8x16_t *)(v9 + i);
        v23 = *(uint8x16_t *)(v14 + i);
        v24 = *(uint8x16_t *)(v8 + i);
        v25 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v21.i8);
        v26 = (int16x8_t)vsubl_high_u8(v17, v21);
        v27 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)v22.i8);
        v28 = (int16x8_t)vsubl_high_u8(v18, v22);
        v29 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v23.i8);
        v30 = (int16x8_t)vsubl_high_u8(v19, v23);
        v31 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v24.i8);
        v32 = (int16x8_t)vsubl_high_u8(v20, v24);
        v33 = vaddq_s16(v27, v25);
        v34 = vaddq_s16(v28, v26);
        v35 = vsubq_s16(v25, v27);
        v36 = vsubq_s16(v26, v28);
        v37 = vaddq_s16(v31, v29);
        v38 = vaddq_s16(v32, v30);
        v39 = vsubq_s16(v29, v31);
        v40 = vsubq_s16(v30, v32);
        v41 = vtrn1q_s16(v33, v35);
        v42 = vtrn2q_s16(v33, v35);
        v43 = vtrn1q_s16(v34, v36);
        v44 = vtrn2q_s16(v34, v36);
        v45 = vtrn1q_s16(v37, v39);
        v46 = vtrn2q_s16(v37, v39);
        v47 = vtrn1q_s16(v38, v40);
        v48 = vtrn2q_s16(v38, v40);
        v49 = vaddq_s16(v42, v41);
        v50 = vaddq_s16(v44, v43);
        v51 = vsubq_s16(v41, v42);
        v52 = vsubq_s16(v43, v44);
        v53 = vaddq_s16(v46, v45);
        v54 = vaddq_s16(v48, v47);
        v55 = vsubq_s16(v45, v46);
        v56 = vsubq_s16(v47, v48);
        v57 = (int32x4_t)vaddq_s16(v53, v49);
        v58 = (int32x4_t)vaddq_s16(v54, v50);
        v59 = (int32x4_t)vsubq_s16(v49, v53);
        v60 = (int32x4_t)vsubq_s16(v50, v54);
        v61 = (int32x4_t)vaddq_s16(v55, v51);
        v62 = (int32x4_t)vaddq_s16(v56, v52);
        v63 = (int32x4_t)vsubq_s16(v51, v55);
        v64 = (int32x4_t)vsubq_s16(v52, v56);
        v65 = (uint16x8_t)vaddq_s16(vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v58, v60)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v58, v60))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v57, v59)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v57, v59)))), vaddq_s16((int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v61, v63)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v61, v63))), (int16x8_t)vmaxq_u16((uint16x8_t)vabsq_s16((int16x8_t)vtrn1q_s32(v62, v64)), (uint16x8_t)vabsq_s16((int16x8_t)vtrn2q_s32(v62, v64)))));
        v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v65.i8);
        v11 = (int32x4_t)vaddw_high_u16((uint32x4_t)v11, v65);
      }
    }
    a3 += v6;
    a5 += v7;
    v8 += v7;
    v14 += v7;
    v9 += v7;
    v10 += v6;
    v15 += v6;
    v13 += v6;
    a2 -= 4;
  }
  while (a2);
  return vaddvq_s32(vaddq_s32(v12, v11));
}

uint64_t sub_1B6882FF4(_DWORD *a1, uint64_t a2, unint64_t a3, unint64_t *a4, uint64_t *a5, unint64_t a6)
{
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a4)
    return 4294954387;
  *a4 = 0;
  result = 4294954387;
  if (a2)
  {
    v8 = a3 - a6;
    if (a3 > a6)
    {
      *a1 = -1;
      v9 = v8 - 2;
      if (v8 >= 2)
      {
        v10 = 0;
        v11 = 0;
        v12 = a2 + a6;
        while (1)
        {
          v13 = *(unsigned __int8 *)(v12 + v10);
          if (v13 != 255)
            break;
          v11 += 255;
          if (v8 == ++v10)
            return 4294954387;
        }
        v14 = v11 + v13;
        *a1 = v14;
        if (v10 + 1 < v8)
        {
          v15 = *(unsigned __int8 *)(v12 + v10 + 1);
          if (v15 == 255)
          {
            v16 = 0;
            while (v9 != v10)
            {
              v16 += 255;
              v15 = *(unsigned __int8 *)(a6 + a2 + 2 + v10++);
              if (v15 != 255)
                goto LABEL_16;
            }
          }
          else
          {
            v16 = 0;
LABEL_16:
            v17 = v16 + v15;
            *a4 = v17;
            if (v14 != 5)
              return 4294954386;
            v18 = v17 >= 0x10;
            v19 = v17 - 16;
            if (v18)
            {
              v20 = 0;
              v21 = v10 + v12 + 2;
              v22 = v10 + a6 + 18;
              while (*(unsigned __int8 *)(v21 + v20) == *((unsigned __int8 *)&xmmword_1B692B730 + v20))
              {
                if (++v20 == 16)
                {
                  *a4 = v19;
                  result = 0;
                  if (a5)
                    *a5 = v22;
                  return result;
                }
              }
            }
            *a4 = 0;
          }
        }
        return 4294954387;
      }
    }
  }
  return result;
}

uint64_t sub_1B6883114(char *a1, size_t a2, char *a3, unint64_t a4, unint64_t *a5, int a6)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  size_t v12;
  char v13;
  char *v14;
  char v15;
  char *v16;
  char *v17;

  v8 = 4;
  if (a6)
    v8 = 5;
  v9 = a2 + 16 + (a2 + 16) / 0xFF;
  v10 = v9 + v8;
  if (a5)
    *a5 = v10;
  if (!a3)
    return 0;
  if (v10 > a4)
    return 4294954394;
  v12 = (a2 + 16) / 0xFF;
  v13 = 5;
  if (a6)
  {
    v14 = a3 + 3;
    a3[2] = 5;
    v13 = 1;
    v15 = 78;
  }
  else
  {
    v14 = a3 + 2;
    v15 = 6;
  }
  *a3 = v15;
  a3[1] = v13;
  memset(v14, 255, v12);
  v16 = &v14[v12];
  *v16 = v9;
  *(_OWORD *)(v16 + 1) = xmmword_1B692B730;
  v17 = &v14[v12 + 17];
  if (v17 != a1)
    memcpy(v17, a1, a2);
  result = 0;
  v17[a2] = 0x80;
  return result;
}

_QWORD *sub_1B688320C(_QWORD *result, int a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int16x4_t *(*v10)(int16x4_t *, uint64_t, int16x4_t *, const __int16 *, int, int);
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (a2 == 10)
  {
    result[6] = sub_1B6883D44;
    result[7] = sub_1B6883E00;
    result[8] = sub_1B6883EE0;
    result[9] = sub_1B6883F50;
    result[10] = sub_1B6884014;
    result[11] = sub_1B68840D4;
    result[12] = sub_1B688415C;
    result[13] = sub_1B68841C8;
    result[26] = sub_1B6884234;
    result[27] = sub_1B688428C;
    result[28] = sub_1B6884304;
    result[29] = sub_1B688435C;
    result[17] = sub_1B68843B4;
    result[18] = sub_1B68843C8;
    result[1] = sub_1B68843DC;
    v2 = sub_1B688648C;
    v3 = sub_1B68863CC;
    v4 = sub_1B68862F0;
    v5 = sub_1B6886214;
    v6 = sub_1B6886140;
    v7 = sub_1B6886054;
    v8 = sub_1B6885F84;
    v9 = sub_1B6885CD4;
    v10 = sub_1B688584C;
    v11 = sub_1B688553C;
    v12 = sub_1B68850EC;
    v13 = sub_1B6884BBC;
    v14 = sub_1B688485C;
    v15 = sub_1B68845EC;
  }
  else
  {
    if (a2 != 8)
      return result;
    result[6] = sub_1B6883474;
    result[7] = sub_1B6883524;
    result[8] = sub_1B68835F8;
    result[9] = sub_1B68836D4;
    result[10] = sub_1B6883790;
    result[11] = sub_1B6883840;
    result[12] = sub_1B68838C8;
    result[13] = sub_1B6883934;
    result[26] = sub_1B68839A0;
    result[27] = sub_1B68839F0;
    result[28] = sub_1B6883A60;
    result[29] = sub_1B6883AB0;
    result[30] = sub_1B6883AF8;
    result[31] = sub_1B6883B64;
    result[32] = sub_1B6883BB0;
    result[17] = sub_1B6883BEC;
    result[18] = sub_1B6883C00;
    result[1] = sub_1B6883C14;
    v2 = sub_1B6886434;
    v3 = sub_1B688636C;
    v4 = sub_1B6886280;
    v5 = sub_1B68861B8;
    v6 = sub_1B68860DC;
    v7 = sub_1B6885FD8;
    v8 = sub_1B6885F34;
    v9 = sub_1B6885A6C;
    v10 = sub_1B6885640;
    v11 = sub_1B6885444;
    v12 = sub_1B6884D44;
    v13 = sub_1B6884A08;
    v14 = sub_1B68846D0;
    v15 = sub_1B6884510;
  }
  result[2] = v15;
  result[3] = v14;
  result[4] = v13;
  result[5] = v12;
  result[14] = v11;
  result[15] = v10;
  result[16] = v9;
  result[19] = v8;
  result[20] = v7;
  result[21] = v6;
  result[22] = v5;
  result[23] = v4;
  result[24] = v3;
  result[25] = v2;
  return result;
}

int16x4_t sub_1B6883474(__int32 *a1, uint64_t a2, __int32 *a3, uint64_t a4, uint64_t a5)
{
  uint8x8_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6.i32[0] = *a1;
  v6.i32[1] = *(__int32 *)((char *)a1 + a2);
  v7.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  v7.i32[1] = *(__int32 *)((char *)a1 + 3 * a2);
  v8.i32[0] = *a3;
  v8.i32[1] = *(__int32 *)((char *)a3 + a4);
  v9.i32[0] = *(__int32 *)((char *)a3 + 2 * a4);
  v9.i32[1] = *(__int32 *)((char *)a3 + 3 * a4);
  v10 = (int8x16_t)vsubl_u8(v6, v8);
  v11 = (int8x16_t)vsubl_u8(v7, v9);
  *(int8x16_t *)a5 = v10;
  *(int8x16_t *)(a5 + 16) = v11;
  sub_1B68891A4((int16x4_t *)v13, 1, v10, v11);
  return sub_1B6889248((int16x4_t *)a5, v13[0], v13[1]);
}

int16x4_t sub_1B6883524(__int32 *a1, uint64_t a2, __int32 *a3, uint64_t a4, uint64_t a5)
{
  uint8x8_t v5;
  uint8x8_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int16x4_t v11;
  int32x2_t v12;
  int16x4_t v13;
  int32x2_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;

  v5.i32[0] = *a1;
  v5.i32[1] = *(__int32 *)((char *)a1 + a2);
  v6.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  v6.i32[1] = *(__int32 *)((char *)a1 + 3 * a2);
  v7.i32[0] = *a3;
  v7.i32[1] = *(__int32 *)((char *)a3 + a4);
  v8.i32[0] = *(__int32 *)((char *)a3 + 2 * a4);
  v8.i32[1] = *(__int32 *)((char *)a3 + 3 * a4);
  v9 = (int8x16_t)vsubl_u8(v5, v7);
  v10 = (int8x16_t)vsubl_u8(v6, v8);
  *(int8x16_t *)a5 = v9;
  *(int8x16_t *)(a5 + 16) = v10;
  v11 = (int16x4_t)vextq_s8(v9, v9, 8uLL).u64[0];
  v12 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v9.i8, v11);
  *(int16x4_t *)v9.i8 = vtrn2_s16(*(int16x4_t *)v9.i8, v11);
  v13 = (int16x4_t)vextq_s8(v10, v10, 8uLL).u64[0];
  v14 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v10.i8, v13);
  *(int16x4_t *)v10.i8 = vtrn2_s16(*(int16x4_t *)v10.i8, v13);
  v15 = (int16x4_t)vzip1_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v10.i8);
  v16 = (int16x4_t)vzip2_s32(v12, v14);
  *(int32x2_t *)v9.i8 = vzip2_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v10.i8);
  *(int32x2_t *)v10.i8 = vzip1_s32(v12, v14);
  v17 = vadd_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v10.i8);
  *(int16x4_t *)v9.i8 = vsub_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8);
  *(int16x4_t *)v10.i8 = vadd_s16(v16, v15);
  v18 = vsub_s16(v15, v16);
  return sub_1B68888D0((int16x4_t *)a5, (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v10.i8, v17), 6uLL), 1uLL)), vrshrq_n_s32(vmlal_s16(vmull_s16(v18, (int16x4_t)0x24002400240024), *(int16x4_t *)v9.i8, (int16x4_t)0x53005300530053), 1uLL)), (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vsubl_s16(v17, *(int16x4_t *)v10.i8), 6uLL), 1uLL)), vrshrq_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v9.i8, (int16x4_t)0x24002400240024), v18, (int16x4_t)0x53005300530053), 1uLL)));
}

void sub_1B68835F8(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, int16x4_t *a5)
{
  char v6;
  uint16x8_t *v7;
  char v8;
  uint8x8_t *v9;
  uint8x8_t v10;
  uint8x8_t *v11;
  uint8x8_t *v12;
  uint8x8_t v13;
  uint8x8_t *v14;
  uint16x8_t v15;
  uint16x8_t v16;
  int16x4_t v17[18];

  v17[17] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  v6 = 1;
  v7 = (uint16x8_t *)a5;
  do
  {
    v8 = v6;
    v9 = (uint8x8_t *)((char *)a1 + a2 + a2);
    v10 = *v9;
    v11 = (uint8x8_t *)((char *)v9 + a2);
    v12 = (uint8x8_t *)((char *)a3 + a4 + a4);
    v13 = *v12;
    v14 = (uint8x8_t *)((char *)v12 + a4);
    v15 = vsubl_u8(*(uint8x8_t *)((char *)a1 + a2), *(uint8x8_t *)((char *)a3 + a4));
    v16 = vsubl_u8(*v11, *v14);
    *v7 = vsubl_u8(*a1, *a3);
    v7[1] = v15;
    v7[2] = vsubl_u8(v10, v13);
    v7[3] = v16;
    a1 = (uint8x8_t *)((char *)v11 + a2);
    a3 = (uint8x8_t *)((char *)v14 + a4);
    v7 += 4;
    v6 = 0;
  }
  while ((v8 & 1) != 0);
  sub_1B688876C(v17, a5, 2);
  sub_1B6888810(a5, v17);
}

void sub_1B68836D4(uint8x16_t *a1, uint64_t a2, uint8x16_t *a3, uint64_t a4, int16x4_t *a5)
{
  unsigned int v6;
  uint16x8_t *v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint16x8_t v10;
  int16x4_t v11[66];

  v11[65] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  v6 = -2;
  v7 = (uint16x8_t *)a5;
  do
  {
    v8 = *(uint8x16_t *)((char *)a1 + a2);
    v9 = *(uint8x16_t *)((char *)a3 + a4);
    v10 = vsubl_high_u8(*a1, *a3);
    *v7 = vsubl_u8(*(uint8x8_t *)a1->i8, *(uint8x8_t *)a3->i8);
    v7[1] = v10;
    v7[2] = vsubl_u8(*(uint8x8_t *)v8.i8, *(uint8x8_t *)v9.i8);
    v7[3] = vsubl_high_u8(v8, v9);
    a1 = (uint8x16_t *)((char *)a1 + 2 * a2);
    a3 = (uint8x16_t *)((char *)a3 + 2 * a4);
    v6 += 2;
    v7 += 4;
  }
  while (v6 < 0xE);
  sub_1B6887F70(v11, a5, 3);
  sub_1B68880BC(a5, v11);
}

void sub_1B6883790(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, int16x4_t *a5)
{
  uint64_t v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint16x8_t *v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  int16x4_t v16[258];

  v6 = 0;
  v16[257] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  v7 = a1 + 2;
  v8 = a3 + 2;
  do
  {
    v9 = (uint16x8_t *)&a5[v6];
    v10 = *(uint8x16_t *)v7[-2].i8;
    v11 = *(uint8x16_t *)v8[-2].i8;
    v12 = vsubl_u8(*(uint8x8_t *)v10.i8, *(uint8x8_t *)v11.i8);
    v13 = vsubl_high_u8(v10, v11);
    v14 = vsubl_u8(*v7, *v8);
    v15 = vsubl_high_u8(*(uint8x16_t *)v7->i8, *(uint8x16_t *)v8->i8);
    *v9 = v12;
    v9[1] = v13;
    v9[2] = v14;
    v9[3] = v15;
    v6 += 8;
    v7 = (uint8x8_t *)((char *)v7 + a2);
    v8 = (uint8x8_t *)((char *)v8 + a4);
  }
  while ((_DWORD)(v6 * 8) != 2048);
  sub_1B6888960(v16, a5, 4);
  sub_1B6888B94(a5, v16);
}

int16x4_t sub_1B6883840(int8x16_t *a1)
{
  int8x16_t v1;
  int16x4_t v2;
  int32x2_t v3;
  int32x2_t v4;
  int16x4_t v5;
  int32x2_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;

  v1 = a1[1];
  v2 = (int16x4_t)vextq_s8(*a1, *a1, 8uLL).u64[0];
  v3 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a1->i8, v2);
  v4 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a1->i8, v2);
  v5 = (int16x4_t)vextq_s8(v1, v1, 8uLL).u64[0];
  v6 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v1.i8, v5);
  *(int16x4_t *)v1.i8 = vtrn2_s16(*(int16x4_t *)v1.i8, v5);
  v7 = (int16x4_t)vzip1_s32(v4, *(int32x2_t *)v1.i8);
  v8 = (int16x4_t)vzip2_s32(v3, v6);
  v9 = (int16x4_t)vzip2_s32(v4, *(int32x2_t *)v1.i8);
  *(int32x2_t *)v1.i8 = vzip1_s32(v3, v6);
  v10 = vadd_s16(v9, *(int16x4_t *)v1.i8);
  v11 = vsub_s16(*(int16x4_t *)v1.i8, v9);
  *(int16x4_t *)v1.i8 = vadd_s16(v8, v7);
  v12 = vsub_s16(v7, v8);
  return sub_1B68888D0((int16x4_t *)a1, (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v1.i8, v10), 6uLL), 1uLL)), vrshrq_n_s32(vmlal_s16(vmull_s16(v12, (int16x4_t)0x24002400240024), v11, (int16x4_t)0x53005300530053), 1uLL)), (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vsubl_s16(v10, *(int16x4_t *)v1.i8), 6uLL), 1uLL)), vrshrq_n_s32(vmlsl_s16(vmull_s16(v11, (int16x4_t)0x24002400240024), v12, (int16x4_t)0x53005300530053), 1uLL)));
}

void sub_1B68838C8(int16x4_t *a1)
{
  int16x4_t v2[18];

  v2[17] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  sub_1B688876C(v2, a1, 2);
  sub_1B6888810(a1, v2);
}

void sub_1B6883934(int16x4_t *a1)
{
  int16x4_t v2[66];

  v2[65] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  sub_1B6887F70(v2, a1, 3);
  sub_1B68880BC(a1, v2);
}

uint16x8_t sub_1B68839A0(__int32 *a1, uint64_t a2, __int32 *a3, uint64_t a4, uint16x8_t *a5)
{
  uint8x8_t v5;
  uint8x8_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint16x8_t result;

  v5.i32[0] = *a1;
  v5.i32[1] = *(__int32 *)((char *)a1 + a2);
  v6.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  v6.i32[1] = *(__int32 *)((char *)a1 + 3 * a2);
  v7.i32[0] = *a3;
  v7.i32[1] = *(__int32 *)((char *)a3 + a4);
  v8.i32[0] = *(__int32 *)((char *)a3 + 2 * a4);
  v8.i32[1] = *(__int32 *)((char *)a3 + 3 * a4);
  result = vsubl_u8(v5, v7);
  *a5 = result;
  a5[1] = vsubl_u8(v6, v8);
  return result;
}

uint8x8_t *sub_1B68839F0(uint8x8_t *result, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint16x8_t *a5)
{
  char v5;
  char v6;
  uint8x8_t *v7;
  uint8x8_t v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  uint8x8_t v11;
  uint8x8_t *v12;
  uint16x8_t v13;
  uint16x8_t v14;

  v5 = 1;
  do
  {
    v6 = v5;
    v7 = (uint8x8_t *)((char *)result + a2 + a2);
    v8 = *v7;
    v9 = (uint8x8_t *)((char *)v7 + a2);
    v10 = (uint8x8_t *)((char *)a3 + a4 + a4);
    v11 = *v10;
    v12 = (uint8x8_t *)((char *)v10 + a4);
    v13 = vsubl_u8(*(uint8x8_t *)((char *)result + a2), *(uint8x8_t *)((char *)a3 + a4));
    v14 = vsubl_u8(*v9, *v12);
    *a5 = vsubl_u8(*result, *a3);
    a5[1] = v13;
    a5[2] = vsubl_u8(v8, v11);
    a5[3] = v14;
    result = (uint8x8_t *)((char *)v9 + a2);
    a3 = (uint8x8_t *)((char *)v12 + a4);
    a5 += 4;
    v5 = 0;
  }
  while ((v6 & 1) != 0);
  return result;
}

uint8x16_t *sub_1B6883A60(uint8x16_t *result, uint64_t a2, uint8x16_t *a3, uint64_t a4, uint16x8_t *a5)
{
  unsigned int v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint16x8_t v8;

  v5 = -2;
  do
  {
    v6 = *(uint8x16_t *)((char *)result + a2);
    v7 = *(uint8x16_t *)((char *)a3 + a4);
    v8 = vsubl_high_u8(*result, *a3);
    *a5 = vsubl_u8(*(uint8x8_t *)result->i8, *(uint8x8_t *)a3->i8);
    a5[1] = v8;
    a5[2] = vsubl_u8(*(uint8x8_t *)v6.i8, *(uint8x8_t *)v7.i8);
    a5[3] = vsubl_high_u8(v6, v7);
    result = (uint8x16_t *)((char *)result + 2 * a2);
    a3 = (uint8x16_t *)((char *)a3 + 2 * a4);
    v5 += 2;
    a5 += 4;
  }
  while (v5 < 0xE);
  return result;
}

uint16x8_t sub_1B6883AB0(uint8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint16x8_t *v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint16x8_t v11;
  uint16x8_t result;
  uint16x8_t v13;
  uint16x8_t v14;

  v5 = 0;
  v6 = a1 + 2;
  v7 = a3 + 2;
  do
  {
    v8 = (uint16x8_t *)(a5 + v5);
    v9 = *(uint8x16_t *)v6[-2].i8;
    v10 = *(uint8x16_t *)v7[-2].i8;
    v11 = vsubl_u8(*(uint8x8_t *)v9.i8, *(uint8x8_t *)v10.i8);
    result = vsubl_high_u8(v9, v10);
    v13 = vsubl_u8(*v6, *v7);
    v14 = vsubl_high_u8(*(uint8x16_t *)v6->i8, *(uint8x16_t *)v7->i8);
    *v8 = v11;
    v8[1] = result;
    v8[2] = v13;
    v8[3] = v14;
    v5 += 64;
    v6 = (uint8x8_t *)((char *)v6 + a2);
    v7 = (uint8x8_t *)((char *)v7 + a4);
  }
  while ((_DWORD)v5 != 2048);
  return result;
}

uint16x8_t sub_1B6883AF8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint16x8_t *a5, uint16x8_t *a6)
{
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  uint8x16_t v13;
  uint16x8_t result;

  v6.i64[0] = *(uint64_t *)((char *)a1 + 2 * a2);
  v7.i64[0] = *a1;
  v8.i64[0] = *(uint64_t *)((char *)a3 + 2 * a4);
  v9.i64[0] = *a3;
  v7.i64[1] = *(uint64_t *)((char *)a1 + a2);
  v6.i64[1] = *(uint64_t *)((char *)a1 + 3 * a2);
  v9.i64[1] = *(uint64_t *)((char *)a3 + a4);
  v8.i64[1] = *(uint64_t *)((char *)a3 + 3 * a4);
  v10 = (uint8x16_t)vuzp1q_s8(v7, v6);
  v11 = (uint8x16_t)vuzp2q_s8(v7, v6);
  v12 = (uint8x16_t)vuzp1q_s8(v9, v8);
  v13 = (uint8x16_t)vuzp2q_s8(v9, v8);
  *a5 = vsubl_u8(*(uint8x8_t *)v10.i8, *(uint8x8_t *)v12.i8);
  a5[1] = vsubl_high_u8(v10, v12);
  result = vsubl_high_u8(v11, v13);
  *a6 = vsubl_u8(*(uint8x8_t *)v11.i8, *(uint8x8_t *)v13.i8);
  a6[1] = result;
  return result;
}

uint16x8_t sub_1B6883B64(const char *a1, uint64_t a2, const char *a3, uint64_t a4, uint16x8_t *a5, uint16x8_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  const char *v10;
  uint16x8_t v11;
  uint16x8_t result;
  int8x8x2_t v13;
  int8x8x2_t v14;
  int8x8x2_t v15;
  int8x8x2_t v16;

  v8 = -2;
  do
  {
    v9 = &a1[a2];
    v13 = vld2_s8(a1);
    v6 = 2 * a2;
    a1 += v6;
    v14 = vld2_s8(v9);
    v10 = &a3[a4];
    v15 = vld2_s8(a3);
    v7 = 2 * a4;
    a3 += v7;
    v16 = vld2_s8(v10);
    v11 = vsubl_u8((uint8x8_t)v13.val[0], (uint8x8_t)v15.val[0]);
    result = vsubl_u8((uint8x8_t)v13.val[1], (uint8x8_t)v15.val[1]);
    *a5 = v11;
    a5[1] = vsubl_u8((uint8x8_t)v14.val[0], (uint8x8_t)v16.val[0]);
    a5 += 2;
    *a6 = result;
    a6[1] = vsubl_u8((uint8x8_t)v14.val[1], (uint8x8_t)v16.val[1]);
    a6 += 2;
    v8 += 2;
  }
  while (v8 < 6);
  return result;
}

uint16x8_t sub_1B6883BB0(const char *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t result;
  int8x16x2_t v12;
  int8x16x2_t v13;

  v6 = 0;
  do
  {
    v12 = vld2q_s8(a1);
    a1 += a2;
    v13 = vld2q_s8(a3);
    a3 += a4;
    v7 = (uint16x8_t *)(a5 + v6);
    v8 = (uint16x8_t *)(a6 + v6);
    v9 = vsubl_u8(*(uint8x8_t *)v12.val[0].i8, *(uint8x8_t *)v13.val[0].i8);
    v10 = vsubl_high_u8((uint8x16_t)v12.val[0], (uint8x16_t)v13.val[0]);
    result = vsubl_high_u8((uint8x16_t)v12.val[1], (uint8x16_t)v13.val[1]);
    *v7 = v9;
    v7[1] = v10;
    *v8 = vsubl_u8(*(uint8x8_t *)v12.val[1].i8, *(uint8x8_t *)v13.val[1].i8);
    v8[1] = result;
    v6 += 32;
  }
  while ((_DWORD)v6 != 512);
  return result;
}

int16x8_t sub_1B6883BEC(int16x8_t *a1)
{
  int16x8_t result;
  int16x8_t v2;

  result = vshlq_n_s16(*a1, 5uLL);
  v2 = vshlq_n_s16(a1[1], 5uLL);
  *a1 = result;
  a1[1] = v2;
  return result;
}

int16x8_t sub_1B6883C00(int16x8_t *a1)
{
  int16x8_t result;
  int16x8_t v2;

  result = vrshrq_n_s16(*a1, 5uLL);
  v2 = vrshrq_n_s16(a1[1], 5uLL);
  *a1 = result;
  a1[1] = v2;
  return result;
}

int8x8_t sub_1B6883C14(__int32 *a1, uint64_t a2, uint64_t a3)
{
  int16x8_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int16x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  __int32 *v21;
  uint16x8_t v22;
  int8x8_t result;

  v3 = *(int16x8_t *)(a3 + 16);
  v4 = vaddl_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)a3);
  v5 = vaddw_high_s16(vmovl_s16(*(int16x4_t *)v3.i8), v3);
  v6 = vsubw_high_s16(vmovl_s16(*(int16x4_t *)a3), v3);
  v7.i64[0] = 0x4A004A004A004ALL;
  v7.i64[1] = 0x4A004A004A004ALL;
  v8.i64[0] = 0x1D0000001DLL;
  v8.i64[1] = 0x1D0000001DLL;
  v9.i64[0] = 0x3700000037;
  v9.i64[1] = 0x3700000037;
  v10 = vmlaq_s32(vmlal_high_s16(vmulq_s32(v5, v9), *(int16x8_t *)a3, v7), v4, v8);
  v11 = vmlaq_s32(vmlsl_high_s16(vmulq_s32(v6, v8), *(int16x8_t *)a3, v7), v4, v9);
  v4.i64[0] = 0x1C0000001CLL;
  v4.i64[1] = 0x1C0000001CLL;
  v12 = vmlaq_s32(vmlal_high_s16(vmulq_s32(v6, v9), *(int16x8_t *)a3, v7), v5, v4);
  v13 = vaddw_high_s16(vsubl_s16(*(int16x4_t *)a3, *(int16x4_t *)v3.i8), v3);
  v3.i64[0] = 0x4A0000004ALL;
  v3.i64[1] = 0x4A0000004ALL;
  *(int16x4_t *)v5.i8 = vqrshrn_n_s32(v10, 7uLL);
  *(int16x4_t *)v12.i8 = vqrshrn_n_s32(v12, 7uLL);
  *(int16x4_t *)v13.i8 = vqrshrn_n_s32(vmulq_s32(v13, (int32x4_t)v3), 7uLL);
  *(int16x4_t *)v7.i8 = vqrshrn_n_s32(v11, 7uLL);
  *(int16x4_t *)v10.i8 = vtrn1_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v12.i8);
  *(int16x4_t *)v12.i8 = vtrn2_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v12.i8);
  *(int16x4_t *)v5.i8 = vtrn1_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v7.i8);
  *(int16x4_t *)v13.i8 = vtrn2_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v7.i8);
  *(int32x2_t *)v7.i8 = vzip1_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v5.i8);
  *(int32x2_t *)v5.i8 = vzip2_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v5.i8);
  v14 = vaddl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v5.i8);
  *(int32x2_t *)v11.i8 = vzip2_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
  v15 = vaddl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v11.i8);
  v16 = vsubl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v11.i8);
  *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
  v17 = vmlaq_s32(vmlal_s16(vmulq_s32(v15, v9), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v14, v8);
  v18 = vmlaq_s32(vmlsl_s16(vmulq_s32(v16, v8), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v14, v9);
  v19 = vmlaq_s32(vmlal_s16(vmulq_s32(v16, v9), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v15, v4);
  v20 = vmulq_s32(vaddw_s16(vsubl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v5.i8), *(int16x4_t *)v11.i8), (int32x4_t)v3);
  *(int16x4_t *)v3.i8 = vqrshrn_n_s32(v17, 0xCuLL);
  *(int16x4_t *)v17.i8 = vqrshrn_n_s32(v19, 0xCuLL);
  *(int16x4_t *)v5.i8 = vqrshrn_n_s32(v20, 0xCuLL);
  *(int16x4_t *)v4.i8 = vqrshrn_n_s32(v18, 0xCuLL);
  vst4_s16((__int16 *)a3, *(int16x4x4_t *)v3.i8);
  v20.i32[0] = *a1;
  v20.i32[1] = *(__int32 *)((char *)a1 + a2);
  v21 = (__int32 *)((char *)a1 + 3 * a2);
  v3.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  v3.i32[1] = *v21;
  v22 = *(uint16x8_t *)(a3 + 16);
  *(int8x8_t *)v20.i8 = vqmovun_s16((int16x8_t)vaddw_u8(*(uint16x8_t *)a3, *(uint8x8_t *)v20.i8));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *a1 = v20.i32[0];
  *(__int32 *)((char *)a1 + a2) = v20.i32[1];
  result = vqmovun_s16((int16x8_t)vaddw_u8(v22, *(uint8x8_t *)v3.i8));
  *(__int32 *)((char *)a1 + 2 * a2) = result.i32[0];
  *v21 = result.i32[1];
  return result;
}

int16x4_t sub_1B6883D44(int16x4_t *a1, uint64_t a2, int16x4_t *a3, uint64_t a4, int8x16_t *a5)
{
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int8x16_t v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = vsub_s16(*(int16x4_t *)((char *)a1 + 2 * a2), *(int16x4_t *)((char *)a3 + 2 * a4));
  v7 = vsub_s16(*(int16x4_t *)((char *)a1 + 4 * a2), *(int16x4_t *)((char *)a3 + 4 * a4));
  v8 = vsub_s16(*(int16x4_t *)((char *)a1 + 6 * a2), *(int16x4_t *)((char *)a3 + 6 * a4));
  *(int16x4_t *)a5->i8 = vsub_s16(*a1, *a3);
  a5->u64[1] = (unint64_t)v6;
  *(int16x4_t *)a5[1].i8 = v7;
  a5[1].u64[1] = (unint64_t)v8;
  sub_1B68891A4((int16x4_t *)v10, 3, *a5, a5[1]);
  return sub_1B6889248((int16x4_t *)a5, v10[0], v10[1]);
}

int16x4_t sub_1B6883E00(int16x4_t *a1, uint64_t a2, int16x4_t *a3, uint64_t a4, int8x16_t *a5)
{
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int8x16_t v8;
  int16x4_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int16x4_t v12;
  int32x2_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;

  v5 = vsub_s16(*(int16x4_t *)((char *)a1 + 2 * a2), *(int16x4_t *)((char *)a3 + 2 * a4));
  v6 = vsub_s16(*(int16x4_t *)((char *)a1 + 4 * a2), *(int16x4_t *)((char *)a3 + 4 * a4));
  v7 = vsub_s16(*(int16x4_t *)((char *)a1 + 6 * a2), *(int16x4_t *)((char *)a3 + 6 * a4));
  *(int16x4_t *)a5->i8 = vsub_s16(*a1, *a3);
  a5->u64[1] = (unint64_t)v5;
  *(int16x4_t *)a5[1].i8 = v6;
  a5[1].u64[1] = (unint64_t)v7;
  v8 = a5[1];
  v9 = (int16x4_t)vextq_s8(*a5, *a5, 8uLL).u64[0];
  v10 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a5->i8, v9);
  v11 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a5->i8, v9);
  v12 = (int16x4_t)vextq_s8(v8, v8, 8uLL).u64[0];
  v13 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v8.i8, v12);
  *(int16x4_t *)v8.i8 = vtrn2_s16(*(int16x4_t *)v8.i8, v12);
  v14 = (int16x4_t)vzip1_s32(v11, *(int32x2_t *)v8.i8);
  v15 = (int16x4_t)vzip2_s32(v10, v13);
  v16 = (int16x4_t)vzip2_s32(v11, *(int32x2_t *)v8.i8);
  *(int32x2_t *)v8.i8 = vzip1_s32(v10, v13);
  v17 = vadd_s16(v16, *(int16x4_t *)v8.i8);
  v18 = vsub_s16(*(int16x4_t *)v8.i8, v16);
  *(int16x4_t *)v8.i8 = vadd_s16(v15, v14);
  v19 = vsub_s16(v14, v15);
  return sub_1B68888D0((int16x4_t *)a5, (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v8.i8, v17), 6uLL), 3uLL)), vrshrq_n_s32(vmlal_s16(vmull_s16(v19, (int16x4_t)0x24002400240024), v18, (int16x4_t)0x53005300530053), 3uLL)), (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vsubl_s16(v17, *(int16x4_t *)v8.i8), 6uLL), 3uLL)), vrshrq_n_s32(vmlsl_s16(vmull_s16(v18, (int16x4_t)0x24002400240024), v19, (int16x4_t)0x53005300530053), 3uLL)));
}

void sub_1B6883EE0(int16x8_t *a1, uint64_t a2, int16x8_t *a3, uint64_t a4, int16x8_t *a5)
{
  int16x4_t v6[18];

  v6[17] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  sub_1B688428C(a1, a2, a3, a4, a5);
  sub_1B688876C(v6, (int16x4_t *)a5, 4);
  sub_1B6888810((int16x4_t *)a5, v6);
}

void sub_1B6883F50(int16x8_t *a1, uint64_t a2, int16x8_t *a3, uint64_t a4, int16x4_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int16x8_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x4_t v13[66];

  v13[65] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  v6 = 2 * a2;
  v7 = 2 * a4;
  v8 = -2;
  v9 = (int16x8_t *)a5;
  do
  {
    v10 = vsubq_s16(a1[1], a3[1]);
    v11 = vsubq_s16(*(int16x8_t *)((char *)a1 + 2 * a2), *(int16x8_t *)((char *)a3 + 2 * a4));
    v12 = vsubq_s16(*(int16x8_t *)((char *)&a1[1] + v6), *(int16x8_t *)((char *)&a3[1] + v7));
    *v9 = vsubq_s16(*a1, *a3);
    v9[1] = v10;
    v8 += 2;
    v9[2] = v11;
    v9[3] = v12;
    a1 = (int16x8_t *)((char *)a1 + v6 + v6);
    a3 = (int16x8_t *)((char *)a3 + v7 + v7);
    v9 += 4;
  }
  while (v8 < 0xE);
  sub_1B6887F70(v13, a5, 5);
  sub_1B68880BC(a5, v13);
}

void sub_1B6884014(int16x8_t *a1, uint64_t a2, int16x8_t *a3, uint64_t a4, int16x4_t *a5)
{
  uint64_t v6;
  int16x8_t *v7;
  int16x8_t *v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t *v11;
  int16x8_t v12;
  int16x4_t v13[258];

  v6 = 0;
  v13[257] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  v7 = a3 + 2;
  v8 = a1 + 2;
  do
  {
    v9 = vsubq_s16(v8[-1], v7[-1]);
    v10 = vsubq_s16(*v8, *v7);
    v11 = (int16x8_t *)&a5[v6];
    v12 = vsubq_s16(v8[1], v7[1]);
    *v11 = vsubq_s16(v8[-2], v7[-2]);
    v11[1] = v9;
    v11[2] = v10;
    v11[3] = v12;
    v6 += 8;
    v7 = (int16x8_t *)((char *)v7 + 2 * a4);
    v8 = (int16x8_t *)((char *)v8 + 2 * a2);
  }
  while ((_DWORD)(v6 * 8) != 2048);
  sub_1B6888960(v13, a5, 6);
  sub_1B6888B94(a5, v13);
}

int16x4_t sub_1B68840D4(int8x16_t *a1)
{
  int8x16_t v1;
  int16x4_t v2;
  int32x2_t v3;
  int32x2_t v4;
  int16x4_t v5;
  int32x2_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;

  v1 = a1[1];
  v2 = (int16x4_t)vextq_s8(*a1, *a1, 8uLL).u64[0];
  v3 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a1->i8, v2);
  v4 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a1->i8, v2);
  v5 = (int16x4_t)vextq_s8(v1, v1, 8uLL).u64[0];
  v6 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v1.i8, v5);
  *(int16x4_t *)v1.i8 = vtrn2_s16(*(int16x4_t *)v1.i8, v5);
  v7 = (int16x4_t)vzip1_s32(v4, *(int32x2_t *)v1.i8);
  v8 = (int16x4_t)vzip2_s32(v3, v6);
  v9 = (int16x4_t)vzip2_s32(v4, *(int32x2_t *)v1.i8);
  *(int32x2_t *)v1.i8 = vzip1_s32(v3, v6);
  v10 = vadd_s16(v9, *(int16x4_t *)v1.i8);
  v11 = vsub_s16(*(int16x4_t *)v1.i8, v9);
  *(int16x4_t *)v1.i8 = vadd_s16(v8, v7);
  v12 = vsub_s16(v7, v8);
  return sub_1B68888D0((int16x4_t *)a1, (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vaddl_s16(*(int16x4_t *)v1.i8, v10), 6uLL), 3uLL)), vrshrq_n_s32(vmlal_s16(vmull_s16(v12, (int16x4_t)0x24002400240024), v11, (int16x4_t)0x53005300530053), 3uLL)), (int8x16_t)vqmovn_high_s32(vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vsubl_s16(v10, *(int16x4_t *)v1.i8), 6uLL), 3uLL)), vrshrq_n_s32(vmlsl_s16(vmull_s16(v11, (int16x4_t)0x24002400240024), v12, (int16x4_t)0x53005300530053), 3uLL)));
}

void sub_1B688415C(int16x4_t *a1)
{
  int16x4_t v2[18];

  v2[17] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  sub_1B688876C(v2, a1, 4);
  sub_1B6888810(a1, v2);
}

void sub_1B68841C8(int16x4_t *a1)
{
  int16x4_t v2[66];

  v2[65] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  sub_1B6887F70(v2, a1, 5);
  sub_1B68880BC(a1, v2);
}

int16x4_t sub_1B6884234(int16x4_t *a1, uint64_t a2, int16x4_t *a3, uint64_t a4, int16x4_t *a5)
{
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t result;

  v5 = vsub_s16(*(int16x4_t *)((char *)a1 + 2 * a2), *(int16x4_t *)((char *)a3 + 2 * a4));
  v6 = *(int16x4_t *)((char *)a1 + 6 * a2);
  v7 = *(int16x4_t *)((char *)a3 + 6 * a4);
  v8 = vsub_s16(*(int16x4_t *)((char *)a1 + 4 * a2), *(int16x4_t *)((char *)a3 + 4 * a4));
  *a5 = vsub_s16(*a1, *a3);
  a5[1] = v5;
  result = vsub_s16(v6, v7);
  a5[2] = v8;
  a5[3] = result;
  return result;
}

int16x8_t *sub_1B688428C(int16x8_t *result, uint64_t a2, int16x8_t *a3, uint64_t a4, int16x8_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  int16x8_t v9;
  int16x8_t *v10;
  int16x8_t *v11;
  int16x8_t v12;
  int16x8_t *v13;
  int16x8_t *v14;
  int16x8_t v15;

  v5 = 2 * a2;
  v6 = 2 * a4;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = vsubq_s16(*(int16x8_t *)((char *)result + 2 * a2), *(int16x8_t *)((char *)a3 + 2 * a4));
    v10 = (int16x8_t *)((char *)result + v5 + v5);
    v11 = (int16x8_t *)((char *)a3 + v6 + v6);
    v12 = vsubq_s16(*v10, *v11);
    v13 = (int16x8_t *)((char *)v10 + v5);
    v14 = (int16x8_t *)((char *)v11 + v6);
    v15 = vsubq_s16(*v13, *v14);
    *a5 = vsubq_s16(*result, *a3);
    a5[1] = v9;
    a5[2] = v12;
    a5[3] = v15;
    result = (int16x8_t *)((char *)v13 + v5);
    a3 = (int16x8_t *)((char *)v14 + v6);
    a5 += 4;
    v7 = 0;
  }
  while ((v8 & 1) != 0);
  return result;
}

int16x8_t *sub_1B6884304(int16x8_t *result, uint64_t a2, int16x8_t *a3, uint64_t a4, int16x8_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;

  v5 = 2 * a2;
  v6 = 2 * a4;
  v7 = -2;
  do
  {
    v8 = vsubq_s16(result[1], a3[1]);
    v9 = vsubq_s16(*(int16x8_t *)((char *)result + 2 * a2), *(int16x8_t *)((char *)a3 + 2 * a4));
    v10 = vsubq_s16(*(int16x8_t *)((char *)&result[1] + v5), *(int16x8_t *)((char *)&a3[1] + v6));
    *a5 = vsubq_s16(*result, *a3);
    a5[1] = v8;
    v7 += 2;
    a5[2] = v9;
    a5[3] = v10;
    result = (int16x8_t *)((char *)result + v5 + v5);
    a3 = (int16x8_t *)((char *)a3 + v6 + v6);
    a5 += 4;
  }
  while (v7 < 0xE);
  return result;
}

int16x8_t sub_1B688435C(int16x8_t *a1, uint64_t a2, int16x8_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int16x8_t *v6;
  int16x8_t *v7;
  int16x8_t result;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t *v11;
  int16x8_t v12;

  v5 = 0;
  v6 = a3 + 2;
  v7 = a1 + 2;
  do
  {
    result = vsubq_s16(v7[-2], v6[-2]);
    v9 = vsubq_s16(v7[-1], v6[-1]);
    v10 = vsubq_s16(*v7, *v6);
    v11 = (int16x8_t *)(a5 + v5);
    v12 = vsubq_s16(v7[1], v6[1]);
    *v11 = result;
    v11[1] = v9;
    v11[2] = v10;
    v11[3] = v12;
    v5 += 64;
    v6 = (int16x8_t *)((char *)v6 + 2 * a4);
    v7 = (int16x8_t *)((char *)v7 + 2 * a2);
  }
  while ((_DWORD)v5 != 2048);
  return result;
}

int16x8_t sub_1B68843B4(int16x8_t *a1)
{
  int16x8_t result;
  int16x8_t v2;

  result = vshlq_n_s16(*a1, 3uLL);
  v2 = vshlq_n_s16(a1[1], 3uLL);
  *a1 = result;
  a1[1] = v2;
  return result;
}

int16x8_t sub_1B68843C8(int16x8_t *a1)
{
  int16x8_t result;
  int16x8_t v2;

  result = vrshrq_n_s16(*a1, 3uLL);
  v2 = vrshrq_n_s16(a1[1], 3uLL);
  *a1 = result;
  a1[1] = v2;
  return result;
}

int16x8_t sub_1B68843DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int16x8_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int16x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t result;

  v3 = *(int16x8_t *)(a3 + 16);
  v4 = vaddl_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)a3);
  v5 = vaddw_high_s16(vmovl_s16(*(int16x4_t *)v3.i8), v3);
  v6 = vsubw_high_s16(vmovl_s16(*(int16x4_t *)a3), v3);
  v7.i64[0] = 0x4A004A004A004ALL;
  v7.i64[1] = 0x4A004A004A004ALL;
  v8.i64[0] = 0x1D0000001DLL;
  v8.i64[1] = 0x1D0000001DLL;
  v9.i64[0] = 0x3700000037;
  v9.i64[1] = 0x3700000037;
  v10 = vmlaq_s32(vmlal_high_s16(vmulq_s32(v5, v9), *(int16x8_t *)a3, v7), v4, v8);
  v11 = vmlaq_s32(vmlsl_high_s16(vmulq_s32(v6, v8), *(int16x8_t *)a3, v7), v4, v9);
  v4.i64[0] = 0x1C0000001CLL;
  v4.i64[1] = 0x1C0000001CLL;
  v12 = vmlaq_s32(vmlal_high_s16(vmulq_s32(v6, v9), *(int16x8_t *)a3, v7), v5, v4);
  v13 = vaddw_high_s16(vsubl_s16(*(int16x4_t *)a3, *(int16x4_t *)v3.i8), v3);
  v3.i64[0] = 0x4A0000004ALL;
  v3.i64[1] = 0x4A0000004ALL;
  *(int16x4_t *)v5.i8 = vqrshrn_n_s32(v10, 7uLL);
  *(int16x4_t *)v12.i8 = vqrshrn_n_s32(v12, 7uLL);
  *(int16x4_t *)v13.i8 = vqrshrn_n_s32(vmulq_s32(v13, (int32x4_t)v3), 7uLL);
  *(int16x4_t *)v7.i8 = vqrshrn_n_s32(v11, 7uLL);
  *(int16x4_t *)v10.i8 = vtrn1_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v12.i8);
  *(int16x4_t *)v12.i8 = vtrn2_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v12.i8);
  *(int16x4_t *)v5.i8 = vtrn1_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v7.i8);
  *(int16x4_t *)v13.i8 = vtrn2_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v7.i8);
  *(int32x2_t *)v7.i8 = vzip1_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v5.i8);
  *(int32x2_t *)v5.i8 = vzip2_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v5.i8);
  v14 = vaddl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v5.i8);
  *(int32x2_t *)v11.i8 = vzip2_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
  v15 = vaddl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v11.i8);
  v16 = vsubl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v11.i8);
  *(int32x2_t *)v13.i8 = vzip1_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v13.i8);
  v17 = (int16x8_t)vmlaq_s32(vmlal_s16(vmulq_s32(v15, v9), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v14, v8);
  v18 = vmlaq_s32(vmlsl_s16(vmulq_s32(v16, v8), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v14, v9);
  v19 = vmlaq_s32(vmlal_s16(vmulq_s32(v16, v9), *(int16x4_t *)v13.i8, (int16x4_t)0x4A004A004A004ALL), v15, v4);
  v20 = vmulq_s32(vaddw_s16(vsubl_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v5.i8), *(int16x4_t *)v11.i8), (int32x4_t)v3);
  *(int16x4_t *)v3.i8 = vqrshrn_n_s32((int32x4_t)v17, 0xAuLL);
  *(int16x4_t *)v17.i8 = vqrshrn_n_s32(v19, 0xAuLL);
  *(int16x4_t *)v5.i8 = vqrshrn_n_s32(v20, 0xAuLL);
  *(int16x4_t *)v4.i8 = vqrshrn_n_s32(v18, 0xAuLL);
  vst4_s16((__int16 *)a3, *(int16x4x4_t *)v3.i8);
  v21 = (uint64_t *)((char *)a1 + 2 * a2);
  v20.i64[0] = *a1;
  v20.i64[1] = *v21;
  v22 = (uint64_t *)((char *)a1 + 6 * a2);
  v3.i64[0] = *(uint64_t *)((char *)a1 + 4 * a2);
  v3.i64[1] = *v22;
  v23 = *(int16x8_t *)(a3 + 16);
  v17.i64[0] = 0xFC00FC00FC00FC00;
  v17.i64[1] = 0xFC00FC00FC00FC00;
  v24 = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v20, *(int16x8_t *)a3), v17);
  v4.i64[0] = 0;
  v4.i8[8] = 0;
  v4.i8[12] = 0;
  *(int32x4_t *)a3 = v4;
  *(int32x4_t *)(a3 + 16) = v4;
  *a1 = v24.i64[0];
  *v21 = v24.i64[1];
  result = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v3, v23), v17);
  *(uint64_t *)((char *)a1 + 4 * a2) = result.i64[0];
  *v22 = result.i64[1];
  return result;
}

void sub_1B6884510(__int32 *a1, uint64_t a2, int32x4_t *a3, int a4)
{
  uint16x8_t v7;
  _DWORD *v8;
  uint8x8_t v9;
  __int32 *v10;
  __int32 *v11;
  uint8x8_t v12;
  int8x8_t v13;
  int8x8_t v14;
  __int32 v15;
  uint8x8_t v16;
  uint8x8_t v17;
  int16x8_t v18;

  if (a4 == 1)
  {
    v7 = (uint16x8_t)vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    v8 = (__int32 *)((char *)a1 + a2);
    v9.i32[0] = *a1;
    v9.i32[1] = *(__int32 *)((char *)a1 + a2);
    v10 = (__int32 *)((char *)a1 + 2 * a2);
    v11 = (__int32 *)((char *)a1 + 3 * a2);
    v12.i32[0] = *v10;
    v12.i32[1] = *v11;
    v13 = vqmovun_s16((int16x8_t)vaddw_u8(v7, v9));
    v14 = vqmovun_s16((int16x8_t)vaddw_u8(v7, v12));
    v15 = v13.i32[0];
  }
  else
  {
    sub_1B6887864(a3, a4);
    v8 = (__int32 *)((char *)a1 + a2);
    v16.i32[0] = *a1;
    v16.i32[1] = *(__int32 *)((char *)a1 + a2);
    v10 = (__int32 *)((char *)a1 + 2 * a2);
    v11 = (__int32 *)((char *)a1 + 3 * a2);
    v17.i32[0] = *v10;
    v17.i32[1] = *v11;
    v18 = (int16x8_t)vaddw_u8((uint16x8_t)a3[1], v17);
    v13 = vqmovun_s16((int16x8_t)vaddw_u8(*(uint16x8_t *)a3, v16));
    v14 = vqmovun_s16(v18);
    v15 = v13.i32[0];
    *a3 = 0u;
    a3[1] = 0u;
  }
  *a1 = v15;
  *v8 = v13.i32[1];
  *v10 = v14.i32[0];
  *v11 = v14.i32[1];
}

void sub_1B68845EC(uint64_t *a1, uint64_t a2, int32x4_t *a3, int a4)
{
  int16x8_t v7;
  uint64_t *v8;
  uint16x8_t v9;
  uint16x8_t *v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  uint16x8_t v15;
  int16x8_t v16;

  if (a4 == 1)
  {
    v7 = vdupq_n_s16((a3->i16[0] + 17) >> 5);
    a3->i16[0] = 0;
    v8 = (uint64_t *)((char *)a1 + 2 * a2);
    v9.i64[0] = *a1;
    v9.i64[1] = *v8;
    v10 = (uint16x8_t *)((char *)a1 + 4 * a2);
    v11.i64[0] = 0xFC00FC00FC00FC00;
    v11.i64[1] = 0xFC00FC00FC00FC00;
    v12 = vminq_s16((int16x8_t)vsqaddq_u16(v9, v7), v11);
    v13 = vminq_s16((int16x8_t)vsqaddq_u16(*v10, v7), v11);
    v14 = v12.i64[0];
  }
  else
  {
    sub_1B6887788(a3, a4);
    v8 = (uint64_t *)((char *)a1 + 2 * a2);
    v15.i64[0] = *a1;
    v15.i64[1] = *v8;
    v10 = (uint16x8_t *)((char *)a1 + 4 * a2);
    v16.i64[0] = 0xFC00FC00FC00FC00;
    v16.i64[1] = 0xFC00FC00FC00FC00;
    v12 = vminq_s16((int16x8_t)vsqaddq_u16(v15, *(int16x8_t *)a3), v16);
    v13 = vminq_s16((int16x8_t)vsqaddq_u16(*v10, (int16x8_t)a3[1]), v16);
    v14 = v12.i64[0];
    v16.i8[1] = 0;
    v16.i8[3] = 0;
    v16.i8[5] = 0;
    v16.i8[7] = 0;
    v16.i8[9] = 0;
    v16.i8[11] = 0;
    v16.i8[13] = 0;
    v16.i8[15] = 0;
    *a3 = (int32x4_t)v16;
    a3[1] = (int32x4_t)v16;
  }
  *a1 = v14;
  *v8 = v12.i64[1];
  *v10 = (uint16x8_t)v13;
}

int16x4_t *sub_1B68846D0(int16x4_t *result, uint64_t a2, int16x4_t *a3, int a4)
{
  int16x8_t *v4;
  uint8x8_t *v6;
  uint16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  char v16;
  char v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int16x8_t v25;
  int8x8_t v26;
  int8x8_t v27;
  int8x8_t v28;

  v4 = (int16x8_t *)a3;
  v6 = (uint8x8_t *)result;
  if (a4 == 1)
  {
    v7 = (uint16x8_t)vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    v8 = (int16x8_t)vaddw_u8(v7, (uint8x8_t)*result);
    v9 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + a2));
    v10 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + 2 * a2));
    v11 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + 3 * a2));
    v12 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + 4 * a2));
    v13 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + 5 * a2));
    v14 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)result + 6 * a2));
    v15 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)((char *)&result[a2] - a2));
    *result = (int16x4_t)vqmovun_s16(v8);
    *(int8x8_t *)((char *)result + a2) = vqmovun_s16(v9);
    *(int8x8_t *)((char *)result + 2 * a2) = vqmovun_s16(v10);
    *(int8x8_t *)((char *)result + 3 * a2) = vqmovun_s16(v11);
    *(int8x8_t *)((char *)result + 4 * a2) = vqmovun_s16(v12);
    *(int8x8_t *)((char *)result + 5 * a2) = vqmovun_s16(v13);
    *(int8x8_t *)((char *)result + 6 * a2) = vqmovun_s16(v14);
    *(int8x8_t *)((char *)&result[a2] - a2) = vqmovun_s16(v15);
  }
  else
  {
    result = sub_1B6887680(a3, a4);
    v16 = 1;
    do
    {
      v17 = v16;
      v18 = v4[1];
      v19 = v4[2];
      v20 = v4[3];
      v21 = (int32x4_t)vtrn1q_s16(*v4, v18);
      v22 = (int32x4_t)vtrn2q_s16(*v4, v18);
      v23 = (int32x4_t)vtrn1q_s16(v19, v20);
      v24 = (int32x4_t)vtrn2q_s16(v19, v20);
      v25 = (int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s32(v22, v24), *(uint8x8_t *)((char *)v6 + 3 * a2));
      v26 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn1q_s32(v21, v23), *v6));
      v27 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn1q_s32(v22, v24), *(uint8x8_t *)((char *)v6 + a2)));
      v28 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s32(v21, v23), *(uint8x8_t *)((char *)v6 + 2 * a2)));
      *v4 = 0uLL;
      v4[1] = 0uLL;
      v4[2] = 0uLL;
      v4[3] = 0uLL;
      *v6 = (uint8x8_t)v26;
      *(int8x8_t *)((char *)v6 + a2) = v27;
      *(int8x8_t *)((char *)v6 + 2 * a2) = v28;
      *(int8x8_t *)((char *)v6 + 3 * a2) = vqmovun_s16(v25);
      v6 = (uint8x8_t *)((char *)v6 + 4 * a2);
      v4 += 4;
      v16 = 0;
    }
    while ((v17 & 1) != 0);
  }
  return result;
}

uint16x8_t *sub_1B688485C(uint16x8_t *result, uint64_t a2, int16x4_t *a3, int a4)
{
  int16x8_t *v4;
  uint16x8_t *v6;
  int16x8_t v7;
  uint16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  char v16;
  int16x8_t v17;
  char v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;

  v4 = (int16x8_t *)a3;
  v6 = result;
  if (a4 == 1)
  {
    v7 = vdupq_n_s16((a3->i16[0] + 17) >> 5);
    a3->i16[0] = 0;
    v8 = *(uint16x8_t *)((char *)result + 14 * a2);
    v9.i64[0] = 0xFC00FC00FC00FC00;
    v9.i64[1] = 0xFC00FC00FC00FC00;
    v10 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 2 * a2), v7), v9);
    v11 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 4 * a2), v7), v9);
    v12 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 6 * a2), v7), v9);
    v13 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 8 * a2), v7), v9);
    v14 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 10 * a2), v7), v9);
    v15 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 12 * a2), v7), v9);
    *(int16x8_t *)result = vminq_s16((int16x8_t)vsqaddq_u16(*result, v7), v9);
    *(int16x8_t *)((char *)result + 2 * a2) = v10;
    *(int16x8_t *)((char *)result + 4 * a2) = v11;
    *(int16x8_t *)((char *)result + 6 * a2) = v12;
    *(int16x8_t *)((char *)result + 8 * a2) = v13;
    *(int16x8_t *)((char *)result + 10 * a2) = v14;
    *(int16x8_t *)((char *)result + 12 * a2) = v15;
    *(int16x8_t *)((char *)result + 14 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v8, v7), v9);
  }
  else
  {
    result = (uint16x8_t *)sub_1B6887578(a3, a4);
    v16 = 1;
    v17.i64[0] = 0xFC00FC00FC00FC00;
    v17.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v18 = v16;
      v19 = v4[1];
      v20 = v4[2];
      v21 = v4[3];
      v22 = (int32x4_t)vtrn1q_s16(*v4, v19);
      v23 = (int32x4_t)vtrn2q_s16(*v4, v19);
      v24 = (int32x4_t)vtrn1q_s16(v20, v21);
      v25 = (int32x4_t)vtrn2q_s16(v20, v21);
      v26 = vminq_s16((int16x8_t)vsqaddq_u16(*v6, (int16x8_t)vtrn1q_s32(v22, v24)), v17);
      v27 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)v6 + 2 * a2), (int16x8_t)vtrn1q_s32(v23, v25)), v17);
      v28 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)v6 + 4 * a2), (int16x8_t)vtrn2q_s32(v22, v24)), v17);
      v29 = (int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)v6 + 6 * a2), (int16x8_t)vtrn2q_s32(v23, v25));
      *v4 = 0uLL;
      v4[1] = 0uLL;
      v4[2] = 0uLL;
      v4[3] = 0uLL;
      *v6 = (uint16x8_t)v26;
      *(int16x8_t *)((char *)v6 + 2 * a2) = v27;
      *(int16x8_t *)((char *)v6 + 4 * a2) = v28;
      *(int16x8_t *)((char *)v6 + 6 * a2) = vminq_s16(v29, v17);
      v6 = (uint16x8_t *)((char *)v6 + 8 * a2);
      v4 += 4;
      v16 = 0;
    }
    while ((v18 & 1) != 0);
  }
  return result;
}

void sub_1B6884A08(uint8x16_t *a1, uint64_t a2, int16x4_t *a3, int a4)
{
  int16x8_t *v4;
  int16x8_t v7;
  int16x8_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  unsigned int v11;
  uint8x16_t v12;
  uint8x16_t v13;
  uint8x16_t v14;
  unsigned int v15;
  uint8x16_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;

  v4 = (int16x8_t *)a3;
  if (a4 == 1)
  {
    v7 = vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    v8 = vnegq_s16(v7);
    v9 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v7), v7);
    v10 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v8), v8);
    v11 = -4;
    do
    {
      v12 = vqaddq_u8(*(uint8x16_t *)((char *)a1 + 3 * a2), v9);
      v13 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)a1 + a2), v9), v10);
      v14 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)a1 + 2 * a2), v9), v10);
      *a1 = vqsubq_u8(vqaddq_u8(*a1, v9), v10);
      *(uint8x16_t *)((char *)a1 + a2) = v13;
      *(uint8x16_t *)((char *)a1 + 2 * a2) = v14;
      *(uint8x16_t *)((char *)a1 + 3 * a2) = vqsubq_u8(v12, v10);
      a1 = (uint8x16_t *)((char *)a1 + 4 * a2);
      v11 += 4;
    }
    while (v11 < 0xC);
  }
  else
  {
    sub_1B6886FA4(a3, a4);
    v15 = -4;
    do
    {
      v16 = *(uint8x16_t *)((char *)a1 + 3 * a2);
      v17 = v4[1];
      v18 = v4[2];
      v19 = v4[3];
      v20 = v4[4];
      v21 = v4[5];
      v22 = v4[6];
      v23 = v4[7];
      v24 = (int32x4_t)vtrn1q_s16(*v4, v18);
      v25 = (int32x4_t)vtrn2q_s16(*v4, v18);
      v26 = (int32x4_t)vtrn1q_s16(v20, v22);
      v27 = (int32x4_t)vtrn2q_s16(v20, v22);
      v28 = (uint16x8_t)vtrn1q_s32(v24, v26);
      v29 = (uint16x8_t)vtrn2q_s32(v24, v26);
      v30 = (uint16x8_t)vtrn1q_s32(v25, v27);
      v31 = (uint16x8_t)vtrn2q_s32(v25, v27);
      v32 = (int32x4_t)vtrn1q_s16(v17, v19);
      v33 = (int32x4_t)vtrn2q_s16(v17, v19);
      v34 = (int32x4_t)vtrn1q_s16(v21, v23);
      v35 = (int32x4_t)vtrn2q_s16(v21, v23);
      v36 = (uint16x8_t)vtrn1q_s32(v32, v34);
      v37 = (uint16x8_t)vtrn2q_s32(v32, v34);
      v38 = (uint16x8_t)vtrn1q_s32(v33, v35);
      v39 = (int16x8_t)vaddw_u8(v31, *(uint8x8_t *)v16.i8);
      v40 = (int16x8_t)vaddw_high_u8((uint16x8_t)vtrn2q_s32(v33, v35), v16);
      v41 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v28, *(uint8x8_t *)a1->i8)), (int16x8_t)vaddw_high_u8(v36, *a1));
      v42 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v30, *(uint8x8_t *)&a1->i8[a2])), (int16x8_t)vaddw_high_u8(v38, *(uint8x16_t *)((char *)a1 + a2)));
      v43 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v29, *(uint8x8_t *)&a1->i8[2 * a2])), (int16x8_t)vaddw_high_u8(v37, *(uint8x16_t *)((char *)a1 + 2 * a2)));
      *v4 = 0uLL;
      v4[1] = 0uLL;
      v4[2] = 0uLL;
      v4[3] = 0uLL;
      v4[4] = 0uLL;
      v4[5] = 0uLL;
      v4[6] = 0uLL;
      v4[7] = 0uLL;
      *a1 = (uint8x16_t)v41;
      *(int8x16_t *)((char *)a1 + a2) = v42;
      *(int8x16_t *)((char *)a1 + 2 * a2) = v43;
      *(int8x16_t *)((char *)a1 + 3 * a2) = vqmovun_high_s16(vqmovun_s16(v39), v40);
      a1 = (uint8x16_t *)((char *)a1 + 4 * a2);
      v15 += 4;
      v4 += 8;
    }
    while (v15 < 0xC);
  }
}

void sub_1B6884BBC(uint16x8_t *a1, uint64_t a2, int16x4_t *a3, int a4)
{
  int16x8_t v7;
  uint64_t v8;
  unsigned int v9;
  int16x8_t v10;
  int16x8_t *v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint64_t v15;
  char v16;
  int16x8_t v17;
  char v18;
  uint16x8_t *v19;
  unsigned int v20;
  int16x8_t *v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;

  if (a4 == 1)
  {
    v7 = vdupq_n_s16((a3->i16[0] + 17) >> 5);
    a3->i16[0] = 0;
    v8 = 2 * a2;
    v9 = -2;
    v10.i64[0] = 0xFC00FC00FC00FC00;
    v10.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v11 = (int16x8_t *)&a1->i8[v8];
      v12 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)a1 + 2 * a2), v7), v10);
      v13 = vminq_s16((int16x8_t)vsqaddq_u16(a1[1], v7), v10);
      v14 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)&a1[1] + v8), v7), v10);
      *(int16x8_t *)a1 = vminq_s16((int16x8_t)vsqaddq_u16(*a1, v7), v10);
      *v11 = v12;
      a1[1] = (uint16x8_t)v13;
      v11[1] = v14;
      a1 = (uint16x8_t *)((char *)a1 + 4 * a2);
      v9 += 2;
    }
    while (v9 < 0xE);
  }
  else
  {
    sub_1B68864F8(a3, a4);
    v15 = 0;
    v16 = 1;
    v17.i64[0] = 0xFC00FC00FC00FC00;
    v17.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v18 = v16;
      v19 = &a1[(unint64_t)v15 / 2];
      v20 = -4;
      v21 = (int16x8_t *)&a3[v15];
      do
      {
        v22 = *(uint16x8_t *)((char *)v19 + 2 * a2);
        v23 = *(uint16x8_t *)((char *)v19 + 4 * a2);
        v24 = *(uint16x8_t *)((char *)v19 + 6 * a2);
        v25 = *v19;
        v26 = *v21;
        v27 = v21[2];
        v28 = v21[4];
        v29 = v21[6];
        *v21 = 0uLL;
        v21[2] = 0uLL;
        v21[4] = 0uLL;
        v21[6] = 0uLL;
        v30 = (int32x4_t)vtrn1q_s16(v26, v27);
        v31 = (int32x4_t)vtrn2q_s16(v26, v27);
        v32 = (int32x4_t)vtrn1q_s16(v28, v29);
        v33 = (int32x4_t)vtrn2q_s16(v28, v29);
        *(int16x8_t *)v19 = vminq_s16((int16x8_t)vsqaddq_u16(v25, (int16x8_t)vtrn1q_s32(v30, v32)), v17);
        *(int16x8_t *)((char *)v19 + 2 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v22, (int16x8_t)vtrn1q_s32(v31, v33)), v17);
        *(int16x8_t *)((char *)v19 + 4 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v23, (int16x8_t)vtrn2q_s32(v30, v32)), v17);
        *(int16x8_t *)((char *)v19 + 6 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v24, (int16x8_t)vtrn2q_s32(v31, v33)), v17);
        v19 = (uint16x8_t *)((char *)v19 + 8 * a2);
        v20 += 4;
        v21 += 8;
      }
      while (v20 < 0xC);
      v16 = 0;
      v15 = 2;
    }
    while ((v18 & 1) != 0);
  }
}

void sub_1B6884D44(uint8x16_t *a1, uint64_t a2, int16x4_t *a3, int a4)
{
  int16x8_t v7;
  int16x8_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  unsigned int v11;
  uint8x16_t *v12;
  uint8x16_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  unint64_t v17;
  int16x4_t *v18;
  unint64_t v19;
  int16x4_t *v20;
  unint64_t v21;
  int16x4_t *v22;
  uint64_t v23;
  char v24;
  char v25;
  uint8x8_t *v26;
  unsigned int v27;
  int16x8_t *v28;
  uint8x16_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  unint64_t v57;
  int16x8_t *v58;
  unint64_t v59;
  int16x8_t *v60;
  unint64_t v61;
  uint64_t v62;

  if (a4 == 1)
  {
    v7 = vdupq_n_s16((a3->i16[0] + 65) >> 7);
    a3->i16[0] = 0;
    v8 = vnegq_s16(v7);
    v9 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v7), v7);
    v10 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v8), v8);
    v11 = -2;
    do
    {
      v12 = (uint8x16_t *)((char *)a1 + a2);
      v13 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)a1 + a2), v9), v10);
      v14 = vqsubq_u8(vqaddq_u8(a1[1], v9), v10);
      v15 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)&a1[1] + a2), v9), v10);
      *a1 = vqsubq_u8(vqaddq_u8(*a1, v9), v10);
      *v12 = v13;
      a1[1] = v14;
      v12[1] = v15;
      a1 = (uint8x16_t *)((char *)a1 + 2 * a2);
      v11 += 2;
    }
    while (v11 < 0x1E);
    return;
  }
  if (a4 <= 16)
  {
    sub_1B68866D4(a3, 0x20u, (uint64_t)&unk_1B692BBE0);
LABEL_16:
    v21 = -4;
    v22 = a3;
    do
    {
      sub_1B6887180(v22, 0x20u, (uint64_t)&unk_1B692BBF0);
      v21 += 4;
      v22 += 32;
    }
    while (v21 < 0x1C);
    goto LABEL_18;
  }
  if (a4 > 0x30)
  {
    if (a4 >= 0xA1)
    {
      v19 = -4;
      v20 = a3;
      do
      {
        sub_1B6887940(v20);
        v19 += 4;
        ++v20;
      }
      while (v19 < 0x1C);
    }
    else
    {
      v17 = -4;
      v18 = a3;
      do
      {
        sub_1B6886950(v18, 0x20u, (uint64_t)&unk_1B692BC20, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v17 += 4;
        ++v18;
      }
      while (v17 < 0xC);
    }
  }
  else
  {
    sub_1B68867A0(a3, 0x20u, (uint64_t)&unk_1B692BC00, (int16x4_t *)aZzxu);
    sub_1B68867A0(a3 + 1, 0x20u, (uint64_t)&unk_1B692BC00, (int16x4_t *)aZzxu);
  }
  if (a4 <= 32)
    goto LABEL_16;
  if (a4 > 0x50)
  {
    if (a4 >= 0xE1)
    {
      v61 = -4;
      v62 = (uint64_t)a3;
      do
      {
        sub_1B6887D50(v62);
        v61 += 4;
        v62 += 256;
      }
      while (v61 < 0x1C);
    }
    else
    {
      v59 = -4;
      v60 = (int16x8_t *)a3;
      do
      {
        sub_1B68873F4(v60, 0x20u, (uint64_t)&unk_1B692BC30, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v59 += 4;
        v60 += 16;
      }
      while (v59 < 0x1C);
    }
  }
  else
  {
    v57 = -4;
    v58 = (int16x8_t *)a3;
    do
    {
      sub_1B6887260(v58, 0x20u, (uint64_t)&unk_1B692BC10, (int16x4_t *)aZzxu);
      v57 += 4;
      v58 += 16;
    }
    while (v57 < 0x1C);
  }
LABEL_18:
  v23 = 0;
  v24 = 1;
  do
  {
    v25 = v24;
    v26 = (uint8x8_t *)&a1[(unint64_t)v23 / 4];
    v27 = -4;
    v28 = (int16x8_t *)&a3[v23];
    do
    {
      v29 = *(uint8x16_t *)&v26->i8[3 * a2];
      v30 = v28[1];
      v31 = v28[4];
      v32 = v28[5];
      v33 = v28[8];
      v34 = v28[9];
      v35 = v28[12];
      v36 = v28[13];
      v37 = (int32x4_t)vtrn1q_s16(*v28, v31);
      v38 = (int32x4_t)vtrn2q_s16(*v28, v31);
      v39 = (int32x4_t)vtrn1q_s16(v33, v35);
      v40 = (int32x4_t)vtrn2q_s16(v33, v35);
      v41 = (uint16x8_t)vtrn1q_s32(v37, v39);
      v42 = (uint16x8_t)vtrn2q_s32(v37, v39);
      v43 = (uint16x8_t)vtrn1q_s32(v38, v40);
      v44 = (uint16x8_t)vtrn2q_s32(v38, v40);
      v45 = (int32x4_t)vtrn1q_s16(v30, v32);
      v46 = (int32x4_t)vtrn2q_s16(v30, v32);
      v47 = (int32x4_t)vtrn1q_s16(v34, v36);
      v48 = (int32x4_t)vtrn2q_s16(v34, v36);
      v49 = (uint16x8_t)vtrn1q_s32(v45, v47);
      v50 = (uint16x8_t)vtrn2q_s32(v45, v47);
      v51 = (uint16x8_t)vtrn1q_s32(v46, v48);
      v52 = (int16x8_t)vaddw_u8(v44, *(uint8x8_t *)v29.i8);
      v53 = (int16x8_t)vaddw_high_u8((uint16x8_t)vtrn2q_s32(v46, v48), v29);
      v54 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v41, *v26)), (int16x8_t)vaddw_high_u8(v49, *(uint8x16_t *)v26->i8));
      v55 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v43, *(uint8x8_t *)((char *)v26 + a2))), (int16x8_t)vaddw_high_u8(v51, *(uint8x16_t *)&v26->i8[a2]));
      v56 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v42, *(uint8x8_t *)((char *)v26 + 2 * a2))), (int16x8_t)vaddw_high_u8(v50, *(uint8x16_t *)&v26->i8[2 * a2]));
      *v28 = 0uLL;
      v28[1] = 0uLL;
      v28[4] = 0uLL;
      v28[5] = 0uLL;
      v28[8] = 0uLL;
      v28[9] = 0uLL;
      v28[12] = 0uLL;
      v28[13] = 0uLL;
      *(int8x16_t *)v26->i8 = v54;
      *(int8x16_t *)&v26->i8[a2] = v55;
      *(int8x16_t *)&v26->i8[2 * a2] = v56;
      *(int8x16_t *)&v26->i8[3 * a2] = vqmovun_high_s16(vqmovun_s16(v52), v53);
      v26 = (uint8x8_t *)((char *)v26 + 4 * a2);
      v27 += 4;
      v28 += 16;
    }
    while (v27 < 0x1C);
    v24 = 0;
    v23 = 4;
  }
  while ((v25 & 1) != 0);
}

void sub_1B68850EC(uint16x8_t *a1, uint64_t a2, int16x4_t *a3, int a4)
{
  uint16x8_t *v6;
  int16x8_t v7;
  uint16x8_t *v8;
  int v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  unint64_t v15;
  int16x4_t *v16;
  unint64_t v17;
  int16x4_t *v18;
  unint64_t v19;
  int16x4_t *v20;
  unint64_t v21;
  int16x8_t v22;
  int16x8_t *v23;
  unsigned int v24;
  uint16x8_t *v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  BOOL v38;
  unint64_t v39;
  int16x8_t *v40;
  unint64_t v41;
  int16x8_t *v42;
  unint64_t v43;
  uint64_t v44;

  v6 = a1;
  if (a4 == 1)
  {
    v7 = vdupq_n_s16((a3->i16[0] + 17) >> 5);
    a3->i16[0] = 0;
    v8 = a1 + 2;
    v9 = 32;
    v10.i64[0] = 0xFC00FC00FC00FC00;
    v10.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v11 = vminq_s16((int16x8_t)vsqaddq_u16(v8[-1], v7), v10);
      v12 = vminq_s16((int16x8_t)vsqaddq_u16(*v8, v7), v10);
      v13 = vminq_s16((int16x8_t)vsqaddq_u16(v8[1], v7), v10);
      v8[-2] = (uint16x8_t)vminq_s16((int16x8_t)vsqaddq_u16(v8[-2], v7), v10);
      v8[-1] = (uint16x8_t)v11;
      *v8 = (uint16x8_t)v12;
      v8[1] = (uint16x8_t)v13;
      v8 = (uint16x8_t *)((char *)v8 + 2 * a2);
      --v9;
    }
    while (v9);
    return;
  }
  if (a4 <= 16)
  {
    sub_1B68866D4(a3, 0x20u, (uint64_t)&unk_1B692BBE0);
LABEL_16:
    v19 = -4;
    v20 = a3;
    do
    {
      sub_1B6886AD0(v20, 0x20u, (uint64_t)&unk_1B692BBF0);
      v19 += 4;
      v20 += 32;
    }
    while (v19 < 0x1C);
    goto LABEL_18;
  }
  if (a4 > 0x30)
  {
    if (a4 >= 0xA1)
    {
      v17 = -4;
      v18 = a3;
      do
      {
        sub_1B6887940(v18);
        v17 += 4;
        ++v18;
      }
      while (v17 < 0x1C);
    }
    else
    {
      v15 = -4;
      v16 = a3;
      do
      {
        sub_1B6886950(v16, 0x20u, (uint64_t)&unk_1B692BC20, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v15 += 4;
        ++v16;
      }
      while (v15 < 0xC);
    }
  }
  else
  {
    sub_1B68867A0(a3, 0x20u, (uint64_t)&unk_1B692BC00, (int16x4_t *)aZzxu);
    sub_1B68867A0(a3 + 1, 0x20u, (uint64_t)&unk_1B692BC00, (int16x4_t *)aZzxu);
  }
  if (a4 <= 32)
    goto LABEL_16;
  if (a4 > 0x50)
  {
    if (a4 >= 0xE1)
    {
      v43 = -4;
      v44 = (uint64_t)a3;
      do
      {
        sub_1B6887B30(v44);
        v43 += 4;
        v44 += 256;
      }
      while (v43 < 0x1C);
    }
    else
    {
      v41 = -4;
      v42 = (int16x8_t *)a3;
      do
      {
        sub_1B6886D44(v42, 0x20u, (uint64_t)&unk_1B692BC30, (int16x4_t *)aZwpf, (int16x4_t *)aZzxurnic6);
        v41 += 4;
        v42 += 16;
      }
      while (v41 < 0x1C);
    }
  }
  else
  {
    v39 = -4;
    v40 = (int16x8_t *)a3;
    do
    {
      sub_1B6886BB0(v40, 0x20u, (uint64_t)&unk_1B692BC10, (int16x4_t *)aZzxu);
      v39 += 4;
      v40 += 16;
    }
    while (v39 < 0x1C);
  }
LABEL_18:
  v21 = 0;
  v22.i64[0] = 0xFC00FC00FC00FC00;
  v22.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v23 = (int16x8_t *)&a3[v21];
    v24 = -4;
    v25 = v6;
    do
    {
      v26 = *(uint16x8_t *)((char *)v25 + 2 * a2);
      v27 = *(uint16x8_t *)((char *)v25 + 4 * a2);
      v28 = *(uint16x8_t *)((char *)v25 + 6 * a2);
      v29 = *v25;
      v30 = *v23;
      v31 = v23[4];
      v32 = v23[8];
      v33 = v23[12];
      *v23 = 0uLL;
      v23[4] = 0uLL;
      v23[8] = 0uLL;
      v23[12] = 0uLL;
      v34 = (int32x4_t)vtrn1q_s16(v30, v31);
      v35 = (int32x4_t)vtrn2q_s16(v30, v31);
      v36 = (int32x4_t)vtrn1q_s16(v32, v33);
      v37 = (int32x4_t)vtrn2q_s16(v32, v33);
      *(int16x8_t *)v25 = vminq_s16((int16x8_t)vsqaddq_u16(v29, (int16x8_t)vtrn1q_s32(v34, v36)), v22);
      *(int16x8_t *)((char *)v25 + 2 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v26, (int16x8_t)vtrn1q_s32(v35, v37)), v22);
      *(int16x8_t *)((char *)v25 + 4 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v27, (int16x8_t)vtrn2q_s32(v34, v36)), v22);
      *(int16x8_t *)((char *)v25 + 6 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v28, (int16x8_t)vtrn2q_s32(v35, v37)), v22);
      v25 = (uint16x8_t *)((char *)v25 + 8 * a2);
      v24 += 4;
      v23 += 16;
    }
    while (v24 < 0x1C);
    ++v6;
    v38 = v21 >= 6;
    v21 += 2;
  }
  while (!v38);
}

int8x8_t sub_1B6885444(uint8x8_t *a1, uint64_t a2, uint64_t a3, int16x8_t *a4, int a5, int a6)
{
  int16x8_t v11;
  int16x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x8_t result;

  if ((a5 & 0x80000000) == 0)
  {
    if (a5)
      sub_1B6887864((int32x4_t *)a3, a5);
    if ((a6 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_8:
    v12 = vrshrq_n_s16(a4[1], 5uLL);
    *a4 = vrshrq_n_s16(*a4, 5uLL);
    a4[1] = v12;
    goto LABEL_9;
  }
  v11 = vrshrq_n_s16(*(int16x8_t *)(a3 + 16), 5uLL);
  *(int16x8_t *)a3 = vrshrq_n_s16(*(int16x8_t *)a3, 5uLL);
  *(int16x8_t *)(a3 + 16) = v11;
  if (a6 < 0)
    goto LABEL_8;
LABEL_5:
  if (a6)
    sub_1B6887864((int32x4_t *)a4, a6);
LABEL_9:
  v13 = *a1;
  v14 = *(uint8x8_t *)((char *)a1 + a2);
  v15 = *(uint8x8_t *)((char *)a1 + 2 * a2);
  v16 = *(uint8x8_t *)((char *)a1 + 3 * a2);
  v17 = *(int16x8_t *)a3;
  v18 = *(int16x8_t *)(a3 + 16);
  v19 = *a4;
  v20 = a4[1];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  *a1 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v17, v19), v13));
  *(int8x8_t *)((char *)a1 + a2) = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip2q_s16(v17, v19), v14));
  result = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v18, v20), v15));
  *(int8x8_t *)((char *)a1 + 2 * a2) = result;
  *(int8x8_t *)((char *)a1 + 3 * a2) = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip2q_s16(v18, v20), v16));
  return result;
}

int16x8_t sub_1B688553C(uint16x8_t *a1, uint64_t a2, uint64_t a3, int16x8_t *a4, int a5, int a6)
{
  int16x8_t v11;
  int16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t result;

  if ((a5 & 0x80000000) == 0)
  {
    if (a5)
      sub_1B6887788((int32x4_t *)a3, a5);
    if ((a6 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_8:
    v12 = vrshrq_n_s16(a4[1], 3uLL);
    *a4 = vrshrq_n_s16(*a4, 3uLL);
    a4[1] = v12;
    goto LABEL_9;
  }
  v11 = vrshrq_n_s16(*(int16x8_t *)(a3 + 16), 3uLL);
  *(int16x8_t *)a3 = vrshrq_n_s16(*(int16x8_t *)a3, 3uLL);
  *(int16x8_t *)(a3 + 16) = v11;
  if (a6 < 0)
    goto LABEL_8;
LABEL_5:
  if (a6)
    sub_1B6887788((int32x4_t *)a4, a6);
LABEL_9:
  v13 = *(uint16x8_t *)((char *)a1 + 2 * a2);
  v14 = *(uint16x8_t *)((char *)a1 + 4 * a2);
  v15 = *(uint16x8_t *)((char *)a1 + 6 * a2);
  v16 = *a1;
  v17 = *(int16x8_t *)a3;
  v18 = *(int16x8_t *)(a3 + 16);
  v19 = *a4;
  v20 = a4[1];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v21 = vzip1q_s16(v17, v19);
  v22 = vzip2q_s16(v17, v19);
  v23 = vzip1q_s16(v18, v20);
  v24 = vzip2q_s16(v18, v20);
  v20.i64[0] = 0xFC00FC00FC00FC00;
  v20.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = 0u;
  a4[1] = 0u;
  *(int16x8_t *)a1 = vminq_s16((int16x8_t)vsqaddq_u16(v16, v21), v20);
  *(int16x8_t *)((char *)a1 + 2 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v13, v22), v20);
  result = vminq_s16((int16x8_t)vsqaddq_u16(v15, v24), v20);
  *(int16x8_t *)((char *)a1 + 4 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v14, v23), v20);
  *(int16x8_t *)((char *)a1 + 6 * a2) = result;
  return result;
}

int16x4_t *sub_1B6885640(int16x4_t *result, uint64_t a2, int16x4_t *a3, const __int16 *a4, int a5, int a6)
{
  __int16 *v6;
  int16x8_t *v7;
  uint8x16_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  char v16;
  char v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  char v22;
  char v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;

  v6 = (__int16 *)a4;
  v7 = (int16x8_t *)a3;
  v9 = (uint8x16_t *)result;
  if ((a6 | a5) > 1)
  {
    if (a5 >= 1)
      result = sub_1B6887680(a3, a5);
    if (a6 >= 1)
      result = sub_1B6887680((int16x4_t *)v6, a6);
    v22 = 1;
    do
    {
      v23 = v22;
      v24 = *(uint8x16_t *)((char *)v9 + a2);
      v25 = *v9;
      v26 = *(uint8x16_t *)((char *)v9 + 2 * a2);
      v27 = *(uint8x16_t *)((char *)v9 + 3 * a2);
      v28 = *v7;
      v29 = v7[1];
      v30 = v7[2];
      v31 = v7[3];
      v32 = *(int16x8_t *)v6;
      v33 = *((int16x8_t *)v6 + 1);
      v34 = *((int16x8_t *)v6 + 2);
      v35 = *((int16x8_t *)v6 + 3);
      *v7 = 0uLL;
      v7[1] = 0uLL;
      v7[2] = 0uLL;
      v7[3] = 0uLL;
      v36 = (int32x4_t)vtrn1q_s16(v28, v29);
      v37 = (int32x4_t)vtrn2q_s16(v28, v29);
      v38 = (int32x4_t)vtrn1q_s16(v30, v31);
      v39 = (int32x4_t)vtrn2q_s16(v30, v31);
      v40 = (int16x8_t)vtrn1q_s32(v36, v38);
      v41 = (int16x8_t)vtrn2q_s32(v36, v38);
      v42 = (int16x8_t)vtrn1q_s32(v37, v39);
      v43 = (int16x8_t)vtrn2q_s32(v37, v39);
      v44 = (int32x4_t)vtrn1q_s16(v32, v33);
      v45 = (int32x4_t)vtrn2q_s16(v32, v33);
      v46 = (int32x4_t)vtrn1q_s16(v34, v35);
      v47 = (int32x4_t)vtrn2q_s16(v34, v35);
      v48 = (int16x8_t)vtrn1q_s32(v44, v46);
      v49 = (int16x8_t)vtrn2q_s32(v44, v46);
      v50 = (int16x8_t)vtrn1q_s32(v45, v47);
      v51 = (int16x8_t)vtrn2q_s32(v45, v47);
      *((_OWORD *)v6 + 2) = 0uLL;
      *((_OWORD *)v6 + 3) = 0uLL;
      *(_OWORD *)v6 = 0uLL;
      *((_OWORD *)v6 + 1) = 0uLL;
      v6 += 32;
      *(int8x16_t *)v9 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v40, v48), *(uint8x8_t *)v25.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v40, v48), v25));
      *(int8x16_t *)((char *)v9 + a2) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v42, v50), *(uint8x8_t *)v24.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v42, v50), v24));
      *(int8x16_t *)((char *)v9 + 2 * a2) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v41, v49), *(uint8x8_t *)v26.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v41, v49), v26));
      *(int8x16_t *)((char *)v9 + 3 * a2) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v43, v51), *(uint8x8_t *)v27.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v43, v51), v27));
      v9 = (uint8x16_t *)((char *)v9 + 4 * a2);
      v7 += 4;
      v22 = 0;
    }
    while ((v23 & 1) != 0);
  }
  else
  {
    v10 = vld1q_dup_s16((const __int16 *)a3);
    v11 = vld1q_dup_s16(a4);
    v12 = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v10, v11), 1uLL), 6uLL);
    a3->i16[0] = 0;
    *a4 = 0;
    v13 = vnegq_s16(v12);
    v14 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v12), v12);
    v15 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v13), v13);
    v16 = 1;
    do
    {
      v17 = v16;
      v18 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)v9 + a2), v14), v15);
      v19 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)v9 + 2 * a2), v14), v15);
      v20 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)v9 + 3 * a2), v14), v15);
      *v9 = vqsubq_u8(vqaddq_u8(*v9, v14), v15);
      *(uint8x16_t *)((char *)v9 + a2) = v18;
      *(uint8x16_t *)((char *)v9 + 2 * a2) = v19;
      *(uint8x16_t *)((char *)v9 + 3 * a2) = v20;
      v9 = (uint8x16_t *)((char *)v9 + 4 * a2);
      v16 = 0;
    }
    while ((v17 & 1) != 0);
  }
  return result;
}

int16x4_t *sub_1B688584C(int16x4_t *result, uint64_t a2, int16x4_t *a3, const __int16 *a4, int a5, int a6)
{
  __int16 *v6;
  int16x8_t *v7;
  uint16x8_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint64_t v13;
  unsigned int v14;
  int16x8_t v15;
  int16x8_t *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  uint64_t v21;
  uint64_t v22;
  uint16x8_t *v23;
  uint64_t v24;
  char v25;
  int16x8_t v26;
  char v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int16x8_t *v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int16x8_t *v33;
  uint16x8_t v34;
  uint16x8_t v35;
  int16x8_t *v36;
  uint16x8_t v37;
  uint16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int32x4_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;

  v6 = (__int16 *)a4;
  v7 = (int16x8_t *)a3;
  v9 = (uint16x8_t *)result;
  if ((a6 | a5) > 1)
  {
    if (a5 >= 1)
      result = sub_1B6887578(a3, a5);
    if (a6 >= 1)
      result = sub_1B6887578((int16x4_t *)v6, a6);
    v21 = 2 * a2;
    v22 = 4 * a2;
    v23 = v9 + 1;
    v24 = 6 * a2;
    v25 = 1;
    v26.i64[0] = 0xFC00FC00FC00FC00;
    v26.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v27 = v25;
      v28 = v23[-1];
      v29 = *v23;
      v30 = (int16x8_t *)&v23->i8[v21];
      v31 = *(uint16x8_t *)((char *)&v23[-1] + v21);
      v32 = *(uint16x8_t *)((char *)v23 + 2 * a2);
      v33 = (int16x8_t *)&v23->i8[v22];
      v34 = *(uint16x8_t *)((char *)&v23[-1] + v22);
      v35 = *(uint16x8_t *)((char *)v23 + 4 * a2);
      v36 = (int16x8_t *)&v23->i8[v24];
      v38 = *(uint16x8_t *)((char *)&v23[-1] + v24);
      v37 = *(uint16x8_t *)((char *)v23 + 6 * a2);
      v39 = *v7;
      v40 = v7[1];
      v41 = v7[2];
      v42 = v7[3];
      v43 = *(int16x8_t *)v6;
      v44 = *((int16x8_t *)v6 + 1);
      v45 = (int32x4_t)vtrn1q_s16(*v7, v40);
      v46 = *((int16x8_t *)v6 + 2);
      v47 = *((int16x8_t *)v6 + 3);
      *v7 = 0uLL;
      v7[1] = 0uLL;
      v7[2] = 0uLL;
      v7[3] = 0uLL;
      v48 = (int32x4_t)vtrn2q_s16(v39, v40);
      v49 = (int32x4_t)vtrn1q_s16(v41, v42);
      v50 = (int32x4_t)vtrn2q_s16(v41, v42);
      v51 = (int16x8_t)vtrn1q_s32(v45, v49);
      v52 = (int16x8_t)vtrn2q_s32(v45, v49);
      v53 = (int16x8_t)vtrn1q_s32(v48, v50);
      v54 = (int16x8_t)vtrn2q_s32(v48, v50);
      v55 = (int32x4_t)vtrn1q_s16(v43, v44);
      v56 = (int32x4_t)vtrn2q_s16(v43, v44);
      v57 = (int32x4_t)vtrn1q_s16(v46, v47);
      v58 = (int32x4_t)vtrn2q_s16(v46, v47);
      v59 = (int16x8_t)vtrn1q_s32(v55, v57);
      v60 = (int16x8_t)vtrn2q_s32(v55, v57);
      v61 = (int16x8_t)vtrn1q_s32(v56, v58);
      v62 = (int16x8_t)vtrn2q_s32(v56, v58);
      *((_OWORD *)v6 + 2) = 0uLL;
      *((_OWORD *)v6 + 3) = 0uLL;
      *(_OWORD *)v6 = 0uLL;
      *((_OWORD *)v6 + 1) = 0uLL;
      v6 += 32;
      v23[-1] = (uint16x8_t)vminq_s16((int16x8_t)vsqaddq_u16(v28, vzip1q_s16(v51, v59)), v26);
      v30[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v31, vzip1q_s16(v53, v61)), v26);
      v33[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v34, vzip1q_s16(v52, v60)), v26);
      v36[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v38, vzip1q_s16(v54, v62)), v26);
      *(int16x8_t *)v23 = vminq_s16((int16x8_t)vsqaddq_u16(v29, vzip2q_s16(v51, v59)), v26);
      *v30 = vminq_s16((int16x8_t)vsqaddq_u16(v32, vzip2q_s16(v53, v61)), v26);
      *v33 = vminq_s16((int16x8_t)vsqaddq_u16(v35, vzip2q_s16(v52, v60)), v26);
      *v36 = vminq_s16((int16x8_t)vsqaddq_u16(v37, vzip2q_s16(v54, v62)), v26);
      v23 = (uint16x8_t *)((char *)v23 + 8 * a2);
      v7 += 4;
      v25 = 0;
    }
    while ((v27 & 1) != 0);
  }
  else
  {
    v10 = vld1q_dup_s16((const __int16 *)a3);
    v11 = vld1q_dup_s16(a4);
    v12 = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v10, v11), 1uLL), 4uLL);
    a3->i16[0] = 0;
    *a4 = 0;
    v13 = 2 * a2;
    v14 = -2;
    v15.i64[0] = 0xFC00FC00FC00FC00;
    v15.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v16 = (int16x8_t *)&v9->i8[v13];
      v17 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)v9 + 2 * a2), v12), v15);
      v18 = vminq_s16((int16x8_t)vsqaddq_u16(v9[1], v12), v15);
      v19 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)&v9[1] + v13), v12), v15);
      *(int16x8_t *)v9 = vminq_s16((int16x8_t)vsqaddq_u16(*v9, v12), v15);
      *v16 = v17;
      v9[1] = (uint16x8_t)v18;
      v16[1] = v19;
      v9 = (uint16x8_t *)((char *)v9 + 4 * a2);
      v14 += 2;
    }
    while (v14 < 6);
  }
  return result;
}

uint8x16_t *sub_1B6885A6C(uint8x16_t *result, uint64_t a2, int16x4_t *a3, const __int16 *a4, int a5, int a6)
{
  int16x4_t *v6;
  int16x4_t *v7;
  uint8x16_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  unsigned int v16;
  uint8x16_t *v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  unsigned int v22;
  uint64_t v23;
  __int8 *v24;
  __int8 *v25;
  __int8 *v26;
  int16x4_t *v27;
  int16x4_t *v28;
  int16x4_t *v29;
  int16x4_t *v30;
  int16x4_t *v31;
  char v32;
  char v33;
  uint64_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  BOOL v63;

  v6 = (int16x4_t *)a4;
  v7 = a3;
  v9 = result;
  if ((a6 | a5) > 1)
  {
    if (a5 >= 1)
      sub_1B6886FA4(a3, a5);
    if (a6 >= 1)
      sub_1B6886FA4(v6, a6);
    v22 = 0;
    do
    {
      v23 = 0;
      v24 = &v9->i8[a2];
      v25 = &v9->i8[2 * a2];
      v26 = &v9->i8[3 * a2];
      v27 = v7 + 4;
      v28 = v7 + 8;
      v29 = v7 + 12;
      result = (uint8x16_t *)&v6[4];
      v30 = v6 + 8;
      v31 = v6 + 12;
      v32 = 1;
      do
      {
        v33 = v32;
        v34 = 2 * v23;
        v35 = *(uint8x16_t *)((char *)v9 + v34);
        v36 = *(uint8x16_t *)&v24[v34];
        v37 = *(uint8x16_t *)&v25[v34];
        v38 = *(uint8x16_t *)&v26[v34];
        v39 = *(int16x8_t *)&v7->i8[v34];
        v40 = *(int16x8_t *)&v27->i8[v34];
        v41 = *(int16x8_t *)&v28->i8[v34];
        v42 = *(int16x8_t *)&v29->i8[v34];
        v43 = *(int16x8_t *)&v6->i8[v34];
        v44 = *(int16x8_t *)((char *)result + v34);
        v45 = *(int16x8_t *)&v30->i8[v34];
        v46 = *(int16x8_t *)&v31->i8[v34];
        *(_OWORD *)&v7->i8[v34] = 0uLL;
        *(_OWORD *)&v27->i8[v34] = 0uLL;
        *(_OWORD *)&v28->i8[v34] = 0uLL;
        *(_OWORD *)&v29->i8[v34] = 0uLL;
        *(_OWORD *)&v6->i8[v34] = 0uLL;
        *(uint8x16_t *)((char *)result + v34) = 0uLL;
        *(_OWORD *)&v30->i8[v34] = 0uLL;
        *(_OWORD *)&v31->i8[v34] = 0uLL;
        v47 = (int32x4_t)vtrn1q_s16(v39, v40);
        v48 = (int32x4_t)vtrn2q_s16(v39, v40);
        v49 = (int32x4_t)vtrn1q_s16(v41, v42);
        v50 = (int32x4_t)vtrn2q_s16(v41, v42);
        v51 = (int16x8_t)vtrn1q_s32(v47, v49);
        v52 = (int16x8_t)vtrn2q_s32(v47, v49);
        v53 = (int16x8_t)vtrn1q_s32(v48, v50);
        v54 = (int16x8_t)vtrn2q_s32(v48, v50);
        v55 = (int32x4_t)vtrn1q_s16(v43, v44);
        v56 = (int32x4_t)vtrn2q_s16(v43, v44);
        v57 = (int32x4_t)vtrn1q_s16(v45, v46);
        v58 = (int32x4_t)vtrn2q_s16(v45, v46);
        v59 = (int16x8_t)vtrn1q_s32(v55, v57);
        v60 = (int16x8_t)vtrn2q_s32(v55, v57);
        v61 = (int16x8_t)vtrn1q_s32(v56, v58);
        v62 = (int16x8_t)vtrn2q_s32(v56, v58);
        *(int8x16_t *)((char *)v9 + v34) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v51, v59), *(uint8x8_t *)v35.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v51, v59), v35));
        *(int8x16_t *)&v24[v34] = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v53, v61), *(uint8x8_t *)v36.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v53, v61), v36));
        *(int8x16_t *)&v25[v34] = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v52, v60), *(uint8x8_t *)v37.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v52, v60), v37));
        *(int8x16_t *)&v26[v34] = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v54, v62), *(uint8x8_t *)v38.i8)), (int16x8_t)vaddw_high_u8((uint16x8_t)vzip2q_s16(v54, v62), v38));
        v23 = 8;
        v32 = 0;
      }
      while ((v33 & 1) != 0);
      v9 = (uint8x16_t *)((char *)v9 + 4 * a2);
      v7 += 16;
      v6 += 16;
      v63 = v22 >= 0xC;
      v22 += 4;
    }
    while (!v63);
  }
  else
  {
    v10 = vld1q_dup_s16((const __int16 *)a3);
    v11 = vld1q_dup_s16(a4);
    v12 = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v10, v11), 1uLL), 6uLL);
    a3->i16[0] = 0;
    *a4 = 0;
    v13 = vnegq_s16(v12);
    v14 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v12), v12);
    v15 = (uint8x16_t)vqmovun_high_s16(vqmovun_s16(v13), v13);
    v16 = -2;
    do
    {
      v17 = (uint8x16_t *)((char *)v9 + a2);
      v18 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)v9 + a2), v14), v15);
      v19 = vqsubq_u8(vqaddq_u8(v9[1], v14), v15);
      v20 = vqsubq_u8(vqaddq_u8(*(uint8x16_t *)((char *)&v9[1] + a2), v14), v15);
      *v9 = vqsubq_u8(vqaddq_u8(*v9, v14), v15);
      *v17 = v18;
      v9[1] = v19;
      v17[1] = v20;
      v9 = (uint8x16_t *)((char *)v9 + 2 * a2);
      v16 += 2;
    }
    while (v16 < 0xE);
  }
  return result;
}

int16x8_t *sub_1B6885CD4(int16x8_t *result, uint64_t a2, int16x4_t *a3, int16x4_t *a4, int a5, int a6)
{
  int16x8_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  uint16x8_t *v13;
  int v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int16x8_t v24;
  char v25;
  char v26;
  uint16x8_t *v27;
  int16x8_t *v28;
  unsigned int v29;
  int16x8_t *v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int16x8_t *v33;
  uint16x8_t v34;
  uint16x8_t v35;
  int16x8_t *v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;

  v9 = result;
  if ((a6 | a5) > 1)
  {
    if (a5 >= 1)
      sub_1B68864F8(a3, a5);
    if (a6 >= 1)
      sub_1B68864F8(a4, a6);
    v20 = 0;
    v21 = 6 * a2 + 16;
    v22 = 4 * a2 + 16;
    v23 = 2 * a2 + 16;
    v24.i64[0] = 0xFC00FC00FC00FC00;
    v24.i64[1] = 0xFC00FC00FC00FC00;
    v25 = 1;
    do
    {
      v26 = v25;
      v27 = (uint16x8_t *)&v9[v20];
      v28 = (int16x8_t *)&a3[v20];
      v29 = -4;
      v30 = (int16x8_t *)&a4[v20];
      do
      {
        result = (int16x8_t *)&v27->i8[v23];
        v31 = *(uint16x8_t *)((char *)v27 + 2 * a2);
        v32 = *(uint16x8_t *)((char *)v27 + v23);
        v33 = (int16x8_t *)&v27->i8[v22];
        v34 = *(uint16x8_t *)((char *)v27 + 4 * a2);
        v35 = *(uint16x8_t *)((char *)v27 + v22);
        v36 = (int16x8_t *)&v27->i8[v21];
        v38 = *(uint16x8_t *)((char *)v27 + 6 * a2);
        v37 = *(uint16x8_t *)((char *)v27 + v21);
        v39 = *v27;
        v40 = v27[1];
        v41 = *v28;
        v42 = v28[2];
        v43 = v28[4];
        v44 = v28[6];
        v45 = *v30;
        v46 = v30[2];
        v47 = v30[4];
        v48 = (int32x4_t)vtrn1q_s16(*v28, v42);
        v49 = v30[6];
        *v28 = 0uLL;
        v28[2] = 0uLL;
        v28[4] = 0uLL;
        v28[6] = 0uLL;
        *v30 = 0uLL;
        v30[2] = 0uLL;
        v50 = (int32x4_t)vtrn2q_s16(v41, v42);
        v51 = (int32x4_t)vtrn1q_s16(v43, v44);
        v52 = (int32x4_t)vtrn2q_s16(v43, v44);
        v53 = (int16x8_t)vtrn1q_s32(v48, v51);
        v30[4] = 0uLL;
        v30[6] = 0uLL;
        v54 = (int16x8_t)vtrn2q_s32(v48, v51);
        v55 = (int16x8_t)vtrn1q_s32(v50, v52);
        v56 = (int16x8_t)vtrn2q_s32(v50, v52);
        v57 = (int32x4_t)vtrn1q_s16(v45, v46);
        v58 = (int32x4_t)vtrn2q_s16(v45, v46);
        v59 = (int32x4_t)vtrn1q_s16(v47, v49);
        v60 = (int32x4_t)vtrn2q_s16(v47, v49);
        v61 = (int16x8_t)vtrn1q_s32(v57, v59);
        v62 = (int16x8_t)vtrn2q_s32(v57, v59);
        v63 = (int16x8_t)vtrn1q_s32(v58, v60);
        v64 = (int16x8_t)vtrn2q_s32(v58, v60);
        *(int16x8_t *)v27 = vminq_s16((int16x8_t)vsqaddq_u16(v39, vzip1q_s16(v53, v61)), v24);
        result[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v31, vzip1q_s16(v55, v63)), v24);
        v33[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v34, vzip1q_s16(v54, v62)), v24);
        v36[-1] = vminq_s16((int16x8_t)vsqaddq_u16(v38, vzip1q_s16(v56, v64)), v24);
        v27[1] = (uint16x8_t)vminq_s16((int16x8_t)vsqaddq_u16(v40, vzip2q_s16(v53, v61)), v24);
        *result = vminq_s16((int16x8_t)vsqaddq_u16(v32, vzip2q_s16(v55, v63)), v24);
        v29 += 4;
        *v33 = vminq_s16((int16x8_t)vsqaddq_u16(v35, vzip2q_s16(v54, v62)), v24);
        *v36 = vminq_s16((int16x8_t)vsqaddq_u16(v37, vzip2q_s16(v56, v64)), v24);
        v27 = (uint16x8_t *)((char *)v27 + 8 * a2);
        v28 += 8;
        v30 += 8;
      }
      while (v29 < 0xC);
      v25 = 0;
      v20 = 2;
    }
    while ((v26 & 1) != 0);
  }
  else
  {
    v10 = vld1q_dup_s16((const __int16 *)a3);
    v11 = vld1q_dup_s16((const __int16 *)a4);
    v12 = vrshrq_n_s16(vrshrq_n_s16(vzip1q_s16(v10, v11), 1uLL), 4uLL);
    a3->i16[0] = 0;
    a4->i16[0] = 0;
    v13 = (uint16x8_t *)&result[2];
    v14 = 16;
    v15.i64[0] = 0xFC00FC00FC00FC00;
    v15.i64[1] = 0xFC00FC00FC00FC00;
    do
    {
      v16 = vminq_s16((int16x8_t)vsqaddq_u16(v13[-1], v12), v15);
      v17 = vminq_s16((int16x8_t)vsqaddq_u16(*v13, v12), v15);
      v18 = vminq_s16((int16x8_t)vsqaddq_u16(v13[1], v12), v15);
      v13[-2] = (uint16x8_t)vminq_s16((int16x8_t)vsqaddq_u16(v13[-2], v12), v15);
      v13[-1] = (uint16x8_t)v16;
      *v13 = (uint16x8_t)v17;
      v13[1] = (uint16x8_t)v18;
      v13 = (uint16x8_t *)((char *)v13 + 2 * a2);
      --v14;
    }
    while (v14);
  }
  return result;
}

int8x8_t sub_1B6885F34(__int32 *a1, uint64_t a2, uint16x8_t *a3)
{
  uint8x8_t v3;
  __int32 *v4;
  uint8x8_t v5;
  int8x8_t result;
  int8x8_t v7;

  v3.i32[0] = *a1;
  v3.i32[1] = *(__int32 *)((char *)a1 + a2);
  v4 = (__int32 *)((char *)a1 + 3 * a2);
  v5.i32[0] = *(__int32 *)((char *)a1 + 2 * a2);
  v5.i32[1] = *v4;
  result = vqmovun_s16((int16x8_t)vaddw_u8(*a3, v3));
  v7 = vqmovun_s16((int16x8_t)vaddw_u8(a3[1], v5));
  *a3 = 0u;
  a3[1] = 0u;
  *a1 = result.i32[0];
  *(__int32 *)((char *)a1 + a2) = result.i32[1];
  *(__int32 *)((char *)a1 + 2 * a2) = v7.i32[0];
  *v4 = v7.i32[1];
  return result;
}

int16x8_t sub_1B6885F84(uint64_t *a1, uint64_t a2, int16x8_t *a3)
{
  uint64_t *v3;
  uint16x8_t v4;
  uint64_t *v5;
  uint16x8_t v6;
  int16x8_t v7;
  int16x8_t result;
  int16x8_t v9;
  int16x8_t v10;

  v3 = (uint64_t *)((char *)a1 + 2 * a2);
  v4.i64[0] = *a1;
  v4.i64[1] = *v3;
  v5 = (uint64_t *)((char *)a1 + 6 * a2);
  v6.i64[0] = *(uint64_t *)((char *)a1 + 4 * a2);
  v6.i64[1] = *v5;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  result = vminq_s16((int16x8_t)vsqaddq_u16(v4, *a3), v7);
  v9 = (int16x8_t)vsqaddq_u16(v6, a3[1]);
  *a3 = 0u;
  a3[1] = 0u;
  v10 = vminq_s16(v9, v7);
  *a1 = result.i64[0];
  *v3 = result.i64[1];
  *(uint64_t *)((char *)a1 + 4 * a2) = v10.i64[0];
  *v5 = v10.i64[1];
  return result;
}

uint8x8_t *sub_1B6885FD8(uint8x8_t *result, uint64_t a2, uint16x8_t *a3)
{
  char v3;
  char v4;
  int16x8_t v5;
  int8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;

  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (int16x8_t)vaddw_u8(a3[3], *(uint8x8_t *)((char *)result + 3 * a2));
    v6 = vqmovun_s16((int16x8_t)vaddw_u8(*a3, *result));
    v7 = vqmovun_s16((int16x8_t)vaddw_u8(a3[1], *(uint8x8_t *)((char *)result + a2)));
    v8 = vqmovun_s16((int16x8_t)vaddw_u8(a3[2], *(uint8x8_t *)((char *)result + 2 * a2)));
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *result = (uint8x8_t)v6;
    *(int8x8_t *)((char *)result + a2) = v7;
    *(int8x8_t *)((char *)result + 2 * a2) = v8;
    *(int8x8_t *)((char *)result + 3 * a2) = vqmovun_s16(v5);
    result = (uint8x8_t *)((char *)result + 4 * a2);
    a3 += 4;
    v3 = 0;
  }
  while ((v4 & 1) != 0);
  return result;
}

uint16x8_t *sub_1B6886054(uint16x8_t *result, uint64_t a2, int16x8_t *a3)
{
  char v3;
  int16x8_t v4;
  char v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;

  v3 = 1;
  v4.i64[0] = 0xFC00FC00FC00FC00;
  v4.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v5 = v3;
    v6 = vminq_s16((int16x8_t)vsqaddq_u16(*result, *a3), v4);
    v7 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 2 * a2), a3[1]), v4);
    v8 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 4 * a2), a3[2]), v4);
    v9 = (int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 6 * a2), a3[3]);
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *result = (uint16x8_t)v6;
    *(int16x8_t *)((char *)result + 2 * a2) = v7;
    *(int16x8_t *)((char *)result + 4 * a2) = v8;
    *(int16x8_t *)((char *)result + 6 * a2) = vminq_s16(v9, v4);
    result = (uint16x8_t *)((char *)result + 8 * a2);
    a3 += 4;
    v3 = 0;
  }
  while ((v5 & 1) != 0);
  return result;
}

uint8x8_t *sub_1B68860DC(uint8x8_t *result, uint64_t a2, uint16x8_t *a3)
{
  unsigned int v3;
  int8x16_t v4;
  int8x16_t v5;

  v3 = -2;
  do
  {
    v4 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(*a3, *result)), (int16x8_t)vaddw_high_u8(a3[1], *(uint8x16_t *)result->i8));
    v5 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(a3[2], *(uint8x8_t *)((char *)result + a2))), (int16x8_t)vaddw_high_u8(a3[3], *(uint8x16_t *)&result->i8[a2]));
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *(int8x16_t *)result->i8 = v4;
    *(int8x16_t *)&result->i8[a2] = v5;
    result = (uint8x8_t *)((char *)result + 2 * a2);
    v3 += 2;
    a3 += 4;
  }
  while (v3 < 0xE);
  return result;
}

uint16x8_t *sub_1B6886140(uint16x8_t *result, uint64_t a2, int16x8_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  int16x8_t v5;
  int16x8_t *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;

  v3 = 2 * a2;
  v4 = -2;
  v5.i64[0] = 0xFC00FC00FC00FC00;
  v5.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v6 = (int16x8_t *)&result->i8[v3];
    v7 = vminq_s16((int16x8_t)vsqaddq_u16(*result, *a3), v5);
    v8 = vminq_s16((int16x8_t)vsqaddq_u16(result[1], a3[1]), v5);
    v9 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)result + 2 * a2), a3[2]), v5);
    v10 = vminq_s16((int16x8_t)vsqaddq_u16(*(uint16x8_t *)((char *)&result[1] + v3), a3[3]), v5);
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *result = (uint16x8_t)v7;
    *v6 = v9;
    result[1] = (uint16x8_t)v8;
    v6[1] = v10;
    result = (uint16x8_t *)((char *)result + 4 * a2);
    v4 += 2;
    a3 += 4;
  }
  while (v4 < 0xE);
  return result;
}

uint8x8_t *sub_1B68861B8(uint8x8_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint8x8_t *v4;
  _OWORD *v5;
  int8x16_t v6;
  int8x16_t v7;

  v3 = 0;
  v4 = result + 2;
  do
  {
    v5 = (_OWORD *)(a3 + v3);
    v6 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(*(uint16x8_t *)(a3 + v3), v4[-2])), (int16x8_t)vaddw_high_u8(*(uint16x8_t *)(a3 + v3 + 16), *(uint8x16_t *)v4[-2].i8));
    v7 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(*(uint16x8_t *)(a3 + v3 + 32), *v4)), (int16x8_t)vaddw_high_u8(*(uint16x8_t *)(a3 + v3 + 48), *(uint8x16_t *)v4->i8));
    *v5 = 0uLL;
    v5[1] = 0uLL;
    v5[2] = 0uLL;
    v5[3] = 0uLL;
    *(int8x16_t *)v4[-2].i8 = v6;
    *(int8x16_t *)v4->i8 = v7;
    v3 += 64;
    v4 = (uint8x8_t *)((char *)v4 + a2);
  }
  while ((_DWORD)v3 != 2048);
  return result;
}

uint16x8_t *sub_1B6886214(uint16x8_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint16x8_t *v4;
  int16x8_t v5;
  _OWORD *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;

  v3 = 0;
  v4 = result + 2;
  v5.i64[0] = 0xFC00FC00FC00FC00;
  v5.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v6 = (_OWORD *)(a3 + v3);
    v7 = vminq_s16((int16x8_t)vsqaddq_u16(v4[-2], *(int16x8_t *)(a3 + v3)), v5);
    v8 = vminq_s16((int16x8_t)vsqaddq_u16(v4[-1], *(int16x8_t *)(a3 + v3 + 16)), v5);
    v9 = vminq_s16((int16x8_t)vsqaddq_u16(*v4, *(int16x8_t *)(a3 + v3 + 32)), v5);
    v10 = vminq_s16((int16x8_t)vsqaddq_u16(v4[1], *(int16x8_t *)(a3 + v3 + 48)), v5);
    *v6 = 0uLL;
    v6[1] = 0uLL;
    v6[2] = 0uLL;
    v6[3] = 0uLL;
    v4[-2] = (uint16x8_t)v7;
    v4[-1] = (uint16x8_t)v8;
    *v4 = (uint16x8_t)v9;
    v4[1] = (uint16x8_t)v10;
    v3 += 64;
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
  }
  while ((_DWORD)v3 != 2048);
  return result;
}

int8x8_t sub_1B6886280(uint8x8_t *a1, uint64_t a2, int16x8_t *a3, int16x8_t *a4)
{
  uint8x8_t v4;
  uint8x8_t v5;
  uint8x8_t v6;
  uint8x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x8_t result;

  v4 = *a1;
  v5 = *(uint8x8_t *)((char *)a1 + a2);
  v6 = *(uint8x8_t *)((char *)a1 + 2 * a2);
  v7 = *(uint8x8_t *)((char *)a1 + 3 * a2);
  v8 = *a3;
  v9 = a3[1];
  v10 = *a4;
  v11 = a4[1];
  *a3 = 0u;
  a3[1] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  *a1 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v8, v10), v4));
  *(int8x8_t *)((char *)a1 + a2) = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip2q_s16(v8, v10), v5));
  result = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip1q_s16(v9, v11), v6));
  *(int8x8_t *)((char *)a1 + 2 * a2) = result;
  *(int8x8_t *)((char *)a1 + 3 * a2) = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vzip2q_s16(v9, v11), v7));
  return result;
}

int16x8_t sub_1B68862F0(uint16x8_t *a1, uint64_t a2, int16x8_t *a3, int16x8_t *a4)
{
  uint16x8_t v4;
  uint16x8_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t result;

  v4 = *(uint16x8_t *)((char *)a1 + 2 * a2);
  v5 = *(uint16x8_t *)((char *)a1 + 4 * a2);
  v6 = *(uint16x8_t *)((char *)a1 + 6 * a2);
  v7 = *a1;
  v8 = *a3;
  v9 = a3[1];
  v10 = *a4;
  v11 = a4[1];
  *a3 = 0u;
  a3[1] = 0u;
  v12 = vzip1q_s16(v8, v10);
  v13 = vzip2q_s16(v8, v10);
  v14 = vzip1q_s16(v9, v11);
  v15 = vzip2q_s16(v9, v11);
  v11.i64[0] = 0xFC00FC00FC00FC00;
  v11.i64[1] = 0xFC00FC00FC00FC00;
  *a4 = 0u;
  a4[1] = 0u;
  *(int16x8_t *)a1 = vminq_s16((int16x8_t)vsqaddq_u16(v7, v12), v11);
  *(int16x8_t *)((char *)a1 + 2 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v4, v13), v11);
  result = vminq_s16((int16x8_t)vsqaddq_u16(v6, v15), v11);
  *(int16x8_t *)((char *)a1 + 4 * a2) = vminq_s16((int16x8_t)vsqaddq_u16(v5, v14), v11);
  *(int16x8_t *)((char *)a1 + 6 * a2) = result;
  return result;
}

char *sub_1B688636C(char *result, uint64_t a2, uint16x8_t *a3, uint16x8_t *a4)
{
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  char *v7;
  uint16x8_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int8x8x2_t v15;

  v5 = -2;
  do
  {
    v6 = result;
    v14 = (int16x8_t)vld2_s8(v6);
    v7 = (char *)&v6[a2];
    v8 = *a3;
    v9 = a3[1];
    v15 = vld2_s8(v7);
    v10 = *a4;
    v11 = a4[1];
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3 += 2;
    v12 = (int16x8_t)vaddw_u8(v8, *(uint8x8_t *)v14.i8);
    v13 = (int16x8_t)vaddw_u8(v9, (uint8x8_t)v15.val[0]);
    v14 = (int16x8_t)vaddw_u8(v10, (uint8x8_t)v14.u64[1]);
    *(uint16x8_t *)((char *)&v14 + 8) = vaddw_u8(v11, (uint8x8_t)v15.val[1]);
    *(int8x8_t *)v12.i8 = vqmovun_s16(v12);
    v15.val[0] = vqmovun_s16(v14);
    v15.val[1] = vqmovun_s16(v13);
    *(int8x8_t *)v13.i8 = vqmovun_s16(*(int16x8_t *)((char *)&v14 + 8));
    *a4 = 0uLL;
    a4[1] = 0uLL;
    a4 += 2;
    vst2_s8(result, v15);
    v4 = 2 * a2;
    result += v4;
    vst2_s8(v7, *(int8x8x2_t *)((char *)&v15 + 8));
    v5 += 2;
  }
  while (v5 < 6);
  return result;
}

__int16 *sub_1B68863CC(__int16 *result, uint64_t a2, int16x8_t *a3, int16x8_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int16x8_t v7;
  const __int16 *v8;
  __int16 *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8x2_t v14;
  int16x8x2_t v15;
  int16x8x2_t v16;

  v6 = -2;
  v7.i64[0] = 0xFC00FC00FC00FC00;
  v7.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v8 = result;
    v14 = vld2q_s16(v8);
    v4 = a2;
    v9 = (__int16 *)&v8[v4];
    v15 = vld2q_s16(v9);
    v10 = *a3;
    v11 = a3[1];
    v12 = *a4;
    v13 = a4[1];
    *a3 = 0uLL;
    a3[1] = 0uLL;
    a3 += 2;
    v16.val[0] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v14.val[0], v10), v7);
    v16.val[1] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v14.val[1], v12), v7);
    v14.val[0] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v15.val[0], v11), v7);
    *a4 = 0uLL;
    a4[1] = 0uLL;
    a4 += 2;
    vst2q_s16(result, v16);
    v5 = 4 * a2;
    result = (__int16 *)((char *)result + v5);
    v14.val[1] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v15.val[1], v13), v7);
    vst2q_s16(v9, v14);
    v6 += 2;
  }
  while (v6 < 6);
  return result;
}

char *sub_1B6886434(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16x2_t v15;

  v4 = 0;
  do
  {
    v15 = vld2q_s8(result);
    v5 = (_OWORD *)(a3 + v4);
    v6 = (_OWORD *)(a4 + v4);
    v7 = *(uint16x8_t *)(a3 + v4);
    v8 = *(uint16x8_t *)(a3 + v4 + 16);
    v9 = *(uint16x8_t *)(a4 + v4);
    v10 = *(uint16x8_t *)(a4 + v4 + 16);
    *v5 = 0uLL;
    v5[1] = 0uLL;
    v11 = (int16x8_t)vaddw_u8(v7, *(uint8x8_t *)v15.val[0].i8);
    v12 = (int16x8_t)vaddw_high_u8(v8, (uint8x16_t)v15.val[0]);
    v13 = (int16x8_t)vaddw_u8(v9, *(uint8x8_t *)v15.val[1].i8);
    v15.val[0] = (int8x16_t)vaddw_high_u8(v10, (uint8x16_t)v15.val[1]);
    v15.val[1] = vqmovun_high_s16(vqmovun_s16(v11), v12);
    v14 = vqmovun_high_s16(vqmovun_s16(v13), (int16x8_t)v15.val[0]);
    *v6 = 0uLL;
    v6[1] = 0uLL;
    vst2q_s8(result, *(int8x16x2_t *)((char *)&v15 + 16));
    result += a2;
    v4 += 32;
  }
  while ((_DWORD)v4 != 512);
  return result;
}

__int16 *sub_1B688648C(__int16 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int16x8_t v6;
  _OWORD *v7;
  const __int16 *v8;
  _OWORD *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8x2_t v14;
  int16x8x2_t v15;
  int16x8x2_t v16;

  v4 = 0;
  v6.i64[0] = 0xFC00FC00FC00FC00;
  v6.i64[1] = 0xFC00FC00FC00FC00;
  do
  {
    v7 = (_OWORD *)(a3 + v4);
    v8 = result;
    v14 = vld2q_s16(v8);
    v8 += 16;
    v9 = (_OWORD *)(a4 + v4);
    v15 = vld2q_s16(v8);
    v10 = *(int16x8_t *)(a3 + v4);
    v11 = *(int16x8_t *)(a3 + v4 + 16);
    v12 = *(int16x8_t *)(a4 + v4);
    v13 = *(int16x8_t *)(a4 + v4 + 16);
    *v7 = 0uLL;
    v7[1] = 0uLL;
    v16.val[0] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v14.val[0], v10), v6);
    v16.val[1] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v14.val[1], v12), v6);
    v14.val[0] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v15.val[0], v11), v6);
    *v9 = 0uLL;
    v9[1] = 0uLL;
    vst2q_s16(result, v16);
    v14.val[1] = vminq_s16((int16x8_t)vsqaddq_u16((uint16x8_t)v15.val[1], v13), v6);
    vst2q_s16(result, v14);
    v5 = 2 * a2;
    result = (__int16 *)((char *)result + v5);
    v4 += 32;
  }
  while ((_DWORD)v4 != 512);
  return result;
}

void sub_1B68864F8(int16x4_t *a1, int a2)
{
  int16x4_t *v2;
  int16x8_t v3;
  unsigned int v4;
  unint64_t v6;
  int16x4_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = a1;
  if (a2 == 1)
  {
    v3 = vdupq_n_s16((a1->i16[0] + 17) >> 5);
    v4 = -32;
    do
    {
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v4 += 32;
      v2 += 8;
    }
    while (v4 < 0xE0);
    return;
  }
  if (a2 <= 16)
  {
    sub_1B68866D4(a1, 0x10u, (uint64_t)&unk_1B692BAF0);
LABEL_12:
    v8 = -4;
    do
    {
      sub_1B6886AD0(v2, 0x10u, (uint64_t)&unk_1B692BBD0);
      v8 += 4;
      v2 += 16;
    }
    while (v8 < 0xC);
    return;
  }
  if (a2 >= 0x31)
  {
    v6 = -4;
    v7 = a1;
    do
    {
      sub_1B6886950(v7, 0x10u, (uint64_t)&unk_1B692BB40, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v6 += 4;
      ++v7;
    }
    while (v6 < 0xC);
  }
  else
  {
    sub_1B68867A0(a1, 0x10u, (uint64_t)&unk_1B692BAF0, (int16x4_t *)aZwpf);
    sub_1B68867A0(v2 + 1, 0x10u, (uint64_t)&unk_1B692BAF0, (int16x4_t *)aZwpf);
  }
  if (a2 <= 32)
    goto LABEL_12;
  if (a2 >= 0x51)
  {
    v10 = -4;
    do
    {
      sub_1B6886D44((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1B692BBD8, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v10 += 4;
      v2 += 16;
    }
    while (v10 < 0xC);
  }
  else
  {
    v9 = -4;
    do
    {
      sub_1B6886BB0((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1B692BBD0, (int16x4_t *)aZwpf);
      v9 += 4;
      v2 += 16;
    }
    while (v9 < 0xC);
  }
}

int16x4_t *sub_1B68866D4(int16x4_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x8_t *v7;
  int16x4_t v8;
  int32x4_t v9;
  unsigned __int8 *v10;
  int16x8_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int v16;

  LODWORD(v3) = a2 >> 2;
  v4 = (a2 - 1) * (a2 >> 2);
  v5 = *(int16x4_t *)((char *)result + 2 * a2);
  v6 = *(int16x4_t *)((char *)result + 4 * a2);
  v7 = (int16x8_t *)((char *)&unk_1B692B9F0 + 4 * a2);
  v8 = *(int16x4_t *)((char *)result + 6 * a2);
  v9 = vshll_n_s16(*result, 6uLL);
  if (a2 >> 2 <= 1)
    v3 = 1;
  else
    v3 = v3;
  v10 = (unsigned __int8 *)(a3 + 1);
  do
  {
    v11 = *v7++;
    v12 = vmlal_laneq_s16(v9, v6, v11, 4);
    v13 = vmlsl_laneq_s16(v9, v6, v11, 4);
    v14 = vmlal_lane_s16(vmull_lane_s16(v8, *(int16x4_t *)v11.i8, 1), v5, *(int16x4_t *)v11.i8, 0);
    v15 = vmlal_lane_s16(vmull_lane_s16(v8, *(int16x4_t *)v11.i8, 3), v5, *(int16x4_t *)v11.i8, 2);
    v16 = *(v10 - 1);
    v11.i32[0] = *v10;
    v10 += 2;
    result[v16] = vqrshrn_n_s32(vaddq_s32(v14, v12), 7uLL);
    result[v11.u32[0]] = vqrshrn_n_s32(vaddq_s32(v15, v13), 7uLL);
    result[v4 - v16] = vqrshrn_n_s32(vsubq_s32(v12, v14), 7uLL);
    result[v4 - v11.i32[0]] = vqrshrn_n_s32(vsubq_s32(v13, v15), 7uLL);
    --v3;
  }
  while (v3);
  return result;
}

int16x4_t *sub_1B68867A0(int16x4_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4)
{
  int16x4_t v4;
  int v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int16x8_t *v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int v27;
  int v28;
  int v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;

  v4 = *(int16x4_t *)((char *)result + 4 * a2);
  v5 = (a2 - 1) * (a2 >> 2);
  v6 = result[a2];
  v7 = *(int16x4_t *)((char *)result + 12 * a2);
  v8 = *(int16x4_t *)((char *)result + 2 * a2);
  v9 = *(int16x4_t *)((char *)result + 6 * a2);
  v10 = *(int16x4_t *)((char *)result + 10 * a2);
  v11 = *(int16x4_t *)((char *)result + 14 * a2);
  v12 = vshll_n_s16(*result, 6uLL);
  v13 = a2 >> 3;
  v14 = (unsigned __int8 *)(a3 + 3);
  v15 = (int16x8_t *)((char *)&unk_1B692B9F0 + 2 * a2);
  do
  {
    v16 = *v15++;
    v17 = vmlal_laneq_s16(v12, v6, v16, 4);
    v18 = vmlsl_laneq_s16(v12, v6, v16, 4);
    v19 = vmlal_lane_s16(vmull_lane_s16(v7, *(int16x4_t *)v16.i8, 1), v4, *(int16x4_t *)v16.i8, 0);
    v20 = vmlal_lane_s16(vmull_lane_s16(v7, *(int16x4_t *)v16.i8, 3), v4, *(int16x4_t *)v16.i8, 2);
    v21 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, *a4, 1), v8, *a4, 0), v10, *a4, 2), v11, *a4, 3);
    v22 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, a4[1], 1), v8, a4[1], 0), v10, a4[1], 2), v11, a4[1], 3);
    v23 = a4[3];
    v24 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, a4[2], 1), v8, a4[2], 0), v10, a4[2], 2), v11, a4[2], 3);
    v25 = vaddq_s32(v19, v17);
    v26 = vsubq_s32(v17, v19);
    v27 = *(v14 - 3);
    v28 = *(v14 - 2);
    v29 = *(v14 - 1);
    v16.i32[0] = *v14;
    v14 += 4;
    result[v27] = vqrshrn_n_s32(vaddq_s32(v21, v25), 7uLL);
    v30 = vaddq_s32(v20, v18);
    v31 = vsubq_s32(v18, v20);
    result[v28] = vqrshrn_n_s32(vaddq_s32(v22, v26), 7uLL);
    v32 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v9, v23, 1), v8, v23, 0), v10, v23, 2), v11, v23, 3);
    result[v29] = vqrshrn_n_s32(vaddq_s32(v24, v30), 7uLL);
    result[v16.u32[0]] = vqrshrn_n_s32(vaddq_s32(v32, v31), 7uLL);
    result[v5 - v27] = vqrshrn_n_s32(vsubq_s32(v25, v21), 7uLL);
    result[v5 - v28] = vqrshrn_n_s32(vsubq_s32(v26, v22), 7uLL);
    result[v5 - v29] = vqrshrn_n_s32(vsubq_s32(v30, v24), 7uLL);
    result[v5 - v16.i32[0]] = vqrshrn_n_s32(vsubq_s32(v31, v32), 7uLL);
    a4 += 4;
    --v13;
  }
  while (v13);
  return result;
}

uint64_t sub_1B6886950(int16x4_t *a1, unsigned int a2, uint64_t a3, int16x4_t *a4, int16x4_t *a5)
{
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t result;
  uint64_t v15;
  int16x4_t *v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t *v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  uint64_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int v29;
  uint64_t v30;
  int32x4_t v31[16];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v9 = (a2 - 1) * (a2 >> 2);
  v10 = 2 * a2;
  v30 = a2;
  v11 = 4 * a2;
  v12 = 12 * a2;
  v13 = a2 >> 1;
  result = sub_1B6886EC8(a2 >> 1, a4, v31, *a1, *(int16x4_t *)((char *)a1 + v11), a1[v30], *(int16x4_t *)((char *)a1 + v12), a1[v10], *(int16x4_t *)((char *)&a1[v10] + v11), a1[v10 + v30], *(int16x4_t *)((char *)&a1[v10] + v12));
  v15 = 0;
  v16 = (int16x4_t *)((char *)a1 + 2 * a2);
  v17 = *(int16x4_t *)((char *)v16 + v11);
  v18 = v16[v30];
  v19 = *(int16x4_t *)((char *)v16 + v12);
  v20 = *v16;
  v21 = &v16[v10];
  v22 = v21[v30];
  v23 = *(int16x4_t *)((char *)v21 + v11);
  v24 = *v21;
  v25 = *(int16x4_t *)((char *)v21 + v12);
  if (v13 <= 1)
    v26 = 1;
  else
    v26 = v13;
  do
  {
    v27 = v31[v15];
    v28 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v17, *a5, 1), v20, *a5, 0), v18, *a5, 2), v19, *a5, 3), v24, *(int16x8_t *)a5->i8, 4), v23, *(int16x8_t *)a5->i8, 5), v22, *(int16x8_t *)a5->i8, 6), v25, *(int16x8_t *)a5->i8,
            7);
    v29 = v9 - *(unsigned __int8 *)(a3 + v15);
    a1[*(unsigned __int8 *)(a3 + v15)] = vqrshrn_n_s32(vaddq_s32(v28, v27), 7uLL);
    a1[v29] = vqrshrn_n_s32(vsubq_s32(v27, v28), 7uLL);
    ++v15;
    a5 = (int16x4_t *)((char *)a5 + 2 * v13);
  }
  while (v26 != v15);
  return result;
}

int16x4_t *sub_1B6886AD0(int16x4_t *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  int16x8_t *v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  unsigned __int8 *v17;
  int16x8_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int v23;

  v3 = a2 - 1;
  v4 = (int16x8_t *)((char *)&unk_1B692B9F0 + 4 * a2);
  v5 = *(int16x4_t *)((char *)result + 2 * a2);
  v6 = *(int16x4_t *)((char *)result + 4 * a2);
  v7 = *(int16x4_t *)((char *)result + 6 * a2);
  v8 = (int32x2_t)vtrn1_s16(*result, v5);
  v9 = (int32x2_t)vtrn1_s16(v6, v7);
  v10 = vshll_n_s16((int16x4_t)vzip1_s32(v8, v9), 6uLL);
  v11 = a2 >> 2;
  v12 = (int32x2_t)vtrn2_s16(*result, v5);
  v13 = (int32x2_t)vtrn2_s16(v6, v7);
  v14 = (int16x4_t)vzip2_s32(v8, v9);
  v15 = (int16x4_t)vzip1_s32(v12, v13);
  v16 = (int16x4_t)vzip2_s32(v12, v13);
  v17 = (unsigned __int8 *)(a3 + 1);
  do
  {
    v18 = *v4++;
    v19 = vmlal_laneq_s16(v10, v14, v18, 4);
    v20 = vmlsl_laneq_s16(v10, v14, v18, 4);
    v21 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 1), v15, *(int16x4_t *)v18.i8, 0);
    v22 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 3), v15, *(int16x4_t *)v18.i8, 2);
    v23 = *(v17 - 1);
    v18.i32[0] = *v17;
    v17 += 2;
    result[v23] = vqrshrn_n_s32(vaddq_s32(v21, v19), 0xAuLL);
    result[v18.u32[0]] = vqrshrn_n_s32(vaddq_s32(v22, v20), 0xAuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v23))) = vqrshrn_n_s32(vsubq_s32(v19, v21), 0xAuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v18.i32[0]))) = vqrshrn_n_s32(vsubq_s32(v20, v22), 0xAuLL);
    --v11;
  }
  while (v11);
  return result;
}

int16x8_t *sub_1B6886BB0(int16x8_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4)
{
  unsigned int v4;
  int16x8_t *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int16x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int v31;
  int v32;
  int v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;

  v4 = a2 - 1;
  v5 = (int16x8_t *)((char *)&unk_1B692B9F0 + 2 * a2);
  v6 = *(int16x8_t *)((char *)result + 4 * a2);
  v7 = *(int16x8_t *)((char *)result + 2 * a2);
  v8 = *(int16x8_t *)((char *)result + 6 * a2);
  v9 = (int32x4_t)vtrn1q_s16(*result, v7);
  v10 = (int32x4_t)vtrn2q_s16(*result, v7);
  v11 = (int32x4_t)vtrn1q_s16(v6, v8);
  v12 = (int32x4_t)vtrn2q_s16(v6, v8);
  v13 = (int16x8_t)vtrn1q_s32(v9, v11);
  v14 = (int16x8_t)vtrn2q_s32(v9, v11);
  v15 = (int16x8_t)vtrn1q_s32(v10, v12);
  v16 = (int16x8_t)vtrn2q_s32(v10, v12);
  v17 = vshll_n_s16(*(int16x4_t *)v13.i8, 6uLL);
  v18 = a2 >> 3;
  v19 = (unsigned __int8 *)(a3 + 3);
  do
  {
    v20 = *v5++;
    v21 = vmlal_high_laneq_s16(v17, v13, v20, 4);
    v22 = vmlsl_high_laneq_s16(v17, v13, v20, 4);
    v23 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 0), v14, *(int16x4_t *)v20.i8, 1);
    v24 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 2), v14, *(int16x4_t *)v20.i8, 3);
    v25 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, *a4, 1), *(int16x4_t *)v15.i8, *a4, 0), v15, *a4, 2), v16, *a4, 3);
    v26 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[1], 1), *(int16x4_t *)v15.i8, a4[1], 0), v15, a4[1], 2), v16, a4[1], 3);
    v27 = a4[3];
    v28 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[2], 1), *(int16x4_t *)v15.i8, a4[2], 0), v15, a4[2], 2), v16, a4[2], 3);
    v29 = vaddq_s32(v23, v21);
    v30 = vsubq_s32(v21, v23);
    v31 = *(v19 - 3);
    v32 = *(v19 - 2);
    v33 = *(v19 - 1);
    v20.i32[0] = *v19;
    v19 += 4;
    *(int16x4_t *)&result->i8[8 * v31] = vqrshrn_n_s32(vaddq_s32(v25, v29), 0xAuLL);
    v34 = vaddq_s32(v24, v22);
    v35 = vsubq_s32(v22, v24);
    *(int16x4_t *)&result->i8[8 * v32] = vqrshrn_n_s32(vaddq_s32(v26, v30), 0xAuLL);
    v36 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, v27, 1), *(int16x4_t *)v15.i8, v27, 0), v15, v27, 2), v16, v27, 3);
    *(int16x4_t *)&result->i8[8 * v33] = vqrshrn_n_s32(vaddq_s32(v28, v34), 0xAuLL);
    *(int16x4_t *)&result->i8[8 * v20.u32[0]] = vqrshrn_n_s32(vaddq_s32(v36, v35), 0xAuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v31)] = vqrshrn_n_s32(vsubq_s32(v29, v25), 0xAuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v32)] = vqrshrn_n_s32(vsubq_s32(v30, v26), 0xAuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v33)] = vqrshrn_n_s32(vsubq_s32(v34, v28), 0xAuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v20.i32[0])] = vqrshrn_n_s32(vsubq_s32(v35, v36), 0xAuLL);
    a4 += 4;
    --v18;
  }
  while (v18);
  return result;
}

int16x4_t sub_1B6886D44(int16x8_t *a1, unsigned int a2, uint64_t a3, int16x4_t *a4, int16x4_t *a5)
{
  int16x8_t *v9;
  int16x8_t *v10;
  int16x8_t *v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int16x4_t result;
  int v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int32x4_t v39[16];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v9 = (int16x8_t *)((char *)a1 + 2 * a2);
  v10 = (int16x8_t *)((char *)a1 + 4 * a2);
  v11 = (int16x8_t *)((char *)a1 + 6 * a2);
  v12 = a1[1];
  v13 = v9[1];
  v14 = v10[1];
  v15 = (int32x4_t)vtrn1q_s16(*a1, *v9);
  v16 = (int32x4_t)vtrn2q_s16(*a1, *v9);
  v17 = v11[1];
  v18 = (int32x4_t)vtrn1q_s16(*v10, *v11);
  v19 = (int32x4_t)vtrn2q_s16(*v10, *v11);
  v20 = (int8x16_t)vtrn1q_s32(v15, v18);
  v21 = (int8x16_t)vtrn2q_s32(v15, v18);
  v37 = (int16x8_t)vtrn2q_s32(v16, v19);
  v38 = (int16x8_t)vtrn1q_s32(v16, v19);
  v22 = (int32x4_t)vtrn1q_s16(v12, v13);
  v23 = (int32x4_t)vtrn2q_s16(v12, v13);
  v24 = (int32x4_t)vtrn1q_s16(v14, v17);
  v25 = (int32x4_t)vtrn2q_s16(v14, v17);
  v26 = (int8x16_t)vtrn1q_s32(v22, v24);
  v27 = (int8x16_t)vtrn2q_s32(v22, v24);
  v35 = (int16x8_t)vtrn2q_s32(v23, v25);
  v36 = (int16x8_t)vtrn1q_s32(v23, v25);
  v28 = a2 >> 1;
  sub_1B6886EC8(a2 >> 1, a4, v39, *(int16x4_t *)v20.i8, *(int16x4_t *)v21.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), (int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(int16x4_t *)v26.i8, *(int16x4_t *)v27.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int16x4_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  v29 = 0;
  if (v28 <= 1)
    v30 = 1;
  else
    v30 = v28;
  do
  {
    v31 = v39[v29];
    v32 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v37.i8, *a5, 1), *(int16x4_t *)v38.i8, *a5, 0), v38, *a5, 2), v37, *a5, 3), *(int16x4_t *)v36.i8, *(int16x8_t *)a5->i8, 4), *(int16x4_t *)v35.i8, *(int16x8_t *)a5->i8, 5), v36,
              *(int16x8_t *)a5->i8,
              6),
            v35,
            *(int16x8_t *)a5->i8,
            7);
    result = vqrshrn_n_s32(vaddq_s32(v32, v31), 0xAuLL);
    v34 = 4 * (~*(unsigned __int8 *)(a3 + v29) + a2);
    *(int16x4_t *)&a1->i8[8 * *(unsigned __int8 *)(a3 + v29)] = result;
    *(int16x4_t *)&a1->i8[2 * v34] = vqrshrn_n_s32(vsubq_s32(v31, v32), 0xAuLL);
    ++v29;
    a5 = (int16x4_t *)((char *)a5 + 2 * v28);
  }
  while (v30 != v29);
  return result;
}

uint64_t sub_1B6886EC8(uint64_t result, int16x4_t *a2, int32x4_t *a3, int16x4_t a4, int16x4_t a5, int16x4_t a6, int16x4_t a7, int16x4_t a8, int16x4_t a9, int16x4_t a10, int16x4_t a11)
{
  int32x4_t v11;
  int16x8_t *v12;
  uint64_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;

  v11 = vshll_n_s16(a4, 6uLL);
  v12 = (int16x8_t *)((char *)&unk_1B692B9F0 + 2 * result);
  v13 = result >> 3;
  do
  {
    v14 = *v12++;
    v15 = vmlal_laneq_s16(v11, a8, v14, 4);
    v16 = vmlsl_laneq_s16(v11, a8, v14, 4);
    v17 = vmlal_lane_s16(vmull_lane_s16(a10, *(int16x4_t *)v14.i8, 1), a6, *(int16x4_t *)v14.i8, 0);
    v18 = vmlal_lane_s16(vmull_lane_s16(a10, *(int16x4_t *)v14.i8, 3), a6, *(int16x4_t *)v14.i8, 2);
    v19 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(a7, *a2, 1), a5, *a2, 0), a9, *a2, 2), a11, *a2, 3);
    v20 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(a7, a2[1], 1), a5, a2[1], 0), a9, a2[1], 2), a11, a2[1], 3);
    v21 = a2[3];
    v22 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(a7, a2[2], 1), a5, a2[2], 0), a9, a2[2], 2), a11, a2[2], 3);
    v23 = vaddq_s32(v17, v15);
    v24 = vsubq_s32(v15, v17);
    v25 = vaddq_s32(v18, v16);
    v26 = vsubq_s32(v16, v18);
    *a3 = vaddq_s32(v19, v23);
    a3[1] = vaddq_s32(v20, v24);
    v27 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(a7, v21, 1), a5, v21, 0), a9, v21, 2), a11, v21, 3);
    a3[2] = vaddq_s32(v22, v25);
    a3[3] = vaddq_s32(v27, v26);
    a3[4] = vsubq_s32(v23, v19);
    a3[5] = vsubq_s32(v24, v20);
    a3[6] = vsubq_s32(v25, v22);
    a3[7] = vsubq_s32(v26, v27);
    a2 += 4;
    a3 += 8;
    --v13;
  }
  while (v13);
  return result;
}

void sub_1B6886FA4(int16x4_t *a1, int a2)
{
  int16x4_t *v2;
  int16x8_t v3;
  unsigned int v4;
  unint64_t v6;
  int16x4_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = a1;
  if (a2 == 1)
  {
    v3 = vdupq_n_s16((a1->i16[0] + 65) >> 7);
    v4 = -32;
    do
    {
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v4 += 32;
      v2 += 8;
    }
    while (v4 < 0xE0);
    return;
  }
  if (a2 <= 16)
  {
    sub_1B68866D4(a1, 0x10u, (uint64_t)&unk_1B692BAF0);
LABEL_12:
    v8 = -4;
    do
    {
      sub_1B6887180(v2, 0x10u, (uint64_t)&unk_1B692BBD0);
      v8 += 4;
      v2 += 16;
    }
    while (v8 < 0xC);
    return;
  }
  if (a2 >= 0x31)
  {
    v6 = -4;
    v7 = a1;
    do
    {
      sub_1B6886950(v7, 0x10u, (uint64_t)&unk_1B692BB40, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v6 += 4;
      ++v7;
    }
    while (v6 < 0xC);
  }
  else
  {
    sub_1B68867A0(a1, 0x10u, (uint64_t)&unk_1B692BAF0, (int16x4_t *)aZwpf);
    sub_1B68867A0(v2 + 1, 0x10u, (uint64_t)&unk_1B692BAF0, (int16x4_t *)aZwpf);
  }
  if (a2 <= 32)
    goto LABEL_12;
  if (a2 >= 0x51)
  {
    v10 = -4;
    do
    {
      sub_1B68873F4((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1B692BBD8, (int16x4_t *)aYk2, (int16x4_t *)aZwpf9);
      v10 += 4;
      v2 += 16;
    }
    while (v10 < 0xC);
  }
  else
  {
    v9 = -4;
    do
    {
      sub_1B6887260((int16x8_t *)v2, 0x10u, (uint64_t)&unk_1B692BBD0, (int16x4_t *)aZwpf);
      v9 += 4;
      v2 += 16;
    }
    while (v9 < 0xC);
  }
}

int16x4_t *sub_1B6887180(int16x4_t *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  int16x8_t *v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  unsigned __int8 *v17;
  int16x8_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int v23;

  v3 = a2 - 1;
  v4 = (int16x8_t *)((char *)&unk_1B692B9F0 + 4 * a2);
  v5 = *(int16x4_t *)((char *)result + 2 * a2);
  v6 = *(int16x4_t *)((char *)result + 4 * a2);
  v7 = *(int16x4_t *)((char *)result + 6 * a2);
  v8 = (int32x2_t)vtrn1_s16(*result, v5);
  v9 = (int32x2_t)vtrn1_s16(v6, v7);
  v10 = vshll_n_s16((int16x4_t)vzip1_s32(v8, v9), 6uLL);
  v11 = a2 >> 2;
  v12 = (int32x2_t)vtrn2_s16(*result, v5);
  v13 = (int32x2_t)vtrn2_s16(v6, v7);
  v14 = (int16x4_t)vzip2_s32(v8, v9);
  v15 = (int16x4_t)vzip1_s32(v12, v13);
  v16 = (int16x4_t)vzip2_s32(v12, v13);
  v17 = (unsigned __int8 *)(a3 + 1);
  do
  {
    v18 = *v4++;
    v19 = vmlal_laneq_s16(v10, v14, v18, 4);
    v20 = vmlsl_laneq_s16(v10, v14, v18, 4);
    v21 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 1), v15, *(int16x4_t *)v18.i8, 0);
    v22 = vmlal_lane_s16(vmull_lane_s16(v16, *(int16x4_t *)v18.i8, 3), v15, *(int16x4_t *)v18.i8, 2);
    v23 = *(v17 - 1);
    v18.i32[0] = *v17;
    v17 += 2;
    result[v23] = vqrshrn_n_s32(vaddq_s32(v21, v19), 0xCuLL);
    result[v18.u32[0]] = vqrshrn_n_s32(vaddq_s32(v22, v20), 0xCuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v23))) = vqrshrn_n_s32(vsubq_s32(v19, v21), 0xCuLL);
    *(int16x4_t *)((char *)result + 2 * (int)(4 * (v3 - v18.i32[0]))) = vqrshrn_n_s32(vsubq_s32(v20, v22), 0xCuLL);
    --v11;
  }
  while (v11);
  return result;
}

int16x8_t *sub_1B6887260(int16x8_t *result, unsigned int a2, uint64_t a3, int16x4_t *a4)
{
  unsigned int v4;
  int16x8_t *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int16x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int v31;
  int v32;
  int v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;

  v4 = a2 - 1;
  v5 = (int16x8_t *)((char *)&unk_1B692B9F0 + 2 * a2);
  v6 = *(int16x8_t *)((char *)result + 4 * a2);
  v7 = *(int16x8_t *)((char *)result + 2 * a2);
  v8 = *(int16x8_t *)((char *)result + 6 * a2);
  v9 = (int32x4_t)vtrn1q_s16(*result, v7);
  v10 = (int32x4_t)vtrn2q_s16(*result, v7);
  v11 = (int32x4_t)vtrn1q_s16(v6, v8);
  v12 = (int32x4_t)vtrn2q_s16(v6, v8);
  v13 = (int16x8_t)vtrn1q_s32(v9, v11);
  v14 = (int16x8_t)vtrn2q_s32(v9, v11);
  v15 = (int16x8_t)vtrn1q_s32(v10, v12);
  v16 = (int16x8_t)vtrn2q_s32(v10, v12);
  v17 = vshll_n_s16(*(int16x4_t *)v13.i8, 6uLL);
  v18 = a2 >> 3;
  v19 = (unsigned __int8 *)(a3 + 3);
  do
  {
    v20 = *v5++;
    v21 = vmlal_high_laneq_s16(v17, v13, v20, 4);
    v22 = vmlsl_high_laneq_s16(v17, v13, v20, 4);
    v23 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 0), v14, *(int16x4_t *)v20.i8, 1);
    v24 = vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v20.i8, 2), v14, *(int16x4_t *)v20.i8, 3);
    v25 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, *a4, 1), *(int16x4_t *)v15.i8, *a4, 0), v15, *a4, 2), v16, *a4, 3);
    v26 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[1], 1), *(int16x4_t *)v15.i8, a4[1], 0), v15, a4[1], 2), v16, a4[1], 3);
    v27 = a4[3];
    v28 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, a4[2], 1), *(int16x4_t *)v15.i8, a4[2], 0), v15, a4[2], 2), v16, a4[2], 3);
    v29 = vaddq_s32(v23, v21);
    v30 = vsubq_s32(v21, v23);
    v31 = *(v19 - 3);
    v32 = *(v19 - 2);
    v33 = *(v19 - 1);
    v20.i32[0] = *v19;
    v19 += 4;
    *(int16x4_t *)&result->i8[8 * v31] = vqrshrn_n_s32(vaddq_s32(v25, v29), 0xCuLL);
    v34 = vaddq_s32(v24, v22);
    v35 = vsubq_s32(v22, v24);
    *(int16x4_t *)&result->i8[8 * v32] = vqrshrn_n_s32(vaddq_s32(v26, v30), 0xCuLL);
    v36 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, v27, 1), *(int16x4_t *)v15.i8, v27, 0), v15, v27, 2), v16, v27, 3);
    *(int16x4_t *)&result->i8[8 * v33] = vqrshrn_n_s32(vaddq_s32(v28, v34), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * v20.u32[0]] = vqrshrn_n_s32(vaddq_s32(v36, v35), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v31)] = vqrshrn_n_s32(vsubq_s32(v29, v25), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v32)] = vqrshrn_n_s32(vsubq_s32(v30, v26), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v33)] = vqrshrn_n_s32(vsubq_s32(v34, v28), 0xCuLL);
    *(int16x4_t *)&result->i8[8 * (v4 - v20.i32[0])] = vqrshrn_n_s32(vsubq_s32(v35, v36), 0xCuLL);
    a4 += 4;
    --v18;
  }
  while (v18);
  return result;
}

int16x4_t sub_1B68873F4(int16x8_t *a1, unsigned int a2, uint64_t a3, int16x4_t *a4, int16x4_t *a5)
{
  int16x8_t *v9;
  int16x8_t *v10;
  int16x8_t *v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int16x4_t result;
  int v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int32x4_t v39[16];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v9 = (int16x8_t *)((char *)a1 + 2 * a2);
  v10 = (int16x8_t *)((char *)a1 + 4 * a2);
  v11 = (int16x8_t *)((char *)a1 + 6 * a2);
  v12 = a1[1];
  v13 = v9[1];
  v14 = v10[1];
  v15 = (int32x4_t)vtrn1q_s16(*a1, *v9);
  v16 = (int32x4_t)vtrn2q_s16(*a1, *v9);
  v17 = v11[1];
  v18 = (int32x4_t)vtrn1q_s16(*v10, *v11);
  v19 = (int32x4_t)vtrn2q_s16(*v10, *v11);
  v20 = (int8x16_t)vtrn1q_s32(v15, v18);
  v21 = (int8x16_t)vtrn2q_s32(v15, v18);
  v37 = (int16x8_t)vtrn2q_s32(v16, v19);
  v38 = (int16x8_t)vtrn1q_s32(v16, v19);
  v22 = (int32x4_t)vtrn1q_s16(v12, v13);
  v23 = (int32x4_t)vtrn2q_s16(v12, v13);
  v24 = (int32x4_t)vtrn1q_s16(v14, v17);
  v25 = (int32x4_t)vtrn2q_s16(v14, v17);
  v26 = (int8x16_t)vtrn1q_s32(v22, v24);
  v27 = (int8x16_t)vtrn2q_s32(v22, v24);
  v35 = (int16x8_t)vtrn2q_s32(v23, v25);
  v36 = (int16x8_t)vtrn1q_s32(v23, v25);
  v28 = a2 >> 1;
  sub_1B6886EC8(a2 >> 1, a4, v39, *(int16x4_t *)v20.i8, *(int16x4_t *)v21.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), (int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(int16x4_t *)v26.i8, *(int16x4_t *)v27.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int16x4_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  v29 = 0;
  if (v28 <= 1)
    v30 = 1;
  else
    v30 = v28;
  do
  {
    v31 = v39[v29];
    v32 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v37.i8, *a5, 1), *(int16x4_t *)v38.i8, *a5, 0), v38, *a5, 2), v37, *a5, 3), *(int16x4_t *)v36.i8, *(int16x8_t *)a5->i8, 4), *(int16x4_t *)v35.i8, *(int16x8_t *)a5->i8, 5), v36,
              *(int16x8_t *)a5->i8,
              6),
            v35,
            *(int16x8_t *)a5->i8,
            7);
    result = vqrshrn_n_s32(vaddq_s32(v32, v31), 0xCuLL);
    v34 = 4 * (~*(unsigned __int8 *)(a3 + v29) + a2);
    *(int16x4_t *)&a1->i8[8 * *(unsigned __int8 *)(a3 + v29)] = result;
    *(int16x4_t *)&a1->i8[2 * v34] = vqrshrn_n_s32(vsubq_s32(v31, v32), 0xCuLL);
    ++v29;
    a5 = (int16x4_t *)((char *)a5 + 2 * v28);
  }
  while (v30 != v29);
  return result;
}

int16x4_t *sub_1B6887578(int16x4_t *result, int a2)
{
  int16x4_t *v2;
  int16x8_t v3;
  char v4;
  char v5;

  v2 = result;
  if (a2 == 1)
  {
    v3 = vdupq_n_s16((result->i16[0] + 17) >> 5);
    v4 = 1;
    do
    {
      v5 = v4;
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v2 += 8;
      v4 = 0;
    }
    while ((v5 & 1) != 0);
  }
  else if (a2 > 16)
  {
    sub_1B68867A0(result, 8u, (uint64_t)&unk_1B692B9C0, (int16x4_t *)aYk2);
    sub_1B68867A0(v2 + 1, 8u, (uint64_t)&unk_1B692B9C0, (int16x4_t *)aYk2);
    sub_1B6886BB0((int16x8_t *)v2, 8u, (uint64_t)&unk_1B692B9C0, (int16x4_t *)aYk2);
    return (int16x4_t *)sub_1B6886BB0((int16x8_t *)&v2[8], 8u, (uint64_t)&unk_1B692B9C0, (int16x4_t *)aYk2);
  }
  else
  {
    sub_1B68866D4(result, 8u, (uint64_t)&unk_1B692B9C0);
    sub_1B6886AD0(v2, 8u, (uint64_t)&unk_1B692B9C0);
    return sub_1B6886AD0(v2 + 8, 8u, (uint64_t)&unk_1B692B9C0);
  }
  return result;
}

int16x4_t *sub_1B6887680(int16x4_t *result, int a2)
{
  int16x4_t *v2;
  int16x8_t v3;
  char v4;
  char v5;

  v2 = result;
  if (a2 == 1)
  {
    v3 = vdupq_n_s16((result->i16[0] + 65) >> 7);
    v4 = 1;
    do
    {
      v5 = v4;
      *(int16x8_t *)v2->i8 = v3;
      *(int16x8_t *)v2[2].i8 = v3;
      *(int16x8_t *)v2[4].i8 = v3;
      *(int16x8_t *)v2[6].i8 = v3;
      v2 += 8;
      v4 = 0;
    }
    while ((v5 & 1) != 0);
  }
  else if (a2 > 16)
  {
    sub_1B68867A0(result, 8u, (uint64_t)&unk_1B692B9C0, (int16x4_t *)aYk2);
    sub_1B68867A0(v2 + 1, 8u, (uint64_t)&unk_1B692B9C0, (int16x4_t *)aYk2);
    sub_1B6887260((int16x8_t *)v2, 8u, (uint64_t)&unk_1B692B9C0, (int16x4_t *)aYk2);
    return (int16x4_t *)sub_1B6887260((int16x8_t *)&v2[8], 8u, (uint64_t)&unk_1B692B9C0, (int16x4_t *)aYk2);
  }
  else
  {
    sub_1B68866D4(result, 8u, (uint64_t)&unk_1B692B9C0);
    sub_1B6887180(v2, 8u, (uint64_t)&unk_1B692B9C0);
    return sub_1B6887180(v2 + 8, 8u, (uint64_t)&unk_1B692B9C0);
  }
  return result;
}

int32x4_t sub_1B6887788(int32x4_t *a1, int a2)
{
  int32x4_t result;
  int16x8_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int16x4_t v11;
  int32x2_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int16x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int16x4_t v20;

  if (a2 == 1)
  {
    result = (int32x4_t)vdupq_n_s16((a1->i16[0] + 17) >> 5);
    *a1 = result;
    a1[1] = result;
  }
  else
  {
    v3 = (int16x8_t)a1[1];
    v4 = vshlq_n_s32(vaddl_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)a1->i8), 6uLL);
    v5 = vshlq_n_s32(vsubl_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v3.i8), 6uLL);
    v6.i64[0] = 0x53005300530053;
    v6.i64[1] = 0x53005300530053;
    v7.i64[0] = 0x24002400240024;
    v7.i64[1] = 0x24002400240024;
    v8 = vmull_high_s16(*(int16x8_t *)a1, v7);
    v9 = vmlal_high_s16(vmull_high_s16(v3, v7), *(int16x8_t *)a1, v6);
    v10 = vmlsl_high_s16(v8, v3, v6);
    v11 = vqrshrn_n_s32(vaddq_s32(v9, v4), 7uLL);
    *(int16x4_t *)v3.i8 = vqrshrn_n_s32(vsubq_s32(v4, v9), 7uLL);
    *(int16x4_t *)v4.i8 = vqrshrn_n_s32(vaddq_s32(v10, v5), 7uLL);
    *(int16x4_t *)v5.i8 = vqrshrn_n_s32(vsubq_s32(v5, v10), 7uLL);
    *(int16x4_t *)v6.i8 = vtrn1_s16(v11, *(int16x4_t *)v4.i8);
    v12 = (int32x2_t)vtrn2_s16(v11, *(int16x4_t *)v4.i8);
    *(int16x4_t *)v4.i8 = vtrn1_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v3.i8);
    *(int16x4_t *)v3.i8 = vtrn2_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v3.i8);
    *(int32x2_t *)v5.i8 = vzip1_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v4.i8);
    *(int32x2_t *)v4.i8 = vzip2_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v4.i8);
    v13 = vaddl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8);
    v14 = vsubl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8);
    v15 = vshlq_n_s32(v13, 6uLL);
    v16 = vshlq_n_s32(v14, 6uLL);
    *(int32x2_t *)v13.i8 = vzip1_s32(v12, *(int32x2_t *)v3.i8);
    v17 = (int16x4_t)vzip2_s32(v12, *(int32x2_t *)v3.i8);
    v18 = vmlal_s16(vmull_s16(v17, (int16x4_t)0x24002400240024), *(int16x4_t *)v13.i8, (int16x4_t)0x53005300530053);
    v19 = vmlsl_s16(vmull_s16(*(int16x4_t *)v13.i8, (int16x4_t)0x24002400240024), v17, (int16x4_t)0x53005300530053);
    result = vaddq_s32(v15, v18);
    v20 = vqrshrn_n_s32(result, 0xAuLL);
    *(int16x4_t *)v10.i8 = vqrshrn_n_s32(vsubq_s32(v15, v18), 0xAuLL);
    *(int16x4_t *)v13.i8 = vqrshrn_n_s32(vaddq_s32(v16, v19), 0xAuLL);
    *(int16x4_t *)v19.i8 = vqrshrn_n_s32(vsubq_s32(v16, v19), 0xAuLL);
    vst4_s16(a1->i16, *(int16x4x4_t *)((char *)&v10 - 24));
  }
  return result;
}

int32x4_t sub_1B6887864(int32x4_t *a1, int a2)
{
  int32x4_t result;
  int16x8_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int16x4_t v11;
  int32x2_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int16x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int16x4_t v20;

  if (a2 == 1)
  {
    result = (int32x4_t)vdupq_n_s16((a1->i16[0] + 65) >> 7);
    *a1 = result;
    a1[1] = result;
  }
  else
  {
    v3 = (int16x8_t)a1[1];
    v4 = vshlq_n_s32(vaddl_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)a1->i8), 6uLL);
    v5 = vshlq_n_s32(vsubl_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v3.i8), 6uLL);
    v6.i64[0] = 0x53005300530053;
    v6.i64[1] = 0x53005300530053;
    v7.i64[0] = 0x24002400240024;
    v7.i64[1] = 0x24002400240024;
    v8 = vmull_high_s16(*(int16x8_t *)a1, v7);
    v9 = vmlal_high_s16(vmull_high_s16(v3, v7), *(int16x8_t *)a1, v6);
    v10 = vmlsl_high_s16(v8, v3, v6);
    v11 = vqrshrn_n_s32(vaddq_s32(v9, v4), 7uLL);
    *(int16x4_t *)v3.i8 = vqrshrn_n_s32(vsubq_s32(v4, v9), 7uLL);
    *(int16x4_t *)v4.i8 = vqrshrn_n_s32(vaddq_s32(v10, v5), 7uLL);
    *(int16x4_t *)v5.i8 = vqrshrn_n_s32(vsubq_s32(v5, v10), 7uLL);
    *(int16x4_t *)v6.i8 = vtrn1_s16(v11, *(int16x4_t *)v4.i8);
    v12 = (int32x2_t)vtrn2_s16(v11, *(int16x4_t *)v4.i8);
    *(int16x4_t *)v4.i8 = vtrn1_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v3.i8);
    *(int16x4_t *)v3.i8 = vtrn2_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v3.i8);
    *(int32x2_t *)v5.i8 = vzip1_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v4.i8);
    *(int32x2_t *)v4.i8 = vzip2_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v4.i8);
    v13 = vaddl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8);
    v14 = vsubl_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8);
    v15 = vshlq_n_s32(v13, 6uLL);
    v16 = vshlq_n_s32(v14, 6uLL);
    *(int32x2_t *)v13.i8 = vzip1_s32(v12, *(int32x2_t *)v3.i8);
    v17 = (int16x4_t)vzip2_s32(v12, *(int32x2_t *)v3.i8);
    v18 = vmlal_s16(vmull_s16(v17, (int16x4_t)0x24002400240024), *(int16x4_t *)v13.i8, (int16x4_t)0x53005300530053);
    v19 = vmlsl_s16(vmull_s16(*(int16x4_t *)v13.i8, (int16x4_t)0x24002400240024), v17, (int16x4_t)0x53005300530053);
    result = vaddq_s32(v15, v18);
    v20 = vqrshrn_n_s32(result, 0xCuLL);
    *(int16x4_t *)v10.i8 = vqrshrn_n_s32(vsubq_s32(v15, v18), 0xCuLL);
    *(int16x4_t *)v13.i8 = vqrshrn_n_s32(vaddq_s32(v16, v19), 0xCuLL);
    *(int16x4_t *)v19.i8 = vqrshrn_n_s32(vsubq_s32(v16, v19), 0xCuLL);
    vst4_s16(a1->i16, *(int16x4x4_t *)((char *)&v10 - 24));
  }
  return result;
}

uint64_t sub_1B6887940(int16x4_t *a1)
{
  uint64_t result;
  unint64_t v3;
  int16x4_t v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int32x4_t *v12;
  int32x4_t v13;
  int16x8_t v14;
  int32x4_t v15;
  uint64_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  const __int16 *v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int v38;
  int32x4_t v39[16];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  result = sub_1B6886EC8(8, (int16x4_t *)aYk2, v39, *a1, a1[32], a1[64], a1[96], a1[128], a1[160], a1[192], a1[224]);
  v3 = 0;
  v4 = a1[16];
  v5 = a1[48];
  v6 = a1[80];
  v7 = a1[112];
  v8 = a1[144];
  v9 = a1[208];
  v10 = a1[176];
  v11 = a1[240];
  do
  {
    v12 = &v39[v3 / 8];
    v13 = v39[v3 / 8];
    v14 = *(int16x8_t *)&aZwpf9[v3];
    v15 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v5, *(int16x4_t *)v14.i8, 1), v4, *(int16x4_t *)v14.i8, 0), v6, *(int16x4_t *)v14.i8, 2), v7, *(int16x4_t *)v14.i8, 3), v8, v14, 4), v10, v14, 5), v9,
              v14,
              6),
            v11,
            v14,
            7);
    *v12 = vaddq_s32(v15, v13);
    v12[8] = vsubq_s32(v13, v15);
    v3 += 8;
  }
  while (v3 != 64);
  v16 = 0;
  v17 = a1[8];
  v18 = a1[24];
  v19 = a1[40];
  v20 = a1[56];
  v21 = a1[72];
  v22 = a1[88];
  v23 = a1[104];
  v24 = a1[120];
  v25 = a1[136];
  v26 = a1[152];
  v27 = a1[168];
  v28 = a1[184];
  v29 = aZzxurnic6;
  v30 = a1[200];
  v31 = a1[216];
  v32 = a1[232];
  v33 = a1[248];
  do
  {
    v34 = *(int16x8_t *)v29;
    v35 = *((int16x8_t *)v29 + 1);
    v29 += 16;
    v36 = v39[byte_1B692BEC0[v16]];
    v37 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v18, *(int16x4_t *)v34.i8, 1), v17, *(int16x4_t *)v34.i8, 0), v19,
                                      *(int16x4_t *)v34.i8,
                                      2),
                                    v20,
                                    *(int16x4_t *)v34.i8,
                                    3),
                                  v21,
                                  v34,
                                  4),
                                v22,
                                v34,
                                5),
                              v23,
                              v34,
                              6),
                            v24,
                            v34,
                            7),
                          v25,
                          *(int16x4_t *)v35.i8,
                          0),
                        v26,
                        *(int16x4_t *)v35.i8,
                        1),
                      v27,
                      *(int16x4_t *)v35.i8,
                      2),
                    v28,
                    *(int16x4_t *)v35.i8,
                    3),
                  v30,
                  v35,
                  4),
                v31,
                v35,
                5),
              v32,
              v35,
              6),
            v33,
            v35,
            7);
    v38 = 992 - 4 * *((unsigned __int8 *)&unk_1B692BBE0 + v16 + 64);
    a1[*((unsigned __int8 *)&unk_1B692BBE0 + v16 + 64)] = vqrshrn_n_s32(vaddq_s32(v37, v36), 7uLL);
    *(int16x4_t *)((char *)a1 + 2 * v38) = vqrshrn_n_s32(vsubq_s32(v36, v37), 7uLL);
    ++v16;
  }
  while (v16 != 16);
  return result;
}

uint64_t sub_1B6887B30(uint64_t a1)
{
  int16x8_t *v2;
  unint64_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t result;
  unint64_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int32x4_t *v17;
  int32x4_t v18;
  int16x8_t v19;
  int32x4_t v20;
  uint64_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  const __int16 *v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int v43;
  int32x4_t v44[16];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = (int16x8_t *)(a1 + 128);
  v3 = -8;
  do
  {
    v4 = v2[-8];
    v5 = v2[-4];
    v6 = v2[4];
    v7 = (int32x4_t)vtrn1q_s16(v4, v5);
    v8 = (int32x4_t)vtrn2q_s16(v4, v5);
    v9 = (int32x4_t)vtrn1q_s16(*v2, v6);
    v10 = (int32x4_t)vtrn2q_s16(*v2, v6);
    v2[-8] = (int16x8_t)vtrn1q_s32(v7, v9);
    v2[-4] = (int16x8_t)vtrn1q_s32(v8, v10);
    *(int32x4_t *)v2 = vtrn2q_s32(v7, v9);
    v2[4] = (int16x8_t)vtrn2q_s32(v8, v10);
    v3 += 8;
    ++v2;
  }
  while (v3 < 0x18);
  result = sub_1B6886EC8(8, (int16x4_t *)aYk2, v44, *(int16x4_t *)a1, (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), *(int16x4_t *)(a1 + 16), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 16), *(int8x16_t *)(a1 + 16), 8uLL), *(int16x4_t *)a1, *(int16x4_t *)(a1 + 8), *(int16x4_t *)(a1 + 16), *(int16x4_t *)(a1 + 24));
  v12 = 0;
  v13 = *(int16x8_t *)(a1 + 128);
  v14 = *(int16x8_t *)(a1 + 144);
  v15 = *(int16x4_t *)(a1 + 136);
  v16 = *(int16x4_t *)(a1 + 152);
  do
  {
    v17 = &v44[v12 / 8];
    v18 = v44[v12 / 8];
    v19 = *(int16x8_t *)&aZwpf9[v12];
    v20 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v19.i8, 0), v13, *(int16x4_t *)v19.i8, 1), *(int16x4_t *)v14.i8, *(int16x4_t *)v19.i8, 2), v14, *(int16x4_t *)v19.i8, 3), *(int16x4_t *)v13.i8, v19, 4),
                v15,
                v19,
                5),
              *(int16x4_t *)v14.i8,
              v19,
              6),
            v16,
            v19,
            7);
    *v17 = vaddq_s32(v20, v18);
    v17[8] = vsubq_s32(v18, v20);
    v12 += 8;
  }
  while (v12 != 64);
  v21 = 0;
  v22 = *(int16x4_t *)(a1 + 64);
  v23 = *(int16x4_t *)(a1 + 72);
  v24 = *(int16x4_t *)(a1 + 192);
  v25 = *(int16x4_t *)(a1 + 200);
  v26 = *(int16x4_t *)(a1 + 80);
  v27 = *(int16x4_t *)(a1 + 88);
  v28 = *(int16x4_t *)(a1 + 208);
  v29 = *(int16x4_t *)(a1 + 216);
  v30 = *(int16x4_t *)(a1 + 96);
  v31 = *(int16x4_t *)(a1 + 104);
  v32 = *(int16x4_t *)(a1 + 224);
  v33 = *(int16x4_t *)(a1 + 232);
  v34 = aZzxurnic6;
  v35 = *(int16x4_t *)(a1 + 112);
  v36 = *(int16x4_t *)(a1 + 120);
  v37 = *(int16x4_t *)(a1 + 240);
  v38 = *(int16x4_t *)(a1 + 248);
  do
  {
    v39 = *(int16x8_t *)v34;
    v40 = *((int16x8_t *)v34 + 1);
    v34 += 16;
    v41 = v44[byte_1B692BEC0[v21]];
    v42 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v24, *(int16x4_t *)v39.i8, 1), v22, *(int16x4_t *)v39.i8, 0), v23,
                                      *(int16x4_t *)v39.i8,
                                      2),
                                    v25,
                                    *(int16x4_t *)v39.i8,
                                    3),
                                  v26,
                                  v39,
                                  4),
                                v28,
                                v39,
                                5),
                              v27,
                              v39,
                              6),
                            v29,
                            v39,
                            7),
                          v30,
                          *(int16x4_t *)v40.i8,
                          0),
                        v32,
                        *(int16x4_t *)v40.i8,
                        1),
                      v31,
                      *(int16x4_t *)v40.i8,
                      2),
                    v33,
                    *(int16x4_t *)v40.i8,
                    3),
                  v35,
                  v40,
                  4),
                v37,
                v40,
                5),
              v36,
              v40,
              6),
            v38,
            v40,
            7);
    v43 = 124 - 4 * *((unsigned __int8 *)&unk_1B692BBE0 + v21 + 80);
    *(int16x4_t *)(a1 + 8 * *((unsigned __int8 *)&unk_1B692BBE0 + v21 + 80)) = vqrshrn_n_s32(vaddq_s32(v42, v41), 0xAuLL);
    *(int16x4_t *)(a1 + 2 * v43) = vqrshrn_n_s32(vsubq_s32(v41, v42), 0xAuLL);
    ++v21;
  }
  while (v21 != 16);
  return result;
}

uint64_t sub_1B6887D50(uint64_t a1)
{
  int16x8_t *v2;
  unint64_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t result;
  unint64_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int32x4_t *v17;
  int32x4_t v18;
  int16x8_t v19;
  int32x4_t v20;
  uint64_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  const __int16 *v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int v43;
  int32x4_t v44[16];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = (int16x8_t *)(a1 + 128);
  v3 = -8;
  do
  {
    v4 = v2[-8];
    v5 = v2[-4];
    v6 = v2[4];
    v7 = (int32x4_t)vtrn1q_s16(v4, v5);
    v8 = (int32x4_t)vtrn2q_s16(v4, v5);
    v9 = (int32x4_t)vtrn1q_s16(*v2, v6);
    v10 = (int32x4_t)vtrn2q_s16(*v2, v6);
    v2[-8] = (int16x8_t)vtrn1q_s32(v7, v9);
    v2[-4] = (int16x8_t)vtrn1q_s32(v8, v10);
    *(int32x4_t *)v2 = vtrn2q_s32(v7, v9);
    v2[4] = (int16x8_t)vtrn2q_s32(v8, v10);
    v3 += 8;
    ++v2;
  }
  while (v3 < 0x18);
  result = sub_1B6886EC8(8, (int16x4_t *)aYk2, v44, *(int16x4_t *)a1, (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), *(int16x4_t *)(a1 + 16), (int16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 16), *(int8x16_t *)(a1 + 16), 8uLL), *(int16x4_t *)a1, *(int16x4_t *)(a1 + 8), *(int16x4_t *)(a1 + 16), *(int16x4_t *)(a1 + 24));
  v12 = 0;
  v13 = *(int16x8_t *)(a1 + 128);
  v14 = *(int16x8_t *)(a1 + 144);
  v15 = *(int16x4_t *)(a1 + 136);
  v16 = *(int16x4_t *)(a1 + 152);
  do
  {
    v17 = &v44[v12 / 8];
    v18 = v44[v12 / 8];
    v19 = *(int16x8_t *)&aZwpf9[v12];
    v20 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_lane_s16(vmlal_high_lane_s16(vmull_lane_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v19.i8, 0), v13, *(int16x4_t *)v19.i8, 1), *(int16x4_t *)v14.i8, *(int16x4_t *)v19.i8, 2), v14, *(int16x4_t *)v19.i8, 3), *(int16x4_t *)v13.i8, v19, 4),
                v15,
                v19,
                5),
              *(int16x4_t *)v14.i8,
              v19,
              6),
            v16,
            v19,
            7);
    *v17 = vaddq_s32(v20, v18);
    v17[8] = vsubq_s32(v18, v20);
    v12 += 8;
  }
  while (v12 != 64);
  v21 = 0;
  v22 = *(int16x4_t *)(a1 + 64);
  v23 = *(int16x4_t *)(a1 + 72);
  v24 = *(int16x4_t *)(a1 + 192);
  v25 = *(int16x4_t *)(a1 + 200);
  v26 = *(int16x4_t *)(a1 + 80);
  v27 = *(int16x4_t *)(a1 + 88);
  v28 = *(int16x4_t *)(a1 + 208);
  v29 = *(int16x4_t *)(a1 + 216);
  v30 = *(int16x4_t *)(a1 + 96);
  v31 = *(int16x4_t *)(a1 + 104);
  v32 = *(int16x4_t *)(a1 + 224);
  v33 = *(int16x4_t *)(a1 + 232);
  v34 = aZzxurnic6;
  v35 = *(int16x4_t *)(a1 + 112);
  v36 = *(int16x4_t *)(a1 + 120);
  v37 = *(int16x4_t *)(a1 + 240);
  v38 = *(int16x4_t *)(a1 + 248);
  do
  {
    v39 = *(int16x8_t *)v34;
    v40 = *((int16x8_t *)v34 + 1);
    v34 += 16;
    v41 = v44[byte_1B692BEC0[v21]];
    v42 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v24, *(int16x4_t *)v39.i8, 1), v22, *(int16x4_t *)v39.i8, 0), v23,
                                      *(int16x4_t *)v39.i8,
                                      2),
                                    v25,
                                    *(int16x4_t *)v39.i8,
                                    3),
                                  v26,
                                  v39,
                                  4),
                                v28,
                                v39,
                                5),
                              v27,
                              v39,
                              6),
                            v29,
                            v39,
                            7),
                          v30,
                          *(int16x4_t *)v40.i8,
                          0),
                        v32,
                        *(int16x4_t *)v40.i8,
                        1),
                      v31,
                      *(int16x4_t *)v40.i8,
                      2),
                    v33,
                    *(int16x4_t *)v40.i8,
                    3),
                  v35,
                  v40,
                  4),
                v37,
                v40,
                5),
              v36,
              v40,
              6),
            v38,
            v40,
            7);
    v43 = 124 - 4 * *((unsigned __int8 *)&unk_1B692BBE0 + v21 + 80);
    *(int16x4_t *)(a1 + 8 * *((unsigned __int8 *)&unk_1B692BBE0 + v21 + 80)) = vqrshrn_n_s32(vaddq_s32(v42, v41), 0xCuLL);
    *(int16x4_t *)(a1 + 2 * v43) = vqrshrn_n_s32(vsubq_s32(v41, v42), 0xCuLL);
    ++v21;
  }
  while (v21 != 16);
  return result;
}

void sub_1B6887F70(int16x4_t *a1, int16x4_t *a2, int a3)
{
  unsigned int v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int32x2_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int32x2_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  int32x2_t v37;
  int32x2_t v38;
  int32x2_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  int32x2_t v47;
  int32x2_t v48;
  int32x2_t v49;
  int16x4_t v50[17];

  v50[16] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  v6 = -4;
  do
  {
    v7 = a2[1];
    v8 = a2[4];
    v9 = a2[5];
    v10 = a2[8];
    v11 = a2[9];
    v12 = a2[12];
    v13 = a2[13];
    v14 = a2[2];
    v15 = a2[3];
    v16 = (int32x2_t)vtrn1_s16(*a2, v8);
    v17 = a2[6];
    v18 = a2[7];
    v19 = (int32x2_t)vtrn2_s16(*a2, v8);
    v20 = (int32x2_t)vtrn1_s16(v10, v12);
    v21 = (int32x2_t)vtrn2_s16(v10, v12);
    v22 = a2[10];
    v23 = a2[11];
    v24 = vzip1_s32(v16, v20);
    v25 = vzip2_s32(v16, v20);
    v26 = vzip1_s32(v19, v21);
    v27 = a2[14];
    v28 = a2[15];
    v29 = vzip2_s32(v19, v21);
    v30 = (int32x2_t)vtrn1_s16(v7, v9);
    v31 = (int32x2_t)vtrn2_s16(v7, v9);
    v32 = (int32x2_t)vtrn1_s16(v11, v13);
    v33 = (int32x2_t)vtrn2_s16(v11, v13);
    v34 = vzip1_s32(v30, v32);
    v35 = vzip2_s32(v30, v32);
    v36 = vzip1_s32(v31, v33);
    v37 = vzip2_s32(v31, v33);
    v38 = (int32x2_t)vtrn1_s16(v14, v17);
    v39 = (int32x2_t)vtrn2_s16(v14, v17);
    v40 = (int32x2_t)vtrn1_s16(v22, v27);
    v41 = (int32x2_t)vtrn2_s16(v22, v27);
    v42 = vzip1_s32(v38, v40);
    v43 = vzip2_s32(v38, v40);
    v44 = vzip1_s32(v39, v41);
    v45 = vzip2_s32(v39, v41);
    v46 = (int32x2_t)vtrn1_s16(v15, v18);
    v47 = (int32x2_t)vtrn2_s16(v15, v18);
    v48 = (int32x2_t)vtrn1_s16(v23, v28);
    v50[0] = (int16x4_t)v24;
    v50[1] = (int16x4_t)v29;
    v49 = (int32x2_t)vtrn2_s16(v23, v28);
    v50[2] = (int16x4_t)v26;
    v50[3] = (int16x4_t)v25;
    v50[4] = (int16x4_t)v37;
    v50[5] = (int16x4_t)v34;
    v50[6] = (int16x4_t)v35;
    v50[7] = (int16x4_t)v36;
    v50[8] = (int16x4_t)vzip2_s32(v47, v49);
    v50[9] = (int16x4_t)vzip1_s32(v46, v48);
    v50[10] = (int16x4_t)vzip2_s32(v46, v48);
    v50[11] = (int16x4_t)vzip1_s32(v47, v49);
    v50[12] = (int16x4_t)v42;
    v50[13] = (int16x4_t)v45;
    v50[14] = (int16x4_t)v44;
    v50[15] = (int16x4_t)v43;
    sub_1B688852C(a1++, 16, a3, v50);
    v6 += 4;
    a2 += 16;
  }
  while (v6 < 0xC);
}

void sub_1B68880BC(int16x4_t *a1, int16x4_t *a2)
{
  unsigned int v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int32x4_t v36[16];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = -4;
  do
  {
    v5 = a2[1];
    v6 = a2[4];
    v7 = a2[5];
    v8 = (int32x2_t)vtrn1_s16(*a2, v6);
    v9 = (int32x2_t)vtrn2_s16(*a2, v6);
    v10 = a2[8];
    v11 = a2[9];
    v12 = a2[12];
    v13 = a2[13];
    v14 = (int32x2_t)vtrn1_s16(v10, v12);
    v15 = (int32x2_t)vtrn2_s16(v10, v12);
    v16 = (int32x2_t)vtrn1_s16(v5, v7);
    v17 = (int32x2_t)vtrn2_s16(v5, v7);
    v18 = (int32x2_t)vtrn1_s16(v11, v13);
    v19 = (int32x2_t)vtrn2_s16(v11, v13);
    v20 = a2[2];
    v21 = a2[3];
    v22 = a2[6];
    v23 = a2[7];
    v24 = (int32x2_t)vtrn1_s16(v20, v22);
    v25 = (int32x2_t)vtrn2_s16(v20, v22);
    v26 = a2[10];
    v27 = a2[11];
    v28 = a2[14];
    v29 = a2[15];
    v30 = (int32x2_t)vtrn1_s16(v26, v28);
    v31 = (int32x2_t)vtrn2_s16(v26, v28);
    v32 = (int32x2_t)vtrn1_s16(v21, v23);
    v33 = (int32x2_t)vtrn2_s16(v21, v23);
    v34 = (int32x2_t)vtrn1_s16(v27, v29);
    v35 = (int32x2_t)vtrn2_s16(v27, v29);
    v36[0] = vmovl_s16((int16x4_t)vzip1_s32(v8, v14));
    v36[1] = vmovl_s16((int16x4_t)vzip2_s32(v9, v15));
    v36[2] = vmovl_s16((int16x4_t)vzip1_s32(v9, v15));
    v36[3] = vmovl_s16((int16x4_t)vzip2_s32(v8, v14));
    v36[4] = vmovl_s16((int16x4_t)vzip2_s32(v17, v19));
    v36[5] = vmovl_s16((int16x4_t)vzip1_s32(v16, v18));
    v36[6] = vmovl_s16((int16x4_t)vzip2_s32(v16, v18));
    v36[7] = vmovl_s16((int16x4_t)vzip1_s32(v17, v19));
    v36[8] = vmovl_s16((int16x4_t)vzip2_s32(v33, v35));
    v36[9] = vmovl_s16((int16x4_t)vzip1_s32(v32, v34));
    v36[10] = vmovl_s16((int16x4_t)vzip2_s32(v32, v34));
    v36[11] = vmovl_s16((int16x4_t)vzip1_s32(v33, v35));
    v36[12] = vmovl_s16((int16x4_t)vzip1_s32(v24, v30));
    v36[13] = vmovl_s16((int16x4_t)vzip2_s32(v25, v31));
    v36[14] = vmovl_s16((int16x4_t)vzip1_s32(v25, v31));
    v36[15] = vmovl_s16((int16x4_t)vzip2_s32(v24, v30));
    sub_1B6888244(a1++, 16, 10, v36);
    v4 += 4;
    a2 += 16;
  }
  while (v4 < 0xC);
}

int16x4_t sub_1B6888244(int16x4_t *a1, uint64_t a2, int a3, int32x4_t *a4)
{
  unint64_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x4_t v30;
  int16x4_t *v31;
  __int16 *v32;
  int16x8_t v33;
  BOOL v34;
  int32x4_t v36;
  int32x4_t v37;

  v4 = 0;
  v5 = a4[2];
  v6 = a4[3];
  v7 = a4[4];
  v8 = a4[5];
  v9 = a4[8];
  v10 = a4[9];
  v11 = a4[10];
  v12 = a4[11];
  v13 = a4[12];
  v14 = a4[13];
  v36 = a4[1];
  v37 = *a4;
  v15 = vsubq_s32(*a4, v9);
  v16 = vsubq_s32(v36, v10);
  v17 = vsubq_s32(v5, v11);
  v18 = vsubq_s32(v6, v12);
  v19 = vsubq_s32(v7, v13);
  v20 = vsubq_s32(v8, v14);
  v21 = a4[6];
  v22 = a4[7];
  v23 = a4[14];
  v24 = a4[15];
  v25 = vsubq_s32(v21, v23);
  v26 = vsubq_s32(v22, v24);
  v27 = 6 * a2;
  v28 = 8 * a2;
  v29 = 2 * a2;
  v30 = vdupq_n_s32(-a3);
  v31 = a1;
  do
  {
    v32 = &aZfwp9[8 * v4];
    v33 = *((int16x8_t *)v32 + 1);
    *(int16x4_t *)((char *)v31 + v29) = vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vmovl_s16(vdup_lane_s16(*(int16x4_t *)v32, 1)), v16), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v32, 0)), v15), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v32, 2)), v17), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v32, 3)), v18), vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v32, 4)), v19), vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v32, 5)), v20),
                                                vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v32, 6)),
                                                v25),
                                              vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v32, 7)),
                                              v26),
                                            v30));
    *(int16x4_t *)((char *)v31 + v27) = vqmovn_s32(vrshlq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vmovl_s16(vdup_lane_s16(*(int16x4_t *)v33.i8, 1)), v16), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v33.i8, 0)), v15), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v33.i8, 2)), v17), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v33.i8, 3)), v18), vmovl_s16(vdup_laneq_s16(v33, 4)), v19),
                                                  vmovl_s16(vdup_laneq_s16(v33, 5)),
                                                  v20),
                                                vmovl_s16(vdup_laneq_s16(v33, 6)),
                                                v25),
                                              vmovl_s16(vdup_laneq_s16(v33, 7)),
                                              v26),
                                            v30));
    v31 = (int16x4_t *)((char *)v31 + v28);
    v34 = v4 >= 6;
    v4 += 2;
  }
  while (!v34);
  return sub_1B68883F8(a1, v29, a3, vaddq_s32(v9, v37), vaddq_s32(v10, v36), vaddq_s32(v11, v5), vaddq_s32(v12, v6), vaddq_s32(v13, v7), vaddq_s32(v14, v8), vaddq_s32(v23, v21), vaddq_s32(v24, v22));
}

int16x4_t sub_1B68883F8(int16x4_t *a1, uint64_t a2, int a3, int32x4_t a4, int32x4_t a5, int32x4_t a6, int32x4_t a7, int32x4_t a8, int32x4_t a9, int32x4_t a10, int32x4_t a11)
{
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x4_t *v30;
  uint64_t v31;
  uint64_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int16x4_t result;

  v11 = vaddq_s32(a8, a4);
  v12 = vsubq_s32(a4, a8);
  v13 = vaddq_s32(a9, a5);
  v14 = vsubq_s32(a5, a9);
  v15 = vaddq_s32(a10, a6);
  v16 = vsubq_s32(a6, a10);
  v17 = vaddq_s32(a11, a7);
  v18 = vsubq_s32(a7, a11);
  v19.i64[0] = 0x5900000059;
  v19.i64[1] = 0x5900000059;
  v20.i64[0] = 0x1200000012;
  v20.i64[1] = 0x1200000012;
  v21.i64[0] = 0x4B0000004BLL;
  v21.i64[1] = 0x4B0000004BLL;
  v22.i64[0] = 0x3200000032;
  v22.i64[1] = 0x3200000032;
  v23 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v12, v19), v14, v20), v16, v21), v18, v22);
  v24.i64[0] = 0x3100000031;
  v24.i64[1] = 0x3100000031;
  v25.i64[0] = 0x1100000011;
  v25.i64[1] = 0x1100000011;
  v26 = vmlaq_s32(vmlaq_s32(vmulq_s32(v12, v21), v14, v24), v16, v25);
  v25.i64[0] = 0x5800000058;
  v25.i64[1] = 0x5800000058;
  v27 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v12, v22), v14, v21), v16, v25), v18, v20);
  v28 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v12, v20), v14, v25), v16, v24), v18, v21);
  v29 = vdupq_n_s32(-a3);
  v30 = (int16x4_t *)((char *)a1 + 2 * a2);
  *v30 = vqmovn_s32(vrshlq_s32(v23, v29));
  v31 = 4 * a2;
  *(int16x4_t *)((char *)v30 + v31) = vqmovn_s32(vrshlq_s32(vmlaq_s32(v26, v18, v25), v29));
  v30[a2] = vqmovn_s32(vrshlq_s32(v27, v29));
  v32 = 12 * a2;
  *(int16x4_t *)((char *)v30 + v32) = vqmovn_s32(vrshlq_s32(v28, v29));
  v33 = vaddq_s32(v13, v11);
  v34 = vsubq_s32(v11, v13);
  v35 = vaddq_s32(v17, v15);
  v36 = vsubq_s32(v15, v17);
  v15.i64[0] = 0x5300000053;
  v15.i64[1] = 0x5300000053;
  v37 = vmulq_s32(v34, v15);
  v17.i64[0] = 0x2400000024;
  v17.i64[1] = 0x2400000024;
  v38 = vmulq_s32(v34, v17);
  v39 = vmlaq_s32(v37, v36, v17);
  v17.i64[0] = 0x5200000052;
  v17.i64[1] = 0x5200000052;
  v40 = vmlaq_s32(v38, v36, v17);
  v41 = vaddq_s32(v35, v33);
  result = vqmovn_s32(vrshlq_s32(vshlq_n_s32(vsubq_s32(v33, v35), 6uLL), v29));
  *a1 = vqmovn_s32(vrshlq_s32(vshlq_n_s32(v41, 6uLL), v29));
  *(int16x4_t *)((char *)a1 + v31) = vqmovn_s32(vrshlq_s32(v39, v29));
  a1[a2] = result;
  *(int16x4_t *)((char *)a1 + v32) = vqmovn_s32(vrshlq_s32(v40, v29));
  return result;
}

int16x4_t sub_1B688852C(int16x4_t *a1, uint64_t a2, int a3, int16x4_t *a4)
{
  unint64_t v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  int16x4_t *v33;
  __int16 *v34;
  int16x8_t v35;
  BOOL v36;

  v4 = 0;
  v5 = *a4;
  v6 = a4[1];
  v7 = a4[2];
  v8 = a4[3];
  v9 = a4[4];
  v10 = a4[5];
  v11 = a4[8];
  v12 = a4[9];
  v13 = a4[10];
  v14 = a4[11];
  v15 = a4[12];
  v16 = a4[13];
  v17 = vsub_s16(*a4, v11);
  v18 = vsub_s16(v6, v12);
  v19 = vsub_s16(v7, v13);
  v20 = vsub_s16(v8, v14);
  v21 = vsub_s16(v9, v15);
  v22 = vsub_s16(v10, v16);
  v23 = a4[6];
  v24 = a4[7];
  v25 = a4[14];
  v26 = a4[15];
  v27 = vsub_s16(v23, v25);
  v28 = vsub_s16(v24, v26);
  v29 = 6 * a2;
  v30 = 8 * a2;
  v31 = 2 * a2;
  v32 = vdupq_n_s32(-a3);
  v33 = a1;
  do
  {
    v34 = &aZfwp9[8 * v4];
    v35 = *((int16x8_t *)v34 + 1);
    *(int16x4_t *)((char *)v33 + v31) = vqmovn_s32(vrshlq_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v18, *(int16x4_t *)v34, 1), v17, *(int16x4_t *)v34, 0), v19, *(int16x4_t *)v34, 2), v20, *(int16x4_t *)v34, 3), v21,
                                                    *(int16x8_t *)v34,
                                                    4),
                                                  v22,
                                                  *(int16x8_t *)v34,
                                                  5),
                                                v27,
                                                *(int16x8_t *)v34,
                                                6),
                                              v28,
                                              *(int16x8_t *)v34,
                                              7),
                                            v32));
    *(int16x4_t *)((char *)v33 + v29) = vqmovn_s32(vrshlq_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v18, *(int16x4_t *)v35.i8, 1), v17, *(int16x4_t *)v35.i8, 0), v19, *(int16x4_t *)v35.i8, 2), v20, *(int16x4_t *)v35.i8, 3), v21,
                                                    v35,
                                                    4),
                                                  v22,
                                                  v35,
                                                  5),
                                                v27,
                                                v35,
                                                6),
                                              v28,
                                              v35,
                                              7),
                                            v32));
    v33 = (int16x4_t *)((char *)v33 + v30);
    v36 = v4 >= 6;
    v4 += 2;
  }
  while (!v36);
  return sub_1B688863C(a1, v31, a3, vadd_s16(v11, v5), vadd_s16(v12, v6), vadd_s16(v13, v7), vadd_s16(v14, v8), vadd_s16(v15, v9), vadd_s16(v16, v10), vadd_s16(v25, v23), vadd_s16(v26, v24));
}

int16x4_t sub_1B688863C(int16x4_t *a1, uint64_t a2, int a3, int16x4_t a4, int16x4_t a5, int16x4_t a6, int16x4_t a7, int16x4_t a8, int16x4_t a9, int16x4_t a10, int16x4_t a11)
{
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x4_t *v23;
  uint64_t v24;
  uint64_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int16x4_t v32;
  int16x4_t result;

  v11 = vadd_s16(a8, a4);
  v12 = vsub_s16(a4, a8);
  v13 = vadd_s16(a9, a5);
  v14 = vsub_s16(a5, a9);
  v15 = vadd_s16(a10, a6);
  v16 = vsub_s16(a6, a10);
  v17 = vsub_s16(a7, a11);
  v18 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v14, (int16x4_t)0x12001200120012), v12, (int16x4_t)0x59005900590059), v16, (int16x4_t)0x4B004B004B004BLL), v17, (int16x4_t)0x32003200320032);
  v19 = vmlal_s16(vmlal_s16(vmull_s16(v14, (int16x4_t)0x31003100310031), v12, (int16x4_t)0x4B004B004B004BLL), v16, (int16x4_t)0x11001100110011);
  v20 = vmlal_s16(vmull_s16(v14, (int16x4_t)0x4B004B004B004BLL), v12, (int16x4_t)0x32003200320032);
  v21 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v14, (int16x4_t)0x58005800580058), v12, (int16x4_t)0x12001200120012), v16, (int16x4_t)0x31003100310031), v17, (int16x4_t)0x4B004B004B004BLL);
  v22 = vdupq_n_s32(-a3);
  v23 = (int16x4_t *)((char *)a1 + 2 * a2);
  *v23 = vqmovn_s32(vrshlq_s32(v18, v22));
  v24 = 4 * a2;
  *(int16x4_t *)((char *)v23 + v24) = vqmovn_s32(vrshlq_s32(vmlal_s16(v19, v17, (int16x4_t)0x58005800580058), v22));
  v23[a2] = vqmovn_s32(vrshlq_s32(vmlal_s16(vmlal_s16(v20, v16, (int16x4_t)0x58005800580058), v17, (int16x4_t)0x12001200120012), v22));
  v25 = 12 * a2;
  *(int16x4_t *)((char *)v23 + v25) = vqmovn_s32(vrshlq_s32(v21, v22));
  *(int16x4_t *)v21.i8 = vadd_s16(a11, a7);
  v26 = vadd_s16(v13, v11);
  v27 = vsub_s16(v11, v13);
  v28 = vadd_s16(*(int16x4_t *)v21.i8, v15);
  *(int16x4_t *)v21.i8 = vsub_s16(v15, *(int16x4_t *)v21.i8);
  v29 = vmlal_s16(vmull_s16(*(int16x4_t *)v21.i8, (int16x4_t)0x24002400240024), v27, (int16x4_t)0x53005300530053);
  v30 = vmlsl_s16(vmull_s16(v27, (int16x4_t)0x24002400240024), *(int16x4_t *)v21.i8, (int16x4_t)0x53005300530053);
  v31 = vaddl_s16(v28, v26);
  v32 = vqmovn_s32(vrshlq_s32(vshlq_n_s32(vsubl_s16(v26, v28), 6uLL), v22));
  *a1 = vqmovn_s32(vrshlq_s32(vshlq_n_s32(v31, 6uLL), v22));
  *(int16x4_t *)((char *)a1 + v24) = vqmovn_s32(vrshlq_s32(v29, v22));
  result = vqmovn_s32(vrshlq_s32(v30, v22));
  a1[a2] = v32;
  *(int16x4_t *)((char *)a1 + v25) = result;
  return result;
}

void sub_1B688876C(int16x4_t *a1, int16x4_t *a2, int a3)
{
  char v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  char v22;

  v6 = 1;
  do
  {
    v7 = a2[1];
    v8 = a2[4];
    v9 = a2[5];
    v10 = a2[2];
    v11 = a2[3];
    v12 = (int32x2_t)vtrn1_s16(*a2, v10);
    v13 = (int32x2_t)vtrn2_s16(*a2, v10);
    v14 = a2[6];
    v15 = a2[7];
    v16 = (int32x2_t)vtrn1_s16(v8, v14);
    v17 = (int32x2_t)vtrn2_s16(v8, v14);
    v18 = (int32x2_t)vtrn1_s16(v7, v11);
    v19 = (int32x2_t)vtrn2_s16(v7, v11);
    v20 = (int32x2_t)vtrn1_s16(v9, v15);
    v21 = (int32x2_t)vtrn2_s16(v9, v15);
    v22 = v6;
    sub_1B688863C(a1, 8, a3, (int16x4_t)vzip1_s32(v12, v16), (int16x4_t)vzip2_s32(v13, v17), (int16x4_t)vzip1_s32(v13, v17), (int16x4_t)vzip2_s32(v12, v16), (int16x4_t)vzip2_s32(v19, v21), (int16x4_t)vzip1_s32(v18, v20), (int16x4_t)vzip2_s32(v18, v20), (int16x4_t)vzip1_s32(v19, v21));
    v6 = 0;
    ++a1;
    a2 += 8;
  }
  while ((v22 & 1) != 0);
}

void sub_1B6888810(int16x4_t *a1, int16x4_t *a2)
{
  char v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  char v20;

  v4 = 1;
  do
  {
    v5 = a2[1];
    v6 = a2[4];
    v7 = a2[5];
    v8 = a2[2];
    v9 = a2[3];
    v10 = (int32x2_t)vtrn1_s16(*a2, v8);
    v11 = (int32x2_t)vtrn2_s16(*a2, v8);
    v12 = a2[6];
    v13 = a2[7];
    v14 = (int32x2_t)vtrn1_s16(v6, v12);
    v15 = (int32x2_t)vtrn2_s16(v6, v12);
    v16 = (int32x2_t)vtrn1_s16(v5, v9);
    v17 = (int32x2_t)vtrn2_s16(v5, v9);
    v18 = (int32x2_t)vtrn1_s16(v7, v13);
    v19 = (int32x2_t)vtrn2_s16(v7, v13);
    v20 = v4;
    sub_1B68883F8(a1, 8, 9, vmovl_s16((int16x4_t)vzip1_s32(v10, v14)), vmovl_s16((int16x4_t)vzip2_s32(v11, v15)), vmovl_s16((int16x4_t)vzip1_s32(v11, v15)), vmovl_s16((int16x4_t)vzip2_s32(v10, v14)), vmovl_s16((int16x4_t)vzip2_s32(v17, v19)), vmovl_s16((int16x4_t)vzip1_s32(v16, v18)), vmovl_s16((int16x4_t)vzip2_s32(v16, v18)), vmovl_s16((int16x4_t)vzip1_s32(v17, v19)));
    v4 = 0;
    ++a1;
    a2 += 8;
  }
  while ((v20 & 1) != 0);
}

int16x4_t sub_1B68888D0(int16x4_t *a1, int8x16_t a2, int8x16_t a3)
{
  int16x4_t v3;
  int32x2_t v4;
  int32x2_t v5;
  int16x4_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x4_t result;

  v3 = (int16x4_t)vextq_s8(a2, a2, 8uLL).u64[0];
  v4 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a2.i8, v3);
  v5 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a2.i8, v3);
  v6 = (int16x4_t)vextq_s8(a3, a3, 8uLL).u64[0];
  v7 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a3.i8, v6);
  v8 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a3.i8, v6);
  v9 = (int16x4_t)vzip1_s32(v5, v8);
  v10 = (int16x4_t)vzip2_s32(v4, v7);
  v11 = (int16x4_t)vzip2_s32(v5, v8);
  v12 = (int16x4_t)vzip1_s32(v4, v7);
  v13 = vaddl_s16(v11, v12);
  v14 = vsubl_s16(v12, v11);
  v15 = vaddl_s16(v10, v9);
  v16 = vsubl_s16(v9, v10);
  v17.i64[0] = 0x5300000053;
  v17.i64[1] = 0x5300000053;
  v18.i64[0] = 0x2400000024;
  v18.i64[1] = 0x2400000024;
  v19 = vmulq_s32(v14, v18);
  v20 = vmlaq_s32(vmulq_s32(v16, v18), v14, v17);
  v14.i64[0] = 0x5200000052;
  v14.i64[1] = 0x5200000052;
  *a1 = vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vaddq_s32(v15, v13), 6uLL), 8uLL));
  a1[1] = vqmovn_s32(vrshrq_n_s32(v20, 8uLL));
  result = vqmovn_s32(vrshrq_n_s32(vmlaq_s32(v19, v16, v14), 8uLL));
  a1[2] = vqmovn_s32(vrshrq_n_s32(vshlq_n_s32(vsubq_s32(v13, v15), 6uLL), 8uLL));
  a1[3] = result;
  return result;
}

void sub_1B6888960(int16x4_t *a1, int16x4_t *a2, int a3)
{
  unsigned int v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int32x2_t v38;
  int32x2_t v39;
  int32x2_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int32x2_t v48;
  int32x2_t v49;
  int32x2_t v50;
  int32x2_t v51;
  int32x2_t v52;
  int32x2_t v53;
  int32x2_t v54;
  int32x2_t v55;
  int32x2_t v56;
  int32x2_t v57;
  int32x2_t v58;
  int32x2_t v59;
  int32x2_t v60;
  int32x2_t v61;
  int32x2_t v62;
  int32x2_t v63;
  int32x2_t v64;
  int32x2_t v65;
  int32x2_t v66;
  int32x2_t v67;
  int32x2_t v68;
  int32x2_t v69;
  int32x2_t v70;
  int32x2_t v71;
  int32x2_t v72;
  int32x2_t v73;
  int32x2_t v74;
  int32x2_t v75;
  int32x2_t v76;
  int32x2_t v77;
  int32x2_t v78;
  int32x2_t v79;
  int32x2_t v80;
  int32x2_t v81;
  int32x2_t v82;
  int32x2_t v83;
  int32x2_t v84;
  int32x2_t v85;
  int16x4_t v86;
  int16x4_t v87;
  int32x2_t v88;
  int32x2_t v89;
  int32x2_t v90;
  int32x2_t v91;
  int32x2_t v92;
  int32x2_t v93;
  int32x2_t v94;
  int32x2_t v95;
  int32x2_t v96;
  int32x2_t v97;
  int16x4_t v98[33];

  v98[32] = *(int16x4_t *)MEMORY[0x1E0C80C00];
  v6 = -4;
  do
  {
    v7 = a2[1];
    v8 = a2[8];
    v9 = a2[9];
    v10 = a2[16];
    v11 = a2[17];
    v12 = a2[24];
    v13 = a2[25];
    v14 = a2[2];
    v15 = a2[3];
    v16 = a2[10];
    v17 = a2[11];
    v18 = a2[18];
    v19 = a2[19];
    v20 = a2[26];
    v21 = a2[27];
    v22 = a2[4];
    v23 = a2[5];
    v24 = a2[12];
    v25 = a2[13];
    v26 = a2[20];
    v27 = a2[21];
    v28 = (int32x2_t)vtrn1_s16(*a2, v8);
    v29 = (int32x2_t)vtrn2_s16(*a2, v8);
    v30 = (int32x2_t)vtrn1_s16(v10, v12);
    v32 = a2[28];
    v31 = a2[29];
    v33 = (int32x2_t)vtrn2_s16(v10, v12);
    v34 = vzip1_s32(v28, v30);
    v35 = vzip2_s32(v28, v30);
    v37 = a2[6];
    v36 = a2[7];
    v38 = vzip1_s32(v29, v33);
    v39 = vzip2_s32(v29, v33);
    v40 = (int32x2_t)vtrn1_s16(v7, v9);
    v41 = a2[14];
    v42 = a2[15];
    v43 = (int32x2_t)vtrn2_s16(v7, v9);
    v44 = (int32x2_t)vtrn1_s16(v11, v13);
    v45 = (int32x2_t)vtrn2_s16(v11, v13);
    v46 = a2[22];
    v47 = a2[23];
    v48 = vzip1_s32(v40, v44);
    v49 = vzip2_s32(v40, v44);
    v98[0] = (int16x4_t)v34;
    v50 = vzip1_s32(v43, v45);
    v51 = vzip2_s32(v43, v45);
    v52 = (int32x2_t)vtrn1_s16(v14, v16);
    v53 = (int32x2_t)vtrn2_s16(v14, v16);
    v54 = (int32x2_t)vtrn1_s16(v18, v20);
    v55 = (int32x2_t)vtrn2_s16(v18, v20);
    v56 = vzip1_s32(v52, v54);
    v57 = vzip2_s32(v52, v54);
    v58 = vzip1_s32(v53, v55);
    v59 = vzip2_s32(v53, v55);
    v60 = (int32x2_t)vtrn1_s16(v15, v17);
    v61 = (int32x2_t)vtrn2_s16(v15, v17);
    v62 = (int32x2_t)vtrn1_s16(v19, v21);
    v63 = (int32x2_t)vtrn2_s16(v19, v21);
    v64 = vzip1_s32(v60, v62);
    v65 = vzip2_s32(v60, v62);
    v66 = vzip1_s32(v61, v63);
    v67 = vzip2_s32(v61, v63);
    v68 = (int32x2_t)vtrn1_s16(v22, v24);
    v69 = (int32x2_t)vtrn2_s16(v22, v24);
    v70 = (int32x2_t)vtrn1_s16(v26, v32);
    v71 = (int32x2_t)vtrn2_s16(v26, v32);
    v72 = vzip1_s32(v68, v70);
    v73 = vzip2_s32(v68, v70);
    v74 = vzip1_s32(v69, v71);
    v75 = vzip2_s32(v69, v71);
    v76 = (int32x2_t)vtrn1_s16(v23, v25);
    v77 = (int32x2_t)vtrn2_s16(v23, v25);
    v78 = (int32x2_t)vtrn1_s16(v27, v31);
    v79 = (int32x2_t)vtrn2_s16(v27, v31);
    v80 = vzip1_s32(v76, v78);
    v81 = vzip2_s32(v76, v78);
    v82 = vzip1_s32(v77, v79);
    v83 = vzip2_s32(v77, v79);
    v84 = (int32x2_t)vtrn1_s16(v37, v41);
    v85 = (int32x2_t)vtrn2_s16(v37, v41);
    v86 = a2[30];
    v87 = a2[31];
    v98[1] = (int16x4_t)v39;
    v98[2] = (int16x4_t)v38;
    v88 = (int32x2_t)vtrn1_s16(v46, v86);
    v89 = (int32x2_t)vtrn2_s16(v46, v86);
    v90 = vzip1_s32(v84, v88);
    v91 = vzip2_s32(v84, v88);
    v98[3] = (int16x4_t)v35;
    v98[4] = (int16x4_t)v51;
    v92 = vzip1_s32(v85, v89);
    v93 = vzip2_s32(v85, v89);
    v98[5] = (int16x4_t)v48;
    v98[6] = (int16x4_t)v49;
    v94 = (int32x2_t)vtrn1_s16(v36, v42);
    v95 = (int32x2_t)vtrn2_s16(v36, v42);
    v96 = (int32x2_t)vtrn1_s16(v47, v87);
    v97 = (int32x2_t)vtrn2_s16(v47, v87);
    v98[7] = (int16x4_t)v50;
    v98[8] = (int16x4_t)v67;
    v98[9] = (int16x4_t)v64;
    v98[10] = (int16x4_t)v65;
    v98[11] = (int16x4_t)v66;
    v98[12] = (int16x4_t)v56;
    v98[13] = (int16x4_t)v59;
    v98[14] = (int16x4_t)v58;
    v98[15] = (int16x4_t)v57;
    v98[16] = (int16x4_t)vzip2_s32(v95, v97);
    v98[17] = (int16x4_t)vzip1_s32(v94, v96);
    v98[18] = (int16x4_t)vzip2_s32(v94, v96);
    v98[19] = (int16x4_t)vzip1_s32(v95, v97);
    v98[20] = (int16x4_t)v90;
    v98[21] = (int16x4_t)v93;
    v98[22] = (int16x4_t)v92;
    v98[23] = (int16x4_t)v91;
    v98[24] = (int16x4_t)v72;
    v98[25] = (int16x4_t)v75;
    v98[26] = (int16x4_t)v74;
    v98[27] = (int16x4_t)v73;
    v98[28] = (int16x4_t)v83;
    v98[29] = (int16x4_t)v80;
    v98[30] = (int16x4_t)v81;
    v98[31] = (int16x4_t)v82;
    sub_1B6889038(a1++, a3, v98);
    v6 += 4;
    a2 += 32;
  }
  while (v6 < 0x1C);
}

void sub_1B6888B94(int16x4_t *a1, int16x4_t *a2)
{
  unsigned int v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int32x2_t v46;
  int32x2_t v47;
  int32x2_t v48;
  int32x2_t v49;
  int32x2_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int32x2_t v55;
  int32x2_t v56;
  int16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v60;
  int32x2_t v61;
  int32x2_t v62;
  int32x2_t v63;
  int32x2_t v64;
  int32x2_t v65;
  int32x2_t v66;
  int32x2_t v67;
  int32x4_t v68[32];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = -4;
  do
  {
    v5 = a2[1];
    v6 = a2[8];
    v7 = a2[9];
    v8 = (int32x2_t)vtrn1_s16(*a2, v6);
    v9 = (int32x2_t)vtrn2_s16(*a2, v6);
    v10 = a2[16];
    v11 = a2[17];
    v12 = a2[24];
    v13 = a2[25];
    v14 = (int32x2_t)vtrn1_s16(v10, v12);
    v15 = (int32x2_t)vtrn2_s16(v10, v12);
    v16 = (int32x2_t)vtrn1_s16(v5, v7);
    v17 = (int32x2_t)vtrn2_s16(v5, v7);
    v18 = (int32x2_t)vtrn1_s16(v11, v13);
    v19 = (int32x2_t)vtrn2_s16(v11, v13);
    v20 = a2[2];
    v21 = a2[3];
    v22 = a2[10];
    v23 = a2[11];
    v24 = (int32x2_t)vtrn1_s16(v20, v22);
    v25 = (int32x2_t)vtrn2_s16(v20, v22);
    v26 = a2[18];
    v27 = a2[19];
    v28 = a2[26];
    v29 = a2[27];
    v30 = (int32x2_t)vtrn1_s16(v26, v28);
    v31 = (int32x2_t)vtrn2_s16(v26, v28);
    v32 = (int32x2_t)vtrn1_s16(v21, v23);
    v33 = (int32x2_t)vtrn2_s16(v21, v23);
    v34 = (int32x2_t)vtrn1_s16(v27, v29);
    v35 = (int32x2_t)vtrn2_s16(v27, v29);
    v36 = a2[4];
    v37 = a2[5];
    v38 = a2[12];
    v39 = a2[13];
    v40 = (int32x2_t)vtrn1_s16(v36, v38);
    v41 = (int32x2_t)vtrn2_s16(v36, v38);
    v42 = a2[20];
    v43 = a2[21];
    v44 = a2[28];
    v45 = a2[29];
    v46 = (int32x2_t)vtrn1_s16(v42, v44);
    v47 = (int32x2_t)vtrn2_s16(v42, v44);
    v67 = (int32x2_t)vtrn1_s16(v37, v39);
    v48 = (int32x2_t)vtrn2_s16(v37, v39);
    v49 = (int32x2_t)vtrn1_s16(v43, v45);
    v50 = (int32x2_t)vtrn2_s16(v43, v45);
    v51 = a2[6];
    v52 = a2[7];
    v53 = a2[14];
    v54 = a2[15];
    v55 = (int32x2_t)vtrn1_s16(v51, v53);
    v56 = (int32x2_t)vtrn2_s16(v51, v53);
    v57 = a2[22];
    v58 = a2[23];
    v60 = a2[30];
    v59 = a2[31];
    v61 = (int32x2_t)vtrn1_s16(v57, v60);
    v62 = (int32x2_t)vtrn2_s16(v57, v60);
    v63 = (int32x2_t)vtrn1_s16(v52, v54);
    v64 = (int32x2_t)vtrn2_s16(v52, v54);
    v65 = (int32x2_t)vtrn1_s16(v58, v59);
    v66 = (int32x2_t)vtrn2_s16(v58, v59);
    v68[0] = vmovl_s16((int16x4_t)vzip1_s32(v8, v14));
    v68[1] = vmovl_s16((int16x4_t)vzip2_s32(v9, v15));
    v68[2] = vmovl_s16((int16x4_t)vzip1_s32(v9, v15));
    v68[3] = vmovl_s16((int16x4_t)vzip2_s32(v8, v14));
    v68[4] = vmovl_s16((int16x4_t)vzip2_s32(v17, v19));
    v68[5] = vmovl_s16((int16x4_t)vzip1_s32(v16, v18));
    v68[6] = vmovl_s16((int16x4_t)vzip2_s32(v16, v18));
    v68[7] = vmovl_s16((int16x4_t)vzip1_s32(v17, v19));
    v68[8] = vmovl_s16((int16x4_t)vzip2_s32(v33, v35));
    v68[9] = vmovl_s16((int16x4_t)vzip1_s32(v32, v34));
    v68[10] = vmovl_s16((int16x4_t)vzip2_s32(v32, v34));
    v68[11] = vmovl_s16((int16x4_t)vzip1_s32(v33, v35));
    v68[12] = vmovl_s16((int16x4_t)vzip1_s32(v24, v30));
    v68[13] = vmovl_s16((int16x4_t)vzip2_s32(v25, v31));
    v68[14] = vmovl_s16((int16x4_t)vzip1_s32(v25, v31));
    v68[15] = vmovl_s16((int16x4_t)vzip2_s32(v24, v30));
    v68[16] = vmovl_s16((int16x4_t)vzip2_s32(v64, v66));
    v68[17] = vmovl_s16((int16x4_t)vzip1_s32(v63, v65));
    v68[18] = vmovl_s16((int16x4_t)vzip2_s32(v63, v65));
    v68[19] = vmovl_s16((int16x4_t)vzip1_s32(v64, v66));
    v68[20] = vmovl_s16((int16x4_t)vzip1_s32(v55, v61));
    v68[21] = vmovl_s16((int16x4_t)vzip2_s32(v56, v62));
    v68[22] = vmovl_s16((int16x4_t)vzip1_s32(v56, v62));
    v68[23] = vmovl_s16((int16x4_t)vzip2_s32(v55, v61));
    v68[24] = vmovl_s16((int16x4_t)vzip1_s32(v40, v46));
    v68[25] = vmovl_s16((int16x4_t)vzip2_s32(v41, v47));
    v68[26] = vmovl_s16((int16x4_t)vzip1_s32(v41, v47));
    v68[27] = vmovl_s16((int16x4_t)vzip2_s32(v40, v46));
    v68[28] = vmovl_s16((int16x4_t)vzip2_s32(v48, v50));
    v68[29] = vmovl_s16((int16x4_t)vzip1_s32(v67, v49));
    v68[30] = vmovl_s16((int16x4_t)vzip2_s32(v67, v49));
    v68[31] = vmovl_s16((int16x4_t)vzip1_s32(v48, v50));
    sub_1B6888E3C(a1++, v68);
    v4 += 4;
    a2 += 32;
  }
  while (v4 < 0x1C);
}

int16x4_t sub_1B6888E3C(int16x4_t *a1, int32x4_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int16x4_t *v65;
  uint64_t v66;
  int16x8_t v67;

  v2 = a2[16];
  v3 = a2[17];
  v4 = a2[18];
  v5 = a2[19];
  v6 = a2[20];
  v7 = a2[21];
  v8 = a2[22];
  v9 = a2[23];
  v10 = a2[24];
  v11 = a2[25];
  v12 = a2[26];
  v13 = a2[27];
  v14 = a2[28];
  v15 = a2[29];
  v16 = a2[30];
  v17 = a2[31];
  v18 = a2[1];
  v19 = vaddq_s32(*a2, v2);
  v20 = vsubq_s32(*a2, v2);
  v21 = vaddq_s32(v18, v3);
  v22 = vsubq_s32(v18, v3);
  *a2 = v19;
  a2[1] = v21;
  v23 = a2[2];
  v24 = a2[3];
  v25 = vaddq_s32(v23, v4);
  v26 = vsubq_s32(v23, v4);
  v27 = vaddq_s32(v24, v5);
  v28 = vsubq_s32(v24, v5);
  a2[2] = v25;
  a2[3] = v27;
  v29 = a2[4];
  v30 = a2[5];
  v31 = vaddq_s32(v29, v6);
  v32 = vsubq_s32(v29, v6);
  v33 = vaddq_s32(v30, v7);
  v34 = vsubq_s32(v30, v7);
  a2[4] = v31;
  a2[5] = v33;
  v35 = a2[6];
  v36 = a2[7];
  v37 = vaddq_s32(v35, v8);
  v38 = vsubq_s32(v35, v8);
  v39 = vaddq_s32(v36, v9);
  v40 = vsubq_s32(v36, v9);
  a2[6] = v37;
  a2[7] = v39;
  v41 = a2[8];
  v42 = a2[9];
  v43 = vaddq_s32(v41, v10);
  v44 = vsubq_s32(v41, v10);
  v45 = vaddq_s32(v42, v11);
  v46 = vsubq_s32(v42, v11);
  a2[8] = v43;
  a2[9] = v45;
  v47 = a2[10];
  v48 = a2[11];
  v49 = vaddq_s32(v47, v12);
  v50 = vsubq_s32(v47, v12);
  v51 = vaddq_s32(v48, v13);
  v52 = vsubq_s32(v48, v13);
  a2[10] = v49;
  a2[11] = v51;
  v53 = a2[12];
  v54 = a2[13];
  v55 = vaddq_s32(v53, v14);
  v56 = vsubq_s32(v53, v14);
  v57 = vaddq_s32(v54, v15);
  v58 = vsubq_s32(v54, v15);
  a2[12] = v55;
  a2[13] = v57;
  v59 = a2[14];
  v60 = a2[15];
  v61 = vaddq_s32(v59, v16);
  v62 = vsubq_s32(v59, v16);
  v63 = vaddq_s32(v60, v17);
  v64 = vsubq_s32(v60, v17);
  v65 = (int16x4_t *)&unk_1B692B7D0;
  v66 = 8;
  a2[14] = v61;
  a2[15] = v63;
  do
  {
    v67 = *(int16x8_t *)v65[-2].i8;
    a1[v66] = vqmovn_s32(vrshrq_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vmovl_s16(vdup_lane_s16(*(int16x4_t *)v67.i8, 1)), v22), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v67.i8, 0)), v20),
                                              vmovl_s16(vdup_lane_s16(*(int16x4_t *)v67.i8, 2)),
                                              v26),
                                            vmovl_s16(vdup_lane_s16(*(int16x4_t *)v67.i8, 3)),
                                            v28),
                                          vmovl_s16(vdup_laneq_s16(v67, 4)),
                                          v32),
                                        vmovl_s16(vdup_laneq_s16(v67, 5)),
                                        v34),
                                      vmovl_s16(vdup_laneq_s16(v67, 6)),
                                      v38),
                                    vmovl_s16(vdup_laneq_s16(v67, 7)),
                                    v40),
                                  vmovl_s16(vdup_lane_s16(*v65, 1)),
                                  v46),
                                vmovl_s16(vdup_lane_s16(*v65, 0)),
                                v44),
                              vmovl_s16(vdup_lane_s16(*v65, 2)),
                              v50),
                            vmovl_s16(vdup_lane_s16(*v65, 3)),
                            v52),
                          vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v65->i8, 4)),
                          v56),
                        vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v65->i8, 5)),
                        v58),
                      vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v65->i8, 6)),
                      v62),
                    vmovl_s16(vdup_laneq_s16(*(int16x8_t *)v65->i8, 7)),
                    v64),
                  0xBuLL));
    v66 += 16;
    v65 += 4;
  }
  while (v66 != 264);
  return sub_1B6888244(a1, 64, 11, a2);
}

int16x4_t sub_1B6889038(int16x4_t *a1, int a2, int16x4_t *a3)
{
  int16x4_t v3;
  int16x4_t v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int16x4_t v56;
  int16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v60;
  int16x4_t v61;
  int16x4_t v62;
  int16x4_t v63;
  int16x4_t v64;
  int32x4_t v65;
  int16x4_t v66;
  int16x4_t *v67;
  uint64_t v68;
  int16x8_t v69;

  v3 = a3[16];
  v4 = a3[17];
  v5 = a3[18];
  v6 = a3[19];
  v7 = a3[20];
  v8 = a3[21];
  v9 = a3[22];
  v10 = a3[23];
  v11 = a3[24];
  v12 = a3[25];
  v13 = a3[26];
  v14 = a3[27];
  v15 = a3[28];
  v16 = a3[29];
  v18 = a3[30];
  v17 = a3[31];
  v19 = a3[1];
  v20 = vadd_s16(*a3, v3);
  v21 = vsub_s16(*a3, v3);
  v22 = vadd_s16(v19, v4);
  v23 = vsub_s16(v19, v4);
  *a3 = v20;
  a3[1] = v22;
  v24 = a3[2];
  v25 = a3[3];
  v26 = vadd_s16(v24, v5);
  v27 = vsub_s16(v24, v5);
  v28 = vadd_s16(v25, v6);
  v29 = vsub_s16(v25, v6);
  a3[2] = v26;
  a3[3] = v28;
  v30 = a3[4];
  v31 = a3[5];
  v32 = vadd_s16(v30, v7);
  v33 = vsub_s16(v30, v7);
  v34 = vadd_s16(v31, v8);
  v35 = vsub_s16(v31, v8);
  a3[4] = v32;
  a3[5] = v34;
  v36 = a3[6];
  v37 = a3[7];
  v38 = vadd_s16(v36, v9);
  v39 = vsub_s16(v36, v9);
  v40 = vadd_s16(v37, v10);
  v41 = vsub_s16(v37, v10);
  a3[6] = v38;
  a3[7] = v40;
  v42 = a3[8];
  v43 = a3[9];
  v44 = vadd_s16(v42, v11);
  v45 = vsub_s16(v42, v11);
  v46 = vadd_s16(v43, v12);
  v47 = vsub_s16(v43, v12);
  a3[8] = v44;
  a3[9] = v46;
  v48 = a3[10];
  v49 = a3[11];
  v50 = vadd_s16(v48, v13);
  v51 = vsub_s16(v48, v13);
  v52 = vadd_s16(v49, v14);
  v53 = vsub_s16(v49, v14);
  a3[10] = v50;
  a3[11] = v52;
  v54 = a3[12];
  v55 = a3[13];
  v56 = vadd_s16(v54, v15);
  v57 = vsub_s16(v54, v15);
  v58 = vadd_s16(v55, v16);
  v59 = vsub_s16(v55, v16);
  a3[12] = v56;
  a3[13] = v58;
  v60 = a3[14];
  v61 = a3[15];
  v62 = vadd_s16(v60, v18);
  v63 = vsub_s16(v60, v18);
  v64 = vadd_s16(v61, v17);
  v65 = vdupq_n_s32(-a2);
  v66 = vsub_s16(v61, v17);
  v67 = (int16x4_t *)&unk_1B692B7D0;
  v68 = 8;
  a3[14] = v62;
  a3[15] = v64;
  do
  {
    v69 = *(int16x8_t *)v67[-2].i8;
    a1[v68] = vqmovn_s32(vrshlq_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v23, *(int16x4_t *)v69.i8, 1), v21, *(int16x4_t *)v69.i8,
                                                0),
                                              v27,
                                              *(int16x4_t *)v69.i8,
                                              2),
                                            v29,
                                            *(int16x4_t *)v69.i8,
                                            3),
                                          v33,
                                          v69,
                                          4),
                                        v35,
                                        v69,
                                        5),
                                      v39,
                                      v69,
                                      6),
                                    v41,
                                    v69,
                                    7),
                                  v45,
                                  *v67,
                                  0),
                                v47,
                                *v67,
                                1),
                              v51,
                              *v67,
                              2),
                            v53,
                            *v67,
                            3),
                          v57,
                          *(int16x8_t *)v67->i8,
                          4),
                        v59,
                        *(int16x8_t *)v67->i8,
                        5),
                      v63,
                      *(int16x8_t *)v67->i8,
                      6),
                    v66,
                    *(int16x8_t *)v67->i8,
                    7),
                  v65));
    v68 += 16;
    v67 += 4;
  }
  while (v68 != 264);
  return sub_1B688852C(a1, 64, a2, a3);
}

int16x4_t sub_1B68891A4(int16x4_t *a1, int a2, int8x16_t a3, int8x16_t a4)
{
  int16x4_t v4;
  int32x2_t v5;
  int32x2_t v6;
  int16x4_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x4_t result;

  v4 = (int16x4_t)vextq_s8(a3, a3, 8uLL).u64[0];
  v5 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a3.i8, v4);
  v6 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a3.i8, v4);
  v7 = (int16x4_t)vextq_s8(a4, a4, 8uLL).u64[0];
  v8 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a4.i8, v7);
  v9 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a4.i8, v7);
  v10 = (int16x4_t)vzip1_s32(v5, v8);
  v11 = (int16x4_t)vzip2_s32(v6, v9);
  v12 = vadd_s16(v10, v11);
  v13 = (int16x4_t)vzip1_s32(v6, v9);
  v14 = vadd_s16(v13, v11);
  v15 = vsub_s16(v10, v13);
  v16 = (int16x4_t)vzip2_s32(v5, v8);
  v17 = vmlal_s16(vmlal_s16(vmull_s16(v12, (int16x4_t)0x1D001D001D001DLL), v16, (int16x4_t)0x4A004A004A004ALL), v14, (int16x4_t)0x37003700370037);
  v18 = vmlal_s16(vmlsl_s16(vmull_s16(v12, (int16x4_t)0x37003700370037), v16, (int16x4_t)0x4A004A004A004ALL), v15, (int16x4_t)0x1D001D001D001DLL);
  v19 = vmlsl_s16(vmlal_s16(vmull_s16(v15, (int16x4_t)0x37003700370037), v16, (int16x4_t)0x4A004A004A004ALL), v14, (int16x4_t)0x1D001D001D001DLL);
  v20 = vdupq_n_s32(-a2);
  *a1 = vqmovn_s32(vrshlq_s32(v17, v20));
  a1[1] = vqmovn_s32(vrshlq_s32(vmull_s16(vsub_s16(vadd_s16(v10, v13), v11), (int16x4_t)0x4A004A004A004ALL), v20));
  result = vqmovn_s32(vrshlq_s32(v19, v20));
  a1[2] = vqmovn_s32(vrshlq_s32(v18, v20));
  a1[3] = result;
  return result;
}

int16x4_t sub_1B6889248(int16x4_t *a1, int8x16_t a2, int8x16_t a3)
{
  int16x4_t v3;
  int32x2_t v4;
  int32x2_t v5;
  int16x4_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int16x4_t result;

  v3 = (int16x4_t)vextq_s8(a2, a2, 8uLL).u64[0];
  v4 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a2.i8, v3);
  v5 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a2.i8, v3);
  v6 = (int16x4_t)vextq_s8(a3, a3, 8uLL).u64[0];
  v7 = (int32x2_t)vtrn1_s16(*(int16x4_t *)a3.i8, v6);
  v8 = (int32x2_t)vtrn2_s16(*(int16x4_t *)a3.i8, v6);
  v9 = (int16x4_t)vzip1_s32(v4, v7);
  v10 = (int16x4_t)vzip1_s32(v5, v8);
  v11 = (int16x4_t)vzip2_s32(v4, v7);
  v12 = (int16x4_t)vzip2_s32(v5, v8);
  v13 = vaddl_s16(v9, v12);
  v14 = vaddl_s16(v10, v12);
  v15 = vsubl_s16(v9, v10);
  v16.i64[0] = 0x4A0000004ALL;
  v16.i64[1] = 0x4A0000004ALL;
  v17.i64[0] = 0x1D0000001DLL;
  v17.i64[1] = 0x1D0000001DLL;
  v18.i64[0] = 0x3700000037;
  v18.i64[1] = 0x3700000037;
  v19 = vmlaq_s32(vmlal_s16(vmulq_s32(v14, v18), v11, (int16x4_t)0x4A004A004A004ALL), v13, v17);
  v20 = vmlaq_s32(vmlsl_s16(vmulq_s32(v15, v17), v11, (int16x4_t)0x4A004A004A004ALL), v13, v18);
  v21 = vmulq_s32(v15, v18);
  v15.i64[0] = 0x1C0000001CLL;
  v15.i64[1] = 0x1C0000001CLL;
  *a1 = vqmovn_s32(vrshrq_n_s32(v19, 8uLL));
  a1[1] = vqmovn_s32(vrshrq_n_s32(vmulq_s32(vsubw_s16(vaddl_s16(v9, v10), v12), v16), 8uLL));
  result = vqmovn_s32(vrshrq_n_s32(vmlaq_s32(vmlal_s16(v21, v11, (int16x4_t)0x4A004A004A004ALL), v14, v15), 8uLL));
  a1[2] = vqmovn_s32(vrshrq_n_s32(v20, 8uLL));
  a1[3] = result;
  return result;
}

void sub_1B68892EC(uint64_t *a1, int *a2, uint64_t *a3, int *a4, signed int a5, int a6, int a7, int a8, int a9, signed int a10)
{
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  double v27;
  int v28;
  int v29;
  int32x4_t v30;
  unsigned int v31;
  int8x8_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  signed int v39;
  int v40;
  __int128 v41;
  int v42;
  int v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  signed int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  signed int v60;
  uint64_t j;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  int v66;
  char v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  char v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  signed int v81;
  int v82;
  signed int v83;
  _BYTE *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unsigned int *v94;
  unsigned int *v95;
  _BYTE *v96;
  unsigned int *v97;
  unsigned int *v98;
  _BYTE *v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  int v107;
  signed int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  int v115;
  signed int v116;
  char v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  char v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  char v129;
  char v130;
  int v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  int v137;
  signed int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  __int128 v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int *v153;
  unsigned int *v154;
  _BYTE *v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  signed int v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  int v170;
  signed int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t k;
  uint64_t v177;
  int v178;
  int v179;
  char v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  char v184;
  char v185;
  int v186;
  BOOL v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  int v192;
  signed int v193;
  int v195;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int32x4_t v237;
  int32x4_t v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;

  v243 = *MEMORY[0x1E0C80C00];
  v204 = (a9 + 31) >> 5;
  v199 = a8 + 31;
  v195 = a8 + 7;
  v11 = (a8 + 7) >> 5;
  v12 = (a9 + 7) >> 5;
  v202 = *a4;
  v200 = 4 * v202;
  v235 = *a2;
  v201 = 4 * v235;
  v236 = a2[1];
  v203 = 2 * v236;
  v209 = a2[2];
  v224 = a6 >> 5;
  v197 = 2 * (a6 >> 5);
  v198 = 4 * (a6 >> 5);
  v208 = a7 >> 5;
  v212 = v11;
  v210 = v12;
  if (a7 >> 5 < v12)
  {
    v13 = a7 >> 5;
    v223 = (int)v198 + v201 * v208;
    v222 = (int)v197 + v203 * v208;
    v221 = v224 + (int)v209 * v208;
    v14 = 4 * ((int)v198 + v200 * v208);
    v219 = 12 * (_DWORD)v202 + v14;
    v220 = v14;
    v207 = 4 * v200;
    v218 = 8 * v202 + v14;
    v217 = 4 * v202 + v14;
    v216 = 3 * v235 + v223;
    v215 = 2 * v235 + v223;
    v214 = v235 + v223;
    v15 = v11 - v224;
    v213 = v236 + v222;
    do
    {
      v211 = v13;
      if (v11 > v224)
      {
        v16 = 0;
        v17 = a1[1];
        v234 = *a3 + v219;
        v233 = *a3 + v218;
        v231 = *a3 + v217;
        v229 = *a3 + v220;
        v227 = *a1 + v216;
        v225 = *a1 + v215;
        v18 = *a1 + v214;
        v19 = *a1 + v223;
        v20 = v17 + v213;
        v21 = v17 + v222;
        v22 = a1[2] + v221;
        do
        {
          v23 = *(int32x4_t *)(v229 + 16 * v16);
          v24 = *(int32x4_t *)(v231 + 16 * v16);
          v25 = *(int32x4_t *)(v233 + 16 * v16);
          v26 = *(int32x4_t *)(v234 + 16 * v16);
          v237 = vaddq_s32(v26, v25);
          v238 = vaddq_s32(v24, v23);
          v27 = sub_1B688A0F8(a5, a10, (uint16x8_t)vuzp1q_s16((int16x8_t)v23, (int16x8_t)v24), (uint16x8_t)vuzp1q_s16((int16x8_t)v25, (int16x8_t)v26));
          *(_DWORD *)(v19 + 4 * v16) = LODWORD(v27);
          *(_DWORD *)(v18 + 4 * v16) = HIDWORD(v27);
          *(_DWORD *)(v225 + 4 * v16) = v28;
          *(_DWORD *)(v227 + 4 * v16) = v29;
          v30 = vpaddq_s32(v238, v237);
          v31 = (vaddvq_s32(v30) + 8) >> 4;
          *(int16x4_t *)v30.i8 = vmovn_s32((int32x4_t)vrshrq_n_u32((uint32x4_t)v30, 2uLL));
          v30.u64[1] = (unint64_t)vdup_n_s16(v31);
          v32 = sub_1B688A394(a5, a10, (uint16x8_t)v30);
          *(_WORD *)(v21 + 2 * v16) = v32.i16[0];
          *(_WORD *)(v20 + 2 * v16) = v32.i16[1];
          *(_BYTE *)(v22 + v16++) = v32.i8[4];
        }
        while (v15 != (_DWORD)v16);
      }
      v223 += v201;
      v222 += v203;
      v221 += v209;
      v13 = v211 + 1;
      v219 += v207;
      v218 += v207;
      v217 += v207;
      v220 += v207;
      v216 += v201;
      v215 += v201;
      v214 += v201;
      v11 = v212;
      v213 += v203;
      v12 = v210;
    }
    while (v211 + 1 != v210);
  }
  v232 = (a9 + 15) >> 4;
  v230 = (a9 + 7) >> 3;
  if (v12 != v204 && v11 > v224)
  {
    v33 = (_BYTE *)(a1[2] + (int)v209 * (uint64_t)v210 + ((uint64_t)a6 >> 5));
    v34 = a1[1] + v203 * (uint64_t)v210 + v197;
    v35 = *a3 + 4 * v200 * v210 + 4 * v198;
    v36 = v230 - 4 * v210;
    v37 = (v232 - 2 * v210);
    v38 = *a1 + v201 * (uint64_t)v210 + v198;
    v39 = a10 << 8;
    v40 = -a10;
    *(_QWORD *)&v41 = -1;
    *((_QWORD *)&v41 + 1) = -1;
    do
    {
      v241 = v41;
      v242 = v41;
      v239 = v41;
      v240 = v41;
      if (v36 < 1)
      {
        v43 = 0;
      }
      else
      {
        v42 = 0;
        v43 = 0;
        v44 = &v239;
        v45 = v35;
        v46 = v38;
        do
        {
          for (i = 0; i != 4; ++i)
          {
            v48 = *(_DWORD *)(v45 + 4 * i);
            *((_DWORD *)v44 + i) = v48;
            v49 = v48;
            if (v48 >= 2)
            {
              v50 = __clz(v48);
              if ((v50 & 1) != 0)
                v51 = ((byte_1B69327A4[(unint64_t)(v48 << (v50 + 1)) >> 24] << 12) | 0x200000u) >> ((v50 + 1) >> 1);
              else
                v51 = (11585
                     * (((byte_1B69327A4[(unint64_t)(v48 << (v50 + 1)) >> 24] << 12) | 0x200000u) >> ((v50 + 1) >> 1))) >> 14;
              v49 = (v51 + 16) >> 5;
            }
            v52 = (int)((v49 - a5) * v39) / a5;
            v53 = (v52 > 0) | (v52 >> 31);
            if (v52 < 0)
              v52 = -v52;
            v54 = v53 * ((v52 + 128) >> 8);
            if (v54 >= a10)
              v54 = a10;
            if (v54 <= v40)
              LOBYTE(v54) = -(char)a10;
            *(_BYTE *)(v46 + i) = v54;
            v43 += v48;
          }
          ++v42;
          v46 += v235;
          ++v44;
          v45 += 4 * v202;
        }
        while (v42 != v36);
      }
      v55 = (v43 + 2 * v36) / (4 * v36);
      if (v55 >= 2)
      {
        v56 = __clz(v55);
        v57 = ((byte_1B69327A4[(unint64_t)(v55 << (v56 + 1)) >> 24] << 12) | 0x200000u) >> ((v56 + 1) >> 1);
        if ((v56 & 1) == 0)
          v57 = (11585 * v57) >> 14;
        v55 = (v57 + 16) >> 5;
      }
      v58 = (int)((v55 - a5) * v39) / a5;
      v59 = (v58 > 0) | (v58 >> 31);
      if (v58 < 0)
        v58 = -v58;
      v60 = v59 * ((v58 + 128) >> 8);
      if (v60 >= a10)
        v60 = a10;
      if (v60 <= v40)
        LOBYTE(v60) = -(char)a10;
      *v33 = v60;
      if ((int)v37 >= 1)
      {
        for (j = 0; j != v37; ++j)
        {
          v62 = 0;
          v63 = 1;
          do
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            v67 = v63;
            v68 = 1;
            do
            {
              v69 = 0;
              v70 = v68;
              v71 = v64 | (8 * j) | (2 * v62);
              v72 = 1;
              do
              {
                v73 = v72;
                v74 = *((_DWORD *)&v239 + (v69 | v71));
                v75 = v74 == -1;
                if (v74 == -1)
                  v74 = 0;
                v66 += v74;
                if (!v75)
                  ++v65;
                v69 = 1;
                v72 = 0;
              }
              while ((v73 & 1) != 0);
              v68 = 0;
              v64 = 4;
            }
            while ((v70 & 1) != 0);
            v76 = (v66 + (v65 >> 1)) / v65;
            if (v76 >= 2)
            {
              v77 = __clz(v76);
              v78 = ((byte_1B69327A4[(unint64_t)(v76 << (v77 + 1)) >> 24] << 12) | 0x200000u) >> ((v77 + 1) >> 1);
              if ((v77 & 1) == 0)
                v78 = (11585 * v78) >> 14;
              v76 = (v78 + 16) >> 5;
            }
            v63 = 0;
            v79 = (int)((v76 - a5) * v39) / a5;
            v80 = (v79 > 0) | (v79 >> 31);
            if (v79 < 0)
              v79 = -v79;
            v81 = v80 * ((v79 + 128) >> 8);
            if (v81 >= a10)
              v81 = a10;
            if (v81 <= v40)
              LOBYTE(v81) = -(char)a10;
            *(_BYTE *)(v34 + j * v236 + v62) = v81;
            v62 = 1;
          }
          while ((v67 & 1) != 0);
        }
      }
      v35 += 16;
      v38 += 4;
      v34 += 2;
      ++v33;
      v11 = v212;
      ++v224;
    }
    while (v224 != v212);
  }
  v82 = v210;
  if (v11 != v199 >> 5)
  {
    v226 = (a8 + 15) >> 4;
    v228 = v195 >> 3;
    v83 = a10 << 8;
    if (v208 < v210)
    {
      v84 = (_BYTE *)(a1[2] + v212);
      v85 = a1[1] + 2 * v212;
      v86 = v228 - 4 * v212;
      v87 = (v226 - 2 * v212);
      v88 = -a10;
      *(_QWORD *)&v89 = -1;
      *((_QWORD *)&v89 + 1) = -1;
      v90 = *a1 + 4 * v212;
      v91 = *a3 + 16 * v212;
      do
      {
        v92 = 0;
        v93 = 0;
        v241 = v89;
        v242 = v89;
        v94 = (unsigned int *)&v239;
        v95 = (unsigned int *)v91;
        v96 = (_BYTE *)v90;
        v239 = v89;
        v240 = v89;
        do
        {
          v97 = v95;
          v98 = v94;
          v99 = v96;
          v100 = (v228 - 4 * v212);
          if (v86 >= 1)
          {
            do
            {
              v102 = *v97++;
              v101 = v102;
              *v98 = v102;
              v103 = v102;
              if (v102 >= 2)
              {
                v104 = __clz(v101);
                if ((v104 & 1) != 0)
                  v105 = ((byte_1B69327A4[(unint64_t)(v101 << (v104 + 1)) >> 24] << 12) | 0x200000u) >> ((v104 + 1) >> 1);
                else
                  v105 = (11585
                        * (((byte_1B69327A4[(unint64_t)(v101 << (v104 + 1)) >> 24] << 12) | 0x200000u) >> ((v104 + 1) >> 1))) >> 14;
                v103 = (v105 + 16) >> 5;
              }
              v106 = (int)((v103 - a5) * v83) / a5;
              v107 = (v106 > 0) | (v106 >> 31);
              if (v106 < 0)
                v106 = -v106;
              v108 = v107 * ((v106 + 128) >> 8);
              if (v108 >= a10)
                v108 = a10;
              if (v108 <= v88)
                LOBYTE(v108) = -(char)a10;
              *v99++ = v108;
              v93 += v101;
              ++v98;
              --v100;
            }
            while (v100);
          }
          ++v92;
          v96 += v235;
          v94 += 4;
          v95 += v202;
        }
        while (v92 != 4);
        v109 = (v93 + 2 * v86) / (4 * v86);
        if (v109 >= 2)
        {
          v110 = __clz(v109);
          v111 = ((byte_1B69327A4[(unint64_t)(v109 << (v110 + 1)) >> 24] << 12) | 0x200000u) >> ((v110 + 1) >> 1);
          if ((v110 & 1) != 0)
            v112 = v111;
          else
            v112 = (11585 * v111) >> 14;
          v109 = (v112 + 16) >> 5;
        }
        v113 = 0;
        v114 = (int)((v109 - a5) * v83) / a5;
        v115 = (v114 > 0) | (v114 >> 31);
        if (v114 < 0)
          v114 = -v114;
        v116 = v115 * ((v114 + 128) >> 8);
        if (v116 >= a10)
          v116 = a10;
        if (v116 <= v88)
          LOBYTE(v116) = -(char)a10;
        *v84 = v116;
        v117 = 1;
        do
        {
          v118 = v117;
          if ((int)v87 >= 1)
          {
            v119 = 0;
            v120 = 8 * v113;
            v121 = v85 + v113 * v236;
            do
            {
              v122 = 0;
              v123 = 0;
              v124 = 0;
              v125 = 1;
              do
              {
                v126 = 0;
                v127 = v125;
                v128 = v120 + 2 * v119 + v122;
                v129 = 1;
                do
                {
                  v130 = v129;
                  v131 = *((_DWORD *)&v239 + (v126 | v128));
                  v132 = v131 == -1;
                  if (v131 == -1)
                    v131 = 0;
                  v124 += v131;
                  if (!v132)
                    ++v123;
                  v126 = 1;
                  v129 = 0;
                }
                while ((v130 & 1) != 0);
                v125 = 0;
                v122 = 4;
              }
              while ((v127 & 1) != 0);
              v133 = (v124 + (v123 >> 1)) / v123;
              if (v133 >= 2)
              {
                v134 = __clz(v133);
                v135 = ((byte_1B69327A4[(unint64_t)(v133 << (v134 + 1)) >> 24] << 12) | 0x200000u) >> ((v134 + 1) >> 1);
                if ((v134 & 1) == 0)
                  v135 = (11585 * v135) >> 14;
                v133 = (v135 + 16) >> 5;
              }
              v136 = (int)((v133 - a5) * v83) / a5;
              v137 = (v136 > 0) | (v136 >> 31);
              if (v136 < 0)
                v136 = -v136;
              v138 = v137 * ((v136 + 128) >> 8);
              if (v138 >= a10)
                v138 = a10;
              if (v138 <= v88)
                LOBYTE(v138) = -(char)a10;
              *(_BYTE *)(v121 + v119++) = v138;
            }
            while (v119 != v87);
          }
          v117 = 0;
          v113 = 1;
        }
        while ((v118 & 1) != 0);
        v90 += v201;
        v85 += v203;
        v84 += v209;
        v91 += 4 * v200;
        v82 = v210;
        ++v208;
      }
      while (v208 != v210);
    }
    if (v82 != v204)
    {
      v139 = *a3;
      v140 = *a1;
      v141 = a1[1];
      v142 = a1[2];
      v143 = v230 - 4 * v82;
      *(_QWORD *)&v144 = -1;
      *((_QWORD *)&v144 + 1) = -1;
      v241 = v144;
      v242 = v144;
      v239 = v144;
      v240 = v144;
      v145 = v142 + (int)v209 * (uint64_t)v82;
      v146 = v228 - 4 * v212;
      v147 = v143 * v146;
      if (v143 < 1)
      {
        v149 = 0;
      }
      else
      {
        v148 = 0;
        v149 = 0;
        v150 = v139 + 4 * v200 * v82 + 16 * v212;
        v151 = v140 + v201 * (uint64_t)v82 + 4 * v212;
        v152 = (unsigned int *)&v239;
        do
        {
          v153 = (unsigned int *)v150;
          v154 = v152;
          v155 = (_BYTE *)v151;
          v156 = (v228 - 4 * v212);
          if (v146 >= 1)
          {
            do
            {
              v158 = *v153++;
              v157 = v158;
              *v154 = v158;
              v159 = v158;
              if (v158 >= 2)
              {
                v160 = __clz(v157);
                if ((v160 & 1) != 0)
                  v161 = ((byte_1B69327A4[(unint64_t)(v157 << (v160 + 1)) >> 24] << 12) | 0x200000u) >> ((v160 + 1) >> 1);
                else
                  v161 = (11585
                        * (((byte_1B69327A4[(unint64_t)(v157 << (v160 + 1)) >> 24] << 12) | 0x200000u) >> ((v160 + 1) >> 1))) >> 14;
                v159 = (v161 + 16) >> 5;
              }
              v162 = (int)(v83 * (v159 - a5)) / a5;
              v163 = (v162 > 0) | (v162 >> 31);
              if (v162 < 0)
                v162 = -v162;
              v164 = v163 * ((v162 + 128) >> 8);
              if (v164 >= a10)
                v164 = a10;
              if (v164 <= -a10)
                LOBYTE(v164) = -(char)a10;
              *v155++ = v164;
              v149 += v157;
              ++v154;
              --v156;
            }
            while (v156);
          }
          ++v148;
          v151 += v235;
          v152 += 4;
          v150 += 4 * v202;
        }
        while (v148 != v143);
      }
      v165 = (v232 - 2 * v210);
      v166 = (v149 + (v147 >> 1)) / v147;
      if (v166 >= 2)
      {
        v167 = __clz(v166);
        v168 = ((byte_1B69327A4[(unint64_t)(v166 << (v167 + 1)) >> 24] << 12) | 0x200000u) >> ((v167 + 1) >> 1);
        if ((v167 & 1) == 0)
          v168 = (11585 * v168) >> 14;
        v166 = (v168 + 16) >> 5;
      }
      v169 = (int)((v166 - a5) * v83) / a5;
      v170 = (v169 > 0) | (v169 >> 31);
      if (v169 < 0)
        v169 = -v169;
      v171 = v170 * ((v169 + 128) >> 8);
      v172 = -a10;
      if (v171 >= a10)
        v171 = a10;
      if (v171 <= v172)
        v171 = -a10;
      *(_BYTE *)(v145 + v212) = v171;
      if ((int)v165 >= 1)
      {
        v173 = 0;
        v174 = v141 + v203 * (uint64_t)v210 + 2 * v212;
        v175 = (v226 - 2 * v212);
        do
        {
          if ((int)v175 >= 1)
          {
            for (k = 0; k != v175; ++k)
            {
              v177 = 0;
              v178 = 0;
              v179 = 0;
              v180 = 1;
              do
              {
                v181 = 0;
                v182 = v180;
                v183 = ((v173 << 35) + (k << 33) + v177) >> 32;
                v184 = 1;
                do
                {
                  v185 = v184;
                  v186 = *((_DWORD *)&v239 + (v181 | v183));
                  v187 = v186 == -1;
                  if (v186 == -1)
                    v186 = 0;
                  v179 += v186;
                  if (!v187)
                    ++v178;
                  v181 = 1;
                  v184 = 0;
                }
                while ((v185 & 1) != 0);
                v180 = 0;
                v177 = 0x400000000;
              }
              while ((v182 & 1) != 0);
              v188 = (v179 + (v178 >> 1)) / v178;
              if (v188 >= 2)
              {
                v189 = __clz(v188);
                v190 = ((byte_1B69327A4[(unint64_t)(v188 << (v189 + 1)) >> 24] << 12) | 0x200000u) >> ((v189 + 1) >> 1);
                if ((v189 & 1) == 0)
                  v190 = (11585 * v190) >> 14;
                v188 = (v190 + 16) >> 5;
              }
              v191 = (int)((v188 - a5) * v83) / a5;
              v192 = (v191 > 0) | (v191 >> 31);
              if (v191 < 0)
                v191 = -v191;
              v193 = v192 * ((v191 + 128) >> 8);
              if (v193 >= a10)
                v193 = a10;
              if (v193 <= v172)
                LOBYTE(v193) = -(char)a10;
              *(_BYTE *)(v174 + v173 * v236 + k) = v193;
            }
          }
          ++v173;
        }
        while (v173 != v165);
      }
    }
  }
}

double sub_1B688A0F8(unsigned int a1, unsigned int a2, uint16x8_t a3, uint16x8_t a4)
{
  uint16x8_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int8x16_t v9;
  uint8x16_t v10;
  unsigned __int128 v11;
  unsigned __int128 v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  double result;
  int8x16x4_t v41;

  v4.i64[0] = 0x1000100010001;
  v4.i64[1] = 0x1000100010001;
  v5 = (int8x16_t)vcgtq_u16(a3, v4);
  v6 = (int8x16_t)vcgtq_u16(a4, v4);
  v7 = vclzq_s16((int16x8_t)a3);
  v8 = vclzq_s16((int16x8_t)a4);
  v9.i64[0] = 0x4040404040404040;
  v9.i64[1] = 0x4040404040404040;
  v41.val[3] = (int8x16_t)xmmword_1B6917B30;
  v41.val[2] = (int8x16_t)xmmword_1B6917B40;
  v41.val[1] = (int8x16_t)xmmword_1B6917B50;
  v41.val[0] = (int8x16_t)xmmword_1B6917B60;
  v10 = (uint8x16_t)vqtbx4q_s8(v41, vaddq_s8(vuzp1q_s8((int8x16_t)vshrq_n_u16(vshlq_u16(a3, (uint16x8_t)vaddq_s16(v7, (int16x8_t)v4)), 8uLL), (int8x16_t)vshrq_n_u16(vshlq_u16(a4, (uint16x8_t)vaddq_s16(v8, (int16x8_t)v4)), 8uLL)), v9));
  v11 = *(_OWORD *)&vmovl_u8(*(uint8x8_t *)v10.i8) | __PAIR128__(0x200020002000200, 0x200020002000200);
  v12 = *(_OWORD *)&vmovl_high_u8(v10) | __PAIR128__(0x200020002000200, 0x200020002000200);
  v13 = vmovl_u8(vhadd_u8((uint8x8_t)vmovn_s16(v7), (uint8x8_t)0x1111111111111111));
  v14 = vmovl_u8(vhadd_u8((uint8x8_t)vmovn_s16(v8), (uint8x8_t)0x1111111111111111));
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v41.val[0] = (int8x16_t)vdupq_n_s16(0x2D41u);
  v15 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s16((int16x8_t)(*(_OWORD *)&v7 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), (int16x8_t)v9), v41.val[0]), (int8x16_t)vshlq_n_s16((int16x8_t)(*(_OWORD *)&v7 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), 0xEuLL));
  v16 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s16((int16x8_t)(*(_OWORD *)&v8 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), (int16x8_t)v9), v41.val[0]), (int8x16_t)vshlq_n_s16((int16x8_t)(*(_OWORD *)&v8 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), 0xEuLL));
  v17 = (int16x8_t)vbslq_s8(v5, (int8x16_t)vuzp1q_s16((int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_n_u16(*(uint16x4_t *)&v11, 0xCuLL), (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v13.i8))), (int32x4_t)vmovl_u16(*(uint16x4_t *)v15.i8)), 0xEuLL), 5uLL), (int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_high_n_u16((uint16x8_t)v11, 0xCuLL), vsubw_high_u16((uint32x4_t)0, v13)), (int32x4_t)vmovl_high_u16(v15)), 0xEuLL),
                                               5uLL)),
                     (int8x16_t)a3);
  v18 = vdupq_n_s16(a1);
  v19 = vsubq_s16(v17, v18);
  v20 = vsubq_s16((int16x8_t)vbslq_s8(v6, (int8x16_t)vuzp1q_s16((int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_n_u16(*(uint16x4_t *)&v12, 0xCuLL), (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v14.i8))), (int32x4_t)vmovl_u16(*(uint16x4_t *)v16.i8)), 0xEuLL), 5uLL), (int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_high_n_u16((uint16x8_t)v12, 0xCuLL), vsubw_high_u16((uint32x4_t)0, v14)), (int32x4_t)vmovl_high_u16(v16)),
                                                   0xEuLL),
                                                 5uLL)),
                       (int8x16_t)a4),
          v18);
  v21 = (uint16x8_t)vabsq_s16(v19);
  v22 = (uint16x8_t)vabsq_s16(v20);
  v23 = (uint16x8_t)vdupq_n_s16(a2 << 8);
  v24 = vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v23.i8);
  v25 = vmull_high_u16(v21, v23);
  v26 = vmull_u16(*(uint16x4_t *)v22.i8, *(uint16x4_t *)v23.i8);
  v27 = vmull_high_u16(v22, v23);
  v28 = vdupq_n_s32(a1);
  v29 = (int8x16_t)vceqzq_s32(v28);
  v30 = vcvtq_f32_u32((uint32x4_t)v28);
  v31 = vrecpeq_f32(v30);
  v32 = vmulq_f32(v31, vrecpsq_f32(v30, v31));
  v33 = vmulq_f32(vrecpsq_f32(v30, v32), v32);
  v34 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v33, vcvtq_f32_u32(v24))), v29), (int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v33, vcvtq_f32_u32(v25))), v29)), 8uLL);
  v35 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v33, vcvtq_f32_u32(v26))), v29), (int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v33, vcvtq_f32_u32(v27))), v29)), 8uLL);
  v36 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v19), (int8x16_t)vnegq_s16(v34), (int8x16_t)v34);
  v37 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v20), (int8x16_t)vnegq_s16(v35), (int8x16_t)v35);
  v38 = vdupq_n_s16(a2);
  v39 = vdupq_n_s16(-a2);
  *(_QWORD *)&result = vuzp1q_s8((int8x16_t)vmaxq_s16(vminq_s16(v36, v38), v39), (int8x16_t)vmaxq_s16(vminq_s16(v37, v38), v39)).u64[0];
  return result;
}

int8x8_t sub_1B688A394(unsigned int a1, unsigned int a2, uint16x8_t a3)
{
  uint16x8_t v3;
  int8x16_t v4;
  int16x8_t v5;
  unsigned __int128 v6;
  uint16x8_t v7;
  int16x8_t v8;
  uint16x8_t v9;
  int16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint32x4_t v13;
  int32x4_t v14;
  uint32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int16x8_t v21;
  int8x16x4_t v23;

  v3.i64[0] = 0x1000100010001;
  v3.i64[1] = 0x1000100010001;
  v4 = (int8x16_t)vcgtq_u16(a3, v3);
  v5 = vclzq_s16((int16x8_t)a3);
  v23.val[3] = (int8x16_t)xmmword_1B6917B30;
  v23.val[2] = (int8x16_t)xmmword_1B6917B40;
  v23.val[1] = (int8x16_t)xmmword_1B6917B50;
  v23.val[0] = (int8x16_t)xmmword_1B6917B60;
  v6 = *(_OWORD *)&vmovl_u8((uint8x8_t)vqtbx4_s8(v23, vadd_s8(vshrn_n_s16((int16x8_t)vshlq_u16(a3, (uint16x8_t)vaddq_s16(v5, (int16x8_t)v3)), 8uLL), (int8x8_t)0x4040404040404040))) | __PAIR128__(0x200020002000200, 0x200020002000200);
  v7 = vmovl_u8(vhadd_u8((uint8x8_t)vmovn_s16(v5), (uint8x8_t)0x1111111111111111));
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s16((int16x8_t)(*(_OWORD *)&v5 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), v8), (int8x16_t)vdupq_n_s16(0x2D41u)), (int8x16_t)vshlq_n_s16((int16x8_t)(*(_OWORD *)&v5 & __PAIR128__(0xFFE1FFE1FFE1FFE1, 0xFFE1FFE1FFE1FFE1)), 0xEuLL));
  v10 = vsubq_s16((int16x8_t)vbslq_s8(v4, (int8x16_t)vuzp1q_s16((int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_n_u16(*(uint16x4_t *)&v6, 0xCuLL), (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v7.i8))), (int32x4_t)vmovl_u16(*(uint16x4_t *)v9.i8)), 0xEuLL), 5uLL), (int16x8_t)vrshrq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshlq_u32(vshll_high_n_u16((uint16x8_t)v6, 0xCuLL), vsubw_high_u16((uint32x4_t)0, v7)), (int32x4_t)vmovl_high_u16(v9)),
                                                   0xEuLL),
                                                 5uLL)),
                       (int8x16_t)a3),
          vdupq_n_s16(a1));
  v11 = (uint16x8_t)vabsq_s16(v10);
  v12 = (uint16x8_t)vdupq_n_s16(a2 << 8);
  v13 = vmull_u16(*(uint16x4_t *)v11.i8, *(uint16x4_t *)v12.i8);
  v14 = vdupq_n_s32(a1);
  v15 = vmull_high_u16(v11, v12);
  v16 = (int8x16_t)vceqzq_s32(v14);
  v17 = vcvtq_f32_u32((uint32x4_t)v14);
  v18 = vrecpeq_f32(v17);
  v19 = vmulq_f32(v18, vrecpsq_f32(v17, v18));
  v20 = vmulq_f32(vrecpsq_f32(v17, v19), v19);
  v21 = (int16x8_t)vrshrq_n_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v20, vcvtq_f32_u32(v13))), v16), (int16x8_t)vbicq_s8((int8x16_t)vcvtq_u32_f32(vmulq_f32(v20, vcvtq_f32_u32(v15))), v16)), 8uLL);
  return vmovn_s16(vmaxq_s16(vminq_s16((int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v10), (int8x16_t)vnegq_s16(v21), (int8x16_t)v21), vdupq_n_s16(a2)), vdupq_n_s16(-a2)));
}

uint64_t sub_1B688A560(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  signed int v5;
  signed int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  float v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  int8x8_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64x2_t v46;
  char v47;
  uint64_t v48;
  int32x2_t v49;
  uint64_t v50;
  size_t v51;
  int v52;
  char *v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  signed int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  signed int v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  signed int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t i;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t j;
  int v80;
  uint64_t v81;
  char *v82;
  int v83;
  unsigned int __c;
  int16x8_t v85;
  int v86;
  uint64_t v87;
  int8x16_t v88;
  _QWORD *v89;
  int v90;
  int v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  signed int v103;
  signed int v104;

  v1 = result;
  v2 = *(_QWORD *)(result + 296);
  v3 = *(float *)(v2 + 2720);
  v4 = (int)(v3 + 0.5);
  if (*(unsigned __int8 *)(result + 84) >= 0x33u)
    v5 = 51;
  else
    v5 = *(unsigned __int8 *)(result + 84);
  v6 = *(_DWORD *)(result + 88);
  v7 = *(_QWORD *)(v2 + 592);
  if (*(_BYTE *)(v7 + 136))
  {
    v9 = *(_DWORD *)(v7 + 248);
    v8 = (int *)(v7 + 248);
    if (v9 <= 0)
      v10 = v8 - 2;
    else
      v10 = v8;
    v11 = v8 - 1;
    v13 = v8[1];
    v12 = v8 + 1;
    if (v13 <= 0)
      v12 = v11;
  }
  else
  {
    v10 = (int *)(v7 + 276);
    v12 = (int *)(v7 + 280);
  }
  v14 = 0;
  v98 = *v10;
  v99 = *v12;
  v15 = (float)(int)v4;
  v85 = vdupq_n_s16(v4);
  v16 = vdupq_n_s8(v5);
  v17 = vdupq_n_s8(v6);
  if (*(_DWORD *)(result + 24) == 10)
    v18 = 12;
  else
    v18 = 0;
  v19 = vdupq_n_s8(v18);
  v20 = vdupq_n_s8(v4);
  v21 = v18 + v4;
  v22 = v18 | 0x33;
  v23 = (int8x16_t)xmmword_1B6917590;
  v97 = result;
  v93 = v17;
  v94 = v16;
  v92 = v19;
  v88 = v20;
  __c = v18 | 0x33;
  v95 = v18 + v4;
  v103 = v5;
  v104 = *(_DWORD *)(result + 88);
  do
  {
    v24 = v1 + 8 * v14;
    v25 = *(_BYTE **)(v24 + 1488);
    if (!v25)
      goto LABEL_50;
    v26 = *(int *)(v1 + 4 * v14 + 1520);
    v27 = *(_DWORD *)(v1 + 20);
    v28 = v14 + 3;
    v29 = (*(_DWORD *)(v1 + 16) + (4 << v14)) >> (v14 + 3);
    v30 = (((4 << v14) + v98) >> (v14 + 3));
    v31 = (((4 << v14) + v99) >> (v14 + 3));
    v32 = *(_DWORD *)(*(_QWORD *)(v1 + 296) + 444);
    if (v32 == 6 && v3 < v15 && (int)v31 >= 1)
    {
      v35 = 0;
      v36 = (int)(v29 & 0xFFFFFFF0);
      v37 = *(_QWORD *)(v24 + 1488);
      do
      {
        v38 = v35 + 1;
        if ((int)v36 < 1)
        {
          v43 = 0;
        }
        else
        {
          v39 = 0;
          v40 = vdup_n_s8((v35 & 1) - 1);
          v41 = vdup_n_s8((v38 & 1) - 1);
          do
          {
            v42 = (char *)(v37 + v39);
            vst2_s8(v42, *(int8x8x2_t *)v40.i8);
            v39 += 16;
          }
          while (v39 < v36);
          v43 = v39;
        }
        if ((int)v43 < (int)v30)
        {
          v44 = 0;
          v45 = (v30 - v43 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v46 = (uint64x2_t)vdupq_n_s64(v30 - v43 - 1);
          v47 = v35 + v43;
          v48 = v37 + v43;
          do
          {
            v49 = vmovn_s64((int64x2_t)vcgeq_u64(v46, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v44), v23)));
            if ((v49.i8[0] & 1) != 0)
              *(_BYTE *)(v48 + v44) = (v47 & 1) - 1;
            if ((v49.i8[4] & 1) != 0)
            {
              result = v48 + v44;
              *(_BYTE *)(v48 + v44 + 1) = ((v47 + v44 + 1) & 1) - 1;
            }
            v44 += 2;
          }
          while (v45 != v44);
        }
        v37 += v26;
        v35 = v38;
      }
      while (v38 != v31);
      v32 = *(_DWORD *)(*(_QWORD *)(v1 + 296) + 444);
    }
    v89 = (_QWORD *)(v24 + 1488);
    v101 = ((4 << v14) + v99) >> (v14 + 3);
    v102 = v26;
    v100 = v14 + 3;
    v96 = ((4 << v14) + v98) >> (v14 + 3);
    v90 = v27;
    v91 = 4 << v14;
    if (v32 && *(_DWORD *)(v1 + 88) != (_DWORD)v4)
    {
      v87 = v14;
      v86 = v29;
      if (!*(_BYTE *)(v1 + 13))
      {
        v72 = (v29 * v31);
        v73 = v72 & 0xFFFFFFF0;
        if ((int)v73 < 1)
        {
          v75 = 0;
        }
        else
        {
          for (i = 0; i < v73; i += 16)
            *(int8x16_t *)&v25[i] = vaddq_s8(vmaxq_s8(vminq_s8(vqaddq_s8(*(int8x16_t *)&v25[i], v20), v16), v17), v19);
          v75 = i;
        }
        if ((int)v75 < (int)v72)
        {
          v81 = v72 - v75;
          v82 = &v25[v75];
          do
          {
            v83 = *v82 + (_DWORD)v4;
            if (v83 >= v5)
              v83 = v5;
            if (v83 <= v6)
              LOBYTE(v83) = v6;
            *v82++ = v83 + v18;
            --v81;
          }
          while (v81);
        }
        goto LABEL_44;
      }
      if (v14)
      {
        if (v99 >= 1)
        {
          v58 = 0;
          v59 = 8 << v87;
          v60 = v98;
          if (v98 <= 8 << v87)
            v60 = 8 << v87;
          v61 = ((v60 - 1) >> v28) + 1;
          do
          {
            v62 = v4;
            v63 = v18;
            v64 = v100;
            if (v98 >= 1)
            {
              v65 = 0;
              v66 = 0;
              do
              {
                v67 = v64;
                v68 = v61;
                v69 = v25;
                v70 = v62;
                result = sub_1B682F68C(v97, v66, v58, v64);
                v64 = v67;
                v62 = v70;
                v25 = v69;
                v71 = result + v62 + (char)v69[v65];
                v61 = v68;
                v5 = v103;
                v6 = v104;
                if (v71 >= v103)
                  v71 = v103;
                if (v71 <= v104)
                  LOBYTE(v71) = v104;
                v69[v65] = v71 + v63;
                v66 += v59;
                ++v65;
              }
              while (v61 != v65);
            }
            LODWORD(v26) = v102;
            v25 += v102;
            v58 += v59;
            v4 = v62;
            v18 = v63;
            v21 = v95;
          }
          while (v58 < v99);
        }
        goto LABEL_44;
      }
      v50 = __c;
      if ((int)v31 >= 1)
      {
        v76 = 0;
        v77 = *(_QWORD *)(v97 + 1720);
        v78 = (int)(v30 & 0xFFFFFFF0);
        do
        {
          if ((int)v78 < 1)
          {
            j = 0;
          }
          else
          {
            for (j = 0; j < v78; j += 16)
              *(int8x16_t *)&v25[j] = vaddq_s8(vmaxq_s8(vminq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vaddw_s8(v85, *(int8x8_t *)&v25[j]), *(int8x8_t *)(v77 + j))), vaddw_high_s8(vaddw_high_s8(v85, *(int8x16_t *)&v25[j]), *(int8x16_t *)(v77 + j))), v94), v93), v92);
            j = j;
          }
          if ((int)j < (int)v30)
          {
            do
            {
              v80 = (char)v25[j] + (_DWORD)v4 + *(char *)(v77 + j);
              if (v80 >= v5)
                v80 = v5;
              if (v80 <= v6)
                LOBYTE(v80) = v6;
              v25[j++] = v80 + v18;
            }
            while (v30 != j);
          }
          v25 += v26;
          v77 += (int)v30;
          ++v76;
        }
        while (v76 != (_DWORD)v31);
        goto LABEL_44;
      }
    }
    else
    {
      v50 = v22;
      if ((int)v31 >= 1)
      {
        v86 = v29;
        v87 = v14;
        v51 = (int)v30;
        v52 = ((4 << v14) + v99) >> (v14 + 3);
        do
        {
          result = (uint64_t)memset(v25, v21, v51);
          LODWORD(v26) = v102;
          v25 += v102;
          --v52;
        }
        while (v52);
LABEL_44:
        v14 = v87;
        v50 = __c;
        if (v86 > v96 && v101 >= 1)
        {
          v53 = (char *)(*v89 + v96);
          v54 = v101;
          do
          {
            result = (uint64_t)memset(v53, __c, v86 - v96);
            LODWORD(v26) = v102;
            v53 += v102;
            --v54;
          }
          while (v54);
        }
      }
    }
    v55 = (v90 + v91) >> v100;
    v56 = __OFSUB__(v55, v101);
    v57 = v55 - v101;
    v17 = v93;
    v16 = v94;
    v19 = v92;
    v23 = (int8x16_t)xmmword_1B6917590;
    v20 = v88;
    v22 = v50;
    v1 = v97;
    if (!((v57 < 0) ^ v56 | (v57 == 0)))
    {
      result = (uint64_t)memset((void *)(*v89 + (int)v26 * v101), v22, v57 * (int)v26);
      v23 = (int8x16_t)xmmword_1B6917590;
      v20 = v88;
      v19 = v92;
      v17 = v93;
      v16 = v94;
    }
LABEL_50:
    ++v14;
  }
  while (v14 != 4);
  return result;
}

int8x8_t *sub_1B688AB54(int8x8_t *result, int a2, int a3, _DWORD *a4, signed int a5, int a6)
{
  int v6;
  float v7;
  int v8;
  int v9;
  unsigned int v10;
  float v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int16x8_t v15;
  int16x8_t v16;
  float v17;
  float v18;
  int8x16_t v19;
  float32x4_t v25;
  int v27;
  unsigned int v28;
  int v29;
  signed int v31;
  int32x4_t v32;
  int8x8_t *v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;

  if (a3 >= 1)
  {
    v6 = 0;
    v7 = (float)(int)a4[3];
    v8 = (int)v7;
    v9 = a4[1] - (int)(float)((float)(v7 * 0.0) * 0.5);
    v10 = v9 & ~(v9 >> 31);
    v11 = (float)(int)a4[2];
    v12 = (int)v11;
    v13 = a2 + 14;
    if (a2 >= -7)
      v13 = a2 + 7;
    v14 = (uint64_t)v13 >> 3;
    v15 = vdupq_n_s16((*a4 - (int)(float)((float)(v11 * 0.0) * 0.5)) & ~((*a4
                                                                                      - (int)(float)((float)(v11 * 0.0) * 0.5)) >> 31));
    v16 = vdupq_n_s16(v12);
    v17 = (float)a6;
    v18 = (float)a5;
    v19 = (int8x16_t)vdupq_n_s32(a5);
    __asm { FMOV            V6.4S, #16.0 }
    v25 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    __asm { FMOV            V17.4S, #1.0 }
    do
    {
      v27 = v6 | 4;
      if ((int)((v6 | 4) - v10) >= 0)
        v28 = (v6 | 4) - v10;
      else
        v28 = v10 - (v6 | 4);
      v29 = (v6 | 4) - v10 - v8;
      if (v29 < 0)
        v29 = v8 - ((v6 | 4) - v10);
      if (v29 >= v28)
        v29 = v28;
      if (v27 < (int)(v10 + v8) && v27 > v10)
        v29 = 0;
      if (a2 >= 1)
      {
        v31 = 0;
        v32 = vdupq_n_s32(v29 * v29);
        v33 = result;
        do
        {
          v34 = vsubq_s16((int16x8_t)vorrq_s8((int8x16_t)vdupq_n_s16(v31), (int8x16_t)xmmword_1B6917B70), v15);
          v35 = vsubq_s16(v34, v16);
          v36 = (int16x8_t)vandq_s8((int8x16_t)vcgezq_s16((int16x8_t)veorq_s8((int8x16_t)v35, (int8x16_t)v34)), (int8x16_t)vminq_s16(vabsq_s16(v34), vabsq_s16(v35)));
          v37 = vmlal_s16(v32, *(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8);
          v38 = vmlal_high_s16(v32, v36, v36);
          v39 = vmulq_f32(vmaxq_f32(vsubq_f32(_Q6, vsqrtq_f32(vcvtq_f32_s32(v37))), (float32x4_t)0), v25);
          v40 = vmlaq_n_f32(vmulq_n_f32(vsubq_f32(_Q17, v39), v17), v39, v18);
          v41 = (int8x16_t)vceqzq_s32(v37);
          v42 = vmulq_f32(vmaxq_f32(vsubq_f32(_Q6, vsqrtq_f32(vcvtq_f32_s32(v38))), (float32x4_t)0), v25);
          *v33++ = vqmovn_s16(vqmovn_high_s32(vqmovn_s32((int32x4_t)vbslq_s8(v41, v19, (int8x16_t)vcvtq_s32_f32(v40))), (int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32(v38), v19, (int8x16_t)vcvtq_s32_f32(vmlaq_n_f32(vmulq_n_f32(vsubq_f32(_Q17, v42), v17), v42, v18)))));
          v31 += 64;
        }
        while (v31 < a2);
      }
      result = (int8x8_t *)((char *)result + v14);
      v6 += 8;
    }
    while (v6 < a3);
  }
  return result;
}

uint64_t sub_1B688ACEC(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t *v19;
  int32x4_t *v20;
  uint64_t i;
  const char *v22;
  unsigned __int128 v23;
  const char *v24;
  unsigned __int128 v25;
  const char *v26;
  const char *v27;
  unsigned __int128 v28;
  unsigned __int128 v29;
  int16x8_t v30;
  int16x8_t v31;
  int32x4_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  int32x4_t v35;
  int32x4_t v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  uint8x8_t v41;
  uint8x8_t v42;
  uint8x8_t v43;
  uint8x8_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int8x8_t v47;
  uint8x8_t v48;
  int8x8_t v49;
  uint8x8_t v50;
  int64x2_t v51;

  if (a4 >= 1)
  {
    v9 = 0;
    v10 = 2 * a2;
    v11 = 4 * a2;
    v12 = 6 * a2;
    v13 = (int)(a3 & 0xFFFFFFE0);
    v14 = 8 * a2;
    v15 = a4;
    v16 = result + 6 * a2;
    v17 = result + 4 * a2;
    v18 = result + 2 * a2;
    do
    {
      v19 = (int32x4_t *)(a5 + 4 * (v9 >> 3) * a6);
      v20 = (int32x4_t *)(a7 + 4 * (v9 >> 3) * a8);
      if ((int)v13 >= 1)
      {
        for (i = 0; i < v13; i += 32)
        {
          v22 = (const char *)(v18 + i);
          v23 = (unsigned __int128)vld2q_s8(v22);
          v24 = (const char *)(result + i);
          v25 = (unsigned __int128)vld2q_s8(v24);
          v26 = (const char *)(v17 + i);
          v27 = (const char *)(v16 + i);
          v28 = (unsigned __int128)vld2q_s8(v26);
          v29 = (unsigned __int128)vld2q_s8(v27);
          v30 = (int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v23), (uint8x16_t)v25);
          v31 = (int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v29), (uint8x16_t)v28);
          v32 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(v31, v30));
          v33 = (uint8x16_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u16((uint16x8_t)v30, 2uLL), (int8x16_t)xmmword_1B6917B80);
          v34 = (uint8x16_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u16((uint16x8_t)v31, 2uLL), (int8x16_t)xmmword_1B6917B80);
          *v19++ = vshlq_n_s32(v32, 2uLL);
          v35 = (int32x4_t)vshlq_n_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vabal_u8(vabal_u8(vabal_u8(vabdl_u8(*(uint8x8_t *)&v23, *(uint8x8_t *)v33.i8), *(uint8x8_t *)&v25, *(uint8x8_t *)v33.i8), *(uint8x8_t *)&v28, *(uint8x8_t *)v34.i8), *(uint8x8_t *)&v29, *(uint8x8_t *)v34.i8))), 2uLL);
          v36 = (int32x4_t)vshlq_n_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabdl_high_u8((uint8x16_t)v23, v33), (uint8x16_t)v25, v33), (uint8x16_t)v28, v34), (uint8x16_t)v29, v34))), 2uLL);
          *v20++ = vuzp1q_s32(v35, v36);
          *a9 += vaddvq_s64(vaddq_s64((int64x2_t)v36, (int64x2_t)v35));
        }
      }
      if ((int)v13 < a3)
      {
        v37 = (const char *)(result + v13);
        v38 = (const char *)(result + v13 + v10);
        v39 = (const char *)(result + v13 + v11);
        v41 = (uint8x8_t)*(_OWORD *)vld2_s8(v37).val;
        v40 = &v37[v12];
        v42 = (uint8x8_t)*(_OWORD *)vld2_s8(v38).val;
        v43 = (uint8x8_t)*(_OWORD *)vld2_s8(v39).val;
        v44 = (uint8x8_t)*(_OWORD *)vld2_s8(v40).val;
        v45 = (int16x4_t)vpadal_u8(vpaddl_u8(v42), v41);
        v46 = (int16x4_t)vpadal_u8(vpaddl_u8(v44), v43);
        *(int32x2_t *)v19->i8 = vshl_n_s32((int32x2_t)vpaddl_u16((uint16x4_t)vadd_s16(v46, v45)), 2uLL);
        v47 = (int8x8_t)vrshr_n_u16((uint16x4_t)v45, 2uLL);
        v48 = (uint8x8_t)vtrn1_s8(v47, v47);
        v49 = (int8x8_t)vrshr_n_u16((uint16x4_t)v46, 2uLL);
        v50 = (uint8x8_t)vtrn1_s8(v49, v49);
        v51 = vshlq_n_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vabal_u8(vabal_u8(vabal_u8(vabdl_u8(v42, v48), v41, v48), v43, v50), v44, v50))), 2uLL);
        *(int32x2_t *)v20->i8 = vmovn_s64(v51);
        *a9 += vaddvq_s64(v51);
      }
      result += v14;
      v9 += 8;
      v16 += v14;
      v17 += v14;
      v18 += v14;
    }
    while (v9 < v15);
  }
  return result;
}

uint64_t sub_1B688AEC0(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, _DWORD *a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  uint64_t i;
  const char *v16;
  const char *v17;
  unsigned __int128 v18;
  unsigned __int128 v19;
  uint8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint8x8_t v23;
  int8x16_t v24;
  int32x2_t v25;

  if (a4 >= 1)
  {
    v9 = 0;
    v10 = 8 * a2;
    v11 = (int)(a3 & 0xFFFFFFC0);
    v12 = a4;
    v13 = result + 4 * a2;
    do
    {
      v14 = (int8x16_t *)(a7 + 4 * ((a8 >> 1) & 0x3FFFFFFFFFFFFFFFLL) * (v9 >> 3));
      if ((int)v11 >= 1)
      {
        for (i = 0; i < v11; i += 64)
        {
          v16 = (const char *)(v13 + i);
          v17 = (const char *)(result + i);
          v18 = (unsigned __int128)vld4q_s8(v16);
          v19 = (unsigned __int128)vld4q_s8(v17);
          v20 = (uint8x16_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u16((uint16x8_t)vshlq_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v18), (uint8x16_t)v19), 4uLL), 6uLL), (int8x16_t)xmmword_1B6917B80);
          v21 = (int8x16_t)vshlq_n_s16(vpaddq_s16((int16x8_t)vabal_u8(vabdl_u8(*(uint8x8_t *)&v18, *(uint8x8_t *)v20.i8), *(uint8x8_t *)&v19, *(uint8x8_t *)v20.i8), (int16x8_t)vabal_high_u8(vabdl_high_u8((uint8x16_t)v18, v20), (uint8x16_t)v19, v20)), 4uLL);
          *v14++ = v21;
          *a9 += (unsigned __int16)vaddv_s16(*(int16x4_t *)v21.i8)
               + (unsigned __int16)vaddv_s16((int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
        }
      }
      v22 = (int)(a3 & 0xFFFFFFC0);
      if ((int)v11 < a3)
      {
        do
        {
          v23.i8[0] = *(_BYTE *)(result + v22);
          v23.i8[1] = *(_BYTE *)(result + v22 + 4);
          v23.i8[2] = *(_BYTE *)(v13 + v22);
          v23.i8[3] = *(_BYTE *)(v13 + v22 + 4);
          v23.i8[4] = *(_BYTE *)(result + v22 + 8);
          v23.i8[5] = *(_BYTE *)(result + v22 + 12);
          v23.i8[6] = *(_BYTE *)(v13 + v22 + 8);
          v23.i8[7] = *(_BYTE *)(v13 + v22 + 12);
          *(uint32x2_t *)v24.i8 = vrshr_n_u32((uint32x2_t)vshl_n_s32((int32x2_t)vpaddl_u16(vpaddl_u8(v23)), 4uLL), 6uLL);
          v24.i64[1] = v24.i64[0];
          v25 = vshl_n_s32((int32x2_t)vpaddl_u16(vpaddl_u8(vabd_u8(v23, (uint8x8_t)vqtbl1_s8(v24, (int8x8_t)0x404040400000000)))), 4uLL);
          v14->i32[0] = v25.i16[0] & 0xFFF0 | (v25.u16[2] << 16);
          v14 = (int8x16_t *)((char *)v14 + 4);
          *a9 += vpadd_s32(v25, v25).u32[0];
          v22 += 16;
        }
        while (v22 < a3);
      }
      result += v10;
      v9 += 8;
      v13 += v10;
    }
    while (v9 < v12);
  }
  return result;
}

void sub_1B688B044(uint64_t *a1, int *a2, uint64_t *a3, int *a4, signed int a5, int a6, int a7, int a8, int a9, signed int a10)
{
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  double v25;
  int v26;
  int v27;
  int32x4_t v28;
  unsigned int v29;
  int8x8_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  signed int v37;
  int v38;
  __int128 v39;
  int v40;
  int v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  signed int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  signed int v58;
  uint64_t j;
  uint64_t v60;
  char v61;
  uint64_t v62;
  int v63;
  int v64;
  char v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  char v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  signed int v79;
  int v80;
  signed int v81;
  _BYTE *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unsigned int *v92;
  unsigned __int16 *v93;
  _BYTE *v94;
  unsigned __int16 *v95;
  unsigned int *v96;
  _BYTE *v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  signed int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  int v113;
  signed int v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  char v128;
  int v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  signed int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  __int128 v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int *v150;
  unsigned __int16 *v151;
  unsigned int *v152;
  _BYTE *v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  signed int v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  int v168;
  signed int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t k;
  uint64_t v175;
  int v176;
  int v177;
  char v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  char v182;
  char v183;
  int v184;
  BOOL v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  signed int v191;
  int v193;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  int v202;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int32x4_t v235;
  int32x4_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;

  v241 = *MEMORY[0x1E0C80C00];
  v202 = (a9 + 31) >> 5;
  v197 = a8 + 31;
  v193 = a8 + 7;
  v11 = (a8 + 7) >> 5;
  v12 = (a9 + 7) >> 5;
  v200 = *a4;
  v198 = 4 * v200;
  v233 = *a2;
  v199 = 4 * v233;
  v234 = a2[1];
  v201 = 2 * v234;
  v207 = a2[2];
  v222 = a6 >> 5;
  v195 = 2 * (a6 >> 5);
  v196 = 4 * (a6 >> 5);
  v206 = a7 >> 5;
  v210 = v11;
  v208 = v12;
  if (a7 >> 5 < v12)
  {
    v13 = a7 >> 5;
    v221 = (int)v196 + v199 * v206;
    v220 = (int)v195 + v201 * v206;
    v219 = v222 + (int)v207 * v206;
    v14 = 2 * ((int)v196 + v198 * v206);
    v217 = 6 * (_DWORD)v200 + v14;
    v218 = v14;
    v205 = 2 * v198;
    v216 = 4 * v200 + v14;
    v215 = 2 * v200 + v14;
    v214 = 3 * v233 + v221;
    v213 = 2 * v233 + v221;
    v212 = v233 + v221;
    v15 = v11 - v222;
    v211 = v234 + v220;
    do
    {
      v209 = v13;
      if (v11 > v222)
      {
        v16 = 0;
        v17 = a1[1];
        v232 = *a3 + v217;
        v231 = *a3 + v216;
        v229 = *a3 + v215;
        v227 = *a3 + v218;
        v225 = *a1 + v214;
        v223 = *a1 + v213;
        v18 = *a1 + v212;
        v19 = *a1 + v221;
        v20 = v17 + v211;
        v21 = v17 + v220;
        v22 = a1[2] + v219;
        do
        {
          v23.i64[0] = *(_QWORD *)(v227 + 8 * v16);
          v23.i64[1] = *(_QWORD *)(v229 + 8 * v16);
          v235 = (int32x4_t)vaddl_u16(*(uint16x4_t *)(v232 + 8 * v16), *(uint16x4_t *)(v231 + 8 * v16));
          v236 = (int32x4_t)vaddl_u16((uint16x4_t)v23.u64[1], *(uint16x4_t *)v23.i8);
          v24.i64[0] = *(_QWORD *)(v231 + 8 * v16);
          v24.i64[1] = *(_QWORD *)(v232 + 8 * v16);
          v25 = sub_1B688A0F8(a5, a10, v23, v24);
          *(_DWORD *)(v19 + 4 * v16) = LODWORD(v25);
          *(_DWORD *)(v18 + 4 * v16) = HIDWORD(v25);
          *(_DWORD *)(v223 + 4 * v16) = v26;
          *(_DWORD *)(v225 + 4 * v16) = v27;
          v28 = vpaddq_s32(v236, v235);
          v29 = (vaddvq_s32(v28) + 8) >> 4;
          *(int16x4_t *)v28.i8 = vmovn_s32((int32x4_t)vrshrq_n_u32((uint32x4_t)v28, 2uLL));
          v28.u64[1] = (unint64_t)vdup_n_s16(v29);
          v30 = sub_1B688A394(a5, a10, (uint16x8_t)v28);
          *(_WORD *)(v21 + 2 * v16) = v30.i16[0];
          *(_WORD *)(v20 + 2 * v16) = v30.i16[1];
          *(_BYTE *)(v22 + v16++) = v30.i8[4];
        }
        while (v15 != (_DWORD)v16);
      }
      v221 += v199;
      v220 += v201;
      v219 += v207;
      v13 = v209 + 1;
      v217 += v205;
      v216 += v205;
      v215 += v205;
      v218 += v205;
      v214 += v199;
      v213 += v199;
      v212 += v199;
      v11 = v210;
      v211 += v201;
      v12 = v208;
    }
    while (v209 + 1 != v208);
  }
  v230 = (a9 + 15) >> 4;
  v228 = (a9 + 7) >> 3;
  if (v12 != v202 && v11 > v222)
  {
    v31 = (_BYTE *)(a1[2] + (int)v207 * (uint64_t)v208 + ((uint64_t)a6 >> 5));
    v32 = a1[1] + v201 * (uint64_t)v208 + v195;
    v33 = *a3 + 2 * v198 * v208 + 2 * v196;
    v34 = v228 - 4 * v208;
    v35 = (v230 - 2 * v208);
    v36 = *a1 + v199 * (uint64_t)v208 + v196;
    v37 = a10 << 8;
    v38 = -a10;
    *(_QWORD *)&v39 = -1;
    *((_QWORD *)&v39 + 1) = -1;
    do
    {
      v239 = v39;
      v240 = v39;
      v237 = v39;
      v238 = v39;
      if (v34 < 1)
      {
        v41 = 0;
      }
      else
      {
        v40 = 0;
        v41 = 0;
        v42 = &v237;
        v43 = v33;
        v44 = v36;
        do
        {
          for (i = 0; i != 4; ++i)
          {
            v46 = *(unsigned __int16 *)(v43 + 2 * i);
            *((_DWORD *)v42 + i) = v46;
            v47 = v46;
            if (v46 >= 2)
            {
              v48 = __clz(v46);
              if ((v48 & 1) != 0)
                v49 = ((byte_1B69327A4[(unint64_t)(v46 << (v48 + 1)) >> 24] << 12) | 0x200000u) >> ((v48 + 1) >> 1);
              else
                v49 = (11585
                     * (((byte_1B69327A4[(unint64_t)(v46 << (v48 + 1)) >> 24] << 12) | 0x200000u) >> ((v48 + 1) >> 1))) >> 14;
              v47 = (v49 + 16) >> 5;
            }
            v50 = (int)(v37 * (v47 - a5)) / a5;
            v51 = (v50 > 0) | (v50 >> 31);
            if (v50 < 0)
              v50 = -v50;
            v52 = v51 * ((v50 + 128) >> 8);
            if (v52 >= a10)
              v52 = a10;
            if (v52 <= v38)
              LOBYTE(v52) = -(char)a10;
            *(_BYTE *)(v44 + i) = v52;
            v41 += v46;
          }
          ++v40;
          v44 += v233;
          ++v42;
          v43 += 2 * v200;
        }
        while (v40 != v34);
      }
      v53 = (v41 + 2 * v34) / (4 * v34);
      if (v53 >= 2)
      {
        v54 = __clz(v53);
        v55 = ((byte_1B69327A4[(unint64_t)(v53 << (v54 + 1)) >> 24] << 12) | 0x200000u) >> ((v54 + 1) >> 1);
        if ((v54 & 1) == 0)
          v55 = (11585 * v55) >> 14;
        v53 = (v55 + 16) >> 5;
      }
      v56 = (int)((v53 - a5) * v37) / a5;
      v57 = (v56 > 0) | (v56 >> 31);
      if (v56 < 0)
        v56 = -v56;
      v58 = v57 * ((v56 + 128) >> 8);
      if (v58 >= a10)
        v58 = a10;
      if (v58 <= v38)
        LOBYTE(v58) = -(char)a10;
      *v31 = v58;
      if ((int)v35 >= 1)
      {
        for (j = 0; j != v35; ++j)
        {
          v60 = 0;
          v61 = 1;
          do
          {
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v65 = v61;
            v66 = 1;
            do
            {
              v67 = 0;
              v68 = v66;
              v69 = (8 * j) | (2 * v60) | v62;
              v70 = 1;
              do
              {
                v71 = v70;
                v72 = *((_DWORD *)&v237 + (v69 | v67));
                v73 = v72 == -1;
                if (v72 == -1)
                  v72 = 0;
                v64 += v72;
                if (!v73)
                  ++v63;
                v67 = 1;
                v70 = 0;
              }
              while ((v71 & 1) != 0);
              v66 = 0;
              v62 = 4;
            }
            while ((v68 & 1) != 0);
            v74 = (v64 + (v63 >> 1)) / v63;
            if (v74 >= 2)
            {
              v75 = __clz(v74);
              v76 = ((byte_1B69327A4[(unint64_t)(v74 << (v75 + 1)) >> 24] << 12) | 0x200000u) >> ((v75 + 1) >> 1);
              if ((v75 & 1) == 0)
                v76 = (11585 * v76) >> 14;
              v74 = (v76 + 16) >> 5;
            }
            v61 = 0;
            v77 = (int)((v74 - a5) * v37) / a5;
            v78 = (v77 > 0) | (v77 >> 31);
            if (v77 < 0)
              v77 = -v77;
            v79 = v78 * ((v77 + 128) >> 8);
            if (v79 >= a10)
              v79 = a10;
            if (v79 <= v38)
              LOBYTE(v79) = -(char)a10;
            *(_BYTE *)(v32 + j * v234 + v60) = v79;
            v60 = 1;
          }
          while ((v65 & 1) != 0);
        }
      }
      v33 += 8;
      v36 += 4;
      v32 += 2;
      ++v31;
      v11 = v210;
      ++v222;
    }
    while (v222 != v210);
  }
  v80 = v208;
  if (v11 != v197 >> 5)
  {
    v224 = (a8 + 15) >> 4;
    v226 = v193 >> 3;
    v81 = a10 << 8;
    if (v206 < v208)
    {
      v82 = (_BYTE *)(a1[2] + v210);
      v83 = a1[1] + 2 * v210;
      v84 = v226 - 4 * v210;
      v85 = (v224 - 2 * v210);
      v86 = -a10;
      *(_QWORD *)&v87 = -1;
      *((_QWORD *)&v87 + 1) = -1;
      v88 = *a1 + 4 * v210;
      v89 = *a3 + 8 * v210;
      do
      {
        v90 = 0;
        v91 = 0;
        v239 = v87;
        v240 = v87;
        v92 = (unsigned int *)&v237;
        v93 = (unsigned __int16 *)v89;
        v94 = (_BYTE *)v88;
        v237 = v87;
        v238 = v87;
        do
        {
          v95 = v93;
          v96 = v92;
          v97 = v94;
          v98 = (v226 - 4 * v210);
          if (v84 >= 1)
          {
            do
            {
              v100 = *v95++;
              v99 = v100;
              *v96 = v100;
              v101 = v100;
              if (v100 >= 2)
              {
                v102 = __clz(v99);
                if ((v102 & 1) != 0)
                  v103 = ((byte_1B69327A4[(unint64_t)(v99 << (v102 + 1)) >> 24] << 12) | 0x200000u) >> ((v102 + 1) >> 1);
                else
                  v103 = (11585
                        * (((byte_1B69327A4[(unint64_t)(v99 << (v102 + 1)) >> 24] << 12) | 0x200000u) >> ((v102 + 1) >> 1))) >> 14;
                v101 = (v103 + 16) >> 5;
              }
              v104 = (int)(v81 * (v101 - a5)) / a5;
              v105 = (v104 > 0) | (v104 >> 31);
              if (v104 < 0)
                v104 = -v104;
              v106 = v105 * ((v104 + 128) >> 8);
              if (v106 >= a10)
                v106 = a10;
              if (v106 <= v86)
                LOBYTE(v106) = -(char)a10;
              *v97++ = v106;
              v91 += v99;
              ++v96;
              --v98;
            }
            while (v98);
          }
          ++v90;
          v94 += v233;
          v92 += 4;
          v93 += v200;
        }
        while (v90 != 4);
        v107 = (v91 + 2 * v84) / (4 * v84);
        if (v107 >= 2)
        {
          v108 = __clz(v107);
          v109 = ((byte_1B69327A4[(unint64_t)(v107 << (v108 + 1)) >> 24] << 12) | 0x200000u) >> ((v108 + 1) >> 1);
          if ((v108 & 1) != 0)
            v110 = v109;
          else
            v110 = (11585 * v109) >> 14;
          v107 = (v110 + 16) >> 5;
        }
        v111 = 0;
        v112 = (int)((v107 - a5) * v81) / a5;
        v113 = (v112 > 0) | (v112 >> 31);
        if (v112 < 0)
          v112 = -v112;
        v114 = v113 * ((v112 + 128) >> 8);
        if (v114 >= a10)
          v114 = a10;
        if (v114 <= v86)
          LOBYTE(v114) = -(char)a10;
        *v82 = v114;
        v115 = 1;
        do
        {
          v116 = v115;
          if ((int)v85 >= 1)
          {
            v117 = 0;
            v118 = 8 * v111;
            v119 = v83 + v111 * v234;
            do
            {
              v120 = 0;
              v121 = 0;
              v122 = 0;
              v123 = 1;
              do
              {
                v124 = 0;
                v125 = v123;
                v126 = v118 + 2 * v117 + v120;
                v127 = 1;
                do
                {
                  v128 = v127;
                  v129 = *((_DWORD *)&v237 + (v126 | v124));
                  v130 = v129 == -1;
                  if (v129 == -1)
                    v129 = 0;
                  v122 += v129;
                  if (!v130)
                    ++v121;
                  v124 = 1;
                  v127 = 0;
                }
                while ((v128 & 1) != 0);
                v123 = 0;
                v120 = 4;
              }
              while ((v125 & 1) != 0);
              v131 = (v122 + (v121 >> 1)) / v121;
              if (v131 >= 2)
              {
                v132 = __clz(v131);
                v133 = ((byte_1B69327A4[(unint64_t)(v131 << (v132 + 1)) >> 24] << 12) | 0x200000u) >> ((v132 + 1) >> 1);
                if ((v132 & 1) == 0)
                  v133 = (11585 * v133) >> 14;
                v131 = (v133 + 16) >> 5;
              }
              v134 = (int)((v131 - a5) * v81) / a5;
              v135 = (v134 > 0) | (v134 >> 31);
              if (v134 < 0)
                v134 = -v134;
              v136 = v135 * ((v134 + 128) >> 8);
              if (v136 >= a10)
                v136 = a10;
              if (v136 <= v86)
                LOBYTE(v136) = -(char)a10;
              *(_BYTE *)(v119 + v117++) = v136;
            }
            while (v117 != v85);
          }
          v115 = 0;
          v111 = 1;
        }
        while ((v116 & 1) != 0);
        v88 += v199;
        v83 += v201;
        v82 += v207;
        v89 += 2 * v198;
        v80 = v208;
        ++v206;
      }
      while (v206 != v208);
    }
    if (v80 != v202)
    {
      v137 = *a3;
      v138 = *a1;
      v139 = a1[1];
      v140 = a1[2];
      v141 = v228 - 4 * v80;
      *(_QWORD *)&v142 = -1;
      *((_QWORD *)&v142 + 1) = -1;
      v239 = v142;
      v240 = v142;
      v237 = v142;
      v238 = v142;
      v143 = v140 + (int)v207 * (uint64_t)v80;
      v144 = v226 - 4 * v210;
      v145 = v141 * v144;
      if (v141 < 1)
      {
        v147 = 0;
      }
      else
      {
        v146 = 0;
        v147 = 0;
        v148 = v137 + 2 * v198 * v80 + 8 * v210;
        v149 = v138 + v199 * (uint64_t)v80 + 4 * v210;
        v150 = (unsigned int *)&v237;
        do
        {
          v151 = (unsigned __int16 *)v148;
          v152 = v150;
          v153 = (_BYTE *)v149;
          v154 = (v226 - 4 * v210);
          if (v144 >= 1)
          {
            do
            {
              v156 = *v151++;
              v155 = v156;
              *v152 = v156;
              v157 = v156;
              if (v156 >= 2)
              {
                v158 = __clz(v155);
                if ((v158 & 1) != 0)
                  v159 = ((byte_1B69327A4[(unint64_t)(v155 << (v158 + 1)) >> 24] << 12) | 0x200000u) >> ((v158 + 1) >> 1);
                else
                  v159 = (11585
                        * (((byte_1B69327A4[(unint64_t)(v155 << (v158 + 1)) >> 24] << 12) | 0x200000u) >> ((v158 + 1) >> 1))) >> 14;
                v157 = (v159 + 16) >> 5;
              }
              v160 = (int)(v81 * (v157 - a5)) / a5;
              v161 = (v160 > 0) | (v160 >> 31);
              if (v160 < 0)
                v160 = -v160;
              v162 = v161 * ((v160 + 128) >> 8);
              if (v162 >= a10)
                v162 = a10;
              if (v162 <= -a10)
                LOBYTE(v162) = -(char)a10;
              *v153++ = v162;
              v147 += v155;
              ++v152;
              --v154;
            }
            while (v154);
          }
          ++v146;
          v149 += v233;
          v150 += 4;
          v148 += 2 * v200;
        }
        while (v146 != v141);
      }
      v163 = (v230 - 2 * v208);
      v164 = (v147 + (v145 >> 1)) / v145;
      if (v164 >= 2)
      {
        v165 = __clz(v164);
        v166 = ((byte_1B69327A4[(unint64_t)(v164 << (v165 + 1)) >> 24] << 12) | 0x200000u) >> ((v165 + 1) >> 1);
        if ((v165 & 1) == 0)
          v166 = (11585 * v166) >> 14;
        v164 = (v166 + 16) >> 5;
      }
      v167 = (int)((v164 - a5) * v81) / a5;
      v168 = (v167 > 0) | (v167 >> 31);
      if (v167 < 0)
        v167 = -v167;
      v169 = v168 * ((v167 + 128) >> 8);
      v170 = -a10;
      if (v169 >= a10)
        v169 = a10;
      if (v169 <= v170)
        v169 = -a10;
      *(_BYTE *)(v143 + v210) = v169;
      if ((int)v163 >= 1)
      {
        v171 = 0;
        v172 = v139 + v201 * (uint64_t)v208 + 2 * v210;
        v173 = (v224 - 2 * v210);
        do
        {
          if ((int)v173 >= 1)
          {
            for (k = 0; k != v173; ++k)
            {
              v175 = 0;
              v176 = 0;
              v177 = 0;
              v178 = 1;
              do
              {
                v179 = 0;
                v180 = v178;
                v181 = (v175 + (v171 << 35) + (k << 33)) >> 32;
                v182 = 1;
                do
                {
                  v183 = v182;
                  v184 = *((_DWORD *)&v237 + (v181 | v179));
                  v185 = v184 == -1;
                  if (v184 == -1)
                    v184 = 0;
                  v177 += v184;
                  if (!v185)
                    ++v176;
                  v179 = 1;
                  v182 = 0;
                }
                while ((v183 & 1) != 0);
                v178 = 0;
                v175 = 0x400000000;
              }
              while ((v180 & 1) != 0);
              v186 = (v177 + (v176 >> 1)) / v176;
              if (v186 >= 2)
              {
                v187 = __clz(v186);
                v188 = ((byte_1B69327A4[(unint64_t)(v186 << (v187 + 1)) >> 24] << 12) | 0x200000u) >> ((v187 + 1) >> 1);
                if ((v187 & 1) == 0)
                  v188 = (11585 * v188) >> 14;
                v186 = (v188 + 16) >> 5;
              }
              v189 = (int)((v186 - a5) * v81) / a5;
              v190 = (v189 > 0) | (v189 >> 31);
              if (v189 < 0)
                v189 = -v189;
              v191 = v190 * ((v189 + 128) >> 8);
              if (v191 >= a10)
                v191 = a10;
              if (v191 <= v170)
                LOBYTE(v191) = -(char)a10;
              *(_BYTE *)(v172 + v171 * v234 + k) = v191;
            }
          }
          ++v171;
        }
        while (v171 != v163);
      }
    }
  }
}

uint64_t sub_1B688BE54(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  unint64_t i;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  uint8x16_t v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  uint8x16_t *v18;
  uint8x16_t v19;
  uint8x16_t *v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  uint8x16_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint16x8_t v31;
  uint16x8_t v32;

  if (a4 >= 1)
  {
    for (i = 0; i < a4; i += 8)
    {
      if (a3 >= 1)
      {
        v10 = 0;
        v11 = (_DWORD *)(a7 + 4 * (i >> 3) * a8);
        v12 = (_QWORD *)(a5 + 4 * (i >> 3) * a6);
        do
        {
          v13 = *(uint8x16_t *)(result + v10);
          v14 = (uint8x16_t *)(result + v10 + a2);
          v15 = *v14;
          v16 = (uint8x16_t *)((char *)v14 + a2);
          v17 = *v16;
          v18 = (uint8x16_t *)((char *)v16 + a2);
          v19 = *(uint8x16_t *)((char *)v18 + a2);
          v20 = (uint8x16_t *)((char *)v18 + a2 + a2);
          v21 = *v20;
          v22 = *v18;
          v23 = *(uint8x16_t *)((char *)v20 + a2);
          v24 = *(uint8x16_t *)((char *)v20 + a2 + a2);
          v25 = (int16x8_t)vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(v15), v13), v17), *v18);
          v26 = (int16x8_t)vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(*v20), v19), v23), v24);
          v27 = (int32x4_t)vpaddlq_u16((uint16x8_t)vaddq_s16(v26, v25));
          *v12++ = vpaddq_s32(v27, v27).u64[0];
          v28 = (int8x16_t)vrshrq_n_u16((uint16x8_t)vpaddq_s16(v25, v26), 4uLL);
          v29 = (uint8x16_t)vqtbl1q_s8(v28, (int8x16_t)xmmword_1B6917B90);
          v30 = (uint8x16_t)vqtbl1q_s8(v28, (int8x16_t)xmmword_1B6917BA0);
          v31 = vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabdl_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v29.i8), *(uint8x8_t *)v13.i8, *(uint8x8_t *)v29.i8), *(uint8x8_t *)v17.i8, *(uint8x8_t *)v29.i8), *(uint8x8_t *)v22.i8, *(uint8x8_t *)v29.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v23.i8, *(uint8x8_t *)v30.i8);
          v32 = vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabdl_high_u8(v15, v29), v13, v29), v17, v29), v22, v29), v19, v30), v21, v30), v23, v30), v24, v30);
          v13.i32[0] = vaddlvq_u16(vabal_u8(v31, *(uint8x8_t *)v24.i8, *(uint8x8_t *)v30.i8));
          *v11 = v13.i32[0];
          v11[1] = vaddlvq_u16(v32);
          LODWORD(v18) = *a9 + v13.i32[0];
          *a9 = (_DWORD)v18;
          *a9 = v11[1] + (_DWORD)v18;
          v10 += 16;
          v11 += 2;
        }
        while (v10 < a3);
      }
      result += 8 * a2;
    }
  }
  return result;
}

uint64_t sub_1B688BFAC(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  unint64_t i;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  uint8x16_t v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  uint8x16_t *v18;
  uint8x16_t v19;
  uint8x16_t *v20;
  uint8x16_t v21;
  uint8x16_t *v22;
  uint8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  int16x8_t v26;
  uint32x4_t v27;
  uint8x16_t v28;
  uint16x8_t v29;
  uint16x8_t v30;

  if (a4 >= 1)
  {
    for (i = 0; i < a4; i += 8)
    {
      if (a3 >= 1)
      {
        v10 = 0;
        v11 = (_DWORD *)(a7 + 4 * (i >> 3) * a8);
        v12 = (_QWORD *)(a5 + 4 * (i >> 3) * a6);
        do
        {
          v13 = *(uint8x16_t *)(result + v10);
          v14 = (uint8x16_t *)(result + v10 + a2);
          v15 = *v14;
          v16 = (uint8x16_t *)((char *)v14 + a2);
          v17 = *v16;
          v18 = (uint8x16_t *)((char *)v16 + a2);
          v19 = *v18;
          v20 = (uint8x16_t *)((char *)v18 + a2);
          v21 = *v20;
          v22 = (uint8x16_t *)((char *)v20 + a2);
          v23 = *(uint8x16_t *)((char *)v22 + a2 + a2);
          v24 = *v22;
          v25 = *(uint8x16_t *)((char *)v22 + a2);
          v26 = (int16x8_t)vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(v15), v13), v17), v19), v21), *v22), v25), v23);
          v27 = vpaddlq_u16((uint16x8_t)vpaddq_s16(v26, v26));
          *v12++ = v27.i64[0];
          v28 = (uint8x16_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u32(v27, 6uLL), (int8x16_t)xmmword_1B6917BB0);
          v29 = vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabal_u8(vabdl_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v13.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v17.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v19.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v24.i8, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v25.i8, *(uint8x8_t *)v28.i8);
          v30 = vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabal_high_u8(vabdl_high_u8(v15, v28), v13, v28), v17, v28), v19, v28), v21, v28), v24, v28), v25, v28), v23, v28);
          v13.i32[0] = vaddlvq_u16(vabal_u8(v29, *(uint8x8_t *)v23.i8, *(uint8x8_t *)v28.i8));
          *v11 = v13.i32[0];
          v11[1] = vaddlvq_u16(v30);
          LODWORD(v22) = *a9 + v13.i32[0];
          *a9 = (_DWORD)v22;
          *a9 = v11[1] + (_DWORD)v22;
          v10 += 16;
          v11 += 2;
        }
        while (v10 < a3);
      }
      result += 8 * a2;
    }
  }
  return result;
}

unint64_t sub_1B688C0F0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t *a5, uint64_t *a6, int64x2_t *a7)
{
  int v7;
  uint64x2_t v8;
  uint64_t v9;
  int v10;
  uint8x16_t v11;
  uint8x16_t *v12;
  uint8x16_t v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  uint8x16_t *v18;
  uint8x16_t v19;
  uint8x16_t *v20;
  uint8x16_t v21;
  uint8x16_t *v22;
  uint8x16_t v23;
  uint8x16_t v24;
  uint32x4_t v25;
  int32x4_t v26;
  int64x2_t v27;
  uint64x2_t v28;
  uint64_t v29;

  if (a4 < 1)
  {
    v8 = 0uLL;
  }
  else
  {
    v7 = 0;
    v8 = 0uLL;
    do
    {
      if (a3 >= 1)
      {
        v9 = 0;
        v10 = a3;
        do
        {
          v11 = *(uint8x16_t *)(a1 + v9);
          v12 = (uint8x16_t *)(a1 + v9 + a2);
          v13 = *v12;
          v14 = (uint8x16_t *)((char *)v12 + a2);
          v15 = *v14;
          v16 = (uint8x16_t *)((char *)v14 + a2);
          v17 = *v16;
          v18 = (uint8x16_t *)((char *)v16 + a2);
          v19 = *v18;
          v20 = (uint8x16_t *)((char *)v18 + a2);
          v21 = *v20;
          v22 = (uint8x16_t *)((char *)v20 + a2);
          v23 = *(uint8x16_t *)((char *)v22 + a2);
          v24 = *v22;
          v25 = vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_u8(*(uint8x8_t *)v13.i8, *(uint8x8_t *)v13.i8)), vmull_u8(*(uint8x8_t *)v11.i8, *(uint8x8_t *)v11.i8)), vmull_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v15.i8)), vmull_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v17.i8));
          v26 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_high_u8(v13, v13)), vmull_high_u8(v11, v11)), vmull_high_u8(v15, v15)), vmull_high_u8(v17, v17)), vmull_high_u8(v19, v19)), vmull_high_u8(v21, v21)), vmull_high_u8(v24, v24)), vmull_high_u8(v23, v23));
          v11.i64[0] = *a5;
          *a6 = *a5;
          v27 = (int64x2_t)vpaddlq_u32((uint32x4_t)vpaddq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v25, vmull_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v19.i8)), vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v21.i8)), vmull_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)v24.i8)), vmull_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v23.i8)), v26));
          v28 = (uint64x2_t)vsubq_s64(v27, (int64x2_t)vshrq_n_u64(vmull_u32(*(uint32x2_t *)v11.i8, *(uint32x2_t *)v11.i8), 6uLL));
          if (v10 <= 15)
            v29 = 1;
          else
            v29 = 2;
          a6 = (uint64_t *)((char *)a6 + 4 * v29);
          *a7 = v27;
          v8 = vrsraq_n_u64(v8, v28, 6uLL);
          a5 = (uint64_t *)((char *)a5 + 4 * v29);
          a7 = (int64x2_t *)((char *)a7 + 8 * v29);
          v9 += 16;
          v10 -= 16;
        }
        while (v9 < a3);
      }
      a1 += 8 * a2;
      v7 += 8;
    }
    while (v7 < a4);
  }
  return (v8.i64[1] + ((a4 * a3) >> 7) + v8.i64[0]) / (unint64_t)((uint64_t)(a4 * a3) >> 6);
}

unint64_t sub_1B688C25C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int32x2_t v24;
  int32x4_t v25;
  int32x4_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  uint8x16_t v35;
  uint8x16_t *v36;
  uint8x16_t v37;
  uint8x16_t *v38;
  uint8x16_t v39;
  uint8x16_t *v40;
  uint8x16_t v41;
  uint8x16_t *v42;
  uint8x16_t v43;
  uint8x16_t *v44;
  uint8x16_t v45;
  uint8x16_t *v46;
  uint8x16_t v47;
  uint8x16_t v48;
  int32x2_t v49;
  int32x4_t v50;
  uint32x4_t v51;
  int32x2_t v52;

  if (a4 < 1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = (uint64_t)a3 >> 3;
    v10 = 16 * a2;
    v11 = 8 * v9;
    v12 = a1 + 15 * a2;
    v13 = a1 + 14 * a2;
    v14 = a1 + 13 * a2;
    v15 = a1 + 12 * a2;
    v16 = a1 + 11 * a2;
    v17 = a1 + 10 * a2;
    v18 = a1 + 9 * a2;
    v19 = a5 + 4 * v9;
    v20 = a1 + 8 * a2;
    do
    {
      if (a3 >= 1)
      {
        v21 = 0;
        v22 = 0;
        v23 = a3;
        do
        {
          v24 = 0;
          v25 = 0uLL;
          v26 = 0uLL;
          if (a4 - v8 >= 16)
          {
            v27 = *(uint8x16_t *)(v20 + v22);
            v28 = *(uint8x16_t *)(v18 + v22);
            v29 = *(uint8x16_t *)(v17 + v22);
            v30 = *(uint8x16_t *)(v16 + v22);
            v31 = *(uint8x16_t *)(v15 + v22);
            v32 = *(uint8x16_t *)(v14 + v22);
            v33 = *(uint8x16_t *)(v13 + v22);
            v34 = *(uint8x16_t *)(v12 + v22);
            v25 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_u8(*(uint8x8_t *)v28.i8, *(uint8x8_t *)v28.i8)), vmull_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v27.i8)), vmull_u8(*(uint8x8_t *)v29.i8, *(uint8x8_t *)v29.i8)), vmull_u8(*(uint8x8_t *)v30.i8, *(uint8x8_t *)v30.i8)), vmull_u8(*(uint8x8_t *)v31.i8, *(uint8x8_t *)v31.i8)), vmull_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v32.i8)), vmull_u8(*(uint8x8_t *)v33.i8, *(uint8x8_t *)v33.i8)), vmull_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v34.i8));
            v26 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_high_u8(v28, v28)), vmull_high_u8(v27, v27)), vmull_high_u8(v29, v29)), vmull_high_u8(v30, v30)), vmull_high_u8(v31, v31)), vmull_high_u8(v32, v32)), vmull_high_u8(v33, v33)), vmull_high_u8(v34, v34));
            v24 = *(int32x2_t *)(v19 + v21);
          }
          v35 = *(uint8x16_t *)(a1 + v22);
          v36 = (uint8x16_t *)(a1 + v22 + a2);
          v37 = *v36;
          v38 = (uint8x16_t *)((char *)v36 + a2);
          v39 = *v38;
          v40 = (uint8x16_t *)((char *)v38 + a2);
          v41 = *v40;
          v42 = (uint8x16_t *)((char *)v40 + a2);
          v43 = *v42;
          v44 = (uint8x16_t *)((char *)v42 + a2);
          v45 = *v44;
          v46 = (uint8x16_t *)((char *)v44 + a2);
          v47 = *v46;
          v48 = *(uint8x16_t *)((char *)v46 + a2);
          v49 = *(int32x2_t *)(a5 + v21);
          if (v23 > 15)
          {
            v50 = (int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_high_u8(v37, v37)), vmull_high_u8(v35, v35)), vmull_high_u8(v39, v39)), vmull_high_u8(v41, v41)), vmull_high_u8(v43, v43)), vmull_high_u8(v45, v45)), vmull_high_u8(v47, v47)), vmull_high_u8(v48, v48));
          }
          else
          {
            v49.i32[1] = 0;
            v24.i32[1] = 0;
            v26 = 0uLL;
            v50 = 0uLL;
          }
          v51 = (uint32x4_t)vaddq_s32(vaddq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vmull_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v37.i8)), vmull_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v35.i8)), vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v39.i8)), vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v41.i8)), vmull_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v43.i8)), vmull_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v45.i8)), vmull_u8(*(uint8x8_t *)v47.i8, *(uint8x8_t *)v47.i8)), vmull_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v48.i8)), v25), vaddq_s32(v26, v50));
          v52 = vadd_s32(v49, v24);
          v52.i32[0] = vpadd_s32(v52, v52).u32[0];
          *a6++ = v52.i32[0];
          v51.i64[0] = vaddlvq_u32(v51);
          *(_QWORD *)(a7 + v21) = v51.i64[0];
          v7 += (v51.i64[0] - (unint64_t)((v52.i32[0] * v52.i32[0]) >> 8) + 128) >> 8;
          v22 += 16;
          v23 -= 16;
          v21 += 8;
        }
        while (v22 < a3);
        a7 += v21;
      }
      a1 += v10;
      v8 += 16;
      v19 += v11;
      a5 += v11;
      v12 += v10;
      v13 += v10;
      v14 += v10;
      v15 += v10;
      v16 += v10;
      v17 += v10;
      v18 += v10;
      v20 += v10;
    }
    while (v8 < a4);
  }
  return (v7 + ((a4 * a3) >> 9)) / (unint64_t)((uint64_t)(a4 * a3) >> 8);
}

uint64_t sub_1B688C540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x8_t *v20;
  uint8x8_t *v21;

  v6 = a5 * a3;
  v7 = a5 * a4;
  v8 = a6 + a5;
  if (a6 + a5 > 15)
  {
    v20 = (uint8x8_t *)(a1 + v6);
    v21 = (uint8x8_t *)(a2 + v7);
    v15 = 0uLL;
    v14 = 0uLL;
    v13 = 0uLL;
    v12 = 0uLL;
  }
  else
  {
    v9 = a6 + (uint64_t)a5;
    v10 = a3 * v9;
    v11 = a4 * v9;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    do
    {
      v16 = *(uint8x16_t *)(a1 + v6);
      v17 = *(uint8x16_t *)(a1 + v10);
      v18 = *(uint8x16_t *)(a2 + v7);
      v19 = *(uint8x16_t *)(a2 + v11);
      v12 = (int16x8_t)vabal_u8((uint16x8_t)v12, *(uint8x8_t *)v16.i8, *(uint8x8_t *)v18.i8);
      v13 = (int16x8_t)vabal_u8((uint16x8_t)v13, *(uint8x8_t *)v17.i8, *(uint8x8_t *)v19.i8);
      v14 = (int16x8_t)vabal_high_u8((uint16x8_t)v14, v16, v18);
      v15 = (int16x8_t)vabal_high_u8((uint16x8_t)v15, v17, v19);
      v8 += 2 * a6;
      a1 += 2 * a6 * a3;
      a2 += 2 * a6 * a4;
    }
    while (v8 < 16);
    v20 = (uint8x8_t *)(a1 + v6);
    v21 = (uint8x8_t *)(a2 + v7);
  }
  if (v8 - a6 <= 15)
  {
    v12 = (int16x8_t)vabal_u8((uint16x8_t)v12, *v20, *v21);
    v14 = (int16x8_t)vabal_high_u8((uint16x8_t)v14, *(uint8x16_t *)v20->i8, *(uint8x16_t *)v21->i8);
  }
  return vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(v13, v15), vaddq_s16(v14, v12)));
}

uint64_t sub_1B688C618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v12 = sub_1B688C540(a1, a2, a3, a4, a5, a6);
  v13 = sub_1B688C540(a1 + 16, a2 + 16, a3, a4, a5, a6) + v12;
  v14 = a1 + 16 * a3;
  v15 = a2 + 16 * a3;
  v16 = v13 + sub_1B688C540(v14, v15, a3, a4, a5, a6);
  return v16 + sub_1B688C540(v14 + 16, v15 + 16, a3, a4, a5, a6);
}

uint64_t sub_1B688C6D0(uint64_t result, uint64_t a2, int a3, int a4, _QWORD *a5, uint64_t a6, int32x2_t *a7, uint64_t a8, int *a9, _QWORD *a10)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  const __int16 *v17;
  unsigned __int128 v18;
  const __int16 *v19;
  unsigned __int128 v20;
  const __int16 *v21;
  unsigned __int128 v22;
  const __int16 *v23;
  unsigned __int128 v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int v37;

  if (a4 >= 1)
  {
    v10 = 0;
    v11 = result + 12 * a2;
    v12 = 16 * a2;
    v13 = result + 8 * a2;
    v14 = result + 4 * a2;
    do
    {
      if (a3 >= 1)
      {
        v15 = 0;
        for (i = 0; i < a3; i += 16)
        {
          v17 = (const __int16 *)(v14 + v15);
          v18 = (unsigned __int128)vld2q_s16(v17);
          v19 = (const __int16 *)(result + v15);
          v20 = (unsigned __int128)vld2q_s16(v19);
          v21 = (const __int16 *)(v13 + v15);
          v22 = (unsigned __int128)vld2q_s16(v21);
          v23 = (const __int16 *)(v11 + v15);
          v24 = (unsigned __int128)vld2q_s16(v23);
          v25 = vrshrq_n_u16((uint16x8_t)v20, 6uLL);
          v26 = vrshrq_n_u16((uint16x8_t)v18, 6uLL);
          v27 = vrshrq_n_u16((uint16x8_t)v22, 6uLL);
          v28 = vrshrq_n_u16((uint16x8_t)v24, 6uLL);
          v29 = (int32x4_t)vpadalq_u16(vpaddlq_u16(v26), v25);
          v30 = (int32x4_t)vpadalq_u16(vpaddlq_u16(v28), v27);
          v31 = vaddq_s32(v30, v29);
          v32 = (uint16x8_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u32((uint32x4_t)v29, 2uLL), (int8x16_t)xmmword_1B6917BC0);
          v33 = (uint16x8_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u32((uint32x4_t)v30, 2uLL), (int8x16_t)xmmword_1B6917BC0);
          *a10 += vaddvq_s32(vshlq_n_s32(v31, 2uLL));
          v34 = vshlq_n_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabdl_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v32.i8), *(uint16x4_t *)v25.i8, *(uint16x4_t *)v32.i8), *(uint16x4_t *)v27.i8, *(uint16x4_t *)v33.i8), *(uint16x4_t *)v28.i8, *(uint16x4_t *)v33.i8), 2uLL);
          v35 = (int32x4_t)vabal_high_u16(vabal_high_u16(vabal_high_u16(vabdl_high_u16(v26, v32), v25, v32), v27, v33), v28, v33);
          v27.i32[0] = vaddvq_s32(v34);
          v36 = vshlq_n_s32(v35, 2uLL);
          v25.i32[0] = vaddvq_s32(v36);
          *a5++ = vshlq_n_s32(vpaddq_s32(v31, v31), 2uLL).u64[0];
          *a7++ = vzip1_s32(*(int32x2_t *)v27.i8, *(int32x2_t *)v25.i8);
          v36.i32[0] = vaddvq_s32(vaddq_s32(v36, v34));
          v37 = *a9 + v36.i32[0];
          if (__CFADD__(*a9, v36.i32[0]))
            v37 = -1;
          *a9 = v37;
          v15 += 32;
        }
      }
      v10 += 8;
      v11 += v12;
      v13 += v12;
      v14 += v12;
      result += v12;
    }
    while (v10 < a4);
  }
  return result;
}

uint64_t sub_1B688C80C(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int16x4_t *a7, uint64_t a8, int *a9, uint64_t *a10)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  const __int16 *v16;
  const __int16 *v17;
  unsigned __int128 v18;
  unsigned __int128 v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int32x4_t v22;
  unsigned int v23;
  uint16x8_t v24;
  int32x4_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  int64x2_t v32;
  int16x8_t v33;
  int v34;

  if (a4 >= 1)
  {
    v10 = 0;
    v11 = (int)(a3 & 0xFFFFFFE0);
    v12 = 16 * a2;
    v13 = result + 8 * a2;
    do
    {
      if ((int)v11 >= 1)
      {
        v14 = 0;
        for (i = 0; i < v11; i += 32)
        {
          v16 = (const __int16 *)(v13 + v14);
          v17 = (const __int16 *)(result + v14);
          v18 = (unsigned __int128)vld4q_s16(v16);
          v19 = (unsigned __int128)vld4q_s16(v17);
          v20 = vrshrq_n_u16((uint16x8_t)v19, 6uLL);
          v21 = vrshrq_n_u16((uint16x8_t)v18, 6uLL);
          v22 = vshlq_n_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v21), v20), 4uLL);
          v23 = vaddvq_s32(v22);
          v24 = (uint16x8_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u32((uint32x4_t)v22, 6uLL), (int8x16_t)xmmword_1B6917BC0);
          v25 = vshlq_n_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v21, v24), v20, v24)), 4uLL);
          *a10 += v23;
          *a7++ = vmovn_s32(v25);
          v25.i32[0] = vaddvq_s32(v25);
          v26 = *a9 + v25.i32[0];
          if (__CFADD__(*a9, v25.i32[0]))
            v26 = -1;
          *a9 = v26;
          v14 += 64;
        }
      }
      if ((int)v11 < a3)
      {
        v27 = *a10;
        v28 = 2 * v11;
        v29 = (int)(a3 & 0xFFFFFFE0);
        do
        {
          v30.i16[0] = *(_WORD *)(result + v28);
          v30.i16[1] = *(_WORD *)(result + v28 + 8);
          v30.i16[2] = *(_WORD *)(v13 + v28);
          v30.i16[3] = *(_WORD *)(v13 + v28 + 8);
          v30.i16[4] = *(_WORD *)(result + v28 + 16);
          v30.i16[5] = *(_WORD *)(result + v28 + 24);
          v30.i16[6] = *(_WORD *)(v13 + v28 + 16);
          v30.i16[7] = *(_WORD *)(v13 + v28 + 24);
          v31 = vrshrq_n_u16(v30, 6uLL);
          v32 = vshlq_n_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(v31)), 4uLL);
          v33 = (int16x8_t)vshlq_n_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vabdq_u16(v31, (uint16x8_t)vqtbl1q_s8((int8x16_t)vrshrq_n_u64((uint64x2_t)v32, 6uLL), (int8x16_t)xmmword_1B6917A50)))), 4uLL);
          a7->i32[0] = v33.i16[0] & 0xFFF0 | (v33.u16[4] << 16);
          a7 = (int16x4_t *)((char *)a7 + 4);
          v33.i16[0] = vaddvq_s16(v33);
          v27 += vaddvq_s64(v32);
          v34 = *a9 + v33.u16[0];
          if (__CFADD__(*a9, v33.u16[0]))
            v34 = -1;
          *a9 = v34;
          v29 += 16;
          v28 += 32;
        }
        while (v29 < a3);
        *a10 = v27;
      }
      v10 += 8;
      v13 += v12;
      result += v12;
    }
    while (v10 < a4);
  }
  return result;
}

uint8x16_t sub_1B688C9BC(int a1, uint64_t a2, __int32 *a3, uint64_t a4, __int32 *a5, uint64_t a6, _DWORD *a7)
{
  int v7;
  uint8x16_t v8;
  __int32 *v9;
  __int32 *v10;
  __int32 *v11;
  uint8x16_t v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  uint8x16_t result;
  _DWORD *v17;
  _DWORD *v18;

  v7 = a1 + 4;
  do
  {
    v8.i32[0] = *a3;
    v9 = (__int32 *)((char *)a3 + a2);
    v8.i32[1] = *v9;
    v10 = (__int32 *)((char *)v9 + a2);
    v8.i32[2] = *v10;
    v11 = (__int32 *)((char *)v10 + a2);
    v8.i32[3] = *v11;
    a3 = (__int32 *)((char *)v11 + a2);
    v12.i32[0] = *a5;
    v13 = (__int32 *)((char *)a5 + a4);
    v12.i32[1] = *v13;
    v14 = (__int32 *)((char *)v13 + a4);
    v12.i32[2] = *v14;
    v15 = (__int32 *)((char *)v14 + a4);
    v12.i32[3] = *v15;
    a5 = (__int32 *)((char *)v15 + a4);
    result = vrhaddq_u8(v8, v12);
    *a7 = result.i32[0];
    *(_DWORD *)((char *)a7 + a6) = result.i32[1];
    v17 = (_DWORD *)((char *)a7 + a6 + a6);
    *v17 = result.i32[2];
    v18 = (_DWORD *)((char *)v17 + a6);
    v7 -= 4;
    *v18 = result.i32[3];
    a7 = (_DWORD *)((char *)v18 + a6);
  }
  while (v7 > 4);
  return result;
}

uint8x8_t sub_1B688CA1C(int a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6, uint8x8_t *a7)
{
  int v7;
  uint8x8_t v8;
  uint8x8_t *v9;
  uint8x8_t v10;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t *v14;
  uint8x8_t v15;
  uint8x8_t *v16;
  uint8x8_t v17;
  uint8x8_t *v18;
  uint8x8_t *v19;
  uint8x8_t result;

  v7 = a1 + 4;
  do
  {
    v8 = *(uint8x8_t *)((char *)a3 + a2);
    v9 = (uint8x8_t *)((char *)a3 + a2 + a2);
    v10 = *v9;
    v11 = (uint8x8_t *)((char *)v9 + a2);
    v12 = *v11;
    v13 = *(uint8x8_t *)((char *)a5 + a4);
    v14 = (uint8x8_t *)((char *)a5 + a4 + a4);
    v15 = *v14;
    v16 = (uint8x8_t *)((char *)v14 + a4);
    v17 = *v16;
    *a7 = vrhadd_u8(*a3, *a5);
    *(uint8x8_t *)((char *)a7 + a6) = vrhadd_u8(v8, v13);
    v18 = (uint8x8_t *)((char *)a7 + a6 + a6);
    *v18 = vrhadd_u8(v10, v15);
    v19 = (uint8x8_t *)((char *)v18 + a6);
    v7 -= 4;
    result = vrhadd_u8(v12, v17);
    *v19 = result;
    a3 = (uint8x8_t *)((char *)v11 + a2);
    a5 = (uint8x8_t *)((char *)v16 + a4);
    a7 = (uint8x8_t *)((char *)v19 + a6);
  }
  while (v7 > 4);
  return result;
}

uint8x16_t sub_1B688CAA0(int a1, uint64_t a2, uint8x16_t *a3, uint64_t a4, uint8x16_t *a5, uint64_t a6, uint8x16_t *a7)
{
  int v7;
  uint8x16_t *v8;
  uint8x16_t v9;
  uint8x16_t *v10;
  uint8x16_t v11;
  uint8x16_t *v12;
  uint8x16_t v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x16_t v16;
  uint8x16_t *v17;
  uint8x16_t *v18;
  uint8x16_t result;

  v7 = a1 + 4;
  do
  {
    v8 = (uint8x16_t *)((char *)a3 + a2 + a2);
    v9 = *v8;
    v10 = (uint8x16_t *)((char *)v8 + a2);
    v11 = *v10;
    v12 = (uint8x16_t *)((char *)a5 + a4 + a4);
    v13 = *v12;
    v14 = (uint8x16_t *)((char *)v12 + a4);
    v15 = *v14;
    v16 = vrhaddq_u8(*(uint8x16_t *)((char *)a3 + a2), *(uint8x16_t *)((char *)a5 + a4));
    *a7 = vrhaddq_u8(*a3, *a5);
    *(uint8x16_t *)((char *)a7 + a6) = v16;
    v17 = (uint8x16_t *)((char *)a7 + a6 + a6);
    *v17 = vrhaddq_u8(v9, v13);
    v18 = (uint8x16_t *)((char *)v17 + a6);
    v7 -= 4;
    result = vrhaddq_u8(v11, v15);
    *v18 = result;
    a3 = (uint8x16_t *)((char *)v10 + a2);
    a5 = (uint8x16_t *)((char *)v14 + a4);
    a7 = (uint8x16_t *)((char *)v18 + a6);
  }
  while (v7 > 4);
  return result;
}

uint8x16_t sub_1B688CB24(int a1, uint64_t a2, uint8x16_t *a3, uint64_t a4, uint8x16_t *a5, uint64_t a6, uint8x16_t *a7)
{
  int v7;
  uint8x16_t result;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t *v12;

  v7 = a1 + 2;
  do
  {
    result = vrhaddq_u8(*a3, *a5);
    v9 = vrhaddq_u8(a3[1], a5[1]);
    v10 = vrhaddq_u8(*(uint8x16_t *)((char *)a3 + a2), *(uint8x16_t *)((char *)a5 + a4));
    v11 = vrhaddq_u8(*(uint8x16_t *)((char *)&a3[1] + a2), *(uint8x16_t *)((char *)&a5[1] + a4));
    *a7 = result;
    a7[1] = v9;
    v12 = (uint8x16_t *)((char *)a7 + a6);
    v7 -= 2;
    *v12 = v10;
    v12[1] = v11;
    a3 = (uint8x16_t *)((char *)a3 + a2 + a2);
    a5 = (uint8x16_t *)((char *)a5 + a4 + a4);
    a7 = (uint8x16_t *)((char *)a7 + a6 + a6);
  }
  while (v7 > 2);
  return result;
}

uint8x16_t sub_1B688CB78(int a1, uint64_t a2, uint8x16_t *a3, uint64_t a4, uint8x16_t *a5, uint64_t a6, uint8x16_t *a7)
{
  int v7;
  uint8x16_t *v8;
  uint8x16_t *v9;
  uint8x16_t *v10;
  uint8x16_t result;
  uint8x16_t v12;
  uint8x16_t v13;
  uint8x16_t v14;

  v7 = a1 + 1;
  v8 = a3 + 2;
  v9 = a5 + 2;
  v10 = a7 + 2;
  do
  {
    result = vrhaddq_u8(v8[-2], v9[-2]);
    v12 = vrhaddq_u8(v8[-1], v9[-1]);
    v13 = vrhaddq_u8(*v8, *v9);
    v14 = vrhaddq_u8(v8[1], v9[1]);
    v10[-2] = result;
    v10[-1] = v12;
    --v7;
    *v10 = v13;
    v10[1] = v14;
    v8 = (uint8x16_t *)((char *)v8 + a2);
    v9 = (uint8x16_t *)((char *)v9 + a4);
    v10 = (uint8x16_t *)((char *)v10 + a6);
  }
  while (v7 > 1);
  return result;
}

int8x8_t sub_1B688CBCC(int a1, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6, int8x8_t *a7)
{
  int v7;
  uint8x8_t *v8;
  uint8x8_t v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  int16x8_t v14;
  int8x8_t v15;
  int8x8_t *v16;
  int8x8_t *v17;
  int8x8_t result;

  v7 = a1 + 4;
  do
  {
    v8 = (uint8x8_t *)((char *)a3 + a2 + a2);
    v9 = *v8;
    v10 = (uint8x8_t *)((char *)v8 + a2);
    v11 = (uint8x8_t *)((char *)a5 + a4 + a4);
    v12 = *v11;
    v13 = (uint8x8_t *)((char *)v11 + a4);
    v14 = (int16x8_t)vsubw_u8(vshll_n_u8(*v10, 1uLL), *v13);
    v15 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)((char *)a3 + a2), 1uLL), *(uint8x8_t *)((char *)a5 + a4)));
    *a7 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*a3, 1uLL), *a5));
    *(int8x8_t *)((char *)a7 + a6) = v15;
    v16 = (int8x8_t *)((char *)a7 + a6 + a6);
    *v16 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(v9, 1uLL), v12));
    v17 = (int8x8_t *)((char *)v16 + a6);
    v7 -= 4;
    result = vqmovun_s16(v14);
    *v17 = result;
    a3 = (uint8x8_t *)((char *)v10 + a2);
    a5 = (uint8x8_t *)((char *)v13 + a4);
    a7 = (int8x8_t *)((char *)v17 + a6);
  }
  while (v7 > 4);
  return result;
}

uint64_t sub_1B688CC70(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  char v8;
  char v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  int8x8_t *v12;
  int8x8_t v13;
  int8x8_t v14;
  int8x8_t v15;
  BOOL v16;

  do
  {
    v7 = 0;
    v8 = 1;
    do
    {
      v9 = v8;
      v10 = (uint8x8_t *)(a3 + v7);
      v11 = (uint8x8_t *)(a5 + v7);
      v12 = (int8x8_t *)(a7 + v7);
      v13 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)((char *)v10 + a2), 1uLL), *(uint8x8_t *)((char *)v11 + a4)));
      v14 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)((char *)v10 + 2 * a2), 1uLL), *(uint8x8_t *)((char *)v11 + 2 * a4)));
      v15 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)((char *)v10 + 3 * a2), 1uLL), *(uint8x8_t *)((char *)v11 + 3 * a4)));
      *v12 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*v10, 1uLL), *v11));
      *(int8x8_t *)((char *)v12 + a6) = v13;
      *(int8x8_t *)((char *)v12 + 2 * a6) = v14;
      *(int8x8_t *)((char *)v12 + 3 * a6) = v15;
      v7 = 8;
      v8 = 0;
    }
    while ((v9 & 1) != 0);
    a3 += 4 * a2;
    a5 += 4 * a4;
    a7 += 4 * a6;
    v16 = __OFSUB__((_DWORD)result, 4);
    result = (result - 4);
  }
  while (!(((int)result < 0) ^ v16 | ((_DWORD)result == 0)));
  return result;
}

uint64_t sub_1B688CD38(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  BOOL v23;

  v7 = 4 * a2;
  v8 = a7 + 3 * a6;
  v9 = a7 + 2 * a6;
  v10 = 4 * a4;
  v11 = 4 * a6;
  v12 = a7 + a6;
  v13 = a5 + 3 * a4;
  v14 = a5 + a4;
  v15 = a3 + 3 * a2;
  v16 = a3 + a2;
  v17 = a5 + 2 * a4;
  v18 = a3 + 2 * a2;
  do
  {
    v19 = -8;
    do
    {
      v20 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v16 + v19 + 8), 1uLL), *(uint8x8_t *)(v14 + v19 + 8)));
      v21 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v18 + v19 + 8), 1uLL), *(uint8x8_t *)(v17 + v19 + 8)));
      v22 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v15 + v19 + 8), 1uLL), *(uint8x8_t *)(v13 + v19 + 8)));
      *(int8x8_t *)(a7 + v19 + 8) = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(a3 + v19 + 8), 1uLL), *(uint8x8_t *)(a5 + v19 + 8)));
      *(int8x8_t *)(v12 + v19 + 8) = v20;
      *(int8x8_t *)(v9 + v19 + 8) = v21;
      *(int8x8_t *)(v8 + v19 + 8) = v22;
      v19 += 8;
    }
    while (v19 < 0x18);
    a3 += v7;
    a5 += v10;
    a7 += v11;
    v8 += v11;
    v9 += v11;
    v12 += v11;
    v13 += v10;
    v17 += v10;
    v14 += v10;
    v15 += v7;
    v18 += v7;
    v16 += v7;
    v23 = __OFSUB__((_DWORD)result, 4);
    result = (result - 4);
  }
  while (!(((int)result < 0) ^ v23 | ((_DWORD)result == 0)));
  return result;
}

uint64_t sub_1B688CE58(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  BOOL v23;

  v7 = 4 * a2;
  v8 = a7 + 3 * a6;
  v9 = a7 + 2 * a6;
  v10 = 4 * a4;
  v11 = 4 * a6;
  v12 = a7 + a6;
  v13 = a5 + 3 * a4;
  v14 = a5 + a4;
  v15 = a3 + 3 * a2;
  v16 = a3 + a2;
  v17 = a5 + 2 * a4;
  v18 = a3 + 2 * a2;
  do
  {
    v19 = -8;
    do
    {
      v20 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v16 + v19 + 8), 1uLL), *(uint8x8_t *)(v14 + v19 + 8)));
      v21 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v18 + v19 + 8), 1uLL), *(uint8x8_t *)(v17 + v19 + 8)));
      v22 = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(v15 + v19 + 8), 1uLL), *(uint8x8_t *)(v13 + v19 + 8)));
      *(int8x8_t *)(a7 + v19 + 8) = vqmovun_s16((int16x8_t)vsubw_u8(vshll_n_u8(*(uint8x8_t *)(a3 + v19 + 8), 1uLL), *(uint8x8_t *)(a5 + v19 + 8)));
      *(int8x8_t *)(v12 + v19 + 8) = v20;
      *(int8x8_t *)(v9 + v19 + 8) = v21;
      *(int8x8_t *)(v8 + v19 + 8) = v22;
      v19 += 8;
    }
    while (v19 < 0x38);
    a3 += v7;
    a5 += v10;
    a7 += v11;
    v8 += v11;
    v9 += v11;
    v12 += v11;
    v13 += v10;
    v17 += v10;
    v14 += v10;
    v15 += v7;
    v18 += v7;
    v16 += v7;
    v23 = __OFSUB__((_DWORD)result, 4);
    result = (result - 4);
  }
  while (!(((int)result < 0) ^ v23 | ((_DWORD)result == 0)));
  return result;
}

BOOL sub_1B688CF78(int a1, unsigned int a2, unsigned int a3, __int32 a4, int16x4_t *a5, uint64_t a6, _QWORD *a7, uint64_t a8, double a9, double a10, double a11, uint16x4_t a12, int32x4_t *a13, uint64_t a14)
{
  uint32x4_t v14;
  int32x4_t v15;
  int32x4_t v17;
  int32x4_t v18;
  int8x8_t v19;
  int16x4_t v20;
  uint16x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;

  if (a1 < 1)
  {
    v19 = 0;
  }
  else
  {
    v14 = (uint32x4_t)vdupq_n_s32(a2);
    v15 = vdupq_n_s32(-a3);
    a12.i32[0] = a4;
    v17 = vdupq_n_s32(a3);
    v18 = vdupq_n_s32(8 - a3);
    v19 = 0;
    do
    {
      v20 = vcltz_s16(*a5);
      v21 = (uint16x4_t)vabs_s16(*a5);
      v22 = (int32x4_t)vmull_lane_u16(v21, a12, 0);
      v23 = vshlq_s32((int32x4_t)vmlal_lane_u16(v14, v21, a12, 0), v15);
      v24 = vshlq_s32(vsubq_s32(v22, vshlq_s32(v23, v17)), v18);
      *(int16x4_t *)v23.i8 = vsub_s16((int16x4_t)veor_s8((int8x8_t)vqmovn_s32(v23), (int8x8_t)v20), v20);
      *a7 = v23.i64[0];
      *a13 = v24;
      v19 = vorr_s8(*(int8x8_t *)v23.i8, v19);
      a5 = (int16x4_t *)((char *)a5 + 2 * a6);
      a7 = (_QWORD *)((char *)a7 + 2 * a8);
      a13 = (int32x4_t *)((char *)a13 + 4 * a14);
      --a1;
    }
    while (a1);
  }
  return *(_QWORD *)&v19 != 0;
}

BOOL sub_1B688D020(int a1, unsigned int a2, unsigned int a3, __int32 a4, int16x8_t *a5, uint64_t a6, int8x16_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, uint16x4_t a14, int32x4_t *a15, uint64_t a16)
{
  uint32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t *v20;
  int8x16_t v21;
  int16x8_t v22;
  uint16x8_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;

  if (a1 < 1)
  {
    v21 = 0uLL;
  }
  else
  {
    v16 = (uint32x4_t)vdupq_n_s32(a2);
    v17 = vdupq_n_s32(-a3);
    v18 = vdupq_n_s32(a3);
    v19 = vdupq_n_s32(8 - a3);
    a14.i32[0] = a4;
    v20 = a15 + 1;
    v21 = 0uLL;
    do
    {
      v22 = vcltzq_s16(*a5);
      v23 = (uint16x8_t)vabsq_s16(*a5);
      v24 = (int32x4_t)vmull_lane_u16(*(uint16x4_t *)v23.i8, a14, 0);
      v25 = (int32x4_t)vmull_high_lane_u16(v23, a14, 0);
      v26 = (int32x4_t)vmlal_high_lane_u16(v16, v23, a14, 0);
      v27 = vshlq_s32((int32x4_t)vmlal_lane_u16(v16, *(uint16x4_t *)v23.i8, a14, 0), v17);
      v28 = vshlq_s32(v26, v17);
      v29 = (int8x16_t)vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vqmovn_high_s32(vqmovn_s32(v27), v28), (int8x16_t)v22), v22);
      *a7 = v29;
      v20[-1] = vshlq_s32(vsubq_s32(v24, vshlq_s32(v27, v18)), v19);
      *v20 = vshlq_s32(vsubq_s32(v25, vshlq_s32(v28, v18)), v19);
      v21 = vorrq_s8(v29, v21);
      a5 = (int16x8_t *)((char *)a5 + 2 * a6);
      a7 = (int8x16_t *)((char *)a7 + 2 * a8);
      v20 = (int32x4_t *)((char *)v20 + 4 * a16);
      --a1;
    }
    while (a1);
  }
  return vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)) != 0;
}

BOOL sub_1B688D0F4(int a1, unsigned int a2, unsigned int a3, __int32 a4, int16x8_t *a5, uint64_t a6, int8x16_t *a7, uint64_t a8, double a9, double a10, double a11, uint16x4_t a12, int32x4_t *a13, uint64_t a14)
{
  uint32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int16x8_t *v18;
  int32x4_t *v19;
  int8x16_t *v20;
  int8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;

  if (a1 < 1)
  {
    v21 = 0uLL;
  }
  else
  {
    v14 = (uint32x4_t)vdupq_n_s32(a2);
    v15 = vdupq_n_s32(-a3);
    v16 = vdupq_n_s32(a3);
    a12.i32[0] = a4;
    v17 = vdupq_n_s32(8 - a3);
    v18 = a5 + 1;
    v19 = a13 + 2;
    v20 = a7 + 1;
    v21 = 0uLL;
    do
    {
      v22 = v18[-1];
      v23 = vcltzq_s16(v22);
      v24 = vcltzq_s16(*v18);
      v25 = (uint16x8_t)vabsq_s16(v22);
      v26 = (uint16x8_t)vabsq_s16(*v18);
      v27 = (int32x4_t)vmull_lane_u16(*(uint16x4_t *)v25.i8, a12, 0);
      v28 = (int32x4_t)vmlal_lane_u16(v14, *(uint16x4_t *)v25.i8, a12, 0);
      v29 = (int32x4_t)vmull_high_lane_u16(v25, a12, 0);
      v30 = (int32x4_t)vmlal_high_lane_u16(v14, v25, a12, 0);
      v31 = (int32x4_t)vmull_lane_u16(*(uint16x4_t *)v26.i8, a12, 0);
      v32 = (int32x4_t)vmlal_lane_u16(v14, *(uint16x4_t *)v26.i8, a12, 0);
      v33 = (int32x4_t)vmull_high_lane_u16(v26, a12, 0);
      v34 = (int32x4_t)vmlal_high_lane_u16(v14, v26, a12, 0);
      v35 = vshlq_s32(v28, v15);
      v36 = vshlq_s32(v30, v15);
      v37 = vshlq_s32(v32, v15);
      v38 = vshlq_s32(v34, v15);
      v39 = (int8x16_t)vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vqmovn_high_s32(vqmovn_s32(v35), v36), (int8x16_t)v23), v23);
      v40 = (int8x16_t)vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vqmovn_high_s32(vqmovn_s32(v37), v38), (int8x16_t)v24), v24);
      v20[-1] = v39;
      *v20 = v40;
      v19[-2] = vshlq_s32(vsubq_s32(v27, vshlq_s32(v35, v16)), v17);
      v19[-1] = vshlq_s32(vsubq_s32(v29, vshlq_s32(v36, v16)), v17);
      *v19 = vshlq_s32(vsubq_s32(v31, vshlq_s32(v37, v16)), v17);
      v19[1] = vshlq_s32(vsubq_s32(v33, vshlq_s32(v38, v16)), v17);
      v21 = vorrq_s8(vorrq_s8(v39, v21), v40);
      v18 = (int16x8_t *)((char *)v18 + 2 * a6);
      v19 = (int32x4_t *)((char *)v19 + 4 * a14);
      v20 = (int8x16_t *)((char *)v20 + 2 * a8);
      --a1;
    }
    while (a1);
  }
  return vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)) != 0;
}

uint64_t sub_1B688D228(int a1, unsigned int a2, unsigned int a3, __int32 a4, int16x8_t *a5, uint64_t a6, int8x16_t *a7, uint64_t a8, double a9, double a10, double a11, uint16x4_t a12, int32x4_t *a13, uint64_t a14)
{
  double v22;
  double v23;
  double v24;
  uint16x4_t v25;
  _BOOL4 v27;

  v27 = sub_1B688D0F4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return v27 | sub_1B688D0F4(a1, a2, a3, a4, a5 + 2, a6, a7 + 2, a8, v22, v23, v24, v25, a13 + 4, a14);
}

uint64_t sub_1B688D2CC(uint64_t result, int a2, __int32 a3, int16x4_t *a4, uint64_t a5, int16x4_t *a6, uint64_t a7, double a8, int16x4_t a9)
{
  int v9;
  int32x4_t v10;
  int16x4_t v11;

  if ((int)result >= 1)
  {
    v9 = 0;
    v10 = vdupq_n_s32(-a2);
    a9.i32[0] = a3;
    do
    {
      v11 = vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)((char *)a4 + 2 * a5), a9, 0), v10));
      *a6 = vqmovn_s32(vrshlq_s32(vmull_lane_s16(*a4, a9, 0), v10));
      *(int16x4_t *)((char *)a6 + 2 * a7) = v11;
      v9 += 2;
      a4 = (int16x4_t *)((char *)a4 + 4 * a5);
      a6 = (int16x4_t *)((char *)a6 + 4 * a7);
    }
    while (v9 < (int)result);
  }
  return result;
}

uint64_t sub_1B688D334(uint64_t result, int a2, __int32 a3, int16x4_t *a4, uint64_t a5, int16x8_t *a6, uint64_t a7, double a8, int16x4_t a9)
{
  int v9;
  int32x4_t v10;
  int16x8_t v11;

  if ((int)result >= 1)
  {
    v9 = 0;
    v10 = vdupq_n_s32(-a2);
    a9.i32[0] = a3;
    do
    {
      v11 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*(int16x4_t *)((char *)a4 + 2 * a5), a9, 0), v10)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)&a4->i8[2 * a5], a9, 0), v10));
      *a6 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*a4, a9, 0), v10)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)a4->i8, a9, 0), v10));
      *(int16x8_t *)((char *)a6 + 2 * a7) = v11;
      v9 += 2;
      a4 = (int16x4_t *)((char *)a4 + 4 * a5);
      a6 = (int16x8_t *)((char *)a6 + 4 * a7);
    }
    while (v9 < (int)result);
  }
  return result;
}

uint64_t sub_1B688D3B4(uint64_t result, int a2, __int32 a3, int16x4_t *a4, uint64_t a5, int16x8_t *a6, uint64_t a7, double a8, int16x4_t a9)
{
  int32x4_t v9;
  int16x4_t *v10;
  int16x8_t *v11;
  int16x8_t v12;

  if ((int)result >= 1)
  {
    v9 = vdupq_n_s32(-a2);
    a9.i32[0] = a3;
    v10 = a4 + 2;
    v11 = a6 + 1;
    do
    {
      v12 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*v10, a9, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v10->i8, a9, 0), v9));
      v11[-1] = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(v10[-2], a9, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v10[-2].i8, a9, 0), v9));
      *v11 = v12;
      v10 = (int16x4_t *)((char *)v10 + 2 * a5);
      v11 = (int16x8_t *)((char *)v11 + 2 * a7);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t sub_1B688D424(uint64_t result, int a2, __int32 a3, int16x4_t *a4, uint64_t a5, int16x8_t *a6, uint64_t a7, int16x4_t a8)
{
  int16x4_t *v8;
  int32x4_t v9;
  uint64_t v10;
  int16x8_t *v11;
  uint64_t v12;
  int v13;
  int16x8_t v14;
  int16x4_t *v15;
  int16x8_t *v16;
  int16x8_t v17;

  if ((int)result >= 1)
  {
    a8.i32[0] = a3;
    v8 = a4 + 2;
    v9 = vdupq_n_s32(-a2);
    v10 = 2 * a5;
    v11 = a6 + 1;
    v12 = 2 * a7;
    v13 = result;
    do
    {
      v14 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*v8, a8, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v8->i8, a8, 0), v9));
      v11[-1] = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(v8[-2], a8, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v8[-2].i8, a8, 0), v9));
      *v11 = v14;
      v8 = (int16x4_t *)((char *)v8 + v10);
      v11 = (int16x8_t *)((char *)v11 + v12);
      --v13;
    }
    while (v13);
    v15 = a4 + 6;
    v16 = a6 + 3;
    do
    {
      v17 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(*v15, a8, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v15->i8, a8, 0), v9));
      v16[-1] = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vmull_lane_s16(v15[-2], a8, 0), v9)), vrshlq_s32(vmull_high_lane_s16(*(int16x8_t *)v15[-2].i8, a8, 0), v9));
      *v16 = v17;
      v15 = (int16x4_t *)((char *)v15 + v10);
      v16 = (int16x8_t *)((char *)v16 + v12);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

float sub_1B688D4E8(int a1, uint64_t a2, uint64_t a3, _DWORD *a4, float *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x4_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  float result;

  if (a1 < 1)
  {
    v10 = 0uLL;
    v9 = 0uLL;
  }
  else
  {
    v5 = 0;
    v6 = 8 * a2;
    v7 = a3 + 6 * a2;
    v8 = a3 + 4 * a2;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = a3 + 2 * a2;
    do
    {
      v12 = 0;
      for (i = 0; i < a1; i += 4)
      {
        v14.i64[0] = *(_QWORD *)(a3 + v12);
        v14.i64[1] = *(_QWORD *)(v11 + v12);
        v15.i64[0] = *(_QWORD *)(v8 + v12);
        v15.i64[1] = *(_QWORD *)(v7 + v12);
        v16 = vabsq_s16(v14);
        v17 = vabsq_s16(v15);
        v10 = vaddq_s8(v10, vceqzq_s8(vqmovn_high_s16(vqmovn_s16(v16), v17)));
        v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, (uint16x8_t)v16), (uint16x8_t)v17);
        v12 += 8;
      }
      v5 += 4;
      v7 += v6;
      v8 += v6;
      v11 += v6;
      a3 += v6;
    }
    while (v5 < a1);
  }
  *a4 = a1 * a1 + vaddvq_s8(v10);
  result = COERCE_FLOAT(vaddvq_s32(v9));
  *a5 = result;
  return result;
}

float sub_1B688D5AC(int a1, uint64_t a2, uint64_t a3, _DWORD *a4, float *a5)
{
  int v5;
  uint64_t v6;
  int32x4_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  int16x8_t v12;
  int16x8_t v13;
  float result;

  if (a1 < 1)
  {
    v8 = 0uLL;
    v7 = 0uLL;
  }
  else
  {
    v5 = 0;
    v6 = 4 * a2;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = a3 + 2 * a2;
    do
    {
      v10 = 0;
      for (i = 0; i < a1; i += 8)
      {
        v12 = vabsq_s16(*(int16x8_t *)(a3 + v10));
        v13 = vabsq_s16(*(int16x8_t *)(v9 + v10));
        v8 = vaddq_s8(v8, vceqzq_s8(vqmovn_high_s16(vqmovn_s16(v12), v13)));
        v7 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v7, (uint16x8_t)v12), (uint16x8_t)v13);
        v10 += 16;
      }
      v5 += 2;
      v9 += v6;
      a3 += v6;
    }
    while (v5 < a1);
  }
  *a4 = a1 * a1 + vaddlvq_s8(v8);
  result = COERCE_FLOAT(vaddvq_s32(v7));
  *a5 = result;
  return result;
}

uint64_t sub_1B688D64C(uint64_t *a1, uint64_t a2)
{
  int16x8_t v2;
  int16x8_t v3;

  v2.i64[0] = *a1;
  v2.i64[1] = *(uint64_t *)((char *)a1 + 2 * a2);
  v3.i64[0] = *(uint64_t *)((char *)a1 + 4 * a2);
  v3.i64[1] = *(uint64_t *)((char *)a1 + 6 * a2);
  return (vaddvq_s8(vceqzq_s8(vqmovn_high_s16(vqmovn_s16(v2), v3))) + 16);
}

uint64_t sub_1B688D688(int16x8_t *a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  int8x16_t v4;
  char v5;
  int16x8_t *v6;
  int16x8_t v7;
  int16x8_t *v8;

  v2 = 2 * a2;
  v3 = 1;
  v4 = 0uLL;
  do
  {
    v5 = v3;
    v6 = (int16x8_t *)((char *)a1 + v2 + v2);
    v7 = *v6;
    v8 = (int16x8_t *)((char *)v6 + v2);
    v4 = vaddq_s8(vaddq_s8(v4, vceqzq_s8(vqmovn_high_s16(vqmovn_s16(*a1), *(int16x8_t *)((char *)a1 + 2 * a2)))), vceqzq_s8(vqmovn_high_s16(vqmovn_s16(v7), *v8)));
    a1 = (int16x8_t *)((char *)v8 + v2);
    v3 = 0;
  }
  while ((v5 & 1) != 0);
  return (vaddvq_s8(v4) + 64);
}

uint64_t sub_1B688D6F0(int16x8_t *a1, uint64_t a2)
{
  int8x16_t v2;
  unsigned int v3;

  v2 = 0uLL;
  v3 = -2;
  do
  {
    v2 = vaddq_s8(vaddq_s8(v2, vceqzq_s8(vqmovn_high_s16(vqmovn_s16(*a1), a1[1]))), vceqzq_s8(vqmovn_high_s16(vqmovn_s16(*(int16x8_t *)((char *)a1 + 2 * a2)), *(int16x8_t *)((char *)a1 + 2 * a2 + 16))));
    v3 += 2;
    a1 = (int16x8_t *)((char *)a1 + 2 * a2 + 2 * a2);
  }
  while (v3 < 0xE);
  return (vaddlvq_s8(v2) + 256);
}

uint64_t sub_1B688D74C(int16x8_t *a1, uint64_t a2)
{
  int16x8_t *v2;
  int8x16_t v3;
  int v4;

  v2 = a1 + 2;
  v3 = 0uLL;
  v4 = 32;
  do
  {
    v3 = vaddq_s8(vaddq_s8(v3, vceqzq_s8(vqmovn_high_s16(vqmovn_s16(v2[-2]), v2[-1]))), vceqzq_s8(vqmovn_high_s16(vqmovn_s16(*v2), v2[1])));
    v2 = (int16x8_t *)((char *)v2 + 2 * a2);
    --v4;
  }
  while (v4);
  return (vaddlvq_s8(v3) + 1024);
}

uint64_t sub_1B688D7A4(int16x8_t *a1, int a2, int *a3, _WORD *a4)
{
  unsigned int v4;
  uint64_t result;
  unsigned int v6;

  v4 = vaddlvq_u16((uint16x8_t)vorrq_s8(vbicq_s8(xmmword_1B692BED0[2 * a2 + 1], (int8x16_t)vceqzq_s16(a1[1])), vbicq_s8(xmmword_1B692BED0[2 * a2], (int8x16_t)vceqzq_s16(*a1))));
  if (!v4)
    return 0xFFFFFFFFLL;
  *a4 = v4;
  result = __clz(v4) ^ 0x1FLL;
  v6 = byte_1B692C060[64 * (uint64_t)a2 + result];
  *a3 = v6 & 3;
  a3[1] = v6 >> 2;
  return result;
}

uint64_t sub_1B688D810(uint64_t a1, int a2, unsigned int *a3, _QWORD *a4)
{
  const double *v4;
  const double *v5;
  const double *v6;
  int64x2_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  uint64_t result;
  unsigned int v18;
  float64x2x2_t v19;
  float64x2x2_t v20;
  float64x2x2_t v21;

  v4 = (const double *)(a1 + 32);
  v19 = vld2q_f64(v4);
  v5 = (const double *)(a1 + 64);
  v20 = vld2q_f64(v5);
  v6 = (const double *)(a1 + 96);
  v21 = vld2q_f64(v6);
  v7 = *(int64x2_t *)(a1 + 16);
  v8 = &xmmword_1B692BED0[2 * a2];
  v9 = v8[1];
  v10 = (int16x8_t)vorrq_s8(vbicq_s8(v9, (int8x16_t)vceqzq_s16((int16x8_t)v19.val[0])), vbicq_s8(*v8, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(*(int64x2_t *)a1, v7))));
  v11 = (int16x8_t)vorrq_s8(vbicq_s8(v9, (int8x16_t)vceqzq_s16((int16x8_t)v19.val[1])), vbicq_s8(*v8, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(*(int64x2_t *)a1, v7))));
  v12 = (int16x8_t)vorrq_s8(vbicq_s8(v9, (int8x16_t)vceqzq_s16((int16x8_t)v21.val[0])), vbicq_s8(*v8, (int8x16_t)vceqzq_s16((int16x8_t)v20.val[0])));
  v13 = (int16x8_t)vorrq_s8(vbicq_s8(v9, (int8x16_t)vceqzq_s16((int16x8_t)v21.val[1])), vbicq_s8(*v8, (int8x16_t)vceqzq_s16((int16x8_t)v20.val[1])));
  if (a2 == 1)
  {
    v14 = vpaddq_s16(v10, v11);
    v15 = vpaddq_s16(v12, v13);
  }
  else
  {
    v14 = vpaddq_s16(v10, v12);
    v15 = vpaddq_s16(v11, v13);
  }
  v16 = vpaddq_s16(v14, v15);
  v16.i64[0] = vpaddq_s16(v16, v16).u64[0];
  *a4 = v16.i64[0];
  result = 63 - __clz(v16.u64[0]);
  v18 = byte_1B692C060[64 * (uint64_t)a2 + 16 + (result & 0xF)] + byte_1B692BF30[4 * a2 + ((int)result >> 4)];
  *a3 = v18 & 7;
  a3[1] = v18 >> 3;
  return result;
}

uint64_t sub_1B688D910(int64x2_t *a1, int a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x16_t v7;
  const double *i64;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t result;
  unsigned int v16;
  float64x2x4_t v17;

  v4 = 0;
  v5 = &xmmword_1B692BED0[2 * a2];
  v6 = *v5;
  v7 = v5[1];
  do
  {
    i64 = (const double *)a1[4].i64;
    v17 = vld4q_f64(i64);
    v17.val[0] = (float64x2_t)vpaddq_s16(vpaddq_s16((int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)v17.val[0])), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(*a1, a1[2])))), (int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)v17.val[1])), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(*a1, a1[2]))))), vpaddq_s16((int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)v17.val[2])), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(a1[1], a1[3])))), (int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)v17.val[3])), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(a1[1], a1[3]))))));
    *(_QWORD *)&v17.val[0].f64[0] = vpaddq_s16((int16x8_t)v17.val[0], (int16x8_t)v17.val[0]).u64[0];
    v9 = byte_1B692C120[v4 + 1];
    v10 = byte_1B692C120[v4 + 2];
    v11 = byte_1B692C120[v4 + 3];
    *(_WORD *)(a4 + 2 * byte_1B692C120[v4]) = LOWORD(v17.val[0].f64[0]);
    *(_WORD *)(a4 + 2 * v9) = WORD1(v17.val[0].f64[0]);
    *(_WORD *)(a4 + 2 * v10) = WORD2(v17.val[0].f64[0]);
    *(_WORD *)(a4 + 2 * v11) = HIWORD(v17.val[0].f64[0]);
    a1 += 8;
    v12 = v4 >= 0xC;
    v4 += 4;
  }
  while (!v12);
  v13 = 3;
  while (1)
  {
    v14 = *(_QWORD *)(a4 + 8 * v13);
    if (v14)
      break;
    if (--v13 == -1)
    {
      result = 0;
      goto LABEL_9;
    }
  }
  result = ((v13 << 6) | 0x3F) - __clz(v14);
LABEL_9:
  v16 = byte_1B692C080[result & 0xF] + 4 * byte_1B692C080[(int)result >> 4];
  *a3 = v16 & 0xF;
  a3[1] = v16 >> 4;
  return result;
}

uint64_t sub_1B688DA50(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int64x2_t *v11;
  int16x8_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t result;
  unsigned int v20;
  unsigned int v21;

  LODWORD(v4) = 0;
  v5 = &xmmword_1B692BED0[2 * a2];
  v6 = *v5;
  v7 = v5[1];
  do
  {
    v8 = 0;
    v4 = (int)v4;
    v9 = 1;
    do
    {
      v10 = v4;
      v11 = (int64x2_t *)(a1 + 2 * v8);
      v12 = vpaddq_s16(vpaddq_s16((int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(v11[8], v11[12]))), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(*v11, v11[4])))), (int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(v11[8], v11[12]))), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(*v11, v11[4]))))), vpaddq_s16((int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(v11[9], v11[13]))), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip1q_s64(v11[1], v11[5])))), (int16x8_t)vorrq_s8(vbicq_s8(v7, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(v11[9], v11[13]))), vbicq_s8(v6, (int8x16_t)vceqzq_s16((int16x8_t)vzip2q_s64(v11[1], v11[5]))))));
      v12.i64[0] = vpaddq_s16(v12, v12).u64[0];
      v13 = byte_1B692C150[v10 + 1];
      v14 = byte_1B692C150[v10 + 2];
      v15 = byte_1B692C150[v10 + 3];
      *(_WORD *)(a4 + 2 * byte_1B692C150[v10]) = v12.i16[0];
      v16 = v9;
      *(_WORD *)(a4 + 2 * v13) = v12.i16[1];
      *(_WORD *)(a4 + 2 * v14) = v12.i16[2];
      *(_WORD *)(a4 + 2 * v15) = v12.i16[3];
      v4 = v10 + 4;
      v8 = 16;
      v9 = 0;
    }
    while ((v16 & 1) != 0);
    a1 += 256;
  }
  while ((int)v10 < 60);
  v17 = 15;
  while (1)
  {
    v18 = *(_QWORD *)(a4 + 8 * v17);
    if (v18)
      break;
    if (--v17 == -1)
    {
      result = 0;
      goto LABEL_10;
    }
  }
  result = ((v17 << 6) | 0x3F) - __clz(v18);
LABEL_10:
  v20 = byte_1B692C014[(int)result >> 4];
  v21 = byte_1B692C060[result & 0xF];
  *a3 = v21 & 3 | (4 * (v20 & 7));
  a3[1] = ((v20 >> 1) & 0x7C) + (v21 >> 2);
  return result;
}

uint64_t sub_1B688DBD0(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  int32x4_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  int32x4_t v8;
  int v9;
  int v10;
  int8x16_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  int8x16_t v23;
  uint16x8_t v24;
  uint8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int *v30;
  int32x4_t v31;
  int v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int32x4_t v38;
  int64x2_t v39;
  const double *v40;
  int64x2_t v41;
  uint64_t v42;
  int32x4_t v43;
  uint64_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int16x8_t v50;
  uint8x16_t v51;
  int16x8_t v52;
  int16x8_t v53;
  unint64_t v54;
  uint64_t v55[3];

  v55[2] = *MEMORY[0x1E0C80C00];
  if (a3 < 4)
    return 0xFFFFFFFFLL;
  v4 = 1 << a3;
  if (a3 == 31)
  {
    v5 = 0uLL;
    v6 = 0uLL;
    v7 = 0uLL;
    v8 = 0uLL;
  }
  else
  {
    v9 = 0;
    if (v4 <= 1)
      v10 = 1;
    else
      v10 = 1 << a3;
    v11 = 0uLL;
    v7 = 0uLL;
    v12 = 0uLL;
    v13.i64[0] = 0x1010101010101010;
    v13.i64[1] = 0x1010101010101010;
    v14.i64[0] = 0x101010101010101;
    v14.i64[1] = 0x101010101010101;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = a2;
    v6 = 0uLL;
    do
    {
      v19 = 0;
      v20 = 0uLL;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = (int8x16_t)xmmword_1B6917AA0;
      v24 = 0uLL;
      do
      {
        v25 = *(uint8x16_t *)(v18 + v19);
        v21 = vmlal_u8(v21, *(uint8x8_t *)v25.i8, *(uint8x8_t *)v23.i8);
        v24 = vmlal_u8(v24, *(uint8x8_t *)v25.i8, *(uint8x8_t *)v11.i8);
        v6 = vaddw_u8(v6, *(uint8x8_t *)v25.i8);
        v20 = vmlal_high_u8(v20, v25, (uint8x16_t)v23);
        v22 = vmlal_high_u8(v22, v25, (uint8x16_t)v11);
        v7 = vaddw_high_u8(v7, v25);
        v23 = vaddq_s8(v23, v13);
        v19 += 16;
      }
      while (v19 < v4);
      v15 = (int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v21.i8), v21);
      v12 = (int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v20.i8), v20);
      v17 = (int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v24.i8), v24);
      v16 = (int32x4_t)vaddw_high_u16(vaddw_u16((uint32x4_t)v16, *(uint16x4_t *)v22.i8), v22);
      v11 = vaddq_s8(v11, v14);
      v18 += a1;
      ++v9;
    }
    while (v9 != v10);
    v5 = vaddq_s32(v12, v15);
    v8 = vaddq_s32(v16, v17);
  }
  v26 = 0;
  v27 = vaddvq_s32(v5);
  v28 = vaddvq_s32(v8);
  v29 = vaddvq_s32((int32x4_t)vaddw_high_u16(vaddw_u16(vpaddlq_u16(v6), *(uint16x4_t *)v7.i8), v7));
  v30 = (int *)((char *)&unk_1B692BF3C + 36 * (a3 - 2) + 8);
  do
  {
    v55[v26++ - 1] = *(v30 - 2) * v27 + *(v30 - 1) * (unint64_t)v28 + *v30 * (unint64_t)v29;
    v30 += 3;
  }
  while (v26 != 3);
  v31 = 0uLL;
  if (a3 != 31)
  {
    v32 = 0;
    v33 = vdupq_n_s64(v54);
    v34 = vaddq_s64(v33, v33);
    v35 = vshlq_n_s64(v33, 2uLL);
    v36 = vshlq_n_s64(v33, 3uLL);
    v37 = vdupq_lane_s64(v55[1], 0);
    v38 = 0uLL;
    v39.i64[0] = 0;
    v39.i64[1] = v54;
    v40 = (const double *)v55;
    v41 = (int64x2_t)vld1q_dup_f64(v40);
    v42 = v4;
    if (v4 <= 1)
      v4 = 1;
    v43 = 0uLL;
    do
    {
      v44 = 0;
      v45 = vaddq_s64(v37, v39);
      do
      {
        v46 = vaddq_s64(v45, v34);
        v47 = vaddq_s64(v46, v35);
        v48 = vaddq_s64(v45, v36);
        v49 = vaddq_s64(v46, v36);
        v50 = vuzp1q_s16((int16x8_t)vshrn_high_n_s64(vshrn_n_s64(v45, 0x18uLL), v46, 0x18uLL), (int16x8_t)vshrn_high_n_s64(vshrn_n_s64(vaddq_s64(v45, v35), 0x18uLL), v47, 0x18uLL));
        v51 = *(uint8x16_t *)(a2 + v44);
        v52 = vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v51.i8), v50);
        v53 = vsubq_s16((int16x8_t)vmovl_high_u8(v51), vuzp1q_s16((int16x8_t)vshrn_high_n_s64(vshrn_n_s64(v48, 0x18uLL), v49, 0x18uLL), (int16x8_t)vshrn_high_n_s64(vshrn_n_s64(vaddq_s64(v48, v35), 0x18uLL), vaddq_s64(v47, v36), 0x18uLL)));
        v38 = vmlal_high_s16(vmlal_s16(v38, *(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8), v52, v52);
        v43 = vmlal_high_s16(vmlal_s16(v43, *(int16x4_t *)v53.i8, *(int16x4_t *)v53.i8), v53, v53);
        v44 += 16;
        v45 = vaddq_s64(v48, v36);
      }
      while (v44 < v42);
      v37 = vaddq_s64(v41, v37);
      a2 += a1;
      ++v32;
    }
    while (v32 != v4);
    v31 = vaddq_s32(v38, v43);
  }
  return vaddvq_s32(v31) >> (2 * a3);
}

unsigned __int8 *sub_1B688DE74(unsigned __int8 *result, int a2, int a3, int a4, int a5, int __c, int a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  uint64_t v19;

  if (((a3 | a2) & 0x80000000) == 0)
  {
    v7 = a2 - *((_DWORD *)result + 1);
    v8 = a3 - *((_DWORD *)result + 2);
    v9 = *result;
    if (v7 <= v9 && v8 <= v9)
    {
      v11 = *(_QWORD *)&result[8 * a7 + 136];
      v12 = a5 <= 0 ? *(unsigned __int8 **)&result[8 * a7 + 136] : (unsigned __int8 *)(v11 + 1);
      if (a4)
      {
        v14 = (unint64_t)*v12 >> 2;
        v15 = a4;
        v16 = *(_QWORD *)(v11 + 8 * a5 + 32);
        if (a5)
          v17 = 3;
        else
          v17 = 2;
        v18 = (char *)(v16 + (v7 >> v17) + (int)v14 * (uint64_t)(v8 >> v17));
        v19 = a4;
        do
        {
          --v19;
          result = (unsigned __int8 *)memset(v18, __c, v15);
          v18 += v14;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t sub_1B688DF2C(uint64_t result, int a2, int a3)
{
  char v3;
  __int16 *v4;
  uint64_t v5;
  __int16 v6;
  unsigned int v7;
  __int16 *v8;
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  int v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;

  if (!*(_BYTE *)(result + 163))
  {
    if (a2 < 0)
    {
      if (*(_BYTE *)(result + 176))
      {
        v8 = (__int16 *)(result + 178);
        v9 = *(unsigned __int8 *)(result + 176);
        do
        {
          v10 = *v8++;
          LOWORD(a2) = a2 + v10 + 1;
          --v9;
        }
        while (v9);
        v11 = *(unsigned __int8 *)(result + 176);
      }
      else
      {
        v11 = 0;
      }
      ++*(_BYTE *)(result + 176);
      result += 176;
      *(_WORD *)(result + 2 * v11 + 2) = ~(_WORD)a2;
      v16 = 1 << v11;
      v17 = *(_WORD *)(result + 66);
      v18 = v17 & ~(_WORD)v16;
      v19 = v17 | v16;
      if (!a3)
        v19 = v18;
      *(_WORD *)(result + 66) = v19;
    }
    else
    {
      v3 = *(_BYTE *)(result + 177);
      if (v3)
      {
        v4 = (__int16 *)(result + 210);
        v5 = *(unsigned __int8 *)(result + 177);
        do
        {
          v6 = *v4++;
          LOWORD(a2) = a2 + ~v6;
          --v5;
        }
        while (v5);
        v7 = *(unsigned __int8 *)(result + 177);
      }
      else
      {
        v7 = 0;
      }
      *(_WORD *)(result + 2 * v7 + 210) = a2 - 1;
      v12 = 1 << v7;
      v13 = *(_WORD *)(result + 244);
      v14 = v13 & ~(_WORD)v12;
      v15 = v13 | v12;
      if (!a3)
        v15 = v14;
      *(_WORD *)(result + 244) = v15;
      *(_BYTE *)(result + 177) = v3 + 1;
    }
  }
  return result;
}

uint64_t sub_1B688E00C(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (!*(_BYTE *)(result + 163))
  {
    if (a2 < 0)
    {
      v4 = *(unsigned __int8 *)(result + 176);
      if (*(_BYTE *)(result + 176))
      {
        v5 = 0;
        do
        {
          if (!a2 || (v6 = a2 + *(unsigned __int16 *)(result + 178 + 2 * v5), a2 = v6 + 1, v6 == -1))
          {
            a2 = 0;
            *(_WORD *)(result + 242) &= ~(1 << v5);
          }
          ++v5;
        }
        while (v4 != v5);
      }
    }
    else
    {
      v2 = *(unsigned __int8 *)(result + 177);
      if (*(_BYTE *)(result + 177))
      {
        v3 = 0;
        do
        {
          if (!a2 || (a2 += ~*(unsigned __int16 *)(result + 210 + 2 * v3)) == 0)
          {
            a2 = 0;
            *(_WORD *)(result + 244) &= ~(1 << v3);
          }
          ++v3;
        }
        while (v2 != v3);
      }
    }
  }
  return result;
}

BOOL sub_1B688E0B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  _BOOL8 result;

  v2 = a2[162];
  if ((_DWORD)v2 != a1[162])
    return 0;
  v3 = a2[160];
  if ((_DWORD)v3 != a1[160])
    return 0;
  v4 = a2[161];
  if ((_DWORD)v4 != a1[161])
    return 0;
  if (a2[162])
  {
    v5 = (unsigned __int16 *)(a1 + 128);
    v6 = (unsigned __int16 *)(a2 + 128);
    do
    {
      v8 = *v6++;
      v7 = v8;
      v9 = *v5++;
      if (v7 != v9)
        return 0;
    }
    while (--v2);
  }
  if (a2[160])
  {
    v10 = a1 + 2;
    v11 = a2 + 2;
    do
    {
      v13 = *v11;
      v11 += 4;
      v12 = v13;
      v14 = *v10;
      v10 += 4;
      if (v12 != v14)
        return 0;
    }
    while (--v3);
  }
  if (!a2[161])
    return 1;
  v15 = v4 - 1;
  v16 = a1 + 66;
  v17 = a2 + 66;
  do
  {
    v19 = *v17;
    v17 += 4;
    v18 = v19;
    v21 = *v16;
    v16 += 4;
    v20 = v21;
    v23 = v15-- != 0;
    result = v18 == v20;
  }
  while (v18 == v20 && v23);
  return result;
}

void sub_1B688E170(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  __int16 *v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _WORD *v40;
  __int16 *v41;
  uint64_t v42;
  __int16 v43;
  unsigned __int8 v44;
  BOOL (*v45)(__int16 *, __int16 *);

  if (*(_BYTE *)(a1 + 163))
  {
    v3 = 0;
    v4 = 0;
    v5 = *(unsigned __int16 *)(a1 + 170)
       + 1
       - 2 * *(unsigned __int8 *)(a1 + 168) * (*(unsigned __int16 *)(a1 + 170) + 1);
    v6 = *(unsigned __int16 *)(a1 + 172);
    v7 = *(unsigned __int16 *)(a1 + 174);
    v8 = *(unsigned __int8 *)(a2 + 162) + 1;
    v9 = (__int16 *)(a2 + 128);
    do
    {
      if (((v6 | v7) & 1) != 0)
      {
        v10 = v6 & 1;
        v11 = v5 + *v9;
        if (v11 < 0)
        {
          v13 = a1 + 4 * v4;
          *(_WORD *)v13 = v11;
          *(_BYTE *)(v13 + 2) = v10;
          ++v4;
        }
        else
        {
          v12 = a1 + 4 * v3;
          *(_WORD *)(v12 + 64) = v11;
          *(_BYTE *)(v12 + 66) = v10;
          ++v3;
        }
      }
      v6 >>= 1;
      v7 >>= 1;
      ++v9;
      --v8;
    }
    while (v8);
    *(_BYTE *)(a1 + 160) = v4;
    *(_BYTE *)(a1 + 161) = v3;
    v14 = v4;
    v45 = sub_1B688E448;
    if (v4 < 0x81u)
    {
      v15 = 0;
      v17 = 0;
    }
    else
    {
      v15 = (int *)sub_1B688E45C(v4);
      v17 = v16;
    }
    sub_1B688E4BC(a1, (int *)(a1 + 4 * v14), (uint64_t (**)(int *, int *))&v45, v14, v15, v17);
    if (v15)
      operator delete(v15);
    v34 = *(unsigned __int8 *)(a1 + 161);
    v45 = sub_1B688E720;
    if (v34 < 0x81)
    {
      v35 = 0;
      v37 = 0;
    }
    else
    {
      v35 = (int *)sub_1B688E45C(v34);
      v37 = v36;
    }
    sub_1B688E4BC(a1 + 64, (int *)(a1 + 64 + 4 * v34), (uint64_t (**)(int *, int *))&v45, v34, v35, v37);
    if (v35)
      operator delete(v35);
    LODWORD(v20) = *(unsigned __int8 *)(a1 + 160);
    if (*(_BYTE *)(a1 + 160))
    {
LABEL_27:
      v38 = 0;
      do
      {
        *(_WORD *)(a1 + v38 + 128) = *(_WORD *)(a1 + 2 * v38);
        v38 += 2;
      }
      while (2 * v20 != v38);
    }
  }
  else
  {
    v18 = *(unsigned __int16 *)(a1 + 242);
    v19 = ~*(unsigned __int16 *)(a1 + 178);
    *(_WORD *)a1 = ~*(_WORD *)(a1 + 178);
    *(_BYTE *)(a1 + 2) = v18 & 1;
    v20 = *(unsigned __int8 *)(a1 + 176);
    if (v20 >= 2)
    {
      v21 = v20 - 1;
      v22 = (_BYTE *)(a1 + 6);
      v23 = (unsigned __int16 *)(a1 + 180);
      do
      {
        v24 = (v18 >> 1) & 1;
        v18 = (unsigned __int16)v18 >> 1;
        v25 = *v23++;
        v19 += ~v25;
        *((_WORD *)v22 - 1) = v19;
        *v22 = v24;
        v22 += 4;
        --v21;
      }
      while (v21);
    }
    v26 = *(unsigned __int16 *)(a1 + 244);
    v27 = *(unsigned __int16 *)(a1 + 210) + 1;
    *(_WORD *)(a1 + 64) = *(_WORD *)(a1 + 210) + 1;
    *(_BYTE *)(a1 + 66) = v26 & 1;
    v28 = *(unsigned __int8 *)(a1 + 177);
    if (v28 >= 2)
    {
      v29 = v28 - 1;
      v30 = (_BYTE *)(a1 + 70);
      v31 = (unsigned __int16 *)(a1 + 212);
      do
      {
        v32 = (v26 >> 1) & 1;
        v26 = (unsigned __int16)v26 >> 1;
        v33 = *v31++;
        v27 += v33 + 1;
        *((_WORD *)v30 - 1) = v27;
        *v30 = v32;
        v30 += 4;
        --v29;
      }
      while (v29);
    }
    *(_BYTE *)(a1 + 160) = v20;
    *(_BYTE *)(a1 + 161) = v28;
    if ((_DWORD)v20)
      goto LABEL_27;
  }
  v39 = *(_BYTE *)(a1 + 161);
  if (v39)
  {
    v40 = (_WORD *)(a1 + 2 * v20 + 128);
    v41 = (__int16 *)(a1 + 64);
    v42 = *(unsigned __int8 *)(a1 + 161);
    do
    {
      v43 = *v41;
      v41 += 2;
      *v40++ = v43;
      --v42;
    }
    while (v42);
  }
  v44 = v39 + v20;
  *(_BYTE *)(a1 + 162) = v44;
  if (v44 <= 0xFu)
    bzero((void *)(a1 + 2 * v44 + 128), ((30 - 2 * v44) & 0x1FFFFFFFELL) + 2);
}

void sub_1B688E42C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_1B688E448(__int16 *a1, __int16 *a2)
{
  return *a1 > *a2;
}

void *sub_1B688E45C(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x1FFFFFFFFFFFFFFFLL)
    v1 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(4 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t sub_1B688E4BC(uint64_t result, int *a2, uint64_t (**a3)(int *, int *), unint64_t a4, int *a5, uint64_t a6)
{
  int *v8;
  int *v9;
  int v10;
  int *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int *v17;
  char *v19;
  unint64_t v20;
  int *v21;
  unint64_t v22;
  int *v23;
  char *v24;
  int *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  if (a4 >= 2)
  {
    v8 = (int *)result;
    if (a4 == 2)
    {
      v9 = a2 - 1;
      result = (*a3)(a2 - 1, (int *)result);
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *v9;
        *v9 = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v19 = (char *)a5;
      v20 = a4 >> 1;
      v21 = (int *)(result + 4 * (a4 >> 1));
      v22 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1B688E734((int *)result, v21, a3, v22, a5);
        v23 = (int *)&v19[4 * v20];
        result = (uint64_t)sub_1B688E734(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v23);
        v24 = &v19[4 * a4];
        v25 = v23;
        while (v25 != (int *)v24)
        {
          result = (*a3)(v25, (int *)v19);
          if ((_DWORD)result)
            v26 = (char *)v25;
          else
            v26 = v19;
          v19 += 4 * (result ^ 1);
          v25 += result;
          *v8++ = *(_DWORD *)v26;
          if (v19 == (char *)v23)
          {
            if (v25 != (int *)v24)
            {
              v27 = 0;
              do
              {
                v8[v27] = v25[v27];
                ++v27;
              }
              while (&v25[v27] != (int *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          v28 = 0;
          do
          {
            v8[v28] = *(_DWORD *)&v19[v28 * 4];
            ++v28;
          }
          while (&v19[v28 * 4] != (char *)v23);
        }
      }
      else
      {
        sub_1B688E4BC(result, v21, a3, v22, a5, a6);
        sub_1B688E4BC(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v19, a6);
        return sub_1B688E930((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, (uint64_t (**)(char *, char *))a3, a4 >> 1, a4 - (a4 >> 1), v19, a6);
      }
    }
    else if ((int *)result != a2)
    {
      v12 = (int *)(result + 4);
      if ((int *)(result + 4) != a2)
      {
        v13 = 0;
        v14 = (int *)result;
        do
        {
          v15 = v14;
          v14 = v12;
          result = (*a3)(v12, v15);
          if ((_DWORD)result)
          {
            v29 = *v14;
            v16 = v13;
            while (1)
            {
              *(int *)((char *)v8 + v16 + 4) = *(int *)((char *)v8 + v16);
              if (!v16)
                break;
              v16 -= 4;
              result = (*a3)(&v29, (int *)((char *)v8 + v16));
              if ((result & 1) == 0)
              {
                v17 = (int *)((char *)v8 + v16 + 4);
                goto LABEL_15;
              }
            }
            v17 = v8;
LABEL_15:
            *v17 = v29;
          }
          v12 = v14 + 1;
          v13 += 4;
        }
        while (v14 + 1 != a2);
      }
    }
  }
  return result;
}

BOOL sub_1B688E720(__int16 *a1, __int16 *a2)
{
  return *a1 < *a2;
}

int *sub_1B688E734(int *result, int *a2, uint64_t (**a3)(int *, int *), unint64_t a4, int *a5)
{
  int *v5;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = a5;
  v8 = result;
  if (a4 == 2)
  {
    v9 = a2 - 1;
    result = (int *)(*a3)(a2 - 1, result);
    if ((_DWORD)result)
      v10 = v9;
    else
      v10 = v8;
    if ((_DWORD)result)
      v11 = v8;
    else
      v11 = v9;
    *v5 = *v10;
    v5[1] = *v11;
  }
  else if ((uint64_t)a4 > 8)
  {
    v20 = &result[a4 >> 1];
    sub_1B688E4BC(result, v20, a3, a4 >> 1, a5, a4 >> 1);
    result = (int *)sub_1B688E4BC(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
    v21 = &v8[a4 >> 1];
    while (v21 != a2)
    {
      result = (int *)(*a3)(v21, v8);
      if ((_DWORD)result)
        v22 = v21;
      else
        v22 = v8;
      v21 += result;
      v8 += result ^ 1;
      *v5++ = *v22;
      if (v8 == v20)
      {
        if (v21 != a2)
        {
          v23 = 0;
          do
          {
            v5[v23] = v21[v23];
            ++v23;
          }
          while (&v21[v23] != a2);
        }
        return result;
      }
    }
    if (v8 != v20)
    {
      v24 = 0;
      do
      {
        v5[v24] = v8[v24];
        ++v24;
      }
      while (&v8[v24] != v20);
    }
  }
  else if (result != a2)
  {
    v13 = result + 1;
    *a5 = *result;
    if (result + 1 != a2)
    {
      v14 = 0;
      v15 = a5;
      do
      {
        v16 = v15++;
        result = (int *)(*a3)(v13, v16);
        v17 = v15;
        if ((_DWORD)result)
        {
          v16[1] = *v16;
          v17 = v5;
          if (v16 != v5)
          {
            v18 = v14;
            while (1)
            {
              v17 = (int *)((char *)v5 + v18);
              result = (int *)(*a3)(v13, (int *)((char *)v5 + v18 - 4));
              if (!(_DWORD)result)
                break;
              *(int *)((char *)v5 + v18) = *(int *)((char *)v5 + v18 - 4);
              v18 -= 4;
              if (!v18)
              {
                v17 = v5;
                break;
              }
            }
          }
        }
        v19 = *v13++;
        *v17 = v19;
        v14 += 4;
      }
      while (v13 != a2);
    }
  }
  return result;
}

uint64_t sub_1B688E930(uint64_t result, char *a2, char *a3, uint64_t (**a4)(char *, char *), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, char *);
  unint64_t v25;
  char *v26;
  int v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *__src;

  if (a6)
  {
    v10 = a6;
    v15 = (char *)result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return result;
      while (1)
      {
        result = (*a4)(a2, v15);
        if ((result & 1) != 0)
          break;
        v15 += 4;
        if (!--a5)
          return result;
      }
      __src = a7;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          v45 = *(_DWORD *)v15;
          *(_DWORD *)v15 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v45;
          return result;
        }
        if (a5 >= 0)
          v22 = a5;
        else
          v22 = a5 + 1;
        v23 = v22 >> 1;
        v20 = &v15[4 * (v22 >> 1)];
        if (a3 == a2)
        {
          v18 = a3;
          v28 = a3;
        }
        else
        {
          v51 = v22 >> 1;
          v48 = v10;
          v49 = a8;
          v24 = *a4;
          v25 = (a3 - a2) >> 2;
          v18 = a2;
          do
          {
            v26 = &v18[4 * (v25 >> 1)];
            v27 = v24(v26, v20);
            if (v27)
              v25 += ~(v25 >> 1);
            else
              v25 >>= 1;
            if (v27)
              v18 = v26 + 4;
          }
          while (v25);
          v28 = a2;
          a8 = v49;
          v10 = v48;
          v23 = v51;
        }
        v17 = (v18 - v28) >> 2;
      }
      else
      {
        if (v10 >= 0)
          v16 = v10;
        else
          v16 = v10 + 1;
        v17 = v16 >> 1;
        v18 = &a2[4 * (v16 >> 1)];
        if (a2 == v15)
        {
          v20 = a2;
          v21 = a2;
        }
        else
        {
          v50 = v16 >> 1;
          v47 = v10;
          v19 = (a2 - v15) >> 2;
          v20 = v15;
          do
          {
            if ((*a4)(v18, &v20[4 * (v19 >> 1)]))
            {
              v19 >>= 1;
            }
            else
            {
              v20 += 4 * (v19 >> 1) + 4;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          v21 = v15;
          v10 = v47;
          v17 = v50;
        }
        v23 = (v20 - v21) >> 2;
      }
      a5 -= v23;
      v10 -= v17;
      v29 = a2;
      v30 = v17;
      v31 = v23;
      v32 = sub_1B688ECF4(v20, v29, v18);
      v33 = v31;
      v34 = v30;
      v35 = v32;
      if (v31 + v34 >= a5 + v10)
      {
        v36 = a3;
        v52 = v31;
        v37 = v34;
        a7 = __src;
        result = sub_1B688E930(v32, v18, v36, a4, a5, v10, __src, a8);
        v18 = v20;
        v10 = v37;
        a5 = v52;
        a3 = v35;
      }
      else
      {
        a7 = __src;
        result = sub_1B688E930(v15, v20, v32, a4, v33, v34, __src, a8);
        v15 = v35;
      }
      a2 = v18;
      if (!v10)
        return result;
    }
    if (a5 <= v10)
    {
      if (v15 != a2)
      {
        v42 = 0;
        do
        {
          *(_DWORD *)&a7[v42] = *(_DWORD *)&v15[v42];
          v42 += 4;
        }
        while (&v15[v42] != a2);
        v43 = &a7[v42];
        if (&a7[v42] != a7)
        {
          while (a2 != a3)
          {
            result = (*a4)(a2, a7);
            if ((_DWORD)result)
              v44 = a2;
            else
              v44 = a7;
            a7 += 4 * (result ^ 1);
            a2 += 4 * result;
            *(_DWORD *)v15 = *(_DWORD *)v44;
            v15 += 4;
            if (a7 == v43)
              return result;
          }
          return (uint64_t)memmove(v15, a7, v43 - a7);
        }
      }
    }
    else if (a2 != a3)
    {
      v38 = 0;
      do
      {
        *(_DWORD *)&a7[v38] = *(_DWORD *)&a2[v38];
        v38 += 4;
      }
      while (&a2[v38] != a3);
      v39 = &a7[v38];
      if (&a7[v38] != a7)
      {
        v40 = a3 - 4;
        while (a2 != v15)
        {
          result = (*a4)(v39 - 4, a2 - 4);
          if ((_DWORD)result)
            v41 = a2;
          else
            v41 = v39;
          if ((_DWORD)result)
            a2 -= 4;
          else
            v39 -= 4;
          *(_DWORD *)v40 = *((_DWORD *)v41 - 1);
          v40 -= 4;
          if (v39 == a7)
            return result;
        }
        v46 = 0;
        do
        {
          *(_DWORD *)&v40[v46] = *(_DWORD *)&v39[v46 - 4];
          v46 -= 4;
        }
        while (&v39[v46] != a7);
      }
    }
  }
  return result;
}

char *sub_1B688ECF4(char *__src, char *a2, char *a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  int v11;
  int64_t v12;
  char *v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  BOOL v25;
  char v26;
  uint64_t v27;

  v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 4 == a2)
    {
      v11 = *(_DWORD *)__src;
      v12 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v3 = &__src[v12];
      *(_DWORD *)v3 = v11;
    }
    else if (a2 + 4 == a3)
    {
      v13 = a3 - 4;
      v14 = *((_DWORD *)a3 - 1);
      v3 = __src + 4;
      v15 = a3 - 4 - __src;
      if (v13 != __src)
        memmove(__src + 4, __src, v15);
      *(_DWORD *)__src = v14;
    }
    else
    {
      v5 = (a2 - __src) >> 2;
      if (v5 == (a3 - a2) >> 2)
      {
        v6 = 0;
        do
        {
          v7 = *(_DWORD *)&__src[v6];
          *(_DWORD *)&__src[v6] = *(_DWORD *)&a2[v6];
          v8 = &__src[v6 + 4];
          *(_DWORD *)&a2[v6] = v7;
          v9 = (uint64_t)&a2[v6 + 4];
          v6 += 4;
        }
        while (v8 != a2 && v9 != (_QWORD)a3);
        return a2;
      }
      else
      {
        v16 = (a3 - a2) >> 2;
        v17 = (a2 - __src) >> 2;
        do
        {
          v18 = v17;
          v17 = v16;
          v16 = v18 % v16;
        }
        while (v16);
        if (v17)
        {
          v19 = &__src[4 * v17];
          do
          {
            v21 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            v20 = v21;
            v22 = &v19[4 * v5];
            v23 = v19;
            do
            {
              v24 = v23;
              v23 = v22;
              *(_DWORD *)v24 = *(_DWORD *)v22;
              v25 = __OFSUB__(v5, (a3 - v22) >> 2);
              v27 = v5 - ((a3 - v22) >> 2);
              v26 = (v27 < 0) ^ v25;
              v22 = &__src[4 * v27];
              if (v26)
                v22 = &v23[4 * v5];
            }
            while (v22 != v19);
            *(_DWORD *)v23 = v20;
          }
          while (v19 != __src);
        }
        return &__src[4 * ((a3 - a2) >> 2)];
      }
    }
  }
  return v3;
}

uint64_t sub_1B688EE54(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  int v9;
  int v10;
  unsigned __int8 v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int16 *v22;
  int v23;
  uint64_t v24;
  __int16 *v25;
  __int16 v26;
  __int16 v27;
  BOOL v29;

  if (a4 > 64)
    return 4294954387;
  if (a4 < 1)
  {
    *(_BYTE *)(a1 + 163) = 0;
    goto LABEL_8;
  }
  v9 = sub_1B67C9094(a2, 1);
  *(_BYTE *)(a1 + 163) = v9 != 0;
  if (!v9)
  {
LABEL_8:
    *(_BYTE *)(a1 + 176) = sub_1B67C9140(a2);
    v11 = sub_1B67C9140(a2);
    *(_BYTE *)(a1 + 177) = v11;
    v12 = *(unsigned __int8 *)(a1 + 176);
    if (v12 + v11 > *(unsigned __int8 *)(a3 + *(unsigned __int8 *)(a3 + 1) + 198))
      return 4294954387;
    *(_WORD *)(a1 + 242) = 0;
    if (v12)
    {
      v13 = 0;
      do
      {
        *(_WORD *)(a1 + 178 + 2 * v13) = sub_1B67C91C8(a2);
        *(_WORD *)(a1 + 242) |= (sub_1B67C9094(a2, 1) != 0) << v13++;
      }
      while (v13 < *(unsigned __int8 *)(a1 + 176));
      v14 = *(unsigned __int8 *)(a1 + 177);
    }
    else
    {
      v14 = v11;
    }
    *(_WORD *)(a1 + 244) = 0;
    if (v14)
    {
      v20 = 0;
      do
      {
        *(_WORD *)(a1 + 210 + 2 * v20) = sub_1B67C91C8(a2);
        *(_WORD *)(a1 + 244) |= (sub_1B67C9094(a2, 1) != 0) << v20++;
      }
      while (v20 < *(unsigned __int8 *)(a1 + 177));
    }
    v19 = 0;
LABEL_27:
    sub_1B688E170(a1, v19);
    if (*(_BYTE *)(a1 + 163))
      return 0;
    v21 = *(unsigned __int8 *)(a1 + 176);
    if (*(_BYTE *)(a1 + 176))
    {
      v22 = (__int16 *)(a1 + 178);
      while (1)
      {
        v23 = *v22++;
        if (v23 < 0)
          break;
        if (!--v21)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_34:
      if (!*(_BYTE *)(a1 + 177))
        return 0;
      v24 = *(unsigned __int8 *)(a1 + 177) - 1;
      v25 = (__int16 *)(a1 + 210);
      do
      {
        v27 = *v25++;
        v26 = v27;
        v29 = v24-- != 0;
      }
      while ((v26 & 0x8000) == 0 && v29);
      if ((v26 & 0x80000000) == 0)
        return 0;
    }
    return 4294954387;
  }
  if (*(_DWORD *)(a3 + 260) == a4)
    v10 = sub_1B67C9140(a2);
  else
    v10 = 0;
  *(_DWORD *)(a1 + 164) = v10;
  *(_BYTE *)(a1 + 168) = sub_1B67C9094(a2, 1) != 0;
  *(_WORD *)(a1 + 170) = sub_1B67C91C8(a2);
  result = 4294954387;
  v15 = ~*(_DWORD *)(a1 + 164) + a4;
  if (v15 >= 0 && v15 < a4)
  {
    v16 = *(_QWORD *)(a3 + 264);
    *(_DWORD *)(a1 + 172) = 0;
    v17 = -1;
    do
    {
      ++v17;
      v18 = sub_1B67C9094(a2, 1);
      *(_WORD *)(a1 + 172) |= (v18 != 0) << v17;
      if (!v18)
        *(_WORD *)(a1 + 174) |= (sub_1B67C9094(a2, 1) != 0) << v17;
    }
    while (v17 < *(unsigned __int8 *)(v16 + 248 * v15 + 162));
    v19 = v16 + 248 * v15;
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_1B688F0F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned __int16 v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned __int16 v28;
  unsigned int v29;
  unsigned int v30;

  if (a4 >= 1)
    sub_1B67C8FE0(a2, *(unsigned __int8 *)(a1 + 163), 1);
  if (!*(_BYTE *)(a1 + 163))
  {
    v19 = *(unsigned __int8 *)(a1 + 176) + 1;
    v20 = __clz(v19);
    sub_1B67C8FE0(a2, (v19 - (0x80000000 >> v20)) | (0x80000000 >> v20), (2 * v20) ^ 0x3F);
    v21 = *(unsigned __int8 *)(a1 + 177) + 1;
    v22 = __clz(v21);
    sub_1B67C8FE0(a2, (v21 - (0x80000000 >> v22)) | (0x80000000 >> v22), (2 * v22) ^ 0x3F);
    if (*(_BYTE *)(a1 + 176))
    {
      v23 = 0;
      v24 = *(_WORD *)(a1 + 242);
      do
      {
        v25 = *(unsigned __int16 *)(a1 + 178 + 2 * v23) + 1;
        v26 = __clz(v25);
        sub_1B67C8FE0(a2, (v25 - (0x80000000 >> v26)) | (0x80000000 >> v26), (2 * v26) ^ 0x3F);
        sub_1B67C8FE0(a2, v24 & 1, 1);
        ++v23;
        v24 >>= 1;
      }
      while (v23 < *(unsigned __int8 *)(a1 + 176));
    }
    if (*(_BYTE *)(a1 + 177))
    {
      v27 = 0;
      v28 = *(_WORD *)(a1 + 244);
      do
      {
        v29 = *(unsigned __int16 *)(a1 + 210 + 2 * v27) + 1;
        v30 = __clz(v29);
        sub_1B67C8FE0(a2, (v29 - (0x80000000 >> v30)) | (0x80000000 >> v30), (2 * v30) ^ 0x3F);
        sub_1B67C8FE0(a2, v28 & 1, 1);
        ++v27;
        v28 >>= 1;
      }
      while (v27 < *(unsigned __int8 *)(a1 + 177));
    }
    return 0;
  }
  if (*(_DWORD *)(a3 + 260) == a4)
  {
    v8 = *(_DWORD *)(a1 + 164) + 1;
    v9 = __clz(v8);
    sub_1B67C8FE0(a2, (v8 - (0x80000000 >> v9)) | (0x80000000 >> v9), 63 - 2 * v9);
  }
  sub_1B67C8FE0(a2, *(unsigned __int8 *)(a1 + 168), 1);
  v10 = *(unsigned __int16 *)(a1 + 170) + 1;
  v11 = __clz(v10);
  sub_1B67C8FE0(a2, (v10 - (0x80000000 >> v11)) | (0x80000000 >> v11), (2 * v11) ^ 0x3F);
  result = 4294954387;
  v13 = ~*(_DWORD *)(a1 + 164) + a4;
  if (v13 >= 0 && v13 < a4)
  {
    v14 = *(_QWORD *)(a3 + 264);
    v15 = *(unsigned __int16 *)(a1 + 172);
    v16 = *(unsigned __int16 *)(a1 + 174);
    v17 = (unsigned __int8 *)(v14 + 248 * v13 + 162);
    v18 = -1;
    do
    {
      sub_1B67C8FE0(a2, v15 & 1, 1);
      if ((v15 & 1) == 0)
        sub_1B67C8FE0(a2, v16 & 1, 1);
      v15 >>= 1;
      v16 >>= 1;
      ++v18;
    }
    while (v18 < *v17);
    return 0;
  }
  return result;
}

void sub_1B688F350(uint64_t a1, uint64_t a2, __int32 *a3, int a4, int a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  __int32 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;

  *(_BYTE *)(a1 + 163) = 0;
  *(_DWORD *)(a1 + 242) = 0;
  *(_WORD *)(a1 + 176) = 0;
  if (a4 <= 0)
  {
    v11 = a4;
LABEL_14:
    sub_1B688F538(a3, &a3[v11], v11, 0, 0);
    goto LABEL_15;
  }
  v10 = 0;
  v11 = a4;
  v12 = 4 * a4;
  do
  {
    v13 = SLOWORD(a3[v10 / 4]) + a5;
    if (v13 >= 0)
    {
      if (*(_QWORD *)sub_1B67CCE18(a2, v13))
      {
        if (SLOWORD(a3[v10 / 4]) < 0)
          ++*(_BYTE *)(a1 + 176);
        else
          ++*(_BYTE *)(a1 + 177);
      }
      else
      {
        LOWORD(a3[v10 / 4]) = 0x7FFF;
      }
    }
    v10 += 4;
  }
  while (v12 != v10);
  if (a4 <= 128)
    goto LABEL_14;
  v14 = (__int32 *)sub_1B688E45C(a4);
  sub_1B688F538(a3, &a3[v11], v11, v14, v15);
  if (v14)
    operator delete(v14);
LABEL_15:
  v16 = *(unsigned __int8 *)(a1 + 176);
  if (*(_BYTE *)(a1 + 176))
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = (__int16 *)a3;
    do
    {
      v21 = v18 + (__int16)~*v20;
      if (v21 >> 15)
      {
        ++v19;
      }
      else
      {
        *(_WORD *)(a1 + 178 - 2 * v19 + 2 * v17) = v21;
        *(_WORD *)(a1 + 242) |= *((unsigned __int8 *)v20 + 2) << (v17 - v19);
        v18 = v20[-2 * v19];
      }
      ++v17;
      v20 += 2;
    }
    while (v16 != v17);
  }
  else
  {
    LOBYTE(v19) = 0;
  }
  *(_BYTE *)(a1 + 176) = v16 - v19;
  v22 = *(unsigned __int8 *)(a1 + 177);
  if (*(_BYTE *)(a1 + 177))
  {
    v23 = 0;
    v24 = 0;
    do
    {
      *(_WORD *)(a1 + 210 + 2 * v23) = *(_WORD *)a3 + ~v24;
      *(_WORD *)(a1 + 244) |= *((unsigned __int8 *)a3 + 2) << v23;
      v25 = *(_WORD *)a3++;
      v24 = v25;
      ++v23;
    }
    while (v22 != v23);
  }
}

__int32 *sub_1B688F538(__int32 *result, __int32 *a2, unint64_t a3, __int32 *a4, uint64_t a5)
{
  char *v6;
  __int32 v7;
  int32x2_t v8;
  int32x2_t v9;
  __int32 *v11;
  uint64_t v12;
  __int32 *v13;
  int32x2_t v14;
  int32x2_t v15;
  __int32 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int32 *v20;
  __int32 *v22;
  unint64_t v23;
  __int32 *v24;
  unint64_t v25;
  __int32 *v26;
  __int32 *v27;
  __int32 *v28;
  __int32 v29;
  int32x2_t v30;
  int32x2_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;

  if (a3 >= 2)
  {
    v6 = (char *)result;
    if (a3 == 2)
    {
      v7 = *result;
      v8.i32[0] = *(a2 - 1);
      v8.i32[1] = *result;
      v9 = vabs_s32(vshr_n_s32(vshl_n_s32(v8, 0x10uLL), 0x10uLL));
      if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v9, 1), (uint32x2_t)v9).u32[0] & 1) != 0)
      {
        *result = *(a2 - 1);
        *(a2 - 1) = v7;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v22 = a4;
      v23 = a3 >> 1;
      v24 = &result[a3 >> 1];
      v25 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1B688F79C(result, v24, v25, a4);
        v26 = &v22[v23];
        result = sub_1B688F79C((__int32 *)&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v26);
        v27 = &v22[a3];
        v28 = v26;
        while (v28 != v27)
        {
          v29 = *v28;
          v30.i32[0] = *v28;
          v30.i32[1] = *v22;
          v31 = vabs_s32(vshr_n_s32(vshl_n_s32(v30, 0x10uLL), 0x10uLL));
          v32 = vcge_u32((uint32x2_t)v31, (uint32x2_t)vdup_lane_s32(v31, 1)).u8[0];
          if ((v32 & 1) != 0)
            v29 = *v22;
          v22 += v32 & 1;
          v28 += (v32 & 1) == 0;
          *(_DWORD *)v6 = v29;
          v6 += 4;
          if (v22 == v26)
          {
            if (v28 != v27)
            {
              v33 = 0;
              do
              {
                *(_DWORD *)&v6[v33 * 4] = v28[v33];
                ++v33;
              }
              while (&v28[v33] != v27);
            }
            return result;
          }
        }
        if (v22 != v26)
        {
          v34 = 0;
          do
          {
            *(_DWORD *)&v6[v34 * 4] = v22[v34];
            ++v34;
          }
          while (&v22[v34] != v26);
        }
      }
      else
      {
        sub_1B688F538(result, v24, v25, a4, a5);
        sub_1B688F538(&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v22, a5);
        return (__int32 *)sub_1B688F9DC(v6, &v6[4 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v22, a5);
      }
    }
    else if (result != a2)
    {
      v11 = result + 1;
      if (result + 1 != a2)
      {
        v12 = 4;
        v13 = result;
        do
        {
          v14 = *(int32x2_t *)v13;
          v13 = v11;
          v15 = vabs_s32(vshr_n_s32(vshl_n_s32(v14, 0x10uLL), 0x10uLL));
          if (v15.i32[1] < (unsigned __int32)v15.i32[0])
          {
            v16 = v14.i32[0];
            v17 = v12;
            while (1)
            {
              *(__int32 *)((char *)result + v17) = v16;
              v18 = v17 - 4;
              if (v17 == 4)
                break;
              v16 = *(__int32 *)((char *)result + v17 - 8);
              if ((v16 & 0x8000u) == 0)
                v19 = (__int16)v16;
              else
                v19 = -(__int16)v16;
              v17 -= 4;
              if (v15.i32[1] >= v19)
              {
                v20 = (__int32 *)((char *)result + v18);
                goto LABEL_18;
              }
            }
            v20 = result;
LABEL_18:
            *v20 = v14.i32[1];
          }
          v11 = v13 + 1;
          v12 += 4;
        }
        while (v13 + 1 != a2);
      }
    }
  }
  return result;
}

__int32 *sub_1B688F79C(__int32 *result, __int32 *a2, unint64_t a3, __int32 *a4)
{
  __int32 *v4;
  __int32 *v6;
  __int32 v8;
  int32x2_t v9;
  int32x2_t v10;
  unsigned __int8 v11;
  __int32 *v12;
  uint64_t v13;
  __int32 *v14;
  __int32 *v15;
  __int32 v16;
  __int32 v17;
  int32x2_t v18;
  int32x2_t v19;
  __int32 *v20;
  uint64_t v21;
  int32x2_t v22;
  int32x2_t v23;
  __int32 *v24;
  __int32 *v25;
  __int32 v26;
  int32x2_t v27;
  int32x2_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9.i32[0] = v8;
      v9.i32[1] = *result;
      v10 = vabs_s32(vshr_n_s32(vshl_n_s32(v9, 0x10uLL), 0x10uLL));
      v11 = vcgt_u32((uint32x2_t)vdup_lane_s32(v10, 1), (uint32x2_t)v10).u8[0];
      if ((v11 & 1) == 0)
        v8 = *result;
      *a4 = v8;
      v4 = a4 + 1;
      if ((v11 & 1) == 0)
        v6 = a2 - 1;
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v24 = &result[a3 >> 1];
      sub_1B688F538(result, v24, a3 >> 1, a4, a3 >> 1);
      result = (__int32 *)sub_1B688F538(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v25 = &v6[a3 >> 1];
      while (v25 != a2)
      {
        v26 = *v25;
        v27.i32[0] = *v25;
        v27.i32[1] = *v6;
        v28 = vabs_s32(vshr_n_s32(vshl_n_s32(v27, 0x10uLL), 0x10uLL));
        v29 = vcgt_u32((uint32x2_t)vdup_lane_s32(v28, 1), (uint32x2_t)v28).u8[0];
        if ((v29 & 1) == 0)
          v26 = *v6;
        v25 += v29 & 1;
        v6 += (v29 & 1) == 0;
        *v4++ = v26;
        if (v6 == v24)
        {
          if (v25 != a2)
          {
            v30 = 0;
            do
            {
              v4[v30] = v25[v30];
              ++v30;
            }
            while (&v25[v30] != a2);
          }
          return result;
        }
      }
      if (v6 != v24)
      {
        v31 = 0;
        do
        {
          v4[v31] = v6[v31];
          ++v31;
        }
        while (&v6[v31] != v24);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a4;
        v15 = a4;
        do
        {
          v17 = *v15++;
          v16 = v17;
          v18.i32[0] = *v12;
          v18.i32[1] = v17;
          v19 = vabs_s32(vshr_n_s32(vshl_n_s32(v18, 0x10uLL), 0x10uLL));
          if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v19, 1), (uint32x2_t)v19).u32[0] & 1) != 0)
          {
            v14[1] = v16;
            v20 = a4;
            if (v14 != a4)
            {
              v21 = v13;
              while (1)
              {
                v20 = (__int32 *)((char *)a4 + v21);
                v22.i32[0] = *v12;
                v22.i32[1] = *(__int32 *)((char *)a4 + v21 - 4);
                v23 = vabs_s32(vshr_n_s32(vshl_n_s32(v22, 0x10uLL), 0x10uLL));
                if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v23, 1), (uint32x2_t)v23).u32[0] & 1) == 0)
                  break;
                *v20 = *(__int32 *)((char *)a4 + v21 - 4);
                v21 -= 4;
                if (!v21)
                {
                  v20 = a4;
                  break;
                }
              }
            }
            *v20 = *v12;
          }
          else
          {
            *v15 = *v12;
          }
          ++v12;
          v13 += 4;
          v14 = v15;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *sub_1B688F9DC(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, __int32 *a6, uint64_t a7)
{
  uint64_t v9;
  char *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unsigned int v33;
  int v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __int32 *v39;
  __int32 *v40;
  __int32 v41;
  int32x2_t v42;
  int32x2_t v43;
  uint64_t v44;
  __int32 *v45;
  __int32 v46;
  int32x2_t v47;
  int32x2_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  char *v51;
  __int32 *__src;

  if (a5)
  {
    v9 = a5;
    v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4)
        return result;
      v12 = (__int16)*(_DWORD *)a2;
      if (v12 < 0)
        v12 = -v12;
      while (1)
      {
        v13 = *(_DWORD *)v11;
        v14 = (__int16)*(_DWORD *)v11;
        if (v14 < 0)
          v14 = -v14;
        if (v12 < v14)
          break;
        v11 += 4;
        if (!--a4)
          return result;
      }
      v51 = a3;
      __src = a6;
      if (a4 >= v9)
      {
        if (a4 == 1)
        {
          *(_DWORD *)v11 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v13;
          return result;
        }
        if (a4 >= 0)
          v27 = a4;
        else
          v27 = a4 + 1;
        v26 = v27 >> 1;
        v18 = &v11[4 * (v27 >> 1)];
        v17 = a3;
        if (a3 != a2)
        {
          v28 = (a3 - a2) >> 2;
          v29 = *(__int16 *)v18;
          if (v29 < 0)
            v29 = -v29;
          v17 = a2;
          do
          {
            v30 = v28 >> 1;
            v31 = &v17[4 * (v28 >> 1)];
            v34 = *(__int16 *)v31;
            v32 = v31 + 4;
            v33 = v34;
            if (v34 < 0)
              v33 = -v33;
            v28 += ~(v28 >> 1);
            if (v33 < v29)
              v17 = v32;
            else
              v28 = v30;
          }
          while (v28);
        }
        v16 = (v17 - a2) >> 2;
      }
      else
      {
        if (v9 >= 0)
          v15 = v9;
        else
          v15 = v9 + 1;
        v16 = v15 >> 1;
        v17 = &a2[4 * (v15 >> 1)];
        v18 = a2;
        if (a2 != v11)
        {
          v19 = (a2 - v11) >> 2;
          v20 = *(__int16 *)v17;
          if (v20 < 0)
            v20 = -v20;
          v18 = v11;
          do
          {
            v21 = v19 >> 1;
            v22 = &v18[4 * (v19 >> 1)];
            v25 = *(__int16 *)v22;
            v23 = v22 + 4;
            v24 = v25;
            if (v25 < 0)
              v24 = -v24;
            v19 += ~(v19 >> 1);
            if (v20 < v24)
              v19 = v21;
            else
              v18 = v23;
          }
          while (v19);
        }
        v26 = (v18 - v11) >> 2;
      }
      a4 -= v26;
      v9 -= v16;
      v35 = sub_1B688ECF4(v18, a2, v17);
      v36 = v35;
      if (v16 + v26 >= v9 + a4)
      {
        result = (char *)sub_1B688F9DC(v35, v17, v51, a4, v9, __src, a7);
        v17 = v18;
        a6 = __src;
        v9 = v16;
        a4 = v26;
        a3 = v36;
      }
      else
      {
        v37 = v18;
        a6 = __src;
        result = (char *)sub_1B688F9DC(v11, v37, v35, v26, v16, __src, a7);
        v11 = v36;
        a3 = v51;
      }
      a2 = v17;
      if (!v9)
        return result;
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        v44 = 0;
        do
        {
          a6[v44] = *(_DWORD *)&v11[v44 * 4];
          ++v44;
        }
        while (&v11[v44 * 4] != a2);
        v45 = &a6[v44];
        if (v45 != a6)
        {
          while (a2 != a3)
          {
            v46 = *(_DWORD *)a2;
            v47.i32[0] = *(_DWORD *)a2;
            v47.i32[1] = *a6;
            v48 = vabs_s32(vshr_n_s32(vshl_n_s32(v47, 0x10uLL), 0x10uLL));
            v49 = vcge_u32((uint32x2_t)v48, (uint32x2_t)vdup_lane_s32(v48, 1)).u8[0];
            if ((v49 & 1) != 0)
              v46 = *a6;
            a6 += v49 & 1;
            a2 += 4 * ((v49 & 1) == 0);
            *(_DWORD *)v11 = v46;
            v11 += 4;
            if (a6 == v45)
              return result;
          }
          return (char *)memmove(v11, a6, (char *)v45 - (char *)a6);
        }
      }
    }
    else if (a2 != a3)
    {
      v38 = 0;
      do
      {
        a6[v38] = *(_DWORD *)&a2[v38 * 4];
        ++v38;
      }
      while (&a2[v38 * 4] != a3);
      v39 = &a6[v38];
      if (v39 != a6)
      {
        v40 = (__int32 *)(a3 - 4);
        while (a2 != v11)
        {
          v41 = *(v39 - 1);
          v42.i32[0] = v41;
          v42.i32[1] = *((_DWORD *)a2 - 1);
          v43 = vabs_s32(vshr_n_s32(vshl_n_s32(v42, 0x10uLL), 0x10uLL));
          if ((vcgt_u32((uint32x2_t)vdup_lane_s32(v43, 1), (uint32x2_t)v43).u32[0] & 1) != 0)
          {
            v41 = *((_DWORD *)a2 - 1);
            a2 -= 4;
          }
          else
          {
            --v39;
          }
          *v40-- = v41;
          if (v39 == a6)
            return result;
        }
        v50 = 0;
        do
        {
          v40[v50] = v39[v50 - 1];
          --v50;
        }
        while (&v39[v50] != a6);
      }
    }
  }
  return result;
}

void sub_1B688FD74(__int16 *a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  NSObject *v8;
  __int16 *v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  __int16 *v15;
  NSObject *v16;
  int v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = dword_1EF137CD0;
  if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)a1 + 163);
    *(_DWORD *)buf = 67109120;
    v20 = v3;
    _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "inter_ref_pic_set_prediction_flag: %d\n", buf, 8u);
    v2 = dword_1EF137CD0;
  }
  if (*((_BYTE *)a1 + 163))
  {
    if (v2 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "No supported!\n", buf, 2u);
    }
  }
  else
  {
    if (v2 >= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
        || (v4 = *((unsigned __int8 *)a1 + 176),
            *(_DWORD *)buf = 67109120,
            v20 = v4,
            _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "num_negative_pics: %d\n", buf, 8u),
            v2 = dword_1EF137CD0,
            dword_1EF137CD0 >= 3))
      {
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
          || (v5 = *((unsigned __int8 *)a1 + 177),
              *(_DWORD *)buf = 67109120,
              v20 = v5,
              _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "num_positive_pics: %d\n", buf, 8u), v2 = dword_1EF137CD0, dword_1EF137CD0 >= 3))
        {
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Delta poc s0:\n", buf, 2u);
            v2 = dword_1EF137CD0;
          }
        }
      }
    }
    v6 = *((unsigned __int8 *)a1 + 176);
    if (*((_BYTE *)a1 + 176))
    {
      v7 = 0;
      v8 = MEMORY[0x1E0C81028];
      v9 = a1;
      do
      {
        if (v2 >= 3 && os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *v9;
          v11 = ((unsigned __int16)a1[121] >> v7) & 1;
          *(_DWORD *)buf = 67109376;
          v20 = v10;
          v21 = 1024;
          v22 = v11;
          _os_log_impl(&dword_1B676B000, v8, OS_LOG_TYPE_DEFAULT, "\tdelta poc: %d, used: %d\n", buf, 0xEu);
          v2 = dword_1EF137CD0;
          v6 = *((unsigned __int8 *)a1 + 176);
        }
        ++v7;
        v9 += 2;
      }
      while (v7 < v6);
    }
    if (v2 > 2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Delta poc s1:\n", buf, 2u);
    }
    v12 = *((unsigned __int8 *)a1 + 177);
    if (*((_BYTE *)a1 + 177))
    {
      v13 = 0;
      v14 = dword_1EF137CD0;
      v15 = a1 + 32;
      v16 = MEMORY[0x1E0C81028];
      do
      {
        if (v14 >= 3 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *v15;
          v18 = ((unsigned __int16)a1[122] >> v13) & 1;
          *(_DWORD *)buf = 67109376;
          v20 = v17;
          v21 = 1024;
          v22 = v18;
          _os_log_impl(&dword_1B676B000, v16, OS_LOG_TYPE_DEFAULT, "\tdelta poc: %d, used: %d\n", buf, 0xEu);
          v14 = dword_1EF137CD0;
          v12 = *((unsigned __int8 *)a1 + 177);
        }
        ++v13;
        v15 += 2;
      }
      while (v13 < v12);
    }
  }
}

uint64_t sub_1B689013C(uint64_t result, int a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(result + 4);
  if ((_DWORD)v3)
  {
    v4 = 0;
    while ((a2 & ~(-1 << a3)) != *(unsigned __int16 *)(result + 24 + 2 * v4))
    {
      if (v3 == ++v4)
        return result;
    }
    *(_WORD *)(result + 216) &= ~(1 << v4);
  }
  return result;
}

uint64_t sub_1B689018C(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned __int16 *v26;
  int *v27;

  if (*(_DWORD *)(a2 + 284))
    v8 = sub_1B67C9140(a4);
  else
    v8 = 0;
  *a1 = v8;
  v9 = sub_1B67C9140(a4);
  a1[1] = v9;
  v10 = *(_DWORD *)(a2 + 284);
  if (*(unsigned __int8 *)(a2 + *(unsigned __int8 *)(a2 + 1) + 198)
     - (*(unsigned __int8 *)(a3 + 160)
      + *(unsigned __int8 *)(a3 + 161)) < v10)
    v10 = *(unsigned __int8 *)(a2 + *(unsigned __int8 *)(a2 + 1) + 198)
        - (*(unsigned __int8 *)(a3 + 160)
         + *(unsigned __int8 *)(a3 + 161));
  LODWORD(v11) = *a1;
  if (*a1 > v10 || *a1 + v9 > 0x10)
    return 4294954387;
  a1[54] = 0;
  if ((_DWORD)v11)
  {
    v14 = 0;
    while (1)
    {
      v15 = __clz(v11) ^ 0x1F;
      v16 = (v11 & ((_DWORD)v11 - 1)) != 0 ? v15 + 1 : v15;
      v17 = sub_1B67C9094(a4, v16);
      *((_BYTE *)a1 + v14 + 8) = v17;
      if (v17 >= *a1)
        return 4294954387;
      *((_WORD *)a1 + v14 + 12) = *(_WORD *)(a2 + 2 * v17 + 288);
      *((_WORD *)a1 + 108) |= ((*(unsigned __int16 *)(a2 + 320) >> v17) & 1) << v14;
      v18 = sub_1B67C9094(a4, 1);
      *((_WORD *)a1 + 109) |= (v18 != 0) << v14;
      if (v18)
        a1[v14 + 22] = sub_1B67C9140(a4);
      ++v14;
      v11 = *a1;
      if (v14 >= v11)
      {
        v9 = a1[1];
        break;
      }
    }
  }
  v19 = v9 + v11;
  if (v11 < v9 + v11)
  {
    v20 = *(unsigned __int8 *)(a2 + 196) + 4;
    v21 = (int)v11;
    do
    {
      *((_WORD *)a1 + v21 + 12) = sub_1B67C9094(a4, v20);
      *((_WORD *)a1 + 108) |= (sub_1B67C9094(a4, 1) != 0) << v21;
      v22 = sub_1B67C9094(a4, 1);
      *((_WORD *)a1 + 109) |= (v22 != 0) << v21;
      if (v22)
        a1[v21 + 22] = sub_1B67C9140(a4);
      ++v21;
      LODWORD(v11) = *a1;
      v19 = a1[1] + *a1;
    }
    while (v19 > v21);
  }
  if (v19)
  {
    v23 = 0;
    v24 = 0;
    v25 = *((unsigned __int16 *)a1 + 109);
    v26 = (unsigned __int16 *)(a1 + 6);
    v27 = (int *)(a1 + 22);
    do
    {
      if (((v25 >> v23) & 1) != 0)
      {
        if (v23 && v11 != v23 && *(v26 - 1) == *v26)
          v24 += *v27;
        else
          v24 = *v27;
        v27[16] = v24;
      }
      ++v23;
      ++v26;
      ++v27;
    }
    while (v19 != v23);
  }
  return 0;
}

void sub_1B68903EC(unsigned int *a1)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  NSObject *v5;
  unsigned int v6;
  unsigned int v7;
  NSObject *v8;
  const char *v9;
  uint32_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int16 *v13;
  NSObject *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  NSObject *v20;
  const char *v21;
  uint32_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint8_t buf[4];
  unsigned int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (dword_1EF137CD0 >= 3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
      || (v2 = *a1,
          *(_DWORD *)buf = 67109120,
          v27 = v2,
          _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "num_long_term_sps: %d\n", buf, 8u),
          dword_1EF137CD0 >= 3))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT)
        || (v3 = a1[1],
            *(_DWORD *)buf = 67109120,
            v27 = v3,
            _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "num_long_term_pics: %d\n", buf, 8u), dword_1EF137CD0 >= 3))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Long-term sps:\n", buf, 2u);
        }
      }
    }
  }
  if (*a1)
  {
    v4 = 0;
    v5 = MEMORY[0x1E0C81028];
    while (1)
    {
      if (((*((unsigned __int16 *)a1 + 109) >> v4) & 1) != 0)
      {
        if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          goto LABEL_18;
        v6 = *((unsigned __int8 *)a1 + v4 + 8);
        v7 = a1[v4 + 38];
        *(_DWORD *)buf = 67109632;
        v27 = v6;
        v28 = 1024;
        v29 = 1;
        v30 = 1024;
        v31 = v7;
        v8 = v5;
        v9 = "\tidx: %d, delta_poc_msb_flag: %d, delta_poc_cycle: %d\n";
        v10 = 20;
      }
      else
      {
        if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          goto LABEL_18;
        v11 = *((unsigned __int8 *)a1 + v4 + 8);
        *(_DWORD *)buf = 67109376;
        v27 = v11;
        v28 = 1024;
        v29 = 0;
        v8 = v5;
        v9 = "\tidx: %d, delta_poc_msb_flag: %d\n";
        v10 = 14;
      }
      _os_log_impl(&dword_1B676B000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
LABEL_18:
      ++v4;
      v12 = *a1;
      if (v4 >= v12)
        goto LABEL_21;
    }
  }
  LODWORD(v12) = 0;
LABEL_21:
  if (dword_1EF137CD0 > 2 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Long-term poc lsb:\n", buf, 2u);
    LODWORD(v12) = *a1;
  }
  if (v12 < a1[1] + v12)
  {
    v13 = (unsigned __int16 *)a1 + (int)v12 + 28;
    v14 = MEMORY[0x1E0C81028];
    v15 = 4 * (int)v12 + 152;
    do
    {
      if (((*((unsigned __int16 *)a1 + 109) >> v12) & 1) != 0)
      {
        if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          goto LABEL_34;
        v16 = *(v13 - 16);
        v17 = (*((unsigned __int16 *)a1 + 108) >> v12) & 1;
        v18 = *v13;
        v19 = *(unsigned int *)((char *)a1 + v15);
        *(_DWORD *)buf = 67110144;
        v27 = v16;
        v28 = 1024;
        v29 = v17;
        v30 = 1024;
        v31 = v18;
        v32 = 1024;
        v33 = 1;
        v34 = 1024;
        v35 = v19;
        v20 = v14;
        v21 = "\tpoc_lsb: %d, used: %d, poc: %d, delta_poc_msb_flag: %d, delta_poc_cycle: %d\n";
        v22 = 32;
      }
      else
      {
        if (dword_1EF137CD0 < 3 || !os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          goto LABEL_34;
        v23 = *(v13 - 16);
        v24 = (*((unsigned __int16 *)a1 + 108) >> v12) & 1;
        v25 = *v13;
        *(_DWORD *)buf = 67109888;
        v27 = v23;
        v28 = 1024;
        v29 = v24;
        v30 = 1024;
        v31 = v25;
        v32 = 1024;
        v33 = 0;
        v20 = v14;
        v21 = "\tpoc_lsb: %d, used: %d, poc: %d, delta_poc_msb_flag: %d\n";
        v22 = 26;
      }
      _os_log_impl(&dword_1B676B000, v20, OS_LOG_TYPE_DEFAULT, v21, buf, v22);
LABEL_34:
      LODWORD(v12) = v12 + 1;
      ++v13;
      v15 += 4;
    }
    while (a1[1] + *a1 > v12);
  }
}

uint64_t sub_1B6890838(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v3 = 0;
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 11) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_WORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_WORD *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 265) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  v4 = 336;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_DWORD *)(a1 + 332) = 0;
  *(_BYTE *)(a1 + 174) = 0;
  do
  {
    v5 = 0;
    if (v3)
      v6 = 65;
    else
      v6 = 17;
    if (v3 == 3)
      v7 = 3;
    else
      v7 = 1;
    v8 = v4;
    do
    {
      if (v3)
        v9 = (char *)&unk_1B6920659 + ((v5 > 2) | ((unint64_t)(v5 > 2) << 6));
      else
        v9 = (char *)&unk_1B6920648;
      memcpy((void *)(a1 + v8), v9, v6);
      v5 += v7;
      v8 += 65 * v7;
    }
    while (v5 < 6);
    ++v3;
    v4 += 390;
  }
  while (v3 != 4);
  *(_QWORD *)(a1 + 1944) = 0;
  *(_QWORD *)(a1 + 1949) = 0;
  *(_DWORD *)(a1 + 1896) = 0;
  *(_WORD *)(a1 + 1900) = 0;
  *(_DWORD *)(a1 + 1902) = 33685509;
  *(_BYTE *)(a1 + 1906) = 2;
  *(_DWORD *)(a1 + 1936) = 0;
  *(_BYTE *)(a1 + 1940) = 0;
  *(_QWORD *)(a1 + 1907) = 0;
  *(_QWORD *)(a1 + 1913) = 0;
  *(_BYTE *)(a1 + 1932) = 0;
  *(_QWORD *)(a1 + 1924) = 0;
  *(_WORD *)(a1 + 2024) = 0;
  *(_QWORD *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2028) = 0u;
  *(_BYTE *)(a1 + 2064) = 0;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_QWORD *)(a1 + 2006) = 0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_QWORD *)(a1 + 2072) = a2;
  return a1;
}

_QWORD *sub_1B68909E8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[256];
  if (v2)
  {
    free(v2);
    a1[256] = 0;
    a1[257] = 0;
  }
  sub_1B6803B64((uint64_t)(a1 + 245));
  v3 = (void *)a1[33];
  if (v3)
  {
    free(v3);
    a1[33] = 0;
    a1[34] = 0;
  }
  return a1;
}

uint64_t sub_1B6890A38(uint64_t result, uint64_t a2, unsigned int a3, BOOL *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned __int8 v15;

  v6 = result;
  v7 = 0;
  v8 = 8;
  v9 = 8;
  v10 = a3;
  do
  {
    if (!v8)
      goto LABEL_7;
    result = sub_1B67C9140(v6);
    v11 = (result + 1) & 1;
    v12 = (-v11 ^ ((result + 1) >> 1)) + v11 + v9 + 256;
    v13 = ((-(char)v11 ^ ((result + 1) >> 1)) + v11 + v9);
    v14 = -v12;
    v8 = v14 >= 0 ? -v14 : v13;
    *a4 = (v8 | v7) == 0;
    v15 = v8;
    if (!v8)
    {
LABEL_7:
      v8 = 0;
      v15 = v9;
    }
    *(_BYTE *)(a2 + v7) = v15;
    v9 = v15;
    ++v7;
  }
  while (v10 != v7);
  return result;
}

uint64_t sub_1B6890AE8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, signed int a7, int a8)
{
  int v10;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  signed int v23;
  uint64_t result;
  int v25;
  int v26;
  int v27;
  int v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v10 = a6;
  v41 = *MEMORY[0x1E0C80C00];
  v13 = a5 * a4;
  v14 = a5 * a4 * a2;
  if (a6 > 109)
  {
    if (a6 == 110)
    {
      v15 = 3000;
      goto LABEL_13;
    }
    if (a6 == 122 || a6 == 144)
    {
      v15 = 4000;
      goto LABEL_13;
    }
  }
  else
  {
    v15 = 1000;
    if ((a6 - 66) < 2)
      goto LABEL_13;
    if ((a6 - 100) < 2)
      goto LABEL_12;
    if (a6 == 77)
      goto LABEL_13;
  }
  v10 = 100;
LABEL_12:
  v15 = 1250;
LABEL_13:
  if (v13 <= 36864)
    v16 = 51;
  else
    v16 = 52;
  if (v13 < 22081)
    v16 = 50;
  if (v13 < 8705)
    v16 = 42;
  if (v13 <= 0x2000)
    v16 = 40;
  if (v13 < 5121)
    v16 = 32;
  if (v13 < 3601)
    v16 = 31;
  if (v13 < 1621)
    v16 = 22;
  if (v13 < 793)
    v16 = 21;
  if (v13 >= 397)
    v17 = v16;
  else
    v17 = 11;
  if (v13 < 100)
    v17 = 10;
  if (v14 < 983041)
    v18 = 51;
  else
    v18 = 52;
  if (v14 <= 589824)
    v18 = 50;
  if (v14 >= 522241)
    v19 = v18;
  else
    v19 = 42;
  if (v14 <= 245760)
    v19 = 40;
  if (v14 < 216001)
    v19 = 32;
  if (v14 < 108001)
    v19 = 31;
  if (v14 < 40501)
    v19 = 30;
  if (v14 < 20251)
    v19 = 22;
  if (v14 < 19801)
    v19 = 21;
  if (v14 < 11881)
    v19 = 13;
  if (v14 < 6001)
    v19 = 12;
  if (v14 < 3001)
    v19 = 11;
  if (v14 < 1486)
    v19 = 10;
  if (v17 > v19)
    v19 = v17;
  if (192000 * v15 >= a3)
    v20 = 51;
  else
    v20 = 52;
  if (108000 * v15 >= a3)
    v20 = 50;
  if (50000 * v15 >= a3)
    v20 = 41;
  if (20000 * v15 >= a3)
    v20 = 32;
  if (14000 * v15 >= a3)
    v20 = 31;
  if (10000 * v15 >= a3)
    v20 = 30;
  if (4000 * v15 >= a3)
    v20 = 21;
  if (2000 * v15 >= a3)
    v20 = 20;
  if (768 * v15 >= a3)
    v20 = 13;
  if (384 * v15 >= a3)
    v20 = 12;
  if (192 * v15 >= a3)
    v21 = 11;
  else
    v21 = v20;
  if (a3 <= v15 << 7)
    v21 = 1;
  if (a3 <= v15 << 6)
    v22 = 10;
  else
    v22 = v21;
  if (v19 <= v22)
    v23 = v22;
  else
    v23 = v19;
  if (a7)
  {
    if (v23 > a7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67110400;
        v30 = a7;
        v31 = 1024;
        v32 = v23;
        v33 = 1024;
        v34 = v10;
        v35 = 1024;
        v36 = v13;
        v37 = 1024;
        v38 = v14;
        v39 = 1024;
        v40 = a3;
        _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Proposed level idc (%d) is not supported; Minimal level idc %d should be used based on profile %d, num_mb_f %d"
          ", num_mb_s %d, bps %d.\n",
          buf,
          0x26u);
      }
      return 4294954386;
    }
    v23 = a7;
  }
  if (v10 == 101)
  {
    *(_DWORD *)a1 = 100;
    *(_WORD *)(a1 + 12) = 257;
  }
  else if (v10 == 67)
  {
    *(_DWORD *)a1 = 66;
    *(_WORD *)(a1 + 8) = 257;
    *(_BYTE *)(a1 + 10) = 1;
  }
  else
  {
    *(_DWORD *)a1 = v10;
  }
  *(_DWORD *)(a1 + 4) = v23;
  switch(v23)
  {
    case 10:
LABEL_115:
      v25 = 396;
      goto LABEL_126;
    case 11:
      v25 = 900;
      goto LABEL_126;
    case 12:
    case 13:
    case 20:
      v25 = 2376;
      goto LABEL_126;
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
LABEL_116:
      if (dword_1EF137CD0 > 1)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Cannot set max_dpb_size with level %d -> default to 1\n", v23);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v30 = v23;
          _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Cannot set max_dpb_size with level %d -> default to 1\n", buf, 8u);
        }
      }
      v26 = 1;
      goto LABEL_129;
    case 21:
      v25 = 4752;
      goto LABEL_126;
    case 22:
    case 30:
      v25 = 8100;
      goto LABEL_126;
    case 31:
      v25 = 18000;
      goto LABEL_126;
    case 32:
      v25 = 20480;
LABEL_126:
      v27 = v25 / v13;
      if (v27 >= 16)
        v26 = 16;
      else
        v26 = v27;
LABEL_129:
      if (a8 < 1)
        goto LABEL_138;
      if (v26 <= a8)
      {
        if (v26 < a8 && dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          v30 = v23;
          v31 = 1024;
          v32 = v26;
          _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "level idc %d can only support reference buffer count %d", buf, 0xEu);
        }
LABEL_138:
        a8 = v26;
      }
      else if (dword_1EF137CD0 >= 3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v30 = a8;
        v31 = 1024;
        v32 = v26;
        _os_log_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Use requested reference buffer count %d instead of %d\n", buf, 0xEu);
      }
      result = 0;
      if (a8 >= 15)
        v28 = 15;
      else
        v28 = a8;
      *(_DWORD *)(a1 + 1320) = v28;
      break;
    default:
      switch(v23)
      {
        case '(':
        case ')':
          v25 = 0x8000;
          goto LABEL_126;
        case '*':
          v25 = 34816;
          goto LABEL_126;
        case '+':
        case ',':
        case '-':
        case '.':
        case '/':
        case '0':
        case '1':
          goto LABEL_116;
        case '2':
          v25 = 110400;
          goto LABEL_126;
        case '3':
        case '4':
          v25 = 184320;
          goto LABEL_126;
        default:
          if (v23 == 1)
            goto LABEL_115;
          goto LABEL_116;
      }
  }
  return result;
}

uint64_t sub_1B68910E4(unsigned __int8 **a1, unint64_t **a2, unsigned __int8 *a3, void *a4, size_t *a5)
{
  int v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  char v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t j;
  size_t v32;
  void *v33;
  uint64_t v35;
  char *v36;
  uint64_t i;
  _BYTE *v38;
  uint64_t v39;
  char v40;
  char v41;
  unint64_t v42;
  int v43;
  _DWORD *v44;
  char v45;
  unint64_t v46;
  int v47;
  _DWORD *v48;
  int v49;
  unint64_t v50;
  int v51;
  _DWORD *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  _DWORD *v58;
  char v59;
  unint64_t v60;
  int v61;
  _DWORD *v62;
  int v63;
  unint64_t v64;
  int v65;
  _DWORD *v66;
  int v67;
  unint64_t v68;
  int v69;
  _DWORD *v70;
  int v71;
  unint64_t v72;
  int v73;
  _DWORD *v74;
  int v75;
  unint64_t v76;
  int v77;
  _DWORD *v78;
  int v79;
  unint64_t v80;
  int v81;
  _DWORD *v82;
  int v83;
  unint64_t v84;
  int v85;
  _DWORD *v86;
  int v87;
  unint64_t v88;
  int v89;
  _DWORD *v90;
  int v91;
  unint64_t v92;
  int v93;
  _DWORD *v94;
  int v95;
  unint64_t v96;
  int v97;
  _DWORD *v98;
  int v99;
  unint64_t v100;
  int v101;
  _DWORD *v102;
  char v103;
  unint64_t v104;
  int v105;
  _DWORD *v106;
  int v107;
  unint64_t v108;
  int v109;
  _DWORD *v110;
  int v111;
  unint64_t v112;
  int v113;
  _DWORD *v114;
  int v115;
  unint64_t v116;
  int v117;
  _DWORD *v118;
  int v119;
  unint64_t v120;
  unsigned int v121;
  _DWORD *v122;
  char v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int v126;
  _DWORD *v127;
  unint64_t v128;
  _DWORD *v129;
  unint64_t v130;
  _DWORD *v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int v134;
  unint64_t v135;
  unsigned __int8 *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  void *__src;
  uint64_t v143;
  size_t __n;
  char v145;
  unsigned __int8 v146;
  unsigned int v147;
  uint64_t v148;
  unsigned __int8 v149;
  unsigned __int16 v150;
  unsigned __int8 v151;
  unsigned __int8 v152;
  unsigned __int8 v153;
  unsigned __int8 v154;
  unsigned __int16 v155;
  unsigned __int8 v156;
  unsigned __int8 v157;
  _BYTE v158[5];
  _BYTE v159[1544];
  std::__shared_weak_count *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count *v162;
  void *v163[2];
  _BYTE *v164;
  _DWORD *v165;
  void *__dst;
  unint64_t v167;
  char v168;
  _QWORD v169[3];
  __int16 v170;
  uint64_t v171;
  uint64_t (*v172)(_QWORD *, uint64_t);
  uint64_t v173;
  _QWORD v174[3];
  __int16 v175;
  uint64_t v176;
  uint64_t (*v177)(_QWORD *, uint64_t);
  uint64_t v178;
  _QWORD v179[3];
  __int16 v180;
  uint64_t v181;
  uint64_t (*v182)(_QWORD *, uint64_t);
  uint64_t v183;
  _QWORD v184[3];
  __int16 v185;
  uint64_t v186;
  uint64_t (*v187)(_QWORD *, uint64_t);
  uint64_t v188;
  _QWORD v189[3];
  __int16 v190;
  uint64_t v191;
  uint64_t (*v192)(_QWORD *, uint64_t);
  uint64_t v193;

  __src = 0;
  v143 = 0;
  v189[0] = &off_1E6A159D8;
  v189[1] = 2;
  v189[2] = 0;
  v190 = -192;
  v191 = 0;
  v192 = sub_1B67AD728;
  v193 = 0;
  v184[0] = &off_1E6A159D8;
  v184[1] = 2;
  v184[2] = 0;
  v185 = -192;
  v186 = 0;
  v187 = sub_1B67AD728;
  v188 = 0;
  v179[0] = &off_1E6A159D8;
  v179[1] = 2;
  v179[2] = 0;
  v180 = -192;
  v181 = 0;
  v182 = sub_1B67AD728;
  v183 = 0;
  v174[0] = &off_1E6A159D8;
  v174[1] = 2;
  v174[2] = 0;
  v175 = -192;
  v176 = 0;
  v177 = sub_1B67AD728;
  v178 = 0;
  v169[0] = &off_1E6A159D8;
  v169[1] = 2;
  v169[2] = 0;
  v170 = -192;
  v171 = 0;
  v172 = sub_1B67AD728;
  v173 = 0;
  off_1EF137C48 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B67AD840;
  v163[1] = 0;
  v163[0] = 0;
  v167 = 0;
  v165 = 0;
  __dst = 0;
  bzero(v159, 0x630uLL);
  v157 = 0;
  __n = 0;
  if (!(a3[1] * *a3 * a3[2]) || !(*a2[1] * **a2 * *a2[2]) || !*a1 || !a1[1] || !a1[2])
  {
    v16 = 4294954394;
    goto LABEL_25;
  }
  v10 = 0;
  v11 = 0;
  v12 = 23;
  do
  {
    v13 = a3[v11];
    if (a3[v11])
    {
      v157 = ++v10;
      v12 += 3;
      v14 = a2[v11];
      do
      {
        v15 = *v14++;
        v12 += v15 + 2;
        --v13;
      }
      while (v13);
    }
    ++v11;
  }
  while (v11 != 5);
  v16 = sub_1B67C2364(&__src, v12, 0x10uLL);
  if (!(_DWORD)v16)
  {
    v16 = sub_1B67B6B1C((uint64_t)v189, *a1, **a2);
    if (!(_DWORD)v16)
    {
      v16 = sub_1B67B6B1C((uint64_t)v184, a1[1], *a2[1]);
      if (!(_DWORD)v16)
      {
        v16 = sub_1B67B6B1C((uint64_t)v179, a1[2], *a2[2]);
        if (!(_DWORD)v16)
        {
          if (!a3[3]
            || (v17 = a1[3]) == 0
            || (v18 = *a2[3]) == 0
            || (v16 = sub_1B67B6B1C((uint64_t)v174, v17, v18), !(_DWORD)v16))
          {
            if (a3[4] && (v19 = a1[4]) != 0 && (v20 = *a2[4]) != 0)
            {
              v16 = sub_1B67B6B1C((uint64_t)v169, v19, v20);
              if ((_DWORD)v16)
                goto LABEL_25;
              v21 = v170;
            }
            else
            {
              v21 = 64;
            }
            v158[0] = v190;
            v158[1] = v185;
            v158[2] = v180;
            v158[3] = v175;
            v158[4] = v21;
            v16 = sub_1B67B43C4((uint64_t)v159, (uint64_t)v189);
            if (!(_DWORD)v16)
            {
              v16 = sub_1B67B43C4((uint64_t)v159, (uint64_t)v184);
              if (!(_DWORD)v16)
              {
                v35 = 0;
                while (1)
                {
                  v36 = *(char **)&v159[v35];
                  if (v36)
                    break;
                  v35 += 16;
                  if (v35 == 256)
                    goto LABEL_64;
                }
                for (i = 0; i != 256; i += 16)
                {
                  v38 = *(_BYTE **)&v159[i + 256];
                  if (v38)
                  {
                    v39 = (8 * (v36[44] & 1)) | (4 * (v36[45] & 1)) | (2 * (v36[46] & 1)) | v36[47] & 1u;
                    v145 = 1;
                    v40 = *v36;
                    v146 = v146 & 0xFC | *v36 & 3;
                    v41 = 4 * (v36[7] & 1);
                    v146 = v41 | v146 & 0xFB;
                    v146 = v41 & 0xFC | (8 * v36[8]) | v40 & 3;
                    v147 = *((_DWORD *)v36 + 4);
                    v148 = v39 << 44;
                    v149 = v36[57];
                    v150 = 0;
                    v151 = 0;
                    v152 = v38[173];
                    v153 = v38[194];
                    v154 = v38[195];
                    v155 = 0;
                    v156 = (4 * v36[169] + 4) & 0x1C | (32 * v36[170]) | 0xC0;
                    v16 = 4294954387;
                    if (!__src || !v143)
                      goto LABEL_25;
                    v164 = __src;
                    v165 = __src;
                    __dst = (char *)__src + v143;
                    v168 = 0;
                    v167 = 0x1000000;
                    *(_DWORD *)__src = 1;
                    v42 = SHIDWORD(v167) + 8;
                    v43 = (_DWORD)v167 << (v42 & 0xF8);
                    v44 = (_DWORD *)((char *)v165 + (v42 >> 3));
                    v165 = v44;
                    v45 = BYTE4(v167) & 7;
                    HIDWORD(v167) = BYTE4(v167) & 7;
                    if (v44 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v44 = __dst;
                    }
                    LODWORD(v167) = ((v146 & 3) << (30 - v45)) | v43;
                    *v44 = bswap32(v167);
                    v46 = SHIDWORD(v167) + 2;
                    v47 = (_DWORD)v167 << (v46 & 0xF8);
                    v48 = (_DWORD *)((char *)v165 + (v46 >> 3));
                    v165 = v48;
                    v49 = v46 & 7;
                    HIDWORD(v167) = v49;
                    if (v48 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v48 = __dst;
                    }
                    LODWORD(v167) = (((v146 >> 2) & 1) << (v49 ^ 0x1F)) | v47;
                    *v48 = bswap32(v167);
                    v50 = SHIDWORD(v167) + 1;
                    v51 = (_DWORD)v167 << (v50 & 0xF8);
                    v52 = (_DWORD *)((char *)v165 + (v50 >> 3));
                    v165 = v52;
                    v53 = v50 & 7;
                    HIDWORD(v167) = v53;
                    if (v52 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v52 = __dst;
                    }
                    LODWORD(v167) = (v146 >> 3 << (27 - v53)) | v51;
                    *v52 = bswap32(v167);
                    v54 = SHIDWORD(v167) + 5;
                    v165 = (_DWORD *)((char *)v165 + (v54 >> 3));
                    LODWORD(v167) = (_DWORD)v167 << (v54 & 0xF8);
                    HIDWORD(v167) = v54 & 7;
                    if (v165 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                    }
                    sub_1B67C9044((uint64_t)v163, v147, 32);
                    LODWORD(v167) = (HIDWORD(v148) << (16 - BYTE4(v167))) | v167;
                    *v165 = bswap32(v167);
                    v55 = SHIDWORD(v167) + 16;
                    v165 = (_DWORD *)((char *)v165 + (v55 >> 3));
                    v167 = __PAIR64__(HIDWORD(v167), (_DWORD)v167 << (v55 & 0xF8)) & 0x7FFFFFFFFLL;
                    if (v165 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                    }
                    sub_1B67C9044((uint64_t)v163, v148, 32);
                    LODWORD(v167) = (v149 << (24 - BYTE4(v167))) | v167;
                    *v165 = bswap32(v167);
                    v56 = SHIDWORD(v167) + 8;
                    v57 = (_DWORD)v167 << (v56 & 0xF8);
                    v58 = (_DWORD *)((char *)v165 + (v56 >> 3));
                    v165 = v58;
                    v59 = BYTE4(v167) & 7;
                    HIDWORD(v167) = BYTE4(v167) & 7;
                    if (v58 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v58 = __dst;
                    }
                    LODWORD(v167) = (15 << (28 - v59)) | v57;
                    *v58 = bswap32(v167);
                    v60 = SHIDWORD(v167) + 4;
                    v61 = (_DWORD)v167 << (v60 & 0xF8);
                    v62 = (_DWORD *)((char *)v165 + (v60 >> 3));
                    v165 = v62;
                    v63 = v60 & 7;
                    HIDWORD(v167) = v63;
                    if (v62 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v62 = __dst;
                    }
                    LODWORD(v167) = (v150 << (20 - v63)) | v61;
                    *v62 = bswap32(v167);
                    v64 = SHIDWORD(v167) + 12;
                    v65 = (_DWORD)v167 << (v64 & 0xF8);
                    v66 = (_DWORD *)((char *)v165 + (v64 >> 3));
                    v165 = v66;
                    v67 = v64 & 7;
                    HIDWORD(v167) = v67;
                    if (v66 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v66 = __dst;
                    }
                    LODWORD(v167) = (63 << (26 - v67)) | v65;
                    *v66 = bswap32(v167);
                    v68 = SHIDWORD(v167) + 6;
                    v69 = (_DWORD)v167 << (v68 & 0xF8);
                    v70 = (_DWORD *)((char *)v165 + (v68 >> 3));
                    v165 = v70;
                    v71 = v68 & 7;
                    HIDWORD(v167) = v71;
                    if (v70 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v70 = __dst;
                    }
                    LODWORD(v167) = (v151 << (30 - v71)) | v69;
                    *v70 = bswap32(v167);
                    v72 = SHIDWORD(v167) + 2;
                    v73 = (_DWORD)v167 << (v72 & 0xF8);
                    v74 = (_DWORD *)((char *)v165 + (v72 >> 3));
                    v165 = v74;
                    v75 = v72 & 7;
                    HIDWORD(v167) = v75;
                    if (v74 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v74 = __dst;
                    }
                    LODWORD(v167) = (63 << (26 - v75)) | v73;
                    *v74 = bswap32(v167);
                    v76 = SHIDWORD(v167) + 6;
                    v77 = (_DWORD)v167 << (v76 & 0xF8);
                    v78 = (_DWORD *)((char *)v165 + (v76 >> 3));
                    v165 = v78;
                    v79 = v76 & 7;
                    HIDWORD(v167) = v79;
                    if (v78 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v78 = __dst;
                    }
                    LODWORD(v167) = (v152 << (30 - v79)) | v77;
                    *v78 = bswap32(v167);
                    v80 = SHIDWORD(v167) + 2;
                    v81 = (_DWORD)v167 << (v80 & 0xF8);
                    v82 = (_DWORD *)((char *)v165 + (v80 >> 3));
                    v165 = v82;
                    v83 = v80 & 7;
                    HIDWORD(v167) = v83;
                    if (v82 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v82 = __dst;
                    }
                    LODWORD(v167) = (31 << (27 - v83)) | v81;
                    *v82 = bswap32(v167);
                    v84 = SHIDWORD(v167) + 5;
                    v85 = (_DWORD)v167 << (v84 & 0xF8);
                    v86 = (_DWORD *)((char *)v165 + (v84 >> 3));
                    v165 = v86;
                    v87 = v84 & 7;
                    HIDWORD(v167) = v87;
                    if (v86 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v86 = __dst;
                    }
                    LODWORD(v167) = (v153 << (29 - v87)) | v85;
                    *v86 = bswap32(v167);
                    v88 = SHIDWORD(v167) + 3;
                    v89 = (_DWORD)v167 << (v88 & 0xF8);
                    v90 = (_DWORD *)((char *)v165 + (v88 >> 3));
                    v165 = v90;
                    v91 = v88 & 7;
                    HIDWORD(v167) = v91;
                    if (v90 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v90 = __dst;
                    }
                    LODWORD(v167) = (31 << (27 - v91)) | v89;
                    *v90 = bswap32(v167);
                    v92 = SHIDWORD(v167) + 5;
                    v93 = (_DWORD)v167 << (v92 & 0xF8);
                    v94 = (_DWORD *)((char *)v165 + (v92 >> 3));
                    v165 = v94;
                    v95 = v92 & 7;
                    HIDWORD(v167) = v95;
                    if (v94 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v94 = __dst;
                    }
                    LODWORD(v167) = (v154 << (29 - v95)) | v93;
                    *v94 = bswap32(v167);
                    v96 = SHIDWORD(v167) + 3;
                    v97 = (_DWORD)v167 << (v96 & 0xF8);
                    v98 = (_DWORD *)((char *)v165 + (v96 >> 3));
                    v165 = v98;
                    v99 = v96 & 7;
                    HIDWORD(v167) = v99;
                    if (v98 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v98 = __dst;
                    }
                    LODWORD(v167) = (v155 << (16 - v99)) | v97;
                    *v98 = bswap32(v167);
                    v100 = SHIDWORD(v167) + 16;
                    v101 = (_DWORD)v167 << (v100 & 0xF8);
                    v102 = (_DWORD *)((char *)v165 + (v100 >> 3));
                    v165 = v102;
                    v103 = BYTE4(v167) & 7;
                    HIDWORD(v167) = BYTE4(v167) & 7;
                    if (v102 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v102 = __dst;
                    }
                    LODWORD(v167) = ((v156 & 3) << (30 - v103)) | v101;
                    *v102 = bswap32(v167);
                    v104 = SHIDWORD(v167) + 2;
                    v105 = (_DWORD)v167 << (v104 & 0xF8);
                    v106 = (_DWORD *)((char *)v165 + (v104 >> 3));
                    v165 = v106;
                    v107 = v104 & 7;
                    HIDWORD(v167) = v107;
                    if (v106 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v106 = __dst;
                    }
                    LODWORD(v167) = (((v156 >> 2) & 7) << (29 - v107)) | v105;
                    *v106 = bswap32(v167);
                    v108 = SHIDWORD(v167) + 3;
                    v109 = (_DWORD)v167 << (v108 & 0xF8);
                    v110 = (_DWORD *)((char *)v165 + (v108 >> 3));
                    v165 = v110;
                    v111 = v108 & 7;
                    HIDWORD(v167) = v111;
                    if (v110 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v110 = __dst;
                    }
                    LODWORD(v167) = (((v156 >> 5) & 1) << (v111 ^ 0x1F)) | v109;
                    *v110 = bswap32(v167);
                    v112 = SHIDWORD(v167) + 1;
                    v113 = (_DWORD)v167 << (v112 & 0xF8);
                    v114 = (_DWORD *)((char *)v165 + (v112 >> 3));
                    v165 = v114;
                    v115 = v112 & 7;
                    HIDWORD(v167) = v115;
                    if (v114 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v114 = __dst;
                    }
                    LODWORD(v167) = (v156 >> 6 << (30 - v115)) | v113;
                    *v114 = bswap32(v167);
                    v116 = SHIDWORD(v167) + 2;
                    v117 = (_DWORD)v167 << (v116 & 0xF8);
                    v118 = (_DWORD *)((char *)v165 + (v116 >> 3));
                    v165 = v118;
                    v119 = v116 & 7;
                    HIDWORD(v167) = v119;
                    if (v118 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v118 = __dst;
                    }
                    LODWORD(v167) = (v157 << (24 - v119)) | v117;
                    *v118 = bswap32(v167);
                    v120 = SHIDWORD(v167) + 8;
                    v121 = (_DWORD)v167 << (v120 & 0xF8);
                    v122 = (_DWORD *)((char *)v165 + (v120 >> 3));
                    v165 = v122;
                    v123 = BYTE4(v167) & 7;
                    v167 = __PAIR64__(HIDWORD(v167), v121) & 0x7FFFFFFFFLL;
                    if (v122 >= __dst)
                    {
                      v168 = 1;
                      v165 = __dst;
                      v122 = __dst;
                    }
                    v124 = 0;
                    while (1)
                    {
                      if (a3[v124])
                      {
                        LODWORD(v167) = (0x80000000 >> v123) | v121;
                        *v122 = bswap32(v167);
                        v125 = SHIDWORD(v167) + 1;
                        v126 = (_DWORD)v167 << (v125 & 0xF8);
                        v127 = (_DWORD *)((char *)v165 + (v125 >> 3));
                        LODWORD(v167) = v126;
                        HIDWORD(v167) = v125 & 7;
                        v165 = v127;
                        if (v127 >= __dst)
                        {
                          v168 = 1;
                          v165 = __dst;
                          v127 = __dst;
                        }
                        *v127 = bswap32(v126);
                        v128 = SHIDWORD(v167) + 1;
                        v129 = (_DWORD *)((char *)v165 + (v128 >> 3));
                        v165 = v129;
                        HIDWORD(v167) = v128 & 7;
                        if (v129 >= __dst)
                        {
                          v168 = 1;
                          v165 = __dst;
                          v129 = __dst;
                        }
                        LODWORD(v167) = (v158[v124] << (26 - (v128 & 7))) | ((_DWORD)v167 << (v128 & 0xF8));
                        *v129 = bswap32(v167);
                        v130 = SHIDWORD(v167) + 6;
                        v131 = (_DWORD *)((char *)v165 + (v130 >> 3));
                        v165 = v131;
                        HIDWORD(v167) = v130 & 7;
                        if (v131 >= __dst)
                        {
                          v168 = 1;
                          v165 = __dst;
                          v131 = __dst;
                        }
                        v132 = a3[v124];
                        LODWORD(v167) = ((_DWORD)v132 << (16 - (v130 & 7))) | ((_DWORD)v167 << (v130 & 0xF8));
                        *v131 = bswap32(v167);
                        v133 = SHIDWORD(v167) + 16;
                        v134 = (_DWORD)v167 << (v133 & 0xF8);
                        v122 = (_DWORD *)((char *)v165 + (v133 >> 3));
                        v165 = v122;
                        v123 = BYTE4(v167) & 7;
                        v167 = __PAIR64__(HIDWORD(v167), v134) & 0x7FFFFFFFFLL;
                        if (v122 >= __dst)
                        {
                          v168 = 1;
                          v165 = __dst;
                          v122 = __dst;
                        }
                        if ((_DWORD)v132)
                        {
                          v135 = 0;
                          v136 = a1[v124];
                          v137 = 8 * v132;
                          while (1)
                          {
                            v138 = a2[v124][v135 / 8];
                            LODWORD(v167) = ((_DWORD)v138 << (16 - v123)) | v134;
                            *v122 = bswap32(v167);
                            v139 = SHIDWORD(v167) + 16;
                            v140 = (_DWORD *)((char *)v165 + (v139 >> 3));
                            v165 = v140;
                            LODWORD(v167) = (_DWORD)v167 << (v139 & 0xF8);
                            HIDWORD(v167) = BYTE4(v167) & 7;
                            if (v140 >= __dst)
                            {
                              v168 = 1;
                              v165 = __dst;
                              v140 = __dst;
                            }
                            v141 = (int)v138;
                            if ((int)v138 > (unint64_t)((_BYTE *)__dst - (_BYTE *)v140))
                              break;
                            memcpy(v140, v136, (int)v138);
                            v123 = BYTE4(v167);
                            v122 = (_DWORD *)((char *)v165 + v141 + (SHIDWORD(v167) >> 3));
                            v165 = v122;
                            if (v122 >= __dst)
                            {
                              v168 = 1;
                              v165 = __dst;
                              v122 = __dst;
                            }
                            v134 = 0;
                            v121 = 0;
                            LODWORD(v167) = 0;
                            v136 += v141;
                            v135 += 8;
                            if (v137 == v135)
                              goto LABEL_131;
                          }
                          v16 = 4294940770;
                          goto LABEL_25;
                        }
                        v121 = v134;
                      }
LABEL_131:
                      if (++v124 == 5)
                      {
                        v16 = 0;
                        __n = (char *)v122 - v164;
                        goto LABEL_25;
                      }
                    }
                  }
                }
LABEL_64:
                v16 = 4294954387;
              }
            }
          }
        }
      }
    }
  }
LABEL_25:
  v22 = v162;
  if (v162)
  {
    p_shared_owners = (unint64_t *)&v162->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v161;
  if (v161)
  {
    v26 = (unint64_t *)&v161->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v160;
  if (v160)
  {
    v29 = (unint64_t *)&v160->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  for (j = 1520; j != 496; j -= 16)
    sub_1B6772C88((uint64_t)&v159[j]);
  do
  {
    sub_1B6772C88((uint64_t)&v159[j]);
    j -= 16;
  }
  while (j != 240);
  do
  {
    sub_1B6772C88((uint64_t)&v159[j]);
    j -= 16;
  }
  while (j != -16);
  if (v163[0])
    free(v163[0]);
  if (!(_DWORD)v16)
  {
    v32 = __n;
    if (*a5 >= __n)
    {
      v33 = __src;
      memcpy(a4, __src, __n);
      v16 = 0;
      *a5 = v32;
      if (!v33)
        return v16;
      goto LABEL_50;
    }
    v16 = 4294954394;
  }
  v33 = __src;
  if (__src)
LABEL_50:
    free(v33);
  return v16;
}

void sub_1B68921A0(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_1B67C96A0((uint64_t)va);
  if (STACK[0x678])
    free((void *)STACK[0x678]);
  if (a3)
    free(a3);
  _Unwind_Resume(a1);
}

uint64_t sub_1B68921D4(const void *a1, size_t a2, _DWORD *a3, _BYTE *a4)
{
  uint64_t v8;
  _BYTE *v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t i;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint8_t v53[16];
  _BYTE v54[1544];
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _QWORD v60[3];
  __int16 v61;
  uint64_t v62;
  uint64_t (*v63)(_QWORD *, uint64_t);
  uint64_t v64;
  _QWORD v65[3];
  __int16 v66;
  uint64_t v67;
  uint64_t (*v68)(_QWORD *, uint64_t);
  uint64_t v69;
  _QWORD v70[3];
  __int16 v71;
  uint64_t v72;
  uint64_t (*v73)(_QWORD *, uint64_t);
  uint64_t v74;
  void *__dst[2];
  size_t v76;
  int64x2_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[5];
  _QWORD v82[5];
  _QWORD v83[5];
  _BYTE v84[512];
  _BYTE v85[128];
  _QWORD v86[18];

  v86[16] = *MEMORY[0x1E0C80C00];
  __dst[1] = 0;
  __dst[0] = 0;
  v76 = 0;
  if (sub_1B67C2364(__dst, a2, 0x10uLL))
  {
    v8 = 4294954392;
  }
  else
  {
    memcpy(__dst[0], a1, a2);
    v76 = a2;
    v70[0] = &off_1E6A159D8;
    v70[1] = 2;
    v70[2] = 0;
    v71 = -192;
    v72 = 0;
    v73 = sub_1B67AD728;
    v74 = 0;
    v65[0] = &off_1E6A159D8;
    v65[1] = 2;
    v65[2] = 0;
    v66 = -192;
    v67 = 0;
    v68 = sub_1B67AD728;
    v69 = 0;
    v60[0] = &off_1E6A159D8;
    v60[1] = 2;
    v60[2] = 0;
    v61 = -192;
    v62 = 0;
    v63 = sub_1B67AD728;
    v64 = 0;
    off_1EF137C48 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B67AD840;
    v59 = 0;
    v58 = 0;
    v10 = v54;
    bzero(v54, 0x630uLL);
    if (a4)
      v10 = a4;
    v11 = operator new[]();
    v12 = v11 + a2;
    v13 = v11 + a2 + a2;
    v83[0] = v11;
    v83[1] = v11 + a2;
    v83[4] = 0;
    v83[2] = v13;
    v83[3] = 0;
    v82[0] = v86;
    v82[1] = v85;
    v82[4] = 0;
    v82[2] = v84;
    v82[3] = 0;
    v81[0] = a2;
    v81[1] = a2;
    v81[4] = 0;
    v81[2] = a2;
    v81[3] = 0;
    v80 = 0;
    v77 = vdupq_n_s64(0x80uLL);
    v79 = 0;
    v78 = 512;
    v8 = sub_1B67C9718((uint64_t)__dst, (uint64_t)v83, (uint64_t)v81, (uint64_t)v82, (uint64_t)&v77);
    if ((_DWORD)v8)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v53 = 0;
        _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "LRPConfigInfo_hvcc: extract parameter sets from configuration record failed", v53, 2u);
      }
    }
    else
    {
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = v86[v14];
        if (v16)
        {
          v17 = sub_1B67B6B1C((uint64_t)v70, (unsigned __int8 *)(v11 + v15), v16);
          if ((_DWORD)v17)
          {
            v18 = v17;
            if ((v8 & 1) == 0)
              goto LABEL_38;
            goto LABEL_21;
          }
          v18 = sub_1B67B43C4((uint64_t)v10, (uint64_t)v70);
          if ((_DWORD)v18)
            goto LABEL_18;
          v15 += LODWORD(v86[v14]);
        }
        LOBYTE(v8) = v14++ > 0xE;
      }
      while (v14 != 16);
      v18 = 0;
LABEL_18:
      if ((v8 & 1) == 0)
      {
LABEL_38:
        v8 = v18;
        goto LABEL_40;
      }
LABEL_21:
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = *(_QWORD *)&v85[v19];
        if (v21)
        {
          v22 = sub_1B67B6B1C((uint64_t)v65, (unsigned __int8 *)(v12 + v20), v21);
          if ((_DWORD)v22)
          {
LABEL_39:
            v8 = v22;
            goto LABEL_40;
          }
          v8 = sub_1B67B43C4((uint64_t)v10, (uint64_t)v65);
          if ((_DWORD)v8)
            goto LABEL_40;
          v20 += *(_DWORD *)&v85[v19];
        }
        v19 += 8;
      }
      while (v19 != 128);
      v23 = 0;
      v24 = 0;
      do
      {
        v25 = *(_QWORD *)&v84[v23];
        if (v25)
        {
          v22 = sub_1B67B6B1C((uint64_t)v60, (unsigned __int8 *)(v13 + v24), v25);
          if ((_DWORD)v22)
            goto LABEL_39;
          v8 = sub_1B67B43C4((uint64_t)v10, (uint64_t)v60);
          if ((_DWORD)v8)
            goto LABEL_40;
          v24 += *(_DWORD *)&v84[v23];
        }
        v23 += 8;
      }
      while (v23 != 512);
      if (!a3)
        goto LABEL_38;
      v26 = 0;
      v27 = v10 + 256;
      v8 = 4294954387;
      while (1)
      {
        v28 = *(_QWORD *)&v27[v26];
        if (v28)
          break;
        v26 += 16;
        if (v26 == 256)
          goto LABEL_40;
      }
      sub_1B67B665C(&v58, v28, *(_QWORD *)&v27[v26 + 8]);
      v42 = *(_DWORD *)(v58 + 176);
      v43 = *(_DWORD *)(v58 + 180);
      v44 = *(unsigned __int8 *)(v58 + 184);
      if (*(_BYTE *)(v58 + 184))
      {
        v45 = &byte_1B692BFF0[2 * *(unsigned __int8 *)(v58 + 173)];
        v46 = *v45;
        v47 = v45[1];
        v48 = *(unsigned __int16 *)(v58 + 186);
        v44 = v48 * v46;
        v49 = *(unsigned __int16 *)(v58 + 190);
        v50 = v49 * v47;
        v51 = v42 - (*(unsigned __int16 *)(v58 + 188) + v48) * v46;
        v52 = v43 - (*(unsigned __int16 *)(v58 + 192) + v49) * v47;
      }
      else
      {
        v50 = 0;
        v51 = *(_DWORD *)(v58 + 176);
        v52 = *(_DWORD *)(v58 + 180);
      }
      *a3 = v42;
      a3[1] = v43;
      a3[2] = v44;
      a3[3] = v50;
      v8 = v18;
      a3[4] = v51;
      a3[5] = v52;
    }
LABEL_40:
    MEMORY[0x1BCC9811C](v11, 0x1000C8077774924);
    v29 = v57;
    if (v57)
    {
      p_shared_owners = (unint64_t *)&v57->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v56;
    if (v56)
    {
      v33 = (unint64_t *)&v56->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v55;
    if (v55)
    {
      v36 = (unint64_t *)&v55->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    for (i = 1520; i != 496; i -= 16)
      sub_1B6772C88((uint64_t)&v54[i]);
    do
    {
      sub_1B6772C88((uint64_t)&v54[i]);
      i -= 16;
    }
    while (i != 240);
    do
    {
      sub_1B6772C88((uint64_t)&v54[i]);
      i -= 16;
    }
    while (i != -16);
    v39 = v59;
    if (v59)
    {
      v40 = (unint64_t *)&v59->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  if (__dst[0])
    free(__dst[0]);
  return v8;
}

void sub_1B689272C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B67C96A0((uint64_t)va);
  sub_1B6772C88((uint64_t)&STACK[0x640]);
  if (STACK[0x6F8])
    free((void *)STACK[0x6F8]);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6892768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void ***v7;
  void ***v8;
  int32x2_t *v9;
  int32x2_t *v10;
  size_t v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  void ***v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  size_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  size_t v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t i;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  BOOL v57;
  char v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int *v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int *v82;
  BOOL v83;
  unsigned int v84;
  unsigned __int8 v85;
  unsigned int v86;
  char v87;
  char v88;
  char v89;
  int v90;
  unint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  unint64_t v95;
  char v96;
  int v97;
  int v98;
  unint64_t v99;
  char v100;
  unsigned int *v101;
  unsigned int v102;
  int v103;
  unint64_t v104;
  char v105;
  unsigned int *v106;
  BOOL v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  _DWORD *v113;
  int v114;
  int v115;
  unint64_t v116;
  char v117;
  unsigned int *v118;
  unsigned int v119;
  void ***v120;
  int v121;
  unint64_t v122;
  int v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int v126;
  int v127;
  unint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  unsigned int *v134;
  unsigned int v135;
  int v136;
  int v137;
  unsigned int *v138;
  unsigned int v139;
  int v140;
  unint64_t v141;
  unsigned int *v142;
  BOOL v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  unint64_t v148;
  char v149;
  unsigned int *v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  BOOL *v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  const std::nothrow_t *v159;
  unint64_t v160;
  unsigned int *v161;
  unint64_t v162;
  _OWORD *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *p_shared_owners;
  char v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unint64_t v178;
  unsigned int *v179;
  unsigned int *v180;
  unsigned int v181;
  int v182;
  unint64_t v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unint64_t v188;
  unsigned int *v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int v192;
  unint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  int v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  unint64_t v203;
  unint64_t v204;
  unsigned int *v205;
  unsigned int *v206;
  unsigned int v207;
  int v208;
  unint64_t v209;
  unsigned int *v210;
  unsigned int v211;
  int v212;
  unint64_t v213;
  unsigned int *v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t *v217;
  int32x2_t v218;
  int v219;
  int v220;
  int32x2_t v221;
  int32x2_t v222;
  int32x2_t v223;
  int32x2_t v224;
  unsigned int v225;
  uint64_t *v226;
  void **v227[577];
  std::__shared_weak_count *v228;
  std::__shared_weak_count *v229;
  int32x2_t *v230;
  std::__shared_weak_count *v231;
  uint64_t v232;
  int v233[2];
  unint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  unint64_t v237;
  void *memptr[2];
  size_t v239;
  void *v240;
  _BYTE *v241;
  uint8_t buf[8];
  uint64_t v243;
  unsigned int *v244;
  unsigned int *v245;
  unsigned int *v246;
  uint64_t v247;
  char v248;

  v6 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (const void *)v6;
  memptr[0] = 0;
  memptr[1] = 0;
  v239 = 0;
  if (sub_1B67C2364(memptr, v11, 0x10uLL))
  {
    v14 = 4294954392;
    goto LABEL_76;
  }
  memcpy(memptr[0], v13, v12);
  v239 = v12;
  v235 = 0;
  v236 = 0;
  v237 = 0;
  *(_QWORD *)v233 = 0;
  v232 = 0;
  v234 = 0;
  v231 = 0;
  v230 = 0;
  bzero(v227, 0x1220uLL);
  if (v8)
    v15 = v8;
  else
    v15 = v227;
  v14 = 4294954394;
  if (memptr[0] && v12)
  {
    v236 = 0;
    *(_QWORD *)v233 = 0;
    *(_QWORD *)buf = 0;
    v243 = 0;
    v244 = (unsigned int *)memptr[0];
    v245 = (unsigned int *)memptr[0];
    v246 = (unsigned int *)((char *)memptr[0] + v12);
    v247 = bswap32(*(_DWORD *)memptr[0]);
    v248 = 0;
    v14 = sub_1B67C9AC0(memptr, (uint64_t)buf);
    if (!(_DWORD)v14)
    {
      v16 = SHIDWORD(v247) + 5;
      v17 = v16 & 7;
      HIDWORD(v247) = v17;
      v18 = (unint64_t)v246;
      v19 = (unsigned int *)((char *)v245 + (v16 >> 3));
      v245 = v19;
      if (v19 >= v246)
      {
        if (v19 > v246)
        {
          v245 = v246;
          v19 = v246;
        }
        v20 = v247;
      }
      else
      {
        v20 = bswap32(*v19);
      }
      v21 = v247 >> 27;
      v22 = v20 << v17;
      LODWORD(v247) = v20 << v17;
      if (v21)
      {
        do
        {
          v23 = (unsigned int *)((char *)v19 + 2);
          if ((unint64_t)v19 + 2 >= v18)
          {
            if ((unint64_t)v19 + 2 > v18)
              v23 = (unsigned int *)v18;
            v24 = v22;
          }
          else
          {
            v24 = bswap32(*v23);
          }
          v25 = HIWORD(v22);
          sub_1B67C9BC4(&v240, v25);
          memcpy(v240, v23, v25);
          v26 = v236;
          if ((unint64_t)v236 >= v237)
          {
            v27 = sub_1B67C9CAC((uint64_t *)&v235, (uint64_t)&v240);
          }
          else
          {
            *v236 = 0;
            v26[1] = 0;
            v26[2] = 0;
            sub_1B67C9C34(v26, v240, (uint64_t)v241, v241 - (_BYTE *)v240);
            v27 = (uint64_t)(v26 + 3);
          }
          v236 = (_QWORD *)v27;
          if (v240)
          {
            v241 = v240;
            operator delete(v240);
          }
          v19 = (unsigned int *)((char *)v23 + v25);
          if ((unint64_t)v23 + v25 >= v18)
          {
            v22 = v24 << v17;
            if ((unint64_t)v23 + v25 > v18)
              v19 = (unsigned int *)v18;
          }
          else
          {
            v22 = bswap32(*v19);
          }
          --v21;
        }
        while (v21);
        LODWORD(v247) = v22;
      }
      HIDWORD(v247) = v17;
      v28 = (unsigned int *)((char *)v19 + 1);
      v245 = v28;
      if ((unint64_t)v28 >= v18)
      {
        v29 = v22;
        if ((unint64_t)v28 > v18)
        {
          v245 = (unsigned int *)v18;
          v28 = (unsigned int *)v18;
          v29 = v22;
        }
      }
      else
      {
        v29 = bswap32(*v28);
      }
      v30 = HIBYTE(v22);
      v31 = v29 << v17;
      for (LODWORD(v247) = v29 << v17; v30; --v30)
      {
        v32 = (unsigned int *)((char *)v28 + 2);
        if ((unint64_t)v28 + 2 >= v18)
        {
          if ((unint64_t)v28 + 2 > v18)
            v32 = (unsigned int *)v18;
          v33 = v31;
        }
        else
        {
          v33 = bswap32(*v32);
        }
        v34 = HIWORD(v31);
        sub_1B67C9BC4(&v240, v34);
        memcpy(v240, v32, v34);
        v35 = *(_QWORD **)v233;
        if (*(_QWORD *)v233 >= v234)
        {
          v36 = sub_1B67C9CAC(&v232, (uint64_t)&v240);
        }
        else
        {
          **(_QWORD **)v233 = 0;
          v35[1] = 0;
          v35[2] = 0;
          sub_1B67C9C34(v35, v240, (uint64_t)v241, v241 - (_BYTE *)v240);
          v36 = (uint64_t)(v35 + 3);
        }
        *(_QWORD *)v233 = v36;
        if (v240)
        {
          v241 = v240;
          operator delete(v240);
        }
        v28 = (unsigned int *)((char *)v32 + v34);
        if ((unint64_t)v32 + v34 >= v18)
        {
          v31 = v33 << v17;
          if ((unint64_t)v32 + v34 > v18)
            v28 = (unsigned int *)v18;
        }
        else
        {
          v31 = bswap32(*v28);
        }
      }
      v14 = 0;
    }
    if (*(_QWORD *)buf)
      free(*(void **)buf);
    if (!(_DWORD)v14)
    {
      v226 = (uint64_t *)v15;
      v48 = (uint64_t)v235;
      if (v236 == v235)
      {
LABEL_224:
        v157 = v232;
        if (*(_QWORD *)v233 == v232)
        {
LABEL_310:
          if (v10)
          {
            v216 = 0;
            v217 = v226;
            v14 = 4294954387;
            while (!*v217)
            {
              ++v216;
              v217 += 2;
              if (v216 == 32)
                goto LABEL_57;
            }
            sub_1B67B665C(&v230, *v217, v226[2 * v216 + 1]);
            v218 = vadd_s32(vshl_n_s32(v230[166], 4uLL), (int32x2_t)0x1000000010);
            v219 = v230[167].u8[3];
            if (v230[167].i8[3])
            {
              v219 = 2 * v230[167].i32[1];
              v220 = 2 * v230[168].i32[1];
              v221.i32[0] = v230[168].i32[0];
              v221.i32[1] = v230[169].i32[0];
              v222.i32[0] = v230[167].i32[1];
              v222.i32[1] = v230[168].i32[1];
              v223 = vadd_s32(v221, v222);
              v224 = vsub_s32(v218, vadd_s32(v223, v223));
            }
            else
            {
              v220 = 0;
              v224 = v218;
            }
            v14 = 0;
            *v10 = v218;
            v10[1].i32[0] = v219;
            v10[1].i32[1] = v220;
            v10[2] = v224;
          }
          else
          {
            v14 = 0;
          }
        }
        else
        {
          v158 = 0;
          v159 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          while (1)
          {
            v160 = v157 + 24 * v158;
            v161 = *(unsigned int **)v160;
            v162 = *(_QWORD *)(v160 + 8);
            *(_QWORD *)buf = 0;
            v243 = 0;
            v246 = 0;
            v247 = 0;
            v245 = 0;
            v163 = operator new(0x150uLL, v159);
            v164 = (uint64_t)v163;
            if (v163)
            {
              v163[19] = 0u;
              v163[20] = 0u;
              v163[17] = 0u;
              v163[18] = 0u;
              v163[15] = 0u;
              v163[16] = 0u;
              v163[13] = 0u;
              v163[14] = 0u;
              v163[11] = 0u;
              v163[12] = 0u;
              v163[9] = 0u;
              v163[10] = 0u;
              v163[7] = 0u;
              v163[8] = 0u;
              v163[5] = 0u;
              v163[6] = 0u;
              v163[3] = 0u;
              v163[4] = 0u;
              v163[1] = 0u;
              v163[2] = 0u;
              *v163 = 0u;
            }
            v165 = (std::__shared_weak_count *)operator new();
            v165->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v165->__shared_owners_;
            v165->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15C40;
            v165->__shared_weak_owners_ = 0;
            v165[1].__vftable = (std::__shared_weak_count_vtbl *)v164;
            if (v164)
            {
              if (!v161 || v162 == (_QWORD)v161)
              {
                v168 = 0;
                v14 = 4294954387;
              }
              else
              {
                v244 = v161;
                v246 = (unsigned int *)v162;
                v169 = bswap32(*v161);
                v248 = 0;
                if ((uint64_t)(v162 - (_QWORD)v161) < 1)
                {
                  if ((unsigned int *)v162 != v161)
                    v161 = (unsigned int *)v162;
                  v170 = v169;
                }
                else
                {
                  v170 = bswap32(*v161);
                }
                v171 = 2 * v170;
                if ((unint64_t)v161 >= v162)
                {
                  if ((unint64_t)v161 > v162)
                    v161 = (unsigned int *)v162;
                  v172 = v171;
                }
                else
                {
                  v172 = bswap32(*v161);
                }
                v173 = 8 * v172;
                v247 = 8 * v172;
                v245 = (unsigned int *)((char *)v161 + 1);
                if ((unint64_t)v161 + 1 >= v162)
                {
                  if ((unint64_t)v161 + 1 > v162)
                    v245 = (unsigned int *)v162;
                }
                else
                {
                  v173 = bswap32(*(unsigned int *)((char *)v161 + 1));
                }
                v168 = 0;
                LODWORD(v247) = v173;
                v14 = 4294954394;
                if ((v169 & 0x80000000) == 0 && v171 >> 30 && (v172 & 0x1F000000) == 0x8000000)
                {
                  v175 = sub_1B67C9140((uint64_t)buf);
                  *(_DWORD *)v164 = v175;
                  if (v175 <= 0xFF)
                  {
                    v176 = v175;
                    v177 = sub_1B67C9140((uint64_t)buf);
                    *(_DWORD *)(v164 + 4) = v177;
                    if (v177 > 0x1F)
                      goto LABEL_285;
                    v178 = SHIDWORD(v247) + 1;
                    v179 = v246;
                    v180 = (unsigned int *)((char *)v245 + (v178 >> 3));
                    if (v180 >= v246)
                    {
                      if (v180 > v246)
                        v180 = v246;
                      v181 = v247;
                    }
                    else
                    {
                      v181 = bswap32(*v180);
                    }
                    v182 = v181 << (v178 & 7);
                    *(_BYTE *)(v164 + 8) = (int)v247 < 0;
                    v183 = (v178 & 7) + 1;
                    HIDWORD(v247) = v183 & 7;
                    v184 = (unsigned int *)((char *)v180 + (v183 >> 3));
                    v245 = v184;
                    if (v184 >= v179)
                    {
                      if (v184 > v179)
                        v245 = v179;
                      v185 = v182;
                    }
                    else
                    {
                      v185 = bswap32(*v184);
                    }
                    LODWORD(v247) = v185 << (v183 & 7);
                    *(_BYTE *)(v164 + 9) = v182 < 0;
                    *(_DWORD *)(v164 + 12) = sub_1B67C91C8((uint64_t)buf);
                    v186 = sub_1B67C9140((uint64_t)buf);
                    *(_DWORD *)(v164 + 56) = v186;
                    if (v186 > 0x1F)
                      goto LABEL_285;
                    v187 = sub_1B67C9140((uint64_t)buf);
                    *(_DWORD *)(v164 + 60) = v187;
                    if (v187 > 0x1F)
                      goto LABEL_285;
                    v188 = SHIDWORD(v247) + 1;
                    v189 = v246;
                    v190 = (unsigned int *)((char *)v245 + (v188 >> 3));
                    if (v190 >= v246)
                    {
                      if (v190 > v246)
                        v190 = v246;
                      v191 = v247;
                    }
                    else
                    {
                      v191 = bswap32(*v190);
                    }
                    v192 = v191 << (v188 & 7);
                    *(_BYTE *)(v164 + 64) = (int)v247 < 0;
                    v193 = (v188 & 7) + 2;
                    HIDWORD(v247) = v193 & 7;
                    v194 = (unsigned int *)((char *)v190 + (v193 >> 3));
                    v245 = v194;
                    if (v194 >= v189)
                    {
                      if (v194 > v189)
                        v245 = v189;
                      v195 = v192;
                    }
                    else
                    {
                      v195 = bswap32(*v194);
                    }
                    v196 = v192 >> 30;
                    LODWORD(v247) = v195 << (v193 & 7);
                    *(_DWORD *)(v164 + 68) = v196;
                    if (v196 == 3)
                      goto LABEL_285;
                    v197 = sub_1B67C9140((uint64_t)buf);
                    v198 = (-((v197 + 1) & 1) ^ ((v197 + 1) >> 1)) + ((v197 + 1) & 1);
                    *(_DWORD *)(v164 + 72) = v198;
                    if (v198 - 26 < 0xFFFFFFCC
                      || (v199 = sub_1B67C9140((uint64_t)buf),
                          v200 = (-((v199 + 1) & 1) ^ ((v199 + 1) >> 1)) + ((v199 + 1) & 1),
                          *(_DWORD *)(v164 + 76) = v200,
                          v200 - 26 < 0xFFFFFFCC)
                      || (v201 = sub_1B67C9140((uint64_t)buf),
                          v202 = (-((v201 + 1) & 1) ^ ((v201 + 1) >> 1)) + ((v201 + 1) & 1),
                          *(_DWORD *)(v164 + 80) = v202,
                          v202 - 13 < 0xFFFFFFE7))
                    {
LABEL_285:
                      v168 = 0;
                      v14 = 4294954394;
                    }
                    else
                    {
                      v204 = SHIDWORD(v247) + 1;
                      v205 = v246;
                      v206 = (unsigned int *)((char *)v245 + (v204 >> 3));
                      if (v206 >= v246)
                      {
                        if (v206 > v246)
                          v206 = v246;
                        v207 = v247;
                      }
                      else
                      {
                        v207 = bswap32(*v206);
                      }
                      v208 = v207 << (v204 & 7);
                      *(_BYTE *)(v164 + 84) = (int)v247 < 0;
                      v209 = (v204 & 7) + 1;
                      v210 = (unsigned int *)((char *)v206 + (v209 >> 3));
                      if (v210 >= v205)
                      {
                        if (v210 > v205)
                          v210 = v205;
                        v211 = v208;
                      }
                      else
                      {
                        v211 = bswap32(*v210);
                      }
                      v212 = v211 << (v209 & 7);
                      *(_BYTE *)(v164 + 85) = v208 < 0;
                      v213 = (v209 & 7) + 1;
                      LODWORD(v247) = v212;
                      HIDWORD(v247) = v213 & 7;
                      v214 = (unsigned int *)((char *)v210 + (v213 >> 3));
                      v245 = v214;
                      if (v214 >= v205)
                      {
                        if (v214 > v205)
                          v245 = v205;
                        v215 = v212;
                      }
                      else
                      {
                        v215 = bswap32(*v214);
                      }
                      LODWORD(v247) = v215 << (v213 & 7);
                      *(_BYTE *)(v164 + 86) = v212 < 0;
                      sub_1B67B665C(&v226[2 * v176 + 64], v164, (uint64_t)v165);
                      v14 = 0;
                      v168 = 1;
                    }
                  }
                  else
                  {
                    v168 = 0;
                  }
                }
              }
            }
            else
            {
              v168 = 0;
              v14 = 4294954392;
            }
            do
              v203 = __ldaxr(p_shared_owners);
            while (__stlxr(v203 - 1, p_shared_owners));
            if (!v203)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
            if (*(_QWORD *)buf)
              free(*(void **)buf);
            if ((v168 & 1) == 0)
              break;
            ++v158;
            v157 = v232;
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)v233 - v232) >> 3) <= v158)
              goto LABEL_310;
          }
        }
        goto LABEL_57;
      }
      v49 = 0;
      while (1)
      {
        v50 = v48 + 24 * v49;
        v51 = *(unsigned int **)v50;
        v52 = *(_QWORD *)(v50 + 8);
        *(_QWORD *)buf = 0;
        v243 = 0;
        v246 = 0;
        v247 = 0;
        v245 = 0;
        v53 = operator new(0x758uLL, MEMORY[0x1E0DE4E10]);
        v54 = (uint64_t)v53;
        if (v53)
          bzero(v53, 0x758uLL);
        v55 = (std::__shared_weak_count *)operator new();
        v55->__shared_owners_ = 0;
        v56 = (unint64_t *)&v55->__shared_owners_;
        v55->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6A15CB8;
        v55->__shared_weak_owners_ = 0;
        v55[1].__vftable = (std::__shared_weak_count_vtbl *)v54;
        if (!v54)
        {
          v58 = 0;
          v14 = 4294954392;
          goto LABEL_147;
        }
        if (v51)
          v57 = v52 == (_QWORD)v51;
        else
          v57 = 1;
        if (v57)
        {
          v58 = 0;
          v14 = 4294954387;
          goto LABEL_147;
        }
        v244 = v51;
        v245 = v51;
        v59 = v52;
        v246 = (unsigned int *)v52;
        v60 = bswap32(*v51);
        v248 = 0;
        v247 = v60 | 0x100000000;
        v245 = v51;
        if ((uint64_t)(v52 - (_QWORD)v51) < 1)
        {
          if ((unsigned int *)v52 != v51)
            v51 = (unsigned int *)v52;
          v61 = v60;
        }
        else
        {
          v61 = bswap32(*v51);
        }
        v62 = 2 * v61;
        LODWORD(v247) = 2 * v61;
        HIDWORD(v247) = 3;
        v245 = v51;
        if ((unint64_t)v51 >= v52)
        {
          if ((unint64_t)v51 > v52)
            v51 = (unsigned int *)v52;
          v63 = 2 * v61;
        }
        else
        {
          v63 = bswap32(*v51);
        }
        v64 = 8 * v63;
        v247 = (8 * v63);
        v65 = (unsigned int *)((char *)v51 + 1);
        v245 = (unsigned int *)((char *)v51 + 1);
        if ((unint64_t)v51 + 1 >= v52)
        {
          if ((unint64_t)v51 + 1 > v52)
          {
            v245 = (unsigned int *)v52;
            v65 = (unsigned int *)v52;
          }
        }
        else
        {
          v64 = bswap32(*v65);
        }
        v58 = 0;
        LODWORD(v247) = v64;
        v14 = 4294954394;
        if ((v60 & 0x80000000) == 0 && v62 >> 30 && (v63 & 0x1F000000) == 117440512)
        {
          HIDWORD(v247) = 0;
          v67 = (unsigned int *)((char *)v65 + 1);
          v245 = (unsigned int *)((char *)v65 + 1);
          if ((unint64_t)v65 + 1 >= v59)
          {
            v68 = v64;
            if ((unint64_t)v65 + 1 > v59)
            {
              v245 = (unsigned int *)v59;
              v67 = (unsigned int *)v59;
              v68 = v64;
            }
          }
          else
          {
            v68 = bswap32(*v67);
          }
          v69 = HIBYTE(v64);
          LODWORD(v247) = v68;
          *(_DWORD *)v54 = HIBYTE(v64);
          v70 = (1 << (HIBYTE(v64) - 66)) & 0x400400801;
          if (v69 - 66 > 0x22 || v70 == 0)
            goto LABEL_146;
          HIDWORD(v247) = 1;
          v245 = v67;
          if ((unint64_t)v67 >= v59)
          {
            if ((unint64_t)v67 > v59)
              v67 = (unsigned int *)v59;
            v72 = v68;
          }
          else
          {
            v72 = bswap32(*v67);
          }
          *(_BYTE *)(v54 + 8) = v68 < 0;
          v73 = 2 * v72;
          v247 = v73 | 0x200000000;
          v245 = v67;
          if ((unint64_t)v67 >= v59)
          {
            *(_BYTE *)(v54 + 9) = v73 < 0;
            v245 = v67;
            *(_BYTE *)(v54 + 10) = (v73 & 0x20000000) != 0;
            *(_BYTE *)(v54 + 11) = (v73 & 0x4000000) != 0;
            *(_BYTE *)(v54 + 12) = (v73 & 0x400000) != 0;
            v77 = v73 << 14;
            v78 = v77;
            v247 = v77 | 0x600000000;
          }
          else
          {
            v74 = bswap32(*v67);
            *(_BYTE *)(v54 + 9) = v73 < 0;
            LODWORD(v247) = 4 * v74;
            HIDWORD(v247) = 3;
            v245 = v67;
            v75 = bswap32(*v67);
            *(_BYTE *)(v54 + 10) = (v74 & 0x20000000) != 0;
            LODWORD(v247) = 8 * v75;
            HIDWORD(v247) = 4;
            v245 = v67;
            v76 = bswap32(*v67);
            *(_BYTE *)(v54 + 11) = (v75 & 0x10000000) != 0;
            LODWORD(v247) = 16 * v76;
            HIDWORD(v247) = 5;
            v245 = v67;
            v77 = 32 * bswap32(*v67);
            *(_BYTE *)(v54 + 12) = (v76 & 0x8000000) != 0;
            v247 = v77 | 0x600000000;
            v245 = v67;
            v78 = bswap32(*v67);
          }
          v79 = v77 >> 31;
          v80 = v78 << 6;
          *(_BYTE *)(v54 + 13) = v79;
          v247 = v78 << 6;
          v81 = (unsigned int *)((char *)v67 + 1);
          v245 = v81;
          if ((unint64_t)v81 >= v59)
          {
            if ((unint64_t)v81 > v59)
              v81 = (unsigned int *)v59;
          }
          else
          {
            v80 = bswap32(*v81);
          }
          v247 = v80;
          v82 = (unsigned int *)((char *)v81 + 1);
          v245 = v82;
          v83 = (unint64_t)v82 > v59;
          if ((unint64_t)v82 >= v59)
          {
            v84 = v80;
            if (v83)
            {
              v245 = (unsigned int *)v59;
              v84 = v80;
            }
          }
          else
          {
            v84 = bswap32(*v82);
          }
          LODWORD(v247) = v84;
          *(_DWORD *)(v54 + 4) = HIBYTE(v80);
          v85 = sub_1B67C9140((uint64_t)buf);
          *(_BYTE *)(v54 + 17) = v85;
          if ((v85 & 0xE0) != 0)
          {
LABEL_146:
            v58 = 0;
            v14 = 4294954394;
            goto LABEL_147;
          }
          v86 = v85;
          if (v69 - 100 <= 0x2C && ((1 << (v69 - 100)) & 0x100000400401) != 0)
          {
            v87 = sub_1B67C9140((uint64_t)buf);
            *(_BYTE *)(v54 + 18) = v87;
            if ((v87 & 0xFE) != 0)
              goto LABEL_146;
            v88 = sub_1B67C9140((uint64_t)buf);
            *(_BYTE *)(v54 + 20) = v88;
            if (v88)
              goto LABEL_146;
            v89 = sub_1B67C9140((uint64_t)buf);
            *(_BYTE *)(v54 + 21) = v89;
            if (v89)
              goto LABEL_146;
            v90 = v247;
            v91 = SHIDWORD(v247) + 1;
            HIDWORD(v247) = v91 & 7;
            v92 = v246;
            v93 = (unsigned int *)((char *)v245 + (v91 >> 3));
            v245 = v93;
            if (v93 >= v246)
            {
              v94 = v247;
              if (v93 > v246)
              {
                v245 = v246;
                v93 = v246;
                v94 = v247;
              }
            }
            else
            {
              v94 = bswap32(*v93);
            }
            v103 = v94 << (v91 & 7);
            LODWORD(v247) = v103;
            *(_BYTE *)(v54 + 22) = v90 < 0;
            if (v90 < 0)
              goto LABEL_146;
            v104 = (v91 & 7) + 1;
            v105 = v104 & 7;
            HIDWORD(v247) = v104 & 7;
            v106 = (unsigned int *)((char *)v93 + (v104 >> 3));
            v245 = v106;
            v107 = v106 > v92;
            if (v106 >= v92)
            {
              v108 = v103;
              if (v107)
              {
                v245 = v92;
                v108 = v103;
              }
            }
            else
            {
              v108 = bswap32(*v106);
            }
            LODWORD(v247) = v108 << v105;
            *(_BYTE *)(v54 + 23) = v103 < 0;
            if (v103 < 0)
            {
              v145 = 0;
              v146 = 40;
              do
              {
                v147 = v247;
                v148 = SHIDWORD(v247) + 1;
                v149 = v148 & 7;
                HIDWORD(v247) = v148 & 7;
                v150 = (unsigned int *)((char *)v245 + (v148 >> 3));
                v245 = v150;
                v151 = v150 > v246;
                if (v150 >= v246)
                {
                  v152 = v247;
                  if (v151)
                  {
                    v245 = v246;
                    v152 = v247;
                  }
                }
                else
                {
                  v152 = bswap32(*v150);
                }
                LODWORD(v247) = v152 << v149;
                *(_BYTE *)(v54 + v145 + 24) = v147 < 0;
                if (v147 < 0)
                {
                  if (v145 > 5)
                  {
                    v156 = (v145 - 6);
                    v153 = v54 + (v156 << 6) + 136;
                    v154 = (BOOL *)(v54 + v156 + 38);
                    v155 = 64;
                  }
                  else
                  {
                    v153 = v54 + v146;
                    v154 = (BOOL *)(v54 + v145 + 32);
                    v155 = 16;
                  }
                  sub_1B6890A38((uint64_t)buf, v153, v155, v154);
                }
                ++v145;
                v146 += 16;
              }
              while (v145 != 8);
              v86 = *(unsigned __int8 *)(v54 + 17);
            }
          }
          else
          {
            *(_BYTE *)(v54 + 18) = 1;
          }
          if (v86 > 0x1F)
            goto LABEL_146;
          *(_DWORD *)(v54 + 272) = sub_1B67C9140((uint64_t)buf);
          v96 = sub_1B67C9140((uint64_t)buf);
          *(_BYTE *)(v54 + 276) = v96;
          if (v96 == 1)
          {
            v98 = v247;
            v99 = SHIDWORD(v247) + 1;
            v100 = v99 & 7;
            HIDWORD(v247) = v99 & 7;
            v101 = (unsigned int *)((char *)v245 + (v99 >> 3));
            v245 = v101;
            if (v101 >= v246)
            {
              if (v101 > v246)
                v245 = v246;
              v102 = v247;
            }
            else
            {
              v102 = bswap32(*v101);
            }
            LODWORD(v247) = v102 << v100;
            *(_BYTE *)(v54 + 284) = v98 < 0;
            v109 = sub_1B67C9140((uint64_t)buf);
            *(_DWORD *)(v54 + 288) = (-((v109 + 1) & 1) ^ ((v109 + 1) >> 1)) + ((v109 + 1) & 1);
            v110 = sub_1B67C9140((uint64_t)buf);
            *(_DWORD *)(v54 + 292) = (-((v110 + 1) & 1) ^ ((v110 + 1) >> 1)) + ((v110 + 1) & 1);
            v111 = sub_1B67C9140((uint64_t)buf);
            *(_DWORD *)(v54 + 296) = v111;
            *(_DWORD *)(v54 + 1872) = 0;
            if (v111 > 0xFF)
              goto LABEL_146;
            v225 = v86;
            if (v111)
            {
              v112 = v111;
              v113 = (_DWORD *)(v54 + 300);
              do
              {
                v114 = sub_1B67C9140((uint64_t)buf);
                *v113++ = (-((v114 + 1) & 1) ^ ((v114 + 1) >> 1)) + ((v114 + 1) & 1);
                --v112;
              }
              while (v112);
            }
          }
          else
          {
            v225 = v86;
            if (!v96)
            {
              v97 = sub_1B67C9140((uint64_t)buf);
              *(_DWORD *)(v54 + 280) = v97;
              *(_DWORD *)(v54 + 1872) = 1 << (v97 + 4);
              *(_BYTE *)(v54 + 284) = 0;
              *(_QWORD *)(v54 + 288) = 0;
              *(_DWORD *)(v54 + 296) = 0;
            }
          }
          *(_DWORD *)(v54 + 1320) = sub_1B67C9140((uint64_t)buf);
          v115 = v247;
          v116 = SHIDWORD(v247) + 1;
          v117 = v116 & 7;
          HIDWORD(v247) = v116 & 7;
          v118 = (unsigned int *)((char *)v245 + (v116 >> 3));
          v245 = v118;
          if (v118 >= v246)
          {
            v120 = v15;
            if (v118 > v246)
              v245 = v246;
            v119 = v247;
          }
          else
          {
            v119 = bswap32(*v118);
            v120 = v15;
          }
          LODWORD(v247) = v119 << v117;
          *(_BYTE *)(v54 + 1324) = v115 < 0;
          *(_DWORD *)(v54 + 1328) = sub_1B67C9140((uint64_t)buf);
          *(_DWORD *)(v54 + 1332) = sub_1B67C9140((uint64_t)buf);
          v121 = v247;
          v122 = SHIDWORD(v247) + 1;
          v123 = v122 & 7;
          HIDWORD(v247) = v123;
          v124 = v246;
          v125 = (unsigned int *)((char *)v245 + (v122 >> 3));
          v245 = v125;
          if (v125 >= v246)
          {
            if (v125 > v246)
              v125 = v246;
            v126 = v247;
          }
          else
          {
            v126 = bswap32(*v125);
          }
          v127 = v126 << v123;
          LODWORD(v247) = v127;
          *(_BYTE *)(v54 + 1336) = v121 < 0;
          if (v121 < 0)
          {
            LOBYTE(v130) = 0;
          }
          else
          {
            v128 = (v122 & 7) + 1;
            v123 = v128 & 7;
            HIDWORD(v247) = v123;
            v125 = (unsigned int *)((char *)v125 + (v128 >> 3));
            v245 = v125;
            if (v125 >= v124)
            {
              if (v125 > v124)
                v125 = v124;
              v129 = v127;
            }
            else
            {
              v129 = bswap32(*v125);
            }
            v130 = v127 >> 31;
            v127 = v129 << v123;
            LODWORD(v247) = v129 << v123;
          }
          *(_BYTE *)(v54 + 1337) = v130;
          v131 = v123 + 1;
          v132 = v131 >> 3;
          v133 = v131 & 7;
          HIDWORD(v247) = v133;
          v134 = (unsigned int *)((char *)v125 + v132);
          v245 = v134;
          if (v134 >= v124)
          {
            if (v134 > v124)
              v134 = v124;
            v135 = v127;
          }
          else
          {
            v135 = bswap32(*v134);
          }
          v136 = v135 << v133;
          *(_BYTE *)(v54 + 1338) = v127 < 0;
          v137 = ((_BYTE)v133 + 1) & 7;
          v247 = __PAIR64__(v137, v136);
          v138 = (unsigned int *)((char *)v134 + ((v133 + 1) >> 3));
          v245 = v138;
          if (v138 >= v124)
          {
            v139 = v136;
            if (v138 > v124)
            {
              v245 = v124;
              v138 = v124;
              v139 = v136;
            }
          }
          else
          {
            v139 = bswap32(*v138);
          }
          v140 = v139 << v137;
          LODWORD(v247) = v140;
          *(_BYTE *)(v54 + 1339) = v136 < 0;
          if (v136 < 0)
          {
            *(_DWORD *)(v54 + 1340) = sub_1B67C9140((uint64_t)buf);
            *(_DWORD *)(v54 + 1344) = sub_1B67C9140((uint64_t)buf);
            *(_DWORD *)(v54 + 1348) = sub_1B67C9140((uint64_t)buf);
            *(_DWORD *)(v54 + 1352) = sub_1B67C9140((uint64_t)buf);
            v140 = v247;
            v137 = HIDWORD(v247);
            v138 = v245;
            v124 = v246;
          }
          v141 = v137 + 1;
          HIDWORD(v247) = v141 & 7;
          v142 = (unsigned int *)((char *)v138 + (v141 >> 3));
          v245 = v142;
          v143 = v142 > v124;
          if (v142 >= v124)
          {
            v144 = v140;
            if (v143)
            {
              v245 = v124;
              v144 = v140;
            }
          }
          else
          {
            v144 = bswap32(*v142);
          }
          LODWORD(v247) = v144 << (v141 & 7);
          *(_BYTE *)(v54 + 1356) = v140 < 0;
          sub_1B67B665C(&v120[2 * v225], v54, (uint64_t)v55);
          v14 = 0;
          v58 = 1;
        }
        do
LABEL_147:
          v95 = __ldaxr(v56);
        while (__stlxr(v95 - 1, v56));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
        if (*(_QWORD *)buf)
          free(*(void **)buf);
        if ((v58 & 1) == 0)
          goto LABEL_57;
        ++v49;
        v48 = (uint64_t)v235;
        if (0xAAAAAAAAAAAAAAABLL * (v236 - v235) <= v49)
          goto LABEL_224;
      }
    }
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1B676B000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "LRPConfigInfo_avcc: extract parameter sets from configuration record failed", buf, 2u);
  }
LABEL_57:
  v37 = v229;
  if (v229)
  {
    v38 = (unint64_t *)&v229->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v228;
  if (v228)
  {
    v41 = (unint64_t *)&v228->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  for (i = 574; i != 62; i -= 2)
    sub_1B6772C88((uint64_t)&v227[i]);
  do
  {
    sub_1B6772C88((uint64_t)&v227[i]);
    i -= 2;
  }
  while (i != -2);
  v44 = v231;
  if (v231)
  {
    v45 = (unint64_t *)&v231->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v227[0] = (void **)&v232;
  sub_1B6893BC0(v227);
  v227[0] = (void **)&v235;
  sub_1B6893BC0(v227);
LABEL_76:
  if (memptr[0])
    free(memptr[0]);
  return v14;
}

void sub_1B6893AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void *v15;
  void *v16;

  if (v12)
    MEMORY[0x1BCC9814C](v12, 0x1010C403B1A94AALL);
  v15 = *(void **)(v13 - 160);
  if (v15)
    free(v15);
  sub_1B6798548((uint64_t)&a12);
  sub_1B6772C88((uint64_t)&STACK[0x1238]);
  a12 = (void **)&STACK[0x1248];
  sub_1B6893BC0(&a12);
  a12 = (void **)(v13 - 240);
  sub_1B6893BC0(&a12);
  v16 = *(void **)(v13 - 216);
  if (v16)
    free(v16);
  _Unwind_Resume(a1);
}

void sub_1B6893BC0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1B67C9B70((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t H264VideoEncoder_CreateInstance(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  VTVideoEncoderGetClassID();
  v4 = CMDerivedObjectCreate();
  CFLog();
  *a3 = 0;
  return v4;
}

uint64_t sub_1B6893D74(uint64_t a1, uint64_t a2, unint64_t a3, const void *a4)
{
  int v5;
  unint64_t v7;
  uint64_t DerivedStorage;
  const void *v9;
  int v10;
  int v11;
  int v12;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  CFMutableDictionaryRef v15;
  CFMutableDictionaryRef v16;
  __CFArray *v17;
  __CFArray *v18;
  CFMutableArrayRef v19;
  __CFArray *v20;
  uint64_t v21;
  char v22;
  char v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFMutableDictionaryRef v34;
  uint64_t v35;
  CFDictionaryValueCallBacks valueCallBacks;
  int v38;
  int v39;
  int v40;
  int valuePtr;
  _QWORD v42[2];

  v5 = a3;
  v42[1] = *MEMORY[0x1E0C80C00];
  v7 = HIDWORD(a3);
  VTVideoEncoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v42[0] = 0x3432306634323076;
  *(_DWORD *)(DerivedStorage + 5088) = 1;
  *(_QWORD *)DerivedStorage = a2;
  *(_DWORD *)(DerivedStorage + 5140) = v5;
  *(_DWORD *)(DerivedStorage + 5144) = v7;
  v9 = *(const void **)(DerivedStorage + 5192);
  if (v9)
    CFRelease(v9);
  *(_QWORD *)(DerivedStorage + 5192) = a4;
  if (a4)
    CFRetain(a4);
  FigFormatDescriptionRelease();
  *(_QWORD *)(DerivedStorage + 8) = 0;
  v40 = v7;
  valuePtr = v5;
  v10 = -v5 & 0xF;
  v11 = -(int)v7;
  v12 = -(int)v7 & 0xF;
  v38 = v11 & 0xF;
  v39 = v10;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
LABEL_27:
    v35 = 4294967188;
    CFLog();
    *(_DWORD *)(DerivedStorage + 6228) = 0;
    return v35;
  }
  v14 = Mutable;
  v15 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v15)
  {
    v16 = v15;
    v17 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (v17)
    {
      v18 = v17;
      sub_1B689B480(v17, 1024);
      sub_1B689B480(v18, 0);
      sub_1B689B480(v18, 256);
      sub_1B689B480(v18, 512);
      sub_1B689B480(v18, 768);
      sub_1B689B480(v18, 1280);
      CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E0CA8F80], v18);
      sub_1B689B4D4(v14, (const void *)*MEMORY[0x1E0CA9048], 64);
      sub_1B689B4D4(v14, (const void *)*MEMORY[0x1E0CA8F68], 16);
      CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E0CA8FF0], v16);
      CFRelease(v16);
      v16 = v18;
    }
    CFRelease(v16);
  }
  v19 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!v19)
    goto LABEL_24;
  v20 = v19;
  v21 = 0;
  v22 = 1;
  do
  {
    v23 = v22;
    v24 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)v42 + 4 * v21);
    if (!v24)
    {
      CFRelease(v14);
      goto LABEL_26;
    }
    v25 = v24;
    CFArrayAppendValue(v20, v24);
    CFRelease(v25);
    v22 = 0;
    v21 = 1;
  }
  while ((v23 & 1) != 0);
  CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E0CA9040], v20);
  CFRelease(v20);
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (!v26
    || (v27 = v26,
        CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E0CA90E0], v26),
        CFRelease(v27),
        (v28 = CFNumberCreate(0, kCFNumberSInt32Type, &v40)) == 0))
  {
LABEL_24:
    v20 = v14;
LABEL_26:
    CFRelease(v20);
    goto LABEL_27;
  }
  v29 = v28;
  CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E0CA8FD8], v28);
  CFRelease(v29);
  if (v10)
  {
    v30 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
    if (!v30)
      goto LABEL_24;
    v31 = v30;
    CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E0CA8FB8], v30);
    CFRelease(v31);
  }
  if (v12)
  {
    v32 = CFNumberCreate(0, kCFNumberSInt32Type, &v38);
    if (!v32)
      goto LABEL_24;
    v33 = v32;
    CFDictionaryAddValue(v14, (const void *)*MEMORY[0x1E0CA8FA0], v32);
    CFRelease(v33);
  }
  VTEncoderSessionSetPixelBufferAttributes();
  valueCallBacks.version = 0;
  valueCallBacks.retain = (CFDictionaryRetainCallBack)sub_1B689B538;
  valueCallBacks.copyDescription = 0;
  valueCallBacks.equal = 0;
  valueCallBacks.release = (CFDictionaryReleaseCallBack)j__CFAllocatorDeallocate;
  v34 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], &valueCallBacks);
  *(_QWORD *)(DerivedStorage + 5200) = v34;
  if (v34)
    v35 = 0;
  else
    v35 = FigSignalErrorAt();
  *(_DWORD *)(DerivedStorage + 6228) = 0;
  CFRelease(v14);
  return v35;
}

uint64_t sub_1B68941AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int *v6;
  int *v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  CMTimeValue *v10;
  CMTimeValue *v11;
  uint64_t v12;
  uint64_t v13;
  __CVBuffer *v14;
  __CVBuffer *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t DerivedStorage;
  uint64_t v19;
  uint64_t v21;
  __int16 **v22;
  uint64_t v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  double v29;
  float v30;
  CFNumberRef v31;
  __CFData *Mutable;
  __CFData *v33;
  UInt8 *MutableBytePtr;
  CGPoint v35;
  __int128 v36;
  int v37;
  __CVBuffer **v38;
  __CVBuffer *v39;
  CMTimeValue v40;
  CMTimeScale v41;
  CMTimeValue v42;
  CMTimeValue v43;
  CMTimeEpoch v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _BOOL4 v49;
  uint64_t v50;
  int v51;
  CGFloat v52;
  _DWORD *v53;
  CGFloat v54;
  _BYTE *BaseAddress;
  int64_t BytesPerRow;
  size_t Width;
  __CVBuffer *v58;
  uint64_t v59;
  int64_t Height;
  int v61;
  size_t PlaneCount;
  uint64_t v63;
  size_t v64;
  _DWORD *v65;
  int v66;
  int v67;
  void *v68;
  int v69;
  int v70;
  char *v71;
  const void *v72;
  _BOOL4 v73;
  int v74;
  int v75;
  int v76;
  int v77;
  char v78;
  int v79;
  int v80;
  int v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  size_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  size_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  const char *v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  float v111;
  int v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  const __CFNumber *v116;
  size_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  double v123;
  double v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  const __CFNumber *v129;
  int v130;
  id *v131;
  NSObject *v132;
  unsigned __int8 *v133;
  int v134;
  BOOL v135;
  char v137;
  unsigned int v138;
  const __CFData *v139;
  const __CFData *v140;
  CFTypeID TypeID;
  const UInt8 *BytePtr;
  unint64_t Length;
  uint64_t v144;
  int v145;
  __CVBuffer *v146;
  size_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  uint64_t v156;
  CFTypeRef *v157;
  uint64_t *v158;
  CFTypeRef *v159;
  char *v160;
  int v161;
  int v162;
  uint64_t v163;
  unsigned int v164;
  int v165;
  double v166;
  uint64_t v167;
  unsigned int v168;
  float v169;
  float v170;
  const __CFData *v171;
  const __CFData *v172;
  CFTypeID v173;
  const UInt8 *v174;
  unint64_t v175;
  uint64_t v176;
  const __CFData *v177;
  const __CFData *v178;
  CFTypeID v179;
  const UInt8 *v180;
  unint64_t v181;
  uint64_t v182;
  const void *v183;
  const void *v184;
  CFTypeID v185;
  CFTypeID v186;
  int v187;
  const __CFDictionary *v188;
  const __CFNumber *v189;
  const __CFNumber *v190;
  CFTypeID v191;
  const void *v192;
  const void *v193;
  CFTypeID v194;
  int v195;
  const __CFArray *v196;
  const __CFArray *v197;
  CFTypeID v198;
  int Count;
  CFIndex v200;
  uint64_t v201;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v203;
  const __CFArray *v204;
  CFTypeID v205;
  unsigned int v206;
  int v207;
  unint64_t v208;
  char *v209;
  const __CFNumber *v210;
  const __CFDictionary *v211;
  const __CFDictionary *v212;
  const __CFNumber *v213;
  const __CFNumber *v214;
  const __CFNumber *v215;
  const __CFNumber *v216;
  const __CFDictionary *v217;
  const __CFNumber *v218;
  const __CFNumber *v219;
  const __CFNumber *v220;
  const __CFNumber *v221;
  const __CFNumber *v222;
  const __CFNumber *v223;
  const __CFNumber *v224;
  const __CFNumber *v225;
  const __CFNumber *v226;
  const __CFNumber *v227;
  const __CFNumber *v228;
  const __CFNumber *v229;
  CFTypeID v230;
  const __CFDictionary *v231;
  const __CFDictionary *v232;
  const __CFNumber *v233;
  const __CFNumber *v234;
  CFTypeID v235;
  const __CFNumber *v236;
  const __CFNumber *v237;
  CFTypeID v238;
  const __CFNumber *v239;
  const __CFNumber *v240;
  CFTypeID v241;
  const __CFNumber *v242;
  const __CFNumber *v243;
  CFTypeID v244;
  const __CFNumber *v245;
  const __CFNumber *v246;
  CFTypeID v247;
  const __CFNumber *v248;
  const __CFNumber *v249;
  CFTypeID v250;
  const __CFNumber *v251;
  const __CFNumber *v252;
  CFTypeID v253;
  const __CFNumber *v254;
  const __CFNumber *v255;
  CFTypeID v256;
  const __CFNumber *v257;
  const __CFNumber *v258;
  CFTypeID v259;
  const __CFNumber *v260;
  const __CFNumber *v261;
  CFTypeID v262;
  const __CFNumber *v263;
  const __CFNumber *v264;
  uint64_t v265;
  const __CFDictionary *v266;
  const __CFDictionary *v267;
  const void *v268;
  const __CFDictionary *v269;
  int v270;
  const void *v271;
  CFTypeID v272;
  unsigned int v273;
  int v274;
  unint64_t v275;
  float *v276;
  const __CFDictionary *v277;
  const __CFDictionary *v278;
  __int16 **v279;
  CFTypeID v280;
  float v281;
  float y;
  float v283;
  float v284;
  float v285;
  BOOL v286;
  uint64_t *v287;
  const __CFDictionary *v288;
  const __CFDictionary *v289;
  CFTypeID v290;
  CFTypeID v291;
  CFTypeID v292;
  CFTypeID v293;
  CFTypeID v294;
  CFTypeID v295;
  CFTypeID v296;
  CFTypeID v297;
  double v298;
  CFTypeID v299;
  double v300;
  float v301;
  int v302;
  int v303;
  int v304;
  uint64_t v305;
  int v306;
  double v307;
  double v308;
  uint64_t v309;
  double v310;
  int v311;
  int v313;
  int v314;
  int v315;
  unint64_t v316;
  uint64_t v317;
  unsigned int v318;
  __int16 *v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  int v324;
  unsigned int *v325;
  _DWORD *v326;
  __int16 *v327;
  uint64_t v328;
  int v329;
  signed int v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int v347;
  unsigned int v348;
  char v349;
  unsigned int v350;
  int MachThreadPriorityValue;
  __int16 v352;
  __int16 v353;
  unsigned int v354;
  uint64_t v355;
  BOOL v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  void *v360;
  const __CFDictionary *v361;
  void *v362;
  void *key;
  int v364;
  uint64_t v365;
  int *v366;
  int v367;
  int y_low;
  char *v369;
  uint64_t v370;
  __CFData *cf;
  const __CFNumber *v372;
  _BOOL4 v373;
  CGFloat x;
  __int16 **v375;
  __int16 **v376;
  CVPixelBufferRef pixelBuffer;
  __CVBuffer *pixelBuffera;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  __CVBuffer **value;
  const __CFDictionary *theDict;
  const __CFDictionary *theDicta;
  int v386;
  __int16 v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  size_t extraRowsOnBottom;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  _OWORD v399[6];
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  _OWORD v405[6];
  __int128 v406;
  _OWORD v407[7];
  _BYTE v408[24];
  uint64_t v409;
  uint64_t v410;
  __int16 v411;
  uint64_t v412;
  uint64_t v413;
  __int16 v414;
  int v415;
  int v416;
  uint64_t v417;
  char v418;
  int v419;
  __int16 v420;
  char v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  char v426;
  uint64_t v427;
  char v428;
  char v429;
  int v430;
  char v431;
  int v432;
  _BYTE v433[2129];
  int v434;
  uint64_t v435;
  __int16 v436;
  int v437;
  int v438;
  int v439;
  uint64_t v440;
  __int128 v441;
  uint64_t v442;
  char v443;
  __int128 v444;
  int v445;
  int v446;
  char v447;
  char v448;
  CMTime v449;
  int v450;
  char v451;
  __int16 v452;
  uint64_t v453;
  int v454;
  int v455;
  int v456;
  float v457;
  float v458;
  int v459;
  int v460;
  uint64_t v461;
  int v462;
  uint64_t v463;
  char v464;
  uint64_t v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  double v470;
  unsigned int v471;
  uint64_t v472;
  char v473;
  int v474;
  char v475;
  uint64_t v476;
  int v477;
  int v478;
  __int16 v479;
  char v480;
  __int16 v481;
  char v482;
  char v483;
  char v484;
  __int16 v485;
  uint64_t v486;
  char v487;
  char v488;
  char v489;
  int v490;
  __int16 v491;
  int v492;
  char v493;
  __int16 v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  char v498;
  char v499;
  _WORD v500[23];
  char v501;
  char v502;
  char v503;
  int v504;
  __int16 v505;
  int v506;
  char v507;
  int v508;
  __int16 v509;
  __int16 v510;
  _BYTE v511[40];
  char v512;
  __int128 v513;
  uint64_t v514;
  uint64_t v515;
  __int16 v516;
  __int128 v517;
  __int16 v518;
  int v519;
  int v520;
  uint64_t v521;
  char v522;
  int v523;
  __int16 v524;
  char v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  char v530;
  uint64_t v531;
  char v532;
  char v533;
  char v534;
  int v535;
  char v536;
  int v537;
  char v538[4130];
  int v539;
  uint64_t v540;
  __int16 v541;
  int v542;
  int v543;
  int v544;
  uint64_t v545;
  __int128 v546;
  uint64_t v547;
  char v548;
  __int128 v549;
  int v550;
  int v551;
  uint64_t v552;
  BOOL v553;
  int v554;
  char v555;
  char v556;
  CFNumberRef number[2];
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  CGRect v589;
  uint64_t v590;
  uint64_t v591;

  MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v591 = *MEMORY[0x1E0C80C00];
  VTVideoEncoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = DerivedStorage + 5124;
  if (*(_BYTE *)(DerivedStorage + 5184))
    return FigSignalErrorAt();
  v21 = DerivedStorage;
  v381 = v13;
  v22 = (__int16 **)(DerivedStorage + 16);
  theDict = v9;
  if (!*(_QWORD *)(DerivedStorage + 16))
  {
    v375 = (__int16 **)(DerivedStorage + 16);
    pixelBuffer = v15;
    *(_OWORD *)v408 = 0u;
    memset(v407, 0, sizeof(v407));
    v406 = 0u;
    v404 = 0u;
    memset(v405, 0, sizeof(v405));
    v402 = 0u;
    v403 = 0u;
    v400 = 0u;
    v401 = 0u;
    memset(v399, 0, sizeof(v399));
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v393 = 0u;
    v394 = 0u;
    v379 = DerivedStorage + 5124;
    *(_BYTE *)(DerivedStorage + 6296) = 1;
    bzero((void *)(DerivedStorage + 24), 0x2D8uLL);
    *(_QWORD *)(v21 + 32) = 0x186A0000280A0;
    *(_DWORD *)(v21 + 52) = 1106247680;
    *(_DWORD *)(v21 + 152) = 0;
    *(_DWORD *)(v21 + 392) = 0;
    *(_DWORD *)(v21 + 176) = 1;
    *(_DWORD *)(v21 + 192) = 0;
    *(_OWORD *)(v21 + 336) = 0u;
    *(_DWORD *)(v21 + 352) = 0;
    *(_OWORD *)(v21 + 360) = 0u;
    *(_OWORD *)(v21 + 376) = 0u;
    *(_OWORD *)(v21 + 96) = 0u;
    *(_OWORD *)(v21 + 564) = 0u;
    *(_QWORD *)(v21 + 580) = 0xFFFFFFFF00000000;
    *(_BYTE *)(v21 + 743) = 1;
    *(_OWORD *)(v21 + 548) = 0u;
    *(_OWORD *)(v21 + 520) = 0u;
    *(_OWORD *)(v21 + 536) = 0u;
    *(_OWORD *)(v21 + 488) = 0u;
    *(_OWORD *)(v21 + 504) = 0u;
    *(_OWORD *)(v21 + 456) = 0u;
    *(_OWORD *)(v21 + 472) = 0u;
    *(_OWORD *)(v21 + 424) = 0u;
    *(_OWORD *)(v21 + 440) = 0u;
    *(_DWORD *)(v21 + 76) = 0;
    *(_OWORD *)(v21 + 60) = 0u;
    *(_QWORD *)(v21 + 592) = 0x3FF0000000000000;
    *(_QWORD *)(v21 + 616) = 0;
    v366 = (int *)(v21 + 24);
    *(_OWORD *)(v21 + 600) = 0u;
    *(_OWORD *)(v21 + 700) = 0u;
    *(_OWORD *)(v21 + 716) = 0u;
    bzero(&v449, 0x1430uLL);
    v555 = 1;
    LOWORD(v449.value) = 352;
    WORD2(v449.value) = 288;
    LOBYTE(v449.epoch) = 77;
    v453 = 0x7FFFFFFF00000005;
    v454 = 1;
    v455 = 200000;
    v471 = 0;
    v474 = 0;
    v457 = 30.0;
    v459 = 1;
    v475 = 1;
    v476 = 0x3FC0000000000003;
    v520 = 0;
    v527 = -1;
    v528 = -1;
    v481 = 257;
    v482 = 1;
    v486 = 0x200000010;
    v487 = 6;
    v489 = 0;
    v484 = 1;
    v488 = 0;
    v495 = 0x80000000800000;
    v496 = 0x47C3500047C35000;
    v490 = 16843009;
    v491 = -255;
    v492 = 0;
    v493 = 0;
    v494 = -1;
    v508 = 0;
    v497 = 0;
    v498 = 0;
    memset(v500, 0, 15);
    v478 = 437918234;
    v509 = 0;
    v510 = -1;
    v502 = sub_1B68A3908();
    v503 = 1;
    v512 = 0;
    v505 = 0;
    v452 = 0;
    v515 = 0;
    v504 = 0;
    v513 = 0u;
    v516 = 1;
    v506 = 0;
    v507 = 0;
    v532 = 0;
    v538[4116] = -1;
    v518 = 767;
    v461 = 0;
    v462 = 10;
    v472 = 0;
    v473 = 0;
    v464 = 0;
    v463 = 0;
    *(_OWORD *)v511 = xmmword_1B6917C00;
    *(_OWORD *)&v511[16] = xmmword_1B6917C10;
    *(_QWORD *)&v511[32] = 0x500000000;
    v517 = 0uLL;
    v519 = 0;
    v451 = 0;
    HIDWORD(v449.epoch) = 0;
    v450 = 8269;
    BYTE2(v449.epoch) = 1;
    v466 = 0uLL;
    v467 = 0uLL;
    v468 = 0uLL;
    v469 = 0uLL;
    v523 = 150;
    v465 = 150995458;
    v524 = 258;
    v525 = 8;
    v533 = 0;
    v501 = 0;
    v521 = 0;
    v526 = 0;
    v529 = 0;
    v530 = 0;
    v479 = 0;
    v480 = 0;
    v531 = 0x1007800000001;
    v536 = 30;
    v535 = 0x10000;
    v485 = 0;
    v522 = 0;
    v499 = 0;
    memset(&v538[2001], 0, 7);
    v538[4128] = 0;
    v537 = -67108864;
    v539 = 0;
    v540 = 30;
    v543 = 0;
    v514 = 0;
    v541 = 0;
    v549 = 0u;
    v550 = 3;
    v551 = 0;
    v553 = 0;
    v548 = 0;
    v542 = 0x10000;
    v544 = 0;
    v546 = 0u;
    v547 = 0;
    v545 = 0x200000001;
    v538[3815] = 0;
    v552 = *(_QWORD *)(v21 + 6304);
    v554 = *(_DWORD *)(v21 + 6236);
    __strlcpy_chk();
    v25 = *(_DWORD *)(v21 + 5048);
    if (v25 > 0x27 || ((1 << v25) & 0xC0001001D2) == 0)
      *(_DWORD *)(v21 + 5048) = 7;
    bzero(&v393, 0x1430uLL);
    v448 = 1;
    LOWORD(v393) = 352;
    WORD2(v393) = 288;
    LOBYTE(v394) = 77;
    *(_QWORD *)((char *)&v395 + 4) = 0x7FFFFFFF00000005;
    HIDWORD(v395) = 1;
    DWORD1(v396) = 200000;
    LODWORD(v400) = 0;
    *(_DWORD *)((char *)&v401 + 1) = 0;
    HIDWORD(v396) = 1106247680;
    HIDWORD(v397) = 1;
    BYTE5(v401) = 1;
    *((_QWORD *)&v401 + 1) = 0x3FC0000000000003;
    v416 = 0;
    v423 = -1;
    v424 = -1;
    WORD6(v402) = 257;
    BYTE14(v402) = 1;
    *(_QWORD *)((char *)&v403 + 4) = 0x200000010;
    WORD2(v404) = 6;
    BYTE8(v404) = 0;
    BYTE1(v403) = 1;
    *(_QWORD *)((char *)&v405[1] + 12) = 0x80000000800000;
    *(_QWORD *)((char *)&v405[2] + 4) = 0x47C3500047C35000;
    *(_DWORD *)((char *)v405 + 6) = 16843009;
    *(_WORD *)((char *)v405 + 11) = -255;
    *(_DWORD *)((char *)v405 + 13) = 0;
    BYTE1(v405[1]) = 0;
    WORD3(v405[1]) = -1;
    DWORD1(v407[1]) = 0;
    HIDWORD(v405[2]) = 0;
    LOBYTE(v405[3]) = 0;
    *(_QWORD *)((char *)&v405[3] + 2) = 0;
    *(_QWORD *)((char *)&v405[3] + 9) = 0;
    DWORD1(v402) = 437918234;
    WORD4(v407[1]) = 0;
    LOWORD(v407[2]) = -1;
    BYTE8(v406) = sub_1B68A3908();
    BYTE9(v406) = 1;
    BYTE12(v407[4]) = 0;
    WORD4(v407[0]) = 0;
    LOWORD(v395) = 0;
    v410 = 0;
    *(_DWORD *)((char *)&v406 + 10) = 0;
    *(_OWORD *)&v408[8] = 0u;
    v411 = 1;
    *(_DWORD *)((char *)v407 + 14) = 0;
    BYTE2(v407[1]) = 0;
    v428 = 0;
    v433[2115] = -1;
    v414 = 767;
    *((_QWORD *)&v398 + 1) = 0;
    LODWORD(v399[0]) = 10;
    *(_QWORD *)((char *)&v400 + 4) = 0;
    LOBYTE(v401) = 0;
    BYTE12(v399[0]) = 0;
    *(_QWORD *)((char *)v399 + 4) = 0;
    *(_OWORD *)((char *)&v407[2] + 4) = xmmword_1B6917C00;
    *(_OWORD *)((char *)&v407[3] + 4) = xmmword_1B6917C10;
    *(_QWORD *)((char *)&v407[4] + 4) = 0x500000000;
    v412 = 0;
    v413 = 0;
    v415 = 0;
    BYTE12(v394) = 0;
    *(_QWORD *)((char *)&v394 + 4) = 0x204D00000000;
    BYTE2(v394) = 1;
    memset((char *)&v399[1] + 8, 0, 64);
    v419 = 150;
    *(_QWORD *)((char *)v399 + 13) = 150995458;
    v420 = 258;
    v421 = 8;
    v429 = 0;
    LOBYTE(v406) = 0;
    v417 = 0x1000000;
    v422 = 0;
    v425 = 0;
    v426 = 0;
    WORD4(v402) = 0;
    BYTE10(v402) = 0;
    v427 = 0x1007800000001;
    v431 = 30;
    v430 = 0x10000;
    WORD1(v403) = 0;
    v418 = 0;
    BYTE1(v405[3]) = 0;
    memset(v433, 0, 7);
    v433[2127] = 0;
    v432 = -67108864;
    v434 = 0;
    v435 = 30;
    v438 = 0;
    v409 = 0;
    v436 = 0;
    v444 = 0u;
    v445 = 3;
    v446 = 0;
    v447 = 0;
    v443 = 0;
    v437 = 0x10000;
    v441 = 0u;
    v439 = 0;
    v442 = 0;
    v440 = 0x200000001;
    v433[1814] = 0;
    v19 = v379;
    if (*(_DWORD *)(v21 + 5088))
    {
      LODWORD(v461) = *(_DWORD *)(v21 + 5088);
      *(_OWORD *)&v511[8] = *(_OWORD *)(v21 + 5104);
      *(_OWORD *)&v511[24] = *(_OWORD *)v379;
    }
    HIDWORD(v495) = *(_DWORD *)(v21 + 5068);
    v26 = *(_DWORD *)(v21 + 5048);
    v22 = v375;
    switch(v26)
    {
      case 0u:
        sub_1B6898708((_DWORD *)v21, v366, (uint64_t)&v449);
        if (*(_DWORD *)(v21 + 5052))
          sub_1B6898708((_DWORD *)v21, v366, (uint64_t)&v393);
        goto LABEL_203;
      case 1u:
        v74 = *(_DWORD *)(v21 + 5140);
        LOWORD(v449.value) = v74;
        v75 = *(_DWORD *)(v21 + 5144);
        WORD2(v449.value) = v75;
        WORD1(v449.value) = v75;
        LOBYTE(v524) = 0;
        v534 = 0;
        v76 = sub_1B6898818((__int16)v74, (__int16)v75);
        if ((v75 * v74) <= 0x2B200 && *(_DWORD *)(v21 + 6232))
        {
          v77 = 2;
          v78 = 1;
        }
        else
        {
          v78 = 0;
          v77 = 3;
        }
        v538[4129] = v78;
        v105 = "-20 800000  ";
        if (v76 == 10)
          v105 = "-20 1500000  ";
        if (v76 == 5)
          v105 = "-20 1500000 ";
        snprintf((char *)&v589, 0x1000uLL, " %d %d -74 -220 -101 i %s -258 -264 %d -100004 0 ", v74, v75, v105, v77);
        v106 = strlen((const char *)&v589);
        sub_1B6898918((uint64_t)&v589, v106, (uint64_t)&v449, v107, v108, v109);
        *(_DWORD *)(v21 + 24) = v455;
        *(float *)(v21 + 52) = v457;
        *(_DWORD *)(v21 + 28) = v456;
        v110 = *(double *)(v21 + 752);
        if (v110 > 0.0)
        {
          v111 = v110;
          v457 = v111;
          *(float *)(v21 + 52) = v111;
        }
        v112 = *(_DWORD *)(v21 + 760);
        v15 = pixelBuffer;
        if (v112 >= 1)
        {
          v455 = *(_DWORD *)(v21 + 760);
          *v366 = v112;
        }
        v113 = *(_DWORD *)(v21 + 764);
        if (v113 >= 1)
          *(_DWORD *)(v21 + 28) = v113;
        LODWORD(v517) = 1;
        *(_QWORD *)((char *)&v517 + 4) = 0x100000001;
        v114 = *(int *)(v21 + 900);
        if ((_DWORD)v114)
        {
          v115 = 0;
          v588 = 0u;
          v587 = 0u;
          v586 = 0u;
          v585 = 0u;
          v584 = 0u;
          v583 = 0u;
          v582 = 0u;
          v581 = 0u;
          v580 = 0u;
          v579 = 0u;
          v578 = 0u;
          v577 = 0u;
          v576 = 0u;
          v575 = 0u;
          v574 = 0u;
          v573 = 0u;
          v572 = 0u;
          v571 = 0u;
          v570 = 0u;
          v569 = 0u;
          v568 = 0u;
          v567 = 0u;
          v566 = 0u;
          v565 = 0u;
          v564 = 0u;
          v563 = 0u;
          v562 = 0u;
          v561 = 0u;
          v560 = 0u;
          v559 = 0u;
          v558 = 0u;
          *(_OWORD *)number = 0u;
          v116 = (const __CFNumber *)&v589;
          LODWORD(extraRowsOnBottom) = 0;
          do
          {
            number[v115++] = v116;
            v116 = (const __CFNumber *)((char *)v116 + 300);
          }
          while (v115 != 64);
          sub_1B6898A04(v21 + 904, v114, &extraRowsOnBottom, (uint64_t)number);
          sub_1B68F0B50(extraRowsOnBottom, (uint64_t)number, (__int16 *)&v449);
        }
        if (strnlen(v538, 0x7D1uLL) <= 0x7D0)
          __strlcpy_chk();
        goto LABEL_203;
      case 2u:
        v79 = *(_DWORD *)(v21 + 5140);
        LOWORD(v449.value) = v79;
        v80 = *(_DWORD *)(v21 + 5144);
        WORD2(v449.value) = v80;
        WORD1(v449.value) = v80;
        v81 = sub_1B6898818((__int16)v79, (__int16)v80);
        snprintf((char *)&v589, 0x1000uLL, " %d %d -68 -101 b %s", v79, v80, off_1E6A17BE8[v81 - 1]);
        v82 = strlen((const char *)&v589);
        sub_1B6898918((uint64_t)&v589, v82, (uint64_t)&v449, v83, v84, v85);
        if (*(_DWORD *)(v21 + 5068))
        {
          HIDWORD(v495) = *(_DWORD *)(v21 + 5068);
          v500[2] = 0;
        }
        sub_1B6898B78(v21, v366, (uint64_t)&v449);
        v477 = 1;
        v15 = pixelBuffer;
        if (HIDWORD(v495) == 1)
        {
          v460 = 1;
          v86 = 0x3FC0000000000001;
        }
        else
        {
          if (HIDWORD(v495) <= 5)
          {
            v460 = (int)(float)((float)((float)HIDWORD(v495) * 0.5) + 1.0);
            LODWORD(v476) = v460;
            goto LABEL_202;
          }
          if (HIDWORD(v495) > 0x1F)
          {
            v460 = 31;
            v151 = 31;
          }
          else
          {
            v460 = HIDWORD(v495);
            v151 = 5;
          }
          v86 = v151 & 0xFFFFFFFFFFFFLL | 0x3FA0000000000000;
        }
        v476 = v86;
        goto LABEL_203;
      case 3u:
      case 5u:
        goto LABEL_208;
      case 4u:
        v87 = *(_DWORD *)(v21 + 5140);
        LOWORD(v449.value) = v87;
        v88 = *(_DWORD *)(v21 + 5144);
        WORD2(v449.value) = v88;
        WORD1(v449.value) = v88;
        snprintf((char *)&v589, 0x1000uLL, " %d %d -68 -101 c -23 0 %s", v87, v88, "-20 0  ");
        v89 = strlen((const char *)&v589);
        sub_1B6898918((uint64_t)&v589, v89, (uint64_t)&v449, v90, v91, v92);
        *(_DWORD *)(v21 + 5208) = 516;
        BYTE2(v474) = 0;
        v518 = 516;
        v478 = 16843009 * sub_1B68F0418(516, 12);
        if (*(_DWORD *)(v21 + 5068))
        {
          HIDWORD(v495) = *(_DWORD *)(v21 + 5068);
          v500[2] = 0;
        }
        goto LABEL_203;
      case 6u:
        v93 = *(_DWORD *)(v21 + 5140);
        LOWORD(v449.value) = v93;
        v94 = *(_DWORD *)(v21 + 5144);
        WORD2(v449.value) = v94;
        WORD1(v449.value) = v94;
        v95 = sub_1B6898818((__int16)v93, (__int16)v94);
        if (v94 * v93 < 76801)
        {
          snprintf((char *)&v589, 0x1000uLL, " %d %d -116");
LABEL_180:
          v147 = strlen((const char *)&v589);
          sub_1B6898918((uint64_t)&v589, v147, (uint64_t)&v449, v148, v149, v150);
          goto LABEL_184;
        }
        if ((v94 * v93) <= 0x4B000)
        {
          snprintf((char *)&v589, 0x1000uLL, " %d %d -129");
          goto LABEL_180;
        }
        sub_1B6898C14(*(unsigned int *)(v21 + 5140), *(unsigned int *)(v21 + 5144), (uint64_t)&v449, v95, v96, v97);
LABEL_184:
        HIDWORD(v463) = 7;
        BYTE1(v474) = 0;
        LODWORD(v463) = v471 >> 13;
        HIDWORD(v461) = ((int)(v470 * (double)v471 + 0.5) >> (v462 + 4)) & ~((int)(v470 * (double)v471 + 0.5) >> (v462 + 4) >> 31);
        v152 = *(_DWORD *)(v21 + 5084);
        v15 = pixelBuffer;
        if (v152)
        {
          HIDWORD(v453) = *(_DWORD *)(v21 + 5084);
          v460 = v152;
        }
        if (*(_DWORD *)(v21 + 5068))
        {
          HIDWORD(v495) = *(_DWORD *)(v21 + 5068);
          v500[2] = 0;
        }
LABEL_188:
        LOBYTE(v103) = v481;
LABEL_189:
        HIBYTE(v481) = v103;
        sub_1B6898B78(v21, v366, (uint64_t)&v449);
        v153 = HIDWORD(v495);
        if (HIDWORD(v495) == 1)
        {
          v154 = 1;
        }
        else
        {
          v154 = v495;
          if ((_DWORD)v495 == 1)
          {
            v153 = 1;
          }
          else if (HIDWORD(v495) == 0x800000)
          {
            v154 = 30;
            v153 = 31;
          }
          else
          {
            if (v495 < HIDWORD(v495) && v495 > 1)
              v153 = v495;
            v154 = 30;
          }
        }
        v460 = v153;
        LODWORD(v476) = v154;
LABEL_202:
        HIDWORD(v476) = 1069547520;
LABEL_203:
        *(_BYTE *)(v379 + 1172) = BYTE2(v542);
        *(_QWORD *)(v21 + 5040) = 0;
        BYTE6(v540) = 1;
        BYTE2(v449.epoch) = 1;
        if (!*(_QWORD *)(v21 + 5032))
          goto LABEL_528;
        v156 = 0;
        v157 = (CFTypeRef *)MEMORY[0x1E0CED870];
        v158 = &qword_1E6A17978;
        while (!CFEqual(*(CFTypeRef *)(v21 + 5032), *v157))
        {
          ++v156;
          v159 = (CFTypeRef *)*v158;
          v158 += 2;
          v157 = v159;
          if (v156 == 33)
            goto LABEL_207;
        }
        v160 = (char *)&unk_1E6A17968 + 16 * v156;
        v162 = *((_DWORD *)v160 + 2);
        v161 = *((_DWORD *)v160 + 3);
        if (v162 <= 76)
        {
          if (!v162)
          {
LABEL_207:
            CFStringGetCStringPtr(*(CFStringRef *)(v21 + 5032), 0x8000100u);
LABEL_208:
            CFLog();
            v50 = 4294967246;
            goto LABEL_530;
          }
          if (v162 == 66)
          {
            LOBYTE(v449.epoch) = 66;
            LOWORD(v529) = 0;
            v483 = 0;
          }
        }
        else if (v162 == 77 || v162 == 100)
        {
          LOBYTE(v449.epoch) = v162;
        }
        else if (v162 == 101)
        {
          LOBYTE(v449.epoch) = 101;
          LOBYTE(v506) = 0;
        }
        if (((0x380200C00uLL >> v156) & 1) == 0)
        {
          v163 = 0;
          *(_WORD *)((char *)&v449.epoch + 1) = v161;
          do
          {
            if (byte_1B693579C[v163] == v161)
              break;
            ++v163;
          }
          while (v163 != 17);
          if (v471)
            v164 = v471;
          else
            v164 = v455;
          if ((v449.epoch & 0xFE) == 0x64)
            v165 = 5000;
          else
            v165 = 4000;
          if (v164 > (v165 * dword_1B6935758[v163]) >> 2)
            goto LABEL_208;
          v166 = v470 * (double)v164;
          v167 = v163;
          if (1000 * dword_1B6935714[v163] < v166)
            goto LABEL_208;
          v168 = ((-SLOWORD(v449.value) & 0xF) + SLOWORD(v449.value))
               * ((-SWORD2(v449.value) & 0xF) + SWORD2(v449.value))
               / 256;
          if (v168 > word_1B69354D0[v167])
            goto LABEL_208;
          v169 = v458;
          v170 = v457;
          if (v457 == 0.0)
            v170 = 30.0;
          if (v458 <= 0.0)
            v169 = v170;
          if (dword_1B693548C[v167] < ((float)(v169 * (float)v168) + 0.5))
            goto LABEL_208;
          v347 = dword_1B69354F4[v167];
          if (v168 * v482 > v347)
          {
            v348 = v347 / v168 - 1;
            if (v348 >= HIBYTE(v521))
              v348 = HIBYTE(v521);
            HIBYTE(v521) = v348;
            if ((int)(v348 + 1) < v482)
              v349 = v348 + 1;
            else
              v349 = v482;
            v482 = v349;
          }
        }
LABEL_528:
        v350 = *(_DWORD *)(v21 + 5084);
        MachThreadPriorityValue = FigThreadGetMachThreadPriorityValue();
        v352 = sub_1B68E4F8C(v350, &v449, v22, MachThreadPriorityValue, *(_BYTE *)(v379 + 1172));
        if (v352)
        {
          v353 = v352;
          CFLog();
          v50 = v353;
        }
        else
        {
          *(_DWORD *)(v21 + 5040) = LOBYTE(v449.epoch);
          *(_DWORD *)(v21 + 5044) = BYTE1(v449.epoch);
          v357 = *(_QWORD *)(v21 + 16);
          v358 = *(_QWORD *)(v357 + 5176);
          if (*(_BYTE *)(v379 + 1172) || *(_QWORD *)(v358 + 208120) && !*(_QWORD *)(v357 + 5184))
          {
            *(_QWORD *)(v358 + 160) = sub_1B6898CD4;
            *(_QWORD *)(*(_QWORD *)(v357 + 5176) + 168) = v21;
            CFLog();
            break;
          }
          CFLog();
          CFLog();
          v50 = 4294966630;
        }
LABEL_530:
        CFLog();
        v31 = 0;
        v49 = 0;
        v48 = 0;
        v33 = 0;
        value = 0;
        goto LABEL_531;
      case 7u:
        LOWORD(v449.value) = *(_DWORD *)(v21 + 5140);
        WORD2(v449.value) = *(_DWORD *)(v21 + 5144);
        WORD1(v449.value) = WORD2(v449.value);
        snprintf((char *)&v589, 0x1000uLL, " %d %d -221");
        goto LABEL_89;
      case 8u:
        LOWORD(v449.value) = *(_DWORD *)(v21 + 5140);
        WORD2(v449.value) = *(_DWORD *)(v21 + 5144);
        WORD1(v449.value) = WORD2(v449.value);
        snprintf((char *)&v589, 0x1000uLL, " %d %d -141");
LABEL_89:
        v98 = strlen((const char *)&v589);
        sub_1B6898918((uint64_t)&v589, v98, (uint64_t)&v449, v99, v100, v101);
        HIDWORD(v463) = 7;
        BYTE1(v474) = 0;
        LODWORD(v463) = v471 >> 13;
        HIDWORD(v461) = ((int)(v470 * (double)v471 + 0.5) >> (v462 + 4)) & ~((int)(v470 * (double)v471 + 0.5) >> (v462 + 4) >> 31);
        v102 = *(_DWORD *)(v21 + 5084);
        if (v102)
        {
          HIDWORD(v453) = *(_DWORD *)(v21 + 5084);
          v460 = v102;
        }
        if (*(_DWORD *)(v21 + 5068))
        {
          HIDWORD(v495) = *(_DWORD *)(v21 + 5068);
          v500[2] = 0;
        }
        v103 = *(_DWORD *)(v21 + 5060);
        if (v103)
          goto LABEL_188;
        LOBYTE(v481) = 0;
        goto LABEL_189;
      default:
        v22 = v375;
        if (v26 > 0x27 || ((1 << v26) & 0xC000100000) == 0)
          goto LABEL_208;
        v27 = *(_DWORD *)(v21 + 5140);
        LOWORD(v449.value) = v27;
        v28 = *(_DWORD *)(v21 + 5144);
        WORD2(v449.value) = v28;
        WORD1(v449.value) = v28;
        LOBYTE(v524) = 0;
        v534 = 0;
        v522 = 1;
        v29 = *(double *)(v21 + 752);
        if (v29 > 0.0 && !v556)
        {
          v30 = v29;
          v457 = v30;
          *(float *)(v21 + 52) = v30;
          v556 = 1;
        }
        switch(v26)
        {
          case 0x27u:
            snprintf((char *)&v589, 0x1000uLL, " %d %d -74 -220 -101 i %s -258 -264 %d -64 %d -200 0 -201 0 ", v27, v28, "-20 4000000 -100004 3 ", 3, 1);
            break;
          case 0x26u:
            snprintf((char *)&v589, 0x1000uLL, " %d %d -74 -220 -101 i %s -258 -264 %d -64 %d -200 0 -201 0 ", v27, v28, "-20 10000000 -100004 1 ", 3, 0);
            break;
          case 0x14u:
            snprintf((char *)&v589, 0x1000uLL, " %d %d -74 -220 -101 i %s -258 -264 %d -64 %d -200 0 -201 0 ", v27, v28, "-20 10000000 -100004 2 ", 3, 1);
            break;
          default:
            CFLog();
            CFLog();
            goto LABEL_208;
        }
        v117 = strlen((const char *)&v589);
        sub_1B6898918((uint64_t)&v589, v117, (uint64_t)&v449, v118, v119, v120);
        v121 = 0;
        *(_DWORD *)(v21 + 24) = v455;
        *(float *)(v21 + 52) = v457;
        *(_DWORD *)(v21 + 28) = v456;
        v122 = 0x7FFFFFFF;
        do
        {
          v123 = *(double *)(v21 + v121 + 768);
          if (v123 != 0.0)
          {
            v124 = *(double *)(v21 + v121 + 832);
            if (v124 != 0.0 && v122 >= (int)(v123 * 8.0 / v124))
              v122 = (int)(v123 * 8.0 / v124);
          }
          v121 += 8;
        }
        while (v121 != 64);
        if (*(int *)(v21 + 760) <= 0)
          v125 = 0x7FFFFFFF;
        else
          v125 = *(_DWORD *)(v21 + 760);
        if (v125 != 0x7FFFFFFF || v122 != 0x7FFFFFFF)
        {
          if (v125 >= v122)
            v126 = v122;
          else
            v126 = v125;
          if (*(_DWORD *)(v21 + 5048) == 38)
            LODWORD(v126) = sub_1B6898AD0(v126, *(_DWORD *)(v21 + 5040), *(_DWORD *)(v21 + 5140), *(_DWORD *)(v21 + 5144), *(double *)(v21 + 752));
          v455 = v126;
          *v366 = v126;
        }
        *(_BYTE *)(v21 + 896) = 0;
        LODWORD(v517) = 1;
        *(_QWORD *)((char *)&v517 + 4) = 0x100000001;
        v127 = *(int *)(v21 + 900);
        if ((_DWORD)v127)
        {
          v128 = 0;
          v588 = 0u;
          v587 = 0u;
          v586 = 0u;
          v585 = 0u;
          v584 = 0u;
          v583 = 0u;
          v582 = 0u;
          v581 = 0u;
          v580 = 0u;
          v579 = 0u;
          v578 = 0u;
          v577 = 0u;
          v576 = 0u;
          v575 = 0u;
          v574 = 0u;
          v573 = 0u;
          v572 = 0u;
          v571 = 0u;
          v570 = 0u;
          v569 = 0u;
          v568 = 0u;
          v567 = 0u;
          v566 = 0u;
          v565 = 0u;
          v564 = 0u;
          v563 = 0u;
          v562 = 0u;
          v561 = 0u;
          v560 = 0u;
          v559 = 0u;
          v558 = 0u;
          *(_OWORD *)number = 0u;
          v129 = (const __CFNumber *)&v589;
          LODWORD(extraRowsOnBottom) = 0;
          do
          {
            number[v128++] = v129;
            v129 = (const __CFNumber *)((char *)v129 + 300);
          }
          while (v128 != 64);
          sub_1B6898A04(v21 + 904, v127, &extraRowsOnBottom, (uint64_t)number);
          sub_1B68F0B50(extraRowsOnBottom, (uint64_t)number, (__int16 *)&v449);
        }
        if (strnlen(v538, 0x7D1uLL) <= 0x7D0)
          __strlcpy_chk();
        v130 = *(_DWORD *)(v21 + 5048);
        if (v130 == 38 || v130 == 20)
          v550 = *(_DWORD *)(v21 + 5120);
        v553 = *(_BYTE *)(v379 + 1188) != 0;
        if (*(int *)(v21 + 6300) >= 7)
        {
          v131 = (id *)(v21 + 6288);
          if (!sub_1B67C24BC((_QWORD *)(v21 + 6288)))
          {
            v132 = dispatch_semaphore_create(0);
            *(_QWORD *)(v21 + 6280) = v132;
            dispatch_semaphore_signal(v132);
            if (!*(_QWORD *)(v21 + 6280))
            {
              if (*v131)
              {
                objc_msgSend(*v131, "invalidate");
                CFRelease(*v131);
              }
            }
          }
        }
        goto LABEL_203;
    }
  }
  if (*(_DWORD *)(v21 + 5048) == 20 && *(_QWORD *)(v21 + 6288))
  {
    if (*(int *)(v21 + 24) > 5000000)
    {
      *(_DWORD *)(v21 + 6276) = 0;
    }
    else
    {
      v23 = *(_QWORD *)(v21 + 5152);
      if (v23 >= 1 && (v23 & 0x7F) == 0 && !dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v21 + 6280), 0))
      {
        v24 = *(void **)(v21 + 6288);
        *(_QWORD *)&v589.origin.x = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v589.origin.y = 0x40000000;
        *(_QWORD *)&v589.size.width = sub_1B6898E90;
        *(_QWORD *)&v589.size.height = &unk_1E6A17B88;
        v590 = v21;
        sub_1B67C2528(v24, (uint64_t)v15, 1u, 0, &v589);
      }
    }
  }
  v31 = CFNumberCreate(0, kCFNumberSInt64Type, (const void *)(v21 + 5160));
  Mutable = CFDataCreateMutable(0, 72);
  v33 = Mutable;
  if (Mutable)
  {
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    if (MutableBytePtr)
    {
      *(_QWORD *)MutableBytePtr = v17;
      *((_QWORD *)MutableBytePtr + 1) = v15;
      v35 = *(CGPoint *)v381;
      *((_QWORD *)MutableBytePtr + 4) = *(_QWORD *)(v381 + 16);
      *((CGPoint *)MutableBytePtr + 1) = v35;
      v36 = *(_OWORD *)v11;
      *((_QWORD *)MutableBytePtr + 7) = v11[2];
      *(_OWORD *)(MutableBytePtr + 40) = v36;
      v37 = *v7;
      *((_DWORD *)MutableBytePtr + 16) = *v7;
      if (!*(_BYTE *)(v19 + 1172))
        *((_DWORD *)MutableBytePtr + 16) = v37 | 1;
      cf = v33;
      v589.origin = *(CGPoint *)v381;
      v589.size.width = *(CGFloat *)(v381 + 16);
      value = (__CVBuffer **)MutableBytePtr;
      VTEncoderSessionEnqueuePresentationTimeStamp();
      v38 = value;
      v39 = value[1];
      v373 = v39 != 0;
      if (v39)
      {
        CVPixelBufferLockBaseAddress(v39, 1uLL);
        v38 = value;
      }
      v372 = v31;
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v21 + 5200), v31, v38);
      v40 = *(_QWORD *)v381;
      v41 = *(_DWORD *)(v381 + 8);
      *(_QWORD *)&v393 = *(_QWORD *)(v381 + 12);
      DWORD2(v393) = *(_DWORD *)(v381 + 20);
      v42 = *v11;
      v43 = v11[1];
      v44 = v11[2];
      v387 = 0;
      v45 = *(_QWORD *)(v21 + 16);
      *(_DWORD *)(*(_QWORD *)(v45 + 5176) + 112) = *(_DWORD *)(*(_QWORD *)(v45 + 5176) + 116) == 0;
      v46 = *(_QWORD *)(*(_QWORD *)(v45 + 5176) + 8 * *(int *)(*(_QWORD *)(v45 + 5176) + 112) + 96);
      v386 = 0;
      v382 = *(_QWORD **)(v21 + 16);
      v47 = v382[648];
      if (v47)
        v367 = *(char *)(v47 + 532);
      else
        v367 = 0;
      v369 = (char *)v382[1322];
      v370 = v382[1324];
      if (*(_DWORD *)(v21 + 5048) == 20 && *(unsigned __int8 *)(v21 + 6300) >= 7u)
      {
        v51 = *(_DWORD *)(v21 + 6276);
        if ((unsigned __int16)v51 <= 2u)
          *(_WORD *)(v382[647] + 5426) = v51;
      }
      *(_QWORD *)(v46 + 224) = 0;
      *(_OWORD *)(v46 + 192) = 0u;
      *(_OWORD *)(v46 + 208) = 0u;
      *(_OWORD *)(v46 + 160) = 0u;
      *(_OWORD *)(v46 + 176) = 0u;
      *(_OWORD *)(v46 + 128) = 0u;
      *(_OWORD *)(v46 + 144) = 0u;
      *(_OWORD *)(v46 + 96) = 0u;
      *(_OWORD *)(v46 + 112) = 0u;
      *(_OWORD *)(v46 + 64) = 0u;
      *(_OWORD *)(v46 + 80) = 0u;
      *(_OWORD *)(v46 + 32) = 0u;
      *(_OWORD *)(v46 + 48) = 0u;
      *(_OWORD *)v46 = 0u;
      *(_OWORD *)(v46 + 16) = 0u;
      v449.value = v40;
      *(_QWORD *)&v449.flags = v393;
      v449.timescale = v41;
      HIDWORD(v449.epoch) = DWORD2(v393);
      CMTimeConvertScale((CMTime *)&v589, &v449, 10000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      x = v589.origin.x;
      y_low = LODWORD(v589.origin.y);
      v449.value = v42;
      *(_QWORD *)&v449.timescale = v43;
      v449.epoch = v44;
      CMTimeConvertScale((CMTime *)&v589, &v449, 10000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      v52 = v589.origin.x;
      if ((BYTE4(v589.origin.y) & 0x1D) == 1 && *(_QWORD *)&v589.origin.x)
        *(float *)(v21 + 52) = (float)(SLODWORD(v589.origin.y) / *(uint64_t *)&v589.origin.x);
      v53 = (_DWORD *)(v21 + 24);
      *(_QWORD *)(v21 + 744) = theDict;
      if (!v15)
        goto LABEL_491;
      v380 = v19;
      v589.origin.x = 0.0;
      v449.value = 0;
      number[0] = 0;
      extraRowsOnBottom = 0;
      v54 = x;
      if (*(_QWORD *)(v21 + 5152))
        v54 = *(double *)(v21 + 5216);
      *(CGFloat *)(v21 + 5216) = v54;
      CVPixelBufferGetExtendedPixels(v15, (size_t *)&v589, (size_t *)&v449, (size_t *)number, &extraRowsOnBottom);
      BaseAddress = CVPixelBufferGetBaseAddress(v15);
      BytesPerRow = CVPixelBufferGetBytesPerRow(v15);
      Width = CVPixelBufferGetWidth(v15);
      v58 = v15;
      v59 = Width;
      pixelBuffera = v58;
      Height = CVPixelBufferGetHeight(v58);
      if (v59 > 0x7FFFFFFF || Height > 0x7FFFFFFF || BytesPerRow > 0x7FFFFFFF)
      {
        v50 = 4294958327;
        CFLog();
        CFLog();
        v19 = v380;
LABEL_508:
        v31 = v372;
        v33 = cf;
LABEL_509:
        CFLog();
        v48 = 1;
        v49 = v373;
        goto LABEL_532;
      }
      v376 = v22;
      *(_QWORD *)v46 = BaseAddress;
      v61 = (Height + 15) & 0xFFFFFFF0;
      *(_DWORD *)(v46 + 32) = v61;
      *(_DWORD *)(v46 + 36) = v61;
      *(_DWORD *)(v46 + 24) = (v59 + 15) & 0xFFFFFFF0;
      *(_DWORD *)(v46 + 28) = v59;
      *(_DWORD *)(v46 + 40) = Height;
      *(_DWORD *)(v46 + 44) = 0;
      *(_DWORD *)(v46 + 48) = v59;
      *(_DWORD *)(v46 + 52) = 0;
      *(_DWORD *)(v46 + 56) = Height;
      *(_DWORD *)(v46 + 16) = BytesPerRow;
      *(_DWORD *)(v46 + 20) = CVPixelBufferGetPixelFormatType(pixelBuffera);
      *(_BYTE *)(v46 + 156) = 0;
      *(_DWORD *)(v46 + 60) = 0;
      *(_DWORD *)(v46 + 84) = LODWORD(v52);
      *(_DWORD *)(v46 + 88) = LODWORD(x) - LODWORD(v54);
      *(_DWORD *)(v46 + 100) = 10000;
      *(_DWORD *)(v46 + 104) = *(_QWORD *)(v21 + 5152);
      *(_QWORD *)(v46 + 112) = *(_QWORD *)(v21 + 5160);
      *(_QWORD *)(v46 + 176) = pixelBuffera;
      if (CVPixelBufferIsPlanar(pixelBuffera))
      {
        PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffera);
        v63 = PlaneCount >= 2 ? 2 : PlaneCount;
        if (v63)
        {
          v64 = 0;
          v65 = (_DWORD *)(v46 + 200);
          do
          {
            *((_QWORD *)v65 - 2) = CVPixelBufferGetBaseAddressOfPlane(pixelBuffera, v64);
            *(v65 - 2) = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffera, v64);
            *(v65 - 1) = CVPixelBufferGetWidthOfPlane(pixelBuffera, v64);
            *v65 = CVPixelBufferGetHeightOfPlane(pixelBuffera, v64);
            v65 += 6;
            ++v64;
          }
          while (v63 != v64);
        }
      }
      if (*(_DWORD *)(v46 + 20) == 32)
      {
        v66 = *(_DWORD *)(v46 + 24);
        v67 = *(_DWORD *)(v46 + 32);
        if (!*(_QWORD *)(v21 + 5008))
        {
          sub_1B68C0210((void ***)(v21 + 5008));
          sub_1B68C049C(*(__int16 *)(v21 + 5176), *(_QWORD *)(*(_QWORD *)(v21 + 5008) + 104), *(_QWORD *)(*(_QWORD *)(v21 + 5008) + 112));
        }
        v68 = *(void **)(v21 + 5024);
        v69 = 2 * v66;
        if (!v68)
        {
          v68 = malloc_type_malloc(v69 * v67, 0x35CA8629uLL);
          *(_QWORD *)(v21 + 5024) = v68;
        }
        v70 = v67 * v66 + 3;
        if (v67 * v66 >= 0)
          v70 = v67 * v66;
        sub_1B68BFEB8(BaseAddress, (uint64_t)v68, (uint64_t)v68 + v67 * v66, (uint64_t)v68 + ((uint64_t)v70 >> 2) + v67 * v66, v66, v67, v66, v67, *(_DWORD *)(v46 + 16), *(_QWORD **)(v21 + 5008));
        v71 = *(char **)(v21 + 5016);
        if (!v71)
        {
          v71 = (char *)malloc_type_malloc(v67 * v69, 0x59CE2A44uLL);
          *(_QWORD *)(v21 + 5016) = v71;
        }
        sub_1B68BF1C8(*(char **)(v21 + 5024), v66, v67, v71, (2 * v66));
        *(_QWORD *)v46 = *(_QWORD *)(v21 + 5016);
        *(_DWORD *)(v46 + 16) = v69;
        *(_DWORD *)(v46 + 20) = 846624121;
        v22 = v376;
      }
      if (!*(_QWORD *)(v21 + 5152))
      {
        *(CGFloat *)(v21 + 96) = x;
        *(_QWORD *)(v21 + 104) = 0;
      }
      if (theDict)
      {
        v72 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5B8]);
        if (v72)
          v73 = CFEqual(v72, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
        else
          v73 = 0;
        if (*(_DWORD *)(v21 + 5056))
          v104 = v73;
        else
          v104 = 1;
      }
      else
      {
        v104 = 0;
      }
      *(_DWORD *)(v46 + 64) = 0;
      v133 = (unsigned __int8 *)*((_QWORD *)*v22 + 647);
      if (v133)
      {
        v133 += 207941;
        v134 = *v133;
        LODWORD(v133) = v133[1];
      }
      else
      {
        v134 = 0;
      }
      *(_DWORD *)(v21 + 112) = 0;
      *(_DWORD *)(v21 + 132) = 0;
      *(_DWORD *)(v21 + 152) = 0;
      *(_WORD *)(v21 + 172) = 0;
      if (*(_BYTE *)(v380 + 1172))
      {
        if (v134)
          v135 = v104 == 0;
        else
          v135 = 0;
        v137 = v135 && (_DWORD)v133 != 0;
      }
      else
      {
        v137 = 0;
      }
      *(_BYTE *)(v21 + 92) = v137;
      *(_DWORD *)(v21 + 192) = 0;
      *(_DWORD *)(v21 + 328) = 0;
      *(_QWORD *)(v21 + 336) = 0;
      *(_QWORD *)(v21 + 344) = 0;
      *(_DWORD *)(v21 + 352) = 0;
      *(_QWORD *)(v21 + 360) = 0;
      *(_QWORD *)(v21 + 368) = 0;
      *(_QWORD *)(v21 + 400) = -1;
      *(_DWORD *)(v21 + 408) = -1;
      *(_DWORD *)(v21 + 640) = *(_DWORD *)(v21 + 6228);
      *(_DWORD *)(v21 + 624) = 0;
      *(_WORD *)(v21 + 741) = 0;
      *(_BYTE *)(v21 + 732) = 0;
      *(_QWORD *)(v21 + 184) = 0;
      *(_BYTE *)(v21 + 743) = *(_BYTE *)(v380 + 1148);
      v138 = *(_DWORD *)(v21 + 5048);
      if (v138 > 0x27
        || ((1 << v138) & 0xC000100002) == 0
        || (*(_QWORD *)(v21 + 744) = theDict, *(_WORD *)(v21 + 172) = 2, !theDict))
      {
        v145 = v104;
        v146 = pixelBuffera;
        v19 = v380;
        goto LABEL_349;
      }
      LODWORD(number[0]) = 2;
      v139 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5A8]);
      if (v139)
      {
        v140 = v139;
        TypeID = CFDataGetTypeID();
        if (TypeID == CFGetTypeID(v140))
        {
          BytePtr = CFDataGetBytePtr(v140);
          Length = CFDataGetLength(v140);
          if (Length >> 1 >= 8)
            v144 = 8;
          else
            v144 = Length >> 1;
          memcpy((void *)(v21 + 116), BytePtr, 2 * v144);
          *(_DWORD *)(v21 + 112) = v144;
          if (v134)
            *(_BYTE *)(v21 + 92) = 1;
          else
            v104 = 1;
        }
      }
      v171 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5B0]);
      if (v171)
      {
        v172 = v171;
        v173 = CFDataGetTypeID();
        if (v173 == CFGetTypeID(v172))
        {
          v174 = CFDataGetBytePtr(v172);
          v175 = CFDataGetLength(v172);
          if (v175 >> 1 >= 8)
            v176 = 8;
          else
            v176 = v175 >> 1;
          memcpy((void *)(v21 + 136), v174, 2 * v176);
          *(_DWORD *)(v21 + 132) = v176;
        }
      }
      v177 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5A0]);
      if (v177)
      {
        v178 = v177;
        v179 = CFDataGetTypeID();
        if (v179 == CFGetTypeID(v178))
        {
          v180 = CFDataGetBytePtr(v178);
          v181 = CFDataGetLength(v178);
          if (v181 >> 1 >= 8)
            v182 = 8;
          else
            v182 = v181 >> 1;
          memcpy((void *)(v21 + 156), v180, 2 * v182);
          *(_DWORD *)(v21 + 152) = v182;
        }
      }
      v183 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5C8]);
      if (v183)
      {
        v184 = v183;
        v185 = CFBooleanGetTypeID();
        v186 = CFGetTypeID(v184);
        if (v185 == v186)
          v187 = 1;
        else
          v187 = v104;
        if (v185 == v186)
        {
          v188 = theDict;
          if (v134)
          {
            *(_BYTE *)(v21 + 92) = 1;
            v187 = v104;
          }
          goto LABEL_259;
        }
      }
      else
      {
        v187 = v104;
      }
      v188 = theDict;
LABEL_259:
      v364 = v187;
      v189 = (const __CFNumber *)CFDictionaryGetValue(v188, (const void *)*MEMORY[0x1E0CED5D8]);
      if (v189)
      {
        v190 = v189;
        v191 = CFNumberGetTypeID();
        if (v191 == CFGetTypeID(v190))
        {
          CFNumberGetValue(v190, kCFNumberSInt32Type, number);
          *(_WORD *)(v21 + 172) = number[0];
        }
      }
      v192 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED620]);
      v19 = v380;
      if (v192
        && (v193 = v192, v194 = CFBooleanGetTypeID(), v194 == CFGetTypeID(v193))
        && (v195 = CFBooleanGetValue((CFBooleanRef)v193), *(_BYTE *)(v21 + 732) = v195 != 0, v195))
      {
        ++*(_DWORD *)(v21 + 736);
      }
      else
      {
        *(_DWORD *)(v21 + 736) = 0;
      }
      v196 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("frameQueueInfo"));
      if (v196)
      {
        v197 = v196;
        v198 = CFArrayGetTypeID();
        if (v198 == CFGetTypeID(v197))
        {
          v589.origin.x = 0.0;
          v449.value = 0;
          Count = CFArrayGetCount(v197);
          if (Count >= 1)
          {
            v200 = 0;
            v201 = Count;
            do
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v197, v200);
              sub_1B6898EEC(ValueAtIndex, CFSTR("bufferSize"), kCFNumberSInt64Type, &v589);
              sub_1B6898EEC(ValueAtIndex, CFSTR("timeStamp"), kCFNumberSInt64Type, &v449);
              *(_QWORD *)(v21 + 184) += *(_QWORD *)&v589.origin.x;
              ++v200;
            }
            while (v201 != v200);
          }
          v22 = v376;
          v19 = v380;
        }
      }
      v203 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED4A0]);
      if (v203)
      {
        v204 = v203;
        v205 = CFArrayGetTypeID();
        if (v205 == CFGetTypeID(v204))
        {
          v206 = CFArrayGetCount(v204);
          v207 = v206 >= 0x10 ? 16 : v206;
          *(_DWORD *)(v21 + 192) = v207;
          if (v207)
          {
            v208 = 0;
            v209 = (char *)(v21 + 200);
            do
            {
              v210 = (const __CFNumber *)CFArrayGetValueAtIndex(v204, v208);
              CFNumberGetValue(v210, kCFNumberSInt64Type, v209);
              ++v208;
              v209 += 8;
            }
            while (v208 < *(unsigned int *)(v21 + 192));
          }
        }
      }
      v211 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED670]);
      if (v211)
      {
        v212 = v211;
        v213 = (const __CFNumber *)CFDictionaryGetValue(v211, (const void *)*MEMORY[0x1E0CA8D60]);
        v146 = pixelBuffera;
        if (v213)
          CFNumberGetValue(v213, kCFNumberSInt32Type, (void *)(v21 + 380));
        v214 = (const __CFNumber *)CFDictionaryGetValue(v212, (const void *)*MEMORY[0x1E0CA8D40]);
        if (v214)
          CFNumberGetValue(v214, kCFNumberSInt32Type, (void *)(v21 + 384));
        v215 = (const __CFNumber *)CFDictionaryGetValue(v212, (const void *)*MEMORY[0x1E0CA8D48]);
        if (v215)
          CFNumberGetValue(v215, kCFNumberSInt32Type, (void *)(v21 + 388));
        v216 = (const __CFNumber *)CFDictionaryGetValue(v212, (const void *)*MEMORY[0x1E0CA8D58]);
        if (v216)
          CFNumberGetValue(v216, kCFNumberSInt32Type, (void *)(v21 + 392));
      }
      else
      {
        *(_QWORD *)(v21 + 388) = 0;
        *(_QWORD *)(v21 + 380) = 0;
        v146 = pixelBuffera;
      }
      v217 = theDict;
      v218 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PadFrameToMinimumSize"));
      if (v218)
        CFNumberGetValue(v218, kCFNumberSInt32Type, (void *)(v21 + 376));
      v219 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED630]);
      if (v219)
        CFNumberGetValue(v219, kCFNumberSInt32Type, (void *)(v21 + 328));
      *(_DWORD *)(v21 + 396) = 0;
      v220 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("queuelength"));
      if (v220)
      {
        *(_DWORD *)(v21 + 396) = 1;
        CFNumberGetValue(v220, kCFNumberSInt32Type, (void *)(v21 + 400));
      }
      v221 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("avgOutgoingRate"));
      if (v221)
      {
        CFNumberGetValue(v221, kCFNumberSInt32Type, (void *)(v21 + 404));
        *(_DWORD *)(v21 + 404) &= ~(*(int *)(v21 + 404) >> 31);
        v217 = theDict;
      }
      v222 = (const __CFNumber *)CFDictionaryGetValue(v217, CFSTR("instantOutgoingRate"));
      if (v222)
      {
        CFNumberGetValue(v222, kCFNumberSInt32Type, (void *)(v21 + 408));
        *(_DWORD *)(v21 + 408) &= ~(*(int *)(v21 + 408) >> 31);
        v217 = theDict;
      }
      v223 = (const __CFNumber *)CFDictionaryGetValue(v217, CFSTR("Use2GNetwork"));
      if (v223)
        CFNumberGetValue(v223, kCFNumberSInt32Type, (void *)(v21 + 412));
      v224 = (const __CFNumber *)CFDictionaryGetValue(v217, CFSTR("RemoteDisplayWidth"));
      if (v224)
        CFNumberGetValue(v224, kCFNumberSInt32Type, (void *)(v21 + 416));
      v225 = (const __CFNumber *)CFDictionaryGetValue(v217, CFSTR("RemoteDisplayHeight"));
      if (v225)
        CFNumberGetValue(v225, kCFNumberSInt32Type, (void *)(v21 + 420));
      v226 = (const __CFNumber *)CFDictionaryGetValue(v217, (const void *)*MEMORY[0x1E0CED5E8]);
      if (v226)
        CFNumberGetValue(v226, kCFNumberDoubleType, (void *)(v21 + 336));
      v227 = (const __CFNumber *)CFDictionaryGetValue(v217, (const void *)*MEMORY[0x1E0CED4B8]);
      if (v227)
        CFNumberGetValue(v227, kCFNumberSInt32Type, (void *)(v21 + 344));
      v228 = (const __CFNumber *)CFDictionaryGetValue(v217, (const void *)*MEMORY[0x1E0CED590]);
      if (v228)
      {
        v229 = v228;
        v230 = CFNumberGetTypeID();
        if (v230 == CFGetTypeID(v229))
        {
          CFNumberGetValue(v229, kCFNumberSInt32Type, (void *)(v21 + 348));
          *(_DWORD *)(v21 + 348) &= ~(*(int *)(v21 + 348) >> 31);
        }
      }
      v231 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("FECPercentage"));
      if (v231)
      {
        v232 = v231;
        sub_1B6898EEC(v231, CFSTR("FECPercentageIFrame"), kCFNumberFloat64Type, (void *)(v21 + 360));
        sub_1B6898EEC(v232, CFSTR("FECPercentagePFrame"), kCFNumberFloat64Type, (void *)(v21 + 368));
      }
      v233 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CED5F0]);
      if (v233)
      {
        v234 = v233;
        v235 = CFNumberGetTypeID();
        if (v235 == CFGetTypeID(v234))
        {
          CFNumberGetValue(v234, kCFNumberSInt32Type, (void *)(v21 + 352));
          *(_DWORD *)(v21 + 352) &= ~(*(int *)(v21 + 352) >> 31);
        }
      }
      v236 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("CameraFacingType"));
      if (v236)
      {
        v237 = v236;
        v238 = CFNumberGetTypeID();
        if (v238 == CFGetTypeID(v237))
          CFNumberGetValue(v237, kCFNumberSInt32Type, (void *)(v21 + 624));
      }
      LODWORD(v589.origin.x) = 1;
      v239 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("AutoExposureState"));
      if (v239)
      {
        v240 = v239;
        v241 = CFNumberGetTypeID();
        if (v241 == CFGetTypeID(v240))
        {
          CFNumberGetValue(v240, kCFNumberSInt32Type, &v589);
          *(_DWORD *)(v21 + 176) = LODWORD(v589.origin.x);
        }
      }
      v242 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("CaptureFrameDrop"));
      if (v242)
      {
        v243 = v242;
        v244 = CFNumberGetTypeID();
        if (v244 == CFGetTypeID(v243))
          CFNumberGetValue(v243, kCFNumberSInt32Type, (void *)(v21 + 700));
      }
      v245 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("LocalPIPStatus"));
      if (v245)
      {
        v246 = v245;
        v247 = CFNumberGetTypeID();
        if (v247 == CFGetTypeID(v246))
          CFNumberGetValue(v246, kCFNumberSInt32Type, (void *)(v21 + 704));
      }
      v248 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("LocalPIPWidth"));
      if (v248)
      {
        v249 = v248;
        v250 = CFNumberGetTypeID();
        if (v250 == CFGetTypeID(v249))
          CFNumberGetValue(v249, kCFNumberSInt32Type, (void *)(v21 + 708));
      }
      v251 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("LocalPIPHeight"));
      if (v251)
      {
        v252 = v251;
        v253 = CFNumberGetTypeID();
        if (v253 == CFGetTypeID(v252))
          CFNumberGetValue(v252, kCFNumberSInt32Type, (void *)(v21 + 712));
      }
      v254 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("RemotePIPStatus"));
      if (v254)
      {
        v255 = v254;
        v256 = CFNumberGetTypeID();
        if (v256 == CFGetTypeID(v255))
          CFNumberGetValue(v255, kCFNumberSInt32Type, (void *)(v21 + 720));
      }
      v257 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("RemotePIPWidth"));
      if (v257)
      {
        v258 = v257;
        v259 = CFNumberGetTypeID();
        if (v259 == CFGetTypeID(v258))
          CFNumberGetValue(v258, kCFNumberSInt32Type, (void *)(v21 + 724));
      }
      v260 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("RemotePIPHeight"));
      if (v260)
      {
        v261 = v260;
        v262 = CFNumberGetTypeID();
        if (v262 == CFGetTypeID(v261))
          CFNumberGetValue(v261, kCFNumberSInt32Type, (void *)(v21 + 728));
      }
      if (*(_DWORD *)(v21 + 5048) == 38)
      {
        *(_QWORD *)(v21 + 388) = 0;
        *(_QWORD *)(v21 + 380) = 0;
      }
      v145 = v364;
LABEL_349:
      *(_BYTE *)(v21 + 93) = v145;
      v449.value = 0;
      *(_DWORD *)(v21 + 572) = 0;
      *(_QWORD *)(v21 + 576) = 0;
      *(_OWORD *)(v21 + 424) = 0u;
      *(_OWORD *)(v21 + 440) = 0u;
      *(_OWORD *)(v21 + 456) = 0u;
      *(_OWORD *)(v21 + 472) = 0u;
      *(_OWORD *)(v21 + 488) = 0u;
      *(_OWORD *)(v21 + 504) = 0u;
      *(_OWORD *)(v21 + 520) = 0u;
      *(_OWORD *)(v21 + 536) = 0u;
      *(_OWORD *)(v21 + 552) = 0u;
      *(_DWORD *)(v21 + 584) = -1;
      *(_QWORD *)(v21 + 600) = 0;
      *(_QWORD *)(v21 + 616) = 0;
      *(_QWORD *)(v21 + 608) = 0;
      *(_QWORD *)(v21 + 592) = 0x3FF0000000000000;
      v263 = (const __CFNumber *)CVBufferCopyAttachment(v146, CFSTR("FrameIndex"), 0);
      number[0] = v263;
      if (v263)
      {
        v264 = v263;
        CFNumberGetValue(v263, kCFNumberIntType, (void *)(v21 + 584));
        CFRelease(v264);
        number[0] = 0;
      }
      v265 = *(_QWORD *)&v52 + *(_QWORD *)&x;
      memset(&v589, 0, sizeof(v589));
      v266 = CVBufferCopyAttachments(v146, kCVAttachmentMode_ShouldPropagate);
      if (v266)
      {
        v267 = v266;
        v365 = v265;
        v268 = (const void *)*MEMORY[0x1E0D04138];
        if (CFDictionaryContainsKey(v266, (const void *)*MEMORY[0x1E0D04138])
          && (v269 = (const __CFDictionary *)CFDictionaryGetValue(v267, v268)) != 0)
        {
          v361 = v267;
          v270 = v145;
          theDicta = v269;
          v271 = CFDictionaryGetValue(v269, (const void *)*MEMORY[0x1E0D05350]);
          if (v271)
            goto LABEL_355;
          if (qword_1EF1392F0 != -1)
            dispatch_once(&qword_1EF1392F0, &unk_1E6A17BC8);
          if ((byte_1EF1392F8 & 1) == 0)
          {
            v288 = (const __CFDictionary *)CFDictionaryGetValue(theDicta, CFSTR("MetadataCVA"));
            if (v288)
            {
              v271 = CFDictionaryGetValue(v288, (const void *)*MEMORY[0x1E0CFCCF0]);
              if (v271)
              {
LABEL_355:
                v272 = CFGetTypeID(v271);
                if (v272 == CFArrayGetTypeID())
                {
                  v273 = CFArrayGetCount((CFArrayRef)v271);
                  v274 = v273 >= 5 ? 5 : v273;
                  *(_DWORD *)(v21 + 564) = v274;
                  if (v274)
                  {
                    v275 = 0;
                    key = (void *)*MEMORY[0x1E0D05358];
                    v360 = (void *)*MEMORY[0x1E0D05368];
                    v362 = (void *)*MEMORY[0x1E0D05360];
                    v359 = (void *)*MEMORY[0x1E0D05370];
                    v276 = (float *)(v21 + 424);
                    do
                    {
                      v277 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v271, v275);
                      if (v277)
                      {
                        v278 = v277;
                        v279 = v22;
                        v280 = CFGetTypeID(v277);
                        v135 = v280 == CFDictionaryGetTypeID();
                        v22 = v279;
                        if (v135)
                        {
                          if (CFDictionaryGetValueIfPresent(v278, key, (const void **)number))
                            CFNumberGetValue(number[0], kCFNumberSInt32Type, v276);
                          if (!v275)
                          {
                            if (CFDictionaryGetValueIfPresent(v278, v360, (const void **)number))
                              CFNumberGetValue(number[0], kCFNumberSInt32Type, (void *)(v21 + 444));
                            if (CFDictionaryGetValueIfPresent(v278, v359, (const void **)number))
                              CFNumberGetValue(number[0], kCFNumberSInt32Type, (void *)(v21 + 448));
                          }
                          if (CFDictionaryGetValueIfPresent(v278, v362, (const void **)number)
                            && CGRectMakeWithDictionaryRepresentation(number[0], &v589))
                          {
                            v281 = v589.origin.x;
                            v276[1] = v281;
                            y = v589.origin.y;
                            v276[2] = y;
                            v283 = v589.size.width;
                            v276[3] = v283;
                            v284 = v589.size.height;
                            v276[4] = v284;
                            if (v281 < 0.0
                              || ((v285 = v281 + v283, y >= 0.0) ? (v286 = v285 <= 1.0) : (v286 = 0),
                                  !v286 || v283 < 0.0 || v284 < 0.0 || (float)(y + v284) > 1.0))
                            {
                              *(_QWORD *)(v276 + 1) = 0;
                              *(_QWORD *)(v276 + 3) = 0;
                              *(_DWORD *)(v21 + 564) = 0;
                            }
                          }
                        }
                      }
                      ++v275;
                      v276 += 7;
                    }
                    while (v275 < *(unsigned int *)(v21 + 564));
                  }
                }
              }
            }
          }
          v391 = 0;
          extraRowsOnBottom = 0;
          v389 = 0;
          v390 = 0;
          v388 = 0;
          *(_BYTE *)(v21 + 696) = 0;
          v289 = theDicta;
          if (CFDictionaryGetValueIfPresent(theDicta, (const void *)*MEMORY[0x1E0D05038], (const void **)&extraRowsOnBottom))
          {
            v290 = CFNumberGetTypeID();
            v135 = v290 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            v289 = theDicta;
            if (v135)
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberDoubleType, &v449);
          }
          v145 = v270;
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E0D04FC8], (const void **)&extraRowsOnBottom))
          {
            v291 = CFNumberGetTypeID();
            v135 = v291 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            v289 = theDicta;
            if (v135)
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, (char *)&v391 + 4);
          }
          v267 = v361;
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E0D050E0], (const void **)&extraRowsOnBottom))
          {
            v292 = CFNumberGetTypeID();
            v135 = v292 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            v289 = theDicta;
            if (v135)
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, &v391);
          }
          v146 = pixelBuffera;
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E0D04FB8], (const void **)&extraRowsOnBottom))
          {
            v293 = CFNumberGetTypeID();
            v135 = v293 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            v289 = theDicta;
            if (v135)
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, (char *)&v390 + 4);
          }
          v19 = v380;
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E0D04FE0], (const void **)&extraRowsOnBottom))
          {
            v294 = CFNumberGetTypeID();
            v135 = v294 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            v289 = theDicta;
            if (v135)
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, &v390);
          }
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E0D04FD8], (const void **)&extraRowsOnBottom))
          {
            v295 = CFNumberGetTypeID();
            v135 = v295 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            v289 = theDicta;
            if (v135)
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, (char *)&v389 + 4);
          }
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E0D04FD0], (const void **)&extraRowsOnBottom))
          {
            v296 = CFNumberGetTypeID();
            v135 = v296 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            v289 = theDicta;
            if (v135)
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, &v389);
          }
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E0D050D8], (const void **)&extraRowsOnBottom))
          {
            v297 = CFNumberGetTypeID();
            v135 = v297 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            v289 = theDicta;
            if (v135)
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberIntType, (char *)&v388 + 4);
          }
          v298 = 0.0;
          if (CFDictionaryGetValueIfPresent(v289, (const void *)*MEMORY[0x1E0D05078], (const void **)&extraRowsOnBottom))
          {
            v299 = CFNumberGetTypeID();
            v135 = v299 == CFGetTypeID((CFTypeRef)extraRowsOnBottom);
            v287 = (uint64_t *)(v21 + 5160);
            if (v135)
            {
              CFNumberGetValue((CFNumberRef)extraRowsOnBottom, kCFNumberFloatType, &v388);
              *(_BYTE *)(v21 + 696) = 1;
              v298 = *(float *)&v388;
            }
          }
          else
          {
            v287 = (uint64_t *)(v21 + 5160);
          }
          *(double *)(v21 + 688) = v298;
          v300 = *(double *)&v449.value;
          *(_QWORD *)(v21 + 648) = v449.value;
          *(_DWORD *)(v21 + 656) = HIDWORD(v391);
          *(_DWORD *)(v21 + 660) = v391;
          *(_DWORD *)(v21 + 664) = HIDWORD(v388);
          *(_DWORD *)(v21 + 672) = v390;
          *(_DWORD *)(v21 + 676) = HIDWORD(v389);
          *(_DWORD *)(v21 + 680) = v389;
          *(double *)(v21 + 632) = (double)v365 / (double)y_low + v300 * -0.5;
        }
        else
        {
          *(double *)(v21 + 632) = (double)v365 / (double)y_low;
          v287 = (uint64_t *)(v21 + 5160);
        }
        CFRelease(v267);
      }
      else
      {
        *(double *)(v21 + 632) = (double)v265 / (double)y_low;
        v287 = (uint64_t *)(v21 + 5160);
      }
      v301 = 0.0;
      v53 = (_DWORD *)(v21 + 24);
      if (*(int *)(v46 + 84) <= 0 && !*(_DWORD *)(v46 + 104))
        v301 = *(double *)(v21 + 752);
      v302 = *(_DWORD *)(v21 + 760);
      if (v302 >= 1)
        *(_DWORD *)(v21 + 24) = v302;
      v303 = *(_DWORD *)(v21 + 764);
      if (v303 >= 1)
        *(_DWORD *)(v21 + 28) = v303;
      v304 = *(_DWORD *)(v21 + 5048);
      if (v304 == 38 || v304 == 20)
      {
        v305 = 0;
        v306 = 0x7FFFFFFF;
        do
        {
          v307 = *(double *)(v21 + v305 + 768);
          if (v307 != 0.0)
          {
            v308 = *(double *)(v21 + v305 + 832);
            if (v308 != 0.0 && v306 >= (int)(v307 * 8.0 / v308))
              v306 = (int)(v307 * 8.0 / v308);
          }
          v305 += 8;
        }
        while (v305 != 64);
        if (v302 <= 0)
          v302 = 0x7FFFFFFF;
        if (v302 != 0x7FFFFFFF || v306 != 0x7FFFFFFF)
        {
          if (v302 >= v306)
            v309 = v306;
          else
            v309 = v302;
          if (v304 == 38)
          {
            LODWORD(v309) = sub_1B6898AD0(v309, *(_DWORD *)(v21 + 5040), *(_DWORD *)(v21 + 5140), *(_DWORD *)(v21 + 5144), *(double *)(v21 + 752));
            v53 = (_DWORD *)(v21 + 24);
          }
          *v53 = v309;
        }
        *(_BYTE *)(v21 + 896) = 0;
      }
      *(float *)(v21 + 52) = v301;
      *(_DWORD *)(v21 + 80) = (*(_DWORD *)(v21 + 84) | v145) != 0;
      *(_DWORD *)(v21 + 88) = 0;
      v310 = *(double *)(v21 + 5072);
      v311 = *(_DWORD *)(v21 + 5068);
      if (v310 > 0.0 || v311 != 0)
      {
        v313 = (int)(*(float *)(v21 + 56) * v310 + 0.5);
        if (v313 <= 0)
          v313 = 0x7FFFFFFF;
        if (v311 >= v313)
          v314 = v313;
        else
          v314 = *(_DWORD *)(v21 + 5068);
        if (v311 <= 0)
          v315 = v313;
        else
          v315 = v314;
        *(_DWORD *)(*(_QWORD *)(v21 + 16) + 304) = v315;
        v310 = *(double *)(v21 + 5072);
      }
      if (v310 > 2.22044605e-16 && (double)(uint64_t)(*(_QWORD *)&x - *(_QWORD *)(v21 + 96)) / (double)y_low >= v310)
      {
        v317 = *v287;
      }
      else
      {
        v316 = *(unsigned int *)(v21 + 5068);
        if (!(_DWORD)v316 || (v317 = *(_QWORD *)(v21 + 5160), v317 - *(_QWORD *)(v21 + 104) < v316))
        {
LABEL_477:
          v318 = *(_DWORD *)(v21 + 5048);
          if (v318 > 0x27 || ((1 << v318) & 0xC000100000) == 0)
            goto LABEL_491;
          v319 = *v22;
          if (*(_BYTE *)(v19 + 1172))
          {
            v320 = *((_QWORD *)v319 + 647);
            if (*(_BYTE *)(v320 + 5425) && *(_QWORD *)(v320 + 5392))
              *(_QWORD *)(*(_QWORD *)(v320 + 5416) + 144) = v146;
          }
          else
          {
            sub_1B68ED36C(v319, (uint64_t)v146);
            v53 = (_DWORD *)(v21 + 24);
          }
          if (*(_QWORD *)(v21 + 5152))
          {
            if (*(_DWORD *)(v46 + 84))
              goto LABEL_491;
            v321 = *(_DWORD *)(v46 + 100);
            v322 = *(_DWORD *)(v46 + 88) - *(_DWORD *)(v21 + 6240);
            v323 = v322 & ~(v322 >> 31);
            if (*(int *)(v21 + 736) > 3 || (v324 = v323, v323 > v321))
              v324 = *(_DWORD *)(v21 + 6244);
            *(_DWORD *)(v46 + 84) = v324;
            *(_BYTE *)(v21 + 740) = (float)((float)((float)v323 * (float)*(int *)(v21 + 24)) / (float)v321) > 5000000.0;
          }
          *(_DWORD *)(v21 + 6240) = *(_DWORD *)(v46 + 88);
          *(_DWORD *)(v21 + 6244) = *(_DWORD *)(v46 + 84);
LABEL_491:
          v325 = (unsigned int *)(v382 + 1323);
          v326 = v382 + 1325;
          v327 = *v22;
          v328 = *((_QWORD *)*v22 + 648);
          if (v328 && *(_BYTE *)(v328 + 504))
          {
            v329 = *(_DWORD *)(v328 + 528);
            v330 = *(_DWORD *)(v328 + 12);
            v331 = (v329 + 1);
            if (v330 <= (int)v331)
              v332 = v329 + 1;
            else
              v332 = *(_DWORD *)(v328 + 12);
            v333 = (8 * v331) | 7;
            v334 = *(_DWORD *)(v328 + 528);
            while (1)
            {
              if ((int)v331 >= v330)
              {
                v334 = v332;
                goto LABEL_505;
              }
              if (v330 <= v331)
                break;
              if (v329 < -1)
                break;
              v335 = *(_QWORD *)(v328 + 24);
              if (!v335)
                break;
              v336 = *(unsigned __int8 *)(v335 + v333);
              LODWORD(v331) = v331 + 1;
              v333 += 8;
              ++v334;
              if (!v336)
                goto LABEL_505;
            }
            v334 = v331;
LABEL_505:
            *(_DWORD *)(v21 + 5180) = v334;
          }
          v337 = sub_1B68F3788((uint64_t)v327, (uint64_t)v53, v46, *(unsigned int *)(v21 + 5004), v325, v369, v326, v370, &v387, &v386, (_BYTE *)(v21 + 6313), (_BYTE *)&v387 + 1);
          if ((_DWORD)v337)
          {
            v343 = v337;
            CFLog();
            v50 = v343;
            goto LABEL_508;
          }
          if (!*(_DWORD *)(*((_QWORD *)*v22 + 647) + 208128)
            && *(_BYTE *)(v19 + 1172)
            && (v345 = sub_1B6898F50(v21, v338, v339, v340, v341, v342), (_DWORD)v345))
          {
            v346 = v345;
            CFLog();
            v50 = v346;
            v31 = v372;
          }
          else
          {
            v344 = v46;
            v31 = v372;
            v50 = sub_1B6897C5C(v21, v344, v372, v367, v369, v325, v370, v326);
          }
          v33 = cf;
          if ((_DWORD)v50)
          {
            CFLog();
            goto LABEL_509;
          }
          v48 = 1;
          v49 = v373;
LABEL_531:
          if (!v21)
            goto LABEL_539;
          goto LABEL_532;
        }
      }
      *(_DWORD *)(v21 + 80) = 1;
      *(CGFloat *)(v21 + 96) = x;
      *(_QWORD *)(v21 + 104) = v317;
      goto LABEL_477;
    }
  }
  CFLog();
  value = 0;
  v48 = 0;
  v49 = 0;
  v50 = 4294943590;
LABEL_532:
  if (*v22)
  {
    v354 = *(_DWORD *)(v21 + 5048);
    if (v354 <= 0x27 && ((1 << v354) & 0xC000100000) != 0)
    {
      if (*(_BYTE *)(v19 + 1172))
      {
        v355 = *((_QWORD *)*v22 + 647);
        if (*(_BYTE *)(v355 + 5425))
        {
          if (*(_QWORD *)(v355 + 5392))
            *(_QWORD *)(*(_QWORD *)(v355 + 5416) + 144) = 0;
        }
      }
    }
  }
LABEL_539:
  if ((v48 & 1) != 0)
  {
    if (!v49)
      goto LABEL_544;
    goto LABEL_543;
  }
  v356 = v49;
  VTEncoderSessionDequeueDecodeTimeStamp();
  VTEncoderSessionEmitEncodedFrame();
  if (v356)
LABEL_543:
    CVPixelBufferUnlockBaseAddress(value[1], 1uLL);
LABEL_544:
  if (v31)
    CFRelease(v31);
  if (v33)
    CFRelease(v33);
  *(int64x2_t *)(v21 + 5152) = vaddq_s64(*(int64x2_t *)(v21 + 5152), vdupq_n_s64(1uLL));
  return v50;
}

uint64_t sub_1B68975DC()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  CFNumberRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  unsigned int *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  char v35;

  VTVideoEncoderGetCMBaseObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v35 = 0;
  v34 = 0;
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    v1 = DerivedStorage;
    v2 = DerivedStorage + 5184;
    if (*(_BYTE *)(DerivedStorage + 5184))
      return FigSignalErrorAt();
    if (*(_BYTE *)(DerivedStorage + 6296))
      v5 = 0;
    else
      v5 = DerivedStorage + 24;
    v6 = CFNumberCreate(0, kCFNumberSInt64Type, (const void *)(DerivedStorage + 5160));
    if (*(_BYTE *)(v2 + 1112))
      goto LABEL_24;
    v7 = *(_QWORD *)(v1 + 16);
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 5176) + 208120) + 88), 0xFFFFFFFFFFFFFFFFLL);
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 5176) + 205800);
    v9 = *(_QWORD *)(v8 + 22824);
    if (v9 && (v10 = *(unsigned int *)(v9 + 12), (_DWORD)v10))
    {
      v11 = v9 + 216;
      while (*(_BYTE *)(*(_QWORD *)v11 + 1399))
      {
        v11 += 8;
        if (!--v10)
          goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      v12 = *(_QWORD *)(v8 + 22816);
      if (!v12 || (v13 = *(unsigned int *)(v12 + 12), !(_DWORD)v13))
      {
LABEL_19:
        v15 = *(_QWORD *)(v7 + 5168);
        v16 = *(_DWORD *)(v15 + 40);
        v17 = *(_QWORD *)(v15 + 232);
        if (v17)
          v16 += *(unsigned __int8 *)(v17 + 9);
        v18 = v16 != 0;
        goto LABEL_23;
      }
      v14 = v12 + 216;
      while (*(_BYTE *)(*(_QWORD *)v14 + 1399))
      {
        v14 += 8;
        if (!--v13)
          goto LABEL_19;
      }
    }
    v18 = 1;
LABEL_23:
    *(_BYTE *)(v2 + 1129) = v18;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(v7 + 5176) + 208120) + 88));
LABEL_24:
    v19 = *(_DWORD *)(v1 + 5048);
    v20 = v19 > 0x27;
    v21 = (1 << v19) & 0xC000100002;
    if (v20 || v21 == 0)
    {
      if (*(_BYTE *)(v2 + 1129))
      {
        v23 = (_BYTE *)(v2 + 1129);
        while (1)
        {
          v33 = 0;
          v24 = *(_QWORD *)(v1 + 16);
          v25 = *(_QWORD *)(v24 + 5184);
          v26 = v25 ? *(char *)(v25 + 532) : 0;
          v27 = *(char **)(v24 + 10576);
          v28 = (unsigned int *)(v24 + 10584);
          v29 = *(_QWORD *)(v24 + 10592);
          v30 = (_DWORD *)(v24 + 10600);
          v31 = sub_1B68F3788(v24, v5, 0, *(unsigned int *)(v1 + 5004), (_DWORD *)(v24 + 10584), v27, (_DWORD *)(v24 + 10600), v29, &v35, &v34, v23, &v33);
          if ((_DWORD)v31)
            break;
          v32 = *(_QWORD *)(v1 + 16);
          *(_DWORD *)(*(_QWORD *)(v32 + 5176) + 112) = *(_DWORD *)(*(_QWORD *)(v32 + 5176) + 116) == 0;
          v31 = sub_1B6897C5C(v1, *(_QWORD *)(*(_QWORD *)(v32 + 5176) + 8 * *(int *)(*(_QWORD *)(v32 + 5176) + 112) + 96), v6, v26, v27, v28, v29, v30);
          if ((_DWORD)v31)
            break;
          if (!*v23)
            goto LABEL_40;
        }
        v4 = v31;
        CFLog();
      }
      else
      {
LABEL_40:
        v4 = 0;
      }
    }
    else
    {
      v4 = 0;
      *(_BYTE *)(v2 + 1129) = 0;
    }
    if (v6)
      CFRelease(v6);
    return v4;
  }
  return 0;
}

uint64_t sub_1B68978DC(uint64_t a1, CFTypeRef *a2)
{
  pthread_once(&stru_1EF137CD8, sub_1B6897954);
  if (!a2 || !qword_1EF139300)
    return FigSignalErrorAt();
  *a2 = CFRetain((CFTypeRef)qword_1EF139300);
  return 0;
}

void sub_1B6897954()
{
  const __CFAllocator *v0;
  CFDictionaryRef v1;
  CFDictionaryRef v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *values[27];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *keys[27];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v1)
  {
    v2 = v1;
    v3 = (void *)*MEMORY[0x1E0CECEC8];
    keys[0] = *(void **)MEMORY[0x1E0CED248];
    keys[1] = v3;
    values[0] = v1;
    values[1] = v1;
    v4 = (void *)*MEMORY[0x1E0CED0A8];
    keys[2] = *(void **)MEMORY[0x1E0CECEB0];
    keys[3] = v4;
    values[2] = v1;
    values[3] = v1;
    v5 = (void *)*MEMORY[0x1E0CECEF0];
    keys[4] = *(void **)MEMORY[0x1E0CED0B0];
    keys[5] = v5;
    values[4] = v1;
    values[5] = v1;
    v6 = (void *)*MEMORY[0x1E0CECF50];
    keys[6] = CFSTR("ThermalLevel");
    keys[7] = v6;
    values[6] = v1;
    values[7] = v1;
    keys[8] = CFSTR("FECPercentage");
    keys[9] = CFSTR("AverageBitRateIntraLayer");
    values[8] = v1;
    values[9] = v1;
    v7 = (void *)*MEMORY[0x1E0CECF78];
    keys[10] = *(void **)MEMORY[0x1E0CED0D0];
    keys[11] = v7;
    values[10] = v1;
    values[11] = v1;
    v8 = (void *)*MEMORY[0x1E0CECF80];
    keys[12] = *(void **)MEMORY[0x1E0CECFD0];
    keys[13] = v8;
    values[12] = v1;
    values[13] = v1;
    v9 = (void *)*MEMORY[0x1E0CED1F8];
    keys[14] = *(void **)MEMORY[0x1E0CED180];
    keys[15] = v9;
    values[14] = v1;
    values[15] = v1;
    v10 = (void *)*MEMORY[0x1E0CECF48];
    keys[16] = *(void **)MEMORY[0x1E0CED140];
    keys[17] = v10;
    values[16] = v1;
    values[17] = v1;
    v11 = (void *)*MEMORY[0x1E0CED290];
    keys[18] = *(void **)MEMORY[0x1E0CED238];
    keys[19] = v11;
    values[18] = v1;
    values[19] = v1;
    v12 = (void *)*MEMORY[0x1E0CED178];
    keys[20] = CFSTR("NegotiationDetails");
    keys[21] = v12;
    values[20] = v1;
    values[21] = v1;
    keys[22] = CFSTR("UsingCellular");
    keys[23] = CFSTR("CommandLineParametersExtraOptions");
    values[22] = v1;
    values[23] = v1;
    v13 = (void *)*MEMORY[0x1E0CECFC0];
    keys[24] = *(void **)MEMORY[0x1E0CEDD18];
    keys[25] = v13;
    values[24] = v1;
    values[25] = v1;
    keys[26] = CFSTR("FaceRect");
    values[26] = v1;
    qword_1EF139300 = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 27, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!qword_1EF139300)
      FigSignalErrorAt();
    CFRelease(v2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t sub_1B6897C5C(uint64_t a1, uint64_t a2, void *key, int a4, const void *a5, unsigned int *a6, uint64_t a7, _DWORD *a8)
{
  _DWORD *v15;
  uint64_t v16;
  uint64_t valuePtr;

  if (!*(_BYTE *)(a1 + 6296))
  {
    if (!a2 || !**(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 5176) + 128))
      return 0;
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 5200), key))
    {
LABEL_9:
      --*(_QWORD *)(a1 + 5152);
      VTEncoderSessionDequeueDecodeTimeStamp();
      VTEncoderSessionEmitEncodedFrame();
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 5200), key);
      return 0;
    }
LABEL_11:
    valuePtr = 0;
    CFNumberGetValue((CFNumberRef)key, kCFNumberSInt64Type, &valuePtr);
    CFLog();
    return 4294967246;
  }
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 5200), key))
    goto LABEL_11;
  v15 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 5176) + 128);
  if (*v15 || v15[2])
    goto LABEL_9;
  if (a4 || !*a8)
  {
    v16 = 4294958327;
    CFLog();
  }
  else
  {
    v16 = sub_1B6897E44(a1, a5, *a6, a7, key);
    if ((_DWORD)v16)
      CFLog();
  }
  return v16;
}

uint64_t sub_1B6897E44(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4, void *key)
{
  char *Value;
  OpaqueCMBlockBuffer *v12;
  size_t v13;
  uint64_t v14;
  const __CFAllocator *v15;
  uint64_t v16;
  CMTimeEpoch v17;
  uint64_t v18;
  uint64_t DataPointer;
  const __CFArray *SampleAttachmentsArray;
  __CFDictionary *ValueAtIndex;
  __CFDictionary *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  const void **v28;
  const void **v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float v38;
  int v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  const void **v46;
  CFNumberRef v47;
  CFNumberRef v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  BOOL v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFArrayRef v60;
  CFArrayRef v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int valuePtr;
  char *dataPointerOut;
  CFTypeRef cf;
  CMBlockBufferRef dataBuffer;
  size_t dataLength;
  float v82;
  CMSampleTimingInfo values;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 5184))
    return FigSignalErrorAt();
  cf = 0;
  dataBuffer = 0;
  Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 5200), key);
  if (Value)
  {
    memset(&values, 0, sizeof(values));
    *(double *)&dataPointerOut = 0.0;
    if (a2)
    {
      v12 = 0;
      v13 = a3;
    }
    else
    {
      v12 = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 5176)
                                                                         + 208120)
                                                             + 152));
      v13 = CMBlockBufferGetDataLength(v12);
    }
    dataLength = v13;
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v13, *(CFAllocatorRef *)(a1 + 5192), 0, 0, v13, 1u, &dataBuffer);
    if ((_DWORD)v16)
    {
      v14 = v16;
      CFLog();
      goto LABEL_15;
    }
    values.duration.epoch = *((_QWORD *)Value + 7);
    *(_OWORD *)&values.duration.value = *(_OWORD *)(Value + 40);
    v17 = *((_QWORD *)Value + 4);
    *(_OWORD *)&values.presentationTimeStamp.value = *((_OWORD *)Value + 1);
    values.presentationTimeStamp.epoch = v17;
    VTEncoderSessionDequeueDecodeTimeStamp();
    v18 = CMSampleBufferCreate(v15, dataBuffer, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 8), 1, 1, &values, 1, &dataLength, (CMSampleBufferRef *)&cf);
    if ((_DWORD)v18)
    {
      v14 = v18;
LABEL_14:
      CFLog();
      goto LABEL_15;
    }
    DataPointer = CMBlockBufferGetDataPointer(dataBuffer, 0, 0, 0, &dataPointerOut);
    if ((_DWORD)DataPointer)
    {
      v14 = DataPointer;
      goto LABEL_14;
    }
    if (a2)
    {
      memcpy(dataPointerOut, a2, a3);
    }
    else
    {
      if (!v12)
      {
        v14 = 4294958327;
        goto LABEL_14;
      }
      v26 = CMBlockBufferCopyDataBytes(v12, 0, dataLength, dataPointerOut);
      if ((_DWORD)v26)
      {
        v14 = v26;
        goto LABEL_14;
      }
    }
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)cf, 1u);
    ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    v22 = ValueAtIndex;
    if (a4)
    {
      v23 = *(unsigned __int8 *)(a4 + 3);
      v71 = *(unsigned __int8 *)(a4 + 4);
      v72 = *(_BYTE *)(a4 + 5) == 0;
      v24 = *(unsigned __int8 *)(a4 + 6);
      v25 = *(unsigned __int8 *)(a4 + 2);
    }
    else
    {
      v71 = 0;
      v72 = 0;
      v24 = 0;
      v25 = 0;
      v23 = 0;
    }
    v27 = *(_DWORD *)(a1 + 5048);
    v28 = (const void **)MEMORY[0x1E0C9AE50];
    v29 = (const void **)MEMORY[0x1E0C9AE40];
    switch(v27)
    {
      case 39:
LABEL_31:
        v69 = v25;
        v70 = v24;
        v76 = -1;
        valuePtr = 0;
        v74 = 0;
        v75 = 0;
        v82 = 0.0;
        dataLength = 0;
        *(double *)&dataPointerOut = -1.0;
        v68 = v23;
        if (a4)
        {
          v30 = *(_DWORD *)(a4 + 92);
          v31 = *(unsigned __int8 *)(a4 + 7);
          v32 = *(unsigned __int8 *)(a4 + 8);
          v76 = *(char *)(a4 + 9);
          valuePtr = v30;
          v33 = *(unsigned __int8 *)(a4 + 10);
          v34 = *(unsigned __int8 *)(a4 + 11);
          LODWORD(v75) = *(unsigned __int8 *)(a4 + 96);
          HIDWORD(v75) = v33;
          v35 = *(_DWORD *)(a4 + 100);
          LODWORD(v74) = *(_DWORD *)(a4 + 104);
          HIDWORD(v74) = v35;
          v67 = v74;
          v37 = *(float *)(a4 + 64);
          v36 = *(float *)(a4 + 68);
          dataLength = __PAIR64__(LODWORD(v36), LODWORD(v37));
          v38 = *(float *)(a4 + 72);
          v82 = v38;
          *(double *)&dataPointerOut = *(float *)(a4 + 12);
        }
        else
        {
          v67 = 0;
          v35 = 0;
          v31 = 0;
          v32 = 0;
          v34 = 0;
          v38 = 0.0;
          v36 = 0.0;
          v37 = 0.0;
        }
        v40 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        if (v40)
        {
          v41 = v40;
          CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CEDA80], v40);
          CFRelease(v41);
        }
        if (v31)
          CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CEDA98], key);
        if (v32)
          CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CEDA90], (const void *)*MEMORY[0x1E0C9AE50]);
        v42 = CFNumberCreate(0, kCFNumberDoubleType, &dataPointerOut);
        if (v42)
        {
          v43 = v42;
          CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CEDA50], v42);
          CFRelease(v43);
        }
        v28 = (const void **)MEMORY[0x1E0C9AE50];
        if (v76 != -1 && SHIDWORD(v75) >= 1)
        {
          v44 = CFNumberCreate(v15, kCFNumberSInt32Type, &v76);
          if (v44)
          {
            v45 = v44;
            CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CEDA60], v44);
            CFRelease(v45);
          }
          v46 = (const void **)MEMORY[0x1E0C9AE40];
          if (v34 == 1)
            v46 = v28;
          CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CEDA68], *v46);
          v47 = CFNumberCreate(v15, kCFNumberSInt32Type, (char *)&v75 + 4);
          if (v47)
          {
            v48 = v47;
            CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CEDA70], v47);
            CFRelease(v48);
          }
        }
        v49 = CFNumberCreate(v15, kCFNumberSInt32Type, &v75);
        if (v49)
        {
          v50 = v49;
          CFDictionarySetValue(v22, CFSTR("InLowFrameRateMode"), v49);
          CFRelease(v50);
        }
        v73 = *(_BYTE *)(a1 + 48) == 0;
        v51 = CFNumberCreate(0, kCFNumberSInt32Type, &v73);
        v25 = v69;
        if (v51)
        {
          v52 = v51;
          CFDictionarySetValue(v22, CFSTR("EncoderMode"), v51);
          CFRelease(v52);
        }
        if (*(_BYTE *)(a1 + 742))
          CFDictionarySetValue(v22, CFSTR("RequireFrameQueueFlush"), *v28);
        if (*(_BYTE *)(a1 + 741))
          CFDictionarySetValue(v22, CFSTR("IsIdleEncodedEnough"), *v28);
        v53 = v35 < 1;
        v29 = (const void **)MEMORY[0x1E0C9AE40];
        if (v53 || v67 < 1)
          goto LABEL_74;
        v54 = CFNumberCreate(v15, kCFNumberSInt32Type, (char *)&v74 + 4);
        v55 = CFNumberCreate(v15, kCFNumberSInt32Type, &v74);
        v56 = v55;
        if (v54 && v55)
        {
          CFDictionarySetValue(v22, CFSTR("VRAWidth"), v54);
          CFDictionarySetValue(v22, CFSTR("VRAHeight"), v56);
        }
        else if (!v54)
        {
          goto LABEL_72;
        }
        CFRelease(v54);
LABEL_72:
        if (v56)
          CFRelease(v56);
LABEL_74:
        if (v37 > 0.0 || v36 > 0.0 || v38 > 0.0)
        {
          v57 = CFNumberCreate(0, kCFNumberFloat32Type, &dataLength);
          values.duration.value = (CMTimeValue)v57;
          v58 = CFNumberCreate(0, kCFNumberFloat32Type, (char *)&dataLength + 4);
          *(_QWORD *)&values.duration.timescale = v58;
          v59 = CFNumberCreate(0, kCFNumberFloat32Type, &v82);
          values.duration.epoch = (CMTimeEpoch)v59;
          if (v57 && v58 && v59)
          {
            v60 = CFArrayCreate(v15, (const void **)&values, 3, MEMORY[0x1E0C9B378]);
            if (v60)
            {
              v61 = v60;
              CFDictionarySetValue(v22, CFSTR("PSNRArray"), v60);
              CFRelease(v61);
            }
            CFRelease((CFTypeRef)values.duration.value);
            CFRelease(*(CFTypeRef *)&values.duration.timescale);
            CFRelease((CFTypeRef)values.duration.epoch);
          }
          v29 = (const void **)MEMORY[0x1E0C9AE40];
        }
        v24 = v70;
        v23 = v68;
        break;
      case 20:
        if (a4)
          goto LABEL_37;
        break;
      case 1:
        goto LABEL_31;
      default:
        if (a4 && v27 == 38)
        {
LABEL_37:
          if (*(_BYTE *)(a4 + 7))
          {
            v39 = v23;
            CFDictionarySetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CEDA98], key);
            v23 = v39;
          }
        }
        break;
    }
    if (!v23)
    {
      v62 = *v28;
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CA2620], *v28);
      if (v71)
        CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CA2628], v62);
    }
    if (v72)
      CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CA2618], *v29);
    v63 = (const void *)*MEMORY[0x1E0CA25C8];
    if (v25)
    {
      v64 = *v29;
      CFDictionarySetValue(v22, v63, *v29);
      v65 = *v28;
    }
    else
    {
      v65 = *v28;
      CFDictionarySetValue(v22, v63, *v28);
      v64 = *v29;
    }
    if (v24)
      v66 = v65;
    else
      v66 = v64;
    CFDictionarySetValue(v22, (const void *)*MEMORY[0x1E0CA25E0], v66);
    v14 = 0;
    ++*(_QWORD *)(a1 + 5168);
    goto LABEL_15;
  }
  CFLog();
  v14 = 4294967246;
LABEL_15:
  VTEncoderSessionEmitEncodedFrame();
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 5200), key);
  if (dataBuffer)
    CFRelease(dataBuffer);
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t sub_1B6898708(_DWORD *a1, int *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v19;

  v6 = a1[1285];
  *(_WORD *)a3 = v6;
  v7 = a1[1286];
  *(_WORD *)(a3 + 4) = v7;
  *(_WORD *)(a3 + 2) = a1[1286];
  *(_BYTE *)(a3 + 624) = 0;
  *(_BYTE *)(a3 + 671) = 0;
  v8 = sub_1B6898818((__int16)v6, (__int16)v7);
  sub_1B6898C14(a1[1285], a1[1286], a3, v8, v9, v10);
  v11 = a1[1271];
  if (v11)
  {
    *(_DWORD *)(a3 + 40) = v11;
    *(_DWORD *)(a3 + 84) = a1[1271];
  }
  v12 = a1[1267];
  if (v12)
  {
    *(_DWORD *)(a3 + 304) = v12;
    *(_WORD *)(a3 + 326) = 0;
  }
  v13 = a1[1265];
  if (v13)
    LOBYTE(v13) = *(_BYTE *)(a3 + 236);
  else
    *(_BYTE *)(a3 + 236) = 0;
  *(_BYTE *)(a3 + 237) = v13;
  result = sub_1B6898B78((uint64_t)a1, a2, a3);
  v15 = *(_DWORD *)(a3 + 304);
  if (v15 == 1)
  {
    v16 = 1;
  }
  else
  {
    v17 = *(_DWORD *)(a3 + 300);
    if (v17 < v15 && v17 > 1)
      v19 = *(_DWORD *)(a3 + 300);
    else
      v19 = *(_DWORD *)(a3 + 304);
    if (v15 == 0x800000)
      v15 = 31;
    else
      v15 = v19;
    if (v17 == 1)
    {
      v15 = 1;
      v16 = 1;
    }
    else
    {
      v16 = 30;
    }
  }
  *(_DWORD *)(a3 + 84) = v15;
  *(_DWORD *)(a3 + 216) = v16;
  *(_DWORD *)(a3 + 220) = 1069547520;
  return result;
}

uint64_t sub_1B6898818(int a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  BOOL v7;
  BOOL v10;

  v2 = a2 * a1;
  if (a2 * a1 >= 4801)
  {
    if (v2 >= 0x6301)
    {
      if (v2 < 0xE1001)
        v4 = 6;
      else
        v4 = 7;
      if (v2 <= 0x4B000)
        v4 = 5;
      if (v2 >= 0x2B201)
        v5 = v4;
      else
        v5 = 4;
      if (v2 >= 0x18C01)
        v3 = v5;
      else
        v3 = 3;
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 1;
  }
  if (a2 > a1)
  {
    v7 = a2 == 256 || (a2 & 0xFFFFFFBF) == 128;
    if (a1 == 80 && v7)
    {
      return 8;
    }
    else
    {
      v10 = a2 == 384 || a2 == 512 || a2 == 256;
      if (a1 == 160 && v10)
      {
        return 9;
      }
      else if ((a2 == 720 || a2 == 480 || a2 == 960) && a1 == 320)
      {
        return 10;
      }
      else
      {
        return v3;
      }
    }
  }
  return v3;
}

uint64_t sub_1B6898918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  char *v11;
  int v13;
  _OWORD v14[32];
  char v15;
  uint64_t v16;

  v6 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v9 = v8;
  v10 = 0;
  v16 = *MEMORY[0x1E0C80C00];
  v11 = &v15;
  memset(v14, 0, sizeof(v14));
  do
  {
    *(_QWORD *)((char *)v14 + v10) = v11;
    v10 += 8;
    v11 += 300;
  }
  while (v10 != 512);
  v13 = 0;
  sub_1B6898A04(v6, v7, &v13, (uint64_t)v14);
  return sub_1B68F0B50(v13, (uint64_t)v14, v9);
}

uint64_t sub_1B6898A04(uint64_t result, unint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v4 = 0;
  v5 = 0;
  do
  {
    v6 = v5;
    v5 += 299;
    v7 = (v6 << 32) - 0x100000000;
    do
    {
      v8 = v6;
      v9 = *(unsigned __int8 *)(result + v6++);
      ++v5;
      v7 += 0x100000000;
    }
    while (v9 == 32 && v8 < a2);
    if (v8 >= a2)
      break;
    if (v4 == 63)
    {
      LODWORD(v4) = 64;
      break;
    }
    v11 = v7 >> 32;
    v12 = *(unsigned __int8 *)(result + v11);
    if (v12 == 32 || v11 >= a2)
    {
      v5 -= 300;
    }
    else
    {
      v14 = 0;
      v15 = *(_QWORD *)(a4 + 8 * v4);
      while (1)
      {
        *(_BYTE *)(v15 + v14) = v12;
        if (v14 == 299)
          break;
        v16 = v14 + 1;
        *(_BYTE *)(v15 + v14 + 1) = 0;
        v12 = *(unsigned __int8 *)(result + v6 + v14);
        if (v12 == 32 || v6 + v14++ >= a2)
        {
          v5 = v6 + v16 - 1;
          break;
        }
      }
      v11 = v5;
    }
    ++v4;
  }
  while (v11 < a2);
  *a3 = v4;
  return result;
}

uint64_t sub_1B6898AD0(uint64_t result, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  char **v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;

  v5 = 0;
  v6 = a4 * (unint64_t)a3;
  v7 = &qword_1E6A176C0;
  while (v6 > *((unsigned int *)v7 - 3) || *v7 < v6 * a5)
  {
    ++v5;
    v7 += 4;
    if (v5 == 16)
    {
      v8 = 0;
      goto LABEL_7;
    }
  }
  v8 = &(&off_1E6A176A8)[4 * v5];
LABEL_7:
  v9 = 0;
  v10 = &dword_1E6A178B0;
  while (1)
  {
    v11 = *v10;
    v10 += 6;
    if (v11 == a2)
      break;
    if (++v9 == 8)
      return result;
  }
  if (v8)
  {
    v12 = *((_DWORD *)v8 + 4) * *((_DWORD *)&off_1E6A176A8 + 6 * v9 + 131);
    if (v12 >= (int)result)
      return result;
    else
      return v12;
  }
  return result;
}

uint64_t sub_1B6898B78(uint64_t result, int *a2, uint64_t a3)
{
  double v3;
  float v4;
  float v5;
  int v6;
  int v7;
  char v8;

  *a2 = *(_DWORD *)(a3 + 52);
  a2[7] = *(_DWORD *)(a3 + 60);
  v3 = *(double *)(result + 752);
  if (v3 > 0.0)
  {
    v4 = v3;
    *(float *)(a3 + 60) = v4;
    v5 = *(double *)(result + 752);
    *((float *)a2 + 7) = v5;
  }
  v6 = *(_DWORD *)(result + 760);
  if (v6 < 1)
  {
    v7 = *a2;
  }
  else
  {
    *(_DWORD *)(a3 + 52) = v6;
    v7 = *(_DWORD *)(result + 760);
    *a2 = v7;
  }
  if (v7 < 1 || *((float *)a2 + 7) <= 0.0)
  {
    v8 = 0;
    goto LABEL_12;
  }
  if (*(_DWORD *)(result + 5048) != 7 || *(_BYTE *)(a3 + 211) != 2)
  {
    v8 = 32;
LABEL_12:
    *(_BYTE *)(a3 + 211) = v8;
  }
  *(_DWORD *)(a3 + 228) = 437918234;
  return result;
}

uint64_t sub_1B6898C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char __str[4096];
  uint64_t v18;

  v6 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v10 = v9;
  v18 = *MEMORY[0x1E0C80C00];
  if ((v8 - 1) > 8)
    v11 = "-20 1500000 ";
  else
    v11 = off_1E6A17C38[v8 - 1];
  snprintf(__str, 0x1000uLL, " %d %d -133 1 -30 2 -74 -22 15 -111 2 -101 s %s", v6, v7, v11);
  v12 = strlen(__str);
  return sub_1B6898918((uint64_t)__str, v12, v10, v13, v14, v15);
}

void sub_1B6898CD4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  int v8;
  CFNumberRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t valuePtr;

  valuePtr = a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(const void **)(v5 + 10576);
  v7 = *(_QWORD *)(v5 + 10592);
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 5176) + 128) + 8);
  v9 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 5200), v9))
    goto LABEL_4;
  if (a2
    || !*(_BYTE *)(a1 + 6296)
    && !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 5176) + 208128)
    && sub_1B6898F50(a1, v10, v11, v12, v13, v14))
  {
    goto LABEL_3;
  }
  if (v8)
  {
    --*(_QWORD *)(a1 + 5152);
    VTEncoderSessionDequeueDecodeTimeStamp();
    VTEncoderSessionEmitEncodedFrame();
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 5200), v9);
    goto LABEL_9;
  }
  if (!*(_DWORD *)(v5 + 10600))
  {
LABEL_3:
    CFLog();
    VTEncoderSessionDequeueDecodeTimeStamp();
    VTEncoderSessionEmitEncodedFrame();
    goto LABEL_9;
  }
  if (sub_1B6897E44(a1, v6, *(_DWORD *)(v5 + 10584), v7, v9))
LABEL_4:
    CFLog();
LABEL_9:
  if (v9)
    CFRelease(v9);
}

intptr_t sub_1B6898E90(uint64_t a1, int a2, CFDictionaryRef theDict)
{
  const __CFNumber *Value;

  if (a2)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 6276) = 0;
  }
  else
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D475F8]);
    CFNumberGetValue(Value, kCFNumberSInt32Type, (void *)(*(_QWORD *)(a1 + 32) + 6276));
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 6280));
}

const __CFNumber *sub_1B6898EEC(const __CFDictionary *a1, const void *a2, CFNumberType a3, void *a4)
{
  const __CFNumber *result;
  const __CFNumber *v7;
  CFTypeID v8;

  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v7 = result;
    v8 = CFGetTypeID(result);
    result = (const __CFNumber *)CFNumberGetTypeID();
    if ((const __CFNumber *)v8 == result)
      return (const __CFNumber *)CFNumberGetValue(v7, a3, a4);
  }
  return result;
}

uint64_t sub_1B6898F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned __int8 *v16;
  int v18;
  __int16 VideoFormatDescription;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  _DWORD *v54;
  unsigned int v55;
  unsigned int v56;
  _DWORD *v57;
  unint64_t v58;
  _DWORD *v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  BOOL v67;
  _BYTE *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  int v75;
  _DWORD *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  _DWORD *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v92;
  int v93;
  _DWORD *v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  int v101;
  _DWORD *v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  int v109;
  _DWORD *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  int v128;
  _DWORD *v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  _DWORD *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t v139;
  int v140;
  _DWORD *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unint64_t v146;
  int v147;
  _DWORD *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  _DWORD *v153;
  unsigned int v154;
  unsigned int v155;
  char v156;
  uint64_t v157;
  unsigned int v158;
  unint64_t v159;
  unsigned int v160;
  _DWORD *v161;
  int v162;
  _DWORD *v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unint64_t v168;
  int v169;
  _DWORD *v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unint64_t v176;
  int v177;
  _DWORD *v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unint64_t v183;
  int v184;
  _DWORD *v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  _DWORD *v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  _DWORD *v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  uint64_t v208;
  unsigned int v209;
  unint64_t v210;
  unsigned int v211;
  _DWORD *v212;
  uint64_t v213;
  unsigned int v214;
  char v215;
  int v216;
  _DWORD *v217;
  unsigned int v218;
  unsigned int v219;
  unint64_t v220;
  int v221;
  _DWORD *v222;
  _DWORD *v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int v230;
  char v231;
  uint64_t v232;
  int v233;
  _DWORD *v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unint64_t v239;
  int v240;
  _DWORD *v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int v249;
  unint64_t v250;
  unsigned int v251;
  _DWORD *v252;
  _BYTE *v253;
  unsigned int v254;
  char v255;
  int v256;
  _DWORD *v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unint64_t v262;
  int v263;
  _DWORD *v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unint64_t v268;
  int v269;
  _DWORD *v270;
  unsigned int v271;
  char v272;
  uint64_t v273;
  int v274;
  unsigned int *v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unint64_t v282;
  unsigned int v283;
  unsigned int *v284;
  int v285;
  unsigned int *v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  char v290;
  uint64_t v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  char v295;
  uint64_t v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unint64_t v307;
  unsigned int v308;
  unsigned int *v309;
  int v310;
  _DWORD *v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  char v315;
  uint64_t v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  char v320;
  uint64_t v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unint64_t v329;
  int v330;
  _DWORD *v331;
  _DWORD *v332;
  unint64_t v333;
  _DWORD *v334;
  _DWORD *v335;
  unsigned int v336;
  uint64_t v337;
  unsigned int v338;
  char v339;
  uint64_t v340;
  int v341;
  _DWORD *v342;
  unsigned int v343;
  unsigned int v344;
  char v345;
  uint64_t v346;
  unsigned int v347;
  unint64_t v348;
  _DWORD *v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  unint64_t v353;
  int v354;
  _DWORD *v355;
  unsigned int v356;
  unsigned int v357;
  unint64_t v358;
  int v359;
  _DWORD *v360;
  int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  unint64_t v365;
  int v366;
  _DWORD *v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  unint64_t v372;
  int v373;
  _DWORD *v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  unint64_t v379;
  int v380;
  _DWORD *v381;
  unsigned int v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  unint64_t v386;
  int v387;
  _DWORD *v388;
  unsigned int v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  _BYTE *v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  __int16 v400;
  uint64_t v401;
  unsigned int v402;
  uint64_t v403;
  int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unint64_t v408;
  int v409;
  _DWORD *v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  unint64_t v415;
  int v416;
  _DWORD *v417;
  unsigned int v418;
  unsigned int v419;
  unint64_t v420;
  int v421;
  _DWORD *v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unint64_t v426;
  unsigned int v427;
  _DWORD *v428;
  int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unint64_t v433;
  int v434;
  _DWORD *v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  unint64_t v441;
  int v442;
  _DWORD *v443;
  unsigned int v444;
  unsigned int v445;
  _DWORD *v446;
  unsigned int v447;
  unint64_t v448;
  int v449;
  _DWORD *v450;
  unsigned int v451;
  int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unint64_t v456;
  int v457;
  _DWORD *v458;
  unsigned int v459;
  int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  unint64_t v464;
  int v465;
  _DWORD *v466;
  unsigned int v467;
  int v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int v471;
  unint64_t v472;
  int v473;
  _DWORD *v474;
  unsigned int v475;
  unsigned int v476;
  _DWORD *v477;
  unsigned int v478;
  unint64_t v479;
  _DWORD *v480;
  unsigned int v481;
  int v482;
  _DWORD *v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  _DWORD *v487;
  unsigned int v488;
  unsigned int v489;
  _DWORD *v490;
  int v491;
  int v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int v495;
  unsigned int v496;
  unsigned int v497;
  _BYTE *v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  _BYTE *v502;
  uint64_t v503;
  __int16 v504;
  uint64_t v505;
  uint64_t v506;
  unsigned int **v507;
  const __CFAllocator *v508;
  CFDataRef v509;
  CFDataRef v510;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v512;
  __CFDictionary *v513;
  int v514;
  CFDataRef v515;
  CFDataRef v516;
  __CFDictionary *v517;
  unsigned int **p_dst;
  unsigned int **v520;
  unsigned int v521;
  unsigned __int8 v522;
  unsigned int *__dst;
  int v524;
  int v525;
  unsigned int *v526;
  char *v527;
  unsigned int v528;
  char v529;
  _BYTE v530[3000];
  _BYTE v531[1500];
  UInt8 v532[9600];
  _DWORD v533[16];
  uint64_t v534;

  v6 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v534 = *MEMORY[0x1E0C80C00];
  bzero(v532, 0x2580uLL);
  bzero(v531, 0x5DCuLL);
  bzero(v530, 0xBB8uLL);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v7 + 5176);
  v9 = (unsigned __int8 *)(v8 + 119152);
  v10 = *(unsigned __int8 *)(v8 + 119152);
  v11 = v8 + 1880 * *(unsigned __int8 *)(v8 + 119152) + 57108;
  v12 = *(unsigned __int8 *)(v7 + 24);
  *(_DWORD *)v11 = v12;
  *(_DWORD *)(v11 + 4) = *(unsigned __int8 *)(v7 + 25);
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v7 + 26);
  *(_BYTE *)(v11 + 9) = *(_BYTE *)(v7 + 27);
  *(_BYTE *)(v11 + 10) = *(_BYTE *)(v7 + 28);
  *(_BYTE *)(v11 + 11) = *(_BYTE *)(v7 + 29);
  *(_BYTE *)(v11 + 12) = *(_BYTE *)(v7 + 30);
  *(_BYTE *)(v11 + 13) = *(_BYTE *)(v7 + 31);
  *(_BYTE *)(v11 + 1338) = *(_BYTE *)(v7 + 282);
  *(_BYTE *)(v11 + 1336) = *(_BYTE *)(v7 + 398) == 0;
  *(_BYTE *)(v11 + 18) = *(_BYTE *)(v7 + 399) != 1;
  if (!*(_BYTE *)(v7 + 4814) && !*(_BYTE *)(v7 + 4815))
    goto LABEL_17;
  v13 = *(_QWORD *)(v8 + 208120);
  v14 = *(unsigned int *)(v13 + 200);
  if (!(_DWORD)v14)
    goto LABEL_17;
  v15 = *(unsigned int **)(v13 + 192);
  __dst = v15;
  v526 = v15;
  v528 = bswap32(*v15);
  v529 = 0;
  v527 = (char *)v15 + v14;
  v524 = v14;
  v525 = v14;
  if (!*((_BYTE *)v15 + v14 - 1))
  {
    v16 = (unsigned __int8 *)v15 + v14 - 2;
    do
    {
      if (!(_DWORD)v14)
        break;
      LODWORD(v14) = v14 - 1;
    }
    while (!*v16--);
    v525 = v14;
  }
  v18 = sub_1B68CAF64((uint64_t)&__dst, (char *)v11);
  VideoFormatDescription = v18;
  v20 = *(_DWORD *)(v7 + 4852);
  if (v20 == 2)
    goto LABEL_12;
  if (v20 == 1)
  {
    v21 = v8 + 1880 * v10;
    *(_WORD *)(v21 + 58537) = 257;
    *(_OWORD *)(v21 + 58540) = xmmword_1B6917C20;
    *(_DWORD *)(v21 + 58556) = 0;
LABEL_12:
    *(_DWORD *)(v8 + 1880 * v10 + 58560) = 4;
  }
  if (v18)
  {
    if ((_WORD)v18)
      return VideoFormatDescription;
    v22 = 0;
    goto LABEL_158;
  }
  v12 = *(_DWORD *)v11;
LABEL_17:
  if (v12 == 66 && *(_BYTE *)(v11 + 8) == 1 && *(_BYTE *)(v11 + 9) == 1 && *(_BYTE *)(v11 + 10) == 1)
  {
    v23 = v8 + 1880 * v10;
    v24 = (_DWORD *)(v23 + 57108);
    *(_BYTE *)(v23 + 58464) = 1;
    v23 += 58468;
    *(_WORD *)(v23 + 69) = 257;
    *(_OWORD *)(v23 + 72) = xmmword_1B6917C30;
    v24[362] = 0;
    v24[363] = v24[330];
  }
  v25 = *v9;
  v26 = v8 + 1880 * *v9 + 57108;
  p_dst = &__dst;
  v520 = &__dst;
  v521 = 0;
  v522 = 0;
  LODWORD(__dst) = 39;
  if (*(_DWORD *)v26 == 101)
    v27 = 100;
  else
    v27 = *(_DWORD *)v26;
  *(_DWORD *)((char *)&__dst + 1) = v27;
  v28 = *(unsigned __int8 *)(v26 + 8);
  *(_DWORD *)((char *)&__dst + 2) = (v28 & 1) << 7;
  v29 = (v28 << 31) | (*(unsigned __int8 *)(v26 + 9) << 30);
  *(_DWORD *)((char *)&__dst + 2) = HIBYTE(v29);
  v30 = v29 | (*(unsigned __int8 *)(v26 + 10) << 29);
  *(_DWORD *)((char *)&__dst + 2) = HIBYTE(v30);
  v31 = v30 | (*(unsigned __int8 *)(v26 + 11) << 28);
  *(_DWORD *)((char *)&__dst + 2) = HIBYTE(v31);
  v32 = v31 | (*(unsigned __int8 *)(v26 + 12) << 27);
  *(_DWORD *)((char *)&__dst + 2) = HIBYTE(v32);
  *(_DWORD *)((char *)&__dst + 2) = (v32 | (*(unsigned __int8 *)(v26 + 13) << 26)) >> 24;
  *(_DWORD *)((char *)&__dst + 3) = *(unsigned __int8 *)(v26 + 4);
  v33 = *(unsigned __int8 *)(v26 + 17) + 1;
  v34 = __clz(v33);
  v35 = (v33 - (0x80000000 >> v34)) | (0x80000000 >> v34);
  v34 *= 2;
  v36 = v35 << (v34 - 31);
  HIDWORD(__dst) = bswap32(v36);
  v34 ^= 0x3Fu;
  v37 = v34 & 7;
  v38 = (_DWORD *)((char *)&__dst + (v34 >> 3) + 4);
  v39 = v36 << (v34 & 0x38);
  v40 = *(_DWORD *)v26 - 100;
  if (v40 <= 0x2C && ((1 << v40) & 0x100000400403) != 0)
  {
    v41 = v8 + 1880 * v25;
    v42 = *(unsigned __int8 *)(v41 + 57126) + 1;
    v43 = __clz(v42);
    v44 = (((v42 - (0x80000000 >> v43)) | (0x80000000 >> v43)) << (2 * v43 - v37 - 31)) | v39;
    *v38 = bswap32(v44);
    v45 = v37 - 2 * v43 + 63;
    v46 = v45 & 6;
    v47 = (_DWORD *)((char *)v38 + (v45 >> 3));
    v48 = v44 << (v45 & 0xF8);
    if (*(_BYTE *)(v41 + 57126) == 3)
    {
      v48 |= *(unsigned __int8 *)(v8 + 1880 * v25 + 57127) << (v46 ^ 0x1F);
      *v47 = bswap32(v48);
      v46 |= 1u;
    }
    v49 = *(unsigned __int8 *)(v8 + 1880 * v25 + 57128) + 1;
    v50 = __clz(v49);
    v51 = (((v49 - (0x80000000 >> v50)) | (0x80000000 >> v50)) << (2 * v50 - v46 - 31)) | v48;
    *v47 = bswap32(v51);
    v52 = v46 - 2 * v50 + 63;
    v53 = v52 & 7;
    v54 = (_DWORD *)((char *)v47 + (v52 >> 3));
    LODWORD(v52) = v51 << (v52 & 0xF8);
    v55 = *(unsigned __int8 *)(v8 + 1880 * v25 + 57129) + 1;
    v56 = __clz(v55);
    LODWORD(v52) = v52 | (((v55 - (0x80000000 >> v56)) | (0x80000000 >> v56)) << (2 * v56 - v53 - 31));
    *v54 = bswap32(v52);
    v57 = (_DWORD *)((char *)v54 + ((unint64_t)(v53 - 2 * v56 + 63) >> 3));
    LODWORD(v52) = (*(unsigned __int8 *)(v8 + 1880 * v25 + 57130) << ((v53 - 2 * v56 + 63) & 7 ^ 0x1F)) | ((_DWORD)v52 << ((v53 - 2 * v56 + 63) & 0xF8));
    *v57 = bswap32(v52);
    v58 = (((_BYTE)v53 - 2 * (_BYTE)v56 + 63) & 7u) + 1;
    v59 = (_DWORD *)((char *)v57 + (v58 >> 3));
    LODWORD(v58) = ((_DWORD)v52 << (v58 & 8)) | (*(unsigned __int8 *)(v8 + 1880 * v25 + 57131) << (v58 & 7 ^ 0x1F));
    *v59 = bswap32(v58);
    v60 = (((((_BYTE)v53 - 2 * (_BYTE)v56 + 63) & 7) + 1) & 7) + 1;
    v37 = v60 & 7;
    v38 = (_DWORD *)((char *)v59 + (v60 >> 3));
    v39 = (_DWORD)v58 << (v60 & 8);
    if (*(_BYTE *)(v8 + 1880 * v25 + 57131))
    {
      v61 = 0;
      v62 = -6;
      do
      {
        v63 = v8 + 1880 * v25 + v61;
        v64 = (*(unsigned __int8 *)(v63 + 57132) << ~(_BYTE)v37) | v39;
        *v38 = bswap32(v64);
        v65 = v37 + 1;
        v66 = (v37 + 1) >> 3;
        v67 = v37 >= 0x1F;
        v37 = (v37 + 1) & 7;
        v38 = (_DWORD *)((char *)v38 + v66);
        v39 = v64 << (v65 & 0xF8);
        if (v67)
          v39 = 0;
        if (*(_BYTE *)(v63 + 57132))
        {
          if (v61 > 5)
          {
            v70 = 0;
            v520 = (unsigned int **)v38;
            v521 = v39;
            v522 = v37;
            do
            {
              *((_BYTE *)v533 + (unsigned __int16)word_1B693BF90[v70]) = *(_BYTE *)(v8
                                                                                  + 1880 * v25
                                                                                  + 57244
                                                                                  + ((unint64_t)v62 << 6)
                                                                                  + v70);
              ++v70;
            }
            while (v70 != 64);
            v68 = v533;
            v69 = 64;
          }
          else
          {
            v520 = (unsigned int **)v38;
            v521 = v39;
            v522 = v37;
            v68 = (_BYTE *)(v8 + 1880 * v25 + 16 * v61 + 57148);
            v69 = 16;
          }
          sub_1B68BDDF0((uint64_t)&p_dst, v68, v69);
          v38 = v520;
          v39 = v521;
          v37 = v522;
        }
        ++v61;
        ++v62;
      }
      while (v61 != 8);
    }
  }
  v71 = *(_DWORD *)(v8 + 1880 * v25 + 57380) + 1;
  v72 = __clz(v71);
  v73 = (((v71 - (0x80000000 >> v72)) | (0x80000000 >> v72)) << (2 * v72 - v37 - 31)) | v39;
  *v38 = bswap32(v73);
  v74 = v37 - 2 * v72 + 63;
  v75 = v74 & 7;
  v76 = (_DWORD *)((char *)v38 + (v74 >> 3));
  v77 = v73 << (v74 & 0xF8);
  if (v74 >= 0x20)
    v78 = 0;
  else
    v78 = v77;
  v79 = *(unsigned __int8 *)(v8 + 1880 * v25 + 57384) + 1;
  v80 = __clz(v79);
  v81 = v78 | (((v79 - (0x80000000 >> v80)) | (0x80000000 >> v80)) << (2 * v80 - v75 - 31));
  *v76 = bswap32(v81);
  v82 = v75 - 2 * v80 + 63;
  v83 = v82 & 7;
  v84 = (_DWORD *)((char *)v76 + (v82 >> 3));
  v85 = v81 << (v82 & 0xF8);
  if (*(_BYTE *)(v8 + 1880 * v25 + 57384) == 1)
  {
    v91 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 57392) << (v83 ^ 0x1F)) | v85;
    *v84 = bswap32(v91);
    v92 = (v83 + 1);
    v93 = v92 & 7;
    v94 = (_DWORD *)((char *)v84 + (v92 >> 3));
    v95 = v91 << (v92 & 8);
    v96 = *(_DWORD *)(v8 + 1880 * v25 + 57396);
    v97 = 2 * v96;
    if (v96 <= 0)
      v97 = 1 - 2 * v96;
    v98 = __clz(v97);
    v99 = (((v97 - (0x80000000 >> v98)) | (0x80000000 >> v98)) << (2 * v98 - v93 - 31)) | v95;
    *v94 = bswap32(v99);
    v100 = v93 - 2 * v98 + 63;
    v101 = v100 & 7;
    v102 = (_DWORD *)((char *)v94 + (v100 >> 3));
    v103 = v99 << (v100 & 0xF8);
    if (v100 >= 0x20)
      v103 = 0;
    v104 = *(_DWORD *)(v8 + 1880 * v25 + 57400);
    if (v104 <= 0)
      v105 = 1 - 2 * v104;
    else
      v105 = 2 * v104;
    v106 = __clz(v105);
    v107 = v103 | (((v105 - (0x80000000 >> v106)) | (0x80000000 >> v106)) << (2 * v106 - v101 - 31));
    *v102 = bswap32(v107);
    v108 = v101 - 2 * v106 + 63;
    v109 = ((_BYTE)v101 - 2 * (_BYTE)v106 + 63) & 7;
    v110 = (_DWORD *)((char *)v102 + (v108 >> 3));
    v111 = v107 << (v108 & 0xF8);
    if (v108 >= 0x20)
      v111 = 0;
    v112 = *(_DWORD *)(v8 + 1880 * v25 + 57404) + 1;
    v113 = __clz(v112);
    v114 = v111 | (((v112 - (0x80000000 >> v113)) | (0x80000000 >> v113)) << (2 * v113 - v109 - 31));
    *v110 = bswap32(v114);
    v115 = v109 - 2 * v113 + 63;
    v84 = (_DWORD *)((char *)v110 + (v115 >> 3));
    v116 = v114 << (v115 & 0xF8);
    if (v115 >= 0x20)
      v85 = 0;
    else
      v85 = v116;
    v83 = v115 & 7;
    if (*(_DWORD *)(v8 + 1880 * v25 + 57404))
    {
      v117 = 0;
      do
      {
        v118 = *(_DWORD *)(v8 + 1880 * v25 + 57408 + 4 * v117);
        if (v118 <= 0)
          v119 = -2 * v118;
        else
          v119 = 2 * v118 - 1;
        v120 = v119 + 1;
        v121 = __clz(v120);
        v122 = (((v120 - (0x80000000 >> v121)) | (0x80000000 >> v121)) << (2 * v121 - v83 - 31)) | v85;
        *v84 = bswap32(v122);
        v123 = v83 - 2 * v121 + 63;
        v84 = (_DWORD *)((char *)v84 + (v123 >> 3));
        v85 = v122 << (v123 & 0xF8);
        if (v123 >= 0x20)
          v85 = 0;
        ++v117;
        v83 = v123 & 7;
      }
      while (v117 < *(unsigned int *)(v8 + 1880 * v25 + 57404));
    }
  }
  else if (!*(_BYTE *)(v8 + 1880 * v25 + 57384))
  {
    v86 = *(_DWORD *)(v8 + 1880 * v25 + 57388) + 1;
    v87 = __clz(v86);
    v88 = (((v86 - (0x80000000 >> v87)) | (0x80000000 >> v87)) << (2 * v87 - v83 - 31)) | v85;
    *v84 = bswap32(v88);
    v89 = v83 - 2 * v87 + 63;
    v83 = v89 & 7;
    v84 = (_DWORD *)((char *)v84 + (v89 >> 3));
    v90 = v88 << (v89 & 0xF8);
    if (v89 >= 0x20)
      v85 = 0;
    else
      v85 = v90;
  }
  v124 = *(_DWORD *)(v8 + 1880 * v25 + 58428) + 1;
  v125 = __clz(v124);
  v126 = (((v124 - (0x80000000 >> v125)) | (0x80000000 >> v125)) << (2 * v125 - v83 - 31)) | v85;
  *v84 = bswap32(v126);
  v127 = v83 - 2 * v125 + 63;
  v128 = v127 & 7;
  v129 = (_DWORD *)((char *)v84 + (v127 >> 3));
  v130 = v126 << (v127 & 0xF8);
  if (v127 >= 0x20)
    v131 = 0;
  else
    v131 = v130;
  v132 = v131 | (*(unsigned __int8 *)(v8 + 1880 * v25 + 58432) << (v128 ^ 0x1F));
  *v129 = bswap32(v132);
  v133 = (v128 + 1);
  v134 = ((_BYTE)v128 + 1) & 7;
  v135 = (_DWORD *)((char *)v129 + (v133 >> 3));
  v136 = v132 << (v133 & 8);
  LODWORD(v133) = *(_DWORD *)(v8 + 1880 * v25 + 58436) + 1;
  v137 = __clz(v133);
  v138 = v136 | ((((_DWORD)v133 - (0x80000000 >> v137)) | (0x80000000 >> v137)) << (2 * v137 - v134 - 31));
  *v135 = bswap32(v138);
  v139 = v134 - 2 * v137 + 63;
  v140 = ((_BYTE)v134 - 2 * (_BYTE)v137 + 63) & 7;
  v141 = (_DWORD *)((char *)v135 + (v139 >> 3));
  v142 = v138 << (v139 & 0xF8);
  if (v139 >= 0x20)
    v142 = 0;
  v143 = *(_DWORD *)(v8 + 1880 * v25 + 58440) + 1;
  v144 = __clz(v143);
  v145 = v142 | (((v143 - (0x80000000 >> v144)) | (0x80000000 >> v144)) << (2 * v144 - v140 - 31));
  *v141 = bswap32(v145);
  v146 = v140 - 2 * v144 + 63;
  v147 = ((_BYTE)v140 - 2 * (_BYTE)v144 + 63) & 7;
  v148 = (_DWORD *)((char *)v141 + (v146 >> 3));
  v149 = v145 << (v146 & 0xF8);
  if (v146 >= 0x20)
    v149 = 0;
  v150 = v149 | (*(unsigned __int8 *)(v8 + 1880 * v25 + 58444) << (v147 ^ 0x1F));
  *v148 = bswap32(v150);
  v151 = v147 + 1;
  v152 = v151 & 7;
  v153 = (_DWORD *)((char *)v148 + (v151 >> 3));
  v154 = v150 << (v151 & 8);
  if (!*(_BYTE *)(v8 + 1880 * v25 + 58444))
  {
    v155 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58445) << (v152 ^ 0x1F)) | v154;
    *v153 = bswap32(v155);
    v156 = v152 + 1;
    v157 = (v152 + 1) >> 3;
    v152 = (v152 + 1) & 7;
    v153 = (_DWORD *)((char *)v153 + v157);
    v154 = v155 << (v156 & 8);
  }
  v158 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58446) << (v152 ^ 0x1F)) | v154;
  *v153 = bswap32(v158);
  v159 = (v152 + 1);
  v160 = v159 & 7;
  v161 = (_DWORD *)((char *)v153 + (v159 >> 3));
  LODWORD(v159) = (v158 << (v159 & 8)) | (*(unsigned __int8 *)(v8 + 1880 * v25 + 58447) << (v159 & 7 ^ 0x1F));
  *v161 = bswap32(v159);
  v162 = ++v160 & 7;
  v163 = (_DWORD *)((char *)v161 + (v160 >> 3));
  v164 = (_DWORD)v159 << (v160 & 8);
  if (*(_BYTE *)(v8 + 1880 * v25 + 58447))
  {
    v165 = *(_DWORD *)(v8 + 1880 * v25 + 58448) + 1;
    v166 = __clz(v165);
    v167 = (((v165 - (0x80000000 >> v166)) | (0x80000000 >> v166)) << (2 * v166 - v162 - 31)) | v164;
    *v163 = bswap32(v167);
    v168 = v162 - 2 * v166 + 63;
    v169 = v168 & 7;
    v170 = (_DWORD *)((char *)v163 + (v168 >> 3));
    v171 = v167 << (v168 & 0xF8);
    if (v168 >= 0x20)
      v172 = 0;
    else
      v172 = v171;
    v173 = *(_DWORD *)(v8 + 1880 * v25 + 58452) + 1;
    v174 = __clz(v173);
    v175 = v172 | (((v173 - (0x80000000 >> v174)) | (0x80000000 >> v174)) << (2 * v174 - v169 - 31));
    *v170 = bswap32(v175);
    v176 = v169 - 2 * v174 + 63;
    v177 = ((_BYTE)v169 - 2 * (_BYTE)v174 + 63) & 7;
    v178 = (_DWORD *)((char *)v170 + (v176 >> 3));
    v179 = v175 << (v176 & 0xF8);
    if (v176 >= 0x20)
      v179 = 0;
    v180 = *(_DWORD *)(v8 + 1880 * v25 + 58456) + 1;
    v181 = __clz(v180);
    v182 = v179 | (((v180 - (0x80000000 >> v181)) | (0x80000000 >> v181)) << (2 * v181 - v177 - 31));
    *v178 = bswap32(v182);
    v183 = v177 - 2 * v181 + 63;
    v184 = ((_BYTE)v177 - 2 * (_BYTE)v181 + 63) & 7;
    v185 = (_DWORD *)((char *)v178 + (v183 >> 3));
    v186 = v182 << (v183 & 0xF8);
    if (v183 >= 0x20)
      v186 = 0;
    v187 = *(_DWORD *)(v8 + 1880 * v25 + 58460) + 1;
    v188 = __clz(v187);
    v189 = v186 | (((v187 - (0x80000000 >> v188)) | (0x80000000 >> v188)) << (2 * v188 - v184 - 31));
    *v185 = bswap32(v189);
    v190 = v184 - 2 * v188 + 63;
    v162 = v190 & 7;
    v163 = (_DWORD *)((char *)v185 + (v190 >> 3));
    v191 = v189 << (v190 & 0xF8);
    if (v190 >= 0x20)
      v164 = 0;
    else
      v164 = v191;
  }
  v192 = v8 + 1880 * v25;
  v193 = (*(unsigned __int8 *)(v192 + 58464) << (v162 ^ 0x1F)) | v164;
  *v163 = bswap32(v193);
  v194 = v162 + 1;
  v195 = v194 & 7;
  v196 = (_DWORD *)((char *)v163 + (v194 >> 3));
  v197 = v193 << (v194 & 8);
  if (*(_BYTE *)(v192 + 58464))
  {
    v520 = (unsigned int **)v196;
    v521 = v197;
    v198 = v8 + 1880 * v25;
    v199 = (*(unsigned __int8 *)(v198 + 58468) << (v195 ^ 0x1F)) | v197;
    *v196 = bswap32(v199);
    v200 = v195 + 1;
    v201 = v200 & 7;
    v202 = (_DWORD *)((char *)v196 + (v200 >> 3));
    v203 = v199 << (v200 & 8);
    if (*(_BYTE *)(v198 + 58468))
    {
      v204 = v8 + 1880 * v25;
      v205 = (*(_DWORD *)(v204 + 58472) << (24 - v201)) | v203;
      *v202 = bswap32(v205);
      v203 = v205 << 8;
      if (*(_DWORD *)(v204 + 58472) == 255)
      {
        v206 = (*(_DWORD *)(v8 + 1880 * v25 + 58476) << (16 - v201)) | v203;
        *(_DWORD *)((char *)v202 + 1) = bswap32(v206);
        v207 = *(_DWORD *)(v8 + 1880 * v25 + 58480) << (16 - v201);
        *(_DWORD *)((char *)v202 + 3) = bswap32(v207 | (v206 << 16));
        v202 = (_DWORD *)((char *)v202 + 5);
        v203 = v207 << 16;
      }
      else
      {
        v202 = (_DWORD *)((char *)v202 + 1);
      }
    }
    v208 = v8 + 1880 * v25;
    v209 = (*(unsigned __int8 *)(v208 + 58484) << (v201 ^ 0x1F)) | v203;
    *v202 = bswap32(v209);
    if (*(_BYTE *)(v208 + 58484))
      return -666;
    v210 = (v201 + 1);
    v211 = v209 << (v210 & 8);
    v212 = (_DWORD *)((char *)v202 + (v210 >> 3));
    LODWORD(v210) = v210 & 7;
    v213 = v8 + 1880 * v25;
    v214 = (*(unsigned __int8 *)(v213 + 58486) << (v210 ^ 0x1F)) | v211;
    *v212 = bswap32(v214);
    v215 = v210 + 1;
    v216 = (v210 + 1) & 7;
    v217 = (_DWORD *)((char *)v212 + ((v210 + 1) >> 3));
    v218 = v214 << (v215 & 8);
    if (*(_BYTE *)(v213 + 58486))
    {
      v219 = (*(_DWORD *)(v8 + 1880 * v25 + 58488) << (29 - v216)) | v218;
      *v217 = bswap32(v219);
      v220 = (v216 + 3);
      v221 = v220 & 7;
      v222 = (_DWORD *)((char *)v217 + (v220 >> 3));
      LODWORD(v220) = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58492) << (v220 & 7 ^ 0x1F)) | (v219 << (v220 & 8));
      *v222 = bswap32(v220);
      v223 = (_DWORD *)((char *)v222 + ((unint64_t)(v221 + 1) >> 3));
      v224 = ((_DWORD)v220 << ((v221 + 1) & 8)) | (*(unsigned __int8 *)(v8 + 1880 * v25 + 58493) << ((v221 + 1) & 7 ^ 0x1F));
      *v223 = bswap32(v224);
      v225 = (((_BYTE)v221 + 1) & 7) + 1;
      v216 = v225 & 7;
      v217 = (_DWORD *)((char *)v223 + (v225 >> 3));
      v218 = v224 << (v225 & 8);
      if (*(_BYTE *)(v8 + 1880 * v25 + 58493))
      {
        v226 = (*(_DWORD *)(v8 + 1880 * v25 + 58496) << (24 - v216)) | v218;
        *v217 = bswap32(v226);
        v227 = (*(_DWORD *)(v8 + 1880 * v25 + 58500) << (24 - v216)) | (v226 << 8);
        *(_DWORD *)((char *)v217 + 1) = bswap32(v227);
        v228 = (*(_DWORD *)(v8 + 1880 * v25 + 58504) << (24 - v216)) | (v227 << 8);
        *(_DWORD *)((char *)v217 + 2) = bswap32(v228);
        v217 = (_DWORD *)((char *)v217 + 3);
        v218 = v228 << 8;
      }
    }
    v229 = v8 + 1880 * v25;
    v230 = (*(unsigned __int8 *)(v229 + 58508) << (v216 ^ 0x1F)) | v218;
    *v217 = bswap32(v230);
    v231 = v216 + 1;
    v232 = (v216 + 1) >> 3;
    v233 = (v216 + 1) & 7;
    v234 = (_DWORD *)((char *)v217 + v232);
    v235 = v230 << (v231 & 8);
    if (*(_BYTE *)(v229 + 58508))
    {
      v236 = *(_DWORD *)(v8 + 1880 * v25 + 58512) + 1;
      v237 = __clz(v236);
      v238 = (((v236 - (0x80000000 >> v237)) | (0x80000000 >> v237)) << (2 * v237 - v233 - 31)) | v235;
      *v234 = bswap32(v238);
      v239 = v233 - 2 * v237 + 63;
      v240 = v239 & 7;
      v241 = (_DWORD *)((char *)v234 + (v239 >> 3));
      v242 = v238 << (v239 & 0xF8);
      v243 = v239 >= 0x20 ? 0 : v242;
      v244 = *(_DWORD *)(v8 + 1880 * v25 + 58516) + 1;
      v245 = __clz(v244);
      v246 = v243 | (((v244 - (0x80000000 >> v245)) | (0x80000000 >> v245)) << (2 * v245 - v240 - 31));
      *v241 = bswap32(v246);
      v247 = v240 - 2 * v245 + 63;
      v233 = v247 & 7;
      v234 = (_DWORD *)((char *)v241 + (v247 >> 3));
      v235 = v246 << (v247 & 0xF8);
      if (v247 >= 0x20)
        v235 = 0;
    }
    v248 = v8 + 1880 * v25;
    v249 = (*(unsigned __int8 *)(v248 + 58520) << (v233 ^ 0x1F)) | v235;
    *v234 = bswap32(v249);
    if (*(_BYTE *)(v248 + 58520))
      return -666;
    v250 = (v233 + 1);
    v251 = v249 << (v250 & 8);
    v252 = (_DWORD *)((char *)v234 + (v250 >> 3));
    LODWORD(v250) = v250 & 7;
    v253 = (_BYTE *)(v8 + 1880 * v25 + 58533);
    v254 = (*v253 << (v250 ^ 0x1F)) | v251;
    *v252 = bswap32(v254);
    v255 = v250 + 1;
    v256 = (v250 + 1) & 7;
    v257 = (_DWORD *)((char *)v252 + ((v250 + 1) >> 3));
    v258 = v254 << (v255 & 8);
    if (*v253)
    {
      v259 = *(_DWORD *)(v8 + 1880 * v25 + 58564) + 1;
      v260 = __clz(v259);
      v261 = (((v259 - (0x80000000 >> v260)) | (0x80000000 >> v260)) << (2 * v260 - v256 - 31)) | v258;
      *v257 = bswap32(v261);
      v262 = v256 - 2 * v260 + 63;
      v263 = v262 & 7;
      v264 = (_DWORD *)((char *)v257 + (v262 >> 3));
      v265 = v261 << (v262 & 0xF8);
      if (v262 >= 0x20)
        v266 = 0;
      else
        v266 = v265;
      v267 = v266 | (*(_DWORD *)(v8 + 1880 * v25 + 58568) << (28 - v263));
      *v264 = bswap32(v267);
      v268 = (v263 + 4);
      v269 = v268 & 7;
      v270 = (_DWORD *)((char *)v264 + (v268 >> 3));
      v271 = (v267 << (v268 & 8)) | (*(_DWORD *)(v8 + 1880 * v25 + 58572) << (28 - (v268 & 7)));
      *v270 = bswap32(v271);
      if (*(_DWORD *)(v8 + 1880 * v25 + 58564))
        return -666;
      v272 = v269 + 4;
      v273 = (v269 + 4) >> 3;
      v274 = (v269 + 4) & 7;
      v275 = (_DWORD *)((char *)v270 + v273);
      v276 = v271 << (v272 & 8);
      v277 = *(_DWORD *)(v8 + 1880 * v25 + 58576);
      v278 = v277 + 1;
      if (v277 == -1)
      {
        v279 = 0;
        v280 = bswap32(v276);
        *v275 = v280;
        *(unsigned int *)((char *)v275 + 2) = HIWORD(v280);
        v281 = (1 << (v274 ^ 0x1F)) >> 24;
        v275[1] = v281;
        v282 = (v274 + 1);
        v283 = v281 >> (v282 & 8);
        v284 = (unsigned int *)((char *)v275 + (v282 >> 3) + 4);
        v285 = v282 & 7;
        *v284 = v283;
        *(unsigned int *)((char *)v284 + 2) = 0;
        v286 = v284 + 1;
      }
      else
      {
        v287 = __clz(v278);
        v288 = v287 ^ 0x1F;
        v289 = (v287 ^ 0x1F) >> 1;
        if ((v287 ^ 0x1F) >= 2)
        {
          *v275 = bswap32(v276);
          v290 = v289 + v274;
          v291 = (v289 + v274) >> 3;
          v274 = (v289 + v274) & 7;
          v275 = (unsigned int *)((char *)v275 + v291);
          v276 <<= v290 & 0x18;
        }
        v292 = v288 - (v288 >> 1);
        if (v288 != v289)
        {
          *v275 = bswap32(v276);
          v293 = v274 + v292;
          v274 = (v274 + v292) & 7;
          v275 = (unsigned int *)((char *)v275 + (v293 >> 3));
          v276 <<= v293 & 0xF8;
          if (v293 >= 0x20)
            v276 = 0;
        }
        v294 = v276 | (0x80000000 >> v274);
        *v275 = bswap32(v294);
        v295 = v274 + 1;
        v296 = (v274 + 1) >> 3;
        v285 = (v274 + 1) & 7;
        v286 = (unsigned int *)((char *)v275 + v296);
        v279 = v294 << (v295 & 8);
        v297 = v278 - (0x80000000 >> v287);
        if (v288 >= 2)
        {
          v298 = v285 + v289;
          v299 = (v297 >> v292 << -(char)(v285 + v289)) | v279;
          *v286 = bswap32(v299);
          v285 = (v285 + v289) & 7;
          v286 = (unsigned int *)((char *)v286 + (v298 >> 3));
          v279 = v299 << (v298 & 0x18);
        }
        if (v288 != v289)
        {
          v300 = v285 + v292;
          v301 = (v297 << -(char)(v285 + v292)) | v279;
          *v286 = bswap32(v301);
          v285 = (v285 + v292) & 7;
          v286 = (unsigned int *)((char *)v286 + (v300 >> 3));
          v279 = v301 << (v300 & 0xF8);
          if (v300 >= 0x20)
            v279 = 0;
        }
      }
      v302 = *(_DWORD *)(v8 + 1880 * v25 + 58704);
      v303 = v302 + 1;
      if (v302 == -1)
      {
        v304 = 0;
        v305 = bswap32(v279);
        *v286 = v305;
        *(unsigned int *)((char *)v286 + 2) = HIWORD(v305);
        v306 = bswap32(1 << (v285 ^ 0x1F));
        v286[1] = v306;
        v307 = (v285 + 1);
        v308 = v306 >> (v307 & 8);
        v309 = (unsigned int *)((char *)v286 + (v307 >> 3) + 4);
        v310 = v307 & 7;
        *v309 = v308;
        *(unsigned int *)((char *)v309 + 2) = 0;
        v311 = v309 + 1;
      }
      else
      {
        v312 = __clz(v303);
        v313 = v312 ^ 0x1F;
        v314 = (v312 ^ 0x1F) >> 1;
        if ((v312 ^ 0x1F) >= 2)
        {
          *v286 = bswap32(v279);
          v315 = v314 + v285;
          v316 = (v314 + v285) >> 3;
          v285 = (v314 + v285) & 7;
          v286 = (unsigned int *)((char *)v286 + v316);
          v279 <<= v315 & 0x38;
        }
        v317 = v313 - (v313 >> 1);
        if (v313 != v314)
        {
          *v286 = bswap32(v279);
          v318 = v285 + v317;
          v285 = (v285 + v317) & 7;
          v286 = (unsigned int *)((char *)v286 + (v318 >> 3));
          v279 <<= v318 & 0xF8;
          if (v318 >= 0x20)
            v279 = 0;
        }
        v319 = v279 | (0x80000000 >> v285);
        *v286 = bswap32(v319);
        v320 = v285 + 1;
        v321 = (v285 + 1) >> 3;
        v310 = (v285 + 1) & 7;
        v311 = (unsigned int *)((char *)v286 + v321);
        v304 = v319 << (v320 & 8);
        v322 = v303 - (0x80000000 >> v312);
        if (v313 >= 2)
        {
          v323 = v310 + v314;
          v324 = (v322 >> v317 << -(char)(v310 + v314)) | v304;
          *v311 = bswap32(v324);
          v310 = (v310 + v314) & 7;
          v311 = (_DWORD *)((char *)v311 + (v323 >> 3));
          v304 = v324 << (v323 & 0x18);
        }
        if (v313 != v314)
        {
          v325 = v310 + v317;
          v326 = (v322 << -(char)(v310 + v317)) | v304;
          *v311 = bswap32(v326);
          v310 = (v310 + v317) & 7;
          v311 = (_DWORD *)((char *)v311 + (v325 >> 3));
          v327 = v326 << (v325 & 0xF8);
          if (v325 >= 0x20)
            v304 = 0;
          else
            v304 = v327;
        }
      }
      v328 = (*(_DWORD *)(v8 + 1880 * v25 + 58832) << (v310 ^ 0x1F)) | v304;
      *v311 = bswap32(v328);
      v329 = (v310 + 1);
      v330 = v329 & 7;
      v331 = (_DWORD *)((char *)v311 + (v329 >> 3));
      LODWORD(v329) = (v328 << (v329 & 8)) | (*(_DWORD *)(v8 + 1880 * v25 + 58960) << (27 - (v329 & 7)));
      *v331 = bswap32(v329);
      v332 = (_DWORD *)((char *)v331 + ((unint64_t)(v330 + 5) >> 3));
      LODWORD(v329) = ((_DWORD)v329 << ((v330 + 5) & 8)) | (*(_DWORD *)(v8 + 1880 * v25 + 58964) << (27 - ((v330 + 5) & 7)));
      *v332 = bswap32(v329);
      v333 = (((_BYTE)v330 + 5) & 7u) + 5;
      v334 = (_DWORD *)((char *)v332 + (v333 >> 3));
      LODWORD(v329) = ((_DWORD)v329 << (v333 & 8)) | (*(_DWORD *)(v8 + 1880 * v25 + 58968) << (27 - (v333 & 7)));
      *v334 = bswap32(v329);
      v335 = (_DWORD *)((char *)v334 + ((unint64_t)((((((_BYTE)v330 + 5) & 7) + 5) & 7u) + 5) >> 3));
      v336 = ((_DWORD)v329 << ((((((v330 + 5) & 7) + 5) & 7) + 5) & 8)) | (*(_DWORD *)(v8 + 1880 * v25 + 58972) << (27 - ((((((v330 + 5) & 7) + 5) & 7) + 5) & 7)));
      *v335 = bswap32(v336);
      LODWORD(v333) = (((((((_BYTE)v330 + 5) & 7) + 5) & 7) + 5) & 7) + 5;
      v256 = v333 & 7;
      v257 = (_DWORD *)((char *)v335 + (v333 >> 3));
      v258 = v336 << (v333 & 8);
    }
    v337 = v8 + 1880 * v25;
    v338 = (*(unsigned __int8 *)(v337 + 58534) << (v256 ^ 0x1F)) | v258;
    *v257 = bswap32(v338);
    if (*(_BYTE *)(v337 + 58534))
      return -666;
    v339 = v256 + 1;
    v340 = (v256 + 1) >> 3;
    v341 = (v256 + 1) & 7;
    v342 = (_DWORD *)((char *)v257 + v340);
    v343 = v338 << (v339 & 8);
    if (*v253)
    {
      v344 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58535) << (v341 ^ 0x1F)) | v343;
      *v342 = bswap32(v344);
      v345 = v341 + 1;
      v346 = (v341 + 1) >> 3;
      v341 = (v341 + 1) & 7;
      v342 = (_DWORD *)((char *)v342 + v346);
      v343 = v344 << (v345 & 8);
    }
    v347 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58536) << (v341 ^ 0x1F)) | v343;
    *v342 = bswap32(v347);
    v348 = (v341 + 1);
    v349 = (_DWORD *)((char *)v342 + (v348 >> 3));
    v350 = (v347 << (v348 & 8)) | (*(unsigned __int8 *)(v8 + 1880 * v25 + 58537) << (v348 & 7 ^ 0x1F));
    *v349 = bswap32(v350);
    v351 = (v348 & 7) + 1;
    v195 = v351 & 7;
    v196 = (_DWORD *)((char *)v349 + (v351 >> 3));
    v197 = v350 << (v351 & 8);
    if (*(_BYTE *)(v8 + 1880 * v25 + 58537))
    {
      v352 = (*(unsigned __int8 *)(v8 + 1880 * v25 + 58538) << (v195 ^ 0x1F)) | v197;
      *v196 = bswap32(v352);
      v353 = (v195 + 1);
      v354 = v353 & 7;
      v355 = (_DWORD *)((char *)v196 + (v353 >> 3));
      LODWORD(v353) = v352 << (v353 & 8);
      v356 = *(_DWORD *)(v8 + 1880 * v25 + 58540) + 1;
      v357 = __clz(v356);
      LODWORD(v353) = (((v356 - (0x80000000 >> v357)) | (0x80000000 >> v357)) << (2 * v357 - v354 - 31)) | v353;
      *v355 = bswap32(v353);
      v358 = v354 - 2 * v357 + 63;
      v359 = ((_BYTE)v354 - 2 * (_BYTE)v357 + 63) & 7;
      v360 = (_DWORD *)((char *)v355 + (v358 >> 3));
      v361 = (_DWORD)v353 << (v358 & 0xF8);
      if (v358 >= 0x20)
        v361 = 0;
      v362 = *(_DWORD *)(v8 + 1880 * v25 + 58544) + 1;
      v363 = __clz(v362);
      v364 = v361 | (((v362 - (0x80000000 >> v363)) | (0x80000000 >> v363)) << (2 * v363 - v359 - 31));
      *v360 = bswap32(v364);
      v365 = v359 - 2 * v363 + 63;
      v366 = ((_BYTE)v359 - 2 * (_BYTE)v363 + 63) & 7;
      v367 = (_DWORD *)((char *)v360 + (v365 >> 3));
      v368 = v364 << (v365 & 0xF8);
      if (v365 >= 0x20)
        v368 = 0;
      v369 = *(_DWORD *)(v8 + 1880 * v25 + 58548) + 1;
      v370 = __clz(v369);
      v371 = v368 | (((v369 - (0x80000000 >> v370)) | (0x80000000 >> v370)) << (2 * v370 - v366 - 31));
      *v367 = bswap32(v371);
      v372 = v366 - 2 * v370 + 63;
      v373 = ((_BYTE)v366 - 2 * (_BYTE)v370 + 63) & 7;
      v374 = (_DWORD *)((char *)v367 + (v372 >> 3));
      v375 = v371 << (v372 & 0xF8);
      if (v372 >= 0x20)
        v375 = 0;
      v376 = *(_DWORD *)(v8 + 1880 * v25 + 58552) + 1;
      v377 = __clz(v376);
      v378 = v375 | (((v376 - (0x80000000 >> v377)) | (0x80000000 >> v377)) << (2 * v377 - v373 - 31));
      *v374 = bswap32(v378);
      v379 = v373 - 2 * v377 + 63;
      v380 = ((_BYTE)v373 - 2 * (_BYTE)v377 + 63) & 7;
      v381 = (_DWORD *)((char *)v374 + (v379 >> 3));
      v382 = v378 << (v379 & 0xF8);
      if (v379 >= 0x20)
        v382 = 0;
      v383 = *(_DWORD *)(v8 + 1880 * v25 + 58556) + 1;
      v384 = __clz(v383);
      v385 = v382 | (((v383 - (0x80000000 >> v384)) | (0x80000000 >> v384)) << (2 * v384 - v380 - 31));
      *v381 = bswap32(v385);
      v386 = v380 - 2 * v384 + 63;
      v387 = ((_BYTE)v380 - 2 * (_BYTE)v384 + 63) & 7;
      v388 = (_DWORD *)((char *)v381 + (v386 >> 3));
      v389 = v385 << (v386 & 0xF8);
      if (v386 >= 0x20)
        v389 = 0;
      v390 = *(_DWORD *)(v8 + 1880 * v25 + 58560) + 1;
      v391 = __clz(v390);
      v392 = v389 | (((v390 - (0x80000000 >> v391)) | (0x80000000 >> v391)) << (2 * v391 - v387 - 31));
      *v388 = bswap32(v392);
      v393 = v387 - 2 * v391 + 63;
      v195 = v393 & 7;
      v196 = (_DWORD *)((char *)v388 + (v393 >> 3));
      v394 = v392 << (v393 & 0xF8);
      if (v393 >= 0x20)
        v197 = 0;
      else
        v197 = v394;
    }
    v520 = (unsigned int **)v196;
    v521 = v197;
    v522 = v195;
  }
  *v196 = bswap32(v197 | (0x80000000 >> v195));
  v395 = v195 + 1;
  v396 = (char *)v196 + (v395 >> 3);
  if ((v395 & 7) != 0)
  {
    *v396 &= byte_1B693261C[v395 & 7];
    LODWORD(v396) = (_DWORD)v396 + 1;
  }
  v397 = sub_1B68F3BDC(&__dst, (int)v396 - (int)p_dst, (uint64_t)v531);
  v22 = v397;
  *(_DWORD *)(v8 + 208128) = v397;
LABEL_158:
  v398 = *(_QWORD *)(v6 + 16);
  v399 = *(_QWORD *)(v398 + 5176);
  if (*(_BYTE *)(v399 + 205935) != 1 && (*(_BYTE *)(v399 + 205935) || *(_BYTE *)(v399 + 205933)))
  {
    v400 = 0;
    goto LABEL_202;
  }
  *(_BYTE *)(v399 + 119519) = *(_BYTE *)(v398 + 400);
  v401 = *(_QWORD *)(v398 + 5176);
  v402 = *(unsigned __int8 *)(v401 + 205792);
  v403 = v401 + 336 * *(unsigned __int8 *)(v401 + 205792) + 119432;
  v404 = *(_DWORD *)(v401 + 1880 * *(unsigned __int8 *)(v401 + 119152) + 57108);
  LODWORD(__dst) = 40;
  v405 = *(_DWORD *)v403 + 1;
  v406 = __clz(v405);
  v407 = ((v405 - (0x80000000 >> v406)) | (0x80000000 >> v406)) << (2 * v406 - 31);
  *(_DWORD *)((char *)&__dst + 1) = bswap32(v407);
  v408 = 63 - 2 * v406;
  v409 = v408 & 7;
  v410 = (_DWORD *)((char *)&__dst + (v408 >> 3) + 1);
  v411 = v407 << (v408 & 0xF8);
  if (v408 >= 0x20)
    v411 = 0;
  v412 = *(_DWORD *)(v403 + 4) + 1;
  v413 = __clz(v412);
  v414 = v411 | (((v412 - (0x80000000 >> v413)) | (0x80000000 >> v413)) << (2 * v413 - v409 - 31));
  *v410 = bswap32(v414);
  v415 = v409 - 2 * v413 + 63;
  v416 = ((_BYTE)v409 - 2 * (_BYTE)v413 + 63) & 6;
  v417 = (_DWORD *)((char *)v410 + (v415 >> 3));
  v418 = v414 << (v415 & 0xF8);
  if (v415 >= 0x20)
    v418 = 0;
  v419 = v418 | (*(unsigned __int8 *)(v403 + 8) << (v416 ^ 0x1F)) | (*(unsigned __int8 *)(v403 + 9) << (v416 ^ 0x1E));
  *v417 = bswap32(v419);
  v420 = (v416 + 2);
  v421 = v420 & 6;
  v422 = (_DWORD *)((char *)v417 + (v420 >> 3));
  v423 = v419 << (v420 & 8);
  LODWORD(v420) = *(_DWORD *)(v403 + 12);
  v424 = __clz(v420 + 1);
  v425 = v423 | ((((_DWORD)v420 + 1 - (0x80000000 >> v424)) | (0x80000000 >> v424)) << (2 * v424 - v421 - 31));
  *v422 = bswap32(v425);
  if ((_DWORD)v420)
    return -666;
  v426 = v421 - 2 * v424 + 63;
  v427 = v425 << ((v421 - 2 * v424 + 63) & 0xF8);
  if (v426 >= 0x20)
    v427 = 0;
  v428 = (_DWORD *)((char *)v422 + (v426 >> 3));
  v429 = v426 & 7;
  v430 = *(_DWORD *)(v401 + 336 * v402 + 119488) + 1;
  v431 = __clz(v430);
  v432 = (((v430 - (0x80000000 >> v431)) | (0x80000000 >> v431)) << (2 * v431 - v429 - 31)) | v427;
  *v428 = bswap32(v432);
  v433 = v429 - 2 * v431 + 63;
  v434 = v433 & 7;
  v435 = (_DWORD *)((char *)v428 + (v433 >> 3));
  v436 = v432 << (v433 & 0xF8);
  if (v433 >= 0x20)
    v437 = 0;
  else
    v437 = v436;
  v438 = *(_DWORD *)(v401 + 336 * v402 + 119492) + 1;
  v439 = __clz(v438);
  v440 = v437 | (((v438 - (0x80000000 >> v439)) | (0x80000000 >> v439)) << (2 * v439 - v434 - 31));
  *v435 = bswap32(v440);
  v441 = v434 - 2 * v439 + 63;
  v442 = ((_BYTE)v434 - 2 * (_BYTE)v439 + 63) & 7;
  v443 = (_DWORD *)((char *)v435 + (v441 >> 3));
  v444 = v440 << (v441 & 0xF8);
  if (v441 >= 0x20)
    v444 = 0;
  v445 = v444 | (*(unsigned __int8 *)(v401 + 336 * v402 + 119496) << (v442 ^ 0x1F));
  *v443 = bswap32(v445);
  v446 = (_DWORD *)((char *)v443 + ((unint64_t)(v442 + 1) >> 3));
  v447 = (v445 << ((v442 + 1) & 8)) | (*(_DWORD *)(v401 + 336 * v402 + 119500) << (30 - ((v442 + 1) & 7)));
  *v446 = bswap32(v447);
  v448 = (((_BYTE)v442 + 1) & 7u) + 2;
  v449 = ((((_BYTE)v442 + 1) & 7) + 2) & 7;
  v450 = (_DWORD *)((char *)v446 + (v448 >> 3));
  v451 = v447 << (v448 & 8);
  v452 = *(_DWORD *)(v401 + 336 * v402 + 119504);
  if (v452 <= 0)
    v453 = 1 - 2 * v452;
  else
    v453 = 2 * v452;
  v454 = __clz(v453);
  v455 = v451 | (((v453 - (0x80000000 >> v454)) | (0x80000000 >> v454)) << (2 * v454 - v449 - 31));
  *v450 = bswap32(v455);
  v456 = v449 - 2 * v454 + 63;
  v457 = v456 & 7;
  v458 = (_DWORD *)((char *)v450 + (v456 >> 3));
  v459 = v455 << (v456 & 0xF8);
  if (v456 >= 0x20)
    v459 = 0;
  v460 = *(_DWORD *)(v401 + 336 * v402 + 119508);
  if (v460 <= 0)
    v461 = 1 - 2 * v460;
  else
    v461 = 2 * v460;
  v462 = __clz(v461);
  v463 = v459 | (((v461 - (0x80000000 >> v462)) | (0x80000000 >> v462)) << (2 * v462 - v457 - 31));
  *v458 = bswap32(v463);
  v464 = v457 - 2 * v462 + 63;
  v465 = ((_BYTE)v457 - 2 * (_BYTE)v462 + 63) & 7;
  v466 = (_DWORD *)((char *)v458 + (v464 >> 3));
  v467 = v463 << (v464 & 0xF8);
  if (v464 >= 0x20)
    v467 = 0;
  v468 = *(_DWORD *)(v401 + 336 * v402 + 119512);
  if (v468 <= 0)
    v469 = 1 - 2 * v468;
  else
    v469 = 2 * v468;
  v470 = __clz(v469);
  v471 = v467 | (((v469 - (0x80000000 >> v470)) | (0x80000000 >> v470)) << (2 * v470 - v465 - 31));
  *v466 = bswap32(v471);
  v472 = v465 - 2 * v470 + 63;
  v473 = ((_BYTE)v465 - 2 * (_BYTE)v470 + 63) & 7;
  v474 = (_DWORD *)((char *)v466 + (v472 >> 3));
  v475 = v471 << ((v465 - 2 * v470 + 63) & 0xF8);
  if (v472 >= 0x20)
    v475 = 0;
  v476 = v475 | (*(unsigned __int8 *)(v401 + 336 * v402 + 119516) << (v473 ^ 0x1F));
  *v474 = bswap32(v476);
  v477 = (_DWORD *)((char *)v474 + ((unint64_t)(v473 + 1) >> 3));
  v478 = (v476 << ((v473 + 1) & 8)) | (*(unsigned __int8 *)(v401 + 336 * v402 + 119517) << ((v473 + 1) & 7 ^ 0x1F));
  *v477 = bswap32(v478);
  v479 = (((_BYTE)v473 + 1) & 7u) + 1;
  v480 = (_DWORD *)((char *)v477 + (v479 >> 3));
  LODWORD(v479) = (v478 << (v479 & 8)) | (*(unsigned __int8 *)(v401 + 336 * v402 + 119518) << (v479 & 7 ^ 0x1F));
  *v480 = bswap32(v479);
  v481 = (((((_BYTE)v473 + 1) & 7) + 1) & 7) + 1;
  v482 = v481 & 7;
  v483 = (_DWORD *)((char *)v480 + (v481 >> 3));
  v484 = (_DWORD)v479 << (v481 & 8);
  v485 = v404 - 100;
  if (v485 <= 0x2C && ((1 << v485) & 0x100000400403) != 0)
  {
    v486 = (*(unsigned __int8 *)(v401 + 336 * v402 + 119519) << (v482 ^ 0x1F)) | v484;
    *v483 = bswap32(v486);
    v487 = (_DWORD *)((char *)v483 + ((unint64_t)(v482 + 1) >> 3));
    v488 = (v486 << ((v482 + 1) & 8)) | (*(unsigned __int8 *)(v401 + 336 * v402 + 119520) << ((v482 + 1) & 7 ^ 0x1F));
    *v487 = bswap32(v488);
    if (*(_BYTE *)(v401 + 336 * v402 + 119520))
      exit(1);
    v489 = v488 << ((((v482 + 1) & 7) + 1) & 8);
    v490 = (_DWORD *)((char *)v487 + ((unint64_t)((((_BYTE)v482 + 1) & 7u) + 1) >> 3));
    v491 = ((((_BYTE)v482 + 1) & 7) + 1) & 7;
    v492 = *(char *)(v401 + 336 * v402 + 119529);
    if (v492 <= 0)
      v493 = 1 - 2 * v492;
    else
      v493 = 2 * v492;
    v494 = __clz(v493);
    v495 = (((v493 - (0x80000000 >> v494)) | (0x80000000 >> v494)) << (2 * v494 - v491 - 31)) | v489;
    *v490 = bswap32(v495);
    v496 = v491 - 2 * v494 + 63;
    v482 = v496 & 7;
    v483 = (_DWORD *)((char *)v490 + (v496 >> 3));
    v497 = v495 << (v496 & 0xF8);
    if (v496 >= 0x20)
      v484 = 0;
    else
      v484 = v497;
  }
  *v483 = bswap32((1 << (v482 ^ 0x1F)) | v484);
  v498 = (char *)v483 + ((v482 + 1) >> 3);
  v499 = (v482 + 1) & 7;
  if ((_DWORD)v499)
  {
    *v498 &= byte_1B693261C[v499];
    LODWORD(v498) = (_DWORD)v498 + 1;
  }
  v400 = sub_1B68F3BDC(&__dst, v498 - &__dst, (uint64_t)v530);
  v399 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 5176);
LABEL_202:
  v500 = *(_QWORD *)(v399 + 208120);
  if (v500 && (v501 = *(_DWORD *)(v500 + 216), (v501 - 1) <= 0xBB6))
  {
    v502 = (_BYTE *)(v399 + 205935);
    memcpy(&__dst, *(const void **)(v500 + 208), *(unsigned int *)(v500 + 216));
    v533[0] = 0;
    v503 = *(unsigned int *)(v6 + 5004);
    if (*v502)
    {
      v504 = sub_1B689B1F0((uint64_t)v531, v22, (uint64_t)v530, v400, (uint64_t)&__dst, (__int16)v501, v503, (uint64_t)v532, v533);
      goto LABEL_208;
    }
    v505 = v22;
    v506 = (__int16)v501;
    v507 = &__dst;
  }
  else
  {
    v533[0] = 0;
    v503 = *(unsigned int *)(v6 + 5004);
    v505 = v22;
    v506 = v400;
    v507 = (unsigned int **)v530;
  }
  v504 = sub_1B689B1F0((uint64_t)v531, v505, (uint64_t)v507, v506, 0, 0, v503, (uint64_t)v532, v533);
LABEL_208:
  VideoFormatDescription = v504;
  if (!v504)
  {
    v508 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v509 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v532, v533[0]);
    if (!v509)
      return (__int16)FigSignalErrorAt();
    v510 = v509;
    Mutable = CFDictionaryCreateMutable(v508, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      VideoFormatDescription = FigSignalErrorAt();
      v517 = v510;
      goto LABEL_222;
    }
    v512 = Mutable;
    v513 = CFDictionaryCreateMutable(v508, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v513)
    {
      if (*(_DWORD *)(v6 + 5144) * *(_DWORD *)(v6 + 5140) > 307200
        || (v514 = *(_DWORD *)(v6 + 5048), v514 != 8) && v514 != 6)
      {
        v516 = 0;
        goto LABEL_218;
      }
      v515 = CFDataCreate(v508, byte_1B692C190, 20);
      if (v515)
      {
        v516 = v515;
        CFDictionaryAddValue(v512, CFSTR("uuid"), v515);
LABEL_218:
        CFDictionaryAddValue(v512, CFSTR("avcC"), v510);
        CFDictionaryAddValue(v513, (const void *)*MEMORY[0x1E0CA2240], v512);
        CFDictionaryAddValue(v513, (const void *)*MEMORY[0x1E0CA21C8], CFSTR("H.264"));
        VideoFormatDescription = VTEncoderSessionCreateVideoFormatDescription();
        CFRelease(v510);
        if (v516)
          CFRelease(v516);
        CFRelease(v512);
LABEL_221:
        v517 = v513;
LABEL_222:
        CFRelease(v517);
        return VideoFormatDescription;
      }
    }
    VideoFormatDescription = FigSignalErrorAt();
    CFRelease(v510);
    CFRelease(v512);
    if (!v513)
      return VideoFormatDescription;
    goto LABEL_221;
  }
  return VideoFormatDescription;
}

