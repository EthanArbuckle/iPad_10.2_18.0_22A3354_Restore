uint64_t sub_1B689B1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v15 = v9;
  v33 = *MEMORY[0x1E0C80C00];
  if (v11)
    v16 = 2;
  else
    v16 = 1;
  if ((unsigned __int16)(v9 - 1501) < 0xFA28u)
    return 4294958325;
  v17 = v14;
  v18 = v13;
  v19 = v12;
  v20 = v11;
  v21 = v10;
  __memcpy_chk();
  if ((unsigned __int16)(v21 - 3001) < 0xF44Cu)
    return 4294958325;
  __memcpy_chk();
  if (v20)
  {
    if ((unsigned __int16)(v19 - 3001) < 0xF44Cu)
      return 4294958325;
    __memcpy_chk();
    v22 = v19 - 4;
  }
  else
  {
    v22 = 65532;
  }
  if ((v18 - 3) > 2)
    return 0xFFFFFFFFLL;
  v23 = v15 - 4;
  *(_BYTE *)v17 = 1;
  v24 = BYTE1(v32);
  *(_BYTE *)(v17 + 1) = BYTE1(v32);
  *(_WORD *)(v17 + 2) = WORD1(v32);
  *(_BYTE *)(v17 + 4) = 0xFFFDFCu >> (8 * (v18 - 3));
  *(_BYTE *)(v17 + 5) = -31;
  *(_WORD *)(v17 + 6) = bswap32(v23) >> 16;
  memcpy((void *)(v17 + 8), &v32, (unsigned __int16)v23);
  v25 = v17 + (unsigned __int16)v23;
  *(_BYTE *)(v25 + 8) = v16;
  *(_WORD *)(v25 + 9) = bswap32(v21 - 4) >> 16;
  v26 = (unsigned __int16)v23 + 11;
  v27 = v26 + (unsigned __int16)(v21 - 4);
  memcpy((void *)(v17 + v26), &v31, (unsigned __int16)(v21 - 4));
  if (v20)
  {
    *(_WORD *)(v17 + v27) = bswap32(v22) >> 16;
    if ((unsigned __int16)v22 > 0xBB8u)
      return 4294958325;
    v29 = (v27 + 2);
    LODWORD(v27) = v29 + (unsigned __int16)v22;
    memcpy((void *)(v17 + v29), &v30, (unsigned __int16)v22);
  }
  if ((v24 - 100) <= 0x2C && ((1 << (v24 - 100)) & 0x100000400401) != 0)
  {
    *(_DWORD *)(v17 + v27) = 2;
    LODWORD(v27) = v27 + 4;
  }
  result = 0;
  *a9 = v27;
  return result;
}

void sub_1B689B44C()
{
  if (!*MEMORY[0x1E0CFCCF0])
    byte_1EF1392F8 = 1;
}

void sub_1B689B480(__CFArray *a1, int a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (v3)
  {
    v4 = v3;
    CFArrayAppendValue(a1, v3);
    CFRelease(v4);
  }
}

void sub_1B689B4D4(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(a1, a2, v5);
    CFRelease(v6);
  }
}

__n128 sub_1B689B538(const __CFAllocator *a1, __n128 *a2)
{
  __n128 *v3;
  __n128 result;
  __n128 v5;
  __n128 v6;

  v3 = (__n128 *)CFAllocatorAllocate(a1, 72, 0);
  *v3 = *a2;
  v5 = a2[2];
  result = a2[3];
  v6 = a2[1];
  v3[4].n128_u64[0] = a2[4].n128_u64[0];
  v3[2] = v5;
  v3[3] = result;
  v3[1] = v6;
  return result;
}

uint64_t sub_1B689B584()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  pthread_t *v21;
  uint64_t v22;
  uint64_t v23;
  pthread_mutex_t *v24;
  _QWORD *v25;
  pthread_mutex_t *v26;
  void *v27;
  void **v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  void *v40;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 5184))
    {
      *(_BYTE *)(DerivedStorage + 5184) = 1;
      v2 = *(_QWORD *)(DerivedStorage + 16);
      if (v2)
      {
        v3 = (void **)(v2 + 5208);
        v4 = *(_QWORD *)(v2 + 5176);
        if (v4)
        {
          v5 = *(_QWORD **)(v4 + 208120);
          if (v5)
          {
            v6 = (void *)v5[22];
            if (v6)
            {
              free(v6);
              v5[22] = 0;
              v4 = *(_QWORD *)(v2 + 5176);
              v5 = *(_QWORD **)(v4 + 208120);
            }
            v7 = (void *)v5[439];
            if (v7)
            {
              free(v7);
              v5[439] = 0;
              v4 = *(_QWORD *)(v2 + 5176);
              v5 = *(_QWORD **)(v4 + 208120);
            }
            v8 = (void *)v5[426];
            if (v8)
            {
              free(v8);
              v5[426] = 0;
              v4 = *(_QWORD *)(v2 + 5176);
              v5 = *(_QWORD **)(v4 + 208120);
            }
            v9 = (void *)v5[24];
            if (v9)
            {
              free(v9);
              v5[24] = 0;
              v4 = *(_QWORD *)(v2 + 5176);
              v5 = *(_QWORD **)(v4 + 208120);
            }
            v10 = (void *)v5[26];
            if (v10)
            {
              free(v10);
              v5[26] = 0;
              v4 = *(_QWORD *)(v2 + 5176);
            }
            sub_1B68B0720((CFTypeRef **)(v4 + 208120));
          }
        }
        sub_1B68CD46C(v2 + 5208);
        if (*v3)
          free(*v3);
        *(_QWORD *)(v2 + 5208) = 0;
        v11 = *(_QWORD *)(v2 + 5184);
        if (v11)
        {
          sub_1B68F8454(v11);
          free(*(void **)(v2 + 5184));
          *(_QWORD *)(v2 + 5184) = 0;
          *(_QWORD *)(*(_QWORD *)(v2 + 5176) + 205968) = 0;
        }
        v12 = *(_QWORD *)(v2 + 5176);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 205968);
          if (v13)
          {
            sub_1B68CA64C(v13);
            *(_QWORD *)(*(_QWORD *)(v2 + 5176) + 205968) = 0;
          }
        }
        v14 = *(void **)(v2 + 10576);
        if (v14)
        {
          free(v14);
          *(_QWORD *)(v2 + 10576) = 0;
        }
        v15 = *(void **)(v2 + 10592);
        if (v15)
        {
          free(v15);
          *(_QWORD *)(v2 + 10592) = 0;
        }
        if (*(_DWORD *)(v2 + 10612) == 1)
        {
          if (*(int *)(v2 + 10608) >= 1)
          {
            v16 = 0;
            v17 = 256;
            do
            {
              v18 = *(_QWORD *)(v2 + 10624);
              v19 = v18 + v17;
              *(_DWORD *)(v18 + v17 - 252) = 1;
              v20 = *(unsigned int **)(v18 + v17 - 240);
              if (v20)
                MEMORY[0x1BCC98920](*v20);
              v22 = v19 - 248;
              v21 = *(pthread_t **)(v19 - 248);
              v40 = 0;
              if (v21)
                pthread_join(*v21, &v40);
              sub_1B68A38D4(*(semaphore_t **)(v19 - 240));
              v23 = v18 + v17;
              sub_1B68A38D4(*(semaphore_t **)(v18 + v17 - 232));
              if (*(_QWORD *)v22)
                free(*(void **)v22);
              v26 = *(pthread_mutex_t **)(v23 - 8);
              v25 = (_QWORD *)(v23 - 8);
              v24 = v26;
              if (v26)
                pthread_mutex_destroy(v24);
              free(v24);
              v27 = *(void **)(v18 + v17);
              if (v27)
                pthread_cond_destroy(*(pthread_cond_t **)(v18 + v17));
              free(v27);
              *(_QWORD *)v22 = 0;
              *(_QWORD *)(v22 + 8) = 0;
              *(_QWORD *)(v22 + 16) = 0;
              *v25 = 0;
              v25[1] = 0;
              if (v17 != 256)
              {
                sub_1B68E1558(*(_QWORD *)(*(_QWORD *)(v2 + 10624) + v17 - 224), 0);
                *(_QWORD *)(*(_QWORD *)(v2 + 10624) + v17 - 224) = 0;
              }
              v28 = (void **)(*(_QWORD *)(v2 + 10624) + v17 - 200);
              sub_1B68CD46C((uint64_t)v28);
              if (*v28)
                free(*v28);
              *v28 = 0;
              ++v16;
              v17 += 320;
            }
            while (v16 < *(int *)(v2 + 10608));
          }
          free(*(void **)(v2 + 10624));
        }
        v29 = *(void **)(v2 + 5168);
        if (v29)
        {
          sub_1B689D924(*(_QWORD *)(v2 + 5168));
          free(v29);
        }
        *(_QWORD *)(v2 + 5168) = 0;
        v30 = *(_QWORD *)(v2 + 5176);
        if (v30)
          sub_1B68E1558(v30, 1);
        free((void *)v2);
        *(_QWORD *)(v1 + 16) = 0;
      }
      v31 = *(void **)(v1 + 5016);
      if (v31)
      {
        free(v31);
        *(_QWORD *)(v1 + 5016) = 0;
      }
      v32 = *(void **)(v1 + 5024);
      if (v32)
      {
        free(v32);
        *(_QWORD *)(v1 + 5024) = 0;
      }
      *(_QWORD *)v1 = 0;
      v33 = *(const void **)(v1 + 5192);
      if (v33)
      {
        CFRelease(v33);
        *(_QWORD *)(v1 + 5192) = 0;
      }
      FigFormatDescriptionRelease();
      *(_QWORD *)(v1 + 8) = 0;
      v34 = *(const void **)(v1 + 5200);
      if (v34)
      {
        CFRelease(v34);
        *(_QWORD *)(v1 + 5200) = 0;
      }
      v35 = *(const void **)(v1 + 5032);
      if (v35)
      {
        CFRelease(v35);
        *(_QWORD *)(v1 + 5032) = 0;
      }
      v36 = *(void **)(v1 + 6288);
      if (v36)
      {
        objc_msgSend(v36, "invalidate");
        CFRelease(*(CFTypeRef *)(v1 + 6288));
      }
      v37 = *(NSObject **)(v1 + 6280);
      if (v37)
      {
        dispatch_semaphore_wait(v37, 0xFFFFFFFFFFFFFFFFLL);
        dispatch_release(*(dispatch_object_t *)(v1 + 6280));
        *(_QWORD *)(v1 + 6280) = 0;
      }
      v38 = *(void **)(v1 + 6320);
      if (v38)
      {
        free(v38);
        *(_QWORD *)(v1 + 6320) = 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1B689B938()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (!*(_BYTE *)(result + 5184))
      return sub_1B689B584();
  }
  return result;
}

__CFString *sub_1B689B978(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<H264VideoEncoder %p>"), a1);
  return Mutable;
}

uint64_t sub_1B689B9CC(uint64_t a1, const void *a2, uint64_t a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  void **v8;
  CFNumberType v9;
  const __CFDictionary *StringForIntegerCodePoint;
  const void **v11;
  int v12;
  const void *v13;
  int v15;
  void *v16;
  const __CFAllocator *v17;
  int v18;
  CFDictionaryRef *v19;
  int v20;
  void *values;
  CFTypeRef cf;
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED248]))
  {
    v7 = 5048;
LABEL_3:
    v8 = (void **)(DerivedStorage + v7);
LABEL_4:
    v9 = kCFNumberSInt32Type;
LABEL_5:
    StringForIntegerCodePoint = CFNumberCreate(0, v9, v8);
LABEL_14:
    *a4 = StringForIntegerCodePoint;
    return 0;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEC8]))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = *(_DWORD *)(DerivedStorage + 5056);
    goto LABEL_10;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEB0]))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = *(_DWORD *)(DerivedStorage + 5060);
LABEL_10:
    if (!v12)
      v11 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_12:
    v13 = *v11;
LABEL_13:
    StringForIntegerCodePoint = (const __CFDictionary *)CFRetain(v13);
    goto LABEL_14;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0A8]))
  {
    v7 = 5068;
    goto LABEL_3;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0B0]))
  {
    v8 = (void **)(DerivedStorage + 5072);
LABEL_20:
    v9 = kCFNumberDoubleType;
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF50]))
  {
    v15 = *(_DWORD *)(DerivedStorage + 6236);
LABEL_29:
    LODWORD(keys[0]) = v15;
    v8 = keys;
    goto LABEL_4;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEF0]))
  {
    v15 = *(_DWORD *)(DerivedStorage + 760);
    goto LABEL_29;
  }
  if (CFEqual(a2, CFSTR("ThermalLevel")))
  {
    v15 = *(_DWORD *)(DerivedStorage + 6228);
    goto LABEL_29;
  }
  if (CFEqual(a2, CFSTR("AverageBitRateIntraLayer")))
  {
    v15 = *(_DWORD *)(DerivedStorage + 764);
    goto LABEL_29;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF78]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECFD0]))
    {
      v8 = (void **)(DerivedStorage + 752);
      goto LABEL_20;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF80]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED180]))
      {
        v13 = *(const void **)(DerivedStorage + 5032);
        if (!v13)
          return 0;
        goto LABEL_13;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED1F8]))
      {
        v7 = 5084;
        goto LABEL_3;
      }
      if (CFEqual(a2, CFSTR("FaceRect")))
      {
        if (*(_BYTE *)(DerivedStorage + 6272))
          v11 = (const void **)MEMORY[0x1E0C9AE50];
        else
          v11 = (const void **)MEMORY[0x1E0C9AE40];
        goto LABEL_12;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED140]))
      {
        if (*(_DWORD *)(DerivedStorage + 5128) != 1 || *(_DWORD *)(DerivedStorage + 5132) != 1)
        {
          v16 = (void *)*MEMORY[0x1E0CA8E70];
          keys[0] = *(void **)MEMORY[0x1E0CA8E60];
          keys[1] = v16;
          v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(DerivedStorage + 5128));
          cf = CFNumberCreate(v17, kCFNumberSInt32Type, (const void *)(DerivedStorage + 5132));
          *a4 = CFDictionaryCreate(v17, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFRelease(values);
          CFRelease(cf);
          return 0;
        }
LABEL_63:
        *a4 = 0;
        return 0;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF48]))
      {
        v18 = *(_DWORD *)(DerivedStorage + 5108);
        switch(v18)
        {
          case 6:
            v19 = (CFDictionaryRef *)MEMORY[0x1E0CA8DA0];
            break;
          case 5:
            v19 = (CFDictionaryRef *)MEMORY[0x1E0CA8D78];
            break;
          case 1:
            v19 = (CFDictionaryRef *)MEMORY[0x1E0CA8D88];
            break;
          default:
            goto LABEL_63;
        }
LABEL_57:
        *a4 = *v19;
        return 0;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED238]))
      {
        StringForIntegerCodePoint = (const __CFDictionary *)CVTransferFunctionGetStringForIntegerCodePoint(*(_DWORD *)(DerivedStorage + 5112));
        goto LABEL_14;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED290]))
      {
        v20 = *(_DWORD *)(DerivedStorage + 5116);
        switch(v20)
        {
          case 7:
            v19 = (CFDictionaryRef *)MEMORY[0x1E0CA8F30];
            break;
          case 6:
            v19 = (CFDictionaryRef *)MEMORY[0x1E0CA8F10];
            break;
          case 1:
            v19 = (CFDictionaryRef *)MEMORY[0x1E0CA8F18];
            break;
          default:
            goto LABEL_63;
        }
        goto LABEL_57;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CEDD18]))
      {
        v13 = *(const void **)(DerivedStorage + 6304);
        goto LABEL_13;
      }
    }
  }
  return FigSignalErrorAt();
}

char *sub_1B689BE78(uint64_t a1, const void *a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  uint64_t v7;
  void *v8;
  const __CFNumber *v9;
  CFNumberType v10;
  char *result;
  CFTypeID v12;
  int Value;
  CFTypeID v14;
  int v15;
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID v18;
  CFTypeID v19;
  CFTypeID v20;
  CFTypeID v21;
  CFTypeID v22;
  CFTypeID v23;
  CFIndex Count;
  CFIndex v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  const void *ValueAtIndex;
  CFTypeID v30;
  CFNumberType Type;
  double v32;
  const void *v33;
  CFTypeID v34;
  CFNumberType v35;
  double v36;
  CFTypeID v37;
  CFTypeID v38;
  const void *v39;
  CFTypeRef v40;
  CFTypeID v41;
  CFTypeID v42;
  const void *v43;
  const void *v44;
  const void *v45;
  CFTypeID v46;
  CFTypeID v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int IntegerCodePointForString;
  int v56;
  char *v57;
  CFTypeID v58;
  const __CFString *v59;
  char *v60;
  CFIndex v61;
  CFTypeID v62;
  Boolean v63;
  CFTypeID v64;
  int v65;
  CFTypeID v66;
  size_t v67;
  void *v68;
  int v69;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED248]))
  {
    if (a3)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        v7 = 5048;
LABEL_5:
        v8 = (void *)(DerivedStorage + v7);
        v9 = (const __CFNumber *)a3;
        v10 = kCFNumberSInt32Type;
LABEL_6:
        CFNumberGetValue(v9, v10, v8);
        return 0;
      }
    }
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEC8]))
  {
    if (a3)
    {
      v12 = CFBooleanGetTypeID();
      if (v12 == CFGetTypeID(a3))
      {
        Value = CFBooleanGetValue((CFBooleanRef)a3);
        result = 0;
        *(_DWORD *)(DerivedStorage + 5056) = Value;
        return result;
      }
    }
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEB0]))
  {
    if (a3)
    {
      v14 = CFBooleanGetTypeID();
      if (v14 == CFGetTypeID(a3))
      {
        v15 = CFBooleanGetValue((CFBooleanRef)a3);
        result = 0;
        *(_DWORD *)(DerivedStorage + 5060) = v15;
        return result;
      }
    }
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0A8]))
  {
    if (a3)
    {
      v16 = CFNumberGetTypeID();
      if (v16 == CFGetTypeID(a3))
      {
        v7 = 5068;
        goto LABEL_5;
      }
    }
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0B0]))
  {
    if (!a3)
      return (char *)FigSignalErrorAt();
    v17 = CFNumberGetTypeID();
    if (v17 != CFGetTypeID(a3))
      return (char *)FigSignalErrorAt();
    v8 = (void *)(DerivedStorage + 5072);
LABEL_25:
    v9 = (const __CFNumber *)a3;
    v10 = kCFNumberDoubleType;
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECEF0]))
  {
    if (a3)
    {
      v18 = CFNumberGetTypeID();
      if (v18 == CFGetTypeID(a3))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        result = 0;
        *(_DWORD *)(DerivedStorage + 760) = valuePtr;
        return result;
      }
    }
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("ThermalLevel")))
  {
    if (a3)
    {
      v19 = CFNumberGetTypeID();
      if (v19 == CFGetTypeID(a3))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        result = 0;
        *(_DWORD *)(DerivedStorage + 6228) = valuePtr;
        return result;
      }
    }
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF50]))
  {
    if (a3)
    {
      v20 = CFNumberGetTypeID();
      if (v20 == CFGetTypeID(a3))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        result = 0;
        *(_DWORD *)(DerivedStorage + 6236) = valuePtr;
        return result;
      }
    }
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("AverageBitRateIntraLayer")))
  {
    if (a3)
    {
      v21 = CFNumberGetTypeID();
      if (v21 == CFGetTypeID(a3))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        result = 0;
        *(_DWORD *)(DerivedStorage + 764) = valuePtr;
        return result;
      }
    }
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED0D0]))
  {
    if (a3)
    {
      v22 = CFNumberGetTypeID();
      if (v22 == CFGetTypeID(a3))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        result = 0;
        *(_DWORD *)(DerivedStorage + 5120) = valuePtr;
        return result;
      }
    }
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF78]))
  {
    if (!a3)
      return (char *)FigSignalErrorAt();
    v23 = CFArrayGetTypeID();
    if (v23 != CFGetTypeID(a3))
      return (char *)FigSignalErrorAt();
    Count = CFArrayGetCount((CFArrayRef)a3);
    if (Count < 2)
    {
LABEL_74:
      result = 0;
      *(_BYTE *)(DerivedStorage + 896) = 1;
      return result;
    }
    v25 = 0;
    v26 = (unint64_t)Count >> 1;
    if ((unint64_t)Count >> 1 >= 8)
      v26 = 8;
    v27 = 2 * v26;
    v28 = (double *)(DerivedStorage + 832);
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a3, v25);
      if (!ValueAtIndex)
        FigSignalErrorAt();
      v30 = CFNumberGetTypeID();
      if (v30 != CFGetTypeID(ValueAtIndex))
        FigSignalErrorAt();
      Type = CFNumberGetType((CFNumberRef)ValueAtIndex);
      if (Type == kCFNumberSInt64Type)
        break;
      if (Type == kCFNumberFloat64Type)
      {
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberFloat64Type, &valuePtr);
        v32 = *(double *)&valuePtr;
LABEL_61:
        *(v28 - 8) = v32;
        goto LABEL_63;
      }
      FigSignalErrorAt();
LABEL_63:
      v33 = CFArrayGetValueAtIndex((CFArrayRef)a3, v25 + 1);
      if (!v33)
        FigSignalErrorAt();
      v34 = CFNumberGetTypeID();
      if (v34 != CFGetTypeID(v33))
        FigSignalErrorAt();
      v35 = CFNumberGetType((CFNumberRef)v33);
      if (v35 == kCFNumberSInt64Type)
      {
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v33, kCFNumberSInt64Type, &valuePtr);
        v36 = (double)valuePtr;
      }
      else
      {
        if (v35 != kCFNumberFloat64Type)
        {
          FigSignalErrorAt();
          goto LABEL_73;
        }
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v33, kCFNumberFloat64Type, &valuePtr);
        v36 = *(double *)&valuePtr;
      }
      *v28 = v36;
LABEL_73:
      v25 += 2;
      ++v28;
      if (v27 == v25)
        goto LABEL_74;
    }
    valuePtr = 0;
    CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
    v32 = (double)valuePtr;
    goto LABEL_61;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECFD0]))
  {
    if (!a3)
      return (char *)FigSignalErrorAt();
    v37 = CFNumberGetTypeID();
    if (v37 != CFGetTypeID(a3))
      return (char *)FigSignalErrorAt();
    v8 = (void *)(DerivedStorage + 752);
    goto LABEL_25;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF80]))
  {
    if (a3)
    {
      CFNumberGetTypeID();
      CFGetTypeID(a3);
    }
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED180]))
  {
    if (!a3)
      return (char *)FigSignalErrorAt();
    v38 = CFStringGetTypeID();
    if (v38 != CFGetTypeID(a3))
      return (char *)FigSignalErrorAt();
    v39 = *(const void **)(DerivedStorage + 5032);
    if (v39)
      CFRelease(v39);
    v40 = CFRetain(a3);
    result = 0;
    *(_QWORD *)(DerivedStorage + 5032) = v40;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED1F8]))
  {
    if (a3)
    {
      v41 = CFNumberGetTypeID();
      if (v41 == CFGetTypeID(a3))
      {
        v7 = 5084;
        goto LABEL_5;
      }
    }
    return (char *)FigSignalErrorAt();
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED140]))
  {
    if (a3)
    {
      v42 = CFDictionaryGetTypeID();
      if (v42 != CFGetTypeID(a3))
        return (char *)FigSignalErrorAt();
      v43 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA8E60]);
      v44 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA8E70]);
      if (!v43)
        return (char *)FigSignalErrorAt();
      v45 = v44;
      v46 = CFNumberGetTypeID();
      if (v46 != CFGetTypeID(v43))
        return (char *)FigSignalErrorAt();
      if (!v45)
        return (char *)FigSignalErrorAt();
      v47 = CFNumberGetTypeID();
      if (v47 != CFGetTypeID(v45))
        return (char *)FigSignalErrorAt();
      v69 = 0;
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)v43, kCFNumberIntType, &valuePtr);
      CFNumberGetValue((CFNumberRef)v45, kCFNumberIntType, &v69);
      if ((int)valuePtr <= 0)
        return (char *)FigSignalErrorAt();
      v48 = v69;
      if (v69 < 1)
        return (char *)FigSignalErrorAt();
      v49 = valuePtr;
      v50 = v69;
      do
      {
        if ((int)v49 <= (int)v50)
          v50 %= v49;
        else
          v49 %= v50;
      }
      while (v49 && v50);
      if (!v49)
        v49 = v50;
      v51 = valuePtr / v49;
      *(_DWORD *)(DerivedStorage + 5128) = valuePtr / v49;
      v52 = v48 / (int)v49;
      *(_DWORD *)(DerivedStorage + 5132) = v52;
      if (v51 != 1 || v52 != 1)
      {
        if (v52 == 33)
        {
          switch(v51)
          {
            case 'P':
              result = 0;
              v54 = 9;
              goto LABEL_119;
            case '@':
              result = 0;
              v54 = 12;
              goto LABEL_119;
            case '(':
              result = 0;
              v54 = 5;
              goto LABEL_119;
          }
        }
        else
        {
          if (v52 == 11)
          {
            switch(v51)
            {
              case 0xAu:
                result = 0;
                v54 = 3;
                break;
              case 0xBu:
              case 0xDu:
              case 0xEu:
              case 0x11u:
              case 0x13u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
                goto LABEL_172;
              case 0xCu:
                result = 0;
                v54 = 2;
                break;
              case 0xFu:
                result = 0;
                v54 = 11;
                break;
              case 0x10u:
                result = 0;
                v54 = 4;
                break;
              case 0x12u:
                result = 0;
                v54 = 10;
                break;
              case 0x14u:
                result = 0;
                v54 = 7;
                break;
              case 0x18u:
                result = 0;
                v54 = 6;
                break;
              default:
                if (v51 != 32)
                  goto LABEL_172;
                result = 0;
                v54 = 8;
                break;
            }
            goto LABEL_119;
          }
          if (v51 == 160 && v52 == 99)
          {
            result = 0;
            v54 = 13;
            goto LABEL_119;
          }
        }
LABEL_172:
        result = 0;
        v54 = 255;
        goto LABEL_119;
      }
      result = 0;
    }
    else
    {
      result = 0;
      *(_QWORD *)(DerivedStorage + 5128) = 0x100000001;
    }
    v54 = 1;
LABEL_119:
    *(_DWORD *)(DerivedStorage + 5124) = v54;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECF48]))
  {
    if (a3)
    {
      if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA8D88]))
      {
        result = 0;
        v53 = 1;
      }
      else if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA8D78]))
      {
        result = 0;
        v53 = 5;
      }
      else
      {
        if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA8DA0]))
          return (char *)FigSignalErrorAt();
        result = 0;
        v53 = 6;
      }
    }
    else
    {
      result = 0;
      v53 = 2;
    }
    *(_DWORD *)(DerivedStorage + 5108) = v53;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED238]))
  {
    if (a3 && !CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA8ED8]))
    {
      IntegerCodePointForString = CVTransferFunctionGetIntegerCodePointForString(a3);
      result = 0;
    }
    else
    {
      result = 0;
      IntegerCodePointForString = 2;
    }
    *(_DWORD *)(DerivedStorage + 5112) = IntegerCodePointForString;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED290]))
  {
    if (a3)
    {
      if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA8F18]))
      {
        result = 0;
        v56 = 1;
      }
      else if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA8F10]))
      {
        result = 0;
        v56 = 6;
      }
      else
      {
        if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0CA8F30]))
          return (char *)FigSignalErrorAt();
        result = 0;
        v56 = 7;
      }
    }
    else
    {
      result = 0;
      v56 = 2;
    }
    *(_DWORD *)(DerivedStorage + 5116) = v56;
    return result;
  }
  v57 = (char *)(DerivedStorage + 5224);
  if (CFEqual(a2, CFSTR("NegotiationDetails")))
  {
    *v57 = 0;
    if (!a3)
      return 0;
    v58 = CFStringGetTypeID();
    if (v58 != CFGetTypeID(a3))
      return 0;
    v59 = a3;
    v60 = v57;
    v61 = 1001;
    goto LABEL_140;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CED178]))
    return 0;
  if (CFEqual(a2, CFSTR("UsingCellular")))
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
    result = 0;
    *(_DWORD *)(DerivedStorage + 6232) = valuePtr;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CEDD18]))
  {
    result = 0;
    *(_QWORD *)(DerivedStorage + 6304) = a3;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CECFC0]))
  {
    if (!a3)
      return 0;
    v62 = CFBooleanGetTypeID();
    if (v62 != CFGetTypeID(a3))
      return 0;
    v63 = CFBooleanGetValue((CFBooleanRef)a3);
    result = 0;
    v57[1088] = v63;
    return result;
  }
  if (CFEqual(a2, CFSTR("FaceRect")))
  {
    if (!a3)
      return 0;
    v64 = CFBooleanGetTypeID();
    if (v64 != CFGetTypeID(a3))
      return 0;
    v65 = CFBooleanGetValue((CFBooleanRef)a3);
    result = 0;
    v57[1048] = v65 != 0;
    return result;
  }
  if (!CFEqual(a2, CFSTR("CommandLineParametersExtraOptions")))
    return (char *)FigSignalErrorAt();
  if (!a3)
    return (char *)FigSignalErrorAt();
  v66 = CFStringGetTypeID();
  if (v66 != CFGetTypeID(a3))
    return (char *)FigSignalErrorAt();
  v67 = CFStringGetLength(a3) + 1;
  v68 = *(void **)(DerivedStorage + 6320);
  if (v68)
    free(v68);
  result = (char *)malloc_type_malloc(v67, 0xD3650EC0uLL);
  *(_QWORD *)(DerivedStorage + 6320) = result;
  if (result)
  {
    v60 = result;
    v59 = a3;
    v61 = v67;
LABEL_140:
    CFStringGetCString(v59, v60, v61, 0);
    return 0;
  }
  return result;
}

double sub_1B689CB50(uint64_t a1, int a2, uint64_t a3, int a4, int a5, double a6, double a7)
{
  uint64_t v7;
  double v9;
  int v10;
  double result;

  *(double *)a1 = a6;
  *(double *)(a1 + 16) = a7;
  *(_DWORD *)(a1 + 36) = a2;
  if (*(_DWORD *)(a1 + 64) == 2)
  {
    v7 = *(_QWORD *)(a1 + 56);
    if (a3 - v7 < 20 * a4)
      a5 = 1;
    v9 = a6 / a7;
    if (a3 >= 1 && a4 >= 1 && v7 >= 1 && a5)
      v9 = (double)(a3 - v7) * a6 / (double)a4;
    v10 = (*(_DWORD *)(a1 + 28) - (int)v9) & ~((*(_DWORD *)(a1 + 28) - (int)v9) >> 31);
    *(_DWORD *)(a1 + 28) = v10;
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 28);
  }
  *(_QWORD *)(a1 + 56) = a3;
  result = (double)a2 * a6 / 1000.0;
  *(_DWORD *)(a1 + 32) = ((int)result - v10) & ~(((int)result - v10) >> 31);
  return result;
}

uint64_t sub_1B689CBF8(uint64_t result, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v6;
  char v7;
  char v9;
  char v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v19;

  v6 = *(_QWORD *)(*(_QWORD *)(result + 176) + 272) + 16 * a6;
  if (a3 == 6)
  {
    *(_DWORD *)v6 = *a2;
    *(_DWORD *)(v6 + 4) = a2[1];
    *(_BYTE *)(v6 + 8) = a4;
    *(_BYTE *)(v6 + 9) = a5;
    v11 = *(unsigned __int8 *)(result + 31);
    v12 = v11 == 2;
    if (v11 == 2)
      v13 = a4 >> (a4 != 32);
    else
      v13 = a4;
    if (v12)
      v14 = a5 >> (a5 != 32);
    else
      v14 = a5;
    v15 = *(_QWORD *)(result + 256);
    v10 = *(_BYTE *)(v15 + v13);
    v16 = v15 + v14;
    goto LABEL_25;
  }
  if (a3 == 5)
  {
    v10 = 0;
    v17 = a2[1];
    *(_DWORD *)v6 = 0;
    *(_DWORD *)(v6 + 4) = v17;
    *(_BYTE *)(v6 + 8) = 32;
    *(_BYTE *)(v6 + 9) = a5;
    v19 = a5 != 32 && *(_BYTE *)(result + 31) == 2;
    v16 = *(_QWORD *)(result + 256) + (a5 >> v19);
LABEL_25:
    v7 = *(_BYTE *)(v16 + 33);
    goto LABEL_26;
  }
  if (a3 != 4)
    return result;
  v7 = 0;
  *(_DWORD *)v6 = *a2;
  *(_DWORD *)(v6 + 4) = 0;
  *(_BYTE *)(v6 + 8) = a4;
  *(_BYTE *)(v6 + 9) = 32;
  v9 = a4 != 32 && *(_BYTE *)(result + 31) == 2;
  v10 = *(_BYTE *)(*(_QWORD *)(result + 256) + ((unint64_t)a4 >> v9));
LABEL_26:
  *(_BYTE *)(v6 + 12) = v10;
  *(_BYTE *)(v6 + 13) = v7;
  return result;
}

void sub_1B689CCEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  int32x2_t v20;
  unsigned int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int32x2_t v25;
  int32x2_t v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  BOOL v59;
  int v60;
  unsigned int v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  int v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  int v79;
  uint64_t v80;
  char v81;
  _DWORD *v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  int v88;
  int v89;
  char v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t j;
  int v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  int v102;
  uint64_t k;
  uint64_t i;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unsigned __int8 *v122;
  uint64_t v123;
  int v124;
  int v125;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  int v143;
  _DWORD v144[4];
  _BYTE v145[288];
  uint64_t v146;

  v1 = a1;
  v146 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  HIDWORD(v129) = *(unsigned __int8 *)(a1 + 25);
  LODWORD(v129) = *(unsigned __int8 *)(a1 + 31);
  v4 = *(unsigned __int8 *)(a1 + 26);
  v128 = *(unsigned __int8 *)(a1 + 27);
  v130 = *(unsigned __int8 *)(a1 + 32);
  v121 = *(unsigned __int16 *)(a1 + 28);
  v122 = (unsigned __int8 *)(*(_QWORD *)a1 + 19136);
  v123 = *(_QWORD *)(a1 + 48);
  v124 = *(unsigned __int8 *)(a1 + 56);
  v135 = *v122;
  v134 = *(unsigned __int8 *)(*(_QWORD *)a1 + 19137);
  v136 = *(unsigned __int8 *)(*(_QWORD *)a1 + 19138);
  v141 = *(unsigned __int8 *)(*(_QWORD *)a1 + 19139);
  if (*(_QWORD *)a1 && !*(_BYTE *)(a1 + 24))
  {
    v125 = *(unsigned __int8 *)(a1 + 26);
    v127 = *(_QWORD *)(a1 + 8);
    v119 = *(_QWORD *)(a1 + 16);
    v120 = *(unsigned __int8 *)(a1 + 33);
    v5 = *(_QWORD *)(v3 + 128);
    v138 = *(unsigned __int8 *)(a1 + 44);
    v6 = *(unsigned __int16 *)(v3 + 4560);
    v131 = v5;
    if (*(_WORD *)(v3 + 4560))
    {
      v142 = 0;
      v7 = 0;
      v140 = 0;
      v139 = 0;
      v137 = 0;
      v8 = 0;
      v9 = *(int *)(v3 + 232);
      v10 = *(unsigned __int16 *)(v3 + 4562);
      while (1)
      {
        if (!v10)
          goto LABEL_29;
        v11 = 0;
        v133 = v142 - 1;
        v12 = 4 * v142;
        v132 = v5;
        do
        {
          v13 = v142 + v11;
          v14 = off_1EF13A470(v5, v9);
          v15 = v14;
          v16 = (HIDWORD(v14) + 8) >> 4;
          v17 = sub_1B68F7888(sqrt((double)(int)v14));
          off_1EF13A468(v5, v9, *(_QWORD *)(v3 + 4736) + v12, *(_QWORD *)(v3 + 4744) + 4 * v12);
          *(_WORD *)(*(_QWORD *)(v3 + 4696) + 2 * v13) = (int)v17;
          *(_WORD *)(*(_QWORD *)(v3 + 4624) + 2 * v13) = v15;
          *(_BYTE *)(*(_QWORD *)(v3 + 4656) + v13) = v16;
          if (v7 <= v141 && v7 >= v136 && v11 >= v135 && v11 <= v134)
          {
            v18 = sub_1B68F7888(50.0 / (v17 + 1.0)) + 1;
            LODWORD(v140) = v140 + v15;
            v139 += v18 * v15;
            LODWORD(v137) = v16 + v137;
            HIDWORD(v140) += v18;
            ++HIDWORD(v137);
          }
          if (!v138)
          {
            if (v11)
            {
              v19 = *(_QWORD *)(v3 + 4656);
              v20.i32[1] = 128;
              v20.i32[0] = *(unsigned __int8 *)(v19 + v133 + v11);
              if (v7)
              {
                v21 = *(unsigned __int16 *)(v3 + 4562);
                v22 = (unsigned __int8 *)(v19 + v142 + v11 - v21);
                v20.i32[1] = *(unsigned __int8 *)(v19 + v133 + v11 - v21);
                goto LABEL_18;
              }
LABEL_21:
              v23 = 128;
              goto LABEL_22;
            }
            if (!v7)
            {
              v20 = (int32x2_t)0x8000000080;
              goto LABEL_21;
            }
            v19 = *(_QWORD *)(v3 + 4656);
            v21 = *(unsigned __int16 *)(v3 + 4562);
            v22 = (unsigned __int8 *)(v19 + v142 - v21);
            v20 = (int32x2_t)0x8000000080;
LABEL_18:
            v23 = *v22;
            if (v11 + 1 >= v21)
LABEL_22:
              v24 = 128;
            else
              v24 = *(unsigned __int8 *)(v19 + v142 + v11 - v21 + 1);
            v25 = vdup_n_s32(v16);
            v26 = vaba_s32(vmin_s32(vsub_s32((int32x2_t)vabd_u32((uint32x2_t)v25, (uint32x2_t)__PAIR64__(v24, v23)), vabd_s32(v20, v25)), 0), v20, v25);
            if ((int)(((v20.i32[0] + v23 + v24 + v20.i32[1] + 2) >> 2) - v16) >= 0)
              v27 = ((v20.i32[0] + v23 + v24 + v20.i32[1] + 2) >> 2) - v16;
            else
              v27 = v16 - ((v20.i32[0] + v23 + v24 + v20.i32[1] + 2) >> 2);
            v28 = v26.i32[0] - v26.i32[1] + ((v27 - v26.i32[0]) & ((int)(v27 - v26.i32[0]) >> 31));
            v29 = (v28 & (v28 >> 31)) + v26.i32[1];
            *(_BYTE *)(*(_QWORD *)(v3 + 4680) + v13) = v29;
            v8 += v29;
          }
          ++v11;
          v5 += 16;
          v10 = *(unsigned __int16 *)(v3 + 4562);
          v12 += 4;
        }
        while (v11 < v10);
        v142 += v11;
        v6 = *(unsigned __int16 *)(v3 + 4560);
        v5 = v132;
LABEL_29:
        v5 += 16 * v9;
        if (++v7 >= v6)
        {
          v30 = (v6 + 15) >> 4;
          v31 = v137;
          v32 = HIDWORD(v137);
          goto LABEL_32;
        }
      }
    }
    v32 = 0;
    v8 = 0;
    v140 = 0;
    v31 = 0;
    v139 = 0;
    v30 = 0;
LABEL_32:
    v33 = (v31 + (v32 >> 1)) / v32;
    *(_DWORD *)(v3 + 4664) = v33;
    v143 = v32 >> 1;
    if (v138)
    {
      v34 = *(unsigned __int16 *)(v3 + 4562);
      if ((v34 + 15) >> 4 < v30)
        v30 = (v34 + 15) >> 4;
      if (v6)
      {
        v35 = 0;
        v36 = 0;
        v37 = -v30;
        do
        {
          if (v34)
          {
            v38 = 0;
            v39 = v36 + v30;
            v40 = -v30;
            v41 = v30;
            do
            {
              v42 = *(_QWORD *)(v3 + 4656);
              if (v39 >= *(unsigned __int16 *)(v3 + 4560))
                v43 = *(unsigned __int16 *)(v3 + 4560);
              else
                v43 = v39;
              if (((v36 - v30) & ~((int)(v36 - v30) >> 31)) >= v43)
              {
                v45 = 0;
                v44 = 0;
              }
              else
              {
                v44 = 0;
                v45 = 0;
                v46 = v40 & ~(v40 >> 31);
                v47 = v38 + v30;
                if ((int)(v38 + v30) >= (int)v34)
                  v47 = v34;
                v48 = (v38 - v30) & ~((int)(v38 - v30) >> 31);
                v49 = v34;
                if ((int)v34 >= (int)v41)
                  v50 = v41;
                else
                  v50 = v34;
                v51 = v50 - v46;
                v52 = (unsigned __int8 *)(v42 + v46 + (v37 & ~(v37 >> 31)) * (unint64_t)v34);
                v53 = (v36 - v30) & ~((int)(v36 - v30) >> 31);
                do
                {
                  if (v47 > v48)
                  {
                    v54 = v52;
                    v55 = v51;
                    do
                    {
                      v56 = *v54++;
                      v45 += v56;
                      --v55;
                    }
                    while (v55);
                    v44 += v47 - v48;
                  }
                  ++v53;
                  v52 += v49;
                }
                while (v53 != v43);
              }
              v57 = (v45 + (v44 >> 1)) / v44;
              v58 = *(unsigned __int8 *)(v42 + v35);
              v59 = __OFSUB__(v58, v57);
              v60 = v58 - v57;
              if (!((v60 < 0) ^ v59 | (v60 == 0)))
                ++v8;
              if (v60 < 0)
                v60 = -v60;
              *(_BYTE *)(*(_QWORD *)(v3 + 4680) + v35) = v60;
              ++v38;
              ++v35;
              v34 = *(unsigned __int16 *)(v3 + 4562);
              ++v41;
              ++v40;
            }
            while (v38 < v34);
            v6 = *(unsigned __int16 *)(v3 + 4560);
          }
          ++v36;
          ++v37;
        }
        while (v36 < v6);
      }
    }
    v61 = ((int)v140 + v143) / v32;
    *(_DWORD *)(v3 + 4632) = v61;
    *(_DWORD *)(v3 + 4636) = v140;
    *(_DWORD *)(v3 + 4664) = v33;
    v62 = sub_1B68F7888(sqrt((double)((v143 + (v8 << 8)) / v32)));
    *(_DWORD *)(v3 + 4676) = v62;
    *(_WORD *)(v3 + 4724) = (int)sub_1B68F7888(sqrt((double)((v139 + (HIDWORD(v140) >> 1)) / HIDWORD(v140)))* (double)v62);
    *(_WORD *)(v3 + 4722) = sub_1B68F7888(sqrt((double)v61));
    v1 = a1;
    v2 = v127;
    v4 = v125;
    if (v130 != 1)
    {
      v63 = *(int *)(v3 + 232);
      v64 = *(_QWORD *)(v3 + 136);
      v65 = *(int *)(v3 + 248);
      bzero(*(void **)(v3 + 1480), *(unsigned int *)(v3 + 1468));
      v66 = *(unsigned __int16 *)(v3 + 1466);
      if (*(_WORD *)(v3 + 1466))
      {
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        LODWORD(v71) = *(unsigned __int16 *)(v3 + 1464);
        do
        {
          if ((_DWORD)v71)
          {
            v72 = 0;
            v73 = v131 + v67;
            v74 = v64 + v68;
            v75 = 4 * v70;
            do
            {
              v76 = 0;
              v77 = 4 * v75;
              v78 = 1;
              do
              {
                v79 = 0;
                v80 = 0;
                v81 = v78;
                v82 = (_DWORD *)(v74 + 8 * v76);
                v83 = 72 * v76;
                do
                {
                  v84 = &v145[v83 - 4 * (v79 & 1)];
                  *v84 = *v82;
                  v80 += 4;
                  v84[2] = v82[1];
                  v82 = (_DWORD *)((char *)v82 + v65);
                  v83 += 8;
                  ++v79;
                }
                while (v80 != 32);
                v78 = 0;
                v76 = 1;
              }
              while ((v81 & 1) != 0);
              v85 = 0;
              v86 = 1;
              do
              {
                v87 = 0;
                v88 = 0;
                v89 = 0;
                v90 = v86;
                do
                {
                  v89 += *(_DWORD *)(v3
                                   + 1488
                                   + 4
                                   * (((v145[72 * v85 + v87]
                                                    - v145[72 * v85 + 2 + v87]) >> 1)
                                                  + 255));
                  v88 += *(_DWORD *)(v3
                                   + 1488
                                   + 4
                                   * (((v145[72 * v85 + 1 + v87]
                                                    - v145[72 * v85 + 3 + v87]) >> 1)
                                                  + 255));
                  v87 += 2;
                }
                while (v87 != 62);
                v86 = 0;
                *(_DWORD *)((char *)v144 + ((8 * v85) | 4)) = v88;
                v144[2 * v85] = v89;
                v85 = 1;
              }
              while ((v90 & 1) != 0);
              if ((v144[2] + v144[0]) > 0x7F || (v144[3] + v144[1]) > 0x7F)
              {
                for (i = 0; i != 16; i += 4)
                  *(_DWORD *)(*(_QWORD *)(v3 + 1472) + v77 + i) = 210;
              }
              else
              {
                v91 = 0;
                v92 = 0;
                for (j = 0; j != 4; ++j)
                {
                  v94 = 0;
                  v95 = 0;
                  v96 = (_DWORD *)(v73 + 8 * (j & 1) + (int)(8 * v63 * (v92 >> 3)));
                  v97 = v91;
                  do
                  {
                    v98 = &v145[v97 - 4 * (v94 & 1)];
                    *v98 = *v96;
                    v95 += 4;
                    v98[2] = v96[1];
                    v96 = (_DWORD *)((char *)v96 + v63);
                    v97 += 8;
                    ++v94;
                  }
                  while (v95 != 32);
                  v92 += 4;
                  v91 += 72;
                }
                v99 = 0;
                v100 = v145;
                do
                {
                  v101 = 0;
                  v102 = 0;
                  do
                  {
                    v102 += *(_DWORD *)(v3
                                      + 4
                                      * (v100[v101] - (unint64_t)v100[v101 + 2])
                                      + 2508);
                    v101 += 2;
                  }
                  while (v101 != 62);
                  v144[v99++] = v102;
                  v100 += 72;
                }
                while (v99 != 4);
                for (k = 0; k != 4; ++k)
                  *(_DWORD *)(*(_QWORD *)(v3 + 1472) + v77 + k * 4) = v144[k];
              }
              ++v72;
              ++v70;
              v71 = *(unsigned __int16 *)(v3 + 1464);
              v74 += 16;
              v73 += 16;
              v75 += 4;
            }
            while (v72 < v71);
            v66 = *(unsigned __int16 *)(v3 + 1466);
          }
          ++v69;
          v68 += 8 * v65;
          v67 += 16 * v63;
        }
        while (v69 < v66);
      }
      sub_1B6904DDC(v3, v119, 0, (unsigned int *)(v3 + 4800), v120, 0, 0, 0xFFu, 0xFFu, 0, 0, 0);
      v1 = a1;
      v2 = v127;
      v4 = v125;
    }
  }
  if (!v4)
  {
    if (v2)
    {
      if (*(_BYTE *)(v1 + 34))
      {
        v105 = v2;
        v106 = v1;
        sub_1B690850C(*(_QWORD *)(v3 + 128), *(_QWORD *)(v2 + 128), *(unsigned int *)(v3 + 224), *(_DWORD *)(v3 + 192), *(unsigned int *)(v3 + 232), 0, 0, 0, 0, 0);
        v1 = v106;
        v2 = v105;
        v108 = fabsf(v107);
      }
      else
      {
        v108 = 0.0;
      }
      *(float *)(v3 + 5012) = v108;
      if (v129 && v128)
      {
        if (v124)
        {
          v109 = v134 - v135 + 1 + (v134 - v135 + 1) * (v141 - v136);
          *(_DWORD *)(v3 + 4828) = v123;
          v110 = (v123 + (v109 >> 1)) / v109;
          *(_WORD *)(v3 + 4832) = v110;
          *(_WORD *)(v3 + 4834) = v110;
          sub_1B68BF450(v3 + 4800, v2 + 4800, *(_DWORD *)(v3 + 4632));
        }
        else
        {
          v111 = v2;
          v112 = v1;
          if (!sub_1B68BB95C(*(unsigned __int8 **)(v2 + 488)))
          {
            v113 = v112;
            v114 = v111;
            *(_DWORD *)(*(_QWORD *)(v111 + 488) + 164) = 1;
            v115 = *(_QWORD *)(v111 + 488);
            if (*(_DWORD *)(v115 + 152))
            {
              sub_1B68BBBC8(v115);
              v113 = v112;
              v114 = v111;
            }
            v116 = *(unsigned __int8 *)(v113 + 30);
            v117 = v114;
            sub_1B6906A88(v121, v114, 0, 0, *(_DWORD *)(v3 + 4808), 0, v116, v3, (unsigned int *)(v3 + 4800));
            sub_1B68BF570(v3 + 4800, v116, v135, v134, v136, v141, *(_QWORD *)(v3 + 4624), *(_QWORD *)(v3 + 4680), v122[28], v3 + 19168, (float *)(v3 + 19312));
            if (v130 == 1)
              sub_1B68BF450(v3 + 4800, v117 + 4800, *(_DWORD *)(v3 + 4632));
            *(_WORD *)(v3 + 4838) = *(_WORD *)(v3 + 4832);
            v118 = *(_QWORD *)(v117 + 488);
            *(_DWORD *)(v118 + 64) = 1;
            *(_QWORD *)(v118 + 56) = 0x100000001;
            *(_OWORD *)(v118 + 152) = xmmword_1B6917C40;
            *(_DWORD *)(*(_QWORD *)(v117 + 488) + 164) = 0;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(v3 + 5012) = 0;
      if (v129 && v128)
        *(_WORD *)(v3 + 4838) = *(_WORD *)(v3 + 4724);
    }
  }
}

uint64_t *sub_1B689D7D0(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  if (*((_DWORD *)result + 2))
  {
    v1 = 0;
    v2 = 0;
    do
    {
      v3 = *result;
      v4 = *(_QWORD *)(*result + v1);
      if (v4)
      {
        *(_BYTE *)(v4 + 1) = 0;
        v3 = *result;
      }
      v5 = (_QWORD *)(v3 + v1);
      *v5 = 0;
      v5[1] = 0;
      ++v2;
      v1 += 16;
    }
    while (v2 < *((unsigned int *)result + 2));
  }
  *((_DWORD *)result + 7) = 0;
  result[5] = 0;
  *((_DWORD *)result + 12) = *((_DWORD *)result + 8);
  return result;
}

uint64_t sub_1B689D824(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = (_DWORD *)(result + 48);
  v3 = *(_DWORD *)(result + 48);
  if (a2)
  {
    v4 = (v3 - 1);
    if (v3 >= 1)
    {
      v5 = *(_QWORD *)result + 16 * v4;
      *(_QWORD *)(*(_QWORD *)result + 16 * (v3 - 1)) = a2;
      *(_DWORD *)(v5 + 8) = 0;
      v6 = (_DWORD *)(v5 + 8);
      --v3;
LABEL_10:
      if (*(_BYTE *)(a2 + 1395))
        *v6 = 4;
      goto LABEL_12;
    }
  }
  LODWORD(v7) = *(_DWORD *)(result + 8);
  v8 = *(_QWORD *)(*(_QWORD *)result + 16 * (v7 - 1));
  if (v8)
  {
    *(_BYTE *)(v8 + 1) = 0;
    LODWORD(v7) = *(_DWORD *)(result + 8);
  }
  v4 = v3;
  if ((int)v7 >= 2)
  {
    v7 = v7;
    do
      *(_OWORD *)(*(_QWORD *)result + 16 * (v7 - 1)) = *(_OWORD *)(*(_QWORD *)result
                                                                                 + 16 * (v7 - 2));
    while (v7-- > 2);
  }
  v10 = *(_QWORD *)result + 16 * v3;
  *(_QWORD *)v10 = a2;
  *(_DWORD *)(v10 + 8) = 0;
  v6 = (_DWORD *)(v10 + 8);
  if (a2)
    goto LABEL_10;
LABEL_12:
  *(_DWORD *)(result + 48) = v3;
  if (**(_QWORD **)(result + 16))
    ++*(_DWORD *)(result + 28);
  if (a2)
  {
    v2 = (_DWORD *)(result + 40);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)result + 16 * v4 + 8) |= 2u;
    if (v3 >= *(_DWORD *)(result + 32))
      return result;
  }
  ++*v2;
  return result;
}

uint64_t sub_1B689D924(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t result;

  free(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  free(*(void **)(a1 + 184));
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  free(*(void **)(a1 + 200));
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_1B689D7D0((uint64_t *)a1);
  free(*(void **)a1);
  free(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 112) = 0;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    sub_1B68BF414(v2);
    free(*(void **)(a1 + 72));
    *(_QWORD *)(a1 + 72) = 0;
  }
  v3 = *(void ***)(a1 + 232);
  if (v3)
  {
    free(*v3);
    free(v3[6]);
    free(v3[7]);
    free(v3[8]);
    MEMORY[0x1BCC9814C](v3, 0x1020C40699F9AC8);
  }
  result = *(_QWORD *)(a1 + 56);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_1B689D9F0(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t j;
  int v51;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  __IOSurface *v66;
  __int16 v67;
  __int16 v68;
  __IOSurface *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  _QWORD *v75;
  int v76;
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  int v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int16 *v84;
  int v85;
  BOOL v86;
  unsigned __int16 *v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __IOSurface *v101;
  __IOSurface *v102;
  char *BaseAddress;
  char *v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  __int128 *v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  unsigned int v134;
  char v135;
  uint64_t v136;
  unsigned int v137;
  int v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  char v142;
  uint64_t v143;
  unsigned int v144;
  int v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  _BOOL4 v151;
  _BOOL4 v152;
  BOOL v153;
  int v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  size_t v163;
  int v164;
  uint64_t v165;
  _WORD *v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  int v174;
  signed int v175;
  const void *v176;
  void *v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  const void *v190;
  BOOL v191;
  int v192;
  void *v193;
  const void *v194;
  void *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  size_t v208;
  uint64_t v209;
  uint64_t v210;
  size_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 *v217;
  uint64_t v218;
  unsigned int v219;
  _QWORD *v220;
  uint64_t (*v221)(uint64_t);
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  uint64_t v239;
  uint64_t *v240;
  char v241;
  uint64_t v242;
  _QWORD *v243;
  char v244;
  unsigned int v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  int v250;
  uint64_t v251;
  unsigned int v252;
  _QWORD *v253;
  uint64_t v254;
  _BYTE *v255;
  int v256;
  uint64_t v257;
  char v258;
  char v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  _BOOL4 v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  int v275;
  uint64_t v276;
  BOOL v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  BOOL v281;
  uint64_t v282;
  double v283;
  char v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  unsigned int v289;
  char v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  int v312;
  unint64_t v313;
  unint64_t v314;
  BOOL v316;
  int v317;
  float v318;
  uint64_t v319;
  unsigned int v320;
  uint64_t v321;
  char v322;
  char v323;
  int v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  BOOL v328;
  BOOL v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  BOOL *v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  BOOL v343;
  int v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  int v353;
  int v354;
  int v355;
  char v356;
  uint64_t v357;
  int v358;
  int v359;
  uint64_t v360;
  int v361;
  int v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  unsigned int v376;
  uint64_t v377;
  unsigned int v378;
  unsigned int v379;
  __int128 *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unsigned int v385;
  unsigned int v386;
  int v387;
  uint64_t v388;
  BOOL v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unsigned int v402;
  unsigned int v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  int v410;
  uint64_t v411;
  _QWORD *v412;
  int v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  uint64_t v417;
  unsigned int v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int v421;
  int v422;
  unsigned int v423;
  uint64_t v424;
  unint64_t v425;
  int v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  int *v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  uint64_t v435;
  int v436;
  __int16 v437;
  unsigned __int16 v438;
  __int16 v439;
  unsigned int v440;
  uint64_t v441;
  unint64_t v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  unsigned int v450;
  unsigned int v451;
  int *v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  int v457;
  unsigned int v458;
  unsigned int v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unsigned int v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unsigned __int8 *v473;
  unsigned int v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  unsigned int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  int v484;
  unsigned __int16 *v485;
  uint64_t v486;
  int v487;
  unsigned int v488;
  int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  int v494;
  int v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  int v499;
  int v500;
  unsigned int v501;
  unsigned int v502;
  unsigned int v503;
  int v504;
  unsigned __int16 v505;
  unsigned int v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  unsigned int v510;
  unsigned int v511;
  unsigned int v512;
  uint64_t v513;
  unsigned int v514;
  uint64_t v515;
  uint64_t v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int v519;
  _BYTE *v520;
  int v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t *v526;
  uint64_t v527;
  int v528;
  uint64_t *v529;
  uint64_t v530;
  uint64_t v531;
  _BOOL4 v532;
  _BOOL4 v533;
  int v534;
  unsigned __int8 v535;
  char v536;
  unsigned int v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  int v543;
  unsigned int v544;
  unsigned int v545;
  unsigned int v546;
  uint64_t v547;
  double v548;
  int v549;
  int v551;
  int v552;
  int v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  int *v559;
  uint64_t v560;
  _BYTE *v561;
  int v562;
  unsigned int v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int v566;
  uint64_t v567;
  unsigned int v568;
  int v569;
  uint64_t v570;
  uint64_t v571;
  size_t v572;
  int v573;
  uint64_t v574;
  double v575;
  double v576;
  double v577;
  uint64_t v578;
  double v579;
  double v580;
  double v581;
  double v582;
  double v583;
  double v584;
  double v585;
  double v586;
  double v587;
  double v588;
  double v589;
  double v590;
  uint64_t v591;
  unsigned int v592;
  int8x8_t *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unsigned int v599;
  size_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unsigned __int8 *v606;
  unsigned int v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  __int16 v611;
  __int16 v612;
  int v613;
  int v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  uint64_t *v626;
  int8x8_t *v627;
  int v628;
  int v629;
  signed int v630;
  int v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  int v635;
  int v636;
  unsigned int v637;
  uint64_t v638;
  int v639;
  BOOL *v640;
  int v641;
  BOOL v642;
  unsigned int *v643;
  uint64_t v644;
  _BYTE *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unsigned __int16 *v651;
  uint64_t v652;
  uint64_t v653;
  _BOOL4 v656;
  _BOOL4 v657;
  uint64_t v658;
  uint64_t v659;
  unsigned int v660;
  BOOL v661;
  unsigned int v662;
  uint64_t v664;
  unsigned int v665;
  int v667;
  unsigned int v668;
  int v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  int v673;
  uint64_t v674;
  uint64_t v675;
  int v676;
  uint64_t v677;
  unint64_t v678;
  uint64_t v679;
  __int16 *v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  int v684;
  int v685;
  int v686;
  uint64_t v687;
  int v688;
  uint64_t v689;
  unsigned int v690;
  uint64_t v691;
  uint64_t v692;
  int v693;
  int v694;
  uint64_t v695;
  unsigned int v696;
  uint64_t v697;
  unsigned int v698;
  unint64_t v699;
  unint64_t v700;
  __int128 v701;
  uint64_t v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  __int128 v710;
  uint64_t v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  uint64_t v722;

  v6 = a5;
  v7 = a4;
  v8 = (uint64_t)a3;
  v9 = a1;
  v722 = *MEMORY[0x1E0C80C00];
  v651 = (unsigned __int16 *)(a5 + 19112);
  v10 = a5 + 5024;
  v11 = a4 + 205800;
  v645 = a3 + 4813;
  if (!a5)
  {
    v12 = 0;
    if (a2)
      goto LABEL_13;
LABEL_11:
    v15 = -1;
    goto LABEL_14;
  }
  *(_BYTE *)(a5 + 1) = 1;
  if (!a2)
  {
    v12 = 0;
    goto LABEL_11;
  }
  if (!a3[402])
    goto LABEL_12;
  v12 = 0;
  v13 = *(unsigned int *)(a5 + 1276);
  if ((v13 & 0x80000000) != 0)
    goto LABEL_13;
  v14 = *(_QWORD *)(a2 + 24);
  if (!v14)
    goto LABEL_13;
  if (*(_DWORD *)(a2 + 12) > v13)
    v12 = *(unsigned __int8 *)(v14 + 8 * v13 + 7) != 0;
  else
LABEL_12:
    v12 = 0;
LABEL_13:
  v15 = *(unsigned __int8 *)(a2 + 532) != 1;
LABEL_14:
  v681 = a4 + 1400;
  v661 = (v15 + 1) < 2;
  v16 = a5;
  v652 = a4 + 205800;
  v653 = a5 + 5024;
  if (!a4)
    goto LABEL_418;
  v17 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 48);
  v659 = *(_QWORD *)v17;
  v635 = *(_DWORD *)(v17 + 8);
  if (*(_BYTE *)(a4 + 208087))
  {
    if (a5)
    {
      v18 = *(_QWORD *)(a4 + 205808);
      if (v18)
      {
        v9 = a1;
        v659 = sub_1B68B459C(v18, a5);
      }
    }
  }
  v19 = *(_QWORD *)(v11 + 2320);
  if (v19 && *(_BYTE *)(v19 + 3462) == 1)
  {
    v20 = v7;
    v21 = *(_QWORD *)(v11 + 8);
    v656 = v12;
    if (*(_BYTE *)(v11 + 134))
    {
      v718 = 0uLL;
      v719 = 0uLL;
      v716 = 0uLL;
      v717 = 0uLL;
      v714 = 0uLL;
      v715 = 0uLL;
      v712 = 0uLL;
      v713 = 0uLL;
      v22 = v6;
      v23 = *(_DWORD *)(v19 + 3452);
      v24 = *(_DWORD *)(v19 + 3456);
      v25 = sub_1B68B436C(v21, &v712, 1, 0);
      v26 = sub_1B68B459C(v21, v22);
      if (v25)
      {
        v27 = v25;
        v28 = (uint64_t *)&v712;
        do
        {
          v29 = *v28++;
          *(_BYTE *)(v29 + 32) = 1;
          --v27;
        }
        while (v27);
      }
      if (v26)
        *(_BYTE *)(v26 + 32) = 1;
      v9 = a1;
      v12 = v656;
      if (!v25)
        goto LABEL_62;
      v30 = 0;
      v31 = 0;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)((char *)&v712 + v30) + 1356))
          ++v31;
        v30 += 8;
      }
      while (8 * v25 != v30);
      v32 = 0;
      v33 = (char *)&v712 + 8;
      v34 = 1;
      do
      {
        v35 = v32 + 1;
        if (v32 + 1 < (unint64_t)v25)
        {
          v36 = v33;
          v37 = v25;
          do
          {
            v38 = *((_QWORD *)&v712 + v32);
            if (*(_DWORD *)(v38 + 1276) < *(_DWORD *)(*(_QWORD *)v36 + 1276))
            {
              *((_QWORD *)&v712 + v32) = *(_QWORD *)v36;
              *(_QWORD *)v36 = v38;
            }
            --v37;
            v36 += 8;
          }
          while (v34 != v37);
        }
        ++v34;
        v33 += 8;
        ++v32;
      }
      while (v35 != v25);
      if (v31)
      {
        v39 = v25 - 1;
        if ((int)v39 >= 1)
        {
          v40 = v25 - 1;
          do
          {
            v41 = *((_QWORD *)&v712 + v39);
            if (*(_BYTE *)(v41 + 1356) && (v40 & 0x80000000) == 0)
            {
              *((_QWORD *)&v712 + v39) = *((_QWORD *)&v712 + v40);
              *((_QWORD *)&v712 + v40--) = v41;
            }
            v149 = v39-- <= 0;
          }
          while (!v149);
        }
      }
      for (i = 0; i != v25; ++i)
        *((_DWORD *)&v703 + i) = *(_DWORD *)(*((_QWORD *)&v712 + i) + 60);
      v43 = 0;
      v44 = (char *)&v703 + 4;
      v45 = 1;
      do
      {
        v46 = v43 + 1;
        if (v43 + 1 < (unint64_t)v25)
        {
          v47 = (unsigned int *)v44;
          v48 = v25;
          do
          {
            v49 = *((_DWORD *)&v703 + v43);
            if (v49 < *v47)
            {
              *((_DWORD *)&v703 + v43) = *v47;
              *v47 = v49;
            }
            --v48;
            ++v47;
          }
          while (v45 != v48);
        }
        ++v45;
        v44 += 4;
        ++v43;
      }
      while (v46 != v25);
      for (j = 0; j != v25; ++j)
        *(_DWORD *)(*((_QWORD *)&v712 + j) + 60) = *((_DWORD *)&v703 + j);
      v51 = v31 + 1;
      v52 = v25 >= *(_DWORD *)(v19 + 2980) - 1 && v25 == v51;
      if (!v52)
      {
LABEL_62:
        v11 = v652;
        *(_BYTE *)(*(_QWORD *)(v652 + 2320) + 3462) = 0;
LABEL_132:
        v6 = a5;
        v7 = v20;
        goto LABEL_133;
      }
      v78 = 0;
      v79 = 0;
      v80 = v19 + 224;
      v81 = (int *)(v19 + 3260);
      v82 = v19 + 224;
      do
      {
        v83 = *((_QWORD *)&v712 + v78);
        *(_DWORD *)v82 = *(_DWORD *)(v83 + 60);
        *(_DWORD *)(v82 + 4) = *(_DWORD *)(v83 + 1276);
        if (*(_BYTE *)(v83 + 1356))
        {
          *(_DWORD *)(v82 + 8) = 2;
          *(_DWORD *)(v82 + 4) = *(_DWORD *)(v83 + 1308);
          ++v79;
        }
        else
        {
          *(_DWORD *)(v82 + 8) = 1;
        }
        v84 = (unsigned __int16 *)(v83 + 19112);
        *(_QWORD *)(v82 + 16) = *(int *)(v83 + 1332);
        *(_DWORD *)(v82 + 24) = *(_DWORD *)(v83 + 1336);
        *(_DWORD *)(v82 + 44) = *(unsigned __int8 *)(v83 + 25);
        v85 = *(unsigned __int8 *)(v83 + 19129);
        v86 = v85 == 0;
        if (v85)
          v87 = v84 + 4;
        else
          v87 = v84;
        if (v86)
          v88 = 1;
        else
          v88 = 5;
        *(_DWORD *)(v82 + 28) = *v87;
        v89 = v84[v88];
        *(_DWORD *)(v82 + 32) = 0;
        *(_DWORD *)(v82 + 36) = v89;
        *(_DWORD *)(v82 + 40) = 0;
        *(_DWORD *)(v82 + 68) = *(v81 - 1);
        v90 = *v81;
        v81 += 2;
        *(_DWORD *)(v82 + 72) = v90;
        ++v78;
        v82 += 80;
      }
      while (v25 != v78);
      v91 = 0;
      *(_DWORD *)(v19 + 1584) = v23;
      *(_DWORD *)(v19 + 1588) = v79;
      *(_DWORD *)(v19 + 1596) = v24;
      *(_DWORD *)(v19 + 1592) = v25;
      v92 = v19 + 8 * v25;
      v93 = v80 + 80 * v25;
      *(_DWORD *)(v93 + 68) = *(_DWORD *)(v92 + 3256);
      *(_DWORD *)(v93 + 72) = *(_DWORD *)(v92 + 3260);
      while (1)
      {
        v94 = 0;
        v11 = v652;
        while (1)
        {
          v95 = *((_QWORD *)&v712 + v94);
          if (*(_DWORD *)(v95 + 60) == *(_DWORD *)(v80 + 80 * v91))
            break;
          if (v25 == ++v94)
            goto LABEL_129;
        }
        v96 = *(_BYTE *)(v95 + 19129) ? 160 : 128;
        v97 = *(_BYTE *)(v95 + 19129) ? 168 : 136;
        if (v25 == (_DWORD)v94 || *(_DWORD *)(*((_QWORD *)&v712 + v94) + 60) == -1)
          break;
        v647 = v20;
        v98 = *(_QWORD *)(v95 + v97);
        v99 = *(_QWORD *)(v95 + v96);
        v100 = *(_DWORD *)(v95 + 232);
        v688 = *(_DWORD *)(v95 + 228);
        v694 = *(_DWORD *)(v95 + 196);
        v101 = IOSurfaceLookup(*(_DWORD *)(v80 + 80 * v91 + 68));
        if (v101)
        {
          v102 = v101;
          v703 = 0uLL;
          v701 = 0uLL;
          IOSurfaceLock(v101, 0, 0);
          v703 = 0uLL;
          v701 = 0uLL;
          BaseAddress = (char *)IOSurfaceGetBaseAddress(v102);
          v104 = &BaseAddress[*(int *)(v19 + 3568)];
          *(_QWORD *)&v703 = BaseAddress;
          *((_QWORD *)&v703 + 1) = v104;
          *(_QWORD *)&v701 = v99;
          *((_QWORD *)&v701 + 1) = v98;
          HIDWORD(v711) = v100;
          LODWORD(v711) = v100;
          if (v99)
            v105 = BaseAddress == 0;
          else
            v105 = 1;
          if (!v105)
          {
            if (*(_BYTE *)(v19 + 3544))
              v106 = (v694 + 15) & 0xFFFFFFF0;
            else
              v106 = (v694 + 31) & 0xFFFFFFE0;
            off_1EF13A058(&v703, &v701, &v711, (v688 + 15) & 0xFFFFFFF0, v106);
          }
          IOSurfaceUnlock(v102, 0, 0);
          CFRelease(v102);
        }
        ++v91;
        v9 = a1;
        v20 = v647;
        v12 = v656;
        if (v91 == v25)
        {
          v11 = v652;
          v10 = v653;
          goto LABEL_91;
        }
      }
LABEL_129:
      v10 = v653;
LABEL_130:
      *(_BYTE *)(*(_QWORD *)(v11 + 2320) + 3462) = 0;
      *(_BYTE *)(v11 + 135) = 0;
    }
    else
    {
      v718 = 0uLL;
      v719 = 0uLL;
      v716 = 0uLL;
      v717 = 0uLL;
      v714 = 0uLL;
      v715 = 0uLL;
      v712 = 0uLL;
      v713 = 0uLL;
      v53 = sub_1B68B436C(v21, &v712, 1, 0);
      v54 = sub_1B68B459C(v21, v6);
      if (v53)
      {
        v55 = v53;
        v56 = (uint64_t *)&v712;
        do
        {
          v57 = *v56++;
          *(_BYTE *)(v57 + 32) = 1;
          --v55;
        }
        while (v55);
      }
      if (v54)
        *(_BYTE *)(v54 + 32) = 1;
      v9 = a1;
      if (v53)
      {
        v58 = 0;
        v59 = v19 + 224;
        v60 = v53;
        a6.n128_u32[0] = 1;
        do
        {
          v61 = 0;
          while (1)
          {
            v62 = *((_QWORD *)&v712 + v61);
            if (*(_DWORD *)(v62 + 60) == *(_DWORD *)(v59 + 80 * v58))
              break;
            if (v60 == ++v61)
              goto LABEL_92;
          }
          v63 = *((_QWORD *)&v712 + v61);
          if (*(_DWORD *)(v63 + 60) == -1)
            goto LABEL_92;
          v646 = v20;
          v676 = *(_DWORD *)(v62 + 232);
          v693 = *(_DWORD *)(v62 + 228);
          v64 = *(_DWORD *)(v62 + 196);
          v687 = v59;
          v65 = v59 + 80 * v58;
          v66 = IOSurfaceLookup(*(_DWORD *)(v65 + 68));
          v67 = *(_WORD *)(v65 + 28);
          *(_WORD *)(v63 + 19112) = v67;
          v68 = *(_WORD *)(v65 + 36);
          *(_WORD *)(v63 + 19114) = v68;
          *(_BYTE *)(v63 + 25) = *(_DWORD *)(v65 + 44);
          *(_BYTE *)(v63 + 19129) = 0;
          *(_WORD *)(v63 + 19120) = v67;
          *(_WORD *)(v63 + 19122) = v68;
          if (v66)
          {
            v69 = v66;
            v703 = 0uLL;
            v701 = 0uLL;
            IOSurfaceLock(v66, 0, 0);
            v703 = 0uLL;
            v701 = 0uLL;
            v70 = (char *)IOSurfaceGetBaseAddress(v69);
            v71 = &v70[*(int *)(v19 + 3568)];
            *(_QWORD *)&v703 = v70;
            *((_QWORD *)&v703 + 1) = v71;
            v701 = *(_OWORD *)(v62 + 128);
            HIDWORD(v711) = v676;
            LODWORD(v711) = v676;
            if ((_QWORD)v701 && v70)
            {
              if (*(_BYTE *)(v19 + 3544))
                v72 = (v64 + 15) & 0xFFFFFFF0;
              else
                v72 = (v64 + 31) & 0xFFFFFFE0;
              off_1EF13A060(&v701, &v711, &v703, (v693 + 15) & 0xFFFFFFF0, v72);
            }
            IOSurfaceUnlock(v69, 0, 0);
            CFRelease(v69);
          }
          v73 = *(_QWORD *)(v62 + 488);
          if (v73)
          {
            *(_DWORD *)(v73 + 64) = 1;
            *(_QWORD *)(v73 + 56) = 0x100000001;
            *(_OWORD *)(v73 + 152) = xmmword_1B6917C40;
            v74 = *(unsigned __int8 **)(v62 + 488);
          }
          else
          {
            v74 = 0;
          }
          v20 = v646;
          v10 = v653;
          v9 = a1;
          if (sub_1B68BB95C(v74))
          {
LABEL_92:
            v11 = v652;
            v12 = v656;
            goto LABEL_130;
          }
          v76 = v64 / 16;
          v75 = *(_QWORD **)(v62 + 488);
          sub_1B68FDFB0(*(_QWORD *)(v75[2] + 32) - (32 * *(_DWORD *)(v75[2] + 136)) - 32, v75[10], v75[11], v75[12], *(_DWORD *)(v75[2] + 136), v693 / 16, v76, 0, v76);
          v77 = sub_1B68FE2A4;
          if (!byte_1EF13A090)
            v77 = 0;
          v77(*(_QWORD *)(v62 + 488));
          sub_1B68FF2F8((_QWORD *)(v62 + 96), 1);
          sub_1B68FE524(*(_QWORD *)(*(_QWORD *)(v62 + 488) + 16), 0, v76);
          v59 = v687;
          v9 = a1;
          ++v58;
        }
        while (v58 != v60);
      }
      v11 = v652;
      v12 = v656;
LABEL_91:
      *(_BYTE *)(v11 + 133) = *(_BYTE *)(v11 + 134);
    }
    v8 = (uint64_t)a3;
    goto LABEL_132;
  }
LABEL_133:
  if (v6 && *(_BYTE *)(v7 + 1057) == 1)
  {
    v657 = v12;
    v107 = v7;
    v108 = *(unsigned __int8 *)(v8 + 679);
    v109 = *(unsigned __int8 *)(v8 + 615);
    v110 = *(unsigned __int8 *)(v8 + 321);
    v111 = *(_QWORD *)(v11 + 8);
    v718 = 0u;
    v719 = 0u;
    v716 = 0u;
    v717 = 0u;
    v714 = 0u;
    v715 = 0u;
    v712 = 0u;
    v713 = 0u;
    v709 = 0u;
    v710 = 0u;
    v707 = 0u;
    v708 = 0u;
    v705 = 0u;
    v706 = 0u;
    v703 = 0u;
    v704 = 0u;
    v112 = *(unsigned int *)(v107 + 1580);
    v113 = *(_DWORD *)(v107 + 1580);
    v114 = v107;
    v115 = *(int *)(v107 + 1576);
    v673 = v113;
    if (v109)
    {
      LODWORD(v116) = sub_1B68B4654(v111, &v712, v6, v110 != 0, 0);
      if ((_DWORD)v116)
      {
        v117 = 0;
        v118 = 0;
        v119 = v116;
        v120 = &v712;
        v121 = v116;
        do
        {
          v122 = *(_DWORD *)(*(_QWORD *)v120 + 1276);
          if (v122 >= v117 && v122 < *(_DWORD *)(v6 + 1276))
          {
            v118 = *(_QWORD *)v120;
            v117 = *(_DWORD *)(*(_QWORD *)v120 + 1276);
          }
          v120 = (__int128 *)((char *)v120 + 8);
          --v121;
        }
        while (v121);
        if (v108 == 1 && *(_BYTE *)(v6 + 24) && v118)
        {
          v123 = *(unsigned __int8 *)(v118 + 25);
          if (*(_BYTE *)(v118 + 25))
          {
            v108 = 1;
            goto LABEL_159;
          }
          v127 = (uint64_t *)&v712;
          do
          {
            v128 = *v127++;
            v123 += *(unsigned __int8 *)(v128 + 25);
            --v119;
          }
          while (v119);
          if (v123)
            v108 = 2;
          else
            v108 = 1;
        }
        if (v118)
        {
LABEL_159:
          *(_QWORD *)&v703 = v118;
          if ((_DWORD)v116)
          {
            v129 = 0;
            v9 = a1;
            while (*((_QWORD *)&v712 + v129) != v118)
            {
              if (v116 == ++v129)
              {
                LODWORD(v129) = v116;
                break;
              }
            }
            v116 = (v116 - 1);
            if (v129 < v116)
              *((_QWORD *)&v712 + v129) = *((_QWORD *)&v712 + v116);
            *((_QWORD *)&v712 + v116) = 0;
          }
          else
          {
            v9 = a1;
          }
          goto LABEL_170;
        }
      }
    }
    else
    {
      LODWORD(v116) = sub_1B68B436C(v111, &v712, 1, 0);
      v118 = sub_1B68B459C(v111, v6);
      if ((_DWORD)v116)
      {
        v124 = v116;
        v125 = (uint64_t *)&v712;
        do
        {
          v126 = *v125++;
          *(_BYTE *)(v126 + 32) = 1;
          --v124;
        }
        while (v124);
      }
      if (v118)
      {
        *(_BYTE *)(v118 + 32) = 1;
        v113 = v112;
        goto LABEL_159;
      }
      v113 = v112;
    }
    v118 = sub_1B68B459C(v111, v6);
    *(_QWORD *)&v703 = v118;
    v9 = a1;
    if (!v118)
    {
      v130 = 0;
      v131 = 0;
      goto LABEL_177;
    }
LABEL_170:
    if ((_DWORD)v115 == *(unsigned __int16 *)(v118 + 19112) && v113 == *(unsigned __int16 *)(v118 + 19114))
    {
      v131 = 0;
    }
    else
    {
      if ((_DWORD)v115 != *(unsigned __int16 *)(v118 + 19120))
      {
        v130 = 1;
        v131 = 1;
        goto LABEL_177;
      }
      v131 = v113 != *(unsigned __int16 *)(v118 + 19122);
    }
    v130 = 1;
LABEL_177:
    if (v131 < v108)
    {
      v116 = v116;
      do
      {
        if (!v116)
          break;
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v135 = 0;
        do
        {
          v136 = *((_QWORD *)&v712 + v132);
          if (*(_BYTE *)(v136 + 25) && *(_BYTE *)(v136 + 1356))
          {
            v137 = *(_DWORD *)(v136 + 1276);
            if ((v135 & (v137 <= v134)) != 0)
            {
              v135 = 1;
            }
            else
            {
              *((_QWORD *)&v703 + v130) = v136;
              v135 = 1;
              v134 = v137;
              v133 = v132;
            }
          }
          ++v132;
        }
        while (v116 != v132);
        if ((v135 & 1) == 0)
          break;
        *((_QWORD *)&v712 + v133) = *((_QWORD *)&v712 + --v116);
        *((_QWORD *)&v712 + v116) = 0;
        v138 = ((_DWORD)v115 != *(unsigned __int16 *)(*((_QWORD *)&v703 + v130) + 19112)
             || (_DWORD)v112 != *(unsigned __int16 *)(*((_QWORD *)&v703 + v130) + 19114))
            && ((_DWORD)v115 != *(unsigned __int16 *)(*((_QWORD *)&v703 + v130) + 19120)
             || v113 != *(unsigned __int16 *)(*((_QWORD *)&v703 + v130) + 19122));
        v131 += v138;
        ++v130;
      }
      while (v131 < v108);
    }
    if (v131 >= v108)
    {
LABEL_210:
      if ((_DWORD)v116)
      {
        v146 = v116;
        v147 = (uint64_t *)&v712;
        do
        {
          v148 = *v147++;
          *(_BYTE *)(v148 + 32) = 0;
          --v146;
        }
        while (v146);
      }
    }
    else
    {
      v116 = v116;
      while (v116)
      {
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v142 = 1;
        do
        {
          v143 = *((_QWORD *)&v712 + v139);
          v144 = *(_DWORD *)(v143 + 1276);
          if ((v142 & 1) != 0 || v144 > v141)
          {
            *((_QWORD *)&v703 + v130) = v143;
            v141 = v144;
            v140 = v139;
          }
          v142 = 0;
          ++v139;
        }
        while (v116 != v139);
        *((_QWORD *)&v712 + v140) = *((_QWORD *)&v712 + --v116);
        *((_QWORD *)&v712 + v116) = 0;
        if ((_DWORD)v115 == *(unsigned __int16 *)(*((_QWORD *)&v703 + v130) + 19112)
          && (_DWORD)v112 == *(unsigned __int16 *)(*((_QWORD *)&v703 + v130) + 19114))
        {
          v145 = 0;
        }
        else
        {
          v145 = (_DWORD)v115 != *(unsigned __int16 *)(*((_QWORD *)&v703 + v130) + 19120)
              || v113 != *(unsigned __int16 *)(*((_QWORD *)&v703 + v130) + 19122);
        }
        v131 += v145;
        ++v130;
        if (v131 >= v108)
          goto LABEL_210;
      }
    }
    *(_BYTE *)(v681 + 3677) = 0;
    v671 = v112;
    v648 = v114;
    v664 = v111;
    if (*(_BYTE *)(v114 + 180)
      || ((v669 = *(_DWORD *)(v6 + 224), v667 = *(_DWORD *)(v6 + 192), (int)v115 <= v669)
        ? (v149 = (int)v112 <= *(_DWORD *)(v6 + 192))
        : (v149 = 0),
          v149))
    {
      v669 = 0;
      v667 = 0;
    }
    if (v130)
    {
      v150 = 0;
      v643 = (unsigned int *)(v648 + 57100);
      v151 = v669 > 0;
      v152 = v667 > 0;
      v153 = !v151 || !v152;
      if (v151 && v152)
        v154 = v669;
      else
        v154 = v115;
      if (v153)
        v155 = v673;
      else
        v155 = v667;
      v627 = (int8x8_t *)(v648 + 1328);
      v626 = (uint64_t *)(v648 + 1072);
      if ((int)v155 >= 0)
        v156 = v155;
      else
        v156 = v155 + 1;
      v625 = v156 >> 1;
      v684 = v154;
      v622 = v154;
      v157 = (int)v155 >> 1;
      if ((int)v155 >> 1 <= 1)
        v158 = 1;
      else
        v158 = v157;
      v618 = v158;
      v619 = v155;
      v624 = (uint64_t)(int)v155 >> 1;
      if ((int)v112 >= 0)
        v159 = v112;
      else
        v159 = v112 + 1;
      v160 = (v159 >> 1);
      v623 = (uint64_t)v159 >> 1;
      v641 = (int)v115 / 16;
      v639 = (int)v112 / 16;
      v637 = (int)v112 / 16 + 2;
      v161 = v130;
      v689 = v155;
      v617 = -(uint64_t)(int)v155;
      v616 = -(uint64_t)v157;
      v620 = -(uint64_t)(int)v112;
      v621 = v160;
      v615 = -(uint64_t)(int)v160;
      a6.n128_u32[0] = 1;
      v677 = v130;
      while (1)
      {
        v162 = *((_QWORD *)&v703 + v150);
        v163 = *(int *)(v162 + 228);
        if (!*(_BYTE *)(v11 + 133))
          break;
        if (!*(_BYTE *)(v11 + 136))
        {
          v164 = sub_1B68B436C(v664, &v701, 1, 0);
          v165 = sub_1B68B1158(*(_QWORD *)(v11 + 2320), v115, v671, v162, v164, v163, v669, v667, &v711);
          if ((_DWORD)v165)
          {
            v260 = v165;
LABEL_407:
            CFLog();
            CFLog();
            return v260;
          }
LABEL_343:
          v9 = a1;
          v161 = v677;
        }
LABEL_344:
        if (++v150 == v161)
          goto LABEL_348;
      }
      v166 = (_WORD *)(v162 + 19112);
      v167 = *(unsigned __int16 *)(v162 + 19112);
      v168 = *(unsigned __int16 *)(v162 + 19114);
      if (v684 == v167 && (_DWORD)v689 == v168)
        goto LABEL_344;
      v170 = *(int *)(v162 + 196);
      v171 = *(_DWORD *)(v162 + 232);
      v172 = v171;
      v173 = *(_DWORD *)(v162 + 244);
      v174 = *(_DWORD *)(v162 + 248);
      v695 = v174;
      v175 = *(_DWORD *)(v162 + 212);
      if (*(_BYTE *)(v162 + 19129) == 1)
      {
        v176 = *(const void **)(v162 + 160);
        if (v176)
        {
          if (*(_QWORD *)(v162 + 168))
          {
            v177 = *(void **)(v162 + 128);
            if (v177)
            {
              if (*(_QWORD *)(v162 + 136))
              {
                v628 = *(_DWORD *)(v162 + 244);
                v630 = *(_DWORD *)(v162 + 212);
                v632 = *(int *)(v162 + 196);
                v613 = *(_DWORD *)(v162 + 232);
                if (*(_BYTE *)(v648 + 1724))
                {
                  memcpy(v177, v176, v171 * (int)v170);
                  memcpy(*(void **)(v162 + 136), *(const void **)(v162 + 168), v630 * v174);
                }
                else
                {
                  memcpy(v177, v176, v171 * (unint64_t)*(unsigned __int16 *)(v162 + 19122));
                  memcpy(*(void **)(v162 + 136), *(const void **)(v162 + 168), v174 * (*(unsigned __int16 *)(v162 + 19122) >> 1));
                  v178 = (unsigned __int16)*v166;
                  if (v178 > *(unsigned __int16 *)(v162 + 19120))
                  {
                    LODWORD(v179) = *(unsigned __int16 *)(v162 + 19114);
                    LODWORD(v180) = *(unsigned __int16 *)(v162 + 19122);
                    if (v179 > v180
                      && (int)v163 >= v178
                      && v628 >= v178
                      && (int)v632 >= (int)v179
                      && (int)(v179 >> 1) <= v630)
                    {
                      if (*(_WORD *)(v162 + 19122))
                      {
                        v181 = 0;
                        v182 = 0;
                        do
                        {
                          memset((void *)(*(_QWORD *)(v162 + 128) + *(unsigned __int16 *)(v162 + 19120) + v181), 128, (unsigned __int16)*v166 - (unint64_t)*(unsigned __int16 *)(v162 + 19120));
                          ++v182;
                          v180 = *(unsigned __int16 *)(v162 + 19122);
                          v181 += v172;
                        }
                        while (v182 < v180);
                        LODWORD(v179) = *(unsigned __int16 *)(v162 + 19114);
                      }
                      if (v179 > v180)
                      {
                        v183 = v180;
                        v184 = (int)v172 * (uint64_t)(int)v180;
                        do
                        {
                          memset((void *)(*(_QWORD *)(v162 + 128) + v184), 128, (unsigned __int16)*v166);
                          ++v183;
                          v179 = *(unsigned __int16 *)(v162 + 19114);
                          v184 += v172;
                        }
                        while (v183 < v179);
                        LODWORD(v180) = *(unsigned __int16 *)(v162 + 19122);
                      }
                      if (v180 >= 2)
                      {
                        v185 = 0;
                        v186 = 0;
                        do
                        {
                          memset((void *)(*(_QWORD *)(v162 + 136) + *(unsigned __int16 *)(v162 + 19120) + v185), 128, (unsigned __int16)*v166 - (unint64_t)*(unsigned __int16 *)(v162 + 19120));
                          ++v186;
                          v179 = *(unsigned __int16 *)(v162 + 19122);
                          v185 += v174;
                        }
                        while (v186 < v179 >> 1);
                        v180 = v179 >> 1;
                        LODWORD(v179) = *(unsigned __int16 *)(v162 + 19114);
                      }
                      else
                      {
                        LODWORD(v180) = v180 >> 1;
                      }
                      if (v180 < v179 >> 1)
                      {
                        v187 = v180;
                        v188 = v174 * (uint64_t)(int)v180;
                        do
                        {
                          memset((void *)(*(_QWORD *)(v162 + 136) + v188), 128, (unsigned __int16)*v166);
                          ++v187;
                          v188 += v174;
                        }
                        while (v187 < (unint64_t)*(unsigned __int16 *)(v162 + 19114) >> 1);
                      }
                    }
                  }
                }
                v167 = *(unsigned __int16 *)(v162 + 19120);
                *v166 = v167;
                v168 = *(unsigned __int16 *)(v162 + 19122);
                *(_WORD *)(v162 + 19114) = v168;
                v170 = v632;
                v173 = v628;
                v175 = v630;
                v171 = v613;
              }
            }
          }
        }
      }
      if (v167 != (_DWORD)v115 || v168 != v673)
      {
        v190 = *(const void **)(v162 + 128);
        if (v190)
        {
          if (*(_QWORD *)(v162 + 136))
          {
            v633 = v170;
            v629 = v173;
            v631 = v175;
            if (!*(_BYTE *)(v162 + 19129))
            {
              v193 = *(void **)(v162 + 160);
              if (v193)
              {
                if (*(_QWORD *)(v162 + 168)
                  && v167 == *(unsigned __int16 *)(v162 + 19120)
                  && v168 == *(unsigned __int16 *)(v162 + 19122))
                {
                  v614 = v171;
                  if (*(_BYTE *)(v648 + 1724))
                  {
                    memcpy(v193, v190, v171 * (int)v170);
                    v194 = *(const void **)(v162 + 136);
                    v195 = *(void **)(v162 + 168);
                    v196 = v631 * v174;
                  }
                  else
                  {
                    memcpy(v193, v190, (int)(v168 * v171));
                    v194 = *(const void **)(v162 + 136);
                    v195 = *(void **)(v162 + 168);
                    v196 = v174 * (*(unsigned __int16 *)(v162 + 19122) >> 1);
                  }
                  memcpy(v195, v194, v196);
                  *(_BYTE *)(v162 + 19129) = 1;
                  v190 = *(const void **)(v162 + 128);
                  v171 = v614;
                }
              }
            }
            *(_QWORD *)(v648 + 1328) = v190;
            *(_QWORD *)(v648 + 1336) = *(_QWORD *)(v162 + 136);
            *(_QWORD *)(v648 + 1344) = *(_QWORD *)(v162 + 128);
            *(_QWORD *)(v648 + 1352) = *(_QWORD *)(v162 + 136);
            *(_DWORD *)(v648 + 1368) = 1;
            if (*(_BYTE *)(v648 + 1625))
            {
              v191 = 0;
              v192 = 8;
            }
            else
            {
              v191 = *(_BYTE *)(v648 + 1626) != 0;
              if (*(_BYTE *)(v648 + 1626))
                v192 = 4;
              else
                v192 = 5;
            }
            *(_DWORD *)(v648 + 1376) = v192;
            *(_OWORD *)v681 = xmmword_1B6917C50;
            *(_DWORD *)(v648 + 1420) = 0;
            *(_QWORD *)(v648 + 1424) = 0;
            *(_DWORD *)(v648 + 1436) = 0;
            *(_DWORD *)(v648 + 1468) = 0;
            *(_QWORD *)(v648 + 1472) = 0;
            *(_DWORD *)(v648 + 1480) = v167;
            *(_DWORD *)(v648 + 1484) = v684;
            *(_DWORD *)(v648 + 1488) = v168;
            *(_DWORD *)(v648 + 1492) = v689;
            *(_DWORD *)(v648 + 1496) = v171;
            *(_DWORD *)(v648 + 1500) = v171;
            *(_DWORD *)(v648 + 1504) = v174;
            *(_DWORD *)(v648 + 1508) = v174;
            *(_QWORD *)(v648 + 1512) = 0;
            *(_QWORD *)(v648 + 1520) = 0;
            *(_BYTE *)(v648 + 1568) = v191;
            *(_BYTE *)(v648 + 1569) = 0;
            v197 = *(_QWORD *)(v648 + 1072);
            if (!v197)
            {
              if (sub_1B68F7CC0(v626, (uint64_t)v627))
                goto LABEL_406;
              v197 = *v626;
            }
            if (sub_1B68F7E7C(v197, v627))
            {
LABEL_406:
              v260 = 4294958327;
              goto LABEL_407;
            }
            if (*(_BYTE *)(v648 + 1724))
            {
              if ((int)v163 >= v684 && v684 <= v629 && (int)v689 <= (int)v633 && v625 <= v631)
              {
                if ((int)v689 >= 1)
                {
                  v198 = v622;
                  v199 = v689;
                  do
                  {
                    memset((void *)(*(_QWORD *)(v162 + 128) + v198), 128, (int)v163 - v684);
                    v198 += v172;
                    --v199;
                  }
                  while (v199);
                }
                if ((int)v689 < (int)v633)
                {
                  v200 = v617 + v633;
                  v201 = v619 * (uint64_t)(int)v172;
                  do
                  {
                    memset((void *)(*(_QWORD *)(v162 + 128) + v201), 128, v163);
                    v201 += v172;
                    --v200;
                  }
                  while (v200);
                }
                if ((int)v689 >= 2)
                {
                  v202 = v622;
                  v203 = v618;
                  do
                  {
                    memset((void *)(*(_QWORD *)(v162 + 136) + v202), 128, (int)v163 - v684);
                    v202 += v695;
                    --v203;
                  }
                  while (v203);
                }
                if ((int)v624 < (int)v633 >> 1)
                {
                  v204 = v616 + ((int)v633 >> 1);
                  v205 = (int)v624 * (uint64_t)(int)v695;
                  do
                  {
                    memset((void *)(*(_QWORD *)(v162 + 136) + v205), 128, v163);
                    v205 += v695;
                    --v204;
                  }
                  while (v204);
                }
              }
            }
            else if ((int)v167 > (int)v115
                   && (int)v168 > (int)v671
                   && (int)v163 >= (int)v115
                   && v629 >= (int)v115
                   && (int)v633 >= v673
                   && (int)v623 <= v631)
            {
              if ((int)v671 > 0)
              {
                v206 = v115;
                v207 = v671;
                do
                {
                  memset((void *)(*(_QWORD *)(v162 + 128) + v206), 128, (int)(v167 - v115));
                  v206 += v172;
                  --v207;
                }
                while (v207);
              }
              v208 = v167;
              v209 = v673 * (uint64_t)(int)v172;
              v210 = v620 + v168;
              do
              {
                memset((void *)(*(_QWORD *)(v162 + 128) + v209), 128, v167);
                v209 += v172;
                --v210;
              }
              while (v210);
              if ((int)v671 >= 2)
              {
                v211 = (int)(v167 - v115);
                v212 = v115;
                v213 = v621;
                do
                {
                  memset((void *)(*(_QWORD *)(v162 + 136) + v212), 128, v211);
                  v212 += v695;
                  --v213;
                }
                while (v213);
              }
              v6 = a5;
              if ((int)v621 < (int)(v168 >> 1))
              {
                v214 = v615 + (v168 >> 1);
                v215 = (int)v623 * (uint64_t)(int)v695;
                do
                {
                  memset((void *)(*(_QWORD *)(v162 + 136) + v215), 128, v208);
                  v215 += v695;
                  --v214;
                }
                while (v214);
              }
            }
            *v166 = v115;
            *(_WORD *)(v162 + 19114) = v673;
            *(_BYTE *)(v681 + 3677) = 1;
          }
        }
      }
      v216 = *(_QWORD *)(v162 + 488);
      if (v216)
      {
        *(_DWORD *)(v216 + 64) = 1;
        *(_QWORD *)(v216 + 56) = 0x100000001;
        *(_OWORD *)(v216 + 152) = xmmword_1B6917C40;
        v217 = *(unsigned __int8 **)(v162 + 488);
      }
      else
      {
        v217 = 0;
      }
      v8 = (uint64_t)a3;
      v11 = v652;
      v218 = sub_1B68BB95C(v217);
      if ((_DWORD)v218)
      {
        v260 = v218;
        goto LABEL_407;
      }
      *(_DWORD *)(v652 + 2292) = v641;
      if (v637 >= *v643)
        v219 = *v643;
      else
        v219 = v637;
      *(_DWORD *)(v652 + 2296) = v219;
      v220 = *(_QWORD **)(v162 + 488);
      sub_1B68FDFB0(*(_QWORD *)(v220[2] + 32) - (32 * *(_DWORD *)(v220[2] + 136)) - 32, v220[10], v220[11], v220[12], *(_DWORD *)(v220[2] + 136), v641, v219, 0, v219);
      v221 = sub_1B68FE2A4;
      if (!byte_1EF13A090)
        v221 = 0;
      v221(*(_QWORD *)(v162 + 488));
      sub_1B68FE524(*(_QWORD *)(*(_QWORD *)(v162 + 488) + 16), 0, v639);
      goto LABEL_343;
    }
LABEL_348:
    v7 = v648;
    v10 = v653;
    v12 = v657;
  }
  if (*(_BYTE *)(v11 + 2314))
  {
    v222 = *(_QWORD *)(v11 + 8);
    v718 = 0u;
    v719 = 0u;
    v716 = 0u;
    v717 = 0u;
    v714 = 0u;
    v715 = 0u;
    v712 = 0u;
    v713 = 0u;
    if (*(_BYTE *)(v7 + 1057) == 1)
      v223 = sub_1B68B43F0(v222, &v712, 0);
    else
      v223 = sub_1B68B4654(v222, &v712, v6, 0, 0);
    *(_DWORD *)(v10 + 13956) = 0;
    v9 = a1;
    if (v223)
    {
      v224 = 0;
      v225 = (uint64_t *)&v712;
      v226 = v223;
      do
      {
        v227 = *v225;
        if (*v225 && !*(_BYTE *)(v227 + 14))
        {
          a6.n128_f64[0] = sub_1B68BF148(v227 + 19320, a5 + 19320);
          v231 = v229 + v229;
          v232 = v228 * (v228 + v228);
          v233 = 1.0 - v229 * (v229 + v229);
          if (vabdd_f64(v233, v232) >= 0.00000001)
          {
            v234 = v233 - v232;
            v235 = v230 + v230;
            v236 = (v229 * v235 - a6.n128_f64[0] * (v228 + v228)) / v234;
            v237 = (v228 * v235 + a6.n128_f64[0] * v231) / v234;
            v238 = -v236;
            if (*((_DWORD *)v651 + 60))
              v238 = v236;
            a6.n128_f64[0] = v237 * 342.0 * 4.0;
            *(_DWORD *)(a5 + 4 * v224 + 18852) = *(_DWORD *)(v227 + 1276);
            *(_DWORD *)(a5 + 18724 + 4 * *(unsigned int *)(v653 + 13956)) = (unsigned __int16)llround(v238 * 435.0 * 4.0) | ((unsigned __int16)llround(a6.n128_f64[0]) << 16);
            v224 = *(_DWORD *)(v653 + 13956) + 1;
            *(_DWORD *)(v653 + 13956) = v224;
          }
          v9 = a1;
        }
        ++v225;
        --v226;
      }
      while (v226);
    }
    v8 = (uint64_t)a3;
    v11 = v652;
    v10 = v653;
    v6 = a5;
  }
  v16 = v6;
  if (!*(_BYTE *)(v11 + 136))
  {
    v239 = v7;
    v240 = *(uint64_t **)(v9 + 232);
    if (*((_BYTE *)v240 + 8))
    {
      v241 = *(_BYTE *)(v8 + 381);
      *(_WORD *)(*v240 + 44) = 0;
      *(_WORD *)(*v240 + 46) = 0;
      *(_QWORD *)*v240 = v6;
      *(_QWORD *)(*v240 + 16) = *(_QWORD *)(v11 + 8);
      *(_BYTE *)(*v240 + 33) = v12;
      *(_BYTE *)(*v240 + 32) = 0;
      *(_BYTE *)(*v240 + 34) = v661;
      *(_BYTE *)(*v240 + 36) = *(_BYTE *)(v8 + 322);
      *(_WORD *)(*v240 + 38) = *(_DWORD *)(v8 + 244);
      *(_BYTE *)(*v240 + 48) = *(_BYTE *)(v8 + 673);
      if (*((_BYTE *)v240 + 9))
        v659 = v240[2];
      *(_QWORD *)(*v240 + 8) = v659;
      v242 = *v240;
      if (*((_DWORD *)v240 + 8) && *(_QWORD *)(v242 + 8))
        v243 = v240 + 3;
      else
        v243 = (_QWORD *)(v242 + 8);
      v244 = v241 | v635 & 2;
      *(_QWORD *)(v242 + 24) = *v243;
      if (v6)
      {
        v240[2] = v6;
        if (v12)
        {
          *((_DWORD *)v240 + 8) = 1;
        }
        else
        {
          *((_DWORD *)v240 + 8) = 0;
          v240[3] = v6;
          *(_WORD *)(*v240 + 44) = *v651;
          *(_WORD *)(*v240 + 46) = v651[1];
        }
        if (*((unsigned __int8 *)v240 + 8) > 1u)
          v244 = 0;
        *(_BYTE *)(*v240 + 35) = v244;
        ++*((_BYTE *)v240 + 9);
      }
      else
      {
        *((_DWORD *)v240 + 8) = 1;
        if (*((unsigned __int8 *)v240 + 8) > 1u)
          v244 = 0;
        *(_BYTE *)(*v240 + 35) = v244;
      }
      v245 = *((unsigned __int8 *)v240 + 8);
      v246 = (uint64_t *)(*v240 + 56 * (int)(v245 - 1));
      v16 = *v246;
      if (*v246)
      {
        if (*(_BYTE *)(*v240 + 56 * (int)(v245 - 1) + 32))
          goto LABEL_411;
        if (*((_BYTE *)v240 + 8))
        {
          v247 = 0;
          v248 = 0;
          v249 = 0;
          v250 = -1;
          do
          {
            v251 = *v240;
            v252 = v245 + v250;
            v253 = (_QWORD *)(*v240 + 56 * (v245 + v250));
            if (!*v253)
              break;
            v254 = v251 + 56 * v252;
            v256 = *(unsigned __int8 *)(v254 + 32);
            v255 = (_BYTE *)(v254 + 32);
            if (v256)
              break;
            v257 = v251 + 56 * v252;
            *(_DWORD *)(v240[8] + v247 + 36) = *(unsigned __int16 *)(v257 + 44);
            *(_DWORD *)(v240[8] + v247 + 40) = *(unsigned __int16 *)(v257 + 46);
            *(_QWORD *)(v240[8] + v247) = *v253;
            *(_BYTE *)(v240[8] + v247 + 24) = *(_BYTE *)(v257 + 33);
            *(_BYTE *)(v240[8] + v247 + 25) = *(_BYTE *)(v257 + 34);
            *(_BYTE *)(v240[8] + v247 + 31) = *(_BYTE *)(v257 + 48);
            *(_BYTE *)(v240[8] + v247 + 27) = *(_BYTE *)(v257 + 36);
            *(_WORD *)(v240[8] + v247 + 28) = *(_WORD *)(v257 + 38);
            *(_QWORD *)(v240[8] + v247 + 8) = *(_QWORD *)(v257 + 8);
            *(_QWORD *)(v240[8] + v247 + 16) = *(_QWORD *)(v257 + 24);
            *(_BYTE *)(v240[8] + v247 + 30) = *(_BYTE *)(v8 + 379);
            *(_BYTE *)(v240[8] + v247 + 32) = *(_BYTE *)(v8 + 577);
            if (*(_BYTE *)(v11 + 133))
            {
              *(_QWORD *)(v240[8] + v247 + 48) = *(_QWORD *)(*(_QWORD *)(v11 + 2320) + 3400);
              if (v645[12] || *(int *)(v8 + 4820) >= 7 && *v645 == 2)
              {
                v258 = 0;
              }
              else
              {
                v258 = *(_BYTE *)(v11 + 133);
                if (v258)
                  v258 = v645[2] == 0;
              }
              *(_BYTE *)(v240[8] + v247 + 56) = v258;
            }
            v259 = *(_BYTE *)(v8 + 577) == 1 ? *(_BYTE *)(v8 + 653) : 0;
            *(_BYTE *)(v240[8] + v247 + 33) = v259;
            *(_BYTE *)(v240[8] + v247 + 34) = *(_BYTE *)(v8 + 674);
            *(_BYTE *)(v240[8] + v247 + 44) = *(_BYTE *)(v8 + 2697);
            *(_BYTE *)(v240[8] + v247 + 45) = *(_BYTE *)(v8 + 656);
            *(_QWORD *)(v240[7] + v248) = sub_1B689CCEC;
            ++v249;
            *(_QWORD *)(v240[7] + v248 + 8) = v240[8] + v247;
            *v255 = 1;
            v245 = *((unsigned __int8 *)v240 + 8);
            v248 += 16;
            v247 += 64;
            --v250;
          }
          while (v249 < v245);
          if (v249)
          {
            if (v249 == 1)
              sub_1B689CCEC(v240[8]);
            else
              sub_1B68CAEAC(v240[5], v240[7], v249);
            v9 = a1;
          }
        }
        v16 = *v246;
        if (*v246)
LABEL_411:
          --*((_BYTE *)v240 + 9);
      }
      v261 = *((unsigned __int8 *)v240 + 8);
      if (v261 >= 2)
      {
        v262 = v261 + 1;
        v263 = 56 * v261;
        do
        {
          v264 = *v240 + v263;
          v265 = *(_OWORD *)(v264 - 96);
          *(_OWORD *)(v264 - 56) = *(_OWORD *)(v264 - 112);
          *(_OWORD *)(v264 - 40) = v265;
          a6 = *(__n128 *)(v264 - 80);
          *(__n128 *)(v264 - 24) = a6;
          *(_QWORD *)(v264 - 8) = *(_QWORD *)(v264 - 64);
          --v262;
          v263 -= 56;
        }
        while (v262 > 2);
      }
      v266 = *v240;
      if (*v240)
      {
        *(_WORD *)(v266 + 32) = 0;
        *(_BYTE *)(v266 + 34) = 0;
        *(_QWORD *)v266 = 0;
        *(_QWORD *)(v266 + 8) = 0;
      }
    }
    else
    {
      v16 = 0;
    }
    v7 = v239;
  }
LABEL_418:
  if (*(_BYTE *)(*(_QWORD *)(v7 + 136) + 4850))
  {
    sub_1B689D824(v9, v16);
    v9 = a1;
  }
  v267 = *(_QWORD *)(v7 + 5392);
  if (v267 && (a6.n128_u64[0] = *(_QWORD *)(v267 + 136), a6.n128_f64[0] > 10.2))
  {
    v268 = 0;
    if (!v6)
    {
LABEL_423:
      v269 = 1;
      goto LABEL_426;
    }
  }
  else
  {
    v268 = 1;
    if (!v6)
      goto LABEL_423;
  }
  v269 = *(unsigned __int16 *)(v6 + 4834) > 0x2BBu;
LABEL_426:
  if (*(_BYTE *)(v11 + 2305) && *(_BYTE *)(v11 + 2304))
  {
    if (*(_BYTE *)(v681 + 3677))
      v268 = 0;
    if (v6 && (v269 & v268) != 0)
    {
      v270 = v7;
      v271 = *(_QWORD *)(v11 + 8);
      v272 = (*(_DWORD *)(v271 + 48) - 1);
      if ((int)v272 >= 0)
      {
        while (1)
        {
          v273 = *(_QWORD *)(*(_QWORD *)(v271 + 40) + 8 * v272);
          if (v273)
          {
            if (*(_BYTE *)(v273 + 1356) && *(_BYTE *)(v273 + 2) && *(_BYTE *)(v273 + 14) && !*(_BYTE *)(v273 + 15))
              break;
          }
          v149 = v272-- <= 0;
          if (v149)
            goto LABEL_440;
        }
        v718 = 0u;
        v719 = 0u;
        v716 = 0u;
        v717 = 0u;
        v714 = 0u;
        v715 = 0u;
        v712 = 0u;
        v713 = 0u;
        v563 = *(_BYTE *)(v270 + 1057) == 1 ? sub_1B68B43F0(v271, &v712, 0) : sub_1B68B4654(v271, &v712, a5, 0, 0);
        v9 = a1;
        if (v563)
        {
          v564 = 0;
          v565 = 0;
          v566 = 0;
          do
          {
            v567 = *(_QWORD *)((char *)&v712 + v564);
            v568 = *(_DWORD *)(v567 + 1276);
            if (v568 >= v566 && v568 < *(_DWORD *)(a5 + 1276) && !*(_BYTE *)(v567 + 14))
            {
              v566 = *(_DWORD *)(v567 + 1276);
              v565 = *(_QWORD *)((char *)&v712 + v564);
            }
            v564 += 8;
          }
          while (8 * v563 != v564);
          if (v565)
          {
            *((_DWORD *)v651 + 61) = *(_DWORD *)(v565 + 1276);
            *((_DWORD *)v651 + 62) = *(_DWORD *)(v273 + 1276);
            v569 = *((_DWORD *)v651 + 60);
            v52 = v569 == *(_DWORD *)(v565 + 19352);
            *((_BYTE *)v651 + 266) = v52;
            if (v52)
            {
              v680 = (__int16 *)(v565 + 19112);
              v650 = v270;
              v570 = *(unsigned __int16 *)(v565 + 19112);
              v571 = *(unsigned __int16 *)(v565 + 19114);
              v572 = *(int *)(v565 + 228);
              v686 = *(_DWORD *)(v565 + 232);
              v573 = *(_DWORD *)(v565 + 248);
              v574 = v573;
              v692 = *(unsigned int *)(v565 + 196);
              v575 = sub_1B68BF148(v565 + 19320, a5 + 19320);
              v578 = 0;
              v580 = v579 * (v576 + v576) - v575 * (v577 + v577);
              v581 = -v580;
              if (v569 != 1)
                v581 = v580;
              v582 = 1.0 - v576 * (v576 + v576) - v577 * (v577 + v577);
              v583 = sqrt(v580 * v580 + v582 * v582);
              v584 = v582 / v583;
              v585 = -v581 / v583;
              v586 = v581 / v583;
              v587 = -v585;
              v588 = -(v585 * (double)v570) * 0.5;
              v698 = v571;
              v589 = v585 * (double)v571 * 0.5;
              v590 = v584 * v584 - v585 * v586;
              *(double *)&v703 = v584 / v590;
              *((double *)&v703 + 1) = v587 / v590;
              *((double *)&v704 + 1) = -v586 / v590;
              *(double *)&v704 = -(v587 / v590 * v589) - v584 / v590 * v588;
              *(double *)&v705 = v584 / v590;
              *((double *)&v705 + 1) = -(v584 / v590 * v589) - *((double *)&v704 + 1) * v588;
              do
              {
                a6.n128_f64[0] = *((double *)&v703 + v578) * 1024.0;
                *((_DWORD *)&v701 + v578++) = llround(a6.n128_f64[0]);
              }
              while (v578 != 6);
              v591 = 0;
              v6 = a5;
              do
              {
                *(_WORD *)(a5 + 19364 + 2 * v591) = *((_DWORD *)&v701 + v591);
                ++v591;
              }
              while (v591 != 6);
              v592 = DWORD1(v701);
              if (SDWORD1(v701) < 0)
                v592 = -DWORD1(v701);
              v9 = a1;
              if (v592 >= *(_DWORD *)(v652 + 2308))
              {
                if (*((_BYTE *)v651 + 266))
                {
                  v593 = (int8x8_t *)(v650 + 1328);
                  *(_QWORD *)(v650 + 1328) = *(_QWORD *)(v565 + 128);
                  *(_QWORD *)(v650 + 1336) = *(_QWORD *)(v565 + 136);
                  *(_QWORD *)(v650 + 1344) = *(_QWORD *)(v273 + 128);
                  *(_QWORD *)(v650 + 1352) = *(_QWORD *)(v273 + 136);
                  *(_QWORD *)(v650 + 1400) = 0x400000008;
                  *(_DWORD *)(v650 + 1436) = 0;
                  *(_DWORD *)(v650 + 1468) = 0;
                  *(_QWORD *)(v650 + 1472) = 0;
                  *(_QWORD *)(v650 + 1424) = 0;
                  *(_QWORD *)(v650 + 1416) = 0;
                  *(_QWORD *)(v650 + 1520) = 0;
                  *(_QWORD *)(v650 + 1512) = 0;
                  *(_DWORD *)(v650 + 1480) = v570;
                  *(_DWORD *)(v650 + 1484) = v570;
                  *(_DWORD *)(v650 + 1488) = v571;
                  *(_DWORD *)(v650 + 1492) = v571;
                  *(_DWORD *)(v650 + 1368) = 1;
                  *(_DWORD *)(v650 + 1496) = v686;
                  *(_DWORD *)(v650 + 1500) = v686;
                  *(_DWORD *)(v650 + 1504) = v573;
                  *(_DWORD *)(v650 + 1508) = v573;
                  *(_QWORD *)(v650 + 1376) = 0x60000000ALL;
                  *(_WORD *)(v650 + 1568) = 0;
                  *(_QWORD *)(v650 + 1556) = v702;
                  *(_OWORD *)(v650 + 1540) = v701;
                  v594 = *(_QWORD *)(v650 + 1072);
                  if (!v594)
                  {
                    sub_1B68F7CC0((uint64_t *)(v650 + 1072), (uint64_t)v593);
                    v594 = *(_QWORD *)(v650 + 1072);
                  }
                  sub_1B68F7E7C(v594, v593);
                  if ((int)v572 > (int)v570 || (int)v692 > (int)v571)
                  {
                    if ((_DWORD)v571)
                    {
                      v595 = v570;
                      v596 = v571;
                      do
                      {
                        memset((void *)(*(_QWORD *)(v273 + 128) + v595), 128, (int)v572 - (int)v570);
                        v595 += v686;
                        --v596;
                      }
                      while (v596);
                    }
                    if ((int)v692 > (int)v571)
                    {
                      v597 = v692 - v571;
                      v598 = v686 * (uint64_t)(int)v571;
                      do
                      {
                        memset((void *)(*(_QWORD *)(v273 + 128) + v598), 128, v572);
                        v598 += v686;
                        --v597;
                      }
                      while (v597);
                    }
                    v599 = v698 >> 1;
                    if (v698 >= 2)
                    {
                      v600 = (int)v572 - (int)v570;
                      if (v599 <= 1)
                        v601 = 1;
                      else
                        v601 = v599;
                      do
                      {
                        memset((void *)(*(_QWORD *)(v273 + 136) + v570), 128, v600);
                        v570 += v574;
                        --v601;
                      }
                      while (v601);
                    }
                    if ((int)v599 < (int)v692 >> 1)
                    {
                      v602 = v698 >> 1;
                      v603 = ((int)v692 >> 1) - v602;
                      v604 = (int)v602 * (uint64_t)(int)v574;
                      do
                      {
                        memset((void *)(*(_QWORD *)(v273 + 136) + v604), 128, v572);
                        v604 += v574;
                        --v603;
                      }
                      while (v603);
                    }
                  }
                  v605 = *(_QWORD *)(v273 + 488);
                  if (v605)
                  {
                    *(_DWORD *)(v605 + 64) = 1;
                    *(_QWORD *)(v605 + 56) = 0x100000001;
                    *(_OWORD *)(v605 + 152) = xmmword_1B6917C40;
                    v606 = *(unsigned __int8 **)(v273 + 488);
                  }
                  else
                  {
                    v606 = 0;
                  }
                  v6 = a5;
                  v609 = sub_1B68BB95C(v606);
                  if ((_DWORD)v609)
                  {
                    v260 = v609;
                    CFLog();
                    return v260;
                  }
                  sub_1B68FDF64(*(_QWORD **)(v273 + 488), *(_DWORD *)(v652 + 2292), *(_DWORD *)(v652 + 2296));
                  v610 = *(_QWORD *)(v273 + 488);
                  if (byte_1EF13A090)
                    sub_1B68FE2A4(v610);
                  else
                    MEMORY[0](v610);
                  sub_1B68FF2F8((_QWORD *)(v273 + 96), 1);
                  sub_1B68FE524(*(_QWORD *)(*(_QWORD *)(v273 + 488) + 16), 0, *(unsigned __int16 *)(v565 + 19122) >> 4);
                  *(_BYTE *)(v273 + 32) = 1;
                  *(_DWORD *)(v273 + 19352) = *(_DWORD *)(v565 + 19352);
                  v611 = *v680;
                  *(_WORD *)(v273 + 19120) = *v680;
                  *(_WORD *)(v273 + 19112) = v611;
                  *(_WORD *)(v273 + 19116) = v611;
                  v612 = *(_WORD *)(v565 + 19114);
                  *(_WORD *)(v273 + 19122) = v612;
                  *(_WORD *)(v273 + 19114) = v612;
                  *(_WORD *)(v273 + 19118) = v612;
                  a6.n128_u64[0] = *(_QWORD *)(v565 + 48);
                  *(_QWORD *)(v273 + 48) = a6.n128_u64[0];
                  v9 = a1;
                }
              }
              else
              {
                *((_BYTE *)v651 + 266) = 0;
              }
              v8 = (uint64_t)a3;
              v11 = v652;
              v10 = v653;
              v7 = v650;
              if (!v650)
                goto LABEL_550;
              goto LABEL_442;
            }
          }
        }
      }
LABEL_440:
      v6 = a5;
      v7 = v270;
    }
  }
  if (!v7)
    goto LABEL_550;
LABEL_442:
  if (!v6)
    goto LABEL_550;
  if (!*(_BYTE *)(v11 + 2287) || !*(_BYTE *)(v8 + 653) || !*(_BYTE *)(v16 + 1369))
    goto LABEL_551;
  v274 = *(unsigned __int8 *)(v8 + 657);
  v718 = 0u;
  v719 = 0u;
  v716 = 0u;
  v717 = 0u;
  v714 = 0u;
  v715 = 0u;
  v712 = 0u;
  v713 = 0u;
  v275 = sub_1B68B436C(*(_QWORD *)(v11 + 8), &v712, 1, 0);
  a6.n128_u64[0] = -1;
  a6.n128_u64[1] = -1;
  *(__n128 *)(v6 + 18468) = a6;
  *(__n128 *)(v6 + 18484) = a6;
  *(__n128 *)(v6 + 18500) = a6;
  *(__n128 *)(v6 + 18516) = a6;
  *(__n128 *)(v6 + 18532) = a6;
  *(__n128 *)(v6 + 18548) = a6;
  *(__n128 *)(v6 + 18564) = a6;
  *(__n128 *)(v6 + 18580) = a6;
  if (v275 < 1)
    goto LABEL_549;
  v276 = 0;
  v644 = v6 + 5024;
  v277 = 1;
  v278 = v275;
  v649 = v7;
  v636 = v274;
  v634 = v275;
  do
  {
    while (1)
    {
      v658 = v276;
      if (v274)
      {
        if (v274 == 1)
        {
          v279 = v7;
          v280 = v8;
          v281 = v277;
          a6.n128_u64[0] = *(_QWORD *)(v6 + 48);
          v282 = *((_QWORD *)&v712 + v276);
          if (a6.n128_f64[0] <= 0.0 || (v283 = *(double *)(v282 + 48), v283 <= 0.0))
          {
            v307 = v6 + 5024 + 4 * (char)v276;
            *(_DWORD *)(v307 + 13444) = -1;
            *(_BYTE *)v10 = 6;
            *(_BYTE *)(v6 + 5024 + 3 * (char)v276 + 2) = 0;
            v308 = v6 + 5024 + 6 * (char)v276;
            *(_WORD *)(v308 + 386) = 64;
            *(_WORD *)(v308 + 770) = 0;
            *(_DWORD *)(v307 + 13444) = *(_DWORD *)(v282 + 1276);
          }
          else
          {
            v284 = v276;
            a6.n128_f64[0] = pow(a6.n128_f64[0] / v283, 0.454545455) * 64.0 + 0.5;
            *(_DWORD *)(v6 + 5024 + 4 * v284 + 13444) = *(_DWORD *)(v282 + 1276);
            *(_BYTE *)v10 = 6;
            *(_BYTE *)(v6 + 5024 + 3 * v284 + 2) = (int)a6.n128_f64[0] != 64;
            v285 = (__int16)(int)a6.n128_f64[0];
            if ((__int16)v285 >= 127)
              v285 = 127;
            if (v285 <= -128)
              LOWORD(v285) = -128;
            v286 = v6 + 5024 + 6 * v284;
            *(_WORD *)(v286 + 386) = v285;
            *(_WORD *)(v286 + 770) = 0;
          }
          v277 = v281;
          v8 = v280;
          v7 = v279;
        }
        else
        {
          v304 = v6 + 5024 + 4 * (char)v276;
          *(_DWORD *)(v304 + 13444) = -1;
          v305 = *((_QWORD *)&v712 + v276);
          *(_BYTE *)v10 = 6;
          *(_BYTE *)(v6 + 5024 + 3 * (char)v276 + 2) = 0;
          v306 = v6 + 5024 + 6 * (char)v276;
          *(_WORD *)(v306 + 386) = 64;
          *(_WORD *)(v306 + 770) = 0;
          *(_DWORD *)(v304 + 13444) = *(_DWORD *)(v305 + 1276);
        }
        goto LABEL_540;
      }
      v287 = *((_QWORD *)&v712 + v276);
      v690 = *(_DWORD *)(v6 + 232);
      v288 = *v651;
      v289 = *(unsigned __int16 *)(v287 + 19120);
      v290 = v276;
      if (*((_DWORD *)v651 + 7) <= ((*(_DWORD *)(v287 + 19140) * v288 / v289 + 15) & 0xFFFFFFF0))
        v291 = (*(_DWORD *)(v287 + 19140) * v288 / v289 + 15) & 0xFFFFFFF0;
      else
        v291 = *((_DWORD *)v651 + 7);
      v292 = (((v288 + v288 * *(_DWORD *)(v287 + 19144)) / v289) & 0xFFFFFFF0) - 1;
      if (*((_DWORD *)v651 + 8) < v292)
        v292 = *((_DWORD *)v651 + 8);
      v293 = v651[1];
      v294 = *(unsigned __int16 *)(v287 + 19122);
      v295 = *(_DWORD *)(v287 + 19152);
      v296 = *((_DWORD *)v651 + 10);
      if (*((_DWORD *)v651 + 9) <= ((*(_DWORD *)(v287 + 19148) * v293 / v294 + 15) & 0xFFFFFFF0))
        v297 = (*(_DWORD *)(v287 + 19148) * v293 / v294 + 15) & 0xFFFFFFF0;
      else
        v297 = *((_DWORD *)v651 + 9);
      v662 = v291;
      v298 = v292 - v291 - 63;
      v299 = 3 * v290;
      *(_BYTE *)(v644 + v299 + 2) = 0;
      v300 = v644 + v299 + 2;
      v301 = v644 + 6 * v290;
      *(_WORD *)(v301 + 386) = 64;
      *(_WORD *)(v301 + 770) = 0;
      *(_DWORD *)(v644 + 4 * v290 + 13444) = *(_DWORD *)(v287 + 1276);
      if (v298 <= 0xFFFFFFBF)
      {
        v642 = v277;
        v302 = (((v293 + v293 * v295) / v294) & 0xFFFFFFF0) - 1;
        if (v296 < v302)
          v302 = v296;
        v660 = v302 - 31;
        v638 = v644 + 6 * v290;
        v640 = (BOOL *)v300;
        if (v297 <= v302 - 31)
        {
          v309 = v287;
          v310 = v297;
          v670 = 0;
          v672 = 0;
          v678 = 0;
          v682 = 0;
          v674 = 0;
          v685 = 0;
          v303 = 0;
          v696 = v292 - 31;
          do
          {
            v311 = v662;
            v665 = v310;
            if (v662 <= v696)
            {
              v312 = v310 * v690;
              v668 = v310 >> 1;
              do
              {
                *(_QWORD *)&v703 = 0;
                v700 = 0;
                *(_QWORD *)&v701 = 0;
                v711 = 0;
                v699 = 0;
                sub_1B690850C(*(_QWORD *)(v6 + 128) + v311 + v312, *(_QWORD *)(v309 + 128) + v311 + v312, 32, 32, v690, &v703, &v711, &v701, &v700, &v699);
                v313 = (unint64_t)(((_QWORD)v703 << 8) + 512) >> 10;
                v314 = (unint64_t)((v711 << 8) + 512) >> 10;
                v316 = (v313 - 58881) >= 0xFFFF2DFF
                    && v314 <= 0xE600
                    && v314 >> 10 >= 5;
                if (v316)
                {
                  v317 = v313 - v314;
                  if (v317 < 0)
                    v317 = -v317;
                  if (v317 <= 0x2D00)
                  {
                    v318 = a6.n128_f32[0];
                    v319 = 0;
                    v320 = 0;
                    v321 = *(_QWORD *)(v6 + 136) + (v311 & 0xFFFFFFFE) + *(unsigned __int16 *)(v6 + 248) * v668;
                    v322 = 1;
                    do
                    {
                      v323 = v322;
                      v324 = off_1EF13A3C8(v321 + v319);
                      v322 = 0;
                      v320 += v324;
                      v319 = 16;
                    }
                    while ((v323 & 1) != 0);
                    v325 = ((_QWORD)v701 << 10) - v703 * v703 + 0x80000;
                    v326 = v711 * v711;
                    v327 = v325 >> 22;
                    if ((v318 < 0.9 || v320 >= 0x7D0)
                      && (v320 <= 0x3E7 ? (v328 = v327 > 0x18) : (v328 = 1),
                          !v328 ? (v329 = ((v700 << 10) - v326 + 0x80000) >> 22 > 0x18) : (v329 = 1),
                          v329))
                    {
                      v6 = a5;
                    }
                    else
                    {
                      v330 = (116 - (v325 >> 20)) >> 5;
                      if (v327 < 0x19)
                        v331 = v330 + 1;
                      else
                        v331 = 1;
                      if (v318 >= 0.9)
                      {
                        v333 = v699;
                        v332 = v700;
                      }
                      else
                      {
                        v332 = (unint64_t)(v326 + 512) >> 10;
                        v333 = (unint64_t)(v711 * v703 + 512) >> 10;
                      }
                      ++v685;
                      v674 += v331;
                      v678 += v331 * v703;
                      v682 += v331 * v711;
                      v670 += v333 * v331;
                      v672 += v332 * v331;
                      v6 = a5;
                    }
                  }
                }
                v311 += 64;
                ++v303;
              }
              while (v311 <= v696);
            }
            v310 = v665 + 64;
          }
          while (v665 + 64 <= v660);
        }
        else
        {
          v303 = 0;
          v685 = 0;
          v674 = 0;
          v678 = 0;
          v682 = 0;
          v670 = 0;
          v672 = 0;
        }
        if (v303 >= 4 * v685)
        {
          LODWORD(v341) = 0;
          LODWORD(v339) = 64;
          v8 = (uint64_t)a3;
          v7 = v649;
          v10 = v653;
          v274 = v636;
          v278 = v634;
          v277 = v642;
          v335 = v638;
          v334 = v640;
        }
        else
        {
          v8 = (uint64_t)a3;
          v7 = v649;
          v10 = v653;
          v274 = v636;
          v278 = v634;
          v277 = v642;
          v335 = v638;
          v334 = v640;
          if (v678 <= v682 + (v674 << 10) && v678 >= v682 - (v674 << 10))
            goto LABEL_523;
          v336 = v674 << 10;
          v337 = v672 * (v674 << 10) - v682 * v682;
          v338 = v674 * (v674 << 10);
          LODWORD(v339) = 64;
          if (v337 > v338 << 14)
          {
            v340 = v670 * v336 - v682 * v678;
            if (v340 > v338 << 14)
              v339 = ((v340 << 6) + (v337 >> 1)) / v337;
          }
          if ((int)v339 >= 127)
            LODWORD(v339) = 127;
          v341 = (unint64_t)((uint64_t)(((unint64_t)v336 >> 1) + (v678 << 6) - v682 * (int)v339) / v336 + 32) >> 6;
          if (((int)v339 >= 64 || (int)v341 <= 0) && ((int)v339 <= 64 || (v341 & 0x80000000) == 0))
            goto LABEL_525;
          v339 = ((v678 << 6) + (v682 >> 1)) / v682;
          if ((_DWORD)v339 == 65 || (_DWORD)v339 == 63)
          {
LABEL_523:
            LODWORD(v341) = 0;
            LODWORD(v339) = 64;
          }
          else
          {
            LODWORD(v341) = 0;
          }
        }
LABEL_525:
        *(_BYTE *)v10 = 6;
        v343 = (_DWORD)v339 != 64 || (_DWORD)v341 != 0;
        *v334 = v343;
        LODWORD(v339) = (__int16)v339;
        if ((__int16)v339 >= 127)
          LODWORD(v339) = 127;
        if ((int)v339 <= -128)
          LOWORD(v339) = -128;
        *(_WORD *)(v335 + 386) = v339;
        v344 = (__int16)v341;
        if ((__int16)v341 >= 127)
          v344 = 127;
        if (v344 <= -128)
          LOWORD(v344) = -128;
        *(_WORD *)(v335 + 770) = v344;
      }
LABEL_540:
      if (v277)
        break;
      v277 = 0;
      v276 = v658 + 1;
      if (v658 + 1 == v278)
        goto LABEL_549;
    }
    v277 = *(_BYTE *)(v6 + 3 * (char)v658 + 5026) == 0;
    v276 = v658 + 1;
  }
  while (v658 + 1 != v278);
  if (!*(_BYTE *)(v6 + 3 * (char)v658 + 5026))
  {
    v345 = 0;
    v346 = (uint64_t *)&v712;
    v347 = v6 + 5024;
    do
    {
      v348 = *v346++;
      *(_BYTE *)v10 = 0;
      *(_BYTE *)(v347 + (v345 >> 55) + (v345 >> 56) + 2) = 0;
      v349 = v347 + 6 * (v345 >> 56);
      *(_WORD *)(v349 + 386) = 1;
      *(_WORD *)(v349 + 770) = 0;
      *(_DWORD *)(v347 + (v345 >> 54) + 13444) = *(_DWORD *)(v348 + 1276);
      v345 += 0x100000000000000;
      --v278;
    }
    while (v278);
  }
LABEL_549:
  v9 = a1;
  v11 = v652;
LABEL_550:
  if (!v7)
  {
LABEL_555:
    v357 = a2;
    if (*(_BYTE *)(v8 + 381))
      goto LABEL_556;
    if (a2)
      v359 = *(unsigned __int8 *)(a2 + 532) != 1;
    else
      v359 = -1;
    v400 = *(_QWORD *)v9;
    v401 = *(unsigned int *)(v9 + 48);
    v402 = v401 + 1;
    v403 = *(_DWORD *)(v9 + 36) + *(_DWORD *)(v9 + 32) + *(_DWORD *)(v9 + 24);
    v404 = *(_QWORD *)v9 + 16 * (v401 + 1);
    if ((int)v401 + 1 >= v403)
      v404 = 0;
    if (!v400
      || (v405 = v400 + 16 * v401, v406 = *(_DWORD *)(v405 + 8), (v406 & 0xA) != 0)
      || (v407 = *(_QWORD *)v405, *(_DWORD *)(v405 + 8) = v406 | 8, !v407)
      || (v359 + 1) > 1
      || !*(_BYTE *)(v8 + 322)
      || v402 >= v403
      || (*(_BYTE *)(v404 + 8) & 2) != 0
      || *(_BYTE *)(v8 + 325) != 1
      || (v408 = *(_QWORD *)v404) == 0)
    {
LABEL_556:
      if (a2)
        v358 = *(unsigned __int8 *)(a2 + 532) != 1;
      else
        v358 = -1;
      v675 = *(_QWORD *)(v11 + 8);
      v360 = *(_QWORD *)(v9 + 16);
      v361 = *(_DWORD *)(v9 + 32);
      if (v361 < 1)
      {
        v364 = 0;
        v365 = 0;
        v366 = 0;
        v362 = *(_DWORD *)(v9 + 36);
        v363 = *(_DWORD *)(v9 + 24);
        if (v361 < -1)
          goto LABEL_570;
      }
      else
      {
        v362 = *(_DWORD *)(v9 + 36);
        v363 = *(_DWORD *)(v9 + 24);
        if ((v363 + v362) <= 0x80000000)
          v364 = v360 - 16;
        else
          v364 = 0;
      }
      if (v362 + v363 - 1 >= 1)
        v366 = v360 + 16;
      else
        v366 = 0;
      v365 = v364;
LABEL_570:
      v367 = *(_QWORD *)v9;
      v368 = *(unsigned int *)(v9 + 48);
      if ((int)v368 + 1 >= (v362 + v363 + v361))
        v369 = 0;
      else
        v369 = *(_QWORD *)v9 + 16 * (v368 + 1);
      if (!v360 || (*(_BYTE *)(v360 + 8) & 2) != 0)
      {
        v370 = 0;
        if (!v365)
          goto LABEL_580;
      }
      else
      {
        v370 = *(_QWORD *)v360;
        if (!v365)
          goto LABEL_580;
      }
      if ((*(_BYTE *)(v365 + 8) & 2) == 0)
      {
        v371 = *(_QWORD *)v365;
LABEL_581:
        v372 = v367 + 16 * v368;
        if (!v366 || (*(_BYTE *)(v366 + 8) & 2) != 0)
        {
          v373 = 0;
          if (!v367)
            goto LABEL_587;
        }
        else
        {
          v373 = *(_QWORD *)v366;
          if (!v367)
            goto LABEL_587;
        }
        if ((*(_BYTE *)(v372 + 8) & 0x12) == 0)
        {
          v697 = *(_QWORD *)v372;
          if (!v369)
            goto LABEL_592;
          goto LABEL_590;
        }
LABEL_587:
        v697 = 0;
        if (!v369)
          goto LABEL_592;
LABEL_590:
        if ((*(_BYTE *)(v369 + 8) & 2) == 0)
        {
          v691 = *(_QWORD *)v369;
LABEL_593:
          *(_DWORD *)(v372 + 8) |= 0x10u;
          v374 = v358 << 24;
          v375 = a2;
          if (v358 << 24 && v374 != -16777216)
          {
            if (v358 != 1)
              goto LABEL_669;
            if (!v697)
              goto LABEL_669;
            v385 = *(_DWORD *)(v697 + 1276);
            if (!v385)
              goto LABEL_669;
            v386 = *(_DWORD *)(a2 + 192);
            if (v386 <= v385)
              v385 = v386 - 1;
            v387 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 368) + v385);
          }
          else
          {
            a6.n128_u16[0] = 0;
            a6.n128_u8[2] = 0;
            a6.n128_u8[3] = 0;
            v720 = 0u;
            v721 = 0u;
            v718 = 0u;
            v719 = 0u;
            v716 = 0u;
            v717 = 0u;
            v714 = 0u;
            v715 = 0u;
            v712 = 0u;
            v713 = 0u;
            v376 = *(unsigned __int8 *)(v8 + 318);
            if (v376 >= 0x14)
              v377 = 20;
            else
              v377 = *(unsigned __int8 *)(v8 + 318);
            if (!(_DWORD)v377)
              goto LABEL_606;
            v378 = *(_DWORD *)(v9 + 48);
            v379 = *(_DWORD *)(v9 + 36) + *(_DWORD *)(v9 + 32) + *(_DWORD *)(v9 + 24);
            v380 = &v712;
            v381 = v377;
            do
            {
              if (v378 >= v379)
              {
                v382 = 0;
              }
              else
              {
                v382 = *(_QWORD *)v9;
                if (*(_QWORD *)v9)
                  v382 = *(_QWORD *)(v382 + 16 * v378);
              }
              *(_QWORD *)v380 = v382;
              v380 = (__int128 *)((char *)v380 + 8);
              ++v378;
              --v381;
            }
            while (v381);
            if (v376 <= 0x13)
            {
LABEL_606:
              v383 = v371;
              bzero((char *)&v712 + (8 * v377), 8 * (19 - v377) + 8);
              v371 = v383;
              v357 = a2;
              v9 = a1;
            }
            if (!v697)
              goto LABEL_669;
            if (*((_QWORD *)&v712 + 1))
            {
              v384 = v371;
              (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v9 + 56) + 16))(*(_QWORD *)(v9 + 56), &v712);
              v371 = v384;
              v357 = a2;
              v9 = a1;
LABEL_669:
              if (!v370)
                goto LABEL_835;
              v679 = v373;
              v683 = v371;
              *(_QWORD *)&v715 = 0;
              v713 = 0u;
              v714 = 0u;
              v712 = 0u;
              v410 = *(unsigned __int8 *)(v8 + 673);
              if (!*(_BYTE *)(v8 + 673))
                goto LABEL_689;
              if (*(_BYTE *)(v8 + 322) && *(_BYTE *)(v8 + 323) && *(_BYTE *)(v9 + 216))
              {
                v411 = 0;
                v412 = *(_QWORD **)(v9 + 16);
                do
                {
                  if (!*v412)
                    break;
                  *((_QWORD *)&v712 + v411) = *v412 + 4800;
                  v412 -= 2;
                  ++v411;
                }
                while (v411 != 7);
              }
              else
              {
                LODWORD(v411) = 0;
              }
              v413 = 1;
              if (v358 == 1 && v410 == 2)
              {
                v414 = *(_DWORD *)(v370 + 1276);
                v415 = *(_DWORD *)(a2 + 192);
                if (v415 <= v414)
                  v414 = v415 - 1;
                v413 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 368) + v414);
              }
              if (v411 >= 2)
              {
                v416 = *(_DWORD *)(v370 + 224) / 0x64u * (*(_DWORD *)(v370 + 224) / 0x64u)
                     + *(_DWORD *)(v370 + 192) / 0x64u * (*(_DWORD *)(v370 + 192) / 0x64u);
                if (v416)
                {
                  v417 = v697;
                  v418 = __clz(v416);
                  v419 = ((byte_1B69327A4[(unint64_t)(v416 << (v418 + 1)) >> 24] << 12) | 0x200000u) >> ((v418 + 1) >> 1);
                  if ((v418 & 1) == 0)
                    v419 = (11585 * v419) >> 14;
                  v420 = (v419 + 16) >> 5;
                }
                else
                {
                  v417 = v697;
                  v420 = 0;
                }
                v697 = v417;
                v421 = 4 * v420;
                bzero(*(void **)(v370 + 4704), 2 * *(unsigned int *)(v370 + 4564));
                v422 = 12 * v420;
                v423 = 16 * v420;
                v424 = 1;
                LODWORD(v425) = *(_DWORD *)(v370 + 4564);
                v426 = v425;
                v9 = a1;
                v375 = a2;
                do
                {
                  if (v426)
                  {
                    v427 = 0;
                    v428 = 0;
                    v429 = *((_QWORD *)&v712 + v424);
                    do
                    {
                      v430 = (int *)(*(_QWORD *)(v429 + 16) + v427);
                      v431 = (*v430 >> 16) * (*v430 >> 16) + (__int16)*v430 * (__int16)*v430;
                      if (v431)
                      {
                        v432 = __clz(v431);
                        v433 = ((byte_1B69327A4[(unint64_t)(v431 << (v432 + 1)) >> 24] << 12) | 0x200000u) >> ((v432 + 1) >> 1);
                        if ((v432 & 1) == 0)
                          v433 = (11585 * v433) >> 14;
                        v434 = (v433 + 16) >> 5;
                      }
                      else
                      {
                        v434 = 0;
                      }
                      v435 = *(_QWORD *)(v370 + 4704);
                      v436 = *(__int16 *)(v435 + 2 * v428);
                      v437 = *(_WORD *)(*(_QWORD *)(v370 + 4696) + 2 * v428);
                      v438 = v437 * v437;
                      v439 = 0x8000;
                      if ((v436 & 0x80000000) == 0 && v421 >= v434)
                      {
                        v440 = (v434 + v422) * (unsigned __int16)v430[3] / v423;
                        v439 = (unsigned __int16)v440 >= v438 ? 0x8000 : 0;
                        if ((unsigned __int16)v440 < v438)
                          v438 = v440;
                      }
                      *(_WORD *)(v435 + 2 * v428++) = (v438 + v436) | v439;
                      v425 = *(unsigned int *)(v370 + 4564);
                      v427 += 36;
                    }
                    while (v428 < v425);
                    v426 = *(_DWORD *)(v370 + 4564);
                  }
                  ++v424;
                }
                while (v424 != v411);
                if ((_DWORD)v425)
                {
                  v441 = 0;
                  v442 = 0;
                  v443 = v411 - 1;
                  v444 = v712;
                  do
                  {
                    v445 = *(_QWORD *)(v370 + 4704);
                    v446 = *(_WORD *)(v445 + 2 * v442) & 0x7FFF;
                    if (v443 <= v446)
                    {
                      v448 = v446 / v443;
                      v449 = __clz(v448);
                      v450 = ((byte_1B69327A4[(unint64_t)(v448 << (v449 + 1)) >> 24] << 12) | 0x200000u) >> ((v449 + 1) >> 1);
                      if ((v449 & 1) == 0)
                        v450 = (11585 * v450) >> 14;
                      v447 = (v450 + 16) >> 5;
                    }
                    else
                    {
                      v447 = 0;
                    }
                    v451 = *(unsigned __int16 *)(*(_QWORD *)(v370 + 4696) + 2 * v442);
                    if (!v413)
                    {
                      v452 = (int *)(*(_QWORD *)(v444 + 16) + v441);
                      v453 = (*v452 >> 16) * (*v452 >> 16) + (__int16)*v452 * (__int16)*v452;
                      if (v453)
                      {
                        v454 = __clz(v453);
                        v455 = ((byte_1B69327A4[(unint64_t)(v453 << (v454 + 1)) >> 24] << 12) | 0x200000u) >> ((v454 + 1) >> 1);
                        if ((v454 & 1) == 0)
                          v455 = (11585 * v455) >> 14;
                        v453 = (v455 + 16) >> 5;
                      }
                      if (v447 < v451 && (v421 <= v453 || (unsigned __int16)v452[3] > 2 * v447))
                        v447 >>= 1;
                    }
                    v456 = (unsigned __int16)v447 + 1;
                    *(_WORD *)(v445 + 2 * v442) = v456;
                    if (v451 > v456)
                    {
                      v457 = v456 * v451;
                      v458 = __clz(v456 * v451);
                      v459 = ((byte_1B69327A4[(unint64_t)(v457 << (v458 + 1)) >> 24] << 12) | 0x200000u) >> ((v458 + 1) >> 1);
                      if ((v458 & 1) == 0)
                        v459 = (11585 * v459) >> 14;
                      LOWORD(v451) = (v459 + 16) >> 5;
                    }
                    *(_WORD *)(*(_QWORD *)(v370 + 4712) + 2 * v442++) = v451;
                    v441 += 36;
                  }
                  while (v442 < *(unsigned int *)(v370 + 4564));
                }
              }
              else
              {
LABEL_689:
                memcpy(*(void **)(v370 + 4712), *(const void **)(v370 + 4696), 2 * *(unsigned int *)(v370 + 4564));
                v9 = a1;
              }
              *(_WORD *)(v370 + 4720) = *(_WORD *)(v370 + 4722);
              v8 = (uint64_t)a3;
              v373 = v679;
              v371 = v683;
              v357 = v375;
              if (v374 != -16777216)
              {
                if (v374 == 0x1000000)
                {
                  v475 = *(_DWORD *)(v370 + 1276);
                  v476 = *(_DWORD *)(v375 + 192);
                  if (v476 <= v475)
                    v475 = v476 - 1;
                  *(_WORD *)(v370 + 4728) = *(_WORD *)(*(_QWORD *)(v375 + 376) + 2 * v475);
                  goto LABEL_835;
                }
                if (v374)
                {
LABEL_835:
                  *(_QWORD *)&v703 = 0;
                  WORD4(v703) = 1;
                  BYTE1(v704) = 0;
                  *(_BYTE *)(v9 + 80) = *(_BYTE *)(v360 + 8) & 4;
                  *(_BYTE *)(v9 + 81) = *(_BYTE *)(v372 + 8) & 4;
                  sub_1B68BA7D0(v9 + 64, v8, v357, (uint64_t)&v703, v373, v370, v371, v691, a6.n128_f32[0], v697, v358);
                  v520 = *(_BYTE **)(a1 + 16);
                  if (!*(_QWORD *)v520 || *(_BYTE *)(*(_QWORD *)v520 + 1392) || (v520[8] & 4) != 0)
                  {
                    v521 = *(_DWORD *)(a1 + 24);
                    if (v521 >= 1)
                    {
                      v522 = 0;
                      v523 = -16;
                      v524 = 1;
                      do
                      {
                        v525 = *(_QWORD *)(a1 + 16);
                        v526 = (uint64_t *)(v525 + 16 * v522);
                        v527 = *v526;
                        if (*v526)
                        {
                          if ((v526[1] & 2) == 0)
                          {
                            v528 = *(unsigned __int8 *)(v527 + 1397);
                            if (*(_BYTE *)(v527 + 1397))
                            {
                              v529 = (uint64_t *)(v525 + v523);
                              v530 = v524;
                              while (--v530 >= 1)
                              {
                                v531 = *v529;
                                if (!*v529 || *(_BYTE *)(v531 + 1392))
                                  break;
                                v529 -= 2;
                                v528 -= *(unsigned __int8 *)(v531 + 1394) != 0;
                                if (!v528)
                                  goto LABEL_861;
                              }
                              *(_QWORD *)&v712 = 0;
                              WORD4(v712) = 1;
                              BYTE1(v713) = 0;
                              v532 = v522 == 1;
                              v533 = v521 > 2;
                              if (v532 && v533)
                                v534 = 5;
                              else
                                v534 = 7;
                              if (v532 && v533)
                                v535 = 0;
                              else
                                v535 = *(_BYTE *)(v527 + 1404) & 0xF;
                              sub_1B68BBCC0((uint64_t)&v712, v534, v535, *(_BYTE *)(v527 + 1404) >> 4);
                              v536 = 0;
                              *(_WORD *)(v527 + 1359) = WORD4(v712);
                              *(_BYTE *)(v527 + 1368) = v712;
                              *(_BYTE *)(v527 + 1393) = BYTE4(v712);
                              *(_BYTE *)(v527 + 1392) = BYTE5(v712);
                              *(_BYTE *)(v527 + 1394) = BYTE6(v712);
                              *(_BYTE *)(v527 + 1396) = BYTE10(v712);
                              v537 = HIDWORD(v712) - 6;
                              *(_BYTE *)(v527 + 1356) = 0;
                              if (v537 <= 0xF)
                                v536 = byte_1B69181A0[v537];
                              *(_BYTE *)(v527 + 1397) = v536;
                              *(_BYTE *)(v527 + 1404) = v713;
                              *(_BYTE *)(v527 + 1403) = BYTE1(v713);
                              if (a2)
                              {
                                v538 = *(unsigned int *)(v527 + 1276);
                                if (*(_DWORD *)(a2 + 192) > v538)
                                  *(_BYTE *)(*(_QWORD *)(a2 + 360) + v538) = v534;
                              }
                              v521 = *(_DWORD *)(a1 + 24);
                            }
                          }
                        }
LABEL_861:
                        ++v522;
                        ++v524;
                        v523 += 16;
                      }
                      while (v522 < v521);
                    }
                  }
                  if (v370 && a3[577] == 1)
                  {
                    if (*(_BYTE *)(v652 + 133))
                    {
                      sub_1B68B2A94(*(_QWORD *)(v652 + 8), v370, *(_QWORD *)v652);
                    }
                    else if (a3[615])
                    {
                      v551 = *(unsigned __int8 *)(v370 + 1368);
                      if (v551 != 1 && v551 != 6)
                      {
                        sub_1B6904DDC(v370, 0, v675, (unsigned int *)(v370 + 4800), a3[653], 1, 1, a3[678], a3[680], a3[321], *(_WORD *)(v645 + 23), HIBYTE(*(_WORD *)(v645 + 23)));
                        if (a3[668])
                        {
                          if (a3[653])
                          {
                            v718 = 0u;
                            v719 = 0u;
                            v716 = 0u;
                            v717 = 0u;
                            v714 = 0u;
                            v715 = 0u;
                            v712 = 0u;
                            v713 = 0u;
                            v552 = sub_1B68B43F0(v675, &v712, 1);
                            if (v552)
                            {
                              v553 = v552;
                              v554 = sub_1B68B4314(v675);
                              v555 = 0;
                              if ((char)v554 <= 1)
                                v556 = 1;
                              else
                                v556 = (char)v554;
                              do
                              {
                                v557 = *((_QWORD *)&v712 + v555);
                                if (*(unsigned __int8 *)(v557 + 23) >= a3[658]
                                  && v554 << 24 >= 1)
                                {
                                  v558 = *(_DWORD *)(v557 + 1276);
                                  v559 = (int *)(v370 + 18468);
                                  v560 = v556;
                                  v561 = (_BYTE *)(v370 + 5026);
                                  do
                                  {
                                    v562 = *v559++;
                                    if (v562 == v558)
                                      *v561 = 0;
                                    v561 += 3;
                                    --v560;
                                  }
                                  while (v560);
                                }
                                ++v555;
                              }
                              while (v555 != v553);
                            }
                          }
                        }
                      }
                    }
                  }
                  if (**(_DWORD **)(a1 + 240) == 2 && a3[322])
                  {
                    v539 = 0;
                    v540 = 0;
                    v541 = -1;
                    do
                    {
                      v542 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v540);
                      if (!v542)
                        break;
                      v543 = *(_DWORD *)(v542 + 19156);
                      v544 = *(_DWORD *)(v542 + 4564);
                      v545 = v544 >> 1;
                      if (a3[663])
                      {
                        v546 = *(_DWORD *)(v542 + 1276);
                        v547 = *(_QWORD *)(a1 + 240) + 1768;
                        sub_1B68A1E08(v547, (v545 + v543 * *(unsigned __int16 *)(v542 + 4834)) / v544, (v545 + *(_DWORD *)(v542 + 4632) * v543) / v544, (v545 + v543 * *(unsigned __int16 *)(v542 + 4832)) / v544, v546);
                        sub_1B68A1E80(v547, v546, 0, 1, 1);
                        *(_DWORD *)(v542 + 1264) = (v548 + 0.5);
                      }
                      else
                      {
                        v549 = *(_DWORD *)(v542 + 1276);
                        if (v549 > *(_DWORD *)(a1 + 248))
                        {
                          *(_DWORD *)(a1 + 248) = v549;
                          sub_1B68A1E08(*(_QWORD *)(a1 + 240) + 1768, (v545 + v543 * *(unsigned __int16 *)(v542 + 4834)) / v544, (v545 + *(_DWORD *)(v542 + 4632) * v543) / v544, (v545 + v543 * *(unsigned __int16 *)(v542 + 4832)) / v544, *(_DWORD *)(v542 + 1276));
                        }
                      }
                      ++v541;
                      v540 -= 16;
                      --v539;
                    }
                    while (v541 < *(unsigned __int8 *)(a1 + 216));
                  }
                  return 0;
                }
              }
              LODWORD(v460) = a3[322];
              if (a3[322]
                && (LODWORD(v460) = a3[323], a3[323])
                && (LODWORD(v460) = *(unsigned __int8 *)(a1 + 216), *(_BYTE *)(a1 + 216)))
              {
                LODWORD(v460) = *(unsigned __int8 *)(a1 + 217);
                if (!*(_BYTE *)(a1 + 217))
                  goto LABEL_741;
                v461 = 0;
                v462 = 0;
                v460 = 0;
                do
                {
                  v463 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v462);
                  if (!v463)
                    break;
                  ++v460;
                  *(_WORD *)(*(_QWORD *)(a1 + 176) + 2 * v461) = *(_WORD *)(v463 + 4838);
                  *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v461) = *(_WORD *)(v463 + 4834);
                  *(_BYTE *)(*(_QWORD *)(a1 + 208) + v461) = *(_DWORD *)(v463 + 5004);
                  v462 += 16;
                  --v461;
                }
                while (v460 < *(unsigned __int8 *)(a1 + 217));
                v464 = *(unsigned __int8 *)(a1 + 216);
                if (*(_BYTE *)(a1 + 216))
                {
LABEL_741:
                  v465 = -16;
                  v466 = -1;
                  v467 = 1;
                  while (1)
                  {
                    v468 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v465);
                    if (!v468)
                      break;
                    *(_WORD *)(*(_QWORD *)(a1 + 176) + 2 * v467) = *(_WORD *)(v468 + 4838);
                    *(_WORD *)(*(_QWORD *)(a1 + 192) + 2 * v467) = *(_WORD *)(v468 + 4834);
                    *(_BYTE *)(*(_QWORD *)(a1 + 208) + v467) = *(_DWORD *)(v468 + 5004);
                    v469 = v467 + 1;
                    v465 -= 16;
                    --v466;
                    v316 = v467++ >= *(unsigned __int8 *)(a1 + 216);
                    if (v316)
                    {
                      v464 = v469 - 1;
                      goto LABEL_747;
                    }
                  }
                  v464 = v467 - 1;
                }
              }
              else
              {
                v464 = 0;
              }
LABEL_747:
              v470 = *(_QWORD *)(a1 + 176);
              if (v460 >= 7)
                v460 = 7;
              else
                v460 = v460;
              if (v464 >= 6)
                v471 = 6;
              else
                v471 = v464;
              if ((_DWORD)v460)
              {
                v472 = 0;
                v473 = *(unsigned __int8 **)(a1 + 208);
                while (!*v473--)
                {
                  if (v460 == ++v472)
                    goto LABEL_762;
                }
                LODWORD(v460) = v472;
              }
LABEL_762:
              if ((_DWORD)v471)
              {
                v477 = 0;
                while (1)
                {
                  v478 = v477 + 1;
                  if (*(_BYTE *)(*(_QWORD *)(a1 + 208) + 1 + v477))
                    break;
                  ++v477;
                  if (v471 == v478)
                    goto LABEL_768;
                }
                LODWORD(v471) = v477 + 1;
              }
LABEL_768:
              if (*(_WORD *)(v370 + 4724))
              {
                v479 = *(unsigned __int16 *)(v370 + 4724) << 8;
                v480 = __clz(v479);
                v481 = ((byte_1B69327A4[(unint64_t)(v479 << (v480 + 1)) >> 24] << 12) | 0x200000u) >> ((v480 + 1) >> 1);
                if ((v480 & 1) == 0)
                  v481 = (11585 * v481) >> 14;
                v482 = (v481 + 16) >> 5;
                if (v470)
                {
                  if (!(_DWORD)v460)
                    goto LABEL_779;
LABEL_772:
                  v483 = 0;
                  v484 = 0;
                  v485 = *(unsigned __int16 **)(a1 + 176);
                  v486 = v460;
                  do
                  {
                    v483 += v486;
                    v487 = *v485--;
                    v484 += v486-- * v487;
                  }
                  while (v486);
                  if (v483)
                  {
                    v488 = (v484 + (v483 >> 1)) / v483;
                    if (!v464)
                      goto LABEL_777;
                  }
                  else
                  {
LABEL_779:
                    v488 = 0;
                    if (!v464)
                    {
LABEL_777:
                      v489 = 0;
                      v490 = v488;
                      v491 = v488;
                      if (!(_DWORD)v460)
                        goto LABEL_794;
                      goto LABEL_793;
                    }
                  }
                  v492 = 0;
                  v493 = 0;
                  v494 = 0;
                  v489 = 0;
                  v495 = 0;
                  v496 = v471;
                  if (v464 + 1 > 2)
                    v497 = v464 + 1;
                  else
                    v497 = 2;
                  v498 = 1;
                  do
                  {
                    v499 = *(unsigned __int16 *)(v470 + 2 * v498);
                    if (v498 <= v496)
                      v500 = v471;
                    else
                      v500 = 0;
                    v495 += v464 * v499;
                    v494 += v500 * v499;
                    v493 += v500;
                    v492 += v464;
                    if (v498 == 1)
                      v489 = *(unsigned __int16 *)(v470 + 2);
                    ++v498;
                    LODWORD(v471) = v471 - 1;
                    --v464;
                  }
                  while (v497 != v498);
                  if (v493)
                  {
                    v491 = (v494 + (v493 >> 1)) / v493;
                    if (v492)
                      goto LABEL_792;
                  }
                  else
                  {
                    v491 = 0;
                    if (v492)
                    {
LABEL_792:
                      v490 = (v495 + (v492 >> 1)) / v492;
                      if (!(_DWORD)v460)
                      {
LABEL_794:
                        v501 = v491 << 8;
                        if (v491 << 8)
                        {
                          v502 = __clz(v501);
                          v503 = ((byte_1B69327A4[(unint64_t)(v501 << (v502 + 1)) >> 24] << 12) | 0x200000u) >> ((v502 + 1) >> 1);
                          if ((v502 & 1) == 0)
                            v503 = (11585 * v503) >> 14;
                          v501 = (v503 + 16) >> 5;
                        }
                        v504 = ((v501 - 2 * v482) & ((int)(v501 - 2 * v482) >> 31)) + 2 * v482;
                        if (v482 <= 16 * v504)
                          v505 = v504;
                        else
                          v505 = v482 >> 4;
                        *(_WORD *)(v370 + 4726) = v505;
                        v506 = v505 * v482;
                        if (v482 > v505)
                        {
                          if (v505)
                          {
                            v507 = __clz(v506);
                            v508 = ((byte_1B69327A4[(unint64_t)(v506 << (v507 + 1)) >> 24] << 12) | 0x200000u) >> ((v507 + 1) >> 1);
                            if ((v507 & 1) != 0)
                              v509 = v508;
                            else
                              v509 = (11585 * v508) >> 14;
                            v510 = (v509 + 16) >> 5;
                          }
                          else
                          {
                            v510 = 0;
                          }
                          v506 = v510 * v505;
                        }
                        if (v506)
                        {
                          v511 = __clz(v506);
                          if ((v511 & 1) != 0)
                            v512 = ((byte_1B69327A4[(unint64_t)(v506 << (v511 + 1)) >> 24] << 12) | 0x200000u) >> ((v511 + 1) >> 1);
                          else
                            v512 = (11585
                                  * (((byte_1B69327A4[(unint64_t)(v506 << (v511 + 1)) >> 24] << 12) | 0x200000u) >> ((v511 + 1) >> 1))) >> 14;
                          v482 = (v512 + 16) >> 5;
                        }
                        else
                        {
                          LOWORD(v482) = 0;
                        }
                        goto LABEL_820;
                      }
LABEL_793:
                      v491 = (((9 * v488 - 8 * v491) & ((int)(9 * v488 - 8 * v491) >> 31)) + 8 * v491) >> 3;
                      goto LABEL_794;
                    }
                  }
                  v490 = 0;
                  if (!(_DWORD)v460)
                    goto LABEL_794;
                  goto LABEL_793;
                }
              }
              else
              {
                v482 = 0;
                if (v470)
                  goto LABEL_772;
              }
              v490 = 0;
              v489 = 0;
LABEL_820:
              *(_WORD *)(v370 + 4728) = v482 + 1;
              *(_DWORD *)(v370 + 4752) = v490;
              *(_DWORD *)(v370 + 4756) = v489;
              if (!v358)
              {
                v513 = *(unsigned int *)(v370 + 1276);
                if (*(_DWORD *)(v375 + 192) > v513)
                {
                  v514 = (unsigned __int16)(v482 + 1);
                  if (v514 >= 0x7FFE)
                    LOWORD(v514) = 32766;
                  *(_WORD *)(*(_QWORD *)(v375 + 376) + 2 * v513) = v514;
                }
                if (a3[316] == 1)
                {
                  v515 = *(unsigned int *)(v370 + 1276);
                  v516 = *(_QWORD *)(v375 + 384);
                  v517 = *(_DWORD *)(v375 + 192);
                  if (v516 && v517 > v515)
                  {
                    v518 = *(unsigned __int16 *)(v370 + 4838);
                    if (v518 >= 0x7FFE)
                      LOWORD(v518) = 32766;
                    *(_WORD *)(v516 + 2 * v515) = v518;
                    LODWORD(v515) = *(_DWORD *)(v370 + 1276);
                    v517 = *(_DWORD *)(v375 + 192);
                  }
                  if (v517 > v515)
                  {
                    v519 = *(unsigned __int16 *)(v370 + 4724);
                    if (v519 >= 0x7FFE)
                      LOWORD(v519) = 32766;
                    *(_WORD *)(*(_QWORD *)(v375 + 392) + 2 * v515) = v519;
                  }
                }
              }
              goto LABEL_835;
            }
            if (*(_DWORD *)(v697 + 1276))
            {
              *(_DWORD *)(v697 + 5004) = 0;
              goto LABEL_669;
            }
            v387 = 1;
          }
          *(_DWORD *)(v697 + 5004) = v387;
          goto LABEL_669;
        }
LABEL_592:
        v691 = 0;
        goto LABEL_593;
      }
LABEL_580:
      v371 = 0;
      goto LABEL_581;
    }
    if ((_BYTE)v359)
    {
      v409 = *(unsigned __int8 *)(v408 + 1394);
    }
    else
    {
      v607 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 360) + *(unsigned int *)(v408 + 1276));
      if (v607 < 0x17 && ((0x48066Fu >> v607) & 1) != 0)
        goto LABEL_943;
      v409 = v607 == 23;
    }
    if (!v409)
    {
      v408 = *(_QWORD *)(v9 + 64);
LABEL_945:
      sub_1B6906E00(*(_QWORD *)(v9 + 224), v408, v407, *(_QWORD *)(v9 + 72), *(unsigned __int8 *)(v8 + 379));
      v9 = a1;
      v608 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 488);
      if (v608)
      {
        *(_DWORD *)(v608 + 64) = 1;
        *(_QWORD *)(v608 + 56) = 0x100000001;
        a6.n128_u32[0] = 1;
        *(_OWORD *)(v608 + 152) = xmmword_1B6917C40;
      }
      goto LABEL_556;
    }
LABEL_943:
    *(_QWORD *)(v9 + 64) = v408;
    goto LABEL_945;
  }
LABEL_551:
  if (!*(_BYTE *)(v11 + 136))
    goto LABEL_555;
  v350 = *(_QWORD *)(v9 + 16);
  v351 = *(_QWORD *)v350;
  if (*(_QWORD *)v350)
  {
    v352 = *(_DWORD *)(v9 + 32);
    v353 = *(_DWORD *)(v9 + 36);
    v354 = *(_DWORD *)(v9 + 24);
    v355 = v353 + v354 - 1;
    *(_QWORD *)&v712 = 0;
    WORD4(v712) = 1;
    BYTE1(v713) = 0;
    if (a2)
      v356 = *(_BYTE *)(a2 + 532) != 1;
    else
      v356 = -1;
    v388 = 0;
    if (v352)
      v389 = (v354 + v353) > 0x80000000;
    else
      v389 = 1;
    v390 = v389;
    if (v390)
      v391 = 0;
    else
      v391 = v350 - 16;
    v392 = v350 + 16;
    if (v355 < 1)
      v392 = 0;
    v393 = v353 + v352;
    v394 = *(_DWORD *)(v9 + 48) + 1;
    if (v394 < v393 + v354)
      v388 = *(_QWORD *)v9 + 16 * v394;
    if (v645[37])
    {
      if ((*(_BYTE *)(v350 + 8) & 2) != 0)
        v395 = 0;
      else
        v395 = v351;
      if ((v390 & 1) != 0)
      {
LABEL_639:
        v396 = 0;
        goto LABEL_640;
      }
    }
    else
    {
      v395 = *(_QWORD *)(v11 + 40);
      if ((v390 & 1) != 0)
        goto LABEL_639;
    }
    if ((*(_BYTE *)(v391 + 8) & 2) != 0)
      goto LABEL_639;
    v396 = *(_QWORD *)v391;
LABEL_640:
    if (v355 < 1 || (*(_BYTE *)(v392 + 8) & 2) != 0)
    {
      v397 = 0;
      if (!v388)
        goto LABEL_647;
    }
    else
    {
      v397 = *(_QWORD *)v392;
      if (!v388)
      {
LABEL_647:
        v398 = 0;
        goto LABEL_648;
      }
    }
    if ((*(_BYTE *)(v388 + 8) & 2) != 0)
      goto LABEL_647;
    v398 = *(_QWORD *)v388;
LABEL_648:
    sub_1B68BA7D0(v9 + 64, v8, a2, (uint64_t)&v712, v397, v395, v396, v398, a6.n128_f32[0], 0, v356);
    v399 = *(_QWORD *)(v9 + 240);
    if (*(_DWORD *)v399 == 2)
      *(_DWORD *)(v351 + 1264) = *(double *)(v399 + 1840);
    sub_1B68B2A94(*(_QWORD *)(v11 + 8), v395, *(_QWORD *)v11);
  }
  return 0;
}

int32x2_t *sub_1B68A17B8(int32x2_t *result, uint64_t a2, unsigned __int8 a3, _DWORD *a4)
{
  unsigned __int32 v4;
  signed __int32 v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int32x2_t v9;
  unint64_t v10;
  _DWORD *v11;
  int v12;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v23;
  uint64_t v24;

  v4 = result[3].u32[0];
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(_QWORD *)&result[2] + 16 * (int)(v4 - 1);
    if (*(_QWORD *)v6)
    {
      if ((*(_BYTE *)(v6 + 8) & 2) == 0)
      {
        v7 = 0;
        v8 = 0;
        while (2)
        {
          v9 = result[2];
          v10 = v4;
          v11 = (_DWORD *)(*(_QWORD *)&v9 + 16 * v7);
          while (1)
          {
            v12 = v11[2];
            if ((v12 & 2) != 0 || !*(_QWORD *)v11)
              break;
            if ((*(_BYTE *)(*(_QWORD *)v11 + 1404) & 0xF) == 0 || v8 != 0)
            {
              if ((v12 & 1) != 0)
              {
                v8 = 1;
              }
              else
              {
                ++result[5].i32[1];
                --result[3].i32[1];
                v11[2] |= 1u;
                v10 = result[3].u32[0];
                v8 = 1;
                v4 = result[3].u32[0];
              }
              break;
            }
            v8 = 0;
            ++v7;
            v11 += 4;
            if (v7 >= v4)
              goto LABEL_21;
          }
          if (++v7 < v10)
            continue;
          break;
        }
        if (!v8)
        {
          v9 = result[2];
LABEL_21:
          v14 = (_DWORD *)(*(_QWORD *)&v9 + 16 * v5);
          if (*(_BYTE *)(*(_QWORD *)v14 + 1396))
          {
            ++result[5].i32[1];
            --result[3].i32[1];
            v14[2] |= 1u;
          }
        }
      }
    }
  }
  if (result[5].i32[1])
  {
    LODWORD(v15) = 0;
    v16 = (result[3].i32[0] - 1);
    if ((int)v16 >= 0 && a3)
    {
      v15 = 0;
      v17 = 16 * (result[3].i32[0] - 1);
      do
      {
        v18 = *(_QWORD *)&result[2] + v17;
        v19 = *(_QWORD *)v18;
        v20 = *(_DWORD *)(v18 + 8);
        if (*(_QWORD *)v18)
          v21 = (*(_DWORD *)(v18 + 8) & 1) == 0;
        else
          v21 = 1;
        if (!v21 && (*(_DWORD *)(v18 + 8) & 2) == 0)
        {
          v23 = *(_DWORD *)(v18 + 12);
          *(_QWORD *)(a2 + 8 * v15) = v19;
          v24 = *(_QWORD *)&result[2] + v17;
          *(_QWORD *)v24 = v19;
          *(_DWORD *)(v24 + 8) = v20 | 2;
          *(_DWORD *)(v24 + 12) = v23;
          result[5] = vadd_s32(result[5], (int32x2_t)-1);
          ++v15;
        }
        if (v16-- < 1)
          break;
        v17 -= 16;
      }
      while (v15 < a3);
    }
  }
  else
  {
    LODWORD(v15) = 0;
  }
  *a4 = v15;
  return result;
}

double sub_1B68A195C(uint64_t a1, int a2, int a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;

  if (*(_DWORD *)(a1 + 88))
  {
    if (a6 <= 0.0)
    {
      v6 = *(double *)(a1 + 16);
      v7 = *(double *)(a1 + 24);
      v8 = 1.0;
      *(double *)(a1 + 40) = a6;
      if (a3)
        return v8 * a4;
    }
    else
    {
      v6 = *(double *)(a1 + 16);
      v7 = *(double *)(a1 + 24);
      *(double *)(a1 + 40) = a6;
      if (a3)
      {
        v8 = v7 / a6;
        return v8 * a4;
      }
      v8 = v6 / a6;
    }
    v14 = v7 / v6;
    if (a2)
      return v8 * a4;
    v15 = *(int *)(a1 + 52);
    if ((int)v15 > 6 * *(_DWORD *)(a1 + 96))
    {
      v16 = *(_QWORD *)(a1 + 80);
      v17 = a5 > 0.04 && v16 <= v15;
      if (v17 || v16 >= 1 && (double)(int)v15 * a5 / ((double)v16 + 0.01) > 0.04)
      {
        v17 = v16 <= v15;
        v18 = v16 - v15;
        if (v17)
          v19 = (a5 + -0.04) * a6;
        else
          v19 = (a5 + -0.04) * a6 * fmax(fmin((double)(int)v15 / (double)v18, 2.0), 0.5);
        v20 = 1.0;
        if (v6 > 0.0)
          v20 = (v7 * 0.7 + v6 * 0.3) / v6;
        if (v19 < a6)
        {
          v25 = a6 / (a6 - v19);
          if (v20 < v25)
          {
            if (v20 <= 1.0)
              v20 = v25 - (1.0 - v20);
            else
              v20 = v25;
          }
        }
        goto LABEL_52;
      }
    }
    if (v14 >= 0.8)
    {
      v20 = 1.0;
      if (v14 <= 1.3)
      {
LABEL_52:
        v24 = fmax(fmin(v20, 2.0), 0.5);
        goto LABEL_53;
      }
    }
    else
    {
      v20 = 1.0;
    }
    if (v6 > 0.0)
      v20 = (v7 * 0.7 + v6 * 0.3) / v6;
    goto LABEL_52;
  }
  v9 = *(double *)(a1 + 16);
  if (a5 > 0.01 && *(double *)(a1 + 24) > v9 * 1.5)
    ++*(_DWORD *)(a1 + 68);
  v8 = v9 / a6;
  v10 = a5 > 0.04 && a2 == 0;
  if (v10 && *(int *)(a1 + 60) >= 5)
  {
    v11 = *(_QWORD *)(a1 + 80);
    v12 = *(int *)(a1 + 52);
    if (v11 <= v12)
    {
      v13 = (a5 + -0.04) * *(double *)(a1 + 40);
    }
    else
    {
      if ((double)(int)v12 * a5 / (double)v11 <= 0.04)
        return v8 * a4;
      v13 = (a5 + -0.04) * *(double *)(a1 + 40) * (double)(int)v12 / (double)(v11 - v12);
    }
    v21 = *(double *)(a1 + 24);
    v22 = 1.0;
    if (v21 > v9)
    {
      if (*(double *)(a1 + 72) <= 0.03)
        v22 = (v9 + v21) * 0.5 / v9;
      else
        v22 = v21 / v9;
    }
    if ((v23 = a6 / (a6 - v13), v22 < v23) && (v24 = 2.0, v22 = v23, v23 > 2.0) || (v24 = v22, v22 > 1.0))
LABEL_53:
      v8 = v8 * v24;
  }
  return v8 * a4;
}

uint64_t sub_1B68A1C38(uint64_t result, int a2, double a3, double a4)
{
  int v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  double v17;
  double *v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;

  v4 = *(_DWORD *)(result + 52);
  *(_DWORD *)(result + 52) = v4 + 1;
  v5 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = v5 + 1;
  v6 = (double)a2;
  if (v4)
    v7 = v6 * a3 * 0.5 + *(double *)(result + 424) * 0.5;
  else
    v7 = v6 * a3;
  *(double *)(result + 424) = v7;
  if (a4 >= 10.0)
  {
    v8 = (double)a2 * a3 / a4;
    v9 = v8 + *(double *)result;
    *(double *)result = v9;
    v10 = *(_DWORD *)(result + 56);
    if (v4 >= v10)
      *(double *)(result + 16) = v9 / (double)(v4 + 1 - v10);
    if (*(_DWORD *)(result + 88) == 1)
    {
      v11 = result + 32 * (*(_DWORD *)(result + 32) % *(_DWORD *)(result + 96));
      *(double *)(v11 + 120) = a3;
      *(_DWORD *)(v11 + 112) = a2;
      *(double *)(v11 + 104) = a4;
      *(_DWORD *)(v11 + 128) = a2 - (int)*(double *)(result + 40);
      v12 = *(unsigned int *)(result + 96);
      if ((int)v12 <= 0)
      {
        *(_DWORD *)(result + 48) = 0;
        v16 = *(_DWORD *)(result + 32);
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = *(_DWORD *)(result + 32);
        v17 = 0.0;
        v18 = (double *)&qword_1B692D3B8;
        v19 = 0.0;
        do
        {
          if (*(int *)(result + 32) + v13 >= 0)
          {
            v20 = result + 32 * ((v16 + (int)v13) % (int)v12);
            v21 = *(double *)(v20 + 104);
            if (v21 >= 10.0)
            {
              v19 = v19 + *(double *)(v20 + 120) * (double)*(int *)(v20 + 112) / v21 * *v18;
              v17 = v17 + *v18;
              v15 += *(_DWORD *)(v20 + 128);
              ++v14;
            }
          }
          --v13;
          ++v18;
        }
        while (v12 + v13);
        *(_DWORD *)(result + 48) = v15 / v14;
        if (v17 > 0.0)
          *(double *)(result + 24) = v19 / v17;
      }
      *(_DWORD *)(result + 32) = v16 + 1;
    }
    else if ((v5 & 0x80000000) == 0)
    {
      v22 = v8 + *(double *)(result + 8);
      *(double *)(result + 8) = v22;
      *(double *)(result + 24) = v22 / (double)(v5 + 1 - *(_DWORD *)(result + 64));
    }
  }
  else
  {
    ++*(_DWORD *)(result + 56);
    ++*(_DWORD *)(result + 64);
  }
  return result;
}

uint64_t sub_1B68A1E08(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  double v6;
  uint64_t v7;

  *(double *)(*(_QWORD *)(result + 40) + 8 * (a5 % *(_DWORD *)(result + 64))) = (double)a2;
  v5 = *(_QWORD *)(result + 56);
  if (v5)
  {
    v6 = fabs(sqrt((double)a4));
    *(double *)(v5 + 8 * (a5 % *(_DWORD *)(result + 64))) = v6;
    *(double *)result = v6;
  }
  v7 = *(_QWORD *)(result + 48);
  if (v7)
    *(double *)(v7 + 8 * (a5 % *(_DWORD *)(result + 64))) = fabs(sqrt((double)a3));
  if (*(_DWORD *)(result + 100) < a5)
    *(_DWORD *)(result + 100) = a5;
  return result;
}

uint64_t sub_1B68A1E80(uint64_t result, unsigned int a2, int a3, int a4, int a5)
{
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  BOOL v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  BOOL v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;

  if (*(_DWORD *)(result + 104) == a2)
    return result;
  v5 = *(_DWORD *)(result + 100);
  v6 = __OFSUB__(v5, a2);
  v7 = v5 - a2;
  if (v7 < 0 != v6)
    return result;
  *(_DWORD *)(result + 104) = a2;
  if (!*(_DWORD *)(result + 108))
  {
    if (v7 >= 6)
      LODWORD(v17) = 6;
    else
      LODWORD(v17) = v7;
    if (a2)
    {
      v18 = 0;
      v19 = a2 - 1;
      v20 = 0.0;
      v21 = 0.0;
      do
      {
        if ((v19 & 0x80000000) == 0)
        {
          v22 = *(double *)&qword_1B692D408[v18];
          v20 = v20 + v22 * *(double *)(*(_QWORD *)(result + 40) + 8 * (v19 % *(_DWORD *)(result + 64)));
          v21 = v21 + v22;
        }
        ++v18;
        --v19;
      }
      while (v18 != 6);
    }
    else
    {
      v21 = 0.0;
      v20 = 0.0;
    }
    if (v7 <= 0)
    {
      v23 = *(_QWORD *)(result + 40);
      v24 = *(_DWORD *)(result + 64);
      v28 = 0.0;
      v26 = 0.0;
    }
    else
    {
      v23 = *(_QWORD *)(result + 40);
      v24 = *(_DWORD *)(result + 64);
      if ((int)v17 <= 1)
        v17 = 1;
      else
        v17 = v17;
      v25 = a2 + 1;
      v26 = 0.0;
      v27 = (double *)qword_1B692D408;
      v28 = 0.0;
      do
      {
        v29 = *v27++;
        v26 = v26 + v29 * *(double *)(v23 + 8 * (v25 % v24));
        v28 = v28 + v29;
        ++v25;
        --v17;
      }
      while (v17);
    }
    v30 = v26 / v28;
    if (v28 <= 0.0)
      v30 = 0.0;
    v31 = a2 % v24;
    if (v21 <= 0.0)
      v32 = 0.0;
    else
      v32 = v20 / v21;
    v33 = *(double *)(v23 + 8 * v31);
    if (v21 > 0.0 || (v34 = *(double *)(v23 + 8 * v31), v28 > 0.0))
      v34 = (v20 + v26 + v33) / (v21 + v28 + 1.0);
    *(_WORD *)(result + 96) = 0;
    v35 = *(_QWORD *)(result + 48);
    if (v35
      && a4
      && (v36 = *(_QWORD *)(result + 56)) != 0
      && ((v37 = *(double *)(v35 + 8 * v31), v37 > 10.0)
        ? (v38 = *(double *)(v36 + 8 * v31) <= v37 * 3.162278)
        : (v38 = 1),
          !v38))
    {
      *(_BYTE *)(result + 96) = 1;
    }
    else if (!a3)
    {
      if (v30 > 0.0)
      {
        v39 = v30 - v32;
        if (v30 - v32 < 0.0)
          v39 = -(v30 - v32);
        if (v39 / v34 > 0.15)
        {
          v40 = v30 - v34;
          if (v30 - v34 < 0.0)
            v40 = -(v30 - v34);
          v41 = v32 - v34;
          if (v41 < 0.0)
            v41 = -v41;
          if (v40 >= v41)
            v42 = v32 + v33;
          else
            v42 = v30 + v33;
          v34 = v42 * 0.5;
        }
      }
      goto LABEL_79;
    }
    if (v30 > 0.0)
    {
      *(double *)(result + 80) = v30;
      v34 = v30;
      goto LABEL_80;
    }
LABEL_79:
    *(double *)(result + 80) = v34;
    goto LABEL_80;
  }
  v8 = a2 % *(_DWORD *)(result + 64);
  v9 = *(double *)(*(_QWORD *)(result + 40) + 8 * v8);
  v10 = fabs(sqrt(v9));
  if (v9 == -INFINITY)
    v10 = INFINITY;
  *(_WORD *)(result + 96) = 0;
  if (a4)
  {
    v11 = *(_QWORD *)(result + 48);
    if (v11)
    {
      v12 = *(_QWORD *)(result + 56);
      if (v12)
      {
        v13 = *(double *)(v11 + 8 * v8);
        if (a3 || (v13 > 10.0 ? (v14 = *(double *)(v12 + 8 * v8) <= v13 * 3.162278) : (v14 = 1), !v14))
        {
          *(_BYTE *)(result + 96) = 1;
          v10 = v13;
        }
      }
    }
    v10 = fmax(v10, 10.0);
    v15 = *(double *)(result + 88);
    if (v15 <= 0.0)
    {
      *(double *)(result + 80) = v10;
      v16 = v10;
    }
    else if (v15 - v10 <= v15 * 0.15)
    {
      v16 = (v10 + v15 * 7.0) * 0.125;
      *(double *)(result + 80) = v16;
    }
    else
    {
      v16 = (v15 + v10) * 0.5;
      *(double *)(result + 80) = v16;
      *(_BYTE *)(result + 97) = 1;
    }
    *(double *)(result + 88) = v16;
  }
  v43 = v10;
  if (!*(_BYTE *)(result + 98))
    v43 = *(double *)(result + 80);
  *(double *)(result + 72) = v43;
  if (a5)
  {
    v44 = *(double *)(result + 80);
    if (v10 < v44 * 0.75)
    {
      *(double *)(result + 72) = v44 * 0.75;
      return result;
    }
    if (v10 > v44 * 1.25)
    {
      v34 = (v10 + v44 * 1.25) * 0.5;
LABEL_80:
      *(double *)(result + 72) = v34;
    }
  }
  return result;
}

uint64_t sub_1B68A21E4(uint64_t result, uint64_t a2, int a3, int a4)
{
  int v4;
  BOOL v6;
  _BYTE *v7;
  int v8;

  *(_DWORD *)(result + 204) = 0;
  v4 = *(unsigned __int8 *)(result + 200);
  v6 = a3 < 2 && v4 != 0;
  *(_BYTE *)(result + 208) = v6;
  *(_BYTE *)(result + 209) = 0;
  if (!*(_BYTE *)(a2 + 5424))
  {
    if ((*(_DWORD *)(result + 376) - 0x400000) >= 0xFFC00001
      && *(_BYTE *)(*(_QWORD *)(a2 + 205840) + 1393))
    {
      v8 = 2;
    }
    else
    {
      if (!v4 || !a4)
        return result;
      v8 = 1;
    }
    *(_DWORD *)(result + 204) = v8;
    return result;
  }
  v7 = *(_BYTE **)(a2 + 5416);
  if (v4 && (v7[104] || v7[107]))
    *(_DWORD *)(result + 204) = 1;
  *(_BYTE *)(result + 209) = v7[110];
  return result;
}

void sub_1B68A227C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, int a6, int a7)
{
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  char v15;
  int v16;
  int v17;
  char v18;
  int v19;
  int v20;
  char v21;
  BOOL v22;
  int v23;
  double v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  double *v29;
  double v30;
  _BOOL4 v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  int *v47;
  _BYTE *v48;
  int v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  _BOOL4 v55;
  double v56;
  _BOOL4 v57;
  double v58;
  int v59;
  double v60;
  int v61;
  uint64_t v62;
  _BOOL4 v63;
  int v64;
  uint64_t v65;
  double v66;
  double v67;
  int v68;
  double v69;
  double v70;
  double v71;
  double v72;
  int v73;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  unsigned int v83;
  unsigned int v84;
  double v85;
  long double v86;
  float v87;
  long double v88;
  int v89;
  int v90;

  v9 = *(unsigned __int8 *)(a2 + 1368);
  *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 19112);
  *(_WORD *)(a1 + 258) = *(_WORD *)(a2 + 19114);
  v10 = *(_DWORD *)(a1 + 420);
  if (a7 && !v10 && v9 <= 9)
  {
    if (((1 << v9) & 0x129) != 0)
    {
      *(_BYTE *)(a2 + 19) = 1;
      return;
    }
    if (((1 << v9) & 0x294) != 0)
    {
      *(_BYTE *)(a2 + 19) = 1;
      return;
    }
  }
  if (!*(_BYTE *)(a2 + 19))
  {
    if (!v10)
    {
LABEL_18:
      *(_BYTE *)(a1 + 413) = *(_BYTE *)(a2 + 1368);
      *(_BYTE *)(a1 + 410) = 1;
      goto LABEL_19;
    }
    v11 = *a3;
    v12 = *a4;
    if (*a3 && (v13 = *(unsigned __int8 *)(a2 + 1368), v13 <= 8) && ((1 << v13) & 0x16B) != 0)
    {
      *(_DWORD *)(a1 + 424) = *(_DWORD *)(v11 + 1364);
      v14 = *(_DWORD *)(a2 + 1276) - *(_DWORD *)(v11 + 1276);
      if (v14 < 0)
        v14 = *(_DWORD *)(v11 + 1276) - *(_DWORD *)(a2 + 1276);
      *(_BYTE *)(a1 + 432) = v14;
      v15 = *(_BYTE *)(v11 + 1368);
    }
    else
    {
      *(_DWORD *)(a1 + 424) = 0;
      *(_BYTE *)(a1 + 432) = 0;
      v15 = 11;
    }
    *(_BYTE *)(a1 + 434) = v15;
    if (v12 && ((v16 = *(unsigned __int8 *)(a2 + 1368), v16 == 6) || v16 == 1))
    {
      *(_DWORD *)(a1 + 428) = *(_DWORD *)(v12 + 1364);
      v17 = *(_DWORD *)(a2 + 1276) - *(_DWORD *)(v12 + 1276);
      if (v17 < 0)
        v17 = *(_DWORD *)(v12 + 1276) - *(_DWORD *)(a2 + 1276);
      *(_BYTE *)(a1 + 433) = v17;
      v18 = *(_BYTE *)(v12 + 1368);
    }
    else
    {
      *(_DWORD *)(a1 + 428) = 0;
      *(_BYTE *)(a1 + 433) = 0;
      v18 = 11;
    }
    *(_BYTE *)(a1 + 435) = v18;
    if (v9 != 1 && v9 != 6 && !*(_BYTE *)(a2 + 1394))
      v9 = 1;
    if (*(_BYTE *)(a1 + 416))
      *(_QWORD *)(*(_QWORD *)(a1 + 2016) + 16 * ((*(_DWORD *)(a2 + 1276) + 1) % *(_DWORD *)(a1 + 1880)) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 2016) + 16 * (*(_DWORD *)(a2 + 1276) % *(_DWORD *)(a1 + 1880)) + 8) + ((600 * (unint64_t)(float)(1000000.0 / *(float *)(a2 + 4940)) * (unsigned __int128)0x10C6F7A0B5EEuLL) >> 64);
    *(_BYTE *)(a1 + 413) = v9;
    v19 = *(_DWORD *)(a2 + 5004) | a6;
    *(_BYTE *)(a1 + 414) = *(_BYTE *)(a2 + 5004) | a6;
    v20 = *(_DWORD *)(a1 + 468);
    if (v20 == 1)
    {
      v21 = v19 | a5;
      v19 = (v19 | a5);
      *(_BYTE *)(a1 + 414) = v21;
    }
    else
    {
      v19 = v19;
    }
    if (v9 <= 9)
    {
      v22 = 1;
      if (((1 << v9) & 0x129) != 0)
      {
        v22 = v19 != 0;
LABEL_42:
        v23 = *(_DWORD *)(a1 + 420);
        v24 = *(double *)(a1 + 304);
        v25 = *(_QWORD *)(a1 + 400);
        v26 = *(_DWORD *)(a2 + 1276);
        *(_BYTE *)(a1 + 410) = v22;
        v27 = *(_DWORD *)(a1 + 204);
        if (v27 == 2)
        {
          v28 = *(_QWORD *)(a1 + 1816);
          if (!v28)
          {
            v30 = 0.0;
            if (v22)
              goto LABEL_47;
            goto LABEL_49;
          }
          v29 = (double *)(v28 + 8 * (*(_DWORD *)(a1 + 1872) % *(_DWORD *)(a1 + 1832)));
        }
        else
        {
          v29 = (double *)(a1 + 1840);
        }
        v30 = *v29;
        if (v22)
        {
LABEL_47:
          v31 = 1;
          goto LABEL_50;
        }
LABEL_49:
        v31 = *(_BYTE *)(a1 + 1864) != 0;
LABEL_50:
        v32 = v20 == 1;
        if (v20 == 1)
          v31 = 0;
        *(_BYTE *)(a1 + 410) = v31;
        if (*(_BYTE *)(a1 + 416))
        {
          v33 = *(_DWORD *)(a1 + 2024);
          *(_DWORD *)(a1 + 2024) = v33 + 1;
          v34 = *(unsigned int *)(a1 + 2008);
          if ((int)v34 >= 1)
          {
            v35 = 0;
            while (1)
            {
              v36 = *(_QWORD *)(a1 + 8 * v35 + 1888);
              v37 = 0;
              if (v36 >= 1 && v26 >= 1)
              {
                v39 = *(_QWORD *)(a1 + 2016);
                v40 = *(_DWORD *)(a1 + 1880);
                v41 = v26 - 1;
                do
                {
                  v42 = v39 + 16 * (v41 % v40);
                  v37 += *(_DWORD *)v42;
                  if (*(_QWORD *)(v39 + 16 * (v26 % v40) + 8) - *(_QWORD *)(v42 + 8) >= v36)
                    break;
                  --v41;
                }
                while ((v41 & 0x80000000) == 0);
              }
              if (v35 <= 0x63)
              {
                v43 = *(_DWORD *)(a1 + 4 * v35 + 1968);
                v44 = __OFSUB__(v37, v43);
                v45 = v37 - v43;
                if (!((v45 < 0) ^ v44 | (v45 == 0)) && (v33 > 4 || (uint64_t)v35 <= *(char *)(a1 + 2028)))
                  break;
              }
              if (++v35 == v34)
                goto LABEL_72;
            }
            if (v35 <= 1)
              goto LABEL_77;
            LODWORD(v35) = v35 - 5 * v45 / v43;
            if ((int)v35 <= 1)
              LODWORD(v35) = 1;
            if ((_DWORD)v35 != 100)
            {
LABEL_77:
              *(_DWORD *)(a1 + 2024) = 0;
              *(_BYTE *)(a1 + 2028) = v35;
              v47 = (int *)(a1 + 2044);
              v48 = (_BYTE *)(a1 + 2029);
              v46 = v35;
              *(_DWORD *)(a1 + 2044) = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          LOBYTE(v35) = *(_BYTE *)(a1 + 2028);
          if ((int)v34 - 1 > (char)v35 && v33 >= 2)
          {
            LOBYTE(v35) = v35 + 1;
            *(_BYTE *)(a1 + 2028) = v35;
          }
          *(_DWORD *)(a1 + 2044) = 0;
          v46 = 100;
          *(_BYTE *)(a1 + 2029) = 100;
          if (v33 <= 7)
          {
            v47 = (int *)(a1 + 2044);
            v48 = (_BYTE *)(a1 + 2029);
LABEL_78:
            *v48 = v35 - 1;
            if (!v46 || (char)v35 <= 1)
            {
              if (v46)
                v49 = 1;
              else
                v49 = 2;
              *v47 = v49;
            }
          }
        }
        if (v9 <= 9 && ((1 << v9) & 0x3BD) != 0)
        {
          v50 = v24 * (double)(v23 + 1);
          if (v20 != 1)
            v24 = v50 / (double)v23;
          v51 = (double)v25;
          if (*(_BYTE *)(a1 + 415))
          {
            v52 = *(double *)(a1 + 328);
            v53 = 10.0;
            if (v24 > v52)
              v53 = v24 - v52;
          }
          else
          {
            v53 = v24;
          }
          v54 = v51 / v50;
          if (v20)
          {
            if (*(_BYTE *)(a1 + 1864))
              v55 = 1;
            else
              v55 = *(_BYTE *)(a1 + 1865) != 0;
            v59 = *(_DWORD *)(a1 + 436);
            if (v59 >= 1)
            {
              v60 = (double)(v59 / 0xAu);
              if (v53 * 0.25 <= v60)
                v60 = v53 * 0.25;
              v53 = v53 - v60;
            }
            v61 = *(_DWORD *)(a1 + 440);
            if (v53 > (double)v61)
              v53 = (double)v61;
            if (!*(_BYTE *)(a1 + 409) || ((1 << v9) & 0x294) != 0)
            {
              if (*(_DWORD *)(a1 + 376) && v27 == 2)
              {
                if (*(double *)(a1 + 280) <= 0.0)
                {
                  v58 = exp2((*(double *)(a1 + 360) + -12.0) / 6.0) * 0.85;
LABEL_128:
                  v57 = (*(_DWORD *)(a1 + 204) & 0xFFFFFFFD) == 0;
                  if (!v55)
                    goto LABEL_130;
LABEL_129:
                  if (*(_BYTE *)(a1 + 200))
                    goto LABEL_130;
                  *(_QWORD *)(a1 + 480) = 0;
                  *(_QWORD *)(a1 + 496) = 0;
                  v64 = *(_DWORD *)(a1 + 532);
                  if (v64 < 1)
                  {
LABEL_126:
                    *(_DWORD *)(a1 + 540) = 0;
                    *(_QWORD *)(a1 + 532) = 0xFFFFFFFFLL;
                    goto LABEL_130;
                  }
LABEL_125:
                  *(double *)(a1 + 544) = (double)*(int *)(a1 + 540) / (double)v64;
                  goto LABEL_126;
                }
                if (v53 >= -((double)*(int *)(a1 + 464) - (double)v61 * 0.9) / (*(double *)(a1 + 456) + 1.0))
                  v53 = -((double)*(int *)(a1 + 464) - (double)v61 * 0.9) / (*(double *)(a1 + 456) + 1.0);
                v62 = a1 + 1336;
              }
              else
              {
                v62 = a1 + 432 * v27 + 472;
              }
              v58 = sub_1B68A195C(v62, v55, v32, v30, v54, v53);
              goto LABEL_128;
            }
            v86 = exp2((*(double *)(a1 + 360) + 2.0 + -12.0) / 6.0);
            v57 = 0;
            v58 = v86 * 0.85;
            if (v55)
              goto LABEL_129;
LABEL_130:
            v65 = *(int *)(a1 + 216);
            if (v58 <= flt_1B692D3A4[v65])
              v66 = flt_1B692D3A4[v65];
            else
              v66 = v58;
            v20 = *(_DWORD *)(a1 + 468);
            v67 = 1.0;
            if (!v20)
            {
              v68 = *(_DWORD *)(a1 + 420);
              v69 = (double)*(uint64_t *)(a1 + 400)
                  / ((*(double *)(a1 + 264) + *(double *)(a1 + 264))
                   * fmax(sqrt((double)(v68 / 25)), 1.0))
                  + 1.0;
              v70 = 2.0;
              if (v69 <= 2.0)
                v70 = v69;
              if (v69 >= 0.5)
                v71 = v70;
              else
                v71 = 0.5;
              if (v68 >= 5)
                v67 = v71;
              else
                v67 = 1.0;
              v66 = v66 * v67;
            }
            if (!v57)
              goto LABEL_160;
            v72 = *(double *)(a1 + 360);
            v73 = *(_DWORD *)(a1 + 204);
            if (v73 != 2 && *(_BYTE *)(a1 + 409) != 0)
              v72 = v72 + 2.912561;
            v75 = exp2((v72 + -12.0) / 6.0) * 0.85;
            if (v73 == 2)
            {
              v76 = 2.5198421;
              v77 = v75 * 2.5198421;
            }
            else
            {
              v76 = 1.514528;
              v77 = v75 * 1.514528;
              v75 = v75 / 1.514528;
              if (v67 > 1.05)
              {
                v77 = v77 * 1.514528;
                goto LABEL_155;
              }
              if (v67 >= 0.95)
                goto LABEL_155;
            }
            v75 = v75 / v76;
LABEL_155:
            if (v77 >= v66)
              v77 = v66;
            if (v75 <= v66)
              v66 = v77;
            else
              v66 = v75;
LABEL_160:
            v78 = log(v66 / 0.85) * 6.0 / 0.693147181 + 12.0;
            goto LABEL_161;
          }
          if (v31)
          {
            v56 = sub_1B68A195C(a1 + 472, 1, 0, v30, v54, v53);
            v57 = *(_BYTE *)(a1 + 411) == 0;
            if (*(_DWORD *)(a1 + 376) <= 1u)
              v58 = v56;
            else
              v58 = v56 / 1.4;
          }
          else
          {
            v57 = 0;
            v58 = 0.0;
            if (v9 > 8 || ((1 << v9) & 0x129) == 0)
              goto LABEL_130;
            v63 = 1;
            if (!*(_BYTE *)(a1 + 1864))
              v63 = *(_BYTE *)(a1 + 1865) != 0;
            *(_BYTE *)(a1 + 411) = 1;
            if (*(_BYTE *)(a1 + 409) && (v9 > 7 || ((1 << v9) & 0x94) == 0))
            {
              v88 = exp2((*(double *)(a1 + 360) + 2.0 + -12.0) / 6.0);
              v57 = 0;
              v58 = v88 * 0.85;
              if (!v63)
                goto LABEL_130;
            }
            else
            {
              v58 = sub_1B68A195C(a1 + 472, v63, v32, v30, v54, v53);
              v57 = 1;
              if (!v63)
                goto LABEL_130;
            }
          }
          *(_QWORD *)(a1 + 480) = 0;
          *(_QWORD *)(a1 + 496) = 0;
          v64 = *(_DWORD *)(a1 + 532);
          if (v64 <= 0)
            goto LABEL_126;
          goto LABEL_125;
        }
        v83 = *(unsigned __int8 *)(a1 + 434);
        if (v83 <= 9 && ((1 << v83) & 0x294) != 0)
        {
          v84 = *(unsigned __int8 *)(a1 + 435);
          if (v84 <= 9 && ((1 << v84) & 0x294) != 0)
          {
            v85 = (float)(*(float *)(a1 + 424) + *(float *)(a1 + 428)) * 0.5 + 2.912561;
LABEL_192:
            v78 = v85 + 2.27107;
            v66 = 0.0;
LABEL_161:
            if (v20 == 1)
            {
              v79 = *(double *)(a1 + 384);
              if (v78 < v79)
              {
                v80 = v79 + -6.0;
                if (v78 <= v80)
                  v78 = v80;
                if (v78 <= (double)dword_1B692D4A4[*(int *)(a1 + 216)])
                  v78 = (double)dword_1B692D4A4[*(int *)(a1 + 216)];
              }
            }
            *(double *)(a1 + 392) = v66;
            v81 = 51.0;
            if (v78 <= 51.0)
              v81 = v78;
            if (v78 >= (double)dword_1B6933F90[*(int *)(a1 + 216)])
              v82 = v81;
            else
              v82 = (double)dword_1B6933F90[*(int *)(a1 + 216)];
            *(double *)(a1 + 352) = v82;
            goto LABEL_173;
          }
          if (((1 << v83) & 0x294) != 0)
          {
LABEL_190:
            v87 = *(float *)(a1 + 424);
            goto LABEL_191;
          }
        }
        else
        {
          v84 = *(unsigned __int8 *)(a1 + 435);
        }
        if (v84 > 9 || ((1 << v84) & 0x294) == 0)
        {
          v89 = *(char *)(a1 + 432);
          v90 = *(unsigned __int8 *)(a1 + 433);
          if (v89 >= 1)
          {
            if ((char)v90 >= 1)
            {
              v87 = (float)((float)(*(float *)(a1 + 428) * (float)v89) + (float)(*(float *)(a1 + 424) * (float)(char)v90))
                  / (float)(v90 + v89);
              goto LABEL_191;
            }
            goto LABEL_190;
          }
          if ((char)v90 < 1)
          {
            v85 = 0.0;
            goto LABEL_192;
          }
        }
        v87 = *(float *)(a1 + 428);
LABEL_191:
        v85 = v87;
        goto LABEL_192;
      }
      if (((1 << v9) & 0x294) != 0)
        goto LABEL_42;
    }
    v22 = 0;
    goto LABEL_42;
  }
  if (!v10)
    goto LABEL_18;
LABEL_19:
  *(long double *)(a1 + 392) = exp2((*(double *)(a1 + 352) + -12.0) / 6.0) * 0.85;
LABEL_173:
  *(_BYTE *)(a2 + 19) = 1;
}

float sub_1B68A2D08(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  float result;
  uint64_t v5;
  float v6;
  int v7;
  float v8;
  float v9;
  double v10;
  BOOL v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  BOOL v18;
  int v19;
  int v20;
  float v21;
  int v22;
  float v23;
  BOOL v24;
  _DWORD *v25;
  double v26;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;

  result = *(float *)(a3 + 205864);
  v5 = *(_QWORD *)(a3 + 5392);
  v6 = *(float *)(v5 + 16);
  v7 = *(unsigned __int8 *)(v5 + 777);
  if (!*(_BYTE *)(a2 + 104))
  {
    if (*(_DWORD *)(a2 + 340) == 3)
    {
      v13 = *(float *)(a2 + 40) + -1.0;
      if (result >= v13)
        result = *(float *)(a2 + 40) + -1.0;
      if (*(_BYTE *)(a2 + 348)
        && !*(_BYTE *)(v5 + 777)
        && *(int *)(a2 + 332) >= 3
        && (int)(float)(v13 - result) <= 1
        && result > (float)dword_1B6933F68[*(int *)(a1 + 216)])
      {
        result = result + -1.0;
      }
      goto LABEL_30;
    }
    v14 = *(unsigned int *)(a2 + 312);
    if (v14 <= 1)
    {
      if (*(_BYTE *)(a2 + 45) || *(_BYTE *)(a2 + 46))
      {
        v15 = *(float *)(a2 + 40);
        goto LABEL_28;
      }
      if (*(_BYTE *)(a2 + 77) || *(_BYTE *)(a2 + 78))
      {
        v15 = *(float *)(a2 + 72);
LABEL_28:
        v16 = v15 - (float)*((int *)&unk_1B692D474 + v14);
        if (result <= v16)
          result = v16;
      }
    }
LABEL_30:
    if (result > v6)
      v6 = result;
    v12 = a4 == 0;
    goto LABEL_33;
  }
  if (*(int *)(v5 + 796) >= 2)
  {
    v8 = (float)(v6 - result) * 0.5;
    if (v8 < 0.0)
      v8 = 0.0;
    result = result + v8;
  }
  if (*(_BYTE *)(a2 + 109))
  {
    v9 = *(float *)(v5 + 20);
    v10 = *(double *)(*(_QWORD *)(a3 + 152) + 264);
    if (v10 <= 6000000.0 && result < v9)
      result = result + (float)((int)(float)(v9 - result) >> (int)(v10 / 2000001.0));
    if (v10 <= 10000000.0)
    {
      v6 = fmaxf(result, 28.0);
      v12 = *(_BYTE *)(a2 + 111) == 0;
LABEL_33:
      if (!v12)
        result = v6;
    }
  }
  v18 = (*(_DWORD *)(*(_QWORD *)(a3 + 136) + 4852) - 3) <= 1
     && v7 != 0
     && (*(unsigned __int8 *)(a2 + 104) | *(unsigned __int8 *)(*(_QWORD *)(a3 + 144) + 708)) == 0;
  if (v18 && (float)(*(float *)(a2 + 40) - *(float *)(a2 + 96)) < 4.0 && !*(_BYTE *)(a1 + 211))
  {
    v28 = *(_DWORD *)(a1 + 204);
    v29 = *(_DWORD *)(a1 + 432 * v28 + 568);
    if (v29 >= 7)
      v30 = 7;
    else
      v30 = *(_DWORD *)(a1 + 432 * v28 + 568);
    if (v30 < 3)
    {
      v37 = 0;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v33 = *(_DWORD *)(a1 + 432 * v28 + 504);
      v34 = -v30;
      v35 = -2;
      do
      {
        if (v33 + v35 >= 0)
        {
          v36 = ((v33 + v35) % v29);
          if (*(double *)(a1 + 432 * v28 + 32 * v36 + 576) >= 10.0)
          {
            v32 += *(_DWORD *)(a1 + 432 * v28 + 32 * v36 + 584);
            ++v31;
          }
        }
        --v35;
      }
      while (v34 != v35);
      v37 = 0;
      if (v31 && v33 > 0)
        v37 = *(_DWORD *)(a1 + 432 * v28 + 32 * ((v33 - 1) % v29) + 584) * v31 > (10 * v32);
    }
    *(_DWORD *)(a2 + 376) += v37;
  }
  v19 = *(_DWORD *)(a2 + 376);
  if (v19 >= 4)
    v20 = 4;
  else
    v20 = *(_DWORD *)(a2 + 376);
  v21 = 28.0;
  if (v19 >= 11)
  {
    v22 = v19 >> 3;
    if (v19 >> 3 >= 2)
      v22 = 2;
    v21 = (float)(v22 | 0x1C);
  }
  if (*(_DWORD *)(a2 + 332)
    || *(_DWORD *)(a2 + 236)
    || ((v23 = *(float *)(a2 + 40), result < v23) ? (v24 = v23 > v21) : (v24 = 1),
        v24
     || (v25 = (_DWORD *)((char *)&unk_1B692D47C + 8 * (v20 & ~(v20 >> 31))),
         *(_DWORD *)(a2 + 36) * *v25 >= (*(_DWORD *)(a2 + 32) * v25[1]))))
  {
    if (v19 >= 4 && *(int *)(a2 + 372) <= 1 && result > *(float *)(a2 + 40))
      return *(float *)(a2 + 40);
  }
  else
  {
    v26 = v23 + -0.5;
    if (v26 > result)
      return v26;
  }
  return result;
}

void sub_1B68A3074(uint64_t a1, int a2, int a3, signed int a4, unsigned int a5, uint64_t a6, int a7, int a8, float a9)
{
  __int128 *v18;
  unint64_t v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  double v30;
  unsigned int v31;
  __int128 v32;
  int v33;
  double v34;
  double v35;
  double v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  double v40;
  uint64_t v41;
  double v42;
  unsigned int v43;
  double v44;

  v18 = (__int128 *)(a1 + 1768);
  v19 = *(unsigned __int8 *)(a1 + 413);
  if (v19 > 9)
    v20 = 0;
  else
    v20 = dword_1B692D4B8[v19];
  sub_1B68A1E80(a1 + 1768, a4, *(unsigned __int8 *)(a1 + 410), v20, *(_DWORD *)(a1 + 468) == 1);
  v22 = v21;
  v23 = a9;
  v24 = exp2((a9 + -12.0) / 6.0);
  if (*(_DWORD *)(a1 + 204) == 2)
  {
    v25 = *(_QWORD *)(a1 + 1816);
    if (v25)
      v22 = *(double *)(v25 + 8 * (*(_DWORD *)(a1 + 1872) % *(_DWORD *)(a1 + 1832)));
    else
      v22 = 0.0;
  }
  if (*(_BYTE *)(a1 + 213))
  {
    v26 = *(_DWORD *)(a1 + 420);
    if (v26 >= 2)
      v27 = 2;
    else
      v27 = *(_DWORD *)(a1 + 420);
    *(double *)(a1 + 384) = (v23 + *(double *)(a1 + 384) * (double)v27) / (double)(v27 + 1);
    v28 = v26 + 1;
  }
  else
  {
    v29 = *(_DWORD *)(a1 + 420);
    v30 = v23 + *(double *)(a1 + 384) * (double)v29;
    v28 = v29 + 1;
    *(double *)(a1 + 384) = v30 / (double)v28;
  }
  *(_QWORD *)(a1 + 400) += a2 - (int)*(double *)(a1 + 304);
  *(_DWORD *)(a1 + 420) = v28;
  if (!a7)
  {
    if (*(_BYTE *)(a1 + 224))
      *(_DWORD *)(a1 + 248) = (*(_DWORD *)(a1 + 248) - a8) & ~((*(_DWORD *)(a1 + 248) - a8) >> 31);
    *(_DWORD *)(a1 + 220) += a2;
    v31 = *(unsigned __int8 *)(a1 + 413);
    if (v31 > 9 || ((1 << v31) & 0x294) == 0)
    {
      v32 = *v18;
      *(_OWORD *)(a1 + 1792) = v18[1];
      *(_OWORD *)(a1 + 1776) = v32;
    }
  }
  v33 = a2;
  if (*(_BYTE *)(a1 + 415))
  {
    v34 = *(double *)(a1 + 312) * 0.95 + 1.0;
    v35 = *(double *)(a1 + 320) * 0.95 + (double)(a2 - a3);
    *(double *)(a1 + 312) = v34;
    *(double *)(a1 + 320) = v35;
    *(double *)(a1 + 328) = v35 / v34;
    v33 = a3;
  }
  if (*(_BYTE *)(a1 + 416))
    *(_DWORD *)(*(_QWORD *)(a1 + 2016) + 16 * (a4 % *(_DWORD *)(a1 + 1880))) = a2;
  v36 = v24 * 0.85;
  if (a5 <= 9 && ((1 << a5) & 0x3BD) != 0)
  {
    v37 = *(unsigned __int8 *)(a1 + 413);
    if (v37 <= 9)
    {
      v38 = 1;
      if (((1 << v37) & 0x129) != 0)
      {
        v38 = *(_BYTE *)(a1 + 414) != 0;
LABEL_31:
        *(_BYTE *)(a1 + 409) = v38;
        *(double *)(a1 + 352) = v23;
        *(double *)(a1 + 360) = v23;
        if (a6)
          goto LABEL_32;
        goto LABEL_38;
      }
      if (((1 << v37) & 0x294) != 0)
        goto LABEL_31;
    }
    v38 = 0;
    goto LABEL_31;
  }
  v36 = v36 / 1.3;
  if (a6)
  {
LABEL_32:
    v39 = *(unsigned __int8 *)(a1 + 413);
    if (v39 <= 9 && ((1 << v39) & 0x3BD) != 0)
      v40 = exp2((*(float *)(a6 + 8) + -12.0) / 6.0) * 0.85;
    else
      v40 = exp2((*(float *)(a6 + 8) + -12.0) / 6.0) * 0.85 / 1.3;
    v41 = a1 + 472;
    v42 = (v36 + v40) * 0.5;
    v43 = (*(_DWORD *)(a6 + 4 * (*(_BYTE *)(a1 + 415) != 0)) + v33) >> 1;
    v44 = v22;
    goto LABEL_36;
  }
LABEL_38:
  if (!*(_BYTE *)(a1 + 209))
  {
    sub_1B68A1C38(a1 + 432 * *(int *)(a1 + 204) + 472, v33, v36, v22);
    if (*(_BYTE *)(a1 + 208))
    {
      if (*(_DWORD *)(a1 + 204) != 1)
      {
        v41 = a1 + 904;
        v42 = v36;
        v44 = v22;
        v43 = v33;
LABEL_36:
        sub_1B68A1C38(v41, v43, v42, v44);
      }
    }
  }
}

double sub_1B68A3438(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  double v4;
  double v5;
  double result;
  int v7;
  double v8;
  double v9;
  int v10;
  double v11;

  LODWORD(a4) = *(_DWORD *)a2;
  v4 = (double)*(unint64_t *)&a4;
  *(double *)(a1 + 264) = (double)*(unint64_t *)&a4;
  v5 = *(float *)(a2 + 12);
  *(double *)(a1 + 272) = v5;
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 444) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 28);
  result = (double)*(unint64_t *)&a4 / v5;
  *(double *)(a1 + 304) = result;
  if (*(_DWORD *)(a1 + 376))
  {
    if (a3 <= 9 && ((1 << a3) & 0x294) != 0)
    {
      result = *(double *)(a1 + 280) / *(double *)(a1 + 288);
LABEL_5:
      *(double *)(a1 + 304) = result;
      goto LABEL_6;
    }
    v11 = *(double *)(a1 + 280);
    if (v11 < v4)
    {
      result = (v4 - v11) / (v5 - *(double *)(a1 + 288));
      if (result < 0.0)
        result = 0.0;
      goto LABEL_5;
    }
  }
LABEL_6:
  if (*(_DWORD *)(a1 + 468) == 1)
  {
    v7 = *(_DWORD *)(a1 + 248);
    if (v7 < 1)
      v8 = 0.0;
    else
      v8 = (double)*(int *)(a2 + 56) / (double)v7;
    v9 = *(double *)(a1 + 456);
    if (v8 > v9)
      v9 = v8;
    *(double *)(a1 + 456) = v9;
    v10 = *(_DWORD *)(a2 + 60);
    if (v10 >= (int)(result * 0.5 / (v8 + 1.0 + 0.5)))
      v10 = (int)(result * 0.5 / (v8 + 1.0 + 0.5));
    *(_DWORD *)(a1 + 464) = v10;
    result = (result - (double)v10) / (v9 + 1.0);
    *(double *)(a1 + 304) = result;
  }
  return result;
}

uint64_t sub_1B68A3558(uint64_t result, uint64_t a2, double a3, double a4)
{
  double v4;
  unsigned int v5;
  double v6;
  double v7;
  double v8;
  _BOOL4 v9;
  unint64_t v10;
  double v11;

  LODWORD(a4) = *(_DWORD *)(result + 376);
  v4 = *(float *)(a2 + 12) / (double)*(unint64_t *)&a4;
  *(double *)(result + 288) = v4;
  v5 = *(_DWORD *)(a2 + 4);
  if (v5)
  {
    v6 = (double)v5;
  }
  else
  {
    v7 = *(double *)(result + 1760);
    v8 = *(double *)(result + 896);
    v9 = v7 < 0.00000011920929;
    if (v8 < 0.00000011920929)
      v9 = 1;
    if (v9)
    {
      v8 = 1.0;
      v7 = 1.0;
    }
    *(double *)&v10 = v4 * v7;
    v11 = *(double *)&v10 / ((*(double *)(result + 272) - v4) * v8 + *(double *)&v10);
    LODWORD(v10) = *(_DWORD *)a2;
    v6 = v11 * (double)v10;
  }
  *(double *)(result + 280) = v6;
  return result;
}

uint64_t sub_1B68A35DC(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, char *a8, int a9)
{
  unsigned int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  if (a5 - a4 >= 2)
  {
    v9 = (a5 - a4) >> 1;
    v10 = (char *)(a2 + (a4 >> 1) * a7);
    v11 = (char *)(result + a6 * a4);
    v12 = &v11[a6];
    v13 = 2 * a6 - a3;
    result = a7 - a3;
    do
    {
      if (a3 >= 2)
      {
        v14 = a3 >> 1;
        do
        {
          v15 = *v11;
          v16 = v11[1];
          v17 = *v12;
          v18 = v12[1];
          v19 = *v10;
          v20 = v10[1];
          *a8 = *v10;
          a8[1] = v15;
          a8[2] = v20;
          a8[3] = v16;
          v11 += 2;
          v12 += 2;
          v10 += 2;
          a8[a9] = v19;
          a8[a9 + 1] = v17;
          a8[a9 + 2] = v20;
          a8[a9 + 3] = v18;
          a8 += 4;
          --v14;
        }
        while (v14);
      }
      v11 += v13;
      v12 += v13;
      v10 += result;
      a8 += 2 * (a9 - a3);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1B68A36B4(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, char *a8, int a9, uint64_t a10)
{
  unsigned int v10;
  char *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  if (a5 - a4 >= 2)
  {
    v10 = (a5 - a4) >> 1;
    v11 = (char *)(a2 + (a4 >> 1) * a7);
    v12 = (unsigned __int8 *)(result + a6 * a4);
    v13 = &v12[a6];
    result = 2 * a6 - a3;
    v14 = a7 - a3;
    do
    {
      if (a3 >= 2)
      {
        v15 = a3 >> 1;
        do
        {
          v16 = *v12;
          v17 = v12[1];
          v18 = *v13;
          v19 = v13[1];
          v20 = *v11;
          v21 = v11[1];
          *a8 = *v11;
          a8[1] = *(_BYTE *)(a10 + v16);
          a8[2] = v21;
          a8[3] = *(_BYTE *)(a10 + v17);
          a8[a9] = v20;
          a8[a9 + 1] = *(_BYTE *)(a10 + v18);
          a8[a9 + 2] = v21;
          a8[a9 + 3] = *(_BYTE *)(a10 + v19);
          v12 += 2;
          v13 += 2;
          v11 += 2;
          a8 += 4;
          --v15;
        }
        while (v15);
      }
      v12 += result;
      v13 += result;
      v11 += v14;
      a8 += 2 * (a9 - a3);
      --v10;
    }
    while (v10);
  }
  return result;
}

pthread_mutex_t *sub_1B68A37A0()
{
  pthread_mutex_t *v0;
  pthread_mutex_t *v1;

  v0 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  v1 = v0;
  if (v0 && pthread_mutex_init(v0, 0))
  {
    pthread_mutex_destroy(v1);
    free(v1);
    return 0;
  }
  return v1;
}

pthread_cond_t *sub_1B68A3800()
{
  pthread_cond_t *v0;
  pthread_cond_t *v1;

  v0 = (pthread_cond_t *)malloc_type_malloc(0x30uLL, 0x1000040EED21634uLL);
  v1 = v0;
  if (v0 && pthread_cond_init(v0, 0))
  {
    pthread_cond_destroy(v1);
    free(v1);
    return 0;
  }
  return v1;
}

semaphore_t *sub_1B68A3860()
{
  semaphore_t *v0;
  task_t v1;

  v0 = (semaphore_t *)malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  if (v0)
  {
    v1 = *MEMORY[0x1E0C83DA0];
    v0[1] = *MEMORY[0x1E0C83DA0];
    if (semaphore_create(v1, v0, 0, 0))
    {
      semaphore_destroy(v0[1], *v0);
      free(v0);
      return 0;
    }
  }
  return v0;
}

void sub_1B68A38D4(semaphore_t *a1)
{
  if (a1)
  {
    semaphore_destroy(a1[1], *a1);
    free(a1);
  }
}

uint64_t sub_1B68A3908()
{
  size_t v1;

  if ((byte_1EF139D50 & 1) == 0)
  {
    v1 = 4;
    if (sysctlbyname("hw.physicalcpu", &dword_1EF137CE8, &v1, 0, 0))
      dword_1EF137CE8 = 1;
    byte_1EF139D50 = 1;
  }
  return dword_1EF137CE8;
}

BOOL sub_1B68A3978()
{
  int v0;
  int v1;
  size_t v3;
  int v4;

  v0 = dword_1EF137CEC;
  if (dword_1EF137CEC == -1)
  {
    v4 = 0;
    v3 = 4;
    v1 = sysctlbyname("hw.cpu64bit_capable", &v4, &v3, 0, 0);
    v0 = v4;
    if (v1 < 0)
      v0 = 0;
    dword_1EF137CEC = v0;
  }
  return v0 != 0;
}

uint64_t sub_1B68A39E8(uint64_t result, int a2, _BYTE *a3)
{
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  _BYTE *v15;
  unsigned int v16;
  _BYTE *v17;
  __int16 v18;

  v3 = *(_DWORD *)(result + 20);
  v4 = byte_1B692D4E0[((2 * *a3) & 0x1FC) + (v3 >> 6)];
  v5 = *(_DWORD *)(result + 24);
  v6 = v3 - v4;
  v7 = *a3 & 1 ^ a2;
  if (v7)
    v8 = v6;
  else
    v8 = 0;
  v9 = v8 + *(_DWORD *)(result + 16);
  if (v7)
    v6 = v4;
  *a3 = byte_1EF139D55[2 * *a3 + v7];
  v10 = __clz(v6) - 23;
  v11 = v6 << v10;
  v12 = v9 << v10;
  v13 = v10 + v5;
  *(_DWORD *)(result + 20) = v11;
  v14 = v13 - 8;
  if (v13 < 8)
  {
    v14 = v13;
  }
  else
  {
    v15 = *(_BYTE **)result;
    v16 = v12 >> (v13 + 2);
    ++*(_QWORD *)result;
    *v15 = v16;
    v12 &= ~(-4 << v13);
    if ((v16 & 0x100) != 0)
    {
      v17 = v15 - 1;
      do
      {
        if ((unint64_t)v17 < *(_QWORD *)(result + 8))
          break;
        v18 = (*v17--)++ + 1;
      }
      while ((v18 & 0x100) != 0);
    }
  }
  *(_DWORD *)(result + 16) = v12;
  *(_DWORD *)(result + 24) = v14;
  return result;
}

uint64_t sub_1B68A3ABC(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  __int16 v9;

  v2 = 2 * *(_DWORD *)(result + 16);
  if (a2)
    v2 += *(_DWORD *)(result + 20);
  v3 = *(_DWORD *)(result + 24);
  v4 = v3 + 1;
  v5 = v3 - 7;
  if (v3 >= 7)
  {
    v6 = *(_BYTE **)result;
    v7 = v2 >> (v3 + 3);
    ++*(_QWORD *)result;
    *v6 = v7;
    v2 &= ~(-4 << v4);
    if ((v7 & 0x100) != 0)
    {
      v8 = v6 - 1;
      do
      {
        if ((unint64_t)v8 < *(_QWORD *)(result + 8))
          break;
        v9 = (*v8--)++ + 1;
      }
      while ((v9 & 0x100) != 0);
    }
    v4 = v5;
  }
  *(_DWORD *)(result + 16) = v2;
  *(_DWORD *)(result + 24) = v4;
  return result;
}

uint64_t sub_1B68A3B38(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  __int16 v13;

  v2 = *(_DWORD *)(result + 20) - 2;
  v3 = 1 - (v2 >> 8);
  if (a2)
    v4 = 2;
  else
    v4 = *(_DWORD *)(result + 20) - 2;
  if (!a2)
    v2 = 0;
  v5 = v2 + *(_DWORD *)(result + 16);
  if (a2)
    v6 = 7;
  else
    v6 = v3;
  v7 = v5 << v6;
  v8 = v6 + *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 20) = v4 << v6;
  v9 = v8 - 8;
  if (v8 < 8)
  {
    v9 = v8;
  }
  else
  {
    v10 = *(_BYTE **)result;
    v11 = v7 >> (v8 + 2);
    ++*(_QWORD *)result;
    *v10 = v11;
    v7 &= ~(-4 << v8);
    if ((v11 & 0x100) != 0)
    {
      v12 = v10 - 1;
      do
      {
        if ((unint64_t)v12 < *(_QWORD *)(result + 8))
          break;
        v13 = (*v12--)++ + 1;
      }
      while ((v13 & 0x100) != 0);
    }
  }
  *(_DWORD *)(result + 16) = v7;
  *(_DWORD *)(result + 24) = v9;
  return result;
}

double sub_1B68A3BDC(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a2 + 40) = a1 + 4;
  *(_QWORD *)(a2 + 48) = a1 + 64;
  *(_QWORD *)(a2 + 176) = a1 + 26560;
  *(_QWORD *)(a2 + 56) = a1 + 28432;
  result = *(double *)(a1 + 26544);
  *(double *)(a2 + 312) = result;
  *(_QWORD *)(a2 + 2624) = a1 + 27120;
  *(_QWORD *)(a2 + 2632) = *(_QWORD *)(a1 + 29248);
  *(_QWORD *)(a2 + 2560) = *(_QWORD *)(a1 + 27104);
  *(_QWORD *)(a2 + 2568) = *(_QWORD *)(a1 + 27112);
  *(_QWORD *)(a2 + 2544) = a1 + 29664;
  *(_QWORD *)(a2 + 2552) = a1 + 30176;
  *(_QWORD *)(a2 + 2528) = a1 + 29280;
  *(_QWORD *)(a2 + 2536) = a1 + 29536;
  return result;
}

void sub_1B68A3C60(uint64_t a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    v2 = *(void **)(a1 + 14096);
    if (v2)
    {
      free(v2);
      *(_QWORD *)(a1 + 14096) = 0;
    }
    v3 = *(void **)(a1 + 104);
    if (v3)
    {
      free(v3);
      *(_QWORD *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 100) = 0;
    }
  }
}

uint64_t sub_1B68A3CA4(uint64_t a1, uint64_t a2, int a3, int a4, int *a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  _BOOL4 v12;
  uint64_t result;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v8 = *(_QWORD *)(a2 + 13032);
  v9 = *(_QWORD *)(a2 + 13040);
  v10 = *(unsigned __int8 *)(a1 + 188);
  v11 = *(_DWORD **)(a1 + 192);
  v12 = *(_BYTE *)(a1 + 29) == 0;
  if (a3)
  {
    result = sub_1B68AD1CC(a1, *(_QWORD *)(a2 + 13032), *(_BYTE *)(a1 + 29) == 0, &v18, &v17);
    if (!v10)
      goto LABEL_8;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 188))
    {
      sub_1B68AD158(*(_QWORD *)(a2 + 13032), a4);
      result = sub_1B68AD1CC(a1, v8, v12, &v18, &v17);
LABEL_8:
      v16 = *(_QWORD *)(v9 + 16);
      v15 = *(unsigned __int8 *)(v8 + 36) + 8 * (*(_DWORD *)(v8 + 16) - v16) - *(unsigned __int8 *)(v9 + 36);
      *(_QWORD *)(v8 + 16) = v16;
      *(_DWORD *)(v8 + 32) = *(_DWORD *)(v9 + 32);
      *(_BYTE *)(v8 + 36) = *(_BYTE *)(v9 + 36);
      goto LABEL_9;
    }
    sub_1B68F8570(*(_QWORD *)(a1 + 192), (uint64_t *)(a2 + 14064), *(unsigned __int8 *)(a1 + 28), 0);
    sub_1B68AD1CC(a1, v8, v12, &v18, &v17);
  }
  v14 = v11[10] + v11[6] + 8 * (*v11 - v11[2]);
  v15 = (v14 & ~(v14 >> 31)) - *(_DWORD *)(a2 + 14088);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(v9 + 32);
  *(_BYTE *)(v8 + 36) = *(_BYTE *)(v9 + 36);
  result = (uint64_t)memcpy(v11, (const void *)(a2 + 13088), 0x3D0uLL);
LABEL_9:
  *a5 = v15;
  return result;
}

uint64_t sub_1B68A3E0C(int32x2_t *a1, unsigned __int8 *a2)
{
  int32x2_t *v2;
  char *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int32x2_t v7;
  unsigned __int8 v8;
  char v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  char v14;
  int i;
  uint64_t v16;
  char v17;
  char v18;
  int32x2_t v19;
  BOOL v20;
  char v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  int32x2_t v27;
  uint64_t result;
  int v29;
  int32x2_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t j;
  int v38;
  int32x2_t *v39;
  _QWORD v40[3];

  v2 = a1;
  v40[2] = *MEMORY[0x1E0C80C00];
  v3 = (char *)&a1[1761] + 4;
  v4 = a2[282];
  v5 = a2[399];
  a1[1].i8[2] = a1->i8[7] == 0;
  if (a1[1].i8[3])
    v6 = 0;
  else
    v6 = a2[283] != 0;
  a1[1].i8[6] = v6;
  a1[4].i32[1] = 99999;
  v7 = a1[15];
  if (a1[1].i8[1])
  {
    v8 = v5 != 1;
    v9 = *v3;
    *(_WORD *)(*(_QWORD *)&v7 + 5) = 4;
    *(_BYTE *)(*(_QWORD *)&v7 + 7) = v9;
    *(_QWORD *)(*(_QWORD *)&v7 + 26832) = *(_QWORD *)&v7 + 26848;
    sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(*(_QWORD *)&v7 + 4), (unsigned __int8 *)(*(_QWORD *)&v7 + 64));
    v2[4].i32[1] = 0;
    *(_OWORD *)(*(_QWORD *)&v7 + 27104) = 0u;
    *(_QWORD *)&v7 += 30432;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    v8 = v5 != 1;
  }
  v11 = *v3;
  *(_WORD *)(*(_QWORD *)&v7 + 5) = 2;
  *(_BYTE *)(*(_QWORD *)&v7 + 7) = v11;
  *(_QWORD *)(*(_QWORD *)&v7 + 26832) = *(_QWORD *)&v7 + 26848;
  sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(*(_QWORD *)&v7 + 4), (unsigned __int8 *)(*(_QWORD *)&v7 + 64));
  *(_OWORD *)(*(_QWORD *)&v7 + 27104) = 0u;
  v2[9].i32[1] = v10;
  v12 = *(_QWORD *)&v7 + 30432;
  v13 = v10 + 1;
  v39 = v2;
  if (v3[13])
  {
    if (v2[1].i8[2])
    {
      v14 = *v3;
      *(_WORD *)(*(_QWORD *)&v7 + 30437) = 770;
      *(_BYTE *)(*(_QWORD *)&v7 + 30439) = v14;
      *(_QWORD *)(*(_QWORD *)&v7 + 57264) = *(_QWORD *)&v7 + 57280;
      sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(*(_QWORD *)&v7 + 30436), (unsigned __int8 *)(*(_QWORD *)&v7 + 30496));
      v2[6].i32[1] = v13;
      v12 = *(_QWORD *)&v7 + 60864;
      v13 = v10 | 2;
      *(_OWORD *)(*(_QWORD *)&v7 + 57536) = 0u;
      if (v2[4].i8[0] == 4 && !v2[1].i8[7])
      {
        *(_WORD *)(*(_QWORD *)&v7 + 60869) = 770;
        *(_BYTE *)(*(_QWORD *)&v7 + 60871) = v14;
        *(_QWORD *)(*(_QWORD *)&v7 + 87696) = *(_QWORD *)&v7 + 87712;
        sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(*(_QWORD *)&v7 + 60868), (unsigned __int8 *)(*(_QWORD *)&v7 + 60928));
        *(_OWORD *)(*(_QWORD *)&v7 + 60872) = 0u;
        v2[8].i32[0] = v13;
        v12 = *(_QWORD *)&v7 + 91296;
        v13 = v10 + 3;
        *(_OWORD *)(*(_QWORD *)&v7 + 87968) = 0u;
      }
    }
  }
  if (!v2->i8[7])
  {
    for (i = 1; i != 3; ++i)
    {
      v16 = v12;
      v17 = *v3;
      *(_BYTE *)(v12 + 5) = 2;
      *(_BYTE *)(v12 + 6) = i;
      *(_BYTE *)(v12 + 7) = v17;
      *(_QWORD *)(v12 + 26832) = v12 + 26848;
      sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(v12 + 4), (unsigned __int8 *)(v12 + 64));
      v12 += 30432;
      *(_OWORD *)(v16 + 27104) = 0u;
    }
    v13 += 2;
    v2 = v39;
  }
  if (v2[1].i8[2] && !v3[13])
  {
    v18 = *v3;
    *(_WORD *)(v12 + 5) = 770;
    *(_BYTE *)(v12 + 7) = v18;
    *(_QWORD *)(v12 + 26832) = v12 + 26848;
    sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(v12 + 4), (unsigned __int8 *)(v12 + 64));
    v2[6].i32[1] = v13;
    *(_OWORD *)(v12 + 27104) = 0u;
    if (v2[4].i8[0] == 4 && !v2[1].i8[7])
    {
      v40[0] = 0;
      v40[1] = 0;
      v36 = *v3;
      *(_WORD *)(v12 + 30437) = 770;
      *(_BYTE *)(v12 + 30439) = v36;
      *(_QWORD *)(v12 + 57264) = v12 + 57280;
      sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(v12 + 30436), (unsigned __int8 *)(v12 + 30496));
      for (j = 0; j != 16; j += 4)
        *(_DWORD *)(v12 + 30440 + j) = *(_DWORD *)((char *)v40 + j);
      v2[8].i32[0] = v13 + 1;
      v13 += 2;
      *(_OWORD *)(v12 + 57536) = 0u;
    }
    else
    {
      ++v13;
    }
  }
  v2[11].i32[1] = v13;
  v2[5] = vdup_n_s32(0x1869Fu);
  v19 = v2[16];
  if (v2[1].i8[5])
  {
    if (*v3)
      v20 = (_DWORD)v4 == 0;
    else
      v20 = 1;
    v21 = !v20;
    *(_WORD *)(*(_QWORD *)&v19 + 5) = 3;
    *(_BYTE *)(*(_QWORD *)&v19 + 7) = v21;
    *(_QWORD *)(*(_QWORD *)&v19 + 26832) = *(_QWORD *)&v19 + 26848;
    sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(*(_QWORD *)&v19 + 4), (unsigned __int8 *)(*(_QWORD *)&v19 + 64));
    v2[5].i32[1] = 0;
    *(_OWORD *)(*(_QWORD *)&v19 + 27104) = 0u;
    *(_QWORD *)&v19 += 30432;
    v22 = 1;
  }
  else
  {
    v22 = 0;
  }
  if (v2[1].i8[4])
  {
    v23 = *v3;
    *(_WORD *)(*(_QWORD *)&v19 + 5) = 5;
    *(_BYTE *)(*(_QWORD *)&v19 + 7) = v23;
    *(_QWORD *)(*(_QWORD *)&v19 + 26832) = *(_QWORD *)&v19 + 26848;
    sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(*(_QWORD *)&v19 + 4), (unsigned __int8 *)(*(_QWORD *)&v19 + 64));
    v2[5].i32[0] = v22;
    *(_OWORD *)(*(_QWORD *)&v19 + 27104) = 0u;
    *(_QWORD *)&v19 += 30432;
    ++v22;
  }
  v24 = 0;
  v2[10].i32[0] = v22;
  v25 = *v3;
  do
  {
    v26 = dword_1B692D6E0[v24];
    v27 = v19;
    *(_BYTE *)(*(_QWORD *)&v19 + 5) = 3;
    *(_BYTE *)(*(_QWORD *)&v19 + 6) = v26;
    *(_BYTE *)(*(_QWORD *)&v19 + 7) = v25;
    *(_QWORD *)(*(_QWORD *)&v19 + 26832) = *(_QWORD *)&v19 + 26848;
    result = sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(*(_QWORD *)&v19 + 4), (unsigned __int8 *)(*(_QWORD *)&v19 + 64));
    *(_QWORD *)&v19 += 30432;
    *(_OWORD *)(*(_QWORD *)&v27 + 27104) = 0u;
    ++v24;
  }
  while (v24 != 3);
  v29 = v22 + 3;
  v30 = v39;
  if (v39[1].i8[6])
  {
    *(_WORD *)(*(_QWORD *)&v27 + 30437) = 5635;
    *(_BYTE *)(*(_QWORD *)&v27 + 30439) = v25;
    *(_QWORD *)(*(_QWORD *)&v27 + 57264) = *(_QWORD *)&v27 + 57280;
    result = sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(*(_QWORD *)&v27 + 30436), (unsigned __int8 *)(*(_QWORD *)&v27 + 30496));
    v39[7].i32[0] = v29;
    v19 = (int32x2_t)(*(_QWORD *)&v27 + 60864);
    v29 = v22 | 4;
    *(_OWORD *)(*(_QWORD *)&v27 + 57536) = 0u;
    if (v39[4].i8[0] == 4 && !v39[2].i8[0])
    {
      *(_WORD *)(*(_QWORD *)&v27 + 60869) = 5635;
      *(_BYTE *)(*(_QWORD *)&v27 + 60871) = v25;
      *(_QWORD *)(*(_QWORD *)&v27 + 87696) = *(_QWORD *)&v27 + 87712;
      result = sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(*(_QWORD *)&v27 + 60868), (unsigned __int8 *)(*(_QWORD *)&v27 + 60928));
      v39[8].i32[1] = v29;
      v19 = (int32x2_t)(*(_QWORD *)&v27 + 91296);
      v29 = v22 + 5;
      *(_OWORD *)(*(_QWORD *)&v27 + 87968) = 0u;
      v30 = v39;
    }
  }
  if (!v30[1].i8[3] && v30[1].i8[6])
  {
    v38 = v29;
    v31 = 0;
    v32 = 4u;
    v33 = 26848;
    do
    {
      v34 = dword_1B692D6E0[v32];
      v35 = *(_QWORD *)&v19 + v31;
      *(_BYTE *)(v35 + 5) = 3;
      *(_BYTE *)(v35 + 6) = v34;
      *(_BYTE *)(v35 + 7) = v25;
      *(_QWORD *)(v35 + 26832) = *(_QWORD *)&v19 + v33;
      result = sub_1B68BA5B4(v4, v8, (unsigned __int8 *)(*(_QWORD *)&v19 + v31 + 4), (unsigned __int8 *)(*(_QWORD *)&v19 + v31 + 64));
      *(_OWORD *)(v35 + 27104) = 0u;
      ++v32;
      v31 += 30432;
      v33 += 30432;
    }
    while (v32 != 22);
    v29 = v38 + 18;
    v30 = v39;
  }
  v30[12].i32[0] = v29;
  return result;
}

uint64_t sub_1B68A4454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  int *v10;
  _BYTE *v11;
  char *v12;
  unsigned int v13;
  _BOOL4 v14;
  double v15;
  unsigned int v16;
  int v17;
  uint64_t result;
  _OWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  unint64_t v32;
  _BYTE *v33;
  unsigned int v34;
  char v35;
  _BYTE v36[264];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  if (*(_BYTE *)(a2 + 188))
  {
    v8 = *(uint64_t **)(a2 + 192);
    v9 = *v8;
    *((_DWORD *)v8 + 10) = 8 * (*v8 - *((_DWORD *)v8 + 2));
    v8[1] = v9;
  }
  v10 = (int *)(a3 + 50624);
  *(_QWORD *)(a2 + 40) = a1 + 4;
  *(_QWORD *)(a2 + 48) = a1 + 64;
  *(_QWORD *)(a2 + 176) = a1 + 26560;
  *(_QWORD *)(a2 + 56) = a1 + 28432;
  *(_QWORD *)(a2 + 312) = *(_QWORD *)(a1 + 26544);
  *(_QWORD *)(a2 + 2624) = a1 + 27120;
  *(_QWORD *)(a2 + 2632) = *(_QWORD *)(a1 + 29248);
  *(_QWORD *)(a2 + 2560) = *(_QWORD *)(a1 + 27104);
  *(_QWORD *)(a2 + 2568) = *(_QWORD *)(a1 + 27112);
  *(_QWORD *)(a2 + 2544) = a1 + 29664;
  *(_QWORD *)(a2 + 2552) = a1 + 30176;
  v11 = (_BYTE *)(a1 + 29280);
  *(_QWORD *)(a2 + 2528) = a1 + 29280;
  v12 = (char *)(a1 + 29536);
  *(_QWORD *)(a2 + 2536) = a1 + 29536;
  if (*(unsigned __int8 *)(a1 + 5) > 1u)
  {
    sub_1B6907748(a2, 1);
  }
  else
  {
    sub_1B6907264(a2);
    v11 = v36;
    v12 = &v35;
    off_1EF13A478(v36, *(_QWORD *)(*(_QWORD *)(a2 + 216) + 128)+ (16 * *(_DWORD *)a2)+ (16 * *(_DWORD *)(a2 + 4) * *(_DWORD *)(*(_QWORD *)(a2 + 216) + 232)));
  }
  v13 = *(_DWORD *)(a3 + 14184);
  if (v13 > 7 || (v14 = 1, ((1 << v13) & 0x94) == 0))
    v14 = v13 == 9;
  sub_1B68A3CA4(a2, a3, v14, *v10, (int *)&v34);
  v15 = *(double *)(a1 + 26544);
  v16 = v34;
  v17 = sub_1B6903AB8(a3 + 12640, (uint64_t)v11, 0x10u);
  result = sub_1B6903AB8(a3 + 12896, (uint64_t)v12, 8u);
  *(_DWORD *)a4 = v16;
  *(_DWORD *)(a4 + 4) = result + v17;
  *(_DWORD *)(a4 + 8) = result + v17 + (v15 * (double)v16);
  *(double *)(a4 + 16) = v15;
  v19 = *(_OWORD **)(a2 + 176);
  *v19 = 0u;
  v19[1] = 0u;
  v19[2] = 0u;
  v19[3] = 0u;
  v19[4] = 0u;
  v19[5] = 0u;
  v19[6] = 0u;
  v19[7] = 0u;
  v19[8] = 0u;
  v19[9] = 0u;
  v19[10] = 0u;
  v19[11] = 0u;
  v19[12] = 0u;
  v20 = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(v20 + 240) = 0u;
  *(_OWORD *)(v20 + 256) = 0u;
  v21 = *(_DWORD *)(a2 + 4);
  v22 = *(_QWORD *)(a2 + 216);
  v23 = *(unsigned int *)(v22 + 232);
  v24 = (16 * *(_DWORD *)a2);
  v25 = (_BYTE *)((16 * v21 * v23) + v24 + *(_QWORD *)(v22 + 128) + 15);
  v26 = -2;
  v27 = (_BYTE *)(a3 + 12655);
  do
  {
    *(v25 - 15) = *(v27 - 15);
    *(v25 - 14) = *(v27 - 14);
    *(v25 - 13) = *(v27 - 13);
    *(v25 - 12) = *(v27 - 12);
    *(v25 - 11) = *(v27 - 11);
    *(v25 - 10) = *(v27 - 10);
    *(v25 - 9) = *(v27 - 9);
    *(v25 - 8) = *(v27 - 8);
    *(v25 - 7) = *(v27 - 7);
    *(v25 - 6) = *(v27 - 6);
    *(v25 - 5) = *(v27 - 5);
    *(v25 - 4) = *(v27 - 4);
    *(v25 - 3) = *(v27 - 3);
    *(v25 - 2) = *(v27 - 2);
    *(v25 - 1) = *(v27 - 1);
    *v25 = *v27;
    v28 = &v25[v23];
    *(v28 - 15) = v27[1];
    *(v28 - 14) = v27[2];
    *(v28 - 13) = v27[3];
    *(v28 - 12) = v27[4];
    *(v28 - 11) = v27[5];
    *(v28 - 10) = v27[6];
    *(v28 - 9) = v27[7];
    *(v28 - 8) = v27[8];
    *(v28 - 7) = v27[9];
    *(v28 - 6) = v27[10];
    *(v28 - 5) = v27[11];
    *(v28 - 4) = v27[12];
    *(v28 - 3) = v27[13];
    *(v28 - 2) = v27[14];
    *(v28 - 1) = v27[15];
    *v28 = v27[16];
    v26 += 2;
    v25 += (2 * v23);
    v27 += 32;
  }
  while (v26 < 0xE);
  v29 = *(unsigned int *)(v22 + 248);
  v30 = (_BYTE *)((8 * v21 * v29) + v24 + *(_QWORD *)(v22 + 136) + 15);
  v31 = (_BYTE *)(a3 + 12911);
  v32 = -2;
  do
  {
    *(v30 - 15) = *(v31 - 15);
    *(v30 - 14) = *(v31 - 14);
    *(v30 - 13) = *(v31 - 13);
    *(v30 - 12) = *(v31 - 12);
    *(v30 - 11) = *(v31 - 11);
    *(v30 - 10) = *(v31 - 10);
    *(v30 - 9) = *(v31 - 9);
    *(v30 - 8) = *(v31 - 8);
    *(v30 - 7) = *(v31 - 7);
    *(v30 - 6) = *(v31 - 6);
    *(v30 - 5) = *(v31 - 5);
    *(v30 - 4) = *(v31 - 4);
    *(v30 - 3) = *(v31 - 3);
    *(v30 - 2) = *(v31 - 2);
    *(v30 - 1) = *(v31 - 1);
    *v30 = *v31;
    v33 = &v30[v29];
    *(v33 - 15) = v31[1];
    *(v33 - 14) = v31[2];
    *(v33 - 13) = v31[3];
    *(v33 - 12) = v31[4];
    *(v33 - 11) = v31[5];
    *(v33 - 10) = v31[6];
    *(v33 - 9) = v31[7];
    *(v33 - 8) = v31[8];
    *(v33 - 7) = v31[9];
    *(v33 - 6) = v31[10];
    *(v33 - 5) = v31[11];
    *(v33 - 4) = v31[12];
    *(v33 - 3) = v31[13];
    *(v33 - 2) = v31[14];
    *(v33 - 1) = v31[15];
    *v33 = v31[16];
    v32 += 2;
    v30 += (2 * v29);
    v31 += 32;
  }
  while (v32 < 6);
  return result;
}

uint64_t sub_1B68A4950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  _BOOL4 v23;
  BOOL v26;
  unsigned int v27;
  _BOOL4 v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v38;
  _BOOL4 v39;
  char v40;
  _QWORD *v41;
  int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BOOL4 v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  char v70;
  int *v71;
  int v72;
  int v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  _BYTE *v85;
  unsigned int v86;
  unsigned __int8 v87;
  uint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  char v95;
  unsigned int v96;
  BOOL v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  unint64_t v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  uint64_t i;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  unsigned int v114;
  BOOL v115;
  char v116;
  _QWORD *v117;
  uint64_t *v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BOOL4 v131;
  int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  int v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  _BYTE *v147;
  unsigned int v148;
  unsigned __int8 v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  double v153;
  signed int v154;
  double v155;
  uint64_t v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  int v164;
  __int32 v165;
  int v166;
  int v167;
  BOOL v168;
  unsigned int v169;
  int v170;
  int v171;
  unint64_t v172;
  unint64_t v173;
  int32x4_t v174;
  int v175;
  __n128 v176;
  int v177;
  int v178;
  unsigned int v179;
  __int128 v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  unsigned int v211;
  __int32 *v212;
  int v213;
  int v214;
  uint64_t v215;
  int v217;
  int v218;
  __int8 *v219;
  _DWORD *v220;
  int v221;
  int v222;
  BOOL v223;
  int v224;
  int v225;
  int v226;
  int v227;
  BOOL v228;
  int v229;
  uint64_t v230;
  BOOL v231;
  int v232;
  int32x2_t *v233;
  _BYTE *v234;
  uint64_t v235;
  _DWORD *v236;
  _DWORD *v237;
  _DWORD *v238;
  _OWORD *v239;
  __int128 v240;
  unsigned int v241;
  BOOL v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  _DWORD *v247;
  unsigned int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t *v267;
  _QWORD *v268;
  _BOOL4 v269;
  _QWORD *v270;
  int v271;
  int v272;
  _QWORD *v273;
  unsigned int v274;
  unsigned int v275;
  BOOL v276;
  BOOL v277;
  _BOOL4 v278;
  _BOOL4 v279;
  uint64_t v280;
  char v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD *v284;
  unsigned int v285;
  _QWORD *v286;
  _QWORD *v287;
  _QWORD *v288;
  uint64_t v289;
  char v290;
  int v291;
  uint64_t v292;
  int v293;
  _QWORD *v294;
  int v295;
  unsigned int v296;
  int v297;
  _QWORD *v298;
  uint64_t v299;
  unsigned int v300;
  unsigned int v301;
  _DWORD *v302;
  __int128 v303;
  unsigned __int8 *v304;
  uint64_t v305;
  int v306;
  int v307;
  unsigned int v308;
  _BYTE *v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  _BYTE *v313;
  int v314;
  __int128 v315;
  uint64_t v316;
  unsigned int v317;
  char v318;
  BOOL v319;
  _BYTE v320[8];
  unsigned int v321;
  _BYTE v322[64];
  uint64_t v323;
  unsigned __int16 v324[16];
  __int128 v325;
  __int128 v326;
  __int16 v327;
  __int16 v328;
  __int16 v329;
  __int16 v330;
  __int16 v331;
  __int16 v332;
  __int16 v333;
  __int16 v334;
  __int16 v335;
  __int16 v336;
  __int16 v337;
  __int16 v338;
  __int16 v339;
  __int16 v340;
  __int16 v341;
  __int16 v342;
  unsigned int v343;
  int v344;
  _WORD v345[66];
  int v346;
  _DWORD v347[8];
  unsigned int v348;
  int32x4_t v349;
  int32x4_t v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  _OWORD v357[2];
  int v358;
  _BYTE v359[256];
  _BYTE v360[256];
  _QWORD v361[5];
  char v362;
  __int128 v363;
  int v364;
  int v365;
  _BYTE v366[128];
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  char v373;
  BOOL v374;
  _OWORD v375[2];
  int v376;
  _DWORD v377[4];
  _BYTE v378[56];
  uint64_t v379;

  result = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v16 = v11;
  v17 = v10;
  v379 = *MEMORY[0x1E0C80C00];
  v18 = (_DWORD *)(result + 205840);
  v19 = (unsigned __int8 *)(v10 + 10560);
  v315 = xmmword_1B692D738;
  v316 = 0;
  v289 = v20;
  v21 = *(_DWORD *)(v20 + 14184);
  v23 = v21 == 1 || v21 == 6;
  if (*(_BYTE *)(v10 + 14112))
    v26 = (v21 == 2 || v21 == 7) && *(_BYTE *)(v10 + 14092) != 0;
  else
    v26 = 0;
  v27 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v18 + 4696) + 2 * *(unsigned int *)(v11 + 16));
  v314 = 0;
  v28 = *(_BYTE *)(v10 + 33) == 0;
  *v12 = 0;
  v29 = 0x40000000;
  if (*(_BYTE *)(v10 + 14117) == 2)
    v30 = 0x40000000;
  else
    v30 = a9;
  v304 = (unsigned __int8 *)(v10 + 10560);
  v305 = v11;
  v306 = v15;
  if (*(_BYTE *)(v10 + 5) || (*(_BYTE *)(v10 + 6) ? (v31 = 1) : (v31 = v26), (v31 & 1) != 0))
  {
    v32 = 0;
    v33 = 1;
    goto LABEL_27;
  }
  v300 = v27;
  v302 = (_DWORD *)(result + 205840);
  v312 = *(_QWORD *)(v10 + 112);
  v56 = *(_QWORD *)(v11 + 216);
  v57 = *(unsigned int *)(v56 + 232);
  v58 = *(_QWORD *)(v56 + 128) + (16 * *(_DWORD *)v11) + (16 * *(_DWORD *)(v11 + 4) * v57);
  v59 = *(_BYTE **)(v11 + 128);
  v60 = *(_QWORD *)(v11 + 136);
  v61 = v60 != 0;
  v278 = v23;
  v276 = v26;
  v274 = v30;
  v271 = v14;
  v269 = v28;
  if (*(_BYTE *)(v10 + 12432))
  {
    if (v59)
    {
      if (v59[224] == 34)
      {
        v62 = v59[208] != 34 && v59 != 0;
        if (!v60)
          goto LABEL_74;
LABEL_77:
        if (*(_BYTE *)(v60 + 224) == 34)
        {
          if (*(_BYTE *)(v60 + 208) == 34)
            v61 = 0;
        }
        else
        {
          v61 = 1;
        }
        goto LABEL_84;
      }
      v62 = 1;
      if (v60)
        goto LABEL_77;
    }
    else
    {
      v62 = 0;
      if (v60)
        goto LABEL_77;
    }
LABEL_74:
    v61 = 0;
LABEL_84:
    if ((*(_BYTE *)(v11 + 185) & (v59 != 0)) != 0 && *(_BYTE *)(v11 + 31) == 1 && v59[200] == 1 && v62)
    {
      v63 = *(_QWORD *)(v11 + 168);
      v62 = *(_BYTE *)(v63 + 224) != 34 || *(unsigned __int8 *)(v63 + 208) != 34;
    }
    goto LABEL_351;
  }
  v62 = v59 != 0;
LABEL_351:
  v311 = result;
  v259 = v12;
  v262 = v13;
  v263 = v10;
  v243 = 0;
  v244 = 0;
  v245 = v62 | (2 * v61);
  v246 = 0x40000000;
  v247 = *(_DWORD **)(v10 + 112);
  do
  {
    if (*v247)
    {
      ((void (*)(uint64_t, uint64_t, _DWORD *, uint64_t))qword_1EF13A528[v244])(v58, v57, v247 + 6788, v245);
      v248 = off_1EF13A420(v247 + 6788, 16, v58, v57) + byte_1B693C048[v244] * v306;
      if (v246 > v248)
        v243 = v244;
      if (v246 >= v248)
        v246 = v248;
    }
    ++v244;
    v247 += 7608;
  }
  while (v244 != 4);
  off_1EF13A5B8(v58, v57, v312 + 30432 * v243 + 27152, 16, v312 + 30432 * v243 + 27408, 16);
  v15 = v306;
  v23 = v278;
  if (v278)
    v249 = 9;
  else
    v249 = 0;
  v29 = v246 + v249 * v306;
  DWORD2(v315) = v29;
  v17 = v263;
  v250 = *(_QWORD *)(v263 + 112);
  v32 = v250 + 30432 * v243;
  v19 = v304;
  v16 = v305;
  if (v304[3557] == 2)
  {
    v251 = v250 + 30432 * v243;
    sub_1B68A66A0(*(char *)(v251 + 59), v263, v305, *(_DWORD *)(v289 + 14184), v306, &v314);
    *(_BYTE *)(v251 + 353) = v314;
    *(_QWORD *)(v251 + 29248) = v263 + 928 * *v304 + 10576;
    *(_BYTE *)(v251 + 27120) = sub_1B6901C8C(v251 + 27408, ((32 * (*(_BYTE *)(v251 + 59) % 6u)) | (*(_BYTE *)(v251 + 59) / 6u) & 0x1F), v251 + 27920, (__int16 *)(v251 + 28432), (__int16 *)(v251 + 28464), *(unsigned __int8 *)(v305 + 29));
    sub_1B68A4454(v32, v305, v289, (uint64_t)&v315);
    v15 = v306;
    v17 = v263;
  }
  v30 = v274;
  v14 = v271;
  v28 = v269;
  if ((v271 & (v29 > 2 * v274)) != 0)
    v28 = 0;
  v33 = !(v271 & (v29 > 2 * v274));
  v12 = v259;
  v13 = v262;
  v26 = v276;
  result = v311;
  v18 = v302;
  v27 = v300;
LABEL_27:
  if (*(_BYTE *)(v17 + 4))
    goto LABEL_28;
  v38 = v33 && *(_BYTE *)(v17 + 30) != 0;
  if (v28)
  {
    if (*(_BYTE *)(v17 + 30))
    {
      v28 = v27 > 0x28;
      if (*(_BYTE *)(result + 1057))
      {
        if (v18[563] < 0x14u)
          v28 = 1;
      }
    }
  }
  v39 = v33;
  *(_BYTE *)(v16 + 2648) = 1;
  if (*(_BYTE *)(*(_QWORD *)(result + 136) + 663))
    v40 = 6;
  else
    v40 = 4;
  *(_BYTE *)(v16 + 2649) = v40;
  if (v38)
    v39 = v27 > 0xF;
  if (v19[3532] && v39 && !*(_BYTE *)(v17 + 6))
  {
    v41 = *(_QWORD **)(v17 + 112);
    v298 = v41 + 18873;
    v267 = v41 + 18534;
    v264 = (char *)v41 + 121787;
    if (v23)
      v42 = 15;
    else
      v42 = 6;
    v307 = v42 * v15;
    if (v29 >= v30)
      v43 = v30;
    else
      v43 = v29;
    if (v19[3557] == 2)
      v44 = 0x40000000;
    else
      v44 = v43;
    v296 = v44;
    v45 = *(_QWORD *)(v16 + 216);
    v46 = *(unsigned int *)(v45 + 232);
    v47 = (_OWORD *)(*(_QWORD *)(v45 + 128)
                   + (16 * *(_DWORD *)v16)
                   + (16 * *(_DWORD *)(v16 + 4) * v46));
    v48 = *(_QWORD *)(v16 + 128);
    v49 = *(_QWORD *)(v16 + 136);
    v51 = *(_QWORD *)(v16 + 144);
    v50 = *(_QWORD *)(v16 + 152);
    v52 = v48 != 0;
    v53 = v49 != 0;
    v54 = v51 != 0;
    v55 = v50 != 0;
    v255 = v32;
    if (v19[1872])
    {
      if (v48)
      {
        if (*(_BYTE *)(v48 + 224) == 34)
        {
          if (*(_BYTE *)(v48 + 208) == 34)
            v52 = 0;
        }
        else
        {
          v52 = 1;
        }
      }
      else
      {
        v52 = 0;
      }
      if (v49)
      {
        if (*(_BYTE *)(v49 + 224) == 34)
        {
          if (*(_BYTE *)(v49 + 208) == 34)
            v53 = 0;
        }
        else
        {
          v53 = 1;
        }
      }
      else
      {
        v53 = 0;
      }
      if (v51)
      {
        if (*(_BYTE *)(v51 + 224) == 34)
        {
          if (*(_BYTE *)(v51 + 208) == 34)
            v54 = 0;
        }
        else
        {
          v54 = 1;
        }
      }
      else
      {
        v54 = 0;
      }
      if (v50)
        v55 = *(_BYTE *)(v50 + 224) != 34 || *(unsigned __int8 *)(v50 + 208) != 34;
      else
        v55 = 0;
    }
    v64 = 0;
    v65 = 4 * v53;
    v66 = 2 * v54;
    v67 = *v267;
    *(_QWORD *)(v16 + 40) = (char *)v41 + 121732;
    *(_QWORD *)(v16 + 48) = v41 + 15224;
    *(_QWORD *)(v16 + 176) = v41 + 18536;
    *(_QWORD *)(v16 + 56) = v41 + 18770;
    *(_QWORD *)(v16 + 312) = *v267;
    v294 = v41 + 18606;
    *(_QWORD *)(v16 + 2624) = v41 + 18606;
    *(_QWORD *)(v16 + 2632) = v41[18872];
    *(_QWORD *)(v16 + 2560) = v41[18604];
    *(_QWORD *)(v16 + 2568) = v41[18605];
    *(_QWORD *)(v16 + 2544) = v41 + 18924;
    *(_QWORD *)(v16 + 2552) = v41 + 18988;
    *(_QWORD *)(v16 + 2528) = v41 + 18876;
    *(_QWORD *)(v16 + 2536) = v41 + 18908;
    v68 = v46 & -v53;
    v69 = -v68;
    v70 = *((_BYTE *)v47 - v68 - v55);
    v71 = (int *)((char *)v47 + 16 * v54 - v68);
    v73 = *v71;
    v72 = v71[1];
    v362 = v70;
    v363 = *(_OWORD *)((char *)v47 + v69);
    v364 = v73;
    v365 = v72;
    do
    {
      v74 = &v361[v64 + 4];
      *((_BYTE *)v74 + 47) = *((_BYTE *)v47 - v52);
      *((_OWORD *)v74 + 3) = *v47;
      v47 = (_OWORD *)((char *)v47 + v46);
      v64 += 4;
    }
    while ((_DWORD)(v64 * 8) != 512);
    v370 = 0;
    v369 = 0;
    v371 = 0;
    v76 = *(_QWORD *)(v16 + 128);
    v75 = *(_QWORD *)(v16 + 136);
    v77 = *(_QWORD *)(v16 + 176);
    v368 = v77 + 224;
    *(_BYTE *)(v77 + 284) = 1;
    if (v76)
    {
      v78 = *(unsigned __int8 *)(v76 + 284);
      v79 = v76 + 224;
      v80 = v76 + 208;
      if (v78)
        v80 = v79;
      v369 = v80;
    }
    v81 = v65 | (8 * v52);
    v260 = v13;
    v257 = v12;
    v279 = v23;
    v277 = v26;
    v275 = v30;
    v272 = v14;
    v265 = (uint64_t)(v41 + 15216);
    if (v75)
    {
      if (*(_BYTE *)(v75 + 284))
        v82 = v75 + 224;
      else
        v82 = v75 + 208;
      v370 = v82;
    }
    else
    {
      v370 = 0;
    }
    v83 = 0;
    v291 = v81 | v66 | v55;
    v280 = v16 + 434;
    v286 = v41 + 18610;
    v288 = v41 + 18642;
    v282 = v41 + 18774;
    v284 = v41 + 18706;
    v84 = v307;
    while (1)
    {
      v308 = v84;
      v85 = &v366[32 * byte_1B693C578[v83] + byte_1B693C57C[v83]];
      v86 = dword_1B693C580[v291 | (16 * v83)];
      v372 = bswap32(v86);
      v373 = 1;
      v374 = (~v86 & 0x1010001) == 0;
      v87 = sub_1B690393C(v83, v304[1872], (uint64_t)&v368);
      v375[0] = xmmword_1B6917630;
      v375[1] = xmmword_1B6917C60;
      v376 = 8;
      off_1EF137BF8((uint64_t)v85, 32, v378, &v372);
      v88 = 0;
      v89 = *(_BYTE *)(v16 + 2648);
      v90 = *(_BYTE *)(v16 + 2649);
      v91 = 0x40000000;
      v92 = 2;
      do
      {
        v93 = *((unsigned __int8 *)v375 + v88);
        if ((_DWORD)v93 != 66)
        {
          if (*((_BYTE *)&v372 + dword_1B693C980[v93]))
          {
            ((void (*)(_BYTE *, uint64_t, _BYTE *, unsigned int *))off_1EF137BB0[v93])(v320, 8, v378, &v372);
            v94 = off_1EF13A438(v85, 32, v320, 8);
            if ((_DWORD)v93 == v87)
              v95 = v89;
            else
              v95 = v90;
            v96 = v94 + v95 * v306;
            v97 = v91 > v96;
            if (v91 >= v96)
              v91 = v96;
            if (v97)
              v92 = v93;
          }
          else
          {
            *(_DWORD *)((char *)v375 + v88) = 66;
          }
        }
        v88 += 4;
      }
      while (v88 != 36);
      ((void (*)(_BYTE *, uint64_t, _BYTE *, unsigned int *))off_1EF137BB0[v92])(v320, 8, v378, &v372);
      off_1EF13A5C0(v85, 32, v320, 8, v322, 8);
      v98 = 171 * *(unsigned __int8 *)(*(_QWORD *)(v305 + 40) + 55);
      v99 = *(unsigned __int8 *)(v305 + 28);
      v100 = *(unsigned __int8 *)(v305 + 336);
      v101 = ((32 * (*(_BYTE *)(*(_QWORD *)(v305 + 40) + 55) % 6u)) | (*(_BYTE *)(*(_QWORD *)(v305 + 40) + 55)
                                                                                        / 6u) & 0x1F);
      LODWORD(v357[0]) = 0;
      off_1EF13A4F8(v322, v347);
      if (v100)
      {
        sub_1B6900F94((uint64_t)v347, v101, v280, 0, (uint64_t)v345, v357, (uint64_t)&v349);
        v102 = v357[0];
      }
      else
      {
        if (v99 <= 9 && ((1 << v99) & 0x294) != 0)
          v104 = 1431655766;
        else
          v104 = 715827883;
        v105 = v101 >> 5;
        v103 = 1 << (((v98 >> 10) & 0x1F) + 15);
        v102 = off_1EF13A508(v359, v347, (char *)&unk_1B693B300 + 128 * (v101 >> 5), (((unint64_t)(v103 * (uint64_t)v104) >> 32)+ (((unint64_t)(v103 * (uint64_t)v104) >> 32) >> 31)), ((v98 >> 10) & 0x1F) + 15);
        if (v102)
        {
          for (i = 0; i != 64; ++i)
            v345[(unsigned __int16)word_1B693BF90[i]] = *(_WORD *)&v359[i * 2];
          off_1EF13A510(&v349, v359, (char *)&unk_1B693B600 + 128 * v105, (v98 >> 10) & 0x1F);
        }
        else
        {
          memset(v345, 0, 128);
          v349 = 0u;
          v350 = 0u;
          v351 = 0u;
          v352 = 0u;
          v353 = 0u;
          v354 = 0u;
          v355 = 0u;
          v356 = 0u;
        }
      }
      v84 = v91 + v308;
      off_1EF13A500(&v349, &v326);
      v107 = 1 << v83;
      if (!v102)
        v107 = 0;
      v346 = v107;
      *(_DWORD *)(*(_QWORD *)(v305 + 176) + 4 * v83 + 224) = vdup_n_s8(v92).u32[0];
      v108 = ((_DWORD)v83 << 6) & 0xFFFFFF80 | (8 * (v83 & 1));
      v109 = (uint64_t)v286 + v108;
      v110 = (uint64_t)v284 + 2 * v108;
      v111 = (uint64_t)v282 + 2 * v108;
      off_1EF13A480((char *)v288 + 2 * v108, 32, v322, 8);
      off_1EF13A480(v110, 32, &v326, 8);
      off_1EF13A488(v109, 16, v320, 8);
      result = off_1EF13A480(v111, 32, v345, 8);
      *((_BYTE *)v294 + v83) = v346;
      *v298 = 0;
      *((_DWORD *)v298 + 2) = 0;
      v298[2] = v67;
      if (v84 > v296)
        break;
      result = off_1EF13A5C8(v85, 32, v320, &v326);
      ++v83;
      v16 = v305;
      if (v83 == 4)
        goto LABEL_154;
    }
    v84 = 0x40000000;
    *((_DWORD *)v298 + 2) = 0x40000000;
    v16 = v305;
LABEL_154:
    if (*(_BYTE *)(v16 + 188))
    {
      v112 = *(_QWORD *)(v16 + 176);
      *(_BYTE *)(v112 + 176) = 0;
      *(_DWORD *)(v112 + 177) = -1;
      *(_BYTE *)(v112 + 181) = -1;
      *(_BYTE *)(v112 + 199) = 0;
      *(_QWORD *)&v113 = 0x2020202020202020;
      *((_QWORD *)&v113 + 1) = 0x2020202020202020;
      *(_OWORD *)(v112 + 128) = v113;
      *(_OWORD *)(v112 + 144) = v113;
      *(_OWORD *)v112 = 0u;
      *(_OWORD *)(v112 + 16) = 0u;
      *(_OWORD *)(v112 + 32) = 0u;
      *(_OWORD *)(v112 + 48) = 0u;
      *(_OWORD *)(v112 + 64) = 0u;
      *(_OWORD *)(v112 + 80) = 0u;
      *(_OWORD *)(v112 + 96) = 0u;
      *(_OWORD *)(v112 + 112) = 0u;
      *(_QWORD *)(v112 + 160) = *(_QWORD *)(v112 + 272);
      *(_QWORD *)(v112 + 168) = 0;
    }
    v19 = v304;
    v15 = v306;
    v23 = v279;
    v30 = v275;
    if (v304[3557] == 2)
    {
      sub_1B68A66A0(*v264, v17, v16, *(_DWORD *)(v289 + 14184), v306, &v314);
      v264[294] = v314;
      v267[338] = v17 + 928 * *v304 + 10576;
      result = sub_1B68A4454(v265, v16, v289, (uint64_t)v320);
      v15 = v306;
      v84 = v321;
    }
    v114 = DWORD2(v315);
    v115 = DWORD2(v315) > v84;
    if (DWORD2(v315) >= v84)
      v114 = v84;
    DWORD2(v315) = v114;
    v32 = v255;
    v12 = v257;
    if (v115)
      v32 = v265;
    v13 = v260;
    v26 = v277;
    if (v272 && (double)v275 * 1.25 < (double)v114)
      v28 = 0;
  }
  if (!v28)
    goto LABEL_28;
  v116 = *(_BYTE *)(v17 + 5) || v26;
  if ((v116 & 1) != 0)
    goto LABEL_28;
  v117 = *(_QWORD **)(v17 + 112);
  v287 = v117 + 22677;
  v118 = v117 + 22338;
  v252 = (char *)v117 + 152219;
  v254 = (uint64_t)(v117 + 19020);
  if (v23)
    v119 = 33;
  else
    v119 = 24;
  v120 = v119 * v15;
  v121 = DWORD2(v315);
  if (DWORD2(v315) >= v30)
    v121 = v30;
  if (v19[3557] == 2)
    v122 = 0x40000000;
  else
    v122 = v121;
  v285 = v122;
  v123 = *(_QWORD *)(v16 + 216);
  v124 = *(_QWORD *)(v123 + 128) + (16 * *(_DWORD *)v16);
  v125 = *(unsigned int *)(v123 + 232);
  v126 = (_OWORD *)(v124 + (16 * *(_DWORD *)(v16 + 4) * v125));
  v128 = *(_QWORD *)(v16 + 128);
  v127 = *(_QWORD *)(v16 + 136);
  v130 = *(_QWORD *)(v16 + 144);
  v129 = *(_QWORD *)(v16 + 152);
  v131 = v128 != 0;
  v132 = v127 != 0;
  v133 = v130 != 0;
  v134 = v129 != 0;
  v256 = v32;
  if (!v19[1872])
    goto LABEL_205;
  if (!v128)
  {
    v131 = 0;
    if (!v127)
      goto LABEL_184;
    goto LABEL_191;
  }
  if (*(_BYTE *)(v128 + 224) != 34)
  {
    v131 = 1;
    if (!v127)
      goto LABEL_184;
LABEL_191:
    if (*(_BYTE *)(v127 + 224) == 34)
    {
      if (*(_BYTE *)(v127 + 208) == 34)
        v132 = 0;
      if (v130)
        goto LABEL_185;
    }
    else
    {
      v132 = 1;
      if (v130)
        goto LABEL_185;
    }
LABEL_195:
    v133 = 0;
    if (v129)
      goto LABEL_196;
    goto LABEL_189;
  }
  if (*(_BYTE *)(v128 + 208) == 34)
    v131 = 0;
  if (v127)
    goto LABEL_191;
LABEL_184:
  v132 = 0;
  if (!v130)
    goto LABEL_195;
LABEL_185:
  if (*(_BYTE *)(v130 + 224) == 34)
  {
    if (*(_BYTE *)(v130 + 208) == 34)
      v133 = 0;
    if (!v129)
      goto LABEL_189;
LABEL_196:
    v134 = *(_BYTE *)(v129 + 224) != 34 || *(unsigned __int8 *)(v129 + 208) != 34;
    goto LABEL_205;
  }
  v133 = 1;
  if (v129)
    goto LABEL_196;
LABEL_189:
  v134 = 0;
LABEL_205:
  v258 = v12;
  v261 = v13;
  v135 = 0;
  v136 = 2 * v133;
  v137 = *v118;
  *(_QWORD *)(v16 + 40) = (char *)v117 + 152164;
  *(_QWORD *)(v16 + 48) = v117 + 19028;
  *(_QWORD *)(v16 + 176) = v117 + 22340;
  *(_QWORD *)(v16 + 56) = v117 + 22574;
  *(_QWORD *)(v16 + 312) = *v118;
  v283 = v117 + 22410;
  *(_QWORD *)(v16 + 2624) = v117 + 22410;
  *(_QWORD *)(v16 + 2632) = v117[22676];
  *(_QWORD *)(v16 + 2560) = v117[22408];
  v253 = v117 + 22338;
  *(_QWORD *)(v16 + 2568) = v117[22409];
  *(_QWORD *)(v16 + 2544) = v117 + 22728;
  *(_QWORD *)(v16 + 2552) = v117 + 22792;
  *(_QWORD *)(v16 + 2528) = v117 + 22680;
  *(_QWORD *)(v16 + 2536) = v117 + 22712;
  v138 = v125 & -v132;
  v139 = *(_DWORD *)((char *)v126 + 16 * v133 - v138);
  v362 = *((_BYTE *)v126 - v138 - v134);
  v363 = *(_OWORD *)((char *)v126 - v138);
  v364 = v139;
  do
  {
    v140 = &v361[v135 + 4];
    *((_BYTE *)v140 + 47) = *((_BYTE *)v126 - v131);
    *((_OWORD *)v140 + 3) = *v126;
    v126 = (_OWORD *)((char *)v126 + v125);
    v135 += 4;
  }
  while ((_DWORD)(v135 * 8) != 512);
  v281 = (4 * v132) | (8 * v131) | v136 | v134;
  v361[3] = 0;
  v141 = *(_QWORD *)(v16 + 128);
  v142 = *(_QWORD *)(v16 + 136);
  if (v141)
    v143 = v141 + 208;
  else
    v143 = 0;
  if (v142)
    v144 = v142 + 208;
  else
    v144 = 0;
  v361[0] = *(_QWORD *)(v16 + 176) + 208;
  v361[1] = v143;
  v361[2] = v144;
  off_1EF13A498(v359, v366, 32);
  off_1EF13A498(v360, &v367, 32);
  v145 = 0;
  v146 = 0;
  v273 = v117 + 22446;
  v268 = v117 + 22510;
  v270 = v117 + 22414;
  v266 = v117 + 22578;
  v303 = 0u;
  while (1)
  {
    v297 = v146;
    v301 = v120;
    v147 = &v366[32 * byte_1B693C157[v145] + byte_1B693C147[v145]];
    if (v145 == 8)
    {
      off_1EF13A498(v359, v147, 32);
      off_1EF13A498(v360, v147 + 128, 32);
    }
    v313 = v147;
    v295 = 4 * v145;
    v148 = dword_1B693C168[v281 & 0xF | (16 * v145)];
    v317 = bswap32(v148);
    v318 = 1;
    v319 = (~v148 & 0x1010001) == 0;
    v149 = sub_1B69039B8(v145, v19[1872], (uint64_t)v361);
    v150 = 0;
    v151 = 0;
    v357[0] = xmmword_1B6917630;
    v357[1] = xmmword_1B6917C60;
    v358 = 8;
    v152 = byte_1B693C568[v145];
    v153 = *(double *)(v16 + 312) * 65536.0;
    v292 = *(unsigned __int8 *)(v16 + 28);
    v290 = *(_BYTE *)(*(_QWORD *)(v16 + 40) + 55);
    v347[2] = 999999;
    do
    {
      v154 = *(_DWORD *)((char *)v357 + v150);
      if (v154 != 66)
      {
        if (*((_BYTE *)&v317 + dword_1B693C980[v154]))
          *(&v372 + v151++) = v154;
        else
          *(_DWORD *)((char *)v357 + v150) = 66;
      }
      v150 += 4;
    }
    while (v150 != 36);
    v299 = v145;
    v155 = sub_1B68F7888(v153);
    *(&v372 + v151) = 66;
    if (v151 < 1)
    {
      v157 = 0;
      v160 = 0x40000000;
    }
    else
    {
      v156 = 0;
      v157 = 0;
      v158 = *(char *)(v16 + 2648);
      v159 = *(char *)(v16 + 2649);
      v160 = 0x40000000;
      v309 = &v359[2 * v152];
      do
      {
        v349.i32[0] = 0;
        v377[0] = 0;
        v161 = &v372 + v156;
        v162 = *v161;
        v163 = v161[1];
        off_1EF13A520(v313, 32, v309, &v368, &v317, *v161, v163);
        off_1EF13A410(&v368, &v349, v377);
        if (v162 == v149)
          v164 = v158;
        else
          v164 = v159;
        v165 = v349.i32[0] + v164 * v306;
        if (v163 == v149)
          v166 = v158;
        else
          v166 = v159;
        v167 = v377[0] + v166 * v306;
        if (v163 == 66)
          v167 = 0x40000000;
        v168 = v160 <= v165;
        if (v160 < v165)
          v165 = v160;
        if (v168)
          v169 = v157;
        else
          v169 = v162;
        if (v165 >= v167)
          v160 = v167;
        else
          v160 = v165;
        if (v165 <= v167)
          v157 = v169;
        else
          v157 = v163;
        v156 += 2;
      }
      while (v151 > (int)v156);
    }
    v310 = v160;
    v293 = v149;
    v343 = v157;
    off_1EF13A518(v313, 32, &v323, v324, &v317, v157);
    v16 = v305;
    v170 = *(unsigned __int8 *)(v305 + 29);
    v171 = v343;
    v172 = (v290 / 6uLL) & 0x1F;
    v173 = 1431655766 * (0x8000 << (v290 / 6u));
    v174 = vdupq_n_s32((int)(HIDWORD(v173) + (v173 >> 63)) >> ((byte_1B693B900[v292] & 0x20) == 0));
    v349 = vdupq_n_s32((int)v172 + 15);
    v350 = v174;
    v351 = xmmword_1EF138120[(v290 % 6u) & 7];
    LOWORD(v375[0]) = 0;
    sub_1B68FF4EC(v324, v324, v377);
    sub_1B68FF888((uint64_t)v377, &v349, (uint64_t)&v327, (uint64_t)&v327, (BOOL *)v375, v170);
    v175 = LOWORD(v375[0]);
    if (LOWORD(v375[0]))
    {
      v176 = sub_1B68FFC78(&v327, &v327, v172 | (32 * (v290 % 6u)), (uint64_t)&v325, &v325, v170);
    }
    else
    {
      v176 = 0uLL;
      v325 = 0u;
      v326 = 0u;
    }
    v177 = 1;
    v178 = 1 << (v299 >> 2);
    if (!v175)
      v178 = 0;
    v344 = v178;
    result = off_1EF13A490(v324, &v325, v176);
    if (v327)
    {
      v177 = 0;
      v377[0] = v327;
      v349.i32[1] = v327 * v327;
      LODWORD(v375[0]) = 0;
      v179 = 1;
    }
    else
    {
      v179 = 0;
    }
    v19 = v304;
    *((_QWORD *)&v180 + 1) = *((_QWORD *)&v303 + 1);
    v181 = v328;
    if (v328)
    {
      v377[v179] = v328;
      v349.i32[v179 + 1] = v181 * v181;
      *((_DWORD *)v375 + v179++) = v177;
      v181 = v177;
      v177 = -1;
    }
    v182 = v329;
    v183 = v177 + 1;
    if (v329)
    {
      v377[v179] = v329;
      v349.i32[v179 + 1] = v182 * v182;
      *((_DWORD *)v375 + v179) = v183;
      v181 += v183;
      ++v179;
      v183 = -1;
    }
    v184 = v330;
    v185 = v183 + 1;
    if (v330)
    {
      v377[v179] = v330;
      v349.i32[v179 + 1] = v184 * v184;
      *((_DWORD *)v375 + v179) = v185;
      v181 += v185;
      ++v179;
      v185 = -1;
    }
    v186 = v331;
    v187 = v185 + 1;
    if (v331)
    {
      v377[v179] = v331;
      v349.i32[v179 + 1] = v186 * v186;
      *((_DWORD *)v375 + v179) = v187;
      v181 += v187;
      ++v179;
      v187 = -1;
    }
    v188 = v332;
    v189 = v187 + 1;
    if (v332)
    {
      v377[v179] = v332;
      v349.i32[v179 + 1] = v188 * v188;
      *((_DWORD *)v375 + v179) = v189;
      v181 += v189;
      ++v179;
      v189 = -1;
    }
    v190 = v333;
    v191 = v189 + 1;
    if (v333)
    {
      v377[v179] = v333;
      v349.i32[v179 + 1] = v190 * v190;
      *((_DWORD *)v375 + v179) = v191;
      v181 += v191;
      ++v179;
      v191 = -1;
    }
    v192 = v334;
    v193 = v191 + 1;
    if (v334)
    {
      v377[v179] = v334;
      v349.i32[v179 + 1] = v192 * v192;
      *((_DWORD *)v375 + v179) = v193;
      v181 += v193;
      ++v179;
      v193 = -1;
    }
    v194 = v335;
    v195 = v193 + 1;
    if (v335)
    {
      v377[v179] = v335;
      v349.i32[v179 + 1] = v194 * v194;
      *((_DWORD *)v375 + v179) = v195;
      v181 += v195;
      ++v179;
      v195 = -1;
    }
    v196 = v336;
    v197 = v195 + 1;
    if (v336)
    {
      v377[v179] = v336;
      v349.i32[v179 + 1] = v196 * v196;
      *((_DWORD *)v375 + v179) = v197;
      v181 += v197;
      ++v179;
      v197 = -1;
    }
    v198 = v337;
    v199 = v197 + 1;
    if (v337)
    {
      v377[v179] = v337;
      v349.i32[v179 + 1] = v198 * v198;
      *((_DWORD *)v375 + v179) = v199;
      v181 += v199;
      ++v179;
      v199 = -1;
    }
    v200 = v338;
    v201 = v199 + 1;
    if (v338)
    {
      v377[v179] = v338;
      v349.i32[v179 + 1] = v200 * v200;
      *((_DWORD *)v375 + v179) = v201;
      v181 += v201;
      ++v179;
      v201 = -1;
    }
    v202 = v339;
    v203 = v201 + 1;
    if (v339)
    {
      v377[v179] = v339;
      v349.i32[v179 + 1] = v202 * v202;
      *((_DWORD *)v375 + v179) = v203;
      v181 += v203;
      ++v179;
      v203 = -1;
    }
    v204 = v340;
    v205 = v203 + 1;
    if (v340)
    {
      v377[v179] = v340;
      v349.i32[v179 + 1] = v204 * v204;
      *((_DWORD *)v375 + v179) = v205;
      v181 += v205;
      ++v179;
      v205 = -1;
    }
    v206 = v341;
    v207 = v205 + 1;
    if (v341)
    {
      v377[v179] = v341;
      v349.i32[v179 + 1] = v206 * v206;
      *((_DWORD *)v375 + v179) = v207;
      v181 += v207;
      ++v179;
      v207 = -1;
    }
    v208 = v342;
    if (v342)
    {
      v209 = v207 + 1;
      v377[v179] = v342;
      v349.i32[v179 + 1] = v208 * v208;
      *((_DWORD *)v375 + v179) = v209;
      v181 += v209;
      ++v179;
    }
    else if (!v179)
    {
      v213 = 1;
LABEL_336:
      v229 = v310;
      goto LABEL_337;
    }
    v210 = 0;
    v349.i32[0] = 0;
    v211 = v179 - 1;
    v212 = &v349.i32[v179];
    if (*v212 == 1)
    {
      if (*(v212 - 1) == 1)
      {
        if (*(v212 - 2) == 1)
          v210 = 3;
        else
          v210 = 2;
      }
      else
      {
        v210 = 1;
      }
    }
    v213 = byte_1B692D8CC[32 * v210 + v179];
    v214 = v179 + ~v210;
    if (v214 >= 0)
    {
      v215 = 0;
      v217 = v179 > 0xA && v210 != 3;
      v218 = v179 - v210;
      v219 = &v349.i8[4 * v214 + 4];
      v220 = &v377[v214];
      do
      {
        v221 = v220[v215];
        if (v221 <= 0)
          v222 = ~(2 * v221);
        else
          v222 = 2 * v221 - 2;
        if (v215 * 4)
          v223 = 1;
        else
          v223 = v210 == 3;
        if (!v223)
          v222 -= 2;
        if (v222 >> v217 <= 14)
          v224 = v217 + (v222 >> v217) + 1;
        else
          v224 = 28;
        if (v222 >= 30)
          v225 = 28;
        else
          v225 = 19;
        if (v222 < 14)
          v226 = v222 + 1;
        else
          v226 = v225;
        if (v217)
          v226 = v224;
        else
          v217 = 1;
        v213 += v226;
        if (v217 >= 5)
          v227 = 5;
        else
          v227 = v217;
        if (*(_DWORD *)&v219[v215 * 4] > dword_1B692D94C[v217])
          v217 = v227 + 1;
        --v215;
        v228 = __OFSUB__(v218--, 1);
      }
      while (!((v218 < 0) ^ v228 | (v218 == 0)));
    }
    if ((int)v179 > 15)
      goto LABEL_336;
    v213 += byte_1B692D964[16 * v179 + v181];
    v229 = v310;
    if (v181 && v179 != 1)
    {
      do
      {
        v230 = *((int *)v375 + v211);
        v213 += byte_1B692DA64[16 * v181 + v230];
        v181 -= v230;
        if (v181)
          v231 = v211 == 1;
        else
          v231 = 1;
        --v211;
      }
      while (!v231);
    }
LABEL_337:
    v120 = v229 + v301;
    v232 = v213 + 4;
    if (v171 == v293)
      v232 = v213 + 1;
    v347[6] = v232;
    v347[7] = result;
    v348 = result + ((v232 * (v155 + 0.5)) >> 16);
    v233 = (int32x2_t *)&v347[6 * (v348 < 0xF423F)];
    v234 = &v320[128 * (unint64_t)(v348 < 0xF423F)];
    v146 = v233[1].i32[0] + v297;
    *(int32x2_t *)&v180 = vadd_s32(*v233, *(int32x2_t *)&v303);
    *(_BYTE *)(*(_QWORD *)(v305 + 176) + v299 + 208) = *((_DWORD *)v234 + 28);
    v235 = byte_1B693C147[(int)v299] + 16 * byte_1B693C157[(int)v299];
    v236 = (_DWORD *)((char *)v273 + 2 * v235);
    *v236 = *((_DWORD *)v234 + 4);
    v236[1] = *((_DWORD *)v234 + 5);
    v236[8] = *((_DWORD *)v234 + 6);
    v236[9] = *((_DWORD *)v234 + 7);
    v236[16] = *((_DWORD *)v234 + 8);
    v236[17] = *((_DWORD *)v234 + 9);
    v236[24] = *((_DWORD *)v234 + 10);
    v236[25] = *((_DWORD *)v234 + 11);
    v237 = (_DWORD *)((char *)v270 + v235);
    *v237 = *(_DWORD *)v234;
    v237[4] = *((_DWORD *)v234 + 1);
    v237[8] = *((_DWORD *)v234 + 2);
    v237[12] = *((_DWORD *)v234 + 3);
    v238 = (_DWORD *)((char *)v268 + 2 * v235);
    *v238 = *((_DWORD *)v234 + 12);
    v238[1] = *((_DWORD *)v234 + 13);
    v238[8] = *((_DWORD *)v234 + 14);
    v238[9] = *((_DWORD *)v234 + 15);
    v238[16] = *((_DWORD *)v234 + 16);
    v238[17] = *((_DWORD *)v234 + 17);
    v238[24] = *((_DWORD *)v234 + 18);
    v238[25] = *((_DWORD *)v234 + 19);
    v239 = &v266[v295];
    v240 = *((_OWORD *)v234 + 6);
    *v239 = *((_OWORD *)v234 + 5);
    v239[1] = v240;
    *((_BYTE *)v283 + (int)v299) = *((_DWORD *)v234 + 29);
    *v287 = v180;
    *((_DWORD *)v287 + 2) = v146;
    v287[2] = v137;
    if (v120 > v285)
      break;
    v303 = v180;
    result = off_1EF13A4A0(v313, 32);
    v145 = v299 + 1;
    if (v299 == 15)
      goto LABEL_343;
  }
  v120 = 0x40000000;
  *((_DWORD *)v287 + 2) = 0x40000000;
LABEL_343:
  v15 = v306;
  if (v304[3557] == 2)
  {
    sub_1B68A66A0(*v252, v17, v305, *(_DWORD *)(v289 + 14184), v306, &v314);
    v252[294] = v314;
    v253[338] = v17 + 928 * *v304 + 10576;
    result = sub_1B68A4454(v254, v305, v289, (uint64_t)v320);
    v15 = v306;
    v120 = v321;
  }
  v241 = DWORD2(v315);
  v242 = DWORD2(v315) > v120;
  if (DWORD2(v315) >= v120)
    v241 = v120;
  DWORD2(v315) = v241;
  v32 = v256;
  v12 = v258;
  if (v242)
    v32 = v254;
  v13 = v261;
LABEL_28:
  *v12 = v32;
  *(_OWORD *)v13 = v315;
  *(_QWORD *)(v13 + 16) = v316;
  if (v19[3557] == 1)
  {
    v34 = v13;
    *(_QWORD *)(v17 + 136) = v32;
    sub_1B68A66A0(*(char *)(v32 + 59), v17, v16, *(_DWORD *)(v289 + 14184), v15, &v314);
    v35 = v32;
    *(_BYTE *)(v32 + 353) = v314;
    *(_QWORD *)(v32 + 29248) = v17 + 928 * *v19 + 10576;
    if (*(_BYTE *)(v32 + 6))
    {
      v36 = sub_1B6901C8C(v32 + 27408, ((32 * (*(_BYTE *)(v32 + 59) % 6u)) | (*(_BYTE *)(v32 + 59) / 6u) & 0x1F), v32 + 27920, (__int16 *)(v32 + 28432), (__int16 *)(v32 + 28464), *(unsigned __int8 *)(v16 + 29));
      v35 = v32;
      *(_BYTE *)(v32 + 27120) = v36;
    }
    return sub_1B68A4454(v35, v16, v289, v34);
  }
  return result;
}

uint64_t sub_1B68A66A0(int a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, int a5, int *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  int v23;
  signed int v24;
  int v25;
  signed int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v29;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v29 = (unsigned __int8 *)(a2 + 10560);
  v9 = *(_QWORD *)(a3 + 128);
  v8 = *(_QWORD *)(a3 + 136);
  v10 = *(_QWORD *)(a3 + 152);
  v11 = v9 != 0;
  v12 = v8 != 0;
  v13 = v10 != 0;
  if (!*(_BYTE *)(a2 + 12432))
    goto LABEL_21;
  if (v9)
  {
    if (*(_BYTE *)(v9 + 224) == 34)
    {
      if (*(_BYTE *)(v9 + 208) == 34)
        v11 = 0;
      if (!v8)
      {
LABEL_15:
        v12 = 0;
        if (v10)
          goto LABEL_16;
        goto LABEL_19;
      }
    }
    else
    {
      v11 = 1;
      if (!v8)
        goto LABEL_15;
    }
  }
  else
  {
    v11 = 0;
    if (!v8)
      goto LABEL_15;
  }
  if (*(_BYTE *)(v8 + 224) == 34)
  {
    if (*(_BYTE *)(v8 + 208) == 34)
      v12 = 0;
    if (v10)
      goto LABEL_16;
  }
  else
  {
    v12 = 1;
    if (v10)
    {
LABEL_16:
      v13 = *(_BYTE *)(v10 + 224) != 34 || *(unsigned __int8 *)(v10 + 208) != 34;
      goto LABEL_21;
    }
  }
LABEL_19:
  v13 = 0;
LABEL_21:
  v14 = *(_QWORD *)(a3 + 216);
  v15 = *(_DWORD *)(a3 + 4);
  v16 = *(_QWORD *)(v14 + 136) + (16 * *(_DWORD *)a3);
  v17 = *(unsigned int *)(v14 + 248);
  v18 = v16 + (8 * v15 * v17);
  if (v13)
    v19 = 8;
  else
    v19 = 0;
  v20 = v19 | (2 * v12) | v11;
  off_1EF13A548(v16 + (8 * v15 * v17), v17, v34, v20);
  v21 = off_1EF13A418(v18, v17, v34, 16) + a5;
  if (v21 >= 0x40000000)
    v22 = 0x40000000;
  else
    v22 = v21;
  if (!v11)
  {
    v23 = a5;
    v25 = 0;
    if (!v12)
      goto LABEL_33;
    goto LABEL_31;
  }
  off_1EF13A550(v18, v17, v34, v20);
  v23 = a5;
  v24 = 3 * a5 + off_1EF13A418(v18, v17, v34, 16);
  v25 = v24 < v22;
  if (v24 < v22)
    v22 = v24;
  if (v12)
  {
LABEL_31:
    off_1EF13A558(v18, v17, v34, v20);
    v26 = 3 * v23 + off_1EF13A418(v18, v17, v34, 16);
    if (v26 < v22)
    {
      v22 = v26;
      v25 = 2;
    }
  }
LABEL_33:
  if (v12 && v13 && v11)
  {
    off_1EF13A560(v18, v17, v34, v20);
    if ((int)(5 * v23 + off_1EF13A418(v18, v17, v34, 16)) < v22)
      v25 = 3;
  }
  v29[18] = v25;
  *v29 = 0;
  *a6 = v25;
  v27 = (unsigned __int8 *)(a2 + 928 * *v29 + 10576);
  *v27 = a4;
  v27[1] = byte_1B6932758[*(char *)(*(_QWORD *)(a3 + 40) + 56) + 12 + (uint64_t)a1];
  return sub_1B6901168(v27, *(unsigned __int8 *)(a3 + 29));
}

void sub_1B68A69C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint64_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int16x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int16x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  BOOL v68;
  char v69;
  _BOOL4 v71;
  unint64_t v72;
  int v73;
  _BOOL4 v74;
  uint64_t v75;
  int v76;
  char v77;
  int v78;
  char v79;
  char v80;
  int v81;
  int v82;
  int v83;
  int v84;
  double v85;
  int v86;
  int v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  __int128 v95;
  double v96;
  char v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  int v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  char v120;
  int v121;
  int v122;
  int v123;
  int v124;
  unsigned __int16 *v125;
  unsigned __int16 *v126;
  unsigned __int16 *v127;
  unsigned __int16 *v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  BOOL v133;
  _BOOL4 v135;
  int v136;
  _BOOL4 v137;
  uint64_t v138;
  int v139;
  int *v140;
  uint64_t v141;
  int v142;
  int v144;
  unsigned int v145;
  int v146;
  BOOL v147;
  unsigned int v148;
  int v149;
  int v150;
  _QWORD *v151;
  uint64_t v152;
  int v153;
  __int128 v154;
  __int128 v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int *v165;
  uint64_t v166;
  int v167;
  int v168;
  _DWORD *v169;
  _DWORD *v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  int32x2_t *v177;
  int32x2_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  unsigned int v192;
  _BOOL4 v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  int v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  __n128 v208;
  uint64_t v209;
  uint64_t v210;
  _DWORD *v211;
  _DWORD *v212;
  uint64_t v213;
  int v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  uint64_t v220;
  uint64_t v221;
  _DWORD *v222;
  _DWORD *v223;
  int v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  unsigned __int8 *v228;
  _BYTE *v229;
  __int128 *v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  uint64_t i;
  int v235;
  uint64_t v236;
  int v237;
  __int128 *v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t *v250;
  uint64_t v251;
  int v252;
  unsigned int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  BOOL v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  _DWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _BOOL4 v280;
  _BOOL4 v281;
  _BOOL4 v282;
  _BOOL4 v283;
  unsigned int *v284;
  _BOOL8 v285;
  uint64_t v286;
  unsigned int v287;
  int v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  int v298;
  uint64_t v299;
  int v300;
  int v301;
  int v302;
  _BOOL4 v303;
  int *v304;
  unsigned int v305;
  int v306;
  uint64_t v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  char v313;
  uint64_t v314;
  unsigned int v315;
  int v316;
  _BYTE *v317;
  uint64_t v318;
  int v319;
  int v320;
  unsigned int v321;
  int v322;
  _BYTE *v323;
  uint64_t v324;
  int v325;
  int v326;
  int v327;
  unsigned int v328;
  int v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  unsigned int v333;
  _BYTE *v334;
  uint64_t v335;
  int v336;
  int v337;
  unsigned int v338;
  int v339;
  _BYTE *v340;
  uint64_t v341;
  int v342;
  int v343;
  int *v344;
  int v345;
  unint64_t v346;
  uint64_t v347;
  int v348;
  BOOL v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  char v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  BOOL v367;
  int v368;
  uint64_t *v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  int v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  BOOL v379;
  BOOL v380;
  uint64_t v381;
  char v382;
  uint64_t v383;
  int v384;
  BOOL v385;
  int32x2_t *v386;
  int32x2_t v387;
  int v388;
  uint64_t v389;
  char *v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  BOOL v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  int v400;
  unsigned int v401;
  int v402;
  int v403;
  unint64_t v404;
  int32x2_t v405;
  uint64_t v406;
  BOOL v407;
  BOOL v408;
  uint64_t v409;
  uint64_t v410;
  unsigned __int32 v411;
  unsigned int v412;
  int v413;
  int v414;
  unsigned int v415;
  int v416;
  char *v417;
  int v418;
  unsigned int v419;
  int v420;
  unsigned int v421;
  int32x2_t *v422;
  _QWORD *v423;
  uint64_t v424;
  int v425;
  uint64_t v426;
  unsigned int v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  BOOL v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  char *v437;
  uint64_t v438;
  unint64_t v439;
  _DWORD *v440;
  int32x2_t *v441;
  unsigned int *v442;
  int32x2_t v443;
  uint64_t v444;
  BOOL v445;
  __int32 v447;
  int v448;
  unsigned int v449;
  int v450;
  int v451;
  int v452;
  __int32 v453;
  unsigned int v454;
  _BOOL4 v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  unsigned __int32 v461;
  int v462;
  unsigned int v463;
  int v464;
  unsigned int v465;
  __int32 v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unsigned int v470;
  unsigned int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t j;
  uint64_t v475;
  unsigned int v476;
  uint64_t v477;
  _DWORD *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  char *v482;
  unint64_t v483;
  _DWORD *v484;
  unsigned int v485;
  int v486;
  uint64_t v487;
  int32x2_t v488;
  int v489;
  __int32 v490;
  unsigned int v491;
  int v492;
  unsigned __int32 v493;
  unsigned int v494;
  unsigned int v495;
  unsigned int v496;
  char *v497;
  __int32 v498;
  __int32 v499;
  int32x2_t *v500;
  int v501;
  int v502;
  uint64_t v503;
  int v504;
  char *v505;
  unint64_t v506;
  unsigned int *v507;
  int v508;
  int v509;
  int32x2_t v510;
  int v511;
  uint64_t v512;
  __int32 v514;
  __int32 v515;
  unsigned int v516;
  int v517;
  unsigned int v518;
  unsigned int v519;
  unsigned int v520;
  char v521;
  char v522;
  uint64_t v523;
  int v525;
  unsigned int v526;
  unsigned __int32 v527;
  unsigned int v528;
  _DWORD *v529;
  uint64_t v530;
  _BYTE *v531;
  char *v532;
  unsigned int v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  __int32 v537;
  int v538;
  char *v539;
  int v540;
  uint64_t v541;
  int v542;
  __int32 v543;
  unsigned __int32 v544;
  int v545;
  unsigned int v546;
  uint64_t v547;
  _BYTE *v548;
  unsigned __int32 v549;
  uint64_t v550;
  char *v551;
  int v552;
  _BYTE *v553;
  int32x2_t *v554;
  int32x2_t v555;
  __int32 v556;
  uint64_t v557;
  int32x2_t *v558;
  int v559;
  uint64_t v560;
  uint64_t v561;
  int v562;
  uint64_t v563;
  unint64_t *v564;
  unsigned int v565;
  unsigned int v566;
  int32x4_t v567;
  int32x4_t v568;
  unsigned __int32 v569;
  _BYTE *v570;
  int v571;
  unsigned __int32 v572;
  unsigned __int32 v573;
  uint64_t v574;
  int v575;
  _BYTE *v576;
  uint64_t v577;
  uint64_t v578;
  unsigned int v579;
  uint64_t v580;
  __int16 v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  uint64_t v589;
  int v590;
  __int16 *v591;
  int v592;
  int v593;
  int v594;
  uint64_t v595;
  __int16 *v596;
  int v597;
  int v598;
  int v600;
  unsigned int v601;
  unsigned int v602;
  unsigned __int16 v603;
  uint64_t v604;
  int v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  char v610;
  uint64_t v611;
  uint64_t v612;
  _QWORD *v613;
  unsigned __int8 *v614;
  unsigned __int8 *v615;
  uint64_t v616;
  int v617;
  int v618;
  unsigned int v619;
  uint64_t k;
  uint64_t v621;
  _BYTE *v622;
  _BYTE *v623;
  uint64_t v624;
  unint64_t v625;
  int v626;
  int v627;
  float v628;
  int v629;
  int v630;
  double v631;
  double v632;
  double v633;
  double v634;
  double v635;
  double v636;
  int v637;
  uint64_t v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  int v643;
  uint64_t v644;
  __int128 v645;
  unsigned int v646;
  unsigned int v647;
  unsigned int v648;
  uint64_t v649;
  uint64_t v650;
  char v651;
  uint64_t v652;
  __int16 *v653;
  __int16 *v654;
  int v655;
  int v656;
  unsigned int v657;
  int v658;
  int v659;
  int v660;
  BOOL v661;
  _BOOL8 v662;
  unint64_t v663;
  uint64_t v664;
  int v665;
  __int128 v666;
  BOOL v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  unint64_t v671;
  char v673;
  uint64_t v674;
  uint64_t v675;
  char v676;
  int v677;
  uint64_t v678;
  int v679;
  int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  _DWORD *v685;
  int v686;
  _QWORD *v687;
  unsigned int v688;
  uint64_t v689;
  unsigned int v690;
  unsigned int v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  BOOL v695;
  char v697;
  uint64_t v698;
  BOOL v699;
  int v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  int v704;
  uint64_t v705;
  uint64_t (*v706)(uint64_t, uint64_t);
  int v707;
  int v708;
  int v709;
  int v710;
  BOOL v711;
  unsigned int v713;
  _BYTE *v714;
  uint64_t v715;
  unsigned int v716;
  int v717;
  uint64_t v718;
  __int128 v719;
  __int128 v720;
  double v721;
  double v722;
  double v723;
  double v724;
  double v725;
  int v726;
  _OWORD *v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  __int128 v732;
  __int128 v733;
  __int128 v734;
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  uint64_t v746;
  _QWORD *v747;
  uint64_t v748;
  uint64_t v749;
  _BYTE *v750;
  uint64_t v751;
  int v752;
  __int16 v753;
  unsigned int v754;
  unsigned int v755;
  char v756;
  unsigned int v757;
  uint64_t v758;
  int v759;
  int v760;
  int v761;
  int v762;
  int v763;
  char v764;
  uint64_t v765;
  unsigned int v766;
  uint64_t v767;
  unsigned int v768;
  int v769;
  _QWORD *v770;
  int *v771;
  char v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  unsigned int v776;
  uint64_t v777;
  int v778;
  int v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  int v784;
  int v785;
  uint64_t v786;
  uint64_t v787;
  _BYTE *v788;
  unsigned __int8 *v789;
  uint64_t v790;
  int v791;
  size_t v794;
  int v795;
  uint64_t v796;
  unsigned int v797;
  unsigned int v798;
  uint64_t v799;
  uint64_t v800;
  int v801;
  unsigned int v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  int v807;
  uint64_t v808;
  int v809;
  int v810;
  int32x2_t *v811;
  int v812;
  int v813;
  int v814;
  BOOL v815;
  int v816;
  uint64_t v817;
  int v818;
  int v819;
  int32x2_t *v820;
  unsigned int v821;
  int v822;
  uint64_t v823;
  int v824;
  unsigned int *v825;
  unsigned int *v826;
  int v827;
  unsigned int v828;
  __int128 v829;
  uint64_t v830;
  __int128 v831;
  uint64_t v832;
  uint64_t v833;
  int v834;
  int v835;
  uint64_t v836;
  int32x2_t __dst;
  unsigned int v838;
  uint64_t v839;
  int v840;
  uint64_t v841;
  int v842;
  unint64_t v843;
  int32x2_t v844;
  uint64_t v845;
  int v846;
  _BYTE __b[128];
  uint64_t v848;
  _BYTE v849[128];
  _BYTE v850[142];
  __int128 v851;
  __int128 v852;
  __int128 v853;
  uint64_t v854;
  __int128 v855;
  __int128 v856;
  uint64_t v857;

  v6 = a4;
  v7 = a1;
  v857 = *MEMORY[0x1E0C80C00];
  v789 = (unsigned __int8 *)(a3 + 10560);
  v9 = (_BYTE *)(a2 + 14164);
  v10 = a1 + 205840;
  v11 = (_DWORD *)(a1 + 57096);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 136) + 577) == 1)
  {
    v766 = 0;
    v759 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(a4 + 216);
  }
  else
  {
    *(_OWORD *)__b = xmmword_1B692D768;
    *(_OWORD *)&__b[12] = *(__int128 *)((char *)&xmmword_1B692D768 + 12);
    v13 = *(_QWORD *)(a4 + 216);
    v14 = *(_DWORD *)(v13 + 4800);
    v15 = *(_QWORD *)(v13 + 4920);
    if ((byte_1EF13A055 & 1) == 0)
    {
      v16 = 0;
      byte_1EF13A055 = 1;
      v17 = (int32x4_t)xmmword_1B6917C70;
      v18 = (int32x4_t)xmmword_1B6917C80;
      v19 = (int32x4_t)xmmword_1B6917C60;
      v20.i64[0] = 0x4040404040404040;
      v20.i64[1] = 0x4040404040404040;
      v21.i64[0] = 0x1000000010;
      v21.i64[1] = 0x1000000010;
      v22 = (int32x4_t)xmmword_1B6917630;
      do
      {
        *(int16x4_t *)v23.i8 = vshl_n_s16(vmovn_s32(v18), 5uLL);
        v23.u64[1] = (unint64_t)vshl_n_s16(vmovn_s32(v17), 5uLL);
        *(int16x4_t *)v24.i8 = vshl_n_s16(vmovn_s32(v22), 5uLL);
        v24.u64[1] = (unint64_t)vshl_n_s16(vmovn_s32(v19), 5uLL);
        *(int8x16_t *)&xmmword_1EF139E55[v16] = vsubq_s8(v20, vrshrn_high_n_s16(vrshrn_n_s16(v24, 7uLL), v23, 7uLL));
        v16 += 16;
        v22 = vaddq_s32(v22, v21);
        v19 = vaddq_s32(v19, v21);
        v18 = vaddq_s32(v18, v21);
        v17 = vaddq_s32(v17, v21);
      }
      while (v16 != 128);
      v25 = 0;
      v26 = (int32x4_t)xmmword_1B6917C90;
      v27 = (int32x4_t)xmmword_1B6917CA0;
      v28 = (int32x4_t)xmmword_1B6917CB0;
      v29 = (int32x4_t)xmmword_1B6917CC0;
      v30.i64[0] = 0x2020202020202020;
      v30.i64[1] = 0x2020202020202020;
      v31.i64[0] = 0x1000000010;
      v31.i64[1] = 0x1000000010;
      v32 = vdup_n_s16(0x7840u);
      do
      {
        *(uint16x4_t *)v33.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v29), 4uLL), v32), 7uLL);
        v33.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v28), 4uLL), v32), 7uLL);
        *(uint16x4_t *)v34.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v27), 4uLL), v32), 7uLL);
        v34.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v26), 4uLL), v32), 7uLL);
        *(int8x16_t *)&xmmword_1EF139E55[v25 + 128] = vsubq_s8(v30, vuzp1q_s8(v33, v34));
        v25 += 16;
        v29 = vaddq_s32(v29, v31);
        v28 = vaddq_s32(v28, v31);
        v27 = vaddq_s32(v27, v31);
        v26 = vaddq_s32(v26, v31);
      }
      while (v25 != 128);
      v35 = 0;
      v36 = (int32x4_t)xmmword_1B6917CD0;
      v37 = (int32x4_t)xmmword_1B6917CE0;
      v38 = (int32x4_t)xmmword_1B6917CF0;
      v39 = (int32x4_t)xmmword_1B6917D00;
      v40.i64[0] = 0x1010101010101010;
      v40.i64[1] = 0x1010101010101010;
      v41.i64[0] = 0x1000000010;
      v41.i64[1] = 0x1000000010;
      v42 = vdup_n_s16(0xF080u);
      do
      {
        *(uint16x4_t *)v43.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v39), 4uLL), v42), 8uLL);
        v43.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v38), 4uLL), v42), 8uLL);
        *(uint16x4_t *)v44.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v37), 4uLL), v42), 8uLL);
        v44.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vshl_n_s16(vmovn_s32(v36), 4uLL), v42), 8uLL);
        *(int8x16_t *)&xmmword_1EF139E55[v35 + 256] = vsubq_s8(v40, vuzp1q_s8(v43, v44));
        v35 += 16;
        v39 = vaddq_s32(v39, v41);
        v38 = vaddq_s32(v38, v41);
        v37 = vaddq_s32(v37, v41);
        v36 = vaddq_s32(v36, v41);
      }
      while (v35 != 256);
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = *(int *)(a4 + 16);
    v49 = *(_DWORD *)(a4 + 16);
    v50 = v48 - 2;
    v51 = v48 - 1;
    v52 = v48 - v14;
    v53 = v48 / v14;
    if (((int)v48 - 2) / v14 != v48 / v14)
      v50 = -1;
    if (v51 / v14 != v53)
      v51 = -1;
    *(_DWORD *)__b = v50;
    *(_DWORD *)&__b[4] = v51;
    v54 = v53 - 1;
    if (((int)v48 + ~v14) / v14 == v53 - 1)
      v55 = v48 + ~v14;
    else
      v55 = -1;
    if (v52 / v14 == v54)
      v56 = v48 - v14;
    else
      v56 = -1;
    *(_DWORD *)&__b[8] = v55;
    *(_DWORD *)&__b[12] = v56;
    if ((v52 + 1) / v14 == v54)
      v57 = v52 + 1;
    else
      v57 = -1;
    if (((int)v48 - 2 * v14) / v14 == v53 - 2)
      v58 = v48 - 2 * v14;
    else
      v58 = -1;
    *(_DWORD *)&__b[16] = v57;
    *(_DWORD *)&__b[20] = v58;
    v59 = *(_QWORD *)(v13 + 1472);
    do
    {
      v60 = *(_DWORD *)&__b[v45];
      if (v60 <= 0)
        v60 = v48;
      v47 += vaddvq_s32(*(int32x4_t *)(v59 + 16 * v60)) / 4;
      v46 += *(unsigned __int16 *)(v15 + 216 * v60 + 56);
      v45 += 4;
    }
    while (v45 != 20);
    v61 = vaddvq_s32(*(int32x4_t *)(v59 + 16 * v48)) / 4;
    v62 = v46 + *(unsigned __int16 *)(v15 + 216 * v49 + 56);
    v766 = v62 / 6;
    if (v62 > 0xBFF)
      v63 = 0;
    else
      v63 = xmmword_1EF139E55[v62 / 6];
    v64 = v61 + v47;
    v65 = (v61 + v47) / 6;
    v759 = v65;
    if ((v64 - 6) >= 0xD2)
      v66 = 0;
    else
      v66 = v65;
    v12 = v63 + v66;
  }
  v67 = *(unsigned __int8 *)(a2 + 14184);
  if (*(_BYTE *)(a2 + 14184))
    v68 = v67 == 5;
  else
    v68 = 1;
  v69 = v68;
  v795 = *(unsigned __int8 *)(a2 + 14184);
  v71 = v67 == 1 || v67 == 6;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(*(_QWORD *)v10 + 5016);
  *(_DWORD *)(v6 + 84) = v11[1];
  v790 = v10;
  *(_DWORD *)(v6 + 80) = *(_DWORD *)(*(_QWORD *)v10 + 1288);
  *(_QWORD *)(v6 + 96) = v7 + 280;
  *(_QWORD *)(v6 + 104) = *(_QWORD *)(v7 + 1016);
  v775 = a3 + 12640;
  v758 = a3 + 12896;
  off_1EF13A478(a3 + 12640, *(_QWORD *)(v13 + 128)+ (16 * *(_DWORD *)v6)+ (16 * *(_DWORD *)(v6 + 4) * *(_DWORD *)(v13 + 232)));
  *(_QWORD *)(*(_QWORD *)(a3 + 13040) + 16) = *(_QWORD *)(a2 + 14144);
  *(_DWORD *)(*(_QWORD *)(a3 + 13040) + 32) = *(_DWORD *)(a2 + 14160);
  *(_BYTE *)(*(_QWORD *)(a3 + 13040) + 36) = *v9;
  if (*(_BYTE *)(v6 + 188))
  {
    *(_QWORD *)(a3 + 14064) = *(_QWORD *)(v6 + 128);
    *(_QWORD *)(a3 + 14072) = *(_QWORD *)(v6 + 136);
    *(_QWORD *)(a3 + 14080) = *(_QWORD *)(v6 + 176);
    if (v789[3557])
      memcpy((void *)(a3 + 13088), *(const void **)(v6 + 192), 0x3D0uLL);
    v73 = *(_DWORD *)(*(_QWORD *)(v6 + 192) + 40)
        + *(_DWORD *)(*(_QWORD *)(v6 + 192) + 24)
        + 8 * (**(_DWORD **)(v6 + 192) - *(_DWORD *)(*(_QWORD *)(v6 + 192) + 8));
    *(_DWORD *)(a3 + 14088) = v73 & ~(v73 >> 31);
  }
  *(float *)&v72 = a5 + 0.5;
  *(_QWORD *)(a3 + 13032) = a2 + 14128;
  v833 = 0;
  v832 = 0;
  v831 = xmmword_1B692D750;
  v830 = 0;
  v829 = xmmword_1B692D750;
  v74 = 1;
  if (v795 == 2)
  {
    v75 = v790;
  }
  else
  {
    v75 = v790;
    if (v795 != 7)
      v74 = *(_BYTE *)(a3 + 26) != 0;
  }
  v76 = *(unsigned __int8 *)(v75 + 1842);
  v77 = v69 ^ 1;
  if (!*(_BYTE *)(v75 + 1842))
    v77 = 1;
  if ((v77 & 1) == 0 && !*(_BYTE *)(*(_QWORD *)(v6 + 216) + 4992))
  {
    if (v76 == 3)
    {
      v82 = *(_DWORD *)(v6 + 16);
      v136 = *(_DWORD *)(v75 + 1844);
      if (v82 == v136)
      {
        v137 = 1;
        goto LABEL_215;
      }
      v83 = v136 + v11[1] * *v11 / 2;
    }
    else
    {
      if (v76 != 1)
      {
        v138 = *(unsigned int *)(v75 + 1872);
        if ((int)v138 < 1)
        {
          v137 = 0;
        }
        else
        {
          v139 = *(_DWORD *)(v6 + 16);
          v140 = *(int **)(v75 + 1856);
          v141 = v138 - 1;
          do
          {
            v142 = *v140++;
            v137 = v139 == v142;
          }
          while (v139 != v142 && v141-- != 0);
        }
LABEL_215:
        v190 = *(_DWORD *)(v75 + 2168);
        if (v190)
        {
          v191 = 0;
          while (!*(_DWORD *)(v75 + 2164)
               || v190 <= (int)v191
               || v190 > 7
               || !*(_DWORD *)(v7 + 4 * (int)v191 + 208028)
               || *(_DWORD *)(a2 + 14176) != *(unsigned __int16 *)(v7 + 208012 + 2 * v191))
          {
            if (v190 == (_DWORD)++v191)
              goto LABEL_225;
          }
          v137 = 0;
        }
LABEL_225:
        v78 = 0;
        if (v74 || v137)
        {
          v79 = 1;
          v779 = 0;
          goto LABEL_79;
        }
        goto LABEL_64;
      }
      v82 = *(_DWORD *)(v75 + 1844);
      v83 = *(_DWORD *)(v6 + 16);
    }
    v137 = v82 == v83;
    goto LABEL_215;
  }
  if (v74)
  {
    v78 = 0;
    v779 = 0;
    v79 = 1;
LABEL_79:
    v785 = 1;
    goto LABEL_80;
  }
  v78 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 216) + 4992);
LABEL_64:
  if (*(_BYTE *)(a3 + 24))
    v80 = v69;
  else
    v80 = 0;
  if ((v80 & 1) == 0)
  {
    if (*(_BYTE *)(a3 + 25))
      v81 = v71;
    else
      v81 = 0;
    if (v78)
      v81 = 1;
    if (v81 != 1)
    {
      v79 = 0;
      v779 = 1;
      goto LABEL_79;
    }
  }
  v79 = 0;
  v785 = 0;
  v779 = 1;
LABEL_80:
  v788 = (_BYTE *)(a2 + 47882);
  v791 = (int)*(float *)&v72;
  if (*(_DWORD *)(v75 + 2032) && !*(_BYTE *)(v75 + 2247) && *(_DWORD *)(v75 + 2040) > *(_DWORD *)(v75 + 2028))
  {
    a5 = a5 + a5;
    *(float *)&v72 = a5 + 0.5;
    v84 = (int)(float)(a5 + 0.5);
    if (v84 >= 51)
      LOBYTE(v84) = 51;
    LOBYTE(v791) = v84;
  }
  LOWORD(v72) = *(_WORD *)a3;
  v85 = (double)v72;
  v86 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v75 + 4696) + 2 * *(unsigned int *)(v6 + 16));
  v87 = *(unsigned __int8 *)(*(_QWORD *)v75 + 1394);
  v88 = (double)(int)(float)(a5 + -12.0);
  v89 = exp2(v88 / 3.0);
  v90 = sub_1B68F7888(v89);
  v91 = 1.0;
  if (!v87 && v86)
  {
    v92 = sub_1B68F7888(v88 / 6.0);
    v93 = 4.0;
    if (v92 <= 4.0)
      v93 = v92;
    if (v92 >= 2.0)
      v91 = v93;
    else
      v91 = 2.0;
  }
  v771 = (int *)(a2 + 50624);
  v94 = sub_1B68F7888(v90 * 0.680000007 * v91);
  if (v94 <= v85)
    v96 = v94;
  else
    v96 = v85;
  v97 = v791 - *v788;
  if ((v79 & 1) == 0 && v795 != 2 && v795 != 7 && *(_BYTE *)(a3 + 28))
  {
    v785 = 0;
    v78 = 1;
    v779 = 1;
  }
  v99 = *(_DWORD *)v6;
  v98 = *(_DWORD *)(v6 + 4);
  v100 = *(_QWORD *)(v6 + 216);
  v101 = *(_QWORD *)(v100 + 4920);
  v102 = *(_DWORD *)v6 + *(_DWORD *)(v100 + 4800) * v98;
  *(_BYTE *)(v101 + 216 * v102 + 71) = 100;
  v772 = v97;
  if (!v779)
  {
    v111 = 0;
    v773 = 0;
    v112 = 0;
    v784 = 0;
    v757 = 0;
    v760 = 0;
    v113 = v78 != 0;
    v114 = -1;
    v115 = 1;
    goto LABEL_945;
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 14096) + 1844) = *(_QWORD *)(v790 + 2252);
  v103 = *(_QWORD *)(a3 + 120);
  v104 = *(_QWORD *)(a3 + 128);
  v770 = (_QWORD *)(a3 + 120);
  v106 = (unsigned int *)(a3 + 92);
  v105 = *(_DWORD *)(a3 + 92);
  v107 = *(_DWORD *)(a3 + 96);
  if (*(_BYTE *)(a2 + 14184) && *(_BYTE *)(a2 + 14184) != 5)
  {
    if (v107)
    {
      v116 = 0;
      do
      {
        v117 = v104 + v116;
        if (*(_BYTE *)(v104 + v116 + 5) == 2 && *(_BYTE *)(v117 + 6) == 4)
          *(_BYTE *)(v117 + 6) = 3;
        *(_BYTE *)(v117 + 59) = v791;
        *(_BYTE *)(v117 + 58) = v97;
        *(double *)(v117 + 26544) = v96;
        *(_QWORD *)(v117 + 26832) = v104 + 26848 + v116;
        v116 += 30432;
      }
      while (30432 * v107 != v116);
    }
  }
  else if (v105)
  {
    v108 = 0;
    v109 = 30432 * v105;
    do
    {
      v110 = v103 + v108;
      if (*(_BYTE *)(v103 + v108 + 5) == 2 && *(_BYTE *)(v110 + 6) == 4)
        *(_BYTE *)(v110 + 6) = 3;
      *(_BYTE *)(v110 + 59) = v791;
      *(_BYTE *)(v110 + 58) = v97;
      *(double *)(v110 + 26544) = v96;
      *(_QWORD *)(v110 + 26832) = v103 + 26848 + v108;
      v108 += 30432;
    }
    while (v109 != v108);
  }
  *(_QWORD *)(v6 + 88) = a2 + 16920;
  if (*(_WORD *)(a3 + 2) == 1)
    v118 = (v12 * (char)v791 + 128) >> 8;
  else
    v118 = 0;
  v119 = **(_QWORD **)(v6 + 224);
  if (*(_BYTE *)(*(_QWORD *)v790 + 16))
    v120 = v71;
  else
    v120 = 1;
  v121 = *(unsigned __int8 *)(v7 + 1057);
  v122 = 1;
  if ((v120 & 1) == 0 && !v78)
  {
    v123 = v102;
    if (*(_BYTE *)(v7 + 1057) && *(_BYTE *)(v101 + 216 * v102 + 70))
    {
      v78 = 0;
      v118 -= (char)v791 >> 1;
      v122 = 1;
      goto LABEL_137;
    }
    if (*(_BYTE *)(v101 + 216 * v102 + 68))
    {
      v124 = *(_DWORD *)(v119 + 1276);
      if (v124 == *(_DWORD *)(v101 + 216 * v123 + 48)
        || *(unsigned __int8 *)(v101 + 216 * v123 + 66) >= 2u && v124 == *(_DWORD *)(v101 + 216 * v123 + 52))
      {
        v78 = 0;
        if (*(_BYTE *)(v101 + 216 * v123 + 69))
          v118 -= ((char)v791 + 2) >> 2;
      }
      else
      {
        v78 = 0;
        v118 += (char)v791 >> 1;
      }
      v122 = 1;
      if (!*(_BYTE *)(v7 + 1057))
        goto LABEL_150;
      goto LABEL_137;
    }
    v122 = 0;
    v78 = 0;
  }
  if (!*(_BYTE *)(v7 + 1057))
  {
LABEL_150:
    v135 = 0;
    goto LABEL_167;
  }
LABEL_137:
  v125 = (unsigned __int16 *)(v119 + 19112);
  if (v121 == 2)
  {
    v126 = (unsigned __int16 *)(*(_QWORD *)v790 + 19124);
    v127 = (unsigned __int16 *)(*(_QWORD *)v790 + 19126);
    v128 = (unsigned __int16 *)(v119 + 19126);
    v125 = (unsigned __int16 *)(v119 + 19124);
  }
  else
  {
    v127 = (unsigned __int16 *)(*(_QWORD *)v790 + 19114);
    v128 = (unsigned __int16 *)(v119 + 19114);
    v126 = (unsigned __int16 *)(*(_QWORD *)v790 + 19112);
  }
  v129 = *v127;
  v130 = *v126;
  if (v119)
    v131 = *v125 * *v128;
  else
    v131 = v130 * v129;
  v132 = 16 * v99;
  v133 = 16 * v98 >= v129 || v132 >= v130;
  if (!v133 || v131 != v130 * v129)
    goto LABEL_150;
  v135 = *(_BYTE *)(v790 + 2246) == 1 && (v130 + 32 <= v132 || v129 + 32 <= 16 * v98) && v121 == 1;
  v122 = 1;
  v78 = 1;
LABEL_167:
  v776 = 99999;
  v786 = v6;
  if (*(_BYTE *)(v7 + 1627)
    && (v99 < *(unsigned __int8 *)(*(_QWORD *)v790 + 19136)
     || v99 > *(unsigned __int8 *)(*(_QWORD *)v790 + 19137)
     || v98 < *(unsigned __int8 *)(*(_QWORD *)v790 + 19138)
     || v98 > *(unsigned __int8 *)(*(_QWORD *)v790 + 19139)))
  {
    v78 = 1;
  }
  else if (!v122)
  {
    v760 = 0;
    v757 = 0;
    v784 = 0;
    v150 = 0;
    v778 = v78;
LABEL_321:
    v174 = a3;
    goto LABEL_328;
  }
  v836 = 0;
  *(_QWORD *)((char *)&v853 + 4) = 0;
  v854 = 0;
  LODWORD(v853) = 0;
  v144 = *(_DWORD *)(a2 + 14184);
  if (v791 >= 0x33u)
    v145 = 51;
  else
    v145 = v791;
  v146 = *(unsigned __int8 *)(a3 + 9);
  v855 = 0u;
  v856 = 0u;
  v851 = 0u;
  v852 = 0u;
  v835 = 0;
  v147 = v144 == 6 || v144 == 1;
  if (v144 == 6 || v144 == 1)
    v146 = *(unsigned __int8 *)(a3 + 12);
  v148 = byte_1B6933E0A[v145];
  v830 = 0;
  v829 = xmmword_1B692D750;
  v834 = 0;
  v822 = v78;
  v818 = v146;
  if (v146)
  {
    v810 = v118;
    v815 = v147;
    v149 = 1;
    LODWORD(v836) = 1;
    v150 = 0;
    if (!v78 && v144 != 1 && v144 != 6)
    {
      v175 = *(_QWORD *)(a3 + 120);
      sub_1B68F3C54(*(_QWORD *)(a3 + 14096), v6, v7, a3, a2, v175 + 30432 * *(unsigned int *)(a3 + 48) + 29280, v148);
      v176 = (_QWORD *)(v175 + 30432 * *(unsigned int *)(a3 + 84));
      *(_QWORD *)(v6 + 40) = (char *)v176 + 4;
      *(_QWORD *)(v6 + 48) = v176 + 8;
      *(_QWORD *)(v6 + 176) = v176 + 3320;
      *(_QWORD *)(v6 + 56) = v176 + 3554;
      *(_QWORD *)(v6 + 312) = v176[3318];
      *(_QWORD *)(v6 + 2624) = v176 + 3390;
      *(_QWORD *)(v6 + 2632) = v176[3656];
      *(_QWORD *)(v6 + 2560) = v176[3388];
      *(_QWORD *)(v6 + 2568) = v176[3389];
      *(_QWORD *)(v6 + 2544) = v176 + 3708;
      *(_QWORD *)(v6 + 2552) = v176 + 3772;
      *(_QWORD *)(v6 + 2528) = v176 + 3660;
      *(_QWORD *)(v6 + 2536) = v176 + 3692;
      v177 = *(int32x2_t **)(a3 + 14096);
      v178 = v177[232];
      v179 = *(_QWORD *)(*(_QWORD *)&v178 + 72);
      v180 = v177[233].u32[0];
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v178 + 48) + 24) = 0;
      v177[433].i32[0] = 0;
      sub_1B68F431C(v177, 0);
      v181 = v177[433].u32[0];
      v177[446].i32[v181] = 0;
      v177[449].i16[v181 + 2] = 0;
      v177[v181 + 452].i32[0] = 0;
      sub_1B68F477C((uint64_t)v177, 0, 0, 0);
      v177[412].i32[0] = -1;
      v177[412].i16[2] = -1;
      sub_1B68F4A14((uint64_t)v177, 0, 0, 0);
      *(_DWORD *)(v179 + 32 * v180 + 20) = v177[409].i32[0];
      sub_1B68F5100((uint64_t)v177, 0);
      sub_1B68F56D8((uint64_t)v177, 0);
      v177[130].i32[dword_1B69356A8[v177[433].u32[0]]] = v177[412].i32[0];
      v177[196].i16[dword_1B69356A8[v177[433].u32[0]]] = v177[412].i16[2];
      v177[10].i32[dword_1B69356A8[v177[433].u32[0]]] = v177[413].i32[0];
      v182 = v177[433].u32[0];
      v183 = dword_1B69356A8[v182];
      v177[446].i32[v182] += v177[130].i32[v183];
      v177[449].i16[v182 + 2] += v177[196].i16[v183];
      sub_1B68F58D4((uint64_t)v177);
      v184 = *(_QWORD *)(a3 + 14096);
      v185 = *(_DWORD *)(v184 + 1040)
           - (*(unsigned __int16 *)(*(_QWORD *)(v184 + 1816)
                                  + 2 * ((__int16)*(_DWORD *)(v184 + 80) - (__int16)*(_DWORD *)(v184 + 560)))
            + *(unsigned __int16 *)(*(_QWORD *)(v184 + 1816)
                                  + 2 * ((*(int *)(v184 + 80) >> 16) - (*(int *)(v184 + 560) >> 16))));
      v186 = *(_DWORD *)(v184 + 1840);
      if (*(_BYTE *)(*(_QWORD *)(v7 + 136) + 577) == 1)
        v187 = 700;
      else
        v187 = 300;
      v192 = v186 * v187;
      v150 = 1;
      v133 = v185 >= v192;
      v193 = v185 < v192;
      LODWORD(v836) = v193;
      v6 = v786;
      v106 = (unsigned int *)(a3 + 92);
      if (v133)
      {
        v760 = 0;
        v757 = 0;
        v122 = 0;
        goto LABEL_234;
      }
      v149 = v193;
      v78 = v822;
    }
    v151 = (_QWORD *)(a3 + 128);
    if (v144 != 1)
    {
      v151 = (_QWORD *)(a3 + 128);
      if (v144 != 6)
        v151 = (_QWORD *)(a3 + 120);
    }
    v152 = *v151 + 30432 * *(unsigned int *)(a3 + 48);
    *(_QWORD *)(v6 + 40) = v152 + 4;
    *(_QWORD *)(v6 + 48) = v152 + 64;
    *(_QWORD *)(v6 + 176) = v152 + 26560;
    *(_QWORD *)(v6 + 56) = v152 + 28432;
    *(_QWORD *)(v6 + 312) = *(_QWORD *)(v152 + 26544);
    *(_QWORD *)(v6 + 2624) = v152 + 27120;
    *(_QWORD *)(v6 + 2632) = *(_QWORD *)(v152 + 29248);
    *(_QWORD *)(v6 + 2560) = *(_QWORD *)(v152 + 27104);
    *(_QWORD *)(v6 + 2568) = *(_QWORD *)(v152 + 27112);
    *(_QWORD *)(v6 + 2544) = v152 + 29664;
    *(_QWORD *)(v6 + 2552) = v152 + 30176;
    *(_QWORD *)(v6 + 2528) = v152 + 29280;
    *(_QWORD *)(v6 + 2536) = v152 + 29536;
    v153 = *(unsigned __int8 *)(v6 + 188);
    *(_QWORD *)(v152 + 26808) = 0;
    *(_QWORD *)(v152 + 26800) = 0;
    *(_QWORD *)(v152 + 26816) = 0;
    *(_QWORD *)&v154 = 0x2222222222222222;
    *((_QWORD *)&v154 + 1) = 0x2222222222222222;
    *(_OWORD *)(v152 + 26768) = v154;
    *(_OWORD *)(v152 + 26784) = v154;
    if (v153)
    {
      *(_BYTE *)(v152 + 26736) = 0;
      *(_DWORD *)(v152 + 26737) = -1;
      *(_BYTE *)(v152 + 26741) = -1;
      *(_BYTE *)(v152 + 26759) = 0;
      *(_QWORD *)&v155 = 0x2020202020202020;
      *((_QWORD *)&v155 + 1) = 0x2020202020202020;
      *(_OWORD *)(v152 + 26688) = v155;
      *(_OWORD *)(v152 + 26704) = v155;
      *(_OWORD *)(v152 + 26560) = 0u;
      *(_OWORD *)(v152 + 26576) = 0u;
      *(_OWORD *)(v152 + 26592) = 0u;
      *(_OWORD *)(v152 + 26608) = 0u;
      *(_OWORD *)(v152 + 26624) = 0u;
      *(_OWORD *)(v152 + 26640) = 0u;
      *(_OWORD *)(v152 + 26656) = 0u;
      *(_OWORD *)(v152 + 26672) = 0u;
      *(_QWORD *)(v152 + 26720) = *(_QWORD *)(v152 + 26832);
      *(_QWORD *)(v152 + 26728) = 0;
    }
    sub_1B68BA4A4(v6);
    sub_1B68FB9B4(v6, v156, v157, v158, v159, v160);
    if (v144 == 6 || v144 == 1)
    {
      v161 = 0;
      v162 = 0;
      v163 = *(_QWORD *)(v6 + 176);
      v164 = *(_QWORD *)(v6 + 48) + 31;
      v165 = &v835;
      do
      {
        v166 = *(_QWORD *)(v163 + 272) + v162;
        v167 = *(unsigned __int8 *)(v166 + 8);
        v168 = *(unsigned __int8 *)(v166 + 9);
        v169 = (_DWORD *)((char *)&v855 + v161);
        *v169 = *(_DWORD *)v166;
        v169[1] = *(_DWORD *)(v166 + 4);
        v170 = (_DWORD *)((char *)&v851 + v161);
        LOBYTE(v169) = *(_BYTE *)(v164 + v162);
        *v170 = v167;
        v170[1] = v168;
        *(_BYTE *)v165 = (_BYTE)v169;
        v165 = (int *)((char *)v165 + 1);
        v162 += 16;
        v161 += 8;
      }
      while (v162 != 64);
      if (!*(_DWORD *)(a2 + 17760))
      {
        v171 = *(_DWORD *)(a2 + 14228);
        if (v171 != 32 && (v171 < (int)v851 || v171 < SDWORD2(v851) || v171 < (int)v852 || v171 < SDWORD2(v852)))
        {
          v760 = 0;
          v757 = 0;
          v122 = 0;
          v173 = 0;
          LODWORD(v836) = 0;
          goto LABEL_235;
        }
      }
      v122 = 0;
      v172 = 0;
      if (!v149)
        goto LABEL_201;
      goto LABEL_308;
    }
    if (v78)
    {
      v172 = 0;
      v122 = 1;
      goto LABEL_308;
    }
    v188 = **(_DWORD **)(*(_QWORD *)(v6 + 176) + 272);
    v189 = *(_QWORD *)(a3 + 14096);
    if (*(_DWORD *)(v189 + 560) == v188)
      v172 = *(unsigned __int8 *)(v189 + 2936);
    else
      v172 = 0;
    v245 = *(_DWORD *)(v189 + 80);
    v246 = (__int16)v188 - (__int16)v245;
    if (v246 < 0)
      v246 = (__int16)v245 - (__int16)v188;
    v247 = (v188 >> 16) - (v245 >> 16);
    if (v247 < 0)
      v247 = -v247;
    v248 = v246 + v247;
    if (v145 >= 0x25 && *(_BYTE *)(v790 + 2247))
    {
      if (v248 < 5)
        goto LABEL_303;
    }
    else if (v248 < 3)
    {
LABEL_303:
      if (*(_BYTE *)(*(_QWORD *)(v7 + 136) + 577) == 1 && v810 <= -3 && v248 <= 0xF)
      {
        LODWORD(v836) = 1;
        v122 = v149;
        v149 = 1;
      }
      else
      {
        v122 = v149;
        if (!v149)
        {
LABEL_201:
          v760 = 0;
          v757 = 0;
LABEL_234:
          v173 = 0;
LABEL_235:
          v174 = a3;
LABEL_236:
          v147 = v815;
          goto LABEL_237;
        }
      }
LABEL_308:
      v249 = *(_DWORD *)(a3 + 48);
      v250 = (uint64_t *)(a3 + 128);
      if (v144 != 1)
      {
        v250 = (uint64_t *)(a3 + 128);
        if (v144 != 6)
          v250 = (uint64_t *)(a3 + 120);
      }
      v251 = *v250;
      if (*(_DWORD *)(v6 + 2652))
      {
        v252 = *(__int16 *)(*(_QWORD *)(*(_QWORD *)(v6 + 176) + 272) + 2);
        v253 = *(_DWORD *)(v6 + 4);
        v254 = 16 * v253;
        v255 = 16 * v253 + (v252 >> 2);
        if ((v252 & 3) != 0)
        {
          v256 = *(_DWORD *)(v6 + 2664);
          v257 = *(_DWORD *)(v6 + 2668);
        }
        else
        {
          v256 = *(_DWORD *)(v6 + 2672);
          v257 = *(_DWORD *)(v6 + 2676);
        }
        v258 = v255 >= v256 && v255 + 15 <= v257;
        if (!v258)
        {
          v760 = 0;
          v757 = 0;
          v784 = 0;
          v778 = 0;
          goto LABEL_321;
        }
      }
      else
      {
        v253 = *(_DWORD *)(v6 + 4);
        v254 = 16 * v253;
      }
      v826 = v106;
      v762 = v150;
      v776 = *(_DWORD *)(a3 + 48);
      v259 = *(_DWORD *)v6;
      v260 = *(_QWORD *)(v6 + 216);
      v261 = v251 + 30432 * v249;
      v262 = v261 + 29280;
      v263 = v261 + 29536;
      v264 = *(unsigned int *)(v260 + 232);
      v265 = *(_QWORD *)(v260 + 128);
      v266 = *(_QWORD *)(v260 + 136);
      v267 = *(unsigned int *)(v260 + 248);
      v839 = v262;
      v841 = v263;
      v840 = 16;
      v842 = 16;
      if (v135)
        goto LABEL_327;
      v804 = *(_QWORD *)(a3 + 14096);
      v806 = v263;
      v268 = 16 * v259;
      v781 = v7;
      v269 = v266 + v268 + 8 * v253 * v267;
      v270 = v265 + v268 + (v264 * v254);
      v808 = v262;
      v271 = v789[3553] ? 0 : v172;
      v800 = v251;
      v802 = v249;
      v798 = v253;
      v797 = v259;
      v813 = v122;
      sub_1B68FD004(v786, &v839, v271);
      v272 = v270;
      v6 = v786;
      off_1EF13A5B8(v272, v264, v808, 16, &v843, 16);
      v78 = v822;
      v273 = v269;
      v7 = v781;
      off_1EF13A5B8(v273, v267, v806, 16, &v848, 8);
      v122 = v813;
      if (v822)
      {
LABEL_327:
        v760 = 0;
        v757 = 0;
        v784 = 0;
        DWORD2(v853) = 0;
        v830 = v854;
        v829 = v853;
        v778 = 1;
        v174 = a3;
        v150 = v762;
        v106 = v826;
        goto LABEL_328;
      }
      v286 = *(_QWORD *)(v786 + 56) + 32;
      if (*(_WORD *)(a3 + 2) == 1)
        v287 = 26;
      else
        v287 = 51;
      if (v287 >= v791)
        LOBYTE(v287) = v791;
      v288 = ((unint64_t)(2863311530 * v810) >> 32) - 2 * v810;
      v289 = (char)(v287 + (v288 >> 1) + (v288 < 0));
      if (*(_BYTE *)(*(_QWORD *)(v781 + 136) + 577) == 1)
      {
        v290 = **(_QWORD **)(v786 + 224);
        v291 = *(_DWORD *)v786 + *(_DWORD *)(v290 + 4800) * *(_DWORD *)(v786 + 4);
        v292 = *(char *)(*(_QWORD *)(v290 + 4920) + 216 * v291 + 71);
        if (v289 >= 40)
          v289 = 40;
        v293 = v289 & ~(v289 >> 31);
        if (v292 != 100)
        {
          v294 = v292 - v293;
          if (v294 < 0)
            v294 = v293 - v292;
          if (v294 < 3)
            v293 = *(char *)(*(_QWORD *)(v290 + 4920) + 216 * v291 + 71);
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v786 + 216) + 4920) + 216 * (int)v291 + 71) = v293;
        if (*(_BYTE *)(*(_QWORD *)(v781 + 136) + 577) == 1 && *(_BYTE *)(v790 + 2247))
        {
          if (*(_BYTE *)(a2 + 15044) || *(_BYTE *)(a2 + 15076))
            v295 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v790 + 4696) + 2 * *(unsigned int *)(v786 + 16)) >> 1;
          else
            LOBYTE(v295) = byte_1B692D784[*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v790 + 4656)
                                                             + *(unsigned int *)(v786 + 16))]
                         + v145;
          v810 = 0;
          v295 = (char)v295;
          if ((char)v295 >= 51)
            v295 = 51;
          if (v295 <= 22)
            v295 = 22;
LABEL_397:
          sub_1B6900C48((uint64_t)&v843, v286, 0, ((char)v295 / 6u) & 0x1F | (32 * ((v295 - 6 * ((char)v295 / 6u)) & 7)), 0);
          if (v810)
          {
            v297 = 0;
            v298 = 0;
            v834 = 1;
            while (2)
            {
              v299 = 0;
              v300 = 0;
              do
              {
                LOWORD(v301) = *(_WORD *)(v286 + v299);
                if ((_WORD)v301)
                {
                  if ((v301 & 0x8000u) != 0)
                    v301 = -(__int16)v301;
                  if ((v301 & 0xFFFE) != 0)
                    v149 = 0;
                  if (v810 / 3u + 1 < (unsigned __int16)v301)
                    goto LABEL_413;
                  v297 += dword_1B692D884[v300];
                  if (v297 > 5)
                    v149 = 0;
                  if (v297 > 5 * v810 / 3u + 5)
                  {
LABEL_413:
                    LODWORD(v836) = v149;
                    v304 = &v834;
                    goto LABEL_427;
                  }
                  v300 = -1;
                }
                ++v300;
                v299 += 2;
              }
              while (v299 != 32);
              v286 += 32;
              if (++v298 != 16)
                continue;
              break;
            }
            v302 = v149;
            v303 = 0;
            LODWORD(v836) = v149;
          }
          else
          {
            v305 = 0;
            v306 = 0;
            v303 = 1;
            while (2)
            {
              v307 = 0;
              v308 = 0;
              do
              {
                LOWORD(v309) = *(_WORD *)(v286 + v307);
                if ((_WORD)v309)
                {
                  if ((v309 & 0x8000u) != 0)
                    v309 = -(__int16)v309;
                  if ((unsigned __int16)v309 > 1u || (v305 += dword_1B692D884[v308], v305 > 5))
                  {
                    v304 = (int *)&v836;
LABEL_427:
                    v106 = v826;
                    v303 = v810 == 0;
                    *v304 = 0;
                    v302 = v836;
                    goto LABEL_428;
                  }
                  v308 = -1;
                }
                ++v308;
                v307 += 2;
              }
              while (v307 != 32);
              v286 += 32;
              if (++v306 != 16)
                continue;
              break;
            }
            v302 = v149;
          }
          v106 = v826;
LABEL_428:
          v310 = v302;
          if (!v302 && (!v810 || !v834))
            goto LABEL_1132;
          v311 = *(char *)(*(_QWORD *)(v786 + 40) + 56) + (char)v293;
          v312 = v311 >= 51 ? 51 : *(char *)(*(_QWORD *)(v786 + 40) + 56) + (char)v293;
          v313 = byte_1B6932724[v312 - (v311 & (v311 >> 31))];
          __b[1] = (v313 / 6u) & 0x1F | (32 * (v313 % 6u));
          __b[0] = *(_BYTE *)(v786 + 28);
          sub_1B6900E90(__b);
          v314 = 0;
          if (v303)
          {
            v106 = v826;
            do
            {
              if (*(_WORD *)&v850[v314 + 126])
              {
LABEL_496:
                v344 = (int *)&v836;
                goto LABEL_498;
              }
              v314 += 2;
            }
            while (v314 != 16);
            v315 = 0;
            v316 = 0;
            v317 = v849;
            do
            {
              v318 = 0;
              v319 = 0;
              do
              {
                LOWORD(v320) = *(_WORD *)&v317[v318];
                if ((_WORD)v320)
                {
                  if ((v320 & 0x8000u) != 0)
                    v320 = -(__int16)v320;
                  if ((unsigned __int16)v320 > 1u)
                    goto LABEL_496;
                  v315 += dword_1B692D884[v319];
                  if (v315 > 6)
                    goto LABEL_496;
                  v319 = -1;
                }
                ++v319;
                v318 += 2;
              }
              while (v318 != 30);
              ++v316;
              v317 += 32;
            }
            while (v316 != 4);
            v321 = 0;
            v322 = 0;
            v323 = v850;
            while (2)
            {
              v324 = 0;
              v325 = 0;
              do
              {
                LOWORD(v326) = *(_WORD *)&v323[v324];
                if ((_WORD)v326)
                {
                  if ((v326 & 0x8000u) != 0)
                    v326 = -(__int16)v326;
                  if ((unsigned __int16)v326 > 1u || (v321 += dword_1B692D884[v325], v321 > 6))
                  {
                    v344 = (int *)&v836;
                    goto LABEL_1129;
                  }
                  v325 = -1;
                }
                ++v325;
                v324 += 2;
              }
              while (v324 != 30);
              ++v322;
              v323 += 32;
              if (v322 != 4)
                continue;
              break;
            }
            v6 = v786;
            v7 = v781;
            v327 = v310;
          }
          else
          {
            v328 = v810 / 3u;
            v327 = v310;
            v106 = v826;
            do
            {
              v329 = *(__int16 *)&v850[v314 + 126];
              if (*(_WORD *)&v850[v314 + 126])
                v327 = 0;
              if (v329 < 0)
                v329 = -v329;
              if (v328 < v329)
              {
LABEL_497:
                LODWORD(v836) = v327;
                v344 = &v834;
LABEL_498:
                *v344 = 0;
                v327 = v836;
                goto LABEL_499;
              }
              v314 += 2;
            }
            while (v314 != 16);
            v330 = 0;
            v331 = 0;
            v332 = v328 + 1;
            v333 = 6 * v810 / 3u + 6;
            v334 = v849;
            do
            {
              v335 = 0;
              v336 = 0;
              do
              {
                LOWORD(v337) = *(_WORD *)&v334[v335];
                if ((_WORD)v337)
                {
                  if ((v337 & 0x8000u) != 0)
                    v337 = -(__int16)v337;
                  if ((v337 & 0xFFFE) != 0)
                    v327 = 0;
                  if (v332 < (unsigned __int16)v337)
                    goto LABEL_497;
                  v330 += dword_1B692D884[v336];
                  if (v330 > 6)
                    v327 = 0;
                  if (v330 > v333)
                    goto LABEL_497;
                  v336 = -1;
                }
                ++v336;
                v335 += 2;
              }
              while (v335 != 30);
              ++v331;
              v334 += 32;
            }
            while (v331 != 4);
            v338 = 0;
            v339 = 0;
            v340 = v850;
            while (2)
            {
              v341 = 0;
              v342 = 0;
              do
              {
                LOWORD(v343) = *(_WORD *)&v340[v341];
                if ((_WORD)v343)
                {
                  if ((v343 & 0x8000u) != 0)
                    v343 = -(__int16)v343;
                  if ((v343 & 0xFFFE) != 0)
                    v327 = 0;
                  if (v332 < (unsigned __int16)v343)
                    goto LABEL_1128;
                  v338 += dword_1B692D884[v342];
                  if (v338 > 6)
                    v327 = 0;
                  if (v338 > v333)
                  {
LABEL_1128:
                    LODWORD(v836) = v327;
                    v344 = &v834;
LABEL_1129:
                    v6 = v786;
                    v7 = v781;
                    v106 = v826;
                    goto LABEL_498;
                  }
                  v342 = -1;
                }
                ++v342;
                v341 += 2;
              }
              while (v341 != 30);
              ++v339;
              v340 += 32;
              if (v339 != 4)
                continue;
              break;
            }
            LODWORD(v836) = v327;
            v6 = v786;
            v7 = v781;
          }
          v106 = v826;
LABEL_499:
          if (v327)
          {
            v173 = v327;
            v760 = 0;
            v757 = 0;
            v345 = 0;
          }
          else
          {
LABEL_1132:
            if (v789[3551])
            {
              v174 = a3;
              sub_1B68ABE58(v6, a3, *v771 + 1, (int *)&v836 + 1);
              sub_1B6903A30(HIDWORD(v836), v775, v758, v808, v806, (uint64_t)&__dst, *(double *)(v800 + 30432 * v802 + 26544));
              v173 = 0;
              v757 = v838;
              v345 = -1;
              v760 = 1;
LABEL_517:
              v150 = v762;
              v147 = v815;
              DWORD2(v853) = v345;
              v830 = v854;
              v829 = v853;
              v122 = v813;
              if (v144 != 6 && v144 != 1 || !(v173 | v834))
                goto LABEL_237;
              v356 = *(_QWORD *)(v6 + 72);
              v357 = *(unsigned int *)(v6 + 16);
              v358 = v356 + 32 * v357;
              *(_BYTE *)(v358 + 27) = 1;
              *(_DWORD *)v358 = v855;
              v359 = DWORD1(v855);
              *(_WORD *)(v358 + 24) = 8224;
              *(_DWORD *)(v358 + 4) = v359;
              v360 = v835;
              *(_BYTE *)(v358 + 26) = v835;
              if (v360 == 6)
              {
                if (*(_BYTE *)(*(_QWORD *)(v6 + 48) + 272) == 4)
                {
                  v361 = v356 + 32 * v357;
                  *(_DWORD *)(v361 + 8) = off_1EF13A3D0(v775, 16, v804 + 2416, 16);
                  *(_DWORD *)(v361 + 12) = off_1EF13A3D0(v775, 16, v804 + 2672, 16);
                }
                else
                {
                  off_1EF13A0B0(**(_QWORD **)(v6 + 224), &v855, v797, v798, v775, &__dst, 0, 0);
                  v363 = v356 + 32 * v357;
                  *(_DWORD *)(v363 + 8) = __dst.u16[1] + __dst.u16[0] + __dst.u16[2] + __dst.u16[3];
                  v174 = a3;
                  off_1EF13A0B0(**(_QWORD **)(v6 + 232), (char *)&v855 + 4, v797, v798, v775, &__dst, 0, 0);
                  *(_DWORD *)(v363 + 12) = __dst.u16[1] + __dst.u16[0] + __dst.u16[2] + __dst.u16[3];
                }
                *(_BYTE *)(v358 + 24) = 0;
                *(_BYTE *)(v358 + 25) = 0;
                v150 = v762;
                v106 = v826;
                v122 = v813;
              }
              else
              {
                v362 = off_1EF13A3D0(v775, 16, v808, 16);
                v122 = v813;
                *(_DWORD *)(v358 + 4 * (v360 - 4) + 8) = v362;
                *(_BYTE *)(v358 + v360 - 4 + 24) = 0;
                v150 = v762;
                v106 = v826;
              }
              goto LABEL_236;
            }
            v760 = 0;
            v757 = 0;
            v173 = 0;
            v345 = -1;
          }
          v174 = a3;
          goto LABEL_517;
        }
      }
      else
      {
        if (v289 >= 51)
          v296 = 51;
        else
          v296 = v289;
        v293 = v296 & ~(v296 >> 31);
      }
      v295 = v293;
      goto LABEL_397;
    }
    v149 = 0;
    LODWORD(v836) = 0;
    goto LABEL_303;
  }
  v760 = 0;
  v757 = 0;
  v122 = 0;
  v150 = 0;
  v173 = 0;
  v174 = a3;
LABEL_237:
  v778 = v173;
  v194 = !v147;
  if (v173)
    v194 = 1;
  if ((v194 & 1) != 0)
  {
    v78 = v822;
  }
  else
  {
    v78 = v822;
    v812 = v122;
    if (*(_BYTE *)(v174 + 13))
    {
      v761 = v150;
      v195 = *(_QWORD *)(v174 + 128);
      v776 = *(_DWORD *)(v174 + 44);
      v196 = v195 + 30432 * v776;
      *(_QWORD *)(v6 + 40) = v196 + 4;
      *(_QWORD *)(v6 + 48) = v196 + 64;
      *(_QWORD *)(v6 + 176) = v196 + 26560;
      *(_QWORD *)(v6 + 56) = v196 + 28432;
      *(_QWORD *)(v6 + 312) = *(_QWORD *)(v196 + 26544);
      *(_QWORD *)(v6 + 2624) = v196 + 27120;
      *(_QWORD *)(v6 + 2632) = *(_QWORD *)(v196 + 29248);
      *(_QWORD *)(v6 + 2560) = *(_QWORD *)(v196 + 27104);
      *(_QWORD *)(v6 + 2568) = *(_QWORD *)(v196 + 27112);
      *(_QWORD *)(v6 + 2544) = v196 + 29664;
      *(_QWORD *)(v6 + 2552) = v196 + 30176;
      v197 = v196 + 29280;
      *(_QWORD *)(v6 + 2528) = v196 + 29280;
      *(_QWORD *)(v6 + 2536) = v196 + 29536;
      v198 = *(unsigned __int8 *)(v6 + 188);
      *(_QWORD *)(v196 + 26808) = 0;
      *(_QWORD *)(v196 + 26800) = 0;
      *(_QWORD *)(v196 + 26816) = 0;
      *(_QWORD *)&v199 = 0x2222222222222222;
      *((_QWORD *)&v199 + 1) = 0x2222222222222222;
      *(_OWORD *)(v196 + 26768) = v199;
      *(_OWORD *)(v196 + 26784) = v199;
      if (v198)
      {
        *(_BYTE *)(v196 + 26736) = 0;
        *(_DWORD *)(v196 + 26737) = -1;
        *(_BYTE *)(v196 + 26741) = -1;
        *(_BYTE *)(v196 + 26759) = 0;
        *(_QWORD *)&v200 = 0x2020202020202020;
        *((_QWORD *)&v200 + 1) = 0x2020202020202020;
        *(_OWORD *)(v196 + 26688) = v200;
        *(_OWORD *)(v196 + 26704) = v200;
        *(_OWORD *)(v196 + 26560) = 0u;
        *(_OWORD *)(v196 + 26576) = 0u;
        *(_OWORD *)(v196 + 26592) = 0u;
        *(_OWORD *)(v196 + 26608) = 0u;
        *(_OWORD *)(v196 + 26624) = 0u;
        *(_OWORD *)(v196 + 26640) = 0u;
        *(_OWORD *)(v196 + 26656) = 0u;
        *(_OWORD *)(v196 + 26672) = 0u;
        *(_QWORD *)(v196 + 26720) = *(_QWORD *)(v196 + 26832);
        *(_QWORD *)(v196 + 26728) = 0;
      }
      v825 = v106;
      v201 = *(_QWORD *)(v6 + 48);
      v780 = v7;
      if (v818)
      {
        v202 = *(unsigned __int8 *)(v201 + 272);
        sub_1B68BA4A4(v6);
        if (v202 == 16)
        {
          v208.n128_f32[0] = sub_1B68FB9B4(v6, v203, v204, v205, v206, v207);
          v209 = 0;
          v210 = *(_QWORD *)(v6 + 176);
          v211 = (_DWORD *)&v851 + 1;
          v212 = (_DWORD *)&v855 + 1;
          do
          {
            v213 = *(_QWORD *)(v210 + 272) + 16 * dword_1B6918140[v209];
            *(v212 - 1) = *(_DWORD *)v213;
            *v212 = *(_DWORD *)(v213 + 4);
            v212 += 2;
            v214 = *(unsigned __int8 *)(v213 + 8);
            LODWORD(v213) = *(unsigned __int8 *)(v213 + 9);
            *(v211 - 1) = v214;
            *v211 = v213;
            *((_BYTE *)&v835 + v209++) = *(_BYTE *)(v201 + 31);
            v211 += 2;
          }
          while (v209 != 4);
        }
        else
        {
          v227 = 0;
          v228 = (unsigned __int8 *)&v851 + 4;
          v229 = (_BYTE *)(v201 + 31);
          v230 = &v855;
          do
          {
            v231 = *((unsigned __int8 *)&v835 + v227);
            *v229 = v231;
            v232 = *(v228 - 4);
            *(v229 - 7) = v232;
            v233 = *v228;
            v228 += 8;
            *(v229 - 6) = v233;
            *(_QWORD *)(v229 - 15) = 0;
            sub_1B689CBF8(v786, v230, v231, v232, v233, v227++);
            v230 = (__int128 *)((char *)v230 + 8);
            v229 += 16;
          }
          while (v227 != 4);
        }
      }
      else
      {
        sub_1B68BA4A4(v6);
        v208.n128_f32[0] = sub_1B68FB9B4(v6, v215, v216, v217, v218, v219);
        v220 = 0;
        v221 = *(_QWORD *)(v6 + 176);
        v222 = (_DWORD *)&v851 + 1;
        v223 = (_DWORD *)&v855 + 1;
        do
        {
          if (*(_BYTE *)(v201 + 272) == 16)
            v224 = dword_1B6918140[v220];
          else
            v224 = v220;
          v225 = *(_QWORD *)(v221 + 272) + 16 * v224;
          *(v223 - 1) = *(_DWORD *)v225;
          *v223 = *(_DWORD *)(v225 + 4);
          v223 += 2;
          v226 = *(unsigned __int8 *)(v225 + 8);
          LODWORD(v225) = *(unsigned __int8 *)(v225 + 9);
          *(v222 - 1) = v226;
          *v222 = v225;
          *((_BYTE *)&v835 + v220++) = *(_BYTE *)(v201 + 31);
          v222 += 2;
        }
        while (v220 != 4);
      }
      v6 = v786;
      *(_BYTE *)(*(_QWORD *)(v786 + 40) + 1) = 3;
      *(_BYTE *)(*(_QWORD *)(v786 + 40) + 2) = 0;
      if (v818)
      {
        v197 = v195 + 30432 * *(unsigned int *)(a3 + 48) + 29280;
      }
      else
      {
        *(_QWORD *)__b = v196 + 29280;
        *(_QWORD *)&__b[16] = v196 + 29536;
        *(_DWORD *)&__b[8] = 16;
        *(_DWORD *)&__b[24] = 16;
        sub_1B68FCF84(v786, (uint64_t *)__b);
        sub_1B68ABE58(v786, a3, *v771 + 1, (int *)&v836 + 1);
      }
      if (v834)
      {
        DWORD2(v853) = 0;
      }
      else
      {
        DWORD2(v853) = v148;
        if (*(_DWORD *)(a2 + 17760) == 1)
        {
          for (i = 0; i != 4; ++i)
          {
            v235 = off_1EF13A3E8(v775 + dword_1B6918150[i], 16, v197 + dword_1B6918150[i], 16, v208);
            *(_DWORD *)&__b[i * 4] = v235;
            DWORD2(v853) += v235;
          }
        }
        else
        {
          v236 = 0;
          v237 = *(_DWORD *)(a2 + 14228);
          v238 = &v851;
          do
          {
            if (v237 == 32 || v237 >= *(_DWORD *)v238)
            {
              v239 = off_1EF13A3E8(v775 + dword_1B6918150[v236], 16, v197 + dword_1B6918150[v236], 16, v208);
              *(_DWORD *)&__b[v236 * 4] = v239;
              v148 = DWORD2(v853);
            }
            else
            {
              v239 = 0x10000000;
              *(_DWORD *)&__b[v236 * 4] = 0x10000000;
            }
            v148 += v239;
            DWORD2(v853) = v148;
            ++v236;
            v238 = (__int128 *)((char *)v238 + 8);
          }
          while (v236 != 4);
        }
      }
      if (v789[3557] == 2)
      {
        *(_BYTE *)(v196 + 7) = 0;
        sub_1B68A4454(v196, v786, a2, (uint64_t)&v853);
      }
      v829 = v853;
      v830 = v854;
      v174 = a3;
      v7 = v780;
      v150 = v761;
      v106 = v825;
      v78 = v822;
    }
    else
    {
      v835 = 0;
      memset_pattern16(__b, &unk_1B6918160, 0x10uLL);
      v834 = 0;
    }
    v240 = 0;
    v241 = *(_QWORD *)(v174 + 14096);
    *(_BYTE *)(v241 + 3560) = 0;
    do
    {
      v242 = v241 + 8 * v240;
      *(_QWORD *)(v242 + 3476) = *((_QWORD *)&v855 + v240);
      *(_QWORD *)(v242 + 3508) = *((_QWORD *)&v851 + v240);
      *(_DWORD *)(v241 + 4 * v240 + 3540) = *(_DWORD *)&__b[4 * v240];
      *(_BYTE *)(v241 + 3556 + v240) = *((_BYTE *)&v835 + v240);
      ++v240;
    }
    while (v240 != 4);
    if (*(_BYTE *)(v241 + 3556) == 6
      && *(_BYTE *)(v241 + 3557) == 6
      && *(_BYTE *)(v241 + 3558) == 6
      && *(_BYTE *)(v241 + 3559) == 6)
    {
      v243 = *(_DWORD *)(v241 + 3476);
      if (v243 == *(_DWORD *)(v241 + 3484) && v243 == *(_DWORD *)(v241 + 3492) && v243 == *(_DWORD *)(v241 + 3500))
      {
        v244 = *(_DWORD *)(v241 + 3480);
        if (v244 == *(_DWORD *)(v241 + 3488) && v244 == *(_DWORD *)(v241 + 3496) && v244 == *(_DWORD *)(v241 + 3504))
          *(_BYTE *)(v241 + 3560) = 1;
      }
    }
    v778 = v836;
    v122 = v812;
  }
  v784 = v834;
LABEL_328:
  if (v776 == *(_DWORD *)(v174 + 48) && v778)
  {
    v785 = 0;
    switch(v795)
    {
      case 0:
      case 5:
        v274 = *(_DWORD **)(a2 + 47888);
        goto LABEL_333;
      case 1:
      case 6:
        v274 = (_DWORD *)(*(_QWORD *)(a2 + 47888) + 4);
LABEL_333:
        v785 = 0;
        ++*v274;
        break;
      default:
        break;
    }
  }
  if (!v78)
  {
    v275 = 22;
    if (!v122)
      v275 = 14;
    ++**(_DWORD **)&v788[v275];
  }
  if (v778)
  {
    v112 = 0;
    v773 = 0;
    v114 = -1;
    goto LABEL_928;
  }
  LODWORD(v773) = 0;
  v756 = 1;
  if (!v785 || *(_BYTE *)(*(_QWORD *)(v7 + 136) + 577) != 1)
  {
    HIDWORD(v773) = 0;
    goto LABEL_534;
  }
  if (!*(_BYTE *)(a2 + 10))
    goto LABEL_369;
  v276 = *(_QWORD *)(v6 + 128);
  v277 = *(_QWORD *)(v6 + 136);
  v278 = *(_QWORD *)(v6 + 144);
  v279 = *(_QWORD *)(v6 + 152);
  if (!v276)
  {
    v280 = 0;
    if (v277)
      goto LABEL_352;
    goto LABEL_346;
  }
  if (*(_BYTE *)(v276 + 224) != 34)
  {
    v280 = 1;
    if (v277)
      goto LABEL_352;
LABEL_346:
    v281 = 0;
    if (v278)
      goto LABEL_347;
LABEL_354:
    v282 = 0;
    if (!v279)
      goto LABEL_349;
    goto LABEL_355;
  }
  v280 = *(unsigned __int8 *)(v276 + 208) != 34;
  if (!v277)
    goto LABEL_346;
LABEL_352:
  if (*(_BYTE *)(v277 + 224) == 34)
  {
    v281 = *(unsigned __int8 *)(v277 + 208) != 34;
    if (!v278)
      goto LABEL_354;
  }
  else
  {
    v281 = 1;
    if (!v278)
      goto LABEL_354;
  }
LABEL_347:
  if (*(_BYTE *)(v278 + 224) == 34)
  {
    v282 = *(unsigned __int8 *)(v278 + 208) != 34;
    if (!v279)
    {
LABEL_349:
      v283 = 0;
      goto LABEL_364;
    }
  }
  else
  {
    v282 = 1;
    if (!v279)
      goto LABEL_349;
  }
LABEL_355:
  v283 = *(_BYTE *)(v279 + 224) != 34 || *(unsigned __int8 *)(v279 + 208) != 34;
LABEL_364:
  if ((v281 + v280 + v282 + v283) < 2)
  {
LABEL_369:
    v773 = 0;
    v756 = 1;
    goto LABEL_534;
  }
  v284 = v106;
  v285 = 0;
  if (v795 != 2 && v795 != 7)
  {
    if (*(_BYTE *)(v174 + 4))
    {
      v285 = 0;
    }
    else
    {
      v346 = 0;
      v347 = *(unsigned int *)(v6 + 16);
      v348 = v347 - *(_DWORD *)(a2 + 14176);
      *(_QWORD *)__b = *(_QWORD *)(v6 + 128);
      *(_QWORD *)&__b[8] = v277;
      *(_QWORD *)&__b[16] = v278;
      *(_QWORD *)&__b[24] = v279;
      v349 = 1;
      do
      {
        v350 = *(_QWORD *)&__b[8 * v346];
        if (v350 && *(_BYTE *)(v350 + 208) != 34)
          break;
        v349 = v346++ < 3;
      }
      while (v346 != 4);
      if (v795 != 5 && v795)
      {
        v355 = 0;
      }
      else
      {
        v351 = **(_QWORD **)(v6 + 224);
        v352 = *(_QWORD *)(*(_QWORD *)(v351 + 1256) + 8 * v347);
        v258 = v351 + 1184 > v352;
        v353 = v351 + 1216;
        v355 = !v258 && v352 <= v353;
      }
      v285 = 0;
      if (v348 >= 5 && !v349 && (v355 & 1) == 0)
        v285 = v348 >= 3 * *(_DWORD *)(a2 + 50628);
    }
  }
  if ((char)v791 >= 51)
    v364 = 51;
  else
    v364 = (char)v791;
  v365 = byte_1B6933E0A[(int)v364];
  LOBYTE(v791) = v364;
  sub_1B68ABF4C(v364, v772, v174, v6, v96);
  HIDWORD(v773) = v365;
  sub_1B68A4950(v7, a2, v174, v6, (uint64_t)&v833, (uint64_t)&v831, v285, v365, 0x40000000u);
  v756 = 0;
  LODWORD(v773) = 1;
  v106 = v284;
LABEL_534:
  v754 = DWORD2(v831);
  v366 = *(unsigned __int8 *)(a2 + 14184);
  v367 = v366 == 1;
  if (v366 == 6)
    v367 = 1;
  v764 = v367;
  v368 = v795;
  v769 = *(unsigned __int8 *)(a2 + 14184);
  if (v366 == 6 || (v369 = (uint64_t *)(a3 + 120), v366 == 1))
  {
    if (v784)
    {
      v112 = 0;
      v114 = -1;
      goto LABEL_929;
    }
    v369 = (uint64_t *)(a3 + 128);
    v106 = (unsigned int *)(a3 + 96);
  }
  v765 = *v106;
  v767 = *v369;
  v370 = *(unsigned int *)(v174 + 84);
  v851 = v829;
  *(_QWORD *)&v852 = v830;
  if (v366 != 6 && v366 != 1)
  {
    v768 = -1;
    v371 = v370;
    v755 = v370;
    if (v150)
      goto LABEL_545;
    goto LABEL_544;
  }
  v768 = DWORD2(v851);
  v755 = v776;
  v371 = v370;
  if (!v150)
  {
LABEL_544:
    sub_1B68F3C54(*(_QWORD *)(v174 + 14096), v6, v7, v174, a2, 0, byte_1B6933E0A[(char)v791]);
    v371 = v370;
  }
LABEL_545:
  v782 = v7;
  if (v371 >= v765)
  {
    v753 = -1;
    goto LABEL_885;
  }
  if ((char)v791 <= 10)
    v372 = 0;
  else
    v372 = v791 - 10;
  v752 = v372;
  DWORD1(v95) = 1072273817;
  v753 = -1;
  v763 = v150;
  do
  {
    v774 = v371;
    v373 = v767 + 30432 * v371;
    *(_QWORD *)(v6 + 40) = v373 + 4;
    *(_QWORD *)(v6 + 48) = v373 + 64;
    *(_QWORD *)(v6 + 176) = v373 + 26560;
    *(_QWORD *)(v6 + 56) = v373 + 28432;
    *(_QWORD *)(v6 + 312) = *(_QWORD *)(v373 + 26544);
    *(_QWORD *)(v6 + 2624) = v373 + 27120;
    *(_QWORD *)(v6 + 2632) = *(_QWORD *)(v373 + 29248);
    *(_QWORD *)(v6 + 2560) = *(_QWORD *)(v373 + 27104);
    *(_QWORD *)(v6 + 2568) = *(_QWORD *)(v373 + 27112);
    *(_QWORD *)(v6 + 2544) = v373 + 29664;
    *(_QWORD *)(v6 + 2552) = v373 + 30176;
    *(_QWORD *)(v6 + 2528) = v373 + 29280;
    *(_QWORD *)(v6 + 2536) = v373 + 29536;
    v787 = *(unsigned __int8 *)(v373 + 6);
    v374 = *(unsigned __int8 *)(v6 + 188);
    *(_QWORD *)(v373 + 26808) = 0;
    *(_QWORD *)(v373 + 26800) = 0;
    *(_QWORD *)(v373 + 26816) = 0;
    *(_QWORD *)&v375 = 0x2222222222222222;
    *((_QWORD *)&v375 + 1) = 0x2222222222222222;
    *(_OWORD *)(v373 + 26768) = v375;
    v777 = v373;
    *(_OWORD *)(v373 + 26784) = v375;
    if (v374)
    {
      *(_BYTE *)(v373 + 26736) = 0;
      *(_DWORD *)(v373 + 26737) = -1;
      *(_BYTE *)(v373 + 26741) = -1;
      *(_BYTE *)(v373 + 26759) = 0;
      *(_QWORD *)&v376 = 0x2020202020202020;
      *((_QWORD *)&v376 + 1) = 0x2020202020202020;
      *(_OWORD *)(v373 + 26688) = v376;
      *(_OWORD *)(v373 + 26704) = v376;
      *(_OWORD *)(v373 + 26560) = 0u;
      *(_OWORD *)(v373 + 26576) = 0u;
      *(_OWORD *)(v373 + 26592) = 0u;
      *(_OWORD *)(v373 + 26608) = 0u;
      *(_OWORD *)(v373 + 26624) = 0u;
      *(_OWORD *)(v373 + 26640) = 0u;
      *(_OWORD *)(v373 + 26656) = 0u;
      *(_OWORD *)(v373 + 26672) = 0u;
      *(_QWORD *)(v373 + 26720) = *(_QWORD *)(v373 + 26832);
      *(_QWORD *)(v373 + 26728) = 0;
    }
    v377 = *(_QWORD *)(v782 + 136);
    if (*(_BYTE *)(v377 + 4849))
    {
      v378 = *(_QWORD *)(v782 + 5392);
      if (v378)
      {
        if (*(_BYTE *)(v377 + 577) == 1)
        {
          v379 = byte_1B693560A[v787] != 3 || v769 == 1;
          v380 = v379 || v769 == 6;
          if (!v380 && *(double *)(v378 + 136) > 5.0)
          {
            if (*(_DWORD *)(v790 + 2260))
              v585 = 80;
            else
              v585 = 60;
            if (v768 < v585 * v752)
              break;
            v586 = 0;
            v587 = 0;
            v588 = *(_QWORD *)(v6 + 72);
            v589 = *(unsigned int *)(v6 + 16);
            v590 = *(_DWORD *)(v6 + 20);
            v591 = (__int16 *)(v588 + 32 * v589);
            v592 = *((unsigned __int8 *)v591 + 24);
            v593 = *v591;
            v594 = v591[1];
            v95 = *(_OWORD *)(v6 + 144);
            *(_OWORD *)__b = *(_OWORD *)(v6 + 128);
            *(_OWORD *)&__b[16] = v95;
            LODWORD(v843) = v589 - 1;
            HIDWORD(v843) = v589 - v590;
            v844 = vadd_s32(vdup_n_s32((int)v589 - v590), (int32x2_t)0xFFFFFFFF00000001);
            do
            {
              v595 = *(_QWORD *)&__b[8 * v586];
              if (v595 && (*(_BYTE *)(v595 + 176) || *(_BYTE *)(v595 + 177) == 2 && !*(_BYTE *)(v595 + 178)))
              {
                v596 = *(__int16 **)(v595 + 272);
                if (*((unsigned __int8 *)v596 + 8) == v592)
                {
                  v597 = *v596 - v593;
                  if (v597 < 0)
                    v597 = v593 - *v596;
                  v598 = v596[1] - v594;
                  if (v598 < 0)
                    v598 = -v598;
                  if ((v598 + v597) > 8 || v768 > *(_DWORD *)(v588 + 32 * *((int *)&v843 + v586) + 8))
                    goto LABEL_563;
                }
                ++v587;
              }
              ++v586;
            }
            while (v586 != 4);
            if (v587 > 2)
              break;
          }
        }
      }
    }
LABEL_563:
    v381 = byte_1B693560A[v787];
    v382 = v764;
    if ((_DWORD)v787)
      v382 = 1;
    v803 = byte_1B693560A[v787];
    if (v150 && (v382 & 1) == 0)
    {
      if ((v756 & 1) != 0
        || (v383 = *(_QWORD *)(v174 + 14096), v384 = *(_DWORD *)(v383 + 3568), v754 >= v384)
        && (*(__int16 *)(v383 + 3304) * *(__int16 *)(v383 + 3304)
          + *(__int16 *)(v383 + 3306) * *(__int16 *)(v383 + 3306) > (*(_DWORD *)(v383 + 1844) * *(_DWORD *)(v383 + 1848)) << 6
          ? (v385 = (double)v754 * 0.8 < (double)v384)
          : (v385 = 0),
            !v385))
      {
        if (!v784)
        {
          v386 = *(int32x2_t **)(v174 + 14096);
          v387 = v386[232];
          v388 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v387 + 40) + 1);
          v389 = v386[433].u32[0];
          v390 = (char *)v386 + 4 * v389;
          *((_DWORD *)v390 + 892) = -1;
          v391 = (char *)v386 + 2 * v389;
          *((_WORD *)v391 + 1798) = -1;
          v393 = *(_QWORD *)&v387 + 216;
          v392 = *(_QWORD *)(*(_QWORD *)&v387 + 216);
          v823 = **(_QWORD **)(v393 + 8);
          v394 = *(_QWORD *)(v392 + 4920);
          v827 = *(_DWORD *)(v392 + 4800);
          if (v386[434].i32[0]
            || !v386[483].i8[6]
            || (v388 != 3 ? (v395 = v388 == 5) : (v395 = 1),
                v395
             || (v600 = *(_DWORD *)(v823 + 1276),
                 v601 = v386[236].i32[1] + v386[237].i32[0] * v827,
                 v600 == *(_DWORD *)(v394 + 216 * v601 + 48))
             || *(unsigned __int8 *)(v394 + 216 * v601 + 66) >= 2u && v600 == *(_DWORD *)(v394 + 216 * v601 + 52)))
          {
            *((_DWORD *)v390 + 892) = 0;
            *((_WORD *)v391 + 1798) = 0;
            v396 = dword_1B69356A8[v389];
            v386[412].i32[0] = v386[130].i32[v396];
            v386[412].i16[2] = v386[196].i16[v396];
            v386[413].i32[0] = v386[10].i32[v396];
            sub_1B68F6B04((uint64_t)v386, 0, 0, 0);
            v386[130].i32[dword_1B69356A8[v386[433].u32[0]]] = v386[412].i32[0];
            v386[196].i16[dword_1B69356A8[v386[433].u32[0]]] = v386[412].i16[2];
            v386[10].i32[dword_1B69356A8[v386[433].u32[0]]] = v386[413].i32[0];
            v397 = v386[433].u32[0];
            v398 = dword_1B69356A8[v397];
            v399 = (char *)v386 + 4 * v397;
            *((_DWORD *)v399 + 892) += v386[130].i32[v398];
            v386[449].i16[v397 + 2] += v386[196].i16[v398];
            if (v386[483].i8[7])
            {
              v400 = *(_DWORD *)(v823 + 1276);
              v401 = v386[236].i32[1] + v386[237].i32[0] * v827;
              if (v400 == *(_DWORD *)(v394 + 216 * v401 + 48))
              {
                *(_DWORD *)(v394 + 216 * v401 + 204) = *((_DWORD *)v399 + 892);
                v400 = *(_DWORD *)(v823 + 1276);
                v401 = v386[236].i32[1] + v386[237].i32[0] * v827;
              }
              if (v400 == *(_DWORD *)(v394 + 216 * v401 + 52))
                *(_DWORD *)(v394 + 216 * v401 + 208) = v386[446].i32[v386[433].u32[0]];
            }
          }
          sub_1B68F58D4((uint64_t)v386);
          v402 = v827;
          if (v386[484].i32[1] >= 2u)
          {
            v403 = 24;
            v404 = 1;
            do
            {
              v405 = v386[232];
              v406 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v405 + 224) + 8 * v404);
              if (v386[434].i32[0]
                || (v386[483].i8[6] ? (v407 = v388 == 3) : (v407 = 1),
                    !v407 ? (v408 = v388 == 5) : (v408 = 1),
                    v408
                 || (v420 = *(_DWORD *)(v406 + 1276),
                     v421 = v386[236].i32[1] + v386[237].i32[0] * v402,
                     v420 == *(_DWORD *)(v394 + 216 * v421 + 48))
                 || *(unsigned __int8 *)(v394 + 216 * v421 + 66) >= 2u
                 && v420 == *(_DWORD *)(v394 + 216 * v421 + 52)))
              {
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v405 + 48) + 24) = v404;
                sub_1B68F431C(v386, v404);
                sub_1B68F477C((uint64_t)v386, v404, 0, 0);
                v386[412].i32[0] = -1;
                sub_1B68F4A14((uint64_t)v386, 0, 0, v404);
                sub_1B68F5100((uint64_t)v386, 0);
                sub_1B68F56D8((uint64_t)v386, 0);
                sub_1B68F6B04((uint64_t)v386, 0, 0, v404);
                v386[130].i32[v403 + dword_1B69356A8[v386[433].u32[0]]] = v386[412].i32[0];
                v386[196].i16[v403 + dword_1B69356A8[v386[433].u32[0]]] = v386[412].i16[2];
                v386[10].i32[v403 + dword_1B69356A8[v386[433].u32[0]]] = v386[413].i32[0];
                v409 = v386[433].u32[0];
                v410 = (v403 + dword_1B69356A8[v409]);
                v411 = v386[130].u32[v410];
                v412 = v386[484].u32[1];
                if (v412 >= 2)
                {
                  if (v412 == 2)
                  {
                    v413 = v386[230].i32[0];
                    v414 = 1;
                  }
                  else
                  {
                    v415 = ((v404 + 1) >> 16) - 1;
                    if (v404 <= 0xFFFE)
                      v415 = v404 + 1;
                    v416 = 32 * (v404 > 0xFFFE);
                    if (v415 >= 0x100)
                    {
                      v415 = (v415 >> 8) - 1;
                      v416 |= 0x10u;
                    }
                    if (v404 <= 0xFE)
                    {
                      v415 = v404;
                      v416 = 0;
                    }
                    v413 = v416 + byte_1B693C048[v415];
                    v414 = v386[230].i32[0];
                  }
                  v411 += v413 * v414;
                }
                v417 = (char *)v386 + 4 * v409;
                if (v411 < *((_DWORD *)v417 + 892))
                {
                  v386[v409 + 452].i32[0] = v404;
                  *((_DWORD *)v417 + 892) = v411;
                  v386[449].i16[v409 + 2] = v386[196].i16[v410];
                }
                v402 = v827;
                if (v386[483].i8[7])
                {
                  v418 = *(_DWORD *)(v406 + 1276);
                  v419 = v386[236].i32[1] + v386[237].i32[0] * v827;
                  if (v418 == *(_DWORD *)(v394 + 216 * v419 + 48))
                  {
                    *(_DWORD *)(v394 + 216 * v419 + 204) = v411;
                    v418 = *(_DWORD *)(v406 + 1276);
                    v419 = v386[236].i32[1] + v386[237].i32[0] * v827;
                  }
                  if (v418 == *(_DWORD *)(v394 + 216 * v419 + 52))
                    *(_DWORD *)(v394 + 216 * v419 + 208) = v411;
                }
              }
              ++v404;
              v403 += 24;
            }
            while (v404 < v386[484].u32[1]);
          }
          if (v386[483].i8[7])
            sub_1B68BF2CC(v394 + 216 * (v386[236].i32[1] + v386[237].i32[0] * v402));
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v386[232] + 48) + 24) = v386[v386[433].u32[0] + 452].i32[0];
          v174 = a3;
          v150 = v763;
          v381 = v803;
        }
        goto LABEL_829;
      }
      v112 = 1;
      v114 = -1;
      v368 = v795;
      v7 = v782;
      goto LABEL_929;
    }
    v422 = *(int32x2_t **)(v174 + 14096);
    v423 = (_QWORD *)v422[232];
    v424 = v423[5];
    v425 = *(unsigned __int8 *)(v424 + 1);
    v426 = *(unsigned __int8 *)(v424 + 2);
    if (v425 == 3 || v425 == 5)
    {
      if ((int)v426 > 4)
      {
        if ((_DWORD)v426 == 5)
        {
          v428 = 2u;
        }
        else
        {
          if ((_DWORD)v426 != 22)
            goto LABEL_829;
          v428 = 3u;
        }
      }
      else if ((_DWORD)v426 == 1)
      {
        v428 = 0u;
      }
      else
      {
        if ((_DWORD)v426 != 4)
          goto LABEL_829;
        v428 = 1u;
      }
    }
    else
    {
      v428 = byte_1B693560A[v426];
    }
    v422[433].i32[0] = v428;
    v429 = *(unsigned __int8 *)(v423[5] + 1);
    v422[446].i32[v428] = 0;
    v422[449].i16[v428 + 2] = 0;
    v430 = v423[27];
    v817 = *(_QWORD *)(v430 + 4920);
    v807 = *(_DWORD *)(v430 + 4800);
    *(_BYTE *)(v423[6] + 24) = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v422[232] + 48) + 25) = 0;
    sub_1B68F431C(v422, 0);
    v431 = 0;
    v828 = v428;
    v796 = byte_1B69355EC[v428];
    v809 = v429;
    v432 = v429 == 5 || v429 == 3;
    v433 = 1;
    if (v432)
      v433 = 2;
    v805 = v433;
    v794 = 4 * v433;
    v434 = -1;
    v801 = 13;
    do
    {
      v816 = 0;
      v435 = 0;
      *(_QWORD *)&v853 = -1;
      v436 = v431;
      v799 = v434;
      v819 = v434;
      do
      {
        v437 = (char *)v422 + 4 * v435;
        *(_DWORD *)&v437[8 * v422[433].u32[0] + 3616] = 0;
        if (*((_DWORD *)v437 + 969))
        {
          v438 = 0;
          v439 = 0;
          v440 = v437 + 3876;
          v814 = 12 * v435;
          v441 = &v422[8 * (unint64_t)v435];
          v820 = v441 + 384;
          v442 = (unsigned int *)&v422[408] + v435;
          v811 = v441 + 385;
          while (1)
          {
            v443 = v422[232];
            v444 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v443 + 8 * v435 + 224) + 8 * v439);
            if (v422[434].i32[0])
              break;
            v445 = !v422[483].i8[6] || v809 == 3;
            if (v445 || v809 == 5)
              break;
            v464 = *(_DWORD *)(v444 + 1276);
            v465 = v422[236].i32[1] + v422[237].i32[0] * v807;
            if (v464 == *(_DWORD *)(v817 + 216 * v465 + 48)
              || *(unsigned __int8 *)(v817 + 216 * v465 + 66) >= 2u && v464 == *(_DWORD *)(v817 + 216 * v465 + 52))
            {
              break;
            }
LABEL_694:
            ++v439;
            v438 += 24;
            if (v439 >= *v440)
            {
              v466 = v422[v422[433].u32[0] + 452].i32[v435];
              v381 = v803;
              goto LABEL_701;
            }
          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v443 + 48) + 16 * v431 + v435 + 24) = v439;
          if (!(v435 | v431) && v438)
            sub_1B68F431C(v422, v439);
          v447 = v422[433].i32[0];
          if ((_DWORD)v431 && v447 == 3)
          {
            v820->i32[0] = v422[70].i32[(v436 + v438 + 8)];
            *v442 = v431 + 1;
            v448 = v819 + v438 + dword_1B69356A8[v422[433].u32[0]];
            v449 = v431 + 1;
          }
          else
          {
            if ((_DWORD)v431 && v447 == 1)
            {
              v450 = v814 + 24 * v439;
              v820->i32[0] = v422[70].i32[(v436 + v438 + 4)];
              *v442 = 2;
              v451 = v816 + v438 + 10;
            }
            else
            {
              if (!(_DWORD)v431 || v447 != 2)
                goto LABEL_671;
              v450 = v814 + 24 * v439;
              v820->i32[0] = v422[70].i32[(v436 + v438 + 6)];
              *v442 = 2;
              v451 = v816 + v438 + 9;
            }
            v811->i32[0] = v422[10].i32[v451];
            v449 = *v442 + 1;
            *v442 = v449;
            v448 = v450 + 11;
          }
          v422[8 * (unint64_t)v435 + 384].i32[v449] = v422[10].i32[v448];
          ++*v442;
LABEL_671:
          sub_1B68F477C((uint64_t)v422, v439, v435, v431);
          v422[412].i32[0] = -1;
          sub_1B68F4A14((uint64_t)v422, v435, v431, v439);
          if (!(v828 | v439 | v435))
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v422[232] + 72) + 32 * v422[233].u32[0] + 20) = v422[409].i32[0];
          sub_1B68F5100((uint64_t)v422, v435);
          sub_1B68F56D8((uint64_t)v422, v435);
          sub_1B68F6B04((uint64_t)v422, v435, v431, v439);
          if (*v440 <= 1u)
          {
            v453 = v422[412].i32[0];
          }
          else
          {
            if (*v440 == 2)
            {
              v452 = v422[230].i32[0];
            }
            else
            {
              if (v439 <= 0xFE)
              {
                v459 = 0;
                v458 = v439;
              }
              else
              {
                v454 = ((v439 + 1) >> 16) - 1;
                v455 = v439 > 0xFFFE;
                if (v439 <= 0xFFFE)
                  v454 = v439 + 1;
                v456 = 32 * v455;
                v457 = (32 * v455) | 0x10;
                v458 = (v454 >> 8) - 1;
                if (v454 >= 0x100)
                {
                  v459 = v457;
                }
                else
                {
                  v458 = v454;
                  v459 = v456;
                }
              }
              v452 = (v459 + byte_1B693C048[v458]) * v422[230].i32[0];
            }
            v453 = v422[412].i32[0] + v452;
            v422[412].i32[0] = v453;
          }
          v460 = v436 + v438;
          v422[130].i32[v460 + dword_1B69356A8[v422[433].u32[0]]] = v453;
          v422[196].i16[v460 + dword_1B69356A8[v422[433].u32[0]]] = v422[412].i16[2];
          v422[10].i32[v460 + dword_1B69356A8[v422[433].u32[0]]] = v422[413].i32[0];
          v461 = v422[412].u32[0];
          if (v461 < *((_DWORD *)&v853 + v435))
          {
            v422[v422[433].u32[0] + 452].i32[v435] = v439;
            *((_DWORD *)&v853 + v435) = v461;
          }
          if (v422[483].i8[7] && !(v422[433].i32[0] | v435))
          {
            v462 = *(_DWORD *)(v444 + 1276);
            v463 = v422[236].i32[1] + v422[237].i32[0] * v807;
            if (v462 == *(_DWORD *)(v817 + 216 * v463 + 48))
            {
              *(_DWORD *)(v817 + 216 * v463 + 204) = v461;
              v462 = *(_DWORD *)(v444 + 1276);
              v463 = v422[236].i32[1] + v422[237].i32[0] * v807;
            }
            if (v462 == *(_DWORD *)(v817 + 216 * v463 + 52))
              *(_DWORD *)(v817 + 216 * v463 + 208) = v422[412].i32[0];
          }
          goto LABEL_694;
        }
        LOBYTE(v466) = 0;
LABEL_701:
        v467 = *(_QWORD *)(*(_QWORD *)&v422[232] + 48) + 16 * v431 + v435++;
        *(_BYTE *)(v467 + 24) = v466;
        v819 += 12;
        v436 += 12;
        v816 += 12;
      }
      while (v435 != v805);
      if (v809 == 5 || v809 == 3)
      {
        v468 = v422[433].u32[0];
        v422[449].i16[v468 + 2] = -1;
        if (v422[415].i32[1])
          v422[190].i32[(dword_1B69356A8[v468] + v431)] = 0x7FFFFFFF;
      }
      v469 = v422[433].u32[0];
      v470 = v431 + 1;
      if (v422[483].i8[4])
      {
        v422[449].i16[v469 + 2] = -1;
        v471 = dword_1B69356A8[v469] + v431;
        v821 = v422[190].u32[v471];
        v472 = v853;
        memcpy(&__dst, &v422[v469 + 452], v794);
        v473 = 0;
        for (j = 0; j != v805; ++j)
        {
          v475 = v422[484].u32[j + 1];
          if ((_DWORD)v475)
          {
            v476 = v471;
            v477 = v473;
            do
            {
              v478 = (_DWORD *)v422 + v476;
              v479 = 4 * v477;
              *(_DWORD *)&__b[v479] = v478[260];
              *(_DWORD *)((char *)&v843 + v479) = v478[20];
              *(_DWORD *)((char *)&v855 + v479) = v478[140];
              ++v477;
              v476 += 24;
              --v475;
            }
            while (v475);
          }
          v473 += 5;
          v471 += 12;
        }
        v480 = 0;
        v824 = v431;
        v481 = 908;
        do
        {
          v482 = (char *)v422 + 4 * v480;
          if (*((_DWORD *)v482 + 969))
          {
            v483 = 0;
            v484 = v482 + 3876;
            v485 = -1;
            v486 = v824;
            v487 = v481;
            do
            {
              v488 = v422[474];
              if (*(_DWORD *)(*(_QWORD *)&v488 + v487 - 768) != 1 << *(_DWORD *)(*(_QWORD *)&v488 + 4)
                || *(_DWORD *)(*(_QWORD *)&v488 + v487))
              {
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v422[232] + 48) + 16 * v431 + v480 + 24) = v483;
                if (!(v480 | v431) && v483)
                  sub_1B68F431C(v422, v483);
                sub_1B68F477C((uint64_t)v422, v483, v480, v431);
                v422[412].i32[0] = -1;
                sub_1B68F4A14((uint64_t)v422, v480, v431, v483);
                sub_1B68F5100((uint64_t)v422, v480);
                sub_1B68F56D8((uint64_t)v422, v480);
                sub_1B68F6B04((uint64_t)v422, v480, v431, v483);
                if (*v484 <= 1u)
                {
                  v490 = v422[412].i32[0];
                }
                else
                {
                  if (*v484 == 2)
                  {
                    v489 = v422[230].i32[0];
                  }
                  else
                  {
                    v491 = ((v483 + 1) >> 16) - 1;
                    if (v483 <= 0xFFFE)
                      v491 = v483 + 1;
                    v492 = 32 * (v483 > 0xFFFE);
                    if (v491 >= 0x100)
                    {
                      v491 = (v491 >> 8) - 1;
                      v492 |= 0x10u;
                    }
                    if (v483 <= 0xFE)
                    {
                      v491 = v483;
                      v492 = 0;
                    }
                    v489 = (v492 + byte_1B693C048[v491]) * v422[230].i32[0];
                  }
                  v490 = v422[412].i32[0] + v489;
                  v422[412].i32[0] = v490;
                }
                v422[130].i32[v486 + dword_1B69356A8[v422[433].u32[0]]] = v490;
                v422[196].i16[v486 + dword_1B69356A8[v422[433].u32[0]]] = v422[412].i16[2];
                v422[10].i32[v486 + dword_1B69356A8[v422[433].u32[0]]] = v422[413].i32[0];
                v493 = v422[412].u32[0];
                if (v493 < v485)
                {
                  v422[v422[433].u32[0] + 452].i32[v480] = v483;
                  v485 = v493;
                }
              }
              ++v483;
              v487 += 12;
              v486 += 24;
            }
            while (v483 < *v484);
          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v422[232] + 48) + 16 * v431 + v480 + 24) = v422[v422[433].u32[0] + 452].i32[v480];
          ++v480;
          v481 += 384;
          v824 += 12;
        }
        while (v480 != v805);
        v494 = v472;
        if (v472 >= HIDWORD(v472))
          v494 = HIDWORD(v472);
        if (v494 >= v821)
          v495 = v821;
        else
          v495 = v494;
        v496 = dword_1B69356A8[v422[433].u32[0]] + v431;
        v497 = (char *)v422 + 4 * v496;
        if (*((_DWORD *)v497 + 380) + 10 * v422[230].i32[0] >= v495)
        {
          v502 = 0;
          v503 = 0;
          *((_DWORD *)v497 + 380) = v821;
          v422[v422[433].u32[0] + 452] = __dst;
          v504 = v431;
          v381 = v803;
          v501 = v807;
          v470 = v431 + 1;
          do
          {
            v505 = (char *)v422 + 4 * v503;
            if (*((_DWORD *)v505 + 969))
            {
              v506 = 0;
              v507 = (unsigned int *)(v505 + 3876);
              v508 = v504;
              do
              {
                v422[130].i32[v508 + dword_1B69356A8[v422[433].u32[0]]] = *(_DWORD *)&__b[4
                                                                                        * (v502 + v506)];
                v422[10].i32[v508 + dword_1B69356A8[v422[433].u32[0]]] = *((_DWORD *)&v843 + (v502 + v506));
                v422[70].i32[v508 + dword_1B69356A8[v422[433].u32[0]]] = *((_DWORD *)&v855
                                                                         + (v502 + v506++));
                v508 += 24;
              }
              while (v506 < *v507);
            }
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v422[232] + 48) + 16 * v431 + v503 + 24) = v422[v422[433].u32[0] + 452].i32[v503];
            ++v503;
            v502 += 5;
            v504 += 12;
          }
          while (v503 != v805);
          LODWORD(v469) = v422[433].i32[0];
        }
        else
        {
          v498 = __dst.i32[0];
          v422[12 * __dst.i32[0] + 130].i32[v496] = 0x7FFFFFFF;
          v499 = __dst.i32[1];
          v422[130].i32[(v431 + 24 * __dst.i32[1] + dword_1B69356A8[v422[433].u32[0]] + 12)] = 0x7FFFFFFF;
          v469 = v422[433].u32[0];
          v500 = &v422[v469];
          v500[452].i32[0] = v498;
          v500[452].i32[1] = v499;
          v381 = v803;
          v501 = v807;
          v470 = v431 + 1;
        }
      }
      else
      {
        v501 = v807;
      }
      v509 = byte_1B69355EC[v469];
      v510 = v422[232];
      v511 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v510 + 40) + 1);
      v512 = *(_QWORD *)(*(_QWORD *)&v510 + 48) + 16;
      if ((_DWORD)v469 == 3)
      {
        if (v511 == 3 || v511 == 5)
        {
          v514 = v422[442].i32[v431 + 1];
          v515 = v422[230].i32[0];
          if (v514 == -1)
            v516 = -1;
          else
            v516 = v515 + v514;
          v517 = 3 * v515;
          v518 = 3 * v515 + v422[130].i32[(v431 + 8)];
          v519 = 3 * v515 + v422[130].i32[(v431 + 20)];
          v520 = 5 * v515 + v422[190].i32[(v431 + 8)];
          if (v518 <= v519)
          {
            if (v520 >= v518)
              v521 = 4;
            else
              v521 = 6;
            if (v520 >= v518)
              v522 = 1;
            else
              v522 = 3;
          }
          else
          {
            if (v520 >= v519)
              v521 = 5;
            else
              v521 = 6;
            if (v520 >= v519)
              v522 = 2;
            else
              v522 = 3;
            v518 = v517 + v422[130].i32[(v431 + 20)];
          }
          v535 = v431;
          if (v520 >= v518)
            v520 = v518;
          if (v516 >= v520)
          {
            v516 = v520;
          }
          else
          {
            v521 = 3;
            v522 = 0;
          }
          *(_BYTE *)(v512 + 16 * v431 + 15) = v521;
          v541 = v422[433].u32[0];
          v422[446].i32[v541] += v516;
          v422[449].i16[v541 + 2] = -1;
          v422[445].i8[v541 + 1] = 22;
          v422[226].i8[v431] = v522;
          v469 = v422[433].u32[0];
          if ((_DWORD)v431 == 3)
          {
            v422[446].i32[v469] += 9 * v422[230].i32[0];
            v535 = 3;
          }
        }
        else
        {
          v422[226].i8[v431] = 0;
          *(_BYTE *)(v512 + 16 * v431 + 15) = 4;
          v469 = v422[433].u32[0];
          v536 = v431 + 8 + 24 * v422[v469 + 452].i32[0];
          v537 = v422[130].i32[v536];
          v538 = v422[196].u16[v536];
          if (v537 == -1 || (v539 = (char *)v422 + 4 * v469, v540 = *((_DWORD *)v539 + 892), v540 == -1))
            v422[446].i32[v469] = -1;
          else
            *((_DWORD *)v539 + 892) = v540 + v537 + v422[230].i32[0];
          v535 = v431;
          if (v538 == 0xFFFF
            || (v551 = (char *)v422 + 2 * v469, v552 = *((unsigned __int16 *)v551 + 1798), v552 == 0xFFFF))
          {
            v422[449].i16[v469 + 2] = -1;
          }
          else
          {
            *((_WORD *)v551 + 1798) = v552 + v538;
          }
        }
        goto LABEL_807;
      }
      v523 = v469;
      if (v511 != 5 && v511 != 3)
      {
        v542 = dword_1B69356A8[v469] + v431 + 24 * v422[v469 + 452].i32[0];
        v422[446].i32[v469] += v422[130].i32[v542];
        v422[449].i16[v469 + 2] += v422[196].i16[v542];
LABEL_795:
        v535 = v431;
        goto LABEL_807;
      }
      v525 = dword_1B69356A8[v469] + v431;
      v526 = v422[130].u32[v525];
      v527 = v422[130].u32[v525 + 12];
      v528 = v422[190].u32[v525];
      v422[449].i16[v469 + 2] = -1;
      if ((_DWORD)v469)
      {
        v529 = (_DWORD *)&v422[461] + v431;
        *v529 = 0;
        v530 = v512 + 16 * v431;
        *(_BYTE *)(v530 + 15) = 4;
        v531 = (_BYTE *)(v530 + 15);
        if (v527 < v526)
        {
          *v529 = 1;
          *v531 = 5;
          v526 = v527;
        }
        if (v422[230].i32[0] + v528 < v526)
        {
          *v529 = 2;
          *v531 = 6;
          v526 = v528;
        }
        v469 = v422[433].u32[0];
        v532 = (char *)v422 + 4 * v469;
        v533 = *((_DWORD *)v532 + 892) + v526;
        *((_DWORD *)v532 + 892) = v533;
        if ((_DWORD)v431 == 1)
        {
          v534 = dword_1B6935610[3 * (3 * v469 + v422[461].i32[0] - 3) + v422[461].u32[1]];
          v422[445].i8[v469 + 1] = dword_1B6935610[3 * (3 * v469 + v422[461].i32[0] - 3)
                                                 + v422[461].u32[1]];
          *((_DWORD *)v532 + 892) = v533 + v422[230].i32[0] * byte_1B693C048[v534];
          v535 = 1;
          goto LABEL_807;
        }
        goto LABEL_795;
      }
      v543 = v422[230].i32[0];
      v544 = 5 * v543 + v528;
      v545 = 3 * v543;
      v546 = 3 * v543 + v526;
      v422[445].i8[v523 + 1] = 3;
      v547 = v512 + 16 * v431;
      *(_BYTE *)(v547 + 15) = 6;
      v548 = (_BYTE *)(v547 + 15);
      if (v546 < v544)
      {
        v422[445].i8[v422[433].u32[0] + 1] = 1;
        *v548 = 4;
        v544 = v546;
      }
      v549 = v545 + v527;
      if (v549 < v544)
      {
        v422[445].i8[v422[433].u32[0] + 1] = 2;
        *v548 = 5;
        v544 = v549;
      }
      v535 = v431;
      v550 = v422[433].u32[0];
      v422[446].i32[v550] += v544;
      LODWORD(v469) = v550;
LABEL_807:
      v553 = (_BYTE *)(v512 + 16 * v535);
      v554 = &v422[v469 + 452];
      if (v553[15] == 6)
      {
        v555 = v422[460];
        *v554 = v555;
        LOBYTE(v554) = v555.i8[0];
      }
      else
      {
        LODWORD(v554) = v554->i32[0];
      }
      v553[8] = (_BYTE)v554;
      v556 = v422[v422[433].u32[0] + 452].i32[1];
      v553[9] = v556;
      v557 = v422[433].u32[0];
      if ((_DWORD)v557)
      {
        v558 = &v422[v557];
        v559 = dword_1B69356A8[v557] + v431;
        v560 = (v559 + 24 * v558[452].i32[0]);
        *(_DWORD *)__b = v422[70].i32[v560];
        v561 = (v559 + 24 * v558[452].i32[1] + 12);
        *(_DWORD *)&__b[4] = v422[70].i32[v561];
        v562 = v553[15];
        if (v562 == 3)
        {
          *(int32x2_t *)__b = *(int32x2_t *)((char *)&v422[v535 + 434] + 4);
          *((_WORD *)v553 + 4) = 0;
          v562 = v422[444].u8[v535 + 4];
          v553[15] = v562;
          v563 = (uint64_t)v422[232];
          v564 = (unint64_t *)__b;
          v565 = 0;
          v566 = 0;
        }
        else
        {
          v567.i32[0] = v422[10].i32[v560] << 16;
          v567.i32[1] = v422[10].i32[v560];
          v567.i32[2] = v422[10].i32[v561] << 16;
          v567.i32[3] = v422[10].i32[v561];
          v568.i64[0] = 0x700000007;
          v568.i64[1] = 0x700000007;
          v843 = (unint64_t)vmovn_s32(vmaxq_s32(vminq_s32(vshrq_n_s32(v567, 0x10uLL), v568), v568));
          v563 = (uint64_t)v422[232];
          v565 = v554;
          v566 = v556;
          v564 = &v843;
        }
        sub_1B689CBF8(v563, v564, v562, v565, v566, v431);
        if (v509 - 1 > v431)
        {
          if (v511 == 3 || v511 == 5)
          {
            if (*(int32x2_t *)((char *)&v422[484] + 4))
            {
              v569 = 0;
              v570 = (_BYTE *)(v512 + 16 * v470);
              v571 = v801;
              do
              {
                v570[8] = v569;
                v570[9] = v569;
                v570[15] = 6;
                sub_1B68FB254(*(_QWORD **)&v422[232], v470, __b);
                v422[70].i32[v571 + dword_1B69356A8[v422[433].u32[0]] - 12] = *(_DWORD *)__b;
                v422[70].i32[v571 + dword_1B69356A8[v422[433].u32[0]]] = *(_DWORD *)&__b[4];
                ++v569;
                v572 = v422[484].u32[1];
                if (v572 <= v422[485].i32[0])
                  v572 = v422[485].u32[0];
                v571 += 24;
              }
              while (v569 < v572);
            }
          }
          else if (v422[484].i32[1])
          {
            v573 = 0;
            v574 = v512 + 16 * v470;
            v575 = v801;
            do
            {
              *(_BYTE *)(v574 + 8) = v573;
              *(_BYTE *)(v574 + 15) = 4;
              sub_1B68FB254(*(_QWORD **)&v422[232], v470, __b);
              v422[70].i32[v575 + dword_1B69356A8[v422[433].u32[0]] - 12] = *(_DWORD *)__b;
              v422[70].i32[v575 + dword_1B69356A8[v422[433].u32[0]]] = *(_DWORD *)&__b[4];
              ++v573;
              v575 += 24;
            }
            while (v573 < v422[484].i32[1]);
          }
        }
      }
      ++v431;
      v434 = v799 + 1;
      ++v801;
    }
    while (v431 != v796);
    v174 = a3;
    v150 = v763;
    if (!v422[433].i32[0])
    {
      sub_1B68F58D4((uint64_t)v422);
      if (!v422[433].i32[0] && v809 != 3 && v809 != 5 && v422[483].i8[7])
        sub_1B68BF2CC(v817 + 216 * (v422[236].i32[1] + v422[237].i32[0] * v501));
    }
LABEL_829:
    v576 = (_BYTE *)(v777 + 7);
    if (v769 == 1 || v769 == 6)
    {
      v6 = v786;
      v577 = byte_1B69355F3[v787];
      v578 = *(_QWORD *)(v174 + 14096);
      if ((_DWORD)v787 != *(unsigned __int8 *)(v578 + v577 + 3561))
      {
        v582 = v774;
        goto LABEL_844;
      }
      if (v789[3557] == 2)
      {
        *(_DWORD *)(v578 + 3312) = *(unsigned __int8 *)(v790 + 2238);
        sub_1B68F6D74(*(_QWORD *)(v174 + 14096));
        *v576 = 0;
        sub_1B68A4454(v777, v786, a2, (uint64_t)&v839);
        v579 = v840;
      }
      else
      {
        v579 = *(_DWORD *)(v578 + 4 * v577 + 3568);
      }
      v582 = v774;
      if (v579 < v768)
      {
        v755 = v774;
LABEL_843:
        v768 = v579;
        goto LABEL_844;
      }
      if ((_DWORD)v787 != 22 || !v789[3544])
        goto LABEL_844;
      break;
    }
    v580 = *(_QWORD *)(v174 + 14096);
    v579 = *(_DWORD *)(v580 + 4 * v381 + 3568);
    v6 = v786;
    if (v784)
    {
      v753 = -1;
      v755 = v774;
      v768 = *(_DWORD *)(v580 + 4 * v381 + 3568);
      break;
    }
    v581 = *(_WORD *)(v580 + 2 * v381 + 3596);
    if (v789[3557] == 2)
    {
      *(_DWORD *)(v580 + 3312) = *(unsigned __int8 *)(v790 + 2238);
      sub_1B68F6D74(*(_QWORD *)(v174 + 14096));
      *v576 = 0;
      sub_1B68A4454(v777, v786, a2, (uint64_t)&v839);
      v579 = v840;
    }
    v582 = v774;
    if (v579 < v768)
    {
      v755 = v774;
      v753 = v581;
      goto LABEL_843;
    }
    if ((v787 - 3) <= 1)
    {
      if (v789[3545])
      {
        v583 = *(_QWORD *)(v174 + 14096);
        v584 = *(_QWORD *)(v583 + 1816);
        v582 = v774;
        if (v768
           + *(unsigned __int16 *)(v584 + 2 * ((__int16)*(_DWORD *)(v583 + 116) - (__int16)*(_DWORD *)(v583 + 596)))
           + *(unsigned __int16 *)(v584 + 2 * ((*(int *)(v583 + 116) >> 16) - (*(int *)(v583 + 596) >> 16)))
           + *(unsigned __int16 *)(v584 + 2 * ((__int16)*(_DWORD *)(v583 + 120) - (__int16)*(_DWORD *)(v583 + 600)))
           + *(unsigned __int16 *)(v584 + 2 * ((*(int *)(v583 + 120) >> 16) - (*(int *)(v583 + 600) >> 16))) <= v579)
          break;
      }
    }
LABEL_844:
    v371 = v582 + 1;
  }
  while (v371 != v765);
LABEL_885:
  v602 = v755;
  if ((v769 == 6 || v769 == 1) && v755 == *(_DWORD *)(v174 + 44))
  {
    v603 = v753;
    v7 = v782;
    goto LABEL_925;
  }
  v604 = v767 + 30432 * v755;
  *(_QWORD *)(v6 + 40) = v604 + 4;
  *(_QWORD *)(v6 + 48) = v604 + 64;
  *(_QWORD *)(v6 + 176) = v604 + 26560;
  *(_QWORD *)(v6 + 56) = v604 + 28432;
  *(_QWORD *)(v6 + 312) = *(_QWORD *)(v604 + 26544);
  *(_QWORD *)(v6 + 2624) = v604 + 27120;
  *(_QWORD *)(v6 + 2632) = *(_QWORD *)(v604 + 29248);
  *(_QWORD *)(v6 + 2560) = *(_QWORD *)(v604 + 27104);
  *(_QWORD *)(v6 + 2568) = *(_QWORD *)(v604 + 27112);
  *(_QWORD *)(v6 + 2544) = v604 + 29664;
  *(_QWORD *)(v6 + 2552) = v604 + 30176;
  *(_QWORD *)(v6 + 2528) = v604 + 29280;
  *(_QWORD *)(v6 + 2536) = v604 + 29536;
  v7 = v782;
  if (v784)
  {
    v605 = *(_DWORD *)(*(_QWORD *)(v174 + 14096) + 560);
    v606 = *(_QWORD *)(v6 + 48);
    *(_WORD *)(v606 + 24) = 0;
    *(_WORD *)(*(_QWORD *)(v6 + 48) + 16) = 0;
    *(_WORD *)(*(_QWORD *)(v6 + 48) + 18) = 0;
    *(_WORD *)(*(_QWORD *)(v6 + 48) + 20) = 0;
    *(_WORD *)(*(_QWORD *)(v6 + 48) + 22) = 0;
    v607 = *(unsigned __int8 *)(v606 + 24);
    v608 = *(_QWORD *)(*(_QWORD *)(v6 + 176) + 272);
    *(_DWORD *)v608 = v605;
    *(_DWORD *)(v608 + 4) = 0;
    *(_BYTE *)(v608 + 8) = v607;
    *(_BYTE *)(v608 + 9) = 32;
    v610 = v607 != 32 && *(_BYTE *)(v6 + 31) == 2;
    *(_BYTE *)(v608 + 12) = *(_BYTE *)(*(_QWORD *)(v6 + 256) + (v607 >> v610));
    *(_BYTE *)(v608 + 13) = 0;
    if (v789[3557] == 2)
    {
      *(_BYTE *)(v604 + 7) = 0;
      sub_1B68A4454(v604, v6, a2, (uint64_t)&v851);
      v768 = DWORD2(v851);
    }
    v611 = *(_QWORD *)(v174 + 14096);
LABEL_905:
    v603 = v753;
  }
  else
  {
    v611 = *(_QWORD *)(v174 + 14096);
    if (v789[3557] == 2)
      goto LABEL_905;
    v612 = *(unsigned __int8 *)(v604 + 6);
    *(_DWORD *)(v611 + 3312) = *(unsigned __int8 *)(v790 + 2238);
    sub_1B68F6D74(*(_QWORD *)(v174 + 14096));
    if (v769 == 1 || v769 == 6)
    {
      v611 = *(_QWORD *)(v174 + 14096);
      v768 = *(_DWORD *)(v611 + 4 * byte_1B69355F3[v612] + 3568);
      goto LABEL_905;
    }
    v748 = byte_1B693560A[v612];
    v611 = *(_QWORD *)(v174 + 14096);
    v768 = *(_DWORD *)(v611 + 4 * v748 + 3568);
    v603 = *(_WORD *)(v611 + 2 * v748 + 3596);
  }
  v613 = *(_QWORD **)(v611 + 1856);
  v614 = (unsigned __int8 *)v613[5];
  v615 = (unsigned __int8 *)v613[6];
  v616 = *(_QWORD *)(v613[22] + 272);
  v617 = v614[1];
  switch(v614[1])
  {
    case 2u:
    case 4u:
      v618 = v614[2];
      if ((v618 - 3) < 2)
      {
        v619 = v615[272];
        goto LABEL_913;
      }
      if (v617 != 3)
        goto LABEL_916;
      goto LABEL_912;
    case 3u:
    case 5u:
      v618 = v614[2];
LABEL_912:
      v619 = v615[272];
      if (v618 != 22)
        goto LABEL_917;
LABEL_913:
      for (k = 0; k != 4; ++k)
        *(_DWORD *)&v614[4 * k + 4] = *(unsigned __int8 *)(v611 + 1808 + k);
      sub_1B68BA234(*v615, v617, (uint64_t)(v614 + 4), (uint64_t)(v614 + 20), (uint64_t)(v614 + 36), (uint64_t)(v615 + 16));
      break;
    default:
LABEL_916:
      v619 = v615[272];
LABEL_917:
      sub_1B68BA5B4(*v615, v615[1], v614, v615);
      break;
  }
  *(_WORD *)(v616 + 10) = *((_WORD *)v615 + 13);
  if (v619)
  {
    v621 = v619;
    v622 = (_BYTE *)(v611 + 3556);
    v623 = v615 + 31;
    v602 = v755;
    do
    {
      if (*v623 == 3)
        *v623 = *v622;
      ++v622;
      v623 += 16;
      --v621;
    }
    while (v621);
  }
  else
  {
    v602 = v755;
  }
LABEL_925:
  DWORD2(v851) = v768;
  v114 = v603;
  v830 = v852;
  v829 = v851;
  if (v789[3557] == 1)
  {
    v624 = v767 + 30432 * v602;
    *(_BYTE *)(v624 + 7) = 0;
    sub_1B68A4454(v624, v6, a2, (uint64_t)&v829);
  }
  v112 = 0;
  v776 = v602;
LABEL_928:
  v368 = v795;
LABEL_929:
  if (v368 && v368 != 5)
    v770 = (_QWORD *)(a3 + 128);
  v111 = *v770 + 30432 * v776;
  if (v778)
  {
    v115 = 1;
    v113 = 1;
  }
  else
  {
    v115 = 0;
    if (v766 > 0x1FF
      || *(_BYTE *)(*(_QWORD *)(v7 + 136) + 577) == 1
      || (v115 = 0, (v759 - 9) > 0xE)
      || xmmword_1EF139E55[v766] < 9)
    {
      v113 = 0;
    }
    else if ((*(_BYTE *)(v6 + 28) == 5 || !*(_BYTE *)(v6 + 28))
           && ((v625 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 14096) + 2938), v625 > 0x1FF)
            || xmmword_1EF139E55[v625] < 0))
    {
      v115 = 0;
      v113 = 0;
    }
    else
    {
      v626 = xmmword_1EF139E55[v766] + 92;
      v115 = 0;
      v113 = 0;
      if (DWORD2(v829) <= 2 * v626)
      {
        v785 = 0;
        DWORD2(v829) = 0;
      }
      else
      {
        DWORD2(v829) -= v626;
      }
    }
  }
LABEL_945:
  v627 = *(unsigned __int8 *)(v6 + 28);
  if ((v627 == 6 || v627 == 1) && *(_BYTE *)(v790 + 2233))
  {
    v628 = (float)(a5 * (float)*(unsigned __int8 *)(v790 + 2233)) * 0.0039062;
    *(float *)&v95 = v628 + 0.5;
    v791 = (int)(float)(v628 + 0.5);
    LOWORD(v95) = *(_WORD *)a3;
    v96 = (double)(unint64_t)v95;
    v629 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v790 + 4696) + 2 * *(unsigned int *)(v6 + 16));
    v630 = *(unsigned __int8 *)(*(_QWORD *)v790 + 1394);
    v631 = (double)(int)(float)(v628 + -12.0);
    v632 = exp2(v631 / 3.0);
    v5 = sub_1B68F7888(v632);
    v633 = 1.0;
    if (!v630 && v629)
    {
      v634 = sub_1B68F7888(v631 / 6.0);
      v635 = 4.0;
      if (v634 <= 4.0)
        v635 = v634;
      if (v634 >= 2.0)
        v633 = v635;
      else
        v633 = 2.0;
    }
    v636 = sub_1B68F7888(v5 * 0.680000007 * v633);
    if (v636 <= v96)
      v96 = v636;
    v772 = v791 - *v788;
  }
  if (v785 && !(v784 | v773))
  {
    if (!v779)
      goto LABEL_990;
    v637 = *(unsigned __int8 *)(a3 + 31);
    if ((v637 & 0xFE) != 2)
      goto LABEL_990;
    v638 = *(_QWORD *)(v6 + 216);
    v639 = *(unsigned int *)(v6 + 16);
    if (v637 == 3)
    {
      v640 = 0;
      while (*(_DWORD *)(*(_QWORD *)(v638 + 4744) + 4 * (v640 | (4 * v639))) > 2u)
      {
        if (++v640 == 4)
          goto LABEL_966;
      }
LABEL_990:
      v662 = 0;
      if (v795 != 2 && v795 != 7)
      {
        if (*(_BYTE *)(a3 + 4))
        {
          v662 = 0;
        }
        else
        {
          v663 = 0;
          v664 = *(unsigned int *)(v6 + 16);
          v665 = v664 - *(_DWORD *)(a2 + 14176);
          v666 = *(_OWORD *)(v6 + 144);
          *(_OWORD *)__b = *(_OWORD *)(v6 + 128);
          *(_OWORD *)&__b[16] = v666;
          v667 = 1;
          do
          {
            v668 = *(_QWORD *)&__b[8 * v663];
            if (v668 && *(_BYTE *)(v668 + 208) != 34)
              break;
            v667 = v663++ < 3;
          }
          while (v663 != 4);
          if (v795 != 5 && v795)
          {
            v673 = 0;
          }
          else
          {
            v669 = **(_QWORD **)(v6 + 224);
            v670 = *(_QWORD *)(*(_QWORD *)(v669 + 1256) + 8 * v664);
            v258 = v669 + 1184 > v670;
            v671 = v669 + 1216;
            v673 = !v258 && v670 <= v671;
          }
          v662 = 0;
          if (v665 >= 5 && !v667 && (v673 & 1) == 0)
            v662 = v665 >= 3 * *(_DWORD *)(a2 + 50628);
        }
      }
      if ((char)v791 >= 51)
        v674 = 51;
      else
        v674 = (char)v791;
      v675 = byte_1B6933E0A[(int)v674];
      LOBYTE(v791) = v674;
      sub_1B68ABF4C(v674, v772, a3, v6, v96);
      HIDWORD(v773) = v675;
      sub_1B68A4950(v7, a2, a3, v6, (uint64_t)&v833, (uint64_t)&v831, v662, v675, DWORD2(v829));
    }
    else
    {
LABEL_966:
      v641 = *(_QWORD *)(v6 + 72);
      v642 = v641 + 32 * v639;
      __dst.i16[0] = *(_WORD *)(v642 + 24);
      *(_QWORD *)&v855 = *(_QWORD *)v642;
      v643 = *(unsigned __int8 *)(v642 + 26);
      *(_QWORD *)&v851 = *(_QWORD *)(v642 + 8);
      if (!v643)
        goto LABEL_990;
      v644 = 0;
      v645 = *(_OWORD *)(v6 + 144);
      *(_OWORD *)__b = *(_OWORD *)(v6 + 128);
      *(_OWORD *)&__b[16] = v645;
      v646 = v639 - 1;
      v647 = v639 - *(_DWORD *)(v6 + 20);
      v843 = __PAIR64__(v647, v646);
      v844 = vadd_s32(vdup_n_s32(v647), (int32x2_t)0xFFFFFFFF00000001);
      while (1)
      {
        if (*(_QWORD *)&__b[8 * v644])
        {
          v648 = *((_DWORD *)&v843 + v644);
          if (*(_BYTE *)(*(_QWORD *)(v638 + 4920) + 216 * v648 + 61))
          {
            v649 = v641 + 32 * (int)v648;
            WORD2(v836) = *(_WORD *)(v649 + 24);
            v650 = *(_QWORD *)(v649 + 8);
            v839 = *(_QWORD *)v649;
            LODWORD(v649) = *(unsigned __int8 *)(v649 + 26);
            *(_QWORD *)&v853 = v650;
            if ((_DWORD)v649)
              break;
          }
        }
LABEL_989:
        if (++v644 == 4)
          goto LABEL_990;
      }
      v651 = 0;
      v652 = 0;
      while (1)
      {
        if (!__dst.i8[v652] && !*((_BYTE *)&v836 + v652 + 4))
        {
          v653 = (__int16 *)&v839 + 2 * v652;
          v654 = (__int16 *)&v855 + 2 * v652;
          v655 = *v653 - *v654;
          if (v655 < 0)
            v655 = *v654 - *v653;
          v656 = v653[1] - v654[1];
          if (v656 >= 0)
            v657 = v656;
          else
            v657 = -v656;
          v658 = *((_DWORD *)&v853 + v652);
          v659 = *((_DWORD *)&v851 + v652);
          v660 = v658 - v659;
          if (v660 < 0)
            v660 = -v660;
          v661 = v655 > 0xF || v657 > 0xF;
          if (!v661 && 100 * v660 / (v659 + 1) < 45)
            break;
        }
        if ((v651 & 1) == 0 && v795 != 5)
        {
          v651 = 1;
          v652 = 1;
          if (v795)
            continue;
        }
        goto LABEL_989;
      }
    }
  }
  if (v112)
    v676 = 1;
  else
    v676 = v115;
  if ((v676 & 1) != 0 || (*(_BYTE *)(v111 + 7) = 0, !v789[3532]))
  {
    v677 = 1;
    v678 = a3;
    goto LABEL_1023;
  }
  if (v789[3557])
  {
    v677 = 1;
    v678 = a3;
  }
  else
  {
    v783 = v7;
    *(_QWORD *)(v6 + 40) = v111 + 4;
    *(_QWORD *)(v6 + 48) = v111 + 64;
    *(_QWORD *)(v6 + 176) = v111 + 26560;
    *(_QWORD *)(v6 + 56) = v111 + 28432;
    *(_QWORD *)(v6 + 312) = *(_QWORD *)(v111 + 26544);
    *(_QWORD *)(v6 + 2624) = v111 + 27120;
    *(_QWORD *)(v6 + 2632) = *(_QWORD *)(v111 + 29248);
    *(_QWORD *)(v6 + 2560) = *(_QWORD *)(v111 + 27104);
    *(_QWORD *)(v6 + 2568) = *(_QWORD *)(v111 + 27112);
    *(_QWORD *)(v6 + 2544) = v111 + 29664;
    *(_QWORD *)(v6 + 2552) = v111 + 30176;
    *(_QWORD *)(v6 + 2528) = v111 + 29280;
    *(_QWORD *)(v6 + 2536) = v111 + 29536;
    v700 = *(_DWORD *)(v6 + 4);
    v701 = *(_QWORD *)(v6 + 216);
    v702 = (16 * *(_DWORD *)v6);
    v703 = *(_QWORD *)(v701 + 136);
    v704 = *(_DWORD *)(v701 + 232);
    v705 = *(_QWORD *)(v701 + 128) + v702 + (16 * v700 * v704);
    LODWORD(v701) = *(_DWORD *)(v701 + 248);
    *(_QWORD *)__b = v705;
    *(_QWORD *)&__b[16] = v703 + v702 + (8 * v700 * v701);
    *(_DWORD *)&__b[8] = v704;
    *(_DWORD *)&__b[24] = v701;
    v843 = v111 + 29280;
    v845 = v111 + 29536;
    v844.i32[0] = 16;
    v846 = 16;
    *(_QWORD *)&v855 = v111 + 29664;
    *(_QWORD *)&v856 = v111 + 30176;
    DWORD2(v855) = 32;
    DWORD2(v856) = 32;
    sub_1B68FD510(v6, (uint64_t *)__b, (uint64_t)&v843, (uint64_t *)&v855);
    if (v114 == 0xFFFF || v114 == -1)
      v114 = off_1EF13A428(v111 + 29664);
    v706 = off_1EF13A430;
    v707 = off_1EF13A430(v111 + 29664, 16);
    v708 = v706(v111 + 29680, 16);
    v709 = v706(v111 + 29920, 16);
    v710 = v707 - v114 + v708 + v709 + v706(v111 + 29936, 16);
    if (v710 >= *(_DWORD *)(v790 + 100))
    {
      v677 = 0;
      v678 = a3;
      v7 = v783;
    }
    else
    {
      v678 = a3;
      v7 = v783;
      if (!v784 && v710 < 0)
        DWORD2(v829) += v710;
      v677 = 0;
      *(_BYTE *)(v111 + 7) = 1;
    }
  }
  if (v789[3532])
  {
    v679 = v795;
    if (v789[3557])
    {
      *(_BYTE *)(v111 + 7) = 1;
      sub_1B68A4454(v111, v6, a2, (uint64_t)__b);
      if (DWORD2(v829) > *(_DWORD *)&__b[8] && *(_BYTE *)(*(_QWORD *)(v6 + 40) + 52))
        DWORD2(v829) = *(_DWORD *)&__b[8];
      else
        *(_BYTE *)(v111 + 7) = 0;
      v677 = 1;
      goto LABEL_1023;
    }
  }
  else
  {
LABEL_1023:
    v679 = v795;
  }
  if ((v679 == 6 || v679 == 1) && *(_BYTE *)(*(_QWORD *)(v7 + 136) + 634))
    DWORD2(v829) = (DWORD2(v829) * (256 - *(unsigned __int8 *)(*(_QWORD *)(v7 + 136) + 634))) >> 8;
  if (DWORD2(v831) < DWORD2(v829))
    v680 = 1;
  else
    v680 = v112;
  if (!v680)
  {
    *(_QWORD *)(v6 + 40) = v111 + 4;
    *(_QWORD *)(v6 + 48) = v111 + 64;
    *(_QWORD *)(v6 + 176) = v111 + 26560;
    *(_QWORD *)(v6 + 56) = v111 + 28432;
    *(_QWORD *)(v6 + 312) = *(_QWORD *)(v111 + 26544);
    *(_QWORD *)(v6 + 2624) = v111 + 27120;
    *(_QWORD *)(v6 + 2632) = *(_QWORD *)(v111 + 29248);
    *(_QWORD *)(v6 + 2560) = *(_QWORD *)(v111 + 27104);
    *(_QWORD *)(v6 + 2568) = *(_QWORD *)(v111 + 27112);
    *(_QWORD *)(v6 + 2544) = v111 + 29664;
    *(_QWORD *)(v6 + 2552) = v111 + 30176;
    *(_QWORD *)(v6 + 2528) = v111 + 29280;
    *(_QWORD *)(v6 + 2536) = v111 + 29536;
    *(_QWORD *)(v678 + 136) = v111;
    if (v113)
      goto LABEL_1047;
    sub_1B6907748(v6, v677);
    if (v760 && v789[3551])
    {
      *(_DWORD *)__b = 0;
      sub_1B68A3CA4(v6, v678, 0, *v771, (int *)__b);
      LODWORD(v5) = *(_DWORD *)__b;
      v686 = sub_1B6903AB8(v775, v111 + 29280, 0x10u);
      if (v757 < sub_1B6903AB8(v758, v111 + 29536, 8u)
                + v686
                + (v96 * (double)*(unint64_t *)&v5))
      {
        if (v795 == 6 || v795 == 1)
          v687 = (_QWORD *)(v678 + 128);
        else
          v687 = (_QWORD *)(v678 + 120);
        v747 = (_QWORD *)(*v687 + 30432 * *(unsigned int *)(v678 + 48));
        *(_QWORD *)(v6 + 40) = (char *)v747 + 4;
        *(_QWORD *)(v6 + 48) = v747 + 8;
        *(_QWORD *)(v6 + 176) = v747 + 3320;
        *(_QWORD *)(v6 + 56) = v747 + 3554;
        *(_QWORD *)(v6 + 312) = v747[3318];
        *(_QWORD *)(v6 + 2624) = v747 + 3390;
        *(_QWORD *)(v6 + 2632) = v747[3656];
        *(_QWORD *)(v6 + 2560) = v747[3388];
        *(_QWORD *)(v6 + 2568) = v747[3389];
        *(_QWORD *)(v6 + 2544) = v747 + 3708;
        *(_QWORD *)(v6 + 2552) = v747 + 3772;
        *(_QWORD *)(v6 + 2528) = v747 + 3660;
        *(_QWORD *)(v6 + 2536) = v747 + 3692;
        *(_QWORD *)(v678 + 136) = v747;
      }
LABEL_1124:
      v751 = *(_QWORD *)(a2 + 47888);
      if (*(_BYTE *)(*(_QWORD *)(v6 + 40) + 3))
        ++*(_DWORD *)(v751 + 16);
      else
        ++*(_DWORD *)(v751 + 20);
      goto LABEL_1047;
    }
    if (*(_BYTE *)(v678 + 9))
    {
      v714 = *(_BYTE **)(v6 + 40);
      if (v714[1] == 2 && !v714[2] && !v714[52] && !v714[53] && !*(_BYTE *)(*(_QWORD *)(v6 + 48) + 24))
      {
        v715 = *(_QWORD *)(v678 + 120);
        v716 = *(_DWORD *)(v678 + 48);
        sub_1B68A3BDC(v715 + 30432 * v716, v6);
        v717 = *(unsigned __int8 *)(v6 + 188);
        v718 = *(_QWORD *)(v6 + 176);
        *(_QWORD *)(v718 + 240) = 0;
        *(_QWORD *)(v718 + 248) = 0;
        *(_QWORD *)(v718 + 256) = 0;
        *(_QWORD *)&v719 = 0x2222222222222222;
        *((_QWORD *)&v719 + 1) = 0x2222222222222222;
        *(_OWORD *)(v718 + 208) = v719;
        *(_OWORD *)(v718 + 224) = v719;
        if (v717)
        {
          *(_BYTE *)(v718 + 176) = 0;
          *(_DWORD *)(v718 + 177) = -1;
          *(_BYTE *)(v718 + 181) = -1;
          *(_BYTE *)(v718 + 199) = 0;
          *(_QWORD *)&v720 = 0x2020202020202020;
          *((_QWORD *)&v720 + 1) = 0x2020202020202020;
          *(_OWORD *)(v718 + 128) = v720;
          *(_OWORD *)(v718 + 144) = v720;
          *(_OWORD *)v718 = 0u;
          *(_OWORD *)(v718 + 16) = 0u;
          *(_OWORD *)(v718 + 32) = 0u;
          *(_OWORD *)(v718 + 48) = 0u;
          *(_OWORD *)(v718 + 64) = 0u;
          *(_OWORD *)(v718 + 80) = 0u;
          *(_OWORD *)(v718 + 96) = 0u;
          *(_OWORD *)(v718 + 112) = 0u;
          *(_QWORD *)(v718 + 160) = *(_QWORD *)(v718 + 272);
          *(_QWORD *)(v718 + 168) = 0;
        }
        sub_1B68BA4A4(v6);
        sub_1B68FB9B4(v6, v721, v722, v723, v724, v725);
        v726 = **(_DWORD **)(*(_QWORD *)(v6 + 176) + 272);
        if (v726 == **(_DWORD **)(v111 + 26832))
        {
          v727 = (_OWORD *)(v715 + 30432 * v716);
          v728 = *(_OWORD *)(v111 + 29280);
          v729 = *(_OWORD *)(v111 + 29296);
          v730 = *(_OWORD *)(v111 + 29312);
          v727[1833] = *(_OWORD *)(v111 + 29328);
          v727[1832] = v730;
          v727[1831] = v729;
          v727[1830] = v728;
          v731 = *(_OWORD *)(v111 + 29344);
          v732 = *(_OWORD *)(v111 + 29360);
          v733 = *(_OWORD *)(v111 + 29376);
          v727[1837] = *(_OWORD *)(v111 + 29392);
          v727[1836] = v733;
          v727[1835] = v732;
          v727[1834] = v731;
          v734 = *(_OWORD *)(v111 + 29408);
          v735 = *(_OWORD *)(v111 + 29424);
          v736 = *(_OWORD *)(v111 + 29440);
          v727[1841] = *(_OWORD *)(v111 + 29456);
          v727[1840] = v736;
          v727[1839] = v735;
          v727[1838] = v734;
          v737 = *(_OWORD *)(v111 + 29472);
          v738 = *(_OWORD *)(v111 + 29488);
          v739 = *(_OWORD *)(v111 + 29504);
          v727[1845] = *(_OWORD *)(v111 + 29520);
          v727[1844] = v739;
          v727[1843] = v738;
          v727[1842] = v737;
          v740 = *(_OWORD *)(v111 + 29536);
          v741 = *(_OWORD *)(v111 + 29552);
          v742 = *(_OWORD *)(v111 + 29568);
          v727[1849] = *(_OWORD *)(v111 + 29584);
          v727[1848] = v742;
          v727[1847] = v741;
          v727[1846] = v740;
          v743 = *(_OWORD *)(v111 + 29600);
          v744 = *(_OWORD *)(v111 + 29616);
          v745 = *(_OWORD *)(v111 + 29632);
          v727[1853] = *(_OWORD *)(v111 + 29648);
          v727[1852] = v745;
          v727[1851] = v744;
          v727[1850] = v743;
          v746 = *(_QWORD *)(v678 + 120) + 30432 * v716;
        }
        else
        {
          if (!v784 || v726 != *(_DWORD *)(*(_QWORD *)(v678 + 14096) + 80))
          {
            sub_1B68A3BDC(v111, v6);
            goto LABEL_1116;
          }
          v746 = *(_QWORD *)(v678 + 120) + 30432 * v716;
        }
        *(_QWORD *)(v678 + 136) = v746;
      }
    }
LABEL_1116:
    if (!*(_BYTE *)(v6 + 188))
    {
      v749 = *(_QWORD *)(v6 + 40);
      if (*(_BYTE *)(v749 + 1) == 2 && *(_BYTE *)(v749 + 2) == 3)
      {
        v750 = *(_BYTE **)(v6 + 48);
        if (!v750[24] && !v750[40] && !v750[56] && !v750[72])
          *(_BYTE *)(v749 + 2) = 4;
      }
    }
    goto LABEL_1124;
  }
  *(_BYTE *)(*(_QWORD *)(v6 + 72) + 32 * *(unsigned int *)(v6 + 16) + 28) = 1;
  *(_DWORD *)__b = 0;
  sub_1B68A66A0((char)v791, v678, v6, *(_DWORD *)(a2 + 14184), SHIDWORD(v773), (int *)__b);
  v681 = v833;
  *(_BYTE *)(v833 + 353) = __b[0];
  *(_QWORD *)(v681 + 29248) = v678 + 928 * *v789 + 10576;
  if (*(_BYTE *)(v681 + 6))
    *(_BYTE *)(v681 + 27120) = sub_1B6901C8C(v681 + 27408, ((32 * (*(_BYTE *)(v681 + 59) % 6u)) | (*(_BYTE *)(v681 + 59) / 6u) & 0x1F), v681 + 27920, (__int16 *)(v681 + 28432), (__int16 *)(v681 + 28464), *(unsigned __int8 *)(v6 + 29));
  v682 = *(_QWORD *)(v678 + 112);
  if (v681 == v682 + 121728)
  {
    v685 = (_DWORD *)(*(_QWORD *)(a2 + 47888) + 28);
  }
  else
  {
    v683 = v682 + 152160;
    v684 = *(_QWORD *)(a2 + 47888);
    if (v681 == v683)
      v685 = (_DWORD *)(v684 + 24);
    else
      v685 = (_DWORD *)(v684 + 32);
  }
  ++*v685;
  *(_QWORD *)(v6 + 40) = v681 + 4;
  *(_QWORD *)(v6 + 48) = v681 + 64;
  *(_QWORD *)(v6 + 176) = v681 + 26560;
  *(_QWORD *)(v6 + 56) = v681 + 28432;
  *(_QWORD *)(v6 + 312) = *(_QWORD *)(v681 + 26544);
  *(_QWORD *)(v6 + 2624) = v681 + 27120;
  *(_QWORD *)(v6 + 2632) = *(_QWORD *)(v681 + 29248);
  *(_QWORD *)(v6 + 2560) = *(_QWORD *)(v681 + 27104);
  *(_QWORD *)(v6 + 2568) = *(_QWORD *)(v681 + 27112);
  *(_QWORD *)(v6 + 2544) = v681 + 29664;
  *(_QWORD *)(v6 + 2552) = v681 + 30176;
  *(_QWORD *)(v6 + 2528) = v681 + 29280;
  *(_QWORD *)(v6 + 2536) = v681 + 29536;
  *(_QWORD *)(v678 + 136) = v681;
  ++*(_DWORD *)(a2 + 50628);
LABEL_1047:
  v688 = *(_DWORD *)(v6 + 16);
  v689 = *(_QWORD *)(v6 + 40);
  v690 = *(unsigned __int8 *)(v689 + 1);
  v691 = *(unsigned __int8 *)(v689 + 2);
  v692 = *(_QWORD *)(*(_QWORD *)(v6 + 216) + 4920);
  v693 = v692 + 216 * v688;
  *(_OWORD *)(v693 + 24) = v831;
  *(_QWORD *)(v693 + 40) = v832;
  *(_OWORD *)v693 = v829;
  *(_QWORD *)(v693 + 16) = v830;
  if (v690 > 1)
  {
    v698 = v692 + 216 * v688;
    *(_DWORD *)(v698 + 58) = 0x1000000;
    *(_BYTE *)(v698 + 63) = (v690 & 0xFE) == 4;
    switch(v690)
    {
      case 2u:
      case 4u:
        if ((v691 - 3) >= 2u)
        {
          if (v690 != 3)
            goto LABEL_1071;
          goto LABEL_1070;
        }
        v699 = 1;
        break;
      case 3u:
      case 5u:
LABEL_1070:
        v699 = v691 == 22;
        break;
      default:
LABEL_1071:
        v699 = 0;
        break;
    }
    *(_BYTE *)(v692 + 216 * v688 + 62) = v699;
    v711 = 1;
    switch(v690)
    {
      case 2u:
      case 4u:
        break;
      case 3u:
      case 5u:
        v711 = v691 != 7 && (v691 & 0xFFFFFFFB) != 2;
        break;
      default:
        v711 = 0;
        break;
    }
    *(_BYTE *)(v692 + 216 * v688 + 64) = v711;
    if (v690 == 5 || v690 == 3)
    {
      if (v691 > 5)
        LOBYTE(v713) = 1;
      else
        v713 = (0xDu >> v691) & 1;
    }
    else
    {
      LOBYTE(v713) = 0;
    }
    *(_BYTE *)(v692 + 216 * v688 + 65) = v713;
  }
  else
  {
    v694 = v692 + 216 * v688;
    *(_BYTE *)(v694 + 58) = 1;
    if (v690)
      v695 = 1;
    else
      v695 = v691 == 0;
    v697 = !v695 && v691 != 25;
    *(_BYTE *)(v694 + 59) = v697;
    *(_BYTE *)(v694 + 60) = (v691 | v690) == 0;
    *(_DWORD *)(v694 + 61) = 0;
    *(_BYTE *)(v694 + 65) = 0;
  }
}

uint64_t sub_1B68ABE58(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v8;
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 + 13032);
  v6 = *(_QWORD *)(a2 + 13040);
  if (*(_BYTE *)(a1 + 188))
  {
    v8 = *(_DWORD **)(a1 + 192);
    sub_1B68F8570((uint64_t)v8, (uint64_t *)(a2 + 14064), *(unsigned __int8 *)(a1 + 28), 1u);
    v9 = v8[10] + v8[6] + 8 * (*v8 - v8[2]);
    v10 = (v9 & ~(v9 >> 31)) - *(_DWORD *)(a2 + 14088);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(v6 + 16);
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v6 + 32);
    *(_BYTE *)(v5 + 36) = *(_BYTE *)(v6 + 36);
    result = (uint64_t)memcpy(v8, (const void *)(a2 + 13088), 0x3D0uLL);
  }
  else
  {
    result = sub_1B68AD158(*(_QWORD *)(a2 + 13032), a3);
    v12 = *(_QWORD *)(v6 + 16);
    v10 = *(unsigned __int8 *)(v5 + 36) + 8 * (*(_DWORD *)(v5 + 16) - v12) - *(unsigned __int8 *)(v6 + 36);
    *(_QWORD *)(v5 + 16) = v12;
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v6 + 32);
    *(_BYTE *)(v5 + 36) = *(_BYTE *)(v6 + 36);
  }
  *a4 = v10;
  return result;
}

uint64_t sub_1B68ABF4C(uint64_t result, char a2, uint64_t a3, uint64_t a4, double a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;

  v5 = *(_DWORD *)(a3 + 88);
  v7 = *(_QWORD *)(a4 + 128);
  v6 = *(_QWORD *)(a4 + 136);
  v8 = *(_QWORD *)(a4 + 152);
  v9 = v7 != 0;
  v10 = v6 != 0;
  v11 = v8 != 0;
  if (!*(_BYTE *)(a3 + 12432))
  {
LABEL_21:
    if (!v5)
      return result;
    goto LABEL_22;
  }
  if (v7)
  {
    if (*(_BYTE *)(v7 + 224) == 34)
    {
      if (*(_BYTE *)(v7 + 208) == 34)
        v9 = 0;
      if (!v6)
      {
LABEL_9:
        v10 = 0;
        if (!v8)
          goto LABEL_16;
        goto LABEL_19;
      }
    }
    else
    {
      v9 = 1;
      if (!v6)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = 0;
    if (!v6)
      goto LABEL_9;
  }
  if (*(_BYTE *)(v6 + 224) == 34)
  {
    if (*(_BYTE *)(v6 + 208) == 34)
      v10 = 0;
    if (!v8)
    {
LABEL_16:
      v11 = 0;
      if (!v5)
        return result;
      goto LABEL_22;
    }
  }
  else
  {
    v10 = 1;
    if (!v8)
      goto LABEL_16;
  }
LABEL_19:
  if (*(_BYTE *)(v8 + 224) == 34)
  {
    v11 = *(unsigned __int8 *)(v8 + 208) != 34;
    goto LABEL_21;
  }
  v11 = 1;
  if (!v5)
    return result;
LABEL_22:
  v12 = 0;
  v13 = *(_QWORD *)(a3 + 112);
  if (!v10 || !v9)
    v11 = 0;
  v15 = 30432 * v5;
  *(_QWORD *)&v16 = 0x2222222222222222;
  *((_QWORD *)&v16 + 1) = 0x2222222222222222;
  *(_QWORD *)&v17 = 0x2020202020202020;
  *((_QWORD *)&v17 + 1) = 0x2020202020202020;
  do
  {
    v18 = v13 + v12;
    if (*(_BYTE *)(v13 + v12 + 6))
    {
      v19 = v10;
      switch(*(_BYTE *)(v18 + 352))
      {
        case 0:
          goto LABEL_34;
        case 1:
          v19 = v9;
          goto LABEL_34;
        case 2:
          break;
        case 3:
          v19 = v11;
LABEL_34:
          *(_DWORD *)v18 = v19;
          if (v19)
            goto LABEL_35;
          goto LABEL_38;
        default:
          *(_DWORD *)v18 = 0;
          goto LABEL_38;
      }
    }
    *(_DWORD *)v18 = 1;
LABEL_35:
    v20 = *(unsigned __int8 *)(a4 + 188);
    v21 = v13 + v12;
    *(_BYTE *)(v21 + 59) = result;
    *(_BYTE *)(v21 + 58) = a2;
    *(double *)(v21 + 26544) = a5;
    *(_QWORD *)(v21 + 26800) = 0;
    *(_QWORD *)(v21 + 26816) = 0;
    *(_QWORD *)(v21 + 26808) = 0;
    *(_OWORD *)(v21 + 26768) = v16;
    *(_OWORD *)(v21 + 26784) = v16;
    if (v20)
    {
      *(_BYTE *)(v13 + 26736 + v12) = 0;
      *(_DWORD *)(v21 + 26737) = -1;
      *(_BYTE *)(v21 + 26741) = -1;
      *(_QWORD *)(v21 + 26728) = 0;
      *(_BYTE *)(v13 + 26759 + v12) = 0;
      *(_OWORD *)(v21 + 26688) = v17;
      *(_OWORD *)(v21 + 26704) = v17;
      *(_OWORD *)(v21 + 26560) = 0uLL;
      *(_OWORD *)(v21 + 26576) = 0uLL;
      *(_OWORD *)(v21 + 26592) = 0uLL;
      *(_OWORD *)(v21 + 26608) = 0uLL;
      *(_OWORD *)(v21 + 26624) = 0uLL;
      *(_OWORD *)(v21 + 26640) = 0uLL;
      *(_OWORD *)(v21 + 26656) = 0uLL;
      *(_OWORD *)(v21 + 26672) = 0uLL;
      *(_QWORD *)(v21 + 26720) = *(_QWORD *)(v21 + 26832);
    }
    *(_BYTE *)(v21 + 353) = 0;
LABEL_38:
    v12 += 30432;
  }
  while (v15 != v12);
  return result;
}

uint64_t sub_1B68AC140(uint64_t a1, int a2, int a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  *(_WORD *)a1 = a2;
  *(_WORD *)(a1 + 2) = a3;
  *(_DWORD *)(a1 + 4) = a3 * a2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 1065353216;
  v4 = malloc_type_malloc((2 * a3 * a2), 0x82ECD37AuLL);
  *(_QWORD *)(a1 + 64) = v4;
  if (v4)
  {
    v5 = malloc_type_malloc(*(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
    *(_QWORD *)(a1 + 96) = v5;
    if (v5)
    {
      v6 = malloc_type_malloc(2 * *(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
      *(_QWORD *)(a1 + 136) = v6;
      if (v6)
      {
        v7 = malloc_type_malloc(2 * *(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
        *(_QWORD *)(a1 + 144) = v7;
        if (v7)
        {
          v8 = malloc_type_malloc(2 * *(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
          *(_QWORD *)(a1 + 152) = v8;
          if (v8)
          {
            v9 = malloc_type_malloc(*(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
            *(_QWORD *)(a1 + 120) = v9;
            if (v9)
            {
              v10 = malloc_type_malloc(4 * (4 * *(_DWORD *)(a1 + 4)), 0x82ECD37AuLL);
              *(_QWORD *)(a1 + 184) = v10;
              if (v10)
              {
                v11 = malloc_type_malloc((4 * *(_DWORD *)(a1 + 4)), 0x82ECD37AuLL);
                *(_QWORD *)(a1 + 176) = v11;
                if (v11)
                {
                  v12 = malloc_type_malloc(4 * *(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
                  *(_QWORD *)(a1 + 48) = v12;
                  if (v12)
                  {
                    v13 = malloc_type_malloc(*(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
                    *(_QWORD *)(a1 + 56) = v13;
                    if (v13)
                      return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  sub_1B68AC2AC((void **)a1);
  return 1;
}

void sub_1B68AC2AC(void **a1)
{
  free(a1[8]);
  a1[8] = 0;
  free(a1[12]);
  a1[12] = 0;
  free(a1[17]);
  a1[17] = 0;
  free(a1[18]);
  a1[18] = 0;
  free(a1[19]);
  a1[19] = 0;
  free(a1[15]);
  a1[15] = 0;
  free(a1[23]);
  a1[23] = 0;
  free(a1[22]);
  a1[22] = 0;
  free(a1[6]);
  a1[6] = 0;
  free(a1[7]);
  a1[7] = 0;
}

float sub_1B68AC340(unsigned int a1, unsigned int a2, int a3, int a4, int a5, unsigned int a6, float result)
{
  float v7;
  float v8;
  float v9;
  BOOL v10;
  float v11;

  if (a1 - 0xFFFF >= 0xFFFF0002)
  {
    v7 = result * 0.25;
    if ((float)((float)((float)(result * 0.25) * (float)(int)(a2 - a1)) / (float)a1) <= (float)(result * 0.25))
      v7 = (float)((float)(result * 0.25) * (float)(int)(a2 - a1)) / (float)a1;
    if (a2 <= a1)
      v7 = (float)((float)((float)a1 * 0.5) + (float)((float)(result * -0.75) * (float)(int)(a1 - a2))) / (float)a1;
    v8 = v7 + result;
    if (a4)
      v8 = v8 + (float)(a4 * a3);
    v9 = (float)a6;
    if (a6)
      v10 = a5 == 0;
    else
      v10 = 0;
    if (!v10)
      v9 = -0.0;
    v11 = v9 + v8;
    result = 0.0;
    if (v11 >= 0.0)
    {
      result = v11;
      if (v11 > 51.0)
        return 51.0;
    }
  }
  return result;
}

uint64_t sub_1B68AC3F8(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t *v11;
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t *v19;
  uint64_t v20;
  int8x16_t v21;
  unsigned int v22;

  if (a6 < 8)
  {
    v6 = 0;
LABEL_19:
    v14 = 0;
    goto LABEL_20;
  }
  v6 = 0;
  v7 = a1 - a3 + 8 * a3 + 16;
  for (i = 7; i < a6; i += 16)
  {
    v9 = 0uLL;
    v10 = 0uLL;
    if (a5 >= 0x20)
    {
      v11 = (int8x16_t *)v7;
      v12 = (a5 >> 4) >> 1;
      do
      {
        v10 = veorq_s8(v11[-1], v10);
        v9 = veorq_s8(*v11, v9);
        v11 += 2;
        --v12;
      }
      while (v12);
    }
    if ((a5 & 0x10) != 0)
      v10 = veorq_s8(*(int8x16_t *)(a1 + i * a3 + 8 * (2 * (a5 >> 4) - 2)), v10);
    v13 = veorq_s8(v10, v9);
    v6 ^= *(_QWORD *)&veor_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
    v7 += 16 * a3;
  }
  if (a6 < 16)
    goto LABEL_19;
  v14 = 0;
  v15 = 7 * a4 + a2 + 16;
  v16 = 7;
  do
  {
    v17 = 0uLL;
    v18 = 0uLL;
    if (a5 >= 0x20)
    {
      v19 = (int8x16_t *)v15;
      v20 = (a5 >> 4) >> 1;
      do
      {
        v18 = veorq_s8(v19[-1], v18);
        v17 = veorq_s8(*v19, v17);
        v19 += 2;
        --v20;
      }
      while (v20);
    }
    if ((a5 & 0x10) != 0)
      v18 = veorq_s8(*(int8x16_t *)(a2 + v16 * a4 + 8 * (2 * (a5 >> 4) - 2)), v18);
    v21 = veorq_s8(v18, v17);
    v14 ^= *(_QWORD *)&veor_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
    v16 += 8;
    v15 += 8 * a4;
  }
  while (v16 < a6 >> 1);
LABEL_20:
  v22 = ((v6 ^ HIDWORD(v6)) >> 16) ^ (unsigned __int16)(v6 ^ WORD2(v6));
  return (((v14 ^ HIDWORD(v14)) >> 16) ^ (unsigned __int16)(v14 ^ WORD2(v14)) ^ (unsigned __int16)((((v14 ^ HIDWORD(v14)) >> 16) ^ (unsigned __int16)(v14 ^ WORD2(v14))) << 8)) & 0xFF00 | (unsigned __int16)(v22 ^ (unsigned __int16)(v22 >> 8));
}

unint64_t sub_1B68AC574(_QWORD *a1, int *a2, int *a3, int *a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  int v12;
  int v13;
  uint64_t v14;
  _OWORD *v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;
  unint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  int v29;
  uint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int *v33;
  int8x16_t *v34;
  int8x16_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint64_t v47;
  int8x16_t *v48;
  int8x16_t v49;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _OWORD *v54;
  uint64_t v55;
  _OWORD *v56;
  int *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v54 = a6;
  v12 = *a2;
  MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v15 = (_OWORD *)((char *)&v51 - v14);
  v53 = (uint64_t)v16;
  v17 = *v16 + 7;
  LODWORD(v14) = *v18;
  v52 = v13;
  v19 = 0;
  if (v17 < (int)v14)
  {
    v20 = v13 == 0;
    v57 = (int *)((v12 >> 4) >> 1);
    v55 = 8 * (2 * (v12 >> 4) - 2);
    v56 = v15 + 1;
    while (a7)
    {
      v21 = *(_QWORD *)(a7 + 16);
      v22 = *a2;
      if (!v21)
        goto LABEL_7;
      v23 = *((_DWORD *)v54 + 903);
      v24 = ((v17 / v23) >> *(_DWORD *)a7) * *(_DWORD *)(a7 + 4);
      v25 = (v17 / v23) & ~(-1 << *(_DWORD *)a7);
      v26 = *(_DWORD *)(v21 + v24 + 4 * v25) & 0xFFFFFFF;
      v27 = (*(_DWORD *)(v21 + v24 + 4 * (v25 + (1 << *(_DWORD *)a7))) & 0xFFFFFFF) - v26;
      v28 = (__int128 *)(*a1 + v26 + 16 * (v17 % v23));
LABEL_8:
      DetileRow_neon_h264(v15, v28, v22, v27);
      v30 = *a4;
      v31 = 0uLL;
      v32 = 0uLL;
      if (v12 >= 0x20)
      {
        v33 = v57;
        v34 = (int8x16_t *)((char *)v56 + 8 * v30);
        do
        {
          v32 = veorq_s8(v34[-1], v32);
          v31 = veorq_s8(*v34, v31);
          v34 += 2;
          v33 = (int *)((char *)v33 - 1);
        }
        while (v33);
      }
      if ((v12 & 0x10) != 0)
        v32 = veorq_s8(*(int8x16_t *)((char *)v15 + 8 * v30 + v55), v32);
      v35 = veorq_s8(v32, v31);
      v19 ^= *(_QWORD *)&veor_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
      v17 += 16;
      if (v17 >= *a3)
        goto LABEL_14;
    }
    v22 = *a2;
LABEL_7:
    v29 = dword_1B692D8C4[v20];
    v27 = (16 * v29);
    v28 = (__int128 *)(*a1 + v22 * (v17 & -v29) + 16 * ((v29 - 1) & v17));
    goto LABEL_8;
  }
LABEL_14:
  v36 = *(_DWORD *)(v53 + 4) + 7;
  if (v36 >= a3[1])
  {
    v37 = 0;
  }
  else
  {
    v56 = a1;
    v57 = a4;
    v37 = 0;
    v38 = dword_1B692D8C4[v52 == 0];
    v39 = a2;
    v40 = a2[1];
    v41 = (v38 >> 1) + 0xFFFFFFF;
    v42 = -(v38 >> 1);
    v43 = 8 * (v38 & 0xFFFFFFF);
    v55 = (v40 >> 4) >> 1;
    v53 = 8 * (2 * (v40 >> 4) - 2);
    v54 = v15 + 1;
    do
    {
      DetileRow_neon_h264(v15, (__int128 *)(*((_QWORD *)v56 + 1) + (v36 & v42) * v39[1] + 16 * (v41 & v36)), v39[1], v43);
      v44 = v57[1];
      v45 = 0uLL;
      v46 = 0uLL;
      if (v40 >= 0x20)
      {
        v47 = v55;
        v48 = (int8x16_t *)((char *)v54 + 8 * v44);
        do
        {
          v46 = veorq_s8(v48[-1], v46);
          v45 = veorq_s8(*v48, v45);
          v48 += 2;
          --v47;
        }
        while (v47);
      }
      if ((v40 & 0x10) != 0)
        v46 = veorq_s8(*(int8x16_t *)((char *)v15 + 8 * v44 + v53), v46);
      v49 = veorq_s8(v46, v45);
      v37 ^= *(_QWORD *)&veor_s8(*(int8x8_t *)v49.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
      v36 += 8;
    }
    while (v36 < a3[1]);
  }
  return (((v37 ^ HIDWORD(v37)) >> 16) ^ (unsigned __int16)(v37 ^ WORD2(v37)) ^ (unsigned __int16)((((v37 ^ HIDWORD(v37)) >> 16) ^ (unsigned __int16)(v37 ^ WORD2(v37))) << 8)) & 0xFF00 | (((v19 ^ HIDWORD(v19)) >> 16) ^ v19 ^ BYTE4(v19)) ^ ((((v19 ^ HIDWORD(v19)) >> 16) ^ (unsigned __int16)(v19 ^ WORD2(v19))) >> 8);
}

uint64_t sub_1B68AC8E8(uint64_t result, __int16 *a2, int a3, int *a4, uint64_t a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  BOOL v67;
  int v68;
  int v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  _DWORD v80[3];
  _DWORD v81[16];
  _DWORD v82[16];
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2)
  {
    v6 = 0;
    v82[0] = *a2;
    v81[0] = 0;
    v5 = 1;
  }
  else
  {
    v6 = 1;
  }
  if (a2[1])
  {
    v82[v5] = a2[1];
    v81[v5++] = v6;
    v7 = -1;
  }
  else
  {
    v7 = v6;
    v6 = 0;
  }
  v8 = v7 + 1;
  if (a2[2])
  {
    v82[v5] = a2[2];
    v81[v5] = v8;
    v6 += v8;
    ++v5;
    v8 = -1;
  }
  v9 = *(_DWORD **)(a5 + 16);
  v10 = v8 + 1;
  if (a2[3])
  {
    v82[v5] = a2[3];
    v81[v5] = v10;
    v6 += v10;
    ++v5;
    v10 = -1;
  }
  v11 = *(_DWORD *)(a5 + 32);
  v12 = *(unsigned __int8 *)(a5 + 36);
  if (a3 != 4)
  {
    v13 = v10 + 1;
    if (a2[4])
    {
      v82[v5] = a2[4];
      v81[v5] = v13;
      v6 += v13;
      ++v5;
      v13 = -1;
    }
    v14 = v13 + 1;
    if (a2[5])
    {
      v82[v5] = a2[5];
      v81[v5] = v14;
      v6 += v14;
      ++v5;
      v14 = -1;
    }
    v15 = v14 + 1;
    if (a2[6])
    {
      v82[v5] = a2[6];
      v81[v5] = v15;
      v6 += v15;
      ++v5;
      v15 = -1;
    }
    v16 = v15 + 1;
    if (a2[7])
    {
      v82[v5] = a2[7];
      v81[v5] = v16;
      v6 += v16;
      ++v5;
      v16 = -1;
    }
    v17 = v16 + 1;
    if (a2[8])
    {
      v82[v5] = a2[8];
      v81[v5] = v17;
      v6 += v17;
      ++v5;
      v17 = -1;
    }
    v18 = v17 + 1;
    if (a2[9])
    {
      v82[v5] = a2[9];
      v81[v5] = v18;
      v6 += v18;
      ++v5;
      v18 = -1;
    }
    v19 = v18 + 1;
    if (a2[10])
    {
      v82[v5] = a2[10];
      v81[v5] = v19;
      v6 += v19;
      ++v5;
      v19 = -1;
    }
    v20 = v19 + 1;
    if (a2[11])
    {
      v82[v5] = a2[11];
      v81[v5] = v20;
      v6 += v20;
      ++v5;
      v20 = -1;
    }
    v21 = v20 + 1;
    if (a2[12])
    {
      v82[v5] = a2[12];
      v81[v5] = v21;
      v6 += v21;
      ++v5;
      v21 = -1;
    }
    v22 = v21 + 1;
    if (a2[13])
    {
      v82[v5] = a2[13];
      v81[v5] = v22;
      v6 += v22;
      ++v5;
      v22 = -1;
    }
    v23 = v22 + 1;
    if (a2[14])
    {
      v82[v5] = a2[14];
      v81[v5] = v23;
      v6 += v23;
      ++v5;
      v23 = -1;
    }
    if (a3 != 15 && a2[15])
    {
      v82[v5] = a2[15];
      v24 = v23 + 1;
      v81[v5] = v24;
      v6 += v24;
      ++v5;
LABEL_38:
      v25 = (v5 - 1);
      v26 = v82[v25];
      v27 = 1;
      if (v26 == 1 || v26 == -1)
      {
        v80[0] = (1 - v26) >> 1;
        if (v5 >= 2 && ((v28 = v82[v5 - 2], v27 = 1, v28 == 1) || v28 == -1))
        {
          v80[1] = (1 - v28) >> 1;
          if (v5 < 3)
          {
            v31 = 2;
            v30 = 1;
          }
          else
          {
            v29 = v82[v5 - 3];
            v30 = 1;
            if (v29 == 1 || v29 == -1)
            {
              v27 = 0;
              v80[2] = (1 - v29) >> 1;
              v31 = 3;
            }
            else
            {
              v31 = 2;
              v27 = 1;
            }
          }
        }
        else
        {
          v30 = 1;
          v31 = 1;
        }
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
      if ((int)result > 2)
      {
        if ((_DWORD)result == 3)
        {
          result = (v31 | (4 * v5)) - 4;
          v36 = 6;
LABEL_60:
          v39 = v36 + v12;
          v40 = ((_DWORD)result << -(char)v39) | v11;
          *v9 = bswap32(v40);
          v41 = (_DWORD *)((char *)v9 + (v39 >> 3));
          v42 = v40 << (v39 & 0xF8);
          if (v39 >= 0x20)
            v43 = 0;
          else
            v43 = v42;
          *a4 = v5;
          v44 = v39 & 7;
          if (v30)
          {
            if (v31 <= 1)
              v45 = 1;
            else
              v45 = v31;
            v46 = v80;
            do
            {
              v47 = *v46++;
              v48 = (v47 << (v44 ^ 0x1F)) | v43;
              *v41 = bswap32(v48);
              v49 = v44 + 1;
              v41 = (_DWORD *)((char *)v41 + (v49 >> 3));
              result = v49 & 8;
              v43 = v48 << (v49 & 8);
              v44 = v49 & 7;
              --v45;
            }
            while (v45);
          }
          v50 = v5 + ~v31;
          if ((int)v50 >= 0)
          {
            if (v5 > 10)
              v51 = v27;
            else
              v51 = 0;
            result = 1;
            v52 = v50;
            do
            {
              v53 = v82[v52];
              if (v53 <= 0)
                v54 = ~(2 * v53);
              else
                v54 = 2 * v53 - 2;
              if (v53 >= 0)
                v55 = v82[v52];
              else
                v55 = -v53;
              if ((v27 & (v52 == v50)) != 0)
                v54 -= 2;
              if (v51)
              {
                v56 = v54 >> v51;
                if (v54 >> v51 < 15)
                {
                  v61 = v56 + 1;
                  v60 = v54 - (v56 << v51);
                  v58 = v51;
                }
                else
                {
                  v57 = v55 + (-15 << (v51 - 1));
                  if (v57 < 2050)
                  {
                    v58 = 12;
                    v59 = 15;
                  }
                  else if (v57 >> 1 < 0x801)
                  {
                    v58 = 13;
                    v59 = 16;
                  }
                  else
                  {
                    v58 = 13;
                    do
                      ++v58;
                    while (v57 > (1 << v58) - 4095);
                    v59 = v58 + 3;
                  }
                  v61 = v59 + 1;
                  v60 = (-15 << v51) + v54 + (-4096 << (v59 - 15)) + 4096;
                }
              }
              else if (v54 > 13)
              {
                if (v54 > 0x1D)
                {
                  if (v55 >= 0x811)
                  {
                    if (v55 < 0x1011)
                    {
                      v68 = 0x2000;
                      v58 = 13;
                      v69 = 16;
                    }
                    else
                    {
                      v58 = 13;
                      do
                        v68 = 1 << ++v58;
                      while ((int)v55 > (1 << v58) - 4080);
                      v69 = v58 + 3;
                    }
                    v61 = v69 + 1;
                    v60 = v54 - v68 + 4066;
                  }
                  else
                  {
                    v60 = v54 - 30;
                    v58 = 12;
                    v61 = 16;
                  }
                }
                else
                {
                  v60 = v54 - 14;
                  v58 = 4;
                  v61 = 15;
                }
              }
              else
              {
                v60 = 0;
                v58 = 0;
                v61 = v54 + 1;
              }
              v62 = v61 + v44;
              v63 = (1 << -(char)(v61 + v44)) | v43;
              *v41 = bswap32(v63);
              v44 = (v61 + v44) & 7;
              v41 = (_DWORD *)((char *)v41 + (v62 >> 3));
              v43 = v63 << (v62 & 0xF8);
              if (v62 >= 0x20)
                v43 = 0;
              if (v58 >= 1)
              {
                v64 = v58 + v44;
                v65 = v43 | (v60 << -(char)v64);
                *v41 = bswap32(v65);
                v44 = v64 & 7;
                v41 = (_DWORD *)((char *)v41 + (v64 >> 3));
                v43 = v65 << (v64 & 0xF8);
                if (v64 >= 0x20)
                  v43 = 0;
              }
              if (v51 <= 1)
                v51 = 1;
              v66 = v82[v52];
              if (v66 < 0)
                v66 = -v66;
              v67 = v51 >= 6 || v66 <= dword_1B692DB70[v51];
              if (!v67)
                ++v51;
              v67 = (int)v52-- <= 0;
            }
            while (!v67);
          }
          if (v5 < a3)
          {
            v70 = (unsigned __int8 *)&unk_1B692C364 + 4 * v25 + v6;
            v71 = (unsigned __int8 *)&unk_1B692C370 + 4 * v25 + v6;
            if (a3 != 4)
            {
              v70 = (unsigned __int8 *)&unk_1B692C37C + 16 * v25 + v6;
              v71 = (unsigned __int8 *)&unk_1B692C46C + 16 * v25 + v6;
            }
            v72 = v44 + *v70;
            v73 = (*v71 << -(char)v72) | v43;
            *v41 = bswap32(v73);
            v44 = v72 & 7;
            v41 = (_DWORD *)((char *)v41 + (v72 >> 3));
            v43 = v73 << (v72 & 0xF8);
            if (v72 >= 0x20)
              v43 = 0;
            if (v5 >= 2 && v6 >= 1)
            {
              do
              {
                v74 = (int)v81[v25];
                if (v6 >= 7)
                  v75 = 7;
                else
                  v75 = v6;
                v76 = 16 * v75 - 16;
                v77 = v44 + byte_1B692C55C[v76 + v74];
                v78 = (byte_1B692C5CC[v76 + v74] << -(char)(v44 + byte_1B692C55C[v76 + v74])) | v43;
                *v41 = bswap32(v78);
                v44 = v77 & 7;
                v41 = (_DWORD *)((char *)v41 + (v77 >> 3));
                result = v77 & 0x1F8;
                v43 = v78 << (v77 & 0xF8);
                if (v77 >= 0x20)
                  v43 = 0;
                if (v25 < 2)
                  break;
                LODWORD(v25) = v25 - 1;
                v79 = __OFSUB__(v6, (_DWORD)v74);
                v6 -= v74;
              }
              while (!((v6 < 0) ^ v79 | (v6 == 0)));
            }
          }
          *(_QWORD *)(a5 + 16) = v41;
          *(_DWORD *)(a5 + 32) = v43;
          *(_BYTE *)(a5 + 36) = v44;
          return result;
        }
        v38 = v31 | (4 * v31);
        v36 = byte_1B692C33C[v38 + v5];
        v37 = (char *)&unk_1B692C350 + v38;
      }
      else
      {
        v35 = v31 | (16 * v31);
        v36 = byte_1B692C1A4[68 * (int)result + v35 + v5];
        v37 = (char *)&unk_1B692C270 + 68 * (int)result + v35;
      }
      result = v37[v5];
      goto LABEL_60;
    }
  }
  if (v5)
    goto LABEL_38;
  *a4 = 0;
  v32 = v12 + byte_1B692DB64[result];
  v33 = (byte_1B692DB69[result] << -(char)(v12 + byte_1B692DB64[result])) | v11;
  *v9 = bswap32(v33);
  v34 = v33 << (v32 & 0xF8);
  if (v32 >= 0x20)
    v34 = 0;
  *(_QWORD *)(a5 + 16) = (char *)v9 + (v32 >> 3);
  *(_DWORD *)(a5 + 32) = v34;
  *(_BYTE *)(a5 + 36) = v32 & 7;
  return result;
}

uint64_t sub_1B68AD158(uint64_t result, int a2)
{
  _DWORD *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  char *v7;
  unsigned int v8;

  v2 = *(_DWORD **)(result + 16);
  v3 = *(unsigned __int8 *)(result + 36);
  v4 = __clz(a2 + 1);
  v5 = (((a2 + 1 - (0x80000000 >> v4)) | (0x80000000 >> v4)) << (2 * v4 - v3 - 31)) | *(_DWORD *)(result + 32);
  *v2 = bswap32(v5);
  v6 = v3 - 2 * v4 + 63;
  v7 = (char *)v2 + (v6 >> 3);
  v8 = v5 << (v6 & 0xF8);
  if (v6 >= 0x20)
    v8 = 0;
  *(_QWORD *)(result + 16) = v7;
  *(_DWORD *)(result + 32) = v8;
  *(_BYTE *)(result + 36) = v6 & 7;
  return result;
}

uint64_t sub_1B68AD1CC(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  char v15;
  char v16;
  BOOL v17;
  char v18;
  char v19;
  char v20;
  unsigned __int8 v21;
  int v22;
  __int128 v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  _DWORD *v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  _BOOL4 v43;
  BOOL v44;
  int v45;
  BOOL v46;
  _BYTE *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE *v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  _BYTE *v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  unsigned int v68;
  _BOOL4 v69;
  int v70;
  uint64_t result;
  int v72;
  unsigned int v73;
  int v74;
  BOOL v75;
  int v76;
  _BOOL4 v78;
  int v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  uint64_t v83;
  int v84;
  _BYTE *v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  unsigned __int8 v89;
  int v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  char *v95;
  char v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  char v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  int v105;
  int v106;
  char v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  signed int v112;
  unsigned __int8 *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  __int16 *v117;
  uint64_t v118;
  uint64_t v119;
  signed int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  _BOOL4 v126;
  __int128 v127;
  uint64_t v128;
  char *v129;
  char v130;
  int v131;
  int v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  int v136;
  _BYTE *v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  int v143;
  _BYTE *v144;
  unsigned int v145;
  _BOOL8 v146;
  BOOL v147;
  int v148;
  int v149;
  _DWORD *v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unint64_t v155;
  int v156;
  _DWORD *v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unint64_t v162;
  int v163;
  _DWORD *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unint64_t v169;
  int v170;
  _DWORD *v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  _DWORD *v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  int v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  int v195;
  int v196;
  int v197;
  int v198;
  __int16 *v199;
  int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unint64_t v205;
  int v206;
  _DWORD *v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  int v218;
  int v219;
  int v220;
  __int16 *v221;
  int v222;
  int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unint64_t v227;
  int v228;
  _DWORD *v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  uint64_t v238;
  _BOOL4 v239;
  _BYTE *v240;
  _DWORD *v241;
  int v242;
  int v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  int v249;
  char v250;
  _DWORD *v251;
  int v252;
  _BOOL4 v253;
  _DWORD *v254;
  uint64_t v255;
  int v256;
  _BOOL4 v257;
  char v258;
  BOOL v259;
  int v260;
  int v261;
  _BOOL4 v262;
  char v263;
  char v264;
  char v265;
  int v266;
  _BOOL8 v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  char v272;
  uint64_t v273;
  char v274;
  uint64_t v275;
  char v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  _DWORD *v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  char v286;
  int v287;
  uint64_t i;
  uint64_t v289;
  unsigned int v290;
  int v291;
  unsigned int v292;
  uint64_t j;
  uint64_t v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  uint64_t v302;
  BOOL v303;
  uint64_t v304;
  _BYTE *v305;
  int v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  _BYTE *v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  int v315;
  _BYTE *v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  signed int v320;
  __int16 *v321;
  uint64_t v322;
  signed int v323;
  uint64_t v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  _DWORD *v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  int v333;
  _BYTE *v334;
  int v335;
  uint64_t v336;
  int v337;
  int v338;
  _BYTE *v339;
  _DWORD *v340;
  int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  char *v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  int v354;
  __int16 *v355;
  int v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  _BOOL4 v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  __int16 *v364;
  _QWORD *v365;
  __int16 *v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  _BYTE *v371;
  uint64_t k;
  int v373;
  char v374;
  uint64_t v375;
  int v376;
  int v377;
  _QWORD *v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  uint64_t v384;
  char v385;
  int v386;
  int v387;
  uint64_t v388;
  char v389;
  char v390;
  char v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  int v395;
  int v396;
  uint64_t v397;
  char v398;
  char v399;
  char v400;
  uint64_t v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  uint64_t m;
  int v408;
  char *v409;
  _BYTE *v410;
  uint64_t n;
  uint64_t v412;
  uint64_t v413;
  __int16 *v414;
  uint64_t v415;
  __int16 *v416;
  __int16 v417;
  uint64_t v418;
  uint64_t ii;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  __int16 *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  __int16 *v430;
  uint64_t v431;
  int v432;
  int v433;
  int v434;
  int v435;
  uint64_t v436;
  unsigned __int8 *v437;
  uint64_t v438;
  int v439;
  unsigned int v440;
  char v441;
  uint64_t v442;
  BOOL v443;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  unsigned int v447;
  unsigned __int8 *v448;
  uint64_t v449;
  int v450;
  unsigned int v451;
  char v452;
  uint64_t v453;
  BOOL v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  uint64_t v459;
  __int16 *v460;
  int v461;
  int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unint64_t v466;
  int v467;
  _DWORD *v468;
  unsigned int v469;
  unsigned int v470;
  int v471;
  int v472;
  unsigned int v473;
  unsigned int v474;
  unsigned int v475;
  unsigned int v476;
  __int16 *v477;
  int v478;
  int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unint64_t v483;
  int v484;
  _DWORD *v485;
  unsigned int v486;
  unsigned int v487;
  int v488;
  int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  int v494;
  _BOOL4 v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  _BYTE *v499;
  int v500;
  _BYTE *v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  __int16 *v505;
  int v506;
  int v507;
  char v510;
  unsigned __int8 *v511;
  int v512;
  _BYTE *v513;
  uint64_t v514;
  int v515;
  _BYTE *v516;
  uint64_t v517;
  unsigned int v518;
  _BYTE *v519;
  int v520;
  int v521;
  unsigned __int8 *v522;
  char v523;
  int v524;
  _BOOL4 v526;
  uint64_t v527;
  int v528;
  unsigned int v529;
  int v530;
  int v531;
  __int16 *v532;
  uint64_t v533;
  int v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  __int128 v538;
  _BYTE *v539;
  __int16 v540[16];
  _BYTE v541[128];
  uint64_t v542;

  v6 = a2;
  v7 = a1;
  v542 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned __int8 **)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v10 = *(unsigned __int8 *)(a1 + 188);
  v11 = *(_QWORD *)(a1 + 192);
  v538 = 0uLL;
  v539 = 0;
  v12 = *(unsigned __int8 *)(a1 + 28);
  v13 = v9[1];
  v14 = 1 << v12;
  if (v9[1])
    v15 = 0;
  else
    v15 = 5;
  if (v9[1])
    v16 = 0;
  else
    v16 = 23;
  v17 = (v14 & 0x210) != 0 && v13 == 0;
  if ((v14 & 0x42) != 0)
    v18 = v16;
  else
    v18 = v17;
  if ((v14 & 0x21) != 0)
    v19 = v15;
  else
    v19 = v18;
  if (v12 <= 9)
    v20 = v19;
  else
    v20 = 0;
  v21 = v20 + v9[2];
  *v9 = v21;
  v533 = v8;
  v536 = v11;
  if (v10)
  {
    v22 = *(_DWORD *)(v11 + 40) + *(_DWORD *)(v11 + 24) + 8 * (*(_DWORD *)v11 - *(_DWORD *)(v11 + 8));
    v538 = *(_OWORD *)(a1 + 128);
    v23 = v538;
    v24 = *(_BYTE **)(a1 + 176);
    v539 = v24;
    v503 = *(_QWORD *)(a1 + 160);
    v24[177] = v13;
    v519 = v24;
    v24[178] = v9[2];
    v25 = *(unsigned __int8 *)(a1 + 28);
    v26 = *v9;
    v27 = *((_QWORD *)&v23 + 1);
    if ((_QWORD)v23)
    {
      v28 = *(unsigned __int8 *)(v23 + 177);
      v29 = *(unsigned __int8 *)(v23 + 178);
    }
    else
    {
      v28 = 255;
      v29 = 255;
    }
    v506 = v22 & ~(v22 >> 31);
    if (*((_QWORD *)&v23 + 1))
    {
      v39 = *(unsigned __int8 *)(*((_QWORD *)&v23 + 1) + 177);
      v40 = *(unsigned __int8 *)(*((_QWORD *)&v23 + 1) + 178);
    }
    else
    {
      v39 = 255;
      v40 = 255;
    }
    v41 = 6;
    v42 = 27;
    if (v25 > 9)
      goto LABEL_71;
    if (((1 << v25) & 0x42) != 0)
    {
      if (*((_QWORD *)&v23 + 1))
      {
        v43 = v39 == 3 && !v40 || (v39 & 0xFE) == 4;
        v27 = !v43;
      }
      v55 = v28 == 3 && v29 == 0;
      v56 = v28 & 0xFE;
      v58 = !v55 && v56 != 4;
      if ((_QWORD)v23)
        v59 = v58;
      else
        v59 = 0;
      v42 = v59 + v27 + 27;
      v41 = 24;
      goto LABEL_71;
    }
    if (((1 << v25) & 0x84) == 0)
    {
      if (((1 << v25) & 0x210) != 0)
        goto LABEL_114;
LABEL_71:
      if (v41 >= v26)
        v60 = *v9;
      else
        v60 = v41;
      if (v26 >= v41)
        v61 = v26 - v41;
      else
        v61 = 0;
      if (v25 != 6 && v25 != 1)
      {
        switch(v60)
        {
          case 0u:
            sub_1B68A39E8(v11, 0, (_BYTE *)(v11 + 76));
            sub_1B68A39E8(v11, 0, (_BYTE *)(v11 + 78));
            v62 = (_BYTE *)(v11 + 80);
            goto LABEL_98;
          case 1u:
            sub_1B68A39E8(v11, 0, (_BYTE *)(v11 + 76));
            sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 78));
            v62 = (_BYTE *)(v11 + 82);
            v65 = v11;
            v66 = 1;
            goto LABEL_99;
          case 2u:
            sub_1B68A39E8(v11, 0, (_BYTE *)(v11 + 76));
            v67 = (_BYTE *)(v11 + 78);
            goto LABEL_97;
          case 3u:
          case 4u:
            sub_1B68A39E8(v11, 0, (_BYTE *)(v11 + 76));
            sub_1B68A39E8(v11, 0, (_BYTE *)(v11 + 78));
            v63 = (_BYTE *)(v11 + 80);
            v65 = v11;
            v64 = 1;
            goto LABEL_106;
          case 5u:
            v67 = (_BYTE *)(v11 + 76);
LABEL_97:
            sub_1B68A39E8(v11, 1, v67);
            v62 = (_BYTE *)(v11 + 82);
            goto LABEL_98;
          case 6u:
            sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 76));
            sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 82));
            v60 = 6;
            goto LABEL_107;
          default:
            goto LABEL_113;
        }
      }
      v62 = (_BYTE *)(v11 + 2 * v42 + 48);
      if (v60)
      {
        sub_1B68A39E8(v11, 1, v62);
        if (v60 <= 2)
        {
          sub_1B68A39E8(v11, 0, (_BYTE *)(v11 + 108));
          v63 = (_BYTE *)(v11 + 112);
          v64 = (v60 - 1);
          v65 = v11;
LABEL_106:
          sub_1B68A39E8(v65, v64, v63);
LABEL_107:
          if (v60 == v41)
          {
            if (v61 == 24)
            {
              sub_1B68A3B38(v11, 1);
            }
            else
            {
              sub_1B68A3B38(v11, 0);
              sub_1B68A39E8(v11, v61 / 0xCu, (_BYTE *)(v11 + 84));
              v69 = 0;
              if (v61 % 0xCu >= 4)
              {
                sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 86));
                v69 = ((v61 % 0xCu) & 0xC) != 4;
              }
              sub_1B68A39E8(v11, v69, (_BYTE *)(v11 + 86));
              sub_1B68A39E8(v11, (v61 >> 1) & 1, (_BYTE *)(v11 + 88));
              sub_1B68A39E8(v11, v61 & 1, (_BYTE *)(v11 + 88));
              v6 = a2;
            }
          }
          goto LABEL_113;
        }
        if (v60 <= 0xA)
        {
          sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 108));
          sub_1B68A39E8(v11, 0, (_BYTE *)(v11 + 110));
          sub_1B68A39E8(v11, ((v60 - 3) >> 2) & 1, (_BYTE *)(v11 + 112));
          sub_1B68A39E8(v11, ((v60 - 3) >> 1) & 1, (_BYTE *)(v11 + 112));
          sub_1B68A39E8(v11, ((v60 - 3) & 1) != 0, (_BYTE *)(v11 + 112));
LABEL_104:
          v6 = a2;
          goto LABEL_107;
        }
        if (v60 != 22 && v60 != 11)
        {
          v68 = v60 - (v60 > 0x16);
          sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 108));
          sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 110));
          sub_1B68A39E8(v11, ((v68 - 12) >> 3) & 1, (_BYTE *)(v11 + 112));
          sub_1B68A39E8(v11, ((v68 - 12) >> 2) & 1, (_BYTE *)(v11 + 112));
          sub_1B68A39E8(v11, (v68 >> 1) & 1, (_BYTE *)(v11 + 112));
          sub_1B68A39E8(v11, v68 & 1, (_BYTE *)(v11 + 112));
          if (v68 <= 0x15)
            v60 -= v60 > 0x16;
          else
            v60 = v68 + 1;
          goto LABEL_104;
        }
        sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 108));
        sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 110));
        sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 112));
        sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 112));
        v65 = v11;
        if (v60 != 11)
        {
          v64 = 1;
          v63 = (_BYTE *)(v11 + 112);
          goto LABEL_106;
        }
        v66 = 0;
        v62 = (_BYTE *)(v11 + 112);
      }
      else
      {
LABEL_98:
        v65 = v11;
        v66 = 0;
      }
LABEL_99:
      sub_1B68A39E8(v65, v66, v62);
LABEL_113:
      v8 = v533;
      goto LABEL_114;
    }
    if ((_QWORD)v23)
      v44 = (v28 | v29) == 0;
    else
      v44 = 1;
    v45 = !v44;
    if (*((_QWORD *)&v23 + 1))
      v46 = (v39 | v40) == 0;
    else
      v46 = 1;
    if (!v46)
      ++v45;
    v47 = (_BYTE *)(v11 + 2 * (v45 + 3) + 48);
    v48 = v11;
    if (v26 == 25)
    {
      sub_1B68A39E8(v11, 1, v47);
      sub_1B68A3B38(v11, 1);
    }
    else
    {
      if (*v9)
      {
        sub_1B68A39E8(v11, 1, v47);
        sub_1B68A3B38(v11, 0);
        v50 = v26 - 1;
        sub_1B68A39E8(v11, (v50 / 0xC), (_BYTE *)(v11 + 60));
        v51 = v50 % 0xC;
        v52 = (_BYTE *)(v11 + 62);
        if (v51 <= 3 || (sub_1B68A39E8(v11, 1, v52), v52 = (_BYTE *)(v11 + 64), (v51 & 0xC) == 4))
        {
          v53 = v11;
          v54 = 0;
        }
        else
        {
          v53 = v11;
          v54 = 1;
        }
        sub_1B68A39E8(v53, v54, v52);
        v6 = a2;
        sub_1B68A39E8(v11, (v51 >> 1) & 1, (_BYTE *)(v11 + 66));
        v47 = (_BYTE *)(v11 + 68);
        v49 = v51 & 1;
        v48 = v11;
      }
      else
      {
        v49 = 0;
      }
      sub_1B68A39E8(v48, v49, v47);
    }
  }
  else
  {
    v519 = 0;
    v503 = 0;
    v30 = *(_DWORD **)(a2 + 16);
    v31 = *(_DWORD *)a2;
    v32 = *(unsigned __int8 *)(a2 + 36);
    v33 = v21 + 1;
    v34 = __clz(v33);
    v35 = (((v33 - (0x80000000 >> v34)) | (0x80000000 >> v34)) << (2 * v34 - v32 - 31)) | *(_DWORD *)(a2 + 32);
    *v30 = bswap32(v35);
    v506 = v32 + 8 * ((_DWORD)v30 - v31);
    v36 = v32 - 2 * v34 + 63;
    v37 = (char *)v30 + (v36 >> 3);
    v38 = v35 << (v36 & 0xF8);
    if (v36 >= 0x20)
      v38 = 0;
    *(_QWORD *)(a2 + 16) = v37;
    *(_DWORD *)(a2 + 32) = v38;
    *(_BYTE *)(a2 + 36) = v36 & 7;
  }
LABEL_114:
  v70 = v9[2];
  if (v70 == 25)
    return 4294966630;
  v527 = v8 + 16;
  v72 = *(_DWORD *)(v8 + 8);
  v73 = *(unsigned __int8 *)(v8 + 272);
  v505 = *(__int16 **)(v7 + 56);
  v74 = v9[1];
  if (v9[2])
    v75 = 0;
  else
    v75 = v74 == 3;
  v76 = v75;
  v78 = v72 == 1 || v72 == 7;
  v500 = *(_DWORD *)(v8 + 8);
  v531 = a3;
  v511 = v9;
  v498 = v10;
  v494 = v76;
  v495 = v78;
  if (v72 != 2 && !v78 && (v76 & 1) == 0 && v73 >= 4)
  {
    v496 = v7;
    v79 = v10;
    v80 = v9 + 4;
    v81 = v9 + 20;
    v82 = v9 + 36;
    if (v79)
    {
      v522 = v9 + 20;
      v83 = 0;
      v84 = *(unsigned __int8 *)(v7 + 28);
      v85 = (_BYTE *)(v11 + 122);
      v499 = (_BYTE *)(v11 + 124);
      v513 = (_BYTE *)(v11 + 90);
      v516 = (_BYTE *)(v11 + 126);
      v501 = (_BYTE *)(v11 + 92);
      while (1)
      {
        v86 = *(_DWORD *)&v80[v83];
        if (v84 != 1 && v84 != 6)
        {
          switch(v86)
          {
            case 0u:
              v87 = v11;
              v88 = 1;
              v93 = (_BYTE *)(v11 + 90);
              goto LABEL_154;
            case 1u:
              sub_1B68A39E8(v11, 0, v513);
              v87 = v11;
              v88 = 0;
              v93 = (_BYTE *)(v11 + 92);
              goto LABEL_154;
            case 2u:
              sub_1B68A39E8(v11, 0, v513);
              sub_1B68A39E8(v11, 1, v501);
              v87 = v11;
              v88 = 1;
              goto LABEL_150;
            case 3u:
              sub_1B68A39E8(v11, 0, v513);
              sub_1B68A39E8(v11, 1, v501);
              v87 = v11;
              v88 = 0;
LABEL_150:
              v93 = (_BYTE *)(v11 + 94);
              goto LABEL_154;
            default:
              goto LABEL_155;
          }
        }
        v87 = v11;
        if (v86)
        {
          sub_1B68A39E8(v11, 1, (_BYTE *)(v11 + 120));
          if ((int)v86 > 2)
          {
            sub_1B68A39E8(v11, 1, v85);
            if (v86 <= 6)
            {
              sub_1B68A39E8(v11, 0, v499);
              v89 = v86 - 3;
              v90 = v89 >> 1;
              v91 = v11;
              v92 = (_BYTE *)(v11 + 126);
              goto LABEL_146;
            }
            sub_1B68A39E8(v11, 1, v499);
            if (v86 > 0xA)
            {
              if (v86 > 0xC)
                goto LABEL_155;
              v92 = (_BYTE *)(v11 + 126);
              sub_1B68A39E8(v11, 1, v516);
              v88 = (v86 & 1) == 0;
            }
            else
            {
              v92 = (_BYTE *)(v11 + 126);
              sub_1B68A39E8(v11, 0, v516);
              v89 = v86 - 7;
              v90 = v89 >> 1;
              v91 = v11;
LABEL_146:
              sub_1B68A39E8(v91, v90, v92);
              v88 = v89 & 1;
            }
            v87 = v11;
            v93 = v92;
            v85 = (_BYTE *)(v11 + 122);
            goto LABEL_154;
          }
          sub_1B68A39E8(v11, 0, v85);
          v87 = v11;
          v88 = v86 != 1;
          v93 = (_BYTE *)(v11 + 126);
        }
        else
        {
          v88 = 0;
          v93 = (_BYTE *)(v11 + 120);
        }
LABEL_154:
        sub_1B68A39E8(v87, v88, v93);
        v83 += 4;
        if (v83 == 16)
        {
LABEL_155:
          v94 = 0;
          v519[182] = *(_BYTE *)(v533 + 272);
          v95 = (char *)(v533 + 31);
          do
          {
            v96 = *v95;
            v95 += 16;
            v519[v94++ + 183] = v96;
          }
          while (v94 != 16);
          v97 = *(char *)(v533 + 3);
          if (*(char *)(v533 + 2) >= 1)
          {
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v101 = *(_BYTE *)(v527 + 16 * v99 + 8);
              if ((v74 != 3 || *(_DWORD *)&v80[4 * v98]) && *(_DWORD *)&v522[4 * v98] != 5)
                sub_1B68F86A0(v536, v536, (uint64_t *)&v538, v100, *(_WORD *)(v533 + 26), 0, *(unsigned __int8 *)(v527 + 16 * v99 + 8));
              if (*(int *)&v82[4 * v98] >= 1)
              {
                v102 = 0;
                v103 = &v519[v99];
                do
                {
                  v103[v102 + 128] = v101;
                  if (v74 == 3 && !*(_DWORD *)&v80[4 * v98])
                    v103[v102 + 183] = 3;
                  ++v102;
                }
                while ((int)v102 < *(_DWORD *)&v82[4 * v98]);
                v99 += v102;
              }
              ++v98;
              v100 += 4;
            }
            while (v98 != 4);
          }
          if (v97 >= 1)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = *(_BYTE *)(v527 + 16 * v105 + 9);
              if ((v74 != 3 || *(_DWORD *)&v80[4 * v104]) && *(_DWORD *)&v522[4 * v104] != 4)
                sub_1B68F86A0(v536, v536, (uint64_t *)&v538, v106, *(_WORD *)(v533 + 26), 1, *(unsigned __int8 *)(v527 + 16 * v105 + 9));
              if (*(int *)&v82[4 * v104] >= 1)
              {
                v108 = 0;
                v109 = &v519[v105];
                do
                {
                  v109[v108 + 144] = v107;
                  if (v74 == 3 && !*(_DWORD *)&v80[4 * v104])
                    v109[v108 + 183] = 3;
                  ++v108;
                }
                while ((int)v108 < *(_DWORD *)&v82[4 * v104]);
                v105 += v108;
              }
              ++v104;
              v106 += 4;
            }
            while (v104 != 4);
          }
          v110 = 0;
          LODWORD(v111) = 0;
          v112 = 0;
          a3 = v531;
          v113 = v522;
          do
          {
            if (v74 == 3 && !*(_DWORD *)&v80[4 * v110] || *(_DWORD *)&v113[4 * v110] == 5)
            {
              LODWORD(v111) = v111 + (*(_DWORD *)&v82[4 * v110] & ~(*(int *)&v82[4 * v110] >> 31));
            }
            else if (*(int *)&v82[4 * v110] >= 1)
            {
              v114 = 0;
              v111 = (int)v111;
              v115 = v533;
              do
              {
                if (v112 > 15)
                {
                  v116 = v527;
                }
                else
                {
                  v116 = v527;
                  do
                  {
                    if ((_DWORD)v111 == *((unsigned __int8 *)&unk_1B69360A0
                                         + 80 * *(unsigned __int16 *)(v115 + 26)
                                         + v112))
                      break;
                    ++v112;
                  }
                  while (v112 != 16);
                }
                v117 = (__int16 *)(v116 + 16 * v111);
                sub_1B68F8868(v536, v536, (unint64_t *)&v538, v112, *(_WORD *)(v115 + 26), 0, 0, *v117);
                v115 = v533;
                sub_1B68F8868(v536, v536, (unint64_t *)&v538, v112, *(_WORD *)(v533 + 26), 1u, 0, v117[1]);
                ++v111;
                ++v114;
                a3 = v531;
              }
              while (v114 < *(_DWORD *)&v82[4 * v110]);
              v113 = v522;
            }
            ++v110;
          }
          while (v110 != 4);
          v118 = 0;
          LODWORD(v119) = 0;
          v120 = 0;
          do
          {
            if (v74 == 3 && !*(_DWORD *)&v80[4 * v118] || *(_DWORD *)&v113[4 * v118] == 4)
            {
              LODWORD(v119) = v119 + (*(_DWORD *)&v82[4 * v118] & ~(*(int *)&v82[4 * v118] >> 31));
            }
            else if (*(int *)&v82[4 * v118] >= 1)
            {
              v121 = 0;
              v119 = (int)v119;
              v122 = v533;
              do
              {
                if (v120 > 15)
                {
                  v123 = v527;
                }
                else
                {
                  v123 = v527;
                  do
                  {
                    if ((_DWORD)v119 == *((unsigned __int8 *)&unk_1B69360A0
                                         + 80 * *(unsigned __int16 *)(v122 + 26)
                                         + v120))
                      break;
                    ++v120;
                  }
                  while (v120 != 16);
                }
                v124 = v123 + 16 * v119;
                sub_1B68F8868(v536, v536, (unint64_t *)&v538, v120, *(_WORD *)(v122 + 26), 0, 1, *(__int16 *)(v124 + 4));
                v122 = v533;
                sub_1B68F8868(v536, v536, (unint64_t *)&v538, v120, *(_WORD *)(v533 + 26), 1u, 1, *(__int16 *)(v124 + 6));
                ++v119;
                ++v121;
                a3 = v531;
              }
              while (v121 < *(_DWORD *)&v82[4 * v118]);
              v113 = v522;
            }
            ++v118;
          }
          while (v118 != 4);
          goto LABEL_325;
        }
      }
    }
    v148 = *(char *)(v533 + 2);
    v149 = *(char *)(v533 + 3);
    v150 = *(_DWORD **)(v6 + 16);
    v151 = *(unsigned __int8 *)(v6 + 36);
    v152 = *((_DWORD *)v9 + 1) + 1;
    v153 = __clz(v152);
    v154 = (((v152 - (0x80000000 >> v153)) | (0x80000000 >> v153)) << (2 * v153 - v151 - 31)) | *(_DWORD *)(v6 + 32);
    *v150 = bswap32(v154);
    v155 = v151 - 2 * v153 + 63;
    v156 = v155 & 7;
    v157 = (_DWORD *)((char *)v150 + (v155 >> 3));
    v158 = v154 << (v155 & 0xF8);
    if (v155 >= 0x20)
      v158 = 0;
    v159 = *((_DWORD *)v9 + 2) + 1;
    v160 = __clz(v159);
    v161 = v158 | (((v159 - (0x80000000 >> v160)) | (0x80000000 >> v160)) << (2 * v160 - v156 - 31));
    *v157 = bswap32(v161);
    v162 = v156 - 2 * v160 + 63;
    v163 = ((_BYTE)v156 - 2 * (_BYTE)v160 + 63) & 7;
    v164 = (_DWORD *)((char *)v157 + (v162 >> 3));
    v165 = v161 << (v162 & 0xF8);
    if (v162 >= 0x20)
      v165 = 0;
    v166 = *((_DWORD *)v9 + 3) + 1;
    v167 = __clz(v166);
    v168 = v165 | (((v166 - (0x80000000 >> v167)) | (0x80000000 >> v167)) << (2 * v167 - v163 - 31));
    *v164 = bswap32(v168);
    v169 = v163 - 2 * v167 + 63;
    v170 = ((_BYTE)v163 - 2 * (_BYTE)v167 + 63) & 7;
    v171 = (_DWORD *)((char *)v164 + (v169 >> 3));
    v172 = v168 << (v169 & 0xF8);
    if (v169 >= 0x20)
      v172 = 0;
    v173 = *((_DWORD *)v9 + 4) + 1;
    v174 = __clz(v173);
    v175 = v172 | (((v173 - (0x80000000 >> v174)) | (0x80000000 >> v174)) << (2 * v174 - v170 - 31));
    *v171 = bswap32(v175);
    v176 = v170 - 2 * v174 + 63;
    v177 = v176 & 7;
    v178 = (_DWORD *)((char *)v171 + (v176 >> 3));
    v179 = v175 << (v176 & 0xF8);
    if (v176 >= 0x20)
      v179 = 0;
    if (v148 >= 1 && (v70 != 4 || v74 != 2))
    {
      v180 = 0;
      v181 = 0;
      do
      {
        v182 = *(unsigned __int8 *)(v527 + 16 * v181 + 8);
        if ((v74 != 3 || *(_DWORD *)&v9[v180 + 4]) && *(_DWORD *)&v9[v180 + 20] != 5)
        {
          if (v148 == 1)
          {
            v183 = ((v182 == 0) << ~(_BYTE)v177) | v179;
            *v178 = bswap32(v183);
            v184 = v177 + 1;
          }
          else
          {
            v185 = v182 + 1;
            v186 = __clz(v185);
            v183 = (((v185 - (0x80000000 >> v186)) | (0x80000000 >> v186)) << (2 * v186 - v177 - 31)) | v179;
            *v178 = bswap32(v183);
            v184 = v177 - 2 * v186 + 63;
          }
          v177 = v184 & 7;
          v178 = (_DWORD *)((char *)v178 + (v184 >> 3));
          v179 = v183 << (v184 & 0xF8);
        }
        v181 += *(_DWORD *)&v9[v180 + 36];
        v180 += 4;
      }
      while (v180 != 16);
    }
    if (v149 >= 1 && (v70 != 4 || v74 != 2))
    {
      v187 = 0;
      v188 = 0;
      do
      {
        v189 = *(unsigned __int8 *)(v527 + 16 * v188 + 9);
        if ((v74 != 3 || *(_DWORD *)&v9[v187 + 4]) && *(_DWORD *)&v9[v187 + 20] != 4)
        {
          if (v149 == 1)
          {
            v190 = ((v189 == 0) << ~(_BYTE)v177) | v179;
            *v178 = bswap32(v190);
            v191 = v177 + 1;
          }
          else
          {
            v192 = v189 + 1;
            v193 = __clz(v192);
            v190 = (((v192 - (0x80000000 >> v193)) | (0x80000000 >> v193)) << (2 * v193 - v177 - 31)) | v179;
            *v178 = bswap32(v190);
            v191 = v177 - 2 * v193 + 63;
          }
          v177 = v191 & 7;
          v178 = (_DWORD *)((char *)v178 + (v191 >> 3));
          v179 = v190 << (v191 & 0xF8);
        }
        v188 += *(_DWORD *)&v9[v187 + 36];
        v187 += 4;
      }
      while (v187 != 16);
    }
    v194 = 0;
    v195 = 0;
    do
    {
      v196 = *(_DWORD *)&v82[4 * v194];
      if (v196 >= 1)
      {
        v197 = 0;
        v198 = v195;
        v199 = (__int16 *)(v533 + 18 + 16 * v195);
        do
        {
          if ((v74 != 3 || *(_DWORD *)&v80[4 * v194]) && *(_DWORD *)&v81[4 * v194] != 5)
          {
            v200 = *(v199 - 1);
            if (v200 <= 0)
              v201 = -2 * v200;
            else
              v201 = 2 * v200 - 1;
            v202 = v201 + 1;
            v203 = __clz(v202);
            v204 = (((v202 - (0x80000000 >> v203)) | (0x80000000 >> v203)) << (2 * v203 - v177 - 31)) | v179;
            *v178 = bswap32(v204);
            v205 = v177 - 2 * v203 + 63;
            v206 = v205 & 7;
            v207 = (_DWORD *)((char *)v178 + (v205 >> 3));
            v208 = v204 << (v205 & 0xF8);
            if (v205 >= 0x20)
              v209 = 0;
            else
              v209 = v208;
            v210 = *v199;
            if (v210 <= 0)
              v211 = -2 * v210;
            else
              v211 = 2 * v210 - 1;
            v212 = v211 + 1;
            v213 = __clz(v212);
            v214 = v209 | (((v212 - (0x80000000 >> v213)) | (0x80000000 >> v213)) << (2 * v213 - v206 - 31));
            *v207 = bswap32(v214);
            v215 = v206 - 2 * v213 + 63;
            v177 = v215 & 7;
            v178 = (_DWORD *)((char *)v207 + (v215 >> 3));
            v179 = v214 << (v215 & 0xF8);
            if (v215 >= 0x20)
              v179 = 0;
            v196 = *(_DWORD *)&v82[4 * v194];
          }
          ++v197;
          v199 += 8;
        }
        while (v197 < v196);
        v195 = v198 + v197;
      }
      ++v194;
    }
    while (v194 != 4);
    v216 = 0;
    v217 = 0;
    do
    {
      v218 = *(_DWORD *)&v82[4 * v216];
      if (v218 >= 1)
      {
        v219 = 0;
        v220 = v217;
        v221 = (__int16 *)(v533 + 22 + 16 * v217);
        do
        {
          if ((v74 != 3 || *(_DWORD *)&v80[4 * v216]) && *(_DWORD *)&v81[4 * v216] != 4)
          {
            v222 = *(v221 - 1);
            if (v222 <= 0)
              v223 = -2 * v222;
            else
              v223 = 2 * v222 - 1;
            v224 = v223 + 1;
            v225 = __clz(v224);
            v226 = (((v224 - (0x80000000 >> v225)) | (0x80000000 >> v225)) << (2 * v225 - v177 - 31)) | v179;
            *v178 = bswap32(v226);
            v227 = v177 - 2 * v225 + 63;
            v228 = v227 & 7;
            v229 = (_DWORD *)((char *)v178 + (v227 >> 3));
            v230 = v226 << (v227 & 0xF8);
            if (v227 >= 0x20)
              v231 = 0;
            else
              v231 = v230;
            v232 = *v221;
            if (v232 <= 0)
              v233 = -2 * v232;
            else
              v233 = 2 * v232 - 1;
            v234 = v233 + 1;
            v235 = __clz(v234);
            v236 = v231 | (((v234 - (0x80000000 >> v235)) | (0x80000000 >> v235)) << (2 * v235 - v228 - 31));
            *v229 = bswap32(v236);
            v237 = v228 - 2 * v235 + 63;
            v177 = v237 & 7;
            v178 = (_DWORD *)((char *)v229 + (v237 >> 3));
            v179 = v236 << (v237 & 0xF8);
            if (v237 >= 0x20)
              v179 = 0;
            v218 = *(_DWORD *)&v82[4 * v216];
          }
          ++v219;
          v221 += 8;
        }
        while (v219 < v218);
        v217 = v220 + v219;
      }
      ++v216;
    }
    while (v216 != 4);
    *(_QWORD *)(v6 + 16) = v178;
    *(_DWORD *)(v6 + 32) = v179;
    *(_BYTE *)(v6 + 36) = v177;
LABEL_325:
    v238 = 0;
    v125 = 1;
    v10 = v498;
    v9 = v511;
    v7 = v496;
    v8 = v533;
    do
    {
      if (*(_DWORD *)&v511[v238 + 4])
        v239 = *(_DWORD *)&v511[v238 + 36] > 1;
      else
        v239 = *(_BYTE *)v533 == 0;
      if (v239)
        v125 = 0;
      v238 += 4;
    }
    while (v238 != 16);
    goto LABEL_332;
  }
  if ((v76 & 1) != 0)
    goto LABEL_219;
  if (*(_BYTE *)(v7 + 184))
    v126 = v78;
  else
    v126 = 0;
  if (!v10)
  {
    v281 = *(_DWORD **)(v6 + 16);
    v282 = *(_DWORD *)(v6 + 32);
    v283 = *(unsigned __int8 *)(v6 + 36);
    v284 = *(_DWORD *)(v8 + 8);
    if (v126)
    {
      v285 = (v9[3] << ~(_BYTE)v283) | v282;
      *v281 = bswap32(v285);
      v286 = v283 + 1;
      v281 = (_DWORD *)((char *)v281 + ((v283 + 1) >> 3));
      v282 = v285 << ((v283 + 1) & 0xF8);
      if (v283 >= 0x1F)
        v282 = 0;
      *(_QWORD *)(v6 + 16) = v281;
      *(_DWORD *)(v6 + 32) = v282;
      v283 = v286 & 7;
      *(_BYTE *)(v6 + 36) = v286 & 7;
      v284 = *(_DWORD *)(v8 + 8);
    }
    if ((v284 - 1) >= 2)
    {
      if (v284 == 3)
      {
LABEL_683:
        *(_QWORD *)(v6 + 16) = v281;
        *(_DWORD *)(v6 + 32) = v282;
        v125 = 1;
        *(_BYTE *)(v6 + 36) = v283;
        goto LABEL_332;
      }
      if (v284 != 7)
      {
        v434 = *(char *)(v8 + 2);
        v435 = *(char *)(v8 + 3);
        v436 = *(unsigned __int8 *)(v8 + 272);
        if (v434 >= 1 && *(_BYTE *)(v8 + 272))
        {
          v437 = (unsigned __int8 *)(v8 + 24);
          v438 = *(unsigned __int8 *)(v8 + 272);
          do
          {
            if (v437[7] != 5)
            {
              v439 = *v437;
              if (v434 == 1)
              {
                v440 = ((v439 == 0) << ~(_BYTE)v283) | v282;
                *v281 = bswap32(v440);
                v441 = v283 + 1;
                v442 = (v283 + 1) >> 3;
                v443 = v283 >= 0x1F;
                v283 = (v283 + 1) & 7;
                v281 = (_DWORD *)((char *)v281 + v442);
                v282 = v440 << (v441 & 0xF8);
              }
              else
              {
                v444 = v439 + 1;
                v445 = __clz(v444);
                v446 = (((v444 - (0x80000000 >> v445)) | (0x80000000 >> v445)) << (2 * v445 - v283 - 31)) | v282;
                *v281 = bswap32(v446);
                v447 = v283 - 2 * v445 + 63;
                v283 = v447 & 7;
                v281 = (_DWORD *)((char *)v281 + (v447 >> 3));
                v282 = v446 << (v447 & 0xF8);
                v443 = v447 >= 0x20;
              }
              if (v443)
                v282 = 0;
            }
            v437 += 16;
            --v438;
          }
          while (v438);
        }
        if (v435 >= 1 && (_DWORD)v436)
        {
          v448 = (unsigned __int8 *)(v8 + 25);
          v449 = v436;
          do
          {
            if (v448[6] != 4)
            {
              v450 = *v448;
              if (v435 == 1)
              {
                v451 = ((v450 == 0) << ~(_BYTE)v283) | v282;
                *v281 = bswap32(v451);
                v452 = v283 + 1;
                v453 = (v283 + 1) >> 3;
                v454 = v283 >= 0x1F;
                v283 = (v283 + 1) & 7;
                v281 = (_DWORD *)((char *)v281 + v453);
                v282 = v451 << (v452 & 0xF8);
              }
              else
              {
                v455 = v450 + 1;
                v456 = __clz(v455);
                v457 = (((v455 - (0x80000000 >> v456)) | (0x80000000 >> v456)) << (2 * v456 - v283 - 31)) | v282;
                *v281 = bswap32(v457);
                v458 = v283 - 2 * v456 + 63;
                v283 = v458 & 7;
                v281 = (_DWORD *)((char *)v281 + (v458 >> 3));
                v282 = v457 << (v458 & 0xF8);
                v454 = v458 >= 0x20;
              }
              if (v454)
                v282 = 0;
            }
            v448 += 16;
            --v449;
          }
          while (v449);
        }
        if ((_DWORD)v436)
        {
          v459 = v436;
          v460 = (__int16 *)(v8 + 16);
          do
          {
            if (*((_BYTE *)v460 + 15) != 5)
            {
              v461 = *v460;
              v462 = v461 <= 0 ? -2 * v461 : 2 * v461 - 1;
              v463 = v462 + 1;
              v464 = __clz(v463);
              v465 = (((v463 - (0x80000000 >> v464)) | (0x80000000 >> v464)) << (2 * v464 - v283 - 31)) | v282;
              *v281 = bswap32(v465);
              v466 = v283 - 2 * v464 + 63;
              v467 = v466 & 7;
              v468 = (_DWORD *)((char *)v281 + (v466 >> 3));
              v469 = v465 << (v466 & 0xF8);
              v470 = v466 >= 0x20 ? 0 : v469;
              v471 = v460[1];
              v472 = v471 <= 0 ? -2 * v471 : 2 * v471 - 1;
              v473 = v472 + 1;
              v474 = __clz(v473);
              v475 = v470 | (((v473 - (0x80000000 >> v474)) | (0x80000000 >> v474)) << (2 * v474 - v467 - 31));
              *v468 = bswap32(v475);
              v476 = v467 - 2 * v474 + 63;
              v283 = v476 & 7;
              v281 = (_DWORD *)((char *)v468 + (v476 >> 3));
              v282 = v475 << (v476 & 0xF8);
              if (v476 >= 0x20)
                v282 = 0;
            }
            v460 += 8;
            --v459;
          }
          while (v459);
          v477 = (__int16 *)(v8 + 20);
          do
          {
            if (*((_BYTE *)v477 + 11) != 4)
            {
              v478 = *v477;
              v479 = v478 <= 0 ? -2 * v478 : 2 * v478 - 1;
              v480 = v479 + 1;
              v481 = __clz(v480);
              v482 = (((v480 - (0x80000000 >> v481)) | (0x80000000 >> v481)) << (2 * v481 - v283 - 31)) | v282;
              *v281 = bswap32(v482);
              v483 = v283 - 2 * v481 + 63;
              v484 = v483 & 7;
              v485 = (_DWORD *)((char *)v281 + (v483 >> 3));
              v486 = v482 << (v483 & 0xF8);
              v487 = v483 >= 0x20 ? 0 : v486;
              v488 = v477[1];
              v489 = v488 <= 0 ? -2 * v488 : 2 * v488 - 1;
              v490 = v489 + 1;
              v491 = __clz(v490);
              v492 = v487 | (((v490 - (0x80000000 >> v491)) | (0x80000000 >> v491)) << (2 * v491 - v484 - 31));
              *v485 = bswap32(v492);
              v493 = v484 - 2 * v491 + 63;
              v283 = v493 & 7;
              v281 = (_DWORD *)((char *)v485 + (v493 >> 3));
              v282 = v492 << (v493 & 0xF8);
              if (v493 >= 0x20)
                v282 = 0;
            }
            v477 += 8;
            --v436;
          }
          while (v436);
        }
        goto LABEL_683;
      }
    }
    v287 = *(unsigned __int8 *)(v8 + 289);
    if (v284 == 1)
    {
      for (i = 0; i != 16; ++i)
      {
        v289 = v8 + i;
        v290 = (*(unsigned __int8 *)(v8 + i + 290) << ~(_BYTE)v283) | v282;
        *v281 = bswap32(v290);
        v291 = (v283 + 1) & 7;
        v281 = (_DWORD *)((char *)v281 + ((v283 + 1) >> 3));
        v282 = v290 << ((v283 + 1) & 0xF8);
        if (v283 >= 0x1F)
          v282 = 0;
        if (*(_BYTE *)(v289 + 290))
        {
          v283 = (v283 + 1) & 7;
        }
        else
        {
          v292 = (*(unsigned __int8 *)(v289 + 310) << (29 - v291)) | v282;
          *v281 = bswap32(v292);
          v283 = ((_BYTE)v291 + 3) & 7;
          v281 = (_DWORD *)((char *)v281 + ((v291 + 3) >> 3));
          v282 = v292 << ((v291 + 3) & 8);
        }
      }
    }
    if (v284 == 7)
    {
      for (j = 0; j != 4; ++j)
      {
        v294 = v8 + j;
        v295 = (*(unsigned __int8 *)(v8 + j + 306) << ~(_BYTE)v283) | v282;
        *v281 = bswap32(v295);
        v296 = (v283 + 1) & 7;
        v281 = (_DWORD *)((char *)v281 + ((v283 + 1) >> 3));
        v282 = v295 << ((v283 + 1) & 0xF8);
        if (v283 >= 0x1F)
          v282 = 0;
        if (*(_BYTE *)(v294 + 306))
        {
          v283 = (v283 + 1) & 7;
        }
        else
        {
          v297 = (*(unsigned __int8 *)(v294 + 326) << (29 - v296)) | v282;
          *v281 = bswap32(v297);
          v283 = ((_BYTE)v296 + 3) & 7;
          v281 = (_DWORD *)((char *)v281 + ((v296 + 3) >> 3));
          v282 = v297 << ((v296 + 3) & 8);
        }
      }
    }
    if (*(_BYTE *)(v8 + 1))
    {
      v298 = v287 + 1;
      v299 = __clz(v298);
      v300 = (((v298 - (0x80000000 >> v299)) | (0x80000000 >> v299)) << (2 * v299 - v283 - 31)) | v282;
      *v281 = bswap32(v300);
      v301 = v283 - 2 * v299 + 63;
      LOBYTE(v283) = v301 & 7;
      v281 = (_DWORD *)((char *)v281 + (v301 >> 3));
      v282 = v300 << (v301 & 0xF8);
      if (v301 >= 0x20)
        v282 = 0;
    }
    goto LABEL_683;
  }
  if (v126)
  {
    v538 = *(_OWORD *)(v7 + 128);
    v127 = v538;
    v539 = *(_BYTE **)(v7 + 176);
    v519 = v539;
    v539[199] = v9[3];
    sub_1B68F85F0(v11, v127, *((uint64_t *)&v127 + 1), v9[3]);
    LOBYTE(v73) = *(_BYTE *)(v8 + 272);
  }
  v128 = 0;
  v519[182] = v73;
  v129 = (char *)(v8 + 31);
  do
  {
    v130 = *v129;
    v129 += 16;
    v519[v128++ + 183] = v130;
  }
  while (v128 != 16);
  v131 = *(_DWORD *)(v8 + 8);
  if ((v131 - 1) < 2)
    goto LABEL_231;
  if (v131 != 3)
  {
    if (v131 != 7)
    {
      v307 = *(char *)(v8 + 3);
      v308 = *(unsigned __int8 *)(v8 + 272);
      if (*(char *)(v8 + 2) >= 1 && *(_BYTE *)(v8 + 272))
      {
        v309 = 0;
        v310 = 0;
        v311 = v539 + 128;
        do
        {
          v312 = v527 + 16 * v309;
          v313 = *(unsigned __int8 *)(v312 + 8);
          if (*(_BYTE *)(v312 + 15) != 5)
          {
            if (v310 <= 15)
            {
              do
              {
                if (v309 == *((unsigned __int8 *)&unk_1B69360A0
                             + 80 * *(unsigned __int16 *)(v533 + 26)
                             + v310))
                  break;
                ++v310;
              }
              while (v310 != 16);
            }
            sub_1B68F86A0(v536, v536, (uint64_t *)&v538, v310, *(_WORD *)(v533 + 26), 0, v313);
          }
          v311[v309++] = v313;
        }
        while (v309 != v308);
      }
      if (v307 >= 1 && (_DWORD)v308)
      {
        v314 = 0;
        v315 = 0;
        v316 = v539;
        do
        {
          v317 = v527 + 16 * v314;
          v318 = *(unsigned __int8 *)(v317 + 9);
          if (*(_BYTE *)(v317 + 15) != 4)
          {
            if (v315 <= 15)
            {
              do
              {
                if (v314 == *((unsigned __int8 *)&unk_1B69360A0
                             + 80 * *(unsigned __int16 *)(v533 + 26)
                             + v315))
                  break;
                ++v315;
              }
              while (v315 != 16);
            }
            sub_1B68F86A0(v536, v536, (uint64_t *)&v538, v315, *(_WORD *)(v533 + 26), 1, v318);
          }
          v316[v314++ + 144] = v318;
        }
        while (v314 != v308);
      }
      if ((_DWORD)v308)
      {
        v319 = 0;
        v320 = 0;
        do
        {
          v321 = (__int16 *)(v527 + 16 * v319);
          if (*((_BYTE *)v321 + 15) != 5)
          {
            if (v320 <= 15)
            {
              do
              {
                if (v319 == *((unsigned __int8 *)&unk_1B69360A0
                             + 80 * *(unsigned __int16 *)(v533 + 26)
                             + v320))
                  break;
                ++v320;
              }
              while (v320 != 16);
            }
            sub_1B68F8868(v536, v536, (unint64_t *)&v538, v320, *(_WORD *)(v533 + 26), 0, 0, *v321);
            sub_1B68F8868(v536, v536, (unint64_t *)&v538, v320, *(_WORD *)(v533 + 26), 1u, 0, v321[1]);
            v9 = v511;
          }
          ++v319;
        }
        while (v319 != v308);
        v322 = 0;
        v323 = 0;
        do
        {
          v324 = v527 + 16 * v322;
          if (*(_BYTE *)(v324 + 15) != 4)
          {
            if (v323 <= 15)
            {
              do
              {
                if (v322 == *((unsigned __int8 *)&unk_1B69360A0
                             + 80 * *(unsigned __int16 *)(v533 + 26)
                             + v323))
                  break;
                ++v323;
              }
              while (v323 != 16);
            }
            sub_1B68F8868(v536, v536, (unint64_t *)&v538, v323, *(_WORD *)(v533 + 26), 0, 1, *(__int16 *)(v324 + 4));
            sub_1B68F8868(v536, v536, (unint64_t *)&v538, v323, *(_WORD *)(v533 + 26), 1u, 1, *(__int16 *)(v324 + 6));
            v9 = v511;
          }
          ++v322;
          v125 = 1;
          v8 = v533;
        }
        while (v322 != v308);
        goto LABEL_332;
      }
      v125 = 1;
      goto LABEL_467;
    }
LABEL_231:
    v132 = *(unsigned __int8 *)(v8 + 289);
    if (v131 == 1)
    {
      v133 = 0;
      v134 = (_BYTE *)(v536 + 186);
      do
      {
        if (*(_BYTE *)(v533 + v133 + 290))
        {
          v135 = v536;
          v136 = 1;
          v137 = (_BYTE *)(v536 + 184);
        }
        else
        {
          v138 = *(unsigned __int8 *)(v533 + v133 + 310);
          sub_1B68A39E8(v536, 0, (_BYTE *)(v536 + 184));
          sub_1B68A39E8(v536, v138 & 1, v134);
          sub_1B68A39E8(v536, (v138 >> 1) & 1, v134);
          v136 = (v138 >> 2) & 1;
          v9 = v511;
          v135 = v536;
          v137 = (_BYTE *)(v536 + 186);
        }
        sub_1B68A39E8(v135, v136, v137);
        ++v133;
      }
      while (v133 != 16);
    }
    v139 = v536;
    if (v131 == 7)
    {
      v140 = 0;
      v141 = (_BYTE *)(v536 + 186);
      do
      {
        if (*(_BYTE *)(v533 + v140 + 306))
        {
          v142 = v139;
          v143 = 1;
          v144 = (_BYTE *)(v536 + 184);
        }
        else
        {
          v145 = *(unsigned __int8 *)(v533 + v140 + 326);
          sub_1B68A39E8(v536, 0, (_BYTE *)(v536 + 184));
          sub_1B68A39E8(v536, v145 & 1, v141);
          sub_1B68A39E8(v536, (v145 >> 1) & 1, v141);
          v143 = (v145 >> 2) & 1;
          v139 = v536;
          v142 = v536;
          v144 = (_BYTE *)(v536 + 186);
        }
        sub_1B68A39E8(v142, v143, v144);
        ++v140;
      }
      while (v140 != 4);
    }
    v146 = v538;
    if ((_QWORD)v538)
      v146 = *(unsigned __int8 *)(v538 + 177) - 2 >= 4
          && (!*(_BYTE *)(v538 + 177) ? (v147 = *(_BYTE *)(v538 + 178) == 25) : (v147 = 0), !v147)
          && *(unsigned __int8 *)(v538 + 179) != 0;
    v302 = *((_QWORD *)&v538 + 1);
    if (*((_QWORD *)&v538 + 1))
      v302 = *(unsigned __int8 *)(*((_QWORD *)&v538 + 1) + 177) - 2 >= 4
          && (!*(_BYTE *)(*((_QWORD *)&v538 + 1) + 177)
            ? (v303 = *(_BYTE *)(*((_QWORD *)&v538 + 1) + 178) == 25)
            : (v303 = 0),
              !v303)
          && *(unsigned __int8 *)(*((_QWORD *)&v538 + 1) + 179) != 0;
    v304 = v139 + 2 * (v302 + v146);
    v305 = (_BYTE *)(v304 + 176);
    if (!v132
      || (sub_1B68A39E8(v139, 1, (_BYTE *)(v304 + 176)), v305 = (_BYTE *)(v139 + 182), v132 == 1)
      || (sub_1B68A39E8(v139, 1, (_BYTE *)(v139 + 182)), v306 = v132 - 2, v132 == 2))
    {
      sub_1B68A39E8(v139, 0, v305);
    }
    else
    {
      do
      {
        sub_1B68A39E8(v139, 1, (_BYTE *)(v139 + 182));
        --v306;
      }
      while (v306);
    }
    v539[179] = v132;
    v125 = 1;
LABEL_467:
    v8 = v533;
    goto LABEL_332;
  }
LABEL_219:
  v125 = 1;
LABEL_332:
  if (v10)
  {
    v240 = v539;
    v539[180] = v9[52];
    v240[181] = v9[53];
    v241 = (_DWORD *)v536;
    v242 = *(_DWORD *)(v536 + 40) + *(_DWORD *)(v536 + 24) + 8 * (*(_DWORD *)v536 - *(_DWORD *)(v536 + 8));
    v243 = v242 & ~(v242 >> 31);
    v244 = a2;
  }
  else
  {
    v244 = a2;
    v243 = *(unsigned __int8 *)(a2 + 36) + 8 * (*(_DWORD *)(a2 + 16) - *(_DWORD *)a2);
    v241 = (_DWORD *)v536;
  }
  v245 = v500;
  v502 = v243;
  *a5 = v243 - v506;
  if (v500 == 2)
    goto LABEL_513;
  v246 = v9[52] + 16 * v9[53];
  if (v10)
  {
    v247 = v538;
    if ((_QWORD)v538)
    {
      v248 = *(unsigned __int8 *)(v538 + 177);
      v249 = *(unsigned __int8 *)(v538 + 178);
    }
    else
    {
      v248 = 255;
      v249 = 255;
    }
    v523 = v125;
    v255 = *((_QWORD *)&v538 + 1);
    v497 = v7;
    if (*((_QWORD *)&v538 + 1))
    {
      v256 = *(unsigned __int8 *)(*((_QWORD *)&v538 + 1) + 177);
      v257 = *(unsigned __int8 *)(*((_QWORD *)&v538 + 1) + 178) == 25;
    }
    else
    {
      v257 = 0;
      v256 = 255;
    }
    v258 = 0;
    if (v248)
      v259 = 0;
    else
      v259 = v249 == 25;
    v260 = v259;
    v261 = v248 & 0xFE;
    if (v256)
      v262 = 0;
    else
      v262 = v257;
    v528 = v256 & 0xFE;
    v263 = 1;
    while (1)
    {
      v264 = v263;
      v265 = 1;
      v266 = 2;
      do
      {
        if ((v265 & 1) != 0)
        {
          if (v247 && (v260 & 1) == 0 && (v261 == 4 || ((*(unsigned __int8 *)(v247 + 180) >> (v258 + 1)) & 1) == 0))
          {
            v267 = 1;
            if ((v264 & 1) == 0)
            {
LABEL_364:
              v268 = 2 * (((v246 >> (v258 - 2)) & 1) == 0);
              goto LABEL_374;
            }
          }
          else
          {
            v267 = 0;
            if ((v264 & 1) == 0)
              goto LABEL_364;
          }
        }
        else
        {
          v267 = ((v246 >> (v258 - 1)) & 1) == 0;
          if ((v264 & 1) == 0)
            goto LABEL_364;
        }
        if (v255 && !v262 && (v528 == 4 || ((*(unsigned __int8 *)(v255 + 180) >> (v258 + 2)) & 1) == 0))
          v268 = 2;
        else
          v268 = 0;
LABEL_374:
        sub_1B68A39E8((uint64_t)v241, (v246 >> v258) & 1, (_BYTE *)v241 + 2 * v267 + 2 * v268 + 194);
        v265 = 0;
        ++v258;
        --v266;
      }
      while (v266);
      v263 = 0;
      if ((v264 & 1) == 0)
      {
        v269 = 77;
        if (v260)
          v270 = 78;
        else
          v270 = 77;
        if (v247)
          v271 = v260;
        else
          v271 = 1;
        if (v247)
          v269 = v270;
        if (v261 == 4)
          v272 = 1;
        else
          v272 = v271;
        if ((v272 & 1) == 0)
        {
          v269 = 77;
          if (*(_BYTE *)(v247 + 181))
            v269 = 78;
        }
        a3 = v531;
        v9 = v511;
        v273 = 2;
        if (!v262)
          v273 = 0;
        if (v255)
          v274 = v262;
        else
          v274 = 1;
        if (v255)
          v275 = v273;
        else
          v275 = 0;
        if (v528 == 4)
          v276 = 1;
        else
          v276 = v274;
        v277 = v275;
        if ((v276 & 1) == 0)
          v277 = 2 * (*(_BYTE *)(v255 + 181) != 0);
        sub_1B68A39E8(v536, v246 > 0xF, (_BYTE *)(v536 + 2 * (v269 + v277) + 48));
        v10 = v498;
        if (v246 >= 0x10)
        {
          v278 = 81;
          if (v260)
            v279 = 82;
          else
            v279 = 81;
          if (v247)
            v278 = v279;
          if ((v272 & 1) == 0)
          {
            v278 = 81;
            if (*(_BYTE *)(v247 + 181) == 2)
              v278 = 82;
          }
          if ((v276 & 1) == 0)
            v275 = 2 * (*(_BYTE *)(v255 + 181) == 2);
          sub_1B68A39E8(v536, (v246 & 0x1FF0) == 32, (_BYTE *)(v536 + 2 * (v278 + v275) + 48));
        }
        v8 = v533;
        v241 = (_DWORD *)v536;
        v244 = a2;
        v7 = v497;
        v245 = v500;
        if (v511[52] && *(_BYTE *)(v497 + 184) && !v495 && v523 && (!v494 || *(_BYTE *)v533))
        {
          v538 = *(_OWORD *)(v497 + 128);
          v280 = v538;
          v539 = *(_BYTE **)(v497 + 176);
          v539[199] = v511[3];
          sub_1B68F85F0(v536, v280, *((uint64_t *)&v280 + 1), v511[3]);
        }
        goto LABEL_512;
      }
    }
  }
  v250 = v125;
  v251 = *(_DWORD **)(v244 + 16);
  v252 = *(unsigned __int8 *)(v244 + 36);
  if (v500 == 7 || v500 == 1)
  {
    v253 = v495;
    if (*(_BYTE *)(v8 + 1))
      v254 = &unk_1B692DB88;
    else
      v254 = &unk_1B692DC48;
  }
  else
  {
    v253 = v495;
    if (*(_BYTE *)(v8 + 1))
      v254 = &unk_1B692DC88;
    else
      v254 = &unk_1B692DD48;
  }
  v325 = v254[v246] + 1;
  v326 = __clz(v325);
  v327 = (((v325 - (0x80000000 >> v326)) | (0x80000000 >> v326)) << (2 * v326 - v252 - 31)) | *(_DWORD *)(v244 + 32);
  *v251 = bswap32(v327);
  v328 = v252 - 2 * v326 + 63;
  v329 = (_DWORD *)((char *)v251 + (v328 >> 3));
  v330 = v327 << (v328 & 0xF8);
  if (v328 >= 0x20)
    v330 = 0;
  *(_QWORD *)(v244 + 16) = v329;
  *(_DWORD *)(v244 + 32) = v330;
  *(_BYTE *)(v244 + 36) = v328 & 7;
  if (v9[52] && *(_BYTE *)(v7 + 184) && !v253 && v250 && (!v494 || *(_BYTE *)v8))
  {
    v331 = v328 & 7;
    v332 = (v9[3] << (v331 ^ 0x1F)) | v330;
    *v329 = bswap32(v332);
    *(_QWORD *)(v244 + 16) = (char *)v329 + (++v331 >> 3);
    *(_DWORD *)(v244 + 32) = v332 << (v331 & 8);
    *(_BYTE *)(v244 + 36) = v331 & 7;
  }
LABEL_512:
  if ((_DWORD)v246)
  {
LABEL_513:
    v333 = (char)v9[54];
    if (v10)
    {
      v334 = v539;
      if (v503
        && (*(_BYTE *)(v503 + 177) & 0xFE) != 4
        && ((v335 = *(unsigned __int8 *)(v503 + 178), *(_BYTE *)(v503 + 177)) || v335 != 25)
        && (!*(_BYTE *)(v503 + 177) && v335 != 25 && *(_BYTE *)(v503 + 178)
         || *(_BYTE *)(v503 + 180)
         || *(_BYTE *)(v503 + 181)))
      {
        v336 = 60;
        if (*(_DWORD *)(v503 + 168))
          v336 = 61;
      }
      else
      {
        v336 = 60;
      }
      if (v333 >= 0)
        v337 = (char)v9[54];
      else
        v337 = -v333;
      v338 = (v333 < 1) | (2 * v337);
      v339 = (_BYTE *)(v536 + 2 * v336 + 48);
      if (v338 == 1)
      {
        sub_1B68A39E8(v536, 0, v339);
      }
      else
      {
        sub_1B68A39E8(v536, 1, v339);
        sub_1B68F862C(v536, v338 - 2, (_BYTE *)(v536 + 172));
      }
      *((_DWORD *)v334 + 42) = v333;
      v358 = *(_QWORD *)(v7 + 176);
      LODWORD(v359) = v9[3];
      v518 = v334[180];
      v507 = v334[181];
      v360 = v334[177] < 2u;
      if (v334[177])
      {
        v361 = 0;
        v362 = 16;
        v363 = 5;
        v364 = v505;
      }
      else
      {
        v361 = 0;
        v373 = v334[178];
        v362 = 16;
        v363 = 5;
        v364 = v505;
        if (v373 && v373 != 25)
        {
          sub_1B68F8C14(v536, &v538, 0, 0, v360, 0, 0, a3, (uint64_t)v505, 16);
          v362 = 15;
          v363 = 1;
          v361 = 1;
        }
      }
      v504 = v358;
      v365 = (_QWORD *)(v358 + 240);
      v366 = v364 + 16;
      if ((_DWORD)v359)
      {
        v367 = 0;
        v368 = 0;
        *v365 = 0;
        v365[1] = 0;
        do
        {
          if (((v518 >> v368) & 1) != 0)
          {
            v369 = 0;
            v370 = (uint64_t)v366 + ((2 * v367) & 0xFFFFFFFFFFFFFF00 | (16 * (v368 & 1)));
            v371 = v541;
            do
            {
              for (k = 0; k != 16; k += 2)
                *(_WORD *)&v371[k] = *(_WORD *)(v370 + k);
              v371 += 16;
              ++v369;
              v370 += 32;
            }
            while (v369 != 8);
            *((_BYTE *)v365 + 4 * v368) = sub_1B68F8C14(v536, &v538, 2u, 0, v360, 2 * (v368 & 1), v368 & 0x7FFFFFFE, v531, (uint64_t)v541, 64);
          }
          ++v368;
          v367 += 64;
        }
        while (v368 != 4);
      }
      else
      {
        v374 = 1;
        v530 = 2;
        v375 = (uint64_t)&v366[v361];
        v376 = 0;
        v526 = v360;
        v377 = v360;
        v378 = v365;
        do
        {
          v534 = 0;
          v510 = v374;
          v515 = v376 | 1;
          v379 = 2;
          v512 = v376;
          v380 = v376;
          do
          {
            v521 = v380;
            if (((v518 >> v380) & 1) != 0)
            {
              v381 = v359;
              v382 = v512;
              do
              {
                v359 = v381;
                v383 = v534;
                do
                {
                  v384 = v363;
                  v385 = sub_1B68F8C14(v536, &v538, v363, 0, v377, v383, v382, v531, v375, v362);
                  v363 = v384;
                  *((_BYTE *)v378 + v359) = v385;
                  v375 += 32;
                  ++v383;
                  ++v359;
                }
                while (v379 != v383);
                ++v382;
                v381 = v359;
              }
              while (v382 != v530);
            }
            else
            {
              v375 += 128;
              LODWORD(v359) = v359 + 4;
            }
            v379 += 2;
            v534 = 2;
            v380 = v521 + 1;
          }
          while (v521 != v515);
          v374 = 0;
          v530 += 2;
          v376 = 2;
          v360 = v526;
        }
        while ((v510 & 1) != 0);
      }
      if (v507)
      {
        sub_1B68F8C14(v536, &v538, 6u, 0, v360, 0, 0, v531, (uint64_t)(v505 + 400), 4);
        sub_1B68F8C14(v536, &v538, 6u, 1, v360, 0, 0, v531, (uint64_t)(v505 + 404), 4);
        if (v507 != 1)
        {
          v386 = 0;
          v387 = 0;
          v388 = (uint64_t)(v505 + 273);
          v389 = 1;
          do
          {
            v390 = v389;
            v391 = sub_1B68F8C14(v536, &v538, 7u, 0, v360, 0, v387, v531, v388, 15);
            v392 = 0;
            v393 = v386 + 1;
            v388 += 32;
            v394 = v504 + 256 + v386;
            while (1)
            {
              *(_BYTE *)(v394 + v392) = v391;
              if ((_DWORD)v392 == 1)
                break;
              v391 = sub_1B68F8C14(v536, &v538, 7u, 0, v360, 1, v387, v531, v388, 15);
              ++v392;
              v388 += 32;
            }
            v389 = 0;
            v386 = v393 + 1;
            v387 = 1;
          }
          while ((v390 & 1) != 0);
          v395 = 0;
          v396 = 0;
          v397 = (uint64_t)(v505 + 337);
          v398 = 1;
          do
          {
            v399 = v398;
            v400 = sub_1B68F8C14(v536, &v538, 7u, 1, v360, 0, v396, v531, v397, 15);
            v401 = 0;
            v402 = v395 + 1;
            v397 += 32;
            v403 = v504 + 260 + v395;
            while (1)
            {
              *(_BYTE *)(v403 + v401) = v400;
              if ((_DWORD)v401 == 1)
                break;
              v400 = sub_1B68F8C14(v536, &v538, 7u, 1, v360, 1, v396, v531, v397, 15);
              ++v401;
              v397 += 32;
            }
            v398 = 0;
            v395 = v402 + 1;
            v396 = 1;
          }
          while ((v399 & 1) != 0);
        }
      }
      v241 = (_DWORD *)v536;
      goto LABEL_624;
    }
    v340 = *(_DWORD **)(a2 + 16);
    v341 = *(unsigned __int8 *)(a2 + 36);
    v342 = 2 * v333;
    if (v333 <= 0)
      v342 = 1 - 2 * v333;
    v343 = __clz(v342);
    v344 = (((v342 - (0x80000000 >> v343)) | (0x80000000 >> v343)) << (2 * v343 - v341 - 31)) | *(_DWORD *)(a2 + 32);
    *v340 = bswap32(v344);
    v345 = v341 - 2 * v343 + 63;
    v346 = (char *)v340 + (v345 >> 3);
    v347 = v344 << (v345 & 0xF8);
    if (v345 >= 0x20)
      v347 = 0;
    *(_QWORD *)(a2 + 16) = v346;
    *(_DWORD *)(a2 + 32) = v347;
    *(_BYTE *)(a2 + 36) = v345 & 7;
    v348 = *(_QWORD *)(v7 + 176);
    v349 = *(_QWORD *)(v7 + 128);
    v350 = *(_QWORD *)(v7 + 136);
    if (v349)
      v351 = v349 + 240;
    else
      v351 = 0;
    if (v350)
      v352 = v350 + 240;
    else
      v352 = 0;
    v529 = v9[52];
    v353 = v9[53];
    v354 = v9[3];
    v520 = *(unsigned __int8 *)(v8 + 1);
    v537 = 0;
    v514 = v350;
    v517 = v349;
    v524 = v353;
    if (v245 != 2)
    {
      v404 = 0;
      v405 = 16;
      v355 = v505;
LABEL_586:
      v406 = v348 + 240;
      v532 = &v355[v404 + 16];
      if (v354)
      {
        v535 = 0;
        for (m = 0; m != 4; ++m)
        {
          if (((v529 >> m) & 1) != 0)
          {
            v408 = 0;
            v409 = (char *)v532 + ((2 * v535) & 0xFFFFFFFFFFFFFF00 | (16 * (m & 1)));
            v410 = v541;
            do
            {
              for (n = 0; n != 16; n += 2)
                *(_WORD *)&v410[n] = *(_WORD *)&v409[n];
              v410 += 16;
              ++v408;
              v409 += 32;
            }
            while (v408 != 8);
            v412 = 0;
            v413 = 4 * m;
            v414 = (__int16 *)v541;
            do
            {
              v415 = 0;
              v416 = v414;
              do
              {
                v417 = *v416;
                v416 += 4;
                v540[v415++] = v417;
              }
              while (v415 != 16);
              v418 = sub_1B68F8354((int)v412 + (int)v413, v406, v351, v352);
              sub_1B68AC8E8(v418, v540, v405, &v537, a2);
              *(_BYTE *)(v406 + v412 + v413) = v537;
              ++v412;
              ++v414;
            }
            while (v412 != 4);
          }
          v535 += 64;
        }
      }
      else
      {
        for (ii = 0; ii != 16; ++ii)
        {
          if (((v529 >> (ii >> 2)) & 1) != 0)
          {
            v420 = sub_1B68F8354(ii, v348 + 240, v351, v352);
            sub_1B68AC8E8(v420, v532, v405, &v537, a2);
            *(_BYTE *)(v406 + ii) = v537;
          }
          v532 += 16;
        }
      }
      v244 = a2;
      if (v524)
      {
        if (v520)
        {
          sub_1B68AC8E8(4, v505 + 400, 4, &v537, a2);
          sub_1B68AC8E8(4, v505 + 404, 4, &v537, a2);
          if (v524 != 1)
          {
            v421 = 0;
            if (v517)
              v422 = v351 + 16;
            else
              v422 = 0;
            if (v514)
              v423 = v352 + 16;
            else
              v423 = 0;
            v424 = v505 + 273;
            v425 = v348 + 256;
            do
            {
              v426 = sub_1B68F83D4(v421, v425, v422, v423);
              sub_1B68AC8E8(v426, v424, 15, &v537, a2);
              *(_BYTE *)(v425 + v421) = v537;
              v424 += 16;
              ++v421;
            }
            while (v421 != 4);
            v427 = 0;
            if (v517)
              v428 = v351 + 20;
            else
              v428 = 0;
            if (v514)
              v429 = v352 + 20;
            else
              v429 = 0;
            v430 = v505 + 337;
            do
            {
              v431 = sub_1B68F83D4(v427, v348 + 260, v428, v429);
              sub_1B68AC8E8(v431, v430, 15, &v537, a2);
              *(_BYTE *)(v348 + 260 + v427) = v537;
              v430 += 16;
              ++v427;
            }
            while (v427 != 4);
          }
        }
      }
      v241 = (_DWORD *)v536;
      v10 = v498;
      goto LABEL_623;
    }
    v355 = v505;
    if (v349)
    {
      v356 = *(unsigned __int8 *)(v349 + 245);
      LODWORD(v349) = 1;
      if (v350)
      {
LABEL_537:
        LODWORD(v350) = *(unsigned __int8 *)(v350 + 250);
        v357 = 1;
LABEL_585:
        sub_1B68AC8E8(byte_1B69356F8[(unint64_t)((_DWORD)v350 + v356 + (v357 & v349)) >> (v357 & v349)], v505, 16, &v537, a2);
        v405 = 15;
        v404 = 1;
        goto LABEL_586;
      }
    }
    else
    {
      v356 = 0;
      if (v350)
        goto LABEL_537;
    }
    v357 = 0;
    goto LABEL_585;
  }
LABEL_623:
  if (!v10)
  {
    v433 = *(unsigned __int8 *)(v244 + 36) + 8 * (*(_DWORD *)(v244 + 16) - *(_DWORD *)v244);
    goto LABEL_625;
  }
LABEL_624:
  v432 = v241[10] + v241[6] + 8 * (*v241 - v241[2]);
  v433 = v432 & ~(v432 >> 31);
LABEL_625:
  result = 0;
  *a4 = v433 - v502;
  return result;
}

unint64_t sub_1B68AFE98(unint64_t result, uint64_t *a2, int *a3, unsigned int a4, unsigned int a5)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t i;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t j;

  if (a5 >= 0x20)
  {
    v5 = 0;
    v6 = 0;
    v7 = *a2;
    v8 = *a3;
    v9 = *(_QWORD *)result;
    v10 = a4 >> 4;
    if (a4 >> 4 <= 1)
      v10 = 1;
    do
    {
      if (a4 >= 0x10)
      {
        v11 = 0;
        v12 = v5;
        do
        {
          v13 = 0;
          v14 = v12;
          do
          {
            for (i = 0; i != 16; ++i)
              *(_BYTE *)(v9 + i) = *(_BYTE *)(v7 + (v14 + i));
            v9 += 16;
            ++v13;
            v14 += v8;
          }
          while (v13 != 32);
          ++v11;
          v12 += 16;
        }
        while (v11 != v10);
      }
      ++v6;
      v5 += 32 * v8;
    }
    while (v6 != a5 >> 5);
    if (a5 >= 0x40)
    {
      v16 = 0;
      v17 = 0;
      v18 = a2[1];
      v19 = a3[1];
      v20 = *(_QWORD *)(result + 8);
      do
      {
        if (a4 >= 0x10)
        {
          v21 = 0;
          v22 = v16;
          do
          {
            LODWORD(result) = 0;
            v23 = v22;
            do
            {
              for (j = 0; j != 16; ++j)
                *(_BYTE *)(v20 + j) = *(_BYTE *)(v18 + (v23 + j));
              v20 += 16;
              result = (result + 1);
              v23 += v19;
            }
            while ((_DWORD)result != 16);
            ++v21;
            v22 += 16;
          }
          while (v21 != v10);
        }
        ++v17;
        v16 += 16 * v19;
      }
      while (v17 != a5 >> 6);
    }
  }
  return result;
}

unint64_t sub_1B68AFFC8(unint64_t result, int *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t i;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t j;

  if (a5 >= 0x20)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)result;
    v8 = *a2;
    v9 = *a3;
    v10 = a4 >> 4;
    if (a4 >> 4 <= 1)
      v10 = 1;
    do
    {
      if (a4 >= 0x10)
      {
        v11 = 0;
        v12 = v5;
        do
        {
          v13 = 0;
          v14 = v12;
          do
          {
            for (i = 0; i != 16; ++i)
              *(_BYTE *)(v7 + (v14 + i)) = *(_BYTE *)(v9 + i);
            v9 += 16;
            ++v13;
            v14 += v8;
          }
          while (v13 != 32);
          ++v11;
          v12 += 16;
        }
        while (v11 != v10);
      }
      ++v6;
      v5 += 32 * v8;
    }
    while (v6 != a5 >> 5);
    if (a5 >= 0x40)
    {
      v16 = 0;
      v17 = 0;
      v18 = *(_QWORD *)(result + 8);
      v19 = a2[1];
      v20 = a3[1];
      do
      {
        if (a4 >= 0x10)
        {
          v21 = 0;
          v22 = v16;
          do
          {
            LODWORD(result) = 0;
            v23 = v22;
            do
            {
              for (j = 0; j != 16; ++j)
                *(_BYTE *)(v18 + (v23 + j)) = *(_BYTE *)(v20 + j);
              v20 += 16;
              result = (result + 1);
              v23 += v19;
            }
            while ((_DWORD)result != 16);
            ++v21;
            v22 += 16;
          }
          while (v21 != v10);
        }
        ++v17;
        v16 += 16 * v19;
      }
      while (v17 != a5 >> 6);
    }
  }
  return result;
}

_QWORD *sub_1B68B00F8(_QWORD *result, uint64_t *a2, unsigned int *a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t j;
  int v18;
  uint64_t v19;

  if (a5)
  {
    v5 = 0;
    v6 = *a3;
    v7 = *a2;
    v8 = *result;
    do
    {
      if (a4)
      {
        for (i = 0; i < a4; i += 16)
        {
          v10 = 0;
          v11 = v7 + i;
          do
          {
            v12 = 0;
            do
            {
              *(_BYTE *)(v8 + v12) = *(_BYTE *)(v11 + v12);
              ++v12;
            }
            while ((_DWORD)v12 != 16);
            v8 += v12;
            v11 += v12 + v6;
            ++v10;
          }
          while (v10 != 16);
        }
      }
      v7 += (16 * v6);
      v5 += 16;
    }
    while (v5 < a5);
    if (a5 >= 2)
    {
      v13 = 0;
      v14 = a3[1];
      v15 = a2[1];
      v16 = result[1];
      do
      {
        if (a4)
        {
          for (j = 0; j < a4; j += 16)
          {
            v18 = 0;
            v19 = v15 + j;
            do
            {
              result = 0;
              do
              {
                *((_BYTE *)result + v16) = *((_BYTE *)result + v19);
                result = (_QWORD *)((char *)result + 1);
              }
              while ((_DWORD)result != 16);
              v16 += (uint64_t)result;
              v19 += (uint64_t)result + v14;
              ++v18;
            }
            while (v18 != 8);
            v15 += (8 * v14);
          }
        }
        v13 += 8;
      }
      while (v13 < a5 >> 1);
    }
  }
  return result;
}

_QWORD *sub_1B68B01F0(_QWORD *result, unsigned int *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  int v10;
  uint64_t v11;
  uint64_t j;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  int v18;
  uint64_t v19;

  if (a5)
  {
    v5 = 0;
    v6 = *a2;
    v7 = *a3;
    v8 = *result;
    do
    {
      if (a4)
      {
        for (i = 0; i < a4; i += 16)
        {
          v10 = 0;
          v11 = v8 + i;
          do
          {
            for (j = 0; j != 16; ++j)
              *(_BYTE *)(v11 + j) = *(_BYTE *)(v7 + j);
            v7 += 16;
            v11 += v6;
            ++v10;
          }
          while (v10 != 16);
        }
      }
      v8 += (16 * v6);
      v5 += 16;
    }
    while (v5 < a5);
    if (a5 >= 2)
    {
      v13 = 0;
      v14 = a2[1];
      v15 = a3[1];
      v16 = result[1];
      do
      {
        if (a4)
        {
          for (k = 0; k < a4; k += 16)
          {
            v18 = 0;
            v19 = v16 + k;
            do
            {
              result = 0;
              do
              {
                *((_BYTE *)result + v19) = *((_BYTE *)result + v15);
                result = (_QWORD *)((char *)result + 1);
              }
              while (result != (_QWORD *)16);
              v15 += 16;
              v19 += v14;
              ++v18;
            }
            while (v18 != 8);
          }
        }
        v16 += (8 * v14);
        v13 += 8;
      }
      while (v13 < a5 >> 1);
    }
  }
  return result;
}

uint64_t sub_1B68B02E0(__CVBuffer *a1, uint64_t a2, int a3, int a4)
{
  __CVBuffer *v7;
  char *BaseAddressOfPlane;
  char *v9;
  size_t BytesPerRowOfPlane;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v21;
  __CVBuffer *v22;

  v7 = a1;
  CVPixelBufferLockBaseAddress(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v7, 0);
  v9 = (char *)CVPixelBufferGetBaseAddressOfPlane(v7, 1uLL);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v7, 0);
  v11 = CVPixelBufferGetBytesPerRowOfPlane(v7, 1uLL);
  if (a4 >= 1)
  {
    v12 = v11;
    v22 = v7;
    v13 = *(int *)(a2 + 152);
    v14 = *(int *)(a2 + 136);
    v21 = a4;
    v15 = a4;
    v18 = a2 + 32;
    v17 = *(char **)(a2 + 32);
    v16 = *(char **)(v18 + 8);
    do
    {
      memcpy(BaseAddressOfPlane, v17, a3);
      BaseAddressOfPlane += BytesPerRowOfPlane;
      v17 += v14;
      --v15;
    }
    while (v15);
    v7 = v22;
    if (v21 >= 2)
    {
      v19 = v21 >> 1;
      do
      {
        memcpy(v9, v16, a3);
        v9 += v12;
        v16 += v13;
        --v19;
      }
      while (v19);
    }
  }
  return CVPixelBufferUnlockBaseAddress(v7, 0);
}

_QWORD *sub_1B68B0400(_QWORD *result, int a2, uint64_t a3, int a4, CFTypeRef cf)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  const void *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  __int16 v24;

  if (result)
  {
    v7 = (uint64_t)result;
    v8 = (char *)(result + 25725);
    v9 = result[26015];
    *(_DWORD *)(v9 + 144) = a3;
    *(_DWORD *)(v9 + 148) = a4;
    if (cf)
    {
      v10 = *(const void **)(v9 + 152);
      if (v10)
        CFRelease(v10);
      *(_QWORD *)(v9 + 152) = cf;
      result = CFRetain(cf);
    }
    if (!*(_BYTE *)(v9 + 32))
    {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v9 + 3888), 0xFFFFFFFFFFFFFFFFLL);
      v11 = *(_DWORD **)(v7 + 72);
      v24 = 0;
      v12 = *(_QWORD *)(*((_QWORD *)v8 + 290) + 8 * *(int *)(*((_QWORD *)v8 + 290) + 64) + 72);
      if (sub_1B68D1E44(v7, v12, (uint64_t)(v11 + 4), v13, v14, v15)
        || sub_1B68D2920(v7, (uint64_t)(v11 + 4), v12))
      {
        goto LABEL_18;
      }
      if (*(_DWORD *)(v12 + 1276))
      {
        v18 = *(_BYTE *)(v7 + 1024);
        v8[2333] = v18;
        if (*(_DWORD *)(v12 + 228) <= 0x1DFu)
        {
          *((_DWORD *)v8 + 584) = 1;
          *((_WORD *)v8 + 1170) = 257;
          v8[2342] = 0;
        }
      }
      else
      {
        v18 = v8[2333];
      }
      sub_1B68D2A80(v7, v12, 0, (uint64_t)(v11 + 4), 1u, *((_DWORD *)v8 + 584), v8[2340], 0, v16, v17, 0, 0, 0, v8[2341], v18, (char *)&v24 + 1, (char *)(v7 + 208142));
      if (sub_1B68D342C(v7, v12, 0, (uint64_t)(v11 + 4), 1u))
        goto LABEL_18;
      sub_1B68D4344(v7, v12, (uint64_t)(v11 + 4));
      sub_1B68D52BC(v7, v12, 0, (uint64_t)(v11 + 4), (uint64_t)v11);
      *v11 = *(_BYTE *)(*(_QWORD *)(v7 + 136) + 317) == 0;
      sub_1B68D5CF4(v7, (uint64_t)(v11 + 4), (uint64_t)(v11 + 24), v12);
      if (*((_DWORD *)v8 + 31) != 1)
        sub_1B68D5F80(v12, *(_QWORD *)v8, (uint64_t)(v11 + 24), *(unsigned __int8 *)(*(_QWORD *)(v7 + 136) + 577));
      *(_DWORD *)(*(_QWORD *)(v7 + 128) + 8) = 0;
      sub_1B68EC5FC(*(_QWORD *)(v7 + 136), *(_QWORD *)(v7 + 88), v7, v12, (_DWORD *)(*(_QWORD *)(v7 + 128) + 8));
      v19 = *((_QWORD *)v8 + 290);
      if (sub_1B68F2DA0(0, v7, v12, *(_QWORD *)(v7 + 136), 0, (uint64_t)(v11 + 4), (uint64_t)v11, *(unsigned int *)(v19 + 220), *(_DWORD **)(v19 + 120), *(char **)(v19 + 112), *(_DWORD **)(v19 + 136), *(_QWORD *)(v19 + 128), 2, *(_DWORD *)(*(_QWORD *)(v7 + 128) + 8), &v24))LABEL_18:CFLog();
      *(_BYTE *)(v9 + 33) = 0;
      v20 = *(_QWORD *)(v9 + 72 + 8 * *(int *)(v9 + 64));
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v7 + 160))(*(_QWORD *)(v7 + 168), a3, *(_QWORD *)(v20 + 1408));
      v21 = *(_QWORD *)(v9 + 72 + 8 * *(int *)(v9 + 68));
      if (v21)
      {
        v22 = *(_DWORD *)(v21 + 1276);
        if (*(_DWORD *)(v20 + 1276) < v22)
        {
          if (*(_DWORD *)(*(_QWORD *)(v7 + 128) + 8))
            *(_DWORD *)(v21 + 1276) = v22 - 1;
        }
      }
      v23 = *(_DWORD *)(v20 + 1276);
      if (!*(_DWORD *)(*(_QWORD *)(v7 + 128) + 8))
        ++v23;
      *(_DWORD *)(v7 + 176) = v23;
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v9 + 3888));
      return (_QWORD *)dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v9 + 88));
    }
  }
  return result;
}

void sub_1B68B0720(CFTypeRef **a1)
{
  CFTypeRef *v1;
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  const void *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  char *v16;
  CFTypeRef *v17;

  v1 = *a1;
  if (*a1)
  {
    v3 = v1[19];
    if (v3)
    {
      CFRelease(v3);
      (*a1)[19] = 0;
      v1 = *a1;
    }
    v4 = v1[5];
    if (v4)
    {
      CFRelease(v4);
      (*a1)[5] = 0;
      v1 = *a1;
    }
    v5 = v1[6];
    if (v5)
    {
      CFRelease(v5);
      (*a1)[6] = 0;
      v1 = *a1;
    }
    v6 = v1[1];
    if (v6)
    {
      CFRelease(v6);
      (*a1)[1] = 0;
      v1 = *a1;
    }
    v7 = v1[2];
    if (v7)
    {
      CFRelease(v7);
      (*a1)[2] = 0;
      v1 = *a1;
    }
    if (*v1)
    {
      VTCompressionSessionInvalidate((VTCompressionSessionRef)*v1);
      CFRelease(**a1);
      **a1 = 0;
      v1 = *a1;
    }
    v8 = (char *)v1[7];
    if (v8)
    {
      sub_1B67CA678(v8);
      (*a1)[7] = 0;
      v1 = *a1;
    }
    if (*((int *)v1 + 745) >= 1)
    {
      v9 = 0;
      do
      {
        v10 = 0;
        v11 = 1;
        do
        {
          v12 = v11;
          v13 = *(&(*a1)[2 * v9 + 373] + v10);
          if (v13)
          {
            CFRelease(v13);
            *(&(*a1)[2 * v9 + 373] + v10) = 0;
          }
          v11 = 0;
          v10 = 1;
        }
        while ((v12 & 1) != 0);
        ++v9;
        v1 = *a1;
      }
      while (v9 < *((int *)*a1 + 745));
    }
    v14 = v1[444];
    if (v14)
    {
      MEMORY[0x1BCC9811C](v14, 0x1000C80BDFB0063);
      (*a1)[444] = 0;
      v1 = *a1;
    }
    v15 = v1[445];
    if (v15)
    {
      MEMORY[0x1BCC9811C](v15, 0x1000C80BDFB0063);
      (*a1)[445] = 0;
      v1 = *a1;
    }
    v16 = (char *)v1[453];
    if (v16)
    {
      sub_1B68B3DD4(v16);
      (*a1)[453] = 0;
      v1 = *a1;
    }
    v1[14] = 0;
    (*a1)[15] = 0;
    (*a1)[16] = 0;
    (*a1)[17] = 0;
    v17 = *a1;
    if ((*a1)[454])
      sub_1B68F8260((*a1)[454]);
    if (v17[486])
    {
      dispatch_release((dispatch_object_t)v17[486]);
      v17 = *a1;
    }
    if (v17[11])
    {
      dispatch_release((dispatch_object_t)v17[11]);
      v17 = *a1;
    }
    free(v17);
    *a1 = 0;
  }
}

void sub_1B68B0938(const void *a1, const __CFString *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  VTSessionSetProperty(a1, a2, v5);
  CFRelease(v5);
}

void sub_1B68B0998(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void sub_1B68B09F8(int *a1, int a2, int *a3, int a4, int a5)
{
  int v7;
  double v8;
  double v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  switch(a4)
  {
    case 1:
    case 4:
      *a1 = (*a1 + 15) & 0xFFFFFFF0;
      v7 = (*a3 + 15) & 0xFFFFFFF0;
      goto LABEL_19;
    case 2:
      v8 = log2((double)*a1);
      *a1 = (int)exp2(ceil(v8));
      v9 = log2((double)*a3);
      v7 = (int)exp2(ceil(v9));
      goto LABEL_19;
    case 3:
      v10 = *a1 + 127;
      if (v10 <= 0)
        v11 = -(-v10 & 0x7F);
      else
        v11 = v10 & 0x7F;
      *a1 = v10 - v11;
      v12 = *a3 + 127;
      if (v12 <= 0)
        v13 = -(-v12 & 0x7F);
      else
        v13 = v12 & 0x7F;
      v7 = v12 - v13;
      goto LABEL_19;
    case 5:
      if (a5)
        v14 = -32;
      else
        v14 = -16;
      if (a5)
        v15 = 32;
      else
        v15 = 16;
      *a1 = (*a1 + 15) & 0xFFFFFFF0;
      *a3 = (*a3 + 15) & 0xFFFFFFF0;
      *a1 = (a2 + v15 - 1) & v14;
      v7 = (v15 + *a3 - 1) & v14;
LABEL_19:
      *a3 = v7;
      break;
    default:
      CFLog();
      break;
  }
}

uint64_t sub_1B68B0B54(size_t *a1, char a2)
{
  __IOSurface *v4;
  uint64_t result;
  size_t PlaneCount;
  size_t HeightOfPlane;
  int Height;
  int v9;
  unsigned int v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  size_t v14;
  size_t v15;
  _QWORD *v16;
  int BytesPerRowOfPlane;

  v4 = (__IOSurface *)a1[5];
  *((_DWORD *)a1 + 4) = IOSurfaceGetPixelFormat(v4);
  a1[3] = IOSurfaceGetAllocSize(v4);
  *((_BYTE *)a1 + 32) = IOSurfaceIsTiled() != 0;
  *((_DWORD *)a1 + 9) = IOSurfaceGetTileFormat();
  result = IOSurfaceLock(v4, 0, 0);
  if (!(_DWORD)result)
  {
    PlaneCount = IOSurfaceGetPlaneCount(v4);
    if (PlaneCount > 1)
    {
      *a1 = IOSurfaceGetWidthOfPlane(v4, 0);
      HeightOfPlane = IOSurfaceGetHeightOfPlane(v4, 0);
    }
    else
    {
      *a1 = IOSurfaceGetWidth(v4);
      HeightOfPlane = IOSurfaceGetHeight(v4);
    }
    a1[1] = HeightOfPlane;
    if ((a2 & 1) != 0)
    {
      a1[6] = (size_t)IOSurfaceGetBaseAddress(v4);
      a1[7] = 0;
      *((_DWORD *)a1 + 16) = IOSurfaceGetWidth(v4);
      Height = IOSurfaceGetHeight(v4);
      *((_BYTE *)a1 + 76) = 0;
      v9 = *((_DWORD *)a1 + 16);
      v10 = (v9 + 15) & 0xFFFFFFF0;
      *((_DWORD *)a1 + 17) = Height;
      *((_DWORD *)a1 + 18) = v10;
      v11 = *a1;
      v12 = a1[1];
      v13 = ((v12 + 63) & 0xFFFFFFFFFFFFFFC0) * ((*a1 + 63) & 0xFFFFFFFFFFFFFFC0);
      a1[10] = 0;
      *((_DWORD *)a1 + 22) = 0;
      v14 = a1[6];
      a1[12] = v13;
      a1[13] = v14 + ((v12 + 31) & 0xFFFFFFFFFFFFFFE0) * ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      a1[14] = 0;
      *((_DWORD *)a1 + 30) = v9;
      *((_DWORD *)a1 + 31) = Height >> 1;
      *((_BYTE *)a1 + 132) = 0;
      *((_DWORD *)a1 + 32) = v10;
      a1[19] = v13 >> 1;
      a1[17] = 0;
      *((_DWORD *)a1 + 36) = 0;
    }
    else if (PlaneCount)
    {
      v15 = 0;
      v16 = a1 + 12;
      do
      {
        *(v16 - 6) = IOSurfaceGetBaseAddressOfPlane(v4, v15);
        *(v16 - 5) = 0;
        *((_DWORD *)v16 - 8) = IOSurfaceGetWidthOfPlane(v4, v15);
        *((_DWORD *)v16 - 7) = IOSurfaceGetHeightOfPlane(v4, v15);
        *((_BYTE *)v16 - 20) = IOSurfaceGetAddressFormatOfPlane();
        *((_DWORD *)v16 - 4) = IOSurfaceGetCompressionTypeOfPlane();
        BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v4, v15);
        *((_DWORD *)v16 - 6) = BytesPerRowOfPlane;
        *v16 = *((int *)v16 - 7) * (uint64_t)BytesPerRowOfPlane;
        *(_QWORD *)((char *)v16 - 12) = 0;
        if (*((_DWORD *)v16 - 4) == 1)
        {
          *(v16 - 6) = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
          *(v16 - 5) = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
          *((_DWORD *)v16 - 3) = IOSurfaceGetHorizontalPixelOffsetWithinCompressedTileArrayOfPlane();
          *((_DWORD *)v16 - 2) = IOSurfaceGetVerticalPixelOffsetWithinCompressedTileArrayOfPlane();
        }
        ++v15;
        v16 += 7;
      }
      while (PlaneCount != v15);
    }
    return IOSurfaceUnlock(v4, 0, 0);
  }
  return result;
}

void sub_1B68B0DB0(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t sub_1B68B0E10(CVPixelBufferPoolRef *a1, int a2, int a3, int a4)
{
  CVPixelBufferPoolRef v8;
  const CFDictionaryKeyCallBacks *v9;
  const CFDictionaryValueCallBacks *v10;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v12;
  __CFDictionary *v13;
  BOOL v14;
  uint64_t v15;
  int v17;
  __CFDictionary *v18;
  __CFDictionary *v19;

  v8 = *a1;
  if (v8)
  {
    CFRelease(v8);
    *a1 = 0;
  }
  v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = CFDictionaryCreateMutable(0, 0, v9, v10);
  v13 = v12;
  if (Mutable)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    sub_1B689B4D4(Mutable, (const void *)*MEMORY[0x1E0CA9060], 1);
    if (a4)
      v17 = 875704422;
    else
      v17 = 875704438;
    sub_1B689B4D4(v13, (const void *)*MEMORY[0x1E0CA9040], v17);
    sub_1B689B4D4(v13, (const void *)*MEMORY[0x1E0CA90E0], a2);
    sub_1B689B4D4(v13, (const void *)*MEMORY[0x1E0CA8FD8], a3);
    v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v18)
    {
      v19 = v18;
      sub_1B689B4D4(v18, (const void *)*MEMORY[0x1E0CBBF10], 1024);
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0CA8FF0], v19);
      CFRelease(v19);
      sub_1B689B4D4(v13, (const void *)*MEMORY[0x1E0CA9048], 64);
      sub_1B689B4D4(v13, (const void *)*MEMORY[0x1E0CA8F68], 16);
    }
    v15 = CVPixelBufferPoolCreate(0, Mutable, v13, a1);
LABEL_18:
    CFRelease(v13);
    if (!Mutable)
      return v15;
    goto LABEL_10;
  }
  v15 = 4294958324;
  if (v12)
    goto LABEL_18;
  if (Mutable)
LABEL_10:
    CFRelease(Mutable);
  return v15;
}

uint64_t sub_1B68B0FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, uint64_t a11, uint64_t a12)
{
  unsigned int v12;
  uint64_t v16;
  char *v17;

  v12 = a7;
  v16 = 512;
  if ((int)(a6 / a9) < 6)
    v16 = 256;
  v17 = (char *)&unk_1B692DD90 + v16;
  sub_1B68C0A38(0, a1, a5, a6, a7, a3, a8, a9, a10, (uint64_t)&unk_1B692DD90 + v16, (uint64_t)&unk_1B692DD90 + v16, (uint64_t (*)(uint64_t, char *, _QWORD, uint64_t, char *, char *, uint64_t))Filter8tapH_neon64);
  return sub_1B68C0A38(1, a2, a11, a6, v12 >> 1, a4, a12, a9, a10 >> 1, (uint64_t)v17, (uint64_t)v17, (uint64_t (*)(uint64_t, char *, _QWORD, uint64_t, char *, char *, uint64_t))Filter8tapH_chroma_neon64);
}

uint64_t sub_1B68B10D0(uint64_t a1)
{
  uint64_t v1;
  OpaqueVTCompressionSession *v3;
  CMTime completeUntilPresentationTimeStamp;
  CMTime v6;

  v1 = *(_QWORD *)(a1 + 8 * *(int *)(a1 + 64) + 72);
  if (v1)
  {
    memset(&v6, 0, sizeof(v6));
    CMTimeMake(&v6, *(int *)(v1 + 1332), *(_DWORD *)(v1 + 1336));
    v3 = *(OpaqueVTCompressionSession **)a1;
    completeUntilPresentationTimeStamp = v6;
    VTCompressionSessionCompleteFrames(v3, &completeUntilPresentationTimeStamp);
    return 0;
  }
  else
  {
    CFLog();
    return 4294943593;
  }
}

uint64_t sub_1B68B1158(uint64_t a1, int a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8, _BYTE *a9)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  const void *v18;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  BOOL v29;
  int v30;
  int v31;
  char v32;
  __IOSurface *v33;
  __IOSurface *v34;
  size_t *v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  __IOSurface *v40;
  void *BaseAddress;
  uint64_t AllocSize;
  void *v43;
  uint64_t v44;
  char v45;
  char v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  _DWORD v54[27];
  char v55;
  int v56;
  int v57;
  char v58;
  int v59;
  int v60;
  _DWORD v61[2];
  _DWORD v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  IOSurfaceRef v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v67 = 0;
  v68 = 0;
  if (!a5)
    goto LABEL_8;
  v10 = 0;
  v11 = a1 + 224;
  v12 = (int *)(a1 + 224);
  while (1)
  {
    v13 = *v12;
    v12 += 20;
    if (v13 == *(_DWORD *)(a4 + 60))
      break;
    if (a5 == ++v10)
      goto LABEL_8;
  }
  if ((_DWORD)v10 != a5)
  {
    v20 = v10;
    v21 = v11 + 80 * v10;
    v23 = *(_DWORD *)(v21 + 32);
    v22 = (int *)(v21 + 32);
    if (v23 == a2 && *(_DWORD *)(v11 + 80 * v20 + 40) == a3)
    {
LABEL_16:
      v14 = 0;
    }
    else
    {
      v24 = 0;
      v25 = 1;
      *a9 = 1;
      *(_DWORD *)(a1 + 2976) = 1;
      v53 = *(v22 - 1);
      v26 = v11 + 80 * v20;
      v27 = a7 > 0;
      v28 = a8 > 0;
      v29 = !v27 || !v28;
      v49 = *(_DWORD *)(v26 + 36);
      if (v27 && v28)
        v30 = a7;
      else
        v30 = a2;
      if (v29)
        v31 = a3;
      else
        v31 = a8;
      v51 = v31;
      v52 = v30;
      *v22 = v30;
      *(_DWORD *)(v26 + 40) = v31;
      v50 = (a6 + 15) & 0xFFFFFFF0;
LABEL_24:
      v32 = v25;
      v33 = IOSurfaceLookup(*(_DWORD *)(v11 + 80 * v20 + 4 * v24 + 68));
      *(&v67 + v24) = (uint64_t)v33;
      if (v33)
      {
        v34 = v33;
        IOSurfaceLock(v33, 0, 0);
        v35 = (size_t *)&v54[40 * v24 + 8];
        v35[5] = (size_t)v34;
        sub_1B68B0B54(v35, *(_DWORD *)(a1 + 3540) == 6);
        v36 = 0;
        v37 = 1;
        while (1)
        {
          v38 = v37;
          v39 = *(_QWORD *)&v54[40 * v24 + 20 + 14 * v36];
          *((_QWORD *)&v65 + 2 * v24 + v36) = v39;
          if (!v39)
            break;
          v37 = 0;
          v36 = 1;
          if ((v38 & 1) == 0)
          {
            v25 = 0;
            v24 = 1;
            if ((v32 & 1) != 0)
              goto LABEL_24;
            if (*(_DWORD *)(a1 + 3540) == 6)
            {
              v40 = v68;
              BaseAddress = IOSurfaceGetBaseAddress(v68);
              AllocSize = IOSurfaceGetAllocSize(v40);
              v43 = BaseAddress;
            }
            else
            {
              memset((void *)v66, 128, *(int *)(a1 + 3588) * (uint64_t)*(int *)(a1 + 3580));
              v43 = (void *)*((_QWORD *)&v66 + 1);
              AllocSize = *(int *)(a1 + 3592) * (uint64_t)*(int *)(a1 + 3584);
            }
            memset(v43, 128, AllocSize);
            v63 = v66;
            v64 = v65;
            v62[0] = v56;
            v62[1] = v59;
            v61[0] = v57;
            v61[1] = v60;
            if (v55 == 1 || v58 == 1)
            {
              v44 = 0;
              v54[0] = *(_DWORD *)(a1 + 3572);
              v45 = 1;
              do
              {
                v46 = v45;
                if (LOBYTE(v54[14 * v44 + 27]) == 1)
                {
                  v47 = *(_DWORD *)(a1 + 3576);
                  v48 = *(_QWORD *)&v54[14 * v44 + 22];
                }
                else
                {
                  v47 = 0;
                  v48 = 0;
                }
                v45 = 0;
                v54[v44 + 1] = v47;
                *(_QWORD *)&v54[2 * v44 + 4] = v48;
                v44 = 1;
              }
              while ((v46 & 1) != 0);
              sub_1B68BF070((uint64_t)&v63, v50, v52, v51, (uint64_t)&v64, (uint64_t)v54, v50, v53, v49, (uint64_t)v62, (uint64_t)v61);
            }
            else
            {
              sub_1B68BEE70(*(_QWORD *)(a1 + 56), (uint64_t)&v63, v50, v52, v51, (uint64_t)&v64, 0, v50, v53, v49, (uint64_t)v62, (uint64_t)v61);
            }
            goto LABEL_16;
          }
        }
      }
      v14 = 4294967246;
    }
  }
  else
  {
LABEL_8:
    CFLog();
    v14 = 4294943593;
  }
  v15 = 0;
  v16 = 1;
  do
  {
    v17 = v16;
    v18 = (const void *)*(&v67 + v15);
    if (v18)
    {
      IOSurfaceUnlock((IOSurfaceRef)*(&v67 + v15), 0, 0);
      CFRelease(v18);
    }
    v16 = 0;
    v15 = 1;
  }
  while ((v17 & 1) != 0);
  return v14;
}

uint64_t sub_1B68B1504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int a6, char a7, _BYTE *a8)
{
  int v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v13 = *(_DWORD *)(a2 + 228);
  v14 = (unsigned __int16 *)(a2 + 19112);
  if ((a7 & 1) != 0
    || (v15 = *(_DWORD *)(a2 + 224), v16 = *(_DWORD *)(a2 + 192), v15 >= *v14)
    && v16 >= *(unsigned __int16 *)(a2 + 19114))
  {
    v15 = 0;
    v16 = 0;
  }
  if (*a5 == 1)
  {
    v17 = sub_1B68B1158(a1, *(unsigned __int16 *)(a2 + 19112), *(unsigned __int16 *)(a2 + 19114), a3, a6, v13, v15, v16, a8);
    if ((_DWORD)v17)
    {
      v18 = v17;
LABEL_10:
      CFLog();
      return v18;
    }
  }
  if (a5[1] != 1)
    return 0;
  v18 = sub_1B68B1158(a1, *v14, v14[1], a4, a6, v13, v15, v16, a8);
  if ((_DWORD)v18)
    goto LABEL_10;
  return v18;
}

uint64_t sub_1B68B1630(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned __int16 *v7;
  __CVPixelBufferPool *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  _BOOL4 v17;
  BOOL v18;
  BOOL v19;
  _BOOL4 v20;
  CVPixelBufferPoolRef v21;
  uint64_t v22;
  __CVPixelBufferPool *v23;
  CFAllocatorRef *v24;
  const __CFAllocator *v25;
  uint64_t v26;
  signed int PixelFormatType;
  __CFDictionary *Mutable;
  __CFArray *v29;
  char v30;
  uint64_t v31;
  int v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFMutableDictionaryRef v38;
  __CFArray *v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  __CFDictionary *v47;
  __CVBuffer *v49;
  size_t v50;
  uint64_t v51;
  BOOL v53;
  size_t v54;
  uint64_t v55;
  _BOOL4 v56;
  BOOL v57;
  char v59;
  void *v60;
  size_t v61;
  __CFDictionary *v62;
  signed int v63;
  int v64;
  int v65;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  size_t v68;
  int v69;
  void *BaseAddress;
  size_t DataSize;
  char *v72;
  size_t v73;
  size_t v74;
  int v75;
  OpaqueVTPixelTransferSession *v76;
  void *v77;
  size_t v78;
  size_t v79;
  uint64_t v80;
  void *v81;
  size_t v82;
  uint64_t v83;
  unsigned int v84;
  size_t v85;
  unsigned int v86;
  char *v87;
  char *v88;
  uint64_t v89;
  int v90;
  size_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  __CVBuffer *v95;
  char *v96;
  size_t v97;
  size_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  int v105;
  char *v106;
  int v107;
  uint64_t v108;
  char *v109;
  size_t v110;
  uint64_t v111;
  char *v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  char *v125;
  const __CFAllocator *v126;
  size_t v127;
  char *v128;
  char *v129;
  size_t v130;
  size_t v131;
  size_t v132;
  uint64_t v133;
  int v134;
  int64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  int v141;
  unint64_t v142;
  const __CFAllocator *v143;
  char *v144;
  char *v145;
  char *v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  unsigned int v151;
  int v152;
  unsigned __int16 *v153;
  unsigned __int16 *v154;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatorb;
  CFAllocatorRef allocatora;
  CVPixelBufferPoolRef *poolOut;
  CVPixelBufferPoolRef *poolOutb;
  __CVBuffer *poolOuta;
  _BOOL4 v161;
  void *v162;
  char *v163;
  char *v164;
  __CVBuffer *pixelBuffer;
  int pixelBuffera;
  signed int v168;
  size_t v169;
  uint64_t v170;
  size_t v171;
  char *v172;
  void *__b;
  char *__ba;
  void *__bd;
  char *__bb;
  char *__bc;
  CVPixelBufferRef pixelBufferOut;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  int valuePtr;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191[2];
  int v192;
  int v193;
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  v7 = (unsigned __int16 *)(a3 + 19112);
  v8 = *(__CVPixelBufferPool **)(a2 + 8 * *(int *)(a2 + 68) + 3464);
  v9 = *(unsigned __int16 *)(a3 + 19112);
  v10 = *(unsigned __int16 *)(a3 + 19114);
  v11 = *(_DWORD *)(a3 + 228);
  v170 = *(int *)(a3 + 224);
  v12 = *(_DWORD *)(a3 + 196);
  __b = (void *)*(int *)(a3 + 192);
  pixelBufferOut = 0;
  sub_1B68B26E4(a3, v191, (uint64_t)&v187);
  v14 = v11 != v9 || v12 != v10;
  if (*(_BYTE *)(a2 + 3392))
    v15 = v14;
  else
    v15 = 0;
  v16 = v191[0];
  if (v191[0] <= 0)
  {
    v17 = 1;
    if (v192 >= v11 - 1 && v191[1] <= 0)
      v17 = v193 < v12 - 1;
  }
  else
  {
    v17 = 1;
  }
  if (!v15
    && (v11 < 641 ? (v18 = v12 < 481) : (v18 = 0),
        !v18 ? (v19 = v11 < 481) : (v19 = 1),
        v19 ? (v20 = v17) : (v20 = 0),
        !v20)
    || *(_DWORD *)(a1 + 4852) == 1)
  {
    v21 = CVPixelBufferPoolRetain(v8);
    v22 = 0;
LABEL_28:
    *(_QWORD *)(a2 + 3480 + 8 * *(int *)(a2 + 68)) = v21;
    *(_QWORD *)(a2 + 3496) = CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(a2 + 3480 + 8 * *(int *)(a2 + 68)), 0);
    *(_QWORD *)(a2 + 3504) = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(a2 + 3480 + 8 * *(int *)(a2 + 68)), 0);
    goto LABEL_63;
  }
  v23 = *(__CVPixelBufferPool **)(a2 + 8);
  v24 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  pixelBuffer = v8;
  v161 = v17;
  if (v23)
  {
    v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_31;
  }
  poolOut = (CVPixelBufferPoolRef *)(a2 + 8);
  v153 = v7;
  *(_QWORD *)&v179 = 2;
  PixelFormatType = CVPixelBufferGetPixelFormatType(v8);
  v152 = (v170 + 15) & 0xFFFFFFF0;
  valuePtr = 0;
  allocator = *v24;
  Mutable = CFDictionaryCreateMutable(*v24, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v29 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (PixelFormatType <= 1095519263)
  {
    if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
      goto LABEL_53;
  }
  else
  {
    if (PixelFormatType == 2033463856)
      goto LABEL_51;
    if (PixelFormatType == 1714696752)
    {
LABEL_52:
      valuePtr = 1714696752;
      v37 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFArrayAppendValue(v29, v37);
      CFRelease(v37);
      goto LABEL_53;
    }
    if (PixelFormatType != 1095519264)
      goto LABEL_53;
  }
  if (PixelFormatType == 1095519264)
    v33 = 875704438;
  else
    v33 = PixelFormatType;
  valuePtr = v33;
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(v29, v34);
  CFRelease(v34);
  if (PixelFormatType != 1095519264 && PixelFormatType != 875704422)
    goto LABEL_53;
  valuePtr = 875704422;
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(v29, v35);
  CFRelease(v35);
  if (PixelFormatType != 1095519264)
    goto LABEL_53;
LABEL_51:
  valuePtr = 2033463856;
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(v29, v36);
  CFRelease(v36);
  if (PixelFormatType == 1095519264)
    goto LABEL_52;
LABEL_53:
  v151 = ((_DWORD)__b + 15) & 0xFFFFFFF0;
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9040], v29);
  CFRelease(v29);
  v38 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v38);
  CFRelease(v38);
  v39 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v185 = 1024;
  v40 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v40);
  CFRelease(v40);
  v185 = 0;
  v41 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v41);
  CFRelease(v41);
  v185 = 256;
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v42);
  CFRelease(v42);
  v185 = 512;
  v43 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v43);
  CFRelease(v43);
  v185 = 768;
  v44 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v44);
  CFRelease(v44);
  v185 = 1280;
  v45 = CFNumberCreate(0, kCFNumberSInt32Type, &v185);
  CFArrayAppendValue(v39, v45);
  CFRelease(v45);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8F80], v39);
  CFRelease(v39);
  sub_1B68B0DB0(Mutable, (const void *)*MEMORY[0x1E0CA90E0], v170);
  sub_1B68B0DB0(Mutable, (const void *)*MEMORY[0x1E0CA8FD8], (int)__b);
  sub_1B68B0DB0(Mutable, (const void *)*MEMORY[0x1E0CA9048], 64);
  if (v152 != (_DWORD)v170)
    sub_1B68B0DB0(Mutable, (const void *)*MEMORY[0x1E0CA8FB8], v152 - v170);
  if (v151 != (_DWORD)__b)
    sub_1B68B0DB0(Mutable, (const void *)*MEMORY[0x1E0CA8FA0], v151 - (_DWORD)__b);
  sub_1B68B0DB0(Mutable, (const void *)*MEMORY[0x1E0CA8F68], 64);
  v46 = CFNumberCreate(0, kCFNumberCFIndexType, &v179);
  v47 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(v47, (const void *)*MEMORY[0x1E0CA9060], v46);
  CFRelease(v46);
  v22 = CVPixelBufferPoolCreate(allocator, v47, Mutable, poolOut);
  if (Mutable)
    CFRelease(Mutable);
  if (v47)
    CFRelease(v47);
  v7 = v153;
  if ((_DWORD)v22)
    goto LABEL_62;
  v25 = allocator;
  v23 = *poolOut;
LABEL_31:
  v26 = CVPixelBufferPoolCreatePixelBuffer(v25, v23, &pixelBufferOut);
  if ((_DWORD)v26)
  {
    v22 = v26;
    goto LABEL_62;
  }
  v31 = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  if ((_DWORD)v31)
  {
    v22 = v31;
    goto LABEL_62;
  }
  if (!v15)
  {
    if (v161)
    {
      v63 = v16 & 0xFFFFFFF0;
      if (v16 < 0 != v30
        || v63 >= v11
        || v63 >= v12
        || (v64 = v192 | 0xF, (v192 | 0xF) < v63)
        || v64 >= v11
        || (v65 = v193 | 0xF, (v193 | 0xF) < v63)
        || v65 >= v12)
      {
        v63 = 0;
        v64 = v11 - 1;
        v65 = v12 - 1;
      }
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      __ba = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      v68 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      v69 = v64 - v63 + 1;
      BaseAddress = CVPixelBufferGetBaseAddress(pixelBufferOut);
      DataSize = CVPixelBufferGetDataSize(pixelBufferOut);
      memset(BaseAddress, 128, DataSize);
      v72 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
      v172 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
      v73 = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
      v74 = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 1uLL);
      if (v63 <= v65)
      {
        v83 = v63;
        v84 = v63;
        pixelBuffera = v69;
        v85 = v69;
        v75 = v65 + 1;
        v86 = v75 - v84;
        v87 = &BaseAddressOfPlane[v83 * BytesPerRowOfPlane + v84];
        v168 = v84;
        v88 = &v72[v83 * v73 + v84];
        do
        {
          memcpy(v88, v87, v85);
          v87 += BytesPerRowOfPlane;
          v88 += v73;
          --v86;
        }
        while (v86);
        v63 = v168;
        v69 = pixelBuffera;
      }
      else
      {
        v75 = v65 + 1;
      }
      v89 = v63 >> 1;
      if (v75 >= 0)
        v90 = v75;
      else
        v90 = v75 + 1;
      if ((int)v89 < v90 >> 1)
      {
        v91 = v69;
        v92 = (v90 >> 1) - (unint64_t)v89;
        v93 = &__ba[v68 * v89 + v63];
        v94 = &v172[v74 * v89 + v63];
        do
        {
          memcpy(v94, v93, v91);
          v93 += v68;
          v94 += v74;
          --v92;
        }
        while (v92);
      }
LABEL_176:
      v22 = 0;
      goto LABEL_177;
    }
    v179 = 0u;
    v180 = v170 << 16;
    v181 = (_QWORD)__b << 16;
    v182 = 0;
    v183 = v11;
    v184 = v12;
    CVPixelBufferGetIOSurface(pixelBuffer);
    CVPixelBufferGetIOSurface(pixelBufferOut);
    v22 = IOSurfaceAcceleratorTransformSurface();
    goto LABEL_177;
  }
  v49 = pixelBufferOut;
  v50 = *v7;
  v51 = *(int *)(a3 + 224);
  v53 = v51 > 1279 && v50 < 0x141;
  if (*(_QWORD *)(a2 + 40))
  {
    v54 = v7[1];
    v55 = *(int *)(a3 + 192);
    v56 = sub_1B68A3978();
    v57 = v56;
    v171 = v54;
    if (v56)
    {
      v59 = (int)v51 > 4 * (int)v50 || (int)v55 > 4 * (int)v54 || v53;
      if ((v59 & 1) == 0)
        goto LABEL_83;
    }
    else if (!v53)
    {
LABEL_83:
      v60 = CVPixelBufferGetBaseAddress(v49);
      v61 = CVPixelBufferGetDataSize(v49);
      memset(v60, 128, v61);
      if (v57)
      {
        v62 = 0;
      }
      else
      {
        sub_1B68B34E8();
        v62 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(v62, (const void *)*MEMORY[0x1E0D3A340], (const void *)*MEMORY[0x1E0C9AE50]);
      }
      v179 = 0u;
      v180 = v51 << 16;
      v181 = v55 << 16;
      v182 = 0;
      v183 = v50;
      v184 = v54;
      CVPixelBufferGetIOSurface(pixelBuffer);
      v95 = v49;
      CVPixelBufferGetIOSurface(v49);
      v22 = IOSurfaceAcceleratorTransformSurface();
      if (v62)
        CFRelease(v62);
      if ((_DWORD)v22)
      {
        CFLog();
        goto LABEL_62;
      }
      v154 = v7;
      v49 = v95;
      goto LABEL_120;
    }
    v154 = v7;
    __bd = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    v162 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    poolOutb = (CVPixelBufferPoolRef *)CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    v54 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
    allocatorb = (CFAllocatorRef)CVPixelBufferGetBaseAddressOfPlane(v49, 0);
    v77 = CVPixelBufferGetBaseAddressOfPlane(v49, 1uLL);
    v78 = CVPixelBufferGetBytesPerRowOfPlane(v49, 0);
    v79 = CVPixelBufferGetBytesPerRowOfPlane(v49, 1uLL);
    v80 = v55;
    v81 = CVPixelBufferGetBaseAddress(v49);
    v82 = CVPixelBufferGetDataSize(v49);
    memset(v81, 128, v82);
    v150 = v54;
    LODWORD(v54) = v171;
    sub_1B68B0FE4((uint64_t)__bd, (uint64_t)v162, (uint64_t)allocatorb, (uint64_t)v77, (uint64_t)poolOutb, v51, v80, v78, v50, v171, v150, v79);
LABEL_120:
    __bb = (char *)CVPixelBufferGetBaseAddressOfPlane(v49, 0);
    v96 = (char *)CVPixelBufferGetBaseAddressOfPlane(v49, 1uLL);
    v97 = CVPixelBufferGetBytesPerRowOfPlane(v49, 0);
    v98 = CVPixelBufferGetBytesPerRowOfPlane(v49, 1uLL);
    v99 = v188;
    if (v188 >= 1)
    {
      v100 = __bb;
      v101 = v188;
      do
      {
        memset(v100, 128, v50);
        v100 += v97;
        --v101;
      }
      while (v101);
      if ((int)v99 >= 2)
      {
        v102 = v99 >> 1;
        v103 = v96;
        do
        {
          memset(v103, 128, v50);
          v103 += v98;
          --v102;
        }
        while (v102);
      }
    }
    v104 = v190;
    if (v190 < (int)v54 - 1)
    {
      v105 = ~v190 + v171;
      v106 = &__bb[v97 + v97 * v190];
      do
      {
        memset(v106, 128, v50);
        v106 += v97;
        --v105;
      }
      while (v105);
      v107 = v104 + 2;
      if ((int)v104 >= -1)
        v107 = v104 + 1;
      if ((v107 >> 1) + 1 < (int)(v171 >> 1))
      {
        v108 = ~(uint64_t)(v107 >> 1) + (v171 >> 1);
        v109 = &v96[v98 * ((v107 >> 1) + 1)];
        do
        {
          memset(v109, 128, v50);
          v109 += v98;
          --v108;
        }
        while (v108);
      }
    }
    poolOuta = v49;
    v163 = v96;
    v110 = v187;
    if (v187 >= 1)
    {
      if ((int)v99 <= (int)v104)
      {
        v111 = v104 - (int)v99 + 1;
        v112 = &__bb[v97 * (int)v99];
        do
        {
          memset(v112, 128, v110);
          v112 += v97;
          --v111;
        }
        while (v111);
      }
      if ((v99 & 0x80000000) == 0)
        v113 = v99;
      else
        v113 = v99 + 1;
      v114 = v113 >> 1;
      v115 = v104 + 2;
      if ((int)v104 >= -1)
        v115 = v104 + 1;
      if (v114 <= v115 >> 1)
      {
        v116 = (v115 >> 1) - (uint64_t)v114 + 1;
        v117 = &v163[v98 * v114];
        do
        {
          memset(v117, 128, v110);
          v117 += v98;
          --v116;
        }
        while (v116);
      }
    }
    v118 = v189;
    if (v189 < (int)v50 - 1)
    {
      if ((int)v99 <= (int)v104)
      {
        v119 = v104 - (int)v99 + 1;
        v120 = &__bb[v189 + 1 + v97 * (int)v99];
        do
        {
          memset(v120, 128, ~(_DWORD)v118 + (int)v50);
          v120 += v97;
          --v119;
        }
        while (v119);
      }
      if ((v99 & 0x80000000) == 0)
        v121 = v99;
      else
        v121 = v99 + 1;
      v122 = v121 >> 1;
      v123 = v104 + 2;
      if ((int)v104 >= -1)
        v123 = v104 + 1;
      if (v122 <= v123 >> 1)
      {
        v124 = (v123 >> 1) - (uint64_t)v122 + 1;
        v125 = &v163[v118 + 1 + v98 * v122];
        do
        {
          memset(v125, 128, ~(_DWORD)v118 + (int)v50);
          v125 += v98;
          --v124;
        }
        while (v124);
      }
    }
    if (a4)
    {
      v126 = (const __CFAllocator *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
      CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
      v127 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
      v169 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
      v128 = (char *)CVPixelBufferGetBaseAddressOfPlane(poolOuta, 0);
      v129 = (char *)CVPixelBufferGetBaseAddressOfPlane(poolOuta, 1uLL);
      v130 = CVPixelBufferGetBytesPerRowOfPlane(poolOuta, 0);
      v131 = CVPixelBufferGetBytesPerRowOfPlane(poolOuta, 1uLL);
      v22 = 0;
      if (!v128)
        goto LABEL_177;
      v132 = v169;
      if (!v129)
        goto LABEL_177;
      v164 = v129;
      LODWORD(v133) = v154[7];
      __bc = (char *)v131;
      if (v154[6] > v171)
      {
        v134 = v133 - v171;
        allocatora = v126;
        if (v133 > v171)
        {
          v135 = 0;
          v136 = (char *)v126 + v127 * v171;
          v137 = &v128[v130 * v171];
          do
          {
            memcpy(v137, v136, v154[6]);
            ++v135;
            v133 = v154[7];
            v134 = v133 - v171;
            v136 += v127;
            v137 += v130;
          }
          while (v135 < (uint64_t)(v133 - v171));
          v132 = v169;
          v131 = (size_t)__bc;
          v126 = allocatora;
        }
        if (v134 >= 2)
        {
          v138 = 0;
          v139 = (char *)v126 + v132 * (v171 >> 1);
          v140 = &v164[v131 * (v171 >> 1)];
          do
          {
            memcpy(v140, v139, v154[6]);
            ++v138;
            LODWORD(v133) = v154[7];
            v141 = v133 - v171;
            if ((int)v133 < (int)v171)
              ++v141;
            v139 += v132;
            v140 = &__bc[(_QWORD)v140];
          }
          while (v138 < v141 >> 1);
          v126 = allocatora;
        }
      }
      if (v133 > v50)
      {
        v142 = 0;
        v143 = v126;
        v144 = &v128[v50];
        v145 = (char *)v143 + v50;
        v146 = (char *)v143 + v50;
        do
        {
          memcpy(v144, v146, v154[6] - v50);
          ++v142;
          v147 = v154[7];
          v146 += v127;
          v144 += v130;
        }
        while (v142 < v147);
        if (v147 >= 2)
        {
          v148 = 0;
          v149 = &v164[v50];
          do
          {
            memcpy(v149, v145, v154[6] - v50);
            v22 = 0;
            ++v148;
            v145 += v169;
            v149 = &__bc[(_QWORD)v149];
          }
          while (v148 < (unint64_t)v154[7] >> 1);
          goto LABEL_177;
        }
      }
    }
    goto LABEL_176;
  }
  v76 = *(OpaqueVTPixelTransferSession **)(a2 + 48);
  if (!v76)
  {
    v22 = 4294967246;
    goto LABEL_62;
  }
  v22 = VTPixelTransferSessionTransferImage(v76, pixelBuffer, pixelBufferOut);
  if (!(_DWORD)v22)
  {
LABEL_177:
    v21 = CVPixelBufferPoolRetain(pixelBufferOut);
    goto LABEL_28;
  }
LABEL_62:
  CFLog();
LABEL_63:
  if (pixelBufferOut)
  {
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    CFRelease(pixelBufferOut);
  }
  return v22;
}

double sub_1B68B26E4(uint64_t a1, int *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  double result;

  v3 = *(_DWORD *)(a1 + 228);
  v4 = *(_DWORD *)(a1 + 196);
  v5 = *(unsigned __int16 *)(a1 + 19112);
  v6 = *(unsigned __int16 *)(a1 + 19114);
  v7 = *(_DWORD *)(a1 + 1384);
  v8 = *(_DWORD *)(a1 + 1388);
  v9 = *(_DWORD *)(a1 + 1376);
  v10 = *(_DWORD *)(a1 + 1380);
  if (v3 >= 0)
    v11 = *(_DWORD *)(a1 + 228);
  else
    v11 = v3 + 1;
  v12 = -(v11 >> 1);
  if (v4 >= 0)
    v13 = *(_DWORD *)(a1 + 196);
  else
    v13 = v4 + 1;
  v14 = -(v13 >> 1);
  if (v7)
    v15 = v8 == 0;
  else
    v15 = 1;
  v19 = v15 || v9 <= v12 || v10 <= v14 || v7 > v3 || v8 > v4;
  if (v19
    || (v3 >= 0 ? (v20 = *(_DWORD *)(a1 + 228)) : (v20 = v3 + 1),
        v9 >= v20 >> 1 || (v4 >= 0 ? (v21 = *(_DWORD *)(a1 + 196)) : (v21 = v4 + 1), v10 >= v21 >> 1)))
  {
    result = 0.0;
    *(_QWORD *)a2 = 0;
    a2[2] = v3 - 1;
    a2[3] = v4 - 1;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = v5 - 1;
    *(_DWORD *)(a3 + 12) = v6 - 1;
  }
  else
  {
    v22 = (v20 >> 1) - (v7 >> 1) + v9;
    v23 = (v21 >> 1) - (v8 >> 1) + v10;
    *a2 = v22;
    a2[1] = v23;
    a2[2] = v7 + v22 - 1;
    a2[3] = v8 + v23 - 1;
    v24 = v22 * v5 / v3;
    if ((int)(v24 & 0xFFFFFFF0) <= 16)
      v25 = 16;
    else
      v25 = v24 & 0xFFFFFFF0;
    v26 = v25 - 16;
    if ((v24 & 0xC) != 0)
      v27 = v24 & 0xFFFFFFF0;
    else
      v27 = v26;
    *(_DWORD *)a3 = v27;
    v28 = a2[1] * v6 / v4;
    if ((int)(v28 & 0xFFFFFFF0) <= 16)
      v29 = 16;
    else
      v29 = v28 & 0xFFFFFFF0;
    v30 = v29 - 16;
    if ((v28 & 0xC) != 0)
      v31 = v28 & 0xFFFFFFF0;
    else
      v31 = v30;
    *(_DWORD *)(a3 + 4) = v31;
    v32 = v3 - 1;
    v33 = (v3 - 1 + a2[2] * v5) / v3;
    v34 = v5 - 1;
    if ((v33 | 0xF) - v33 <= 3)
      v35 = (v33 | 0xF) + 16;
    else
      v35 = v33 | 0xF;
    if (v34 < v35)
      v35 = v34;
    *(_DWORD *)(a3 + 8) = v35;
    v36 = (v4 - 1 + a2[3] * v6) / v4;
    v37 = v6 - 1;
    if ((v36 | 0xF) - v36 <= 3)
      v38 = (v36 | 0xF) + 16;
    else
      v38 = v36 | 0xF;
    if (v37 < v38)
      v38 = v37;
    *(_DWORD *)(a3 + 12) = v38;
    v39 = *a2;
    if (*a2 < 0
      || v39 >= v3
      || (v40 = a2[1], v40 < 0)
      || v40 >= v4
      || (v41 = a2[2], v41 < v39)
      || v41 >= v3
      || (v42 = a2[3], v42 < v40)
      || v42 >= v4)
    {
      result = 0.0;
      *(_QWORD *)a2 = 0;
      a2[2] = v32;
      a2[3] = v4 - 1;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = v34;
      *(_DWORD *)(a3 + 12) = v37;
    }
  }
  return result;
}

float sub_1B68B28D0(uint64_t a1, uint64_t a2)
{
  int32x4_t v2;
  _WORD *v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  int32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int8x16_t *v18;
  uint64_t v19;
  int32x4_t v20;
  unint64_t v21;
  unint64_t i;
  const char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int v26;
  const char *v27;
  unsigned __int128 v28;
  unsigned __int128 v29;
  int8x16_t v30;
  uint8x16_t v31;
  unsigned int v32;
  int8x16_t v33;
  unsigned int v34;
  float result;

  v3 = *(_WORD **)(a1 + 3408);
  v4 = *(unsigned __int16 *)(a2 + 19112);
  v5 = (v4 + 15) >> 4;
  v6 = ((unint64_t)*(unsigned __int16 *)(a2 + 19114) + 15) >> 4;
  v7 = 0uLL;
  if (*(_WORD *)(a2 + 19114))
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 3496);
    v10 = *(_QWORD *)(a1 + 3504);
    v11 = (v5 + 7) >> 3;
    v12 = v11 - 1;
    v13 = *(_DWORD *)(a1 + 3416);
    v14 = v5 - 8 * (v11 - 1);
    v15 = 16 * v10;
    v16 = 2 * v10;
    if (v11 <= 1)
      v11 = 1;
    while (!v4)
    {
LABEL_23:
      if (++v8 == v6)
        goto LABEL_24;
    }
    v17 = 0;
    v18 = (int8x16_t *)&v3[(v13 * v8) + 8];
    v19 = v9 + v15 * v8;
    while (1)
    {
      v20 = 0uLL;
      if (v17 == v12)
        v21 = v14;
      else
        v21 = 8;
      if ((_DWORD)v21)
      {
        for (i = 0; i < v21; i += 2)
        {
          v23 = (const char *)(v19 + ((16 * (_DWORD)i) & 0xFFFFFFE0));
          v24 = 0uLL;
          v25 = 0uLL;
          v26 = 4;
          do
          {
            v28 = (unsigned __int128)vld2q_s8(v23);
            v27 = &v23[v16];
            v29 = (unsigned __int128)vld2q_s8(v27);
            v23 = &v27[v16];
            v30 = (int8x16_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v28), (uint8x16_t)v29);
            *(uint8x8_t *)v30.i8 = vqrshrn_n_u16((uint16x8_t)v30, 2uLL);
            v31 = (uint8x16_t)vzip1q_s8(v30, v30);
            v24 = (int8x16_t)vabal_u8(vabal_u8((uint16x8_t)v24, *(uint8x8_t *)v31.i8, *(uint8x8_t *)&v28), *(uint8x8_t *)v31.i8, *(uint8x8_t *)&v29);
            v25 = (int8x16_t)vabal_high_u8(vabal_high_u8((uint16x8_t)v25, v31, (uint8x16_t)v28), v31, (uint8x16_t)v29);
            --v26;
          }
          while (v26);
          if ((int)v21 - (int)i <= 1)
            v32 = 0;
          else
            v32 = -1;
          v33 = vandq_s8(v25, (int8x16_t)vdupq_n_s16(v32));
          v24.i32[0] = vaddlvq_u16((uint16x8_t)v24);
          v33.i32[0] = vaddlvq_u16((uint16x8_t)v33);
          v20 = (int32x4_t)vextq_s8((int8x16_t)v20, v24, 4uLL);
          v2 = (int32x4_t)vextq_s8((int8x16_t)v2, v33, 4uLL);
        }
        if (i >= 8)
          goto LABEL_22;
      }
      else
      {
        LODWORD(i) = 0;
      }
      v34 = i - 2;
      do
      {
        v20 = (int32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)0, 4uLL);
        v2 = (int32x4_t)vextq_s8((int8x16_t)v2, (int8x16_t)0, 4uLL);
        v34 += 2;
      }
      while (v34 < 6);
LABEL_22:
      v7 = vaddq_s32(vaddq_s32(v7, v20), v2);
      *v18++ = vorrq_s8((int8x16_t)vcvtq_n_u32_f32(vsqrtq_f32(vcvtq_n_f32_u32((uint32x4_t)v20, 0x20uLL)), 0x18uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vcvtq_n_u32_f32(vsqrtq_f32(vcvtq_n_f32_u32((uint32x4_t)v2, 0x20uLL)), 0x18uLL), 0x10uLL));
      v19 += 128;
      if (++v17 == v11)
        goto LABEL_23;
    }
  }
LABEL_24:
  result = COERCE_FLOAT(vcvts_n_u32_f32(sqrtf(vcvts_n_f32_u32(vaddvq_s32(v7), 0x20uLL)/ vcvts_n_f32_u32(vdupq_n_s32(v6 * v5).u32[0], 0x20uLL)), 8uLL));
  *v3 = LOWORD(result);
  *(_DWORD *)(a2 + 1268) = **(unsigned __int16 **)(a1 + 3408);
  return result;
}

unint64_t sub_1B68B2A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  _OWORD v24[8];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2 + 19416;
  memset(v24, 0, sizeof(v24));
  v6 = (_QWORD *)(a2 + 19432);
  *(_OWORD *)(a2 + 19432) = 0u;
  *(_DWORD *)(a2 + 19424) = 1;
  *(_WORD *)(a2 + 19416) = 0;
  result = sub_1B68B436C(a1, v24, 0, (_BYTE *)a2);
  if (*(_BYTE *)(a2 + 24))
  {
    v8 = *(_QWORD *)(a3 + 22824);
    v9 = *(unsigned int *)(v8 + 12);
    if ((int)v9 < 1)
      goto LABEL_20;
    v10 = 0;
    v11 = v8 + 216;
    v12 = -2147483647;
    v13 = -1;
    do
    {
      v14 = *(_QWORD *)(v11 + 8 * v10);
      if (!v14)
        break;
      if (*(_BYTE *)(v14 + 1394) && *(_BYTE *)(v14 + 1398) && *(_BYTE *)(v14 + 1356) && !*(_BYTE *)(v14 + 14))
      {
        v15 = *(_DWORD *)(v14 + 1276);
        if (*(_BYTE *)(v14 + 25))
          v16 = v15 < *(_DWORD *)(a2 + 1276);
        else
          v16 = 0;
        v17 = v16;
        if ((v17 & (v15 > v12)) != 0)
        {
          v12 = v15;
          v13 = v10;
        }
      }
      ++v10;
    }
    while (v9 != v10);
    if (v13 == -1 || (v18 = *(_QWORD *)(v11 + 8 * v13)) == 0)
    {
LABEL_20:
      v18 = 0;
      *(_BYTE *)(v5 + 1) = 1;
    }
    goto LABEL_32;
  }
  if ((_DWORD)result)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = *((_QWORD *)v24 + v19);
      if (v20 && v21 >= *(_DWORD *)(v23 + 1276))
      {
        v20 = 1;
      }
      else if (v23 != a2 && *(_BYTE *)(v23 + 32))
      {
        v21 = *(_DWORD *)(v23 + 1276);
        v20 = 1;
        v22 = v19;
      }
      ++v19;
    }
    while (result != v19);
    if (v20)
    {
      v18 = *((_QWORD *)v24 + v22);
LABEL_32:
      *v6 = v18;
    }
  }
  *(_DWORD *)(v5 + 4) = result;
  return result;
}

void sub_1B68B2C50(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(a1, a2, v5);
    CFRelease(v6);
  }
}

const __CFNumber *sub_1B68B2CB4(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *result;
  unsigned int valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

const __CFNumber *sub_1B68B2CE8(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *result;
  uint64_t valuePtr;

  valuePtr = 0;
  result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t sub_1B68B2D1C(uint64_t a1, int a2, int a3)
{
  int v4;
  void *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;

  *(_WORD *)(a1 + 2) = a2;
  *(_WORD *)a1 = a3;
  v4 = a3 * a2;
  *(_DWORD *)(a1 + 4) = a3 * a2;
  memset_pattern16((void *)(a1 + 24), &unk_1B6918170, 0x800uLL);
  memset_pattern16((void *)(a1 + 1032), &unk_1B6918180, 0x1CuLL);
  *(_DWORD *)(a1 + 1020) = 3;
  *(_QWORD *)(a1 + 1024) = 0x300000003;
  *(_DWORD *)(a1 + 1060) = 3;
  *(_QWORD *)(a1 + 1064) = 0x300000003;
  *(_DWORD *)(a1 + 1044) = 0;
  memset_pattern16((void *)(a1 + 2072), &unk_1B6918190, 0x50uLL);
  memset_pattern16((void *)(a1 + 2152), &unk_1B6918180, 0xB0uLL);
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_QWORD *)(a1 + 2504) = 0;
  memset_pattern16((void *)(a1 + 2512), &unk_1B6918180, 0x1E8uLL);
  memset_pattern16((void *)(a1 + 3000), &unk_1B6918190, 0x5CuLL);
  v5 = malloc_type_malloc(16 * v4, 0x82ECD37AuLL);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = malloc_type_malloc(*(unsigned int *)(a1 + 4), 0x82ECD37AuLL);
  *(_QWORD *)(a1 + 16) = v6;
  if (v5)
    v7 = 1;
  else
    v7 = 2;
  if (v6)
    v8 = v5 == 0;
  else
    v8 = v7;
  if ((_DWORD)v8)
  {
    free(*(void **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
    free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
  return v8;
}

void sub_1B68B2E6C(uint64_t a1)
{
  mach_port_t v2;
  const __CFDictionary *v3;
  io_service_t MatchingService;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  uint64_t v7;
  CFStringRef *v8;
  CFStringRef v9;
  const __CFNumber *Value;
  __int32 v11;
  int32x4_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  int32x4_t v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int *v27;
  int *v28;
  int *v29;
  int *v30;
  uint64_t v31;
  int *v32;
  int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int *v37;
  int *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int *v42;
  int *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int *v47;
  int *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  double v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  char buffer[256];
  __int32 v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = *MEMORY[0x1E0CBBAB8];
  v3 = IOServiceMatching("AppleM2ScalerCSCDriver");
  MatchingService = IOServiceGetMatchingService(v2, v3);
  if (MatchingService)
  {
    v5 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", CFSTR("IOSurfaceAcceleratorCapabilitiesDict"), 0, 0);
    if (v5)
    {
      v6 = v5;
      v7 = 0;
      v8 = (CFStringRef *)off_1E6A17CA0;
      while (1)
      {
        v9 = *v8;
        CFStringGetCString(*v8, buffer, 256, 0x600u);
        Value = (const __CFNumber *)CFDictionaryGetValue(v6, v9);
        if (!Value)
          break;
        CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&v61 + v7);
        v7 += 4;
        ++v8;
        if (v7 == 24)
        {
          v11 = v61;
          *(_DWORD *)(a1 + 4) = v61;
          v12.i64[0] = v62;
          *(_QWORD *)(a1 + 8) = v62;
          v13 = v63;
          *(_DWORD *)(a1 + 16) = v63;
          v14 = v64;
          *(_QWORD *)(a1 + 20) = v64;
          if (v12.i32[0] == 4)
          {
            if (v13 == 16
              && v11 == 8
              && (v12.i32[1] == 16 ? (v15 = (_DWORD)v14 == 2) : (v15 = 0),
                  v15 ? (v16 = HIDWORD(v14) == 7) : (v16 = 0),
                  v16))
            {
              *(_BYTE *)a1 = 1;
            }
            else
            {
              *(_BYTE *)a1 = 0;
              v12.i32[0] = v11;
              v12.i64[1] = v14;
              if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v12))) & 1) != 0 || !v13)
                break;
            }
          }
          else
          {
            *(_BYTE *)a1 = 0;
            if (!v12.i32[0])
              break;
            v17.i64[1] = v14;
            v17.i64[0] = __PAIR64__(v12.u32[1], v13);
            if ((vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqzq_s32(v17), (int8x16_t)xmmword_1B6917D10)) & 0xF) != 0
              || v11 == 0)
            {
              break;
            }
          }
          v19 = 32;
          while (1)
          {
            v20 = malloc_type_malloc(4* (2* (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 8)+ *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 4))), 0x100004052888210uLL);
            *(_QWORD *)(a1 + v19) = v20;
            if (!v20)
              goto LABEL_59;
            v19 += 8;
            if (v19 == 88)
            {
              if (*(_DWORD *)(a1 + 28) == 7)
              {
                v22 = *(unsigned int *)(a1 + 4);
                v21 = *(unsigned int *)(a1 + 8);
                v24 = *(unsigned int *)(a1 + 12);
                v23 = *(unsigned int *)(a1 + 16);
                if (*(_BYTE *)a1)
                {
                  v25 = 0;
                  v26 = &dword_1B692E0B4;
                  v27 = &dword_1B692E5B4;
                  v28 = &dword_1B692E2B4;
                  v29 = &dword_1B692E3B4;
                  do
                  {
                    v30 = *(int **)(a1 + 8 * v25 + 32);
                    if ((_DWORD)v21)
                    {
                      v31 = 0;
                      v32 = v27;
                      do
                      {
                        if ((_DWORD)v23)
                        {
                          v33 = v32;
                          v34 = v23;
                          do
                          {
                            v35 = *v33;
                            v33 += 4;
                            *v30++ = v35;
                            --v34;
                          }
                          while (v34);
                        }
                        ++v31;
                        ++v32;
                      }
                      while (v31 != v21);
                      v36 = 0;
                      v37 = v28;
                      do
                      {
                        if ((_DWORD)v23)
                        {
                          v38 = v37;
                          v39 = v23;
                          do
                          {
                            v40 = *v38;
                            v38 += 4;
                            *v30++ = v40;
                            --v39;
                          }
                          while (v39);
                        }
                        ++v36;
                        ++v37;
                      }
                      while (v36 != v21);
                    }
                    if ((_DWORD)v22)
                    {
                      v41 = 0;
                      v42 = v29;
                      do
                      {
                        if ((_DWORD)v24)
                        {
                          v43 = v42;
                          v44 = v24;
                          do
                          {
                            v45 = *v43;
                            v43 += 8;
                            *v30++ = v45;
                            --v44;
                          }
                          while (v44);
                        }
                        ++v41;
                        ++v42;
                      }
                      while (v41 != v22);
                      v46 = 0;
                      v47 = v26;
                      do
                      {
                        if ((_DWORD)v24)
                        {
                          v48 = v47;
                          v49 = v24;
                          do
                          {
                            v50 = *v48;
                            v48 += 8;
                            *v30++ = v50;
                            --v49;
                          }
                          while (v49);
                        }
                        ++v46;
                        ++v47;
                      }
                      while (v46 != v22);
                    }
                    ++v25;
                    v27 += 385;
                    v28 += 385;
                    v29 += 385;
                    v26 += 385;
                  }
                  while (v25 != 7);
                }
                else
                {
                  v51 = 0;
                  v52 = *(_DWORD *)(a1 + 20);
                  v53 = *(_DWORD *)(a1 + 24);
                  v54 = (v23 * v21);
                  v59 = a1 + 32;
                  do
                  {
                    v55 = *(_DWORD **)(v59 + 8 * v51);
                    v56 = flt_1B6930ACC[v51];
                    sub_1B68B3284(v21, v23, v52, v53, v55, v56);
                    v57 = &v55[v54];
                    sub_1B68B3284(v21, v23, v52, v53, v57, v56);
                    v58 = &v57[v54];
                    sub_1B68B3284(v22, v24, v52, v53, v58, v56);
                    sub_1B68B3284(v22, v24, v52, v53, &v58[(v24 * v22)], v56);
                    ++v51;
                  }
                  while (v51 != 7);
                }
              }
              goto LABEL_59;
            }
          }
        }
      }
LABEL_59:
      CFRelease(v6);
    }
  }
}

void sub_1B68B3284(int a1, int a2, char a3, char a4, _DWORD *a5, double a6)
{
  double v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  double v12;
  double v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double *v24;
  uint64_t v25;
  double v26;
  BOOL v27;
  double v28;
  unint64_t v29;
  int v30;
  _DWORD *v31;
  double v32;
  int v33;
  double v34;
  double v35;
  uint64_t v36;
  int v37;
  long double v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a6 <= 1.0)
    v6 = a6;
  else
    v6 = 1.0;
  v7 = a1 - 1;
  if (a1 < 1)
    v7 = a1;
  if (a2 >= 1)
  {
    v8 = a5;
    v9 = 0;
    v10 = v7 >> 1;
    v11 = vcvtmd_s64_f64(v6 * (double)v10);
    v35 = (double)a2;
    v12 = (double)v11;
    v13 = (double)-v11;
    v14 = ~(-1 << (a4 + a3));
    v15 = &a5[v10 * a2];
    v37 = 1 << a4;
    v36 = a2;
    v33 = -v10;
    v16 = (unint64_t)a1 << 8;
    v17 = 4 * a2;
    v18 = (double *)&v40;
    v19 = 0.5;
    v34 = (double)(unint64_t)(1 << a4);
    do
    {
      if (a1 < 1)
      {
        v30 = 0;
      }
      else
      {
        v20 = (double)(int)v9 / v35;
        if (v20 >= v19)
          v21 = v20 + -1.0;
        else
          v21 = (double)(int)v9 / v35;
        v22 = 0.0;
        v23 = v33;
        v24 = v18;
        v25 = a1;
        do
        {
          v26 = v6 * ((double)v23 - v21);
          v27 = v26 < v12 && v26 > v13;
          v28 = 0.0;
          if (v27)
          {
            if (v26 == 0.0)
            {
              v28 = 1.0;
            }
            else
            {
              v39 = sin(v26 * 3.14159265) / (v26 * 3.14159265);
              v28 = v39 * (sin(v26 / v12 * 3.14159265) / (v26 / v12 * 3.14159265));
            }
          }
          *v24 = v28;
          v22 = v22 + v28;
          v24 += 32;
          ++v23;
          --v25;
        }
        while (v25);
        v29 = 0;
        v30 = 0;
        v31 = v8;
        v19 = 0.5;
        do
        {
          v32 = v18[v29 / 8] / v22 * v34 + 0.5;
          *v31 = (int)v32 & v14;
          v30 += (int)v32;
          v29 += 256;
          v31 = (_DWORD *)((char *)v31 + v17);
        }
        while (v16 != v29);
      }
      v15[v9++] += v37 - v30;
      ++v18;
      ++v8;
    }
    while (v9 != v36);
  }
}

uint64_t sub_1B68B34E8()
{
  return IOSurfaceAcceleratorSetCustomFilter();
}

uint64_t sub_1B68B35A0(uint64_t a1)
{
  CVPixelBufferPoolRef *v2;
  char *v3;
  _DWORD *v4;
  char *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  CVPixelBufferRef v14;
  size_t v15;
  char *BaseAddressOfPlane;
  char *v17;
  size_t BytesPerRowOfPlane;
  int v19;
  int v20;
  size_t v21;
  int v22;
  int v23;
  int v24;
  int v26;
  int v27;
  int v28;
  size_t v29;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *(CVPixelBufferPoolRef **)(a1 + 232);
  if (!v2)
  {
    v2 = (CVPixelBufferPoolRef *)malloc_type_calloc(0x38uLL, 1uLL, 0x4AE20AB7uLL);
    *(_QWORD *)(a1 + 232) = v2;
    if (!v2)
      return 4294943590;
  }
  v3 = *(char **)(a1 + 22328);
  v4 = (_DWORD *)(a1 + 22304);
  v5 = *(char **)(a1 + 22336);
  v6 = *(int *)(a1 + 22304);
  v32 = *(_OWORD *)(a1 + 22344);
  v31 = *(_QWORD *)(a1 + 22312);
  v8 = *(_DWORD *)(a1 + 22368);
  v7 = *(_DWORD *)(a1 + 22372);
  v9 = v4[18];
  v10 = v4[19];
  v11 = v4[20];
  pixelBufferOut = 0;
  v12 = sub_1B68B3838((uint64_t)v2, v8, v7, v9, v10, v11);
  if (!(_DWORD)v12)
  {
    v13 = CVPixelBufferPoolCreatePixelBuffer(0, v2[2], &pixelBufferOut);
    v14 = pixelBufferOut;
    if (!(_DWORD)v13)
    {
      v13 = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
      v14 = pixelBufferOut;
      if (!(_DWORD)v13)
      {
        v26 = v11;
        v27 = v10;
        v28 = v9;
        v15 = v8;
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
        v17 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
        v29 = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 1uLL);
        if (BytesPerRowOfPlane != v6)
          goto LABEL_28;
        if (BytesPerRowOfPlane <= v15 + 64)
        {
          memcpy(BaseAddressOfPlane, v3, BytesPerRowOfPlane * v7);
        }
        else
        {
LABEL_28:
          if (v7 >= 1)
          {
            v19 = v7;
            do
            {
              memcpy(BaseAddressOfPlane, v3, v15);
              BaseAddressOfPlane += BytesPerRowOfPlane;
              v3 += v6;
              --v19;
            }
            while (v19);
          }
        }
        v20 = v7 >> 1;
        v21 = v15;
        if (v29 == v6 && v29 <= v15 + 64)
        {
          memcpy(v17, v5, v29 * v20);
          v23 = v27;
          v22 = v28;
          v24 = v26;
        }
        else
        {
          v23 = v27;
          v22 = v28;
          v24 = v26;
          if (v7 >= 2)
          {
            do
            {
              memcpy(v17, v5, v21);
              v17 += v29;
              v5 += v6;
              --v20;
            }
            while (v20);
          }
        }
        v13 = CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
        v14 = pixelBufferOut;
        if (!(_DWORD)v13)
        {
          v12 = sub_1B68B39A4(v2, pixelBufferOut, (char **)&v32, (unsigned int *)&v31, v21, v7, v22, v23, v24);
          v14 = pixelBufferOut;
          if (!pixelBufferOut)
            return v12;
          goto LABEL_22;
        }
      }
    }
    v12 = v13;
    if (v14)
LABEL_22:
      CFRelease(v14);
  }
  return v12;
}

uint64_t sub_1B68B3838(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  __CFDictionary *Mutable;
  const void **v17;

  if (*(_QWORD *)a1 && *(_DWORD *)(a1 + 8) == a4 && *(_DWORD *)(a1 + 12) == a5
    || (result = sub_1B68B3C18((CVPixelBufferPoolRef *)a1, a4, a5), !(_DWORD)result))
  {
    if ((v13 = *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 8) = a4, *(_DWORD *)(a1 + 12) = a5, v13)
      && *(_DWORD *)(a1 + 24) == a2
      && *(_DWORD *)(a1 + 28) == a3
      || (result = sub_1B68B3C18((CVPixelBufferPoolRef *)(a1 + 16), a2, a3), !(_DWORD)result))
    {
      v14 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 24) = a2;
      *(_DWORD *)(a1 + 28) = a3;
      if (v14 || (result = IOSurfaceAcceleratorCreate(), !(_DWORD)result))
      {
        if (a6 != 11 && !*(_QWORD *)(a1 + 48))
        {
          v15 = malloc_type_malloc(0x58uLL, 0x1010040AFB8C972uLL);
          *(_QWORD *)(a1 + 48) = v15;
          v15[7] = a6;
          sub_1B68B2E6C(*(_QWORD *)(a1 + 48));
        }
        if (*(_QWORD *)(a1 + 40))
          return 0;
        Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_QWORD *)(a1 + 40) = Mutable;
        if (Mutable)
        {
          v17 = (const void **)MEMORY[0x1E0C9AE50];
          if (a6 == 11)
            v17 = (const void **)MEMORY[0x1E0C9AE40];
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A340], *v17);
          return 0;
        }
        return 4294943590;
      }
    }
  }
  return result;
}

uint64_t sub_1B68B39A4(CVPixelBufferPoolRef *a1, __CVBuffer *a2, char **a3, unsigned int *a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v15;
  char *BaseAddressOfPlane;
  char *v17;
  size_t BytesPerRowOfPlane;
  char *v19;
  unsigned int v20;
  int v21;
  char *v22;
  unsigned int v23;
  int v24;
  uint64_t v26;
  size_t v28;
  uint64_t v29;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v15 = sub_1B68B3838((uint64_t)a1, a5, a6, a7, a8, a9);
  if (!(_DWORD)v15)
  {
    v15 = CVPixelBufferPoolCreatePixelBuffer(0, *a1, &pixelBufferOut);
    if (!(_DWORD)v15)
    {
      if (a9 != 11)
        sub_1B68B34E8();
      CVPixelBufferGetIOSurface(a2);
      CVPixelBufferGetIOSurface(pixelBufferOut);
      v15 = IOSurfaceAcceleratorTransformSurface();
      if (!(_DWORD)v15)
      {
        v15 = CVPixelBufferLockBaseAddress(pixelBufferOut, 1uLL);
        if (!(_DWORD)v15)
        {
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
          v17 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
          BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
          v28 = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 1uLL);
          v19 = *a3;
          v20 = *a4;
          if (BytesPerRowOfPlane == *a4 && a7 + 64 >= v20)
          {
            memcpy(v19, BaseAddressOfPlane, BytesPerRowOfPlane * a8);
          }
          else if (a8 >= 1)
          {
            v29 = (int)v20;
            v21 = a8;
            do
            {
              memcpy(v19, BaseAddressOfPlane, a7);
              v19 += v29;
              BaseAddressOfPlane += BytesPerRowOfPlane;
              --v21;
            }
            while (v21);
          }
          v22 = a3[1];
          v23 = a4[1];
          v24 = a8 >> 1;
          if (v28 == v23 && a7 + 64 >= v23)
          {
            memcpy(v22, v17, v28 * v24);
          }
          else if (a8 >= 2)
          {
            v26 = (int)v23;
            do
            {
              memcpy(v22, v17, a7);
              v22 += v26;
              v17 += v28;
              --v24;
            }
            while (v24);
          }
          v15 = CVPixelBufferUnlockBaseAddress(pixelBufferOut, 1uLL);
        }
      }
    }
    if (pixelBufferOut)
      CFRelease(pixelBufferOut);
  }
  return v15;
}

uint64_t sub_1B68B3C18(CVPixelBufferPoolRef *a1, int a2, int a3)
{
  CVPixelBufferPoolRef v6;
  const CFDictionaryKeyCallBacks *v7;
  const CFDictionaryValueCallBacks *v8;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v10;
  __CFDictionary *v11;
  BOOL v12;
  uint64_t v13;
  __CFDictionary *v15;
  __CFDictionary *v16;

  v6 = *a1;
  if (v6)
  {
    CFRelease(v6);
    *a1 = 0;
  }
  v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = CFDictionaryCreateMutable(0, 0, v7, v8);
  v11 = v10;
  if (Mutable)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    sub_1B689B4D4(Mutable, (const void *)*MEMORY[0x1E0CA9060], 1);
    sub_1B689B4D4(v11, (const void *)*MEMORY[0x1E0CA9040], 875704438);
    sub_1B689B4D4(v11, (const void *)*MEMORY[0x1E0CA90E0], a2);
    sub_1B689B4D4(v11, (const void *)*MEMORY[0x1E0CA8FD8], a3);
    v15 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v15)
    {
      v16 = v15;
      sub_1B689B4D4(v15, (const void *)*MEMORY[0x1E0CBBF10], 1024);
      CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E0CA8FF0], v16);
      CFRelease(v16);
      sub_1B689B4D4(v11, (const void *)*MEMORY[0x1E0CA9048], 64);
      sub_1B689B4D4(v11, (const void *)*MEMORY[0x1E0CA8F68], 16);
    }
    v13 = CVPixelBufferPoolCreate(0, Mutable, v11, a1);
LABEL_15:
    CFRelease(v11);
    if (!Mutable)
      return v13;
    goto LABEL_10;
  }
  v13 = 4294943590;
  if (v10)
    goto LABEL_15;
  if (Mutable)
LABEL_10:
    CFRelease(Mutable);
  return v13;
}

void sub_1B68B3DD4(char *a1)
{
  uint64_t i;

  for (i = 32; i != 88; i += 8)
    free(*(void **)&a1[i]);
  free(a1);
}

uint64_t sub_1B68B3E0C(uint64_t *a1, int a2, unsigned int a3, int a4, int a5, uint64_t a6, int a7)
{
  void *v14;
  uint64_t v15;
  pthread_cond_t *v16;
  uint64_t v17;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  int v28;

  v14 = malloc_type_malloc(0x4C00uLL, 0x4CF1F002uLL);
  v15 = (uint64_t)v14;
  if (!v14)
  {
    v17 = 4294967188;
    goto LABEL_9;
  }
  bzero(v14, 0x4C00uLL);
  *(_QWORD *)(v15 + 72) = sub_1B68A37A0();
  v16 = sub_1B68A3800();
  *(_QWORD *)(v15 + 80) = v16;
  v17 = 4294967188;
  if (!*(_QWORD *)(v15 + 72) || !v16)
    goto LABEL_9;
  *(_DWORD *)v15 = 0;
  *(_QWORD *)(v15 + 12) = 0;
  *(_QWORD *)(v15 + 19) = 0;
  *(_DWORD *)(v15 + 28) = 150;
  *(_BYTE *)(v15 + 4) = 1;
  *(_DWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 64) = -1;
  *(_DWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 56) = -1;
  if (a4 != 2)
  {
    v17 = sub_1B68FEE08(a2, a3, v15 + 96, a4, a7);
    if (!(_DWORD)v17)
    {
      v19 = (-a2 & 0xF) + a2;
      v20 = (-a3 & 0xF) + a3;
      v28 = v19 + 15;
      v21 = (v19 + 15) >> 4;
      *(_DWORD *)(v15 + 1168) = v21;
      v27 = v20 + 15;
      v22 = (((v20 + 15) >> 4) * v21) << ((a4 - 3) < 2);
      *(_DWORD *)(v15 + 1164) = v22;
      *(_QWORD *)(v15 + 1256) = operator new[]();
      if ((_DWORD)v22)
      {
        v23 = 0;
        do
        {
          *(_QWORD *)(*(_QWORD *)(v15 + 1256) + v23) = v15 + 1184;
          v23 += 8;
        }
        while (8 * v22 != v23);
      }
      *(_DWORD *)(v15 + 1160) = a5;
      *(_QWORD *)(v15 + 1152) = operator new[]();
      if (*(_DWORD *)(v15 + 1160))
      {
        v24 = 0;
        do
        {
          v25 = operator new();
          *(_QWORD *)v25 = a6;
          *(_DWORD *)(v25 + 2072) = v22;
          *(_QWORD *)(v25 + 2064) = 0;
          *(_QWORD *)(*(_QWORD *)(v15 + 1152) + 8 * v24++) = v25;
        }
        while (v24 < *(unsigned int *)(v15 + 1160));
      }
      *(_QWORD *)(v15 + 1184) = 0;
      *(_QWORD *)(v15 + 1192) = 16982048;
      v26 = *(_OWORD *)(v15 + 1184);
      *(_OWORD *)(v15 + 1200) = v26;
      *(_BYTE *)(v15 + 1214) = 1;
      *(_OWORD *)(v15 + 1216) = v26;
      *(_BYTE *)(v15 + 1230) = 2;
      *(_QWORD *)(v15 + 1232) = v15 + 1184;
      *(_QWORD *)(v15 + 1240) = v15 + 1200;
      *(_QWORD *)(v15 + 1248) = v15 + 1216;
      if (!a4)
      {
        if (a7)
        {
          v17 = sub_1B68BF99C(v15 + 4760, v19, v20);
          if ((_DWORD)v17)
            goto LABEL_9;
        }
        v17 = sub_1B68BF31C(v15 + 4800, v19, v20);
        if ((_DWORD)v17)
          goto LABEL_9;
        v17 = sub_1B68AC140(v15 + 4560, (unsigned __int16)(v27 >> 4), (unsigned __int16)(v28 >> 4));
        if ((_DWORD)v17)
          goto LABEL_9;
        if (a7)
        {
          v17 = sub_1B68B2D1C(v15 + 1464, v27 >> 4, v28 >> 4);
          if ((_DWORD)v17)
            goto LABEL_9;
        }
        *(_WORD *)(v15 + 1) = 0;
        *(_WORD *)(v15 + 5000) = 0;
        *(_DWORD *)(v15 + 5004) = 0;
        *(_BYTE *)(v15 + 5008) = 0;
      }
      *(_OWORD *)(v15 + 1440) = 0u;
      *(_OWORD *)(v15 + 1424) = 0u;
      goto LABEL_6;
    }
LABEL_9:
    sub_1B68B4134(v15);
    v15 = 0;
    goto LABEL_10;
  }
  *(_BYTE *)v15 = 1;
LABEL_6:
  v17 = 0;
  *(_DWORD *)(v15 + 19120) = 0;
  *(_WORD *)(v15 + 19128) = 0;
  *(_DWORD *)(v15 + 18980) = 0;
LABEL_10:
  *a1 = v15;
  return v17;
}

void sub_1B68B4134(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (a1)
  {
    v2 = *(void **)(a1 + 72);
    if (v2)
    {
      pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 72));
      free(v2);
    }
    v3 = *(void **)(a1 + 80);
    if (v3)
    {
      pthread_cond_destroy(*(pthread_cond_t **)(a1 + 80));
      free(v3);
    }
    sub_1B68FF21C(a1 + 96);
    v4 = *(_QWORD *)(a1 + 1256);
    if (v4)
    {
      MEMORY[0x1BCC9811C](v4, 0x20C8093837F09);
      *(_QWORD *)(a1 + 1256) = 0;
    }
    if (*(_QWORD *)(a1 + 1152))
    {
      if (!*(_DWORD *)(a1 + 1160))
        goto LABEL_15;
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(a1 + 1152);
        v7 = *(_QWORD *)(v6 + 8 * v5);
        if (v7)
        {
          sub_1B68B8AE8(*(_QWORD *)v7, v7 + 16, *(_DWORD *)(v7 + 2064));
          *(_QWORD *)(v7 + 2064) = 0;
          MEMORY[0x1BCC9814C](v7, 0x1020C40B61593EFLL);
          v6 = *(_QWORD *)(a1 + 1152);
        }
        *(_QWORD *)(v6 + 8 * v5++) = 0;
      }
      while (v5 < *(unsigned int *)(a1 + 1160));
      if (*(_QWORD *)(a1 + 1152))
LABEL_15:
        MEMORY[0x1BCC9811C]();
      *(_QWORD *)(a1 + 1152) = 0;
    }
    sub_1B68AC2AC((void **)(a1 + 4560));
    v8 = *(void **)(a1 + 4768);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(a1 + 4768) = 0;
    }
    sub_1B68BF414(a1 + 4800);
    *(_OWORD *)(a1 + 1392) = 0u;
    *(_OWORD *)(a1 + 1376) = 0u;
    *(_OWORD *)(a1 + 1360) = 0u;
    *(_OWORD *)(a1 + 1344) = 0u;
    *(_OWORD *)(a1 + 1328) = 0u;
    *(_OWORD *)(a1 + 1312) = 0u;
    *(_OWORD *)(a1 + 1296) = 0u;
    *(_OWORD *)(a1 + 1280) = 0u;
    *(_OWORD *)(a1 + 1264) = 0u;
    free(*(void **)(a1 + 1472));
    *(_QWORD *)(a1 + 1472) = 0;
    free(*(void **)(a1 + 1480));
    *(_QWORD *)(a1 + 1480) = 0;
    v9 = *(void **)(a1 + 5016);
    if (v9)
      free(v9);
    v10 = *(void **)(a1 + 1424);
    if (v10)
    {
      free(v10);
      *(_QWORD *)(a1 + 1424) = 0;
    }
    v11 = *(void **)(a1 + 1432);
    if (v11)
    {
      free(v11);
      *(_QWORD *)(a1 + 1432) = 0;
    }
    v12 = *(void **)(a1 + 1440);
    if (v12)
    {
      free(v12);
      *(_QWORD *)(a1 + 1440) = 0;
    }
    v13 = *(void **)(a1 + 1448);
    if (v13)
    {
      free(v13);
      *(_QWORD *)(a1 + 1448) = 0;
    }
    v14 = *(void **)(a1 + 1456);
    if (v14)
      free(v14);
    free((void *)a1);
  }
}

uint64_t sub_1B68B4314(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  _BYTE *v5;
  BOOL v6;

  v1 = (*(_DWORD *)(a1 + 48) - 1);
  if ((int)v1 < 0)
    return 0;
  result = 0;
  v4 = *(_QWORD *)(a1 + 40);
  do
  {
    v5 = *(_BYTE **)(v4 + 8 * v1);
    if (v5 && (v5[1394] || v5[1356]))
    {
      if (v5[2])
        result = (result + 1);
      else
        result = result;
    }
    v6 = v1-- < 1;
  }
  while (!v6 && result < 0x10);
  return result;
}

unint64_t sub_1B68B436C(uint64_t a1, _OWORD *a2, int a3, _BYTE *a4)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  BOOL v8;
  BOOL v9;

  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v4 = *(_DWORD *)(a1 + 48);
  v5 = (v4 - 1);
  if (v4 - 1 < 0)
    return 0;
  v6 = 0;
  do
  {
    v7 = *(_BYTE **)(*(_QWORD *)(a1 + 40) + 8 * v5);
    if (v7)
      v8 = v7 == a4;
    else
      v8 = 1;
    if (!v8 && (v7[1394] || v7[1356]) && v7[2])
    {
      if (a3)
        v7[23] = -1;
      *((_QWORD *)a2 + v6++) = v7;
    }
    v9 = v5-- < 1;
  }
  while (!v9 && v6 < 0x10);
  return v6;
}

uint64_t sub_1B68B43F0(uint64_t a1, _OWORD *a2, int a3)
{
  int v3;
  uint64_t v4;
  int v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  int *v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  _DWORD v23[4];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v3 = *(_DWORD *)(a1 + 48);
  v4 = (v3 - 1);
  if (v3 - 1 < 0)
    return 0;
  LOBYTE(v6) = 0;
  v7 = 0;
  result = 0;
  do
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v4);
    if (v9 && (*(_BYTE *)(v9 + 1394) || *(_BYTE *)(v9 + 1356)) && *(_BYTE *)(v9 + 2) && *(_BYTE *)(v9 + 32))
    {
      *((_QWORD *)a2 + result) = v9;
      result = (result + 1);
      v10 = *(_DWORD *)(v9 + 1276);
      v11 = *(unsigned __int8 *)(v9 + 1356);
      if (v7 <= v10)
        v12 = v10;
      else
        v12 = v7;
      if (!v11)
        v7 = v12;
      v13 = v6;
      if ((_BYTE)v6)
      {
        v14 = 0;
        while (v23[v14] >= v10)
        {
          if (v6 == ++v14)
          {
            if (v6 < 4u)
              goto LABEL_28;
            goto LABEL_29;
          }
        }
      }
      else
      {
        LODWORD(v14) = 0;
      }
      if (v6 >= 3u)
        v13 = 3;
      if (v13 > v14)
      {
        v6 = v6;
        if (v6 >= 3u)
          v6 = 3;
        v15 = &v23[v6];
        v16 = &v23[v13 - 1];
        v17 = v13;
        do
        {
          --v17;
          v18 = *v16--;
          *v15-- = v18;
        }
        while (v17 > v14);
      }
      LOBYTE(v6) = v13;
      v13 = v14;
LABEL_28:
      LOBYTE(v6) = v6 + 1;
      v23[v13] = v10;
    }
LABEL_29:
    v19 = v4-- < 1;
  }
  while (!v19 && result < 0x10);
  if (!a3 && (_DWORD)result)
  {
    v20 = result;
    v21 = a2;
    result = 0;
    do
    {
      v22 = *(_QWORD *)v21;
      if (*(_DWORD *)(*(_QWORD *)v21 + 1276) == v7 || *(_BYTE *)(v22 + 1356))
      {
        *((_QWORD *)a2 + result) = v22;
        result = (result + 1);
      }
      v21 = (_OWORD *)((char *)v21 + 8);
      --v20;
    }
    while (v20);
  }
  return result;
}

uint64_t sub_1B68B459C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = (*(_DWORD *)(a1 + 48) - 1);
  if ((int)v2 < 0)
    return 0;
  result = 0;
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  do
  {
    if (a2)
    {
      v7 = *(_QWORD *)(v6 + 8 * v2);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 1394))
        {
          if (*(_BYTE *)(v7 + 2))
          {
            v8 = *(_DWORD *)(v7 + 1276);
            if (v8 >= v5 && v8 < *(_DWORD *)(a2 + 1276))
            {
              v5 = *(_DWORD *)(v7 + 1276);
              result = *(_QWORD *)(v6 + 8 * v2);
            }
          }
        }
      }
    }
  }
  while (v2-- > 0);
  return result;
}

_BYTE *sub_1B68B460C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *result;

  v1 = (*(_DWORD *)(a1 + 48) - 1);
  if ((int)v1 < 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 40);
  while (1)
  {
    result = *(_BYTE **)(v2 + 8 * v1);
    if (result)
    {
      if (result[1356] && result[2] && result[13])
        break;
    }
    if (v1-- <= 0)
      return 0;
  }
  return result;
}

unint64_t sub_1B68B4654(uint64_t a1, _OWORD *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _BOOL4 v21;
  _BOOL4 v22;
  BOOL v23;
  BOOL v25;

  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  if (!a3)
    return 0;
  LODWORD(v5) = *(_DWORD *)(a1 + 48);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6);
      *(_BYTE *)(v7 + 32) = 0;
      *(_BYTE *)(v7 + 23) = -1;
      ++v6;
      v5 = *(int *)(a1 + 48);
    }
    while (v6 < v5);
  }
  if (*(_BYTE *)(a3 + 24))
  {
    v8 = (v5 - 1);
    if ((int)v5 - 1 >= 0)
    {
      v9 = 0;
      do
      {
        v10 = *(_BYTE **)(*(_QWORD *)(a1 + 40) + 8 * v8);
        if (v10 && v10[1394] && v10[1356] && v10[25] && v10[2] && (a5 || !v10[14]))
        {
          v10[32] = 1;
          *((_QWORD *)a2 + v9++) = v10;
        }
        v11 = v8-- < 1;
      }
      while (!v11 && v9 < 0x10);
      return v9;
    }
    return 0;
  }
  v12 = (v5 - 1);
  if ((int)v5 - 1 < 0)
    return 0;
  v13 = 0;
  v14 = *(_DWORD *)(a3 + 36);
  v15 = (v5 - 1);
  do
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v15);
    if (*(_BYTE *)(v16 + 1394))
    {
      if (*(_BYTE *)(v16 + 2))
      {
        if (!*(_BYTE *)(v16 + 1356))
        {
          v17 = *(_DWORD *)(v16 + 1276);
          if (v13 <= v17)
            v13 = v17;
        }
      }
    }
    v11 = v15-- <= 0;
  }
  while (!v11);
  v9 = 0;
  do
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v12);
    v19 = *(_DWORD *)(v18 + 1276);
    if (*(_BYTE *)(v18 + 1356))
    {
      v20 = *(unsigned __int8 *)(v18 + 14);
      v21 = *(_BYTE *)(v18 + 14) == 0;
      v22 = 1;
      if (v14 != -1 && v19 < v14)
        v22 = *(_BYTE *)(v18 + 25) != 0;
    }
    else
    {
      if (a4)
        v23 = 1;
      else
        v23 = v19 == v13;
      v21 = v23;
      v20 = *(unsigned __int8 *)(v18 + 14);
      v22 = v14 == -1 || v19 >= v14;
    }
    if (*(_BYTE *)(v18 + 1394))
    {
      if (!*(_BYTE *)(v18 + 2))
        v22 = 0;
      if (a5)
        v25 = v20 == 0;
      else
        v25 = 1;
      if (!v25)
        v21 = 1;
      if (v22 && v21)
      {
        *(_BYTE *)(v18 + 32) = 1;
        *((_QWORD *)a2 + v9++) = v18;
      }
    }
    v11 = v12-- < 1;
  }
  while (!v11 && v9 < 0x10);
  return v9;
}

uint64_t sub_1B68B4820(uint64_t a1, int a2, int a3, unsigned int a4, int a5, uint64_t a6, int a7, int a8, unsigned __int8 a9)
{
  BOOL v13;
  int v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = a6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 60) = a7;
  if (a7)
    v13 = (a9 | a8) == 0;
  else
    v13 = 0;
  *(_BYTE *)(a1 + 61) = a8;
  v14 = !v13;
  *(_BYTE *)(a1 + 62) = a9;
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 52) = a2;
  *(_DWORD *)(a1 + 56) = 0;
  v15 = malloc_type_calloc(0x7F8uLL, 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(a1 + 32) = v15;
  if (!v15 || (v16 = malloc_type_calloc(0x7F8uLL, 1uLL, 0x4AE20AB7uLL), (*(_QWORD *)(a1 + 40) = v16) == 0))
  {
    v24 = 4294967188;
LABEL_18:
    sub_1B68B4AF4(a1);
    return v24;
  }
  if (*(_DWORD *)(a1 + 24))
  {
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = sub_1B68B3E0C((uint64_t *)(*(_QWORD *)(a1 + 32) + v17), a3, a4, 0, a5, *(_QWORD *)a1, v14);
      if ((_DWORD)v19)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v18);
      *(_BYTE *)(v20 + 1355) = 0;
      *(_BYTE *)(v20 + 99) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v18) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v18);
      ++v18;
      v17 += 8;
      if (v18 >= *(unsigned int *)(a1 + 24))
        goto LABEL_13;
    }
    v24 = v19;
    goto LABEL_18;
  }
LABEL_13:
  LODWORD(v21) = *(_DWORD *)(a1 + 48);
  if ((_DWORD)v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v22);
      sub_1B68B4998(v23, *(unsigned __int8 *)(a1 + 60));
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v22++) = v23;
      v21 = *(unsigned int *)(a1 + 48);
    }
    while (v22 < v21);
  }
  v24 = 0;
  *(_DWORD *)(a1 + 20) = a5;
  *(_DWORD *)(a1 + 24) = v21;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  *(_DWORD *)(a1 + 16) = 0;
  return v24;
}

void sub_1B68B4998(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(_BYTE *)(a1 + 1368) = 2;
  *(_WORD *)(a1 + 1392) = 0;
  *(_BYTE *)(a1 + 1356) = 0;
  *(_WORD *)(a1 + 1359) = 255;
  *(_BYTE *)(a1 + 1404) = 32;
  *(_WORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 18) = 0;
  *(_BYTE *)(a1 + 1394) = 0;
  *(_WORD *)(a1 + 1402) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_WORD *)(a1 + 1) = 0;
  *(_DWORD *)(a1 + 1396) = 16777217;
  *(_WORD *)(a1 + 5000) = 0;
  *(_DWORD *)(a1 + 5004) = 0;
  *(_BYTE *)(a1 + 5008) = 0;
  *(_DWORD *)(a1 + 1272) = 0;
  if (!*(_BYTE *)a1)
  {
    v4 = *(_QWORD *)(a1 + 488);
    if (v4)
    {
      *(_DWORD *)(v4 + 64) = 1;
      *(_QWORD *)(v4 + 56) = 0x100000001;
      *(_OWORD *)(v4 + 152) = xmmword_1B6917C40;
    }
    v5 = *(_QWORD *)(a1 + 496);
    if (v5)
    {
      *(_DWORD *)(v5 + 64) = 1;
      *(_QWORD *)(v5 + 56) = 0x100000001;
      *(_OWORD *)(v5 + 152) = xmmword_1B6917C40;
    }
    v6 = *(_QWORD *)(a1 + 504);
    if (v6)
    {
      *(_DWORD *)(v6 + 64) = 1;
      *(_QWORD *)(v6 + 56) = 0x100000001;
      *(_OWORD *)(v6 + 152) = xmmword_1B6917C40;
    }
    sub_1B68B8C80(a1 + 1152);
  }
  v7 = *(_QWORD *)(a1 + 1344);
  if (v7)
  {
    *(_QWORD *)(v7 + 1344) = 0;
    *(_QWORD *)(a1 + 1344) = 0;
  }
  *(_DWORD *)(a1 + 4836) = -1;
  *(_QWORD *)(a1 + 4828) = -1;
  *(_OWORD *)(a1 + 4856) = 0u;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(_OWORD *)(a1 + 4888) = 0u;
  *(_BYTE *)(a1 + 4904) = 0;
  if (!a2)
  {
    v8 = *(void **)(a1 + 4920);
    if (v8)
      bzero(v8, 216 * *(unsigned int *)(a1 + 4808));
  }
}

void sub_1B68B4AF4(uint64_t a1)
{
  unint64_t v2;

  if (*(_QWORD *)(a1 + 40) && *(_DWORD *)(a1 + 48))
  {
    v2 = 0;
    do
    {
      sub_1B68B4134(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v2));
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v2++) = 0;
    }
    while (v2 < *(unsigned int *)(a1 + 48));
  }
  free(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  free(*(void **)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t sub_1B68B4B60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  char *v12;
  _BYTE *v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int v19;
  _BYTE *v20;
  int v21;
  char v22;
  char v23;
  char *v24;
  char *v25;
  BOOL v26;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE *v46;
  _BYTE *v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  int v59;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 20);
  if (v4 > 875704437)
  {
    if (v4 != 875704438)
    {
      if (v4 == 2033463856)
      {
        v5 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v5)
        {
          v6 = 0;
          v7 = *(_DWORD *)(a1 + 28);
          v9 = *(_QWORD *)(a2 + 128);
          v8 = *(_QWORD *)(a2 + 136);
          v10 = *(_DWORD *)(a2 + 232);
          v11 = *(_DWORD *)(a2 + 248);
          v12 = *(char **)a1;
          do
          {
            if (v7)
            {
              v13 = (_BYTE *)(v9 + (v10 * v6));
              v14 = v7;
              do
              {
                v15 = *v12++;
                *v13++ = v15;
                --v14;
              }
              while (v14);
            }
            ++v6;
          }
          while (v6 != v5);
          if (v5 >= 2)
          {
            v16 = 0;
            v17 = v5 >> 1;
            v18 = &v12[(v7 * v5) >> 2];
            v19 = v7 >> 1;
            if (v7 >> 1 <= 1)
              v19 = 1;
            do
            {
              if (v7 >= 2)
              {
                v20 = (_BYTE *)(v8 + (v11 * v16));
                v21 = v19;
                do
                {
                  v22 = *v12++;
                  *v20 = v22;
                  v23 = *v18++;
                  v20[1] = v23;
                  v20 += 2;
                  --v21;
                }
                while (v21);
              }
              ++v16;
            }
            while (v16 != v17);
          }
        }
      }
      goto LABEL_40;
    }
LABEL_21:
    v24 = *(char **)(a1 + 184);
    v25 = *(char **)(a1 + 208);
    if (v24)
      v26 = v25 == 0;
    else
      v26 = 1;
    if (v26)
      return 4294958327;
    v49 = *(_DWORD *)(a1 + 200);
    if (v49 >= 1)
    {
      v50 = *(int *)(a1 + 216);
      v51 = *(unsigned int *)(a2 + 232);
      v52 = *(char **)(a2 + 128);
      v53 = *(_DWORD *)(a1 + 200);
      v54 = *(int *)(a1 + 192);
      v55 = *(int *)(a1 + 196);
      do
      {
        memcpy(v52, v24, v55);
        v52 += v51;
        v24 += v54;
        --v53;
      }
      while (v53);
      v2 = a2;
      if (v49 >= 2)
      {
        v56 = *(unsigned int *)(a2 + 248);
        v57 = v49 >> 1;
        v58 = *(char **)(a2 + 136);
        do
        {
          memcpy(v58, v25, v55);
          v58 += v56;
          v25 += v50;
          --v57;
        }
        while (v57);
      }
    }
    goto LABEL_40;
  }
  if (v4 == 846624121)
  {
    v28 = *(_DWORD *)(a1 + 36);
    if (v28)
    {
      v29 = 0;
      v30 = *(_DWORD *)(a2 + 232);
      v31 = *(unsigned int *)(a1 + 24);
      v32 = *(unsigned int *)(a1 + 16);
      v33 = *(char **)a1;
      v34 = *(_QWORD *)a1 + v32;
      v35 = *(unsigned int *)(a2 + 248);
      v37 = *(_QWORD *)(a2 + 128);
      v36 = *(_QWORD *)(a2 + 136);
      v38 = (2 * v32);
      do
      {
        if ((_DWORD)v31)
        {
          v39 = 0;
          v40 = 1;
          do
          {
            v41 = v33[v39 + 3];
            v42 = *(_BYTE *)(v34 + v39 + 1);
            v43 = *(_BYTE *)(v34 + v39 + 3);
            v44 = (v33[v39] + *(unsigned __int8 *)(v34 + v39) + 1) >> 1;
            v45 = (v33[v39 + 2] + *(unsigned __int8 *)(v34 + v39 + 2) + 1) >> 1;
            v46 = (_BYTE *)(v37 + v40);
            *(v46 - 1) = v33[v39 + 1];
            *v46 = v41;
            *(_BYTE *)(v37 + (v30 + v40 - 1)) = v42;
            *(_BYTE *)(v37 + (v30 + v40)) = v43;
            v47 = (_BYTE *)(v36 + v40);
            *(v47 - 1) = v44;
            *v47 = v45;
            v48 = v40 + 1;
            v40 += 2;
            v39 += 4;
          }
          while (v48 < v31);
        }
        v37 += (2 * v30);
        v36 += v35;
        v33 += v38;
        v34 += v38;
        v29 += 2;
      }
      while (v29 < v28);
    }
    goto LABEL_40;
  }
  if (v4 == 875704422)
    goto LABEL_21;
LABEL_40:
  sub_1B68FF2F8((_QWORD *)(v2 + 96), 0);
  if (*(_BYTE *)(a1 + 156))
  {
    v59 = *(_DWORD *)(a1 + 36) * *(_DWORD *)(a1 + 24);
    memset(*(void **)(v2 + 136), 128, (uint64_t)(v59 + (v59 < 0)) >> 1);
  }
  return 0;
}

void sub_1B68B4E64(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, double *a6, int *a7, _DWORD *a8, unsigned __int8 a9)
{
  double *v9;
  int v11;
  int *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  signed int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  float64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  __int128 *v42;
  int v43;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  double v49;
  int v50;
  double v51;
  unsigned int v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  int v68;
  int v69;
  int v70;
  int v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  double v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  double v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t i;
  double v91;
  uint8x8_t v92;
  double v93;
  uint8x8_t v94;
  double v95;
  uint8x8_t v96;
  double v97;
  uint8x8_t v98;
  double v99;
  uint8x8_t v100;
  double v101;
  uint8x8_t v102;
  double v103;
  uint8x8_t v104;
  double v105;
  uint8x8_t v106;
  double v107;
  uint8x8_t v108;
  double v109;
  uint8x8_t v110;
  double v111;
  uint8x8_t v112;
  double v113;
  uint8x8_t v114;
  double v115;
  uint8x8_t v116;
  double v117;
  uint8x8_t v118;
  double v119;
  uint8x8_t v120;
  double v121;
  uint8x8_t v122;
  uint64_t v123;
  float v124;
  uint64_t v125;
  double v126;
  int v127;
  int v128;
  double v129;
  unsigned int v130;
  double v131;
  BOOL v132;
  double v133;
  int v134;
  int v135;
  double v136;
  int v137;
  int v138;
  double v139;
  double v140;
  int v141;
  double v142;
  uint64_t v143;
  int v144;
  double v145;
  uint64_t v146;
  double v147;
  uint64_t v148;
  double v149;
  double v150;
  int v151;
  double v152;
  double v153;
  double v154;
  int v155;
  _BOOL4 v156;
  uint64_t v157;
  double v158;
  uint64_t v159;
  double v160;
  double v161;
  double v162;
  double v163;
  uint64_t v164;
  int v165;
  int v166;
  double v167;
  double v168;
  double v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  int v173;
  uint64_t v174;
  double v175;
  int v176;
  int v177;
  int v178;
  int v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  signed int v190;
  int v191;
  double v192;
  double v193;
  BOOL v194;
  double v195;
  double v196;
  double v197;
  uint64_t v198;
  int v199;
  float v200;
  float v201;
  float v202;
  float v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  double v211;
  double v212;
  int v213;
  uint64_t v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  unsigned int v222;
  int v223;
  double v224;
  double v225;
  uint64_t v226;
  int v227;
  float v228;
  float v229;
  float v230;
  double v231;
  float v232;
  float v233;
  int v234;
  int v235;
  double v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  unsigned int v242;
  int v243;
  int v244;
  int v246;
  int v247;
  double v248;
  float v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  uint64_t v255;
  int v256;
  float v257;
  float v258;
  float v259;
  uint64_t *v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  double v273;
  int v274;
  int v275;
  double v276;
  double v277;
  int v278;
  double v279;
  int v280;
  double v281;
  double v282;
  int v283;
  int v284;
  double v285;
  float v286;
  double v287;
  double v288;
  double v289;
  double v290;
  uint64_t v291;
  int v292;
  double v293;
  double *v294;
  int *v295;
  int v296;
  int v299;
  uint64_t v300;
  __int128 v301;
  double v302;
  double v303;
  int v304;
  uint64_t v305;
  uint64_t v306[34];

  v9 = a6;
  v11 = a4;
  v13 = (int *)a2;
  v306[32] = *MEMORY[0x1E0C80C00];
  if (a8[319])
  {
    if (*(_BYTE *)(a1 + 60))
    {
      v14 = a6[11];
      v15 = a6[14];
      v16 = v15 + 0.5;
      v17 = v15 + -0.5;
      if (v14 > v16 || v14 < v17)
      {
        *(_BYTE *)(a2 + 32) = 1;
        a6[11] = a6[11] * 0.100000001 + a6[14] * 0.899999976;
      }
      else
      {
        *(_BYTE *)(a2 + 32) = 0;
      }
      v20 = a6[13];
      if (a6[10] != v20)
      {
        a6[10] = v20;
        *(_BYTE *)(a2 + 32) = 1;
      }
    }
    else if (!*(_DWORD *)(a1 + 16))
    {
      a6[11] = a6[11] * 0.899999976 + a6[14] * 0.100000001;
    }
  }
  else
  {
    v19 = *((_QWORD *)a6 + 14);
    a6[10] = (float)*(int *)(a1 + 40);
    *((_QWORD *)a6 + 11) = v19;
  }
  v21 = a9;
  if (*(_BYTE *)(a1 + 52) && *(_BYTE *)(a1 + 54))
    *(_DWORD *)(a5 + 208) = 12;
  v22 = a8[1251];
  if (*(_DWORD *)(a2 + 8) != 1)
    v21 = 0;
  v23 = v21 | v22;
  *(_DWORD *)(a2 + 28) = v21 | v22;
  if (*(_BYTE *)(a1 + 52))
  {
    *(_QWORD *)(a5 + 3688) = 0;
    *(_DWORD *)(a5 + 3696) = 0;
    if (*(_DWORD *)(a2 + 8))
    {
      v24 = a7[5];
      if (v24 < 1)
        v25 = 100;
      else
        v25 = 100 * (v24 - a7[18] + a7[16]) / v24;
      if (v23 || (v26 = *(_DWORD *)(a5 + 232), v26 == -1))
        v26 = a8[1189];
      v27 = a8[1188] - v26;
      if (v27 < 1)
      {
        if (v27 < 0)
        {
          v187 = (100 - v25) * (100 - v25) / 0x7Du + 1;
          v188 = __clz(v187);
          v189 = ((byte_1B69327A4[(unint64_t)(v187 << (v188 + 1)) >> 24] << 12) | 0x200000u) >> ((v188 + 1) >> 1);
          if ((v188 & 1) == 0)
            v189 = (11585 * v189) >> 14;
          v190 = (v189 + 16) >> 5;
          if (v190 >= 20)
            v190 = 20;
          if (v26)
            v191 = -(v27 * v190) / v26;
          else
            v191 = 0;
          if (-v191 < -3 || v191 == 3)
            v32 = -3;
          else
            v32 = -v191;
          v28 = -v190;
        }
        else
        {
          v32 = 0;
          v28 = 0;
        }
      }
      else
      {
        v28 = 10
            * *(_DWORD *)(a5 + 3700)
            / (*(_DWORD *)(a5 + 3660) + 1)
            * (*(_DWORD *)(a5 + 3700)
             / (*(_DWORD *)(a5 + 3660) + 1));
        if (v28)
        {
          v29 = v28 + v28 * (v25 * v25 / 0x7Du);
          v30 = __clz(v29);
          v31 = ((byte_1B69327A4[(unint64_t)(v29 << (v30 + 1)) >> 24] << 12) | 0x200000u) >> ((v30 + 1) >> 1);
          if ((v30 & 1) == 0)
            v31 = (11585 * v31) >> 14;
          v28 = (v31 + 16) >> 5;
        }
        if (v28 >= 20)
          v28 = 20;
        if (v26)
          v32 = v28 * v27 / v26;
        else
          v32 = 0;
        if (v32 >= 5)
          v32 = 5;
      }
      *(_DWORD *)(a5 + 232) = (v27 + 8 * v26 + 4) >> 3;
      *(_DWORD *)(a5 + 3688) = v32;
      *(_DWORD *)(a5 + 3696) = v28;
    }
  }
  v296 = v23;
  v33 = *(_DWORD *)(a5 + 236);
  *(_DWORD *)(a5 + 240) = v33;
  if (v33)
  {
    v34 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v33), 0);
    *(int8x16_t *)(a5 + 248) = vbslq_s8((int8x16_t)vcgtzq_f64(*(float64x2_t *)(a5 + 248)), (int8x16_t)vmulq_f64(vmlaq_f64(v34, (float64x2_t)xmmword_1B6917D20, *(float64x2_t *)(a5 + 248)), (float64x2_t)xmmword_1B6917D30), (int8x16_t)v34);
  }
  *(_DWORD *)(a5 + 236) = a8[1207];
  *(_QWORD *)(a5 + 216) = 0;
  *(_QWORD *)(a5 + 224) = 0;
  *(_QWORD *)(a5 + 504) = 0;
  *(_QWORD *)(a5 + 512) = 0;
  v35 = *(_QWORD *)(a5 + 40);
  v36 = *(_QWORD *)(a5 + 48);
  v37 = *(_QWORD *)(a5 + 56);
  v39 = *(double *)(a5 + 64);
  v38 = *(double *)(a5 + 72);
  v40 = *(double *)(a5 + 80);
  v41 = *(double *)(a5 + 88);
  v42 = &xmmword_1B6918000;
  v43 = *(_DWORD *)a5;
  v302 = v40;
  if (*(_BYTE *)(a2 + 32))
  {
    if (!*(_DWORD *)(a2 + 8))
      goto LABEL_53;
    v45 = *(_DWORD *)(a5 + 3660);
    v46 = sub_1B68F7888(a6[10] / a6[11]);
    v47 = v46 - v45;
    v11 = a4;
    v48 = v47 + v47 * (v43 - *(_DWORD *)(a5 + 3652));
    if (v41 + (double)v48 >= 0.0)
      v41 = v41 + (double)v48;
    else
      v41 = 0.0;
    *(_DWORD *)(a5 + 3660) = v46;
    *(_DWORD *)(a5 + 3656) = v41;
    v49 = sub_1B68F7888((v9[10] + v9[10]) / v9[11]);
    v42 = &xmmword_1B6918000;
    *(double *)(a5 + 112) = v49;
  }
  v50 = v13[2];
  if (!v50 || v13[7] || *(_DWORD *)(a5 + 3652) == v43 + 1)
  {
LABEL_53:
    v51 = v38;
    v52 = *(_DWORD *)(a5 + 3656);
    v53 = (double)v52 * *((double *)v42 + 297);
    v54 = (double)(v43 + 1);
    v55 = sub_1B68F7888((double)((v43 + 1 - *(_DWORD *)(a5 + 3652)) * v52) / v54);
    v56 = *(_QWORD *)(a5 + 3664);
    v57 = (double)-v56;
    if (v56 < 1)
    {
      v58 = a1;
      if (v53 * 0.5 < v57)
      {
        v59 = v39;
        v57 = v53 * 0.5 + (v57 - v53 * 0.5) * 0.5;
        goto LABEL_59;
      }
    }
    else
    {
      v58 = a1;
      if (v57 < -v53)
      {
        v59 = v39;
        v57 = (v53 + v57) * 0.5 - v53;
LABEL_59:
        v60 = *(double *)(a5 + 16);
        v9[8] = v60;
        v61 = *(double *)(a5 + 24);
        v9[9] = v61;
        v62 = (double)*(uint64_t *)(a5 + 32);
        v9[5] = v62;
        v63 = v9[10];
        if (*(_BYTE *)(v58 + 52))
        {
          v64 = v9[11];
          v65 = sub_1B68F7888(v63 * v54 / v64);
          v66 = sub_1B68F7888(v57 + v65);
          if (v66 < 0.0)
            v66 = 0.0;
        }
        else
        {
          v67 = v41 - v55;
          v64 = v9[11];
          v66 = v67 + sub_1B68F7888(v63 * (double)*(int *)a5 / v64);
        }
        v38 = v51;
        v68 = a7[4] >> 1;
        if (v66 <= v54 * (double)a7[1] / v64 + (double)v68)
          v41 = v66;
        else
          v41 = v54 * (double)a7[1] / v64 + (double)v68;
        *((_DWORD *)v9 + 12) = 1;
        v69 = *(_DWORD *)a5 / *(_DWORD *)(a5 + 4);
        *((_DWORD *)v9 + 13) = v69;
        v70 = *(_DWORD *)a5 - *(_DWORD *)(a5 + 4) * v69 + v69;
        *((_DWORD *)v9 + 13) = v70;
        v71 = *(_DWORD *)a5 - v70;
        *((_DWORD *)v9 + 14) = v71;
        ++*((_DWORD *)v9 + 8);
        v72 = sub_1B68F7888(v51 * (double)v70 / (v59 * v60));
        v40 = v302;
        v73 = v59 * v61;
        v39 = v59;
        v74 = sub_1B68F7888(v302 * (double)v71 / v73);
        v75 = (uint64_t)sub_1B68F7888(v41 / (v74 + v72 + 1.0));
        if (v62 <= (double)v75)
          v35 = v75;
        else
          v35 = (uint64_t)v62;
        *((_DWORD *)v9 + 12) = 0;
        *(_DWORD *)(a5 + 3652) = 0;
        *(_DWORD *)(a5 + 3656) = (v41 + 0.5);
        *(_DWORD *)(a5 + 3660) = (v41 / v54);
        if (*(_DWORD *)(v58 + 16))
          *(_QWORD *)(a5 + 40) = (uint64_t)((double)(uint64_t)(v9[10] * *(double *)(a5 + 3592)) * 0.9 + 0.5);
        goto LABEL_71;
      }
    }
    v59 = v39;
    goto LABEL_59;
  }
  if (v50 == 2)
  {
    v38 = sub_1B68F7888(v38);
    v40 = sub_1B68F7888(v40);
    v212 = sub_1B68F7888(v38 * (v9[9] * (double)*((int *)v9 + 13)) / (v40 * v9[8]));
    v213 = *((_DWORD *)v9 + 14);
    v214 = (uint64_t)(sub_1B68F7888(v41 / (v212 + (double)v213)) + 0.5);
    v215 = v9[5];
    if (v215 <= (double)v214)
      v37 = v214;
    else
      v37 = (uint64_t)v215;
    v176 = v213 - 1;
    *((_DWORD *)v9 + 14) = v213 - 1;
    v58 = a1;
    v177 = *(_DWORD *)(a1 + 16);
    if (v177 && !v176)
    {
      *(_DWORD *)(a5 + 3648) = v9[13] != v9[10];
      v216 = v9[13];
      v217 = v9[14];
      v218 = 30.0;
      if (v217 <= 30.0)
        v218 = v9[14];
      v219 = v40;
      v220 = v38;
      if (v217 >= 2.0)
        v221 = v218;
      else
        v221 = 2.0;
      v9[10] = v216;
      v9[11] = v221;
      v222 = (int)(v221 + 0.5) & 0xFFFFFFFE;
      *((_DWORD *)v9 + 25) = v222;
      v223 = v222 / *(_DWORD *)(a5 + 4);
      *((_DWORD *)v9 + 13) = v223;
      *((_DWORD *)v9 + 14) = v222 - v223;
      v180 = sub_1B68F7888(v216 * (double)(int)v222) / v221;
      v38 = v220;
      v40 = v219;
      goto LABEL_207;
    }
    goto LABEL_252;
  }
  if (v50 != 1)
  {
    v58 = a1;
    goto LABEL_71;
  }
  v9[9] = 1.4;
  v172 = sub_1B68F7888(v40 * (v9[8] * (double)*((int *)v9 + 14)) / (v38 * 1.4));
  v173 = *((_DWORD *)v9 + 13);
  v174 = (uint64_t)(sub_1B68F7888(v41 / (v172 + (double)v173)) + 0.5);
  v175 = v9[5];
  if (v175 <= (double)v174)
    v36 = v174;
  else
    v36 = (uint64_t)v175;
  v176 = v173 - 1;
  *((_DWORD *)v9 + 13) = v173 - 1;
  v58 = a1;
  if (!*(_DWORD *)(a1 + 28))
  {
    v177 = *(_DWORD *)(a1 + 16);
    if (v177 && !v176)
    {
      *(_DWORD *)(a5 + 3648) = v9[13] != v9[10];
      v301 = *(_OWORD *)(v9 + 13);
      *((_OWORD *)v9 + 5) = v301;
      v178 = *((_DWORD *)v9 + 25);
      v179 = v178 / *(_DWORD *)(a5 + 4);
      *((_DWORD *)v9 + 13) = v179;
      *((_DWORD *)v9 + 14) = v178 - v179;
      v180 = sub_1B68F7888((double)v178 * *(double *)&v301) / *((double *)&v301 + 1);
LABEL_207:
      v41 = v41 + v180;
      goto LABEL_71;
    }
LABEL_252:
    if (v177 && v176)
      *(_DWORD *)(a5 + 3648) = 0;
  }
LABEL_71:
  sub_1B68B68D8((double *)a5, v39, v38, v40, v41);
  *(_QWORD *)(a5 + 40) = (uint64_t)(sub_1B68F7888((double)v35) + 0.5);
  *(_QWORD *)(a5 + 48) = (uint64_t)(sub_1B68F7888((double)v36) + 0.5);
  *(_QWORD *)(a5 + 56) = (uint64_t)(sub_1B68F7888((double)v37) + 0.5);
  *(_DWORD *)(a5 + 8) = 0;
  v76 = sub_1B68F7888(*(double *)(a5 + 160) / (double)v13[1]);
  *(_QWORD *)(a5 + 160) = 0;
  bzero((void *)(a5 + 1544), 0x7FCuLL);
  v77 = v13[1];
  if (v77 < 1)
  {
    v84 = 0.0;
  }
  else
  {
    v294 = v9;
    v295 = v13;
    v78 = 0;
    v79 = v13[4];
    v80 = v79 >> 4;
    v81 = 16 * v11;
    if (v79 >> 4 <= 1)
      v82 = 1;
    else
      v82 = v79 >> 4;
    v299 = v82;
    v83 = v11;
    v84 = 0.0;
    v300 = 16 * v11;
    do
    {
      if (v79 >= 16)
      {
        v85 = v299 + v78;
        v86 = a3;
        do
        {
          v87 = 0;
          v88 = 0;
          v89 = v306;
          do
          {
            for (i = 0; i != 16; ++i)
              *((_BYTE *)v89 + i) = *(_BYTE *)(v86 + v87 + (int)i);
            ++v88;
            v89 += 2;
            v87 += v83;
          }
          while (v88 != 16);
          sub_1B6907100((uint64_t)v306, 0, 0, 0, a5);
          sub_1B6907100((uint64_t)v306, 1u, 0, 8u, a5);
          sub_1B6907100((uint64_t)v306, 2u, 8u, 0, a5);
          *(float *)&v91 = sub_1B6907100((uint64_t)v306, 3u, 8u, 8u, a5);
          sub_1B69071A8((uint64_t)v306, 0, 0, 0, a5, v91, v92);
          sub_1B69071A8((uint64_t)v306, 1, 0, 4u, a5, v93, v94);
          sub_1B69071A8((uint64_t)v306, 2, 0, 8u, a5, v95, v96);
          sub_1B69071A8((uint64_t)v306, 3, 0, 0xCu, a5, v97, v98);
          sub_1B69071A8((uint64_t)v306, 4, 4u, 0, a5, v99, v100);
          sub_1B69071A8((uint64_t)v306, 5, 4u, 4u, a5, v101, v102);
          sub_1B69071A8((uint64_t)v306, 6, 4u, 8u, a5, v103, v104);
          sub_1B69071A8((uint64_t)v306, 7, 4u, 0xCu, a5, v105, v106);
          sub_1B69071A8((uint64_t)v306, 8, 8u, 0, a5, v107, v108);
          sub_1B69071A8((uint64_t)v306, 9, 8u, 4u, a5, v109, v110);
          sub_1B69071A8((uint64_t)v306, 10, 8u, 8u, a5, v111, v112);
          sub_1B69071A8((uint64_t)v306, 11, 8u, 0xCu, a5, v113, v114);
          sub_1B69071A8((uint64_t)v306, 12, 0xCu, 0, a5, v115, v116);
          sub_1B69071A8((uint64_t)v306, 13, 0xCu, 4u, a5, v117, v118);
          sub_1B69071A8((uint64_t)v306, 14, 0xCu, 8u, a5, v119, v120);
          sub_1B69071A8((uint64_t)v306, 15, 0xCu, 0xCu, a5, v121, v122);
          v123 = 0;
          v124 = 100000000.0;
          do
          {
            if (*(float *)(a5 + 176 + v123) < v124)
              v124 = *(float *)(a5 + 176 + v123);
            v123 += 4;
          }
          while (v123 != 16);
          v125 = 0;
          v126 = *(double *)(a5 + 224);
          v127 = *(_DWORD *)(a5 + 444)
               + *(_DWORD *)(a5 + 440)
               + *(_DWORD *)(a5 + 448)
               + *(_DWORD *)(a5 + 452)
               + *(_DWORD *)(a5 + 456)
               + *(_DWORD *)(a5 + 460)
               + *(_DWORD *)(a5 + 464)
               + *(_DWORD *)(a5 + 468)
               + *(_DWORD *)(a5 + 472)
               + *(_DWORD *)(a5 + 476)
               + *(_DWORD *)(a5 + 480);
          v128 = *(_DWORD *)(a5 + 484)
               + *(_DWORD *)(a5 + 488)
               + *(_DWORD *)(a5 + 492)
               + *(_DWORD *)(a5 + 496)
               + *(_DWORD *)(a5 + 500);
          v129 = v124;
          *(double *)(a5 + 216) = *(double *)(a5 + 216)
                                + (float)((float)((float)(*(float *)(a5 + 176) + *(float *)(a5 + 180))
                                                + *(float *)(a5 + 184))
                                        + *(float *)(a5 + 188));
          *(double *)(a5 + 224) = v126 + v129;
          *(double *)(a5 + 512) = *(double *)(a5 + 512) + (double)(v127 + v128);
          v130 = 100000000;
          do
          {
            if (*(_DWORD *)(a5 + 440 + v125) < v130)
              v130 = *(_DWORD *)(a5 + 440 + v125);
            v125 += 4;
          }
          while (v125 != 60);
          *(double *)(a5 + 504) = *(double *)(a5 + 504) + (double)v130;
          v131 = v129 + 1.0;
          v84 = v84 + (v76 + v131 * 2.0) / (v131 + v76 * 2.0);
          *(double *)(a5 + 160) = v131 + *(double *)(a5 + 160);
          v86 += 16;
          ++v78;
        }
        while (v78 != v85);
        v78 = v85;
        v80 = v79 >> 4;
        v81 = v300;
      }
      a3 += v81;
      v132 = __OFSUB__(v77, v80);
      v77 -= v80;
    }
    while (!((v77 < 0) ^ v132 | (v77 == 0)));
    v9 = v294;
    v13 = v295;
    v77 = v295[1];
    v58 = a1;
  }
  v133 = sub_1B68F7888(v84 / (double)v77);
  *(double *)(a5 + 384) = v133;
  *(double *)(a5 + 216) = sub_1B68F7888(*(double *)(a5 + 216) / (double)(4 * v13[1]));
  *(double *)(a5 + 512) = sub_1B68F7888(*(double *)(a5 + 512) / (double)(16 * v13[1]));
  *(double *)(a5 + 224) = sub_1B68F7888(*(double *)(a5 + 224) / (double)v13[1]);
  *(double *)(a5 + 504) = sub_1B68F7888(*(double *)(a5 + 504) / (double)v13[1]);
  v134 = v13[2];
  if (!v134 || v134 == 1 && v296)
  {
    v305 = 0;
    v304 = 0;
    v135 = a7[5];
    if (v135 < 1)
      v136 = 100.0;
    else
      v136 = (double)(100 * (v135 - a7[18] + a7[16]) / v135);
    v151 = a7[1];
    v152 = v9[11];
    v153 = *(double *)(a5 + 296);
    v154 = *(double *)(a5 + 112);
    if (*(_DWORD *)v9)
    {
      v155 = *(_DWORD *)v58;
      *(_DWORD *)(a5 + 416) = *(_DWORD *)v58;
      *(_QWORD *)(a5 + 392) = *(_QWORD *)(a5 + 40);
      *((_DWORD *)v9 + 31) = v155;
      v156 = *(_DWORD *)v9 == 0;
    }
    else
    {
      v156 = 1;
    }
    *((_DWORD *)v9 + 3) = 1;
    v157 = *(_QWORD *)(a5 + 392);
    v158 = (double)v157;
    v159 = *(_QWORD *)(a5 + 40);
    v160 = *(double *)(a5 + 120) + (double)v157 - (double)v159;
    v161 = 10.0;
    if (!v156)
    {
LABEL_164:
      v197 = sub_1B68F7888(v161);
      v303 = sub_1B68F7888(v197 * *(double *)(a5 + 384));
      *(double *)(a5 + 120) = v160;
      sub_1B68B693C(0, v306, &v303, (_DWORD *)&v305 + 1, (unsigned int *)a5, v58);
      v198 = 0;
      v199 = 0;
      v201 = 10000000.0;
      do
      {
        v200 = *(double *)(a5 + 504);
        v202 = v200 - flt_1B6932568[v198];
        if (v202 < 0.0)
          v202 = -v202;
        if (v202 <= v201)
        {
          v199 = v198;
          v201 = v202;
        }
        ++v198;
      }
      while (v198 != 18);
      sub_1B68B6AF0(*(unsigned int *)(v58 + 8), *(_DWORD *)(v58 + 12), v199, &v305, &v304, v9[10], v9[11]);
      v203 = dbl_1B6931E58[v199] / (sub_1B68F7888((double)v159 / *(double *)(a5 + 432)) - dbl_1B6931DC8[v199]);
      v204 = (int)(v203 + 0.75) - HIDWORD(v305);
      if (!*(_DWORD *)v9)
      {
        if (v204 >= 4)
          v204 = 4;
        if (v204 <= -4)
          v204 = -4;
        v204 = (v204 + ((v204 & 0xC0) >> 6)) >> 2;
      }
      v205 = v204 + HIDWORD(v305);
      if (v204 + HIDWORD(v305) >= dword_1B69320A0[9 * (int)v305 + v304] + 45)
        v205 = dword_1B69320A0[9 * (int)v305 + v304] + 45;
      if (*(_BYTE *)(v58 + 54))
      {
        if (v296)
        {
          *(_DWORD *)(a5 + 3724) = 0;
        }
        else
        {
          v206 = *((_DWORD *)v9 + 7);
          if (v206)
          {
            v207 = v205 - v206;
            v208 = (int)(float)((float)v206 * 0.2);
            if (v205 - v206 < -v208)
              v205 = v206 - v208;
            v209 = v206 + v208;
            if (v207 > v208)
              v205 = v209;
          }
        }
      }
      if (v205 >= 51)
        v205 = 51;
      if (v205 <= 12)
        v210 = 12;
      else
        v210 = v205;
      *((_DWORD *)v9 + 4) = v210;
      *((_DWORD *)v9 + 31) = v210;
      v211 = *(double *)(a5 + 384);
      if (v211 <= 0.2)
        v211 = 1.0;
      *(double *)(a5 + 296) = sub_1B68F7888(dbl_1B69323C8[v210] / v211);
LABEL_194:
      v13[3] = v210;
      return;
    }
    v162 = (double)v151 / v152;
    v163 = v162 * 15.0;
    if (v162 * 15.0 < (double)v159)
    {
      v159 = (uint64_t)v163;
      *(_QWORD *)(a5 + 40) = (uint64_t)v163;
    }
    v164 = v157 - v159;
    if (v157 <= v159)
    {
      v168 = (double)v164 * 31.0 / v154;
LABEL_158:
      v195 = -3.0;
      if (v168 >= -3.0)
        v195 = v168;
      if (v168 <= 5.0)
        v196 = v195;
      else
        v196 = 5.0;
      v161 = v153 + v196;
      goto LABEL_164;
    }
    v165 = a7[5];
    if (v165 < 1)
      goto LABEL_152;
    v166 = 100 * (v165 - a7[18] + a7[16]) / v165;
    if (v166 <= 29)
    {
      v167 = v162 * (v136 * -0.01 + 0.3) * 2.4 / 2.8;
      goto LABEL_153;
    }
    v167 = 0.0;
    if (v166 >= 0x33)
LABEL_152:
      v167 = (v136 * 0.02 + -1.0) * (v162 - (double)v159);
LABEL_153:
    v192 = ((double)v164 - v167) * 31.0 / v154;
    v193 = v162 * 1.5;
    v194 = v192 < 0.0 && v193 < v158;
    v168 = 0.0;
    if (!v194)
      v168 = v192;
    goto LABEL_158;
  }
  if (v134 != 1)
  {
    if (v134 != 2)
      return;
    v305 = 0;
    v304 = 0;
    v169 = *(double *)(a5 + 112);
    if (*((_DWORD *)v9 + 2))
    {
      *((_DWORD *)v9 + 2) = 0;
      *(_DWORD *)(a5 + 424) = *(_DWORD *)(v58 + 32);
      v170 = *(_QWORD *)(a5 + 56);
      *(_QWORD *)(a5 + 408) = v170;
      v133 = *(double *)(a5 + 384);
      v171 = v170;
    }
    else
    {
      v171 = *(_QWORD *)(a5 + 408);
      v170 = *(_QWORD *)(a5 + 56);
    }
    if (*(double *)(a5 + 136) + (double)v171 - (double)v170 >= 0.0)
      v224 = *(double *)(a5 + 136) + (double)v171 - (double)v170;
    else
      v224 = 0.0;
    v225 = sub_1B68F7888(v224 * 31.0 / v169);
    v303 = sub_1B68F7888(v225 * v133);
    *(double *)(a5 + 136) = v224;
    sub_1B68B693C(2, v306, &v303, (_DWORD *)&v305 + 1, (unsigned int *)a5, v58);
    v226 = 0;
    v227 = 0;
    v229 = 10000000.0;
    do
    {
      v228 = *(double *)(a5 + 504);
      v230 = v228 - flt_1B6932568[v226];
      if (v230 < 0.0)
        v230 = -v230;
      if (v230 <= v229)
      {
        v227 = v226;
        v229 = v230;
      }
      ++v226;
    }
    while (v226 != 18);
    sub_1B68B6AF0(*(unsigned int *)(v58 + 8), *(_DWORD *)(v58 + 12), v227, &v305, &v304, v9[10], v9[11]);
    if (*(_DWORD *)(a5 + 372) == 1
      && (*((_DWORD *)v9 + 30) = *((_DWORD *)v9 + 7) + 1, *(_DWORD *)(a5 + 372) == 1)
      && *(_DWORD *)(a5 + 376) < *(_DWORD *)(v58 + 28))
    {
      v231 = 1.0 / (double)*((int *)v9 + 4);
      if (v231 >= *(float *)(a5 + 364))
        v231 = *(float *)(a5 + 364);
      v232 = 1.0 / v231;
    }
    else
    {
      v233 = *(float *)(a5 + 360);
      if (v233 >= *(float *)(a5 + 364))
        v233 = *(float *)(a5 + 364);
      v232 = 1.0 / v233;
    }
    v234 = (int)(v232 + 0.1);
    if (v234 <= 2)
      v234 = 2;
    if (v234 >= 51)
      v234 = 51;
    v235 = HIDWORD(v305) - v234;
    if (HIDWORD(v305) - v234 < 1)
    {
      v235 = 0;
    }
    else if (v235 >= dword_1B6932234[9 * (int)v305 + v304])
    {
      v235 = dword_1B6932234[9 * (int)v305 + v304];
    }
    v237 = v235 + v234;
    if (*(_BYTE *)(v58 + 54))
    {
      if (v296)
      {
        v238 = *((_DWORD *)v9 + 7);
        if (v238)
        {
          v239 = v237 - v238;
          v240 = (int)(float)((float)v238 * 0.1);
          if (v237 - v238 < -v240)
            v237 = v238 - v240;
          v241 = v238 + v240;
          if (v239 > v240)
            v237 = v241;
        }
      }
      else
      {
        v242 = *(_DWORD *)(a5 + 3724);
        if (v242 <= 2)
        {
          v243 = *((_DWORD *)v9 + 31);
          v244 = v237 - v243;
          if (v237 < v243 && v243 != 0)
          {
            v246 = (int)(float)((float)v243 * 0.2);
            if (v244 < -v246)
              v237 = v243 - v246;
            v247 = v243 + v246;
            if (v244 > v246)
              v237 = v247;
          }
        }
        *(_DWORD *)(a5 + 3724) = v242 + 1;
      }
    }
    if (v237 >= 51)
      v237 = 51;
    if (v237 <= 12)
      v210 = 12;
    else
      v210 = v237;
    *((_DWORD *)v9 + 30) = v210;
    if (*(_DWORD *)(v58 + 16) && *(_DWORD *)(a5 + 3648))
    {
      v248 = sub_1B68F7888((double)*(int *)(a5 + 3600) / v9[11]);
      *(double *)(a5 + 3592) = v248;
      v249 = sub_1B68F7888(v248 * v9[10] / 1000.0);
      *(float *)(a5 + 3620) = v249;
      *(float *)(a5 + 3608) = v249;
    }
    goto LABEL_194;
  }
  *(double *)(a5 + 264) = (*(double *)(a5 + 72) + *(double *)(a5 + 264) * 511.0) * 0.001953125;
  HIDWORD(v305) = 0;
  v304 = 0;
  v137 = a7[5];
  v138 = 100;
  if (v137 >= 1)
    v138 = 100 * (v137 - a7[18] + a7[16]) / v137;
  v139 = *(double *)(a5 + 304);
  v140 = *(double *)(a5 + 112);
  v141 = a7[1];
  v142 = v9[11];
  if (*((_DWORD *)v9 + 1))
  {
    *((_DWORD *)v9 + 1) = 0;
    *(_DWORD *)(a5 + 420) = *(_DWORD *)(v58 + 4);
    v143 = *(_QWORD *)(a5 + 48);
    *(_QWORD *)(a5 + 400) = v143;
    *(_QWORD *)(a5 + 288) = v143;
  }
  v144 = *((_DWORD *)v9 + 3);
  if (v144)
    *((_DWORD *)v9 + 7) = *((_DWORD *)v9 + 4);
  v145 = (double)v141 / v142;
  v146 = *(_QWORD *)(a5 + 400);
  v147 = (double)v146;
  v148 = *(_QWORD *)(a5 + 48);
  v149 = *(double *)(a5 + 128) + (double)v146 - (double)v148;
  if (v144)
  {
    v150 = sub_1B68F7888(*(double *)(a5 + 16) * 10.0) * *(double *)(a5 + 384);
  }
  else
  {
    v181 = v145 * 5.0;
    if (v145 * 5.0 < (double)v148)
    {
      v148 = (uint64_t)v181;
      *(_QWORD *)(a5 + 48) = (uint64_t)v181;
    }
    v182 = (double)v138;
    v183 = (double)(v146 - v148);
    if (v138 < 50)
    {
      if (v145 + v145 >= v147)
      {
        v185 = v183 * 31.0 / v140;
      }
      else
      {
        v236 = 0.0;
        if (*((int *)v9 + 7) < 13)
        {
          if (v138 >= 30)
            v236 = (v182 * 0.025 + -0.75) * (double)-v148;
        }
        else if (v146 > v148)
        {
          v236 = (v182 * -0.01 + 0.5) * v145 / 2.8;
        }
        v185 = (v183 - v236) * 31.0 / v140;
        if (v185 < 0.0)
          v185 = 0.0;
      }
    }
    else
    {
      v184 = (v182 * 0.02 + -1.0) * (v145 - (double)v148);
      if (v145 >= (double)v148)
        v184 = 0.0;
      v185 = (v183 - v184) * 31.0 / v140;
      if (v185 < 0.0 && v145 < v147)
        v185 = 0.0;
    }
    if (*(_BYTE *)(v58 + 52))
      v185 = v185 + (double)*(int *)(a5 + 3688);
    v250 = *(double *)(a5 + 384);
    v251 = v139 * v250;
    v252 = v185 * v250;
    v253 = -3.0;
    if (v252 >= -3.0)
      v253 = v252;
    if (v252 <= 3.0)
      v254 = v253;
    else
      v254 = 3.0;
    v150 = v251 + v254;
  }
  v306[0] = sub_1B68F7888(v150);
  *(double *)(a5 + 128) = v149;
  sub_1B68B693C(1, (uint64_t *)&v303, (double *)v306, (_DWORD *)&v305 + 1, (unsigned int *)a5, v58);
  v255 = 0;
  v256 = 0;
  v258 = 10000000.0;
  do
  {
    v257 = *(double *)(a5 + 504);
    v259 = v257 - flt_1B6932568[v255];
    if (v259 < 0.0)
      v259 = -v259;
    if (v259 <= v258)
    {
      v256 = v255;
      v258 = v259;
    }
    ++v255;
  }
  while (v255 != 18);
  sub_1B68B6AF0(*(unsigned int *)(v58 + 8), *(_DWORD *)(v58 + 12), v256, &v305, &v304, v9[10], v9[11]);
  *(_QWORD *)(a5 + 336) = *(_QWORD *)(a5 + 340);
  *(_DWORD *)(a5 + 344) = *(_DWORD *)(a5 + 348);
  *(float *)(a5 + 348) = (float)v148;
  v260 = (uint64_t *)(a5 + 352);
  *(_QWORD *)(a5 + 352) = *(_QWORD *)(a5 + 356);
  *(_DWORD *)(a5 + 360) = *(_DWORD *)(a5 + 364);
  *(_DWORD *)(a5 + 364) = 0;
  v261 = *((_DWORD *)v9 + 7);
  if (*((_DWORD *)v9 + 3))
  {
    *((_DWORD *)v9 + 3) = 0;
    v148 = *(_QWORD *)(a5 + 48);
    v262 = v261;
  }
  else
  {
    v263 = HIDWORD(v305) - v261;
    if (HIDWORD(v305) - v261 >= 5)
      v263 = 5;
    if (v263 <= -4)
      v263 = -4;
    v262 = v263 + v261;
  }
  if (*(_BYTE *)(v58 + 54))
  {
    if (v296)
    {
      v264 = *((_DWORD *)v9 + 31);
      if (v264)
      {
        v265 = v262 - v264;
        v266 = (int)(float)((float)v264 * 0.1);
        if (v262 - v264 <= v266)
        {
          v271 = v264 - v266;
          if (v265 < -v266)
            v262 = v271;
        }
        else
        {
          v262 = v264 + v266;
        }
      }
    }
    else
    {
      v267 = *(_DWORD *)(a5 + 3724);
      if (v267 <= 2)
      {
        v268 = *((_DWORD *)v9 + 31);
        v269 = v262 - v268;
        if (v262 < v268)
        {
          if (v268)
          {
            v270 = (int)(float)((float)v268 * 0.15);
            if (v269 <= v270)
            {
              v272 = v268 - v270;
              if (v269 < -v270)
                v262 = v272;
            }
            else
            {
              v262 = v268 + v270;
            }
          }
        }
      }
      *(_DWORD *)(a5 + 3724) = v267 + 1;
    }
  }
  v273 = *(double *)(a5 + 3712);
  v274 = a7[5];
  v275 = 100;
  if (v274 >= 1)
    v275 = 100 * (v274 - a7[18] + a7[16]) / v274;
  v276 = (double)v261;
  v277 = ((double)v261 + v273 * 31.0) * 0.03125;
  if (v273 == 0.0)
    v277 = (double)v261;
  *(double *)(a5 + 3712) = v277;
  if (v275 > 50)
  {
    v278 = v262 - v261;
    if (v275 < 0x55)
    {
      if (v275 < 0x46)
      {
        v280 = -(int)(v276 * 0.1 + 0.5);
      }
      else if (v145 <= (double)v148)
      {
        v280 = 0;
      }
      else
      {
        v280 = -1;
      }
    }
    else
    {
      v280 = v145 <= (double)v148;
    }
    if (v278 <= v280)
      v278 = v280;
  }
  else
  {
    v261 = (int)(v277 + 0.5);
    v278 = v262 - v261;
    if (v275 > 15)
    {
      v281 = 51.0 - v276;
      if (v275 > 0x1E)
        v282 = 0.6;
      else
        v282 = 0.4;
      v279 = v281 * v282 + 0.5;
    }
    else
    {
      v279 = (51.0 - v276) * 0.2 + 0.5;
    }
    if (v278 >= (int)v279)
      v278 = (int)v279;
  }
  v283 = v278 + v261;
  if (v283 >= 51)
    v283 = 51;
  if (v283 <= 12)
    v284 = 12;
  else
    v284 = v283;
  *((_DWORD *)v9 + 7) = v284;
  *(double *)(a5 + 3640) = (double)*(uint64_t *)(a5 + 48);
  if (*(_DWORD *)(a1 + 16) && *(_DWORD *)(a5 + 3648) && !*(_DWORD *)(a1 + 28))
  {
    v285 = sub_1B68F7888((double)*(int *)(a5 + 3600) / v9[11]);
    *(double *)(a5 + 3592) = v285;
    v286 = sub_1B68F7888(v285 * v9[10] / 1000.0);
    *(float *)(a5 + 3620) = v286;
    *(float *)(a5 + 3608) = v286;
  }
  v287 = *(double *)(a5 + 3704);
  if (v287 <= 0.0)
    v288 = (double)v284;
  else
    v288 = ((double)v284 + v287 * 7.0) * 0.125;
  *(double *)(a5 + 3704) = v288;
  v289 = *(double *)(a5 + 272);
  if (v289 <= 0.0)
    v290 = (double)v284;
  else
    v290 = ((double)v284 + v289 * 511.0) * 0.001953125;
  *(double *)(a5 + 272) = v290;
  v291 = *v260;
  v292 = *(_DWORD *)(a5 + 360);
  *(_DWORD *)(a5 + 364) = v292;
  *(_QWORD *)(a5 + 356) = v291;
  *v260 = v291;
  *(_DWORD *)(a5 + 360) = v292;
  *(float *)(a5 + 364) = 1.0 / (float)v284;
  v293 = *(double *)(a5 + 384);
  if (v293 <= 0.2)
    v293 = 1.0;
  *(double *)(a5 + 304) = sub_1B68F7888(dbl_1B69323C8[v284] / v293);
  v13[3] = v284;
}

void sub_1B68B68D8(double *a1, double a2, double a3, double a4, double a5)
{
  a1[8] = sub_1B68F7888(a2);
  a1[9] = sub_1B68F7888(a3);
  a1[10] = sub_1B68F7888(a4);
  a1[11] = sub_1B68F7888(a5);
}

void sub_1B68B693C(int a1, uint64_t *a2, double *a3, _DWORD *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int *v11;
  int *v12;
  unsigned int v13;
  double v14;
  int v15;
  unsigned int v16;
  int v17;
  double v18;
  uint64_t v19;
  float v20;
  int v21;
  float v22;
  int v23;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;

  v8 = 0;
  v9 = a5[53];
  v10 = (int)a5[52];
  v11 = (int *)(a5 + 105);
  v12 = (int *)(a5 + 106);
  if (!a1)
    v12 = (int *)(a5 + 104);
  if (a1 != 1)
    v11 = v12;
  if (v10 >= 0x33)
    v13 = 51;
  else
    v13 = a5[52];
  v14 = dbl_1B69323C8[v13];
  if (*a3 >= v14)
    v14 = *a3;
  if (*(_BYTE *)(a6 + 60))
    v15 = 39;
  else
    v15 = 30;
  v16 = v10 + v15;
  if (v16 >= 0x33)
    v16 = 51;
  v17 = *v11;
  if (v14 <= dbl_1B69323C8[v16])
    v18 = v14;
  else
    v18 = dbl_1B69323C8[v16];
  *a3 = v18;
  if ((_DWORD)v10 == 12)
    v19 = 40;
  else
    v19 = 31;
  v20 = 10000000.0;
  v21 = -1;
  do
  {
    v22 = sub_1B68F7888(v18 - dbl_1B69323C8[v10 + v8]);
    if (v22 < 0.0)
      v22 = -v22;
    if (v22 <= v20)
    {
      v21 = v8;
      v20 = v22;
    }
    ++v8;
  }
  while (v19 != v8);
  if (v21 >= 0)
    v23 = 30;
  else
    v23 = 0;
  if (v21 <= 0x1E || a1 != 2)
    v23 = v21;
  v25 = v10 - v17 + v23;
  if (v25 >= 0)
    v26 = v10 - v17 + v23;
  else
    v26 = -v25;
  if (v26 > v9)
  {
    v27 = v9 - v10;
    if (v25 < 0)
      v27 = -(v9 + v10);
    v28 = v17 + v27;
    if (v28 >= 0)
      v29 = 30;
    else
      v29 = 0;
    if (v28 < 0x1F)
      v29 = v28;
    if (*(_BYTE *)(a6 + 60))
      v23 = v28 & ~(v28 >> 31);
    else
      v23 = v29;
  }
  v30 = v23 + v10;
  if (v23 + (int)v10 <= 51)
    v31 = *(_QWORD *)&dbl_1B69323C8[v30];
  else
    v31 = 0x4056A0A3D70A3D71;
  *a2 = v31;
  *a4 = v30;
}

uint64_t sub_1B68B6AF0(uint64_t result, int a2, int a3, _DWORD *a4, _DWORD *a5, double a6, double a7)
{
  uint64_t v7;
  double v8;
  uint64_t v9;

  v7 = 0;
  v8 = a6 / ((double)(a2 * (int)result) * a7);
  while (v8 > dbl_1B69325B0[v7])
  {
    if (++v7 == 9)
    {
      LODWORD(v7) = 8;
      break;
    }
  }
  v9 = 0;
  if ((int)v7 >= 8)
    LODWORD(v7) = 8;
  *a4 = v7 & ~((int)v7 >> 31);
  while (dword_1B69325F8[v9] < a3)
  {
    if (++v9 == 9)
    {
      LODWORD(v9) = *a5;
      break;
    }
  }
  if ((int)v9 >= 8)
    LODWORD(v9) = 8;
  *a5 = v9 & ~((int)v9 >> 31);
  return result;
}

uint64_t sub_1B68B6B7C(uint64_t a1, int a2)
{
  _BOOL8 v3;
  __int16 *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;

  v3 = *(float *)(a1 + 756) > 30.0;
  v4 = (__int16 *)((char *)&unk_1B6930AE8 + 128 * (uint64_t)a2);
  v5 = (char *)&unk_1B6930DE8 + 128 * v3;
  v6 = (char *)&unk_1B6930FE8 + 64 * v3;
  v7 = a1 + 176;
  v8 = sub_1B68B70EC(a1, v4 + 192, (uint64_t)(v5 + 256), (uint64_t)(v6 + 128), 1, a1 + 176);
  if ((_DWORD)v8)
  {
    v9 = v8;
LABEL_5:
    CFLog();
    return v9;
  }
  v10 = sub_1B68B70EC(a1, v4, (uint64_t)v5, (uint64_t)v6, 0, a1 + 432);
  if ((_DWORD)v10)
  {
    v9 = v10;
    goto LABEL_5;
  }
  if (!*(_BYTE *)(a1 + 761))
  {
    for (i = 0; i != 256; i += 8)
    {
      v13 = a1 + i;
      HIDWORD(v14) = *(_DWORD *)(a1 + i + 180);
      LODWORD(v14) = HIDWORD(v14);
      *(_DWORD *)(v13 + 180) = v14 >> 16;
      HIDWORD(v14) = *(_DWORD *)(a1 + i + 436);
      LODWORD(v14) = HIDWORD(v14);
      *(_DWORD *)(v13 + 436) = v14 >> 16;
    }
  }
  *(_QWORD *)(a1 + 784) = v7;
  v15 = 1;
  *(_BYTE *)(a1 + 688) = 1;
  v16 = *(_DWORD *)(a1 + 152);
  v17 = *(unsigned __int16 *)(a1 + 180);
  v18 = (unsigned __int16 *)(a1 + 190);
  while (1)
  {
    v19 = v17;
    v17 = *(v18 - 1);
    if (__PAIR64__(*v18, v17) == __PAIR64__(*(v18 - 4), v19) && *(float *)(v18 - 3) == *(float *)(v18 - 7))
      break;
    ++v15;
    v18 += 4;
    if (v15 == 32)
    {
      LODWORD(v15) = *(_DWORD *)(a1 + 152);
      break;
    }
  }
  v9 = 0;
  v20 = v15 + 2;
  if (v20 <= v16)
    v21 = *(_DWORD *)(a1 + 152);
  else
    v21 = v20;
  if (v16 == 31)
    v22 = v20;
  else
    v22 = v21;
  *(_DWORD *)(a1 + 152) = v22;
  return v9;
}

uint64_t sub_1B68B6CF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = 0;
  v3 = a1 + 438;
  v4 = &word_1B69317EC;
  while (*(_DWORD *)(a1 + 748) < *v4 || *((float *)v4 - 1) > *(float *)(a1 + 756))
  {
    ++v2;
    v3 -= 8;
    v4 += 4;
    if (v2 == 32)
    {
      CFLog();
      v5 = 0;
      *(_OWORD *)(a1 + 368) = xmmword_1B69317A8;
      *(_OWORD *)(a1 + 384) = unk_1B69317B8;
      *(_OWORD *)(a1 + 400) = xmmword_1B69317C8;
      *(_OWORD *)(a1 + 416) = unk_1B69317D8;
      *(_OWORD *)(a1 + 304) = xmmword_1B6931768;
      *(_OWORD *)(a1 + 320) = unk_1B6931778;
      *(_OWORD *)(a1 + 336) = xmmword_1B6931788;
      *(_OWORD *)(a1 + 352) = unk_1B6931798;
      *(_OWORD *)(a1 + 240) = xmmword_1B6931728;
      *(_OWORD *)(a1 + 256) = unk_1B6931738;
      *(_OWORD *)(a1 + 272) = xmmword_1B6931748;
      *(_OWORD *)(a1 + 288) = unk_1B6931758;
      *(_OWORD *)(a1 + 176) = xmmword_1B69316E8;
      *(_OWORD *)(a1 + 192) = unk_1B69316F8;
      *(_OWORD *)(a1 + 208) = xmmword_1B6931708;
      *(_OWORD *)(a1 + 224) = unk_1B6931718;
      do
      {
        v6 = a1 + v5;
        *(_WORD *)(v6 + 180) = *(_DWORD *)(a1 + 748);
        *(_WORD *)(v6 + 182) = *(_DWORD *)(a1 + 748);
        v5 += 8;
      }
      while (v5 != 256);
      goto LABEL_11;
    }
  }
  memcpy((void *)(a1 + 176), (char *)&unk_1B69317E8 + 8 * v2, (256 - 8 * v2) & 0x7FFFFFFF8);
  if ((_DWORD)v2)
  {
    v7 = 31 - v2;
    do
    {
      *(_QWORD *)(v3 - 6) = 0xC000C03E99999ALL;
      ++v7;
      v3 += 8;
    }
    while (v7 < 0x1F);
  }
LABEL_11:
  *(_QWORD *)(a1 + 784) = a1 + 176;
  *(_BYTE *)(a1 + 688) = 1;
  return 0;
}

uint64_t sub_1B68B6E5C(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  _WORD *v5;
  float *v6;
  uint64_t result;
  char *v8;
  __int16 v9;
  unint64_t v10;

  if (a2 > 3)
  {
LABEL_6:
    CFLog();
    return 4294967246;
  }
  else
  {
    v3 = 0;
    v4 = a2 & 1;
    v5 = (_WORD *)(a1 + 438);
    v6 = (float *)((char *)&unk_1B69310E8 + 256 * v4 + 4);
    while (*(_DWORD *)(a1 + 748) < *(__int16 *)v6 || *(v6 - 1) > *(float *)(a1 + 756))
    {
      ++v3;
      v5 -= 4;
      v6 += 2;
      if (v3 == 32)
        goto LABEL_6;
    }
    v8 = (char *)&unk_1B69310E8 + 256 * v4;
    memcpy((void *)(a1 + 176), &v8[8 * v3], (256 - 8 * v3) & 0x7FFFFFFF8);
    if ((_DWORD)v3)
    {
      v9 = *((_WORD *)v8 + 127);
      v10 = 31 - v3;
      do
      {
        *(_DWORD *)(v5 - 3) = 1036831949;
        *(v5 - 1) = 192;
        *v5 = v9;
        v5 += 4;
        ++v10;
      }
      while (v10 < 0x1F);
    }
    result = 0;
    *(_QWORD *)(a1 + 784) = a1 + 176;
    *(_BYTE *)(a1 + 688) = 1;
  }
  return result;
}

uint64_t sub_1B68B6F6C(uint64_t a1, int a2)
{
  float v3;
  __int16 *v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  char *v9;
  float *v10;
  float v11;
  unsigned int v12;
  _WORD *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;

  v3 = fminf(*(float *)(a1 + 756), 60.0);
  v4 = (__int16 *)((char *)&unk_1B69312E8 + 256 * (uint64_t)a2 + 4);
  v5 = -32;
  while (1)
  {
    v6 = *v4;
    v4 += 4;
    if (*(_DWORD *)(a1 + 748) >= v6)
      break;
    if (__CFADD__(v5++, 1))
    {
      CFLog();
      return 4294967246;
    }
  }
  v9 = (char *)&unk_1B69312E8 + 256 * (uint64_t)a2;
  v10 = (float *)&v9[8 * (v5 + 32)];
  v11 = *v10;
  if (v3 <= *v10)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = (_WORD *)(a1 + 182);
    do
    {
      *(float *)(v13 - 3) = v3;
      *(v13 - 1) = *(_DWORD *)(a1 + 748);
      *v13 = *(_DWORD *)(a1 + 752);
      v13 += 4;
      v3 = v3 + -5.0;
      ++v12;
    }
    while (v3 > v11);
  }
  v14 = 32 - v12;
  if ((int)(32 - v12) >= -(int)v5)
    v15 = -(int)v5;
  else
    v15 = 32 - v12;
  memcpy((void *)(a1 + 176 + 8 * v12), v10, 8 * v15);
  if ((int)(v15 + v12) <= 31)
  {
    v16 = -v5;
    v17 = *((_WORD *)v9 + 126);
    v18 = *((_WORD *)v9 + 127);
    v19 = *((_DWORD *)v9 + 62);
    if (-v5 >= (int)v14)
      v16 = (int)v14;
    v20 = v16 + (int)v12;
    v21 = v20 - 1;
    v22 = (_WORD *)(a1 + 8 * v20 + 182);
    do
    {
      *(_DWORD *)(v22 - 3) = v19;
      *(v22 - 1) = v17;
      *v22 = v18;
      v22 += 4;
      ++v21;
    }
    while (v21 < 31);
  }
  result = 0;
  *(_QWORD *)(a1 + 784) = a1 + 176;
  *(_BYTE *)(a1 + 688) = 1;
  return result;
}

uint64_t sub_1B68B70EC(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  __int16 *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  _BOOL4 v22;
  int v23;
  BOOL v24;
  char v26;
  _BOOL4 v27;
  uint64_t v28;
  __int16 *v29;
  int v30;
  uint64_t v31;
  float v32;
  float v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  float v45;
  float v46;
  __int16 *v47;
  int v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _WORD *v56;
  _WORD *v57;
  uint64_t v58;
  _WORD *v59;

  v6 = *(_DWORD *)(a1 + 748);
  v7 = *a2 - v6;
  if (v7 < 0)
    v7 = v6 - *a2;
  if (v7 < 0x10)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 752);
    v10 = a2 + 2;
    do
    {
      v11 = *(v10 - 1) - v9;
      if (v11 < 0)
        v11 = v9 - *(v10 - 1);
      if (v8 > 0x1F || v11 < 0x10)
        break;
      ++v8;
      v12 = *v10;
      v10 += 2;
      v13 = v12 - v6;
      if (v12 - v6 < 0)
        v13 = -v13;
    }
    while (v13 > 0xF);
    if ((int)v8 >= 32)
    {
      CFLog();
      CFLog();
      return 4294967246;
    }
  }
  v15 = 0;
  while (*(float *)(a3 + 4 * v15) != *(float *)(a1 + 756))
  {
    if (++v15 == 32)
    {
      LODWORD(v15) = 0;
      v16 = 0;
      if (!a5)
        goto LABEL_51;
LABEL_22:
      v17 = 0;
      v18 = 0;
      v19 = (int)v8;
      v20 = (32 - v8);
      while (2)
      {
        v21 = &a2[2 * v19];
        v22 = *v21 == a2[62] && v21[1] == a2[63];
        v23 = *(__int16 *)(a4 + 2 * v17);
        v24 = v18 > 31;
        if (v23 >= 1 && v18 <= 31)
        {
          v28 = 0;
          v26 = 0;
          v29 = &a2[2 * v19 + 1];
          v30 = v16;
          v31 = a3 + 4 * v16;
          do
          {
            v32 = *(float *)(v31 + 4 * v28);
            v33 = *(float *)(a3 + 124);
            v34 = (unsigned __int16)*v21;
            v35 = (v18 - 1);
            if (v18 < 1
              || (v36 = a6 + 8 * v35, *(unsigned __int16 *)(v36 + 4) != v34)
              || *(unsigned __int16 *)(a6 + 8 * v35 + 6) != (unsigned __int16)*v29
              || *(float *)v36 != v32)
            {
              v37 = a6 + 8 * v18;
              *(_WORD *)(v37 + 4) = v34;
              *(_WORD *)(v37 + 6) = *v29;
              *(_DWORD *)v37 = *(_DWORD *)(v31 + 4 * v28);
              ++v18;
              LOWORD(v23) = *(_WORD *)(a4 + 2 * v17);
              v26 = 1;
            }
            v27 = v32 == v33;
            ++v28;
            v24 = v18 > 31;
            if (v18 > 31)
              v27 = 1;
            v38 = (int)v28 < (__int16)v23 && !v27;
          }
          while (v38);
          v16 = v30 + v28;
          if (!v22)
            goto LABEL_31;
        }
        else
        {
          v26 = 0;
          LOBYTE(v27) = v18 > 31;
          if (!v22)
          {
LABEL_31:
            if (v24)
              goto LABEL_48;
            goto LABEL_47;
          }
        }
        if (v27)
          goto LABEL_48;
LABEL_47:
        v16 -= v26 & 1;
        ++v17;
        ++v19;
        if (v17 == v20)
        {
LABEL_48:
          if (v18 > 31)
            return 0;
          goto LABEL_75;
        }
        continue;
      }
    }
  }
  if (a5)
  {
    v16 = v15;
    goto LABEL_22;
  }
  if ((int)v15 <= 31)
  {
LABEL_51:
    v39 = 0;
    v18 = 0;
    v40 = (int)v15;
    v41 = (32 - v15);
    while (1)
    {
      LODWORD(v42) = *(__int16 *)(a4 + 2 * v39);
      if ((int)v42 >= 1)
      {
        v43 = 0;
        v44 = 0;
        v45 = *(float *)(a3 + 4 * v40);
        v46 = *(float *)(a3 + 124);
        v47 = &a2[2 * (int)v8 + 1];
        do
        {
          v48 = (unsigned __int16)*(v47 - 1);
          v49 = v48 == (unsigned __int16)a2[62] && *v47 == a2[63];
          v50 = (v18 - 1);
          if (v18 < 1
            || (v51 = a6 + 8 * v50, *(unsigned __int16 *)(v51 + 4) != v48)
            || *(unsigned __int16 *)(a6 + 8 * v50 + 6) != (unsigned __int16)*v47
            || *(float *)v51 != *(float *)(a3 + 4 * v40))
          {
            v42 = a6 + 8 * v18;
            *(_WORD *)(v42 + 4) = v48;
            *(_WORD *)(v42 + 6) = *v47;
            *(_DWORD *)v42 = *(_DWORD *)(a3 + 4 * v40);
            ++v18;
            LOWORD(v42) = *(_WORD *)(a4 + 2 * v39);
            v44 = 1;
          }
          v52 = ++v43 >= (__int16)v42 || v49;
          if ((v52 & 1) != 0)
            break;
          v47 += 2;
        }
        while (v18 < 32);
        LODWORD(v8) = v8 - (v44 & 1) + v43;
        if (v49)
        {
          if (v45 == v46 || v18 > 31)
            goto LABEL_48;
        }
        else if (v18 > 31)
        {
          return 0;
        }
      }
      ++v39;
      ++v40;
      if (v39 == v41)
        goto LABEL_75;
    }
  }
  v18 = 0;
LABEL_75:
  v53 = a6 + 8 * v18;
  v54 = v18;
  v55 = (_DWORD *)(v53 - 8);
  v56 = (_WORD *)(v53 - 4);
  v57 = (_WORD *)(v53 - 2);
  v58 = v54 + 1;
  v59 = (_WORD *)(v53 + 6);
  do
  {
    *(v59 - 1) = *v56;
    *v59 = *v57;
    *(_DWORD *)(v59 - 3) = *v55;
    v59 += 4;
    v38 = (_DWORD)v58++ == 32;
  }
  while (!v38);
  return 0;
}

double sub_1B68B74C0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, float a8)
{
  int v8;
  int v9;
  int v10;
  void *v11;
  double result;

  *(_OWORD *)(a1 + 4) = xmmword_1B6917D40;
  *(_DWORD *)(a1 + 20) = 1105723392;
  *(_DWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 100;
  *(_DWORD *)(a1 + 808) = 100;
  *(_OWORD *)(a1 + 104) = xmmword_1B6917D50;
  *(_OWORD *)(a1 + 128) = xmmword_1B6917D60;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_WORD *)(a1 + 801) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 150) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 152) = 31;
  *(_QWORD *)(a1 + 160) = 0x404E000000000000;
  *(_WORD *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 792) = 0;
  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 729) = 0;
  *(_QWORD *)(a1 + 734) = 0;
  *(_DWORD *)(a1 + 744) = a2;
  *(float *)(a1 + 756) = a8;
  if (a3 <= a4)
    v8 = a4;
  else
    v8 = a3;
  *(_DWORD *)(a1 + 748) = v8;
  if (a3 >= a4)
    v9 = a4;
  else
    v9 = a3;
  *(_DWORD *)(a1 + 752) = v9;
  if (v8 >= 1920)
  {
    v10 = 5;
LABEL_17:
    *(_DWORD *)(a1 + 804) = v10;
    goto LABEL_18;
  }
  if (v8 >= 1280)
  {
    v10 = 4;
    goto LABEL_17;
  }
  if (v8 >= 1024)
  {
    v10 = 3;
    goto LABEL_17;
  }
  if (v8 >= 640)
  {
    v10 = 2;
    goto LABEL_17;
  }
  if (v8 >= 480)
  {
    v10 = 1;
    goto LABEL_17;
  }
  *(_DWORD *)(a1 + 804) = 0;
LABEL_18:
  *(_BYTE *)(a1 + 761) = a3 > a4;
  *(_BYTE *)(a1 + 800) = a6;
  *(_BYTE *)(a1 + 760) = a5;
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 824) = 0x200000002;
  *(_BYTE *)(a1 + 812) = 0;
  if (a5)
  {
    v11 = sub_1B68B6B7C;
  }
  else if (v8 == v9)
  {
    v11 = sub_1B68B6CF8;
  }
  else if (a6)
  {
    v11 = sub_1B68B6E5C;
  }
  else
  {
    v11 = sub_1B68B6F6C;
  }
  *(_QWORD *)(a1 + 832) = v11;
  *(_QWORD *)(a1 + 840) = 0;
  *(_DWORD *)(a1 + 848) = a3;
  *(_DWORD *)(a1 + 852) = a4;
  *(_DWORD *)(a1 + 856) = a3 >> 1;
  *(_DWORD *)(a1 + 860) = a4 >> 1;
  *(_DWORD *)(a1 + 868) = 100;
  *(_DWORD *)(a1 + 888) = 0;
  *(_DWORD *)(a1 + 864) = (a4 + (a4 >> 1) + 144) * (a3 + 64);
  result = 0.0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_DWORD *)(a1 + 872) = a3;
  *(_DWORD *)(a1 + 876) = a4;
  *(_QWORD *)(a1 + 768) = a7;
  return result;
}

uint64_t sub_1B68B7684(uint64_t a1, int a2, int a3)
{
  int v5;
  uint64_t v6;
  double v7;
  _BOOL8 v8;
  uint64_t (*v9)(_QWORD *, _BOOL8);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  double v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 *v32;
  uint64_t v33;
  float v34;

  v5 = 0;
  *(_BYTE *)(a1 + 729) = 0;
  *(_BYTE *)(a1 + 726) = 0;
  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 784) + 8 * *(char *)(a1 + 148);
    v5 = (int)(float)(*(float *)v6 * (float)(*(__int16 *)(v6 + 6) * *(__int16 *)(v6 + 4)));
  }
  switch(*(_DWORD *)(a1 + 744))
  {
    case 0:
      if (*(_BYTE *)(a1 + 760))
      {
        v14 = &xmmword_1B69318E8[16 * (unint64_t)(a3 == 1)];
        *(_OWORD *)(a1 + 368) = v14[12];
        *(_OWORD *)(a1 + 384) = v14[13];
        *(_OWORD *)(a1 + 400) = v14[14];
        *(_OWORD *)(a1 + 416) = v14[15];
        *(_OWORD *)(a1 + 304) = v14[8];
        *(_OWORD *)(a1 + 320) = v14[9];
        *(_OWORD *)(a1 + 336) = v14[10];
        *(_OWORD *)(a1 + 352) = v14[11];
        *(_OWORD *)(a1 + 240) = v14[4];
        *(_OWORD *)(a1 + 256) = v14[5];
        *(_OWORD *)(a1 + 272) = v14[6];
        *(_OWORD *)(a1 + 288) = v14[7];
        *(_OWORD *)(a1 + 176) = *v14;
        *(_OWORD *)(a1 + 192) = v14[1];
        *(_OWORD *)(a1 + 208) = v14[2];
        *(_OWORD *)(a1 + 224) = v14[3];
      }
      else
      {
        *(_OWORD *)(a1 + 368) = xmmword_1B69317A8;
        *(_OWORD *)(a1 + 384) = unk_1B69317B8;
        *(_OWORD *)(a1 + 400) = xmmword_1B69317C8;
        *(_OWORD *)(a1 + 416) = unk_1B69317D8;
        *(_OWORD *)(a1 + 304) = xmmword_1B6931768;
        *(_OWORD *)(a1 + 320) = unk_1B6931778;
        *(_OWORD *)(a1 + 336) = xmmword_1B6931788;
        *(_OWORD *)(a1 + 352) = unk_1B6931798;
        *(_OWORD *)(a1 + 240) = xmmword_1B6931728;
        *(_OWORD *)(a1 + 256) = unk_1B6931738;
        *(_OWORD *)(a1 + 272) = xmmword_1B6931748;
        *(_OWORD *)(a1 + 288) = unk_1B6931758;
        *(_OWORD *)(a1 + 176) = xmmword_1B69316E8;
        *(_OWORD *)(a1 + 192) = unk_1B69316F8;
        *(_OWORD *)(a1 + 208) = xmmword_1B6931708;
        *(_OWORD *)(a1 + 224) = unk_1B6931718;
      }
      v18 = 0;
      v19 = *(_DWORD *)(a1 + 752);
      do
      {
        v20 = a1 + v18;
        *(_WORD *)(v20 + 180) = *(_DWORD *)(a1 + 748);
        *(_WORD *)(v20 + 182) = v19;
        v18 += 8;
      }
      while (v18 != 256);
      goto LABEL_29;
    case 1:
      v15 = (float)((float)*(int *)(a1 + 748) / (float)*(int *)(a1 + 752));
      if (*(_BYTE *)(a1 + 760))
      {
        if (v15 <= 1.96)
          v16 = v15 > 1.56;
        else
          v16 = 2;
      }
      else if (fabs(v15 + -1.33) >= fabs(v15 + -1.77))
      {
        v16 = 3;
      }
      else
      {
        v16 = 2;
      }
      v21 = *(uint64_t (**)(_QWORD *, uint64_t))(a1 + 832);
      v22 = *(_QWORD *)(a1 + 840);
      v23 = (_QWORD *)(a1 + (v22 >> 1));
      if ((v22 & 1) != 0)
        v21 = *(uint64_t (**)(_QWORD *, uint64_t))(*v23 + v21);
      v12 = v21(v23, v16);
      if ((_DWORD)v12)
        goto LABEL_7;
      goto LABEL_30;
    case 2:
    case 3:
      v7 = (float)((float)*(int *)(a1 + 748) / (float)*(int *)(a1 + 752));
      v8 = fabs(v7 + -1.33) >= fabs(v7 + -1.77);
      v9 = *(uint64_t (**)(_QWORD *, _BOOL8))(a1 + 832);
      v10 = *(_QWORD *)(a1 + 840);
      v11 = (_QWORD *)(a1 + (v10 >> 1));
      if ((v10 & 1) != 0)
        v9 = *(uint64_t (**)(_QWORD *, _BOOL8))(*v11 + v9);
      v12 = v9(v11, v8);
      if (!(_DWORD)v12)
        goto LABEL_30;
LABEL_7:
      v13 = v12;
      CFLog();
      return v13;
    case 4:
      *(_BYTE *)(a1 + 729) = 1;
      if (*(_BYTE *)(a1 + 760))
        v17 = xmmword_1B69318E8;
      else
        v17 = &xmmword_1B69316E8;
      v24 = v17[13];
      *(_OWORD *)(a1 + 368) = v17[12];
      *(_OWORD *)(a1 + 384) = v24;
      v25 = v17[15];
      *(_OWORD *)(a1 + 400) = v17[14];
      *(_OWORD *)(a1 + 416) = v25;
      v26 = v17[9];
      *(_OWORD *)(a1 + 304) = v17[8];
      *(_OWORD *)(a1 + 320) = v26;
      v27 = v17[11];
      *(_OWORD *)(a1 + 336) = v17[10];
      *(_OWORD *)(a1 + 352) = v27;
      v28 = v17[5];
      *(_OWORD *)(a1 + 240) = v17[4];
      *(_OWORD *)(a1 + 256) = v28;
      v29 = v17[7];
      *(_OWORD *)(a1 + 272) = v17[6];
      *(_OWORD *)(a1 + 288) = v29;
      v30 = v17[1];
      *(_OWORD *)(a1 + 176) = *v17;
      *(_OWORD *)(a1 + 192) = v30;
      v31 = v17[3];
      *(_OWORD *)(a1 + 208) = v17[2];
      *(_OWORD *)(a1 + 224) = v31;
LABEL_29:
      *(_QWORD *)(a1 + 784) = a1 + 176;
      *(_BYTE *)(a1 + 688) = 1;
      goto LABEL_30;
    default:
LABEL_30:
      if (a2)
      {
        v32 = (__int16 *)(*(_QWORD *)(a1 + 784) + 6);
        v33 = -1;
        while (v33 != 31)
        {
          v34 = *(float *)(v32 - 3) * (float)(*v32 * *(v32 - 1));
          ++v33;
          v32 += 4;
          if (v5 >= (int)v34)
            goto LABEL_37;
        }
        LOBYTE(v33) = 32;
      }
      else
      {
        LOBYTE(v33) = *(_BYTE *)(a1 + 726);
      }
LABEL_37:
      v13 = 0;
      *(_BYTE *)(a1 + 148) = v33;
      *(_QWORD *)(a1 + 696) = (char *)&unk_1EF137CF0 + 72 * *(unsigned __int8 *)(a1 + 760);
      return v13;
  }
}

uint64_t sub_1B68B7A48(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  uint64_t v15;
  __int16 *v16;
  int v17;
  __int16 *v18;
  int v19;
  uint64_t v20;
  __int16 *v21;
  int v22;
  __int16 *v23;
  int v24;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;

  v15 = 0;
  if ((a9 & 1) != 0)
  {
    v16 = (__int16 *)(a1 + 4);
    do
    {
      v17 = *v16;
      v16 += 4;
      if (v17 <= a3)
        break;
      ++v15;
    }
    while (v15 != 32);
  }
  else
  {
    v18 = (__int16 *)(a1 + 6);
    do
    {
      v19 = *v18;
      v18 += 4;
      if (v19 <= a3)
        break;
      ++v15;
    }
    while (v15 != 32);
  }
  if (v15 >= 0x1F)
    LODWORD(v15) = 31;
  v29 = v15;
  sub_1B68B7BB4(a1, &v29, (float)a4);
  v20 = 0;
  if ((a9 & 1) != 0)
  {
    v21 = (__int16 *)(a1 + 4);
    do
    {
      v22 = *v21;
      v21 += 4;
      if (v22 <= a6)
        break;
      ++v20;
    }
    while (v20 != 32);
  }
  else
  {
    v23 = (__int16 *)(a1 + 6);
    do
    {
      v24 = *v23;
      v23 += 4;
      if (v24 <= a6)
        break;
      ++v20;
    }
    while (v20 != 32);
  }
  if (v20 >= 0x1F)
    LODWORD(v20) = 31;
  v28 = v20;
  sub_1B68B7BB4(a1, &v28, (float)a7);
  if (a2 <= a5)
    return v29;
  if (a2 > a8)
    return v28;
  v26 = v29;
  v27 = v29 - (int)((v29 - v28) * (a2 - a5)) / (a8 - a5);
  if (v27 < (int)v29)
    v26 = v29 - (int)((v29 - v28) * (a2 - a5)) / (a8 - a5);
  if (v27 >= (int)v28)
    return v26;
  else
    return v28;
}

uint64_t sub_1B68B7BB4(uint64_t result, _DWORD *a2, float a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  int v5;
  int v6;
  unsigned __int16 *v7;
  unint64_t v8;
  int v9;
  int v10;
  float *i;

  v3 = *a2;
  if (v3 >= 0x20)
    return CFLog();
  v4 = (unsigned __int16 *)(result + 8 * v3);
  v5 = v4[2];
  v6 = v4[3];
  v7 = v4 + 6;
  v8 = *a2;
  do
  {
    if (v8 > 0x1F)
      break;
    if (*(v7 - 3) != v6)
      break;
    ++v8;
    v9 = *v7;
    v7 += 4;
  }
  while (v9 == v5);
  if ((int)v3 < (int)v8)
  {
    v10 = v8 - v3;
    for (i = (float *)(result + 8 * v3); *i != a3; i += 2)
    {
      LODWORD(v3) = v3 + 1;
      if (!--v10)
        return result;
    }
    *a2 = v3;
  }
  return result;
}

uint64_t sub_1B68B7C64(uint64_t a1, int a2)
{
  uint64_t v2;
  char v3;
  float v4;
  float v5;
  BOOL v6;
  double v7;
  double v8;
  __int16 *v9;
  double v10;

  v2 = 0;
  v3 = 0;
  v4 = *(float *)(*(_QWORD *)(a1 + 784) + 8 * a2);
  v5 = *(float *)(a1 + 756);
  v6 = v5 >= v4 || v5 <= 0.0;
  v7 = 1.0e20;
  if (!v6)
    v4 = *(float *)(a1 + 756);
  v8 = v4;
  v9 = (__int16 *)(*(_QWORD *)(a1 + 696) + 2);
  do
  {
    v10 = vabdd_f64(*(double *)(a1 + 160) * (double)*(v9 - 1) / (double)*v9, v8);
    if (v10 < v7)
    {
      v7 = v10;
      v3 = v2;
    }
    ++v2;
    v9 += 2;
  }
  while (v2 != 18);
  return v3;
}

float sub_1B68B7CE4(unsigned __int8 *a1, int a2, int a3, int a4, uint64_t a5, float a6, double a7, double a8, float a9)
{
  double v14;
  double v18;
  double v19;
  int8x8_t v20;
  int v21;
  uint64_t v22;
  char v23;
  float v24;
  _BOOL4 v25;
  float v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 *v48;
  __int16 v49;
  int v50;
  int v51;
  unsigned int v52;
  char v53;
  char v54;
  BOOL v57;
  int v58;
  char v59;
  int v60;
  float v61;
  BOOL v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  signed __int8 v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  _BOOL4 v87;
  char v88;
  BOOL v89;
  uint64_t v90;

  v14 = a7;
  v18 = *((double *)a1 + 20);
  v19 = vabdd_f64(a7, v18);
  v20 = COERCE_INT8X8_T(0.5);
  if (v19 <= 0.5)
  {
    LOBYTE(v21) = a1[148];
    if (!(_BYTE)v21)
      goto LABEL_10;
  }
  else
  {
    *((double *)a1 + 20) = v14;
    v21 = a1[148];
    if ((char)a1[148] != a1[726])
      a1[104] = sub_1B68B7C64((uint64_t)a1, (char)v21);
    v18 = v14;
    if (!v21)
      goto LABEL_10;
  }
  v22 = *((_QWORD *)a1 + 98);
  if (*(unsigned __int16 *)(v22 + 8 * (char)v21 + 4) != *(unsigned __int16 *)(v22 + 8 * a1[726] + 4)
    || (v19 = *(float *)(v22 + 8 * (char)v21), v18 > v19))
  {
    v23 = 0;
    goto LABEL_11;
  }
LABEL_10:
  v23 = 1;
LABEL_11:
  a1[727] = v23;
  if (!a1[760])
    sub_1B68B8514((uint64_t)a1, a5, v18, *(int8x8_t *)&v19, v20);
  v24 = *((float *)a1 + 4) + a9;
  *((float *)a1 + 4) = v24;
  if (a4)
  {
    v25 = 0;
    v26 = a6;
  }
  else
  {
    if (v24 >= a6)
    {
      v25 = 0;
      v26 = a6;
    }
    else
    {
      v27 = a1[148];
      v28 = roundf(a6) > v24;
      v25 = v27 != 32 && v28;
      if (v27 == 32)
        v26 = a6;
      else
        v26 = v24;
    }
    if (*((float *)a1 + 5) > a6 && !a1[727] && *((_DWORD *)a1 + 186))
      v26 = *((float *)a1 + 5);
  }
  if (a1[800])
  {
    v29 = *((_QWORD *)a1 + 96);
    v30 = *(unsigned __int8 *)(v29 + 413);
    v31 = v30 > 9;
    v32 = (1 << v30) & 0x294;
    if (v31 || v32 == 0)
    {
      if (*(_BYTE *)(v29 + 210))
        *(_QWORD *)(v29 + 1768) = *(_QWORD *)(v29 + 1776);
    }
    else
    {
      memset_pattern16((void *)(v29 + 1768), &unk_1B6918130, 0x28uLL);
    }
    *(_BYTE *)(v29 + 210) = 0;
  }
  v34 = a1[760];
  if (a1[760] && a3 >= 12)
  {
    if (*(_BYTE *)(a5 + 105))
    {
      v35 = *(unsigned __int8 *)(a5 + 45) + *(unsigned __int8 *)(a5 + 77) + 1;
    }
    else if (*(_BYTE *)(a5 + 106))
    {
      v35 = 3;
    }
    else if (*(_BYTE *)(a5 + 107))
    {
      v35 = 0;
    }
    else
    {
      v36 = *(_DWORD *)(a5 + 312);
      if ((v36 + 1) < 5)
        v35 = v36 + 1;
      else
        v35 = 5;
    }
    if (*(_BYTE *)(a5 + 104))
      goto LABEL_57;
  }
  else
  {
    v35 = *((_DWORD *)a1 + 202);
    if (v35 >= 5)
      v35 = 5;
  }
  v37 = v35 - 1;
  if (v35 <= 1)
  {
LABEL_57:
    v38 = 0;
    v40 = 0.0;
    goto LABEL_58;
  }
  v38 = 0;
  v39 = a3 - 1;
  v40 = 0.0;
  do
  {
    if ((v39 & 0x80000000) == 0)
    {
      v41 = *(float *)&a1[4 * (v39 % 0xA) + 24];
      if (v41 > 0.0)
      {
        v40 = v40 + v41;
        ++v38;
      }
    }
    --v39;
    --v37;
  }
  while (v37);
LABEL_58:
  v42 = (float)(v40 + a6) / (float)(v38 + 1);
  v43 = (char)a1[148];
  v44 = (char)a1[150];
  if (v43 >= v44)
    v45 = 2;
  else
    v45 = 4;
  v46 = *((_QWORD *)a1 + 98);
  v47 = v46 + 8 * (char)a1[148];
  v50 = *(__int16 *)(v47 + 4);
  v48 = (unsigned __int16 *)(v47 + 4);
  v49 = v50;
  v51 = (__int16)v48[1];
  if (v50 > v51)
    LOWORD(v51) = v49;
  v52 = a3 - 1;
  if (a3 < 1)
    goto LABEL_149;
  v53 = a1[812];
  if (!v53)
  {
LABEL_67:
    if (a1[760])
      goto LABEL_68;
LABEL_72:
    v54 = 0;
    goto LABEL_73;
  }
  if (*((_DWORD *)a1 + 207) == 5)
  {
    v53 = *((_DWORD *)a1 + 206) > 3;
    goto LABEL_67;
  }
  v53 = 0;
  if (!a1[760])
    goto LABEL_72;
LABEL_68:
  if (*(_BYTE *)(a5 + 105))
    v54 = 1;
  else
    v54 = v53;
LABEL_73:
  v57 = (__int16)v51 > 320 && a1[800] != 0 && v25;
  if (*((int *)a1 + 198) >= 2)
  {
    v58 = 1;
    if (a1[800] && (__int16)v51 >= 400)
    {
      if (*(double *)(*((_QWORD *)a1 + 96) + 1768) >= 22.0)
        v58 = 2;
      else
        v58 = 1;
    }
    a1[801] = 0;
    if (v43 < v44 && *((int *)a1 + 27) <= 5)
      a1[801] = 1;
    sub_1B68B8660((uint64_t)a1, v58);
    if (a1[760])
      *((_DWORD *)a1 + 198) = 0;
    goto LABEL_149;
  }
  if ((v54 & 1) == 0 && *((_DWORD *)a1 + 27) >= v45)
  {
    if (a1[105] && (char)a1[107] >= 1)
    {
      v59 = v42 >= (float)(*((float *)a1 + 4) + -1.0) || v57;
      if ((v59 & 1) != 0)
      {
        v60 = 1;
        if (!a1[800] || (__int16)v51 <= 399)
          goto LABEL_148;
LABEL_106:
        if (*(double *)(*((_QWORD *)a1 + 96) + 1768) >= 22.0)
        {
          v60 = 2;
          goto LABEL_148;
        }
LABEL_107:
        v60 = 1;
LABEL_148:
        sub_1B68B8660((uint64_t)a1, v60);
        v26 = *((float *)a1 + 4);
        goto LABEL_149;
      }
    }
    else if (v57)
    {
      if ((__int16)v51 < 400)
        goto LABEL_107;
      goto LABEL_106;
    }
  }
  v61 = *((float *)a1 + 5) + 0.4999;
  if (v42 <= v61 && v43 > a1[726] && *((int *)a1 + 27) > 1 || (v61 >= a6 ? (v62 = *a1 == 0) : (v62 = 1), !v62))
  {
    if (!a1[727])
    {
      v63 = v46 + 8 * (char)a1[148];
      v64 = *(__int16 *)(v63 - 4);
      v65 = *(__int16 *)(v63 - 2);
      if (v64 > v65)
        LOWORD(v65) = v64;
      if (!a1[800])
        goto LABEL_124;
      if ((__int16)v65 < 321)
        goto LABEL_124;
      v66 = *((_QWORD *)a1 + 96);
      v67 = dword_1B692D458[(__int16)v51 > 400];
      if (*(double *)(v66 + 1768) <= (double)v67)
      {
        v68 = 0;
        v69 = 0;
        v70 = v66 + 1768;
        do
        {
          v69 += dword_1B692D460[v68] * (*(double *)(v70 + 8 * v68) + 0.5);
          ++v68;
        }
        while (v68 != 5);
        if (v67 >= v69 >> 4)
        {
LABEL_124:
          if (v43 <= 1)
            v71 = 1;
          else
            v71 = (char)a1[148];
          v72 = v71 - 1;
          a1[802] = 1;
          if (*v48 == *(unsigned __int16 *)(v46 + 8 * v72 + 4))
          {
            if (v72 != v43)
            {
              *((_DWORD *)a1 + 27) = 0;
              *((_DWORD *)a1 + 202) = 0;
              a1[150] = v43;
              a1[148] = v72;
            }
          }
          else
          {
            if (v34)
              v73 = 3;
            else
              v73 = 5;
            if (*((_DWORD *)a1 + 27) >= v73)
            {
              v74 = 0;
              v75 = 0;
              if (v34)
                v76 = 3;
              else
                v76 = 5;
              do
              {
                if ((v52 & 0x80000000) == 0)
                {
                  v77 = *(_DWORD *)&a1[4 * (v52 % 0xA) + 64];
                  if (v77)
                  {
                    v74 += v77;
                    ++v75;
                  }
                }
                --v52;
                --v76;
              }
              while (v76);
              v78 = *((_QWORD *)a1 + 87);
              v79 = (char)a1[104];
              v80 = v14;
              if (*(_WORD *)(v78 + 4 * v79 + 2))
                v80 = (double)*(__int16 *)(v78 + 4 * v79) * v14 / (double)*(__int16 *)(v78 + 4 * v79 + 2);
              if (v80 >= 1.0e-20 && a8 / v80 * 0.7 > (double)(v74 / v75))
              {
                *((_DWORD *)a1 + 27) = 0;
                *((_DWORD *)a1 + 202) = 0;
                a1[150] = v43;
                a1[148] = v72;
                *(_BYTE *)(*((_QWORD *)a1 + 96) + 210) = *(unsigned __int16 *)(v46 + 8 * v72 + 4) != *v48;
                *(_BYTE *)(*((_QWORD *)a1 + 96) + 211) = *(__int16 *)(*((_QWORD *)a1 + 98) + 8 * (char)a1[148] + 4) > *(__int16 *)(*((_QWORD *)a1 + 98) + 8 * (char)a1[150] + 4);
                if (*(_BYTE *)(*((_QWORD *)a1 + 96) + 211))
                  *(_DWORD *)(a5 + 376) = 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_149:
  if (a2)
  {
    v81 = a1[149];
    a1[148] = v81;
  }
  else
  {
    v81 = a1[148];
  }
  v82 = sub_1B68B7C64((uint64_t)a1, v81);
  v83 = a1[104];
  if (v83 != v82)
  {
    *((_DWORD *)a1 + 43) = 0;
    a1[168] = v83;
    a1[104] = v82;
  }
  if (a1[740])
  {
    if (a1[729])
    {
      if (a8 >= 53016.0 || *((double *)a1 + 17) >= 3.0)
        a1[1] = 0;
      else
        a1[1] = 3;
    }
    else
    {
      v84 = *a1;
      if (v84 != 3 && *a1)
      {
        v85 = *((_DWORD *)a1 + 183);
      }
      else
      {
        v85 = 0;
        if (a8 < 53016.0 && *((double *)a1 + 17) < 3.0)
          v85 = *((_DWORD *)a1 + 186) != 0;
      }
      if (v85 == *((_DWORD *)a1 + 183))
      {
        v86 = *((_DWORD *)a1 + 184) + 1;
        v87 = v86 > 0xA;
      }
      else
      {
        v86 = 0;
        v87 = 0;
      }
      *((_DWORD *)a1 + 184) = v86;
      *((_DWORD *)a1 + 183) = v85;
      if (v84 == 3 || v87)
      {
        *((_DWORD *)a1 + 184) = 0;
        if (v85)
        {
          if (v84 == 3)
            v88 = 3;
          else
            v88 = v84 + 1;
        }
        else
        {
          v89 = v84 != 0;
          v88 = v84 - 1;
          if (!v89)
            v88 = 0;
        }
        a1[1] = v88;
      }
      if (a1[741])
      {
        a1[1] = 3;
        *(_QWORD *)(a1 + 732) = 0;
      }
    }
    if (a2)
      a1[1] = a1[2];
  }
  v90 = *((_QWORD *)a1 + 87);
  if (*(_WORD *)(v90 + 4 * v82 + 2))
    v14 = (double)*(__int16 *)(v90 + 4 * v82) * v14 / (double)*(__int16 *)(v90 + 4 * v82 + 2);
  *((double *)a1 + 17) = v14;
  a1[105] = v25;
  a1[107] = 0;
  *((float *)a1 + 36) = v42;
  *a1 = a1[1];
  return v26;
}

uint64_t sub_1B68B8514(uint64_t result, uint64_t a2, double a3, int8x8_t a4, int8x8_t a5)
{
  int32x2_t v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int8x8_t v14;

  if (*(_BYTE *)result)
  {
    v5 = (int32x2_t)0x41C8000041E80000;
  }
  else if (*(_BYTE *)(result + 760))
  {
    if (*(_DWORD *)(result + 744))
    {
      if (!*(_BYTE *)(a2 + 104))
      {
        v5 = (int32x2_t)0x41E00000420C0000;
        goto LABEL_3;
      }
    }
    else
    {
      if (*(_BYTE *)(result + 812))
      {
        v5 = vrev64_s32((int32x2_t)vcvt_f32_s32(qword_1B6931B78[6 * *(int *)(result + 828) + *(int *)(result + 824)]));
        goto LABEL_3;
      }
      if (!*(_BYTE *)(a2 + 104))
      {
        v5 = (int32x2_t)0x42180000422C0000;
        goto LABEL_3;
      }
    }
    v5 = (int32x2_t)0x4220000042340000;
  }
  else
  {
    v6 = *(_DWORD *)(result + 748);
    v7 = *(_DWORD *)(result + 752);
    v8 = v6 == v7 && v7 * v6 <= 230400;
    if (v8 && *(float *)(result + 756) <= 30.0)
    {
      v5 = (int32x2_t)0x420C000042200000;
    }
    else
    {
      if (*(_DWORD *)(result + 744))
      {
        if (!*(_BYTE *)(result + 800))
          goto LABEL_20;
        v9 = *(_QWORD *)(result + 784);
        v10 = *(char *)(result + 148);
        v11 = v9 + 8 * v10;
        v12 = *(__int16 *)(v11 + 4);
        v13 = *(__int16 *)(v11 + 6);
        if (v12 > v13)
          v13 = v12;
        v14 = (int8x8_t)0x41D0000042040000;
        if (v13 <= 320)
        {
          a5.i32[0] = 14.5;
          if (*(float *)(v9 + 8 * v10) <= 14.5)
LABEL_20:
            v14 = (int8x8_t)0x41E0000042040000;
        }
      }
      else
      {
        v14 = (int8x8_t)0x41E8000042100000;
      }
      a4.i32[0] = 0;
      a5.i8[0] = *(_BYTE *)(result + 729);
      v5 = (int32x2_t)vbsl_s8(vdup_lane_s8(vceq_s8(a5, a4), 0), v14, (int8x8_t)0x41E8000042080000);
    }
  }
LABEL_3:
  *(int32x2_t *)(result + 16) = v5;
  return result;
}

uint64_t sub_1B68B8660(uint64_t result, int a2)
{
  int v2;
  int v3;

  v2 = *(char *)(result + 148);
  v3 = v2 + a2;
  if (v2 + a2 >= *(_DWORD *)(result + 152))
    v3 = *(_DWORD *)(result + 152);
  if (v3 != v2)
  {
    *(_BYTE *)(result + 802) = 0;
    *(_DWORD *)(result + 108) = 0;
    *(_DWORD *)(result + 808) = 0;
    *(_BYTE *)(result + 150) = v2;
    *(_BYTE *)(result + 148) = v3;
    *(_BYTE *)(*(_QWORD *)(result + 768) + 210) = *(unsigned __int16 *)(*(_QWORD *)(result + 784) + 8 * (char)v3 + 4) != *(unsigned __int16 *)(*(_QWORD *)(result + 784) + 8 * v2 + 4);
  }
  return result;
}

uint64_t sub_1B68B86C0(uint64_t result, int a2)
{
  int v2;
  int v3;
  int v4;
  float v5;
  unsigned int v6;
  float v7;
  float v8;
  _BYTE *v9;
  int v10;

  v2 = 0;
  v3 = 0;
  v4 = a2 - 1;
  v5 = 0.0;
  v6 = a2 - 1;
  do
  {
    if (v4 + v2 >= 0)
    {
      v7 = *(float *)(result + 4 * (v2 + v4 - 10 * (v6 / 0xA)) + 24);
      if (v7 > 0.0)
      {
        v5 = v5 + v7;
        ++v3;
      }
    }
    --v2;
    --v6;
  }
  while (v2 != -4);
  if (v3 < 1)
  {
    v10 = *(unsigned __int8 *)(result + 730);
    if (!*(_BYTE *)(result + 730))
      return result;
    v9 = (_BYTE *)(result + 730);
    v8 = 0.0;
  }
  else
  {
    v8 = v5 / (float)v3;
    v9 = (_BYTE *)(result + 730);
    v10 = *(unsigned __int8 *)(result + 730);
    if (!*(_BYTE *)(result + 730))
    {
      if (v8 > 26.0 && *(float *)(*(_QWORD *)(result + 784) + 8 * *(char *)(result + 148)) < 5.0)
        *v9 = 1;
      return result;
    }
  }
  if (v10 == 1 && v8 < 30.0 && *(float *)(*(_QWORD *)(result + 784) + 8 * *(char *)(result + 148)) > 10.0)
    *v9 = 0;
  return result;
}

int32x2_t sub_1B68B87B8(int32x2_t *a1, _QWORD *a2, int a3, int a4)
{
  int32x2_t *v7;
  int32x2_t *v8;
  int32x2_t v9;
  _QWORD *v10;
  const void *v11;
  _QWORD *v12;
  const void *v13;
  int32x2_t result;
  _QWORD *v15;
  const void *v16;
  _QWORD *v17;
  const void *v18;
  uint64_t v19;
  _QWORD *v20;
  const void *v21;
  _QWORD *v22;
  const void *v23;
  __int32 v24;
  _QWORD *v25;
  const void *v26;
  _QWORD *v27;
  const void *v28;
  uint64_t v29;
  _QWORD *v30;
  const void *v31;
  _QWORD *v32;
  const void *v33;
  __int32 v34;

  v7 = a1 + 607;
  if (a1[607].i8[0])
  {
    if (a3)
    {
      if (a4)
      {
        v8 = a1 + 609;
        v9 = a1[a1[607].i32[1] + 609];
      }
      else
      {
        a1[612].i8[0] = 1;
        v24 = a1[607].i32[1];
        result = a1[608];
        *(int32x2_t *)((char *)a1 + 4860) = result;
        a1[608].i32[1] = v24;
        v8 = a1 + 609;
        v9 = a1[result.i32[0] + 609];
      }
      a2[22] = v9;
      a2[21] = v8[a1[608].i32[1]];
      return result;
    }
    if (a4)
    {
      a2[22] = a1[a1[607].i32[1] + 609];
      a2[21] = a1[a1[608].i32[1] + 609];
LABEL_18:
      result = vrev64_s32(a1[608]);
      a1[608] = result;
      return result;
    }
    a1[612].i8[0] = 1;
    a2[22] = a1[a1[608].i32[0] + 609];
    a2[21] = a1[a1[608].i32[1] + 609];
LABEL_29:
    v34 = a1[607].i32[1];
    result = a1[608];
    *(int32x2_t *)((char *)v7 + 4) = result;
    a1[608].i32[1] = v34;
    return result;
  }
  if (!a3)
  {
    if (a4)
    {
      v20 = &a2[a1[608].i32[0]];
      v23 = (const void *)v20[15];
      v22 = v20 + 15;
      v21 = v23;
      if (v23)
      {
        CFRelease(v21);
        *v22 = 0;
      }
      a2[19] = a2[a1[607].i32[1] + 15];
      a2[18] = a2[a1[608].i32[1] + 15];
      a2[20] = 0;
      goto LABEL_18;
    }
    v30 = &a2[a1[607].i32[1]];
    v33 = (const void *)v30[15];
    v32 = v30 + 15;
    v31 = v33;
    if (v33)
    {
      CFRelease(v31);
      *v32 = 0;
    }
    a2[19] = a2[a1[608].i32[0] + 15];
    a2[18] = a2[a1[608].i32[1] + 15];
    goto LABEL_28;
  }
  v10 = &a2[a1[608].i32[1]];
  v13 = (const void *)v10[15];
  v12 = v10 + 15;
  v11 = v13;
  if (v13)
  {
    CFRelease(v11);
    *v12 = 0;
  }
  if (!a4)
  {
    v25 = &a2[v7->i32[1]];
    v28 = (const void *)v25[15];
    v27 = v25 + 15;
    v26 = v28;
    if (v28)
    {
      CFRelease(v26);
      *v27 = 0;
    }
    v29 = a2[a1[608].i32[0] + 15];
    a2[18] = 0;
    a2[19] = v29;
LABEL_28:
    a2[20] = 0;
    goto LABEL_29;
  }
  v15 = &a2[a1[608].i32[0]];
  v18 = (const void *)v15[15];
  v17 = v15 + 15;
  v16 = v18;
  if (v18)
  {
    CFRelease(v16);
    *v17 = 0;
  }
  v19 = a2[a1[607].i32[1] + 15];
  a2[18] = 0;
  a2[19] = v19;
  a2[20] = 0;
  return result;
}

uint64_t sub_1B68B89B8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  double v8;
  int8x8_t v9;
  int8x8_t v10;

  if (a6)
    (*(void (**)(unint64_t))(a2 + 424))(a2);
  sub_1B68C2AE4(a2);
  return sub_1B68B8514(a1, a2, v8, v9, v10);
}

double sub_1B68B89F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  pthread_mutex_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  if (*(_DWORD *)(a1 + 56))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(a1 + 48);
      v4 = *(_QWORD *)(v3 + 8 * v2);
      if (v4)
      {
        MEMORY[0x1BCC9811C](v4, 0x1000C8077774924);
        v3 = *(_QWORD *)(a1 + 48);
      }
      *(_QWORD *)(v3 + 8 * v2++) = 0;
    }
    while (v2 != *(_DWORD *)(a1 + 56));
  }
  v5 = *(pthread_mutex_t **)a1;
  if (*(_QWORD *)a1)
    pthread_mutex_destroy(*(pthread_mutex_t **)a1);
  free(v5);
  v6 = *(void **)(a1 + 8);
  if (v6)
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 8));
  free(v6);
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    MEMORY[0x1BCC9811C](v7, 0x80C80B8603338);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1BCC9811C](v8, 0x80C80B8603338);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    MEMORY[0x1BCC9811C](v9, 0x80C80B8603338);
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

pthread_mutex_t *sub_1B68B8AE8(uint64_t a1, uint64_t a2, int a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  pthread_mutex_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  pthread_mutex_t *result;

  v6 = *(pthread_mutex_t **)a1;
  if (v6)
    pthread_mutex_lock(v6);
  v7 = a3;
  if (a3 >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(unsigned int *)(a1 + 24);
      v10 = *(_QWORD *)(a1 + 16);
      if ((_DWORD)v9)
      {
        v11 = 0;
        while (*(_QWORD *)(a2 + 8 * v8) != *(_QWORD *)(v10 + 8 * v11))
        {
          if (v9 == ++v11)
          {
            LODWORD(v11) = *(_DWORD *)(a1 + 24);
            break;
          }
        }
      }
      else
      {
        LODWORD(v11) = 0;
      }
      v12 = v9 - 1;
      *(_DWORD *)(a1 + 24) = v12;
      *(_QWORD *)(v10 + 8 * v11) = *(_QWORD *)(v10 + 8 * v12);
      ++v8;
    }
    while (v8 != a3);
  }
  if (*(_QWORD *)a1)
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  v13 = *(pthread_mutex_t **)(a1 + 8);
  if (v13)
    pthread_mutex_lock(v13);
  if (a3 >= 1)
  {
    v14 = 0;
    while (1)
    {
      v15 = *(_QWORD *)(a2 + 8 * v14);
      v16 = *(_DWORD *)(a1 + 40);
      if (v16 == *(_DWORD *)(a1 + 44))
        break;
      v17 = *(_QWORD *)(a1 + 32);
LABEL_27:
      *(_DWORD *)(a1 + 40) = v16 + 1;
      *(_QWORD *)(v17 + 8 * v16) = v15;
      if (++v14 == v7)
        goto LABEL_30;
    }
    *(_DWORD *)(a1 + 44) = 2 * v16 + 2;
    v17 = operator new[]();
    v18 = *(unsigned int *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)v18)
    {
      v20 = *(uint64_t **)(a1 + 32);
      v21 = (_QWORD *)v17;
      do
      {
        v22 = *v20++;
        *v21++ = v22;
        --v18;
      }
      while (v18);
    }
    else if (!v19)
    {
      v16 = 0;
      goto LABEL_26;
    }
    MEMORY[0x1BCC9811C](v19, 0x80C80B8603338);
    v16 = *(_DWORD *)(a1 + 40);
LABEL_26:
    *(_QWORD *)(a1 + 32) = v17;
    goto LABEL_27;
  }
LABEL_30:
  result = *(pthread_mutex_t **)(a1 + 8);
  if (result)
    return (pthread_mutex_t *)pthread_mutex_unlock(result);
  return result;
}

double sub_1B68B8C80(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  double result;

  if (*(_DWORD *)(a1 + 8))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v2);
      sub_1B68B8AE8(*(_QWORD *)v3, v3 + 16, *(_DWORD *)(v3 + 2064));
      result = 0.0;
      *(_QWORD *)(v3 + 2064) = 0;
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 8));
  }
  return result;
}

uint64_t sub_1B68B8CE0(int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;

  if (!a2)
    return 4294958327;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    v5 = a2 + 216;
    v6 = (uint64_t *)(a2 + 216);
    v7 = *(unsigned int *)(a2 + 12);
    do
    {
      v8 = *v6;
      if (!*v6)
        return 4294958327;
      if (a1 || *(_BYTE *)(v8 + 1399) && !*(_BYTE *)(v8 + 1394))
      {
        v9 = *(void **)(v8 + 5016);
        if (v9)
        {
          free(v9);
          *(_QWORD *)(v8 + 5016) = 0;
        }
        *(_BYTE *)(v8 + 2) = 0;
        *v6 = 0;
      }
      ++v6;
      --v7;
    }
    while (v7);
    v11 = 0;
    v12 = (_QWORD *)(a2 + 216);
    do
    {
      if (*v12)
        *(_QWORD *)(v5 + 8 * v11++) = *v12;
      ++v12;
      --v3;
    }
    while (v3);
  }
  else
  {
    v11 = 0;
  }
  result = 0;
  *(_DWORD *)(a2 + 12) = v11;
  return result;
}

uint64_t sub_1B68B8DBC(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = -2147483647;
  v5 = -1;
  do
  {
    v6 = *(_QWORD *)(a3 + 8 * v3);
    if (!v6)
      break;
    if ((*(_BYTE *)(v6 + 1398) || *(_BYTE *)(v6 + 1402)) && *(_BYTE *)(v6 + 1394) && !*(_BYTE *)(v6 + 98))
    {
      v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 > v4)
      {
        v4 = v7;
        v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1)
    return 0;
  else
    return *(_QWORD *)(a3 + 8 * v5);
}

uint64_t sub_1B68B8E40(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = -1;
  v5 = 0x7FFFFFFF;
  do
  {
    v6 = *(_QWORD *)(a3 + 8 * v3);
    if (!v6)
      break;
    if (*(_BYTE *)(v6 + 1398) && *(_BYTE *)(v6 + 1394) && *(_BYTE *)(v6 + 1356))
    {
      v7 = *(_DWORD *)(v6 + 1308);
      if (v7 > a1 && v7 < v5)
      {
        v4 = v3;
        v5 = v7;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v4 == -1)
    return 0;
  else
    return *(_QWORD *)(a3 + 8 * v4);
}

uint64_t sub_1B68B8EBC(int a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v3;
  _BYTE *v4;

  if (a1 < 1)
    return 0;
  LODWORD(v3) = a1;
  result = 0;
  v3 = v3;
  do
  {
    v4 = (_BYTE *)*a2;
    if (!*a2)
      break;
    if (v4[1394] && v4[1398] && v4[1356])
    {
      if (v4[12])
        result = (result + 1);
      else
        result = result;
    }
    ++a2;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t sub_1B68B8F14(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = 0x7FFFFFFF;
  v5 = -1;
  do
  {
    v6 = *(_QWORD *)(a3 + 8 * v3);
    if (!v6)
      break;
    if (*(_BYTE *)(v6 + 1394)
      && *(_BYTE *)(v6 + 1398)
      && *(_BYTE *)(v6 + 1356)
      && *(_BYTE *)(v6 + 25)
      && !*(_BYTE *)(v6 + 13)
      && !*(_BYTE *)(v6 + 14))
    {
      v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 < v4)
      {
        v4 = v7;
        v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1)
    return 0;
  else
    return *(_QWORD *)(a3 + 8 * v5);
}

uint64_t sub_1B68B8FA8(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = -2147483647;
  v5 = -1;
  do
  {
    v6 = *(_QWORD *)(a3 + 8 * v3);
    if (!v6)
      break;
    if (*(_BYTE *)(v6 + 1394)
      && *(_BYTE *)(v6 + 1398)
      && *(_BYTE *)(v6 + 1356)
      && *(_BYTE *)(v6 + 25)
      && !*(_BYTE *)(v6 + 13)
      && !*(_BYTE *)(v6 + 14))
    {
      v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 > v4)
      {
        v4 = v7;
        v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1)
    return 0;
  else
    return *(_QWORD *)(a3 + 8 * v5);
}

uint64_t sub_1B68B903C(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = -2147483647;
  v5 = -1;
  do
  {
    v6 = *(_QWORD *)(a3 + 8 * v3);
    if (!v6)
      break;
    if (*(_BYTE *)(v6 + 1394)
      && *(_BYTE *)(v6 + 1398)
      && *(_BYTE *)(v6 + 1356)
      && !*(_BYTE *)(v6 + 14)
      && *(_BYTE *)(v6 + 25))
    {
      v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 > v4)
      {
        v4 = v7;
        v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1)
    return 0;
  else
    return *(_QWORD *)(a3 + 8 * v5);
}

uint64_t sub_1B68B90C8(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = 0x7FFFFFFF;
  v5 = -1;
  do
  {
    v6 = *(_QWORD *)(a3 + 8 * v3);
    if (!v6)
      break;
    if (*(_BYTE *)(v6 + 1394)
      && *(_BYTE *)(v6 + 1398)
      && *(_BYTE *)(v6 + 1356)
      && !*(_BYTE *)(v6 + 14)
      && !*(_BYTE *)(v6 + 25))
    {
      v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 < v4)
      {
        v4 = v7;
        v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1)
    return 0;
  else
    return *(_QWORD *)(a3 + 8 * v5);
}

uint64_t sub_1B68B9154(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = -2147483647;
  v5 = -1;
  do
  {
    v6 = *(_QWORD *)(a3 + 8 * v3);
    if (*(_BYTE *)(v6 + 1394) && *(_BYTE *)(v6 + 1398) && *(_BYTE *)(v6 + 1356) && !*(_BYTE *)(v6 + 14))
    {
      v7 = *(_DWORD *)(v6 + 1288);
      if (v7 < a1 && v7 > v4)
      {
        v4 = v7;
        v5 = v3;
      }
    }
    ++v3;
  }
  while (a2 != v3);
  if (v5 == -1)
    return 0;
  else
    return *(_QWORD *)(a3 + 8 * v5);
}

uint64_t sub_1B68B91D4(int32x2_t *a1)
{
  __int32 v1;
  unsigned int v2;
  int32x2_t v3;
  int32x2_t v4;
  __int32 v5;
  __int32 v6;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;

  if (a1[169].i8[2])
  {
    a1[12].i8[0] = 0;
    a1[169].i8[2] = 0;
    a1[12].i8[5] = 0;
    v1 = a1[25].i32[0];
    if (a1[12].i8[1])
    {
      v1 *= 2;
      v2 = 2 * a1[25].i32[1];
      v3 = vadd_s32(a1[27], a1[27]);
    }
    else
    {
      v2 = a1[25].u32[1];
      v3 = a1[27];
    }
    a1[24].i32[0] = v1;
    a1[24].i32[1] = v2;
    a1[26] = v3;
    v4 = a1[168];
    if (!*(_QWORD *)&v4)
      return 4294958327;
    if (a1[12].i8[6])
    {
      v5 = *(_DWORD *)(*(_QWORD *)&v4 + 1292);
      a1[161].i32[1] = v5;
      v6 = a1[162].i32[0];
    }
    else
    {
      v6 = *(_DWORD *)(*(_QWORD *)&v4 + 1296);
      a1[162].i32[0] = v6;
      v5 = a1[161].i32[1];
    }
    if (v6 < v5)
      v5 = v6;
    a1[161].i32[0] = v5;
    a1[75] = vadd_s32(vdup_n_s32(v2), (int32x2_t)0xFFFFFFFF00000002);
    v8 = a1[61];
    if (v8)
    {
      *(_DWORD *)(*(_QWORD *)&v8 + 64) = 1;
      *(_QWORD *)(*(_QWORD *)&v8 + 56) = 0x100000001;
      *(_OWORD *)(*(_QWORD *)&v8 + 152) = xmmword_1B6917C40;
    }
    v9 = a1[62];
    if (v9)
    {
      *(_DWORD *)(*(_QWORD *)&v9 + 64) = 1;
      *(_QWORD *)(*(_QWORD *)&v9 + 56) = 0x100000001;
      *(_OWORD *)(*(_QWORD *)&v9 + 152) = xmmword_1B6917C40;
    }
    v10 = a1[63];
    if (v10)
    {
      *(_DWORD *)(*(_QWORD *)&v10 + 64) = 1;
      *(_QWORD *)(*(_QWORD *)&v10 + 56) = 0x100000001;
      *(_OWORD *)(*(_QWORD *)&v10 + 152) = xmmword_1B6917C40;
    }
    sub_1B68FDDDC((uint64_t)&a1[12], a1[31].i32[0]);
  }
  return 0;
}

uint64_t sub_1B68B92F8(int a1, int *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t result;

  if (a3 < 1)
    goto LABEL_16;
  v5 = 0;
  v6 = -2147483647;
  v7 = -1;
  do
  {
    v8 = *(_QWORD *)(a4 + 8 * v5);
    if (!v8)
      break;
    if (v8 != a5 && *(_BYTE *)(v8 + 1394))
    {
      if (*(_BYTE *)(v8 + 1356))
        v9 = 0;
      else
        v9 = *(unsigned __int8 *)(v8 + 101) == a1;
      if (v9)
      {
        v10 = *(_DWORD *)(v8 + 1288);
        if (v10 < *a2 && v10 > v6)
        {
          v6 = v10;
          v7 = v5;
        }
      }
    }
    ++v5;
  }
  while (a3 != v5);
  if (v7 == -1)
  {
LABEL_16:
    result = 0;
    *a2 = -2147483647;
  }
  else
  {
    *a2 = v6;
    return *(_QWORD *)(a4 + 8 * v7);
  }
  return result;
}

uint64_t sub_1B68B9390(int a1, int *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t result;

  if (a3 < 1)
    goto LABEL_16;
  v4 = 0;
  v5 = 0x7FFFFFFF;
  v6 = -1;
  do
  {
    v7 = *(_QWORD *)(a4 + 8 * v4);
    if (!v7)
      break;
    if (*(_BYTE *)(v7 + 1398) && *(_BYTE *)(v7 + 1394))
    {
      if (*(_BYTE *)(v7 + 1356))
        v8 = 0;
      else
        v8 = *(unsigned __int8 *)(v7 + 101) == a1;
      if (v8)
      {
        v9 = *(_DWORD *)(v7 + 1288);
        if (v9 > *a2 && v9 < v5)
        {
          v5 = v9;
          v6 = v4;
        }
      }
    }
    ++v4;
  }
  while (a3 != v4);
  if (v6 == -1)
  {
LABEL_16:
    result = 0;
    *a2 = 0x7FFFFFFF;
  }
  else
  {
    *a2 = v5;
    return *(_QWORD *)(a4 + 8 * v6);
  }
  return result;
}

uint64_t sub_1B68B9428(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(result + 1354))
    return result;
  *(_BYTE *)(result + 96) = 1;
  *(_BYTE *)(result + 1354) = 1;
  v1 = *(_DWORD *)(result + 200);
  if (!*(_BYTE *)(result + 97))
  {
    v2 = *(_DWORD *)(result + 204) >> 1;
    *(_DWORD *)(result + 192) = v1 >> 1;
    *(_DWORD *)(result + 196) = v2;
    *(uint32x2_t *)(result + 208) = vshr_n_u32(*(uint32x2_t *)(result + 216), 1uLL);
    if (*(_BYTE *)(result + 102))
      goto LABEL_6;
LABEL_8:
    v3 = (_DWORD *)(result + 1292);
    goto LABEL_9;
  }
  v2 = *(_DWORD *)(result + 204);
  *(_DWORD *)(result + 192) = v1;
  *(_DWORD *)(result + 196) = v2;
  *(_QWORD *)(result + 208) = *(_QWORD *)(result + 216);
  if (!*(_BYTE *)(result + 102))
  {
    *(_DWORD *)(result + 1296) = 0x7FFFFFFF;
    goto LABEL_8;
  }
  *(_DWORD *)(result + 1292) = 0x7FFFFFFF;
LABEL_6:
  v3 = (_DWORD *)(result + 1296);
LABEL_9:
  *(_DWORD *)(result + 1288) = *v3;
  *(int32x2_t *)(result + 600) = vadd_s32(vdup_n_s32(v2), (int32x2_t)0xFFFFFFFF00000002);
  v4 = *(_QWORD *)(result + 488);
  if (v4)
  {
    *(_DWORD *)(v4 + 64) = 1;
    *(_QWORD *)(v4 + 56) = 0x100000001;
    *(_OWORD *)(v4 + 152) = xmmword_1B6917C40;
  }
  v5 = *(_QWORD *)(result + 496);
  if (v5)
  {
    *(_DWORD *)(v5 + 64) = 1;
    *(_QWORD *)(v5 + 56) = 0x100000001;
    *(_OWORD *)(v5 + 152) = xmmword_1B6917C40;
  }
  v6 = *(_QWORD *)(result + 504);
  if (v6)
  {
    *(_DWORD *)(v6 + 64) = 1;
    *(_QWORD *)(v6 + 56) = 0x100000001;
    *(_OWORD *)(v6 + 152) = xmmword_1B6917C40;
  }
  return sub_1B68FDDDC(result + 96, *(_DWORD *)(result + 248));
}

uint64_t sub_1B68B9538(int a1, int *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t result;

  if (a3 < 1)
    goto LABEL_16;
  v4 = 0;
  v5 = -2147483647;
  v6 = -1;
  do
  {
    v7 = *(_QWORD *)(a4 + 8 * v4);
    if (!v7)
      break;
    if (*(_BYTE *)(v7 + 1398) && *(_BYTE *)(v7 + 1394))
    {
      if (*(_BYTE *)(v7 + 1356))
        v8 = 0;
      else
        v8 = *(unsigned __int8 *)(v7 + 101) == a1;
      if (v8)
      {
        v9 = *(_DWORD *)(v7 + 1300);
        if (v9 < *a2 && v9 > v5)
        {
          v5 = v9;
          v6 = v4;
        }
      }
    }
    ++v4;
  }
  while (a3 != v4);
  if (v6 == -1)
  {
LABEL_16:
    result = 0;
    *a2 = -2147483647;
  }
  else
  {
    *a2 = v5;
    return *(_QWORD *)(a4 + 8 * v6);
  }
  return result;
}

uint64_t sub_1B68B95D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 22824);
  if (v2 != *(_QWORD *)(a1 + 22816))
  {
    if (v2 && (v3 = *(unsigned int *)(v2 + 12), (_DWORD)v3))
    {
      v4 = v2 + 216;
      while (1)
      {
        v5 = *(_BYTE *)(*(_QWORD *)v4 + 1399) != 0;
        if (!*(_BYTE *)(*(_QWORD *)v4 + 1399))
          break;
        v4 += 8;
        if (!--v3)
          goto LABEL_7;
      }
      v6 = 0;
    }
    else
    {
LABEL_7:
      v5 = 1;
      v6 = 1;
    }
    if (*(_QWORD *)(a1 + 24544))
    {
      sub_1B68B9708(a1, v2);
    }
    else
    {
      result = sub_1B68B99D0(*(_DWORD *)(a1 + 8), v2);
      if ((_DWORD)result)
        return result;
    }
    result = sub_1B68B8CE0(v6, *(_QWORD *)(a1 + 22824));
    if ((_DWORD)result)
      return result;
    if (v5)
    {
      v8 = a1 + 16;
      v9 = *(_QWORD *)(a1 + 22824);
      if (v9 && v9 != a1 + 22056)
      {
        v10 = a1 - 744;
        v11 = 1;
        while (1)
        {
          v10 += 760;
          if (v10 == v9)
            break;
          if (++v11 == 30)
          {
            *(_QWORD *)(a1 + 22824) = 0;
            return 4294958327;
          }
        }
        v8 += 760 * v11;
      }
      *(_QWORD *)(a1 + 22824) = v8;
    }
  }
  v12 = *(_QWORD *)(a1 + 22816);
  if (*(_QWORD *)(a1 + 24544))
  {
    sub_1B68B9708(a1, v12);
    return sub_1B68B8CE0(0, *(_QWORD *)(a1 + 22816));
  }
  result = sub_1B68B99D0(*(_DWORD *)(a1 + 8), v12);
  if (!(_DWORD)result)
    return sub_1B68B8CE0(0, *(_QWORD *)(a1 + 22816));
  return result;
}

_DWORD *sub_1B68B9708(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = *(_DWORD **)(a1 + 24544);
  if (result)
  {
    v5 = (uint64_t *)(a2 + 216);
    while (2)
    {
      switch(*result)
      {
        case 0:
          do
          {
            *(_QWORD *)(a1 + 24544) = *((_QWORD *)result + 3);
            free(result);
            result = *(_DWORD **)(a1 + 24544);
          }
          while (result);
          return result;
        case 1:
          v14 = *(unsigned int *)(a2 + 12);
          if ((int)v14 >= 1)
          {
            v15 = v5;
            do
            {
              v16 = *v15;
              if (*(_DWORD *)(*v15 + 1300) == result[5])
              {
                if (*(_BYTE *)(v16 + 1398))
                {
                  if (!*(_BYTE *)(v16 + 1356))
                  {
                    *(_BYTE *)(v16 + 1394) = 0;
                    *(_BYTE *)(v16 + 1399) = 1;
                    v17 = *(_BYTE **)(v16 + 1344);
                    if (v17)
                    {
                      if (v17[100])
                      {
                        v17[1394] = 0;
                        v17[1399] = 1;
                      }
                    }
                  }
                }
              }
              ++v15;
              --v14;
            }
            while (v14);
          }
          goto LABEL_49;
        case 2:
          v18 = *(unsigned int *)(a2 + 12);
          if ((int)v18 >= 1)
          {
            v19 = v5;
            do
            {
              v20 = *v19;
              if (*(_DWORD *)(*v19 + 1308) == result[2])
              {
                if (*(_BYTE *)(v20 + 1398))
                {
                  if (*(_BYTE *)(v20 + 1356))
                  {
                    *(_BYTE *)(v20 + 1394) = 0;
                    *(_BYTE *)(v20 + 1356) = 0;
                    *(_BYTE *)(v20 + 12) = 0;
                    *(_BYTE *)(v20 + 1399) = 1;
                    v21 = *(_BYTE **)(v20 + 1344);
                    if (v21)
                    {
                      if (v21[100])
                      {
                        v21[1394] = 0;
                        v21[1399] = 1;
                        v21[1356] = 0;
                        v21[12] = 0;
                      }
                    }
                  }
                }
              }
              ++v19;
              --v18;
            }
            while (v18);
          }
          goto LABEL_49;
        case 3:
        case 6:
          v6 = *(unsigned int *)(a2 + 12);
          v7 = v5;
          v8 = v6;
          if ((int)v6 >= 1)
          {
            do
            {
              v9 = *v7;
              if (*(_BYTE *)(*v7 + 1398))
              {
                if (*(_BYTE *)(v9 + 1356))
                {
                  if (*(_DWORD *)(v9 + 1308) == result[3])
                  {
                    *(_BYTE *)(v9 + 1394) = 0;
                    *(_BYTE *)(v9 + 1356) = 0;
                    *(_BYTE *)(v9 + 12) = 0;
                    *(_BYTE *)(v9 + 1399) = 1;
                    v10 = *(_BYTE **)(v9 + 1344);
                    if (v10)
                    {
                      if (v10[100])
                      {
                        v10[1394] = 0;
                        v10[1399] = 1;
                        v10[1356] = 0;
                        v10[12] = 0;
                      }
                    }
                  }
                }
              }
              ++v7;
              --v8;
            }
            while (v8);
            v11 = v5;
            do
            {
              v12 = *v11;
              if (*(_DWORD *)(*v11 + 1300) == result[5])
              {
                if (*(_BYTE *)(v12 + 1398))
                {
                  *(_BYTE *)(v12 + 1356) = 1;
                  *(_DWORD *)(v12 + 1308) = result[3];
                  v13 = *(_QWORD *)(v12 + 1344);
                  if (v13)
                  {
                    if (*(_BYTE *)(v13 + 100))
                    {
                      *(_BYTE *)(v13 + 1356) = 1;
                      *(_DWORD *)(v13 + 1308) = result[3];
                    }
                  }
                }
              }
              ++v11;
              --v6;
            }
            while (v6);
          }
          goto LABEL_49;
        case 4:
          *(_DWORD *)(a2 + 40) = result[4] - 1;
          if (*(_DWORD *)(a2 + 12))
          {
            v22 = 0;
            do
            {
              v23 = v5[v22];
              if (*(_BYTE *)(v23 + 1398))
              {
                if (*(_BYTE *)(v23 + 1356))
                {
                  if (*(_DWORD *)(v23 + 1308) > *(_DWORD *)(a2 + 40))
                  {
                    *(_BYTE *)(v23 + 1394) = 0;
                    *(_BYTE *)(v5[v22] + 1356) = 0;
                    *(_DWORD *)(v5[v22] + 1308) = -1;
                    v24 = *(_QWORD *)(v5[v22] + 1344);
                    if (v24)
                    {
                      if (*(_BYTE *)(v24 + 100))
                      {
                        *(_BYTE *)(v24 + 1394) = 0;
                        *(_BYTE *)(v24 + 1399) = 1;
                        *(_BYTE *)(v24 + 1356) = 0;
                        *(_DWORD *)(v24 + 1308) = -1;
                        *(_QWORD *)(v5[v22] + 1344) = 0;
                      }
                    }
                  }
                }
              }
              ++v22;
            }
            while (v22 < *(unsigned int *)(a2 + 12));
          }
          goto LABEL_49;
        default:
LABEL_49:
          *(_QWORD *)(a1 + 24544) = *((_QWORD *)result + 3);
          free(result);
          result = *(_DWORD **)(a1 + 24544);
          if (!result)
            return result;
          continue;
      }
    }
  }
  return result;
}

uint64_t sub_1B68B99D0(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v2 = *(unsigned int *)(a2 + 12);
  if ((int)v2 < 1)
    return (a1 >> 31) & 0xFFFFDCF7;
  v3 = 0;
  v4 = 0;
  v5 = (uint64_t *)(a2 + 216);
  v6 = -1;
  v7 = 0x7FFFFFFF;
  do
  {
    v8 = v5[v3];
    if (*(_BYTE *)(v8 + 1394) && *(_BYTE *)(v8 + 1398) && (!*(_BYTE *)(v8 + 98) || !*(_QWORD *)(v8 + 1344)))
    {
      if (*(_DWORD *)(v8 + 1300) < v7 && !*(_BYTE *)(v8 + 1356))
      {
        v6 = v3;
        v7 = *(_DWORD *)(v8 + 1300);
      }
      ++v4;
    }
    ++v3;
  }
  while (v2 != v3);
  if (v4 <= a1)
    return 0;
  if (v6 < 0)
    return 4294958327;
  do
  {
    v9 = *v5;
    if (*(_DWORD *)(*v5 + 1300) == v7)
    {
      if (*(_BYTE *)(v9 + 1398))
      {
        if (!*(_BYTE *)(v9 + 1356))
        {
          *(_BYTE *)(v9 + 1394) = 0;
          v10 = *(_BYTE **)(v9 + 1344);
          if (v10)
          {
            if (v10[100])
            {
              v10[1394] = 0;
              v10[1399] = 1;
              *(_QWORD *)(v9 + 1344) = 0;
            }
          }
        }
      }
    }
    ++v5;
    --v2;
  }
  while (v2);
  if (v4 - 1 == a1)
    return 0;
  else
    return 4294958327;
}

_WORD *sub_1B68B9AD4(_WORD *result, unsigned __int8 *a2, unsigned __int8 *a3, int a4, __int16 a5)
{
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (a4 >= 1)
  {
    v5 = a4;
    do
    {
      v6 = *a2++;
      v7 = (16 - a5) * v6;
      v8 = *a3++;
      *result++ = v7 + v8 * a5;
      --v5;
    }
    while (v5);
  }
  return result;
}

_BYTE *sub_1B68B9B08(_BYTE *result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;

  if (a3 >= 1)
  {
    v5 = a3;
    do
    {
      v7 = *a5++;
      v6 = v7;
      v8 = 16 - v7;
      v9 = *a4++;
      a2 += v9;
      *result++ = (unsigned __int16)(a2[1] * v6 + v8 * *a2 + 128) >> 8;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1B68B9B50(uint64_t result, _WORD *a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v5;
  _BYTE *v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;

  if (a3 >= 1)
  {
    v5 = a3;
    v6 = (_BYTE *)(result + 1);
    do
    {
      v8 = *a5++;
      v7 = v8;
      v9 = *a4++;
      a2 += v9;
      *(v6 - 1) = (unsigned __int16)(a2[2] * v7 + (16 - v7) * *a2 + 128) >> 8;
      *v6 = (unsigned __int16)(a2[3] * v7 + (16 - v7) * a2[1] + 128) >> 8;
      v6 += 2;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1B68B9BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v30)(uint64_t, unint64_t, char *, _QWORD, unint64_t);
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char *v42;
  int v43;
  unsigned int v44;
  void (*v45)(uint64_t, unint64_t, char *, _QWORD, unint64_t);
  void (*v46)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v47;
  void (*v48)(uint64_t, unint64_t, _QWORD, char *, unint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v53;
  int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  void (*v68)(unint64_t, uint64_t, uint64_t);
  void (*v69)(uint64_t, unint64_t, _QWORD, char *, unint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  _BYTE *v89;
  unsigned int v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  char v95;
  _BYTE *v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(unint64_t, uint64_t, uint64_t);
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  signed int v107;
  int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  signed int v112;
  uint64_t v113;
  _QWORD *v114;
  _DWORD *v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  _QWORD *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  void (*v132)(uint64_t, unint64_t, _QWORD, char *, unint64_t);
  void (*v133)(uint64_t, unint64_t, char *, _QWORD, unint64_t);
  char *v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 22344);
  v7 = *(_QWORD *)(a1 + 22352);
  v8 = *(_QWORD *)(a1 + 22336);
  if (*(_QWORD *)(a1 + 22328) == v6)
    v6 = *(_QWORD *)(a1 + 352);
  v127 = *(_QWORD *)(a1 + 22328);
  v123 = v6;
  v121 = v8;
  if (v8 == v7)
    v7 = *(_QWORD *)(a1 + 368);
  v122 = v7;
  v128 = (uint64_t)&v120;
  v9 = *(int *)(a1 + 22312);
  v11 = (char *)*(unsigned int *)(a1 + 22376);
  v10 = *(_DWORD *)(a1 + 22380);
  v12 = *(_DWORD *)(a1 + 22304);
  LODWORD(v130) = *(_DWORD *)(a1 + 22372);
  v13 = MEMORY[0x1E0C80A78](a1, a2, *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), a5, a6);
  v15 = (char *)&v120 - v14;
  v21 = MEMORY[0x1E0C80A78](v13, v16, v17, v18, v19, v20);
  v27 = MEMORY[0x1E0C80A78](v21, v23, v24, v25, (char *)&v120 - ((v22 + 15) & 0x1FFFFFFF0), v26);
  v35 = (_BYTE *)(((unint64_t)&v120 - ((v33 + 15) & 0x1FFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = v36;
  v125 = (_QWORD *)v27;
  if ((int)v11 < 1)
  {
    v40 = ((unint64_t)&v120 - ((v33 + 15) & 0x1FFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0;
    v48 = (void (*)(uint64_t, unint64_t, _QWORD, char *, unint64_t))v31;
    v45 = v30;
    v46 = v29;
    v39 = v34;
    if ((int)v11 < -15)
      goto LABEL_12;
    v47 = 0;
  }
  else
  {
    v37 = 0;
    v38 = 0;
    v39 = v34;
    v40 = (unint64_t)v35;
    v41 = v31;
    v42 = v11;
    v43 = ((_DWORD)v34 << 16) / (int)v11;
    do
    {
      v44 = HIWORD(v37);
      *v35++ = (unsigned __int16)v37 >> 12;
      v37 += v43;
      *v41++ = v44 - v38;
      v38 = v44;
      --v42;
    }
    while (v42);
    v45 = v30;
    v46 = v29;
    v47 = (int)v11;
  }
  v48 = (void (*)(uint64_t, unint64_t, _QWORD, char *, unint64_t))v31;
  bzero(&v31[v47], ((_DWORD)v11 - v47 + 15) + 1);
LABEL_12:
  v131 = v40;
  v132 = v48;
  v133 = v45;
  v134 = v11;
  v49 = v9;
  v50 = v127;
  if (v10 >= 1)
  {
    v51 = v39;
    v52 = v46;
    v53 = 0;
    v54 = (_DWORD)v130 << 16;
    v55 = (unint64_t)(v15 + 30) & 0xFFFFFFFFFFFFFFF0;
    v56 = v130 - 1;
    v130 = (int)v51 - 1;
    v57 = v123;
    LODWORD(v129) = v54 / v10;
    do
    {
      v58 = HIWORD(v53);
      v59 = (unsigned __int16)v53 >> 12;
      v53 += v129;
      v60 = v50 + (int)(v58 * v12);
      if (v56 >= (int)(v58 + 1))
        v61 = v58 + 1;
      else
        v61 = v56;
      v52(v55, v60, v50 + (int)(v61 * v12), v51, v59);
      v62 = v131;
      *(_WORD *)(v55 + 2 * v51) = *(_WORD *)(v55 + 2 * v130);
      v133(v57, v55, v134, v132, v62);
      v57 += v49;
      --v10;
    }
    while (v10);
  }
  v120 = (uint64_t)&v120;
  v63 = (int)v124[3];
  v64 = v124[19];
  v65 = (unint64_t)v124[18] >> 1;
  v66 = v124[1];
  v67 = (int)v124[16];
  LODWORD(v130) = v124[17];
  v68 = (void (*)(unint64_t, uint64_t, uint64_t))v125[26];
  v69 = (void (*)(uint64_t, unint64_t, _QWORD, char *, unint64_t))v125[28];
  v70 = MEMORY[0x1E0C80A78](v63, v28, v29, (int)v67 & 0xFFFFFFFFFFFFFFFELL, v31, v32);
  v129 = (char *)&v120 - v71;
  v77 = MEMORY[0x1E0C80A78](v70, v72, v73, v74, v75, v76);
  v79 = (char *)&v120 - v78;
  v85 = MEMORY[0x1E0C80A78](v77, v80, v81, v82, v83, v84);
  v89 = (_BYTE *)(((unint64_t)&v120 - ((v88 + 15) & 0x1FFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v90 < 2)
  {
    v91 = v89;
    v92 = v85;
    LODWORD(v93) = 0;
LABEL_26:
    v99 = v86;
    bzero(&v79[v93], (v65 - v93 + 15) + 1);
    v86 = v99;
    goto LABEL_27;
  }
  v94 = 0;
  v95 = 0;
  if (v65 <= 1)
    v93 = 1;
  else
    v93 = v65;
  v91 = v89;
  v96 = v79;
  v97 = v93;
  do
  {
    v98 = HIWORD(v94);
    *v89++ = (unsigned __int16)v94 >> 12;
    v94 += (int)(((_DWORD)v67 << 15) & 0xFFFF0000) / (int)v65;
    *v96++ = 2 * (v98 - v95);
    v95 = v98;
    --v97;
  }
  while (v97);
  v92 = v85;
  if (v93 < v87)
    goto LABEL_26;
LABEL_27:
  v131 = (unint64_t)v91;
  v132 = v69;
  v133 = (void (*)(uint64_t, unint64_t, char *, _QWORD, unint64_t))v65;
  v134 = v79;
  v100 = v121;
  if (v64 >= 2)
  {
    v101 = v92;
    v102 = v68;
    v103 = 0;
    v104 = v64 >> 1;
    v105 = v130 >> 1 << 16;
    v106 = (unint64_t)(v129 + 30) & 0xFFFFFFFFFFFFFFF0;
    v107 = (v130 >> 1) - 1;
    v129 = (char *)(int)v86;
    v130 = v86 - 2;
    v127 = (int)v86 - 1;
    v128 = v67 | 1;
    if (v104 <= 1)
      v108 = 1;
    else
      v108 = v104;
    v126 = v105 / v104;
    v109 = v122;
    do
    {
      v110 = HIWORD(v103);
      v103 += v126;
      v111 = v100 + (int)(v110 * v66);
      if (v107 >= (int)(v110 + 1))
        v112 = v110 + 1;
      else
        v112 = v107;
      v113 = v86;
      v102(v106, v111, v100 + v112 * v66);
      *(_WORD *)(v106 + 2 * (_QWORD)v129) = *(_WORD *)(v106 + 2 * v130);
      *(_WORD *)(v106 + 2 * v128) = *(_WORD *)(v106 + 2 * v127);
      v132(v109, v106, v133, v134, v131);
      v86 = v113;
      v109 += v101;
      --v108;
    }
    while (v108);
  }
  v115 = v124;
  v114 = v125;
  v116 = v123;
  if (v125[2791] == v125[2793] && v124[19])
  {
    v117 = 0;
    do
    {
      memcpy((void *)(v114[2793] + v115[2] * v117), (const void *)(v116 + v115[2] * v117), v115[18]);
      ++v117;
    }
    while (v117 < v115[19]);
  }
  v118 = v122;
  if (v114[2792] == v114[2794] && v115[19] >= 2u)
  {
    v119 = 0;
    do
    {
      memcpy((void *)(v114[2794] + v115[3] * v119), (const void *)(v118 + v115[3] * v119), v115[18]);
      ++v119;
    }
    while (v119 < v115[19] >> 1);
  }
}

uint64_t sub_1B68BA138(unsigned int a1, unsigned int a2, int a3, _BYTE *a4)
{
  uint64_t result;
  char v6;

  if (!a4)
    return 4294958327;
  if (a1 <= 1)
  {
    if (a2 <= 0x19)
    {
      if (a2 | a1 | a3)
      {
        if (a2 | a1 || a3 != 1)
        {
          result = 0;
          v6 = 2;
        }
        else
        {
          result = 0;
          v6 = 7;
        }
      }
      else
      {
        result = 0;
        v6 = 1;
      }
      a4[15] = v6;
      return result;
    }
    return 4294958327;
  }
  if (a1 == 2)
  {
    if (a2 > 4)
      return 4294958327;
LABEL_13:
    a4[15] = byte_1B6931CB0[a2];
    a4[31] = byte_1B6931CB5[a2];
    if (a2 - 3 > 1)
      return 0;
    result = 0;
    a4[47] = 0;
    a4[63] = 0;
    return result;
  }
  if (a1 == 4 && !a2)
    goto LABEL_13;
  result = 4294958327;
  if (a1 == 3 && a2 <= 0x16)
  {
    result = 0;
    a4[15] = asc_1B69424CA[a2];
    a4[31] = byte_1B6931CCA[a2];
  }
  return result;
}

uint64_t sub_1B68BA234(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t result;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(unsigned __int8 *)(a3 + 4 * v6);
    if (a2 == 2)
    {
      if ((v9 & 0xFC) != 0)
        return 4294958327;
      *(_DWORD *)(a4 + 4 * v6) = 4;
      v10 = byte_1B6931D26[v9];
      *(_DWORD *)(a5 + 4 * v6) = v10;
      v11 = (unsigned __int8 *)&unk_1B6931D2A + v9;
      v12 = (unsigned __int8 *)&unk_1B6931D2E + v9;
      if (!v10)
        goto LABEL_38;
LABEL_12:
      v13 = 0;
      v14 = 4 * v6;
      v15 = *v11;
      v16 = *v12;
      v17 = v15 == 8;
      v18 = v16 == 8 && v15 == 8;
      v19 = v15 == 4;
      v20 = v16 == 4 && v19;
      v21 = v16 == 4 && v17;
      v22 = v7;
      v23 = a6 + 16 * v7;
      v24 = v10;
      while (1)
      {
        if (v24 > 4)
          return 4294958327;
        *(_BYTE *)(v23 + 15) = *(_DWORD *)(a4 + 4 * v6);
        v25 = *(_DWORD *)(a5 + 4 * v6);
        if (v18)
        {
          if (v25 != 1)
            return 4294958327;
          *(_WORD *)(a6 + 10) &= word_1B6931CA8[v14 >> 2];
          v14 += 4;
          if (*(_DWORD *)(a4 + 4 * v6) == 3)
            *(_QWORD *)v23 = 0;
        }
        else
        {
          if (v20)
          {
            if (v25 != 4)
              return 4294958327;
            v26 = *(_WORD *)(a6 + 10) & word_1B6931CA8[v14 >> 2];
            v27 = 3 << (2 * (v14 >> 2));
          }
          else
          {
            if (v21)
            {
              if (v25 != 2)
                return 4294958327;
              *(_WORD *)(a6 + 10) = (*(_WORD *)(a6 + 10) & word_1B6931CA8[v14 >> 2]) + (2 << (2 * (v14 >> 2)));
              v14 += 2;
              goto LABEL_36;
            }
            if (v25 != 2)
              return 4294958327;
            v26 = *(_WORD *)(a6 + 10) & word_1B6931CA8[v14 >> 2];
            v27 = 1 << (2 * (v14 >> 2));
          }
          *(_WORD *)(a6 + 10) = v26 + v27;
          ++v14;
        }
LABEL_36:
        v24 = *(_DWORD *)(a5 + 4 * v6);
        ++v13;
        v23 += 16;
        if (v13 >= v24)
        {
          v7 = v22 + v13;
          goto LABEL_38;
        }
      }
    }
    if (v9 > 0xC)
      return 4294958327;
    *(_DWORD *)(a4 + 4 * v6) = byte_1B6931D32[v9];
    if (!a1 || (_DWORD)v9)
    {
      v10 = byte_1B6931D3F[v9];
      *(_DWORD *)(a5 + 4 * v6) = v10;
      v11 = (unsigned __int8 *)&unk_1B6931D4C + v9;
      v12 = (unsigned __int8 *)&unk_1B6931D59 + v9;
      if (v10)
        goto LABEL_12;
    }
    else
    {
      v10 = byte_1B6931D66[v9];
      *(_DWORD *)(a5 + 4 * v6) = v10;
      v11 = (unsigned __int8 *)&unk_1B6931D73 + v9;
      v12 = (unsigned __int8 *)&unk_1B6931D80 + v9;
      if (v10)
        goto LABEL_12;
    }
LABEL_38:
    v8 += v10;
    ++v6;
  }
  while (v6 != 4);
  if (v8 > 0x10)
    return 4294958327;
  result = 0;
  *(_BYTE *)(a6 + 256) = v8;
  return result;
}

uint64_t sub_1B68BA4A4(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t i;
  _BYTE *v10;
  char v11;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 188);
  v3 = *(unsigned __int8 *)(result + 28);
  v5 = *(_QWORD *)(result + 40);
  v4 = *(_QWORD *)(result + 48);
  if (v3 <= 8)
  {
    v6 = 1 << v3;
    if ((v6 & 0x129) != 0)
    {
      *(_WORD *)(v5 + 1) = 4;
      *(_BYTE *)(v4 + 272) = 1;
      *(_BYTE *)(v4 + 31) = 4;
      *(_DWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 16785408;
      *(_DWORD *)(v4 + 8) = 4;
    }
    else if ((v6 & 0x42) != 0)
    {
      *(_WORD *)(v5 + 1) = 5;
      result = sub_1B6908320(v4);
    }
  }
  *(_BYTE *)(*(_QWORD *)(v1 + 176) + 182) = *(_BYTE *)(*(_QWORD *)(v1 + 48) + 272);
  if (v2)
  {
    v7 = *(_QWORD *)(v1 + 176);
    *(_BYTE *)(v7 + 176) = 1;
    *(_BYTE *)(v7 + 177) = *(_BYTE *)(v5 + 1);
    *(_BYTE *)(v7 + 178) = *(_BYTE *)(v5 + 2);
    *(_BYTE *)(v7 + 199) = 0;
    v8 = (char *)(v4 + 25);
    for (i = 128; i != 144; ++i)
    {
      v10 = (_BYTE *)(v7 + i);
      *v10 = *(v8 - 1);
      v11 = *v8;
      v8 += 16;
      v10[16] = v11;
    }
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 112) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
  }
  *(_BYTE *)(v5 + 3) = 0;
  *(_DWORD *)(*(_QWORD *)(v1 + 48) + 8) = *(unsigned __int8 *)(v4 + 31);
  return result;
}

uint64_t sub_1B68BA5B4(uint64_t result, unsigned __int8 a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned int v5;
  uint64_t v6;
  int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int16 *v12;
  int v13;
  __int16 v14;

  v5 = a3[1];
  v6 = a3[2];
  *a4 = result;
  a4[1] = a2;
  if (v5 == 4)
  {
    if (!(_DWORD)v6)
    {
      a4[272] = 1;
      a4[31] = 4;
      *((_DWORD *)a4 + 4) = 0;
      *((_DWORD *)a4 + 6) = 16785408;
      *((_DWORD *)a4 + 2) = 4;
    }
  }
  else if (v5 == 5)
  {
    if (!(_DWORD)v6)
      return sub_1B6908320((uint64_t)a4);
  }
  else
  {
    if (v5 == 3 && (_DWORD)v6 == 0)
    {
      result = sub_1B6908320((uint64_t)a4);
    }
    else
    {
      v9 = a3[3];
      switch(v5)
      {
        case 0u:
          if (v6 <= 0x19)
            goto LABEL_16;
          break;
        case 1u:
          if (!(_DWORD)v6)
            goto LABEL_16;
          break;
        case 2u:
          if (v6 <= 4)
          {
            v11 = (unsigned __int8 *)&unk_1B6931CBA;
            goto LABEL_21;
          }
          break;
        case 3u:
          if (v6 <= 0x16)
          {
            v11 = (unsigned __int8 *)&unk_1B6931CE1;
LABEL_21:
            v10 = v11[v6];
            goto LABEL_24;
          }
          break;
        case 4u:
          v10 = 1;
          goto LABEL_24;
        case 5u:
          v10 = 16;
          goto LABEL_24;
        default:
LABEL_16:
          v10 = 0;
LABEL_24:
          a4[272] = v10;
          result = sub_1B68BA138(v5, v6, v9, a4 + 16);
          if ((_DWORD)result)
            break;
          *((_DWORD *)a4 + 2) = a4[31];
          if (v5 < 2)
            break;
          if (v10 > 3)
            goto LABEL_34;
          if (v5 == 2)
          {
            v12 = (unsigned __int16 *)&unk_1B6931CC0;
          }
          else
          {
            if (v5 != 3)
            {
LABEL_34:
              a4[31] = 0;
              *((_DWORD *)a4 + 2) = 0;
              break;
            }
            v12 = (unsigned __int16 *)&unk_1B6931CF8;
          }
          v13 = v12[v6];
          if (v13 == 2064)
          {
            if (v10 != 2)
              break;
            v14 = 258;
          }
          else if (v13 == 4112)
          {
            v14 = 256;
          }
          else
          {
            if (v10 != 2)
              break;
            v14 = 257;
          }
          *((_WORD *)a4 + 13) = v14;
          break;
      }
    }
    if (v5 | v6 && *((_DWORD *)a4 + 2) != 2 && a4[272] == 4)
      return sub_1B68BA234(*a4, a3[1], (uint64_t)(a3 + 4), (uint64_t)(a3 + 20), (uint64_t)(a3 + 36), (uint64_t)(a4 + 16));
  }
  return result;
}

void sub_1B68BA7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, char a11)
{
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  _BOOL4 v39;
  _BOOL4 v40;
  unsigned int v41;
  unsigned __int8 v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  char v51;
  unsigned int v52;
  int v53;
  BOOL v54;
  int v55;
  unsigned __int8 v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  unsigned int v64;
  int v65;
  char v67;
  unsigned int v68;
  int v69;
  int v70;

  if (a11 < 2)
  {
    if (a11 == 1)
    {
      if (!a6)
        return;
      v19 = *(unsigned int *)(a6 + 1276);
      v20 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 360) + v19);
      v21 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 480) + v19);
      if (v20 > 0x13 || ((1 << v20) & 0x80007) == 0)
      {
        *(_DWORD *)(a6 + 1280) = v19 - *(_DWORD *)(a1 + 68);
      }
      else
      {
        *(_DWORD *)(a6 + 1280) = 0;
        *(_DWORD *)(a1 + 68) = v19;
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(a6 + 1332);
      }
      v43 = v21 & 0xF;
      v44 = v21 >> 4;
      goto LABEL_131;
    }
    if (*(_BYTE *)(a2 + 316))
    {
      if (*(_BYTE *)(a2 + 316) != 1)
        goto LABEL_109;
      if (*(__int16 *)(a2 + 326) > 0)
      {
        if (!a6)
          return;
        v27 = *(unsigned int *)(a6 + 1276);
        if ((_DWORD)v27 != -1 && *(_BYTE *)(a6 + 1357))
        {
          if (*(_DWORD *)(a3 + 192) > v27)
            *(_BYTE *)(*(_QWORD *)(a3 + 360) + v27) = 19;
          *(_DWORD *)(a6 + 1280) = 0;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(a6 + 1332);
        }
        goto LABEL_110;
      }
    }
    v70 = 0;
    if (a10)
    {
      v28 = *(unsigned int *)(a10 + 1276);
      if (*(_DWORD *)(a3 + 192) > v28)
        *(_BYTE *)(*(_QWORD *)(a3 + 368) + v28) = *(_DWORD *)(a10 + 5004);
    }
    if (!a6 || *(_BYTE *)(a2 + 325))
    {
      if (!a10 || *(_BYTE *)(a2 + 325) != 1)
        goto LABEL_109;
      sub_1B68BAFC0(a1, a2, a10, a9);
      v29 = *(unsigned __int8 *)(a10 + 1357);
      if (*(_BYTE *)(a10 + 1357))
      {
        if (*(_DWORD *)(a10 + 1276))
        {
          if (a8)
          {
            v30 = *(unsigned int *)(a8 + 1276);
            v31 = *(_QWORD *)(a3 + 360);
            v32 = *(unsigned __int8 *)(v31 + v30);
            if (v32 > 0x17 || ((1 << v32) & 0xC8066F) == 0)
            {
              if (*(_DWORD *)(a3 + 192) > v30)
                *(_BYTE *)(v31 + v30) = 5;
              *(_BYTE *)(a1 + 40) = 1;
              v29 = *(unsigned __int8 *)(a10 + 1357);
            }
          }
        }
      }
      v33 = *(_DWORD *)(a10 + 1276);
      v34 = *(_DWORD *)(a3 + 192);
      if (v34 <= v33)
        v35 = v34 - 1;
      else
        v35 = *(_DWORD *)(a10 + 1276);
      v36 = sub_1B68BB47C(a1, (__int16 *)a2, v33, *(_DWORD *)(a10 + 1332), *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(*(_QWORD *)(a3 + 368) + v35), v29, &v70, *(float *)(a10 + 5012));
      v37 = *(_DWORD *)(a10 + 1276);
LABEL_100:
      if (v37 != -1)
      {
        v61 = *(_DWORD *)(a3 + 192);
        if (v61 > v37)
        {
          *(_BYTE *)(*(_QWORD *)(a3 + 360) + v37) = v36;
          v61 = *(_DWORD *)(a3 + 192);
        }
        if (v61 > v37)
        {
          v62 = *(unsigned __int8 *)(a1 + 80);
          v63 = v70;
          if (v70 >= 0xFu)
            v63 = 15;
          *(_BYTE *)(*(_QWORD *)(a3 + 480) + v37) = *(_BYTE *)(*(_QWORD *)(a3 + 480) + v37) & 0xF0 | v63;
          if (v62 >= 0xF)
            LOBYTE(v62) = 15;
          *(_BYTE *)(*(_QWORD *)(a3 + 480) + v37) = *(_BYTE *)(*(_QWORD *)(a3 + 480) + v37) & 0xF | (16 * v62);
        }
      }
LABEL_109:
      if (!a6)
        return;
LABEL_110:
      if (*(_BYTE *)(a2 + 325) == 1)
        sub_1B68BAFC0(a1, a2, a6, a9);
      v64 = *(_DWORD *)(a6 + 1276);
      if (v64)
      {
        if (!*(_BYTE *)(a6 + 1354))
        {
          v43 = 0;
          v20 = 5;
          if (!*(_BYTE *)(a2 + 460))
            goto LABEL_130;
          if (!(v64 % (*(unsigned __int8 *)(a1 + 18) + 1)) || *(_BYTE *)(a1 + 16) != 0)
            goto LABEL_130;
          goto LABEL_128;
        }
        if (*(_BYTE *)(a1 + 18))
        {
          if ((v64 & 3) == 0)
          {
            v43 = 0;
            v20 = 5;
            goto LABEL_130;
          }
          v43 = 0;
          v20 = 5;
          if (!*(_BYTE *)(a2 + 460) || (((_BYTE)v64 - 1) & 3) == 0)
            goto LABEL_130;
        }
        else
        {
          v43 = 0;
          v20 = 5;
          if (!*(_BYTE *)(a2 + 460))
            goto LABEL_130;
        }
        if (!*(_BYTE *)(a1 + 16))
        {
LABEL_128:
          v43 = 1;
          v20 = 12;
        }
      }
      else
      {
        v20 = 0;
        v43 = 0;
        v65 = *(_DWORD *)(a6 + 1332);
        *(_DWORD *)(a1 + 72) = 0;
        *(_DWORD *)(a1 + 76) = v65;
        *(_WORD *)(a1 + 65) = 1798;
        *(_DWORD *)(a1 + 68) = 0;
      }
LABEL_130:
      *(_DWORD *)(a6 + 1280) = v64;
      LOBYTE(v44) = *(_BYTE *)(a1 + 80);
LABEL_131:
      sub_1B68BBCC0(a4, v20, v43, v44);
      v67 = 0;
      *(_BYTE *)(a6 + 1368) = *(_DWORD *)a4;
      *(_BYTE *)(a6 + 1393) = *(_BYTE *)(a4 + 4);
      *(_BYTE *)(a6 + 1392) = *(_BYTE *)(a4 + 5);
      *(_BYTE *)(a6 + 1394) = *(_BYTE *)(a4 + 6);
      *(_BYTE *)(a6 + 1396) = *(_BYTE *)(a4 + 10);
      *(_BYTE *)(a6 + 1356) = 0;
      *(_BYTE *)(a6 + 1359) = *(_BYTE *)(a4 + 8);
      *(_BYTE *)(a6 + 1360) = *(_BYTE *)(a4 + 9);
      v68 = *(_DWORD *)(a4 + 12) - 6;
      if (v68 <= 0xF)
        v67 = byte_1B69181A0[v68];
      *(_BYTE *)(a6 + 1397) = v67;
      *(_BYTE *)(a6 + 1404) = *(_BYTE *)(a4 + 16);
      *(_BYTE *)(a6 + 1403) = *(_BYTE *)(a4 + 17);
      return;
    }
    v45 = *(unsigned __int8 *)(a6 + 1357);
    sub_1B68BAFC0(a1, a2, a6, a9);
    if (v45)
    {
      if (*(_DWORD *)(a6 + 1276))
      {
        if (a5)
        {
          v46 = *(unsigned int *)(a5 + 1276);
          v47 = *(_QWORD *)(a3 + 360);
          v48 = *(unsigned __int8 *)(v47 + v46);
          if (v48 > 0x17 || ((1 << v48) & 0xC8066F) == 0)
          {
            if (*(_DWORD *)(a3 + 192) > v46)
              *(_BYTE *)(v47 + v46) = 5;
            *(_BYTE *)(a1 + 40) = 1;
          }
        }
      }
    }
    if (*(__int16 *)(a2 + 326) < 1)
    {
      v49 = 0;
    }
    else
    {
      v49 = *(_DWORD *)(a6 + 5004);
      if (!a7)
      {
        v69 = 0;
        if (*(_BYTE *)(a2 + 235))
        {
          v50 = *(unsigned __int16 *)(a6 + 4838);
          goto LABEL_97;
        }
        goto LABEL_96;
      }
    }
    v69 = 0;
    if (*(_BYTE *)(a2 + 235))
    {
      v50 = *(unsigned __int16 *)(a6 + 4838);
      if (a7)
      {
        v60 = *(unsigned __int16 *)(a7 + 4838);
LABEL_98:
        v36 = sub_1B68BB21C(a1, (_DWORD *)a6, v45, v49, *(unsigned __int8 *)(a2 + 324), v50, v60, &v69, &v70);
        goto LABEL_99;
      }
LABEL_97:
      v60 = -1;
      goto LABEL_98;
    }
LABEL_96:
    v36 = sub_1B68BB068(a1, (_DWORD *)a6, v45, v49, 1, 1, 1, *(unsigned __int8 *)(a6 + 1354), *(_BYTE *)(a2 + 324), &v69, &v70);
LABEL_99:
    *(_DWORD *)(a6 + 1280) = v69;
    v37 = *(_DWORD *)(a6 + 1276);
    goto LABEL_100;
  }
  if (a6)
  {
    a9 = sub_1B68BAFC0(a1, a2, a6, a9);
    if (!*(_BYTE *)(a2 + 325))
    {
      v23 = *(_DWORD *)(a6 + 1276);
      v24 = *(unsigned __int8 *)(a6 + 1357);
      if (*(_BYTE *)(a6 + 1357) && v23)
        sub_1B68BB8A8(a1, a5);
      if (*(__int16 *)(a2 + 326) < 1)
      {
        v25 = 0;
      }
      else
      {
        v25 = *(_DWORD *)(a6 + 5004);
        if (!a7)
        {
          v69 = 0;
          if (*(_BYTE *)(a2 + 235))
          {
            v26 = *(unsigned __int16 *)(a6 + 4838);
            goto LABEL_54;
          }
          goto LABEL_47;
        }
      }
      v69 = 0;
      if (*(_BYTE *)(a2 + 235))
      {
        v26 = *(unsigned __int16 *)(a6 + 4838);
        if (a7)
        {
          v38 = *(unsigned __int16 *)(a7 + 4838);
LABEL_55:
          v41 = sub_1B68BB21C(a1, (_DWORD *)a6, v24, v25, *(unsigned __int8 *)(a2 + 324), v26, v38, &v70, &v69);
LABEL_56:
          if (v41 > 0x13 || ((1 << v41) & 0x80007) == 0)
          {
            *(_DWORD *)(a6 + 1280) = v23 - *(_DWORD *)(a1 + 68);
          }
          else
          {
            *(_DWORD *)(a6 + 1280) = 0;
            *(_DWORD *)(a1 + 68) = v23;
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(a6 + 1332);
          }
          sub_1B68BBCC0(a4, v41, v69, *(_BYTE *)(a1 + 80));
          v51 = 0;
          *(_BYTE *)(a6 + 1368) = *(_DWORD *)a4;
          *(_BYTE *)(a6 + 1393) = *(_BYTE *)(a4 + 4);
          *(_BYTE *)(a6 + 1392) = *(_BYTE *)(a4 + 5);
          *(_BYTE *)(a6 + 1394) = *(_BYTE *)(a4 + 6);
          *(_BYTE *)(a6 + 1396) = *(_BYTE *)(a4 + 10);
          *(_BYTE *)(a6 + 1356) = 0;
          *(_BYTE *)(a6 + 1359) = *(_BYTE *)(a4 + 8);
          *(_BYTE *)(a6 + 1360) = *(_BYTE *)(a4 + 9);
          v52 = *(_DWORD *)(a4 + 12) - 6;
          if (v52 <= 0xF)
            v51 = byte_1B69181A0[v52];
          *(_BYTE *)(a6 + 1397) = v51;
          *(_BYTE *)(a6 + 1404) = *(_BYTE *)(a4 + 16);
          *(_BYTE *)(a6 + 1403) = *(_BYTE *)(a4 + 17);
          goto LABEL_76;
        }
LABEL_54:
        v38 = -1;
        goto LABEL_55;
      }
LABEL_47:
      if (*(_BYTE *)(a2 + 663))
        v39 = v24 != 0;
      else
        v39 = 1;
      if (v24)
        v40 = *(_BYTE *)(a2 + 663) == 0;
      else
        v40 = 1;
      v41 = sub_1B68BB068(a1, (_DWORD *)a6, v24, v25, v39, v39, v40, *(unsigned __int8 *)(a6 + 1354), *(_BYTE *)(a2 + 324), &v70, &v69);
      goto LABEL_56;
    }
  }
LABEL_76:
  if (a10)
  {
    sub_1B68BAFC0(a1, a2, a10, a9);
    if (*(_BYTE *)(a2 + 325) == 1)
    {
      v53 = *(_DWORD *)(a10 + 1276);
      if (*(_BYTE *)(a10 + 1357))
        v54 = v53 == 0;
      else
        v54 = 1;
      v55 = *(_DWORD *)(a10 + 1276);
      if (!v54)
      {
        sub_1B68BB8A8(a1, a8);
        v55 = *(_DWORD *)(a10 + 1276);
      }
      if (v55)
        v56 = *(_BYTE *)(a10 + 5004);
      else
        v56 = 0;
      *(_BYTE *)(a1 + 64) = v56;
      v70 = 0;
      v57 = sub_1B68BB47C(a1, (__int16 *)a2, v53, *(_DWORD *)(a10 + 1332), *(_QWORD *)(a1 + 8), v56, *(unsigned __int8 *)(a10 + 1357), &v70, *(float *)(a10 + 5012));
      if (v57 > 2)
      {
        *(_DWORD *)(a10 + 1280) = v53 - *(_DWORD *)(a1 + 68);
      }
      else
      {
        *(_DWORD *)(a10 + 1280) = 0;
        *(_DWORD *)(a1 + 68) = v53;
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(a10 + 1332);
      }
      sub_1B68BBCC0(a4, v57, v70, *(_BYTE *)(a1 + 80));
      v58 = 0;
      *(_BYTE *)(a10 + 1368) = *(_DWORD *)a4;
      *(_BYTE *)(a10 + 1393) = *(_BYTE *)(a4 + 4);
      *(_BYTE *)(a10 + 1392) = *(_BYTE *)(a4 + 5);
      *(_BYTE *)(a10 + 1394) = *(_BYTE *)(a4 + 6);
      *(_BYTE *)(a10 + 1396) = *(_BYTE *)(a4 + 10);
      *(_BYTE *)(a10 + 1356) = 0;
      *(_BYTE *)(a10 + 1359) = *(_BYTE *)(a4 + 8);
      *(_BYTE *)(a10 + 1360) = *(_BYTE *)(a4 + 9);
      v59 = *(_DWORD *)(a4 + 12) - 6;
      if (v59 <= 0xF)
        v58 = byte_1B69181A0[v59];
      *(_BYTE *)(a10 + 1397) = v58;
      *(_BYTE *)(a10 + 1404) = *(_BYTE *)(a4 + 16);
      *(_BYTE *)(a10 + 1403) = *(_BYTE *)(a4 + 17);
    }
  }
}

float sub_1B68BAFC0(uint64_t a1, uint64_t a2, uint64_t a3, float result)
{
  float v5;

  if (!*(_DWORD *)(a2 + 304) && !*(_DWORD *)(a3 + 1276))
  {
    result = *(float *)(a3 + 4940);
    if (result != *(float *)(a2 + 60))
    {
      result = result * *(float *)(a2 + 312);
      *(_DWORD *)(a1 + 28) = result;
      if (*(_BYTE *)(a2 + 398))
        *(_DWORD *)(a1 + 28) = 2 * result;
    }
  }
  if (!*(_DWORD *)(a2 + 300) && !*(_DWORD *)(a3 + 1276))
  {
    result = *(float *)(a3 + 4940);
    if (result != 0.0 && result != *(float *)(a2 + 60))
    {
      v5 = *(float *)(a2 + 308);
      if (v5 != 0.0)
      {
        result = result * v5;
        *(_DWORD *)(a1 + 24) = result;
        if (*(_BYTE *)(a2 + 398))
          *(_DWORD *)(a1 + 24) = 2 * result;
      }
    }
  }
  if (!*(_DWORD *)(a3 + 1276))
  {
    result = *(float *)(a3 + 4940);
    *(float *)(a1 + 20) = result;
  }
  return result;
}

uint64_t sub_1B68BB068(uint64_t a1, _DWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, _DWORD *a10, int *a11)
{
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  float v18;
  _BOOL4 v19;
  unsigned int v20;
  int v21;
  float v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;

  v11 = a2[319];
  v12 = v11;
  if (a6)
    v12 = v11 - *(_DWORD *)(a1 + 68);
  v13 = a2[333];
  v14 = a2[319];
  if (a5)
    v14 = v11 - *(_DWORD *)(a1 + 72);
  v15 = a2[334];
  v16 = v13 - *(_DWORD *)(a1 + 76);
  v17 = *(_DWORD *)(a1 + 28);
  if (v17 && !(v12 % v17))
  {
    v19 = 1;
  }
  else
  {
    v18 = *(float *)(a1 + 36) * (float)v15;
    v19 = v18 > 0.0 && v18 <= (float)v16;
  }
  v20 = *(_DWORD *)(a1 + 24);
  if (v20)
  {
    v21 = v14 % v20;
    if (!v21)
    {
LABEL_15:
      if (!v11)
        goto LABEL_37;
      goto LABEL_18;
    }
  }
  v22 = *(float *)(a1 + 32) * (float)v15;
  if (v22 > 0.0)
  {
    v21 = v22 > (float)v16;
    goto LABEL_15;
  }
  v21 = 1;
  if (!v11)
    goto LABEL_37;
LABEL_18:
  if (a6)
  {
    if (a4)
      v19 = 1;
    if (a3 || v19)
    {
LABEL_37:
      if (!a7 || v12 != 1 || v17 == 1)
      {
        v12 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 19) = 0;
        *(_DWORD *)(a1 + 72) = v11;
        *(_DWORD *)(a1 + 76) = v13;
        *(_WORD *)(a1 + 65) = 1798;
        *(_DWORD *)(a1 + 68) = v11;
        goto LABEL_44;
      }
      if (a5)
        goto LABEL_41;
      goto LABEL_43;
    }
  }
  if (a5)
    v23 = v21;
  else
    v23 = 1;
  if (v23 != 1)
  {
LABEL_41:
    v26 = 0;
    *(_BYTE *)(a1 + 19) = 0;
    *(_DWORD *)(a1 + 72) = v11;
    *(_BYTE *)(a1 + 66) = 7;
    v25 = 3;
    goto LABEL_44;
  }
  if (a8 && *(_BYTE *)(a1 + 18) && ((v12 & 3) == 0 || (((_BYTE)v12 - 1) & 3) == 0)
    || (v24 = *(unsigned __int8 *)(a1 + 19), v24 == *(unsigned __int8 *)(a1 + 18))
    || *(_BYTE *)(a1 + 16) == 4)
  {
LABEL_43:
    v26 = 0;
    *(_BYTE *)(a1 + 19) = 0;
    v25 = 5;
    goto LABEL_44;
  }
  *(_BYTE *)(a1 + 19) = v24 + 1;
  if (a9)
    v25 = 7;
  else
    v25 = 12;
  v26 = 1;
LABEL_44:
  *a10 = v12;
  *a11 = v26;
  return v25;
}

uint64_t sub_1B68BB21C(uint64_t a1, _DWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, _DWORD *a8, int *a9)
{
  int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  float v18;
  float v19;
  unsigned int v20;
  float v21;
  BOOL v22;
  int v23;
  unsigned int v24;

  v9 = a2[319];
  v10 = v9 - *(_DWORD *)(a1 + 68);
  v11 = a2[333];
  if (v9)
    v12 = a3 == 0;
  else
    v12 = 0;
  if (!v12 || (v15 = a2[334], (v16 = *(_DWORD *)(a1 + 28)) != 0) && !(v10 % v16))
  {
LABEL_5:
    if (v10 == 1)
    {
      v13 = 0;
      if (*(_DWORD *)(a1 + 28) == 1)
        LODWORD(v14) = 0;
      else
        LODWORD(v14) = 3;
      goto LABEL_39;
    }
LABEL_38:
    LODWORD(v14) = 0;
    v13 = 0;
    goto LABEL_39;
  }
  v17 = v11 - *(_DWORD *)(a1 + 76);
  v18 = (float)v15;
  v19 = *(float *)(a1 + 36) * (float)v15;
  if (v19 <= 0.0)
  {
    if (a4)
      goto LABEL_5;
  }
  else if (a4 || v19 <= (float)v17)
  {
    goto LABEL_5;
  }
  v20 = *(_DWORD *)(a1 + 24);
  if (v20 && !((v9 - *(_DWORD *)(a1 + 72)) % v20)
    || ((v21 = *(float *)(a1 + 32) * v18, v21 > 0.0) ? (v22 = v21 > (float)v17) : (v22 = 1), !v22))
  {
    v13 = 0;
    LODWORD(v14) = 3;
    goto LABEL_39;
  }
  v13 = 0;
  v23 = *(unsigned __int8 *)(a1 + 82);
  LODWORD(v14) = 5;
  if (*(unsigned __int8 *)(a1 + 81) - 1 != v23 && *(_BYTE *)(a1 + 16) != 4)
  {
    if ((v23 & 1) == 0)
    {
      if (a5 > 2)
        LODWORD(v14) = 0;
      else
        LODWORD(v14) = dword_1B6931D90[a5];
      v13 = *(unsigned __int8 *)(a1 + 80) - 1;
      goto LABEL_39;
    }
    if ((v23 & 3) == 1)
    {
      v13 = *(unsigned __int8 *)(a1 + 80) - 2;
      LODWORD(v14) = 10;
      goto LABEL_39;
    }
    if ((v23 & 7) == 3)
    {
      v13 = *(unsigned __int8 *)(a1 + 80) - 3;
      LODWORD(v14) = 13;
      goto LABEL_39;
    }
    if ((v23 & 0xF) == 0xF)
    {
      v13 = *(unsigned __int8 *)(a1 + 80) - 5;
      LODWORD(v14) = 20;
      goto LABEL_39;
    }
    if ((v23 & 0xF) == 7)
    {
      v13 = *(unsigned __int8 *)(a1 + 80) - 4;
      LODWORD(v14) = 15;
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_39:
  if (a6 <= 2 * a7)
    v24 = 7;
  else
    v24 = 5;
  if (*(_BYTE *)(a1 + 80) != 2 || (_DWORD)v14 != 7 || a7 >= 0xFFFFFFF)
    v14 = v14;
  else
    v14 = v24;
  switch((int)v14)
  {
    case 0:
    case 1:
    case 2:
    case 19:
      v10 = 0;
      *(_BYTE *)(a1 + 19) = 0;
      *(_DWORD *)(a1 + 72) = v9;
      *(_DWORD *)(a1 + 76) = v11;
      *(_WORD *)(a1 + 65) = 1798;
      *(_DWORD *)(a1 + 68) = v9;
      goto LABEL_59;
    case 3:
    case 17:
      *(_BYTE *)(a1 + 19) = 0;
      *(_DWORD *)(a1 + 72) = v9;
      *(_BYTE *)(a1 + 66) = 7;
      goto LABEL_59;
    case 4:
    case 18:
      ++*(_BYTE *)(a1 + 19);
      *(_DWORD *)(a1 + 72) = v9;
      *(_BYTE *)(a1 + 66) = 7;
      goto LABEL_57;
    case 5:
    case 6:
      *(_BYTE *)(a1 + 19) = 0;
LABEL_59:
      *(_BYTE *)(a1 + 82) = 0;
      break;
    case 7:
    case 8:
    case 11:
    case 12:
    case 14:
    case 16:
      ++*(_BYTE *)(a1 + 19);
      goto LABEL_57;
    case 9:
    case 10:
    case 13:
    case 15:
    case 20:
      *(_BYTE *)(a1 + 19) = 0;
LABEL_57:
      ++*(_BYTE *)(a1 + 82);
      break;
    default:
      break;
  }
  *a8 = v10;
  *a9 = v13;
  return v14;
}

uint64_t sub_1B68BB47C(uint64_t a1, __int16 *a2, int a3, int a4, uint64_t a5, int a6, int a7, int *a8, float a9)
{
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  char v19;
  char v20;
  char v21;
  unsigned int v22;
  int v23;
  uint64_t result;
  int v25;
  float v26;
  float v27;
  BOOL v28;

  v15 = *(unsigned __int8 *)(a1 + 17);
  if (a3 < 1)
  {
    if (!a3)
    {
LABEL_21:
      v21 = 0;
      v22 = 0;
      goto LABEL_30;
    }
    v17 = *(_DWORD *)(a1 + 28);
    goto LABEL_20;
  }
  v16 = a3 - *(_DWORD *)(a1 + 68);
  v17 = *(_DWORD *)(a1 + 28);
  v18 = v16 % v17;
  if (a2[163])
  {
    if (a7 || !v18)
      *(_BYTE *)(a1 + 65) = 3;
    if ((a3 - *(_DWORD *)(a1 + 72)) % *(_DWORD *)(a1 + 24))
      goto LABEL_20;
    v19 = 5;
    goto LABEL_19;
  }
  if (!v18)
    goto LABEL_14;
  if (!((v16 + 1) % v17))
  {
    v20 = 2;
    goto LABEL_16;
  }
  if (a7 || *(_BYTE *)(a1 + 65) == 2)
  {
LABEL_14:
    v20 = 1;
LABEL_16:
    *(_BYTE *)(a1 + 65) = v20;
  }
  if (!((a3 - *(_DWORD *)(a1 + 72)) % *(_DWORD *)(a1 + 24)))
  {
    v19 = 4;
LABEL_19:
    *(_BYTE *)(a1 + 66) = v19;
  }
LABEL_20:
  if (v17 == 1)
    goto LABEL_21;
  if (v15 == 4)
    goto LABEL_28;
  v23 = *(unsigned __int8 *)(a1 + 65);
  if (v23 == 2)
    goto LABEL_28;
  if (v23 == 1)
    goto LABEL_21;
  if (*(_BYTE *)(a1 + 66) == 4)
    goto LABEL_26;
  if (a6)
    goto LABEL_28;
  v22 = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
LABEL_26:
    v21 = 0;
    v22 = 3;
    goto LABEL_30;
  }
  if (v22 == 5)
    goto LABEL_29;
  if (v22 == 1)
  {
    v21 = 0;
    if (v23 == 3)
      v22 = 0;
    else
      v22 = 3;
    if (v23 != 3 && a3 >= 1)
    {
      v26 = sub_1B68BB724(a2, a5);
      if (*(_QWORD *)(a1 + 56) && v26 > 0.005)
      {
LABEL_28:
        v22 = 5;
LABEL_29:
        v21 = 1;
        goto LABEL_30;
      }
      sub_1B68BB7DC(a1, a5, a3);
      v21 = 0;
      v22 = 12;
    }
  }
  else
  {
    sub_1B68BB7DC(a1, a5, a3);
    v22 = 5;
    if (a9 >= 0.999)
      goto LABEL_29;
    v28 = v27 >= 2.0 || *(_QWORD *)(a1 + 56) == 0;
    v21 = v28;
    if (v28)
      v22 = 5;
    else
      v22 = 12;
  }
LABEL_30:
  if ((v21 & (*(_BYTE *)(a1 + 66) == 5)) != 0)
    result = 3;
  else
    result = v22;
  if (result >= 3)
  {
    if ((_DWORD)result == 5)
    {
      v25 = 0;
      *(_BYTE *)(a1 + 40) = 1;
      goto LABEL_41;
    }
    if ((_DWORD)result == 12)
    {
      ++*(_BYTE *)(a1 + 40);
      v25 = 1;
      goto LABEL_41;
    }
    *(_DWORD *)(a1 + 72) = a3;
    *(_BYTE *)(a1 + 66) = 7;
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 72) = a3;
    *(_DWORD *)(a1 + 76) = a4;
    *(_WORD *)(a1 + 65) = 1798;
    *(_DWORD *)(a1 + 68) = a3;
    *(_BYTE *)(a1 + 40) = 1;
  }
  v25 = dword_1B6931D9C[result];
LABEL_41:
  *a8 = v25;
  return result;
}

float sub_1B68BB724(__int16 *a1, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;
  float v10;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v4 = *(int **)(a2 + 16);
    v5 = 0.0;
    v6 = 0.0;
    do
    {
      v7 = *v4;
      v4 += 9;
      v8 = (double)(((v7 >> 16) + 2) >> 2) / ((double)(((__int16)v7 + 2) >> 2) + 0.00001);
      v9 = atanf(v8);
      v5 = v5 + v9;
      v6 = v6 + (float)(v9 * v9);
      --v3;
    }
    while (v3);
    v10 = v6 - v5;
  }
  else
  {
    v10 = 0.0;
  }
  return v10 / (float)(a1[1] * *a1 - 1);
}

uint64_t sub_1B68BB7DC(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  *(_QWORD *)(result + 56) = 0;
  if (a3 >= 1)
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0.0;
      do
      {
        v7 = (((__int16)*(_DWORD *)(*(_QWORD *)(a2 + 16) + v5) + 2) >> 2)
           + (((*(int *)(*(_QWORD *)(a2 + 16) + v5) >> 16) + 2) >> 2);
        v8 = *(_QWORD *)(result + 48);
        *(_QWORD *)(result + 56) += v7;
        v9 = *(unsigned __int8 *)(result + 40);
        if (v9 == 1)
        {
          *(_WORD *)(v8 + v4) = v7;
          v6 = 0.0;
        }
        else
        {
          v10 = v7 - *(__int16 *)(v8 + v4) * v9;
          if (v10 < 0)
            v10 = -v10;
          v6 = v6 + (float)v10;
        }
        v5 += 36;
        v4 += 2;
      }
      while (36 * v3 != v5);
    }
    *(uint64_t *)(result + 56) /= (uint64_t)(v3 * *(unsigned __int8 *)(result + 40));
  }
  return result;
}

uint64_t sub_1B68BB8A8(uint64_t result, uint64_t a2)
{
  char v2;
  unsigned int v3;

  if (a2 && !*(_BYTE *)(a2 + 1394))
  {
    v2 = *(_BYTE *)(a2 + 1404);
    v3 = *(unsigned __int8 *)(result + 80);
    if (v3 >= 0xF)
      LOBYTE(v3) = 15;
    *(_BYTE *)(a2 + 1368) = 0;
    *(_WORD *)(a2 + 1392) = 0;
    *(_BYTE *)(a2 + 1394) = 1;
    *(_WORD *)(a2 + 1396) = 1;
    *(_BYTE *)(a2 + 1356) = 0;
    *(_WORD *)(a2 + 1359) = 255;
    *(_BYTE *)(a2 + 1404) = v2 & 0xF | (16 * v3);
    *(_BYTE *)(a2 + 1403) = 0;
    *(_BYTE *)(result + 40) = 1;
  }
  return result;
}

_QWORD *sub_1B68BB904(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = malloc_type_malloc(0xB0uLL, 0x4CF1F002uLL);
  v5 = v4;
  if (v4)
  {
    v4[2] = a1;
    *(_BYTE *)v4 = 0;
    *((_DWORD *)v4 + 1) = a2;
    v4[1] = sub_1B68A37A0();
  }
  return v5;
}

uint64_t sub_1B68BB95C(unsigned __int8 *a1)
{
  pthread_mutex_t *v3;
  int v4;
  uint64_t v5;
  int v6;
  pthread_mutex_t *v7;
  pthread_mutex_t *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  pthread_mutex_t *v17;

  if (*a1)
    return 0;
  v3 = (pthread_mutex_t *)*((_QWORD *)a1 + 1);
  if (!v3 || (pthread_mutex_lock(v3), (v4 = *a1) == 0))
  {
    v5 = *((_QWORD *)a1 + 2);
    v6 = *((_DWORD *)a1 + 1);
    *((_QWORD *)a1 + 5) = sub_1B68A37A0();
    v7 = sub_1B68A37A0();
    *((_QWORD *)a1 + 6) = v7;
    if (!*((_QWORD *)a1 + 5))
      goto LABEL_14;
    if (!v7)
      goto LABEL_14;
    *((_QWORD *)a1 + 17) = sub_1B68A37A0();
    v8 = sub_1B68A37A0();
    *((_QWORD *)a1 + 18) = v8;
    if (!*((_QWORD *)a1 + 17))
      goto LABEL_14;
    if (!v8)
      goto LABEL_14;
    *((_DWORD *)a1 + 16) = 1;
    *((_QWORD *)a1 + 7) = 0x100000001;
    *(_OWORD *)(a1 + 152) = xmmword_1B6917C40;
    v9 = *(_DWORD *)(v5 + 132);
    v10 = *(_DWORD *)(v5 + 100) << ((v6 - 3) < 2);
    *((_QWORD *)a1 + 9) = *(_QWORD *)(v5 + 32);
    v11 = (v10 + 64) * (v9 + 64) - 1;
    *((_QWORD *)a1 + 10) = malloc_type_calloc((unint64_t)(v11 + qword_1EF13A068) >> qword_1EF13A070, qword_1EF13A068, 0x68FC2D8FuLL);
    *((_QWORD *)a1 + 11) = malloc_type_calloc((unint64_t)(v11 + qword_1EF13A068) >> qword_1EF13A070, qword_1EF13A068, 0x68FC2D8FuLL);
    v12 = (char *)malloc_type_calloc((unint64_t)(v11 + qword_1EF13A068) >> qword_1EF13A070, qword_1EF13A068, 0x68FC2D8FuLL);
    *((_QWORD *)a1 + 12) = v12;
    v13 = *((_QWORD *)a1 + 10);
    if (!v13)
      goto LABEL_14;
    v14 = *((_QWORD *)a1 + 11);
    if (!v14)
      goto LABEL_14;
    if (v12
      && (v15 = (v9 >> 4) + 4,
          *((_QWORD *)a1 + 13) = *((_QWORD *)a1 + 9),
          *((_QWORD *)a1 + 14) = v13 + (32 * *(_DWORD *)(v5 + 136)) + 32,
          *((_QWORD *)a1 + 15) = v14 + (32 * *(_DWORD *)(v5 + 136)) + 32,
          *((_QWORD *)a1 + 16) = &v12[32 * *(_DWORD *)(v5 + 136) + 32],
          v16 = malloc_type_calloc((qword_1EF13A068 + ((unint64_t)(((v10 >> 4) + 4) * v15) << 10) - 1) >> qword_1EF13A070, qword_1EF13A068, 0x68FC2D8FuLL), (*((_QWORD *)a1 + 3) = v16) != 0))
    {
      *((_DWORD *)a1 + 8) = v15 << 10;
      v4 = 1;
    }
    else
    {
LABEL_14:
      sub_1B68FDD20((uint64_t)a1);
      v4 = 0;
    }
    *a1 = v4;
  }
  v17 = (pthread_mutex_t *)*((_QWORD *)a1 + 1);
  if (v17)
  {
    pthread_mutex_unlock(v17);
    v4 = *a1;
  }
  if (v4)
    return 0;
  else
    return 4294967188;
}

void sub_1B68BBB78(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 8));
  free(v2);
  *(_QWORD *)(a1 + 8) = 0;
  if (*(_BYTE *)a1)
    sub_1B68FDD20(a1);
}

uint64_t sub_1B68BBBC8(uint64_t result)
{
  uint64_t v1;
  int v2;
  pthread_mutex_t *v3;
  int v4;
  pthread_mutex_t *v5;

  v1 = result;
  v2 = *(_DWORD *)(result + 156);
  if (v2)
  {
    v3 = *(pthread_mutex_t **)(result + 136);
    if (!v3 || (pthread_mutex_lock(v3), *(_DWORD *)(v1 + 156)))
    {
      *(_DWORD *)(v1 + 156) = 0;
      if (byte_1EF13A098)
        sub_1B68FE308(v1);
      else
        MEMORY[0](v1);
    }
    result = *(_QWORD *)(v1 + 136);
    if (result)
      result = pthread_mutex_unlock((pthread_mutex_t *)result);
  }
  v4 = *(_DWORD *)(v1 + 160);
  if (v4)
  {
    v5 = *(pthread_mutex_t **)(v1 + 144);
    if (!v5 || (pthread_mutex_lock(v5), *(_DWORD *)(v1 + 160)))
    {
      *(_DWORD *)(v1 + 160) = 0;
      if (byte_1EF13A0A0)
        sub_1B68FE418(v1);
      else
        MEMORY[0](v1);
    }
    result = *(_QWORD *)(v1 + 144);
    if (result)
      result = pthread_mutex_unlock((pthread_mutex_t *)result);
  }
  if (!v2)
  {
    result = *(_QWORD *)(v1 + 136);
    if (result)
    {
      pthread_mutex_lock((pthread_mutex_t *)result);
      result = *(_QWORD *)(v1 + 136);
      if (result)
        result = pthread_mutex_unlock((pthread_mutex_t *)result);
    }
  }
  if (!v4)
  {
    result = *(_QWORD *)(v1 + 144);
    if (result)
    {
      pthread_mutex_lock((pthread_mutex_t *)result);
      result = *(_QWORD *)(v1 + 144);
      if (result)
        result = pthread_mutex_unlock((pthread_mutex_t *)result);
    }
  }
  *(_DWORD *)(v1 + 152) = 0;
  return result;
}

uint64_t sub_1B68BBCC0(uint64_t result, int a2, unsigned __int8 a3, unsigned __int8 a4)
{
  int v4;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v4 = 0;
  if (a2 == 19)
    v5 = 0;
  else
    v5 = a2;
  *(_DWORD *)(result + 12) = v5;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 19:
      v6 = 1;
      v4 = 2;
      v7 = 1;
      goto LABEL_15;
    case 3:
    case 17:
    case 22:
    case 23:
      LOBYTE(v4) = 1;
      goto LABEL_7;
    case 4:
    case 18:
LABEL_7:
      v6 = 0;
      v7 = v4;
      v8 = 1;
      v4 = 2;
      break;
    case 5:
      LOBYTE(v4) = 1;
      goto LABEL_11;
    case 6:
      v4 = 0;
      v6 = 0;
      v8 = 0;
      v7 = 1;
      break;
    case 7:
LABEL_11:
      v6 = 0;
      v7 = v4;
      v8 = 1;
      v4 = 0;
      break;
    case 8:
      break;
    case 9:
      LOBYTE(v4) = 1;
      goto LABEL_14;
    case 10:
    case 13:
    case 15:
    case 20:
      LOBYTE(v4) = 1;
      goto LABEL_9;
    case 11:
LABEL_14:
      v6 = 0;
      v7 = v4;
      v4 = 1;
LABEL_15:
      v8 = 1;
      break;
    case 12:
    case 14:
    case 16:
    case 21:
LABEL_9:
      v6 = 0;
      v8 = 0;
      v7 = v4;
      v4 = 1;
      break;
    default:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      break;
  }
  *(_DWORD *)result = v4;
  *(_BYTE *)(result + 4) = v6;
  *(_BYTE *)(result + 5) = v6;
  *(_BYTE *)(result + 6) = v7;
  *(_BYTE *)(result + 10) = v8;
  *(_WORD *)(result + 7) = -256;
  *(_BYTE *)(result + 9) = 0;
  v9 = a3;
  if (a3 >= 0xFu)
    v9 = 15;
  if (a4 >= 0xFu)
    v10 = 15;
  else
    v10 = a4;
  *(_BYTE *)(result + 16) = v9 | (16 * v10);
  *(_BYTE *)(result + 17) = (a2 - 17) < 2;
  return result;
}

void sub_1B68BBDE8(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v12;
  int v13;
  int v15;
  int v16;
  int v17;
  int v18;
  signed int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  double v32;
  int v33;
  int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  uint64_t v46;
  double v47;
  int v48;
  int v49;
  double v50;
  double v51;
  double v52;
  double v53;
  unsigned int v54;
  int v55;
  double v56;
  double v57;
  int v58;
  uint64_t v59;
  double v60;
  int v61;
  int v62;
  double v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  double v69;
  double v70;
  uint64_t v71;
  double v72;
  int *v73;
  double v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  double v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  double *v88;
  uint64_t i;
  double v90;
  uint8x8_t v91;
  double v92;
  uint8x8_t v93;
  double v94;
  uint8x8_t v95;
  double v96;
  uint8x8_t v97;
  double v98;
  uint8x8_t v99;
  double v100;
  uint8x8_t v101;
  double v102;
  uint8x8_t v103;
  double v104;
  uint8x8_t v105;
  double v106;
  uint8x8_t v107;
  double v108;
  uint8x8_t v109;
  double v110;
  uint8x8_t v111;
  double v112;
  uint8x8_t v113;
  double v114;
  uint8x8_t v115;
  double v116;
  uint8x8_t v117;
  double v118;
  uint8x8_t v119;
  double v120;
  uint8x8_t v121;
  uint64_t v122;
  float v123;
  uint64_t v124;
  float32x2_t v125;
  unsigned int v126;
  double v127;
  BOOL v128;
  int v129;
  double v130;
  int v131;
  double v132;
  uint64_t v133;
  int v134;
  double v135;
  double v136;
  double v137;
  uint64_t v138;
  int v139;
  float v140;
  float v141;
  float v142;
  float v143;
  int v144;
  int v145;
  int v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  double v155;
  uint64_t v156;
  int v157;
  float v158;
  float v159;
  float v160;
  unsigned int v161;
  int v162;
  double v163;
  float v164;
  float v165;
  uint64_t v166;
  double v167;
  double v168;
  uint64_t v169;
  int v170;
  float v171;
  float v172;
  float v173;
  uint64_t *v174;
  unsigned int v175;
  uint64_t v176;
  double v177;
  uint64_t v178;
  double v179;
  uint64_t v180;
  double v181;
  uint64_t v182;
  double v183;
  double v184;
  double v185;
  double v186;
  float v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  int v198;
  int v199;
  float v200;
  float v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  uint64_t v210;
  float v211;
  float v212;
  float v213;
  float v214;
  int v215;
  float v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  signed int v226;
  int v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  int v234;
  int v235;
  int v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  unsigned int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  double v258;
  float v259;
  int v260;
  int v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  int v267;
  int v268;
  float v269;
  double v270;
  double v271;
  int v272;
  unsigned int v273;
  int v274;
  int v275;
  int v276;
  double v277;
  double v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  unsigned int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  double v296;
  float v297;
  int v298;
  int v299;
  int v300;
  uint64_t v301;
  int v302;
  float v303;
  int v304;
  uint64_t v305;
  int v308;
  uint64_t v309;
  __int128 v310;
  double v311;
  int v312;
  uint64_t v313;
  double v314[34];

  v8 = a6;
  v314[32] = *(double *)MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a7 + 1276))
  {
    if (!*(_DWORD *)(a1 + 16))
      *(double *)(a6 + 80) = *(double *)(a6 + 80) * 0.899999976 + *(double *)(a6 + 104) * 0.100000001;
  }
  else
  {
    v12 = *(_QWORD *)(a6 + 104);
    *(double *)(a6 + 72) = (float)*(int *)(a1 + 40);
    *(_QWORD *)(a6 + 80) = v12;
  }
  if (*(_BYTE *)(a1 + 52) && *(_BYTE *)(a1 + 54))
    *(_DWORD *)(a5 + 208) = 12;
  v13 = *(_DWORD *)(a7 + 5004);
  *(_DWORD *)(a5 + 3628) = v13;
  if (a2[2] != 1)
    a8 = 0;
  if (*(_BYTE *)(a1 + 52))
  {
    *(_QWORD *)(a5 + 3608) = 0;
    *(_DWORD *)(a5 + 3616) = 0;
    if (a2[2])
    {
      v15 = *(unsigned __int16 *)(a7 + 4726);
      v16 = *(_DWORD *)(a5 + 240);
      if (v16 == -1)
      {
        v20 = 0;
        v19 = 0;
      }
      else
      {
        v17 = *(_DWORD *)(a5 + 3596);
        v18 = v15 - v16;
        if (v18 < 1)
        {
          if (v18 < 0)
          {
            v226 = 10 * v17 / (*(_DWORD *)(a5 + 3620) + 1) * v17 / (*(_DWORD *)(a5 + 3620) + 1);
            if (v226 >= 20)
              v226 = 20;
            if (v16)
              v227 = -(v18 * v226) / v16;
            else
              v227 = 0;
            if (-v227 < -3 || v227 == 3)
              v20 = -3;
            else
              v20 = -v227;
            v19 = -v226;
          }
          else
          {
            v20 = 0;
            v19 = 0;
          }
        }
        else
        {
          v19 = 10 * *(_DWORD *)(a5 + 3620) / (v17 + 1) * *(_DWORD *)(a5 + 3620) / (v17 + 1);
          if (v19 >= 20)
            v19 = 20;
          if (v16)
            v20 = v19 * v18 / v16;
          else
            v20 = 0;
          if (v20 >= 5)
            v20 = 5;
        }
        v15 = (v18 + 8 * v16 + 4) >> 3;
      }
      *(_DWORD *)(a5 + 240) = v15;
      *(_DWORD *)(a5 + 3608) = v20;
      *(_DWORD *)(a5 + 3616) = v19;
    }
  }
  v21 = *(unsigned __int8 *)(a7 + 1354);
  *(_QWORD *)(a5 + 216) = 0;
  *(_QWORD *)(a5 + 224) = 0;
  *(_QWORD *)(a5 + 232) = 0;
  *(_QWORD *)(a5 + 440) = 0;
  *(_QWORD *)(a5 + 448) = 0;
  v22 = *(_QWORD *)(a5 + 40);
  v23 = *(_QWORD *)(a5 + 48);
  v24 = *(double *)(a5 + 64);
  v25 = *(double *)(a5 + 72);
  v26 = *(double *)(a5 + 80);
  v27 = *(double *)(a5 + 88);
  v28 = a2[2];
  if (v28 == 2)
  {
    v25 = sub_1B68F7888(*(double *)(a5 + 72));
    v26 = sub_1B68F7888(v26);
    v44 = sub_1B68F7888(v25 * (*(double *)(v8 + 64) * (double)*(int *)(v8 + 44)) / (v26 * *(double *)(v8 + 56)));
    v45 = *(_DWORD *)(v8 + 48);
    v46 = (uint64_t)(sub_1B68F7888(v27 / (v44 + (double)v45)) + 0.5);
    v47 = *(double *)(v8 + 32);
    if (v47 <= (double)v46)
      v29 = v46;
    else
      v29 = (uint64_t)v47;
    v48 = v45 - 1;
    *(_DWORD *)(v8 + 48) = v45 - 1;
    v49 = *(_DWORD *)(a1 + 16);
    if (v49 && v45 == 1)
    {
      *(_DWORD *)(a5 + 3584) = *(double *)(v8 + 96) != *(double *)(v8 + 72);
      v50 = *(double *)(v8 + 96);
      v51 = *(double *)(v8 + 104);
      v52 = 30.0;
      if (v51 <= 30.0)
        v52 = *(double *)(v8 + 104);
      if (v51 >= 2.0)
        v53 = v52;
      else
        v53 = 2.0;
      *(double *)(v8 + 72) = v50;
      *(double *)(v8 + 80) = v53;
      v54 = (int)(v53 + 0.5) & 0xFFFFFFFE;
      *(_DWORD *)(v8 + 92) = v54;
      v55 = v54 / *(_DWORD *)(a5 + 4);
      *(_DWORD *)(v8 + 44) = v55;
      *(_DWORD *)(v8 + 48) = v54 - v55;
      v56 = sub_1B68F7888(v50 * (double)(int)v54) / v53;
      goto LABEL_61;
    }
  }
  else
  {
    v29 = *(_QWORD *)(a5 + 56);
    if (v28 != 1)
    {
      if (!v28)
      {
        v30 = *(_DWORD *)a5 + 1;
        v31 = *(_DWORD *)(a5 + 3592);
        v32 = (double)v31 * 0.2;
        if (*(_BYTE *)(a1 + 52))
          v33 = v30 >> 3;
        else
          v33 = 0;
        v34 = v33 + v30;
        v35 = (double)v34;
        v36 = v27 - sub_1B68F7888((double)((v34 - *(_DWORD *)(a5 + 3588)) * v31) / (double)v34);
        v37 = *(double *)(a5 + 3600) + v36;
        *(double *)(a5 + 3600) = v37;
        v38 = v32 * 0.5 + (v37 - v32 * 0.5) * 0.5;
        if (v37 <= v32 * 0.5)
          v38 = v37;
        v39 = (v32 + v37) * 0.5 - v32;
        if (v37 >= -v32)
          v39 = v37;
        if (v37 < 0.0)
          v40 = v39;
        else
          v40 = v38;
        *(_QWORD *)(v8 + 56) = *(_QWORD *)(a5 + 16);
        *(_QWORD *)(v8 + 64) = *(_QWORD *)(a5 + 24);
        *(double *)(v8 + 32) = (double)*(uint64_t *)(a5 + 32);
        v41 = *(double *)(v8 + 72);
        if (*(_BYTE *)(a1 + 52))
        {
          v42 = sub_1B68F7888(v41 * v35 / *(double *)(v8 + 80));
          v43 = sub_1B68F7888(v40 + v42);
          v27 = 0.0;
          if (v43 >= 0.0)
          {
            *(double *)(a5 + 3600) = *(double *)(a5 + 3600) - v40;
            v27 = v43;
          }
        }
        else
        {
          v63 = sub_1B68F7888(v41 * (double)*(int *)a5 / *(double *)(v8 + 80));
          *(double *)(a5 + 3600) = *(double *)(a5 + 3600) - v36;
          v27 = v36 + v63;
        }
        *(_DWORD *)(v8 + 40) = 1;
        if (v21)
        {
          v64 = *(_DWORD *)a5 - 1;
          if (*(int *)a5 < 1)
            v64 = *(_DWORD *)a5;
          v65 = v64 >> 1;
          if (*(_DWORD *)(a5 + 4) == 1)
            v66 = *(_DWORD *)a5;
          else
            v66 = v65 + 1;
        }
        else
        {
          v67 = *(_DWORD *)a5 / *(_DWORD *)(a5 + 4);
          *(_DWORD *)(v8 + 44) = v67;
          v66 = *(_DWORD *)a5 + v67 - *(_DWORD *)(a5 + 4) * v67;
        }
        *(_DWORD *)(v8 + 44) = v66;
        v68 = *(_DWORD *)a5 - v66;
        *(_DWORD *)(v8 + 48) = v68;
        ++*(_DWORD *)(v8 + 28);
        v69 = sub_1B68F7888(v25 * (double)v66 / (v24 * *(double *)(v8 + 56)));
        v70 = sub_1B68F7888(v26 * (double)v68 / (v24 * *(double *)(v8 + 64)));
        v71 = (uint64_t)sub_1B68F7888(v27 / (v70 + v69 + 1.0));
        v72 = *(double *)(v8 + 32);
        if (v72 <= (double)v71)
          v22 = v71;
        else
          v22 = (uint64_t)v72;
        *(_DWORD *)(v8 + 40) = 0;
        *(_DWORD *)(a5 + 3588) = 0;
        *(_DWORD *)(a5 + 3592) = (v27 + 0.5);
        *(_DWORD *)(a5 + 3596) = (v27 / v35);
      }
      goto LABEL_77;
    }
    *(_QWORD *)(a6 + 64) = 0x3FF6666666666666;
    v57 = sub_1B68F7888(v26 * (*(double *)(a6 + 56) * (double)*(int *)(a6 + 48)) / (v25 * 1.4));
    v58 = *(_DWORD *)(v8 + 44);
    v59 = (uint64_t)(sub_1B68F7888(v27 / (v57 + (double)v58)) + 0.5);
    v60 = *(double *)(v8 + 32);
    if (v60 <= (double)v59)
      v23 = v59;
    else
      v23 = (uint64_t)v60;
    v48 = v58 - 1;
    *(_DWORD *)(v8 + 44) = v58 - 1;
    if (*(_DWORD *)(a1 + 28))
      goto LABEL_77;
    v49 = *(_DWORD *)(a1 + 16);
    if (v49 && v58 == 1)
    {
      *(_DWORD *)(a5 + 3584) = *(double *)(v8 + 96) != *(double *)(v8 + 72);
      v310 = *(_OWORD *)(v8 + 96);
      *(_OWORD *)(v8 + 72) = v310;
      v61 = *(_DWORD *)(v8 + 92);
      v62 = v61 / *(_DWORD *)(a5 + 4);
      *(_DWORD *)(v8 + 44) = v62;
      *(_DWORD *)(v8 + 48) = v61 - v62;
      v56 = sub_1B68F7888((double)v61 * *(double *)&v310) / *((double *)&v310 + 1);
LABEL_61:
      v27 = v27 + v56;
      goto LABEL_77;
    }
  }
  if (v49 && v48)
    *(_DWORD *)(a5 + 3584) = 0;
LABEL_77:
  sub_1B68B68D8((double *)a5, v24, v25, v26, v27);
  *(_QWORD *)(a5 + 40) = (uint64_t)(sub_1B68F7888((double)v22) + 0.5);
  *(_QWORD *)(a5 + 48) = (uint64_t)(sub_1B68F7888((double)v23) + 0.5);
  *(_QWORD *)(a5 + 56) = (uint64_t)(sub_1B68F7888((double)v29) + 0.5);
  *(_DWORD *)(a5 + 8) = 0;
  v73 = a2;
  v74 = sub_1B68F7888(*(double *)(a5 + 160) / (double)a2[1]);
  *(_QWORD *)(a5 + 160) = 0;
  bzero((void *)(a5 + 1480), 0x7FCuLL);
  v75 = a2[1];
  if (v75 < 1)
  {
    v83 = 0.0;
  }
  else
  {
    v304 = v13;
    v305 = v8;
    v76 = a4;
    v77 = 0;
    v78 = a2[4];
    v79 = v78 >> 4;
    v80 = 16 * v76;
    if (v78 >> 4 <= 1)
      v81 = 1;
    else
      v81 = v78 >> 4;
    v308 = v81;
    v82 = v76;
    v83 = 0.0;
    v309 = 16 * v76;
    do
    {
      if (v78 >= 16)
      {
        v84 = v308 + v77;
        v85 = a3;
        do
        {
          v86 = 0;
          v87 = 0;
          v88 = v314;
          do
          {
            for (i = 0; i != 16; ++i)
              *((_BYTE *)v88 + i) = *(_BYTE *)(v85 + v86 + (int)i);
            ++v87;
            v88 += 2;
            v86 += v82;
          }
          while (v87 != 16);
          sub_1B6906F8C((uint64_t)v314, 0, 0, 0, a5);
          sub_1B6906F8C((uint64_t)v314, 1u, 0, 8u, a5);
          sub_1B6906F8C((uint64_t)v314, 2u, 8u, 0, a5);
          v90 = sub_1B6906F8C((uint64_t)v314, 3u, 8u, 8u, a5);
          sub_1B6907044((uint64_t)v314, 0, 0, 0, a5, v90, v91);
          sub_1B6907044((uint64_t)v314, 1, 0, 4u, a5, v92, v93);
          sub_1B6907044((uint64_t)v314, 2, 0, 8u, a5, v94, v95);
          sub_1B6907044((uint64_t)v314, 3, 0, 0xCu, a5, v96, v97);
          sub_1B6907044((uint64_t)v314, 4, 4u, 0, a5, v98, v99);
          sub_1B6907044((uint64_t)v314, 5, 4u, 4u, a5, v100, v101);
          sub_1B6907044((uint64_t)v314, 6, 4u, 8u, a5, v102, v103);
          sub_1B6907044((uint64_t)v314, 7, 4u, 0xCu, a5, v104, v105);
          sub_1B6907044((uint64_t)v314, 8, 8u, 0, a5, v106, v107);
          sub_1B6907044((uint64_t)v314, 9, 8u, 4u, a5, v108, v109);
          sub_1B6907044((uint64_t)v314, 10, 8u, 8u, a5, v110, v111);
          sub_1B6907044((uint64_t)v314, 11, 8u, 0xCu, a5, v112, v113);
          sub_1B6907044((uint64_t)v314, 12, 0xCu, 0, a5, v114, v115);
          sub_1B6907044((uint64_t)v314, 13, 0xCu, 4u, a5, v116, v117);
          sub_1B6907044((uint64_t)v314, 14, 0xCu, 8u, a5, v118, v119);
          sub_1B6907044((uint64_t)v314, 15, 0xCu, 0xCu, a5, v120, v121);
          v122 = 0;
          v123 = 100000000.0;
          do
          {
            if (*(float *)(a5 + 176 + v122) < v123)
              v123 = *(float *)(a5 + 176 + v122);
            v122 += 4;
          }
          while (v122 != 16);
          v124 = 0;
          v125.f32[0] = (float)((float)(*(float *)(a5 + 176) + *(float *)(a5 + 180)) + *(float *)(a5 + 184))
                      + *(float *)(a5 + 188);
          v125.f32[1] = v123;
          *(float64x2_t *)(a5 + 224) = vaddq_f64(*(float64x2_t *)(a5 + 224), vcvtq_f64_f32(v125));
          *(double *)(a5 + 448) = *(double *)(a5 + 448)
                                + (double)vaddvq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(a5 + 376), *(int32x4_t *)(a5 + 408)), vaddq_s32(*(int32x4_t *)(a5 + 392), *(int32x4_t *)(a5 + 424))));
          v126 = 100000000;
          do
          {
            if (*(_DWORD *)(a5 + 376 + v124) < v126)
              v126 = *(_DWORD *)(a5 + 376 + v124);
            v124 += 4;
          }
          while (v124 != 60);
          *(double *)(a5 + 440) = *(double *)(a5 + 440) + (double)v126;
          v127 = v123 + 1.0;
          v83 = v83 + (v74 + v127 * 2.0) / (v127 + v74 * 2.0);
          *(double *)(a5 + 160) = *(double *)(a5 + 160) + v127;
          v85 += 16;
          ++v77;
        }
        while (v77 != v84);
        v77 = v84;
        v79 = v78 >> 4;
        v80 = v309;
      }
      a3 += v80;
      v128 = __OFSUB__(v75, v79);
      v75 -= v79;
    }
    while (!((v75 < 0) ^ v128 | (v75 == 0)));
    v8 = v305;
    v73 = a2;
    v75 = a2[1];
    v13 = v304;
  }
  v129 = a8 | v13;
  v130 = sub_1B68F7888(v83 / (double)v75);
  *(double *)(a5 + 320) = v130;
  *(double *)(a5 + 216) = sub_1B68F7888(*(double *)(a5 + 216) / (double)(4 * v73[1]));
  *(double *)(a5 + 224) = sub_1B68F7888(*(double *)(a5 + 224) / (double)(4 * v73[1]));
  *(double *)(a5 + 448) = sub_1B68F7888(*(double *)(a5 + 448) / (double)(16 * v73[1]));
  *(double *)(a5 + 232) = sub_1B68F7888(*(double *)(a5 + 232) / (double)v73[1]);
  *(double *)(a5 + 440) = sub_1B68F7888(*(double *)(a5 + 440) / (double)v73[1]);
  v131 = v73[2];
  if (v131 != 2)
  {
    if (v131 != 1)
    {
      if (v131)
        return;
      v313 = 0;
      v312 = 0;
      v132 = *(double *)(a5 + 112);
      v133 = *(_QWORD *)(a5 + 40);
      if (*(_DWORD *)v8)
      {
        *(_QWORD *)(a5 + 328) = v133;
        v134 = *(_DWORD *)a1;
        *(_DWORD *)(a5 + 352) = *(_DWORD *)a1;
        *(_DWORD *)(v8 + 116) = v134;
        v133 = *(_QWORD *)(a5 + 40);
      }
      v135 = *(double *)(a5 + 120) + (double)(*(_QWORD *)(a5 + 328) - v133);
      if (v135 < 0.0)
        v135 = *(double *)(a5 + 248);
      v136 = sub_1B68F7888(v135);
      v137 = sub_1B68F7888(v136 * 31.0 / v132);
      v311 = sub_1B68F7888(v137 * *(double *)(a5 + 320));
      *(double *)(a5 + 120) = v136;
      sub_1B68BDB8C((uint64_t)v73, v314, &v311, (int *)&v313 + 1, (int *)a5);
      v138 = 0;
      v139 = 0;
      v141 = 10000000.0;
      do
      {
        v140 = *(double *)(a5 + 440);
        v142 = v140 - flt_1B6932568[v138];
        if (v142 < 0.0)
          v142 = -v142;
        if (v142 <= v141)
        {
          v139 = v138;
          v141 = v142;
        }
        ++v138;
      }
      while (v138 != 18);
      sub_1B68BDD30(a1, v139, &v313, &v312, v8);
      v143 = dbl_1B6931E58[v139] / (sub_1B68F7888((double)v133 / *(double *)(a5 + 368)) - dbl_1B6931DC8[v139]);
      v144 = (int)(v143 + 0.75);
      v145 = v144 - HIDWORD(v313);
      if (v144 - HIDWORD(v313) >= 4)
        v145 = 4;
      if (v145 <= -4)
        v145 = -4;
      v146 = HIDWORD(v313) + ((v145 + ((v145 & 0xC0) >> 6)) >> 2);
      v73[3] = v146;
      if (*(_DWORD *)(a1 + 16) && !*(_DWORD *)v8)
      {
        if (*(_DWORD *)(a1 + 20))
          v209 = 0;
        else
          v209 = -2;
        v210 = (int)v313;
        v73[3] = v209 + dword_1B6931EE8[9 * (int)v313 + v312] + v144;
        v211 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
        v212 = 0.0;
        v213 = 0.0;
        if (v211 >= 0.0)
        {
          v213 = 100.0;
          if (v211 <= 100.0)
            v213 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
        }
        v214 = 1.0;
        if (v213 < 0.0)
          v214 = -1.0;
        *(float *)(a5 + 3552) = v213;
        v215 = dword_1B693202C[(float)((float)(v213 + (float)(v214 * 0.0)) / 5.0)];
        v216 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
        if (v216 >= 0.0)
        {
          v212 = 100.0;
          if (v216 <= 100.0)
            v212 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
        }
        *(float *)(a5 + 3564) = v212;
        v217 = v73[3] + v215;
        if (v217 > v144)
          v144 = v217;
        v218 = dword_1B693207C[v210];
        if (v144 <= v218)
          v144 = v218;
        v73[3] = v144;
        v146 = (int)(float)(*(float *)(a5 + 3540) * (float)*(int *)(v8 + 120));
        if (v144 <= v146)
          goto LABEL_124;
      }
      else if (v146 >= dword_1B69320A0[9 * (int)v313 + v312] + 45)
      {
        v146 = dword_1B69320A0[9 * (int)v313 + v312] + 45;
      }
      v73[3] = v146;
      v144 = v146;
LABEL_124:
      if (*(_BYTE *)(a1 + 54))
      {
        if (v129)
        {
          *(_DWORD *)(a5 + 3632) = 0;
          v144 = v73[3];
        }
        else
        {
          v219 = *(_DWORD *)(v8 + 24);
          if (v219)
          {
            v220 = v144 - v219;
            v221 = (int)(float)((float)v219 * 0.2);
            if (v144 - v219 < -v221)
              v144 = v219 - v221;
            v222 = v219 + v221;
            if (v220 > v221)
              v144 = v222;
          }
        }
      }
      if (v144 >= 51)
        v144 = 51;
      if (v144 <= 12)
        v144 = 12;
      v73[3] = v144;
      *(_DWORD *)(v8 + 12) = v144;
      *(_DWORD *)(v8 + 116) = v144;
      return;
    }
    v313 = 0;
    v312 = 0;
    v150 = *(double *)(a5 + 112);
    if (*(_DWORD *)(v8 + 4))
    {
      *(_DWORD *)(v8 + 4) = 0;
      v151 = *(_QWORD *)(a5 + 48);
      *(_QWORD *)(a5 + 336) = v151;
      *(_DWORD *)(a5 + 356) = *(_DWORD *)(a1 + 4);
      v130 = *(double *)(a5 + 320);
      v152 = v151;
    }
    else
    {
      v152 = *(_QWORD *)(a5 + 336);
      v151 = *(_QWORD *)(a5 + 48);
    }
    v311 = 0.0;
    v166 = v152 - v151;
    if (*(double *)(a5 + 128) + (double)v166 >= 0.0)
      v167 = *(double *)(a5 + 128) + (double)v166;
    else
      v167 = 0.0;
    v168 = sub_1B68F7888(v167 * 31.0 / v150);
    v314[0] = sub_1B68F7888(v168 * v130);
    *(double *)(a5 + 128) = v167;
    sub_1B68BDB8C((uint64_t)v73, &v311, v314, (int *)&v313 + 1, (int *)a5);
    v169 = 0;
    v170 = 0;
    v172 = 10000000.0;
    do
    {
      v171 = *(double *)(a5 + 440);
      v173 = v171 - flt_1B6932568[v169];
      if (v173 < 0.0)
        v173 = -v173;
      if (v173 <= v172)
      {
        v170 = v169;
        v172 = v173;
      }
      ++v169;
    }
    while (v169 != 18);
    sub_1B68BDD30(a1, v170, &v313, &v312, v8);
    *(_QWORD *)(a5 + 272) = *(_QWORD *)(a5 + 276);
    *(_DWORD *)(a5 + 280) = *(_DWORD *)(a5 + 284);
    *(float *)(a5 + 284) = (float)v151;
    v174 = (uint64_t *)(a5 + 288);
    *(_QWORD *)(a5 + 288) = *(_QWORD *)(a5 + 292);
    *(_DWORD *)(a5 + 296) = *(_DWORD *)(a5 + 300);
    *(_DWORD *)(a5 + 300) = 0;
    v175 = *(_DWORD *)(a5 + 308);
    if (!*(_BYTE *)(a1 + 53) || v175 < 3)
    {
      if (!v175)
        *(_DWORD *)(v8 + 24) = *(_DWORD *)(v8 + 12);
      if (*(_DWORD *)(a1 + 16))
      {
        v193 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
        v194 = 0.0;
        v195 = 0.0;
        if (v193 >= 0.0)
        {
          v195 = 100.0;
          if (v193 <= 100.0)
            v195 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
        }
        *(float *)(a5 + 3552) = v195;
        v196 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
        if (v196 >= 0.0)
        {
          v194 = 100.0;
          if (v196 <= 100.0)
            v194 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
        }
        *(float *)(a5 + 3564) = v194;
        v197 = 1.0;
        if (v194 < 0.0)
          v197 = -1.0;
        v198 = (int)(float)((float)(v194 + (float)(v197 * 0.0)) / 5.0);
        if (v198 > 0x13)
        {
          if (v198 >= 0)
            v199 = 9;
          else
            v199 = -3;
        }
        else
        {
          v199 = dword_1B69321E4[v198];
        }
        if (*(_DWORD *)(a5 + 308) <= 2u && v199 < 0)
          v199 = 0;
        v225 = *(_DWORD *)(v8 + 24) + v199;
        v73[3] = v225;
        if (!*(_DWORD *)(a5 + 308))
          v225 += 3;
        v73[3] = v225;
        if (*(_DWORD *)(a5 + 308) == 1 && *(float *)(a5 + 3564) < 40.0)
          v225 -= 2;
        v73[3] = v225;
        if (*(_DWORD *)(a5 + 308) == 2 && *(float *)(a5 + 3564) < 20.0)
          --v225;
      }
      else
      {
        v223 = *(_DWORD *)(v8 + 24);
        v224 = HIDWORD(v313) - v223;
        if (HIDWORD(v313) - v223 >= 5)
          v224 = 5;
        if (v224 <= -4)
          v224 = -4;
        v225 = v224 + v223;
      }
      goto LABEL_418;
    }
    v176 = 0;
    v177 = 0.0;
    do
    {
      v177 = v177 + *(float *)((char *)v174 + v176);
      v176 += 4;
    }
    while (v176 != 12);
    v178 = 0;
    v179 = 0.0;
    do
    {
      v179 = v179 + *(float *)(a5 + 272 + v178);
      v178 += 4;
    }
    while (v178 != 12);
    v180 = 0;
    v181 = 0.0;
    do
    {
      v181 = v181 + *(float *)((char *)v174 + v180) * *(float *)((char *)v174 + v180);
      v180 += 4;
    }
    while (v180 != 12);
    v182 = 0;
    v183 = 0.0;
    do
    {
      v183 = v183 + *(float *)(a5 + v182 + 288) * *(float *)(a5 + v182 + 272);
      v182 += 4;
    }
    while (v182 != 12);
    v184 = v179 / 3.0;
    v185 = v177 / 3.0;
    v186 = (v183 + v185 * -3.0 * v184) / (v181 + v185 * -3.0 * v185 + 0.000001);
    v187 = ((float)v151 - (v184 - v185 * v186)) / (v186 + 0.000001);
    v188 = (int)(1.0 / v187 + 0.5);
    if (v188 >= 51)
      v189 = 51;
    else
      v189 = (int)(1.0 / v187 + 0.5);
    if (v189 <= 18)
      v189 = 18;
    if (v188 < 12)
    {
      v204 = (int)(1.0 / *(float *)(a5 + 288) + 0.1);
      v205 = (int)(1.0 / *(float *)(a5 + 292) + 0.1);
      v206 = (int)(1.0 / *(float *)(a5 + 296) + 0.1);
      if (v204 <= v205)
        v207 = (int)(1.0 / *(float *)(a5 + 292) + 0.1);
      else
        v207 = (int)(1.0 / *(float *)(a5 + 288) + 0.1);
      if (v204 >= v205)
        v204 = (int)(1.0 / *(float *)(a5 + 292) + 0.1);
      if (v204 <= v206)
        v204 = (int)(1.0 / *(float *)(a5 + 296) + 0.1);
      if (v207 <= v206)
        v204 = v207;
      v208 = HIDWORD(v313) - v204;
      if (HIDWORD(v313) != v204)
      {
        if (v208 < 0)
        {
          if (v208 <= -4)
            v208 = -4;
        }
        else if (v208 >= 5)
        {
          v208 = 5;
        }
      }
      if (!*(_DWORD *)(a1 + 16))
        goto LABEL_386;
    }
    else if (!*(_DWORD *)(a1 + 16))
    {
      v190 = (int)(1.0 / *(float *)(a5 + 296) + 0.1);
      v191 = v190 - v189;
      if (v191)
      {
        v192 = *(_DWORD *)(a1 + 48);
        if (v191 < 0)
        {
          if (v191 <= -v192)
            v192 = -v192;
          else
            v192 = v191;
        }
        else if (v191 < v192)
        {
          v192 = v191;
        }
      }
      else
      {
        v192 = 0;
      }
      v208 = 0;
      v204 = v190 - v192;
LABEL_386:
      v225 = v208 + v204;
      if (v225 >= dword_1B69320A0[9 * (int)v313 + v312] + 45)
        v225 = dword_1B69320A0[9 * (int)v313 + v312] + 45;
LABEL_418:
      v73[3] = v225;
      if (*(_BYTE *)(a1 + 54))
      {
        if (v129)
        {
          v281 = *(_DWORD *)(v8 + 116);
          if (v281)
          {
            v282 = v225 - v281;
            v283 = (int)(float)((float)v281 * 0.1);
            if (v225 - v281 <= v283)
            {
              v288 = v281 - v283;
              if (v282 < -v283)
                v225 = v288;
            }
            else
            {
              v225 = v281 + v283;
            }
          }
          v73[3] = v225;
        }
        else
        {
          v284 = *(_DWORD *)(a5 + 3632);
          if (v284 <= 2)
          {
            v285 = *(_DWORD *)(v8 + 116);
            v286 = v225 - v285;
            if (v225 < v285)
            {
              if (v285)
              {
                v287 = (int)(float)((float)v285 * 0.15);
                if (v286 <= v287)
                {
                  v289 = v285 - v287;
                  if (v286 < -v287)
                    v225 = v289;
                }
                else
                {
                  v225 = v285 + v287;
                }
              }
              v73[3] = v225;
              v284 = *(_DWORD *)(a5 + 3632);
            }
          }
          *(_DWORD *)(a5 + 3632) = v284 + 1;
        }
      }
      if (*(_BYTE *)(a1 + 52))
      {
        v290 = v73[3];
        v291 = v290 >> 2;
        v292 = *(_DWORD *)(a5 + 3608);
        if (v292 <= -(v290 >> 3))
          v293 = -(v290 >> 3);
        else
          v293 = *(_DWORD *)(a5 + 3608);
        if (v292 <= v290 >> 2)
          v291 = v293;
        v294 = v291 + v290;
        if (v291 < 0 || v294 <= 42)
        {
          v73[3] = v294;
          *(_DWORD *)(a5 + 3612) = v291;
        }
        else if (v290 < 42)
        {
          *(_DWORD *)(a5 + 3612) = 42 - v290;
          v73[3] = 42;
        }
      }
      v295 = v73[3];
      if (v295 >= 51)
        v295 = 51;
      if (v295 <= 12)
        v295 = 12;
      v73[3] = v295;
      *(_DWORD *)(v8 + 24) = v295;
      *(double *)(a5 + 3576) = (double)*(uint64_t *)(a5 + 48);
      if (*(_DWORD *)(a1 + 16) && *(_DWORD *)(a5 + 3584) && !*(_DWORD *)(a1 + 28))
      {
        v296 = sub_1B68F7888((double)*(int *)(a5 + 3536) / *(double *)(v8 + 80));
        *(double *)(a5 + 3528) = v296;
        v297 = sub_1B68F7888(v296 * *(double *)(v8 + 72) / 1000.0);
        *(float *)(a5 + 3556) = v297;
        *(float *)(a5 + 3544) = v297;
      }
      v298 = *(_DWORD *)(a5 + 3624);
      if (v298 == -1)
        v299 = v73[3];
      else
        v299 = v298 + ((v73[3] - v298 + 8 * v298) >> 3);
      *(_DWORD *)(a5 + 3624) = v299;
      v300 = *(_DWORD *)(a5 + 296);
      v301 = *v174;
      *(_QWORD *)(a5 + 292) = *v174;
      *(_DWORD *)(a5 + 300) = v300;
      *(_DWORD *)(a5 + 288) = 0;
      v302 = v73[3];
      *(_DWORD *)(a5 + 296) = v300;
      *v174 = v301;
      v303 = 1.0 / (float)v302;
      if (!v302)
        v303 = 0.0;
      *(float *)(a5 + 300) = v303;
      return;
    }
    v262 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
    v263 = 0.0;
    v264 = 0.0;
    if (v262 >= 0.0)
    {
      v264 = 100.0;
      if (v262 <= 100.0)
        v264 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
    }
    *(float *)(a5 + 3552) = v264;
    v265 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
    if (v265 >= 0.0)
    {
      v263 = 100.0;
      if (v265 <= 100.0)
        v263 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
    }
    *(float *)(a5 + 3564) = v263;
    v266 = 1.0;
    if (v263 < 0.0)
      v266 = -1.0;
    v267 = (int)(float)((float)(v263 + (float)(v266 * 0.0)) / 5.0);
    if (v267 > 0x13)
    {
      if (v267 >= 0)
        v268 = 9;
      else
        v268 = -3;
    }
    else
    {
      v268 = dword_1B69321E4[v267];
    }
    v269 = (float)*(unsigned int *)(a5 + 4);
    v270 = sub_1B68F7888(*(double *)(v8 + 72) * v269 / *(double *)(v8 + 80)) * 0.899999976;
    if (*(double *)(a5 + 3576) <= v270)
      v270 = *(double *)(a5 + 3576);
    v271 = sub_1B68F7888(v270);
    v272 = *(_DWORD *)(v8 + 24) + v268;
    v73[3] = v272;
    v273 = *(_DWORD *)(v8 + 24);
    v274 = v272 - v273;
    v275 = v274;
    if (v274 < 0)
    {
      if ((int)v273 >= 23)
      {
        if (v273 >= 0x1E)
        {
          if (v273 >= 0x25)
          {
            if (v273 >= 0x2C)
              v275 = -4;
            else
              v275 = -3;
          }
          else
          {
            v275 = -2;
          }
        }
        else
        {
          v275 = -1;
        }
      }
      else
      {
        v275 = 0;
      }
    }
    if (v274 <= v275)
      v274 = v275;
    v276 = v274 + v273;
    v73[3] = v276;
    v225 = v276;
    if (v276 < *(_DWORD *)(v8 + 24))
    {
      v277 = *(float *)(a5 + 3572);
      v225 = *(_DWORD *)(v8 + 24);
      if (v277 - v271 < 0.0)
      {
        if (v271 * 0.800000012 <= v277)
          v225 = *(_DWORD *)(v8 + 24);
        else
          v225 = v276;
      }
    }
    v73[3] = v225;
    v278 = *(float *)(a5 + 3572);
    if (v271 * 0.100000001 <= v278)
    {
      if (v271 * 0.25 <= v278)
      {
        if (v271 * 0.5 <= v278)
        {
          if (v271 * 0.75 < v278)
            goto LABEL_407;
          v279 = -1;
        }
        else
        {
          v279 = -2;
        }
      }
      else
      {
        v279 = -3;
      }
    }
    else
    {
      v279 = -4;
    }
    v225 = *(_DWORD *)(v8 + 24) + v279;
LABEL_407:
    v73[3] = v225;
    if (v225 == *(_DWORD *)(v8 + 24)
      && *(double *)(v8 + 72) * (float)(v269 * 1.25) / *(double *)(v8 + 80) <= *(float *)(a5 + 3572))
    {
      ++v225;
    }
    v73[3] = v225;
    v280 = *(_DWORD *)(v8 + 24);
    if (v225 < v280 && v225 - v280 <= -2)
    {
      if (v280 > 32)
      {
        if (v280 < 0x27)
          v225 = v280 - 2;
      }
      else
      {
        v225 = v280 - 1;
      }
    }
    if (v225 <= 8)
      v225 = 8;
    goto LABEL_418;
  }
  v313 = 0;
  v312 = 0;
  v147 = *(double *)(a5 + 112);
  if (*(_DWORD *)(v8 + 8))
  {
    *(_DWORD *)(v8 + 8) = 0;
    v148 = *(_QWORD *)(a5 + 56);
    *(_QWORD *)(a5 + 344) = v148;
    *(_DWORD *)(a5 + 360) = *(_DWORD *)(a1 + 32);
    v130 = *(double *)(a5 + 320);
    v149 = v148;
  }
  else
  {
    v149 = *(_QWORD *)(a5 + 344);
    v148 = *(_QWORD *)(a5 + 56);
  }
  v153 = v149 - v148;
  if (*(double *)(a5 + 136) + (double)v153 >= 0.0)
    v154 = *(double *)(a5 + 136) + (double)v153;
  else
    v154 = 0.0;
  v155 = sub_1B68F7888(v154 * 31.0 / v147);
  v311 = sub_1B68F7888(v155 * v130);
  *(double *)(a5 + 136) = v154;
  sub_1B68BDB8C((uint64_t)v73, v314, &v311, (int *)&v313 + 1, (int *)a5);
  v156 = 0;
  v157 = 0;
  v159 = 10000000.0;
  do
  {
    v158 = *(double *)(a5 + 440);
    v160 = v158 - flt_1B6932568[v156];
    if (v160 < 0.0)
      v160 = -v160;
    if (v160 <= v159)
    {
      v157 = v156;
      v159 = v160;
    }
    ++v156;
  }
  while (v156 != 18);
  sub_1B68BDD30(a1, v157, &v313, &v312, v8);
  if (*(_BYTE *)(a1 + 53))
  {
    v161 = *(_DWORD *)(a5 + 4);
    if (*(_DWORD *)(a5 + 312) >= 3 * v161 - 3)
    {
      v200 = *(float *)(a5 + 296);
      if (v200 >= *(float *)(a5 + 300))
        v200 = *(float *)(a5 + 300);
      v201 = 1.0 / v200;
      v202 = (int)((float)(1.0 / v200) + 0.1);
      if (v202 <= 2)
        v202 = 2;
      if (v202 >= 51)
        v202 = 51;
      v203 = HIDWORD(v313) - v202;
      if (HIDWORD(v313) - v202 < 1)
      {
        v203 = 0;
      }
      else if (v203 >= dword_1B6932234[9 * (int)v313 + v312])
      {
        v203 = dword_1B6932234[9 * (int)v313 + v312];
      }
      if (*(_DWORD *)(a1 + 16))
      {
        v228 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
        v229 = 0.0;
        v230 = 0.0;
        if (v228 >= 0.0)
        {
          v230 = 100.0;
          if (v228 <= 100.0)
            v230 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
        }
        *(float *)(a5 + 3552) = v230;
        if (v230 >= 0.0)
          v231 = 1.0;
        else
          v231 = -1.0;
        v232 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
        if (v232 >= 0.0)
        {
          v229 = 100.0;
          if (v232 <= 100.0)
            v229 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
        }
        *(float *)(a5 + 3564) = v229;
        v233 = sub_1B68F7888(-(*(float *)(a5 + 3572) - (float)v161 * (*(double *)(v8 + 72) / *(double *)(v8 + 80))));
        if (v233 <= 0.0)
        {
          v236 = 51;
        }
        else
        {
          v234 = (int)(float)((float)(v229 + (float)(v231 * 0.0)) / 5.0);
          if (v234 > 0x13)
          {
            if (v234 >= 0)
              v235 = 11;
            else
              v235 = -3;
          }
          else
          {
            v235 = dword_1B6932378[v234];
          }
          v260 = (int)(float)(v201 + 0.1);
          if (v260 <= 35)
            v261 = 1;
          else
            v261 = 2;
          v236 = v235 + v260 + v261;
        }
        goto LABEL_318;
      }
      goto LABEL_301;
    }
  }
  v162 = *(_DWORD *)(a5 + 308);
  if (v162 == 1)
  {
    *(_DWORD *)(v8 + 112) = *(_DWORD *)(v8 + 24) + 1;
    v162 = *(_DWORD *)(a5 + 308);
    if (v162 == 1)
    {
      if (*(_DWORD *)(a5 + 312) < *(_DWORD *)(a1 + 28))
      {
        v163 = 1.0 / (double)*(int *)(v8 + 12);
        v164 = *(float *)(a5 + 300);
        if (v163 >= v164)
          v163 = v164;
        v165 = 1.0 / v163;
        v162 = 1;
        goto LABEL_282;
      }
      v162 = 1;
    }
  }
  v237 = *(float *)(a5 + 296);
  v164 = *(float *)(a5 + 300);
  if (v237 >= v164)
    v237 = *(float *)(a5 + 300);
  v165 = 1.0 / v237;
LABEL_282:
  v202 = (int)(v165 + 0.1);
  if (v202 <= 2)
    v202 = 2;
  if (v202 >= 51)
    v202 = 51;
  v203 = HIDWORD(v313) - v202;
  if (HIDWORD(v313) - v202 < 1)
  {
    v203 = 0;
  }
  else if (v203 >= dword_1B6932234[9 * (int)v313 + v312])
  {
    v203 = dword_1B6932234[9 * (int)v313 + v312];
  }
  if (*(_DWORD *)(a1 + 16))
  {
    v238 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
    v239 = 0.0;
    v240 = 0.0;
    if (v238 >= 0.0)
    {
      v240 = 100.0;
      if (v238 <= 100.0)
        v240 = (float)(*(float *)(a5 + 3548) / *(float *)(a5 + 3544)) * 100.0;
    }
    *(float *)(a5 + 3552) = v240;
    v241 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
    if (v241 >= 0.0)
    {
      v239 = 100.0;
      if (v241 <= 100.0)
        v239 = (float)(*(float *)(a5 + 3560) / *(float *)(a5 + 3556)) * 100.0;
    }
    *(float *)(a5 + 3564) = v239;
    v242 = 1.0;
    if (v239 < 0.0)
      v242 = -1.0;
    v243 = (int)(float)((float)(v239 + (float)(v242 * 0.0)) / 5.0);
    if (v243 > 0x13)
    {
      if (v243 >= 0)
        v244 = 11;
      else
        v244 = -3;
    }
    else
    {
      v244 = dword_1B6932378[v243];
    }
    if (((v162 - 1) < 2 || v162 == 3) && v244 < 0)
      v244 = 0;
    if (*(float *)(a5 + 296) < v164)
      v164 = *(float *)(a5 + 296);
    v245 = v244 + (int)(float)((float)(1.0 / v164) + 0.1);
    v73[3] = v245;
    v246 = *(_DWORD *)(a5 + 308);
    v247 = v245 + 2;
    v248 = v245 + 3;
    if (v246 != 1)
      v248 = v245;
    if (v246 != 2)
      v247 = v248;
    if (v246 == 3)
      v236 = v245 + 1;
    else
      v236 = v247;
    goto LABEL_318;
  }
LABEL_301:
  v236 = v203 + v202;
LABEL_318:
  v73[3] = v236;
  if (*(_BYTE *)(a1 + 54))
  {
    if (v129)
    {
      v249 = *(_DWORD *)(v8 + 24);
      if (v249)
      {
        v250 = v236 - v249;
        v251 = (int)(float)((float)v249 * 0.1);
        if (v236 - v249 < -v251)
          v236 = v249 - v251;
        v252 = v249 + v251;
        if (v250 > v251)
          v236 = v252;
      }
    }
    else
    {
      v253 = *(_DWORD *)(a5 + 3632);
      if (v253 <= 2)
      {
        v254 = *(_DWORD *)(v8 + 116);
        v255 = v236 - v254;
        if (v236 < v254)
        {
          if (v254)
          {
            v256 = (int)(float)((float)v254 * 0.2);
            if (v255 < -v256)
              v236 = v254 - v256;
            v257 = v254 + v256;
            if (v255 > v256)
              v236 = v257;
          }
          v73[3] = v236;
          v253 = *(_DWORD *)(a5 + 3632);
        }
      }
      *(_DWORD *)(a5 + 3632) = v253 + 1;
      v236 = v73[3];
    }
  }
  if (v236 >= 51)
    v236 = 51;
  if (v236 <= 12)
    v236 = 12;
  v73[3] = v236;
  *(_DWORD *)(v8 + 112) = v236;
  if (*(_DWORD *)(a1 + 16) && *(_DWORD *)(a5 + 3584))
  {
    v258 = sub_1B68F7888((double)*(int *)(a5 + 3536) / *(double *)(v8 + 80));
    *(double *)(a5 + 3528) = v258;
    v259 = sub_1B68F7888(v258 * *(double *)(v8 + 72) / 1000.0);
    *(float *)(a5 + 3556) = v259;
    *(float *)(a5 + 3544) = v259;
  }
}

void sub_1B68BDB8C(uint64_t a1, double *a2, double *a3, int *a4, int *a5)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  double v13;
  int v14;
  double v15;
  uint64_t v16;
  float v17;
  int v18;
  float v19;
  int v20;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  double v29;

  v7 = a5[52];
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 == 2)
  {
    v9 = a5[90];
  }
  else if (v8 == 1)
  {
    v9 = a5[89];
  }
  else if (v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = a5[88];
  }
  v10 = 0;
  v11 = v7 + 30;
  if (v7 >= 0x33)
    v12 = 51;
  else
    v12 = a5[52];
  if (v11 >= 0x33)
    v11 = 51;
  v13 = *a3;
  if (*a3 < dbl_1B69323C8[v12])
    v13 = dbl_1B69323C8[v12];
  v14 = a5[53];
  if (v13 <= dbl_1B69323C8[v11])
    v15 = v13;
  else
    v15 = dbl_1B69323C8[v11];
  *a3 = v15;
  if ((_DWORD)v7 == 12)
    v16 = 40;
  else
    v16 = 31;
  v17 = 10000000.0;
  v18 = -1;
  do
  {
    v19 = sub_1B68F7888(v15 - dbl_1B69323C8[v7 + v10]);
    if (v19 < 0.0)
      v19 = -v19;
    if (v19 <= v17)
    {
      v18 = v10;
      v17 = v19;
    }
    ++v10;
  }
  while (v16 != v10);
  if (v18 >= 0)
    v20 = 30;
  else
    v20 = 0;
  if (v18 > 0x1E && *(_DWORD *)(a1 + 8) == 2)
    v22 = v20;
  else
    v22 = v18;
  v23 = v7 - v9 + v22;
  if (v23 >= 0)
    v24 = v7 - v9 + v22;
  else
    v24 = -v23;
  if (v23 < 0)
    v25 = -(v14 + v7);
  else
    v25 = v14 - v7;
  v26 = v9 + v25;
  if (v26 >= 0)
    v27 = 30;
  else
    v27 = 0;
  if (v26 < 0x1F)
    v27 = v26;
  if (v24 > v14)
    v22 = v27;
  v28 = v22 + v7;
  if (v28 > 51)
    v29 = 90.51;
  else
    v29 = dbl_1B69323C8[v28];
  *a2 = v29;
  *a4 = v28;
}

uint64_t sub_1B68BDD30(uint64_t result, int a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(result + 16))
  {
    v5 = *(double *)(a5 + 72);
    v6 = *(double *)(a5 + 80) * (double)(*(_DWORD *)(result + 12) * *(_DWORD *)(result + 8));
  }
  else
  {
    v5 = (double)*(int *)(result + 40);
    v6 = (float)(*(float *)(result + 36) * (float)(*(_DWORD *)(result + 12) * *(_DWORD *)(result + 8)));
  }
  v7 = v5 / v6;
  v8 = 0;
  while (v7 > dbl_1B69325B0[v8])
  {
    if (++v8 == 9)
    {
      LODWORD(v8) = 8;
      break;
    }
  }
  v9 = 0;
  if ((int)v8 >= 8)
    LODWORD(v8) = 8;
  *a3 = v8 & ~((int)v8 >> 31);
  while (dword_1B69325F8[v9] < a2)
  {
    if (++v9 == 9)
    {
      LODWORD(v9) = *a4;
      break;
    }
  }
  if ((int)v9 >= 8)
    LODWORD(v9) = 8;
  *a4 = v9 & ~((int)v9 >> 31);
  return result;
}

uint64_t sub_1B68BDDF0(uint64_t result, _BYTE *a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  char v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v3 = *(unsigned __int8 *)(result + 36);
  v4 = *(_DWORD *)(result + 32);
  v5 = *(_DWORD **)(result + 16);
  v6 = a3;
  v7 = 8;
  do
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = __OFSUB__(v8, v7);
      v11 = v8 - v7;
      v10 = (v11 < 0) ^ v9 | (v11 == 0);
      v12 = 2 * v11;
      if (v10)
        v13 = -v12;
      else
        v13 = v12 - 1;
      v14 = v13 + 1;
      v15 = __clz(v14);
      v16 = (((v14 - (0x80000000 >> v15)) | (0x80000000 >> v15)) << (2 * v15 - v3 - 31)) | v4;
      *v5 = bswap32(v16);
      v17 = v3 - 2 * v15 + 63;
      v3 = v17 & 7;
      v5 = (_DWORD *)((char *)v5 + (v17 >> 3));
      v4 = v16 << (v17 & 0xF8);
      if (v17 >= 0x20)
        v4 = 0;
      v7 = *a2;
    }
    else
    {
      v7 = 0;
    }
    ++a2;
    --v6;
  }
  while (v6);
  *(_QWORD *)(result + 16) = v5;
  *(_DWORD *)(result + 32) = v4;
  *(_BYTE *)(result + 36) = v3;
  return result;
}

_DWORD *sub_1B68BDE9C(_DWORD *result, uint64_t a2, int *a3)
{
  int v3;
  int v4;
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  _DWORD *v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char *v21;
  unint64_t v22;
  int v23;
  char *v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  unsigned int v35;
  int v36;
  char v37;
  uint64_t v38;

  v3 = result[3];
  v4 = v3 + 1;
  v5 = *(_DWORD **)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 32);
  v7 = *(unsigned __int8 *)(a2 + 36);
  v8 = *a3;
  if (!*a3)
    v8 = (v3 + v3 + 1 + 2) >> 3;
  result[1] = v8;
  *v5 = bswap32(v6);
  v9 = (v7 + 1) & 7;
  v10 = (_DWORD *)((char *)v5 + ((unint64_t)(v7 + 1) >> 3));
  v11 = v6 << ((v7 + 1) & 0xF8);
  if (v7 >= 0x1F)
    v11 = 0;
  *v10 = bswap32(v11);
  v12 = (_DWORD *)((char *)v10 + ((unint64_t)(v9 + 2) >> 3));
  v13 = (6 << (27 - ((v9 + 2) & 7))) | (v11 << ((v9 + 2) & 8));
  *v12 = bswap32(v13);
  v14 = (((_BYTE)v9 + 2) & 7u) + 5;
  v15 = ((((_BYTE)v9 + 2) & 7) + 5) & 7;
  v16 = (_DWORD *)((char *)v12 + (v14 >> 3));
  v17 = (v13 << (v14 & 8)) | (*result << (24 - (v14 & 7)));
  *v16 = bswap32(v17);
  v18 = (result[1] << (24 - ((((v9 + 2) & 7) + 5) & 7))) | (v17 << 8);
  *(_DWORD *)((char *)v16 + 1) = bswap32(v18);
  LODWORD(v14) = result[2] + 1;
  v19 = __clz(v14);
  v20 = ((((_DWORD)v14 - (0x80000000 >> v19)) | (0x80000000 >> v19)) << (2 * v19 - v15 - 31)) | (v18 << 8);
  *(_DWORD *)((char *)v16 + 2) = bswap32(v20);
  v21 = (char *)v16 + 2;
  v22 = v15 - 2 * v19 + 63;
  v23 = ((_BYTE)v15 - 2 * (_BYTE)v19 + 63) & 7;
  v24 = &v21[v22 >> 3];
  v25 = v20 << (v22 & 0xF8);
  if (v22 >= 0x20)
    v25 = 0;
  v26 = 31 - v3;
  v27 = v25 | (result[4] << (v26 - v23));
  *(_DWORD *)v24 = bswap32(v27);
  v28 = (v23 + v4);
  v29 = ((_BYTE)v23 + (_BYTE)v4) & 7;
  v30 = &v24[v28 >> 3];
  v31 = v27 << (v28 & 0xF8);
  if (v28 >= 0x20)
    v31 = 0;
  v32 = v31 | (result[36] << (v26 - v29));
  *(_DWORD *)v30 = bswap32(v32);
  v33 = v29 + v4;
  v34 = &v30[(v29 + v4) >> 3];
  v35 = v32 << (v33 & 0xF8);
  if (v33 >= 0x20)
    v35 = 0;
  v36 = v33 & 7;
  if (v36)
  {
    *(_DWORD *)v34 = bswap32(v35 | (1 << (v36 ^ 0x1F)));
    v37 = v36 + 1;
    v34 += (v36 + 1) >> 3;
    v38 = (v36 + 1) & 7;
    if ((v37 & 7) != 0)
    {
      v35 = 0;
      *v34++ &= byte_1B693261C[v38];
    }
    else
    {
      v35 = 0;
    }
  }
  *a3 = (_DWORD)v34 - (_DWORD)v21;
  *(_DWORD *)v34 = bswap32(v35 | 0x80000000);
  *v34 = 0x80;
  *(_QWORD *)(a2 + 16) = v34 + 1;
  *(_DWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 36) = 0;
  return result;
}

uint64_t sub_1B68BE0B8(char **a1)
{
  char *v2;
  uint64_t v3;
  char i;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (char *)malloc_type_calloc(1uLL, 0x2A0uLL, 0x10700409586CEC2uLL);
  if (v2)
  {
    v3 = 0;
    for (i = 1; ; i = 0)
    {
      v5 = i;
      v6 = pthread_cond_init((pthread_cond_t *)&v2[336 * v3 + 8], 0);
      if ((_DWORD)v6)
        break;
      v6 = pthread_cond_init((pthread_cond_t *)&v2[336 * v3 + 56], 0);
      if ((_DWORD)v6)
        break;
      v6 = pthread_mutex_init((pthread_mutex_t *)&v2[336 * v3 + 104], 0);
      if ((_DWORD)v6)
        break;
      v6 = pthread_create((pthread_t *)&v2[336 * v3], 0, (void *(__cdecl *)(void *))sub_1B68BE1B0, &v2[336 * v3]);
      if ((_DWORD)v6)
        break;
      v3 = 1;
      if ((v5 & 1) == 0)
      {
        v7 = 0;
        *a1 = v2;
        return v7;
      }
    }
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  *a1 = 0;
  sub_1B67CA678(v2);
  return v7;
}

uint64_t sub_1B68BE1B0(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (pthread_mutex_t *)(a1 + 104);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 104));
  while (1)
  {
    if (!*(_DWORD *)(a1 + 172))
      pthread_cond_wait((pthread_cond_t *)(a1 + 8), v2);
    if (*(_DWORD *)(a1 + 168))
      break;
    if (((*(_DWORD *)(a1 + 228) << 16) / *(_DWORD *)(a1 + 196)) <= 0x20000)
    {
      sub_1B68BE7D4(0, (uint64_t *)(a1 + 176), (void (*)(uint64_t, uint16x8_t *, _QWORD, char *, char *, char *, _QWORD))BilinearFilterH_vperm2_neon64_h264, v3, v4, v5);
      sub_1B68BE7D4(1, (uint64_t *)(a1 + 256), (void (*)(uint64_t, uint16x8_t *, _QWORD, char *, char *, char *, _QWORD))BilinearFilterH_chroma_vperm2_neon64_h264, v9, v10, v11);
    }
    else
    {
      sub_1B68BE2BC(0, a1 + 176, (uint64_t (*)(uint64_t, uint16x8_t *, _QWORD, uint64_t, unint64_t, _QWORD))BilinearFilterH_swift_neon_h264, v3, v4, v5);
      sub_1B68BE2BC(1, a1 + 256, (uint64_t (*)(uint64_t, uint16x8_t *, _QWORD, uint64_t, unint64_t, _QWORD))BilinearFilterH_swift_chroma_neon_h264, v6, v7, v8);
    }
    *(_DWORD *)(a1 + 172) = 0;
    pthread_cond_signal((pthread_cond_t *)(a1 + 56));
  }
  pthread_mutex_unlock(v2);
  return 0;
}

uint64_t sub_1B68BE2BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint16x8_t *, _QWORD, uint64_t, unint64_t, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint16x8_t *v36;
  int v37;
  unsigned int v38;
  char *v39;
  uint8x16_t *v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  uint64_t v47;
  int v48;
  char v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  signed int v54;
  unsigned int v55;
  char *v56;
  __int128 *v57;
  char *v58;
  int v59;
  int v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  _DWORD *v65;
  int v66;
  uint64_t v67;
  int v68;
  char v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t v73;
  signed int v74;
  int v75;
  int v76;
  __int128 *v77;
  char *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  int v86;
  int v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t (*v90)(uint64_t, uint16x8_t *, _QWORD, uint64_t, unint64_t, _QWORD);
  unsigned int v91;
  int v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;

  v90 = a3;
  v7 = a1;
  v95 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x1E0C80A78](a1, *(unsigned int *)(a2 + 52), a3, ((*(_DWORD *)(a2 + 52) << a1) + 16), a5, a6);
  MEMORY[0x1E0C80A78](v8, v9, *(int *)(a2 + 20), v10, v11, v12);
  v14 = ((unint64_t)&v84 - ((v13 + 47) & 0xFFFFFFFFFFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0;
  v15 = *(unsigned int *)(a2 + 76);
  v94 = v16;
  result = MEMORY[0x1E0C80A78](v15, v17, v13, (4 * v16 + 15) & 0x7FFFFFFF0, v18, v19);
  v93 = (char *)&v84 - v28;
  v29 = *(_DWORD *)(a2 + 56);
  v30 = *(_DWORD *)(a2 + 24);
  if (v22 < 1)
  {
    v33 = v25;
  }
  else
  {
    v31 = 0;
    v32 = 0;
    do
    {
      *(_BYTE *)(v14 + v31) = (unsigned __int16)v32 >> 12;
      v32 += (v21 << 16) / v22;
      ++v31;
    }
    while (v31 < *(int *)(a2 + 20));
    v33 = *(_DWORD *)(a2 + 64);
  }
  if (v33 < *(_DWORD *)(a2 + 68))
  {
    v86 = -v24;
    v34 = v26 + (int)(((result + v25) & -v24) * v27 + 16 * ((result + v25) & (v24 - 1)));
    v87 = (v29 << 16) / v30;
    v88 = (v21 << 16) / v22;
    v35 = v87 * v25;
    v36 = (uint16x8_t *)((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    v85 = v7 != 0;
    v91 = 16 * v24;
    v92 = v24 - 1;
    v37 = -1;
    v89 = v14;
    do
    {
      v39 = v93;
      v38 = v94;
      v40 = (uint8x16_t *)&v93[v94 * (unint64_t)(HIWORD(v35) & 3)];
      v41 = HIWORD(v35) + 1;
      if ((int)HIWORD(v35) <= v37)
        goto LABEL_17;
      v42 = *(_DWORD *)(a2 + 76);
      v43 = v42 + HIWORD(v35);
      v44 = *(_QWORD *)(a2 + 32);
      v45 = *(_DWORD **)(a2 + 40);
      if (v45)
      {
        v46 = *(_DWORD *)(a2 + 52) << v7;
        v47 = *(_QWORD *)&v45[2 * v85 + 4];
        if (v47)
        {
          v48 = v45[v85 + 1];
          v49 = *v45;
          v50 = ((v43 / 8) >> v49) * v48;
          v51 = (v43 / 8) & ~(-1 << v49);
          v52 = *(_DWORD *)(v47 + v50 + 4 * v51);
          v53 = (*(_DWORD *)(v47 + v50 + 4 * (v51 + (1 << v49))) & 0xFFFFFFF) - (v52 & 0xFFFFFFFu);
          v44 += v52 & 0xFFFFFFF;
          v54 = 16 * v43 - ((v43 / 8) << 7);
        }
        else
        {
          v54 = 16 * (v43 & 7) + v46 * (v43 & 0xFFFFFFF8);
          v53 = 128;
        }
        v57 = (__int128 *)(v44 + v54);
        v58 = &v93[v94 * (unint64_t)(HIWORD(v35) & 3)];
      }
      else
      {
        if (((v42 + v41) & v92) != 0)
        {
          v56 = v93;
          v55 = v94;
          Detile2Rows_neon_h264(&v93[v94 * (unint64_t)(HIWORD(v35) & 3)], &v93[v94 * (unint64_t)((BYTE2(v35) + 1) & 3)], (__int128 *)(v44 + (v43 & v86) * *(_DWORD *)(a2 + 48) + 16 * (v43 & v92)), *(_DWORD *)(a2 + 52) << v7, v91);
          v39 = v56;
          v38 = v55;
          v37 = HIWORD(v35) + 1;
          goto LABEL_17;
        }
        v58 = &v93[v94 * (unint64_t)(HIWORD(v35) & 3)];
        v57 = (__int128 *)(v44 + (v43 & v86) * *(_DWORD *)(a2 + 48) + 16 * (v43 & v92));
        v46 = *(_DWORD *)(a2 + 52) << v7;
        v53 = v91;
      }
      DetileRow_neon_h264(v58, v57, v46, v53);
      v37 = HIWORD(v35);
      v39 = v93;
      v38 = v94;
LABEL_17:
      v59 = *(_DWORD *)(a2 + 56);
      if (v59 <= v41)
        v60 = v59 - 1;
      else
        v60 = HIWORD(v35) + 1;
      v61 = &v39[v38 * (unint64_t)(v60 & 3)];
      if (v60 <= v37)
        goto LABEL_34;
      v62 = *(_DWORD *)(a2 + 76);
      v63 = v60 + v62;
      v64 = *(_QWORD *)(a2 + 32);
      v65 = *(_DWORD **)(a2 + 40);
      if (v65)
      {
        v66 = *(_DWORD *)(a2 + 52) << v7;
        v67 = *(_QWORD *)&v65[2 * v85 + 4];
        if (v67)
        {
          v68 = v65[v85 + 1];
          v69 = *v65;
          v70 = ((v63 / 8) >> v69) * v68;
          v71 = (v63 / 8) & ~(-1 << v69);
          v72 = *(_DWORD *)(v67 + v70 + 4 * v71);
          v73 = (*(_DWORD *)(v67 + v70 + 4 * (v71 + (1 << v69))) & 0xFFFFFFF) - (v72 & 0xFFFFFFFu);
          v64 += v72 & 0xFFFFFFF;
          v74 = 16 * v63 - ((v63 / 8) << 7);
        }
        else
        {
          v74 = 16 * (v63 & 7) + v66 * (v63 & 0xFFFFFFF8);
          v73 = 128;
        }
        v77 = (__int128 *)(v64 + v74);
        v78 = v61;
      }
      else
      {
        if (((v60 + 1 + v62) & v92) != 0)
        {
          Detile2Rows_neon_h264(v61, &v93[v94 * (unint64_t)(((_BYTE)v60 + 1) & 3)], (__int128 *)(v64 + (v63 & v86) * *(_DWORD *)(a2 + 48) + 16 * (v63 & v92)), *(_DWORD *)(a2 + 52) << v7, v91);
          v75 = *(_DWORD *)(a2 + 56);
          if (v75 <= v41)
            v76 = v75 - 1;
          else
            v76 = HIWORD(v35) + 1;
          v37 = v76 + 1;
          goto LABEL_34;
        }
        v78 = v61;
        v77 = (__int128 *)(v64 + (v63 & v86) * *(_DWORD *)(a2 + 48) + 16 * (v63 & v92));
        v66 = *(_DWORD *)(a2 + 52) << v7;
        v73 = v91;
      }
      DetileRow_neon_h264(v78, v77, v66, v73);
      v79 = *(_DWORD *)(a2 + 56);
      if (v79 <= v41)
        v37 = v79 - 1;
      else
        v37 = HIWORD(v35) + 1;
LABEL_34:
      v80 = v33 + *(_DWORD *)(a2 + 76);
      if ((v80 & v92) == 0)
        v34 = *(_QWORD *)a2 + *(int *)(a2 + 16) * (uint64_t)(v80 & v86);
      BilinearFilterV_swift_neon_h264(v36, v40, (uint8x16_t *)v61, *(_DWORD *)(a2 + 52) << v7, (unsigned __int16)v35 >> 12);
      v81 = *(_DWORD *)(a2 + 52);
      if (v7)
      {
        v82 = 2 * v81;
        v36->i16[2 * v81] = v36->i16[2 * v81 - 2];
        v81 = (2 * v81) | 1;
      }
      else
      {
        v82 = *(_DWORD *)(a2 + 52);
      }
      v83 = v88;
      v35 += v87;
      v36->i16[v81] = v36->i16[v82 - 1];
      result = v90(v34, v36, *(unsigned int *)(a2 + 20), v83, v89, v91);
      v34 += 16;
      ++v33;
    }
    while (v33 < *(_DWORD *)(a2 + 68));
  }
  return result;
}

void sub_1B68BE7D4(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint16x8_t *, _QWORD, char *, char *, char *, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint16x8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  unsigned int v56;
  char v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  char *v70;
  unsigned int v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  uint64_t v79;
  int v80;
  char v81;
  unsigned int v82;
  int v83;
  int v84;
  uint64_t v85;
  signed int v86;
  unsigned int v87;
  char *v88;
  __int128 *v89;
  char *v90;
  int v91;
  int v92;
  char *v93;
  int v94;
  int v95;
  uint64_t v96;
  _DWORD *v97;
  int v98;
  uint64_t v99;
  int v100;
  char v101;
  unsigned int v102;
  int v103;
  int v104;
  uint64_t v105;
  signed int v106;
  int v107;
  int v108;
  __int128 *v109;
  char *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  _BOOL8 v117;
  int v118;
  int v119;
  char *v120;
  void (*v121)(uint64_t, uint16x8_t *, _QWORD, char *, char *, char *, _QWORD);
  char *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  char *v126;
  int v127;
  uint64_t v128;

  v121 = a3;
  v128 = *MEMORY[0x1E0C80C00];
  v7 = MEMORY[0x1E0C80A78](a1, ((*((_DWORD *)a2 + 13) << a1) + 16), a3, a4, a5, a6);
  v9 = (uint16x8_t *)((char *)&v116 - v8);
  v15 = MEMORY[0x1E0C80A78](v7, v10, v11, v12, v13, v14);
  v17 = (char *)&v116 - v16;
  v23 = MEMORY[0x1E0C80A78](v15, v18, v19, v20, v21, v22);
  v122 = (char *)&v116 - v24;
  v30 = MEMORY[0x1E0C80A78](v23, v25, v26, v27, v28, v29);
  v32 = (char *)&v116 - v31;
  v33 = *((_DWORD *)&qword_1EF137D80 + v30);
  v123 = *a2;
  v34 = *((_DWORD *)a2 + 16);
  v35 = v34;
  v36 = *((_DWORD *)a2 + 19);
  v119 = *((_DWORD *)a2 + 4);
  v125 = v37;
  v42 = MEMORY[0x1E0C80A78](v30, v37, v38, v39, v40, v41);
  v46 = (char *)&v116 - v45;
  v48 = *((_DWORD *)a2 + 14);
  v49 = *((_DWORD *)a2 + 6);
  v50 = (v47 << 16) / (int)v43;
  v127 = v42;
  v126 = v46;
  if (v42)
  {
    if ((int)v43 >= 1)
    {
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v54 = 0;
      v55 = v122;
      do
      {
        v56 = HIWORD(v53);
        v57 = (unsigned __int16)v53 >> 12;
        v58 = &v17[v51];
        v58[1] = v57;
        *v58 = v57;
        if ((v52 & 3) == 0)
        {
          *v55++ = 4 * v56;
          v54 = HIWORD(v53);
        }
        v53 += v50;
        v59 = 67372036 * (v56 - v54);
        v60 = v51 & 0x7FFFFFF8 | v52 & 3;
        *(_DWORD *)&v32[4 * v60] = v59 + 50462976;
        *(_DWORD *)&v32[4 * (v60 | 4)] = v59 + 117835012;
        ++v52;
        v51 += 2;
      }
      while (v43 != v52);
      goto LABEL_16;
    }
  }
  else if ((int)v43 >= 1)
  {
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v55 = v122;
    do
    {
      v64 = HIWORD(v62);
      v17[v61] = (unsigned __int16)v62 >> 12;
      if ((v61 & 3) == 0)
      {
        *v55++ = 2 * v64;
        v63 = HIWORD(v62);
      }
      v62 += v50;
      *(_DWORD *)&v32[4 * v61++] = 33686018 * (v64 - v63) + 50462976;
    }
    while (v43 != v61);
    goto LABEL_16;
  }
  if ((int)v43 <= -16)
    goto LABEL_19;
  LODWORD(v43) = 0;
  v55 = v122;
LABEL_16:
  v65 = v43 + 4;
  if (v44 > (int)v43 + 4)
    v65 = v44;
  bzero(v55, ((v65 + ~(_DWORD)v43) & 0xFFFFFFFC) + 4);
  v35 = *((_DWORD *)a2 + 16);
  v46 = v126;
LABEL_19:
  if (v35 < *((_DWORD *)a2 + 17))
  {
    v118 = -v33;
    v124 = v33 - 1;
    v66 = (v48 << 16) / v49;
    v67 = v123 + ((v36 + v34) & -v33) * v119 + 16 * ((v36 + v34) & (v33 - 1));
    v119 = v66;
    v68 = v66 * v34;
    v117 = v127 != 0;
    LODWORD(v123) = 16 * v33;
    v69 = -1;
    v120 = v32;
    do
    {
      v70 = v17;
      v71 = v125;
      v72 = &v46[v125 * (unint64_t)(HIWORD(v68) & 3)];
      v73 = HIWORD(v68) + 1;
      if ((int)HIWORD(v68) <= v69)
        goto LABEL_30;
      v74 = *((_DWORD *)a2 + 19);
      v75 = v74 + HIWORD(v68);
      v76 = a2[4];
      v77 = (_DWORD *)a2[5];
      if (v77)
      {
        v78 = *((_DWORD *)a2 + 13) << v127;
        v79 = *(_QWORD *)&v77[2 * v117 + 4];
        if (v79)
        {
          v80 = v77[v117 + 1];
          v81 = *v77;
          v82 = ((v75 / 8) >> v81) * v80;
          v83 = (v75 / 8) & ~(-1 << v81);
          v84 = *(_DWORD *)(v79 + v82 + 4 * v83);
          v85 = (*(_DWORD *)(v79 + v82 + 4 * (v83 + (1 << v81))) & 0xFFFFFFF) - (v84 & 0xFFFFFFFu);
          v76 += v84 & 0xFFFFFFF;
          v86 = 16 * v75 - ((v75 / 8) << 7);
        }
        else
        {
          v86 = 16 * (v75 & 7) + v78 * (v75 & 0xFFFFFFF8);
          v85 = 128;
        }
        v89 = (__int128 *)(v76 + v86);
        v90 = v72;
      }
      else
      {
        if (((v74 + v73) & v124) != 0)
        {
          v87 = v125;
          v88 = v126;
          Detile2Rows_neon_h264(v72, &v126[v125 * (unint64_t)((BYTE2(v68) + 1) & 3)], (__int128 *)(v76 + (v75 & v118) * *((_DWORD *)a2 + 12) + 16 * (v75 & v124)), *((_DWORD *)a2 + 13) << v127, v123);
          v46 = v88;
          v71 = v87;
          v69 = HIWORD(v68) + 1;
          goto LABEL_30;
        }
        v90 = v72;
        v89 = (__int128 *)(v76 + (v75 & v118) * *((_DWORD *)a2 + 12) + 16 * (v75 & v124));
        v78 = *((_DWORD *)a2 + 13) << v127;
        v85 = v123;
      }
      DetileRow_neon_h264(v90, v89, v78, v85);
      v69 = HIWORD(v68);
      v71 = v125;
      v46 = v126;
LABEL_30:
      v91 = *((_DWORD *)a2 + 14);
      if (v91 <= v73)
        v92 = v91 - 1;
      else
        v92 = HIWORD(v68) + 1;
      v93 = &v46[v71 * (unint64_t)(v92 & 3)];
      if (v92 <= v69)
        goto LABEL_47;
      v94 = *((_DWORD *)a2 + 19);
      v95 = v92 + v94;
      v96 = a2[4];
      v97 = (_DWORD *)a2[5];
      if (v97)
      {
        v98 = *((_DWORD *)a2 + 13) << v127;
        v99 = *(_QWORD *)&v97[2 * v117 + 4];
        if (v99)
        {
          v100 = v97[v117 + 1];
          v101 = *v97;
          v102 = ((v95 / 8) >> v101) * v100;
          v103 = (v95 / 8) & ~(-1 << v101);
          v104 = *(_DWORD *)(v99 + v102 + 4 * v103);
          v105 = (*(_DWORD *)(v99 + v102 + 4 * (v103 + (1 << v101))) & 0xFFFFFFF) - (v104 & 0xFFFFFFFu);
          v96 += v104 & 0xFFFFFFF;
          v106 = 16 * v95 - ((v95 / 8) << 7);
        }
        else
        {
          v106 = 16 * (v95 & 7) + v98 * (v95 & 0xFFFFFFF8);
          v105 = 128;
        }
        v109 = (__int128 *)(v96 + v106);
        v110 = v93;
      }
      else
      {
        if (((v92 + 1 + v94) & v124) != 0)
        {
          Detile2Rows_neon_h264(v93, &v126[v125 * (unint64_t)(((_BYTE)v92 + 1) & 3)], (__int128 *)(v96 + (v95 & v118) * *((_DWORD *)a2 + 12) + 16 * (v95 & v124)), *((_DWORD *)a2 + 13) << v127, v123);
          v107 = *((_DWORD *)a2 + 14);
          if (v107 <= v73)
            v108 = v107 - 1;
          else
            v108 = HIWORD(v68) + 1;
          v69 = v108 + 1;
          goto LABEL_47;
        }
        v110 = v93;
        v109 = (__int128 *)(v96 + (v95 & v118) * *((_DWORD *)a2 + 12) + 16 * (v95 & v124));
        v98 = *((_DWORD *)a2 + 13) << v127;
        v105 = v123;
      }
      DetileRow_neon_h264(v110, v109, v98, v105);
      v111 = *((_DWORD *)a2 + 14);
      if (v111 <= v73)
        v69 = v111 - 1;
      else
        v69 = HIWORD(v68) + 1;
LABEL_47:
      v112 = v35 + *((_DWORD *)a2 + 19);
      if ((v112 & v124) == 0)
        v67 = *a2 + *((int *)a2 + 4) * (uint64_t)(v112 & v118);
      v113 = v127;
      BilinearFilterV_swift_neon_h264(v9, (uint8x16_t *)v72, (uint8x16_t *)v93, *((_DWORD *)a2 + 13) << v127, (unsigned __int16)v68 >> 12);
      v114 = *((_DWORD *)a2 + 13);
      if (v113)
      {
        v115 = 2 * v114;
        v9->i16[2 * v114] = v9->i16[2 * v114 - 2];
        v114 = (2 * v114) | 1;
      }
      else
      {
        v115 = *((_DWORD *)a2 + 13);
      }
      v68 += v119;
      v9->i16[v114] = v9->i16[v115 - 1];
      v17 = v70;
      v121(v67, v9, *((unsigned int *)a2 + 5), v122, v70, v120, v123);
      v67 += 16;
      ++v35;
      v46 = v126;
    }
    while (v35 < *((_DWORD *)a2 + 17));
  }
}

uint64_t sub_1B68BEE70(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  signed int v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t result;
  pthread_mutex_t *v31;
  char v32;
  _QWORD v33[2];

  v15 = 0;
  v16 = (a5 + 63) & 0xFFFFFFC0;
  v33[1] = *MEMORY[0x1E0C80C00];
  v33[0] = 0;
  v17 = 1;
  do
  {
    v32 = v17;
    v31 = (pthread_mutex_t *)(a1 + 336 * v15 + 104);
    pthread_mutex_lock(v31);
    v18 = 0;
    *(_DWORD *)(a1 + 336 * v15 + 172) = 1;
    v19 = 1;
    do
    {
      v20 = a1 + 336 * v15 + 80 * v18;
      *(_QWORD *)(v20 + 176) = *(_QWORD *)(a2 + 8 * v18);
      *(_QWORD *)(v20 + 184) = 0;
      *(_DWORD *)(v20 + 192) = a3;
      *(_DWORD *)(v20 + 196) = a4 >> v18;
      *(_DWORD *)(v20 + 200) = a5 >> v18;
      v21 = v19 & 1;
      if ((v19 & 1) != 0)
        v22 = a7;
      else
        v22 = 0;
      *(_QWORD *)(v20 + 208) = *(_QWORD *)(a6 + 8 * v18);
      *(_QWORD *)(v20 + 216) = v22;
      *(_DWORD *)(v20 + 224) = a8;
      *(_DWORD *)(v20 + 228) = a9 >> v18;
      *(_DWORD *)(v20 + 232) = a10 >> v18;
      *(_DWORD *)(v20 + 236) = v18;
      v23 = *((_DWORD *)v33 + v18);
      v24 = v23 + (v16 >> v18 >> 1);
      *((_DWORD *)v33 + v18) = v24;
      if (v24 >= a5 >> v18)
        v24 = a5 >> v18;
      *(_DWORD *)(v20 + 240) = v23;
      *(_DWORD *)(v20 + 244) = v24;
      *(_DWORD *)(v20 + 248) = *(_DWORD *)(a11 + 4 * v18);
      *(_DWORD *)(v20 + 252) = *(_DWORD *)(a12 + 4 * v18);
      v18 = 1;
      v19 = 0;
    }
    while (v21);
    pthread_cond_signal((pthread_cond_t *)(a1 + 336 * v15 + 8));
    result = pthread_mutex_unlock(v31);
    v17 = 0;
    v15 = 1;
  }
  while ((v32 & 1) != 0);
  return result;
}

uint64_t sub_1B68BEFF8(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = a1 + 336 * v2;
    pthread_mutex_lock((pthread_mutex_t *)(v5 + 104));
    if (*(_DWORD *)(v5 + 172))
      pthread_cond_wait((pthread_cond_t *)(a1 + 336 * v2 + 56), (pthread_mutex_t *)(v5 + 104));
    result = pthread_mutex_unlock((pthread_mutex_t *)(v5 + 104));
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

void sub_1B68BF070(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  char *v17;
  char *v20;

  v20 = 0;
  if (!sub_1B68BE0B8(&v20))
  {
    v17 = v20;
    if (v20)
    {
      sub_1B68BEE70((uint64_t)v20, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      sub_1B68BEFF8((uint64_t)v17);
      sub_1B67CA678(v17);
    }
  }
}

double sub_1B68BF148(uint64_t a1, uint64_t a2)
{
  double v2;

  v2 = *(double *)(a1 + 24);
  _Q2 = *(float64x2_t *)(a1 + 8);
  _Q3 = vnegq_f64(_Q2);
  _D5 = *(_QWORD *)(a2 + 8);
  _D7 = *(double *)(a2 + 16);
  _D16 = *(double *)(a2 + 24);
  __asm
  {
    FMLS            D6, D7, V3.D[1]
    FMLS            D17, D16, V2.D[1]
    FMLS            D18, D16, V3.D[0]
    FMLS            D4, D7, V2.D[0]
    FMLS            D4, D5, V3.D[1]
  }
  return (_D6 + v2 * _D16)
       / sqrt((_D17 + v2 * _D7) * (_D17 + v2 * _D7) + (_D6 + v2 * _D16) * (_D6 + v2 * _D16) + _D18 * _D18 + _D4 * _D4);
}

char *sub_1B68BF1C8(char *result, int a2, int a3, char *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  if (a3 >= 1)
  {
    v5 = 0;
    v6 = (uint64_t)(a3 * a2 + (a3 * a2 < 0 ? 3 : 0)) >> 2;
    v7 = &result[a3 * (uint64_t)a2];
    v8 = 1;
    do
    {
      v9 = result;
      v10 = v8;
      v11 = a2;
      if (a2 >= 1)
      {
        do
        {
          v12 = *v9++;
          a4[v10] = v12;
          v10 += 2;
          --v11;
        }
        while (v11);
      }
      ++v5;
      v8 += a5;
      result += a2;
    }
    while (v5 != a3);
    if (a3 >= 2)
    {
      v13 = 0;
      v14 = a3 >> 1;
      if (a2 >= 0)
        v15 = a2;
      else
        v15 = a2 + 1;
      v16 = (v15 >> 1);
      v17 = (uint64_t)v15 >> 1;
      v18 = a5 << 33;
      v19 = 2 * (int)a5;
      v20 = 0x200000000;
      result = a4;
      do
      {
        if (a2 >= 2)
        {
          v21 = v7;
          v22 = result;
          v23 = v20;
          v24 = v16;
          do
          {
            *v22 = *v21;
            v22 += 4;
            a4[v23 >> 32] = v21[v6];
            v23 += 0x400000000;
            ++v21;
            --v24;
          }
          while (v24);
        }
        ++v13;
        v20 += v18;
        result += v19;
        v7 += v17;
      }
      while (v13 != v14);
    }
  }
  return result;
}

uint64_t sub_1B68BF2CC(uint64_t result)
{
  int v1;
  int v2;

  if (*(_BYTE *)(result + 66) == 2)
  {
    v1 = *(_DWORD *)(result + 204);
    v2 = *(_DWORD *)(result + 208);
    if (7 * v2 <= (8 * v1))
    {
      if (7 * v1 > (8 * v2))
      {
        *(_BYTE *)(result + 66) = 1;
        *(_DWORD *)(result + 52) = *(_DWORD *)(result + 48);
      }
    }
    else
    {
      *(_BYTE *)(result + 66) = 1;
    }
  }
  return result;
}

uint64_t sub_1B68BF31C(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;

  v4 = (a2 + 15) >> 4;
  v5 = (a3 + 15) >> 4;
  v6 = (v5 * v4);
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  v7 = malloc_type_malloc(36 * v6, 0x82ECD37AuLL);
  *(_QWORD *)(a1 + 16) = v7;
  if (!v7)
    goto LABEL_7;
  if ((_DWORD)v6)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a1 + 16) + v8;
      *(_WORD *)(v9 + 32) = 0x2000;
      *(_BYTE *)(v9 + 34) = 32;
      *(_QWORD *)v9 = 0x8000800080008000;
      *(_QWORD *)(v9 + 8) = -1;
      *(_QWORD *)(v9 + 16) = -1;
      *(_QWORD *)(v9 + 24) = -1;
      v8 += 36;
    }
    while (36 * v6 != v8);
  }
  v10 = malloc_type_malloc(216 * v6, 0x82ECD37AuLL);
  *(_QWORD *)(a1 + 120) = v10;
  if (v10)
  {
    result = 0;
    *(_QWORD *)(a1 + 28) = -1;
    *(_DWORD *)(a1 + 36) = -1;
    *(_DWORD *)(a1 + 108) = 0;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_BYTE *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 256;
  }
  else
  {
LABEL_7:
    sub_1B68BF414(a1);
    return 4294967188;
  }
  return result;
}

void sub_1B68BF414(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(void **)(a1 + 120);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 120) = 0;
  }
}

uint64_t sub_1B68BF450(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v9;
  char v10;
  char v11;

  v3 = *(unsigned __int16 *)(a2 + 34);
  v4 = *(unsigned __int8 *)(a2 + 112);
  v5 = *(_DWORD *)(a2 + 108);
  v6 = *(unsigned __int8 *)(a2 + 115);
  v7 = *(unsigned __int8 *)(a2 + 114);
  if (!v5)
    v5 = a3;
  v8 = (3 * a3 + 13 * v5 + 8) >> 4;
  *(_DWORD *)(result + 108) = v8;
  v9 = 25 * a3 < 22 * v8 && 20 * *(unsigned __int16 *)(result + 34) > 23 * v3;
  if (v4 == 2)
  {
    if (!v9)
    {
      if (v6 < 3)
      {
        *(_BYTE *)(result + 112) = 2;
        *(_BYTE *)(result + 114) = v7;
        v10 = v6 + 1;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  if (v4 != 1)
  {
    if (v4 || !v9)
    {
LABEL_20:
      v10 = 0;
      *(_BYTE *)(result + 112) = 0;
      *(_BYTE *)(result + 114) = 0;
      goto LABEL_21;
    }
LABEL_14:
    v10 = 0;
    v11 = 1;
    *(_BYTE *)(result + 112) = 1;
LABEL_18:
    *(_BYTE *)(result + 114) = v11;
    goto LABEL_21;
  }
  if (50 * a3 <= 47 * v8)
  {
    v10 = 0;
    *(_BYTE *)(result + 112) = 1;
    if (v7 >= 0xF)
      LOBYTE(v7) = 15;
    v11 = v7 + 1;
    goto LABEL_18;
  }
  *(_BYTE *)(result + 112) = 2;
  *(_BYTE *)(result + 114) = v7;
  v10 = 1;
LABEL_21:
  *(_BYTE *)(result + 115) = v10;
  return result;
}

uint64_t sub_1B68BF570(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, float *a11)
{
  float *v11;
  uint64_t v12;
  float v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  unsigned int v61;
  unsigned int v62;
  unsigned int v64;
  unsigned int v65;
  unsigned int v67;
  uint64_t v68;

  v11 = a11;
  if (a2)
    v12 = 1;
  else
    v12 = 2;
  v13 = 0.0;
  v14 = a6 - a5;
  if (a6 < a5)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    result = 0;
    v20 = 0;
    goto LABEL_56;
  }
  v58 = a6 - a5;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v68 = 0;
  v67 = 0;
  v64 = 0;
  v21 = 0;
  if (a7)
    v22 = a8 == 0;
  else
    v22 = 1;
  v23 = !v22;
  v59 = a3;
  v24 = a4;
  v61 = a3;
  v62 = a4;
  do
  {
    v65 = a5;
    if (a4 < a3)
    {
      v25 = v21;
      goto LABEL_52;
    }
    v26 = v59;
    v27 = *(_DWORD *)a1 * a5;
    v28 = *(_QWORD *)(a1 + 16);
    v29 = (16 * a5) | 8;
    v25 = v21;
    do
    {
      v30 = (v27 + v26);
      v31 = v28 + 36 * v30;
      if (!*(_BYTE *)(v31 + 32))
        goto LABEL_51;
      v32 = *(_DWORD *)(v28 + 36 * v30 + 8 * (*(unsigned __int8 *)(v31 + 32) - 4) + 12);
      v33 = (unsigned __int16)v32;
      if (!a9)
        goto LABEL_46;
      v34 = 0;
      v35 = (16 * v26) | 8;
      v36 = (unsigned int *)(a10 + 12);
      while (1)
      {
        v37 = *v36;
        v38 = v36[1];
        v39 = *v36 >> 1;
        v40 = *(v36 - 2);
        v41 = v36[2];
        if (v41 > 179)
        {
          v42 = v38 >> 1;
          if (v41 == 270)
            goto LABEL_26;
          if (v41 != 180)
            goto LABEL_32;
LABEL_25:
          v37 >>= 1;
          v42 = v36[1];
          goto LABEL_26;
        }
        if (!v41)
          goto LABEL_25;
        v42 = v38 >> 1;
        if (v41 != 90)
          goto LABEL_32;
LABEL_26:
        v43 = v29 - *(v36 - 1) - (v38 >> 1);
        if (v43 < 0)
          v43 = (v38 >> 1) - (v29 - *(v36 - 1));
        if (v43 < (int)(v42 + 8))
        {
          v44 = v35 - v40 - v39;
          if (v44 < 0)
            v44 = v39 - (v35 - v40);
          if (v44 < (int)(v37 + 8))
            break;
        }
LABEL_32:
        if (!a7)
        {
          LODWORD(v34) = 0;
          goto LABEL_38;
        }
        if (*(unsigned __int16 *)(a7 + 2 * v30) < 0x1F4u)
          goto LABEL_38;
        v36 += 7;
        if (a9 == ++v34)
          goto LABEL_39;
      }
      v64 += (unsigned __int16)v32;
LABEL_38:
      if ((_DWORD)v34 != a9)
        goto LABEL_46;
LABEL_39:
      v45 = (*(int *)v31 >> 16) * (*(int *)v31 >> 16) + (__int16)*(_DWORD *)v31 * (__int16)*(_DWORD *)v31;
      if (v45)
      {
        v46 = __clz(v45);
        if ((v46 & 1) != 0)
          v47 = ((byte_1B69327A4[(unint64_t)(v45 << (v46 + 1)) >> 24] << 12) | 0x200000u) >> ((v46 + 1) >> 1);
        else
          v47 = (11585
               * (((byte_1B69327A4[(unint64_t)(v45 << (v46 + 1)) >> 24] << 12) | 0x200000u) >> ((v46 + 1) >> 1))) >> 14;
        v48 = (v47 + 16) >> 5;
      }
      else
      {
        v48 = 0;
      }
      v67 += v48;
      LODWORD(v68) = v45 + v68;
      ++HIDWORD(v68);
      v25 = (unsigned __int16)v32 + v25;
LABEL_46:
      if (v23)
      {
        v49 = *(unsigned __int16 *)(a7 + 2 * v30) + (*(unsigned __int8 *)(a8 + v30) << 7);
        if ((unsigned __int16)v32 <= (3 * v49))
          LOWORD(v49) = *(_DWORD *)(v28
                                  + 36 * v30
                                  + 8 * (*(unsigned __int8 *)(v31 + 32) - 4)
                                  + 12);
        v33 = (unsigned __int16)v49;
      }
      v15 += (unsigned __int16)v32;
      v17 += v33;
      ++v16;
LABEL_51:
      v26 += v12;
    }
    while (v26 <= v24);
LABEL_52:
    v21 = v25;
    a5 = v65 + v12;
    a4 = v62;
    a3 = v61;
  }
  while (v65 + v12 <= a6);
  if (v64)
    v13 = (float)v21 / (float)v64;
  v20 = v68;
  v18 = HIDWORD(v68);
  result = v67;
  v14 = v58;
  v11 = a11;
LABEL_56:
  *v11 = v13;
  *(_DWORD *)(a1 + 28) = v15;
  *(_WORD *)(a1 + 32) = (v15 + (v16 >> 1)) / v16;
  *(_WORD *)(a1 + 34) = (v17 + (v16 >> 1)) / v16;
  if (a9)
  {
    if (!v18)
      goto LABEL_69;
    v50 = (a4 - a3 + 1) * (a4 - a3 + 1) + (v14 + 1) * (v14 + 1);
    if (v50)
    {
      v51 = __clz(v50);
      v52 = ((byte_1B69327A4[(unint64_t)(v50 << (v51 + 1)) >> 24] << 12) | 0x200000u) >> ((v51 + 1) >> 1);
      if ((v51 & 1) == 0)
        v52 = (11585 * v52) >> 14;
      v53 = ((2 * v52 + 32) & 0x7FFFFFC0 | 0x30) / 0x64;
    }
    else
    {
      v53 = 0;
    }
    v54 = (int)result / v18;
    v55 = v20 / v18 - v54 * v54;
    if (v20 / v18 != v54 * v54)
    {
      v56 = __clz(v55);
      v57 = ((byte_1B69327A4[(unint64_t)(v55 << (v56 + 1)) >> 24] << 12) | 0x200000u) >> ((v56 + 1) >> 1);
      if ((v56 & 1) == 0)
        v57 = (11585 * v57) >> 14;
      v55 = (v57 + 16) >> 5;
    }
    if (v54 >= (int)v53 || v55 >= v53)
      *(_BYTE *)(a1 + 113) = 0;
    else
LABEL_69:
      *(_BYTE *)(a1 + 113) = 1;
  }
  return result;
}

uint64_t sub_1B68BF99C(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a2 + 15;
  v5 = a3 + 15;
  v6 = malloc_type_malloc(464 * ((a3 + 15) >> 4) * ((a2 + 15) >> 4), 0x82ECD37AuLL);
  *(_QWORD *)(a1 + 8) = v6;
  if (!v6)
    return 4294967188;
  *(_DWORD *)a1 = v4 >> 4;
  *(_DWORD *)(a1 + 4) = v5 >> 4;
  *(_QWORD *)(a1 + 28) = -1;
  *(_QWORD *)(a1 + 24) = 0xFFFFFFFF00000000;
  v7 = ((v5 >> 4) * (v4 >> 4));
  if ((int)v7 >= 1)
  {
    v8 = 0;
    for (i = 0; i != v7; ++i)
    {
      v10 = 0;
      v11 = *(_QWORD *)(a1 + 8);
      v12 = (_DWORD *)(v11 + 464 * i);
      *v12 = 0x7FFFFFFF;
      v12[3] = 0;
      v13 = v11 + v8;
      do
      {
        v14 = v13 + v10;
        *(_DWORD *)(v14 + 16) = 0x7FFFFFFF;
        *(_WORD *)(v14 + 40) = 8224;
        v10 += 28;
      }
      while (v10 != 448);
      v8 += 464;
    }
  }
  return 0;
}

uint64_t sub_1B68BFA78(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, _BYTE *a8, int a9)
{
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;

  if (a5 - a4 >= 2)
  {
    v9 = (a5 - a4) >> 1;
    v10 = (unsigned __int8 *)(a2 + (a4 >> 1) * a7);
    v11 = (unsigned __int8 *)(result + a6 * a4);
    v12 = &v11[a6];
    v13 = dword_1B69339D8[(a4 >> 1) & 0x1F];
    result = 2 * a6 - a3;
    do
    {
      a4 += 2;
      v14 = dword_1B69339D8[(a4 >> 1) & 0x1F];
      if (a3 >= 2)
      {
        v15 = v13 & 0xFFF;
        v16 = a3 >> 1;
        do
        {
          v17 = v11[1];
          v18 = v12[1];
          v20 = *v11;
          v11 += 2;
          v19 = v20;
          v21 = *v12;
          v12 += 2;
          v22 = *v10;
          v23 = v10[1];
          v24 = v18 + v17 + v23;
          v25 = v14 + v19 + v21 + v22;
          v26 = byte_1B69329A6[v15 + 1];
          v27 = byte_1B69328A4[v19 + (byte_1B69329A6[v15] & 1) - (byte_1B69329A6[v15] >> 1) + 1];
          LOBYTE(v26) = byte_1B69328A4[v17 + (v26 & 1) - (v26 >> 1) + 1];
          v28 = byte_1B69329A6[v15 + 16];
          v29 = byte_1B69329A6[v15 + 17];
          LOBYTE(v28) = byte_1B69328A4[v21 + (v28 & 1) - (v28 >> 1) + 1];
          LOBYTE(v18) = byte_1B69328A4[v18 + (v29 & 1) - (v29 >> 1) + 1];
          v30 = byte_1B69329A6[v15 + 32];
          v31 = byte_1B69329A6[v15 + 33];
          LOBYTE(v30) = byte_1B69328A4[v22 + (v30 & 1) - (v30 >> 1) + 1];
          LOBYTE(v31) = byte_1B69328A4[v23 + (v31 & 1) - (v31 >> 1) + 1];
          *a8 = v30;
          a8[1] = v27;
          a8[2] = v31;
          a8[3] = v26;
          a8[a9] = v30;
          a8[a9 + 1] = v28;
          a8[a9 + 2] = v31;
          a8[a9 + 3] = v18;
          v14 = v25 + (v24 << 8);
          v32 = ((_WORD)v15 + 34) & 0xFFF;
          v15 += 2;
          if ((v16 & 7) == 1)
            v15 = v32;
          v10 += 2;
          a8 += 4;
          --v16;
        }
        while (v16);
      }
      v11 += result;
      v12 += result;
      v10 += a7 - a3;
      a8 += 2 * (a9 - a3);
      LOWORD(v13) = v14;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1B68BFC84(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, _BYTE *a8, int a9, uint64_t a10)
{
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  if (a5 - a4 >= 2)
  {
    v10 = (a5 - a4) >> 1;
    v11 = (unsigned __int8 *)(a2 + (a4 >> 1) * a7);
    v12 = (unsigned __int8 *)(result + a6 * a4);
    v13 = &v12[a6];
    v14 = dword_1B69339D8[(a4 >> 1) & 0x1F];
    v34 = a3 >> 1;
    result = (a9 + 3);
    v15 = 2 * a6 - a3;
    v16 = a7 - a3;
    do
    {
      a4 += 2;
      v17 = dword_1B69339D8[(a4 >> 1) & 0x1F];
      if (a3 >= 2)
      {
        v18 = v14 & 0xFFF;
        v19 = v34;
        do
        {
          v20 = *(unsigned __int8 *)(a10 + *v12);
          v21 = *(unsigned __int8 *)(a10 + v12[1]);
          v22 = *(unsigned __int8 *)(a10 + *v13);
          v23 = *(unsigned __int8 *)(a10 + v13[1]);
          v24 = *v11;
          v25 = v11[1];
          v26 = v23 + v21 + v25;
          v27 = v17 + v20 + v22 + v24;
          v28 = byte_1B69329A6[v18 + 1];
          v29 = byte_1B69328A4[v20 + (byte_1B69329A6[v18] & 1) - (byte_1B69329A6[v18] >> 1) + 1];
          LOBYTE(v28) = byte_1B69328A4[v21 + (v28 & 1) - (v28 >> 1) + 1];
          v30 = byte_1B69329A6[v18 + 16];
          v31 = byte_1B69329A6[v18 + 17];
          LOBYTE(v30) = byte_1B69328A4[v22 + (v30 & 1) - (v30 >> 1) + 1];
          LOBYTE(v31) = byte_1B69328A4[v23 + (v31 & 1) - (v31 >> 1) + 1];
          v32 = byte_1B69329A6[v18 + 32];
          v33 = byte_1B69329A6[v18 + 33];
          LOBYTE(v32) = byte_1B69328A4[v24 + (v32 & 1) - (v32 >> 1) + 1];
          LOBYTE(v33) = byte_1B69328A4[v25 + (v33 & 1) - (v33 >> 1) + 1];
          *a8 = v32;
          a8[1] = v29;
          a8[2] = v33;
          a8[3] = v28;
          a8[a9] = v32;
          a8[a9 + 1] = v30;
          a8[a9 + 2] = v33;
          a8[result] = v31;
          v17 = v27 + (v26 << 8);
          if ((v19 & 7) == 1)
            v18 = ((_WORD)v18 + 34) & 0xFFF;
          else
            v18 += 2;
          v12 += 2;
          v13 += 2;
          v11 += 2;
          a8 += 4;
          --v19;
        }
        while (v19);
      }
      v12 += v15;
      v13 += v15;
      v11 += v16;
      a8 += 2 * (a9 - a3);
      LOWORD(v14) = v17;
      --v10;
    }
    while (v10);
  }
  return result;
}

_BYTE *sub_1B68BFEB8(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, _QWORD *a10)
{
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  _BYTE *v48;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;

  v48 = result;
  if (a5 >= a7)
    v10 = a7;
  else
    v10 = a5;
  if (a6 >= a8)
    v11 = a8;
  else
    v11 = a6;
  v52 = v11;
  v47 = v11 - 1;
  if (v11 >= 1)
  {
    v54 = 0;
    v55 = 0;
    v53 = 0;
    v13 = a10[1];
    v14 = a10[2];
    v15 = a10[3];
    v17 = a10[5];
    v16 = a10[6];
    v19 = a10[8];
    v18 = a10[9];
    v58 = v10 - 1;
    if (a7 >= 0)
      v20 = a7;
    else
      v20 = a7 + 1;
    v45 = v20 >> 1;
    v21 = a10[13];
    v57 = a10[14];
    v46 = 2 * a7;
    v51 = 2 * a7;
    v59 = a2 + a7;
    v56 = v10;
    do
    {
      if (v10 >= 1)
      {
        v22 = 0;
        v23 = &v48[v54];
        v24 = a9;
        if (v53 == v47)
          v24 = 0;
        v25 = &v23[v24];
        v26 = v45 * v55 / v46;
        v27 = (_BYTE *)(a4 + v26);
        result = (_BYTE *)(a3 + v26);
        do
        {
          v28 = a2 + v22;
          v29 = v23[1];
          v30 = v23[2];
          v31 = v23[3];
          v32 = v25[1];
          v33 = v25[2];
          v34 = v25[3];
          *(_BYTE *)(a2 + v22) = byte_1B6933A58[*(unsigned __int8 *)(v14 + *(unsigned __int8 *)(v21 + v30))
                                              + (unint64_t)*(unsigned __int8 *)(v13
                                                                                     + *(unsigned __int8 *)(v21 + v29))
                                              + *(unsigned __int8 *)(v15 + *(unsigned __int8 *)(v21 + v31))];
          *(_BYTE *)(v59 + v22) = byte_1B6933A58[*(unsigned __int8 *)(v14 + *(unsigned __int8 *)(v21 + v33))
                                               + (unint64_t)*(unsigned __int8 *)(v13
                                                                                      + *(unsigned __int8 *)(v21 + v32))
                                               + *(unsigned __int8 *)(v15 + *(unsigned __int8 *)(v21 + v34))];
          if (v58 == (_DWORD)v22)
          {
            v60 = v23;
            v35 = v29;
            v36 = v30;
            v37 = v31;
            *(_BYTE *)(v28 + 1) = *(_BYTE *)(a2 + v22);
            v38 = v32;
            v39 = v33;
            v40 = v34;
            v41 = (_BYTE *)(v59 + v22);
          }
          else
          {
            v35 = v23[5];
            v36 = v23[6];
            v37 = v23[7];
            v60 = v23 + 8;
            v38 = v25[5];
            v39 = v25[6];
            v40 = v25[7];
            *(_BYTE *)(v28 + 1) = byte_1B6933A58[*(unsigned __int8 *)(v14 + *(unsigned __int8 *)(v21 + v36))
                                               + (unint64_t)*(unsigned __int8 *)(v13
                                                                                      + *(unsigned __int8 *)(v21 + v35))
                                               + *(unsigned __int8 *)(v15 + *(unsigned __int8 *)(v21 + v37))];
            v25 += 8;
            v41 = &byte_1B6933A58[*(unsigned __int8 *)(v15 + *(unsigned __int8 *)(v21 + v40))
                                + *(unsigned __int8 *)(v14 + *(unsigned __int8 *)(v21 + v39))
                                + (unint64_t)*(unsigned __int8 *)(v13 + *(unsigned __int8 *)(v21 + v38))];
            v10 = v56;
          }
          *(_BYTE *)(v59 + v22 + 1) = *v41;
          v42 = v32 + v29 + v35 + v38;
          v43 = v33 + v30 + v36 + v39;
          v44 = v34 + v31 + v37 + v40;
          *result++ = byte_1B6933B58[((*(__int16 *)(v57 + 2 * v44) >> 1)
                                    - (*(__int16 *)(v17 + 2 * *(__int16 *)(v57 + 2 * v42))
                                     + *(__int16 *)(v16 + 2 * *(__int16 *)(v57 + 2 * v43)))
                                    + 513) >> 2];
          *v27++ = byte_1B6933B58[((*(__int16 *)(v57 + 2 * v42) >> 1)
                                 - (*(__int16 *)(v19 + 2 * *(__int16 *)(v57 + 2 * v43))
                                  + *(__int16 *)(v18 + 2 * *(__int16 *)(v57 + 2 * v44)))
                                 + 513) >> 2];
          v22 += 2;
          v23 = v60;
        }
        while ((int)v22 < v10);
      }
      v55 += v51;
      v54 += 2 * a9;
      v59 += v51;
      a2 += v51;
      v53 += 2;
    }
    while (v53 < v52);
  }
  return result;
}

void sub_1B68C0210(void ***a1)
{
  void **v2;
  void **v3;
  void *v4;
  uint64_t v5;
  float v6;
  void *v7;
  uint64_t v8;
  float v9;
  void *v10;
  void *v11;
  void *v12;

  if (a1)
  {
    v2 = (void **)malloc_type_calloc(0x78uLL, 1uLL, 0x4AE20AB7uLL);
    *a1 = v2;
    if (v2)
    {
      **a1 = malloc_type_malloc(0x300uLL, 0x82ECD37AuLL);
      v3 = *a1;
      v4 = **a1;
      if (v4)
      {
        v5 = 0;
        v3[1] = v4;
        (*a1)[2] = (char *)**a1 + 256;
        (*a1)[3] = (char *)**a1 + 512;
        do
        {
          v6 = (float)(unsigned __int16)v5;
          *((_BYTE *)(*a1)[1] + v5) = (int)(float)(v6 * 0.299);
          *((_BYTE *)(*a1)[2] + v5) = (int)(float)(v6 * 0.587);
          *((_BYTE *)(*a1)[3] + v5++) = (int)(float)(v6 * 0.114);
        }
        while (v5 != 256);
        (*a1)[4] = malloc_type_malloc(0x2800uLL, 0x82ECD37AuLL);
        v3 = *a1;
        v7 = (*a1)[4];
        if (v7)
        {
          v8 = 0;
          v3[5] = v7;
          (*a1)[6] = (char *)(*a1)[4] + 2048;
          (*a1)[7] = (char *)(*a1)[4] + 4096;
          (*a1)[8] = (char *)(*a1)[4] + 6144;
          (*a1)[9] = (char *)(*a1)[4] + 0x2000;
          do
          {
            v9 = (float)(unsigned __int16)v8;
            *((_WORD *)(*a1)[5] + v8) = (int)(float)(v9 * 0.1687);
            *((_WORD *)(*a1)[6] + v8) = (int)(float)(v9 * 0.3313);
            *((_WORD *)(*a1)[7] + v8) = (int)(float)(v9 * 0.5);
            *((_WORD *)(*a1)[8] + v8) = (int)(float)(v9 * 0.4187);
            *((_WORD *)(*a1)[9] + v8++) = (int)(float)(v9 * 0.0813);
          }
          while (v8 != 1024);
          (*a1)[13] = malloc_type_malloc(0x100uLL, 0x82ECD37AuLL);
          v3 = *a1;
          if ((*a1)[13])
          {
            (*a1)[14] = malloc_type_malloc(0x800uLL, 0x82ECD37AuLL);
            v3 = *a1;
            if ((*a1)[14])
              return;
          }
        }
        if (*v3)
        {
          free(*v3);
          *v3 = 0;
        }
      }
      v10 = v3[4];
      if (v10)
      {
        free(v10);
        v3[4] = 0;
      }
      v11 = v3[13];
      if (v11)
      {
        free(v11);
        v3[13] = 0;
      }
      v12 = v3[14];
      if (v12)
        free(v12);
      free(v3);
      *a1 = 0;
    }
  }
}

void sub_1B68C049C(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v16;
  int64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  float64x2_t v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  long double v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  uint64_t v54;
  int32x4_t v55;
  int32x4_t v56;
  uint64_t v57;
  int64x2_t v58;
  float64x2_t v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  long double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  long double v79;
  long double v80;
  long double v81;
  long double v82;
  long double v83;
  long double v84;
  long double v85;
  float64x2_t v86;
  long double v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t __x;
  float64x2_t v91;
  long double v92;
  float64x2_t v93;
  long double v94;
  float64x2_t v95;
  long double v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  long double v100;
  float64x2_t v101;
  float64x2_t v102;
  int32x4_t v103;
  float64x2_t v104;
  int32x4_t v105;
  float64x2_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int8x16x4_t v111;

  if (a2 && a3)
  {
    v5 = 0;
    v6 = (double)a1 / 144179.0;
    v7 = (int32x4_t)xmmword_1B6917C70;
    v8 = (int32x4_t)xmmword_1B6917C80;
    v9 = (int32x4_t)xmmword_1B6917C60;
    v88 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
    v10 = (int32x4_t)xmmword_1B6917630;
    __asm { FMOV            V24.2D, #0.5 }
    v89 = _Q24;
    do
    {
      v103 = v10;
      v105 = v9;
      v107 = v8;
      v109 = v7;
      v16 = v9.i64[0];
      v17.i64[0] = v10.i32[0];
      v17.i64[1] = v10.i32[1];
      v18 = vcvtq_f64_s64(v17);
      v19 = v9.i64[1];
      v17.i64[0] = v103.i32[2];
      v17.i64[1] = v103.i32[3];
      v20 = vcvtq_f64_s64(v17);
      v17.i64[0] = (int)v16;
      v17.i64[1] = SHIDWORD(v16);
      v21 = vcvtq_f64_s64(v17);
      v17.i64[0] = (int)v19;
      v17.i64[1] = SHIDWORD(v19);
      v22 = vcvtq_f64_s64(v17);
      v23 = v7.i64[0];
      v17.i64[0] = v107.i32[0];
      v17.i64[1] = v107.i32[1];
      v24 = vcvtq_f64_s64(v17);
      v25 = v7.i64[1];
      v17.i64[0] = v107.i32[2];
      v17.i64[1] = v107.i32[3];
      v26 = vcvtq_f64_s64(v17);
      v17.i64[0] = (int)v23;
      v17.i64[1] = SHIDWORD(v23);
      v27 = vcvtq_f64_s64(v17);
      v17.i64[0] = (int)v25;
      v17.i64[1] = SHIDWORD(v25);
      v99 = vdivq_f64(v27, v88);
      v101 = vdivq_f64(vcvtq_f64_s64(v17), v88);
      v95 = vdivq_f64(v24, v88);
      v97 = vdivq_f64(v26, v88);
      v91 = vdivq_f64(v21, v88);
      v93 = vdivq_f64(v22, v88);
      __x = vdivq_f64(v20, v88);
      v86 = vdivq_f64(v18, v88);
      v87 = pow(v86.f64[0], v6);
      v86.f64[0] = pow(v86.f64[1], v6);
      v85 = pow(__x.f64[0], v6);
      __x.f64[0] = pow(__x.f64[1], v6);
      v84 = pow(v91.f64[0], v6);
      v91.f64[0] = pow(v91.f64[1], v6);
      v83 = pow(v93.f64[0], v6);
      v93.f64[0] = pow(v93.f64[1], v6);
      v82 = pow(v95.f64[0], v6);
      v95.f64[0] = pow(v95.f64[1], v6);
      v81 = pow(v97.f64[0], v6);
      v97.f64[0] = pow(v97.f64[1], v6);
      v80 = pow(v99.f64[0], v6);
      v79 = pow(v99.f64[1], v6);
      v99.f64[0] = pow(v101.f64[0], v6);
      v28 = pow(v101.f64[1], v6);
      v29.f64[0] = v80;
      v29.f64[1] = v79;
      v31.f64[0] = v81;
      v30.f64[0] = v82;
      v30.f64[1] = v95.f64[0];
      v32.f64[0] = v99.f64[0];
      v31.f64[1] = v97.f64[0];
      v34.f64[0] = v83;
      v33.f64[0] = v84;
      v33.f64[1] = v91.f64[0];
      v34.f64[1] = v93.f64[0];
      v35.f64[0] = v87;
      v35.f64[1] = v86.f64[0];
      v32.f64[1] = v28;
      v36.f64[0] = v85;
      v36.f64[1] = __x.f64[0];
      v37 = vmulq_f64(v34, v88);
      v38 = vaddq_f64(vmulq_f64(v29, v88), v89);
      v39 = vaddq_f64(vmulq_f64(v30, v88), v89);
      v40 = vaddq_f64(vmulq_f64(v31, v88), v89);
      v41 = vaddq_f64(vmulq_f64(v33, v88), v89);
      v42 = vaddq_f64(v37, v89);
      v43 = vaddq_f64(vmulq_f64(v35, v88), v89);
      v44 = vaddq_f64(vmulq_f64(v32, v88), v89);
      v45 = vaddq_f64(vmulq_f64(v36, v88), v89);
      v46 = (float64x2_t)vbicq_s8((int8x16_t)v38, (int8x16_t)vcltzq_f64(v38));
      v47 = (float64x2_t)vbicq_s8((int8x16_t)v39, (int8x16_t)vcltzq_f64(v39));
      v48 = (float64x2_t)vbicq_s8((int8x16_t)v44, (int8x16_t)vcltzq_f64(v44));
      v49 = (float64x2_t)vbicq_s8((int8x16_t)v40, (int8x16_t)vcltzq_f64(v40));
      v50 = (float64x2_t)vbicq_s8((int8x16_t)v41, (int8x16_t)vcltzq_f64(v41));
      v51 = (float64x2_t)vbicq_s8((int8x16_t)v42, (int8x16_t)vcltzq_f64(v42));
      v52 = (float64x2_t)vbicq_s8((int8x16_t)v43, (int8x16_t)vcltzq_f64(v43));
      v53 = (float64x2_t)vbicq_s8((int8x16_t)v45, (int8x16_t)vcltzq_f64(v45));
      *(int16x4_t *)&v53.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v52, v88), (int8x16_t)v88, (int8x16_t)v52))), (int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v53, v88), (int8x16_t)v88, (int8x16_t)v53))));
      *(int16x4_t *)&v52.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v50, v88), (int8x16_t)v88, (int8x16_t)v50))), (int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v51, v88), (int8x16_t)v88, (int8x16_t)v51))));
      *(int16x4_t *)&v51.f64[0] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v47, v88), (int8x16_t)v88, (int8x16_t)v47))), (int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v49, v88), (int8x16_t)v88, (int8x16_t)v49))));
      v53.f64[1] = v52.f64[0];
      *(int16x4_t *)&v51.f64[1] = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v46, v88), (int8x16_t)v88, (int8x16_t)v46))), (int16x4_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v48, v88), (int8x16_t)v88, (int8x16_t)v48))));
      *(int8x16_t *)(a2 + v5) = vuzp1q_s8((int8x16_t)v53, (int8x16_t)v51);
      v5 += 16;
      *(_QWORD *)&v51.f64[0] = 0x1000000010;
      *(_QWORD *)&v51.f64[1] = 0x1000000010;
      v10 = vaddq_s32(v103, (int32x4_t)v51);
      v9 = vaddq_s32(v105, (int32x4_t)v51);
      v8 = vaddq_s32(v107, (int32x4_t)v51);
      v7 = vaddq_s32(v109, (int32x4_t)v51);
    }
    while (v5 != 256);
    v54 = 0;
    v55 = (int32x4_t)xmmword_1B6917C60;
    v56 = (int32x4_t)xmmword_1B6917630;
    do
    {
      v108 = v56;
      v110 = v55;
      v57 = v55.i64[0];
      v58.i64[0] = v56.i32[0];
      v58.i64[1] = v56.i32[1];
      v59 = vcvtq_f64_s64(v58);
      v60 = v55.i64[1];
      v58.i64[0] = v108.i32[2];
      v58.i64[1] = v108.i32[3];
      v61 = vcvtq_f64_s64(v58);
      v58.i64[0] = (int)v57;
      v58.i64[1] = SHIDWORD(v57);
      v62 = vcvtq_f64_s64(v58);
      v58.i64[0] = (int)v60;
      v58.i64[1] = SHIDWORD(v60);
      v63 = (float64x2_t)vdupq_n_s64(0x3F50000000000000uLL);
      v104 = vmulq_f64(v62, v63);
      v106 = vmulq_f64(vcvtq_f64_s64(v58), v63);
      v102 = vmulq_f64(v61, v63);
      v98 = vmulq_f64(v59, v63);
      v100 = pow(v98.f64[0], v6);
      v96 = pow(v98.f64[1], v6);
      v98.f64[0] = pow(v102.f64[0], v6);
      v102.f64[0] = pow(v102.f64[1], v6);
      v94 = pow(v104.f64[0], v6);
      v92 = pow(v104.f64[1], v6);
      v104.f64[0] = pow(v106.f64[0], v6);
      v64 = pow(v106.f64[1], v6);
      v65.f64[0] = v94;
      v65.f64[1] = v92;
      v66.f64[0] = v100;
      v66.f64[1] = v96;
      v67.f64[0] = v98.f64[0];
      v67.f64[1] = v102.f64[0];
      v68.f64[0] = v104.f64[0];
      v68.f64[1] = v64;
      v69 = (float64x2_t)vdupq_n_s64(0x4090000000000000uLL);
      v70 = vaddq_f64(vmulq_f64(v65, v69), v89);
      v71 = vaddq_f64(vmulq_f64(v66, v69), v89);
      v72 = vaddq_f64(vmulq_f64(v68, v69), v89);
      v73 = vaddq_f64(vmulq_f64(v67, v69), v89);
      v74 = (float64x2_t)vbicq_s8((int8x16_t)v70, (int8x16_t)vcltzq_f64(v70));
      v75 = (float64x2_t)vbicq_s8((int8x16_t)v71, (int8x16_t)vcltzq_f64(v71));
      v76 = (float64x2_t)vbicq_s8((int8x16_t)v72, (int8x16_t)vcltzq_f64(v72));
      v77 = (float64x2_t)vbicq_s8((int8x16_t)v73, (int8x16_t)vcltzq_f64(v73));
      v111.val[0] = (int8x16_t)vcgtq_f64(v74, v69);
      v78 = (float64x2_t)vbslq_s8(v111.val[0], (int8x16_t)v69, (int8x16_t)v74);
      *(int32x2_t *)v111.val[1].i8 = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v77, v69), (int8x16_t)v69, (int8x16_t)v77)));
      *(int32x2_t *)v111.val[3].i8 = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v76, v69), (int8x16_t)v69, (int8x16_t)v76)));
      *(int32x2_t *)v111.val[0].i8 = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v75, v69), (int8x16_t)v69, (int8x16_t)v75)));
      *(int32x2_t *)v111.val[2].i8 = vmovn_s64(vcvtq_s64_f64(v78));
      *(int8x16_t *)(a3 + v54) = vqtbl4q_s8(v111, (int8x16_t)xmmword_1B6917D70);
      *(_QWORD *)&v75.f64[0] = 0x800000008;
      *(_QWORD *)&v75.f64[1] = 0x800000008;
      v56 = vaddq_s32(v108, (int32x4_t)v75);
      v55 = vaddq_s32(v110, (int32x4_t)v75);
      v54 += 16;
    }
    while (v54 != 2048);
  }
}

uint64_t sub_1B68C0A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, char *, _QWORD, uint64_t, char *, char *, uint64_t))
{
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  char *v43;
  __int16 v44;
  int v45;
  _BYTE *v46;
  _WORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  char v71;
  unint64_t v72;
  char v73;
  char *v74;
  char v75;
  char v76;
  char *v77;
  BOOL v78;
  uint64_t v79;
  char *v80;
  char v81;
  _QWORD v82[2];
  uint64_t v83;
  int v84;
  char *v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, char *, _QWORD, uint64_t, char *, char *, uint64_t);
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v95 = a7;
  v12 = a6;
  v82[1] = v82;
  v98 = a9;
  v103 = *MEMORY[0x1E0C80C00];
  v15 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v21 = MEMORY[0x1E0C80A78](v15, v16, v17, v18, v19, v20);
  v23 = (char *)v82 - v22;
  result = MEMORY[0x1E0C80A78](v21, v24, v25, v26, v27, v28);
  v36 = (char *)v82 - v35;
  v96 = v32;
  v97 = v30;
  if ((int)v30 >= v32)
    v37 = v32;
  else
    v37 = v30;
  if (v37)
  {
    v38 = v96;
    if ((int)v30 > v32)
      v38 = v97;
    do
    {
      v39 = v38 % v37;
      v38 = v37;
      v37 = v39;
    }
    while (v39);
  }
  if (v31 >= v98)
    v40 = v98;
  else
    v40 = v31;
  if (v40)
  {
    v41 = v98;
    if (v31 > v98)
      v41 = v31;
    do
    {
      v42 = v41 % v40;
      v41 = v40;
      v40 = v42;
    }
    while (v42);
  }
  v93 = a11;
  v43 = (char *)((v34 + 31) & 0xFFFFFFFFFFFFFFF0);
  if ((int)v33 < 1)
  {
    v53 = 0;
  }
  else
  {
    v44 = 0;
    v45 = 0;
    v46 = v36;
    v47 = v23;
    v48 = v33;
    v49 = ((_DWORD)v97 << 16) / v96;
    do
    {
      v50 = v45 >> 16;
      v51 = v45 >> 8;
      v45 += v49;
      v52 = v50 << result;
      *v46++ = v51 & 0xF0;
      *v47++ = v52 - v44;
      v44 = v52;
      --v48;
    }
    while (v48);
    v53 = v33;
  }
  v94 = result;
  v91 = a10;
  v92 = a12;
  v54 = (int)v33 - 1;
  do
  {
    *(_WORD *)&v23[2 * v53] = *(_WORD *)&v23[2 * v54];
    v36[v53++] = v36[v54];
  }
  while ((_DWORD)v33 + 16 != v53);
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  if (v98 >= 1)
  {
    v55 = 0;
    v56 = 0;
    v57 = v31 - 1;
    v89 = v31 - 3;
    v90 = v31 - 2;
    v87 = v31 - 5;
    v88 = v31 - 4;
    v86 = (int)v97 - 1;
    v83 = (int)v97 - 2;
    v85 = v43 - 1;
    v58 = &v43[(int)v97];
    v84 = (v31 << 16) / v98;
    do
    {
      v59 = v55 >> 16;
      v60 = (v55 >> 16) - 3;
      if (v55 < 196608)
        v60 = 0;
      v61 = a2 + v60 * a3;
      v62 = v59 - 2;
      if (v55 < 0x20000)
        v62 = 0;
      *(_QWORD *)&v99 = v61;
      *((_QWORD *)&v99 + 1) = a2 + v62 * a3;
      v63 = v59 - 1;
      if (v55 < 0x10000)
        v63 = 0;
      *(_QWORD *)&v100 = a2 + v63 * a3;
      *((_QWORD *)&v100 + 1) = a2 + ((uint64_t)v55 >> 16) * a3;
      if (v59 <= v90)
        v64 = v59 + 1;
      else
        v64 = v57;
      v65 = a2 + v64 * a3;
      v66 = v59 + 2;
      if (v59 > v89)
        v66 = v57;
      *(_QWORD *)&v101 = v65;
      *((_QWORD *)&v101 + 1) = a2 + v66 * a3;
      v67 = v59 + 3;
      if (v59 > v88)
        v67 = v57;
      v68 = a2 + v67 * a3;
      v69 = v59 <= v87;
      v70 = v59 + 4;
      if (!v69)
        v70 = v57;
      *(_QWORD *)&v102 = v68;
      *((_QWORD *)&v102 + 1) = a2 + v70 * a3;
      Filter8tapV_neon64((uint64_t)v43, &v99, v97, (int16x8_t *)(v91 + 16 * ((unsigned __int16)v55 >> 12)), 7u);
      v71 = *v43;
      if (v94)
      {
        v72 = 0;
        v73 = v43[1];
        v74 = v85;
        v75 = v43[v86];
        v76 = v43[v83];
        do
        {
          *(v74 - 1) = v71;
          *v74 = v73;
          v74 -= 2;
          v77 = &v58[v72];
          *v77 = v76;
          v77[1] = v75;
          v78 = v72 >= 6;
          v72 += 2;
        }
        while (!v78);
      }
      else
      {
        v79 = 0;
        v80 = v85;
        v81 = v43[v86];
        do
        {
          *v80-- = v71;
          v58[v79++] = v81;
        }
        while (v79 != 4);
      }
      v55 += v84;
      result = v92(v12, v43, v96, v93, v23, v36, 7);
      v12 += v95;
      ++v56;
    }
    while (v56 != v98);
  }
  return result;
}

int64_t sub_1B68C0E54(int64_t result, uint64_t a2, uint64_t a3, int a4, int a5, signed int a6, int a7)
{
  int v7;
  uint64_t v8;
  const __int16 *v9;
  int16x8_t v10;
  const __int16 *v11;
  int16x8_t v12;
  const __int16 *v13;
  int16x8_t v14;
  const __int16 *v15;
  int16x8_t v16;
  const __int16 *v17;
  int16x8_t v18;
  const __int16 *v19;
  int16x8_t v20;
  const __int16 *v21;
  int16x8_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x2_t v28;
  uint16x8_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint32x2_t v38;
  int v39;
  int32x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64x2_t v46;
  uint8x16_t v47;

  v7 = a5 - 1;
  if (a5 >= 1)
  {
    v8 = 0;
    v9 = (const __int16 *)(result + 1536);
    v10 = vld1q_dup_s16(v9);
    v11 = (const __int16 *)(result + 1552);
    v12 = vld1q_dup_s16(v11);
    v13 = (const __int16 *)(result + 1568);
    v14 = vld1q_dup_s16(v13);
    v15 = (const __int16 *)(result + 1584);
    v16 = vld1q_dup_s16(v15);
    v17 = (const __int16 *)(result + 1600);
    v18 = vld1q_dup_s16(v17);
    v19 = (const __int16 *)(result + 1616);
    v20 = vld1q_dup_s16(v19);
    v21 = (const __int16 *)(result + 1632);
    v22 = vld1q_dup_s16(v21);
    v23 = a5 - 2;
    v24 = a5 - 3;
    v25 = a5 - 4;
    v26 = a7;
    v27 = a5;
    v28 = vdup_n_s32(a6);
    v29.i64[0] = 0x80008000800080;
    v29.i64[1] = 0x80008000800080;
    v30 = a2;
    do
    {
      v31 = v8;
      v32 = v8 >= 3;
      v33 = v8 - 3;
      if (v32)
        v34 = v33;
      else
        v34 = 0;
      v8 = v31 + 1;
      if (a4 >= 1)
      {
        result = 0;
        v35 = a2 + a6 * v34;
        v36 = v31 + 3;
        if (v31 > v25)
          v36 = v7;
        v37 = v31 + 2;
        if (v31 > v24)
          v37 = v7;
        v38 = (uint32x2_t)vdup_n_s32(v31);
        if (v31 <= v23)
          v39 = v31 + 1;
        else
          v39 = v7;
        v40 = vmul_s32((int32x2_t)vqsub_u32(v38, (uint32x2_t)0x200000001), v28);
        v41.i64[0] = v40.i32[0];
        v41.i64[1] = v40.i32[1];
        v42 = v41;
        v43 = a2 + a6 * (uint64_t)v36;
        v44 = a2 + a6 * (uint64_t)v37;
        do
        {
          v46 = vaddq_s64(vdupq_n_s64(result), v42);
          v47 = *(uint8x16_t *)(v43 + result);
          v45 = a2 + a6 * (uint64_t)v39;
          *(uint8x16_t *)(a3 + result) = vqmovn_high_u16(vqmovn_u16(vshrq_n_u16(vqaddq_u16((uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v14, (int16x8_t)vmovl_u8(*(uint8x8_t *)(a2 + v46.i64[0]))), v12, (int16x8_t)vmovl_u8(*(uint8x8_t *)(a2 + v46.i64[1]))), v10, (int16x8_t)vmovl_u8(*(uint8x8_t *)(v35 + result))), v16, (int16x8_t)vmovl_u8(*(uint8x8_t *)(v30 + result))), v18,
                                                                   (int16x8_t)vmovl_u8(*(uint8x8_t *)(v45 + result))),
                                                                 v20,
                                                                 (int16x8_t)vmovl_u8(*(uint8x8_t *)(v44 + result))),
                                                               v22,
                                                               (int16x8_t)vmovl_u8(*(uint8x8_t *)v47.i8)),
                                                 v29),
                                               8uLL)),
                                           vshrq_n_u16(vqaddq_u16((uint16x8_t)vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v14, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(a2 + v46.i64[0]))), v12, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(a2 + v46.i64[1]))), v10, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v35 + result))), v16, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v30 + result))), v18, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v45 + result))), v20,
                                                               (int16x8_t)vmovl_high_u8(*(uint8x16_t *)(v44 + result))),
                                                             v22,
                                                             (int16x8_t)vmovl_high_u8(v47)),
                                               v29),
                                             8uLL));
          result += 16;
        }
        while (result < a4);
      }
      v30 += a6;
      a3 += v26;
    }
    while (v8 != v27);
  }
  return result;
}

int64_t sub_1B68C1024(int64_t a1)
{
  signed int *v2;

  v2 = (signed int *)(a1 + 22304);
  sub_1B68C0E54(a1, *(_QWORD *)(a1 + 22328), *(_QWORD *)(a1 + 22344), *(_DWORD *)(a1 + 22368), *(_DWORD *)(a1 + 22372), *(_DWORD *)(a1 + 22304), *(_DWORD *)(a1 + 22312));
  return sub_1B68C0E54(a1, *(_QWORD *)(a1 + 22336), *(_QWORD *)(a1 + 22352), v2[16], v2[17] >> 1, v2[1], v2[3]);
}

uint64_t sub_1B68C107C(uint64_t a1)
{
  char *v1;
  unint64_t v2;
  unsigned int v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int16x8_t v31;
  int16x8_t v32;
  unsigned int v33;
  int16x8_t v34;
  int16x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int16x8_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x8_t v47;
  int8x16_t v48;
  int v50;
  unsigned int v51;
  signed int v52;
  int v53;
  int v54;
  __int16 v55;
  int v56;
  int32x4_t v57;
  unint64_t v58;
  int v59;
  int v60;
  char v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  const float *v74;
  int8x8_t v75;
  int v76;
  char *v77;
  int v78;
  int32x4_t v79;
  int32x4_t v80;
  const char *v81;
  int16x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x8x2_t v88;

  v1 = (char *)(a1 + 22272);
  v2 = *(unsigned int *)(a1 + 22368);
  v3 = *(_DWORD *)(a1 + 22372);
  v4 = *(_BYTE *)(a1 + 22272);
  v5 = 1 << (v4 - 5);
  if (v3)
  {
    v6 = 0;
    v7 = ((_DWORD)v2 - 8) << v4;
    v8 = (v3 - 8) << v4;
    v9 = 2 << v4;
    v10 = (__int16)(*(_WORD *)(a1 + 22278) - v9);
    v11 = (__int16)(*(_WORD *)(a1 + 22284) - v9);
    v12 = a1 + 22016;
    do
    {
      if ((_DWORD)v2)
      {
        v13 = 0;
        v14 = v11 + v6 * *(__int16 *)(a1 + 22282);
        v15 = v10 + v6 * *(__int16 *)(a1 + 22276);
        v16 = 7;
        do
        {
          v17 = *(__int16 *)(a1 + 22274);
          v18 = *(__int16 *)(a1 + 22280);
          v19 = *v1 - 4;
          v20 = *(_QWORD *)(a1 + 22328);
          v21 = *(_DWORD *)(a1 + 22304);
          v22 = v14 + v16 * v18;
          v23 = v15 + v16 * v17;
          v24 = 0;
          v25 = -8;
          do
          {
            v26 = v23 & ~(v23 >> 31);
            if (v7 < v26)
              v26 = v7;
            v27 = v22 & ~(v22 >> 31);
            if (v8 < v27)
              v27 = v8;
            v28 = (v26 + v5) >> v19;
            v29 = (v27 + v5) >> v19;
            v30 = v29 & 0xF;
            v29 >>= 4;
            v31 = *(int16x8_t *)(v12 + 16 * (v28 & 0xF));
            v32 = *(int16x8_t *)(v12 + 16 * v30);
            v33 = v29 * v21 + (v28 >> 4);
            v34 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + v33));
            v35 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + v33 + v21));
            v36 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v32.i8, 1), *(int16x4_t *)v34.i8, *(int16x4_t *)v32.i8, 0);
            v37 = vmlal_high_lane_s16(vmull_high_lane_s16(v35, *(int16x4_t *)v32.i8, 1), v34, *(int16x4_t *)v32.i8, 0);
            v38 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + ((v29 + 2) * v21 + (v28 >> 4))));
            v39 = vmlal_lane_s16(v36, *(int16x4_t *)v38.i8, *(int16x4_t *)v32.i8, 2);
            v40 = vmlal_high_lane_s16(v37, v38, *(int16x4_t *)v32.i8, 2);
            v41 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + ((v29 + 3) * v21 + (v28 >> 4))));
            v42 = vmlal_lane_s16(v39, *(int16x4_t *)v41.i8, *(int16x4_t *)v32.i8, 3);
            v43 = vmlal_high_lane_s16(v40, v41, *(int16x4_t *)v32.i8, 3);
            v44 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + ((v29 + 4) * v21 + (v28 >> 4))));
            v45 = vmlal_laneq_s16(v42, *(int16x4_t *)v44.i8, v32, 4);
            v46 = vmlal_high_laneq_s16(v43, v44, v32, 4);
            v47 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(v20 + ((v29 + 5) * v21 + (v28 >> 4))));
            v48 = (int8x16_t)vmlaq_s32(vmulq_s32(vmlal_laneq_s16(v45, *(int16x4_t *)v47.i8, v32, 5), vmovl_s16(*(int16x4_t *)v31.i8)), vmlal_high_laneq_s16(v46, v47, v32, 5), vmovl_high_s16(v31));
            v24 = vshld_n_s64(v24, 8uLL)
                + *(_QWORD *)&vmin_s32(vmax_s32((int32x2_t)vrshrd_n_s64(vpaddl_s32(vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), *(int32x2_t *)v48.i8)), 0xCuLL), 0), (int32x2_t)0xFF000000FFLL);
            v22 -= v18;
            v23 -= v17;
          }
          while (!__CFADD__(v25++, 1));
          *(_QWORD *)(*(_QWORD *)(a1 + 22344) + (*(_DWORD *)(a1 + 22312) * v6) + v13) = v24;
          v13 += 8;
          v16 += 8;
        }
        while (v13 < v2);
      }
      ++v6;
    }
    while (v6 != v3);
    v4 = *v1;
  }
  if (v3 >= 2)
  {
    v50 = 0;
    v51 = v3 >> 1;
    v52 = ((v2 >> 1) - 4) << v4;
    v53 = (v51 - 4) << v4;
    v54 = 1 << v4;
    v55 = (*(__int16 *)(a1 + 22284) >> 1) - v54;
    v56 = (__int16)((*(__int16 *)(a1 + 22278) >> 1) - v54);
    if (v51 <= 1)
      v51 = 1;
    v57.i64[0] = 0xFF000000FFLL;
    v57.i64[1] = 0xFF000000FFLL;
    do
    {
      if (v2 >= 2)
      {
        v58 = 0;
        v59 = v56 + v50 * *(__int16 *)(a1 + 22276);
        v60 = v55 + v50 * *(__int16 *)(a1 + 22282);
        do
        {
          v61 = *v1 - 4;
          v62 = *(_DWORD *)(a1 + 22308);
          v63 = 0;
          v64 = 3;
          do
          {
            v65 = 0;
            v66 = v64;
            v67 = v64 + v58;
            v68 = v59 + v67 * *(__int16 *)(a1 + 22274);
            v69 = v60 + v67 * *(__int16 *)(a1 + 22280);
            v70 = v68 & ~(v68 >> 31);
            if (v52 < v70)
              v70 = v52;
            v71 = v69 & ~(v69 >> 31);
            if (v53 < v71)
              v71 = v53;
            v72 = (v70 + v5) >> v61;
            v73 = (v71 + v5) >> v61;
            v74 = (const float *)((char *)&unk_1B6933DB5 + 4 * (v72 & 0xF));
            v75 = (int8x8_t)vld1_dup_f32(v74);
            v76 = v73 >> 4;
            v77 = (char *)&unk_1B6933DB5 + 4 * (v73 & 0xF);
            v78 = v62 * v76 + 2 * (v72 >> 4);
            v79 = 0uLL;
            v80 = 0uLL;
            do
            {
              v81 = (const char *)(*(_QWORD *)(a1 + 22336) + v78);
              v88 = vld2_s8(v81);
              v82 = vdup_n_s16(v77[v65]);
              v79 = vmlal_s16(v79, (int16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v88.val[0]), v82);
              v80 = vmlal_s16(v80, (int16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v88.val[1]), v82);
              ++v65;
              v78 += v62;
            }
            while (v65 != 4);
            v83 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v75));
            v84 = vmulq_s32(v79, v83);
            v85 = (int8x16_t)vmulq_s32(v80, v83);
            *(int32x2_t *)v84.i8 = vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL), *(int32x2_t *)v84.i8);
            v84.u64[1] = (unint64_t)vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), *(int32x2_t *)v85.i8);
            v86 = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)vrshrq_n_s64(vpaddlq_s32(v84), 0xCuLL), (int32x4_t)0), v57);
            v63 = vshld_n_s64(v63, 0x10uLL)
                + *(_QWORD *)&vadd_s32(vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL), 8uLL), *(int32x2_t *)v86.i8);
            v64 = v66 - 1;
          }
          while (v66);
          *(_QWORD *)(*(_QWORD *)(a1 + 22352) + (*(_DWORD *)(a1 + 22316) * v50) + 2 * (int)v58) = v63;
          v58 += 4;
        }
        while (v58 < v2 >> 1);
      }
      ++v50;
    }
    while (v50 != v51);
  }
  return 0;
}

uint64_t sub_1B68C1460(uint64_t a1)
{
  unsigned int *v2;
  _BOOL4 v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int16x8_t v52;
  unsigned int v53;
  int16x8_t v54;
  int16x8_t v55;
  unint64_t v56;
  BOOL v57;
  int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  int v69;
  uint16x8_t v70;
  uint8x16_t v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  uint16x8_t v78;
  int8x16_t v79;
  unsigned __int128 v80;
  unsigned __int128 v81;
  unsigned int v82;
  unsigned int i;
  unsigned int v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  int8x16_t v93;
  unint64_t v94;
  uint8x16_t v95;
  int8x16_t v96;
  uint16x8_t v97;
  int16x8_t v98;
  uint16x8_t v99;
  unint64_t v100;
  uint64_t v101;
  int8x16_t v102;
  uint8x16_t v103;
  int v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  uint16x8_t v109;
  uint16x8_t v110;
  int16x8_t v111;
  uint8x16_t v112;
  uint16x8_t v113;
  uint8x16_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  unsigned __int128 v117;
  unsigned __int128 v118;
  unsigned int v119;
  unint64_t v120;
  char v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int8x16_t v130;
  int16x8_t v131;
  unsigned int v132;
  unint64_t v133;
  uint64_t v134;
  uint8x16_t v135;
  uint8x16_t v136;
  int v137;
  uint16x8_t v138;
  uint8x16_t v139;
  uint16x8_t v140;
  uint16x8_t v141;
  unsigned __int128 v142;
  unsigned __int128 v143;
  unsigned int v144;
  int v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  int8x16_t v152;
  unint64_t v153;
  unint64_t v154;
  uint8x16_t v155;
  int8x16_t v156;
  uint16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  unint64_t v162;
  int v163;
  int v164;
  int v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int8x16_t v174;
  uint8x16_t v175;
  uint8x16_t v176;
  uint8x16_t v177;
  uint8x16_t v178;
  uint8x16_t v179;
  int v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  uint16x8_t v185;
  uint16x8_t v186;
  uint8x8_t v187;
  int16x8_t v188;
  uint16x8_t v189;
  uint8x16_t v190;
  uint8x16_t v191;
  uint8x16_t v192;
  uint8x16_t v193;
  uint8x16_t v194;
  uint8x16_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  uint16x8_t v199;
  int16x8_t v200;
  uint16x8_t v201;
  int16x8_t v202;
  uint16x8_t v203;
  int8x16_t v204;
  int8x16_t v205;
  uint8x16_t v206;
  int16x8_t v207;
  unsigned __int128 v208;
  unsigned __int128 v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v214;
  unsigned int v215;
  int v216;
  _BYTE v217[16];
  int v218;
  int v219;
  int v220;
  int v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned int *)(a1 + 22304);
  if ((*(_DWORD *)(a1 + 248) - *(_DWORD *)(a1 + 252)) <= 2)
  {
    v3 = *(_BYTE *)(a1 + 244) == 0;
  }
  else
  {
    v3 = 0;
    *(_BYTE *)(a1 + 244) = 1;
  }
  v4 = *(_DWORD *)(a1 + 256);
  if (v4 < 1)
    v5 = 1;
  else
    v5 = 3;
  v216 = *(_DWORD *)(a1 + 256);
  if (v4 >= 4)
    v6 = 5;
  else
    v6 = v5;
  if (!v3 || !*(_BYTE *)(a1 + 22512))
  {
    v82 = *(_DWORD *)(a1 + 22372);
    if (v82)
    {
      for (i = 0; i < v82; ++i)
      {
        memcpy((void *)(*(_QWORD *)(a1 + 22344) + v2[2] * i), (const void *)(*(_QWORD *)(a1 + 22328) + *v2 * i), v2[18]);
        memcpy((void *)(*(_QWORD *)(a1 + 272) + *v2 * i), (const void *)(*(_QWORD *)(a1 + 22328) + *v2 * i), v2[16]);
        v82 = v2[17];
      }
      if (v82 >= 2)
      {
        v84 = 0;
        do
        {
          memcpy((void *)(*(_QWORD *)(a1 + 22352) + v2[2] * v84), (const void *)(*(_QWORD *)(a1 + 22336) + *v2 * v84), v2[18]);
          memcpy((void *)(*(_QWORD *)(a1 + 272) + v2[17] * *v2 + *v2 * v84), (const void *)(*(_QWORD *)(a1 + 22336) + *v2 * v84), v2[16]);
          ++v84;
          v82 = v2[17];
        }
        while (v84 < v82 >> 1);
      }
    }
    bzero(*(void **)(a1 + 22504), 4 * (v2[16] >> 3) * (v82 >> 3));
    bzero(*(void **)(a1 + 22464), (v2[16] >> 3) * (v2[17] >> 3));
    *(_BYTE *)(a1 + 264) = 0;
    *(_BYTE *)(a1 + 244) = 0;
    goto LABEL_149;
  }
  v214 = (*(_DWORD *)(a1 + 22448) - 14) & ~((*(_DWORD *)(a1 + 22448) - 14) >> 31);
  v7 = *(_DWORD *)(a1 + 22372);
  if (v7 < 0x10)
    goto LABEL_63;
  v8 = 0;
  v9 = 0;
  v215 = 0;
  LODWORD(v10) = *(_DWORD *)(a1 + 22368);
  v11 = 1;
  do
  {
    if (v10 < 0x10)
      goto LABEL_62;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      off_1EF13A468(*(_QWORD *)(a1 + 22328) + v12 + v8 * *v2, *v2, v217, &v218);
      if (!v218)
        v218 = 1;
      v15 = v2[16];
      if (!v219)
        v219 = 1;
      if (!v220)
        v220 = 1;
      if (!v221)
        v221 = 1;
      v16 = v15 >> 3;
      v17 = v13 + v9 * (v15 >> 3);
      v18 = *(_QWORD *)(a1 + 22504);
      v19 = v17;
      if (!*(_DWORD *)(v18 + 4 * v17))
      {
        *(_DWORD *)(v18 + 4 * v17) = 1;
        v18 = *(_QWORD *)(a1 + 22504);
      }
      v20 = v17 + 1;
      if (!*(_DWORD *)(v18 + 4 * v20))
      {
        *(_DWORD *)(v18 + 4 * v20) = 1;
        v18 = *(_QWORD *)(a1 + 22504);
      }
      v21 = v13 + v11 * v16;
      v22 = v21;
      if (!*(_DWORD *)(v18 + 4 * v21))
      {
        *(_DWORD *)(v18 + 4 * v21) = 1;
        v18 = *(_QWORD *)(a1 + 22504);
      }
      v23 = v21 + 1;
      if (!*(_DWORD *)(v18 + 4 * v23))
        *(_DWORD *)(v18 + 4 * v23) = 1;
      *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v19) = v218;
      *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v20) = v219;
      *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v22) = v220;
      *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v23) = v221;
      v24 = *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v19);
      v25 = *(_DWORD *)(*(_QWORD *)(a1 + 22504) + 4 * v19);
      v26 = *(_QWORD *)(a1 + 22496);
      if (v24 >= v25)
      {
        *(_DWORD *)(v26 + 4 * v19) = v24 / v25;
      }
      else
      {
        *(_DWORD *)(v26 + 4 * v19) = v25 / v24;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v19) *= *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v19);
      }
      v27 = *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v20);
      v28 = *(_DWORD *)(*(_QWORD *)(a1 + 22504) + 4 * v20);
      v29 = *(_QWORD *)(a1 + 22496);
      if (v27 >= v28)
      {
        *(_DWORD *)(v29 + 4 * v20) = v27 / v28;
      }
      else
      {
        *(_DWORD *)(v29 + 4 * v20) = v28 / v27;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v20) *= *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v20);
      }
      v30 = *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v22);
      v31 = *(_DWORD *)(*(_QWORD *)(a1 + 22504) + 4 * v22);
      v32 = *(_QWORD *)(a1 + 22496);
      if (v30 >= v31)
      {
        *(_DWORD *)(v32 + 4 * v22) = v30 / v31;
      }
      else
      {
        *(_DWORD *)(v32 + 4 * v22) = v31 / v30;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v22) *= *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v22);
      }
      v33 = *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v23);
      v34 = *(_DWORD *)(*(_QWORD *)(a1 + 22504) + 4 * v23);
      v35 = *(_QWORD *)(a1 + 22496);
      if (v33 >= v34)
      {
        *(_DWORD *)(v35 + 4 * v23) = v33 / v34;
      }
      else
      {
        *(_DWORD *)(v35 + 4 * v23) = v34 / v33;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v23) *= *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v23);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 22456) + v19) = v217[0];
      *(_BYTE *)(*(_QWORD *)(a1 + 22456) + v20) = v217[1];
      *(_BYTE *)(*(_QWORD *)(a1 + 22456) + v22) = v217[2];
      *(_BYTE *)(*(_QWORD *)(a1 + 22456) + v23) = v217[3];
      v36 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v19) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v19);
      if (v36 < 0)
        v36 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v19) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v19);
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v19) = v6 + v6 * v36 * *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v19);
      v37 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v20) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v20);
      if (v37 < 0)
        v37 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v20) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v20);
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v20) = v6 + v6 * v37 * *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v20);
      v38 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v22) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v22);
      if (v38 < 0)
        v38 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v22) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v22);
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v22) = v6 + v6 * v38 * *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v22);
      v39 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v23) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v23);
      if (v39 < 0)
        v39 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v23) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v23);
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v23) = v6 + v6 * v39 * *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v23);
      v40 = *(_QWORD *)(a1 + 22496);
      v41 = *(_DWORD *)(v40 + 4 * v19);
      v42 = v41 + *(_DWORD *)(v40 + 4 * v22) + *(_DWORD *)(v40 + 4 * v20) + *(_DWORD *)(v40 + 4 * v23) + 2;
      *(_DWORD *)(v40 + 4 * v19) = v41 + (v42 >> 3);
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v20) += v42 >> 3;
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v22) += v42 >> 3;
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v23) += v42 >> 3;
      v10 = v2[16];
      if (v14 < v10 >> 6 || v14 > v2[16] - (v2[16] >> 6) || (v43 = v2[17], v215 < v43 >> 6))
      {
        if (v216 > 0)
          goto LABEL_60;
LABEL_59:
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v19) -= 4;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v20) -= 4;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v22) -= 4;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v23) -= 4;
        LODWORD(v10) = v2[16];
        goto LABEL_60;
      }
      if (v216 <= 0 && v215 > v43 - (v43 >> 6))
        goto LABEL_59;
LABEL_60:
      ++v14;
      v13 += 2;
      v12 += 16;
    }
    while (v14 < v10 >> 4);
    v7 = v2[17];
LABEL_62:
    v11 += 2;
    v9 += 2;
    v8 += 16;
    ++v215;
  }
  while (v215 < v7 >> 4);
LABEL_63:
  if (v214 >= 4 * *(unsigned __int8 *)(a1 + 264) + 15)
  {
    if (v7 >= 2)
    {
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v88 = *(_QWORD *)(a1 + 22336);
      v89 = *v2;
      v90 = *(_QWORD *)(a1 + 272) + *v2 * v7;
      v91 = *(_QWORD *)(a1 + 22352);
      v92 = v2[2];
      v93 = vdupq_n_s8(3 * v214);
      v94 = v2[16];
      v95.i64[0] = 0x8080808080808080;
      v95.i64[1] = 0x8080808080808080;
      v96.i64[0] = 0x4C4C4C4C4C4C4C4CLL;
      v96.i64[1] = 0x4C4C4C4C4C4C4C4CLL;
      v97.i64[0] = 0x7F007F007F007FLL;
      v97.i64[1] = 0x7F007F007F007FLL;
      v98.i64[0] = 0x80008000800080;
      v98.i64[1] = 0x80008000800080;
      v99.i64[0] = 0x100010001000100;
      v99.i64[1] = 0x100010001000100;
      do
      {
        if ((_DWORD)v94)
        {
          v100 = 0;
          v101 = 4 * (int)((v94 >> 3) * (v87 >> 2));
          do
          {
            v102 = *(int8x16_t *)(v88 + (v86 + v100));
            v103 = *(uint8x16_t *)(v90 + (v86 + v100));
            v104 = *(_DWORD *)(*(_QWORD *)(a1 + 22496) + v101);
            if (v104 >= 18)
              v104 = 18;
            if (v104 <= 3)
              v104 = 3;
            v105 = (int16x8_t)vqaddq_s8(vmaxq_s8((int8x16_t)vqsubq_u8(v95, vabdq_u8((uint8x16_t)v102, (uint8x16_t)vrev16q_s8(v102))), v96), v93);
            v106 = vmovl_s8(*(int8x8_t *)v105.i8);
            v107 = (int16x8_t)vaddw_u8(v97, *(uint8x8_t *)v102.i8);
            v108 = vmulq_s16((int16x8_t)vaddw_high_u8(v97, (uint8x16_t)v102), vmovl_high_s8((int8x16_t)v105));
            v105.i64[0] = 0x80008000800080;
            v105.i64[1] = 0x80008000800080;
            v109 = (uint16x8_t)vrsraq_n_s16(v105, vmulq_s16(v107, v106), 7uLL);
            v106.i64[0] = 0x80008000800080;
            v106.i64[1] = 0x80008000800080;
            v110 = (uint16x8_t)vrsraq_n_s16(v106, v108, 7uLL);
            *(uint8x8_t *)v108.i8 = vqmovn_u16(v109);
            *(uint8x8_t *)v109.i8 = vqmovn_u16(v110);
            v111 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.i8);
            v112 = vqmovn_high_u16(*(uint8x8_t *)v108.i8, v110);
            v113 = (uint16x8_t)vdupq_n_s16(v104 - 3);
            v114 = vabdq_u8(v112, v103);
            v115 = vmull_u8(*(uint8x8_t *)v114.i8, *(uint8x8_t *)v114.i8);
            v116 = vqshlq_u16(vmull_high_u8(v114, v114), v113);
            v117 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16(v99, vshrq_n_u16(vqshlq_u16(v115, v113), 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            v118 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16(v99, vshrq_n_u16(v116, 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            *(uint8x16_t *)(v91 + v85 + v100) = vqmovn_high_u16(vqmovn_u16(vrshrq_n_u16(vmlal_u8((uint16x8_t)vmulq_s16(vsubq_s16(v98, (int16x8_t)v117), v111), (uint8x8_t)vmovn_s16((int16x8_t)v117), *(uint8x8_t *)v103.i8), 7uLL)), vrshrq_n_u16(vmlal_high_u8((uint16x8_t)vmulq_s16(vsubq_s16(v98, (int16x8_t)v118), (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.i8)), (uint8x16_t)vuzp1q_s8(v93, (int8x16_t)v118), v103), 7uLL));
            v100 += 16;
            v101 += 8;
          }
          while (v100 < v94);
        }
        ++v87;
        v86 += v89;
        v85 += v92;
      }
      while (v87 != v7 >> 1);
      v7 = v2[17];
    }
    if (v7)
    {
      v119 = 0;
      do
      {
        memcpy((void *)(*(_QWORD *)(a1 + 22344) + v2[2] * v119), (const void *)(*(_QWORD *)(a1 + 22328) + *v2 * v119), v2[18]);
        ++v119;
        LODWORD(v120) = v2[17];
      }
      while (v119 < v120);
      v121 = 0;
      goto LABEL_139;
    }
    v211 = 0;
    *(_BYTE *)(a1 + 264) = 0;
  }
  else
  {
    v44 = v2[16];
    if (v214 > 8 || v7 > 0xF0 || v44 > 0x140)
    {
      if (v7)
      {
        v122 = 0;
        v123 = 0;
        v124 = 0;
        v125 = *(_QWORD *)(a1 + 22328);
        v126 = *(_QWORD *)(a1 + 272);
        v127 = *(_QWORD *)(a1 + 22344);
        v128 = v7;
        v129 = *v2;
        v130.i64[0] = 0x100010001000100;
        v130.i64[1] = 0x100010001000100;
        v131.i64[0] = 0x80008000800080;
        v131.i64[1] = 0x80008000800080;
        v132 = v2[2];
        do
        {
          if ((_DWORD)v44)
          {
            v133 = 0;
            v134 = 4 * (int)((v44 >> 3) * (v124 >> 3));
            do
            {
              v135 = *(uint8x16_t *)(v125 + (v123 + v133));
              v136 = *(uint8x16_t *)(v126 + (v123 + v133));
              v137 = *(_DWORD *)(*(_QWORD *)(a1 + 22496) + v134);
              if (v137 >= 16)
                v137 = 16;
              if (v137 <= 1)
                v137 = 1;
              v138 = (uint16x8_t)vdupq_n_s16(v137 - 1);
              v139 = vabdq_u8(v135, v136);
              v140 = vqshlq_u16(vmull_u8(*(uint8x8_t *)v139.i8, *(uint8x8_t *)v139.i8), v138);
              v141 = vqshlq_u16(vmull_high_u8(v139, v139), v138);
              v142 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v130, vshrq_n_u16(v140, 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
              v143 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v130, vshrq_n_u16(v141, 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
              *(uint8x16_t *)(v127 + v122 + v133) = vqmovn_high_u16(vqmovn_u16(vrshrq_n_u16(vmlal_u8((uint16x8_t)vmulq_s16(vsubq_s16(v131, (int16x8_t)v142), (int16x8_t)vmovl_u8(*(uint8x8_t *)v135.i8)), (uint8x8_t)vmovn_s16((int16x8_t)v142), *(uint8x8_t *)v136.i8), 7uLL)), vrshrq_n_u16(vmlal_high_u8((uint16x8_t)vmulq_s16(vsubq_s16(v131, (int16x8_t)v143), (int16x8_t)vmovl_high_u8(v135)), (uint8x16_t)vuzp1q_s8(v130, (int8x16_t)v143), v136), 7uLL));
              v133 += 16;
              v134 += 8;
            }
            while (v133 < v44);
          }
          ++v124;
          v123 += v129;
          v122 += v132;
        }
        while (v124 != v128);
      }
    }
    else if (v7)
    {
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = *(_QWORD *)(a1 + 22328);
      v49 = *(_QWORD *)(a1 + 272);
      v50 = *(_QWORD *)(a1 + 22344);
      v51 = *v2;
      v52.i64[0] = 0x100010001000100;
      v52.i64[1] = 0x100010001000100;
      v53 = v2[2];
      v54.i64[0] = 0x50005000500050;
      v54.i64[1] = 0x50005000500050;
      v55.i64[0] = 0x80008000800080;
      v55.i64[1] = 0x80008000800080;
      do
      {
        v56 = v47;
        v57 = (_DWORD)v47 != 0;
        v58 = v47 - 1;
        if (v57)
          v59 = v58;
        else
          v59 = 0;
        v47 = v56 + 1;
        if ((_DWORD)v44)
        {
          v60 = 0;
          v61 = 4 * (int)((v44 >> 3) * (v56 >> 3));
          v62 = v51 * v59;
          if (v56 <= v7 - 2)
            v63 = v56 + 1;
          else
            v63 = v7 - 1;
          v64 = v63 * v51;
          do
          {
            v65 = *(uint8x16_t *)(v48 + (v62 + v60));
            v66 = *(uint8x16_t *)(v48 + (v46 + v60));
            v67 = *(uint8x16_t *)(v48 + (v64 + v60));
            v68 = *(uint8x16_t *)(v49 + (v46 + v60));
            v69 = *(_DWORD *)(*(_QWORD *)(a1 + 22496) + v61);
            if (v69 >= 16)
              v69 = 16;
            if (v69 <= 1)
              v69 = 1;
            v70 = (uint16x8_t)vdupq_n_s16(v69 - 1);
            v71 = vabdq_u8(v66, v65);
            v72 = vabdq_u8(v66, v67);
            v73 = vabdq_u8(v66, v68);
            v74 = vqshlq_u16(vmull_u8(*(uint8x8_t *)v73.i8, *(uint8x8_t *)v73.i8), v70);
            v75 = vqshlq_u16(vmull_high_u8(v73, v73), v70);
            v76 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v52, (uint16x8_t)vshlq_n_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v71.i8, *(uint8x8_t *)v71.i8), 2uLL)), v54);
            v77 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v52, (uint16x8_t)vshlq_n_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v72.i8, *(uint8x8_t *)v72.i8), 2uLL)), v54);
            v78 = (uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v52, (uint16x8_t)vshlq_n_s16((int16x8_t)vmull_high_u8(v72, v72), 2uLL)), v54);
            v79 = (int8x16_t)vshrq_n_u16((uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v52, (uint16x8_t)vshlq_n_s16((int16x8_t)vmull_high_u8(v71, v71), 2uLL)), v54), 8uLL);
            v80 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v52, vshrq_n_u16(v74, 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            v81 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v52, vshrq_n_u16(v75, 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            *(uint8x16_t *)(v50 + v45 + v60) = vqmovn_high_u16(vqmovn_u16(vrshrq_n_u16(vmlal_u8((uint16x8_t)vmulq_s16(vsubq_s16(v55, (int16x8_t)v80), (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vshrn_n_s16(v77, 8uLL), *(uint8x8_t *)v67.i8), (uint8x8_t)vshrn_n_s16(v76, 8uLL), *(uint8x8_t *)v65.i8), vsubq_s16(v52, (int16x8_t)vsraq_n_u16(vshrq_n_u16((uint16x8_t)v76, 8uLL), (uint16x8_t)v77, 8uLL)), (int16x8_t)vmovl_u8(*(uint8x8_t *)v66.i8)), 8uLL)), (uint8x8_t)vmovn_s16((int16x8_t)v80), *(uint8x8_t *)v68.i8), 7uLL)), vrshrq_n_u16(vmlal_high_u8((uint16x8_t)vmulq_s16(
                                                                   vsubq_s16(v55, (int16x8_t)v81),
                                                                   (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)vuzp1q_s8((int8x16_t)v52, (int8x16_t)vshrq_n_u16(v78, 8uLL)), v67), (uint8x16_t)vuzp1q_s8((int8x16_t)v52, v79), v65), vsubq_s16(v52, (int16x8_t)vsraq_n_u16((uint16x8_t)v79, v78, 8uLL)), (int16x8_t)vmovl_high_u8(v66)), 8uLL)), (uint8x16_t)vuzp1q_s8((int8x16_t)v52, (int8x16_t)v81), v68), 7uLL));
            v60 += 16;
            v61 += 8;
          }
          while (v60 < v44);
        }
        v46 += v51;
        v45 += v53;
      }
      while (v47 != v7);
    }
    v120 = v2[17];
    if (v120 >= 2)
    {
      v144 = 0;
      v145 = 0;
      v146 = 0;
      v147 = *(_QWORD *)(a1 + 22336);
      v148 = *v2;
      v149 = *(_QWORD *)(a1 + 272) + v120 * *v2;
      v150 = *(_QWORD *)(a1 + 22352);
      v151 = v2[2];
      v152 = vdupq_n_s8(3 * v214);
      v153 = v120 >> 1;
      v154 = v2[16];
      v155.i64[0] = 0x8080808080808080;
      v155.i64[1] = 0x8080808080808080;
      v156.i64[0] = 0x4C4C4C4C4C4C4C4CLL;
      v156.i64[1] = 0x4C4C4C4C4C4C4C4CLL;
      v157.i64[0] = 0x7F007F007F007FLL;
      v157.i64[1] = 0x7F007F007F007FLL;
      v158.i64[0] = 0x80008000800080;
      v158.i64[1] = 0x80008000800080;
      v159.i64[0] = 0x100010001000100;
      v159.i64[1] = 0x100010001000100;
      v160.i64[0] = 0x34003400340034;
      v160.i64[1] = 0x34003400340034;
      v161.i64[0] = 0x30003000300030;
      v161.i64[1] = 0x30003000300030;
      do
      {
        v162 = v146;
        v57 = v146 >= 2;
        v163 = v146 - 2;
        if (v57)
          v164 = v163;
        else
          v164 = 0;
        if ((_DWORD)v162)
          v165 = v162 - 1;
        else
          v165 = 0;
        v146 = v162 + 1;
        if ((_DWORD)v154)
        {
          v166 = 0;
          v167 = 4 * (int)((v154 >> 3) * (v162 >> 2));
          v168 = v148 * v164;
          v169 = v148 * v165;
          v170 = v162 + 2;
          if (v162 > (v153 - 3))
            v170 = v153 - 1;
          if (v162 <= (v153 - 2))
            v171 = v162 + 1;
          else
            v171 = v153 - 1;
          v172 = v171 * v148;
          v173 = v170 * v148;
          do
          {
            v174 = *(int8x16_t *)(v147 + (v145 + v166));
            v175 = *(uint8x16_t *)(v147 + (v169 + v166));
            v176 = *(uint8x16_t *)(v147 + (v172 + v166));
            v177 = *(uint8x16_t *)(v147 + (v168 + v166));
            v178 = *(uint8x16_t *)(v147 + (v173 + v166));
            v179 = *(uint8x16_t *)(v149 + (v145 + v166));
            v180 = *(_DWORD *)(*(_QWORD *)(a1 + 22496) + v167);
            if (v180 >= 18)
              v180 = 18;
            if (v180 <= 3)
              v180 = 3;
            v181 = (int16x8_t)vqaddq_s8(vmaxq_s8((int8x16_t)vqsubq_u8(v155, vabdq_u8((uint8x16_t)v174, (uint8x16_t)vrev16q_s8(v174))), v156), v152);
            v182 = vmovl_s8(*(int8x8_t *)v181.i8);
            v183 = (int16x8_t)vaddw_u8(v157, *(uint8x8_t *)v174.i8);
            v184 = vmulq_s16((int16x8_t)vaddw_high_u8(v157, (uint8x16_t)v174), vmovl_high_s8((int8x16_t)v181));
            v181.i64[0] = 0x80008000800080;
            v181.i64[1] = 0x80008000800080;
            v185 = (uint16x8_t)vrsraq_n_s16(v181, vmulq_s16(v183, v182), 7uLL);
            v183.i64[0] = 0x80008000800080;
            v183.i64[1] = 0x80008000800080;
            v186 = (uint16x8_t)vrsraq_n_s16(v183, v184, 7uLL);
            *(uint8x8_t *)v184.i8 = vqmovn_u16(v185);
            v187 = vqmovn_u16(v186);
            v188 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v184.i8);
            v189 = (uint16x8_t)vdupq_n_s16(v180 - 3);
            v190 = vqmovn_high_u16(*(uint8x8_t *)v184.i8, v186);
            v191 = vabdq_u8(v190, v175);
            v192 = vabdq_u8(v190, v176);
            v193 = vabdq_u8(v190, v177);
            v194 = vabdq_u8(v190, v178);
            v195 = vabdq_u8(v190, v179);
            v196 = (int16x8_t)vmovl_u8(v187);
            v197 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_u8(*(uint8x8_t *)v191.i8, *(uint8x8_t *)v191.i8), 3uLL)), v160);
            v198 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_u8(*(uint8x8_t *)v192.i8, *(uint8x8_t *)v192.i8), 3uLL)), v160);
            v199 = (uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_high_u8(v192, v192), 3uLL)), v160);
            v200 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_u8(*(uint8x8_t *)v193.i8, *(uint8x8_t *)v193.i8), 3uLL)), v161);
            v201 = (uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_high_u8(v193, v193), 3uLL)), v161);
            v202 = vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_u8(*(uint8x8_t *)v194.i8, *(uint8x8_t *)v194.i8), 3uLL)), v161);
            v203 = (uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_high_u8(v194, v194), 3uLL)), v161);
            v204 = (int8x16_t)vshrq_n_u16((uint16x8_t)vmulq_s16((int16x8_t)vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vmull_high_u8(v191, v191), 3uLL)), v160), 8uLL);
            v205 = (int8x16_t)vshrq_n_u16(v199, 8uLL);
            v206 = (uint8x16_t)vuzp1q_s8(v152, v204);
            v207 = vsubq_s16(v159, (int16x8_t)vsraq_n_u16(vsraq_n_u16(vsraq_n_u16((uint16x8_t)v204, v199, 8uLL), v201, 8uLL), v203, 8uLL));
            v208 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vqshlq_u16(vmull_u8(*(uint8x8_t *)v195.i8, *(uint8x8_t *)v195.i8), v189), 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            v209 = *(_OWORD *)&vshrq_n_u16(vqsubq_u16((uint16x8_t)v159, vshrq_n_u16(vqshlq_u16(vmull_high_u8(v195, v195), v189), 2uLL)), 2uLL) & __PAIR128__(0xC0FFC0FFC0FFC0FFLL, 0xC0FFC0FFC0FFC0FFLL);
            *(uint8x16_t *)(v150 + v144 + v166) = vqmovn_high_u16(vqmovn_u16(vrshrq_n_u16(vmlal_u8((uint16x8_t)vmulq_s16(vsubq_s16(v158, (int16x8_t)v208), (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vshrn_n_s16(v198, 8uLL), *(uint8x8_t *)v176.i8), (uint8x8_t)vshrn_n_s16(v197, 8uLL), *(uint8x8_t *)v175.i8), (uint8x8_t)vshrn_n_s16(v200, 8uLL), *(uint8x8_t *)v177.i8), (uint8x8_t)vshrn_n_s16(v202, 8uLL), *(uint8x8_t *)v178.i8), vsubq_s16(v159, (int16x8_t)vsraq_n_u16(vsraq_n_u16(vsraq_n_u16(vshrq_n_u16((uint16x8_t)v197, 8uLL), (uint16x8_t)v198, 8uLL), (uint16x8_t)v200, 8uLL), (uint16x8_t)v202, 8uLL)), v188), 8uLL)), (uint8x8_t)vmovn_s16((int16x8_t)v208), *(uint8x8_t *)v179.i8), 7uLL)), vrshrq_n_u16(vmlal_high_u8((uint16x8_t)vmulq_s16(
                                                                      vsubq_s16(v158, (int16x8_t)v209),
                                                                      (int16x8_t)vrshrq_n_u16((uint16x8_t)vmlaq_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)vuzp1q_s8(v152, v205), v176), v206, v175), (uint8x16_t)vuzp1q_s8(v152, (int8x16_t)vshrq_n_u16(v201, 8uLL)), v177), (uint8x16_t)vuzp1q_s8(v152, (int8x16_t)vshrq_n_u16(v203, 8uLL)), v178), v207, v196), 8uLL)), (uint8x16_t)vuzp1q_s8(v152, (int8x16_t)v209), v179), 7uLL));
            v166 += 16;
            v167 += 8;
          }
          while (v166 < v154);
        }
        v145 += v148;
        v144 += v151;
      }
      while (v146 != v153);
      LODWORD(v120) = v2[17];
    }
    v121 = 1;
LABEL_139:
    *(_BYTE *)(a1 + 264) = v121;
    if ((_DWORD)v120)
    {
      v210 = 0;
      do
      {
        memcpy((void *)(*(_QWORD *)(a1 + 272) + *v2 * v210), (const void *)(*(_QWORD *)(a1 + 22344) + v2[2] * v210), v2[16]);
        ++v210;
        v211 = v2[17];
      }
      while (v210 < v211);
      if (v211 >= 2)
      {
        v212 = 0;
        do
        {
          memcpy((void *)(*(_QWORD *)(a1 + 272) + *v2 * v211 + *v2 * v212), (const void *)(*(_QWORD *)(a1 + 22352) + v2[2] * v212), v2[16]);
          ++v212;
          v211 = v2[17];
        }
        while (v212 < v211 >> 1);
      }
    }
    else
    {
      v211 = 0;
    }
  }
  memcpy(*(void **)(a1 + 22504), *(const void **)(a1 + 22488), 4 * (v2[16] >> 3) * (v211 >> 3));
  memcpy(*(void **)(a1 + 22464), *(const void **)(a1 + 22456), (v2[16] >> 3) * (v2[17] >> 3));
LABEL_149:
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a1 + 248);
  return 0;
}

uint64_t sub_1B68C2398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v8;
  uint64_t result;
  uint64_t i;
  int v11;

  if (a6 < 1)
    return 0;
  v8 = 0;
  result = 0;
  do
  {
    if (a5 >= 1)
    {
      for (i = 0; i != a5; ++i)
      {
        v11 = *(unsigned __int8 *)(a1 + i) - *(unsigned __int8 *)(a2 + i);
        if (v11 < 0)
          v11 = *(unsigned __int8 *)(a2 + i) - *(unsigned __int8 *)(a1 + i);
        result = (v11 + result);
      }
    }
    a1 += a7 * a3;
    a2 += a7 * a4;
    ++v8;
  }
  while (v8 != a6);
  return result;
}

uint64_t sub_1B68C2408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v8;
  uint64_t result;
  uint64_t i;
  int v11;

  if (a6 < 1)
    return 0;
  v8 = 0;
  result = 0;
  do
  {
    if (a5 >= 1)
    {
      for (i = 0; i != a5; ++i)
      {
        v11 = *(unsigned __int8 *)(a1 + i) - *(unsigned __int8 *)(a2 + i);
        result = (result + v11 * v11);
      }
    }
    a1 += a7 * a3;
    a2 += a7 * a4;
    ++v8;
  }
  while (v8 != a6);
  return result;
}

uint64_t sub_1B68C2474(uint64_t result)
{
  uint64_t *v1;
  _DWORD *v2;
  uint64_t *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t i;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  v1 = *(uint64_t **)(result + 176);
  if (v1)
  {
    v2 = (_DWORD *)result;
    v3 = *(uint64_t **)(result + 168);
    if (v3)
    {
      if (v1 == v3)
      {
        *(_QWORD *)(result + 224) = 0;
        *(_DWORD *)(result + 232) = 0;
      }
      else
      {
        result = 0;
        v4 = 0;
        v5 = v2[4];
        v6 = (int)v2[5];
        v7 = (int)v2[3];
        v25 = *((_DWORD *)v3 + 7) & -(int)v7;
        v8 = v3[5] & -(int)v7;
        v9 = *((unsigned int *)v3 + 4);
        v10 = *v3;
        v11 = *v1;
        v2[58] = 0;
        if (v2[83])
        {
          v12 = 0;
        }
        else
        {
          v12 = 0;
          if (v8 >= 1)
          {
            v4 = 0;
            v13 = 0;
            v12 = 0;
            result = 0;
            v14 = v9 >> 1;
            v15 = &v2[2 * v6 + 102];
            v24 = (int)(v9 >> 1) * (uint64_t)(int)v7;
            v23 = v8;
            do
            {
              if (v25 >= 1)
              {
                v26 = v13;
                for (i = 0; i < v25; i += v7)
                {
                  v27 = result;
                  v17 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, _QWORD))v15)(v10 + i, v11 + i, v14, v14, v7, v7, v2[91]);
                  v12 += v17;
                  v18 = v17 > v5;
                  if (v17 <= v5)
                    v19 = 0;
                  else
                    v19 = v17;
                  result = v27 + v19;
                  v4 = v2[58];
                  if (v18)
                    ++v4;
                  v2[58] = v4;
                }
                v8 = v23;
                v13 = v26;
              }
              v10 += v24;
              v11 += v24;
              v13 += v7;
            }
            while (v13 < v8);
          }
        }
        v20 = (int)v2[91];
        v21 = v7 * v7;
        v2[56] = (v12 * v20 + ((v8 * v25) >> 1)) / (unint64_t)(v8 * v25);
        if (v4)
          v22 = ((unint64_t)((v4 * v21) >> 1) + result * v20) / (v4 * v21);
        else
          LODWORD(v22) = 0;
        v2[57] = v22;
        v2[58] = (v4 + ((v8 * v25 / v21) >> 7)) / ((v8 * v25 / v21) >> 6);
      }
    }
  }
  return result;
}

double sub_1B68C2644(uint64_t a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  double result;

  *(_QWORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 392) = xmmword_1B6917D80;
  *(_BYTE *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 113) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = -1;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = -1;
  v1 = (__int128 *)MEMORY[0x1E0CA2E68];
  v2 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *(_OWORD *)(a1 + 240) = v2;
  v3 = *v1;
  *(_OWORD *)(a1 + 264) = *v1;
  v4 = *((_QWORD *)v1 + 2);
  *(_QWORD *)(a1 + 280) = v4;
  *(_OWORD *)(a1 + 288) = v3;
  *(_QWORD *)(a1 + 304) = v4;
  *(_DWORD *)(a1 + 109) = 0;
  *(_WORD *)(a1 + 349) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 348) = 1;
  *(_OWORD *)(a1 + 352) = xmmword_1B6917D90;
  *(_QWORD *)(a1 + 408) = sub_1B68C2398;
  *(_QWORD *)(a1 + 416) = sub_1B68C2408;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 12) = xmmword_1B6917DA0;
  *(_QWORD *)&result = 0x80000000ALL;
  *(_QWORD *)a1 = 0x80000000ALL;
  *(_DWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  return result;
}

uint64_t sub_1B68C2730(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  _BOOL4 v8;
  _BOOL4 v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t);
  uint64_t result;
  int v18;
  void *v19;

  v8 = a2 < 641;
  v9 = a3 < 641;
  v10 = !v8 || !v9;
  if (v8 && v9)
    v11 = 16;
  else
    v11 = 32;
  if (v10)
    v12 = 4;
  else
    v12 = 1;
  if (v10)
    v13 = 1024;
  else
    v13 = 256;
  if (v10)
    v14 = 512;
  else
    v14 = 128;
  v15 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 364) = v12;
  if (!v15)
    v13 = v14;
  *(_DWORD *)(a1 + 12) = v11;
  *(_DWORD *)(a1 + 16) = v13 / v12;
  *(_DWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 28) = a4 < 0;
  *(_DWORD *)(a1 + 8) = a6;
  v16 = sub_1B68C2848;
  *(_DWORD *)(a1 + 368) = a7;
  if (a5)
    v16 = sub_1B68C2474;
  *(_QWORD *)(a1 + 424) = v16;
  result = operator new[]();
  *(_QWORD *)(a1 + 384) = result;
  *(_DWORD *)(a1 + 400) = 10;
  v18 = *(_DWORD *)(a1 + 12);
  if (v18 == 32)
  {
    if (*(_DWORD *)(a1 + 364) == 8)
      v19 = sub_1B68F9408;
    else
      v19 = sub_1B68F9364;
  }
  else
  {
    if (v18 != 16)
      return result;
    v19 = sub_1B68F92B4;
  }
  *(_QWORD *)(a1 + 408) = v19;
  *(_QWORD *)(a1 + 416) = sub_1B68F94D8;
  return result;
}

uint64_t sub_1B68C2848(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  char *BaseAddressOfPlane;
  int WidthOfPlane;
  int HeightOfPlane;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  int v13;
  uint64_t (**v14)(char *, char *, size_t, size_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  size_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  size_t BytesPerRowOfPlane;

  v1 = result;
  if (*(int *)(result + 332) < 1)
  {
    result = *(_QWORD *)(result + 152);
    if (result && *(_QWORD *)(v1 + 144))
    {
      v2 = *(_DWORD *)(v1 + 16);
      v3 = *(int *)(v1 + 20);
      v4 = *(int *)(v1 + 12);
      *(_QWORD *)(v1 + 224) = 0;
      *(_DWORD *)(v1 + 232) = 0;
      CVPixelBufferLockBaseAddress((CVPixelBufferRef)result, 1uLL);
      CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v1 + 144), 1uLL);
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(v1 + 144), 0);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(v1 + 144), 0);
      WidthOfPlane = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(v1 + 144), 0);
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(v1 + 144), 0);
      v8 = (char *)CVPixelBufferGetBaseAddressOfPlane(*(CVPixelBufferRef *)(v1 + 152), 0);
      v9 = CVPixelBufferGetBytesPerRowOfPlane(*(CVPixelBufferRef *)(v1 + 152), 0);
      v10 = 0;
      v33 = WidthOfPlane & -(int)v4;
      v34 = HeightOfPlane & -(int)v4;
      if (BaseAddressOfPlane && v8)
      {
        v36 = v2;
        v11 = 0;
        if (v34 >= 1)
        {
          v12 = v9;
          v13 = 0;
          v11 = 0;
          v10 = 0;
          v14 = (uint64_t (**)(char *, char *, size_t, size_t, uint64_t, uint64_t, uint64_t))(v1 + 8 * v3 + 408);
          v32 = v9 * v4;
          v15 = v33;
          do
          {
            v35 = v13;
            if (v33 >= 1)
            {
              v16 = 0;
              do
              {
                v17 = &BaseAddressOfPlane[v16];
                v18 = &v8[v16];
                v19 = *(unsigned int *)(v1 + 364);
                v20 = BaseAddressOfPlane;
                v21 = v12;
                v22 = v1;
                v23 = v8;
                v24 = v15;
                v25 = (*v14)(v17, v18, BytesPerRowOfPlane, v12, v4, v4, v19);
                v15 = v24;
                v8 = v23;
                v1 = v22;
                v12 = v21;
                BaseAddressOfPlane = v20;
                v10 += v25;
                if (v25 <= v36)
                  v26 = 0;
                else
                  v26 = v25;
                v11 += v26;
                v27 = *(_DWORD *)(v22 + 232);
                if (v25 > v36)
                  ++v27;
                *(_DWORD *)(v22 + 232) = v27;
                v16 += v4;
              }
              while (v16 < v15);
            }
            BaseAddressOfPlane += BytesPerRowOfPlane * v4;
            v8 += v32;
            v13 = v35 + v4;
          }
          while (v35 + (int)v4 < v34);
        }
      }
      else
      {
        v11 = 0;
      }
      v28 = *(int *)(v1 + 364);
      v29 = v4 * v4;
      *(_DWORD *)(v1 + 224) = (v10 * v28 + ((v34 * v33) >> 1)) / (unint64_t)(v34 * v33);
      v30 = *(_DWORD *)(v1 + 232);
      if (v30)
        v31 = ((unint64_t)((v30 * v29) >> 1) + v11 * v28) / (v30 * v29);
      else
        LODWORD(v31) = 0;
      *(_DWORD *)(v1 + 228) = v31;
      *(_DWORD *)(v1 + 232) = (v30 + ((v34 * v33 / v29) >> 7)) / ((v34 * v33 / v29) >> 6);
      CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v1 + 152), 1uLL);
      return CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(v1 + 144), 1uLL);
    }
  }
  else
  {
    *(_QWORD *)(result + 224) = 0;
    *(_DWORD *)(result + 232) = 0;
  }
  return result;
}

unint64_t sub_1B68C2AE4(unint64_t result)
{
  CMTime *v1;
  int v2;
  int v3;
  unsigned int v4;
  CMTimeScale v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  char v21;
  CMTimeScale *p_timescale;
  int v23;
  unsigned int value_high;
  char v25;
  BOOL v26;
  BOOL v28;
  int v29;
  int v30;
  _BYTE *v31;
  CMTimeFlags v32;
  BOOL v33;
  int WidthOfPlane;
  int HeightOfPlane;
  signed int flags;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  CMTimeValue value;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime v68;

  v1 = (CMTime *)result;
  v3 = *(_DWORD *)result;
  v2 = *(_DWORD *)(result + 4);
  v5 = *(_DWORD *)(result + 224);
  v4 = *(_DWORD *)(result + 228);
  v6 = *(_DWORD *)(result + 232);
  v7 = (v4 > *(_DWORD *)result) | (2 * (v6 > v2));
  *(_DWORD *)(result + 236) = v7;
  if (v5)
    v8 = 0;
  else
    v8 = v4 == 0;
  v9 = v8 && v6 == 0;
  if (v9 && !*(_BYTE *)(result + 104) && !*(_BYTE *)(result + 107))
  {
    *(_DWORD *)(result + 372) = 0;
    *(_WORD *)(result + 105) = 0;
    *(_BYTE *)(result + 107) = 0;
    *(_DWORD *)(result + 316) = 0;
    *(_DWORD *)(result + 328) = 0;
    ++*(_DWORD *)(result + 324);
LABEL_78:
    *(_BYTE *)(result + 104) = 0;
    p_timescale = (CMTimeScale *)(result + 104);
    goto LABEL_79;
  }
  if (v4 >= v3 / 4 || v6 >= v2 / 4)
  {
    if (v4 >= v3 / 3 || v6 >= v2 / 3)
    {
      if (v3 >= 0)
        v12 = v3;
      else
        v12 = v3 + 1;
      if (v2 >= 0)
        v13 = v2;
      else
        v13 = v2 + 1;
      if (v4 >= v12 >> 1 || v6 >= v13 >> 1)
      {
        if (v6 >= 3 * v2)
        {
          if (v7 == 3 && v6 > *(_DWORD *)(result + 356))
            v14 = 100;
          else
            v14 = 200;
        }
        else
        {
          v14 = 4;
        }
      }
      else
      {
        v14 = 3;
      }
    }
    else
    {
      v14 = 2;
    }
  }
  else
  {
    v14 = 1;
  }
  v15 = *(_DWORD *)(result + 60);
  v16 = v15 > 1;
  if (v7 >= 2)
    v16 = 0;
  *(_DWORD *)(result + 372) = v14;
  if (v15 <= 1 && v7 > 1)
  {
    v17 = 0;
    v18 = 1;
    goto LABEL_38;
  }
  if (v15 < 2 || v7 <= 1)
  {
    if (v16)
    {
      *(_WORD *)(result + 105) = 0;
      v29 = *(unsigned __int8 *)(result + 47);
      *(_BYTE *)(result + 107) = 1;
      if (!v29)
      {
LABEL_72:
        v32 = *(_DWORD *)(result + 324);
        *(_QWORD *)(result + 324) = v32 + 1;
        if (!v32)
        {
          *(_OWORD *)(result + 264) = *(_OWORD *)(result + 240);
          *(_QWORD *)(result + 280) = *(_QWORD *)(result + 256);
        }
        goto LABEL_78;
      }
    }
    else
    {
      v30 = *(unsigned __int8 *)(result + 47);
      *(_WORD *)(result + 105) = 0;
      v31 = (_BYTE *)(result + 107);
      if (!v30)
        goto LABEL_70;
      *v31 = 1;
    }
    if (!*(_BYTE *)(result + 79))
      goto LABEL_71;
    v31 = (_BYTE *)(result + 107);
LABEL_70:
    *v31 = 0;
LABEL_71:
    if (v7 > 1)
    {
      v18 = 0;
      goto LABEL_42;
    }
    goto LABEL_72;
  }
  v18 = 0;
  v17 = 1;
LABEL_38:
  *(_BYTE *)(result + 105) = v18;
  *(_BYTE *)(result + 106) = v17;
  *(_BYTE *)(result + 107) = 0;
  v19 = *(_DWORD *)(result + 316);
  if (v19 <= 2)
  {
    v18 = 1;
    *(_BYTE *)(result + 105) = 1;
    if (v19 != 2)
      *(_BYTE *)(result + 106) = 0;
  }
  *(_DWORD *)(result + 316) = v19 + 1;
LABEL_42:
  *(_DWORD *)(result + 324) = 0;
  v20 = *(_DWORD *)(result + 328);
  *(_DWORD *)(result + 328) = v20 + 1;
  *(_DWORD *)(result + 376) = 0;
  if (v20)
  {
    if (v18)
    {
LABEL_44:
      v21 = 0;
      LOBYTE(v1[4].timescale) = 1;
      p_timescale = &v1[4].timescale;
      goto LABEL_48;
    }
  }
  else
  {
    lhs = *(CMTime *)(result + 240);
    rhs = *(CMTime *)(result + 264);
    result = (unint64_t)CMTimeSubtract(&v68, &lhs, &rhs);
    v1[12] = v68;
    if (BYTE1(v1[4].timescale))
      goto LABEL_44;
  }
  v23 = BYTE2(v1[4].timescale);
  LOBYTE(v1[4].timescale) = v23;
  p_timescale = &v1[4].timescale;
  if (!v23)
  {
LABEL_79:
    value_high = 0;
    HIDWORD(v1[13].value) = 0;
    BYTE1(v1[4].flags) = 0;
    if (v1->timescale != 2)
      goto LABEL_82;
    goto LABEL_80;
  }
  v21 = 1;
LABEL_48:
  value_high = HIDWORD(v1[13].value);
  if (value_high > v1[13].timescale)
    v1[13].timescale = value_high;
  v25 = 0;
  LODWORD(v1[13].value) = 0;
  if ((v21 & 1) == 0)
  {
    v26 = v1[9].timescale > LODWORD(v1[14].epoch) && v1[9].flags > HIDWORD(v1[14].epoch);
    v25 = v26 || LODWORD(v1[9].epoch) > LODWORD(v1[15].value);
  }
  BYTE1(v1[4].flags) = v25;
  if (v1->timescale != 2)
  {
    if (value_high == 1)
    {
      v28 = 1;
LABEL_83:
      BYTE2(v1[4].flags) = v28;
      v33 = value_high < 2;
      goto LABEL_86;
    }
LABEL_82:
    v28 = HIBYTE(v1[4].timescale) != 0;
    goto LABEL_83;
  }
LABEL_80:
  time1 = v1[12];
  CMTimeMake(&time2, 500, 1000);
  result = CMTimeCompare(&time1, &time2);
  v33 = (int)result >= 1 && LODWORD(v1[13].epoch) == 1;
  BYTE2(v1[4].flags) = v33;
LABEL_86:
  HIBYTE(v1[4].flags) = v33;
  if (v1[15].timescale == 2 && v1[8].value && *(_BYTE *)p_timescale)
  {
    CVPixelBufferLockBaseAddress((CVPixelBufferRef)v1[6].value, 1uLL);
    WidthOfPlane = CVPixelBufferGetWidthOfPlane((CVPixelBufferRef)v1[6].value, 0);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane((CVPixelBufferRef)v1[6].value, 0);
    result = CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v1[6].value, 1uLL);
    v1[8].epoch = -1;
    flags = v1->flags;
    v37 = ((flags - 1 + WidthOfPlane) / flags);
    v1[9].value = -1;
    v38 = ((flags - 1 + HeightOfPlane) / flags);
    if ((int)v38 <= 0)
    {
      v41 = (int)v37 / 8;
    }
    else
    {
      v39 = 0;
      v40 = 0;
      v41 = (int)v37 / 8;
      while (1)
      {
        if ((int)v37 < 1)
        {
          v42 = 0;
        }
        else
        {
          v42 = 0;
          v43 = (unsigned __int8 *)(v1[8].value + v39);
          v44 = v37;
          do
          {
            v45 = *v43++;
            result = v45;
            v42 += v45;
            --v44;
          }
          while (v44);
        }
        if (v42 >= v41)
          break;
        ++v40;
        v39 += v37 & ~((int)v37 >> 31);
        if (v40 == (_DWORD)v38)
          goto LABEL_101;
      }
      HIDWORD(v1[8].epoch) = v40;
    }
LABEL_101:
    v46 = (int)v38;
    v47 = (int)v37;
    v48 = ((int)v38 - 1) * (int)v37;
    while (1)
    {
      v26 = v46-- < 1;
      if (v26)
        break;
      if ((int)v37 < 1)
      {
        v49 = 0;
      }
      else
      {
        v49 = 0;
        v50 = (unsigned __int8 *)(v1[8].value + v48);
        v51 = v37;
        do
        {
          v52 = *v50++;
          result = v52;
          v49 += v52;
          --v51;
        }
        while (v51);
      }
      v48 -= (int)v37;
      if (v49 >= v41)
      {
        HIDWORD(v1[9].value) = v46;
        v53 = v46 + 1;
        goto LABEL_111;
      }
    }
    v53 = 0;
LABEL_111:
    v54 = (int)v38 / 8;
    if ((int)v37 >= 1)
    {
      v55 = 0;
      while (1)
      {
        if ((int)v38 < 1)
        {
          v56 = 0;
        }
        else
        {
          v56 = 0;
          value = v1[8].value;
          v58 = v38;
          do
          {
            result = *(unsigned __int8 *)(value + v55);
            v56 += result;
            value += (int)v37;
            --v58;
          }
          while (v58);
        }
        if (v56 >= v54)
          break;
        if (++v55 == v37)
          goto LABEL_122;
      }
      LODWORD(v1[8].epoch) = v55;
    }
LABEL_122:
    v37 = (int)v37;
    while (1)
    {
      v59 = v37 - 1;
      if (v37 < 1)
        break;
      if ((int)v38 < 1)
      {
        v60 = 0;
      }
      else
      {
        v60 = 0;
        v61 = v1[8].value - 1;
        v62 = v38;
        do
        {
          v60 += *(unsigned __int8 *)(v61 + v37);
          v61 += v47;
          --v62;
        }
        while (v62);
      }
      --v37;
      if (v60 >= v54)
      {
        v63 = v59 + 1;
        goto LABEL_132;
      }
    }
    v63 = 0;
LABEL_132:
    LODWORD(v1[9].value) = v63;
    HIDWORD(v1[9].value) = v53;
  }
  return result;
}

char *sub_1B68C30F0(char *__src, char *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, char **a6, _QWORD *a7, int a8, int a9, int a10, int a11, unint64_t a12, unint64_t a13)
{
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  size_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  char *v44;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v54;

  v16 = __src;
  v52 = 32 * (int)a12;
  v17 = (a12 >> 27) & 0xFFFFFFE0;
  v48 = 32 * (int)a13;
  v18 = (a13 >> 27) & 0xFFFFFFE0;
  v20 = *a6;
  v19 = a6[1];
  if ((int)v17 >= 1)
  {
    v21 = a8;
    v22 = (a12 >> 27) & 0xFFFFFFE0;
    do
    {
      __src = (char *)memcpy(v20, v16, v21);
      v20 += *a7;
      v16 += *a3;
      LODWORD(v22) = v22 - 1;
    }
    while ((_DWORD)v22);
  }
  v23 = v18 - v17;
  if ((int)v18 > (int)v17)
  {
    do
    {
      memcpy(v20, v16, (int)v52);
      __src = (char *)memcpy(&v20[(int)v48], &v16[(int)v48], a8 - (int)v48);
      v20 += *a7;
      v16 += *a3;
      --v23;
    }
    while (v23);
  }
  v24 = a9 - v18;
  if (a9 > (int)v18)
  {
    do
    {
      __src = (char *)memcpy(v20, v16, a8);
      v20 += *a7;
      v16 += *a3;
      --v24;
    }
    while (v24);
  }
  v25 = (int)v17 >> 1;
  if ((int)v17 >= 1)
  {
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = (int)v17 >> 1;
    do
    {
      __src = (char *)memcpy(v19, a2, a8);
      v19 += a7[1];
      a2 += a3[1];
      --v26;
    }
    while (v26);
  }
  v27 = (int)v18 >> 1;
  v28 = ((int)v18 >> 1) - v25;
  if ((int)v18 >> 1 > v25)
  {
    do
    {
      memcpy(v19, a2, (int)v52);
      __src = (char *)memcpy(&v19[v48], &a2[v48], a8 - (int)v48);
      v19 += a7[1];
      a2 += a3[1];
      --v28;
    }
    while (v28);
  }
  if (a9 >= 0)
    v29 = a9;
  else
    v29 = a9 + 1;
  v30 = v29 >> 1;
  v31 = v30 - v27;
  if (v30 > v27)
  {
    do
    {
      __src = (char *)memcpy(v19, a2, a8);
      v19 += a7[1];
      a2 += a3[1];
      --v31;
    }
    while (v31);
  }
  if (a8 == a10 && a9 == a11)
  {
    v32 = (a12 >> 27) & 0xFFFFFFE0;
    v33 = v32;
    v34 = 32 * a12;
    v35 = 32 * a13;
    v36 = (a13 >> 27) & 0xFFFFFFE0;
  }
  else
  {
    v34 = (int)(float)((float)(v52 * a10) / (float)a8);
    v32 = (a12 >> 27) & 0xFFFFFFE0;
    v33 = (int)(float)((float)((int)v17 * a11) / (float)a9);
    v35 = (int)(float)((float)(v48 * a10) / (float)a8);
    v36 = (int)(float)((float)((int)v18 * a11) / (float)a9);
  }
  v37 = v36 - v33;
  v54 = v34;
  v51 = v35 - v34 + 1;
  v50 = v32;
  v49 = v33;
  if (v32 < (v32 | 1) + v36 - v33)
  {
    v38 = *a4 + *a5 * v33;
    v39 = &(*a6)[*a7 * v32];
    v40 = v36 - v33 + 1;
    do
    {
      __src = (char *)memcpy(&v39[(int)v52], (const void *)(v38 + v54), v51);
      v39 += *a7;
      v38 += *a5;
      --v40;
    }
    while (v40);
  }
  v41 = v37 + 2;
  if (v37 < -2)
    v41 = v37 + 3;
  if ((v37 & 0x80000000) == 0)
  {
    v42 = v25 + (v41 >> 1);
    v43 = a4[1] + ((unint64_t)(a5[1] * v49) >> 1);
    v44 = &a6[1][(unint64_t)(a7[1] * v50) >> 1];
    do
    {
      __src = (char *)memcpy(&v44[v52], (const void *)(v43 + v54), v51);
      v44 += a7[1];
      v43 += a5[1];
      ++v25;
    }
    while (v25 < v42);
  }
  return __src;
}

uint64_t sub_1B68C34FC(uint64_t a1, int a2, int a3)
{
  size_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  pthread_mutex_t *v10;
  uint64_t result;

  v4 = (a3 * a2);
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 16) = 4 * a2;
  if (16 * (_DWORD)v4)
    v5 = malloc_type_malloc(8 * (16 * v4), 0x4CF1F002uLL);
  else
    v5 = 0;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 32) = malloc_type_malloc(4 * v4, 0x82ECD37AuLL);
  v6 = malloc_type_malloc(qword_1EF13A068 + 48 * v4, 0x85B0E7E2uLL);
  if (v6)
  {
    v7 = ((unint64_t)v6 + qword_1EF13A068) & -qword_1EF13A068;
    *(_DWORD *)(v7 - 4) = v7 - (_DWORD)v6;
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)(a1 + 152) = v7;
  *(_QWORD *)(a1 + 112) = malloc_type_malloc(v4, 0x82ECD37AuLL);
  *(_QWORD *)(a1 + 120) = malloc_type_malloc(v4, 0x82ECD37AuLL);
  *(_QWORD *)(a1 + 128) = malloc_type_malloc(v4, 0x82ECD37AuLL);
  *(_QWORD *)(a1 + 136) = malloc_type_calloc(v4, 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(a1 + 72) = malloc_type_malloc(2 * v4, 0x82ECD37AuLL);
  v8 = malloc_type_calloc(v4, 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(a1 + 144) = v8;
  if (!v8)
    return 4294967188;
  if (!*(_QWORD *)a1)
    return 4294967188;
  v9 = *(void **)(a1 + 32);
  if (!v9
    || !*(_QWORD *)(a1 + 152)
    || !*(_QWORD *)(a1 + 112)
    || !*(_QWORD *)(a1 + 120)
    || !*(_QWORD *)(a1 + 128)
    || !*(_QWORD *)(a1 + 136)
    || !*(_QWORD *)(a1 + 72))
  {
    return 4294967188;
  }
  bzero(v9, 4 * *(unsigned int *)(a1 + 20));
  *(_DWORD *)(a1 + 56) = 64;
  *(_QWORD *)(a1 + 48) = malloc_type_malloc(0x300uLL, 0x4CF1F002uLL);
  v10 = sub_1B68A37A0();
  *(_QWORD *)(a1 + 64) = v10;
  result = 4294967188;
  if (*(_QWORD *)(a1 + 48) && v10)
  {
    *(_QWORD *)(a1 + 160) = sub_1B68A37A0();
    *(_QWORD *)(a1 + 168) = operator new[]();
    if (*(_QWORD *)(a1 + 160))
    {
      result = 0;
      *(_QWORD *)(a1 + 224) = 0;
      return result;
    }
    return 4294967188;
  }
  return result;
}

unsigned __int8 *sub_1B68C36F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned __int8 *a7, unsigned int a8, int a9)
{
  uint64_t v9;
  unsigned int i;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  char *v32;
  unsigned __int8 *result;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  char v75;
  char *v76;
  char v77;
  unsigned __int8 *v78;
  int v79;
  int v80;
  int v81;
  unsigned __int8 *v82;
  char v83;
  int v84;
  char *v85;
  char v86;
  unsigned __int8 *v87;
  int v88;
  int v89;
  int v90;
  unsigned __int8 *v91;
  int v92;
  uint64_t v93;
  char *v94;
  char *v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned __int8 *v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unsigned __int8 *v107;
  unsigned int v108;
  unsigned int v109;
  char v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  unsigned __int8 *v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  int v136;
  int v137;
  _BYTE *v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  _BYTE *v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  uint64_t v149;
  int v150;
  char *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  int v155;
  int v156;
  unsigned __int8 *v158;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  unsigned __int8 *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  unsigned __int8 *v179;
  int v180;
  unsigned __int8 *v181;
  uint64_t v182;
  int v183;
  char *v184;
  int v185;
  int v186;
  _DWORD v187[48];
  _DWORD v188[80];
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
  {
    v9 = 0;
    for (i = 9; i > 1; --i)
    {
      *(_OWORD *)(a3 + v9) = *(_OWORD *)(a2 + v9);
      v9 += a6;
    }
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 12);
  v13 = v12 * a5;
  v149 = v12 * a5 + a4;
  v14 = *(_QWORD *)(a1 + 48) + 12 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 2 * v149);
  v15 = *(char *)(v14 + 10);
  v17 = *(_QWORD *)(a1 + 120);
  v16 = *(_QWORD *)(a1 + 128);
  v18 = *(unsigned __int8 *)(v17 + (v12 * a5 + a4));
  v19 = *(unsigned __int8 *)(v16 + (v12 * a5 + a4));
  v20 = *(char *)(v14 + 11);
  v21 = v18 + v15;
  v150 = v18;
  v22 = v18 + v20;
  v23 = v19 + v15;
  v147 = v19;
  v24 = v19 + v20;
  v25 = v21 & ~(v21 >> 31);
  if (v25 >= 0x33)
    v26 = 51;
  else
    v26 = v25;
  if ((v22 & ~(v22 >> 31)) >= 0x33)
    v27 = 51;
  else
    v27 = v22 & ~(v22 >> 31);
  LODWORD(v28) = v23 & ~(v23 >> 31);
  if (v28 >= 0x33)
    v28 = 51;
  else
    v28 = v28;
  v29 = v24 & ~(v24 >> 31);
  if (v29 >= 0x33)
    v29 = 51;
  v164 = byte_1B6935E64[v27];
  v165 = byte_1B6935E24[v26];
  v163 = byte_1B6935E24[v28];
  v162 = byte_1B6935E64[v29];
  v158 = a7 + 16;
  v30 = (char *)&byte_1B6933C58[4 * v26];
  do
  {
    v188[v11 + 56] = v30[a7[v11 + 8]];
    v188[v11 + 24] = v30[a7[v11 + 24]];
    ++v11;
  }
  while (v11 != 4);
  v155 = v20;
  v156 = v15;
  v31 = 0;
  v32 = (char *)&byte_1B6933C58[4 * v28];
  do
  {
    result = (unsigned __int8 *)&v187[v31 + 32];
    *((_DWORD *)result + 8) = v32[a7[v31 + 8]];
    v187[v31 + 8] = v32[a7[v31 + 24]];
    ++v31;
  }
  while (v31 != 4);
  v34 = *a7;
  v182 = a3;
  if (v34 <= 0x3F)
  {
    if (a4 && v34 <= 0x1F)
    {
      v35 = a4 - 1;
      v36 = 0;
      if (a9)
      {
        v37 = v35 + v12 * (a5 & 0xFFFFFFFE);
        v38 = v150 + 1 + *(unsigned __int8 *)(v17 + v37);
        v39 = v20 + (v38 >> 1);
        LODWORD(v40) = (v15 + (v38 >> 1)) & ~((int)(v15 + (v38 >> 1)) >> 31);
        if (v40 >= 0x33)
          v40 = 51;
        else
          v40 = v40;
        v41 = v39 & ~(v39 >> 31);
        if (v41 >= 0x33)
          v42 = 51;
        else
          v42 = v41;
        v183 = byte_1B6935E24[v40];
        v178 = byte_1B6935E64[v42];
        v43 = a7;
        do
        {
          v188[v36 + 64] = byte_1B6933C58[4 * v40 + a7[v36]];
          ++v36;
        }
        while (v36 != 4);
        v44 = 0;
        v45 = v147 + 1 + *(unsigned __int8 *)(v16 + v37);
        v46 = v20 + (v45 >> 1);
        LODWORD(v47) = (v15 + (v45 >> 1)) & ~((int)(v15 + (v45 >> 1)) >> 31);
        if (v47 >= 0x33)
          v47 = 51;
        else
          v47 = v47;
        v48 = v46 & ~(v46 >> 31);
        if (v48 >= 0x33)
          v49 = 51;
        else
          v49 = v48;
        v176 = byte_1B6935E24[v47];
        v174 = byte_1B6935E64[v49];
        result = (unsigned __int8 *)v188;
        do
        {
          v188[v44] = byte_1B6933C58[4 * v47 + a7[v44]];
          ++v44;
        }
        while (v44 != 4);
        v50 = v35 + v12 * (a5 | 1);
        v51 = v150 + 1 + *(unsigned __int8 *)(v17 + v50);
        v52 = v15 + (v51 >> 1);
        v53 = v20 + (v51 >> 1);
        v54 = v52 & ~(v52 >> 31);
        if (v54 >= 0x33)
          v55 = 51;
        else
          v55 = v54;
        v56 = v53 & ~(v53 >> 31);
        v172 = byte_1B6935E24[v55];
        if (v56 >= 0x33)
          v56 = 51;
        v170 = byte_1B6935E64[v56];
        v57 = v147 + 1 + *(unsigned __int8 *)(v16 + v50);
        v58 = v15 + (v57 >> 1);
        v59 = v20 + (v57 >> 1);
        v60 = v58 & ~(v58 >> 31);
        if (v60 >= 0x33)
          v61 = 51;
        else
          v61 = v60;
        v62 = v59 & ~(v59 >> 31);
        if (v62 >= 0x33)
          v62 = 51;
        v169 = byte_1B6935E24[v61];
        v63 = byte_1B6935E64[v62];
      }
      else
      {
        v64 = (v35 + v13);
        v65 = v150 + *(unsigned __int8 *)(v17 + v64) + 1;
        v66 = v20 + (v65 >> 1);
        LODWORD(v40) = (v15 + (v65 >> 1)) & ~((int)(v15 + (v65 >> 1)) >> 31);
        if (v40 >= 0x33)
          v40 = 51;
        else
          v40 = v40;
        v183 = byte_1B6935E24[v40];
        v67 = v66 & ~(v66 >> 31);
        if (v67 >= 0x33)
          v67 = 51;
        result = byte_1B6935E64;
        v178 = byte_1B6935E64[v67];
        v43 = a7;
        do
        {
          v188[v36 + 64] = byte_1B6933C58[4 * v40 + a7[v36]];
          ++v36;
        }
        while (v36 != 4);
        v68 = 0;
        v69 = v147 + *(unsigned __int8 *)(v16 + v64) + 1;
        v70 = v20 + (v69 >> 1);
        v71 = (v15 + (v69 >> 1)) & ~((int)(v15 + (v69 >> 1)) >> 31);
        if (v71 >= 0x33)
          v47 = 51;
        else
          v47 = v71;
        v176 = byte_1B6935E24[v47];
        v72 = v70 & ~(v70 >> 31);
        if (v72 >= 0x33)
          v73 = 51;
        else
          v73 = v72;
        v174 = byte_1B6935E64[v73];
        do
        {
          v188[v68] = byte_1B6933C58[4 * v47 + a7[v68]];
          ++v68;
        }
        while (v68 != 4);
        v55 = v40;
        v61 = v47;
        v172 = v183;
        v169 = v176;
        v170 = v178;
        v63 = v174;
      }
      v167 = v63;
      if (a9 == 2)
      {
        v145 = v61;
        v146 = v55;
        v74 = 0;
        v152 = v43 + 32;
        v153 = 2 * a6;
        v75 = 1;
        v151 = (char *)&byte_1B6933C58[4 * v47];
        v76 = (char *)&byte_1B6933C58[4 * v40];
        do
        {
          v77 = v75;
          v78 = &a7[2 * v74];
          v79 = v78[1];
          if (v79 | *v78)
          {
            v80 = v151[v78[1]];
            v81 = v76[v78[1]];
            v82 = (unsigned __int8 *)(a3 + v74 * v153);
            sub_1B68C437C(v82, *v78, v183, v178, v76[*v78], v176, v174, v151[*v78]);
            result = sub_1B68C437C(&v82[a6], v79, v183, v178, v81, v176, v174, v80);
            a3 = v182;
          }
          v75 = 0;
          v74 = 1;
        }
        while ((v77 & 1) != 0);
        v83 = 0;
        v84 = 2;
        v184 = (char *)&byte_1B6933C58[4 * v145];
        v85 = (char *)&byte_1B6933C58[4 * v146];
        do
        {
          v86 = v83;
          v87 = &v152[2 * (v84 & 1)];
          v88 = v87[1];
          if (v88 | *v87)
          {
            v89 = v184[v87[1]];
            v90 = v85[v87[1]];
            v91 = (unsigned __int8 *)(a3 + (int)v153 * v84);
            sub_1B68C437C(v91, *v87, v172, v170, v85[*v87], v169, v167, v184[*v87]);
            result = sub_1B68C437C(&v91[a6], v88, v172, v170, v90, v169, v167, v89);
            a3 = v182;
          }
          v83 = 1;
          v84 = 3;
        }
        while ((v86 & 1) == 0);
      }
      else
      {
        v92 = 0;
        v93 = 0;
        v94 = (char *)&byte_1B6933C58[4 * v61];
        v95 = (char *)&byte_1B6933C58[4 * v55];
        do
        {
          v96 = a7[v93];
          v97 = v96;
          if (a9 == 1)
            v97 = a7[v93 + 32];
          if (v97 | v96)
          {
            v98 = v94[v97];
            v99 = v95[v97];
            v100 = (unsigned __int8 *)(a3 + v92);
            sub_1B68C437C(v100, v96, v183, v178, v188[v93 + 64], v176, v174, v188[v93]);
            result = sub_1B68C437C(&v100[a6], v97, v172, v170, v99, v169, v167, v98);
            a3 = v182;
          }
          ++v93;
          v92 += 2 * a6;
        }
        while (v93 != 4);
      }
    }
    v101 = a7[8];
    if (v101 == 4)
    {
      *(_WORD *)(a7 + 9) = 1028;
      a7[11] = 4;
    }
    else if (v101 > 0x1F)
    {
      goto LABEL_89;
    }
    v102 = 0;
    v179 = a7 + 8;
    v103 = 8;
    do
    {
      v104 = v179[v102];
      if (v179[v102])
      {
        v105 = v187[v102 + 40];
        v106 = v188[v102 + 56];
        v107 = (unsigned __int8 *)(a3 + v103);
        sub_1B68C437C(v107, v179[v102], v165, v164, v106, v163, v162, v105);
        result = sub_1B68C437C(&v107[a6], v104, v165, v164, v106, v163, v162, v105);
        a3 = v182;
      }
      ++v102;
      v103 += 2 * a6;
    }
    while (v102 != 4);
  }
LABEL_89:
  v108 = *v158;
  if (v108 > 0x3F)
    return result;
  v109 = a8;
  if (a5 && v108 <= 0x1F)
  {
    LODWORD(result) = 0;
    v168 = 0;
    v110 = 1;
    v111 = a6 << (a8 != 0);
    while (1)
    {
      v161 = result;
      if (v109)
      {
        v112 = a4 + *(_DWORD *)(a1 + 12) * (a5 - 2 + (_DWORD)result);
        v113 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + v112);
        v114 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + v112);
        if ((v110 & 1) != 0)
          v115 = v158;
        else
          v115 = a7 + 36;
        v117 = v155;
        v116 = v156;
      }
      else
      {
        v118 = *(_QWORD *)(a1 + 144);
        v117 = v155;
        v116 = v156;
        if (*(_BYTE *)(v118 + v149) == 2)
        {
          if (a5 < 2)
          {
            v113 = 0;
            v114 = 0;
          }
          else
          {
            v119 = *(_DWORD *)(a1 + 12);
            if (*(_BYTE *)(v118 + (v149 - 2 * v119)) == 2)
              v120 = a5 - 2;
            else
              v120 = (a5 & 0xFFFFFFFE) - 1;
            v122 = a4 + v119 * v120;
            v113 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + v122);
            v114 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + v122);
          }
        }
        else
        {
          v121 = a4 + *(_DWORD *)(a1 + 12) * (a5 - 1);
          v113 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + v121);
          v114 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + v121);
        }
        v115 = v158;
      }
      v123 = 0;
      v124 = v150 + 1 + v113;
      v125 = v117 + (v124 >> 1);
      LODWORD(v126) = (v116 + (v124 >> 1)) & ~((int)(v116 + (v124 >> 1)) >> 31);
      if (v126 >= 0x33)
        v126 = 51;
      else
        v126 = v126;
      v127 = v125 & ~(v125 >> 31);
      if (v127 >= 0x33)
        v127 = 51;
      v180 = byte_1B6935E24[v126];
      v177 = byte_1B6935E64[v127];
      do
      {
        v188[v123 + 32] = byte_1B6933C58[4 * v126 + v115[v123]];
        ++v123;
      }
      while (v123 != 4);
      v128 = 0;
      v129 = v147 + 1 + v114;
      v130 = v117 + (v129 >> 1);
      LODWORD(v131) = (v116 + (v129 >> 1)) & ~((int)(v116 + (v129 >> 1)) >> 31);
      if (v131 >= 0x33)
        v131 = 51;
      else
        v131 = v131;
      v132 = v130 & ~(v130 >> 31);
      if (v132 >= 0x33)
        v132 = 51;
      v175 = byte_1B6935E24[v131];
      v173 = byte_1B6935E64[v132];
      do
      {
        v187[v128 + 16] = byte_1B6933C58[4 * v131 + v115[v128]];
        ++v128;
      }
      while (v128 != 4);
      v133 = *v115;
      if (v133 == 4)
        break;
      if (v133 <= 0x1F)
        goto LABEL_124;
LABEL_128:
      v110 = 0;
      v168 += a6;
      v109 = a8;
      result = (unsigned __int8 *)1;
      if (v161 >= a8)
        goto LABEL_129;
    }
    *(_WORD *)(v115 + 1) = 1028;
    v115[3] = 4;
LABEL_124:
    v134 = 0;
    v135 = v168;
    v171 = v115;
    do
    {
      v136 = v115[v134];
      if (v115[v134])
      {
        v137 = v187[v134 + 16];
        v185 = v188[v134 + 32];
        v138 = (_BYTE *)(a3 + v135);
        sub_1B68C451C(v138, v111, v136, v180, v177, v185);
        sub_1B68C451C(v138 + 1, v111, v136, v175, v173, v137);
        sub_1B68C451C(v138 + 2, v111, v136, v180, v177, v185);
        sub_1B68C451C(v138 + 3, v111, v136, v175, v173, v137);
        v115 = v171;
        a3 = v182;
      }
      ++v134;
      v135 += 4;
    }
    while (v134 != 4);
    goto LABEL_128;
  }
LABEL_129:
  v139 = a7[24];
  if (v139 == 4)
  {
    *(_WORD *)(a7 + 25) = 1028;
    a7[27] = 4;
  }
  else if (v139 > 0x1F)
  {
    return result;
  }
  v140 = 0;
  v141 = 4 * a6;
  v181 = a7 + 24;
  do
  {
    v142 = v181[v140];
    if (v181[v140])
    {
      v143 = v187[v140 + 8];
      v186 = v188[v140 + 24];
      v144 = (_BYTE *)(a3 + v141);
      sub_1B68C451C(v144, a6, v142, v165, v164, v186);
      sub_1B68C451C(v144 + 1, a6, v142, v163, v162, v143);
      sub_1B68C451C(v144 + 2, a6, v142, v165, v164, v186);
      result = sub_1B68C451C(v144 + 3, a6, v142, v163, v162, v143);
      a3 = v182;
    }
    ++v140;
    v141 += 4;
  }
  while (v140 != 4);
  return result;
}

unsigned __int8 *sub_1B68C437C(unsigned __int8 *result, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  if (a2)
  {
    v8 = *(result - 1);
    v9 = result[1];
    v10 = *result;
    v11 = *(result - 2);
    if ((v11 - v10) * (v11 - v10) < (a3 * a3))
    {
      v12 = *(result - 4);
      if ((v12 - v11) * (v12 - v11) < (a4 * a4))
      {
        v13 = result[2];
        if ((v13 - v10) * (v13 - v10) < (a4 * a4))
        {
          v14 = (v12 - v13 + 4 * (v10 - v11) + 4) >> 3;
          if (v14 <= ~a5)
            v15 = ~a5;
          else
            v15 = (v12 - v13 + 4 * (v10 - v11) + 4) >> 3;
          if (v14 > a5 + 1)
            v16 = a5 + 1;
          else
            v16 = v15;
          v17 = (v16 + v11) & ~((v16 + v11) >> 31);
          if (v17 >= 0xFF)
            LOBYTE(v17) = -1;
          v18 = (v10 - v16) & ~((v10 - v16) >> 31);
          if (v18 >= 0xFF)
            LOBYTE(v18) = -1;
          v19 = (v13 + 2 * v12 + v11 + 2) >> 2;
          v20 = (v12 + 2 * v13 + v10 + 2) >> 2;
          if (a2 != 4)
          {
            LOBYTE(v19) = v17;
            LOBYTE(v20) = v18;
          }
          *(result - 2) = v19;
          *result = v20;
        }
      }
    }
    if ((v8 - v9) * (v8 - v9) < (a6 * a6))
    {
      v21 = *(result - 3);
      if ((v21 - v8) * (v21 - v8) < (a7 * a7))
      {
        v22 = result[3];
        if ((v22 - v9) * (v22 - v9) < (a7 * a7))
        {
          v23 = (v21 - v22 + 4 * (v9 - v8) + 4) >> 3;
          if (v23 <= ~a8)
            v24 = ~a8;
          else
            v24 = (v21 - v22 + 4 * (v9 - v8) + 4) >> 3;
          if (v23 > a8 + 1)
            v25 = a8 + 1;
          else
            v25 = v24;
          v26 = (v25 + v8) & ~((v25 + v8) >> 31);
          if (v26 >= 0xFF)
            LOBYTE(v26) = -1;
          v27 = (v9 - v25) & ~((v9 - v25) >> 31);
          if (v27 >= 0xFF)
            LOBYTE(v27) = -1;
          v28 = (v8 + 2 * v21 + v22 + 2) >> 2;
          v29 = (v21 + v9 + 2 * v22 + 2) >> 2;
          if (a2 != 4)
          {
            LOBYTE(v28) = v26;
            LOBYTE(v29) = v27;
          }
          *(result - 1) = v28;
          result[1] = v29;
        }
      }
    }
  }
  return result;
}

_BYTE *sub_1B68C451C(_BYTE *result, int a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v6 = *result;
  v7 = result[-a2];
  if ((v7 - v6) * (v7 - v6) < (a4 * a4))
  {
    v8 = result[-2 * a2];
    if ((v8 - v7) * (v8 - v7) < (a5 * a5))
    {
      v9 = result[a2];
      if ((v9 - v6) * (v9 - v6) < (a5 * a5))
      {
        v10 = (v8 - v9 + 4 * (v6 - v7) + 4) >> 3;
        if (v10 <= ~a6)
          v11 = ~a6;
        else
          v11 = (v8 - v9 + 4 * (v6 - v7) + 4) >> 3;
        if (v10 > a6 + 1)
          v12 = a6 + 1;
        else
          v12 = v11;
        v13 = (v12 + v7) & ~((v12 + v7) >> 31);
        if (v13 >= 0xFF)
          LOBYTE(v13) = -1;
        v14 = (v6 - v12) & ~((v6 - v12) >> 31);
        if (v14 >= 0xFF)
          LOBYTE(v14) = -1;
        v15 = (v9 + 2 * v8 + v7 + 2) >> 2;
        v16 = (v8 + 2 * v9 + v6 + 2) >> 2;
        if (a3 != 4)
        {
          LOBYTE(v15) = v13;
          LOBYTE(v16) = v14;
        }
        result[-a2] = v15;
        *result = v16;
      }
    }
  }
  return result;
}

_BYTE *sub_1B68C4600(_BYTE *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned __int8 *a7, unsigned int a8, int a9)
{
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int i;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  char v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  char v52;
  int v53;
  char v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _BYTE *v60;
  _BYTE *v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  _BYTE *v68;
  _BYTE *v69;
  unsigned __int8 *v70;
  unint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t j;
  int v75;
  int v76;
  _BYTE *v77;
  _BYTE *v78;
  BOOL v79;
  unsigned __int8 *v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  char v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  int v104;
  _BYTE *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  _BYTE *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned __int8 *v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  uint64_t v122;
  int v123;
  int v124;
  unsigned __int8 *v125;
  int v126;
  int v127;
  unsigned __int8 *v128;
  _BYTE *v129;
  int v130;
  int v131;
  unsigned __int8 *v135;
  uint64_t v136;
  unsigned int v137;
  int v139;
  char v140;
  _QWORD *v141;
  unsigned int v142;
  unint64_t v144;
  int v145;
  unsigned __int8 *v146;
  int v147;
  _DWORD v148[4];
  _BYTE v149[128];
  _QWORD v150[16];

  v9 = a7;
  v10 = a9;
  v150[14] = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
  {
    v11 = 0;
    for (i = 17; i > 1; --i)
    {
      *(_OWORD *)(a3 + v11) = *(_OWORD *)(a2 + v11);
      v11 += a6;
    }
  }
  v13 = 0;
  v14 = *((_DWORD *)result + 3);
  v15 = v14 * a5;
  v122 = v14 * a5 + a4;
  v16 = *((_QWORD *)result + 6) + 12 * *(unsigned __int16 *)(*((_QWORD *)result + 9) + 2 * v122);
  v129 = result;
  v17 = *((_QWORD *)result + 14);
  v131 = *(char *)(v16 + 10);
  v130 = *(char *)(v16 + 11);
  v117 = *(unsigned __int8 *)(v17 + (v14 * a5 + a4));
  LODWORD(v18) = (v117 + v131) & ~((v117 + v131) >> 31);
  if (v18 >= 0x33)
    v18 = 51;
  else
    v18 = v18;
  v19 = (v117 + v130) & ~((v117 + v130) >> 31);
  if (v19 >= 0x33)
    v19 = 51;
  v147 = byte_1B6935E24[v18];
  v20 = byte_1B6935E64[v19];
  v135 = a7 + 16;
  v21 = &byte_1B6933C58[4 * v18];
  do
  {
    *(_DWORD *)&v149[4 * v13 + 112] = v21[a7[v13]];
    v148[v13] = v21[a7[v13 + 16]];
    ++v13;
  }
  while (v13 != 16);
  v22 = *a7;
  if (v22 <= 0x3F)
  {
    if (a4 && v22 < 0x20)
    {
      v23 = a4 - 1;
      if (a9)
      {
        v24 = 0;
        v25 = v117 + 1 + *(unsigned __int8 *)(v17 + v23 + v14 * (a5 & 0xFFFFFFFE));
        v26 = v130 + (v25 >> 1);
        LODWORD(v27) = (v131 + (v25 >> 1)) & ~((int)(v131 + (v25 >> 1)) >> 31);
        if (v27 >= 0x33)
          v27 = 51;
        else
          v27 = v27;
        v28 = v26 & ~(v26 >> 31);
        if (v28 >= 0x33)
          v29 = 51;
        else
          v29 = v28;
        v139 = byte_1B6935E24[v27];
        v127 = byte_1B6935E64[v29];
        do
        {
          *((_DWORD *)&v150[6] + v24) = byte_1B6933C58[4 * v27 + a7[v24]];
          ++v24;
        }
        while (v24 != 16);
        v30 = v117 + 1 + *(unsigned __int8 *)(v17 + v23 + v14 * (a5 | 1u));
        v31 = v131 + (v30 >> 1);
        v32 = v130 + (v30 >> 1);
        v33 = v31 & ~(v31 >> 31);
        if (v33 >= 0x33)
          v34 = 51;
        else
          v34 = v33;
        v35 = v32 & ~(v32 >> 31);
        if (v35 >= 0x33)
          v35 = 51;
        v126 = byte_1B6935E24[v34];
        v36 = byte_1B6935E64[v35];
      }
      else
      {
        v37 = 0;
        v38 = v117 + *(unsigned __int8 *)(v17 + (v23 + v15)) + 1;
        v39 = v130 + (v38 >> 1);
        v40 = (v131 + (v38 >> 1)) & ~((int)(v131 + (v38 >> 1)) >> 31);
        if (v40 >= 0x33)
          v27 = 51;
        else
          v27 = v40;
        v139 = byte_1B6935E24[v27];
        v41 = v39 & ~(v39 >> 31);
        if (v41 >= 0x33)
          v41 = 51;
        v127 = byte_1B6935E64[v41];
        do
        {
          *((_DWORD *)&v150[6] + v37) = byte_1B6933C58[4 * v27 + a7[v37]];
          ++v37;
        }
        while (v37 != 16);
        v34 = v27;
        v126 = v139;
        v36 = v127;
      }
      v124 = v36;
      if (a9 == 2)
      {
        v116 = v34;
        v42 = 0;
        v119 = a7 + 32;
        v136 = a6;
        v145 = 4 * a6;
        v43 = 1;
        v118 = &byte_1B6933C58[4 * v27];
        do
        {
          v44 = v43;
          v45 = &v9[2 * v42];
          v46 = *v45;
          v47 = v45[1];
          if (v47 | v46)
          {
            v123 = v118[v45[1]];
            v48 = v118[*v45];
            v49 = (_BYTE *)(a3 + v42 * v145);
            sub_1B68C5148(v49, 1, *v45, v139, v127, v48);
            v50 = &v49[a6];
            sub_1B68C5148(v50, 1, v46, v139, v127, v48);
            v51 = &v50[a6];
            sub_1B68C5148(v51, 1, v47, v139, v127, v123);
            result = sub_1B68C5148(&v51[a6], 1, v47, v139, v127, v123);
          }
          v43 = 0;
          v42 = 1;
        }
        while ((v44 & 1) != 0);
        v52 = 0;
        v53 = 2;
        v128 = &byte_1B6933C58[4 * v116];
        do
        {
          v54 = v52;
          v55 = &v119[2 * (v53 & 1)];
          v56 = *v55;
          v57 = v55[1];
          if (v57 | v56)
          {
            v58 = v128[v55[1]];
            v59 = v128[*v55];
            v60 = (_BYTE *)(a3 + v145 * v53);
            v140 = v54;
            sub_1B68C5148(v60, 1, *v55, v126, v124, v59);
            v61 = &v60[v136];
            sub_1B68C5148(v61, 1, v56, v126, v124, v59);
            sub_1B68C5148(&v61[v136], 1, v57, v126, v124, v58);
            result = sub_1B68C5148(&v61[v136 + v136], 1, v57, v126, v124, v58);
            v54 = v140;
          }
          v52 = 1;
          v53 = 3;
        }
        while ((v54 & 1) == 0);
      }
      else
      {
        v62 = 0;
        v63 = 0;
        v145 = 4 * a6;
        v136 = a6;
        v120 = &byte_1B6933C58[4 * v34];
        do
        {
          v64 = v9[v63];
          v65 = *((_DWORD *)&v150[6] + v63);
          LODWORD(v66) = v64;
          v67 = v65;
          if (v10 == 1)
          {
            v66 = v9[v63 + 32];
            v67 = v120[v66];
          }
          if (v66 | v64)
          {
            sub_1B68C5148((_BYTE *)(a3 + v62), 1, v9[v63], v139, v127, *((_DWORD *)&v150[6] + v63));
            v68 = (_BYTE *)(a3 + v62 + a6);
            sub_1B68C5148(v68, 1, v66, v126, v124, v67);
            v69 = &v68[a6];
            sub_1B68C5148(v69, 1, v64, v139, v127, v65);
            result = sub_1B68C5148(&v69[a6], 1, v66, v126, v124, v67);
            v10 = a9;
          }
          ++v63;
          v62 += v145;
        }
        while (v63 != 4);
      }
    }
    else
    {
      v145 = 4 * a6;
      v136 = a6;
    }
    v141 = v150;
    v70 = v9 + 4;
    v71 = 4;
    while (1)
    {
      v72 = v9[v71];
      if (v72 == 4)
        break;
      if (v72 <= 0x1F)
        goto LABEL_58;
LABEL_62:
      v141 += 2;
      v70 += 4;
      v79 = v71 >= 0xC;
      v71 += 4;
      v9 = a7;
      if (v79)
        goto LABEL_64;
    }
    v9[v71 | 1] = 4;
    v9[v71 | 2] = 4;
    v9[v71 | 3] = 4;
LABEL_58:
    v73 = 0;
    for (j = 0; j != 4; ++j)
    {
      v75 = v70[j];
      if (v70[j])
      {
        v76 = *((_DWORD *)v141 + j);
        sub_1B68C5148((_BYTE *)(a3 + v71 + v73), 1, v70[j], v147, v20, v76);
        v77 = (_BYTE *)(a3 + v71 + v73 + v136);
        sub_1B68C5148(v77, 1, v75, v147, v20, v76);
        v78 = &v77[v136];
        sub_1B68C5148(v78, 1, v75, v147, v20, v76);
        result = sub_1B68C5148(&v78[v136], 1, v75, v147, v20, v76);
      }
      v73 += v145;
    }
    goto LABEL_62;
  }
LABEL_64:
  v80 = v135;
  v81 = *v135;
  if (v81 <= 0x3F)
  {
    v82 = a8;
    if (a5 && v81 <= 0x1F)
    {
      v83 = 0;
      v142 = 0;
      v125 = v9 + 36;
      v84 = 1;
      v85 = a6 << (a8 != 0);
      do
      {
        v137 = v83;
        if (v82)
        {
          v86 = *(unsigned __int8 *)(*((_QWORD *)v129 + 14) + (a4 + *((_DWORD *)v129 + 3) * (a5 - 2 + v83)));
          if ((v84 & 1) == 0)
            v80 = v125;
        }
        else
        {
          v87 = *((_QWORD *)v129 + 18);
          if (*(_BYTE *)(v87 + v122) != 2)
          {
            v90 = *((_QWORD *)v129 + 14);
            v88 = *((_DWORD *)v129 + 3);
            v91 = a4;
            v92 = a5 - 1;
LABEL_76:
            v86 = *(unsigned __int8 *)(v90 + v91 + v88 * v92);
            goto LABEL_78;
          }
          if (a5 >= 2)
          {
            v88 = *((_DWORD *)v129 + 3);
            v89 = *(unsigned __int8 *)(v87 + (v122 - 2 * v88));
            v90 = *((_QWORD *)v129 + 14);
            if (v89 == 2)
            {
              v91 = a4;
              v92 = a5 - 2;
            }
            else
            {
              v91 = a4;
              v92 = (a5 & 0xFFFFFFFE) - 1;
            }
            goto LABEL_76;
          }
          v86 = 0;
        }
LABEL_78:
        v93 = 0;
        v94 = v117 + 1 + v86;
        v95 = v130 + (v94 >> 1);
        LODWORD(v96) = (v131 + (v94 >> 1)) & ~((int)(v131 + (v94 >> 1)) >> 31);
        if (v96 >= 0x33)
          v96 = 51;
        else
          v96 = v96;
        v97 = v95 & ~(v95 >> 31);
        if (v97 >= 0x33)
          v97 = 51;
        v98 = byte_1B6935E24[v96];
        v99 = byte_1B6935E64[v97];
        do
        {
          *(_DWORD *)&v149[4 * v93 + 48] = byte_1B6933C58[4 * v96 + v80[v93]];
          ++v93;
        }
        while (v93 != 16);
        v100 = *v80;
        if (v100 == 4)
        {
          *(_WORD *)(v80 + 1) = 1028;
          v80[3] = 4;
LABEL_88:
          v101 = 0;
          v102 = v142;
          do
          {
            v103 = v80[v101];
            if (v80[v101])
            {
              v104 = *(_DWORD *)&v149[4 * v101 + 48];
              v105 = (_BYTE *)(a3 + v102);
              sub_1B68C5148(v105, v85, v80[v101], v98, v99, v104);
              sub_1B68C5148(v105 + 1, v85, v103, v98, v99, v104);
              sub_1B68C5148(v105 + 2, v85, v103, v98, v99, v104);
              result = sub_1B68C5148(v105 + 3, v85, v103, v98, v99, v104);
            }
            ++v101;
            v102 += 4;
          }
          while (v101 != 4);
          goto LABEL_92;
        }
        if (v100 <= 0x1F)
          goto LABEL_88;
LABEL_92:
        v84 = 0;
        v142 += a6;
        v82 = a8;
        v83 = 1;
        v9 = a7;
        v80 = v135;
      }
      while (v137 < a8);
    }
    v106 = a3 + 4 * a6;
    v107 = v9;
    v108 = v149;
    v146 = v107 + 20;
    v109 = 4;
    while (1)
    {
      v110 = v80[v109];
      v144 = v109;
      if (v110 == 4)
        break;
      if (v110 <= 0x1F)
        goto LABEL_99;
LABEL_103:
      v106 += 4 * a6;
      v108 += 16;
      v146 += 4;
      v109 = v144 + 4;
      v80 = v135;
      if (v144 >= 0xC)
        return result;
    }
    v80[v109 | 1] = 4;
    v80[v109 | 2] = 4;
    v80[v109 | 3] = 4;
LABEL_99:
    v111 = 0;
    v112 = v146;
    do
    {
      v114 = *v112++;
      v113 = v114;
      if (v114)
      {
        v115 = *(_DWORD *)&v108[v111];
        sub_1B68C5148((_BYTE *)(v106 + v111), a6, v113, v147, v20, v115);
        sub_1B68C5148((_BYTE *)(v106 + v111 + 1), a6, v113, v147, v20, v115);
        sub_1B68C5148((_BYTE *)(v106 + v111 + 2), a6, v113, v147, v20, v115);
        result = sub_1B68C5148((_BYTE *)(v106 + v111 + 3), a6, v113, v147, v20, v115);
      }
      v111 += 4;
    }
    while (v111 != 16);
    goto LABEL_103;
  }
  return result;
}

_BYTE *sub_1B68C5148(_BYTE *result, int a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  char v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;

  v6 = result[-a2];
  v7 = *result;
  v8 = v6 - v7;
  if (v8 * v8 < (a4 * a4))
  {
    v9 = result[-2 * a2];
    if ((v9 - v6) * (v9 - v6) < (a5 * a5))
    {
      v10 = result[a2];
      if ((v10 - v7) * (v10 - v7) < a5 * a5)
      {
        v11 = a2;
        v12 = -(uint64_t)a2;
        v13 = -2 * a2;
        v14 = -3 * a2;
        v15 = result[-3 * a2];
        if (a3 == 4)
        {
          v16 = result[2 * a2];
          if (v8 < 0)
            v8 = v7 - v6;
          v17 = v15 - v6;
          if ((int)(v15 - v6) < 0)
            v17 = v6 - v15;
          if ((int)(v16 - v7) >= 0)
            v18 = v16 - v7;
          else
            v18 = v7 - v16;
          if (v17 >= a5 || v8 >= (a4 >> 2) + 2)
          {
            v20 = (v6 + 2 * v9 + v10 + 2) >> 2;
            LOBYTE(v21) = v9;
          }
          else
          {
            v19 = v7 + v6 + v9;
            v20 = (v10 + 2 * v19 + v15 + 4) >> 3;
            v21 = (v19 + v15 + 2) >> 2;
            v15 = (v19 + 3 * v15 + 2 * result[-4 * v11] + 4) >> 3;
          }
          if (v18 >= a5 || v8 >= (a4 >> 2) + 2)
          {
            v39 = (v7 + v9 + 2 * v10 + 2) >> 2;
          }
          else
          {
            v38 = v7 + v6 + v10;
            v39 = (v9 + 2 * v38 + v16 + 4) >> 3;
            v10 = (v38 + v16 + 2) >> 2;
            v16 = (v38 + 3 * v16 + 2 * result[3 * v11] + 4) >> 3;
          }
          result[v12] = v20;
          result[v13] = v21;
          result[v14] = v15;
          *result = v39;
          result[v11] = v10;
          result[2 * v11] = v16;
        }
        else
        {
          v22 = result[2 * a2];
          if ((int)(v15 - v6) >= 0)
            v23 = v15 - v6;
          else
            v23 = v6 - v15;
          if (v22 - v7 >= 0)
            v24 = v22 - v7;
          else
            v24 = v7 - v22;
          if (v23 >= a5)
            v25 = a6;
          else
            v25 = a6 + 1;
          if (v24 < a5)
            ++v25;
          v26 = v9 - v10 + 4 * (v7 - v6) + 4;
          v27 = v26 >> 3;
          v28 = v26 >> 3;
          if (v28 < (__int16)-(__int16)v25)
            v29 = -v25;
          else
            LOWORD(v29) = v27;
          if (v28 > (__int16)v25)
            LOWORD(v29) = v25;
          v30 = (__int16)(v29 + v6) & ~((__int16)(v29 + v6) >> 31);
          if (v30 >= 0xFF)
            LOBYTE(v30) = -1;
          v31 = (__int16)(v7 - v29) & ~((__int16)(v7 - v29) >> 31);
          if (v31 >= 0xFF)
            LOBYTE(v31) = -1;
          v32 = v7 + v6 + 1;
          v33 = v15 - 2 * v9 + (v32 >> 1);
          if (-a6 > v33 >> 1)
            v34 = -a6;
          else
            v34 = v33 >> 1;
          if (a6 < (__int16)v34)
            LOBYTE(v34) = a6;
          v35 = v9 + v34;
          if (v23 < a5)
            LOBYTE(v9) = v35;
          if (v24 < a5)
          {
            v36 = v22 - 2 * v10 + (v32 >> 1);
            if (-a6 > v36 >> 1)
              v37 = -a6;
            else
              v37 = v36 >> 1;
            if (a6 < (__int16)v37)
              LOBYTE(v37) = a6;
            LOBYTE(v10) = v10 + v37;
          }
          result[v12] = v30;
          result[v13] = v9;
          *result = v31;
          result[v11] = v10;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B68C53CC(__int16 *a1, __int16 *a2, signed int a3, int a4, int a5, int32x2_t a6, int32x2_t a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  unsigned __int8 v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;

  v7 = *((unsigned __int8 *)a1 + 12);
  v8 = *((unsigned __int8 *)a2 + 12);
  v9 = *((unsigned __int8 *)a2 + 13);
  if (a4 && !a5)
  {
    v7 = v7 & 0xFFFFFEFF | ((a1[4] & 1) << 8);
    v8 = v8 & 0xFFFFFEFF | ((a2[4] & 1) << 8);
    v9 = v9 & 0xFFFFFEFF | ((*((_BYTE *)a2 + 9) & 1) << 8);
  }
  if (v8 == v9)
  {
    a6.i16[0] = a1[2];
    a6.i16[2] = *a1;
    a7.i16[0] = a2[1];
    a7.i16[2] = a2[3];
    v10 = vshr_n_s32(vshl_n_s32(a6, 0x10uLL), 0x10uLL);
    v11 = vshr_n_s32(vshl_n_s32(a7, 0x10uLL), 0x10uLL);
    v12 = vdup_n_s32(a3);
    v13 = (int32x2_t)vorr_s8((int8x8_t)vcgt_u32((uint32x2_t)vorr_s8((int8x8_t)vabd_s32(v10, vdup_n_s32(a2[2])), (int8x8_t)vabd_s32(vrev64_s32(v10), vdup_n_s32(*a2))), (uint32x2_t)0x300000003), vorr_s8((int8x8_t)vcge_s32(vabd_s32(vdup_n_s32(a1[1]), v11), v12), (int8x8_t)vcge_s32(vabd_s32(vdup_n_s32(a1[3]), vrev64_s32(v11)), v12)));
    v14 = vand_s8((int8x8_t)v13, (int8x8_t)vdup_lane_s32(v13, 1)).u8[0];
  }
  else
  {
    v15 = *a1;
    if (v8 == v7)
    {
      v17 = v15 - *a2;
      v16 = v17 < 0;
      v18 = a1[1] - a2[1];
      v19 = a1[2] - a2[2];
      v20 = a2[3];
    }
    else
    {
      v17 = v15 - a2[2];
      v16 = v17 < 0;
      v18 = a1[1] - a2[3];
      v19 = a1[2] - *a2;
      v20 = a2[1];
    }
    v21 = a1[3] - v20;
    if (v16)
      v17 = -v17;
    if (v18 < 0)
      v18 = -v18;
    if (v19 < 0)
      v19 = -v19;
    if (v21 < 0)
      v21 = v20 - a1[3];
    v22 = v19 | v17;
    v14 = v18 >= a3 || v22 > 3 || v21 >= a3;
  }
  return v14 & 1;
}

uint64_t sub_1B68C552C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  int v24;
  pthread_mutex_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  size_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  _BOOL4 v41;
  _BOOL4 v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  _BOOL4 v60;
  _BOOL4 v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  int32x2_t v68;
  int8x8_t v69;
  pthread_mutex_t *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned __int8 v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  signed int v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  _BOOL4 v90;
  BOOL v91;
  int v92;
  int v93;
  int v94;
  _BOOL4 v95;
  int v96;
  int v97;
  int v98;
  signed int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  int v106;
  _BOOL4 v108;
  int v109;
  int v110;
  unsigned __int8 v111;
  int v112;
  unsigned int v113;
  int8x16_t v114;
  BOOL v116;
  unsigned int v117;
  unsigned int v118;
  _OWORD *v119;
  unint64_t v120;
  int v121;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  int v134;
  int v135;
  uint64_t v136;
  _BOOL4 v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  __int16 v144;
  __int16 v145;
  unsigned int v146;
  __int16 v147;
  __int16 v148;
  int v149;
  __int16 v150;
  int v151;
  unsigned int v152;
  int v153;
  unsigned __int8 v154;
  int v155;
  char v156;
  unsigned int v157;
  unsigned int v158;
  __int16 v159;
  __int16 v160;
  __int16 v161;
  __int16 v162;
  int v163;
  unsigned int v164;
  int v165;
  char v166;
  int v167;
  int v168;
  int v169;
  int v170;
  char v171;
  unsigned int v172;
  int v173;
  unsigned __int16 v174;
  int v175;
  unsigned __int16 v176;
  int v177;
  __int16 v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  char v186;
  unsigned __int8 v187;
  char v188;
  unsigned __int8 v189;
  char v190;
  unsigned __int8 v191;
  char v192;
  char v193;
  unsigned int v194;
  BOOL v196;
  int v197;
  BOOL v198;
  BOOL v200;
  BOOL v201;
  int v202;
  int v204;
  int v205;
  int v206;
  int v207;
  BOOL v208;
  BOOL v213;
  _BOOL4 v216;
  char v217;
  unsigned int v218;
  unsigned int v219;
  _OWORD *v220;
  uint64_t v221;
  _OWORD *v222;
  unint64_t v223;
  int v224;
  unsigned int v225;
  unsigned int v227;
  int v228;
  int v229;
  int v230;
  unsigned int v231;
  int v232;
  int v233;
  uint64_t v234;
  int v235;
  unsigned int v236;
  __int16 *v237;
  __int16 *v238;
  int v239;
  __int16 v240;
  int v241;
  __int16 v242;
  int v243;
  __int16 v244;
  __int16 v245;
  int v246;
  __int16 v247;
  __int16 v248;
  int v249;
  unsigned int v250;
  __int16 v251;
  int v252;
  char v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  char v257;
  int v258;
  char v259;
  BOOL v260;
  __int16 v261;
  int v262;
  unsigned int v263;
  int v264;
  char v265;
  int v266;
  char v267;
  int v268;
  int v269;
  int v270;
  int v271;
  BOOL v272;
  _BOOL4 v273;
  char v274;
  char v275;
  __int16 v276;
  __int16 v277;
  int v278;
  char v279;
  int v280;
  int v281;
  char v282;
  char v283;
  char v284;
  int v285;
  char v286;
  int v287;
  int v288;
  __int16 v289;
  int v290;
  int v291;
  unsigned __int16 v292;
  int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  unsigned int v297;
  char v298;
  unsigned int v299;
  char v300;
  unsigned int v301;
  char v302;
  char v303;
  unsigned __int8 v304;
  char v305;
  unsigned __int8 v306;
  char v307;
  unsigned __int8 v308;
  char v309;
  char v310;
  unsigned int v311;
  BOOL v312;
  char v313;
  uint64_t v314;
  int v315;
  int v316;
  int v317;
  int v318;
  BOOL v319;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  unsigned int v328;
  uint64_t (*v329)(uint64_t, uint64_t, unsigned int, unsigned int, int, int, int, _BYTE *, int);
  uint64_t (*v330)(uint64_t, uint64_t, unsigned int, unsigned int, int, int, int, _BYTE *, int, uint64_t);
  unsigned int v331;
  uint64_t v332;
  int v333;
  int v334;
  int v335;
  uint64_t v336;
  int v337;
  int v338;
  unsigned __int8 *v339;
  uint64_t i;
  uint64_t v341;
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  unsigned int j;
  unsigned int v347;
  BOOL v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  unsigned __int8 *v352;
  char *v353;
  char *v354;
  char *v355;
  char *v356;
  int v357;
  uint64_t v358;
  pthread_mutex_t *v359;
  void *v360;
  size_t v361;
  int v362;
  pthread_mutex_t *v363;
  uint64_t v364;
  pthread_mutex_t *v365;
  uint64_t v366;
  pthread_mutex_t *v367;
  unint64_t v368;
  _BYTE *v369;
  unint64_t v370;
  _BYTE *v371;
  int v372;
  int v374;
  uint64_t v376;
  unsigned int v377;
  int v379;
  unsigned int v380;
  _BYTE *v381;
  int v382;
  int v383;
  unsigned __int8 v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _BOOL4 v388;
  unsigned int v389;
  int v390;
  __int16 v391;
  _BOOL4 v392;
  signed int v393;
  int v394;
  unint64_t v395;
  uint64_t v396;
  int v397;
  _OWORD *v398;
  int v399;
  unsigned int v400;
  unsigned int v401;
  int v402;
  uint64_t v403;
  int v404;
  _BOOL4 v405;
  int v406;
  int v407;
  int v408;
  int v409;
  BOOL v410;
  unsigned int v411;
  int v412;
  __int16 v413;
  char v414;
  _BOOL8 v415;
  char v416;
  _OWORD *v417;
  char v418;
  int v419;
  char v420;
  _BYTE *v421;
  unsigned int v422;
  int v423;
  int v424;
  char v425;
  BOOL v426;
  char v427;
  unsigned int v428;
  unsigned int v429;
  int v430;
  unsigned int v431;
  unsigned int v432;
  _BOOL4 v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  int v437;
  unsigned int v438;
  int v439;
  _BOOL4 v440;
  _OWORD *v441;
  int v442;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  signed int v446;
  _OWORD *v447;
  int v448;
  int v449;
  int v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  _BOOL4 v454;
  int v456;
  uint64_t v457;
  uint64_t v458;
  char v459;
  char *v460;
  unsigned int v461;
  int v462;
  int v463;
  unsigned int v464;
  int v465;
  int v466;
  uint64_t v467;
  uint64_t v468;
  size_t v469;
  int v470;
  size_t v471;
  unsigned __int8 v472;
  int v473;
  int v474;
  unsigned int v475;
  char *v476;
  unsigned int v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  unsigned int v482;
  int v483;
  int v484;
  char *v485;
  unsigned int v486;
  int v487;
  int v488;
  char v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  int v493;
  char *v494;
  uint64_t v495;
  char *v496;

  v3 = a1;
  *(_QWORD *)(a1 + 80) = a2;
  if (*(_DWORD *)(a1 + 24))
  {
    v4 = a2[25] >> 4;
    *(_DWORD *)(a1 + 8) = v4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 8);
  }
  v5 = a3 + 32;
  v395 = a3 + 64;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 12) * v4;
  v379 = **(unsigned __int8 **)(a1 + 144);
  v387 = a3 + 32;
  while (1)
  {
    v6 = *(pthread_mutex_t **)(v3 + 160);
    v7 = *(_QWORD *)(v3 + 168);
    if (v6)
      pthread_mutex_lock(v6);
    v8 = **(_BYTE **)(v3 + 144) != 0;
    v9 = *(_DWORD *)(v3 + 8) >> v8;
    if (!v9)
    {
LABEL_692:
      v367 = *(pthread_mutex_t **)(v3 + 160);
      if (v367)
        pthread_mutex_unlock(v367);
      v366 = 0;
      goto LABEL_695;
    }
    v10 = 0;
    v11 = *(_DWORD *)(v3 + 12);
    do
    {
      v12 = (v10 * v11) << v8;
      v13 = (v10 * v11 + v11) << v8;
      v14 = v12;
      v15 = v12 < v13;
      if (v12 < v13)
      {
        v16 = 0;
        while (*(_BYTE *)(v7 + v12 + v16) == 20)
        {
          if (!((_DWORD)v12 - v13 + (_DWORD)++v16))
          {
            v15 = 1;
            goto LABEL_31;
          }
        }
        v14 = v12 + v16;
      }
      if (v14 == v13)
      {
LABEL_31:
        memset((void *)(v7 + v12), 21, v13 - v12);
        v25 = *(pthread_mutex_t **)(v3 + 160);
        if (v25)
          pthread_mutex_unlock(v25);
        v26 = *(_DWORD *)(v3 + 12);
        v27 = v12 / v26;
        if ((_DWORD)v12 != (_DWORD)v27 * v26
          || (v491 = *(unsigned int *)(v3 + 12), v480 = v13 / v26, v13 != (_DWORD)v480 * v26))
        {
LABEL_691:
          v366 = 4294958327;
          goto LABEL_695;
        }
        v453 = v12;
        v443 = v13;
        v440 = v15;
        if (*(_BYTE *)(v3 + 220) && *(_BYTE *)(v3 + 221))
        {
          v28 = *(unsigned int *)(v3 + 12);
          if (*(int *)(v3 + 184) < 1)
            goto LABEL_678;
          v29 = *(char **)(v3 + 224);
          v30 = 1;
          if (!(_DWORD)v12 && !v29)
          {
            v31 = (20 * a2[34] + 11 * a2[38]);
            if ((_DWORD)v31)
              v29 = (char *)malloc_type_malloc(v31, 0x4CF1F002uLL);
            else
              v29 = 0;
            v30 = *(unsigned __int8 *)(v3 + 221);
            *(_QWORD *)(v3 + 224) = v29;
          }
          v323 = *(_QWORD *)(v3 + 80);
          v324 = *(_DWORD *)(v323 + 100) + 15;
          v325 = *(unsigned int *)(v323 + 136);
          v326 = *(unsigned int *)(v323 + 152);
          v476 = *(char **)(v323 + 32);
          v485 = *(char **)(v323 + 40);
          v490 = (2 * v326);
          v494 = &v29[(4 * v325) + (16 * v325) + v490];
          v496 = &v29[(4 * v325)];
          v327 = 16 * v27 - 4;
          if (v491 > v12)
            v327 = 0;
          if (*(_BYTE *)v323 && *(_BYTE *)(v323 + 3))
          {
            if (*(_BYTE *)(v323 + 5))
            {
              v476 += v325;
              v496 += v325;
              v485 += v326;
              v494 += v326;
            }
            v328 = (v324 & 0xFFFFFFF0) + ~(2 * *(_DWORD *)(v3 + 208));
            LODWORD(v325) = 2 * v325;
          }
          else
          {
            v328 = (v324 & 0xFFFFFFF0) + (2 * *(_DWORD *)(v3 + 212) - 4) * *(_DWORD *)(v3 + 208) - 1;
            LODWORD(v490) = v326;
          }
          if (v491 > v12)
          {
            v329 = sub_1B68BFA78;
            if (!*(_BYTE *)(v3 + 222))
              v329 = sub_1B68A35DC;
            v330 = sub_1B68BFC84;
            if (!*(_BYTE *)(v3 + 222))
              v330 = sub_1B68A36B4;
            *(_QWORD *)(v3 + 240) = v329;
            *(_QWORD *)(v3 + 248) = v330;
          }
          if (v27 >= v480)
            goto LABEL_678;
          v331 = v324 >> 4;
          v439 = 16 * v325;
          v448 = 8 * v490;
          v332 = v325;
          v471 = (4 * v325);
          v469 = (2 * v490);
          v333 = v328 - v327;
          if (v333 >= 7)
            v334 = 7;
          else
            v334 = v333;
          if (v333 >= 9)
            v335 = 9;
          else
            v335 = v333;
          v336 = v331 - 1;
          v465 = 2 * v334 + 2;
          v462 = 2 * v335 + 2;
          if (v331 == 1)
            v337 = 8;
          else
            v337 = 6;
          if (v337 >= v333)
            v337 = v333;
          v473 = 2 * v337;
          v460 = &v496[(12 * v325)];
          v467 = v336;
          v451 = v30;
          v488 = v325;
          while (1)
          {
            v338 = *(_DWORD *)(v3 + 12);
            v339 = (unsigned __int8 *)(*(_QWORD *)(v3 + 152) + 48 * (v338 * v27));
            if (v30)
            {
              if (!(_DWORD)v28)
              {
                if (v338)
                  v349 = -1;
                else
                  v349 = 0;
LABEL_661:
                v354 = &v494[-v469];
                v353 = &v496[-v471];
                v356 = v494;
                v355 = v496;
                v357 = v473;
                if (v27)
                  goto LABEL_665;
                goto LABEL_669;
              }
              for (i = 0; i != v28; ++i)
              {
                v341 = (16 * i);
                v342 = &v476[(v439 * v27) + v341];
                v343 = &v496[v341];
                v344 = &v485[(v448 * v27) + v341];
                v345 = &v494[v341];
                if (*(_DWORD *)(a1 + 256) >= (int)*(unsigned __int8 *)(*(_QWORD *)(a1 + 112)
                                                                      + (i + *(_DWORD *)(a1 + 12) * v27)))
                {
                  for (j = 17; j > 1; --j)
                  {
                    *(_OWORD *)v343 = *(_OWORD *)v342;
                    v342 += v332;
                    v343 += v332;
                  }
                  v347 = 9;
                  v28 = v491;
                  do
                  {
                    *(_OWORD *)v345 = *(_OWORD *)v344;
                    v344 += v490;
                    v345 += v490;
                    --v347;
                  }
                  while (v347 > 1);
                }
                else
                {
                  sub_1B68C4600((_BYTE *)a1, (uint64_t)v342, (uint64_t)v343, i, v27, v488, v339, 0, 0);
                  sub_1B68C36F8(a1, (uint64_t)v344, (uint64_t)v345, i, v27, v490, v339, 0, 0);
                  v28 = v491;
                }
                v339 += 48;
              }
            }
            else
            {
              if (*(_BYTE *)(*(_QWORD *)(v3 + 80) + 3))
                v348 = (_DWORD)v28 == 0;
              else
                v348 = 1;
              if (v348)
              {
                v349 = v28 - (v338 != (_DWORD)v28);
                goto LABEL_663;
              }
              v350 = 0;
              do
              {
                if ((v339[16] & 0xC0) + *v339 <= 0x7F)
                  sub_1B68C4600((_BYTE *)v3, (uint64_t)&v476[(16 * (v325 * v27 + v350))], (uint64_t)&v476[(16 * (v325 * v27 + v350))], v350, v27, v325, v339, 0, 0);
                v339 += 48;
                ++v350;
              }
              while (v28 != v350);
              v351 = 0;
              v352 = (unsigned __int8 *)(*(_QWORD *)(v3 + 152) + 48 * (*(_DWORD *)(v3 + 12) * v27));
              do
              {
                if ((v352[16] & 0xC0) + *v352 <= 0x7F)
                  sub_1B68C36F8(a1, (uint64_t)&v485[(v448 * v27 + 16 * v351)], (uint64_t)&v485[(v448 * v27 + 16 * v351)], v351, v27, v490, v352, 0, 0);
                v352 += 48;
                ++v351;
              }
              while (v28 != v351);
            }
            v3 = a1;
            v349 = v28 - (*(_DWORD *)(a1 + 12) != (_DWORD)v28);
            v5 = v387;
            v30 = v451;
            LODWORD(v325) = v488;
            if (v451)
              goto LABEL_661;
LABEL_663:
            if (v27)
            {
              v353 = &v476[((16 * v27 - 4) * v325)];
              v354 = &v485[((8 * v27 - 2) * v490)];
LABEL_665:
              if (v27 == v467)
                v357 = v462;
              else
                v357 = v465;
              v356 = v354;
              v355 = v353;
              goto LABEL_669;
            }
            v356 = v485;
            v355 = v476;
            v357 = v473;
LABEL_669:
            if (v357 >= 1)
            {
              v358 = (16 * v349);
              if (*(_QWORD *)(v3 + 232))
                (*(void (**)(char *, char *, uint64_t, _QWORD))(v3 + 248))(v355, v356, v358, 0);
              else
                (*(void (**)(char *, char *, uint64_t, _QWORD))(v3 + 240))(v355, v356, v358, 0);
            }
            if (v30)
            {
              memcpy(&v496[-v471], v460, v471);
              memcpy(&v494[-v469], &v494[(6 * v490)], v469);
            }
            if (++v27 == v480)
              goto LABEL_678;
          }
        }
        if (!v379)
        {
          sub_1B68F9630(v3, 0, v491, v12 / v26, v480);
          sub_1B68F9AE8(v3, 0, v491, v27, v480);
          goto LABEL_678;
        }
        *(_DWORD *)(v3 + 184) = 0;
        if (!(_DWORD)v491)
          goto LABEL_678;
        v32 = 0;
        v33 = a2[34];
        while (v27 >= v480)
        {
LABEL_65:
          if (++v32 == v491)
          {
            v49 = *(unsigned int *)(v3 + 12);
            v5 = v387;
            if ((_DWORD)v49)
            {
              v50 = 0;
              v51 = a2[34];
              v52 = v13 / v49;
              while (v453 / v49 >= v52)
              {
LABEL_88:
                ++v50;
                v5 = v387;
                if (v50 == v49)
                  goto LABEL_678;
              }
              v53 = (16 * v50);
              v54 = v453 / v49;
              while (2)
              {
                v55 = 0;
                v56 = *(_DWORD *)(v3 + 12);
                v57 = v50 + v56 * v54;
                v58 = *(_QWORD *)(v3 + 144);
                v59 = *(unsigned __int8 *)(v58 + v57);
                if (v54 && v59 == 1)
                  v55 = *(unsigned __int8 *)(v58 + v57 - v56) == 2;
                if (!v50)
                  goto LABEL_78;
                if (v59 == 1)
                {
                  v60 = 0;
                  v61 = *(unsigned __int8 *)(v58 + v57 - 1) == 2;
                  goto LABEL_79;
                }
                if (v59 == 2)
                {
                  v61 = 0;
                  v60 = *(unsigned __int8 *)(v58 + v57 - 1) == 1;
                }
                else
                {
LABEL_78:
                  v61 = 0;
                  v60 = 0;
                }
LABEL_79:
                if (v59 == 2)
                {
                  v62 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + 40)
                      + v53
                      + 8 * (v453 / v49) * *(_DWORD *)(*(_QWORD *)(v3 + 80) + 152);
                  v63 = ((int)(v54 << 31) >> 31) & v51;
                  v64 = 2 * v51;
                }
                else
                {
                  v65 = *(_QWORD *)(v3 + 80);
                  v62 = *(_QWORD *)(v65 + 40) + v53;
                  v63 = 8 * v54 * *(_DWORD *)(v65 + 152);
                  v64 = v51;
                }
                v66 = (unsigned __int8 *)(*(_QWORD *)(v3 + 152) + 48 * v57);
                if ((v66[16] & 0xC0) + *v66 <= 0x7F)
                {
                  if (v60)
                    v67 = 2;
                  else
                    v67 = 0;
                  sub_1B68C36F8(v3, v62 + v63, v62 + v63, v50, v54, v64, v66, v55, v67 | v61);
                }
                if (++v54 == v52)
                  goto LABEL_88;
                continue;
              }
            }
LABEL_678:
            v359 = *(pthread_mutex_t **)(v3 + 160);
            if (v359)
              pthread_mutex_lock(v359);
            if (v440)
            {
              v360 = (void *)(*(_QWORD *)(v3 + 168) + v453);
              v361 = v443 + ~(_DWORD)v453 + 1;
              v362 = 30;
              goto LABEL_682;
            }
            goto LABEL_683;
          }
        }
        v34 = (16 * v32);
        v35 = v27;
        while (1)
        {
          v36 = 0;
          v37 = *(_DWORD *)(v3 + 12);
          v38 = v32 + v37 * v35;
          v39 = *(_QWORD *)(v3 + 144);
          v40 = *(unsigned __int8 *)(v39 + v38);
          if (v35 && v40 == 1)
            v36 = *(unsigned __int8 *)(v39 + v38 - v37) == 2;
          if (!v32)
            break;
          if (v40 == 1)
          {
            v41 = 0;
            v42 = *(unsigned __int8 *)(v39 + v38 - 1) == 2;
          }
          else
          {
            if (v40 != 2)
              break;
            v42 = 0;
            v41 = *(unsigned __int8 *)(v39 + v38 - 1) == 1;
          }
LABEL_56:
          if (v40 == 2)
          {
            v43 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + 32)
                + v34
                + (16 * v27 * *(_DWORD *)(*(_QWORD *)(v3 + 80) + 136));
            v44 = (v35 << 31 >> 31) & v33;
            v45 = 2 * v33;
          }
          else
          {
            v46 = *(_QWORD *)(v3 + 80);
            v43 = *(_QWORD *)(v46 + 32) + v34;
            v44 = 16 * v35 * *(_DWORD *)(v46 + 136);
            v45 = v33;
          }
          v47 = (unsigned __int8 *)(*(_QWORD *)(v3 + 152) + 48 * v38);
          if ((v47[16] & 0xC0) + *v47 <= 0x7F)
          {
            if (v41)
              v48 = 2;
            else
              v48 = 0;
            sub_1B68C4600((_BYTE *)v3, v43 + v44, v43 + v44, v32, v35, v45, v47, v36, v48 | v42);
          }
          if (++v35 == (_DWORD)v480)
            goto LABEL_65;
        }
        v42 = 0;
        v41 = 0;
        goto LABEL_56;
      }
      if (*(_BYTE *)(v7 + v14) != 30)
        v10 = *(_DWORD *)(v3 + 8) >> v8;
      ++v10;
    }
    while (v10 < v9);
    v17 = 0;
    while (1)
    {
      v18 = ((v17 * v11) << v8);
      v19 = (v17 * v11 + v11) << v8;
      v20 = v18;
      v21 = v18 < v19;
      if (v18 < v19)
      {
        v22 = 0;
        v23 = (v17 * v11 + v11) << v8;
        v24 = v18 - v19;
        while (*(_BYTE *)(v7 + v18 + v22) == 10)
        {
          if (!(v24 + (_DWORD)++v22))
          {
            v374 = 1;
            goto LABEL_91;
          }
        }
        v20 = v18 + v22;
        v19 = (v17 * v11 + v11) << v8;
      }
      if (v20 == v19)
        break;
      if (*(unsigned __int8 *)(v7 + v20) < 0xAu)
        v17 = *(_DWORD *)(v3 + 8) >> v8;
      if (++v17 >= v9)
        goto LABEL_692;
    }
    v374 = v21;
    v23 = v19;
LABEL_91:
    v377 = v23;
    memset((void *)(v7 + v18), 11, (v23 - v18));
    v70 = *(pthread_mutex_t **)(v3 + 160);
    if (v70)
      pthread_mutex_unlock(v70);
    v71 = *(_DWORD *)(v3 + 12);
    v389 = v18 / v71;
    if ((_DWORD)v18 != v18 / v71 * v71)
      goto LABEL_691;
    v407 = *(_DWORD *)(v3 + 12);
    v380 = v377 / v71;
    if (v377 != v377 / v71 * v71)
      goto LABEL_691;
    v376 = v18;
    if (!v379)
      break;
    v382 = *(unsigned __int8 *)(v3 + 221);
    if (v389 >= v380)
      goto LABEL_686;
    v381 = &byte_1B693B900[dword_1EF13A08C];
    v493 = 4 * v71;
    v385 = *(_QWORD *)(v3 + 48);
    v495 = *(_QWORD *)v3;
    v72 = *(_QWORD *)(v3 + 72);
    v386 = *(_QWORD *)(v3 + 32);
    v468 = *(_QWORD *)(a3 + 104);
    v383 = 2 * v71;
    v73 = *(_QWORD *)(v3 + 152) + 48 * v18;
    v452 = v72;
    while (2)
    {
      v403 = v73;
      v396 = (int)((v383 * (v389 >> 1)) | v389 & 1);
      v470 = 4 * v389;
      v74 = 0;
      v75 = 32;
      while (2)
      {
        v76 = v74 + v389 * v407;
        v77 = (int)v76;
        if (v74)
          v78 = v76 - 1;
        else
          v78 = v389 * v407;
        v79 = *(_QWORD *)(v3 + 144);
        v412 = v74 + v389 * v407;
        v80 = *(unsigned __int8 *)(v79 + (int)v76);
        v405 = v80 == 2;
        v394 = v74;
        if (v74 && v80 == 1)
        {
          LODWORD(v415) = 0;
          HIDWORD(v415) = *(unsigned __int8 *)(v79 + v78) == 2;
        }
        else
        {
          HIDWORD(v415) = 0;
          if (v74)
          {
            LODWORD(v415) = 0;
            if (v80 == 2)
              v415 = *(unsigned __int8 *)(v79 + (int)v76 - 1) == 1;
          }
          else
          {
            LODWORD(v415) = 0;
          }
        }
        if (v389 > 1)
        {
          if ((v389 & 1) != 0)
          {
            v81 = v396;
            v96 = v396 - 1;
            if (v80 == 2)
              v96 = v396 - v383;
            v456 = v96;
            if (v80 == 2)
              v83 = v76 - v383;
            else
              v83 = v76 - v407;
            v97 = v493;
            if (v80 == 2)
              v97 = 20 * v407;
            v406 = v97;
            v95 = 0;
          }
          else
          {
            v84 = v76 - v383;
            v85 = *(unsigned __int8 *)(v79 + v76 - v383);
            v81 = v396;
            v86 = v396 - v383;
            if (v85 == 2)
              v87 = v396 - v383;
            else
              v87 = v86 + 1;
            if (v85 == 2)
              v88 = v84;
            else
              v88 = v412 - v407;
            if (v85 == 2)
              v89 = 20 * v407;
            else
              v89 = v493;
            v90 = v85 == 2;
            v91 = v85 == 2;
            if (v85 == 2)
              v92 = v396 - v383;
            else
              v92 = v86 + 1;
            if (v91)
            {
              v93 = 20 * v407;
            }
            else
            {
              v84 = v412 - v407;
              v93 = v493;
            }
            if (v80 != 2)
              v92 = v87;
            v456 = v92;
            if (v80 == 2)
              v83 = v84;
            else
              v83 = v88;
            if (v80 == 2)
              v94 = v93;
            else
              v94 = v89;
            v406 = v94;
            v95 = v80 != 2 && v90;
          }
          v454 = v95;
        }
        else
        {
          if ((v389 & 1) != 0)
          {
            v81 = v396;
            v82 = v396 - 1;
            if (v80 == 2)
              v82 = v396;
            v456 = v82;
            if (v80 == 2)
              v83 = v76;
            else
              v83 = v76 - v407;
            v454 = 0;
          }
          else
          {
            v454 = 0;
            v81 = v396;
            v456 = v396;
            v83 = v74 + v389 * v407;
          }
          v406 = v493;
        }
        v457 = v83;
        v388 = v80 != *(unsigned __int8 *)(v79 + (int)v83);
        if (v80 == 2)
          v98 = 1;
        else
          v98 = 3;
        v482 = v98;
        if (v394)
          v99 = v81 - 2;
        else
          v99 = v81;
        v100 = HIDWORD(v415) | v415;
        if (v415)
        {
          if (v394)
            v99 = (v81 & 0xFFFFFFFE) - 2;
          else
            v99 = v81 & 0xFFFFFFFE;
          if (v394)
            v78 = (v389 & 0xFFFFFFFE) * v407 - 1 + v394;
          else
            v78 = (v389 & 0xFFFFFFFE) * v407;
          v101 = v389 & 0xFFFFFFFE;
        }
        else
        {
          v101 = v389;
        }
        v431 = v101;
        v102 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 136) + v77);
        *(_DWORD *)(v403 + 16) = 33686018;
        if (v102)
          v103 = 0;
        else
          v103 = 33686018;
        *(_DWORD *)v403 = 33686018;
        *(_DWORD *)(v403 + 4) = v103;
        *(_DWORD *)(v403 + 8) = 33686018;
        *(_DWORD *)(v403 + 12) = v103;
        *(_DWORD *)(v403 + 20) = v103;
        *(_DWORD *)(v403 + 24) = 33686018;
        *(_DWORD *)(v403 + 28) = v103;
        v104 = *(unsigned __int16 *)(v72 + 2 * v77);
        if (*(_BYTE *)(v385 + 12 * *(unsigned __int16 *)(v72 + 2 * v77) + 9) == 1)
        {
          *(_BYTE *)v403 = 0x80;
          goto LABEL_197;
        }
        v409 = *(unsigned __int8 *)(v385 + 12 * *(unsigned __int16 *)(v72 + 2 * v77) + 9);
        v408 = *(unsigned __int16 *)(v72 + 2 * v77);
        v421 = (_BYTE *)(v403 + 16);
        v105 = *(_QWORD *)(v468 + 8 * v396);
        v106 = *(unsigned __int16 *)(v72 + 2 * v78);
        v402 = *(unsigned __int16 *)(v72 + 2 * (int)v457);
        v108 = v5 <= v105 && v105 <= v395;
        if (!(v382 | v108))
        {
          v113 = bswap32(*(_DWORD *)(v386 + 4 * v77));
          v466 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 136) + v77);
          if (*(_BYTE *)(*(_QWORD *)(v3 + 136) + v77))
          {
            v114 = vbicq_s8((int8x16_t)xmmword_1B6917DC0, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v113), (int8x16_t)xmmword_1B6917DB0)));
            v69 = (int8x8_t)vextq_s8(v114, v114, 8uLL).u64[0];
            v68 = (int32x2_t)vorr_s8(*(int8x8_t *)v114.i8, v69);
            v113 |= v68.i32[0] | v68.i32[1];
          }
          v489 = v381[*(unsigned __int8 *)(v385 + 12 * *(unsigned __int16 *)(v72 + 2 * v77) + 8)];
          v404 = 4 * v394;
          v116 = v409 != 2 || v106 == v104;
          v426 = v116;
          v417 = (_OWORD *)(v403 + 32);
          v419 = (v113 >> 4) & 0xFFF0000 | v113 & 0xFFF0000;
          v117 = 0;
          v391 = *(_WORD *)(v105 + 10);
          v401 = v113 >> 30;
          v399 = (v113 >> 28) & 3;
          v492 = (v113 >> 4) & 0xFFF0FFF | v113;
          v397 = (v113 >> 4) & 0xFFF0FFF | v113 & 0xFFFFFFF;
          v393 = v482 + 1;
          v118 = 4;
          v119 = (_OWORD *)v403;
          v481 = v80;
          v479 = v77;
          while (1)
          {
            v477 = v117;
            if (v117)
            {
              v78 += v407;
              ++v431;
              if (*(_BYTE *)(*(_QWORD *)(v3 + 136) + v77))
              {
                v68 = (int32x2_t)33686018;
                *v417 = xmmword_1B6917DD0;
              }
              else
              {
                *(_QWORD *)v417 = 0x202020202020202;
                *(_QWORD *)(v403 + 40) = 0x202020202020202;
              }
              v118 = 1;
              v99 = (v396 & 0xFFFFFFFE) - 1;
              v119 = (_OWORD *)(v403 + 32);
            }
            v120 = *(_QWORD *)(v468 + 8 * v99);
            if (v492)
            {
              if (v419 == 268369920)
                v118 = 1;
              v430 = -1;
              v121 = v419 == 268369920;
            }
            else if ((v391 & 0xFFFD) == 0x100)
            {
              v430 = 0;
              v121 = 0;
              v68 = (int32x2_t)0x2020202002020202;
              *v119 = xmmword_1B6917DE0;
              v118 = 1;
            }
            else
            {
              v121 = 0;
              v430 = -1;
            }
            if (!v426)
            {
              v100 = 0;
LABEL_240:
              v131 = 0;
              v132 = 0;
              *(_BYTE *)v119 = 32;
LABEL_241:
              v130 = v492;
              goto LABEL_253;
            }
            if (!v404)
              goto LABEL_240;
            if (v5 <= v120 && v120 <= v395)
            {
              v131 = 0;
              *(_DWORD *)v119 = 67372036;
              v132 = 1;
              goto LABEL_241;
            }
            v123 = bswap32(*(_DWORD *)(v386 + 4 * v78));
            if ((v123 & 0xCC0000) != 0)
              v124 = 13382400;
            else
              v124 = 0;
            if ((v123 & 0x330000) != 0)
              v125 = 3342387;
            else
              v125 = 0;
            v126 = v125 | v124 | v123;
            if (*(_BYTE *)(*(_QWORD *)(v3 + 136) + v78))
              v123 = v126;
            if (HIDWORD(v415))
            {
              v131 = 0;
              v127 = (v123 >> 18) & 3;
              v128 = HIWORD(v123) & 3;
              if ((v389 & 1) == 0)
                v128 = v127;
              v129 = dword_1B69181C0[v128];
            }
            else
            {
              if (v415)
              {
                v131 = 0;
                v133 = v401;
                if (v477)
                  v133 = v399;
                v134 = v397 | (dword_1B69181C0[v133] << 28);
                v129 = HIWORD(v123);
                goto LABEL_248;
              }
              v131 = 0;
              v129 = HIWORD(v123);
            }
            v134 = v492;
LABEL_248:
            v130 = v134 | (v129 << 28);
            v135 = v100;
            while (v131 < v118)
            {
              if ((v131 & v466) != 0)
              {
                v132 = 0;
LABEL_252:
                *(_BYTE *)v119 = 32;
                goto LABEL_253;
              }
              v132 = v430 | (v130 >> 28) | (v131 == 0);
              if (!v132)
                goto LABEL_252;
              v132 = 1;
              if (v130 >> 28 == 15)
                goto LABEL_253;
              v136 = 0;
              v486 = v131 + v404;
              v483 = v131 + v404 - 1;
              v411 = v131;
              if (v131)
                v137 = 0;
              else
                v137 = v415;
              v138 = HIDWORD(v415);
              if (v131)
                v138 = 0;
              v463 = v138;
              v139 = v130;
              v424 = v78;
              v422 = v100;
              v446 = v99;
              v444 = v118;
              v441 = v119;
              v437 = v121;
              v435 = v130;
              v449 = v135;
              v433 = v137;
              do
              {
                if (v137)
                {
                  v140 = v470 + 2 * v477 + (v136 >> 1);
                  v141 = 4 * v431 + v136;
                  if ((v139 & 0x80000000) == 0)
                    goto LABEL_271;
                }
                else
                {
                  v140 = v470 + v136;
                  if (!v463)
                  {
                    v141 = v470 + v136;
                    if ((v139 & 0x80000000) != 0)
                      goto LABEL_399;
LABEL_271:
                    v142 = *(_QWORD *)(v495 + 8 * (v486 + v140 * v493));
                    v143 = *(_QWORD *)(v495 + 8 * (v483 + v141 * v493));
                    if (v142 == v143)
                    {
                      LOBYTE(v197) = 0;
                    }
                    else
                    {
                      v144 = *(_WORD *)v142;
                      v145 = *(_WORD *)(v142 + 2);
                      v146 = *(unsigned __int16 *)(v142 + 12);
                      v147 = *(_WORD *)v143;
                      v148 = *(_WORD *)(v143 + 2);
                      v150 = *(_WORD *)v142 - *(_WORD *)v143;
                      LOBYTE(v149) = v150;
                      v151 = (__int16)(v145 - v148);
                      v152 = *(unsigned __int16 *)(v143 + 12);
                      LOWORD(v153) = v146 - v152;
                      if (v150 >= 0)
                      {
                        v154 = HIBYTE(v150);
                      }
                      else
                      {
                        v149 = -(unsigned __int16)(v144 - v147);
                        v154 = (unsigned __int16)-v150 >> 8;
                      }
                      if (v151 < 0)
                        v155 = -(unsigned __int16)(v145 - v148);
                      else
                        LOBYTE(v155) = v145 - v148;
                      if (v151 >= 0)
                        v156 = (unsigned __int16)(v145 - v148) >> 8;
                      else
                        v156 = (unsigned __int16)(v148 - v145) >> 8;
                      v157 = -(unsigned __int16)v153 >> 8;
                      if ((__int16)(v146 - v152) >= 0)
                      {
                        LOBYTE(v158) = (unsigned __int16)(v146 - v152) >> 8;
                      }
                      else
                      {
                        v153 = -(unsigned __int16)(v146 - v152);
                        LOBYTE(v158) = v157;
                      }
                      if ((v489 & 2) != 0)
                      {
                        if (v154)
                          v198 = 1;
                        else
                          v198 = v149 > 3u;
                        if (!v198 && v156 == 0)
                        {
                          if ((_BYTE)v158)
                            v200 = 0;
                          else
                            v200 = v482 >= v155;
                          v197 = !v200;
                          if ((_BYTE)v153)
                            v197 = 1;
                          LOBYTE(v135) = v449;
                          if (!v449)
                          {
                            if (v197)
                              v201 = 0;
                            else
                              v201 = v80 == 2;
                            v99 = v446;
                            v118 = v444;
                            v119 = v441;
                            v121 = v437;
                            v130 = v435;
                            v137 = v433;
                            if (v201)
                              LOBYTE(v197) = (*(_BYTE *)(v142 + 8) ^ *(_BYTE *)(v143 + 8)) & 1;
                            goto LABEL_398;
                          }
                          v99 = v446;
                          v118 = v444;
                          v119 = v441;
                          v121 = v437;
                          v130 = v435;
                        }
                        else
                        {
                          LOBYTE(v197) = 1;
                          v99 = v446;
                          v118 = v444;
                          v119 = v441;
                          v121 = v437;
                          v130 = v435;
                          LOBYTE(v135) = v449;
                        }
                        v137 = v433;
                      }
                      else
                      {
                        v159 = *(_WORD *)(v142 + 4);
                        v160 = *(_WORD *)(v142 + 6);
                        v161 = *(_WORD *)(v143 + 4);
                        v162 = *(_WORD *)(v143 + 6);
                        v163 = *(_WORD *)(v143 + 12);
                        v164 = -(unsigned __int16)(v160 - v162) >> 8;
                        if ((__int16)(v160 - v162) < 0)
                        {
                          v165 = -(unsigned __int16)(v160 - v162);
                        }
                        else
                        {
                          LOBYTE(v164) = (unsigned __int16)(v160 - v162) >> 8;
                          LOBYTE(v165) = v160 - v162;
                        }
                        v166 = (unsigned __int16)(v159 - v161) >> 8;
                        if ((__int16)(v159 - v161) >= 0)
                        {
                          LOBYTE(v167) = v159 - v161;
                        }
                        else
                        {
                          v166 = (unsigned __int16)(v161 - v159) >> 8;
                          v167 = -(unsigned __int16)(v159 - v161);
                        }
                        v428 = *(unsigned __int8 *)(v142 + 8);
                        v429 = *(unsigned __int8 *)(v142 + 9);
                        v168 = (v428 >> 4) & 2 | (v429 >> 5);
                        if (v168)
                          v169 = 0;
                        else
                          v169 = -1;
                        if (v168 == 1)
                          v170 = -1;
                        else
                          v170 = v169;
                        if (v168 == 2)
                        {
                          v169 = -1;
                          v171 = -1;
                        }
                        else
                        {
                          v171 = v170;
                        }
                        v474 = *(_WORD *)(v142 + 12);
                        if (v474 != v163)
                        {
                          v172 = v146 - (bswap32(v152) >> 16);
                          LOWORD(v149) = v144 - v161;
                          v173 = (__int16)(v144 - v161);
                          v174 = v145 - v162;
                          v175 = (__int16)(v145 - v162);
                          v176 = v159 - v147;
                          v177 = (__int16)(v159 - v147);
                          v178 = v160 - v148;
                          v179 = (__int16)(v160 - v148);
                          v180 = (unsigned __int16)(v160 - v148);
                          v181 = -(unsigned __int16)v149 >> 8;
                          if (v173 >= 0)
                          {
                            v154 = BYTE1(v149);
                          }
                          else
                          {
                            v149 = -(unsigned __int16)v149;
                            v154 = v181;
                          }
                          if (v175 < 0)
                            v155 = -v174;
                          else
                            LOBYTE(v155) = v174;
                          v156 = v175 >= 0 ? HIBYTE(v174) : (unsigned __int16)-v174 >> 8;
                          if (v177 < 0)
                            v167 = -v176;
                          else
                            LOBYTE(v167) = v176;
                          v166 = v177 >= 0 ? HIBYTE(v176) : (unsigned __int16)-v176 >> 8;
                          if (v179 < 0)
                            v165 = -v180;
                          else
                            LOBYTE(v165) = v178;
                          LOBYTE(v164) = v179 >= 0 ? HIBYTE(v178) : (unsigned __int16)-v178 >> 8;
                          if ((v172 & 0x8000u) != 0)
                            v153 = -(unsigned __int16)v172;
                          else
                            LOBYTE(v153) = v172;
                          v158 = -(unsigned __int16)v172 >> 8;
                          if ((v172 & 0x8000u) == 0)
                            LOBYTE(v158) = BYTE1(v172);
                        }
                        v80 = v481;
                        v77 = v479;
                        v182 = v146 >> 8;
                        v183 = v152 >> 8;
                        v184 = v169 & 3;
                        v185 = v169 & v482;
                        v186 = v156 & v170;
                        v187 = v155 & v170;
                        v188 = v166 & v169;
                        v189 = v167 & v169;
                        v190 = v164 & v169;
                        v191 = v165 & v169;
                        v192 = v158 & v171;
                        v193 = v153 & v171;
                        v194 = (v149 & v170);
                        v196 = (v154 & v170) != 0 || (v170 & 3u) < v194;
                        if (v186)
                          v196 = 1;
                        if ((v170 & v482) < v187)
                          v196 = 1;
                        if (v188)
                          v196 = 1;
                        if (v184 < v189)
                          v196 = 1;
                        if (v190)
                          v196 = 1;
                        if (v185 < v191)
                          v196 = 1;
                        if ((v474 - v183) | (v182 - v163))
                        {
                          v197 = v196 || v192 != 0 || v193 != 0;
                          v78 = v424;
                          v100 = v422;
                          v99 = v446;
                          v118 = v444;
                          v119 = v441;
                          v121 = v437;
                          v130 = v435;
                          v135 = v449;
                        }
                        else
                        {
                          v202 = sub_1B68C53CC((__int16 *)v142, (__int16 *)v143, v393, v405, v449, v68, (int32x2_t)v69);
                          v135 = v449;
                          v197 = v202;
                          v78 = v424;
                          v100 = v422;
                          v99 = v446;
                          v118 = v444;
                          v119 = v441;
                          v121 = v437;
                          v130 = v435;
                        }
                        v137 = v433;
                        if (!v135 && !v197 && v481 == 2)
                        {
                          v204 = *(_BYTE *)(v143 + 8) & 1;
                          v205 = *(_BYTE *)(v143 + 9) & 1;
                          v206 = v428 & 1;
                          v207 = v429 & 1;
                          v208 = v474 == v163 && v206 == v204 && v207 == v205 && v182 == v183
                              || v206 == v205 && v207 == v204 && v474 == v183 && v182 == v163;
                          LOBYTE(v197) = !v208;
                        }
                      }
                    }
LABEL_398:
                    *((_BYTE *)v119 + v136) = v197 | v135;
                    goto LABEL_399;
                  }
                  v141 = ((2 * (v389 & 1)) & 3 | (4 * v431)) + (v136 >> 1);
                  if ((v139 & 0x80000000) == 0)
                    goto LABEL_271;
                }
LABEL_399:
                v139 *= 2;
                ++v136;
              }
              while (v136 != 4);
              v132 = 1;
              v5 = v387;
              v72 = v452;
              v131 = v411;
LABEL_253:
              v135 = 0;
              v121 |= v132;
              *(_BYTE *)v119 |= (32 * v132) ^ 0x20;
              v119 = (_OWORD *)((char *)v119 + 4);
              v130 *= 16;
              ++v131;
            }
            v117 = v477 + 1;
            v3 = a1;
            if (v477 >= v100)
            {
              v213 = v409 != 2 || v402 == v408;
              v410 = v213;
              v400 = v412 - v407;
              *(_BYTE *)v403 |= ((_BYTE)v121 << 6) ^ 0x40;
              v398 = (_OWORD *)(v403 + 36);
              v390 = v391 & 0xFFFE;
              v216 = v389 == 1 && v80 == 2 || v470 == 0;
              v392 = v216;
              if (v388 || v405)
                v217 = 3;
              else
                v217 = 4;
              v384 = v217;
              v218 = 0;
              v219 = 4;
              v220 = (_OWORD *)(v403 + 16);
              v221 = v457;
              while (1)
              {
                v464 = v218;
                if (v218)
                {
                  v219 = 1;
                  if (*(_BYTE *)(*(_QWORD *)(v3 + 136) + v77))
                  {
                    v68 = (int32x2_t)33686018;
                    v222 = (_OWORD *)(v403 + 36);
                    *v398 = xmmword_1B6917DD0;
                  }
                  else
                  {
                    v222 = (_OWORD *)(v403 + 36);
                    *(_QWORD *)v398 = 0x202020202020202;
                    *(_QWORD *)(v403 + 44) = 0x202020202020202;
                  }
                  v456 = v396 - v383 + 1;
                  v221 = v400;
                  v406 = v493;
                  v220 = v222;
                }
                v223 = *(_QWORD *)(v468 + 8 * v456);
                if (v492)
                {
                  if ((v492 & 0xFFF) == 0xFFF)
                    v219 = 1;
                  v423 = -1;
                  v224 = (v492 & 0xFFF) == 4095;
                }
                else if (v390 == 256)
                {
                  v423 = 0;
                  v224 = 0;
                  v68 = (int32x2_t)0x2020202002020202;
                  *v220 = xmmword_1B6917DE0;
                  v219 = 1;
                }
                else
                {
                  v224 = 0;
                  v423 = -1;
                }
                if (!v410)
                {
                  v454 = 0;
LABEL_449:
                  v225 = 0;
                  v233 = 0;
                  *(_BYTE *)v220 = 32;
LABEL_450:
                  v231 = v492 << 16;
                  goto LABEL_455;
                }
                if (v392)
                  goto LABEL_449;
                v225 = 0;
                if (v5 <= v223 && v223 <= v395)
                {
                  *(_DWORD *)v220 = 16843009 * v384;
                  v233 = 1;
                  goto LABEL_450;
                }
                v227 = bswap32(*(_DWORD *)(v386 + 4 * (int)v221));
                if ((v227 & 0x33000000) != 0)
                  v228 = 855638220;
                else
                  v228 = 0;
                if ((v227 & 0x330000) != 0)
                  v229 = 3342387;
                else
                  v229 = 0;
                v230 = v229 | v228 | v227;
                if (*(_BYTE *)(*(_QWORD *)(v3 + 136) + (int)v221))
                  v227 = v230;
                v231 = (v492 << 16) | (v227 << 28);
                v232 = v388;
LABEL_451:
                if (v225 < v219)
                  break;
                *v421 |= ((_BYTE)v224 << 6) ^ 0x40;
                v218 = v464 + 1;
                if (v464 >= v454)
                  goto LABEL_197;
              }
              if ((v225 & v466) != 0)
              {
                v233 = 0;
LABEL_454:
                *(_BYTE *)v220 = 32;
                goto LABEL_455;
              }
              v233 = v423 | (v231 >> 28) | (v225 == 0);
              if (!v233)
                goto LABEL_454;
              v233 = 1;
              if (v231 >> 28 == 15)
                goto LABEL_455;
              v234 = 0;
              v487 = v404 + (v225 + v470) * v493;
              v235 = v406;
              if (v225)
                v235 = v493;
              v484 = v235;
              v236 = v231;
              v458 = v221;
              v445 = v219;
              v447 = v220;
              v442 = v224;
              v438 = v225;
              v436 = v231;
              v450 = v232;
              while (2)
              {
                if ((v236 & 0x80000000) == 0)
                {
                  v237 = *(__int16 **)(v495 + 8 * (v487 + v234));
                  v238 = *(__int16 **)(v495 + 8 * (v487 + v234 - v484));
                  if (v237 == v238)
                  {
                    LOBYTE(v271) = 0;
                    goto LABEL_599;
                  }
                  v240 = *v237 - *v238;
                  LOBYTE(v239) = v240;
                  LOWORD(v241) = v237[1];
                  v242 = v238[1];
                  v243 = (__int16)(v241 - v242);
                  v244 = v237[2];
                  v245 = v238[2];
                  v246 = (__int16)(v244 - v245);
                  v247 = v237[3];
                  v248 = v238[3];
                  v249 = (__int16)(v247 - v248);
                  v250 = (unsigned __int16)v237[4];
                  v251 = v238[4];
                  v252 = (__int16)(v250 - v251);
                  if (v240 >= 0)
                  {
                    v253 = HIBYTE(v240);
                  }
                  else
                  {
                    v239 = -(unsigned __int16)(*v237 - *v238);
                    v253 = (unsigned __int16)-v240 >> 8;
                  }
                  v254 = (unsigned __int16)v237[6];
                  v255 = (unsigned __int16)v238[6];
                  if (v243 < 0)
                    v256 = -(unsigned __int16)(v241 - v242);
                  else
                    LOBYTE(v256) = v241 - v242;
                  v472 = v256;
                  if (v243 >= 0)
                    v257 = (unsigned __int16)(v241 - v242) >> 8;
                  else
                    v257 = (unsigned __int16)(v242 - v241) >> 8;
                  if (v246 < 0)
                    v258 = -(unsigned __int16)(v244 - v245);
                  else
                    LOBYTE(v258) = v244 - v245;
                  if (v246 >= 0)
                    v259 = (unsigned __int16)(v244 - v245) >> 8;
                  else
                    v259 = (unsigned __int16)(v245 - v244) >> 8;
                  v260 = v249 < 0;
                  v261 = v254 - v255;
                  if (v249 < 0)
                    v262 = -(unsigned __int16)(v247 - v248);
                  else
                    LOBYTE(v262) = v247 - v248;
                  if (v260)
                    v263 = -(unsigned __int16)(v247 - v248) >> 8;
                  else
                    LOBYTE(v263) = (unsigned __int16)(v247 - v248) >> 8;
                  if (v252 < 0)
                    v264 = -(unsigned __int16)(v250 - v251);
                  else
                    LOBYTE(v264) = v250 - v251;
                  if (v252 >= 0)
                    v265 = (unsigned __int16)(v250 - v251) >> 8;
                  else
                    v265 = (unsigned __int16)(v251 - v250) >> 8;
                  if (v261 < 0)
                    v266 = -(unsigned __int16)(v254 - v255);
                  else
                    LOBYTE(v266) = v254 - v255;
                  if (v261 >= 0)
                    v267 = (unsigned __int16)(v254 - v255) >> 8;
                  else
                    v267 = (unsigned __int16)(v255 - v254) >> 8;
                  if ((v489 & 2) == 0)
                  {
                    v413 = v237[3];
                    v414 = v263;
                    v416 = v262;
                    v461 = (unsigned __int16)v238[4];
                    v459 = v238[4];
                    v268 = (v237[4] >> 4) & 2 | (v250 >> 13);
                    if (v268)
                      v269 = 0;
                    else
                      v269 = -1;
                    if (v268 == 1)
                      v270 = -1;
                    else
                      v270 = v269;
                    if (v268 == 2)
                    {
                      v270 = 0;
                      v425 = 0;
                      v269 = 255;
                      v427 = -1;
                    }
                    else
                    {
                      v425 = v269;
                      v427 = v270;
                    }
                    v274 = v257;
                    v275 = v253;
                    v276 = *v237;
                    v277 = *v238;
                    v478 = v254 >> 8;
                    v475 = v255 >> 8;
                    v432 = v269 & 3;
                    v420 = v237[4];
                    v418 = HIBYTE(v237[4]);
                    v434 = v269 & v482;
                    if (v237[6] == v238[6])
                    {
                      v72 = v452;
                      v278 = v481;
                      v77 = v479;
                      v221 = v458;
                      v232 = v450;
                      v279 = v238[4];
                      v280 = v237[6];
                      v281 = v238[6];
                      v282 = v472;
                      v283 = v425;
                      v284 = v259;
                      LOBYTE(v285) = v416;
                      v286 = v414;
                      LOBYTE(v287) = v266;
                    }
                    else
                    {
                      v264 = v250 - (bswap32(v461) >> 16);
                      LOWORD(v239) = v276 - v245;
                      v288 = (__int16)(v276 - v245);
                      v289 = v241 - v248;
                      v290 = (__int16)(v241 - v248);
                      LOWORD(v258) = v244 - v277;
                      v291 = (__int16)(v244 - v277);
                      v292 = v413 - v242;
                      v293 = (__int16)(v413 - v242);
                      v294 = v254 - (bswap32(v255) >> 16);
                      v295 = (__int16)v294;
                      v296 = -(unsigned __int16)v239 >> 8;
                      if (v288 >= 0)
                      {
                        v275 = BYTE1(v239);
                      }
                      else
                      {
                        v239 = -(unsigned __int16)v239;
                        v275 = v296;
                      }
                      if (v290 < 0)
                        v241 = -(unsigned __int16)(v241 - v248);
                      else
                        LOBYTE(v241) = v241 - v248;
                      if (v290 >= 0)
                        v274 = HIBYTE(v289);
                      else
                        v274 = (unsigned __int16)-v289 >> 8;
                      v297 = -(unsigned __int16)v258 >> 8;
                      if (v291 >= 0)
                      {
                        v298 = BYTE1(v258);
                      }
                      else
                      {
                        v258 = -(unsigned __int16)v258;
                        v298 = v297;
                      }
                      v286 = HIBYTE(v292);
                      if (v293 < 0)
                        v285 = -v292;
                      else
                        LOBYTE(v285) = v292;
                      if (v293 < 0)
                        v286 = (unsigned __int16)-v292 >> 8;
                      v299 = -(unsigned __int16)v264 >> 8;
                      if ((v264 & 0x8000u) == 0)
                      {
                        v265 = BYTE1(v264);
                      }
                      else
                      {
                        v264 = -(unsigned __int16)v264;
                        v265 = v299;
                      }
                      v284 = v298;
                      v300 = BYTE1(v294);
                      if ((v294 & 0x8000u) != 0)
                        v287 = -(unsigned __int16)v294;
                      else
                        LOBYTE(v287) = v294;
                      v301 = -(unsigned __int16)v294 >> 8;
                      if (v295 >= 0)
                        v267 = v300;
                      else
                        v267 = v301;
                      v282 = v241;
                      v72 = v452;
                      v278 = v481;
                      v77 = v479;
                      v221 = v458;
                      v232 = v450;
                      v279 = v238[4];
                      v280 = v237[6];
                      v281 = v238[6];
                      v283 = v425;
                    }
                    v302 = v275 & v270;
                    v303 = v274 & v270;
                    v304 = v282 & v270;
                    v305 = v284 & v269;
                    v306 = v258 & v269;
                    v307 = v286 & v269;
                    v308 = v285 & v269;
                    v309 = v264 & v283;
                    v310 = v267 & v427;
                    v311 = (v239 & v270);
                    if (v302)
                      v312 = 0;
                    else
                      v312 = (v270 & 3u) >= v311;
                    v313 = !v312;
                    if (v303)
                      v313 = 1;
                    if ((v270 & v482) < v304)
                      v313 = 1;
                    if (v305)
                      v313 = 1;
                    if (v432 < v306)
                      v313 = 1;
                    if (v307)
                      v313 = 1;
                    if (v434 < v308)
                      v313 = 1;
                    if ((v280 - v475) | (v478 - v281))
                    {
                      v271 = v313 & 1 | ((v265 & v283) != 0
                                      || v309 != 0
                                      || v310 != 0
                                      || (v287 & v427) != 0);
                    }
                    else
                    {
                      v314 = v72;
                      v271 = sub_1B68C53CC(v237, v238, v393, v405, v232, v68, (int32x2_t)v69);
                      v72 = v314;
                      v279 = v459;
                    }
                    if (!v271 && v278 == 2)
                    {
                      v219 = v445;
                      v220 = v447;
                      v224 = v442;
                      v225 = v438;
                      v231 = v436;
                      if (!v232)
                      {
                        v315 = v279 & 1;
                        v316 = (v461 >> 8) & 1;
                        v317 = v420 & 1;
                        v318 = v418 & 1;
                        v319 = v280 == v281 && v317 == v315 && v318 == v316 && v478 == v475
                            || v318 == v315 && v317 == v316 && v280 == v475 && v478 == v281;
                        LOBYTE(v271) = !v319;
                      }
                      goto LABEL_599;
                    }
                    v219 = v445;
                    v220 = v447;
LABEL_585:
                    v224 = v442;
                    v225 = v438;
                    v231 = v436;
                    goto LABEL_599;
                  }
                  LOBYTE(v271) = 1;
                  v220 = v447;
                  LOBYTE(v232) = v450;
                  if (v253 || v239 > 3u)
                  {
                    v72 = v452;
                    v77 = v479;
                    v221 = v458;
                    v219 = v445;
                    goto LABEL_585;
                  }
                  v72 = v452;
                  v77 = v479;
                  v221 = v458;
                  v219 = v445;
                  v224 = v442;
                  v225 = v438;
                  v231 = v436;
                  if (!v257)
                  {
                    v272 = !v267 && v482 >= v472;
                    v273 = !v272;
                    v271 = (_BYTE)v266 || v273;
                    if (v271 != 1 && v481 == 2 && !v450)
                      LOBYTE(v271) = (v237[4] ^ v251) & 1;
                  }
LABEL_599:
                  *((_BYTE *)v220 + v234) = v271 | v232;
                }
                v236 *= 2;
                if (++v234 == 4)
                {
                  v233 = 1;
                  v3 = a1;
                  v5 = v387;
LABEL_455:
                  v232 = 0;
                  v224 |= v233;
                  *(_BYTE *)v220 |= (32 * v233) ^ 0x20;
                  v220 = (_OWORD *)((char *)v220 + 4);
                  v231 *= 16;
                  ++v225;
                  goto LABEL_451;
                }
                continue;
              }
            }
          }
        }
        if (*(_BYTE *)(*(_QWORD *)(v3 + 136) + v77))
          v109 = 0;
        else
          v109 = 50529027;
        *(_DWORD *)(v403 + 8) = 50529027;
        *(_DWORD *)(v403 + 12) = v109;
        *(_DWORD *)(v403 + 16) = 50529027;
        *(_DWORD *)(v403 + 20) = v109;
        *(_DWORD *)(v403 + 24) = 50529027;
        *(_DWORD *)(v403 + 28) = v109;
        *(_DWORD *)(v403 + 36) = 50529027;
        v110 = 16843009 * v75;
        *(_DWORD *)v403 = v110;
        *(_DWORD *)(v403 + 4) = v109;
        if (v415)
          *(_DWORD *)(v403 + 32) = v110;
        if (v388 || v405)
          v111 = 3;
        else
          v111 = 4;
        if (v389 <= 1 && v80 == 2 || !v389)
        {
          *(_DWORD *)v421 = 538976288;
        }
        else
        {
          v112 = 16843009 * v111;
          *(_DWORD *)v421 = v112;
          *(_DWORD *)(v403 + 36) = v112;
        }
        if (v409 == 2)
        {
          *(_BYTE *)v403 = v75 | (32 * (v106 != v104));
          *(_BYTE *)(v403 + 16) = v111 | (32 * (v402 != v104));
        }
LABEL_197:
        v403 += 48;
        v396 += 2;
        v74 = v394 + 1;
        v75 = 4;
        if (v394 + 1 != v407)
          continue;
        break;
      }
      ++v389;
      v73 = v403;
      if (v389 != v380)
        continue;
      break;
    }
LABEL_686:
    v365 = *(pthread_mutex_t **)(v3 + 160);
    if (v365)
      pthread_mutex_lock(v365);
    if (v374)
    {
      v360 = (void *)(*(_QWORD *)(v3 + 168) + v376);
      v361 = v377 + ~(_DWORD)v376 + 1;
      v362 = 20;
LABEL_682:
      memset(v360, v362, v361);
    }
LABEL_683:
    v363 = *(pthread_mutex_t **)(v3 + 160);
    if (v363)
      pthread_mutex_unlock(v363);
  }
  v364 = sub_1B68FA0D8((uint64_t *)v3, a3, 0, v71, v389, v380, *(double *)&v68, v69);
  if (!(_DWORD)v364)
    goto LABEL_686;
  v366 = v364;
LABEL_695:
  v368 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v368)
  {
    v369 = *(_BYTE **)(v3 + 168);
    if (*v369 == 30)
    {
      v370 = 0;
      v371 = v369 + 1;
      while (v368 - 1 != v370)
      {
        v372 = v371[v370++];
        if (v372 != 30)
        {
          if (v370 >= v368)
            break;
          goto LABEL_701;
        }
      }
    }
    else
    {
LABEL_701:
      v366 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    v368 = 0;
  }
  bzero(*(void **)(v3 + 32), 4 * v368);
  return v366;
}

uint64_t sub_1B68C7904(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5, double a6, int8x8_t a7)
{
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t *v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  pthread_mutex_t *v18;
  pthread_mutex_t *v19;
  uint64_t v21;

  v7 = *(_DWORD *)(result + 12);
  v8 = a5 + a4 - 1;
  v9 = v8 / v7;
  *(_QWORD *)(result + 80) = a2;
  v10 = *(_DWORD *)(a2 + 100) >> 4;
  *(_DWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 20) = v10 * v7;
  v11 = a4 / v7;
  if (a4 / v7 < v8 / v7 + 1)
  {
    v12 = (uint64_t *)result;
    v21 = a4;
    v13 = a4 % v7;
    v14 = a5 + a4 - v9 * v7;
    v15 = a4 / v7;
    do
    {
      if (v15 == v11)
        v16 = v13;
      else
        v16 = 0;
      if (v15 == v9)
        v17 = v14;
      else
        v17 = v7;
      sub_1B68FA0D8(v12, a3, v16, v17, v15, v15 + 1, a6, a7);
      v18 = (pthread_mutex_t *)v12[20];
      if (v18)
        pthread_mutex_lock(v18);
      if (a5)
        memset((void *)(v12[21] + v21), 20, (a5 - 1) + 1);
      v19 = (pthread_mutex_t *)v12[20];
      if (v19)
        pthread_mutex_unlock(v19);
      sub_1B68F9630((uint64_t)v12, v16, v17, v15, v15 + 1);
      result = sub_1B68F9AE8((uint64_t)v12, v16, v17, v15, v15 + 1);
    }
    while (v15++ != v9);
  }
  return result;
}

void sub_1B68C7A4C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  pthread_mutex_t *v5;

  v2 = *(void **)(a1 + 160);
  if (v2)
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 160));
  free(v2);
  *(_QWORD *)(a1 + 160) = 0;
  v3 = *(_QWORD *)(a1 + 168);
  if (v3)
    MEMORY[0x1BCC9811C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 168) = 0;
  free(*(void **)a1);
  free(*(void **)(a1 + 32));
  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
    free((void *)(v4 - *(int *)(v4 - 4)));
  free(*(void **)(a1 + 112));
  free(*(void **)(a1 + 120));
  free(*(void **)(a1 + 128));
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 144));
  free(*(void **)(a1 + 72));
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 224));
  v5 = *(pthread_mutex_t **)(a1 + 64);
  if (v5)
    pthread_mutex_destroy(v5);
  free(v5);
}

void sub_1B68C7B20()
{
  JUMPOUT(0x1BCC9814CLL);
}

BOOL sub_1B68C7B34(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  float v22;
  double v23;
  _BOOL8 v24;
  float v25;
  double v26;
  int v27;
  int v28;

  v3 = *a2;
  v2 = a2[1];
  v4 = *(_DWORD *)(*a2 + 4632);
  if (v2)
  {
    v5 = 0;
    v6 = a2[1];
    while (1)
    {
      v7 = v5 + 1;
      v8 = *(_DWORD *)(v6 + 5004);
      if ((unint64_t)(v5 + 1) > 4 || v8 != 0)
        break;
      v6 = a2[v5++ + 2];
      if (!v6)
      {
        LODWORD(v5) = v7;
        goto LABEL_12;
      }
    }
    if (!(_DWORD)v5)
      goto LABEL_20;
LABEL_12:
    v10 = 0;
    v11 = a2 + 1;
    v12 = v5;
    do
    {
      v13 = *v11++;
      v10 += *(_DWORD *)(v13 + 4632);
      --v12;
    }
    while (v12);
    v14 = 0;
    v15 = a2 + 1;
    v16 = v5;
    v17 = (v10 + (v5 >> 1)) / v5;
    do
    {
      v18 = *v15++;
      v19 = *(_DWORD *)(v18 + 4632) - v17;
      if (v19 < 0)
        v19 = -v19;
      v14 += v19;
      --v16;
    }
    while (v16);
    if (v14 <= (_DWORD)v5 << 6)
      LODWORD(v5) = 128;
    else
      LODWORD(v5) = 2 * ((v14 + (v5 >> 1)) / v5);
  }
  else
  {
    LODWORD(v5) = 0;
LABEL_20:
    v17 = 0;
  }
  v20 = (v4 >> 7);
  *(_BYTE *)(v3 + 5008) = v4 >> 7;
  v21 = *(_DWORD *)(a1 + 12);
  if (!v21)
  {
    v23 = *(float *)(v3 + 5012);
    if (v23 >= 0.2)
      v24 = 0;
    else
      v24 = v20 > 3 || *(unsigned __int8 *)(v2 + 5008) > 3u;
    goto LABEL_52;
  }
  if (v21 != 1)
  {
    if (v21 != 2)
    {
      v24 = 0;
      goto LABEL_53;
    }
    v22 = *(float *)(v3 + 5012);
    v23 = v22;
    if (v22 >= 0.45)
      goto LABEL_29;
    if (v20 <= 3 && *(unsigned __int8 *)(v2 + 5008) <= 3u)
    {
      v24 = 0;
      if (v22 >= 0.25 || v17 <= 0xFA)
        goto LABEL_51;
    }
    else if (v17 < 0xFB)
    {
LABEL_29:
      v24 = 0;
      goto LABEL_51;
    }
    v28 = v4 - v17;
    if ((int)(v4 - v17) < 0)
      v28 = v17 - v4;
    v24 = v28 >= (int)v5;
LABEL_51:
    if (v23 < 0.8)
    {
LABEL_52:
      v27 = v23 >= 0.6;
      goto LABEL_54;
    }
LABEL_53:
    v27 = 2;
    goto LABEL_54;
  }
  v25 = *(float *)(v3 + 5012);
  if (v25 >= 0.25)
    v24 = 0;
  else
    v24 = v20 > 3 || *(unsigned __int8 *)(v2 + 5008) > 3u;
  v26 = v25;
  if (v26 >= 0.6)
  {
    if (v26 < 0.8)
      v27 = 1;
    else
      v27 = 2;
  }
  else
  {
    v27 = 0;
  }
LABEL_54:
  *(_DWORD *)(a1 + 12) = v27;
  *(_DWORD *)(v3 + 5004) = v24;
  return v24;
}

void sub_1B68C7D80()
{
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B68C7D94(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  double v30;
  uint64_t v31;
  float v32;
  int v33;
  _BOOL4 v35;
  int v36;
  _BOOL4 v38;
  int v39;
  double v40;
  int v42;

  v2 = *a2;
  v3 = a2[1];
  v4 = *(_DWORD *)(*a2 + 4632);
  v5 = *(unsigned __int16 *)(*a2 + 4832);
  if (v3)
  {
    v6 = 0;
    v7 = a2[1];
    while (1)
    {
      v8 = v6 + 1;
      v9 = *(_DWORD *)(v7 + 5004);
      if ((unint64_t)(v6 + 1) > 4 || v9 != 0)
        break;
      v7 = a2[v6++ + 2];
      if (!v7)
      {
        LODWORD(v6) = v8;
        goto LABEL_12;
      }
    }
    if (!(_DWORD)v6)
    {
      v11 = 0;
      goto LABEL_22;
    }
LABEL_12:
    v12 = 0;
    v13 = a2 + 1;
    v14 = v6;
    do
    {
      v15 = *v13++;
      v12 += *(_DWORD *)(v15 + 4632);
      --v14;
    }
    while (v14);
    v16 = 0;
    v17 = a2 + 1;
    v18 = v6;
    v11 = (v12 + (v6 >> 1)) / v6;
    do
    {
      v19 = *v17++;
      v20 = *(_DWORD *)(v19 + 4632) - v11;
      if (v20 < 0)
        v20 = -v20;
      v16 += v20;
      --v18;
    }
    while (v18);
    if (v16 <= (_DWORD)v6 << 6)
      LODWORD(v6) = 128;
    else
      LODWORD(v6) = 2 * ((v16 + (v6 >> 1)) / v6);
  }
  else
  {
    v11 = 0;
    LODWORD(v6) = 0;
  }
LABEL_22:
  v21 = *(_DWORD *)(v2 + 4808);
  if (v21)
  {
    v22 = 0;
    v23 = *(unsigned __int16 **)(v2 + 4624);
    v24 = *(_QWORD *)(v2 + 4816) + 8;
    v25 = *(unsigned int *)(v2 + 4808);
    do
    {
      v26 = *v23++;
      if (*(unsigned __int16 *)(v24 + 4) > v26)
        ++v22;
      v24 += 36;
      --v25;
    }
    while (v25);
    v21 *= 85;
  }
  else
  {
    v22 = 0;
  }
  v27 = v5 - v4;
  *(_DWORD *)(v2 + 4840) = v22;
  v28 = (v4 >> 7);
  *(_BYTE *)(v2 + 5008) = v4 >> 7;
  v29 = *(_DWORD *)(a1 + 12);
  if (!v29)
  {
    if (v28 <= 3 && *(unsigned __int8 *)(v3 + 5008) < 4u)
    {
      v30 = *(float *)(v2 + 5012);
      if (v30 < 0.2)
      {
        v33 = v4 - v11;
        if ((int)(v4 - v11) < 0)
          v33 = v11 - v4;
        v35 = v33 >= (int)v6 || v27 > 750;
        LODWORD(v31) = v4 >= 251 && v35;
        if (v11 >= 0xFB)
          v31 = v31;
        else
          v31 = 0;
        goto LABEL_88;
      }
    }
    else
    {
      v30 = *(float *)(v2 + 5012);
      if (v30 < 0.2)
      {
        v31 = v27 >= 501 && 100 * v22 > v21;
        goto LABEL_88;
      }
    }
    v31 = 0;
LABEL_88:
    v39 = v30 >= 0.6;
    goto LABEL_95;
  }
  if (v29 != 1)
  {
    if (v29 != 2)
    {
      v31 = 0;
LABEL_86:
      v39 = 2;
      goto LABEL_95;
    }
    if (v28 <= 3 && *(unsigned __int8 *)(v3 + 5008) < 4u)
    {
      v30 = *(float *)(v2 + 5012);
      if (v30 < 0.45 && (v11 > 0xFA || v4 >= 251))
      {
        v42 = v4 - v11;
        if (v42 < 0)
          v42 = -v42;
        v31 = v42 >= (int)v6 || v27 > 750;
LABEL_85:
        if (v30 >= 0.8)
          goto LABEL_86;
        goto LABEL_88;
      }
    }
    else
    {
      v30 = *(float *)(v2 + 5012);
      if (v30 < 0.45)
      {
        v31 = v27 >= 501 && 100 * v22 > v21;
        goto LABEL_85;
      }
    }
    v31 = 0;
    goto LABEL_85;
  }
  if (v28 <= 3 && *(unsigned __int8 *)(v3 + 5008) < 4u)
  {
    v32 = *(float *)(v2 + 5012);
    if (v32 < 0.25)
    {
      v36 = v4 - v11;
      if ((int)(v4 - v11) < 0)
        v36 = v11 - v4;
      v38 = v36 >= (int)v6 || v27 > 750;
      LODWORD(v31) = v4 >= 251 && v38;
      if (v11 >= 0xFB)
        v31 = v31;
      else
        v31 = 0;
      goto LABEL_90;
    }
  }
  else
  {
    v32 = *(float *)(v2 + 5012);
    if (v32 < 0.25)
    {
      v31 = v27 >= 501 && 100 * v22 > v21;
      goto LABEL_90;
    }
  }
  v31 = 0;
LABEL_90:
  v40 = v32;
  if (v40 >= 0.6)
  {
    if (v40 < 0.8)
      v39 = 1;
    else
      v39 = 2;
  }
  else
  {
    v39 = 0;
  }
LABEL_95:
  *(_DWORD *)(a1 + 12) = v39;
  *(_DWORD *)(v2 + 5004) = v31;
  return v31;
}

_BYTE *sub_1B68C80FC(_BYTE *result, uint64_t a2, char *a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  char v23;

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = &a3[a5 * (uint64_t)a4];
    v9 = &a3[5 * a5 * a4 / 4];
    v10 = (_BYTE *)(a2 + 1);
    do
    {
      v11 = a3;
      v12 = result;
      v13 = a4;
      if (a4 >= 1)
      {
        do
        {
          v14 = *v11++;
          *v12++ = v14;
          --v13;
        }
        while (v13);
      }
      ++v7;
      result += a6;
      a3 += a4;
    }
    while (v7 != a5);
    if (a5 >= 2)
    {
      v15 = 0;
      if (a4 >= 0)
        v16 = a4;
      else
        v16 = a4 + 1;
      v17 = (v16 >> 1);
      v18 = (uint64_t)v16 >> 1;
      do
      {
        if (a4 >= 2)
        {
          v19 = v8;
          v20 = v9;
          result = v10;
          v21 = v17;
          do
          {
            v22 = *v19++;
            *(result - 1) = v22;
            v23 = *v20++;
            *result = v23;
            result += 2;
            --v21;
          }
          while (v21);
        }
        ++v15;
        v10 += a7;
        v9 += v18;
        v8 += v18;
      }
      while (v15 != a5 >> 1);
    }
  }
  return result;
}

_BYTE *sub_1B68C81E4(_BYTE *result, char *a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  uint64_t v21;
  char v22;

  if (a5 >= 1)
  {
    v7 = 0;
    v8 = &result[a5 * (uint64_t)a4];
    v9 = &result[5 * a5 * a4 / 4];
    v10 = (char *)(a3 + 1);
    do
    {
      v11 = a2;
      v12 = result;
      v13 = a4;
      if (a4 >= 1)
      {
        do
        {
          v14 = *v11++;
          *v12++ = v14;
          --v13;
        }
        while (v13);
      }
      ++v7;
      result += a4;
      a2 += a6;
    }
    while (v7 != a5);
    if (a5 >= 2)
    {
      v15 = 0;
      if (a4 >= 0)
        v16 = a4;
      else
        v16 = a4 + 1;
      v17 = (v16 >> 1);
      v18 = (uint64_t)v16 >> 1;
      do
      {
        if (a4 >= 2)
        {
          v19 = v10;
          v20 = v8;
          result = v9;
          v21 = v17;
          do
          {
            *v20++ = *(v19 - 1);
            v22 = *v19;
            v19 += 2;
            *result++ = v22;
            --v21;
          }
          while (v21);
        }
        ++v15;
        v9 += v18;
        v8 += v18;
        v10 += a7;
      }
      while (v15 != a5 >> 1);
    }
  }
  return result;
}

uint64_t sub_1B68C82CC(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __int16 *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  __int16 *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v52;
  int *v53;
  unsigned int v54;
  int v55;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[10];

  v61[8] = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 22368);
  v2 = *(_DWORD *)(a1 + 22372);
  v4 = *(_DWORD *)(a1 + 22376);
  v3 = *(_DWORD *)(a1 + 22380);
  v5 = *(_BYTE **)(a1 + 368);
  v6 = *(char **)(a1 + 288);
  v7 = *(_QWORD *)(a1 + 352);
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v53 = (int *)(a1 + 22304);
  sub_1B68C81E4(v5, *(char **)(a1 + 22328), *(_QWORD *)(a1 + 22336), v1, v2, *(_DWORD *)(a1 + 22304), *(_DWORD *)(a1 + 22308));
  v8 = 0;
  v52 = v6;
  v9 = v6;
  do
  {
    v55 = v8;
    switch(v8)
    {
      case 2:
        v10 = v53[16];
        v12 = v53[17];
        v5 = (_BYTE *)(*(_QWORD *)(a1 + 368) + ((5 * v10 * v12) >> 2));
        v11 = v53[18];
        v13 = v53[19];
        v14 = (5 * v11 * v13) >> 2;
        goto LABEL_9;
      case 1:
        v10 = v53[16];
        v12 = v53[17];
        v5 = (_BYTE *)(*(_QWORD *)(a1 + 368) + v12 * v10);
        v11 = v53[18];
        v13 = v53[19];
        v14 = v13 * v11;
LABEL_9:
        v9 = &v52[v14];
        goto LABEL_11;
      case 0:
        v54 = v3;
        v10 = v53[16];
        v11 = v53[18];
        if (!v4)
          goto LABEL_38;
        goto LABEL_12;
    }
    v10 = v53[16];
    v12 = v53[17];
    v11 = v53[18];
    v13 = v53[19];
LABEL_11:
    v1 = v10 >> 1;
    v2 = v12 >> 1;
    v4 = v11 >> 1;
    v54 = v13 >> 1;
    if (!(v11 >> 1))
      goto LABEL_38;
LABEL_12:
    v15 = 0;
    v16 = 0;
    v17 = (v10 << 16) / v11;
    do
    {
      v18 = v15 >> 16;
      LODWORD(v19) = (v15 >> 16) - 3;
      if (v15 >= 196608)
        v19 = v19;
      else
        v19 = 0;
      v20 = &v5[v19];
      LODWORD(v21) = v18 - 2;
      if (v15 >= 0x20000)
        v21 = v21;
      else
        v21 = 0;
      v61[0] = v20;
      v61[1] = &v5[v21];
      LODWORD(v21) = v18 - 1;
      if (v15 >= 0x10000)
        v21 = v21;
      else
        v21 = 0;
      v61[2] = &v5[v21];
      v61[3] = &v5[v18];
      v22 = (int)(v18 + 1);
      if (v18 > v1 - 2)
        v22 = (v1 - 1);
      v23 = &v5[v22];
      v24 = (int)(v18 + 2);
      if (v18 > v1 - 3)
        v24 = (v1 - 1);
      v61[4] = v23;
      v61[5] = &v5[v24];
      v25 = (int)(v18 + 3);
      if (v18 > v1 - 4)
        v25 = (v1 - 1);
      v26 = &v5[v25];
      v27 = v18 > v1 - 5;
      v28 = (int)(v18 + 4);
      if (v27)
        v28 = (v1 - 1);
      v61[6] = v26;
      v61[7] = &v5[v28];
      if (v2)
      {
        v29 = 0;
        v30 = (__int16 *)(a1 + 16 * ((unsigned __int16)v15 >> 12) + 512);
        do
        {
          v31 = (v1 * v29);
          v32 = ((v20[v31] >> 6) | (4 * v20[v31])) * *v30;
          v33 = 1;
          v34 = 1;
          do
          {
            v35 = *(unsigned __int8 *)(v61[v33] + v31);
            v32 += ((v35 >> 6) | (4 * v35)) * v30[v34++];
            ++v33;
          }
          while (v33 != 8);
          v36 = (v32 + 64) >> 7;
          if (v36 >= 1023)
            v36 = 1023;
          *(_WORD *)(v7 + 2 * (v16 + v4 * v29++)) = v36 & ~(unsigned __int16)(v36 >> 31);
        }
        while (v29 != v2);
      }
      v15 += v17;
      ++v16;
    }
    while (v16 != v4);
LABEL_38:
    v3 = v54;
    if (v54)
    {
      v37 = 0;
      v38 = 0;
      v39 = (v53[17] << 16) / v53[19];
      do
      {
        v40 = v37 >> 16;
        v41 = ((v37 >> 16) - 1) * v4;
        if (v37 < 0x10000)
          v41 = 0;
        *(_QWORD *)&v57 = v7 + 2 * v41;
        *((_QWORD *)&v57 + 1) = v7 + 2 * v40 * v4;
        if (v40 <= v2 - 2)
          v42 = v40 + 1;
        else
          v42 = v2 - 1;
        v43 = v7 + 2 * v42 * v4;
        v27 = v40 > v2 - 3;
        v44 = v40 + 2;
        if (v27)
          v44 = v2 - 1;
        *(_QWORD *)&v58 = v43;
        *((_QWORD *)&v58 + 1) = v7 + 2 * v44 * v4;
        if (v4)
        {
          v45 = 0;
          v46 = (__int16 *)(a1 + 16 * ((unsigned __int16)v37 >> 12) + 768);
          do
          {
            v47 = *(__int16 *)(v57 + 2 * v45) * *v46;
            v48 = 8;
            v49 = 1;
            do
            {
              v47 += *(__int16 *)(*(_QWORD *)((char *)&v57 + v48) + 2 * v45) * v46[v49++];
              v48 += 8;
            }
            while (v48 != 32);
            v50 = (v47 + 64) >> 9;
            if (v50 >= 255)
              v50 = 255;
            v9[v38 * v4 + v45++] = v50 & ~(v50 >> 31);
          }
          while (v45 != v4);
        }
        v37 += v39;
        ++v38;
      }
      while (v38 != v54);
    }
    v8 = v55 + 1;
  }
  while (v55 != 2);
  sub_1B68C80FC(*(_BYTE **)(a1 + 22344), *(_QWORD *)(a1 + 22352), v52, v53[18], v53[19], v53[2], v53[3]);
  return 0;
}

uint64_t sub_1B68C86E8(uint64_t a1)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  __int16 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  signed int v40;
  signed int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  char *v58;
  int v59;
  int *v60;
  int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[4];
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 22368);
  v2 = *(_DWORD *)(a1 + 22372);
  v4 = *(_DWORD *)(a1 + 22376);
  v5 = *(_DWORD *)(a1 + 22380);
  v6 = *(_BYTE **)(a1 + 368);
  v7 = *(char **)(a1 + 288);
  v8 = *(_QWORD *)(a1 + 352);
  v67 = 0u;
  v68 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v9 = 1 << (*(_BYTE *)(a1 + 240) - 1);
  v60 = (int *)(a1 + 22304);
  v59 = v2;
  sub_1B68C81E4(v6, *(char **)(a1 + 22328), *(_QWORD *)(a1 + 22336), v3, v2, *(_DWORD *)(a1 + 22304), *(_DWORD *)(a1 + 22308));
  v10 = 0;
  v58 = v7;
  v11 = v7;
  do
  {
    v61 = v10;
    switch(v10)
    {
      case 2:
        v14 = v60[16];
        v12 = v60[17];
        v6 = (_BYTE *)(*(_QWORD *)(a1 + 368) + ((5 * v14 * v12) >> 2));
        v15 = v60[18];
        v13 = v60[19];
        v16 = (5 * v15 * v13) >> 2;
        goto LABEL_9;
      case 1:
        v14 = v60[16];
        v12 = v60[17];
        v6 = (_BYTE *)(*(_QWORD *)(a1 + 368) + v12 * v14);
        v15 = v60[18];
        v13 = v60[19];
        v16 = v13 * v15;
LABEL_9:
        v11 = &v58[v16];
        goto LABEL_11;
      case 0:
        v12 = v60[17];
        v13 = v60[19];
        if (!v5)
          goto LABEL_36;
        goto LABEL_12;
    }
    v14 = v60[16];
    v12 = v60[17];
    v15 = v60[18];
    v13 = v60[19];
LABEL_11:
    v3 = v14 >> 1;
    v59 = v12 >> 1;
    v4 = v15 >> 1;
    v5 = v13 >> 1;
    if (!(v13 >> 1))
      goto LABEL_36;
LABEL_12:
    v17 = 0;
    v18 = 0;
    v19 = (v12 << 16) / v13;
    do
    {
      v20 = v17 >> 16;
      LODWORD(v21) = ((v17 >> 16) - 1) * v3;
      if (v17 >= 0x10000)
        v21 = v21;
      else
        v21 = 0;
      v22 = &v6[v21];
      v66[0] = v22;
      v66[1] = &v6[v20 * v3];
      if (v20 <= v59 - 2)
        v23 = v20 + 1;
      else
        v23 = v59 - 1;
      v24 = &v6[v23 * v3];
      v25 = v20 > v59 - 3;
      v26 = v20 + 2;
      if (v25)
        v26 = v59 - 1;
      v66[2] = v24;
      v66[3] = &v6[v26 * v3];
      if (v3)
      {
        v27 = 0;
        v28 = (__int16 *)(a1 + 16 * ((unsigned __int16)v17 >> 12) + 768);
        do
        {
          v29 = v22[v27] * *v28;
          v30 = 1;
          v31 = 1;
          do
          {
            v32 = v29 + *(unsigned __int8 *)(v66[v30] + v27) * v28[v31];
            if (v32 >= 0x7FFF)
              v32 = 0x7FFF;
            if (v32 <= -32768)
              v29 = -32768;
            else
              v29 = v32;
            ++v31;
            ++v30;
          }
          while (v30 != 4);
          v33 = v29 + v9;
          if (v29 + v9 >= 0x7FFF)
            v33 = 0x7FFF;
          if (v33 <= -32768)
            v33 = -32768;
          *(_WORD *)(v8 + 2 * (v18 * v3 + v27++)) = v33 >> *(_BYTE *)(a1 + 240);
        }
        while (v27 != v3);
      }
      v17 += v19;
      ++v18;
    }
    while (v18 != v5);
LABEL_36:
    if (v4)
    {
      v34 = 0;
      v35 = 0;
      v36 = (v60[16] << 16) / v60[18];
      do
      {
        v37 = v34 >> 16;
        v38 = (v34 >> 16) - 3;
        if (v34 < 196608)
          v38 = 0;
        v39 = v8 + 2 * v38;
        v40 = v37 - 2;
        if (v34 < 0x20000)
          v40 = 0;
        *(_QWORD *)&v62 = v39;
        *((_QWORD *)&v62 + 1) = v8 + 2 * v40;
        v41 = v37 - 1;
        if (v34 < 0x10000)
          v41 = 0;
        *(_QWORD *)&v63 = v8 + 2 * v41;
        *((_QWORD *)&v63 + 1) = v8 + 2 * (int)v37;
        v42 = (int)(v37 + 1);
        if (v37 > v3 - 2)
          v42 = (v3 - 1);
        v43 = v8 + 2 * v42;
        v44 = (int)(v37 + 2);
        if (v37 > v3 - 3)
          v44 = (v3 - 1);
        *(_QWORD *)&v64 = v43;
        *((_QWORD *)&v64 + 1) = v8 + 2 * v44;
        v45 = (int)(v37 + 3);
        if (v37 > v3 - 4)
          v45 = (v3 - 1);
        v46 = v8 + 2 * v45;
        v25 = v37 > v3 - 5;
        v47 = (int)(v37 + 4);
        if (v25)
          v47 = (v3 - 1);
        *(_QWORD *)&v65 = v46;
        *((_QWORD *)&v65 + 1) = v8 + 2 * v47;
        if (v5)
        {
          v48 = 0;
          v49 = (__int16 *)(a1 + 16 * ((unsigned __int16)v34 >> 12) + 512);
          do
          {
            v50 = (v3 * v48);
            v51 = *(__int16 *)(v62 + 2 * v50) * *v49;
            v52 = 8;
            v53 = 1;
            do
            {
              v54 = v51 + *(__int16 *)(*(_QWORD *)((char *)&v62 + v52) + 2 * v50) * v49[v53];
              if (v54 >= 0x7FFF)
                v54 = 0x7FFF;
              if (v54 <= -32768)
                v51 = -32768;
              else
                v51 = v54;
              ++v53;
              v52 += 8;
            }
            while (v52 != 64);
            v55 = v51 + v9;
            if (v51 + v9 >= 0x7FFF)
              v55 = 0x7FFF;
            if (v55 <= -32768)
              v55 = -32768;
            v56 = v55 >> *(_BYTE *)(a1 + 240);
            if (v56 >= 255)
              v56 = 255;
            v11[v35 + v4 * v48++] = v56 & ~(v56 >> 31);
          }
          while (v48 != v5);
        }
        v34 += v36;
        ++v35;
      }
      while (v35 != v4);
    }
    v10 = v61 + 1;
  }
  while (v61 != 2);
  sub_1B68C80FC(*(_BYTE **)(a1 + 22344), *(_QWORD *)(a1 + 22352), v58, v60[18], v60[19], v60[2], v60[3]);
  return 0;
}

uint64_t sub_1B68C8B44(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  signed int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  char *v77;
  int *v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 22288);
  v3 = *(_DWORD *)(a1 + 22296);
  v82 = *(_DWORD *)(a1 + 22300);
  v83 = *(_DWORD *)(a1 + 22292);
  v5 = *(_DWORD *)(a1 + 22368);
  v4 = *(_DWORD *)(a1 + 22372);
  v6 = *(_DWORD *)(a1 + 22376);
  v7 = *(_DWORD *)(a1 + 22380);
  v8 = *(_BYTE **)(a1 + 368);
  v9 = *(char **)(a1 + 288);
  v10 = *(_QWORD *)(a1 + 352);
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v11 = 1 << (*(_BYTE *)(a1 + 240) - 1);
  v78 = (int *)(a1 + 22288);
  v79 = v4;
  sub_1B68C81E4(v8, *(char **)(a1 + 22328), *(_QWORD *)(a1 + 22336), v5, v4, *(_DWORD *)(a1 + 22304), *(_DWORD *)(a1 + 22308));
  v12 = 0;
  v84 = v2;
  v81 = 16 * v2;
  v77 = v9;
  v13 = v9;
  do
  {
    v80 = v12;
    switch(v12)
    {
      case 0:
        v19 = 1;
        v20 = v79;
        goto LABEL_11;
      case 1:
        v15 = v78[20];
        v14 = v78[21];
        v8 = (_BYTE *)(*(_QWORD *)(a1 + 368) + v14 * v15);
        v16 = v78[22];
        v17 = v78[23];
        v18 = v17 * v16;
        break;
      case 2:
        v15 = v78[20];
        v14 = v78[21];
        v8 = (_BYTE *)(*(_QWORD *)(a1 + 368) + ((5 * v15 * v14) >> 2));
        v16 = v78[22];
        v17 = v78[23];
        v18 = (5 * v16 * v17) >> 2;
        break;
      default:
        v15 = v78[20];
        v14 = v78[21];
        v16 = v78[22];
        v17 = v78[23];
        goto LABEL_10;
    }
    v13 = &v77[v18];
LABEL_10:
    v19 = 0;
    v5 = v15 >> 1;
    v20 = v14 >> 1;
    v6 = v16 >> 1;
    v7 = v17 >> 1;
LABEL_11:
    v79 = v20;
    if (v7)
    {
      v21 = 0;
      v22 = v20 - 2;
      v23 = v20 - 1;
      v24 = v20 - 3;
      while (1)
      {
        if (v19)
        {
          v25 = v21 * v82;
          v26 = v21 * v82 / v3;
          LODWORD(v27) = (v26 - 1) * v5;
          if ((int)v26 <= 0)
            v27 = 0;
          else
            v27 = v27;
          v28 = &v8[v27];
          if (v26 <= v22)
            v29 = v26 + 1;
          else
            v29 = v23;
          *((_QWORD *)&v89 + 1) = &v8[v26 * v5];
          *(_QWORD *)&v90 = &v8[v29 * v5];
          if (v26 <= v24)
            v30 = v26 + 2;
          else
            v30 = v23;
        }
        else
        {
          v25 = ((2 * v21) | 1) * v82;
          v31 = v25 / v3;
          if (((v25 / v3) & 0x80000000) == 0)
            v32 = v25 / v3;
          else
            v32 = v31 + 1;
          v33 = v32 >> 1;
          if ((v31 & 1) != 0)
          {
            v28 = &v8[v33 * v5];
            if (v33 <= v22)
              v36 = v33 + 1;
            else
              v36 = v23;
            v35 = &v8[v36 * v5];
            *((_QWORD *)&v89 + 1) = v28;
            *(_QWORD *)&v90 = v35;
            goto LABEL_38;
          }
          if (v31 >= 2)
            v34 = (v33 - 1) * v5;
          else
            v34 = 0;
          v28 = &v8[v34];
          *((_QWORD *)&v89 + 1) = &v8[v33 * v5];
          *(_QWORD *)&v90 = *((_QWORD *)&v89 + 1);
          if (v33 <= v22)
            v30 = v33 + 1;
          else
            v30 = v23;
        }
        v35 = &v8[v30 * v5];
LABEL_38:
        *((_QWORD *)&v90 + 1) = v35;
        if (v5)
        {
          v37 = 0;
          v38 = (__int16 *)(a1 + 16 * (int)(16 * v25 % (16 * v3) / v3) + 768);
          do
          {
            v39 = v28[v37] * *v38;
            v40 = 8;
            v41 = 1;
            do
            {
              v39 += *(unsigned __int8 *)(*(_QWORD *)((char *)&v89 + v40) + v37) * v38[v41];
              if (v39 >= 0x7FFF)
                v39 = 0x7FFF;
              if (v39 <= -32768)
                v39 = -32768;
              ++v41;
              v40 += 8;
            }
            while (v40 != 32);
            v42 = v39 + v11;
            if (v42 >= 0x7FFF)
              v42 = 0x7FFF;
            if (v42 <= -32768)
              v42 = -32768;
            *(_WORD *)(v10 + 2 * (v21 * v5 + v37++)) = v42 >> *(_BYTE *)(a1 + 240);
          }
          while (v37 != v5);
        }
        if (++v21 == v7)
          goto LABEL_54;
      }
    }
    v28 = (_BYTE *)v89;
LABEL_54:
    *(_QWORD *)&v89 = v28;
    if (v6)
    {
      v43 = 0;
      v44 = v5 - 2;
      v45 = v5 - 3;
      v46 = v5 - 4;
      v47 = v5 - 5;
      do
      {
        v48 = v43 * v83 / v84;
        if (!v19)
        {
          v55 = v48 - 3;
          if (v48 < 3)
            v55 = 0;
          v56 = v10 + 2 * v55;
          v57 = v48 - 2;
          if (v48 < 2)
            v57 = 0;
          *(_QWORD *)&v85 = v56;
          *((_QWORD *)&v85 + 1) = v10 + 2 * v57;
          v58 = v48 - 1;
          if (v48 <= 0)
            v58 = 0;
          *(_QWORD *)&v86 = v10 + 2 * v58;
          *((_QWORD *)&v86 + 1) = v10 + 2 * v48;
          v59 = v48 + 1;
          if (v48 > v44)
            v59 = (v5 - 1);
          v60 = v10 + 2 * v59;
          v61 = v48 + 2;
          if (v48 > v45)
            v61 = (v5 - 1);
          *(_QWORD *)&v87 = v60;
          *((_QWORD *)&v87 + 1) = v10 + 2 * v61;
          v62 = v48 + 3;
          if (v48 > v46)
            v62 = (v5 - 1);
          *(_QWORD *)&v88 = v10 + 2 * v62;
          v63 = v48 + 4;
          if (v48 > v47)
            v63 = (v5 - 1);
          v64 = v10 + 2 * v63;
          goto LABEL_97;
        }
        v49 = ((v43 * v83 / v84) & 1) == 0;
        if (v48 >= 3)
          v49 = (v48 - 3);
        v50 = v10 + 2 * v49;
        v51 = v48 - 2;
        if (v48 < 2)
          v51 = (v43 * v83 / v84) & 1;
        *(_QWORD *)&v85 = v50;
        *((_QWORD *)&v85 + 1) = v10 + 2 * v51;
        v52 = v48 - 1;
        if (v48 < 1)
          v52 = 1;
        *(_QWORD *)&v86 = v10 + 2 * v52;
        *((_QWORD *)&v86 + 1) = v10 + 2 * v48;
        v53 = v48 + 1;
        if (v48 > v44)
          v53 = (v5 - 2);
        *(_QWORD *)&v87 = v10 + 2 * v53;
        if (v48 <= v45)
        {
          v65 = v10 + 2 * v48;
          *((_QWORD *)&v87 + 1) = v65 + 4;
          if (v48 <= v46)
          {
            *(_QWORD *)&v88 = v65 + 6;
            if (v48 > v47)
            {
              v64 = v10 + 2 * (v5 - 1);
              if ((v48 & 1) == 0)
                v64 = v10 + 2 * (v5 - 2);
              goto LABEL_97;
            }
LABEL_96:
            v64 = v10 + 2 * v48 + 8;
            goto LABEL_97;
          }
          if ((v48 & 1) == 0)
            goto LABEL_86;
        }
        else
        {
          if ((v48 & 1) == 0)
          {
            *((_QWORD *)&v87 + 1) = v10 + 2 * (v5 - 2);
            if (v48 > v46)
LABEL_86:
              v54 = v10 + 2 * (v5 - 1);
            else
              v54 = v10 + 2 * v48 + 6;
            *(_QWORD *)&v88 = v54;
            v64 = v10 + 2 * (v5 - 2);
            goto LABEL_95;
          }
          *((_QWORD *)&v87 + 1) = v10 + 2 * (v5 - 1);
          if (v48 <= v46)
          {
            v66 = v10 + 2 * v48 + 6;
            goto LABEL_94;
          }
        }
        v66 = v10 + 2 * (v5 - 2);
LABEL_94:
        *(_QWORD *)&v88 = v66;
        v64 = v10 + 2 * (v5 - 1);
LABEL_95:
        if (v48 <= v47)
          goto LABEL_96;
LABEL_97:
        *((_QWORD *)&v88 + 1) = v64;
        if (v7)
        {
          v67 = 0;
          v68 = (__int16 *)(a1 + 16 * (int)(16 * v43 * v83 % v81 / v84) + 512);
          do
          {
            v69 = (v5 * v67);
            v70 = *(__int16 *)(v85 + 2 * v69) * *v68;
            v71 = 8;
            v72 = 1;
            do
            {
              v73 = v70 + *(__int16 *)(*(_QWORD *)((char *)&v85 + v71) + 2 * v69) * v68[v72];
              if (v73 >= 0x7FFF)
                v73 = 0x7FFF;
              if (v73 <= -32768)
                v70 = -32768;
              else
                v70 = v73;
              ++v72;
              v71 += 8;
            }
            while (v71 != 64);
            v74 = v70 + v11;
            if (v70 + v11 >= 0x7FFF)
              v74 = 0x7FFF;
            if (v74 <= -32768)
              v74 = -32768;
            v75 = v74 >> *(_BYTE *)(a1 + 240);
            if (v75 >= 255)
              v75 = 255;
            v13[v43 + v6 * v67++] = v75 & ~(v75 >> 31);
          }
          while (v67 != v7);
        }
        ++v43;
      }
      while (v43 != v6);
    }
    v12 = v80 + 1;
  }
  while (v80 != 2);
  sub_1B68C80FC(*(_BYTE **)(a1 + 22344), *(_QWORD *)(a1 + 22352), v77, v78[22], v78[23], v78[6], v78[7]);
  return 0;
}

uint64_t sub_1B68C9148(uint64_t a1, double a2, int32x4_t a3)
{
  char *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int16x4_t *v29;
  int32x4_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  signed int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  char *v59;
  char v60;
  uint64_t v61;
  int v62;
  char v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;

  v3 = (char *)(a1 + 22272);
  v4 = *(unsigned int *)(a1 + 22368);
  v5 = *(_DWORD *)(a1 + 22372);
  v6 = 1 << (2 * *(_BYTE *)(a1 + 240) - 1);
  v7 = *(_BYTE *)(a1 + 22272);
  v8 = 1 << (v7 - 5);
  if (v5)
  {
    v9 = 0;
    v10 = ((_DWORD)v4 - 8) << v7;
    v11 = (v5 - 8) << v7;
    v12 = 2 << v7;
    v13 = *(_WORD *)(a1 + 22284) - v12;
    v14 = (__int16)(*(_WORD *)(a1 + 22278) - v12);
    do
    {
      if ((_DWORD)v4)
      {
        v15 = 0;
        v16 = v14 + v9 * *(__int16 *)(a1 + 22276);
        v17 = v13 + v9 * *(__int16 *)(a1 + 22282);
        do
        {
          v18 = 0;
          v19 = 0;
          v20 = v16 + v15 * *(__int16 *)(a1 + 22274);
          v22 = v20 & ~(v20 >> 31);
          if (v10 < v22)
            v22 = v10;
          v21 = v17 + v15 * *(__int16 *)(a1 + 22280);
          v23 = v21 & ~(v21 >> 31);
          if (v11 < v23)
            v23 = v11;
          v24 = *v3 - 4;
          v25 = (v22 + v8) >> v24;
          v26 = ((v23 + v8) >> v24) & 0xF;
          v27 = (v23 + v8) >> v24 >> 4;
          v28 = *(_DWORD *)(a1 + 22304);
          v29 = (int16x4_t *)(a1 + 16 * (v25 & 0xF));
          v30 = vmovl_s16(v29[2752]);
          v31 = v28 * v27 + (v25 >> 4);
          v32 = a1 + 22016 + 16 * v26;
          do
          {
            v33 = *(_QWORD *)(a1 + 22328) + v31;
            a3.i32[0] = *(_DWORD *)v33;
            a3 = vmulq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a3.i8)), v30);
            v19 += (vaddvq_s32(a3)
                  + *(unsigned __int8 *)(v33 + 4) * v29[2753].i16[0]
                  + *(unsigned __int8 *)(v33 + 5) * v29[2753].i16[1])
                 * *(__int16 *)(v32 + v18);
            v18 += 2;
            v31 += v28;
          }
          while (v18 != 12);
          v34 = ((v19 & ~(v19 >> 31)) + v6) >> (2 * *(_BYTE *)(a1 + 240));
          if (v34 >= 255)
            LOBYTE(v34) = -1;
          *(_BYTE *)(*(_QWORD *)(a1 + 22344) + (*(_DWORD *)(a1 + 22312) * v9) + v15++) = v34;
        }
        while (v15 != v4);
      }
      ++v9;
    }
    while (v9 != v5);
    v7 = *v3;
  }
  if (v5 >= 2)
  {
    v35 = 0;
    LODWORD(v36) = v4 >> 1;
    v37 = v5 >> 1;
    v38 = ((v4 >> 1) - 4) << v7;
    v39 = (v37 - 4) << v7;
    v40 = 1 << v7;
    v69 = (__int16)((*(__int16 *)(a1 + 22284) >> 1) - v40);
    v70 = (__int16)((*(__int16 *)(a1 + 22278) >> 1) - v40);
    if (v4 >> 1 <= 1)
      v36 = 1;
    else
      v36 = v36;
    v72 = v4;
    v73 = v36;
    if (v37 <= 1)
      v41 = 1;
    else
      v41 = v37;
    v71 = v41;
    do
    {
      if (v4 >= 2)
      {
        v42 = 0;
        v74 = v70 + v35 * *(__int16 *)(a1 + 22276);
        v43 = v69 + v35 * *(__int16 *)(a1 + 22282);
        do
        {
          v44 = 0;
          v45 = v74 + v42 * *(__int16 *)(a1 + 22274);
          v47 = v45 & ~(v45 >> 31);
          if (v38 < v47)
            v47 = v38;
          v46 = v43 + v42 * *(__int16 *)(a1 + 22280);
          v48 = v46 & ~(v46 >> 31);
          if (v39 < v48)
            v48 = v39;
          v49 = *v3 - 4;
          v50 = (v47 + v8) >> v49;
          v51 = (v48 + v8) >> v49;
          v52 = v51 >> 4;
          v53 = (v50 >> 3) & 0xFFFFFFFE;
          v54 = (char *)&unk_1B6933DB5 + 4 * (v50 & 0xF);
          v55 = *v54;
          v56 = v54[1];
          v57 = v54[2];
          v58 = v54[3];
          v59 = (char *)&unk_1B6933DB5 + 4 * (v51 & 0xF);
          v60 = 1;
          do
          {
            v61 = 0;
            v62 = 0;
            v63 = v60;
            v64 = *(_DWORD *)(a1 + 22308);
            v66 = v53 + v52 * v64 + v44;
            do
            {
              v65 = *(_QWORD *)(a1 + 22336);
              v62 += (*(unsigned __int8 *)(v65 + v66) * v55
                    + *(unsigned __int8 *)(v65 + v66 + 2) * v56
                    + *(unsigned __int8 *)(v65 + v66 + 4) * v57
                    + *(unsigned __int8 *)(v65 + v66 + 6) * v58)
                   * v59[v61++];
              v66 += v64;
            }
            while (v61 != 4);
            v60 = 0;
            v67 = ((v62 & ~(v62 >> 31)) + v6) >> (2 * *(_BYTE *)(a1 + 240));
            if (v67 >= 255)
              LOBYTE(v67) = -1;
            *(_BYTE *)(*(_QWORD *)(a1 + 22352) + v44 + (*(_DWORD *)(a1 + 22316) * v35) + 2 * (int)v42) = v67;
            v44 = 1;
          }
          while ((v63 & 1) != 0);
          ++v42;
        }
        while (v42 != v73);
      }
      ++v35;
      LODWORD(v4) = v72;
    }
    while (v35 != v71);
  }
  return 0;
}

uint64_t sub_1B68C94F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t i;
  uint64_t v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v30;
  __int16 v31;
  _QWORD v32[9];

  v32[8] = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(a1 + 22376);
  v2 = *(int *)(a1 + 22304);
  v3 = 1;
  memset(&v32[5], 0, 24);
  v31 = 0;
  v30 = 0;
  do
  {
    v4 = v3;
    v5 = *(_DWORD *)(a1 + 22380);
    if ((v3 & 1) != 0)
    {
      v6 = *(_QWORD *)(a1 + 22328);
      v7 = *(_QWORD *)(a1 + 22344);
    }
    else
    {
      v8 = (*(_DWORD *)(a1 + 22312) * v5);
      v5 = v5 >> 1;
      v6 = *(_QWORD *)(a1 + 22328) + (*(_DWORD *)(a1 + 22372) * *(_DWORD *)(a1 + 22304));
      v7 = *(_QWORD *)(a1 + 22344) + v8;
    }
    if (v5 >= 1)
    {
      v9 = 0;
      do
      {
        v10 = v9;
        v11 = ((int)v9 - 2) * (int)v2;
        if ((unint64_t)v10 < 2)
          v11 = 0;
        v12 = v6 + v11;
        v13 = ((int)v10 - 1) * (int)v2;
        if (!v10)
          v13 = 0;
        v32[0] = v12;
        v32[1] = v6 + v13;
        v9 = v10 + 1;
        if (v10 <= v5 - 2)
          v14 = v10 + 1;
        else
          v14 = v5 - 1;
        v32[2] = v6 + v10 * v2;
        v32[3] = v6 + v14 * (int)v2;
        v15 = v10 + 2;
        if (v10 > v5 - 3)
          v15 = v5 - 1;
        v32[4] = v6 + v15 * (int)v2;
        if ((int)v1 >= 1)
        {
          for (i = 0; i != v1; ++i)
          {
            v17 = 0;
            v18 = 0;
            v19 = *(unsigned __int8 *)(v6 + v10 * v2 + i);
            v20 = *(_BYTE *)(a1 + 312) - 1;
            do
            {
              v21 = *(unsigned __int8 *)(v32[v17] + i) - v19;
              v22 = v21 * v21;
              if (v22 >= 0x100)
                v22 = 256;
              v23 = v22 << v20;
              if (v23 >= 256)
                v23 = 256;
              v24 = ((256 - v23) * word_1B6933E00[v17] + 128) >> 8;
              *((_WORD *)&v30 + v17) = v24;
              v18 += v24;
              ++v17;
            }
            while (v17 != 5);
            v25 = 0;
            v26 = 0;
            WORD2(v30) = WORD2(v30) - v18 + 128;
            do
            {
              v27 = v26 + *(unsigned __int8 *)(v32[v25] + i) * *((__int16 *)&v30 + v25);
              if (v27 >= 0x7FFF)
                v27 = 0x7FFF;
              if (v27 <= -32768)
                v26 = -32768;
              else
                v26 = v27;
              ++v25;
            }
            while (v25 != 5);
            if (v26 >= 32703)
              v28 = 32703;
            else
              v28 = v26;
            *(_BYTE *)(v7 + (i + *(_DWORD *)(a1 + 22312) * v10)) = (v28 + 64) >> 7;
          }
        }
      }
      while (v9 != v5);
    }
    v3 = 0;
  }
  while ((v4 & 1) != 0);
  return 0;
}

uint64_t sub_1B68C9760(uint64_t a1)
{
  _DWORD *v2;
  const void **v3;
  void **v4;
  uint64_t *v5;
  int v6;
  char v7;
  char v8;
  int v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  __int16 v30;
  int v31;
  int v32;

  v2 = (_DWORD *)(a1 + 22304);
  v3 = (const void **)(a1 + 22328);
  v4 = (void **)(a1 + 22344);
  if (*(_BYTE *)(a1 + 244))
  {
    memcpy(*(void **)(a1 + 272), *(const void **)(a1 + 22328), (3 * *(_DWORD *)(a1 + 22380) * *(_DWORD *)(a1 + 22312)) >> 1);
  }
  else
  {
    v5 = (uint64_t *)(a1 + 272);
    v6 = *(_DWORD *)(a1 + 22376);
    v7 = 1;
    do
    {
      v8 = v7;
      v9 = *(_DWORD *)(a1 + 22380);
      if ((v8 & 1) != 0)
      {
        v10 = (unsigned __int8 *)*v3;
        v11 = *v4;
        v12 = *v5;
      }
      else
      {
        v13 = (*(_DWORD *)(a1 + 22312) * v9);
        v9 = v9 >> 1;
        v14 = (*(_DWORD *)(a1 + 22372) * *(_DWORD *)(a1 + 22304));
        v10 = (unsigned __int8 *)*v3 + v14;
        v11 = (char *)*v4 + v13;
        v12 = *v5 + v14;
      }
      if (v9 >= 1)
      {
        v15 = 0;
        v16 = 1;
        do
        {
          if (v16 >= v9 - 1)
            v17 = v9 - 1;
          else
            v17 = v16;
          if (v15 <= 1)
            v18 = 1;
          else
            v18 = v15;
          if (v6 >= 1)
          {
            v19 = 0;
            v20 = v18 - 1;
            do
            {
              v21 = v19 + v15 * *v2;
              v22 = v10[v21];
              v23 = *(unsigned __int8 *)(v12 + v21);
              v24 = v22 - v23;
              if (v22 - v23 < 0)
                v24 = v23 - v22;
              v25 = v10[v19 + v20 * *v2] - *(unsigned __int8 *)(v12 + (v19 + v20 * *v2));
              if (v25 < 0)
                v25 = *(unsigned __int8 *)(v12 + (v19 + v20 * *v2)) - v10[v19 + v20 * *v2];
              v26 = v10[v19 + v17 * *v2] - *(unsigned __int8 *)(v12 + (v19 + v17 * *v2));
              if (v26 < 0)
                v26 = *(unsigned __int8 *)(v12 + (v19 + v17 * *v2)) - v10[v19 + v17 * *v2];
              v27 = (v24 + ((v25 + v26 + 1) >> 1) + 1) >> 1;
              v28 = v27 * v27;
              if (v28 >= 0x100)
                v28 = 256;
              v29 = (unsigned __int16)(v28 << (*(_BYTE *)(a1 + 242) - 1)) <= 0x100u;
              v30 = 256 - (v28 << (*(_BYTE *)(a1 + 242) - 1));
              if (!v29)
                v30 = 0;
              v31 = (__int16)(*(unsigned __int8 *)(a1 + 243) * v30) + 128;
              v32 = (v31 >> 8) * v23 + (128 - (v31 >> 8)) * v22;
              if (v32 >= 32703)
                v32 = 32703;
              v11[v19 + v15 * *(_DWORD *)(a1 + 22312)] = (v32 + 64) >> 7;
              ++v19;
            }
            while (v6 != v19);
          }
          ++v15;
          ++v16;
        }
        while (v15 != v9);
      }
      v7 = 0;
    }
    while ((v8 & 1) != 0);
    v3 = (const void **)(a1 + 22344);
    v4 = (void **)(a1 + 272);
  }
  memcpy(*v4, *v3, (3 * v2[2] * v2[19]) >> 1);
  *(_BYTE *)(a1 + 244) = 0;
  return 0;
}

uint64_t sub_1B68C9978(uint64_t a1, double a2, double a3, double a4, double a5, int32x4_t a6)
{
  int *v7;
  _BOOL4 v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  uint32x4_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t k;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  __int32 v46;
  __int32 v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  signed int v96;
  unsigned int v97;
  unsigned int i;
  unsigned int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  int v107;
  unint64_t v108;
  unsigned int v109;
  unint64_t m;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  char v124;
  int v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t n;
  int v134;
  int v135;
  int v136;
  unsigned int v137;
  signed int v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unsigned int v144;
  int v145;
  unint64_t v146;
  unint64_t ii;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  int8x16_t v156;
  int32x4_t v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unint64_t v167;
  unsigned int v168;
  unsigned int v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v177;
  _BYTE v178[16];
  uint32x4_t v179;
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  v7 = (int *)(a1 + 22304);
  if ((*(_DWORD *)(a1 + 248) - *(_DWORD *)(a1 + 252)) <= 2)
  {
    v8 = *(_BYTE *)(a1 + 244) == 0;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)(a1 + 244) = 1;
  }
  v9 = *(_DWORD *)(a1 + 256);
  if (v9 < 1)
    v10 = 1;
  else
    v10 = 3;
  if (v9 >= 4)
    v10 = 5;
  if (!v8 || !*(_BYTE *)(a1 + 22512))
  {
    v97 = *(_DWORD *)(a1 + 22372);
    if (v97)
    {
      for (i = 0; i < v97; ++i)
      {
        memcpy((void *)(*(_QWORD *)(a1 + 22344) + v7[2] * i), (const void *)(*(_QWORD *)(a1 + 22328) + *v7 * i), v7[18]);
        v97 = v7[17];
      }
      if (v97 >= 2)
      {
        v99 = 0;
        do
        {
          memcpy((void *)(*(_QWORD *)(a1 + 22352) + v7[2] * v99), (const void *)(*(_QWORD *)(a1 + 22336) + *v7 * v99), v7[18]);
          ++v99;
          v97 = v7[17];
        }
        while (v99 < v97 >> 1);
      }
    }
    bzero(*(void **)(a1 + 22504), 4 * (v7[16] >> 3) * (v97 >> 3));
    bzero(*(void **)(a1 + 22464), (v7[16] >> 3) * (v7[17] >> 3));
    *(_BYTE *)(a1 + 264) = 0;
    *(_BYTE *)(a1 + 244) = 0;
    goto LABEL_169;
  }
  v11 = (*(_DWORD *)(a1 + 22448) - 14) & ~((*(_DWORD *)(a1 + 22448) - 14) >> 31);
  v12 = *(_DWORD *)(a1 + 22372);
  if (v12 < 0x10)
    goto LABEL_66;
  v13 = 0;
  v14 = 0;
  LODWORD(v15) = *(_DWORD *)(a1 + 22368);
  v16.i64[0] = 0x100000001;
  v16.i64[1] = 0x100000001;
  do
  {
    if (v15 < 0x10)
      goto LABEL_65;
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = 0;
      LODWORD(v20) = 0;
      v21 = *v7;
      v22 = *(_QWORD *)(a1 + 22328) + v17 + (v13 * v21);
      v23 = 1;
      do
      {
        v24 = 0;
        v25 = v23;
        v26 = v19 * v21;
        v20 = (int)v20;
        v27 = v20 + 2;
        v28 = v22 + v26;
        do
        {
          v29 = 0;
          v30 = 0;
          v31 = v28 + v24;
          do
          {
            for (j = 0; j != 8; ++j)
              v30 += *(unsigned __int8 *)(v31 + j);
            ++v29;
            v31 += v21;
          }
          while (v29 != 8);
          v33 = 0;
          v34 = 0;
          v35 = v30 + 32;
          v178[v20] = v35 >> 6;
          v36 = (v35 >> 6);
          v37 = v28 + v24;
          do
          {
            for (k = 0; k != 8; ++k)
              v34 += (*(unsigned __int8 *)(v37 + k) - v36) * (*(unsigned __int8 *)(v37 + k) - v36);
            ++v33;
            v37 += v21;
          }
          while (v33 != 8);
          v179.i32[v20++] = (v34 + 32) >> 6;
          v24 = 8;
        }
        while (v27 != (_DWORD)v20);
        v23 = 0;
        v19 = 8;
      }
      while ((v25 & 1) != 0);
      v39 = v15 >> 3;
      v40 = (int)((v15 >> 3) * 2 * v14 + 2 * v18);
      v179 = vmaxq_u32(v179, v16);
      v41 = *(_QWORD *)(a1 + 22504);
      if (!*(_DWORD *)(v41 + 4 * v40))
      {
        *(_DWORD *)(v41 + 4 * v40) = 1;
        v41 = *(_QWORD *)(a1 + 22504);
      }
      v42 = v40 | 1;
      if (!*(_DWORD *)(v41 + 4 * (v40 | 1)))
      {
        *(_DWORD *)(v41 + 4 * v42) = 1;
        v41 = *(_QWORD *)(a1 + 22504);
      }
      v43 = v39 * ((2 * v14) | 1) + 2 * v18;
      v44 = v43;
      if (!*(_DWORD *)(v41 + 4 * v43))
      {
        *(_DWORD *)(v41 + 4 * v43) = 1;
        v41 = *(_QWORD *)(a1 + 22504);
      }
      v45 = v43 + 1;
      if (!*(_DWORD *)(v41 + 4 * v45))
        *(_DWORD *)(v41 + 4 * v45) = 1;
      v46 = v179.i32[1];
      *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v40) = v179.i32[0];
      *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v42) = v46;
      v47 = v179.i32[3];
      *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v44) = v179.i32[2];
      *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v45) = v47;
      v48 = *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v40);
      v49 = *(_DWORD *)(*(_QWORD *)(a1 + 22504) + 4 * v40);
      v50 = *(_QWORD *)(a1 + 22496);
      if (v48 >= v49)
      {
        *(_DWORD *)(v50 + 4 * v40) = v48 / v49;
      }
      else
      {
        *(_DWORD *)(v50 + 4 * v40) = v49 / v48;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v40) *= *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v40);
      }
      v51 = *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v42);
      v52 = *(_DWORD *)(*(_QWORD *)(a1 + 22504) + 4 * v42);
      v53 = *(_QWORD *)(a1 + 22496);
      if (v51 >= v52)
      {
        *(_DWORD *)(v53 + 4 * v42) = v51 / v52;
      }
      else
      {
        *(_DWORD *)(v53 + 4 * v42) = v52 / v51;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v42) *= *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v42);
      }
      v54 = *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v44);
      v55 = *(_DWORD *)(*(_QWORD *)(a1 + 22504) + 4 * v44);
      v56 = *(_QWORD *)(a1 + 22496);
      if (v54 >= v55)
      {
        *(_DWORD *)(v56 + 4 * v44) = v54 / v55;
      }
      else
      {
        *(_DWORD *)(v56 + 4 * v44) = v55 / v54;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v44) *= *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v44);
      }
      v57 = *(_DWORD *)(*(_QWORD *)(a1 + 22488) + 4 * v45);
      v58 = *(_DWORD *)(*(_QWORD *)(a1 + 22504) + 4 * v45);
      v59 = *(_QWORD *)(a1 + 22496);
      if (v57 >= v58)
      {
        *(_DWORD *)(v59 + 4 * v45) = v57 / v58;
      }
      else
      {
        *(_DWORD *)(v59 + 4 * v45) = v58 / v57;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v45) *= *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v45);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 22456) + v40) = v178[0];
      *(_BYTE *)(*(_QWORD *)(a1 + 22456) + v42) = v178[1];
      *(_BYTE *)(*(_QWORD *)(a1 + 22456) + v44) = v178[2];
      *(_BYTE *)(*(_QWORD *)(a1 + 22456) + v45) = v178[3];
      v60 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v40) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v40);
      if (v60 < 0)
        v60 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v40) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v40);
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v40) = v10 + v10 * v60 * *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v40);
      v61 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v42) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v42);
      if (v61 < 0)
        v61 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v42) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v42);
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v42) = v10 + v10 * v61 * *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v42);
      v62 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v44) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v44);
      if (v62 < 0)
        v62 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v44) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v44);
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v44) = v10 + v10 * v62 * *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v44);
      v63 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v45) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v45);
      if (v63 < 0)
        v63 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 22464) + v45) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 22456) + v45);
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v45) = v10 + v10 * v63 * *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v45);
      v64 = *(_QWORD *)(a1 + 22496);
      v65 = *(_DWORD *)(v64 + 4 * v40);
      v66 = v65 + *(_DWORD *)(v64 + 4 * v44) + *(_DWORD *)(v64 + 4 * v42) + *(_DWORD *)(v64 + 4 * v45) + 2;
      *(_DWORD *)(v64 + 4 * v40) = v65 + (v66 >> 3);
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v42) += v66 >> 3;
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v44) += v66 >> 3;
      *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v45) += v66 >> 3;
      v15 = *(unsigned int *)(a1 + 22368);
      if (v18 < v15 >> 6
        || v18 > (*(_DWORD *)(a1 + 22368) - (*(_DWORD *)(a1 + 22368) >> 6))
        || (v67 = *(_DWORD *)(a1 + 22372), v14 < v67 >> 6))
      {
        if (v9 > 0)
          goto LABEL_63;
LABEL_62:
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v40) -= 4;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v42) -= 4;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v44) -= 4;
        *(_DWORD *)(*(_QWORD *)(a1 + 22496) + 4 * v45) -= 4;
        LODWORD(v15) = *(_DWORD *)(a1 + 22368);
        goto LABEL_63;
      }
      if (v9 <= 0 && v14 > v67 - (v67 >> 6))
        goto LABEL_62;
LABEL_63:
      ++v18;
      v17 += 16;
    }
    while (v18 < v15 >> 4);
    v12 = *(_DWORD *)(a1 + 22372);
LABEL_65:
    ++v14;
    v13 += 16;
  }
  while (v14 < v12 >> 4);
LABEL_66:
  if (v11 >= 4 * *(unsigned __int8 *)(a1 + 264) + 14)
  {
    if (v12 >= 2)
    {
      v100 = 0;
      v101 = 0;
      v102 = *(_QWORD *)(a1 + 22336);
      v103 = *v7;
      v104 = *(_QWORD *)(a1 + 22352);
      v105 = v12 >> 1;
      v106 = *(_DWORD *)(a1 + 22312);
      v107 = 3 * v11;
      v108 = *(unsigned int *)(a1 + 22368);
      v109 = v107 + 76;
      do
      {
        if ((_DWORD)v108)
        {
          for (m = 0; m < v108; m += 2)
          {
            v111 = *(unsigned __int8 *)(v102 + (v100 + m));
            v112 = v100 + m + 1;
            v113 = *(unsigned __int8 *)(v102 + v112);
            v114 = v111 - v113;
            if (v111 - v113 < 0)
              v114 = v113 - v111;
            v115 = (128 - v114) & ~((128 - v114) >> 31);
            if (v115 <= v109)
              v115 = v109;
            if (v115 >= 128)
              v115 = 128;
            *(_BYTE *)(v102 + (v100 + m)) = ((v115 * (v111 + 32640) + 64) >> 7) ^ 0x80;
            *(_BYTE *)(v102 + v112) = ((v115 * (v113 + 32640) + 64) >> 7) ^ 0x80;
          }
        }
        ++v101;
        v100 += v103;
      }
      while (v101 != v105);
      v116 = 0;
      v117 = 0;
      v118 = 0;
      do
      {
        if ((_DWORD)v108)
        {
          v119 = v116;
          v120 = v117;
          v121 = v108;
          do
          {
            *(_BYTE *)(v104 + v120++) = *(_BYTE *)(v102 + v119++);
            --v121;
          }
          while (v121);
        }
        ++v118;
        v117 += v106;
        v116 += v103;
      }
      while (v118 != v105);
      v12 = v7[17];
    }
    if (v12)
    {
      v122 = 0;
      do
      {
        memcpy((void *)(*(_QWORD *)(a1 + 22344) + v7[2] * v122), (const void *)(*(_QWORD *)(a1 + 22328) + *v7 * v122), v7[18]);
        ++v122;
        v123 = v7[17];
      }
      while (v122 < v123);
      v124 = 0;
      goto LABEL_159;
    }
    v174 = 0;
    *(_BYTE *)(a1 + 264) = 0;
  }
  else
  {
    v68 = *(unsigned int *)(a1 + 22368);
    v177 = v11;
    if (v11 > 8 || v12 > 0xF0 || v68 > 0x140)
    {
      if (v12)
      {
        v125 = 0;
        v126 = 0;
        v127 = 0;
        v128 = *(_QWORD *)(a1 + 22328);
        v129 = *(_QWORD *)(a1 + 272);
        v130 = *(_QWORD *)(a1 + 22344);
        v131 = *v7;
        v132 = *(_DWORD *)(a1 + 22312);
        do
        {
          if ((_DWORD)v68)
          {
            for (n = 0; n != v68; ++n)
            {
              v134 = *(unsigned __int8 *)(v128 + (v125 + n));
              v135 = *(unsigned __int8 *)(v129 + (v125 + n));
              v136 = *(_DWORD *)(*(_QWORD *)(a1 + 22496)
                               + 4 * (int)((v127 >> 3) * (v68 >> 3) + (n >> 3)));
              if (v136 >= 16)
                v136 = 16;
              if (v136 <= 1)
                LOBYTE(v136) = 1;
              v137 = (256 - ((((v134 - v135) * (v134 - v135)) << (v136 - 1)) >> 2)) & ~((int)(256 - ((((v134 - v135) * (v134 - v135)) << (v136 - 1)) >> 2)) >> 31);
              v138 = ((128 - (v137 >> 2)) * v134 + (v137 >> 2) * v135 + 64) >> 7;
              if (v138 >= 255)
                LOBYTE(v138) = -1;
              *(_BYTE *)(v130 + (v126 + n)) = v138;
            }
          }
          ++v127;
          v126 += v132;
          v125 += v131;
        }
        while (v127 != v12);
      }
    }
    else if (v12)
    {
      v69 = 0;
      v70 = 0;
      v71 = 0;
      v72 = *(_QWORD *)(a1 + 22328);
      v73 = *(_QWORD *)(a1 + 272);
      v74 = *(_QWORD *)(a1 + 22344);
      v75 = *v7;
      v76 = *(_DWORD *)(a1 + 22312);
      do
      {
        if (v71 >= v12 - 2)
          v77 = v12 - 2;
        else
          v77 = v71;
        if (v71)
          v78 = v71 - 1;
        else
          v78 = 0;
        if ((_DWORD)v68)
        {
          v79 = 0;
          v80 = v75 + v75 * v77;
          v81 = v75 * v78;
          do
          {
            v82 = *(unsigned __int8 *)(v72 + (v69 + v79));
            v83 = *(unsigned __int8 *)(v72 + (v81 + v79));
            v84 = *(unsigned __int8 *)(v72 + (v80 + v79));
            v85 = 256 - 4 * (v82 - v83) * (v82 - v83);
            v86 = 256 - 4 * (v82 - v84) * (v82 - v84);
            v87 = ((5 * (v85 & ~(v85 >> 31))) >> 4) & 0xFFFFFF;
            v88 = (((5 * (v86 & ~(v86 >> 31))) >> 4) & 0xFFFFFF) * v84
                + v87 * v83
                + (256 - (v87 + ((80 * (v86 & ~(v86 >> 31))) >> 8))) * v82
                + 128;
            v89 = v70 + v79;
            *(_BYTE *)(v74 + v89) = BYTE1(v88);
            v90 = *(unsigned __int8 *)(v72 + (v69 + v79));
            *(_BYTE *)(v74 + v89) = v90;
            v91 = *(unsigned __int8 *)(v73 + (v69 + v79));
            v92 = *(unsigned __int8 *)(v72 + (v69 + v79)) - v91;
            v93 = v92 * v92;
            v94 = *(_DWORD *)(*(_QWORD *)(a1 + 22496)
                            + 4 * (int)((v71 >> 3) * (v68 >> 3) + (v79 >> 3)));
            if (v94 >= 16)
              v94 = 16;
            if (v94 <= 1)
              LOBYTE(v94) = 1;
            v95 = (256 - ((v93 << (v94 - 1)) >> 2)) & ~((int)(256 - ((v93 << (v94 - 1)) >> 2)) >> 31);
            v96 = ((128 - (v95 >> 2)) * v90 + (v95 >> 2) * v91 + 64) >> 7;
            if (v96 >= 255)
              LOBYTE(v96) = -1;
            *(_BYTE *)(v74 + v89) = v96;
            ++v79;
          }
          while (v68 != v79);
        }
        ++v71;
        v70 += v76;
        v69 += v75;
      }
      while (v71 != v12);
    }
    v123 = *(_DWORD *)(a1 + 22372);
    if (v123 >= 2)
    {
      v139 = 0;
      v140 = 0;
      v141 = *(_QWORD *)(a1 + 22336);
      v142 = *v7;
      v143 = *(_QWORD *)(a1 + 22352);
      v144 = v123 >> 1;
      v145 = *(_DWORD *)(a1 + 22312);
      v146 = *(unsigned int *)(a1 + 22368);
      do
      {
        if ((_DWORD)v146)
        {
          for (ii = 0; ii < v146; ii += 2)
          {
            v148 = *(unsigned __int8 *)(v141 + (v139 + ii));
            v149 = v139 + ii + 1;
            v150 = *(unsigned __int8 *)(v141 + v149);
            v151 = v148 - v150;
            if (v148 - v150 < 0)
              v151 = v150 - v148;
            v152 = (128 - v151) & ~((128 - v151) >> 31);
            if (v152 <= 3 * v177 + 76)
              v152 = 3 * v177 + 76;
            if (v152 >= 128)
              v152 = 128;
            *(_BYTE *)(v141 + (v139 + ii)) = ((v152 * (v148 + 32640) + 64) >> 7) ^ 0x80;
            *(_BYTE *)(v141 + v149) = ((v152 * (v150 + 32640) + 64) >> 7) ^ 0x80;
          }
        }
        ++v140;
        v139 += v142;
      }
      while (v140 != v144);
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v156.i64[0] = 0xFF000000FFLL;
      v156.i64[1] = 0xFF000000FFLL;
      v157.i64[0] = 0x10000000100;
      v157.i64[1] = 0x10000000100;
      do
      {
        v158 = v155 - 2;
        if (v155 < 2)
          v158 = 0;
        if (v155 >= v144 - 2)
          v159 = v144 - 2;
        else
          v159 = v155;
        v160 = v155 - 1;
        if (!v155)
          v160 = 0;
        if ((_DWORD)v146)
        {
          v161 = v142 * v158;
          v162 = v142 + v142 * v159;
          v163 = v142 * v160;
          if (v155 <= v144 - 3)
            v164 = v155 + 2;
          else
            v164 = v144 - 2;
          v165 = v153;
          v166 = v154;
          v167 = v146;
          v168 = v164 * v142;
          do
          {
            v169 = *(unsigned __int8 *)(v141 + v165);
            a6.i8[0] = *(_BYTE *)(v141 + v163);
            a6.i8[2] = *(_BYTE *)(v141 + v162);
            a6.i8[4] = *(_BYTE *)(v141 + v161);
            a6.i8[6] = *(_BYTE *)(v141 + v168);
            v170 = (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)a6.i8), v156);
            v171 = vsubq_s32(vdupq_n_s32(v169), v170);
            v172 = (int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vmaxq_s32(vsubq_s32(v157, (int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v171, v171), 3uLL)), (int32x4_t)0), (int32x4_t)xmmword_1B6917DF0), 8uLL);
            a6 = vmulq_s32(v172, v170);
            a6.i32[0] = vaddvq_s32(a6);
            *(_BYTE *)(v143 + v166++) = (unsigned __int16)(a6.i16[0] + (256 - vaddvq_s32(v172)) * v169 + 128) >> 8;
            ++v168;
            ++v161;
            ++v162;
            ++v163;
            ++v165;
            --v167;
          }
          while (v167);
        }
        ++v155;
        v154 += v145;
        v153 += v142;
      }
      while (v155 != v144);
      v123 = *(_DWORD *)(a1 + 22372);
    }
    v124 = 1;
LABEL_159:
    *(_BYTE *)(a1 + 264) = v124;
    if (v123)
    {
      v173 = 0;
      do
      {
        memcpy((void *)(*(_QWORD *)(a1 + 272) + *v7 * v173), (const void *)(*(_QWORD *)(a1 + 22344) + v7[2] * v173), v7[16]);
        ++v173;
        v174 = v7[17];
      }
      while (v173 < v174);
      if (v174 >= 2)
      {
        v175 = 0;
        do
        {
          memcpy((void *)(*(_QWORD *)(a1 + 272) + *v7 * v174 + *v7 * v175), (const void *)(*(_QWORD *)(a1 + 22352) + v7[2] * v175), v7[16]);
          ++v175;
          v174 = v7[17];
        }
        while (v175 < v174 >> 1);
      }
    }
    else
    {
      v174 = 0;
    }
  }
  memcpy(*(void **)(a1 + 22504), *(const void **)(a1 + 22488), 4 * (v7[16] >> 3) * (v174 >> 3));
  memcpy(*(void **)(a1 + 22464), *(const void **)(a1 + 22456), (v7[16] >> 3) * (v7[17] >> 3));
  *(_BYTE *)(a1 + 264) = 1;
LABEL_169:
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a1 + 248);
  return 0;
}

void sub_1B68CA64C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v2 = *(void **)(a1 + 80);
  if (v2)
    free(v2);
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  v3 = *(_QWORD *)(a1 + 168);
  if (v3)
  {
    v4 = *(_QWORD **)(v3 + 24);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)v4[3];
        free(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(v3 + 24) = 0;
    free(*(void **)(a1 + 168));
    *(_QWORD *)(a1 + 168) = 0;
  }
  else
  {
    v6 = *(void **)(a1 + 176);
    if (v6)
      free(v6);
  }
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
}

double sub_1B68CA6CC(uint64_t a1, unsigned int a2, unsigned int a3, char a4, int a5, char a6, int a7, int a8, double a9)
{
  unint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  double result;

  *(_BYTE *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 4) = a2;
  *(double *)(a1 + 8) = (double)a2 / 90000.0;
  *(_DWORD *)(a1 + 16) = a3;
  if (a2)
    v13 = (((unint64_t)a2 >> 1) + 90000 * a3) / a2;
  else
    LODWORD(v13) = -1;
  *(_DWORD *)(a1 + 20) = v13;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 48) = v13;
  *(_DWORD *)(a1 + 52) = (int)(90000.0 / a9 + 0.5);
  v14 = (int)((double)(int)v13 + 0.5);
  *(_DWORD *)(a1 + 36) = v14;
  *(_DWORD *)(a1 + 40) = v13 - v14;
  *(_DWORD *)(a1 + 44) = (int)((double)(int)v13 * 0.0);
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  v15 = *(_QWORD *)(a1 + 168);
  if (v15)
  {
    v16 = *(_QWORD **)(v15 + 24);
    if (v16)
    {
      do
      {
        v17 = (_QWORD *)v16[3];
        free(v16);
        v16 = v17;
      }
      while (v17);
    }
    *(_QWORD *)(v15 + 24) = 0;
    free(*(void **)(a1 + 168));
    *(_QWORD *)(a1 + 168) = 0;
  }
  else
  {
    v18 = *(void **)(a1 + 176);
    if (v18)
      free(v18);
  }
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  if (!a5)
  {
    *(_DWORD *)(a1 + 92) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    goto LABEL_14;
  }
  *(_DWORD *)(a1 + 92) = a5;
  v19 = malloc_type_calloc(20 * (a5 + 1), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(a1 + 80) = v19;
  *(_BYTE *)(a1 + 96) = a6;
  if (v19)
  {
LABEL_14:
    *(_BYTE *)a1 = 1;
    *(_DWORD *)(a1 + 100) = a8;
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
  }
  return result;
}

BOOL sub_1B68CA848(uint64_t a1, unsigned int a2, int a3, int a4, int a5, _DWORD *a6, _DWORD *a7)
{
  __int128 *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  unsigned int v23;
  int v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  __int128 v32;
  int v33;

  v11 = (__int128 *)(a1 + 60);
  v32 = *(_OWORD *)(a1 + 60);
  v33 = *(_DWORD *)(a1 + 76);
  if ((_DWORD)v32)
  {
    v12 = *(_DWORD *)(a1 + 64);
    v13 = *(_DWORD *)(a1 + 56) + *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v13;
    if ((int)v32 < 1)
    {
      v12 = 0;
    }
    else if (!*(_BYTE *)(a1 + 24) && v13 - (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40)) > v12)
    {
      v12 = v13 - (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40));
    }
  }
  else
  {
    v12 = 0;
    v13 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 72) = v13;
  }
  *(_DWORD *)(a1 + 68) = v12;
  v14 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v14)
    v15 = ((v14 >> 1) + 90000 * a2) / v14;
  else
    LODWORD(v15) = -1;
  v16 = v13 + a3;
  v17 = v15 + v12;
  *(_DWORD *)(a1 + 64) = v17;
  *(_DWORD *)(a1 + 76) = a2;
  if (v32 <= 0x7FFFFFFE)
  {
    v18 = v17;
    if (!*(_BYTE *)(a1 + 24))
    {
      v18 = v16 - (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40));
      if (v18 <= v17)
        v18 = v17;
    }
  }
  else
  {
    v18 = 0;
  }
  *a6 = v13 - v17;
  *a7 = *(_DWORD *)(a1 + 72);
  if (a5)
  {
    *(_DWORD *)(a1 + 48) = v16 - v18;
    v19 = *(_DWORD *)(a1 + 92);
    if (v19)
    {
      v20 = *(_DWORD *)(a1 + 88);
      if (*(_BYTE *)(a1 + 96))
        v20 %= v19;
      v21 = *(_QWORD *)(a1 + 80) + 20 * v20;
      v22 = *v11;
      *(_DWORD *)(v21 + 16) = *(_DWORD *)(a1 + 76);
      *(_OWORD *)v21 = v22;
      v23 = *(_DWORD *)(a1 + 88) + 1;
      *(_DWORD *)(a1 + 88) = v23;
      if (*(_BYTE *)(a1 + 96))
        v23 %= *(_DWORD *)(a1 + 92);
      *(_DWORD *)(*(_QWORD *)(a1 + 80) + 20 * v23 + 12) = v16;
    }
    if (a4)
    {
      v24 = *(_DWORD *)(a1 + 60);
      v25 = 1;
      v26 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
      if (v26)
      {
        v27 = *(_QWORD *)(a1 + 176);
        if (v27)
        {
          *(_QWORD *)(v27 + 24) = v26;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 24);
        }
        else
        {
          *(_QWORD *)(a1 + 168) = v26;
          *(_QWORD *)(a1 + 176) = v26;
        }
      }
      *v26 = 1;
      v26[1] = v24;
      *((_QWORD *)v26 + 1) = (int)a2;
      v26[4] = a3;
      v29 = (_DWORD *)(a1 + 184);
      *((_QWORD *)v26 + 3) = 0;
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 176);
      if (!v28)
      {
LABEL_34:
        v30 = *(_DWORD *)(a1 + 60) + 1;
        *(_DWORD *)(a1 + 56) = a3;
        *(_DWORD *)(a1 + 60) = v30;
        return *a6 < *(_DWORD *)(a1 + 28);
      }
      ++*(_DWORD *)v28;
      *(_QWORD *)(v28 + 8) += (int)a2;
      v29 = (_DWORD *)(v28 + 16);
      v25 = a3;
    }
    *v29 += v25;
    goto LABEL_34;
  }
  *v11 = v32;
  *(_DWORD *)(a1 + 76) = v33;
  return *a6 < *(_DWORD *)(a1 + 28);
}

uint64_t sub_1B68CAAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, signed int a5)
{
  uint64_t v5;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v32;
  uint64_t v33;

  v5 = 0;
  if (!a1 || a5 < 1)
    return v5;
  v9 = 0;
  v32 = (int *)(a2 + 23696);
  v33 = a5;
  v5 = a1;
  while (1)
  {
    if (!v5)
      exit(0);
    if (!*(_BYTE *)(v5 + 1397))
      break;
    v10 = *(_DWORD *)(v5 + 1288);
    v11 = *(unsigned __int8 *)(v5 + 1354);
    v12 = *(unsigned __int8 *)(v5 + 1397) << (*(_BYTE *)(v5 + 1354) != 0);
    v13 = sub_1B68CAD60(v10, v12, a5, a4);
    v14 = *(_DWORD *)(a3 + 372);
    v15 = v13 != 0;
    if (v14 == 1)
    {
      if (!v13)
      {
        if (!v11)
          goto LABEL_32;
LABEL_17:
        v16 = sub_1B68CAD60(v10, v12 - 1, a5, a4);
        if (!v16)
          goto LABEL_32;
LABEL_18:
        if (*(_BYTE *)(v16 + 1402))
          v17 = 1;
        else
          v17 = *(_BYTE *)(v16 + 1398) != 0;
        if (v15 && v17)
          break;
        goto LABEL_32;
      }
      if (*(_BYTE *)(v13 + 1402))
      {
        if (!v11)
          break;
        goto LABEL_17;
      }
    }
    else if (!v13)
    {
      if (!v11)
        goto LABEL_32;
      v16 = sub_1B68CAD60(v10, v12 - 1, a5, a4);
      LOBYTE(v15) = 0;
      goto LABEL_22;
    }
    v15 = *(_BYTE *)(v13 + 1398) != 0;
    if (!v11)
    {
      if (*(_BYTE *)(v13 + 1398))
        break;
      goto LABEL_32;
    }
    v16 = sub_1B68CAD60(v10, v12 - 1, a5, a4);
    if (v14 == 1)
    {
      if (!v16)
        goto LABEL_32;
      goto LABEL_18;
    }
LABEL_22:
    if (v16)
    {
      if (*(_BYTE *)(v16 + 1398) && v15)
        break;
    }
LABEL_32:
    v19 = a4;
    v20 = v33;
    while (1)
    {
      v5 = *v19;
      if (!*(_BYTE *)(*v19 + 1398) && *(_DWORD *)(v5 + 1288) > v10)
        break;
      ++v19;
      if (!--v20)
      {
        v5 = 0;
        break;
      }
    }
    if (++v9 == a5)
      return 0;
  }
  v21 = *v32;
  v22 = *v32 + 1;
  if (*(_BYTE *)(v5 + 1394))
  {
    if (*(_BYTE *)(v5 + 1393))
      goto LABEL_41;
    LODWORD(v23) = v32[1];
    if (!*(_BYTE *)(v5 + 98))
      LODWORD(v23) = v23 + 1;
    if ((int)v23 > v21)
    {
      v26 = *(_QWORD *)(a2 + 22824);
      v23 = *(unsigned int *)(v26 + 12);
      if ((int)v23 >= 1)
      {
        v27 = v26 + 216;
        while (*(_QWORD *)v27)
        {
          *(_DWORD *)(*(_QWORD *)v27 + 1300) = *(_DWORD *)(*(_QWORD *)v27 + 1304) - v22;
          v27 += 8;
          if (!--v23)
            goto LABEL_42;
        }
      }
LABEL_41:
      LODWORD(v23) = 0;
    }
LABEL_42:
    v24 = v32[1];
    v32[1] = v23;
    v32[2] = v24;
    *(_DWORD *)(*(_QWORD *)(a2 + 22824) + 16) = v23;
  }
  else
  {
    v25 = v32[1];
    if (v25 >= v21)
    {
      v28 = *(_QWORD *)(a2 + 22824);
      v23 = *(unsigned int *)(v28 + 12);
      if ((int)v23 >= 1)
      {
        v29 = v28 + 216;
        while (*(_QWORD *)v29)
        {
          *(_DWORD *)(*(_QWORD *)v29 + 1300) = *(_DWORD *)(*(_QWORD *)v29 + 1304) - v22;
          v29 += 8;
          if (!--v23)
            goto LABEL_59;
        }
      }
      LODWORD(v23) = 0;
    }
    else
    {
      LODWORD(v23) = v25 + 1;
    }
  }
LABEL_59:
  *(_DWORD *)(v5 + 1300) = v23;
  *(_DWORD *)(v5 + 1304) = v23;
  return v5;
}

uint64_t sub_1B68CAD60(int a1, int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t result;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 < 1)
    return 0;
  result = 0;
  v6 = 0x7FFFFFFF;
  v7 = a4;
  v8 = a3;
  do
  {
    v9 = *v7;
    if (*v7 && *(_BYTE *)(v9 + 1394) && *(_DWORD *)(v9 + 1288) < v6 && *(_DWORD *)(v9 + 1288) > a1)
    {
      result = *v7;
      v6 = *(_DWORD *)(v9 + 1288);
    }
    ++v7;
    --v8;
  }
  while (v8);
  while (result)
  {
    if (!--a2)
      break;
    v10 = *(_DWORD *)(result + 1288);
    v11 = 0x7FFFFFFF;
    v12 = a4;
    v13 = a3;
    result = 0;
    do
    {
      v14 = *v12;
      if (*v12 && *(_BYTE *)(v14 + 1394) && *(_DWORD *)(v14 + 1288) < v11 && *(_DWORD *)(v14 + 1288) > v10)
      {
        result = *v12;
        v11 = *(_DWORD *)(v14 + 1288);
      }
      ++v12;
      --v13;
    }
    while (v13);
  }
  return result;
}

void sub_1B68CAE28(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  _DWORD *v5;

  v4 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 1320);
  *(_WORD *)(a2 + 24536) = 0;
  *(_BYTE *)(a2 + 24554) = a3;
  *(_BYTE *)(a2 + 24555) = a4;
  *(_DWORD *)(a2 + 23696) = *(_DWORD *)(a1 + 1868) - 1;
  v5 = (_DWORD *)(a2 + 228);
  do
  {
    *(v5 - 1) = 0;
    *v5 = v4;
    *(_QWORD *)(v5 - 51) = 0;
    *(_QWORD *)(v5 - 53) = 0;
    *(v5 - 49) = 0;
    *(_QWORD *)(v5 - 45) = 0;
    ++v4;
    *(_QWORD *)(v5 - 47) = 0;
    *(_QWORD *)(v5 - 43) = 0xFFFFFFFFLL;
    v5 += 190;
  }
  while (v4 != 30);
  *(_QWORD *)(a2 + 23656) = 0;
  *(_QWORD *)(a2 + 23680) = 0;
  *(_QWORD *)(a2 + 23700) = 0;
  *(_OWORD *)(a2 + 22816) = 0u;
  bzero((void *)(a2 + 22840), 0x220uLL);
}

void sub_1B68CAEAC(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  _QWORD v4[5];
  int v5;
  int v6;

  if (a3)
  {
    v3 = *(_DWORD *)(a1 + 32) + 1;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = sub_1B68CAF14;
    v4[3] = &unk_1E6A17CD0;
    v5 = a3;
    v6 = v3;
    v4[4] = a2;
    dispatch_apply(v3, 0, v4);
  }
}

uint64_t sub_1B68CAF14(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (*(unsigned int *)(result + 40) > a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 32) + 16 * v2))(*(_QWORD *)(*(_QWORD *)(v3 + 32)
                                                                                              + 16 * v2
                                                                                              + 8));
      v2 += *(int *)(v3 + 44);
    }
    while (v2 < *(unsigned int *)(v3 + 40));
  }
  return result;
}

uint64_t sub_1B68CAF64(uint64_t a1, char *a2)
{
  unsigned int *v4;
  int v5;
  unint64_t v6;
  unsigned int *v7;
  double v8;
  unsigned int *v9;
  uint64_t result;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  unsigned int *v27;
  signed int v28;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  signed int v32;
  unint64_t v33;
  int v34;
  unsigned int *v35;
  signed int v36;
  unsigned int *v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  double v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int8 v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int *v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int *v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int *v75;
  int v76;
  signed int v77;
  unint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  int v81;
  signed int v82;
  unint64_t v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  unsigned int *v91;
  unsigned int *v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned __int8 v97;
  unsigned int v98;
  unint64_t v99;
  unsigned int *v100;
  unsigned int *v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  int v113;
  unsigned int *v114;
  signed int v115;
  unint64_t v116;
  int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unint64_t v123;
  int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unint64_t v130;
  int v131;
  unsigned int *v132;
  signed int v133;
  unint64_t v134;
  unsigned int *v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  signed int v140;
  unint64_t v141;
  int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  unsigned int v151;
  int v152;
  unint64_t v153;
  unsigned int v154;
  unint64_t v155;
  int v156;
  int v157;
  unint64_t v158;
  char *v159;
  unint64_t v160;
  int v161;
  int v162;
  BOOL *v163;
  uint64_t v164;
  char *v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  unsigned int v178;
  int v179;
  unint64_t v180;
  unsigned int v181;
  unint64_t v182;
  int v183;
  int v184;
  unint64_t v185;
  unsigned int *v186;
  unint64_t v187;
  int v188;
  unsigned int *v189;
  signed int v190;
  unint64_t v191;
  int v192;
  unsigned int *v193;
  signed int v194;
  unsigned int v195;
  int v196;
  unsigned int *v197;
  unsigned int *v198;
  int v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unint64_t v206;
  unsigned int *v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unint64_t v213;
  unsigned int *v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unint64_t v222;
  unsigned int *v223;
  unsigned int *v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t v239;
  unint64_t v240;
  unsigned int *v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int v244;
  int v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  unsigned int v249;
  int v250;
  unint64_t v251;
  unsigned int v252;
  unint64_t v253;
  int v254;
  char v255;
  unsigned int v256;
  unsigned int *v257;
  unsigned int v258;
  unsigned int v259;

  v4 = *(unsigned int **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a1 + 36) + 1;
  v7 = (unsigned int *)(*(_QWORD *)(a1 + 16) + (v6 >> 3));
  bzero(a2, 0x758uLL);
  if (v7 <= v4)
    v9 = v7;
  else
    v9 = v4;
  result = 4294958327;
  if (v5 < 0)
    return result;
  v11 = ((v6 & 7) + 2) & 7;
  v12 = (unsigned int *)((char *)v9 + ((unint64_t)((v6 & 7) + 2) >> 3));
  v13 = (bswap32(*v12) << (((v6 & 7) + 2) & 7)) & 0xF8000000;
  if (!(bswap32(*v7) << (v6 & 7) >> 30) || v13 != 939524096)
    return result;
  v15 = (v11 + 5);
  v16 = ((_BYTE)v11 + 5) & 7;
  if (v12 > v4)
    v12 = v4;
  v17 = (unsigned int *)((char *)v12 + (v15 >> 3));
  v18 = bswap32(*v17);
  v19 = v18 << v16 >> 24;
  *(_DWORD *)a2 = v19;
  v20 = (1 << ((v18 << v16 >> 24) - 66)) & 0x400400801;
  if (v19 - 66 > 0x22 || v20 == 0)
    return result;
  if (v17 > v4)
    v17 = v4;
  v24 = *(unsigned int *)((char *)v17 + 1);
  v22 = (unsigned int *)((char *)v17 + 1);
  v23 = v24;
  if (v22 > v4)
    v22 = v4;
  a2[8] = ((bswap32(v23) << v16) & 0x80000000) != 0;
  v25 = (v16 + 1);
  v26 = v25 & 7;
  v27 = (unsigned int *)((char *)v22 + (v25 >> 3));
  v28 = bswap32(*v27) << v26;
  if (v27 > v4)
    v27 = v4;
  a2[9] = v28 < 0;
  v29 = (v26 + 1);
  v30 = ((_BYTE)v26 + 1) & 7;
  v31 = (unsigned int *)((char *)v27 + (v29 >> 3));
  v32 = bswap32(*v31) << (v29 & 7);
  if (v31 > v4)
    v31 = v4;
  a2[10] = v32 < 0;
  v33 = (v30 + 1);
  v34 = ((_BYTE)v30 + 1) & 7;
  v35 = (unsigned int *)((char *)v31 + (v33 >> 3));
  v36 = bswap32(*v35) << (v33 & 7);
  if (v35 > v4)
    v35 = v4;
  a2[11] = v36 < 0;
  v37 = (unsigned int *)((char *)v35 + ((v34 + 1) >> 3));
  if (v37 > v4)
    v37 = v4;
  v38 = ((((_BYTE)v34 + 1) & 7) + 4) & 7;
  v39 = (unsigned int *)((char *)v37 + ((unint64_t)((((_BYTE)v34 + 1) & 7u) + 4) >> 3));
  v40 = bswap32(*v39) << ((((v34 + 1) & 7) + 4) & 7);
  v41 = v39 <= v4 ? v39 : v4;
  *((_DWORD *)a2 + 1) = HIBYTE(v40);
  v44 = *(unsigned int *)((char *)v41 + 1);
  v42 = (unsigned int *)((char *)v41 + 1);
  v43 = v44;
  result = sub_1B68CBEB4((uint64_t)a2, (uint64_t)(a2 + 1360), v8);
  if ((_DWORD)result)
    return result;
  if (v42 <= v4)
    v46 = v42;
  else
    v46 = v4;
  v47 = bswap32(v43) << v38;
  v48 = __clz(v47);
  v49 = v47 << (v48 + 1) >> -(char)v48;
  if (!v48)
    LOBYTE(v49) = 0;
  v50 = v49 + ~(-1 << v48);
  v51 = v50;
  a2[17] = v50;
  v52 = v38 + 2 * v48 + 1;
  v53 = (unsigned int *)((char *)v46 + (v52 >> 3));
  if (v53 <= v4)
    v54 = (unsigned int *)((char *)v46 + (v52 >> 3));
  else
    v54 = v4;
  if (v51 > 0x1F)
    return 4294958327;
  v55 = v52 & 7;
  v56 = bswap32(*v53) << v55;
  if (v19 == 100)
  {
    v57 = __clz(v56);
    v58 = v56 << (v57 + 1) >> -(char)v57;
    if (v57)
      v59 = v58;
    else
      v59 = 0;
    v60 = v59 + ~(-1 << v57);
    a2[18] = v60;
    if (v60 > 1u)
      return 4294958327;
    v61 = v55 + 2 * v57 + 1;
    v62 = (unsigned int *)((char *)v54 + (v61 >> 3));
    v63 = v61 & 7;
    v64 = bswap32(*v62) << v63;
    v65 = __clz(v64);
    v66 = v64 << (v65 + 1) >> -(char)v65;
    if (!v65)
      LOBYTE(v66) = 0;
    a2[20] = v66 + ~(-1 << v65);
    if ((_BYTE)v66 + ~(-1 << v65))
      return 4294958327;
    if (v62 > v4)
      v62 = v4;
    v67 = v63 + 2 * v65 + 1;
    v68 = (unsigned int *)((char *)v62 + (v67 >> 3));
    v69 = v67 & 7;
    v70 = bswap32(*v68) << v69;
    v71 = __clz(v70);
    v72 = v70 << (v71 + 1) >> -(char)v71;
    if (!v71)
      v72 = 0;
    v73 = v72 + ~(-1 << v71);
    a2[21] = v73;
    if ((_BYTE)v73)
      return 4294958327;
    if (v68 > v4)
      v68 = v4;
    v74 = v69 + 2 * v71 + 1;
    v75 = (unsigned int *)((char *)v68 + (v74 >> 3));
    v76 = v74 & 7;
    v77 = bswap32(*v75) << v76;
    a2[22] = v77 < 0;
    if (v77 < 0)
      return 4294958327;
    if (v75 > v4)
      v75 = v4;
    v78 = (v76 + 1);
    v79 = (unsigned int *)((char *)v75 + (v78 >> 3));
    if (v79 <= v4)
      v80 = v79;
    else
      v80 = v4;
    v81 = v78 & 7;
    v82 = bswap32(*v79) << v81;
    a2[23] = v82 < 0;
    v83 = (v81 + 1);
    v55 = ((_BYTE)v81 + 1) & 7;
    v54 = (unsigned int *)((char *)v80 + (v83 >> 3));
    v84 = bswap32(*v54);
    v85 = v84 << v55;
    if (v54 > v4)
      v54 = v4;
    if (v82 < 0)
    {
      v158 = 0;
      v159 = a2 + 40;
      while (1)
      {
        a2[v158 + 24] = v85 < 0;
        v160 = (v55 + 1);
        v55 = ((_BYTE)v55 + 1) & 7;
        v54 = (unsigned int *)((char *)v54 + (v160 >> 3));
        v56 = bswap32(*v54) << (v160 & 7);
        if (v54 > v4)
          v54 = v4;
        if (v85 < 0)
        {
          *(_QWORD *)(a1 + 16) = v54;
          *(_DWORD *)(a1 + 32) = v56;
          *(_BYTE *)(a1 + 36) = v55;
          v161 = (_DWORD)v54 - *(_DWORD *)a1;
          v162 = *(_DWORD *)(a1 + 8);
          if (v158 > 5)
          {
            if (v162 < v161)
              return 4294958327;
            v167 = (v158 - 6);
            v165 = &a2[64 * v167 + 136];
            v163 = (BOOL *)&a2[v167 + 38];
            v164 = a1;
            v166 = 64;
          }
          else
          {
            if (v162 < v161)
              return 4294958327;
            v163 = (BOOL *)&a2[v158 + 32];
            v164 = a1;
            v165 = v159;
            v166 = 16;
          }
          result = sub_1B68CC044(v164, (uint64_t)v165, v166, v163);
          if ((_DWORD)result)
            return result;
          v54 = *(unsigned int **)(a1 + 16);
          v4 = *(unsigned int **)(a1 + 24);
          v56 = *(_DWORD *)(a1 + 32);
          v55 = *(unsigned __int8 *)(a1 + 36);
        }
        ++v158;
        v159 += 16;
        v85 = v56;
        if (v158 == 8)
          goto LABEL_67;
      }
    }
    v56 = v84 << v55;
  }
  else
  {
    a2[18] = 1;
  }
LABEL_67:
  v86 = __clz(v56);
  v87 = v56 << (v86 + 1) >> -(char)v86;
  v88 = v86 ? v87 : 0;
  v89 = v88 + ~(-1 << v86);
  *((_DWORD *)a2 + 68) = v89;
  if (v89 > 0xC)
    return 4294958327;
  v90 = v55 + 2 * v86 + 1;
  v91 = (unsigned int *)((char *)v54 + (v90 >> 3));
  if (v91 <= v4)
    v92 = v91;
  else
    v92 = v4;
  v93 = v90 & 7;
  v94 = bswap32(*v91) << v93;
  v95 = __clz(v94);
  v96 = v94 << (v95 + 1) >> -(char)v95;
  if (!v95)
    LOBYTE(v96) = 0;
  v97 = v96 + ~(-1 << v95);
  v98 = v97;
  a2[276] = v97;
  v99 = v93 + 2 * v95 + 1;
  v100 = (unsigned int *)((char *)v92 + (v99 >> 3));
  v101 = v100 <= v4 ? (unsigned int *)((char *)v92 + (v99 >> 3)) : v4;
  if (v98 > 2)
    return 4294958327;
  v102 = v99 & 7;
  v103 = bswap32(*v100) << v102;
  if (v98 == 1)
  {
    a2[284] = (v103 & 0x80000000) != 0;
    v141 = (v102 + 1);
    v142 = ((_BYTE)v102 + 1) & 7;
    v143 = (unsigned int *)((char *)v101 + (v141 >> 3));
    v144 = bswap32(*v143) << (v141 & 7);
    if (v143 > v4)
      v143 = v4;
    if (v144 < 0x80000)
    {
      v149 = (v142 + 1);
      v102 = ((_BYTE)v142 + 1) & 7;
      v101 = (unsigned int *)((char *)v143 + (v149 >> 3));
      v103 = bswap32(*v101) << (v149 & 7);
      if (v101 > v4)
        v101 = v4;
      v150 = -1;
      do
      {
        v151 = v103;
        v152 = v150;
        v153 = (v102 + 1);
        v102 = ((_BYTE)v102 + 1) & 7;
        v101 = (unsigned int *)((char *)v101 + (v153 >> 3));
        v103 = bswap32(*v101) << (v153 & 7);
        if (v101 > v4)
          v101 = v4;
        ++v150;
      }
      while ((v151 & 0x80000000) == 0);
      v154 = v152 + 2;
      if (v154 > 0x1F)
      {
        v157 = 0;
        result = 4294958327;
        v147 = -2;
        goto LABEL_150;
      }
      v155 = v102 + v154;
      if (v154 > 0x18)
      {
        v168 = v103 >> (47 - v150);
        v102 = ((_BYTE)v102 + (_BYTE)v154) & 7;
        v169 = (unsigned int *)((char *)v101 + ((unint64_t)(v155 - 16) >> 3));
        v170 = bswap32(*v169) << (v155 & 7);
        if (v169 > v4)
          v169 = v4;
        v171 = *(unsigned int *)((char *)v169 + 2);
        v101 = (unsigned int *)((char *)v169 + 2);
        v103 = bswap32(v171) << v102;
        if (v101 > v4)
          v101 = v4;
        v156 = __PAIR64__(v168, v170) >> 16;
      }
      else
      {
        v156 = v103 >> ~(_BYTE)v150;
        v102 = ((_BYTE)v102 + (_BYTE)v154) & 7;
        v101 = (unsigned int *)((char *)v101 + (v155 >> 3));
        v103 = bswap32(*v101) << (v155 & 7);
        if (v101 > v4)
          v101 = v4;
      }
      result = 0;
      v147 = v156 + ~(-1 << v154);
    }
    else
    {
      result = 0;
      v145 = __clz(v144);
      v146 = v144 << (v145 + 1) >> -(char)v145;
      if (!v145)
        v146 = 0;
      v147 = v146 + ~(-1 << v145);
      v148 = v142 + 2 * v145 + 1;
      v102 = ((_BYTE)v142 + 2 * (_BYTE)v145 + 1) & 7;
      v101 = (unsigned int *)((char *)v143 + (v148 >> 3));
      v103 = bswap32(*v101) << (v148 & 7);
      if (v101 > v4)
        v101 = v4;
    }
    v157 = 1;
LABEL_150:
    *((_DWORD *)a2 + 72) = ((v147 + 1) >> 1) - ((v147 + 1) >> 1) * 2 * ((v147 + 1) & 1);
    if (!v157)
      goto LABEL_261;
    if (v103 < 0x80000)
    {
      v176 = (v102 + 1);
      v102 = ((_BYTE)v102 + 1) & 7;
      v101 = (unsigned int *)((char *)v101 + (v176 >> 3));
      v103 = bswap32(*v101) << (v176 & 7);
      if (v101 > v4)
        v101 = v4;
      v177 = -1;
      do
      {
        v178 = v103;
        v179 = v177;
        v180 = (v102 + 1);
        v102 = ((_BYTE)v102 + 1) & 7;
        v101 = (unsigned int *)((char *)v101 + (v180 >> 3));
        v103 = bswap32(*v101) << (v180 & 7);
        if (v101 > v4)
          v101 = v4;
        ++v177;
      }
      while ((v178 & 0x80000000) == 0);
      v181 = v179 + 2;
      if (v181 > 0x1F)
      {
        v184 = 0;
        result = 4294958327;
        v174 = -2;
        goto LABEL_222;
      }
      v182 = v102 + v181;
      if (v181 > 0x18)
      {
        v233 = v103 >> (47 - v177);
        v102 = ((_BYTE)v102 + (_BYTE)v181) & 7;
        v234 = (unsigned int *)((char *)v101 + ((unint64_t)(v182 - 16) >> 3));
        v235 = bswap32(*v234) << (v182 & 7);
        if (v234 > v4)
          v234 = v4;
        v236 = *(unsigned int *)((char *)v234 + 2);
        v101 = (unsigned int *)((char *)v234 + 2);
        v103 = bswap32(v236) << v102;
        if (v101 > v4)
          v101 = v4;
        v183 = __PAIR64__(v233, v235) >> 16;
      }
      else
      {
        v183 = v103 >> ~(_BYTE)v177;
        v102 = ((_BYTE)v102 + (_BYTE)v181) & 7;
        v101 = (unsigned int *)((char *)v101 + (v182 >> 3));
        v103 = bswap32(*v101) << (v182 & 7);
        if (v101 > v4)
          v101 = v4;
      }
      result = 0;
      v174 = v183 + ~(-1 << v181);
    }
    else
    {
      result = 0;
      v172 = __clz(v103);
      v173 = v103 << (v172 + 1) >> -(char)v172;
      if (!v172)
        v173 = 0;
      v174 = v173 + ~(-1 << v172);
      v175 = v102 + 2 * v172 + 1;
      v102 = ((_BYTE)v102 + 2 * (_BYTE)v172 + 1) & 7;
      v101 = (unsigned int *)((char *)v101 + (v175 >> 3));
      v103 = bswap32(*v101) << (v175 & 7);
      if (v101 > v4)
        v101 = v4;
    }
    v184 = 1;
LABEL_222:
    *((_DWORD *)a2 + 73) = ((v174 + 1) >> 1) - ((v174 + 1) >> 1) * 2 * ((v174 + 1) & 1);
    if (v184)
    {
      v237 = __clz(v103);
      v238 = v103 << (v237 + 1) >> -(char)v237;
      if (!v237)
        v238 = 0;
      v239 = v238 + ~(-1 << v237);
      *((_DWORD *)a2 + 74) = v239;
      if (v239 > 0xFF)
        return 4294958327;
      v240 = v102 + 2 * v237 + 1;
      v241 = (unsigned int *)((char *)v101 + (v240 >> 3));
      if (v241 <= v4)
        v101 = (unsigned int *)((char *)v101 + (v240 >> 3));
      else
        v101 = v4;
      v102 = v240 & 7;
      v103 = bswap32(*v241) << v102;
      *((_DWORD *)a2 + 468) = 0;
      if (!(_DWORD)v239)
        goto LABEL_88;
      v242 = 0;
      while (v103 < 0x80000)
      {
        v247 = (v102 + 1);
        v102 = ((_BYTE)v102 + 1) & 7;
        v101 = (unsigned int *)((char *)v101 + (v247 >> 3));
        v103 = bswap32(*v101) << (v247 & 7);
        if (v101 > v4)
          v101 = v4;
        v248 = -1;
        do
        {
          v249 = v103;
          v250 = v248;
          v251 = (v102 + 1);
          v102 = ((_BYTE)v102 + 1) & 7;
          v101 = (unsigned int *)((char *)v101 + (v251 >> 3));
          v103 = bswap32(*v101) << (v251 & 7);
          if (v101 > v4)
            v101 = v4;
          ++v248;
        }
        while ((v249 & 0x80000000) == 0);
        v252 = v250 + 2;
        if (v252 <= 0x1F)
        {
          v253 = v102 + v252;
          if (v252 > 0x18)
          {
            v256 = v103 >> (47 - v248);
            v102 = ((_BYTE)v102 + (_BYTE)v252) & 7;
            v257 = (unsigned int *)((char *)v101 + ((unint64_t)(v253 - 16) >> 3));
            v258 = bswap32(*v257) << (v253 & 7);
            if (v257 > v4)
              v257 = v4;
            v259 = *(unsigned int *)((char *)v257 + 2);
            v101 = (unsigned int *)((char *)v257 + 2);
            v103 = bswap32(v259) << v102;
            if (v101 > v4)
              v101 = v4;
            v254 = __PAIR64__(v256, v258) >> 16;
          }
          else
          {
            v254 = v103 >> ~(_BYTE)v248;
            v102 = ((_BYTE)v102 + (_BYTE)v252) & 7;
            v101 = (unsigned int *)((char *)v101 + (v253 >> 3));
            v103 = bswap32(*v101) << (v253 & 7);
            if (v101 > v4)
              v101 = v4;
          }
          result = 0;
          v245 = v254 + ~(-1 << v252);
          goto LABEL_255;
        }
        v255 = 0;
        result = 4294958327;
        v245 = -2;
LABEL_256:
        *(_DWORD *)&a2[4 * v242 + 300] = ((v245 + 1) >> 1)
                                       - ((v245 + 1) >> 1) * 2 * ((v245 + 1) & 1);
        if ((v255 & 1) == 0)
          goto LABEL_261;
        if (++v242 == v239)
          goto LABEL_88;
      }
      result = 0;
      v243 = __clz(v103);
      v244 = v103 << (v243 + 1) >> -(char)v243;
      if (!v243)
        v244 = 0;
      v245 = v244 + ~(-1 << v243);
      v246 = v102 + 2 * v243 + 1;
      v102 = ((_BYTE)v102 + 2 * (_BYTE)v243 + 1) & 7;
      v101 = (unsigned int *)((char *)v101 + (v246 >> 3));
      v103 = bswap32(*v101) << (v246 & 7);
      if (v101 > v4)
        v101 = v4;
LABEL_255:
      v255 = 1;
      goto LABEL_256;
    }
LABEL_261:
    if (!(_DWORD)result)
    {
LABEL_262:
      result = 0;
      *(_QWORD *)(a1 + 16) = v101;
      *(_DWORD *)(a1 + 32) = v103;
      *(_BYTE *)(a1 + 36) = v102;
      return result;
    }
    return result;
  }
  if (!v98)
  {
    v104 = __clz(v103);
    v105 = v103 << (v104 + 1) >> -(char)v104;
    if (!v104)
      v105 = 0;
    v106 = v105 + ~(-1 << v104);
    *((_DWORD *)a2 + 70) = v106;
    if (v106 > 0xC)
      return 4294958327;
    v107 = v102 + 2 * v104 + 1;
    v101 = (unsigned int *)((char *)v101 + (v107 >> 3));
    v108 = *v101;
    *((_DWORD *)a2 + 468) = 16 << v106;
    if (v101 > v4)
      v101 = v4;
    a2[284] = 0;
    *((_QWORD *)a2 + 36) = 0;
    v102 = v107 & 7;
    v103 = bswap32(v108) << v102;
    *((_DWORD *)a2 + 74) = 0;
  }
LABEL_88:
  v109 = __clz(v103);
  v110 = v103 << (v109 + 1) >> -(char)v109;
  if (!v109)
    v110 = 0;
  v111 = v110 + ~(-1 << v109);
  *((_DWORD *)a2 + 330) = v111;
  v112 = v102 + 2 * v109 + 1;
  v113 = v112 & 7;
  v114 = (unsigned int *)((char *)v101 + (v112 >> 3));
  v115 = bswap32(*v114) << v113;
  if (v114 > v4)
    v114 = v4;
  a2[1324] = v115 < 0;
  v116 = (v113 + 1);
  v117 = ((_BYTE)v113 + 1) & 7;
  v118 = (unsigned int *)((char *)v114 + (v116 >> 3));
  v119 = bswap32(*v118) << (v116 & 7);
  if (v118 > v4)
    v118 = v4;
  v120 = __clz(v119);
  v121 = v119 << (v120 + 1) >> -(char)v120;
  if (!v120)
    v121 = 0;
  v122 = v121 + ~(-1 << v120);
  *((_DWORD *)a2 + 332) = v122;
  v123 = v117 + 2 * v120 + 1;
  v124 = v123 & 7;
  v125 = (unsigned int *)((char *)v118 + (v123 >> 3));
  v126 = bswap32(*v125) << (v123 & 7);
  if (v125 > v4)
    v125 = v4;
  v127 = __clz(v126);
  v128 = v126 << (v127 + 1) >> -(char)v127;
  if (!v127)
    v128 = 0;
  v129 = v128 + ~(-1 << v127);
  *((_DWORD *)a2 + 333) = v129;
  v130 = v124 + 2 * v127 + 1;
  v131 = ((_BYTE)v124 + 2 * (_BYTE)v127 + 1) & 7;
  v132 = (unsigned int *)((char *)v125 + (v130 >> 3));
  v133 = bswap32(*v132) << (v130 & 7);
  if (v132 > v4)
    v132 = v4;
  a2[1336] = v133 < 0;
  v134 = (v131 + 1);
  v135 = (unsigned int *)((char *)v132 + (v134 >> 3));
  if (v135 <= v4)
    v136 = v135;
  else
    v136 = v4;
  v137 = v129 * v122;
  result = 4294958327;
  if (v137 * v111 > 0x2D000)
    return result;
  if (v137 > 0x9000)
    return result;
  v138 = *v135;
  result = sub_1B68CBEB4((uint64_t)a2, (uint64_t)(a2 + 1360), v45);
  if ((_DWORD)result)
    return result;
  v139 = v134 & 7;
  v140 = bswap32(v138) << (v134 & 7);
  if (a2[1336])
  {
    a2[1337] = 0;
  }
  else
  {
    a2[1337] = v140 < 0;
    v185 = (v139 + 1);
    v139 = ((_BYTE)v139 + 1) & 7;
    v186 = (unsigned int *)((char *)v136 + (v185 >> 3));
    v140 = bswap32(*v186) << (v185 & 7);
    if (v186 <= v4)
      v136 = v186;
    else
      v136 = v4;
  }
  a2[1338] = v140 < 0;
  v187 = (v139 + 1);
  v188 = v187 & 7;
  v189 = (unsigned int *)((char *)v136 + (v187 >> 3));
  v190 = bswap32(*v189) << v188;
  if (v189 > v4)
    v189 = v4;
  a2[1339] = v190 < 0;
  v191 = (v188 + 1);
  v192 = ((_BYTE)v188 + 1) & 7;
  v193 = (unsigned int *)((char *)v189 + (v191 >> 3));
  v194 = bswap32(*v193) << (v191 & 7);
  if (v193 > v4)
    v193 = v4;
  if ((v190 & 0x80000000) == 0)
  {
    *(_OWORD *)(a2 + 1340) = 0u;
    goto LABEL_178;
  }
  v201 = __clz(v194);
  v202 = (v194 << (v201 + 1)) >> -(char)v201;
  if (v201)
    v203 = v202;
  else
    v203 = 0;
  v204 = v203 + ~(-1 << v201);
  *((_DWORD *)a2 + 335) = v204;
  v205 = 9 * *((_DWORD *)a2 + 332);
  if (v204 > v205)
    return 4294958327;
  v206 = v192 + 2 * v201 + 1;
  v207 = (unsigned int *)((char *)v193 + (v206 >> 3));
  v208 = v206 & 7;
  v209 = bswap32(*v207) << v208;
  v210 = __clz(v209);
  v211 = v209 << (v210 + 1) >> -(char)v210;
  if (!v210)
    v211 = 0;
  v212 = v211 + ~(-1 << v210);
  *((_DWORD *)a2 + 336) = v212;
  if (v212 > v205)
    return 4294958327;
  if (v207 > v4)
    v207 = v4;
  v213 = v208 + 2 * v210 + 1;
  v214 = (unsigned int *)((char *)v207 + (v213 >> 3));
  v215 = v213 & 7;
  v216 = bswap32(*v214) << (v213 & 7);
  v217 = __clz(v216);
  v218 = v216 << (v217 + 1) >> -(char)v217;
  v219 = v217 ? v218 : 0;
  v220 = v219 + ~(-1 << v217);
  *((_DWORD *)a2 + 337) = v220;
  v221 = 17 * *((_DWORD *)a2 + 333);
  if (v220 > v221)
    return 4294958327;
  if (v214 > v4)
    v214 = v4;
  v222 = v215 + 2 * v217 + 1;
  v223 = (unsigned int *)((char *)v214 + (v222 >> 3));
  if (v223 <= v4)
    v224 = v223;
  else
    v224 = v4;
  v225 = v222 & 7;
  v226 = bswap32(*v223) << v225;
  v227 = __clz(v226);
  v228 = v226 << (v227 + 1) >> -(char)v227;
  if (!v227)
    v228 = 0;
  v229 = v228 + ~(-1 << v227);
  *((_DWORD *)a2 + 338) = v229;
  v230 = v225 + 2 * v227 + 1;
  v231 = (unsigned int *)((char *)v224 + (v230 >> 3));
  v193 = v231 <= v4 ? (unsigned int *)((char *)v224 + (v230 >> 3)) : v4;
  if (v229 > v221)
    return 4294958327;
  v192 = v230 & 7;
  v194 = bswap32(*v231) << (v230 & 7);
LABEL_178:
  a2[1356] = v194 < 0;
  v195 = v192 + 1;
  v196 = v195 & 7;
  v197 = (unsigned int *)((char *)v193 + (v195 >> 3));
  if (v197 <= v4)
    v198 = v197;
  else
    v198 = v4;
  if ((v194 & 0x80000000) == 0)
    goto LABEL_182;
  v232 = bswap32(*v197);
  *(_QWORD *)(a1 + 16) = v198;
  *(_DWORD *)(a1 + 32) = v232 << v196;
  *(_BYTE *)(a1 + 36) = v196;
  if (*(_DWORD *)(a1 + 8) < (int)v198 - *(_DWORD *)a1)
    return 4294958327;
  result = sub_1B68CC120(a1, (uint64_t)a2, (uint64_t)(a2 + 1360));
  if (!(_DWORD)result)
  {
    v198 = *(unsigned int **)(a1 + 16);
    v4 = *(unsigned int **)(a1 + 24);
    v196 = *(unsigned __int8 *)(a1 + 36);
LABEL_182:
    LOBYTE(v102) = 0;
    v101 = (unsigned int *)((char *)v198 + ((v196 + 1) >> 3));
    if (v101 > v4)
      v101 = v4;
    if ((((_BYTE)v196 + 1) & 7) != 0)
      v101 = (unsigned int *)((char *)v101 + 1);
    v103 = bswap32(*v101);
    v199 = *((_DWORD *)a2 + 332) + 1;
    v200 = *((_DWORD *)a2 + 333);
    *((_DWORD *)a2 + 467) = 1 << (*((_DWORD *)a2 + 68) + 4);
    *((_DWORD *)a2 + 469) = v199 + v199 * v200 - 1;
    goto LABEL_262;
  }
  return result;
}

uint64_t sub_1B68CBEB4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  uint64_t result;
  unint64_t v10;

  v3 = 0;
  v4 = *(_DWORD *)(a1 + 4);
  v5 = -1;
  do
  {
    if (v4 == byte_1B693579C[v3])
      v5 = v3;
    ++v3;
  }
  while (v3 != 17);
  if (v5 == -1)
    return 4294958327;
  if (v4 == 11 && *(_BYTE *)(a1 + 11))
    v5 = 1;
  LODWORD(a3) = dword_1B69354F4[v5];
  v6 = (int)fmin((double)*(unint64_t *)&a3* 384.0/ ((double)(((*(_DWORD *)(a1 + 1328) << 8)+ 256+ ((*(_DWORD *)(a1 + 1328) << 8) + 256) * *(_DWORD *)(a1 + 1332))* (2 - *(unsigned __int8 *)(a1 + 1336)))* 1.5), 16.0);
  *(_DWORD *)(a2 + 20) = 5;
  *(_QWORD *)(a2 + 28) = 0x200000002;
  *(_DWORD *)(a2 + 36) = 2;
  *(_BYTE *)(a2 + 70) = 1;
  HIDWORD(v7) = 1;
  *(_OWORD *)(a2 + 72) = xmmword_1B6917C20;
  if (*(_DWORD *)a1 == 100 && *(_BYTE *)(a1 + 11) == 1)
    v8 = 0;
  else
    v8 = v6;
  result = 0;
  *(_DWORD *)(a2 + 88) = v8;
  *(_DWORD *)(a2 + 92) = v6;
  LODWORD(v7) = dword_1B6935758[v5];
  *(double *)&v10 = (double)v7 * 1000.0 * 0.015625 + -1.0 + 0.5;
  *(_DWORD *)(a2 + 108) = (int)*(double *)&v10;
  LODWORD(v10) = dword_1B6935714[v5];
  *(_DWORD *)(a2 + 236) = (int)((double)v10 * 200.0 * 0.0625 + -1.0 + 0.5);
  *(_OWORD *)(a2 + 492) = xmmword_1B6917E00;
  return result;
}

uint64_t sub_1B68CC044(uint64_t a1, uint64_t a2, int a3, BOOL *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = 0;
  v5 = *(unsigned __int8 *)(a1 + 36);
  v6 = *(_DWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  LODWORD(v9) = 8;
  v10 = 8;
  while (!(_DWORD)v9)
  {
LABEL_10:
    LODWORD(v9) = 0;
    v16 = v10;
LABEL_11:
    *(_BYTE *)(a2 + v4++) = v16;
    v10 = v16;
    if (a3 == v4)
    {
      v17 = 0;
      *(_QWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v6;
      *(_BYTE *)(a1 + 36) = v5;
      return v17;
    }
  }
  v11 = __clz(v6);
  v12 = v6 << (v11 + 1) >> -(char)v11;
  if (!v11)
    v12 = 0;
  v13 = ((v12 + (1 << v11)) >> 1) - ((v12 + (1 << v11)) >> 1) * 2 * ((v12 + (1 << v11)) & 1);
  if (v13 == (char)v13)
  {
    v14 = v5 + 2 * v11 + 1;
    v15 = (unsigned int *)(v8 + (v14 >> 3));
    if ((unint64_t)v15 <= v7)
      v8 += v14 >> 3;
    else
      v8 = v7;
    v5 = v14 & 7;
    v6 = bswap32(*v15) << v5;
    v9 = (v13 + v10);
    *a4 = (v9 | v4) == 0;
    v16 = v9;
    if ((_DWORD)v9)
      goto LABEL_11;
    goto LABEL_10;
  }
  return 4294958327;
}

uint64_t sub_1B68CC120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  unsigned int *v19;
  signed int v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unsigned int *v29;
  signed int v30;
  unint64_t v31;
  int v32;
  unsigned int *v33;
  signed int v34;
  unsigned int *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int *v39;
  signed int v40;
  unint64_t v41;
  int v42;
  unsigned int *v43;
  signed int v44;
  unint64_t v45;
  int v46;
  unsigned int *v47;
  signed int v48;
  unsigned int *v49;
  unint64_t v50;
  int v51;
  unsigned int *v52;
  signed int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  char *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  int v91;
  unint64_t v92;
  int v93;
  unsigned int *v94;
  unsigned int v95;
  unint64_t v96;
  int v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unint64_t v103;
  int v104;
  unsigned int *v105;
  unsigned int v106;
  unint64_t v107;
  int v108;
  unsigned int *v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  unint64_t v114;
  unsigned int v115;
  unint64_t v116;
  int v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unint64_t v130;
  int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  int v135;
  unsigned int v136;
  int v137;
  unint64_t v138;
  unsigned int v139;
  unint64_t v140;
  int v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int *v145;
  unsigned int v146;
  int v147;
  unint64_t v148;
  int v149;
  unsigned int *v150;
  unsigned int v151;
  unint64_t v152;
  int v153;
  unsigned int *v154;
  unsigned int v155;
  unint64_t v156;
  int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unint64_t v174;
  unsigned int *v175;
  unsigned int *v176;
  int v177;
  unint64_t v178;
  int v179;
  unsigned int *v180;
  unsigned int v181;
  unint64_t v182;
  int v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int v188;
  unint64_t v189;
  int v190;
  unsigned int *v191;
  unsigned int v192;
  unint64_t v193;
  int v194;
  unsigned int *v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  int v199;
  unint64_t v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  int v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int *v216;
  unint64_t v217;
  int v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v221;
  int v222;
  unsigned int v223;
  int v224;
  unint64_t v225;
  unsigned int v226;
  unint64_t v227;
  int v228;
  unsigned int v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int *v232;
  unsigned int v233;
  int v234;
  unint64_t v235;
  int v236;
  unsigned int *v237;
  unsigned int v238;
  unint64_t v239;
  int v240;
  unsigned int *v241;
  unsigned int v242;
  unint64_t v243;
  int v244;
  unsigned int *v245;
  unsigned int v246;
  unsigned int *v247;
  unint64_t v248;
  unsigned int *v249;
  int v250;
  unsigned int *v251;
  signed int v252;
  unint64_t v253;
  int v254;
  unsigned int *v255;
  signed int v256;
  unsigned int *v257;
  uint64_t v258;
  unint64_t v259;
  int v260;
  unsigned int *v261;
  unsigned int v262;
  int v263;
  int v264;
  unsigned int v265;
  unint64_t v266;
  unsigned int *v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int *v273;
  unint64_t v274;
  unsigned int *v275;
  int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unint64_t v282;
  unsigned int *v283;
  unsigned int *v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unint64_t v290;
  unsigned int *v291;
  unsigned int *v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unint64_t v298;
  unsigned int *v299;
  unsigned int v300;
  uint64_t v301;
  unint64_t v303;
  int v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int *v307;
  int v308;
  unsigned int v309;
  int v310;
  unint64_t v311;
  unsigned int v312;
  unint64_t v313;
  int v314;
  unsigned int v315;
  unsigned int *v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unint64_t v322;
  unint64_t v323;
  unsigned int *v324;
  unsigned int v325;
  int v326;
  unsigned int v327;
  int v328;
  unint64_t v329;
  unsigned int v330;
  unint64_t v331;
  int v332;
  unsigned int v333;
  unsigned int *v334;
  unsigned int v335;
  unsigned int *v336;
  unsigned int v337;
  BOOL v338;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a1 + 36);
  *(_BYTE *)a3 = v5 < 0;
  v7 = v6 + 1;
  v8 = (v6 + 1) & 7;
  v9 = (unsigned int *)(v4 + (v7 >> 3));
  v10 = bswap32(*v9) << v8;
  if (v9 > v3)
    v9 = v3;
  if (v5 < 0)
  {
    v11 = HIBYTE(v10);
    *(_DWORD *)(a3 + 4) = HIBYTE(v10);
    v12 = *(unsigned int *)((char *)v9 + 1);
    v9 = (unsigned int *)((char *)v9 + 1);
    v10 = bswap32(v12) << v8;
    if (v9 > v3)
      v9 = v3;
    if (v11 == 255)
    {
      *(_DWORD *)(a3 + 8) = HIWORD(v10);
      v14 = *(unsigned int *)((char *)v9 + 2);
      v13 = (unsigned int *)((char *)v9 + 2);
      v15 = bswap32(v14) << v8;
      if (v13 > v3)
        v13 = v3;
      *(_DWORD *)(a3 + 12) = HIWORD(v15);
      v16 = *(unsigned int *)((char *)v13 + 2);
      v9 = (unsigned int *)((char *)v13 + 2);
      v10 = bswap32(v16) << v8;
      if (v9 > v3)
        v9 = v3;
    }
  }
  *(_BYTE *)(a3 + 16) = (v10 & 0x80000000) != 0;
  v17 = (v8 + 1);
  v18 = ((_BYTE)v8 + 1) & 7;
  v19 = (unsigned int *)((char *)v9 + (v17 >> 3));
  v20 = bswap32(*v19) << v18;
  if (v19 > v3)
    v19 = v3;
  if ((v10 & 0x80000000) != 0)
  {
    *(_BYTE *)(a3 + 17) = v20 < 0;
    v21 = (v18 + 1);
    v18 = ((_BYTE)v18 + 1) & 7;
    v22 = (unsigned int *)((char *)v19 + (v21 >> 3));
    v20 = bswap32(*v22) << v18;
    if (v22 <= v3)
      v19 = v22;
    else
      v19 = v3;
  }
  *(_BYTE *)(a3 + 18) = v20 < 0;
  v23 = (v18 + 1);
  v24 = ((_BYTE)v18 + 1) & 7;
  v25 = (unsigned int *)((char *)v19 + (v23 >> 3));
  v26 = bswap32(*v25) << v24;
  if (v25 > v3)
    v25 = v3;
  if (v20 < 0)
  {
    *(_DWORD *)(a3 + 20) = v26 >> 29;
    v27 = (v24 + 3);
    v28 = v27 & 7;
    v29 = (unsigned int *)((char *)v25 + (v27 >> 3));
    v30 = bswap32(*v29) << v28;
    if (v29 > v3)
      v29 = v3;
    *(_BYTE *)(a3 + 24) = v30 < 0;
    v31 = (v28 + 1);
    v32 = ((_BYTE)v28 + 1) & 7;
    v33 = (unsigned int *)((char *)v29 + (v31 >> 3));
    v34 = bswap32(*v33) << (v31 & 7);
    if (v33 <= v3)
      v35 = v33;
    else
      v35 = v3;
    *(_BYTE *)(a3 + 25) = v34 < 0;
    v36 = (v32 + 1);
    v24 = v36 & 7;
    v25 = (unsigned int *)((char *)v35 + (v36 >> 3));
    v26 = bswap32(*v25) << (v36 & 7);
    if (v25 > v3)
      v25 = v3;
    if (v34 < 0)
    {
      *(_DWORD *)(a3 + 28) = HIBYTE(v26);
      if (HIBYTE(v26) > 8u)
        return 4294958327;
      v162 = *(unsigned int *)((char *)v25 + 1);
      v161 = (unsigned int *)((char *)v25 + 1);
      v163 = bswap32(v162) << v24 >> 24;
      *(_DWORD *)(a3 + 32) = v163;
      if (v163 > 0x12)
        return 4294958327;
      if (v161 > v3)
        v161 = v3;
      v166 = *(unsigned int *)((char *)v161 + 1);
      v164 = (unsigned int *)((char *)v161 + 1);
      v165 = v166;
      if (v164 > v3)
        v164 = v3;
      v167 = bswap32(v165) << v24 >> 24;
      *(_DWORD *)(a3 + 36) = v167;
      v169 = *(unsigned int *)((char *)v164 + 1);
      v25 = (unsigned int *)((char *)v164 + 1);
      v168 = v169;
      if (v25 > v3)
        v25 = v3;
      if (v167 > 8)
        return 4294958327;
      v26 = bswap32(v168) << v24;
    }
  }
  *(_BYTE *)(a3 + 40) = (v26 & 0x80000000) != 0;
  v37 = (v24 + 1);
  v38 = v37 & 7;
  v39 = (unsigned int *)((char *)v25 + (v37 >> 3));
  v40 = bswap32(*v39) << v38;
  if (v39 > v3)
    v39 = v3;
  if ((v26 & 0x80000000) != 0)
  {
    v54 = __clz(v40);
    if (v54)
      v55 = (v40 << (v54 + 1)) >> -(char)v54;
    else
      v55 = 0;
    v56 = v55 + ~(-1 << v54);
    *(_DWORD *)(a3 + 44) = v56;
    if (v56 > 5)
      return 4294958327;
    v57 = v38 + 2 * v54 + 1;
    v58 = (unsigned int *)((char *)v39 + (v57 >> 3));
    if (v58 <= v3)
      v59 = v58;
    else
      v59 = v3;
    v60 = v57 & 7;
    v61 = bswap32(*v58) << v60;
    v62 = __clz(v61);
    v63 = v61 << (v62 + 1) >> -(char)v62;
    if (!v62)
      v63 = 0;
    v64 = v63 + ~(-1 << v62);
    *(_DWORD *)(a3 + 48) = v64;
    v65 = v60 + 2 * v62 + 1;
    v66 = (unsigned int *)((char *)v59 + (v65 >> 3));
    v39 = v66 <= v3 ? v66 : v3;
    if (v64 > 5)
      return 4294958327;
    v38 = ((_BYTE)v60 + 2 * (_BYTE)v62 + 1) & 7;
    v40 = bswap32(*v66) << (v65 & 7);
  }
  *(_BYTE *)(a3 + 52) = v40 < 0;
  v41 = (v38 + 1);
  v42 = v41 & 7;
  v43 = (unsigned int *)((char *)v39 + (v41 >> 3));
  v44 = bswap32(*v43) << v42;
  if (v43 > v3)
    v43 = v3;
  if (v40 < 0)
  {
    v68 = *(unsigned int *)((char *)v43 + 2);
    v67 = (unsigned int *)((char *)v43 + 2);
    v69 = bswap32(v68) << v42;
    if (v67 > v3)
      v67 = v3;
    v72 = *(unsigned int *)((char *)v67 + 2);
    v70 = (char *)v67 + 2;
    v71 = v72;
    v73 = v44 & 0xFFFF0000 | HIWORD(v69);
    *(_DWORD *)(a3 + 56) = v73;
    if (!v73)
      return 4294958327;
    if (v70 <= (char *)v3)
      v74 = (unsigned int *)v70;
    else
      v74 = v3;
    v75 = bswap32(v71) << v42;
    v77 = *(unsigned int *)((char *)v74 + 2);
    v76 = (unsigned int *)((char *)v74 + 2);
    v78 = bswap32(v77) << v42;
    if (v76 > v3)
      v76 = v3;
    v81 = *(unsigned int *)((char *)v76 + 2);
    v79 = (unsigned int *)((char *)v76 + 2);
    v80 = v81;
    v82 = v75 & 0xFFFF0000 | HIWORD(v78);
    *(_DWORD *)(a3 + 60) = v82;
    if (!v82)
      return 4294958327;
    if (v79 > v3)
      v79 = v3;
    *(_BYTE *)(a3 + 64) = ((bswap32(v80) << v42) & 0x80000000) != 0;
    v83 = (v42 + 1);
    v42 = ((_BYTE)v42 + 1) & 7;
    v43 = (unsigned int *)((char *)v79 + (v83 >> 3));
    v44 = bswap32(*v43) << v42;
    if (v43 > v3)
      v43 = v3;
  }
  *(_BYTE *)(a3 + 65) = v44 < 0;
  v45 = (v42 + 1);
  v46 = v45 & 7;
  v47 = (unsigned int *)((char *)v43 + (v45 >> 3));
  v48 = bswap32(*v47) << v46;
  if (v47 <= v3)
    v49 = v47;
  else
    v49 = v3;
  if (v44 < 0)
  {
    v84 = __clz(v48);
    if (v84)
      v85 = (v48 << (v84 + 1)) >> -(char)v84;
    else
      v85 = 0;
    v86 = v85 + ~(-1 << v84);
    *(_DWORD *)(a3 + 96) = v86;
    if (v86 > 0x1F)
      return 4294958327;
    v87 = 0;
    v88 = v46 + 2 * v84 + 1;
    v89 = (unsigned int *)((char *)v49 + (v88 >> 3));
    if (v89 <= v3)
      v90 = v89;
    else
      v90 = v3;
    v91 = v88 & 7;
    *(_DWORD *)(a3 + 100) = bswap32(*v89) << v91 >> 28;
    v92 = (v91 + 4);
    v93 = v92 & 7;
    v94 = (unsigned int *)((char *)v90 + (v92 >> 3));
    v95 = bswap32(*v94) << v93;
    if (v94 > v3)
      v94 = v3;
    *(_DWORD *)(a3 + 104) = v95 >> 28;
    v96 = (v93 + 4);
    v97 = ((_BYTE)v93 + 4) & 7;
    v98 = (unsigned int *)((char *)v94 + (v96 >> 3));
    v99 = bswap32(*v98) << (v96 & 7);
    if (v98 <= v3)
      v100 = v98;
    else
      v100 = v3;
    while (1)
    {
      if (v99 < 0x80000)
      {
        v107 = (v97 + 1);
        v108 = ((_BYTE)v97 + 1) & 7;
        v109 = (unsigned int *)((char *)v100 + (v107 >> 3));
        v110 = bswap32(*v109) << (v107 & 7);
        if (v109 > v3)
          v109 = v3;
        v111 = -1;
        do
        {
          v112 = v110;
          v113 = v111;
          v114 = (v108 + 1);
          v108 = ((_BYTE)v108 + 1) & 7;
          v109 = (unsigned int *)((char *)v109 + (v114 >> 3));
          v110 = bswap32(*v109) << (v114 & 7);
          if (v109 > v3)
            v109 = v3;
          ++v111;
        }
        while ((v112 & 0x80000000) == 0);
        v115 = v113 + 2;
        if (v115 > 0x1F)
        {
          *(_DWORD *)(a3 + 4 * v87 + 108) = -2;
          return 4294958327;
        }
        v116 = v108 + v115;
        if (v115 > 0x18)
        {
          v118 = v110 >> (47 - v111);
          v104 = ((_BYTE)v108 + (_BYTE)v115) & 7;
          v119 = (unsigned int *)((char *)v109 + ((unint64_t)(v116 - 16) >> 3));
          v120 = bswap32(*v119) << (v116 & 7);
          if (v119 > v3)
            v119 = v3;
          v121 = *(unsigned int *)((char *)v119 + 2);
          v105 = (unsigned int *)((char *)v119 + 2);
          v106 = bswap32(v121) << v104;
          if (v105 > v3)
            v105 = v3;
          v117 = __PAIR64__(v118, v120) >> 16;
        }
        else
        {
          v117 = v110 >> ~(_BYTE)v111;
          v104 = ((_BYTE)v108 + (_BYTE)v115) & 7;
          v105 = (unsigned int *)((char *)v109 + (v116 >> 3));
          v106 = bswap32(*v105) << (v116 & 7);
          if (v105 > v3)
            v105 = v3;
        }
        *(_DWORD *)(a3 + 4 * v87 + 108) = v117 + ~(-1 << v115);
      }
      else
      {
        v101 = __clz(v99);
        v102 = v99 << (v101 + 1) >> -(char)v101;
        if (!v101)
          v102 = 0;
        *(_DWORD *)(a3 + 4 * v87 + 108) = v102 + ~(-1 << v101);
        v103 = v97 + 2 * v101 + 1;
        v104 = ((_BYTE)v97 + 2 * (_BYTE)v101 + 1) & 7;
        v105 = (unsigned int *)((char *)v100 + (v103 >> 3));
        v106 = bswap32(*v105) << (v103 & 7);
        if (v105 > v3)
          v105 = v3;
      }
      if (v106 < 0x80000)
      {
        v130 = (v104 + 1);
        v131 = ((_BYTE)v104 + 1) & 7;
        v132 = (unsigned int *)((char *)v105 + (v130 >> 3));
        v133 = bswap32(*v132) << (v130 & 7);
        if (v132 <= v3)
          v134 = v132;
        else
          v134 = v3;
        v135 = -1;
        do
        {
          v136 = v133;
          v137 = v135;
          v138 = (v131 + 1);
          v131 = ((_BYTE)v131 + 1) & 7;
          v134 = (unsigned int *)((char *)v134 + (v138 >> 3));
          v133 = bswap32(*v134) << (v138 & 7);
          if (v134 > v3)
            v134 = v3;
          ++v135;
        }
        while ((v136 & 0x80000000) == 0);
        v139 = v137 + 2;
        if (v139 > 0x1F)
        {
          v301 = a3 + 4 * v87;
LABEL_272:
          *(_DWORD *)(v301 + 236) = -2;
          return 4294958327;
        }
        v140 = v131 + v139;
        if (v139 > 0x18)
        {
          v142 = v133 >> (47 - v135);
          v126 = ((_BYTE)v131 + (_BYTE)v139) & 7;
          v143 = (unsigned int *)((char *)v134 + ((unint64_t)(v140 - 16) >> 3));
          v144 = bswap32(*v143) << (v140 & 7);
          if (v143 <= v3)
            v145 = v143;
          else
            v145 = v3;
          v146 = *(unsigned int *)((char *)v145 + 2);
          v129 = (unsigned int *)((char *)v145 + 2);
          v128 = bswap32(v146) << v126;
          if (v129 > v3)
            v129 = v3;
          v141 = __PAIR64__(v142, v144) >> 16;
        }
        else
        {
          v141 = v133 >> ~(_BYTE)v135;
          v126 = ((_BYTE)v131 + (_BYTE)v139) & 7;
          v129 = (unsigned int *)((char *)v134 + (v140 >> 3));
          v128 = bswap32(*v129) << (v140 & 7);
          if (v129 > v3)
            v129 = v3;
        }
        v147 = v141 + ~(-1 << v139);
        v124 = v87;
        *(_DWORD *)(a3 + 4 * v87 + 236) = v147;
      }
      else
      {
        v122 = __clz(v106);
        v123 = v106 << (v122 + 1) >> -(char)v122;
        if (!v122)
          v123 = 0;
        v124 = v87;
        *(_DWORD *)(a3 + 4 * v87 + 236) = v123 + ~(-1 << v122);
        v125 = v104 + 2 * v122 + 1;
        v126 = v125 & 7;
        v127 = (unsigned int *)((char *)v105 + (v125 >> 3));
        v128 = bswap32(*v127) << (v125 & 7);
        if (v127 <= v3)
          v129 = v127;
        else
          v129 = v3;
      }
      *(_DWORD *)(a3 + 4 * v124 + 364) = v128 >> 31;
      v148 = (v126 + 1);
      v97 = ((_BYTE)v126 + 1) & 7;
      v100 = (unsigned int *)((char *)v129 + (v148 >> 3));
      v99 = bswap32(*v100) << v97;
      if (v100 > v3)
        v100 = v3;
      if (++v87 > v86)
      {
        *(_DWORD *)(a3 + 492) = v99 >> 27;
        v149 = ((_BYTE)v97 + 5) & 7;
        v150 = (unsigned int *)((char *)v100 + ((unint64_t)(v97 + 5) >> 3));
        v151 = bswap32(*v150) << v149;
        if (v150 > v3)
          v150 = v3;
        *(_DWORD *)(a3 + 496) = v151 >> 27;
        v152 = (v149 + 5);
        v153 = v152 & 7;
        v154 = (unsigned int *)((char *)v150 + (v152 >> 3));
        v155 = bswap32(*v154) << (v152 & 7);
        if (v154 > v3)
          v154 = v3;
        *(_DWORD *)(a3 + 500) = v155 >> 27;
        v156 = (v153 + 5);
        v157 = ((_BYTE)v153 + 5) & 7;
        v158 = (unsigned int *)((char *)v154 + (v156 >> 3));
        v159 = bswap32(*v158) << (v156 & 7);
        if (v158 > v3)
          v158 = v3;
        *(_DWORD *)(a3 + 504) = v159 >> 27;
        v46 = ((_BYTE)v157 + 5) & 7;
        v160 = (unsigned int *)((char *)v158 + ((unint64_t)(v157 + 5) >> 3));
        v48 = bswap32(*v160) << ((v157 + 5) & 7);
        if (v160 <= v3)
          v49 = v160;
        else
          v49 = v3;
        break;
      }
    }
  }
  *(_BYTE *)(a3 + 66) = v48 < 0;
  v50 = (v46 + 1);
  v51 = ((_BYTE)v46 + 1) & 7;
  v52 = (unsigned int *)((char *)v49 + (v50 >> 3));
  v53 = bswap32(*v52) << (v50 & 7);
  if (v52 > v3)
    v52 = v3;
  if (v48 < 0)
  {
    v170 = __clz(v53);
    if (v170)
      v171 = (v53 << (v170 + 1)) >> -(char)v170;
    else
      v171 = 0;
    v172 = v171 + ~(-1 << v170);
    *(_DWORD *)(a3 + 96) = v172;
    if (v172 > 0x1F)
      return 4294958327;
    v173 = 0;
    v174 = v51 + 2 * v170 + 1;
    v175 = (unsigned int *)((char *)v52 + (v174 >> 3));
    if (v175 <= v3)
      v176 = v175;
    else
      v176 = v3;
    v177 = v174 & 7;
    *(_DWORD *)(a3 + 100) = bswap32(*v175) << v177 >> 28;
    v178 = (v177 + 4);
    v179 = v178 & 7;
    v180 = (unsigned int *)((char *)v176 + (v178 >> 3));
    v181 = bswap32(*v180) << v179;
    if (v180 > v3)
      v180 = v3;
    *(_DWORD *)(a3 + 104) = v181 >> 28;
    v182 = (v179 + 4);
    v183 = ((_BYTE)v179 + 4) & 7;
    v184 = (unsigned int *)((char *)v180 + (v182 >> 3));
    v185 = bswap32(*v184) << (v182 & 7);
    if (v184 <= v3)
      v186 = v184;
    else
      v186 = v3;
    do
    {
      if (v185 < 0x80000)
      {
        v193 = (v183 + 1);
        v194 = ((_BYTE)v183 + 1) & 7;
        v195 = (unsigned int *)((char *)v186 + (v193 >> 3));
        v196 = bswap32(*v195) << (v193 & 7);
        if (v195 > v3)
          v195 = v3;
        v197 = -1;
        do
        {
          v198 = v196;
          v199 = v197;
          v200 = (v194 + 1);
          v194 = ((_BYTE)v194 + 1) & 7;
          v195 = (unsigned int *)((char *)v195 + (v200 >> 3));
          v196 = bswap32(*v195) << (v200 & 7);
          if (v195 > v3)
            v195 = v3;
          ++v197;
        }
        while ((v198 & 0x80000000) == 0);
        v201 = v199 + 2;
        v202 = a3 + 4 * v173;
        if (v201 > 0x1F)
        {
          *(_DWORD *)(v202 + 108) = -2;
          return 4294958327;
        }
        v203 = v194 + v201;
        if (v201 > 0x18)
        {
          v205 = v196 >> (47 - v197);
          v190 = ((_BYTE)v194 + (_BYTE)v201) & 7;
          v206 = (unsigned int *)((char *)v195 + ((unint64_t)(v203 - 16) >> 3));
          v207 = bswap32(*v206) << (v203 & 7);
          if (v206 > v3)
            v206 = v3;
          v208 = *(unsigned int *)((char *)v206 + 2);
          v191 = (unsigned int *)((char *)v206 + 2);
          v192 = bswap32(v208) << v190;
          if (v191 > v3)
            v191 = v3;
          v204 = __PAIR64__(v205, v207) >> 16;
        }
        else
        {
          v204 = v196 >> ~(_BYTE)v197;
          v190 = ((_BYTE)v194 + (_BYTE)v201) & 7;
          v191 = (unsigned int *)((char *)v195 + (v203 >> 3));
          v192 = bswap32(*v191) << (v203 & 7);
          if (v191 > v3)
            v191 = v3;
        }
        *(_DWORD *)(v202 + 108) = v204 + ~(-1 << v201);
      }
      else
      {
        v187 = __clz(v185);
        v188 = v185 << (v187 + 1) >> -(char)v187;
        if (!v187)
          v188 = 0;
        *(_DWORD *)(a3 + 4 * v173 + 108) = v188 + ~(-1 << v187);
        v189 = v183 + 2 * v187 + 1;
        v190 = ((_BYTE)v183 + 2 * (_BYTE)v187 + 1) & 7;
        v191 = (unsigned int *)((char *)v186 + (v189 >> 3));
        v192 = bswap32(*v191) << (v189 & 7);
        if (v191 > v3)
          v191 = v3;
      }
      if (v192 < 0x80000)
      {
        v217 = (v190 + 1);
        v218 = ((_BYTE)v190 + 1) & 7;
        v219 = (unsigned int *)((char *)v191 + (v217 >> 3));
        v220 = bswap32(*v219) << (v217 & 7);
        if (v219 <= v3)
          v221 = v219;
        else
          v221 = v3;
        v222 = -1;
        do
        {
          v223 = v220;
          v224 = v222;
          v225 = (v218 + 1);
          v218 = ((_BYTE)v218 + 1) & 7;
          v221 = (unsigned int *)((char *)v221 + (v225 >> 3));
          v220 = bswap32(*v221) << (v225 & 7);
          if (v221 > v3)
            v221 = v3;
          ++v222;
        }
        while ((v223 & 0x80000000) == 0);
        v226 = v224 + 2;
        if (v226 > 0x1F)
        {
          v301 = a3 + 4 * v173;
          goto LABEL_272;
        }
        v227 = v218 + v226;
        if (v226 > 0x18)
        {
          v229 = v220 >> (47 - v222);
          v213 = ((_BYTE)v218 + (_BYTE)v226) & 7;
          v230 = (unsigned int *)((char *)v221 + ((unint64_t)(v227 - 16) >> 3));
          v231 = bswap32(*v230) << (v227 & 7);
          if (v230 <= v3)
            v232 = v230;
          else
            v232 = v3;
          v233 = *(unsigned int *)((char *)v232 + 2);
          v216 = (unsigned int *)((char *)v232 + 2);
          v215 = bswap32(v233) << v213;
          if (v216 > v3)
            v216 = v3;
          v228 = __PAIR64__(v229, v231) >> 16;
        }
        else
        {
          v228 = v220 >> ~(_BYTE)v222;
          v213 = ((_BYTE)v218 + (_BYTE)v226) & 7;
          v216 = (unsigned int *)((char *)v221 + (v227 >> 3));
          v215 = bswap32(*v216) << (v227 & 7);
          if (v216 > v3)
            v216 = v3;
        }
        v234 = v228 + ~(-1 << v226);
        v211 = v173;
        *(_DWORD *)(a3 + 4 * v173 + 236) = v234;
      }
      else
      {
        v209 = __clz(v192);
        v210 = v192 << (v209 + 1) >> -(char)v209;
        if (!v209)
          v210 = 0;
        v211 = v173;
        *(_DWORD *)(a3 + 4 * v173 + 236) = v210 + ~(-1 << v209);
        v212 = v190 + 2 * v209 + 1;
        v213 = v212 & 7;
        v214 = (unsigned int *)((char *)v191 + (v212 >> 3));
        v215 = bswap32(*v214) << (v212 & 7);
        if (v214 <= v3)
          v216 = v214;
        else
          v216 = v3;
      }
      *(_DWORD *)(a3 + 4 * v211 + 364) = v215 >> 31;
      v235 = (v213 + 1);
      v183 = ((_BYTE)v213 + 1) & 7;
      v186 = (unsigned int *)((char *)v216 + (v235 >> 3));
      v185 = bswap32(*v186) << v183;
      if (v186 > v3)
        v186 = v3;
      ++v173;
    }
    while (v173 <= v172);
    *(_DWORD *)(a3 + 492) = v185 >> 27;
    v236 = ((_BYTE)v183 + 5) & 7;
    v237 = (unsigned int *)((char *)v186 + ((unint64_t)(v183 + 5) >> 3));
    v238 = bswap32(*v237) << v236;
    if (v237 > v3)
      v237 = v3;
    *(_DWORD *)(a3 + 496) = v238 >> 27;
    v239 = (v236 + 5);
    v240 = v239 & 7;
    v241 = (unsigned int *)((char *)v237 + (v239 >> 3));
    v242 = bswap32(*v241) << (v239 & 7);
    if (v241 > v3)
      v241 = v3;
    *(_DWORD *)(a3 + 500) = v242 >> 27;
    v243 = (v240 + 5);
    v244 = ((_BYTE)v240 + 5) & 7;
    v245 = (unsigned int *)((char *)v241 + (v243 >> 3));
    v246 = bswap32(*v245) << (v243 & 7);
    if (v245 > v3)
      v245 = v3;
    *(_DWORD *)(a3 + 504) = v246 >> 27;
    v51 = ((_BYTE)v244 + 5) & 7;
    v247 = (unsigned int *)((char *)v245 + ((unint64_t)(v244 + 5) >> 3));
    v53 = bswap32(*v247) << ((v244 + 5) & 7);
    if (v247 <= v3)
      v52 = v247;
    else
      v52 = v3;
    goto LABEL_225;
  }
  if (v44 < 0)
  {
LABEL_225:
    *(_BYTE *)(a3 + 67) = v53 < 0;
    v248 = (v51 + 1);
    v51 = ((_BYTE)v51 + 1) & 7;
    v249 = (unsigned int *)((char *)v52 + (v248 >> 3));
    v53 = bswap32(*v249) << v51;
    if (v249 <= v3)
      v52 = v249;
    else
      v52 = v3;
  }
  *(_BYTE *)(a3 + 68) = v53 < 0;
  v250 = ((_BYTE)v51 + 1) & 7;
  v251 = (unsigned int *)((char *)v52 + ((unint64_t)(v51 + 1) >> 3));
  v252 = bswap32(*v251) << v250;
  if (v251 > v3)
    v251 = v3;
  *(_BYTE *)(a3 + 69) = v252 < 0;
  v253 = (v250 + 1);
  v254 = ((_BYTE)v250 + 1) & 7;
  v255 = (unsigned int *)((char *)v251 + (v253 >> 3));
  v256 = bswap32(*v255) << (v253 & 7);
  if (v255 <= v3)
    v257 = v255;
  else
    v257 = v3;
  if ((v252 & 0x80000000) == 0)
    goto LABEL_234;
  *(_BYTE *)(a3 + 70) = v256 < 0;
  v259 = (v254 + 1);
  v260 = ((_BYTE)v254 + 1) & 7;
  v261 = (unsigned int *)((char *)v257 + (v259 >> 3));
  LODWORD(v259) = bswap32(*v261) << (v259 & 7);
  v262 = __clz(v259);
  v263 = (_DWORD)v259 << (v262 + 1) >> -(char)v262;
  v264 = v262 ? v263 : 0;
  v265 = v264 + ~(-1 << v262);
  *(_DWORD *)(a3 + 72) = v265;
  if (v265 > 0x10)
    return 4294958327;
  if (v261 > v3)
    v261 = v3;
  v266 = v260 + 2 * v262 + 1;
  v267 = (unsigned int *)((char *)v261 + (v266 >> 3));
  v268 = v266 & 7;
  v269 = bswap32(*v267) << (v266 & 7);
  v270 = __clz(v269);
  v271 = v269 << (v270 + 1) >> -(char)v270;
  if (!v270)
    v271 = 0;
  v272 = v271 + ~(-1 << v270);
  *(_DWORD *)(a3 + 76) = v272;
  if (v272 > 0x10)
    return 4294958327;
  v273 = v267 <= v3 ? v267 : v3;
  v274 = v268 + 2 * v270 + 1;
  v275 = (unsigned int *)((char *)v273 + (v274 >> 3));
  v276 = v274 & 7;
  v277 = bswap32(*v275) << v276;
  v278 = __clz(v277);
  v279 = v277 << (v278 + 1) >> -(char)v278;
  v280 = v278 ? v279 : 0;
  v281 = v280 + ~(-1 << v278);
  *(_DWORD *)(a3 + 80) = v281;
  if (v281 > 0x10)
    return 4294958327;
  if (v275 > v3)
    v275 = v3;
  v282 = v276 + 2 * v278 + 1;
  v283 = (unsigned int *)((char *)v275 + (v282 >> 3));
  if (v283 <= v3)
    v284 = v283;
  else
    v284 = v3;
  v285 = v282 & 7;
  v286 = bswap32(*v283) << v285;
  v287 = __clz(v286);
  v288 = v286 << (v287 + 1) >> -(char)v287;
  if (!v287)
    v288 = 0;
  v289 = v288 + ~(-1 << v287);
  *(_DWORD *)(a3 + 84) = v289;
  v290 = v285 + 2 * v287 + 1;
  v291 = (unsigned int *)((char *)v284 + (v290 >> 3));
  v292 = v291 <= v3 ? v291 : v3;
  if (v289 > 0x10)
    return 4294958327;
  v293 = v290 & 7;
  v294 = bswap32(*v291) << (v290 & 7);
  if (v294 < 0x80000)
  {
    v303 = (v293 + 1);
    v304 = ((_BYTE)v293 + 1) & 7;
    v305 = (unsigned int *)((char *)v292 + (v303 >> 3));
    v306 = bswap32(*v305) << v304;
    if (v305 <= v3)
      v307 = v305;
    else
      v307 = v3;
    v308 = -1;
    do
    {
      v309 = v306;
      v310 = v308;
      v311 = (v304 + 1);
      v304 = ((_BYTE)v304 + 1) & 7;
      v307 = (unsigned int *)((char *)v307 + (v311 >> 3));
      v306 = bswap32(*v307) << (v311 & 7);
      if (v307 > v3)
        v307 = v3;
      ++v308;
    }
    while ((v309 & 0x80000000) == 0);
    v312 = v310 + 2;
    if (v312 > 0x1F)
    {
      *(_DWORD *)(a3 + 88) = -2;
      return 4294958327;
    }
    v313 = v304 + v312;
    if (v312 > 0x18)
    {
      v315 = v306 >> (47 - v308);
      v254 = ((_BYTE)v304 + (_BYTE)v312) & 7;
      v316 = (unsigned int *)((char *)v307 + ((unint64_t)(v313 - 16) >> 3));
      v317 = bswap32(*v316) << (v313 & 7);
      if (v316 > v3)
        v316 = v3;
      v318 = *(unsigned int *)((char *)v316 + 2);
      v299 = (unsigned int *)((char *)v316 + 2);
      v300 = bswap32(v318) << v254;
      if (v299 > v3)
        v299 = v3;
      v314 = __PAIR64__(v315, v317) >> 16;
    }
    else
    {
      v314 = v306 >> ~(_BYTE)v308;
      v254 = ((_BYTE)v304 + (_BYTE)v312) & 7;
      v299 = (unsigned int *)((char *)v307 + (v313 >> 3));
      v300 = bswap32(*v299) << (v313 & 7);
      if (v299 > v3)
        v299 = v3;
    }
    v297 = v314 + ~(-1 << v312);
    *(_DWORD *)(a3 + 88) = v297;
  }
  else
  {
    v295 = __clz(v294);
    v296 = v294 << (v295 + 1) >> -(char)v295;
    if (!v295)
      v296 = 0;
    v297 = v296 + ~(-1 << v295);
    *(_DWORD *)(a3 + 88) = v297;
    v298 = v293 + 2 * v295 + 1;
    v254 = v298 & 7;
    v299 = (unsigned int *)((char *)v292 + (v298 >> 3));
    v300 = bswap32(*v299) << (v298 & 7);
    if (v299 > v3)
      v299 = v3;
  }
  if (v300 < 0x80000)
  {
    v323 = (v254 + 1);
    v254 = ((_BYTE)v254 + 1) & 7;
    v324 = (unsigned int *)((char *)v299 + (v323 >> 3));
    v325 = bswap32(*v324) << (v323 & 7);
    if (v324 > v3)
      v324 = v3;
    v326 = -1;
    do
    {
      v327 = v325;
      v328 = v326;
      v329 = (v254 + 1);
      v254 = ((_BYTE)v254 + 1) & 7;
      v324 = (unsigned int *)((char *)v324 + (v329 >> 3));
      v325 = bswap32(*v324) << (v329 & 7);
      if (v324 > v3)
        v324 = v3;
      ++v326;
    }
    while ((v327 & 0x80000000) == 0);
    v330 = v328 + 2;
    if (v330 > 0x1F)
    {
      *(_DWORD *)(a3 + 92) = -2;
      return 4294958327;
    }
    v331 = v254 + v330;
    if (v330 > 0x18)
    {
      v333 = v325 >> (47 - v326);
      LOBYTE(v254) = (v254 + v330) & 7;
      v334 = (unsigned int *)((char *)v324 + ((unint64_t)(v331 - 16) >> 3));
      v335 = bswap32(*v334) << (v331 & 7);
      if (v334 <= v3)
        v336 = v334;
      else
        v336 = v3;
      v337 = *(unsigned int *)((char *)v336 + 2);
      v257 = (unsigned int *)((char *)v336 + 2);
      v256 = bswap32(v337) << v254;
      if (v257 > v3)
        v257 = v3;
      v332 = __PAIR64__(v333, v335) >> 16;
    }
    else
    {
      v332 = v325 >> ~(_BYTE)v326;
      LOBYTE(v254) = (v254 + v330) & 7;
      v257 = (unsigned int *)((char *)v324 + (v331 >> 3));
      v256 = bswap32(*v257) << (v331 & 7);
      if (v257 > v3)
        v257 = v3;
    }
    v321 = v332 + ~(-1 << v330);
    *(_DWORD *)(a3 + 92) = v321;
  }
  else
  {
    v319 = __clz(v300);
    v320 = v300 << (v319 + 1) >> -(char)v319;
    if (!v319)
      v320 = 0;
    v321 = v320 + ~(-1 << v319);
    *(_DWORD *)(a3 + 92) = v321;
    v322 = v254 + 2 * v319 + 1;
    LOBYTE(v254) = (v254 + 2 * v319 + 1) & 7;
    v257 = (unsigned int *)((char *)v299 + (v322 >> 3));
    v256 = bswap32(*v257) << v254;
    if (v257 > v3)
      v257 = v3;
  }
  v338 = *(_DWORD *)(a2 + 1320) > v321 || v321 > 0x10;
  if (v338 || v297 > v321)
    return 4294958327;
LABEL_234:
  v258 = 0;
  *(_QWORD *)(a1 + 16) = v257;
  *(_DWORD *)(a1 + 32) = v256;
  *(_BYTE *)(a1 + 36) = v254;
  return v258;
}

uint64_t sub_1B68CD294(unsigned int *a1, unsigned int a2, uint64_t a3, _BYTE *a4, _BYTE *a5, _BYTE *a6)
{
  unsigned __int8 *v10;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  char *v26;
  unsigned int v27;
  char v28;
  char v29[1328];
  int v30;
  int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  char v39;
  char v40;
  int v41;
  uint64_t v42;
  char v43;
  int v44;
  unsigned __int8 v45;
  char v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 4294958327;
  v22 = a1;
  v27 = bswap32(*a1);
  v28 = 0;
  v25 = a1;
  v26 = (char *)a1 + a2;
  v23 = a2;
  v24 = a2;
  if (!*(v26 - 1))
  {
    v10 = (unsigned __int8 *)a1 + a2 - 2;
    do
    {
      if (!a2)
        break;
      --a2;
    }
    while (!*v10--);
    v24 = a2;
  }
  result = sub_1B68CAF64((uint64_t)&v22, v29);
  if (!(_DWORD)result)
  {
    *a5 = v49;
    *a6 = v50;
    *a4 = 0;
    v13 = 16 * v30 + 16;
    v14 = v32;
    v15 = 32 - 16 * v32 + (32 - 16 * v32) * v31;
    *(_DWORD *)a3 = v13;
    *(_DWORD *)(a3 + 4) = v15;
    v16 = v34;
    if (v34)
    {
      v17 = 4 - 2 * v14;
      v16 = 2 * v35;
      v13 -= 2 * v36;
      v18 = v37 * v17;
      v15 -= v38 * v17;
    }
    else
    {
      v18 = 0;
    }
    *(_DWORD *)(a3 + 8) = v16;
    *(_DWORD *)(a3 + 12) = v13;
    *(_DWORD *)(a3 + 16) = v18;
    *(_DWORD *)(a3 + 20) = v15;
    v19 = v33;
    *(_DWORD *)(a3 + 24) = v14;
    *(_DWORD *)(a3 + 28) = v19;
    *(_DWORD *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = xmmword_1B6917E10;
    *(_OWORD *)(a3 + 48) = xmmword_1B6917C10;
    if (!v39)
      return 0;
    if (v40)
    {
      v20 = v41;
      *(_DWORD *)(a3 + 56) = v41;
      if (v20 == 255)
        *(_QWORD *)(a3 + 60) = v42;
    }
    if (v43 && (v21 = v45, *(_DWORD *)(a3 + 32) = v44, *(_DWORD *)(a3 + 36) = v21, v46))
    {
      result = 0;
      *(_DWORD *)(a3 + 40) = 1;
      *(_QWORD *)(a3 + 44) = v47;
      *(_DWORD *)(a3 + 52) = v48;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1B68CD46C(uint64_t a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
      free(v2);
    *(_QWORD *)(a1 + 48) = 0;
    v3 = *(void **)(a1 + 56);
    if (v3)
      free(v3);
    *(_QWORD *)(a1 + 56) = 0;
  }
}

uint64_t sub_1B68CD4AC(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  uint64_t result;

  if (a2 <= 0)
  {
    *(_DWORD *)(a1 + 40) = 0;
    result = 4294958327;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else if (*(_DWORD *)(a1 + 40) >= a2)
  {
    return 0;
  }
  else
  {
    free(*(void **)(a1 + 48));
    free(*(void **)(a1 + 56));
    *(_DWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v4 = malloc_type_malloc(4 * a2, 0x82ECD37AuLL);
    *(_QWORD *)(a1 + 48) = v4;
    if (v4 && (v5 = malloc_type_malloc(8 * a2, 0x82ECD37AuLL), (*(_QWORD *)(a1 + 56) = v5) != 0))
    {
      result = 0;
      *(_DWORD *)(a1 + 40) = a2;
    }
    else
    {
      return 4294967188;
    }
  }
  return result;
}

float sub_1B68CD554(uint64_t a1, unsigned int a2, int a3, float a4)
{
  uint64_t *v4;
  float v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  float result;

  v4 = (uint64_t *)(a1 + 205840);
  v5 = a4;
  if (*(_DWORD *)(a1 + 205904))
  {
    v5 = *(float *)(a1 + 205864);
    v6 = *v4;
    v7 = *(unsigned __int16 *)(*v4 + 4720);
    if (v7)
    {
      v8 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 4712) + 2 * a2);
      if (a3)
      {
        if (a3 == 1)
          v9 = *(char *)(v6 + 19308);
        else
          v9 = 0;
      }
      else
      {
        v9 = *(char *)(v6 + 19309);
      }
      v10 = v5 + (float)v9;
      v11 = *(float *)(v6 + 4732);
      v12 = v10 * 0.25;
      v13 = (float)v7;
      v14 = v8 >= v7;
      v15 = v8 - v7;
      v16 = -4.0;
      if (v15 != 0 && v14)
        v16 = 4.0;
      if (v15 < 0)
        v15 = -v15;
      v17 = fminf(v11, 1.0);
      v18 = (float)((float)(v16 * (float)v15) * v11) / v13;
      v19 = -(float)(v12 * v17);
      if (v18 >= v19)
      {
        v20 = v12 * v17;
        v19 = v18;
        if (v18 > v20)
          v19 = v20;
      }
      v21 = v19 + v10;
      v5 = 0.0;
      if (v21 >= 0.0)
      {
        v5 = v21;
        if (v21 > 51.0)
          v5 = 51.0;
      }
    }
  }
  v22 = (int)(float)(v5 + 0.5) - (int)a4;
  if (v22 < -26)
    v5 = a4 + -26.0;
  result = a4 + 25.0;
  if (v22 <= 25)
    return v5;
  return result;
}

uint64_t sub_1B68CD66C(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 205840) + 19164))
    return 0;
  v2 = 0;
  v3 = *(_DWORD *)(a1 + 57096);
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 205840) + 19180);
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 205840) + 19184);
  v6 = v4 >> 1;
  v7 = v5 >> 1;
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 205840) + 19188);
  if (v8 > 179)
  {
    if (v8 != 180)
    {
      if (v8 != 270)
        return v2;
      goto LABEL_8;
    }
  }
  else if (v8)
  {
    if (v8 != 90)
      return v2;
LABEL_8:
    v9 = v6 + 8;
    v10 = v7 + 8;
    v11 = v4 + 8;
    v12 = v7 + 8;
    goto LABEL_10;
  }
  v9 = v6 + 8;
  v10 = v7 + 8;
  v12 = v5 + 8;
  v11 = v6 + 8;
LABEL_10:
  v13 = ((16 * (a2 / v3)) | 8) - (*(_DWORD *)(*(_QWORD *)(a1 + 205840) + 19176) + v7);
  if (v13 < 0)
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 205840) + 19176) + v7 - ((16 * (a2 / v3)) | 8);
  if (v13 >= v12)
    return 0;
  v14 = ((16 * (a2 % v3)) | 8) - (*(_DWORD *)(*(_QWORD *)(a1 + 205840) + 19172) + v6);
  if (v14 < 0)
    v14 = -v14;
  if (v14 >= v11)
    return 0;
  if (v13 < v10 && v14 < v9)
    return 1;
  else
    return 2;
}

void sub_1B68CD758(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unsigned __int8 *v29;
  int v30;
  unint64_t v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  int v45;
  int v46;
  __int128 v47;
  int v48;
  int v49;
  _BOOL4 v50;
  int v51;
  unsigned int v52;
  const void *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int32x2_t *v66;
  int v67;
  char v68;
  _BYTE *v69;
  int32x2_t v70;
  BOOL v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  _DWORD *v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  _DWORD *v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int16 *v87;
  int v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  int v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t i;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t j;
  int v125;
  uint64_t k;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t m;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  char v153;
  uint64_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  char *v162;
  int64x2_t v163;
  int8x16_t v164;
  int64x2_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  uint64_t v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  _BOOL4 v175;
  uint64_t v177;
  unsigned int v178;
  int *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  __int128 *v187;
  __int128 v188;
  uint64_t v189;
  __int128 *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  __int128 *v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  __int128 *v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  __int128 *v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  __int128 *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t n;
  uint64_t v220;
  int v221;
  char v222;
  char v223;
  BOOL v224;
  uint64_t ii;
  uint64_t v226;
  int v227;
  char v228;
  char v229;
  BOOL v230;
  uint64_t jj;
  uint64_t v232;
  int v233;
  char v234;
  char v235;
  BOOL v236;
  uint64_t kk;
  uint64_t v238;
  int v239;
  char v240;
  char v241;
  BOOL v242;
  uint64_t mm;
  uint64_t v244;
  int v245;
  char v246;
  char v247;
  BOOL v248;
  uint64_t nn;
  uint64_t v250;
  int v251;
  char v252;
  char v253;
  BOOL v254;
  uint64_t i1;
  _BYTE *v256;
  int v257;
  char v258;
  char v259;
  BOOL v260;
  uint64_t v261;
  int32x4_t v262;
  const char *v263;
  int16x8_t v264;
  int16x8_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  uint16x8_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  char *v274;
  _BYTE *v275;
  int v276;
  char v277;
  char v278;
  BOOL v279;
  uint64_t i2;
  _BYTE *v281;
  int v282;
  char v283;
  char v284;
  BOOL v285;
  uint64_t i3;
  uint64_t v287;
  int v288;
  char v289;
  char v290;
  BOOL v291;
  uint64_t i4;
  uint64_t v293;
  int v294;
  char v295;
  char v296;
  BOOL v297;
  uint64_t i5;
  _BYTE *v299;
  int v300;
  char v301;
  char v302;
  BOOL v303;
  uint64_t v304;
  char *v305;
  _BYTE *v306;
  int v307;
  char v308;
  char v309;
  BOOL v310;
  uint64_t i6;
  uint64_t v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  uint64_t v320;
  unsigned __int16 *v321;
  uint64_t v322;
  int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  int v330;
  signed int v331;
  unsigned int v332;
  int v333;
  int v334;
  signed int v335;
  int v336;
  unsigned int v337;
  signed int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  BOOL v342;
  uint64_t v343;
  signed int v344;
  BOOL v345;
  uint64_t v346;
  uint64_t v347;
  __int128 v348;
  __int128 v349;
  unsigned int v350;
  _BOOL4 v352;
  int v354;
  _BOOL4 v356;
  int v357;
  float v358;
  unsigned __int8 *v359;
  unsigned int v360;
  float v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  unsigned __int8 *v377;
  uint64_t v378;
  uint64_t v379;
  char v380;
  int v381;
  int v382;
  int v383;
  unsigned int v384;
  int v385;
  int v387;
  _BYTE *v388;
  BOOL v389;
  BOOL v390;
  BOOL v391;
  char v392;
  BOOL v393;
  BOOL v394;
  char v395;
  char v396;
  BOOL v397;
  BOOL v398;
  BOOL v399;
  BOOL v400;
  char v401;
  char v402;
  char v403;
  char v404;
  char v405;
  char v406;
  char v407;
  char v408;
  _BYTE *v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  _QWORD *v413;
  const void *v414;
  double v415;
  int8x8_t v416;
  uint64_t v417;
  uint64_t v418;
  _WORD *v419;
  uint64_t v420;
  char v421;
  int v422;
  uint64_t *v423;
  int v424;
  unsigned int v425;
  uint64_t v426;
  int v427;
  pthread_mutex_t *v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  pthread_mutex_t *v432;
  _WORD *v433;
  uint64_t v434;
  int v435;
  int v436;
  int v437;
  uint64_t v438;
  pthread_mutex_t *v439;
  pthread_mutex_t *v440;
  int v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t *v446;
  _QWORD *v447;
  uint64_t v448;
  unsigned int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  int v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t *v467;
  _QWORD *v468;
  uint64_t v469;
  pthread_mutex_t *v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t *v475;
  _QWORD *v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  unsigned int v480;
  _QWORD *v481;
  _QWORD *v482;
  _QWORD *v483;
  _QWORD *v484;
  char *v485;
  uint64_t v486;
  __int16 *v487;
  _WORD *v488;
  __int16 v489;
  char *v490;
  _QWORD *v491;
  _QWORD *v492;
  _QWORD *v493;
  int v494;
  int v495;
  _BYTE *v496;
  uint64_t v497;
  int v498;
  int v499;
  char v500;
  char v501;
  unsigned int v502;
  int v503;
  int v504;
  uint64_t v505;
  unsigned int v506;
  uint64_t v507;
  _BYTE *v508;
  __int16 v509;
  uint64_t v510;
  _DWORD *v511;
  int v512;
  unsigned int v513;
  unsigned int v514;
  char *v515;
  unsigned int v516;
  int v517;
  _DWORD *v518;
  uint64_t v519;
  _BYTE *v520;
  uint64_t v521;
  uint64_t v522;
  int v523;
  int v524;
  int v525;
  __int16 v526;
  unsigned int v527;
  unsigned __int16 v528;
  int v529;
  unsigned __int16 v530;
  unsigned __int16 v531;
  unsigned __int16 v532;
  unsigned __int16 v533;
  uint64_t v534;
  pthread_mutex_t *v535;
  pthread_mutex_t *v536;
  uint64_t v537;
  unsigned int v538;
  pthread_mutex_t *v539;
  pthread_mutex_t *v540;
  unsigned int v541;
  int v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint32x2_t v551;
  uint32x2_t v552;
  int v553;
  uint64_t v554;
  _BYTE *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  char v563;
  char v564;
  unsigned int v565;
  int v566;
  BOOL v567;
  int v568;
  int v569;
  int v570;
  int v571;
  _DWORD *v572;
  unsigned int v573;
  uint64_t v574;
  int v575;
  _DWORD *v576;
  unsigned int v577;
  unsigned int v578;
  _DWORD *v579;
  unsigned int v580;
  int v581;
  _DWORD *v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  unsigned int v586;
  unint64_t v587;
  int v588;
  _DWORD *v589;
  unsigned int v590;
  unsigned int v591;
  unsigned int v592;
  unsigned int v593;
  unint64_t v594;
  int v595;
  _DWORD *v596;
  unsigned int v597;
  unsigned int v598;
  unsigned int v599;
  unsigned int v600;
  unint64_t v601;
  int v602;
  _DWORD *v603;
  unsigned int v604;
  unsigned int v605;
  unsigned int v606;
  int v607;
  _DWORD *v608;
  unsigned int v609;
  unsigned int v610;
  char v611;
  uint64_t v612;
  unsigned int v613;
  char v614;
  uint64_t v615;
  unsigned int v616;
  unsigned int v617;
  unsigned int v618;
  unsigned int v619;
  unsigned int v620;
  unsigned int v621;
  int v622;
  int v623;
  unsigned int v624;
  unsigned int v625;
  unsigned int v626;
  unsigned int v627;
  unsigned int v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  unsigned int v633;
  char v634;
  uint64_t v635;
  unsigned int v636;
  char v637;
  uint64_t v638;
  unsigned int v639;
  unsigned int v640;
  unsigned int v641;
  unsigned int v642;
  unsigned int v643;
  unsigned int v644;
  unsigned int v645;
  unsigned int v646;
  unsigned int v647;
  int v648;
  unsigned int v649;
  char v650;
  uint64_t v651;
  unsigned int *v652;
  unsigned int v653;
  unsigned int v654;
  unsigned int v655;
  unsigned int v656;
  unsigned int v657;
  unsigned int v658;
  unsigned int v659;
  unsigned int v660;
  unsigned int v661;
  int v662;
  BOOL v663;
  char v664;
  _BOOL4 v666;
  unsigned int v667;
  unsigned int v668;
  unsigned int v669;
  unsigned int v670;
  unint64_t v671;
  int v672;
  _DWORD *v673;
  unsigned int v674;
  unsigned int v675;
  unsigned int v676;
  unsigned int v677;
  unsigned int v678;
  unsigned int v679;
  int v680;
  unsigned int v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  unsigned int v687;
  unsigned int v688;
  int v689;
  _DWORD *v690;
  unsigned int v691;
  int v692;
  int v693;
  unsigned int v694;
  unsigned int v695;
  unsigned int v696;
  unint64_t v697;
  int v698;
  _DWORD *v699;
  unsigned int v700;
  unsigned int v701;
  int v702;
  int v703;
  unsigned int v704;
  unsigned int v705;
  unsigned int v706;
  unsigned int v707;
  char v708;
  unsigned int v709;
  unsigned int v710;
  uint64_t v711;
  char v712;
  int v713;
  int v714;
  unsigned int v715;
  unsigned int v716;
  unsigned int v717;
  unint64_t v718;
  int v719;
  _DWORD *v720;
  unsigned int v721;
  int v722;
  int v723;
  unsigned int v724;
  unsigned int v725;
  unsigned int v726;
  unsigned int v727;
  int v728;
  unsigned int v729;
  uint64_t v730;
  uint64_t v731;
  unsigned int v732;
  unsigned int v733;
  int v734;
  _DWORD *v735;
  unsigned int v736;
  uint64_t v737;
  int v738;
  int v739;
  unsigned int v740;
  unsigned int v741;
  unsigned int v742;
  unint64_t v743;
  int v744;
  _DWORD *v745;
  unsigned int v746;
  unsigned int v747;
  int v748;
  int v749;
  unsigned int v750;
  unsigned int v751;
  unsigned int v752;
  unsigned int v753;
  uint64_t v754;
  char v755;
  _BYTE *v756;
  unsigned int v757;
  unsigned int v758;
  uint64_t v759;
  char v760;
  uint64_t v761;
  int v762;
  int v763;
  unsigned int v764;
  unsigned int v765;
  unsigned int v766;
  unint64_t v767;
  int v768;
  _DWORD *v769;
  unsigned int v770;
  int v771;
  int v772;
  unsigned int v773;
  unsigned int v774;
  unsigned int v775;
  unsigned int v776;
  uint64_t v777;
  unsigned int v778;
  unint64_t v779;
  _DWORD *v780;
  unsigned int v781;
  unsigned int v782;
  unsigned int v783;
  char v784;
  uint64_t v785;
  int v786;
  unsigned int v787;
  unsigned int v788;
  unsigned int v789;
  unsigned int v790;
  unsigned int v791;
  unsigned int v792;
  unsigned int v793;
  uint64_t v794;
  int v795;
  _DWORD *v796;
  unsigned int v797;
  unsigned int v798;
  unsigned int v799;
  unsigned int v800;
  int v801;
  unsigned int v802;
  unsigned int v803;
  unsigned int v804;
  unint64_t v805;
  int v806;
  _DWORD *v807;
  int v808;
  int v809;
  unsigned int v810;
  unsigned int v811;
  unsigned int v812;
  unsigned int v813;
  unsigned int v814;
  uint64_t v815;
  unsigned int v816;
  char v817;
  uint64_t v818;
  int *v819;
  int v820;
  unsigned int v821;
  unsigned int v822;
  unsigned int v823;
  unsigned int v824;
  unsigned int v825;
  unsigned int v826;
  unsigned int v827;
  int v828;
  unsigned int v829;
  unsigned int v830;
  unsigned int v831;
  unsigned int v832;
  unsigned int v833;
  unsigned int v834;
  unsigned int v835;
  unsigned int v836;
  unsigned int v837;
  char v838;
  uint64_t v839;
  unsigned int *v840;
  unsigned int v841;
  unsigned int v842;
  unsigned int v843;
  unsigned int v844;
  unsigned int v845;
  unsigned int v846;
  unsigned int v847;
  unsigned int v848;
  unsigned int v849;
  int v850;
  uint64_t v851;
  uint64_t *v852;
  int v853;
  uint64_t v854;
  int v855;
  int v856;
  uint64_t v857;
  _DWORD *v858;
  _DWORD *v859;
  int v860;
  char v861;
  uint64_t v862;
  uint64_t v863;
  _BOOL4 v864;
  signed int v865;
  int v866;
  signed int v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  int v871;
  int v872;
  _DWORD *v873;
  _DWORD *v874;
  signed int v875;
  signed int v876;
  unsigned int v877;
  unsigned int v878;
  unsigned int v879;
  unsigned int v880;
  char v881;
  uint64_t v882;
  unsigned __int8 *v883;
  int v884;
  uint64_t v885;
  int v886;
  uint64_t v887;
  uint64_t v889;
  int v890;
  _OWORD *v891;
  int v892;
  int v893;
  int v894;
  _BYTE *v895;
  int v896;
  uint64_t v897;
  _DWORD *v898;
  int v899;
  int v900;
  uint64_t v901;
  int v902;
  _QWORD *v903;
  _BOOL4 v904;
  int v905;
  uint64_t v906;
  int v907;
  uint64_t v908;
  _BYTE v909[12];
  __int128 v910;
  uint64_t v911;
  uint64_t v912;
  int8x16x2_t v913;
  int8x16x4_t v914;

  v912 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v858 = (_DWORD *)(*(_QWORD *)a1 + 57096);
  v3 = *(_QWORD *)a1 + 205456;
  v882 = *(unsigned int *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 36);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v5 + 12);
  v6 = *(_DWORD *)(v5 + 16);
  v887 = *(int *)(v5 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 205840);
  v868 = *(_QWORD *)a1;
  v857 = v5;
  v866 = *(_DWORD *)(a1 + 32);
  if (v866 != v7)
  {
    v855 = *(_DWORD *)(v5 + 16);
    v856 = *(_DWORD *)(a1 + 36);
    v865 = *(_DWORD *)(v5 + 12);
    v867 = *(_DWORD *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  v890 = *(_DWORD *)(v5 + 12);
  v892 = *(_DWORD *)(v5 + 16);
  v894 = *(_DWORD *)(a1 + 36);
  v9 = (int *)(v2 + 17736);
  v10 = *(_QWORD *)(v5 + 80);
  v11 = *(_DWORD *)(v8 + 1304);
  v12 = *(unsigned __int8 *)(v8 + 1368);
  v905 = *(_DWORD *)(v8 + 1288);
  if (*(_BYTE *)(v5 + 64))
  {
    *(_DWORD *)(v2 + 14200) = 0;
    v13 = 19;
  }
  else if (*(_BYTE *)(v8 + 1393))
  {
    v13 = 5;
  }
  else
  {
    v13 = 1;
  }
  v900 = v13;
  *(_QWORD *)(v2 + 14128) = v10;
  *(_QWORD *)(v2 + 14144) = v10;
  *(_DWORD *)(v2 + 14160) = 0;
  *(_BYTE *)(v2 + 14164) = 0;
  *(_DWORD *)(v2 + 47940) = *v858;
  *(_WORD *)(v2 + 48107) = 0;
  *(_WORD *)(v2 + 48104) = 0;
  *(_WORD *)(v2 + 48256) = 0;
  *(_DWORD *)(v2 + 47948) = 0;
  *(_BYTE *)(v2 + 47952) = 0;
  *(_QWORD *)(v2 + 47968) = 0;
  *(_QWORD *)(v2 + 47960) = 0;
  *(_OWORD *)(v2 + 48136) = 0u;
  *(_OWORD *)(v2 + 48152) = 0u;
  *(_QWORD *)(v2 + 48216) = 0;
  *(_QWORD *)(v2 + 48224) = 0;
  *(_QWORD *)&v47 = 0x1010101010101010;
  *((_QWORD *)&v47 + 1) = 0x1010101010101010;
  *(_OWORD *)(v2 + 48258) = v47;
  *(_OWORD *)(v2 + 48274) = v47;
  *(_OWORD *)(v2 + 48290) = v47;
  *(_OWORD *)(v2 + 48306) = v47;
  *(_OWORD *)(v2 + 48322) = v47;
  *(_OWORD *)(v2 + 48338) = v47;
  *(_OWORD *)(v2 + 48354) = v47;
  *(_OWORD *)(v2 + 48370) = v47;
  *(_OWORD *)(v2 + 48386) = v47;
  *(_OWORD *)(v2 + 48402) = v47;
  *(_OWORD *)(v2 + 48418) = v47;
  *(_OWORD *)(v2 + 48434) = v47;
  *(_OWORD *)(v2 + 48450) = v47;
  *(_OWORD *)(v2 + 48466) = v47;
  *(_QWORD *)(v2 + 48000) = 0;
  *(_BYTE *)(v2 + 48109) = 0;
  *(_QWORD *)(v2 + 48224) = *(_QWORD *)(v3 + 400);
  *(_BYTE *)(v2 + 48108) = *(_BYTE *)(v3 + 8) == 1;
  *(_QWORD *)(v2 + 46272) = v2 + 47104;
  *(_QWORD *)(v2 + 47960) = v2 + 19452;
  *(_QWORD *)(v2 + 47968) = v2 + 19520;
  *(_QWORD *)(v2 + 48096) = v2 + 46000;
  *(_QWORD *)(v2 + 47976) = v2 + 46288;
  v48 = sub_1B68CD66C(v868, v866);
  *(_BYTE *)(v2 + 50600) = v48;
  v49 = (int)(float)(sub_1B68CD554(v868, v866, v48, *(float *)(v3 + 408)) + 0.5);
  *(_BYTE *)(v2 + 47882) = v49;
  v50 = v12 == 1;
  if (v12 == 6)
    v50 = 1;
  v904 = v50;
  if (v12 == 6 || v12 == 1)
  {
    v51 = *(unsigned __int8 *)(v8 + 1359);
    if (v51 == 255)
      LOBYTE(v51) = *(_BYTE *)(*(_QWORD *)(v868 + 136) + 281);
    *(_DWORD *)(v2 + 17760) = (char)v51;
  }
  v52 = *(unsigned __int8 *)(v3 + 2220);
  v896 = v49;
  if (v52 >= 2 && *(float *)(v3 + 408) < (float)*(char *)(v3 + 2221))
    v52 = 1;
  *(_DWORD *)(v2 + 19440) = v52;
  *(_DWORD *)(v2 + 19444) = *(char *)(v3 + 2222);
  *(_DWORD *)(v2 + 19448) = *(char *)(v3 + 2223);
  memcpy((void *)(v2 + 17764), (const void *)(v868 + 206000), 0x68CuLL);
  if (*(_DWORD *)(v3 + 468) == 1)
    v53 = (const void *)(v868 + 56256);
  else
    v53 = (const void *)(*(_QWORD *)(v3 + 344) + 22840);
  v898 = (_DWORD *)(v2 + 14168);
  memcpy((void *)(v2 + 16920), v53, 0x348uLL);
  if (*(_DWORD *)(v3 + 540) == 1)
  {
    v54 = *(_DWORD *)(v8 + 4776);
    v55 = *(_DWORD *)(v2 + 17740);
    if (*v9 >= v54 + 1)
      v56 = v54 + 1;
    else
      v56 = *v9;
    *(_DWORD *)(v2 + 17744) = v56;
    v57 = *(_DWORD *)(v8 + 4780);
    if (v55 >= v57 + 1)
      v58 = v57 + 1;
    else
      v58 = v55;
    *(_DWORD *)(v2 + 17748) = v58;
  }
  if (*(_DWORD *)(v3 + 2376)
    && v866 < v866 / *(_DWORD *)(v3 + 2380) * *(_DWORD *)(v3 + 2380) + *(_DWORD *)(v3 + 2384) / 16)
  {
    if (*(_BYTE *)(v3 + 2220) == 3)
      v59 = 4;
    else
      v59 = 2;
    *(_DWORD *)(v2 + 19440) = v59;
  }
  v60 = *(_DWORD *)(v8 + 1276);
  v61 = *(unsigned __int8 *)(v8 + 1354);
  v62 = *(_BYTE *)(v8 + 101);
  v63 = *(_QWORD *)(v3 + 344);
  bzero(v898, 0xABCuLL);
  *(_DWORD *)(v2 + 14188) = *(_DWORD *)v3;
  *(_DWORD *)(v2 + 14192) = v11;
  v64 = v868 + 117544;
  v65 = *(_BYTE *)(v868 + 118608) != 0;
  if (*(_BYTE *)(v868 + 118608))
  {
    v62 = 0;
    v66 = (int32x2_t *)(v2 + 14164);
    *(_BYTE *)(v2 + 14196) = 0;
LABEL_56:
    v66[4].i8[1] = v62;
    goto LABEL_57;
  }
  v66 = (int32x2_t *)(v2 + 14164);
  *(_BYTE *)(v2 + 14196) = v61;
  if (v61)
    goto LABEL_56;
  v65 = 1;
LABEL_57:
  *(_DWORD *)(v2 + 14176) = v866;
  *(_DWORD *)(v2 + 14184) = v12;
  v67 = v900;
  if (v900 == 5)
    *(_DWORD *)(v2 + 14200) = v60 & 3;
  if (*(_BYTE *)(v868 + 117548))
    goto LABEL_613;
  *(_DWORD *)(v2 + 14204) = (*(_DWORD *)(v868 + 119144) - 1) & v905;
  v68 = !v65;
  if (!*(_BYTE *)(v3 + 9))
    v68 = 1;
  if ((v68 & 1) == 0)
    *(_DWORD *)(v2 + 14208) = 0;
  if (*(_BYTE *)(v3 + 86))
    goto LABEL_613;
  v69 = (_BYTE *)(v63 + 24536);
  *(_DWORD *)(v2 + 14220) = 0;
  if (v12 == 1)
    v66[7].i8[4] = *(_DWORD *)(v2 + 17760);
  v70 = vadd_s32(*(int32x2_t *)(v2 + 17744), (int32x2_t)-1);
  v66[8] = v70;
  v71 = v70.i32[0] != *(_DWORD *)(v3 + 56) || (v12 == 6 || v12 == 1) && v70.i32[1] != *(_DWORD *)(v3 + 60);
  v66[7].i8[5] = v71;
  v66[338].i8[5] = *(_BYTE *)(v63 + 24553);
  if (*v69)
  {
    v72 = 0;
    v66[9].i8[0] = 1;
    do
    {
      v73 = *(_DWORD *)(v63 + 23744 + 4 * v72);
      *(_DWORD *)(v2 + 14240 + 4 * v72) = v73;
      *(_DWORD *)(v2 + 14504 + 4 * v72) = *(_DWORD *)(v63 + 24008 + 4 * v72);
      *(_DWORD *)(v2 + 14768 + 4 * v72) = *(_DWORD *)(v63 + 24272 + 4 * v72);
      ++v72;
    }
    while (v73 != 3);
  }
  if (*(_BYTE *)(v63 + 24537) && (v12 == 6 || v12 == 1))
  {
    v74 = 0;
    v66[9].i8[1] = 1;
    do
    {
      v75 = *(_DWORD *)(v63 + 4 * v74 + 23876);
      v76 = (_DWORD *)(v2 + 4 * v74);
      v76[3593] = v75;
      v76[3659] = *(_DWORD *)(v63 + 4 * v74 + 24140);
      v76[3725] = *(_DWORD *)(v63 + 4 * v74++ + 24404);
    }
    while (v75 != 3);
  }
  if (*v69)
  {
    v77 = 0;
    v66[9].i8[0] = 1;
    do
    {
      v78 = *(_DWORD *)(v63 + 23744 + 4 * v77);
      *(_DWORD *)(v2 + 14240 + 4 * v77) = v78;
      *(_DWORD *)(v2 + 14504 + 4 * v77) = *(_DWORD *)(v63 + 24008 + 4 * v77);
      *(_DWORD *)(v2 + 14768 + 4 * v77) = *(_DWORD *)(v63 + 24272 + 4 * v77);
      ++v77;
    }
    while (v78 != 3);
  }
  if (*(_BYTE *)(v63 + 24537) && (v12 == 6 || v12 == 1))
  {
    v79 = 0;
    v66[9].i8[1] = 1;
    do
    {
      v80 = *(_DWORD *)(v63 + 4 * v79 + 23876);
      v81 = (_DWORD *)(v2 + 4 * v79);
      v81[3593] = v80;
      v81[3659] = *(_DWORD *)(v63 + 4 * v79 + 24140);
      v81[3725] = *(_DWORD *)(v63 + 4 * v79++ + 24404);
    }
    while (v80 != 3);
  }
  if (*(_QWORD *)(v63 + 24544))
  {
    v66[318].i8[0] = 1;
    v82 = *(_QWORD *)(v63 + 24544);
    if (v82)
    {
      v83 = (_DWORD *)&v66[334] + 1;
      do
      {
        *(v83 - 32) = *(_DWORD *)v82;
        *(v83 - 24) = *(_DWORD *)(v82 + 4);
        *(v83 - 16) = *(_DWORD *)(v82 + 8);
        *(v83 - 8) = *(_DWORD *)(v82 + 12);
        *v83++ = *(_DWORD *)(v82 + 16);
        v82 = *(_QWORD *)(v82 + 24);
      }
      while (v82);
    }
  }
  v66[340].i32[0] = v896 - *(_DWORD *)(v3 + 72) - 26;
  if ((v12 - 3) < 2)
    goto LABEL_613;
  switch(*(_DWORD *)(v2 + 19440))
  {
    case 1:
      v84 = 1;
      goto LABEL_623;
    case 2:
      v84 = 2;
LABEL_623:
      v66[341].i32[1] = v84;
      break;
    case 3:
      v66[341].i32[1] = 0;
      goto LABEL_626;
    case 4:
      v66[341].i32[1] = 2;
LABEL_626:
      v66[342] = *(int32x2_t *)(v2 + 19444);
      break;
    default:
      break;
  }
  if (*(_DWORD *)(v3 + 12) && (*(_DWORD *)(v3 + 16) - 3) < 3)
    goto LABEL_613;
  if (*(_BYTE *)(v3 + 2631))
  {
    v541 = *(unsigned __int8 *)(v8 + 1368);
    if (v541 <= 8 && ((1 << v541) & 0x16B) != 0)
    {
      if (*(_BYTE *)(v8 + 16))
      {
        if (v66[8].i32[0] < *(unsigned __int8 *)(v8 + 22))
          goto LABEL_640;
        v66[7].i8[5] = 1;
        v66[8].i32[0] = *(unsigned __int8 *)(v8 + 22) - 1;
        v542 = *(unsigned __int8 *)(v8 + 22);
      }
      else
      {
        if (!*(_BYTE *)(v8 + 24))
          goto LABEL_640;
        v542 = 1;
        v66[7].i8[5] = 1;
        v66[8].i32[0] = 0;
      }
      if (*v9 < v542)
        v542 = *v9;
      *(_DWORD *)(v2 + 17744) = v542;
    }
  }
LABEL_640:
  *(_BYTE *)(v2 + 48106) = 0;
  *(_QWORD *)(v2 + 48032) = v2 + 15032;
  if (*(_BYTE *)(v3 + 64) && (!v12 || v12 == 5)
    || *(_DWORD *)(v3 + 68) && (v12 == 1 || v12 == 6)
    || *(_BYTE *)(v3 + 473))
  {
    v543 = *(_QWORD *)(v3 + 344);
    *(_DWORD *)(v2 + 15036) = *(unsigned __int8 *)(v8 + 5024);
    *(_DWORD *)(v2 + 15040) = *(unsigned __int8 *)(v8 + 5025);
    if (!*(_BYTE *)(v3 + 473))
      *(_BYTE *)(v2 + 48106) = 1;
    v544 = 0;
    *(_QWORD *)&v910 = v543 + 22840;
    *((_QWORD *)&v910 + 1) = v543 + 23112;
    *(_QWORD *)&v909[4] = *(_QWORD *)(v543 + 23664);
    v545 = v2 + 15032;
    v546 = *(unsigned int *)(*(_QWORD *)(v3 + 344) + 8);
    v547 = 1;
    do
    {
      v907 = v547;
      v548 = *(unsigned int *)&v909[4 * v544 + 4];
      if ((int)v548 >= 1)
      {
        v549 = 0;
        v550 = *((_QWORD *)&v910 + v544);
        v551 = *(uint32x2_t *)(v2 + 15036);
        v552 = vshl_u32((uint32x2_t)0x100000001, v551);
        v553 = -1 << v551.i8[4];
        do
        {
          v554 = v545 + 32 * v544 + v549;
          *(_BYTE *)(v554 + 76) = 0;
          v555 = (_BYTE *)(v554 + 76);
          *(v555 - 64) = 0;
          v556 = v545 + 384 * v544 + 12 * v549;
          *(uint32x2_t *)(v556 + 140) = v552;
          v557 = v556 + 140;
          *(_QWORD *)(v557 + 768) = 0;
          *(_DWORD *)(v557 + 8) = v552.i32[1];
          *(_DWORD *)(v557 + 776) = 0;
          v558 = *(_QWORD *)(v550 + 8 * v549);
          if ((_DWORD)v546)
          {
            v559 = 0;
            v560 = v546;
            while (*(_DWORD *)(v558 + 1276) != *(_DWORD *)(v8 + (v544 << 7) + (v559 >> 54) + 18468))
            {
              v559 += 0x100000000000000;
              if (!--v560)
                goto LABEL_661;
            }
            if (*(_BYTE *)(v8 + 3 * (v559 >> 56) + 5026))
            {
              if (!*(_BYTE *)(v3 + 473))
                *(v555 - 64) = 1;
              v561 = v8 + 6 * (v559 >> 56);
              *(_DWORD *)v557 = *(__int16 *)(v561 + 5410);
              *(_DWORD *)(v557 + 768) = *(__int16 *)(v561 + 5794);
            }
          }
LABEL_661:
          if (*(_BYTE *)(v3 + 474))
          {
            v562 = 0;
            v563 = 1;
            do
            {
              v564 = v563;
              v565 = *(_DWORD *)(v558 + 4 * v562 + 4668);
              v566 = *(_DWORD *)(v8 + 4 * v562 + 4668);
              if (v565)
                v567 = v566 == 0;
              else
                v567 = 1;
              if (!v567)
              {
                v568 = (v566 << v551.i8[4]) / v565;
                v569 = v553 + v568;
                if (v553 + v568 < 0)
                  v569 = -v569;
                if (v569 > 1 << (v551.i8[4] - 6))
                {
                  *v555 = 1;
                  if (v568 <= -128)
                    v568 = -128;
                  if (v568 >= 127)
                    v568 = 127;
                  *(_DWORD *)(v2 + 384 * v544 + 12 * v549 + 4 * v562 + 15176) = v568;
                }
              }
              v563 = 0;
              v562 = 1;
            }
            while ((v564 & 1) != 0);
          }
          ++v549;
        }
        while (v549 != v548);
      }
      v544 = 1;
      v547 = 0;
    }
    while ((v904 & v907 & 1) != 0);
    v66 = (int32x2_t *)(v2 + 14164);
    v67 = v900;
    v64 = v868 + 117544;
  }
  v570 = *(unsigned __int8 *)(v8 + 1394);
  v571 = *(_BYTE *)(v8 + 1394) != 0;
  v572 = *(_DWORD **)(v2 + 14144);
  v573 = *(_DWORD *)(v2 + 14160);
  v574 = v66->u8[0];
  *v572 = bswap32(v573);
  v575 = (v574 + 1) & 7;
  v576 = (_DWORD *)((char *)v572 + ((unint64_t)(v574 + 1) >> 3));
  v577 = v573 << ((v574 + 1) & 0xF8);
  if (v574 >= 0x1F)
    v577 = 0;
  v578 = v577 | (v571 << (30 - v575));
  *v576 = bswap32(v578);
  v579 = (_DWORD *)((char *)v576 + ((unint64_t)(v575 + 2) >> 3));
  v580 = (v578 << ((v575 + 2) & 8)) | (v67 << (27 - ((v575 + 2) & 7)));
  *v579 = bswap32(v580);
  v581 = ((((_BYTE)v575 + 2) & 7) + 5) & 7;
  v582 = (_DWORD *)((char *)v579 + ((unint64_t)((((_BYTE)v575 + 2) & 7u) + 5) >> 3));
  v583 = v580 << ((((v575 + 2) & 7) + 5) & 8);
  v584 = *(_DWORD *)(v2 + 14176) + 1;
  v585 = __clz(v584);
  v586 = (((v584 - (0x80000000 >> v585)) | (0x80000000 >> v585)) << (2 * v585 - v581 - 31)) | v583;
  *v582 = bswap32(v586);
  v587 = v581 - 2 * v585 + 63;
  v588 = ((_BYTE)v581 - 2 * (_BYTE)v585 + 63) & 7;
  v589 = (_DWORD *)((char *)v582 + (v587 >> 3));
  v590 = v586 << (v587 & 0xF8);
  if (v587 >= 0x20)
    v590 = 0;
  v591 = *(_DWORD *)(v2 + 14184) + 1;
  v592 = __clz(v591);
  v593 = v590 | (((v591 - (0x80000000 >> v592)) | (0x80000000 >> v592)) << (2 * v592 - v588 - 31));
  *v589 = bswap32(v593);
  v594 = v588 - 2 * v592 + 63;
  v595 = ((_BYTE)v588 - 2 * (_BYTE)v592 + 63) & 7;
  v596 = (_DWORD *)((char *)v589 + (v594 >> 3));
  v597 = v593 << (v594 & 0xF8);
  if (v594 >= 0x20)
    v597 = 0;
  v598 = *(_DWORD *)(v2 + 14188) + 1;
  v599 = __clz(v598);
  v600 = v597 | (((v598 - (0x80000000 >> v599)) | (0x80000000 >> v599)) << (2 * v599 - v595 - 31));
  *v596 = bswap32(v600);
  v601 = v595 - 2 * v599 + 63;
  v602 = ((_BYTE)v595 - 2 * (_BYTE)v599 + 63) & 7;
  v603 = (_DWORD *)((char *)v596 + (v601 >> 3));
  v604 = v600 << (v601 & 0xF8);
  if (v601 >= 0x20)
    v604 = 0;
  v605 = v604 | (*(_DWORD *)(v2 + 14192) << (28 - *(_DWORD *)v64 - v602));
  *v603 = bswap32(v605);
  v606 = *(_DWORD *)v64 + v602 + 4;
  v607 = v606 & 7;
  v608 = (_DWORD *)((char *)v603 + (v606 >> 3));
  v609 = v605 << (v606 & 0xF8);
  if (v606 >= 0x20)
    v609 = 0;
  if (!*(_BYTE *)(v64 + 1064))
  {
    v610 = (v66[4].u8[0] << (v607 ^ 0x1F)) | v609;
    *v608 = bswap32(v610);
    v611 = v607 + 1;
    v612 = (v607 + 1) >> 3;
    v607 = (v607 + 1) & 7;
    v608 = (_DWORD *)((char *)v608 + v612);
    v609 = v610 << (v611 & 8);
    if (v66[4].i8[0])
    {
      v613 = (v66[4].u8[1] << (v607 ^ 0x1F)) | v609;
      *v608 = bswap32(v613);
      v614 = v607 + 1;
      v615 = (v607 + 1) >> 3;
      v607 = (v607 + 1) & 7;
      v608 = (_DWORD *)((char *)v608 + v615);
      v609 = v613 << (v614 & 8);
    }
  }
  if (v67 == 19 || v67 == 5)
  {
    v616 = *(_DWORD *)(v2 + 14200) + 1;
    v617 = __clz(v616);
    v618 = (((v616 - (0x80000000 >> v617)) | (0x80000000 >> v617)) << (2 * v617 - v607 - 31)) | v609;
    *v608 = bswap32(v618);
    v619 = v607 - 2 * v617 + 63;
    v607 = v619 & 7;
    v608 = (_DWORD *)((char *)v608 + (v619 >> 3));
    v609 = v618 << (v619 & 0xF8);
    if (v619 >= 0x20)
      v609 = 0;
  }
  if (*(_BYTE *)(v64 + 4) == 1)
  {
    if (*(_BYTE *)(v64 + 12))
      goto LABEL_613;
  }
  else if (!*(_BYTE *)(v64 + 4))
  {
    v620 = (*(_DWORD *)(v2 + 14204) << (28 - v607 - *(_DWORD *)(v64 + 8))) | v609;
    *v608 = bswap32(v620);
    v621 = v607 + *(_DWORD *)(v64 + 8) + 4;
    v607 = v621 & 7;
    v608 = (_DWORD *)((char *)v608 + (v621 >> 3));
    v609 = v620 << (v621 & 0xF8);
    if (v621 >= 0x20)
      v609 = 0;
    if (*(_BYTE *)(v3 + 9) == 1 && !v66[4].i8[0])
    {
      v622 = *(_DWORD *)(v2 + 14208);
      v623 = v622 <= 0 ? -2 * v622 : 2 * v622 - 1;
      v624 = v623 + 1;
      v625 = __clz(v624);
      v626 = (((v624 - (0x80000000 >> v625)) | (0x80000000 >> v625)) << (2 * v625 - v607 - 31)) | v609;
      *v608 = bswap32(v626);
      v627 = v607 - 2 * v625 + 63;
      v607 = v627 & 7;
      v608 = (_DWORD *)((char *)v608 + (v627 >> 3));
      v609 = v626 << (v627 & 0xF8);
      if (v627 >= 0x20)
        v609 = 0;
    }
  }
  if (*(_BYTE *)(v3 + 86))
  {
    v628 = *(_DWORD *)(v2 + 14220) + 1;
    v629 = __clz(v628);
    v630 = (((v628 - (0x80000000 >> v629)) | (0x80000000 >> v629)) << (2 * v629 - v607 - 31)) | v609;
    *v608 = bswap32(v630);
    v631 = v607 - 2 * v629 + 63;
    v607 = v631 & 7;
    v608 = (_DWORD *)((char *)v608 + (v631 >> 3));
    v609 = v630 << (v631 & 0xF8);
    if (v631 >= 0x20)
      v609 = 0;
  }
  v632 = *(_DWORD *)(v2 + 14184);
  if (v632 == 1)
  {
    v633 = (v66[7].u8[4] << (v607 ^ 0x1F)) | v609;
    *v608 = bswap32(v633);
    v634 = v607 + 1;
    v635 = (v607 + 1) >> 3;
    v607 = (v607 + 1) & 7;
    v608 = (_DWORD *)((char *)v608 + v635);
    v609 = v633 << (v634 & 8);
    v632 = *(_DWORD *)(v2 + 14184);
  }
  if (v632 > 8 || ((1 << v632) & 0x16B) == 0)
    goto LABEL_723;
  v636 = (v66[7].u8[5] << (v607 ^ 0x1F)) | v609;
  *v608 = bswap32(v636);
  v637 = v607 + 1;
  v638 = (v607 + 1) >> 3;
  v607 = (v607 + 1) & 7;
  v608 = (_DWORD *)((char *)v608 + v638);
  v609 = v636 << (v637 & 8);
  if (!v66[7].i8[5])
  {
    *(_DWORD *)(v2 + 14228) = *(_DWORD *)(v3 + 56);
    *(_DWORD *)(v2 + 14232) = *(_DWORD *)(v3 + 60);
LABEL_723:
    v643 = *(_DWORD *)(v2 + 14184);
    goto LABEL_724;
  }
  v639 = *(_DWORD *)(v2 + 14228) + 1;
  v640 = __clz(v639);
  v641 = (((v639 - (0x80000000 >> v640)) | (0x80000000 >> v640)) << (2 * v640 - v607 - 31)) | v609;
  *v608 = bswap32(v641);
  v642 = v607 - 2 * v640 + 63;
  v607 = v642 & 7;
  v608 = (_DWORD *)((char *)v608 + (v642 >> 3));
  v609 = v641 << (v642 & 0xF8);
  if (v642 >= 0x20)
    v609 = 0;
  v643 = *(_DWORD *)(v2 + 14184);
  if (v643 == 6 || v643 == 1)
  {
    v644 = *(_DWORD *)(v2 + 14232) + 1;
    v645 = __clz(v644);
    v646 = (((v644 - (0x80000000 >> v645)) | (0x80000000 >> v645)) << (2 * v645 - v607 - 31)) | v609;
    *v608 = bswap32(v646);
    v647 = v607 - 2 * v645 + 63;
    v607 = v647 & 7;
    v608 = (_DWORD *)((char *)v608 + (v647 >> 3));
    v609 = v646 << (v647 & 0xF8);
    if (v647 >= 0x20)
      v609 = 0;
    goto LABEL_723;
  }
LABEL_724:
  if (v643 > 9 || ((1 << v643) & 0x294) == 0)
  {
    v837 = (v66[9].u8[0] << (v607 ^ 0x1F)) | v609;
    *v608 = bswap32(v837);
    v838 = v607 + 1;
    v839 = (v607 + 1) >> 3;
    v607 = (v607 + 1) & 7;
    v608 = (_DWORD *)((char *)v608 + v839);
    v609 = v837 << (v838 & 8);
    if (v66[9].i8[0])
    {
      v840 = (unsigned int *)(v2 + 14240);
      while (1)
      {
        v841 = *v840;
        v842 = __clz(*v840 + 1);
        v843 = (((*v840 + 1 - (0x80000000 >> v842)) | (0x80000000 >> v842)) << (2 * v842 - v607 - 31)) | v609;
        *v608 = bswap32(v843);
        v844 = v607 - 2 * v842 + 63;
        v607 = v844 & 7;
        v608 = (_DWORD *)((char *)v608 + (v844 >> 3));
        v609 = v843 << (v844 & 0xF8);
        if (v844 >= 0x20)
          v609 = 0;
        if (v841 <= 1)
          break;
        if (v841 == 2)
        {
          v845 = v840[132];
LABEL_883:
          v846 = v845 + 1;
          v847 = __clz(v846);
          v848 = (((v846 - (0x80000000 >> v847)) | (0x80000000 >> v847)) << (2 * v847 - v607 - 31)) | v609;
          *v608 = bswap32(v848);
          v849 = v607 - 2 * v847 + 63;
          v607 = v849 & 7;
          v608 = (_DWORD *)((char *)v608 + (v849 >> 3));
          v609 = v848 << (v849 & 0xF8);
          if (v849 >= 0x20)
            v609 = 0;
        }
        ++v840;
        if (v841 == 3)
          goto LABEL_726;
      }
      v845 = v840[66];
      goto LABEL_883;
    }
  }
LABEL_726:
  v648 = *(_DWORD *)(v2 + 14184);
  if (v648 == 6 || v648 == 1)
  {
    v649 = (v66[9].u8[1] << (v607 ^ 0x1F)) | v609;
    *v608 = bswap32(v649);
    v650 = v607 + 1;
    v651 = (v607 + 1) >> 3;
    v607 = (v607 + 1) & 7;
    v608 = (_DWORD *)((char *)v608 + v651);
    v609 = v649 << (v650 & 8);
    if (v66[9].i8[1])
    {
      v652 = (unsigned int *)(v2 + 14372);
      while (1)
      {
        v653 = *v652;
        v654 = __clz(*v652 + 1);
        v655 = (((*v652 + 1 - (0x80000000 >> v654)) | (0x80000000 >> v654)) << (2 * v654 - v607 - 31)) | v609;
        *v608 = bswap32(v655);
        v656 = v607 - 2 * v654 + 63;
        v607 = v656 & 7;
        v608 = (_DWORD *)((char *)v608 + (v656 >> 3));
        v609 = v655 << (v656 & 0xF8);
        if (v656 >= 0x20)
          v609 = 0;
        if (v653 <= 1)
          break;
        if (v653 == 2)
        {
          v657 = v652[132];
LABEL_736:
          v658 = v657 + 1;
          v659 = __clz(v658);
          v660 = (((v658 - (0x80000000 >> v659)) | (0x80000000 >> v659)) << (2 * v659 - v607 - 31)) | v609;
          *v608 = bswap32(v660);
          v661 = v607 - 2 * v659 + 63;
          v607 = v661 & 7;
          v608 = (_DWORD *)((char *)v608 + (v661 >> 3));
          v609 = v660 << (v661 & 0xF8);
          if (v661 >= 0x20)
            v609 = 0;
        }
        ++v652;
        if (v653 == 3)
          goto LABEL_739;
      }
      v657 = v652[66];
      goto LABEL_736;
    }
  }
LABEL_739:
  v662 = *(_DWORD *)(v2 + 14184);
  if (v662)
    v663 = v662 == 5;
  else
    v663 = 1;
  v664 = v663;
  v666 = v662 == 1 || v662 == 6;
  if (*(_DWORD *)(v3 + 68) & v666 | (*(_BYTE *)(v3 + 64) & v664))
  {
    v667 = 0;
    *(_QWORD *)(v2 + 14144) = v608;
    *(_DWORD *)(v2 + 14160) = v609;
    v66->i8[0] = v607;
    v668 = *(_DWORD *)(v2 + 15036) + 1;
    v669 = __clz(v668);
    v670 = (((v668 - (0x80000000 >> v669)) | (0x80000000 >> v669)) << (2 * v669 - v607 - 31)) | v609;
    *v608 = bswap32(v670);
    v671 = v607 - 2 * v669 + 63;
    v672 = v671 & 7;
    v673 = (_DWORD *)((char *)v608 + (v671 >> 3));
    v674 = v670 << (v671 & 0xF8);
    if (v671 >= 0x20)
      v675 = 0;
    else
      v675 = v674;
    v676 = *(_DWORD *)(v2 + 15040) + 1;
    v677 = __clz(v676);
    v678 = v675 | (((v676 - (0x80000000 >> v677)) | (0x80000000 >> v677)) << (2 * v677 - v672 - 31));
    *v673 = bswap32(v678);
    v679 = v672 - 2 * v677 + 63;
    v680 = v679 & 7;
    v608 = (_DWORD *)((char *)v673 + (v679 >> 3));
    v681 = v678 << (v679 & 0xF8);
    if (v679 >= 0x20)
      v609 = 0;
    else
      v609 = v681;
    v682 = v2 + 15044;
    v683 = v2 + 15108;
    v684 = v2 + 15172;
    v685 = v2 + 15940;
    do
    {
      v686 = v667;
      v687 = (*(unsigned __int8 *)(v682 + v667) << ~(_BYTE)v680) | v609;
      *v608 = bswap32(v687);
      v688 = v680 + 1;
      v689 = v688 & 7;
      v690 = (_DWORD *)((char *)v608 + (v688 >> 3));
      v691 = v687 << (v688 & 0xF8);
      if (*(_BYTE *)(v682 + v667))
      {
        v692 = *(_DWORD *)(v684 + 12 * v667);
        if (v692 <= 0)
          v693 = -2 * v692;
        else
          v693 = 2 * v692 - 1;
        v694 = v693 + 1;
        v695 = __clz(v694);
        v696 = (((v694 - (0x80000000 >> v695)) | (0x80000000 >> v695)) << (2 * v695 - v689 - 31)) | v691;
        *v690 = bswap32(v696);
        v697 = v689 - 2 * v695 + 63;
        v698 = v697 & 7;
        v699 = (_DWORD *)((char *)v690 + (v697 >> 3));
        v700 = v696 << (v697 & 0xF8);
        if (v697 >= 0x20)
          v701 = 0;
        else
          v701 = v700;
        v702 = *(_DWORD *)(v685 + 12 * v667);
        if (v702 <= 0)
          v703 = -2 * v702;
        else
          v703 = 2 * v702 - 1;
        v704 = v703 + 1;
        v705 = __clz(v704);
        v706 = v701 | (((v704 - (0x80000000 >> v705)) | (0x80000000 >> v705)) << (2 * v705 - v698 - 31));
        *v699 = bswap32(v706);
        v707 = v698 - 2 * v705 + 63;
        v689 = v707 & 7;
        v690 = (_DWORD *)((char *)v699 + (v707 >> 3));
        v691 = v706 << (v707 & 0xF8);
        if (v707 >= 0x20)
          v691 = 0;
      }
      else
      {
        *(_DWORD *)(v684 + 12 * v667) = 1 << *(_DWORD *)(v2 + 15036);
        *(_DWORD *)(v685 + 12 * v667) = 0;
      }
      v708 = 0;
      v709 = (*(unsigned __int8 *)(v683 + v686) << (v689 ^ 0x1F)) | v691;
      *v690 = bswap32(v709);
      v710 = v689 + 1;
      v680 = v710 & 7;
      v608 = (_DWORD *)((char *)v690 + (v710 >> 3));
      v609 = v709 << (v710 & 8);
      v711 = 1;
      do
      {
        v712 = v708;
        if (*(_BYTE *)(v683 + v686))
        {
          v713 = *(_DWORD *)(v684 + 12 * v686 + 4 * v711);
          if (v713 <= 0)
            v714 = -2 * v713;
          else
            v714 = 2 * v713 - 1;
          v715 = v714 + 1;
          v716 = __clz(v715);
          v717 = (((v715 - (0x80000000 >> v716)) | (0x80000000 >> v716)) << (2 * v716 - v680 - 31)) | v609;
          *v608 = bswap32(v717);
          v718 = v680 - 2 * v716 + 63;
          v719 = v718 & 7;
          v720 = (_DWORD *)((char *)v608 + (v718 >> 3));
          v721 = v717 << (v718 & 0xF8);
          if (v718 >= 0x20)
            v721 = 0;
          v722 = *(_DWORD *)(v685 + 12 * v686 + 4 * v711);
          if (v722 <= 0)
            v723 = -2 * v722;
          else
            v723 = 2 * v722 - 1;
          v724 = v723 + 1;
          v725 = __clz(v724);
          v726 = v721 | (((v724 - (0x80000000 >> v725)) | (0x80000000 >> v725)) << (2 * v725 - v719 - 31));
          *v720 = bswap32(v726);
          v727 = v719 - 2 * v725 + 63;
          v680 = v727 & 7;
          v608 = (_DWORD *)((char *)v720 + (v727 >> 3));
          v609 = v726 << (v727 & 0xF8);
          if (v727 >= 0x20)
            v609 = 0;
        }
        else
        {
          *(_DWORD *)(v684 + 12 * v686 + 4 * v711) = 1 << *(_DWORD *)(v2 + 15040);
          *(_DWORD *)(v685 + 12 * v686 + 4 * v711) = 0;
        }
        v708 = 1;
        v711 = 2;
      }
      while ((v712 & 1) == 0);
      v667 = v686 + 1;
    }
    while ((v686 + 1) <= v66[8].i32[0]);
    v728 = *(_DWORD *)(v2 + 14184);
    if ((v728 == 6 || v728 == 1) && *(_DWORD *)(v3 + 68) == 1)
    {
      v729 = 0;
      do
      {
        v730 = v729;
        v731 = v2 + v729;
        v732 = (*(unsigned __int8 *)(v731 + 15076) << ~(_BYTE)v680) | v609;
        *v608 = bswap32(v732);
        v733 = v680 + 1;
        v734 = v733 & 7;
        v735 = (_DWORD *)((char *)v608 + (v733 >> 3));
        v736 = v732 << (v733 & 0xF8);
        if (*(_BYTE *)(v731 + 15076))
        {
          v737 = v2 + 12 * v730;
          v738 = *(_DWORD *)(v737 + 15556);
          if (v738 <= 0)
            v739 = -2 * v738;
          else
            v739 = 2 * v738 - 1;
          v740 = v739 + 1;
          v741 = __clz(v740);
          v742 = (((v740 - (0x80000000 >> v741)) | (0x80000000 >> v741)) << (2 * v741 - v734 - 31)) | v736;
          *v735 = bswap32(v742);
          v743 = v734 - 2 * v741 + 63;
          v744 = v743 & 7;
          v745 = (_DWORD *)((char *)v735 + (v743 >> 3));
          v746 = v742 << (v743 & 0xF8);
          if (v743 >= 0x20)
            v747 = 0;
          else
            v747 = v746;
          v748 = *(_DWORD *)(v737 + 16324);
          if (v748 <= 0)
            v749 = -2 * v748;
          else
            v749 = 2 * v748 - 1;
          v750 = v749 + 1;
          v751 = __clz(v750);
          v752 = v747 | (((v750 - (0x80000000 >> v751)) | (0x80000000 >> v751)) << (2 * v751 - v744 - 31));
          *v745 = bswap32(v752);
          v753 = v744 - 2 * v751 + 63;
          v734 = v753 & 7;
          v735 = (_DWORD *)((char *)v745 + (v753 >> 3));
          v736 = v752 << (v753 & 0xF8);
          if (v753 >= 0x20)
            v736 = 0;
        }
        else
        {
          v754 = v2 + 12 * v730;
          *(_DWORD *)(v754 + 15556) = 1 << *(_DWORD *)(v2 + 15036);
          *(_DWORD *)(v754 + 16324) = 0;
        }
        v755 = 0;
        v756 = (_BYTE *)(v2 + v730 + 15140);
        v757 = (*v756 << (v734 ^ 0x1F)) | v736;
        *v735 = bswap32(v757);
        v758 = v734 + 1;
        v608 = (_DWORD *)((char *)v735 + (v758 >> 3));
        v680 = v758 & 7;
        v609 = v757 << (v758 & 8);
        v759 = 1;
        do
        {
          v760 = v755;
          if (*v756)
          {
            v761 = v2 + 12 * v730 + 4 * v759;
            v762 = *(_DWORD *)(v761 + 15556);
            if (v762 <= 0)
              v763 = -2 * v762;
            else
              v763 = 2 * v762 - 1;
            v764 = v763 + 1;
            v765 = __clz(v764);
            v766 = (((v764 - (0x80000000 >> v765)) | (0x80000000 >> v765)) << (2 * v765 - v680 - 31)) | v609;
            *v608 = bswap32(v766);
            v767 = v680 - 2 * v765 + 63;
            v768 = v767 & 7;
            v769 = (_DWORD *)((char *)v608 + (v767 >> 3));
            v770 = v766 << (v767 & 0xF8);
            if (v767 >= 0x20)
              v770 = 0;
            v771 = *(_DWORD *)(v761 + 16324);
            if (v771 <= 0)
              v772 = -2 * v771;
            else
              v772 = 2 * v771 - 1;
            v773 = v772 + 1;
            v774 = __clz(v773);
            v775 = v770 | (((v773 - (0x80000000 >> v774)) | (0x80000000 >> v774)) << (2 * v774 - v768 - 31));
            *v769 = bswap32(v775);
            v776 = v768 - 2 * v774 + 63;
            v680 = v776 & 7;
            v608 = (_DWORD *)((char *)v769 + (v776 >> 3));
            v609 = v775 << (v776 & 0xF8);
            if (v776 >= 0x20)
              v609 = 0;
          }
          else
          {
            v777 = v2 + 12 * v730 + 4 * v759;
            *(_DWORD *)(v777 + 15556) = 1 << *(_DWORD *)(v2 + 15040);
            *(_DWORD *)(v777 + 16324) = 0;
          }
          v755 = 1;
          v759 = 2;
        }
        while ((v760 & 1) == 0);
        v729 = v730 + 1;
      }
      while ((v730 + 1) <= *(_DWORD *)(v2 + 14232));
    }
    *(_QWORD *)(v2 + 14144) = v608;
    *(_DWORD *)(v2 + 14160) = v609;
    v607 = v680;
    v66->i8[0] = v680;
  }
  *v898 = v571;
  if (!v570)
    goto LABEL_824;
  if (v67 == 19 || v67 == 5)
  {
    v778 = (v66[338].u8[4] << ~(_BYTE)v607) | v609;
    *v608 = bswap32(v778);
    v779 = (v607 + 1);
    v780 = (_DWORD *)((char *)v608 + (v779 >> 3));
    v781 = (v778 << ((v607 + 1) & 0xF8)) | (v66[338].u8[5] << ((v607 + 1) & 7 ^ 0x1F));
    *v780 = bswap32(v781);
    v607 = ((((_BYTE)v607 + 1) & 7) + 1) & 7;
    v608 = (_DWORD *)((char *)v780 + (((v779 & 7) + 1) >> 3));
    v609 = v781 << (((v779 & 7) + 1) & 8);
    goto LABEL_824;
  }
  v816 = (v66[318].u8[0] << ~(_BYTE)v607) | v609;
  *v608 = bswap32(v816);
  v817 = v607 + 1;
  v818 = (v607 + 1) >> 3;
  v607 = (v607 + 1) & 7;
  v608 = (_DWORD *)((char *)v608 + v818);
  v609 = v816 << (v817 & 0xF8);
  if (v66[318].i8[0] == 1)
  {
    v819 = (int *)&v66[334] + 1;
    do
    {
      v820 = *(v819 - 32);
      v821 = __clz(v820 + 1);
      v822 = (((v820 + 1 - (0x80000000 >> v821)) | (0x80000000 >> v821)) << (2 * v821 - v607 - 31)) | v609;
      *v608 = bswap32(v822);
      v823 = v607 - 2 * v821 + 63;
      v607 = v823 & 7;
      v608 = (_DWORD *)((char *)v608 + (v823 >> 3));
      v609 = v822 << (v823 & 0xF8);
      if (v823 >= 0x20)
        v609 = 0;
      if ((v820 | 2) == 3)
      {
        v824 = *(v819 - 24) + 1;
        v825 = __clz(v824);
        v826 = (((v824 - (0x80000000 >> v825)) | (0x80000000 >> v825)) << (2 * v825 - v607 - 31)) | v609;
        *v608 = bswap32(v826);
        v827 = v607 - 2 * v825 + 63;
        v607 = v827 & 7;
        v608 = (_DWORD *)((char *)v608 + (v827 >> 3));
        v609 = v826 << (v827 & 0xF8);
        if (v827 >= 0x20)
          v609 = 0;
      }
      switch(v820)
      {
        case 6:
        case 3:
          v829 = *(v819 - 8) + 1;
          v830 = __clz(v829);
          v831 = (((v829 - (0x80000000 >> v830)) | (0x80000000 >> v830)) << (2 * v830 - v607 - 31)) | v609;
          *v608 = bswap32(v831);
          v832 = v607 - 2 * v830 + 63;
          v607 = v832 & 7;
          v608 = (_DWORD *)((char *)v608 + (v832 >> 3));
          v609 = v831 << (v832 & 0xF8);
          if (v832 >= 0x20)
            v609 = 0;
          break;
        case 2:
          v828 = *(v819 - 16);
          goto LABEL_871;
        case 4:
          v828 = *v819;
LABEL_871:
          v833 = v828 + 1;
          v834 = __clz(v833);
          v835 = (((v833 - (0x80000000 >> v834)) | (0x80000000 >> v834)) << (2 * v834 - v607 - 31)) | v609;
          *v608 = bswap32(v835);
          v836 = v607 - 2 * v834 + 63;
          v607 = v836 & 7;
          v608 = (_DWORD *)((char *)v608 + (v836 >> 3));
          v609 = v835 << (v836 & 0xF8);
          if (v836 >= 0x20)
            v609 = 0;
          break;
      }
      ++v819;
    }
    while (v820);
  }
LABEL_824:
  if (*(_BYTE *)(v3 + 8) == 1)
  {
    v782 = *(_DWORD *)(v2 + 14184);
    if (v782 > 9 || ((1 << v782) & 0x294) == 0)
    {
      v783 = v609 | (0x80000000 >> v607);
      *v608 = bswap32(v783);
      v784 = v607 + 1;
      v785 = (v607 + 1) >> 3;
      v607 = (v607 + 1) & 7;
      v608 = (_DWORD *)((char *)v608 + v785);
      v609 = v783 << (v784 & 0xF8);
    }
  }
  v786 = v66[340].i32[0];
  if (v786 <= 0)
    v787 = 1 - 2 * v786;
  else
    v787 = 2 * v786;
  v788 = __clz(v787);
  v789 = (((v787 - (0x80000000 >> v788)) | (0x80000000 >> v788)) << (2 * v788 - v607 - 31)) | v609;
  *v608 = bswap32(v789);
  v790 = v607 - 2 * v788 + 63;
  v791 = v789 << ((v607 - 2 * v788 + 63) & 0xF8);
  if (v790 >= 0x20)
    v792 = 0;
  else
    v792 = v791;
  v793 = *(_DWORD *)(v2 + 14184) - 3;
  if (v793 < 7 && ((0x63u >> v793) & 1) != 0)
    goto LABEL_613;
  v794 = v790 >> 3;
  v795 = v790 & 7;
  v796 = (_DWORD *)((char *)v608 + v794);
  if (*(_BYTE *)(v3 + 84) == 1)
  {
    v797 = v66[341].i32[1] + 1;
    v798 = __clz(v797);
    v799 = (((v797 - (0x80000000 >> v798)) | (0x80000000 >> v798)) << (2 * v798 - v795 - 31)) | v792;
    *v796 = bswap32(v799);
    v800 = v795 - 2 * v798 + 63;
    v795 = v800 & 7;
    v796 = (_DWORD *)((char *)v796 + (v800 >> 3));
    v792 = v799 << (v800 & 0xF8);
    if (v800 >= 0x20)
      v792 = 0;
    if (v66[341].i32[1] != 1)
    {
      v801 = v66[342].i32[0];
      if (v801 <= 0)
        v802 = 1 - 2 * v801;
      else
        v802 = 2 * v801;
      v803 = __clz(v802);
      v804 = (((v802 - (0x80000000 >> v803)) | (0x80000000 >> v803)) << (2 * v803 - v795 - 31)) | v792;
      *v796 = bswap32(v804);
      v805 = v795 - 2 * v803 + 63;
      v806 = v805 & 7;
      v807 = (_DWORD *)((char *)v796 + (v805 >> 3));
      v808 = v804 << (v805 & 0xF8);
      if (v805 >= 0x20)
        v795 = 0;
      else
        v795 = v808;
      v809 = v66[342].i32[1];
      if (v809 <= 0)
        v810 = 1 - 2 * v809;
      else
        v810 = 2 * v809;
      v811 = __clz(v810);
      v812 = v795 | (((v810 - (0x80000000 >> v811)) | (0x80000000 >> v811)) << (2 * v811 - v806 - 31));
      *v807 = bswap32(v812);
      v813 = v806 - 2 * v811 + 63;
      LOBYTE(v795) = v813 & 7;
      v796 = (_DWORD *)((char *)v807 + (v813 >> 3));
      v814 = v812 << (v813 & 0xF8);
      if (v813 >= 0x20)
        v792 = 0;
      else
        v792 = v814;
    }
  }
  if (*(_DWORD *)(v3 + 12) && (*(_DWORD *)(v3 + 16) - 6) >= 0xFFFFFFFD)
    goto LABEL_613;
  *(_QWORD *)(v2 + 14144) = v796;
  *(_DWORD *)(v2 + 14160) = v792;
  v66->i8[0] = v795;
  *(_QWORD *)(v2 + 47888) = v857 + 20;
  *(_DWORD *)(v857 + 52) = 0;
  *(_OWORD *)(v857 + 36) = 0u;
  *(_OWORD *)(v857 + 20) = 0u;
  *(_QWORD *)(v2 + 47896) = v857 + 56;
  *(_QWORD *)(v2 + 47904) = v857 + 60;
  *(_DWORD *)(*(_QWORD *)(v3 + 400) + 188) = *(unsigned __int8 *)(v8 + 1354);
  if (sub_1B68F94E0(*(_QWORD *)(v3 + 400), v887, *(_DWORD *)(v2 + 14184), v66[341].i32[1], v66[342].i32[0], v66[342].i32[1]))goto LABEL_613;
  v1 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v867 = *(_DWORD *)(a1 + 32);
  v815 = *(_QWORD *)(a1 + 24);
  v865 = *(_DWORD *)(v815 + 12);
  v855 = *(_DWORD *)(v815 + 16);
  v856 = *(_DWORD *)(a1 + 36);
  v6 = v892;
  v4 = v894;
  v7 = v890;
LABEL_5:
  v15 = (char *)(v14 + 47882);
  v16 = (_BYTE *)(v14 + 12432);
  v17 = (unsigned __int8 *)(v1 + 117295);
  v906 = v1;
  v859 = (_DWORD *)(v1 + 57096);
  v886 = *(_DWORD *)(v1 + 57096);
  v18 = *(_QWORD *)(v14 + 48112);
  v19 = *(unsigned __int8 *)(v14 + 14196);
  v864 = *(_BYTE *)(v14 + 14196) == 0;
  v20 = *(_QWORD *)(v14 + 14144);
  v21 = *(unsigned __int8 *)(v14 + 14164);
  v22 = *(_DWORD *)(v14 + 14184);
  *(_BYTE *)(v14 + 47948) = v22;
  *(_BYTE *)(v14 + 47949) = v19;
  *(_BYTE *)(v14 + 47950) = *(_BYTE *)(v14 + 14197);
  v883 = v17;
  if (v17[1314] && !v19)
    goto LABEL_613;
  LODWORD(v870) = v20;
  v871 = v21;
  v23 = v14 + 48144;
  v24 = v906 + 205536;
  v863 = v14 + 14128;
  v910 = 0uLL;
  v911 = 0;
  v885 = v14;
  v895 = (_BYTE *)(v14 + 12432);
  v869 = v18;
  v908 = v14 + 48144;
  if (v867 != v865)
    goto LABEL_372;
  *(_DWORD *)(v14 + 50628) = 0;
  if (v886 >= 1)
  {
    v25 = v886 + 1;
    v26 = *(_QWORD *)(v14 + 50616) + 160;
    *(_QWORD *)&v27 = 0x2222222222222222;
    *((_QWORD *)&v27 + 1) = 0x2222222222222222;
    *(_QWORD *)&v28 = 0x2020202020202020;
    *((_QWORD *)&v28 + 1) = 0x2020202020202020;
    do
    {
      *(_QWORD *)(v26 + 80) = 0;
      *(_QWORD *)(v26 + 88) = 0;
      *(_QWORD *)(v26 + 96) = 0;
      *(_OWORD *)(v26 + 48) = v27;
      *(_OWORD *)(v26 + 64) = v27;
      *(_QWORD *)(v26 + 112) = 0;
      *(_BYTE *)(v26 + 16) = 0;
      *(_DWORD *)(v26 + 17) = -1;
      *(_BYTE *)(v26 + 21) = -1;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v26 + 8) = 0;
      *(_BYTE *)(v26 + 39) = 0;
      *(_OWORD *)(v26 - 32) = v28;
      *(_OWORD *)(v26 - 16) = v28;
      *(_OWORD *)(v26 - 160) = 0uLL;
      *(_OWORD *)(v26 - 144) = 0uLL;
      *(_OWORD *)(v26 - 128) = 0uLL;
      *(_OWORD *)(v26 - 112) = 0uLL;
      *(_OWORD *)(v26 - 96) = 0uLL;
      *(_OWORD *)(v26 - 80) = 0uLL;
      --v25;
      *(_OWORD *)(v26 - 64) = 0uLL;
      *(_OWORD *)(v26 - 48) = 0uLL;
      v26 += 288;
    }
    while (v25 > 1);
  }
  v29 = (unsigned __int8 *)(v14 + 16880);
  *(_BYTE *)(v14 + 48104) = *(_BYTE *)(v906 + 205543);
  v30 = *v883;
  *(_BYTE *)(v14 + 48257) = v30;
  if (v30)
  {
    v31 = 0;
    v32 = (__int128 *)(v14 + 48258);
    v33 = xmmword_1B6933E3E;
    do
    {
      if (v31 > 5)
      {
        v34 = (v31 - 6);
        v35 = (_OWORD *)(v14 + (v34 << 6) + 48354);
        v36 = (_OWORD *)((char *)&unk_1B6933E9E + 64 * v34);
        v37 = v36[1];
        *v35 = *v36;
        v35[1] = v37;
        v38 = v36[3];
        v35[2] = v36[2];
        v35[3] = v38;
      }
      else
      {
        *v32 = *v33;
      }
      ++v31;
      ++v32;
      ++v33;
    }
    while (v31 != 8);
  }
  v39 = v7;
  v40 = v6;
  *(_BYTE *)(v14 + 48256) = *v883;
  v41 = v906 + 205536;
  *(_BYTE *)(*(_QWORD *)(v14 + 47960) + 56) = *(_DWORD *)(v906 + 205536);
  *(_BYTE *)(*(_QWORD *)(v14 + 47960) + 57) = *(_BYTE *)(*(_QWORD *)(v14 + 47960) + 56);
  *(_QWORD *)(v14 + 48136) = *(_QWORD *)(v906 + 205840);
  *(_QWORD *)v908 = v14 + 16920;
  *(_QWORD *)(v14 + 48152) = v14 + 17192;
  *(_OWORD *)(v14 + 48160) = *(_OWORD *)(v14 + 17736);
  v42 = *(_QWORD *)(v906 + 205840);
  v43 = *(_BYTE *)(v42 + 5000);
  v44 = *(_BYTE *)(v42 + 5001);
  if (v22 != 2 && v22 != 7)
  {
    v45 = *(_DWORD *)(v906 + 207916);
    if ((v45 & 1) != 0 && (v46 = *(_DWORD *)(v906 + 207920)) != 0)
    {
      if (*(_DWORD *)(v906 + 207832))
        v43 = *(_BYTE *)(v906 + (*(_DWORD *)(v885 + 14176) / *(_DWORD *)(v906 + 207836)) + 208064);
      else
        v43 = v46 != *(_DWORD *)(v906 + 208060);
    }
    else if (!v45)
    {
      goto LABEL_104;
    }
    if (*(_BYTE *)(*(_QWORD *)(v906 + 136) + 577) == 1)
    {
      if (*(_BYTE *)(v42 + 24))
      {
        v85 = sub_1B68B903C(*(_DWORD *)(v42 + 1288), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v906 + 205800) + 22824) + 12), *(_QWORD *)(*(_QWORD *)(v906 + 205800) + 22824) + 216);
        v41 = v906 + 205536;
        if (!v85)
          v43 = 1;
      }
    }
LABEL_104:
    v86 = *(unsigned int *)(v41 + 2448);
    if ((_DWORD)v86 && (*(_DWORD *)(v41 + 2444) & 1) != 0)
    {
      v87 = (unsigned __int16 *)(v41 + 2452);
      while (1)
      {
        v88 = *v87++;
        if (*(_DWORD *)(v885 + 14176) == v88)
          break;
        if (!--v86)
          goto LABEL_111;
      }
      v44 = 1;
    }
  }
LABEL_111:
  v89 = *(unsigned int *)(v41 + 2472);
  if ((_DWORD)v89)
    v90 = (*(_DWORD *)(v41 + 2468) & 1) == 0;
  else
    v90 = 1;
  if (!v90)
  {
    v91 = 0;
    while (*(_DWORD *)(v885 + 14176) != *(unsigned __int16 *)(v906 + 208012 + 2 * v91))
    {
      if (v89 == ++v91)
        goto LABEL_120;
    }
    *(_DWORD *)(v906 + 4 * v91 + 208028) = 1;
  }
LABEL_120:
  if (*(_BYTE *)(v42 + 1358))
    v92 = 1;
  else
    v92 = v44;
  v14 = v885;
  v16 = v895;
  if (*(int *)(v885 + 88) >= 1)
  {
    v93 = 0;
    v94 = 0;
    do
    {
      v95 = (_BYTE *)(*(_QWORD *)(v885 + 112) + v93);
      v95[68] = *(_BYTE *)(v41 + 5);
      v95[69] = v895[1792];
      v95[66] = *(_DWORD *)(v885 + 14228);
      v95[67] = *(_DWORD *)(v885 + 14232);
      *(_BYTE *)(*(_QWORD *)(v885 + 112) + v93 + 60) = *(_DWORD *)v41;
      ++v94;
      v93 += 30432;
    }
    while (v94 < *(int *)(v885 + 88));
  }
  if (*(int *)(v885 + 92) >= 1)
  {
    v96 = 0;
    v97 = 0;
    do
    {
      v98 = (_BYTE *)(*(_QWORD *)(v885 + 120) + v96);
      v98[68] = *(_BYTE *)(v41 + 5);
      v98[69] = v895[1792];
      v98[66] = *(_DWORD *)(v885 + 14228);
      v98[67] = *(_DWORD *)(v885 + 14232);
      *(_BYTE *)(*(_QWORD *)(v885 + 120) + v96 + 60) = *(_DWORD *)v41;
      ++v97;
      v96 += 30432;
    }
    while (v97 < *(int *)(v885 + 92));
  }
  if (*(int *)(v885 + 96) >= 1)
  {
    v99 = 0;
    v100 = 0;
    do
    {
      v101 = (_BYTE *)(*(_QWORD *)(v885 + 128) + v99);
      v101[68] = *(_BYTE *)(v41 + 5);
      v101[69] = v895[1792];
      v101[66] = *(_DWORD *)(v885 + 14228);
      v101[67] = *(_DWORD *)(v885 + 14232);
      *(_BYTE *)(*(_QWORD *)(v885 + 128) + v99 + 60) = *(_DWORD *)v41;
      ++v100;
      v99 += 30432;
    }
    while (v100 < *(int *)(v885 + 96));
  }
  *v895 = *(_BYTE *)(v41 + 5);
  v102 = *(_DWORD *)(v885 + 14184);
  *(_DWORD *)(v885 + 48) = *(_DWORD *)(v885 + 36);
  if (v102 == 6 || v102 == 1)
    *(_DWORD *)(v885 + 48) = *(_DWORD *)(v885 + 40);
  *(_DWORD *)(v885 + 72) = *(_DWORD *)(v885 + 64);
  *(_DWORD *)(v885 + 60) = *(_DWORD *)(v885 + 52);
  *(_DWORD *)(v885 + 84) = *(_DWORD *)(v885 + 76);
  *(_BYTE *)(v885 + 17) = *(_BYTE *)(v885 + 10);
  if (v102 == 6 || v102 == 1)
  {
    *(_DWORD *)(v885 + 72) = *(_DWORD *)(v885 + 68);
    *(_DWORD *)(v885 + 60) = *(_DWORD *)(v885 + 56);
    *(_DWORD *)(v885 + 84) = *(_DWORD *)(v885 + 80);
    *(_BYTE *)(v885 + 17) = *(_BYTE *)(v885 + 14);
  }
  v103 = 0;
  v104 = *(_BYTE *)(v885 + 27) | v43;
  *(_BYTE *)(v885 + 26) = v104;
  if (v104)
    v92 = 0;
  *(_BYTE *)(v885 + 28) = v92;
  v105 = *(_QWORD *)(v41 + 272);
  v106 = 1;
  v107 = v885 + 47920;
  v6 = v40;
  v7 = v39;
  v18 = v869;
  v23 = v908;
  while (1)
  {
    v108 = *(unsigned int *)(v107 + 4 * v103 + 240);
    if ((v108 & 0x80000000) != 0)
      break;
    v109 = *(_QWORD *)(v107 + 8 * v103 + 224);
    v110 = *(_QWORD *)(v908 + 32) + 33 * v103;
    *(_BYTE *)(v110 + 32) = 0;
    if ((_DWORD)v108)
    {
      for (i = 0; i != v108; ++i)
      {
        v112 = *(_QWORD *)(v109 + 8 * i);
        if (v112)
        {
          v113 = *(unsigned int *)(v105 + 48);
          if ((_DWORD)v113)
          {
            v114 = 0;
            while (*(_QWORD *)(*(_QWORD *)(v105 + 40) + 8 * v114) != v112)
            {
              if (v113 == ++v114)
                goto LABEL_149;
            }
            if (v114 <= 0xFE)
              LOBYTE(v112) = v114 + 1;
            else
              LOBYTE(v112) = 0;
          }
          else
          {
LABEL_149:
            LOBYTE(v112) = 0;
          }
        }
        *(_BYTE *)(v110 + i) = v112;
      }
    }
    if ((v106 & 1) == 0)
      break;
    v115 = 0;
    v116 = *(_QWORD *)(v908 + 40);
    do
    {
      *(_BYTE *)(v116 + v115) = 32;
      if ((_DWORD)v108)
      {
        v117 = 0;
        while (v115 != *(unsigned __int8 *)(v110 + v117))
        {
          if (v108 == ++v117)
            goto LABEL_162;
        }
        *(_BYTE *)(v116 + v115) = v117;
      }
LABEL_162:
      ++v115;
    }
    while (v115 != 41);
    v118 = 0;
    v119 = *(_QWORD **)(v908 + 48);
    *v119 = 0;
    v120 = v119 + 1;
    do
    {
      if (v118 >= *(unsigned int *)(v105 + 48))
        v121 = 0;
      else
        v121 = *(_QWORD *)(*(_QWORD *)(v105 + 40) + 8 * v118);
      v120[v118++] = v121;
    }
    while (v118 != 40);
    v123 = *(_BYTE **)(v908 + 56);
    v122 = *(_BYTE **)(v908 + 64);
    *v123 = 32;
    *v122 = 32;
    for (j = 1; j != 41; ++j)
      v123[j] = *(_BYTE *)(v116 + j);
    v125 = v15[67];
    if (v15[67])
      goto LABEL_183;
    if ((_DWORD)v108)
    {
      for (k = 0; k != v108; ++k)
      {
        v127 = *(_QWORD *)(v109 + 8 * k);
        if (v127)
        {
          v128 = *(_QWORD *)(v127 + 1344);
          if (v128)
          {
            v129 = *(unsigned int *)(v105 + 48);
            if ((_DWORD)v129)
            {
              v130 = 0;
              while (*(_QWORD *)(*(_QWORD *)(v105 + 40) + 8 * v130) != v128)
              {
                if (v129 == ++v130)
                  goto LABEL_179;
              }
            }
            else
            {
LABEL_179:
              LOBYTE(v130) = -2;
            }
            v123[(v130 + 1)] = k;
          }
        }
      }
      v125 = v15[67];
LABEL_183:
      if (v125)
        v131 = (_DWORD)v108 == 0;
      else
        v131 = 1;
      if (!v131)
      {
        v132 = 0;
        do
        {
          v133 = *(_QWORD *)(v109 + 8 * v132);
          if (v133)
          {
            v134 = *(_QWORD *)(v133 + 1344);
            if (v134)
            {
              v135 = *(unsigned int *)(v105 + 48);
              if ((_DWORD)v135)
              {
                v136 = 0;
                while (*(_QWORD *)(*(_QWORD *)(v105 + 40) + 8 * v136) != v134)
                {
                  if (v135 == ++v136)
                    goto LABEL_194;
                }
              }
              else
              {
LABEL_194:
                LOBYTE(v136) = -2;
              }
              v122[(v136 + 1)] = v132;
            }
          }
          ++v132;
        }
        while (v132 != v108);
      }
    }
    v137 = v15[225];
    if (v137 == 1)
    {
      v106 = 0;
      v103 = 1;
      if ((_DWORD)v108)
      {
        v143 = 0;
        v144 = v15[68];
        do
        {
          v145 = *(_QWORD *)(v109 + 8 * v143);
          if (v145 && *(unsigned __int8 *)(v145 + 101) != v144)
          {
            v146 = *(unsigned int *)(v105 + 48);
            if ((_DWORD)v146)
            {
              v147 = 0;
              v148 = *(_QWORD *)(v145 + 1344);
              while (*(_QWORD *)(*(_QWORD *)(v105 + 40) + 8 * v147) != v148)
              {
                if (v146 == ++v147)
                  goto LABEL_218;
              }
            }
            else
            {
LABEL_218:
              LOBYTE(v147) = -2;
            }
            *(_BYTE *)(v116 + *(unsigned __int8 *)(v110 + v143)) = *(_BYTE *)(v116 + (v147 + 1));
          }
          ++v143;
        }
        while (v143 != v108);
LABEL_221:
        v106 = 0;
        v103 = 1;
      }
    }
    else
    {
      v106 = 0;
      v103 = 1;
      if (v137 == 2)
      {
        v106 = 0;
        v103 = 1;
        if ((_DWORD)v108)
        {
          for (m = 0; m != v108; ++m)
          {
            v139 = *(_QWORD *)(v109 + 8 * m);
            if (v139)
            {
              v140 = *(unsigned int *)(v105 + 48);
              if ((_DWORD)v140)
              {
                v141 = 0;
                v142 = *(_QWORD *)(v139 + 1344);
                while (*(_QWORD *)(*(_QWORD *)(v105 + 40) + 8 * v141) != v142)
                {
                  if (v140 == ++v141)
                    goto LABEL_206;
                }
              }
              else
              {
LABEL_206:
                LOBYTE(v141) = -2;
              }
              *(_BYTE *)(v116 + (v141 + 1)) = m;
            }
          }
          goto LABEL_221;
        }
      }
    }
  }
  if (v15[226])
  {
    v149 = *(_DWORD **)(v885 + 14144);
    v150 = *(_DWORD *)(v885 + 14160);
    v151 = v895[1732];
    if (v895[1732])
    {
      do
      {
        v152 = v150 | (0x80000000 >> v151);
        *v149 = bswap32(v152);
        v153 = v151 + 1;
        v149 = (_DWORD *)((char *)v149 + ((v151 + 1) >> 3));
        v150 = v152 << ((v151 + 1) & 0xF8);
        if (v151 >= 0x1F)
          v150 = 0;
        v151 = v153 & 7;
      }
      while ((v153 & 7) != 0);
    }
    v154 = 0;
    *(_QWORD *)(v885 + 14144) = v149;
    *(_DWORD *)(v885 + 14160) = v150;
    v155 = (int64x2_t)xmmword_1B6917E20;
    v156 = (int64x2_t)xmmword_1B6917E30;
    v157 = (int64x2_t)xmmword_1B6917E40;
    v158 = (int64x2_t)xmmword_1B6917E50;
    v159 = (int64x2_t)xmmword_1B6917E60;
    v160 = (int64x2_t)xmmword_1B6917E70;
    v161 = (int64x2_t)xmmword_1B6917E80;
    v162 = byte_1EF139D55;
    v163 = (int64x2_t)xmmword_1B6917590;
    v164.i64[0] = 0x101010101010101;
    v164.i64[1] = 0x101010101010101;
    v165 = vdupq_n_s64(0x10uLL);
    v895[1732] = 0;
    do
    {
      v166 = vuzp1q_s8(*(int8x16_t *)((char *)&unk_1B692D5E0 + v154), *(int8x16_t *)((char *)&unk_1B692D5E0 + v154 + 16));
      v914.val[0] = vaddq_s8(v166, v166);
      v914.val[2] = vorrq_s8(v914.val[0], v164);
      v167 = vuzp1q_s8(*(int8x16_t *)((char *)&unk_1B692D660 + v154), *(int8x16_t *)((char *)&unk_1B692D660 + v154 + 16));
      v168 = vaddq_s8(v167, v167);
      v169 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v163), (int32x4_t)vceqzq_s64(v161)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v160), (int32x4_t)vceqzq_s64(v159)));
      v170 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v158), (int32x4_t)vceqzq_s64(v157)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v156), (int32x4_t)vceqzq_s64(v155)));
      v914.val[1] = vsubq_s8(v168, vuzp1q_s8(v169, v170));
      v914.val[3] = vsubq_s8(v168, vuzp1q_s8(vmvnq_s8(v169), vmvnq_s8(v170)));
      vst4q_s8(v162, v914);
      v162 += 64;
      v160 = vaddq_s64(v160, v165);
      v161 = vaddq_s64(v161, v165);
      v163 = vaddq_s64(v163, v165);
      v159 = vaddq_s64(v159, v165);
      v158 = vaddq_s64(v158, v165);
      v157 = vaddq_s64(v157, v165);
      v156 = vaddq_s64(v156, v165);
      v155 = vaddq_s64(v155, v165);
      v154 += 32;
    }
    while (v154 != 128);
    *(_QWORD *)(v869 + 32) = v863;
    *(_QWORD *)(v869 + 16) = 0x1FE00000000;
    *(_DWORD *)(v869 + 24) = -1;
    v171 = *(_QWORD *)(v885 + 14144);
    *(_QWORD *)v869 = v171;
    *(_QWORD *)(v869 + 8) = v171;
    *(_DWORD *)(v869 + 40) = 0;
    v172 = *(_DWORD *)(v885 + 14184);
    if (((0xA5u >> (v172 - 2)) & 1) != 0)
      v173 = 0;
    else
      v173 = *v29;
    if ((v172 - 2) >= 8)
      v174 = *v29;
    else
      v174 = v173;
    v175 = 1;
    if (v172 != 2 && v172 != 7)
      v175 = v172 == 4 || v172 == 9;
    v177 = 0;
    v178 = *v15;
    word_1EF13930C = 17664;
    dword_1EF139308 = 922815232;
    unk_1EF13930E = xmmword_1B6917E90;
    unk_1EF13931E = 0x7FE272EB7FE55FEELL;
    unk_1EF139326 = xmmword_1B692C644;
    unk_1EF139336 = unk_1B692C654;
    unk_1EF139346 = 0x7DEA4CF952FB38FCLL;
    unk_1EF13938E = xmmword_1B692C6AC;
    unk_1EF13939E = unk_1B692C6BC;
    unk_1EF1393AE = xmmword_1B692C6CC;
    unk_1EF13934E = xmmword_1B692C66C;
    unk_1EF13935E = unk_1B692C67C;
    unk_1EF13936E = xmmword_1B692C68C;
    unk_1EF13937E = unk_1B692C69C;
    xmmword_1EF139418 = unk_1B692C736;
    unk_1EF139428 = xmmword_1B692C746;
    unk_1EF139432 = *(__int128 *)((char *)&xmmword_1B692C746 + 10);
    xmmword_1EF1393B8 = *(__int128 *)((char *)&xmmword_1B692C6CC + 10);
    unk_1EF1393C8 = xmmword_1B692C6E6;
    xmmword_1EF1393D8 = unk_1B692C6F6;
    unk_1EF1393E8 = xmmword_1B692C706;
    word_1EF1394A2 = 25074;
    xmmword_1EF139442 = xmmword_1B692C760;
    unk_1EF139452 = unk_1B692C770;
    xmmword_1EF139482 = xmmword_1B692C7A0;
    unk_1EF139492 = unk_1B692C7B0;
    xmmword_1EF139462 = xmmword_1B692C780;
    unk_1EF139472 = unk_1B692C790;
    xmmword_1EF1394C6 = xmmword_1B692C7E2;
    unk_1EF1394D6 = unk_1B692C7F2;
    xmmword_1EF1394A6 = xmmword_1B692C7C2;
    unk_1EF1394B6 = unk_1B692C7D2;
    unk_1EF139510 = *(__int128 *)((char *)&xmmword_1B692C822 + 10);
    xmmword_1EF1394F6 = unk_1B692C812;
    unk_1EF139506 = xmmword_1B692C822;
    xmmword_1EF1394E6 = xmmword_1B692C802;
    xmmword_1EF139540 = xmmword_1B692C85C;
    unk_1EF139550 = unk_1B692C86C;
    xmmword_1EF139520 = xmmword_1B692C83C;
    *(_OWORD *)algn_1EF139530 = unk_1B692C84C;
    unk_1EF13958A = *(__int128 *)((char *)&xmmword_1B692C89C + 10);
    xmmword_1EF139570 = unk_1B692C88C;
    unk_1EF139580 = xmmword_1B692C89C;
    xmmword_1EF139560 = xmmword_1B692C87C;
    v179 = &dword_1EF13959A;
    xmmword_1EF1393F8 = unk_1B692C716;
    unk_1EF139408 = xmmword_1B692C726;
    do
    {
      *v179 = *(_DWORD *)((char *)&unk_1B692C8B6 + v177);
      *((_WORD *)v179 + 2) = *(_WORD *)((char *)&unk_1B692C8B6 + v177 + 4);
      v177 += 8;
      v179 = (int *)((char *)v179 + 658);
    }
    while (v177 != 24);
    v180 = 0;
    v181 = &qword_1EF1395A0;
    do
    {
      *v181 = qword_1B692C8CE[v180];
      v180 += 3;
      v181 = (uint64_t *)((char *)v181 + 658);
    }
    while (v180 != 9);
    v182 = &qword_1EF1395A8;
    v183 = 1u;
    do
    {
      *v182 = qword_1B692C8CE[v183];
      v183 += 3;
      v182 = (uint64_t *)((char *)v182 + 658);
    }
    while (v183 != 10);
    v184 = &qword_1EF1395B0;
    v185 = 2u;
    do
    {
      *v184 = qword_1B692C8CE[v185];
      v185 += 3;
      v184 = (uint64_t *)((char *)v184 + 658);
    }
    while (v185 != 11);
    v186 = 0;
    v187 = &xmmword_1EF1395B8;
    do
    {
      v188 = *(_OWORD *)((char *)&unk_1B692C916 + v186 + 16);
      *v187 = *(_OWORD *)((char *)&unk_1B692C916 + v186);
      v187[1] = v188;
      *((_QWORD *)v187 + 4) = *(_QWORD *)((char *)&unk_1B692C916 + v186 + 32);
      v186 += 40;
      v187 = (__int128 *)((char *)v187 + 658);
    }
    while (v186 != 120);
    v189 = 0;
    v190 = &xmmword_1EF1395E0;
    do
    {
      v191 = *(_OWORD *)((char *)&unk_1B692C98E + v189 + 80);
      v190[4] = *(_OWORD *)((char *)&unk_1B692C98E + v189 + 64);
      v190[5] = v191;
      v190[6] = *(_OWORD *)((char *)&unk_1B692C98E + v189 + 96);
      *(__int128 *)((char *)v190 + 106) = *(_OWORD *)((char *)&unk_1B692C98E + v189 + 106);
      v192 = *(_OWORD *)((char *)&unk_1B692C98E + v189 + 16);
      *v190 = *(_OWORD *)((char *)&unk_1B692C98E + v189);
      v190[1] = v192;
      v193 = *(_OWORD *)((char *)&unk_1B692C98E + v189 + 32);
      v194 = *(_OWORD *)((char *)&unk_1B692C98E + v189 + 48);
      v189 += 122;
      v190[2] = v193;
      v190[3] = v194;
      v190 = (__int128 *)((char *)v190 + 658);
    }
    while (v189 != 366);
    v195 = 0;
    v196 = &xmmword_1EF13965A;
    do
    {
      v197 = *(_OWORD *)((char *)&unk_1B692CAFC + v195 + 80);
      v196[4] = *(_OWORD *)((char *)&unk_1B692CAFC + v195 + 64);
      v196[5] = v197;
      v196[6] = *(_OWORD *)((char *)&unk_1B692CAFC + v195 + 96);
      *(__int128 *)((char *)v196 + 106) = *(_OWORD *)((char *)&unk_1B692CAFC + v195 + 106);
      v198 = *(_OWORD *)((char *)&unk_1B692CAFC + v195 + 16);
      *v196 = *(_OWORD *)((char *)&unk_1B692CAFC + v195);
      v196[1] = v198;
      v199 = *(_OWORD *)((char *)&unk_1B692CAFC + v195 + 32);
      v200 = *(_OWORD *)((char *)&unk_1B692CAFC + v195 + 48);
      v195 += 122;
      v196[2] = v199;
      v196[3] = v200;
      v196 = (__int128 *)((char *)v196 + 658);
    }
    while (v195 != 366);
    v201 = 0;
    v202 = &xmmword_1EF1396D4;
    do
    {
      v203 = *(_OWORD *)((char *)&unk_1B692CC6A + v201 + 80);
      v202[4] = *(_OWORD *)((char *)&unk_1B692CC6A + v201 + 64);
      v202[5] = v203;
      *((_WORD *)v202 + 48) = *(_WORD *)((char *)&unk_1B692CC6A + v201 + 96);
      v204 = *(_OWORD *)((char *)&unk_1B692CC6A + v201 + 16);
      *v202 = *(_OWORD *)((char *)&unk_1B692CC6A + v201);
      v202[1] = v204;
      v206 = *(_OWORD *)((char *)&unk_1B692CC6A + v201 + 32);
      v205 = *(_OWORD *)((char *)&unk_1B692CC6A + v201 + 48);
      v201 += 98;
      v202[2] = v206;
      v202[3] = v205;
      v202 = (__int128 *)((char *)v202 + 658);
    }
    while (v201 != 294);
    v207 = 0;
    v208 = &xmmword_1EF139738;
    do
    {
      v209 = *(_OWORD *)((char *)&unk_1B692CD90 + v207 + 80);
      v208[4] = *(_OWORD *)((char *)&unk_1B692CD90 + v207 + 64);
      v208[5] = v209;
      v208[6] = *(_OWORD *)((char *)&unk_1B692CD90 + v207 + 96);
      *(__int128 *)((char *)v208 + 106) = *(_OWORD *)((char *)&unk_1B692CD90 + v207 + 106);
      v210 = *(_OWORD *)((char *)&unk_1B692CD90 + v207 + 16);
      *v208 = *(_OWORD *)((char *)&unk_1B692CD90 + v207);
      v208[1] = v210;
      v211 = *(_OWORD *)((char *)&unk_1B692CD90 + v207 + 32);
      v212 = *(_OWORD *)((char *)&unk_1B692CD90 + v207 + 48);
      v207 += 122;
      v208[2] = v211;
      v208[3] = v212;
      v208 = (__int128 *)((char *)v208 + 658);
    }
    while (v207 != 366);
    v213 = 0;
    v214 = &xmmword_1EF1397B2;
    do
    {
      v215 = *(_OWORD *)((char *)&unk_1B692CEFE + v213 + 80);
      v214[4] = *(_OWORD *)((char *)&unk_1B692CEFE + v213 + 64);
      v214[5] = v215;
      v214[6] = *(_OWORD *)((char *)&unk_1B692CEFE + v213 + 96);
      *(__int128 *)((char *)v214 + 106) = *(_OWORD *)((char *)&unk_1B692CEFE + v213 + 106);
      v216 = *(_OWORD *)((char *)&unk_1B692CEFE + v213 + 16);
      *v214 = *(_OWORD *)((char *)&unk_1B692CEFE + v213);
      v214[1] = v216;
      v217 = *(_OWORD *)((char *)&unk_1B692CEFE + v213 + 32);
      v218 = *(_OWORD *)((char *)&unk_1B692CEFE + v213 + 48);
      v213 += 122;
      v214[2] = v217;
      v214[3] = v218;
      v214 = (__int128 *)((char *)v214 + 658);
    }
    while (v213 != 366);
    if (v175)
    {
      for (n = 0; n != 22; n += 2)
      {
        v220 = v869 + n;
        v221 = (__int16)(byte_1B692D06C[n + 1] + (unsigned __int16)((byte_1B692D06C[n] * v178) >> 4));
        if (v221 <= 1)
          v221 = 1;
        if (v221 >= 0x7E)
          v221 = 126;
        v222 = 63 - v221;
        v223 = v221 - 64;
        v224 = v221 > 0x3F;
        if (v224)
          v222 = v223;
        *(_BYTE *)(v220 + 48) = v222;
        *(_BYTE *)(v220 + 49) = v224;
      }
      for (ii = 0; ii != 20; ii += 2)
      {
        v226 = v869 + ii;
        v227 = (__int16)(byte_1B692D082[ii + 1] + (unsigned __int16)((byte_1B692D082[ii] * v178) >> 4));
        if (v227 <= 1)
          v227 = 1;
        if (v227 >= 0x7E)
          v227 = 126;
        v228 = 63 - v227;
        v229 = v227 - 64;
        v230 = v227 > 0x3F;
        if (v230)
          v228 = v229;
        *(_BYTE *)(v226 + 168) = v228;
        *(_BYTE *)(v226 + 169) = v230;
      }
      for (jj = 0; jj != 658; jj += 2)
      {
        v232 = v869 + jj;
        v233 = (__int16)(*((char *)&dword_1EF139308 + jj + 1)
                       + (unsigned __int16)((*((char *)&dword_1EF139308 + jj) * v178) >> 4));
        if (v233 <= 1)
          v233 = 1;
        if (v233 >= 0x7E)
          v233 = 126;
        v234 = 63 - v233;
        v235 = v233 - 64;
        v236 = v233 > 0x3F;
        if (v236)
          v234 = v235;
        *(_BYTE *)(v232 + 188) = v234;
        *(_BYTE *)(v232 + 189) = v236;
      }
      for (kk = 0; kk != 6; kk += 2)
      {
        v238 = v869 + kk;
        v239 = (__int16)(byte_1B692D096[kk + 1] + (unsigned __int16)((byte_1B692D096[kk] * v178) >> 4));
        if (v239 <= 1)
          v239 = 1;
        if (v239 >= 0x7E)
          v239 = 126;
        v240 = 63 - v239;
        v241 = v239 - 64;
        v242 = v239 > 0x3F;
        if (v242)
          v240 = v241;
        *(_BYTE *)(v238 + 846) = v240;
        *(_BYTE *)(v238 + 847) = v242;
      }
      for (mm = 0; mm != 116; mm += 2)
      {
        v244 = v869 + mm;
        v245 = (__int16)(byte_1B692D09C[mm + 1] + (unsigned __int16)((byte_1B692D09C[mm] * v178) >> 4));
        if (v245 <= 1)
          v245 = 1;
        if (v245 >= 0x7E)
          v245 = 126;
        v246 = 63 - v245;
        v247 = v245 - 64;
        v248 = v245 > 0x3F;
        if (v248)
          v246 = v247;
        *(_BYTE *)(v244 + 852) = v246;
        *(_BYTE *)(v244 + 853) = v248;
      }
    }
    else
    {
      for (nn = 0; nn != 22; nn += 2)
      {
        v250 = v869 + nn;
        v251 = (__int16)(byte_1B692D06C[nn + 1] + (unsigned __int16)((byte_1B692D06C[nn] * v178) >> 4));
        if (v251 <= 1)
          v251 = 1;
        if (v251 >= 0x7E)
          v251 = 126;
        v252 = 63 - v251;
        v253 = v251 - 64;
        v254 = v251 > 0x3F;
        if (v254)
          v252 = v253;
        *(_BYTE *)(v250 + 48) = v252;
        *(_BYTE *)(v250 + 49) = v254;
      }
      for (i1 = 0; i1 != 26; i1 += 2)
      {
        v256 = (_BYTE *)(v869 + 70 + i1);
        v257 = (__int16)(byte_1B692D110[26 * v174 + 1 + i1]
                       + (unsigned __int16)((byte_1B692D110[26 * v174 + i1] * v178) >> 4));
        if (v257 <= 1)
          v257 = 1;
        if (v257 >= 0x7E)
          v257 = 126;
        v258 = 63 - v257;
        v259 = v257 - 64;
        v260 = v257 > 0x3F;
        if (v260)
          v258 = v259;
        *v256 = v258;
        v256[1] = v260;
      }
      v261 = 0;
      v262 = vdupq_n_s32(v178);
      v263 = (char *)&unk_1B692D15E + 32 * v174;
      v913 = vld2q_s8(v263);
      v264 = vmovl_s8(*(int8x8_t *)v913.val[0].i8);
      v265 = vmovl_high_s8(v913.val[0]);
      v266 = vmovl_s16(*(int16x4_t *)v265.i8);
      v267 = vmulq_s32(v262, vmovl_high_s16(v265));
      v268 = vmulq_s32(v262, v266);
      v913.val[0].i64[0] = 0x1000100010001;
      v913.val[0].i64[1] = 0x1000100010001;
      v269 = (uint16x8_t)vmaxq_s16(vaddw_s8(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v262, vmovl_s16(*(int16x4_t *)v264.i8)), 4uLL), vmulq_s32(v262, vmovl_high_s16(v264)), 4uLL), *(int8x8_t *)v913.val[1].i8), (int16x8_t)v913.val[0]);
      v913.val[0] = (int8x16_t)vmaxq_s16(vaddw_high_s8(vshrn_high_n_s32(vshrn_n_s32(v268, 4uLL), v267, 4uLL), v913.val[1]), (int16x8_t)v913.val[0]);
      v913.val[1].i64[0] = 0x7E007E007E007ELL;
      v913.val[1].i64[1] = 0x7E007E007E007ELL;
      v913.val[0] = (int8x16_t)vminq_u16((uint16x8_t)v913.val[0], (uint16x8_t)v913.val[1]);
      v270 = (int8x16_t)vminq_u16(v269, (uint16x8_t)v913.val[1]);
      v913.val[1].i64[0] = 0x3F003F003F003FLL;
      v913.val[1].i64[1] = 0x3F003F003F003FLL;
      v271 = vuzp1q_s8(v270, v913.val[0]);
      v272.i64[0] = 0x3F3F3F3F3F3F3F3FLL;
      v272.i64[1] = 0x3F3F3F3F3F3F3F3FLL;
      v267.i64[0] = 0xC0C0C0C0C0C0C0C0;
      v267.i64[1] = 0xC0C0C0C0C0C0C0C0;
      v273 = vuzp1q_s8((int8x16_t)vcgtq_u16((uint16x8_t)v270, (uint16x8_t)v913.val[1]), (int8x16_t)vcgtq_u16((uint16x8_t)v913.val[0], (uint16x8_t)v913.val[1]));
      v913.val[0] = vbslq_s8(v273, vaddq_s8(v271, (int8x16_t)v267), vsubq_s8(v272, v271));
      v271.i64[0] = 0x101010101010101;
      v271.i64[1] = 0x101010101010101;
      v913.val[1] = vandq_s8(v273, v271);
      v274 = (char *)(v869 + 96);
      vst2q_s8(v274, v913);
      do
      {
        v275 = (_BYTE *)(v869 + 128 + v261);
        v276 = (__int16)(byte_1B692D1BE[28 * v174 + 1 + v261]
                       + (unsigned __int16)((byte_1B692D1BE[28 * v174 + v261] * v178) >> 4));
        if (v276 <= 1)
          v276 = 1;
        if (v276 >= 0x7E)
          v276 = 126;
        v277 = 63 - v276;
        v278 = v276 - 64;
        v279 = v276 > 0x3F;
        if (v279)
          v277 = v278;
        *v275 = v277;
        v275[1] = v279;
        v261 += 2;
      }
      while (v261 != 28);
      for (i2 = 0; i2 != 12; i2 += 2)
      {
        v281 = (_BYTE *)(v869 + 156 + i2);
        v282 = (__int16)(byte_1B692D212[12 * v174 + 1 + i2]
                       + (unsigned __int16)((byte_1B692D212[12 * v174 + i2] * v178) >> 4));
        if (v282 <= 1)
          v282 = 1;
        if (v282 >= 0x7E)
          v282 = 126;
        v283 = 63 - v282;
        v284 = v282 - 64;
        v285 = v282 > 0x3F;
        if (v285)
          v283 = v284;
        *v281 = v283;
        v281[1] = v285;
      }
      for (i3 = 0; i3 != 20; i3 += 2)
      {
        v287 = v869 + i3;
        v288 = (__int16)(byte_1B692D082[i3 + 1] + (unsigned __int16)((byte_1B692D082[i3] * v178) >> 4));
        if (v288 <= 1)
          v288 = 1;
        if (v288 >= 0x7E)
          v288 = 126;
        v289 = 63 - v288;
        v290 = v288 - 64;
        v291 = v288 > 0x3F;
        if (v291)
          v289 = v290;
        *(_BYTE *)(v287 + 168) = v289;
        *(_BYTE *)(v287 + 169) = v291;
      }
      for (i4 = 0; i4 != 658; i4 += 2)
      {
        v293 = v869 + i4;
        v294 = (__int16)(*((char *)&dword_1EF13959A + 658 * v174 + i4 + 1)
                       + (unsigned __int16)((*((char *)&dword_1EF13959A + 658 * v174 + i4) * v178) >> 4));
        if (v294 <= 1)
          v294 = 1;
        if (v294 >= 0x7E)
          v294 = 126;
        v295 = 63 - v294;
        v296 = v294 - 64;
        v297 = v294 > 0x3F;
        if (v297)
          v295 = v296;
        *(_BYTE *)(v293 + 188) = v295;
        *(_BYTE *)(v293 + 189) = v297;
      }
      for (i5 = 0; i5 != 6; i5 += 2)
      {
        v299 = (_BYTE *)(v869 + 846 + i5);
        v300 = (__int16)(byte_1B692D236[6 * v174 + 1 + i5]
                       + (unsigned __int16)((byte_1B692D236[6 * v174 + i5] * v178) >> 4));
        if (v300 <= 1)
          v300 = 1;
        if (v300 >= 0x7E)
          v300 = 126;
        v301 = 63 - v300;
        v302 = v300 - 64;
        v303 = v300 > 0x3F;
        if (v303)
          v301 = v302;
        *v299 = v301;
        v299[1] = v303;
      }
      v304 = 0;
      v305 = (char *)&unk_1B692D248 + 116 * v174 + 1;
      do
      {
        v306 = (_BYTE *)(v869 + 852 + v304);
        v307 = (__int16)(v305[v304] + (unsigned __int16)((v305[v304 - 1] * v178) >> 4));
        if (v307 <= 1)
          v307 = 1;
        if (v307 >= 0x7E)
          v307 = 126;
        v308 = 63 - v307;
        v309 = v307 - 64;
        v310 = v307 > 0x3F;
        if (v310)
          v308 = v309;
        *v306 = v308;
        v306[1] = v310;
        v304 += 2;
      }
      while (v304 != 116);
    }
    for (i6 = 0; i6 != 920; i6 += 2)
      *(_BYTE *)(v869 + i6 + 48) = *(_BYTE *)(v869 + i6 + 49) | (2 * *(_BYTE *)(v869 + i6 + 48));
  }
  *(_DWORD *)(v908 + 2480) = 0;
  v24 = v906 + 205536;
  v312 = v906 + 4 * v887;
  *(_DWORD *)(v312 + 207768) = 0;
  *(_DWORD *)(v312 + 207800) = 0;
LABEL_372:
  v313 = *(_DWORD *)(v14 + 14176);
  v314 = *(_DWORD *)(v24 + 2296);
  *(_DWORD *)(v23 + 2428) = v314;
  v881 = v314;
  if (v314)
  {
    v315 = *(_DWORD *)(v24 + 2300);
    v316 = v313 / v315;
    v317 = v313 / v315 * v315;
    v318 = *(_DWORD *)(v24 + 2304) / 16;
    v879 = v318 - 1 + v317;
    v319 = *(_DWORD *)(v24 + 2308);
    v24 = v906 + 205536;
    v880 = v317;
    v877 = v317 + (v319 / 16 - 1) * v318;
    v878 = v877 + v318 - 1;
    *(_DWORD *)(v23 + 2436) = v316;
    *(_DWORD *)(v23 + 2440) = *(_DWORD *)(v906 + 207844) * v316 + 4;
    *(_DWORD *)(v23 + 2444) = *(_DWORD *)(v906 + 207844) * (v316 + 1) - 6;
    *(_DWORD *)(v23 + 2448) = *(_DWORD *)(v906 + 207844) * v316;
    *(_DWORD *)(v23 + 2452) = *(_DWORD *)(v906 + 207844) * (v316 + 1) - 1;
  }
  else
  {
    v877 = -1;
    v878 = -1;
    v879 = -1;
    v880 = -1;
  }
  v851 = v2;
  v852 = (uint64_t *)(v868 + 205856);
  *(_DWORD *)(*(_QWORD *)(v24 + 320) + 24) = 1;
  if (*(_BYTE *)(v24 + 2550) == 1 && *(_BYTE *)(v906 + 1057))
  {
    v320 = *(_QWORD *)(v24 + 304);
    v321 = (unsigned __int16 *)(v320 + 19112);
    v322 = 1;
    if (*(_BYTE *)(v906 + 1057) == 2)
      v322 = 7;
    v24 = v906 + 205536;
    v323 = v321[v322];
    if (*(_BYTE *)(v906 + 1057) == 2)
      v321 = (unsigned __int16 *)(v320 + 19124);
    v324 = v323 + 16;
    v325 = *v321 + 16;
    if (v325 >= *(_DWORD *)(v320 + 228))
      v325 = *(_DWORD *)(v320 + 228);
    v326 = *(_DWORD *)(v320 + 196);
    if (v324 < v326)
      v326 = v324;
    *(_DWORD *)(*(_QWORD *)(v906 + 205856) + 24) = 0;
  }
  else
  {
    v327 = *(_QWORD *)(v24 + 304);
    v325 = *(_DWORD *)(v327 + 228);
    v326 = *(_DWORD *)(v327 + 196);
  }
  v328 = 0;
  v853 = v4 + v866;
  v850 = v7 + v6;
  v875 = v855 + ~v886 + v313;
  v876 = v313 + v886;
  *(_DWORD *)(*(_QWORD *)(v24 + 320) + 12) = v325 >> 4;
  v891 = v15 + 166;
  *(_DWORD *)(*(_QWORD *)(v24 + 320) + 8) = v326 >> 4;
  v329 = v906 + 4 * v887;
  v873 = (_DWORD *)(v329 + 207800);
  v874 = (_DWORD *)(v329 + 207768);
  v330 = v856;
  if (v856 <= 1)
    v330 = 1;
  v872 = v330;
  v331 = v867;
  v889 = v14 + 47920;
  while (2)
  {
    *(_QWORD *)v909 = 0;
    v902 = v328;
    if (v15[226])
    {
      if (v328 || v867 > v865)
        sub_1B68A3B38(v18, 0);
    }
    else
    {
      v870 = *(_QWORD *)(v14 + 14144);
      v871 = v16[1732];
    }
    v332 = v331 / v886;
    v333 = v331 / v886 * v886;
    v334 = *(_DWORD *)(v15 + 58);
    v335 = v331 - v334;
    if (v331 % v886 + 1 == v334)
      v336 = 0;
    else
      v336 = v331 % v886 + 1;
    v337 = v331 % v886;
    *(_DWORD *)(v15 + 54) = v331;
    *(_DWORD *)(v15 + 38) = v331 % v886;
    *(_DWORD *)(v15 + 42) = v332;
    v338 = *(_DWORD *)(v14 + 14176);
    v339 = *(_QWORD *)(v23 + 2472);
    v340 = v339 + 288 * v334;
    v341 = *(_QWORD *)(v15 + 214);
    *v891 = 0u;
    *(_OWORD *)(v15 + 182) = 0u;
    *(_QWORD *)(v15 + 198) = 0;
    v342 = v331 == v333 || v331 <= v338;
    v343 = v339 + 288 * (int)v337;
    if (!v342)
    {
      *(_QWORD *)v891 = v343 - 288;
      if (v335 > v338)
        *(_QWORD *)(v15 + 190) = v340;
    }
    if (v335 >= v338)
      *(_QWORD *)(v15 + 174) = v339 + 288 * v337;
    v344 = v335 + 1;
    if (v336)
      v345 = v344 < v338;
    else
      v345 = 1;
    if (!v345)
      *(_QWORD *)(v15 + 182) = v339 + 288 * v336;
    if (v331 > v338)
    {
      v346 = v340 - 288;
      if (v331 == v333)
        v347 = v346;
      else
        v347 = v343 - 288;
      *(_QWORD *)(v15 + 198) = v347;
    }
    *(_QWORD *)(v341 + 240) = 0;
    *(_QWORD *)(v341 + 248) = 0;
    *(_QWORD *)(v341 + 256) = 0;
    *(_QWORD *)&v348 = 0x2222222222222222;
    *((_QWORD *)&v348 + 1) = 0x2222222222222222;
    *(_OWORD *)(v341 + 208) = v348;
    *(_OWORD *)(v341 + 224) = v348;
    if (v15[226])
    {
      if (!v15[227])
      {
        *(_BYTE *)(v341 + 176) = 0;
        *(_DWORD *)(v341 + 177) = -1;
        *(_BYTE *)(v341 + 181) = -1;
        *(_QWORD *)(v341 + 168) = 0;
        *(_BYTE *)(v341 + 199) = 0;
        *(_QWORD *)&v349 = 0x2020202020202020;
        *((_QWORD *)&v349 + 1) = 0x2020202020202020;
        *(_OWORD *)(v341 + 128) = v349;
        *(_OWORD *)(v341 + 144) = v349;
        *(_OWORD *)v341 = 0u;
        *(_OWORD *)(v341 + 16) = 0u;
        *(_OWORD *)(v341 + 32) = 0u;
        *(_OWORD *)(v341 + 48) = 0u;
        *(_OWORD *)(v341 + 64) = 0u;
        *(_OWORD *)(v341 + 80) = 0u;
        *(_OWORD *)(v341 + 96) = 0u;
        *(_OWORD *)(v341 + 112) = 0u;
      }
      *(_QWORD *)(v341 + 160) = *(_QWORD *)(v341 + 272);
    }
    *(_DWORD *)(v23 + 2432) = 0;
    v350 = *(_DWORD *)(v15 + 54);
    v352 = v350 >= v880 && v350 <= v879;
    v354 = v350 >= v877 && v350 <= v878 || v352;
    if ((v881 & 1) != 0 && v354)
      *(_DWORD *)(v23 + 2432) = 1;
    v356 = v331 > v876 && v331 < v875;
    *(_DWORD *)(v15 + 62) = v356;
    v357 = sub_1B68CD66C(v906, v331);
    *(_BYTE *)(v23 + 2456) = v357;
    v358 = sub_1B68CD554(v906, v331, v357, (float)*v15);
    sub_1B68A69C8(v906, v14, v14, v889, v358);
    v359 = *(unsigned __int8 **)(v15 + 78);
    LOBYTE(v360) = v359[55];
    v361 = (float)v360;
    v362 = v359[1];
    if (v362 > 1)
    {
      v363 = v906 + 205536;
      v364 = *(_QWORD *)(v906 + 205856);
      if (v337 < *(_DWORD *)(v364 + 12) && v332 < *(_DWORD *)(v364 + 8))
      {
        v365 = *(_QWORD *)(v23 + 2304);
        v366 = *(_DWORD *)(v15 + 42);
        v367 = *(_QWORD *)(v15 + 254);
        v368 = (16 * *(_DWORD *)(v15 + 38));
        v369 = *(_QWORD *)(v908 + 2312);
        v370 = *(unsigned int *)(v367 + 248);
        v371 = *(_QWORD *)(v367 + 136) + v368 + (8 * v366 * v370);
        off_1EF13A480(*(_QWORD *)(v367 + 128) + v368 + (16 * v366 * *(_DWORD *)(v367 + 232)), *(unsigned int *)(v367 + 232), v365, 16);
        v372 = v370;
        v18 = v869;
        v373 = v369;
        v23 = v908;
        off_1EF13A480(v371, v372, v373, 8);
        v363 = v906 + 205536;
        v359 = *(unsigned __int8 **)(v15 + 78);
        LOBYTE(v362) = v359[1];
      }
      if ((v362 & 0xFE) == 4)
      {
        ++*(_DWORD *)(v23 + 2480);
        goto LABEL_454;
      }
      if (!(v359[52] + 16 * v359[53]))
LABEL_454:
        v361 = (float)*v15;
    }
    else
    {
      sub_1B6907264(v889);
      v359 = *(unsigned __int8 **)(v15 + 78);
      if (v359[1])
      {
        v363 = v906 + 205536;
        goto LABEL_455;
      }
      if (v359[2])
      {
        v363 = v906 + 205536;
        goto LABEL_455;
      }
      v363 = v906 + 205536;
      if (!(v359[52] + 16 * v359[53]))
        goto LABEL_454;
    }
LABEL_455:
    if (*(_BYTE *)(*(_QWORD *)(v906 + 136) + 577) == 1)
    {
      v374 = v359[1];
      if (v374 >= 2 && (v375 = *(_QWORD *)(v15 + 86), v376 = *(unsigned __int8 *)(v375 + 272), *(_BYTE *)(v375 + 272)))
      {
        v377 = (unsigned __int8 *)(v375 + 25);
        while (1)
        {
          v378 = *(v377 - 1);
          if (v378 != 32)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v23 + 8 * v378) + 1356))
              break;
          }
          if (v374 == 5 || v374 == 3)
          {
            v379 = *v377;
            if (v379 != 32)
            {
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * v379) + 1356))
                break;
            }
          }
          v377 += 16;
          if (!--v376)
            goto LABEL_466;
        }
        v380 = 1;
      }
      else
      {
LABEL_466:
        v380 = 0;
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v363 + 304) + 4920) + 216 * v331 + 67) = v380;
    }
    v381 = v15[226];
    if (v15[226])
    {
      v910 = *(_OWORD *)(v15 + 166);
      v911 = *(_QWORD *)(v15 + 214);
      v382 = *(_DWORD *)(v18 + 40) + *(_DWORD *)(v18 + 24) + 8 * (*(_DWORD *)v18 - *(_DWORD *)(v18 + 8));
      v383 = v382 & ~(v382 >> 31);
    }
    else
    {
      v383 = 0;
    }
    v384 = *(_DWORD *)(v14 + 14184);
    v342 = v384 > 9;
    v385 = (1 << v384) & 0x294;
    if (v342 || v385 == 0)
    {
      v436 = *(_BYTE *)(*(_QWORD *)(v15 + 78) + 1) & 0xFE;
      if (v381)
      {
        sub_1B68F8570(v18, (uint64_t *)&v910, v15[66], v436 == 4);
      }
      else if (v436 != 4)
      {
        sub_1B68AD158(v863, *(_DWORD *)(v23 + 2480));
        *(_DWORD *)(v23 + 2480) = 0;
      }
    }
    if (v883[1314] && !v895[1764])
      goto LABEL_613;
    if ((*(_BYTE *)(*(_QWORD *)(v15 + 78) + 1) & 0xFE) != 4)
    {
      v387 = sub_1B68AD1CC(v889, v863, v864, &v909[4], v909);
      v388 = *(_BYTE **)(v15 + 214);
      v389 = v388[252] != 0;
      v390 = v388[241] != 0;
      v391 = v388[246] != 0;
      v392 = v390 | (2 * (v388[240] != 0));
      v393 = v388[247] != 0;
      v394 = v388[249] != 0;
      v395 = v394 | (2 * (v388[248] != 0));
      v396 = 4 * (v388[243] != 0);
      v397 = v388[250] != 0;
      v398 = v388[251] != 0;
      v399 = v388[253] != 0;
      v400 = v388[254] != 0;
      v401 = v397 | (4 * ((v388[242] != 0) | (2 * (v388[240] != 0)))) | (2 * (v388[248] != 0));
      v402 = v396 | (8 * v390) | (2 * v394);
      v403 = v400 | (4 * (v391 | (2 * (v388[244] != 0)))) | (2 * v389);
      v404 = (4 * v393) | (8 * (v388[245] != 0)) | (2 * v399);
      v405 = (v388[245] != 0) | (4 * v392) | (2 * (v388[244] != 0));
      v406 = v396 | (8 * (v388[242] != 0)) | (2 * v391);
      LOBYTE(v388) = v388[255] != 0;
      v407 = (4 * v398) | (8 * v397) | (2 * v400);
      v18 = v869;
      v14 = v885;
      v408 = v402 | (16 * v401) | v398;
      v23 = v908;
      v409 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v908 + 80) + 32)
                     + 4 * (v337 + *(_DWORD *)(*(_QWORD *)(v908 + 80) + 12) * v332));
      *v409 = v408;
      v409[1] = v404 | (16 * v403) | v388;
      v409[2] = v406 | (16 * v405) | v393;
      v409[3] = v407 | (16 * (v399 | (4 * v395) | (2 * v389))) | v388;
      if (v387)
        goto LABEL_613;
    }
    v410 = *(_QWORD *)(v23 + 2472);
    v893 = *(_DWORD *)(v15 + 42);
    v897 = *(unsigned int *)(v15 + 54);
    v899 = *(_DWORD *)(v15 + 38);
    v411 = *(_QWORD *)(v15 + 254);
    v412 = (_QWORD *)(v410 + 288 * v899);
    v413 = *(_QWORD **)(v15 + 214);
    v414 = v413;
    v903 = v412;
    if (*(_QWORD *)(v15 + 174))
    {
      memcpy((void *)(v410 + 288 * *(int *)(v15 + 58)), v412, 0x120uLL);
      v412 = (_QWORD *)(v410 + 288 * v899);
      v414 = *(const void **)(v15 + 214);
    }
    v901 = v410;
    memcpy(v412, v414, 0x120uLL);
    v417 = *(_QWORD *)(v15 + 86);
    v418 = *(unsigned __int8 *)(v417 + 272);
    if (!*(_BYTE *)(v417 + 272))
    {
      if (*(_DWORD *)(v411 + 1164) <= (int)v897)
      {
        v433 = 0;
      }
      else
      {
        v433 = *(_WORD **)(v411 + 8 * v15[69] + 1232);
        *(_QWORD *)(*(_QWORD *)(v411 + 1256) + 8 * v897) = v433;
      }
      v16 = v895;
      v23 = v908;
      v437 = v902;
      v435 = v899;
      v438 = v901;
      goto LABEL_544;
    }
    v884 = v383;
    v419 = (_WORD *)v413[34];
    v23 = v908;
    v420 = **(_QWORD **)(v908 + 80);
    v421 = v15[69];
    v422 = *(_DWORD *)(v411 + 1168);
    v423 = *(uint64_t **)(*(_QWORD *)(v411 + 1152) + 8 * v882);
    v424 = *((_DWORD *)v423 + 517);
    if (v424 >= 16)
    {
      v433 = (_WORD *)v423[1];
      v434 = v897;
      v435 = v899;
      goto LABEL_538;
    }
    v860 = *(_DWORD *)(v411 + 1168);
    v861 = v15[69];
    v862 = **(_QWORD **)(v908 + 80);
    v425 = (((16 * *((_DWORD *)v423 + 518) + 255) >> 8) + 255) & 0x1FFFF00;
    *((_DWORD *)v423 + 517) = v425;
    v426 = *v423;
    v427 = *(_DWORD *)(*v423 + 40);
    if (!v427)
      goto LABEL_502;
    v428 = *(pthread_mutex_t **)(v426 + 8);
    if (v428)
    {
      pthread_mutex_lock(v428);
      v427 = *(_DWORD *)(v426 + 40);
      if (!v427)
      {
        v439 = *(pthread_mutex_t **)(v426 + 8);
        if (v439)
          pthread_mutex_unlock(v439);
LABEL_502:
        v431 = operator new[]();
        v440 = *(pthread_mutex_t **)(v426 + 8);
        if (v440)
          pthread_mutex_lock(v440);
        v441 = *(_DWORD *)(v426 + 40);
        v442 = *(_DWORD *)(v426 + 44);
        if (v441 + 7 <= v442)
        {
          v443 = *(_QWORD *)(v426 + 32);
          v449 = v425 << 7;
          goto LABEL_513;
        }
        *(_DWORD *)(v426 + 44) = 2 * v442 + 16;
        v443 = operator new[]();
        v444 = *(unsigned int *)(v426 + 40);
        v445 = *(_QWORD *)(v426 + 32);
        if ((_DWORD)v444)
        {
          v446 = *(uint64_t **)(v426 + 32);
          v447 = (_QWORD *)v443;
          do
          {
            v448 = *v446++;
            *v447++ = v448;
            --v444;
          }
          while (v444);
        }
        else if (!v445)
        {
          v441 = 0;
          goto LABEL_512;
        }
        v854 = v443;
        MEMORY[0x1BCC9811C](v445, 0x80C80B8603338);
        v443 = v854;
        v441 = *(_DWORD *)(v426 + 40);
LABEL_512:
        v449 = v425 << 7;
        *(_QWORD *)(v426 + 32) = v443;
LABEL_513:
        *(_DWORD *)(v426 + 40) = v441 + 1;
        *(_QWORD *)(v443 + 8 * v441) = v431 + 16 * v425;
        v450 = *(_QWORD *)(v426 + 32);
        v451 = *(int *)(v426 + 40);
        *(_DWORD *)(v426 + 40) = v451 + 1;
        *(_QWORD *)(v450 + 8 * v451) = v431 + 32 * v425;
        v452 = *(_QWORD *)(v426 + 32);
        v453 = *(int *)(v426 + 40);
        *(_DWORD *)(v426 + 40) = v453 + 1;
        *(_QWORD *)(v452 + 8 * v453) = v431 + 48 * v425;
        v454 = *(_QWORD *)(v426 + 32);
        v455 = *(int *)(v426 + 40);
        *(_DWORD *)(v426 + 40) = v455 + 1;
        *(_QWORD *)(v454 + 8 * v455) = v431 + (v425 << 6);
        v456 = *(_QWORD *)(v426 + 32);
        v457 = *(int *)(v426 + 40);
        *(_DWORD *)(v426 + 40) = v457 + 1;
        *(_QWORD *)(v456 + 8 * v457) = v431 + 80 * v425;
        v458 = *(_QWORD *)(v426 + 32);
        v459 = *(int *)(v426 + 40);
        *(_DWORD *)(v426 + 40) = v459 + 1;
        *(_QWORD *)(v458 + 8 * v459) = v431 + 96 * v425;
        v460 = *(_QWORD *)(v426 + 32);
        v461 = *(int *)(v426 + 40);
        *(_DWORD *)(v426 + 40) = v461 + 1;
        *(_QWORD *)(v460 + 8 * v461) = v431 + v449 - 16 * v425;
        v462 = *(_DWORD *)(v426 + 56);
        v463 = *(_DWORD *)(v426 + 60);
        if (v462 < v463)
        {
          v464 = *(_QWORD *)(v426 + 48);
          goto LABEL_522;
        }
        *(_DWORD *)(v426 + 60) = 2 * v463 + 16;
        v464 = operator new[]();
        v465 = *(unsigned int *)(v426 + 56);
        v466 = *(_QWORD *)(v426 + 48);
        if ((_DWORD)v465)
        {
          v467 = *(uint64_t **)(v426 + 48);
          v468 = (_QWORD *)v464;
          do
          {
            v469 = *v467++;
            *v468++ = v469;
            --v465;
          }
          while (v465);
        }
        else if (!v466)
        {
          v462 = 0;
          goto LABEL_521;
        }
        MEMORY[0x1BCC9811C](v466, 0x80C80B8603338);
        v462 = *(_DWORD *)(v426 + 56);
LABEL_521:
        *(_QWORD *)(v426 + 48) = v464;
LABEL_522:
        *(_DWORD *)(v426 + 56) = v462 + 1;
        *(_QWORD *)(v464 + 8 * v462) = v431;
        v470 = *(pthread_mutex_t **)(v426 + 8);
        if (v470)
          pthread_mutex_unlock(v470);
        goto LABEL_524;
      }
    }
    v429 = *(_QWORD *)(v426 + 32);
    v430 = v427 - 1;
    *(_DWORD *)(v426 + 40) = v430;
    v431 = *(_QWORD *)(v429 + 8 * v430);
    v432 = *(pthread_mutex_t **)(v426 + 8);
    if (v432)
      pthread_mutex_unlock(v432);
    if (!v431)
      goto LABEL_502;
LABEL_524:
    if (*(_QWORD *)v426)
      pthread_mutex_lock(*(pthread_mutex_t **)v426);
    v471 = *(_DWORD *)(v426 + 24);
    if (v471 == *(_DWORD *)(v426 + 28))
    {
      *(_DWORD *)(v426 + 28) = 2 * v471 + 2;
      v472 = operator new[]();
      v473 = *(unsigned int *)(v426 + 24);
      v474 = *(_QWORD *)(v426 + 16);
      if ((_DWORD)v473)
      {
        v475 = *(uint64_t **)(v426 + 16);
        v476 = (_QWORD *)v472;
        do
        {
          v477 = *v475++;
          *v476++ = v477;
          --v473;
        }
        while (v473);
LABEL_533:
        MEMORY[0x1BCC9811C](v474, 0x80C80B8603338);
        v471 = *(_DWORD *)(v426 + 24);
      }
      else
      {
        if (v474)
          goto LABEL_533;
        v471 = 0;
      }
      *(_QWORD *)(v426 + 16) = v472;
    }
    else
    {
      v472 = *(_QWORD *)(v426 + 16);
    }
    *(_DWORD *)(v426 + 24) = v471 + 1;
    *(_QWORD *)(v472 + 8 * v471) = v431;
    if (*(_QWORD *)v426)
      pthread_mutex_unlock(*(pthread_mutex_t **)v426);
    v423[*((int *)v423 + 516) + 2] = v431;
    v478 = *((int *)v423 + 516);
    v433 = (_WORD *)v423[v478 + 2];
    *((_DWORD *)v423 + 516) = v478 + 1;
    v424 = *((_DWORD *)v423 + 517);
    v18 = v869;
    v23 = v908;
    v434 = v897;
    v435 = v899;
    v420 = v862;
    v422 = v860;
    v421 = v861;
LABEL_538:
    v479 = 4 * v422;
    v423[1] = (uint64_t)&v433[8 * v418];
    *((_DWORD *)v423 + 517) = v424 - v418;
    *(_QWORD *)(*(_QWORD *)(v411 + 1256) + 8 * v434) = v433;
    *v433 = *v419;
    v433[1] = v419[1];
    v433[2] = v419[2];
    v433[3] = v419[3];
    v433[4] = v419[4];
    v480 = (unsigned __int16)v419[5];
    v433[5] = v480;
    v433[6] = v419[6];
    v433[7] = v419[7];
    *((_BYTE *)v433 + 14) = v421;
    if ((_DWORD)v418 == 1)
    {
      v481 = (_QWORD *)(v420 + 8 * (4 * v435) + 8 * (4 * v893 * v479));
      *v481 = v433;
      v481[1] = v433;
      v481[2] = v433;
      v481[3] = v433;
      v482 = &v481[4 * *(_DWORD *)(v411 + 1168)];
      *v482 = v433;
      v482[1] = v433;
      v482[2] = v433;
      v482[3] = v433;
      v483 = &v482[4 * *(_DWORD *)(v411 + 1168)];
      *v483 = v433;
      v483[1] = v433;
      v483[2] = v433;
      v483[3] = v433;
      v484 = &v483[4 * *(_DWORD *)(v411 + 1168)];
      *v484 = v433;
      v484[1] = v433;
      v484[2] = v433;
      v485 = (char *)v433;
      v14 = v885;
    }
    else
    {
      v486 = v418 - 1;
      v487 = v419 + 15;
      v488 = v433 + 15;
      v14 = v885;
      do
      {
        *(v488 - 7) = *(v487 - 7);
        *(v488 - 6) = *(v487 - 6);
        *(v488 - 5) = *(v487 - 5);
        *(v488 - 4) = *(v487 - 4);
        *(v488 - 3) = *(v487 - 3);
        *(v488 - 2) = *(v487 - 2);
        *(v488 - 1) = *(v487 - 1);
        v489 = *v487;
        v487 += 8;
        *v488 = v489;
        v488 += 8;
        --v486;
      }
      while (v486);
      v490 = (char *)&unk_1B69360A0 + 80 * v480;
      v491 = (_QWORD *)(v420 + 8 * (4 * v435) + 8 * (4 * v893 * v479));
      *v491 = (char *)v433 + (v490[16] & 0xF0);
      v491[1] = (char *)v433 + (v490[17] & 0xF0);
      v491[2] = (char *)v433 + (v490[18] & 0xF0);
      v491[3] = (char *)v433 + (v490[19] & 0xF0);
      v492 = &v491[4 * *(_DWORD *)(v411 + 1168)];
      *v492 = (char *)v433 + (v490[20] & 0xF0);
      v492[1] = (char *)v433 + (v490[21] & 0xF0);
      v492[2] = (char *)v433 + (v490[22] & 0xF0);
      v492[3] = (char *)v433 + (v490[23] & 0xF0);
      v493 = &v492[4 * *(_DWORD *)(v411 + 1168)];
      *v493 = (char *)v433 + (v490[24] & 0xF0);
      v493[1] = (char *)v433 + (v490[25] & 0xF0);
      v493[2] = (char *)v433 + (v490[26] & 0xF0);
      v493[3] = (char *)v433 + (v490[27] & 0xF0);
      v484 = &v493[4 * *(_DWORD *)(v411 + 1168)];
      *v484 = (char *)v433 + (v490[28] & 0xF0);
      v484[1] = (char *)v433 + (v490[29] & 0xF0);
      v484[2] = (char *)v433 + (v490[30] & 0xF0);
      v485 = (char *)v433 + (v490[31] & 0xF0);
    }
    v437 = v902;
    v383 = v884;
    v438 = v901;
    v484[3] = v485;
    v16 = v895;
LABEL_544:
    *(_QWORD *)(v438 + 288 * v435 + 272) = v433;
    if (v15[226] && (v903[20] = v433, v15[226]))
    {
      v494 = *(_DWORD *)(v18 + 40) + *(_DWORD *)(v18 + 24) + 8 * (*(_DWORD *)v18 - *(_DWORD *)(v18 + 8));
      v495 = (v494 & ~(v494 >> 31)) - v383;
      v496 = *(_BYTE **)(v15 + 78);
    }
    else
    {
      v496 = *(_BYTE **)(v15 + 78);
      if ((v496[1] & 0xFE) == 4)
      {
        v495 = 0;
      }
      else
      {
        v495 = v16[1732] - v871 + 8 * (*(_QWORD *)(v14 + 14144) - v870);
        v870 = *(_QWORD *)(v14 + 14144);
        v871 = v16[1732];
      }
    }
    v497 = *(_QWORD *)(v23 + 80);
    v498 = (int)v361 + (char)v496[56];
    if (v498 >= 51)
      v499 = 51;
    else
      v499 = (int)v361 + (char)v496[56];
    v500 = byte_1B6932724[v499 - (v498 & (v498 >> 31))];
    v501 = v496[3];
    v502 = *(_DWORD *)(v15 + 38) + *(_DWORD *)(v497 + 12) * *(_DWORD *)(v15 + 42);
    *(_WORD *)(*(_QWORD *)(v497 + 72) + 2 * v502) = v887;
    *(_BYTE *)(*(_QWORD *)(v497 + 112) + v502) = v361;
    *(_BYTE *)(*(_QWORD *)(v497 + 120) + v502) = v500;
    *(_BYTE *)(*(_QWORD *)(v497 + 128) + v502) = v500;
    *(_BYTE *)(*(_QWORD *)(v497 + 136) + v502) = v501;
    *(_BYTE *)(*(_QWORD *)(v497 + 144) + v502) = 0;
    *v15 = (int)v361;
    *v874 += *(_DWORD *)&v909[4];
    *v873 += *(_DWORD *)v909;
    if (*(_DWORD *)(v906 + 207872))
    {
      v503 = *(_DWORD *)(v906 + 207880) + v495;
      *(_DWORD *)(v906 + 207880) = v503;
      if (*(_DWORD *)(v906 + 207876))
      {
        if ((v503 + v859[1] * *v859 / 2) > *(_DWORD *)(v906 + 207868))
          *(_BYTE *)(v14 + 28) = 1;
      }
    }
    ++v331;
    v328 = v437 + 1;
    if (v328 != v872)
      continue;
    break;
  }
  v504 = v866;
  v505 = v857;
  if (v856 + v867 == v855 + v865)
  {
    if (v15[226])
    {
      sub_1B68A3B38(v18, 1);
      v506 = *(_DWORD *)(v18 + 16) >> 8;
      v507 = *(_QWORD *)v18;
      if (((v506 >> (*(_BYTE *)(v18 + 24) + 2)) & 1) != 0)
      {
        v506 &= ~(-1 << (*(_BYTE *)(v18 + 24) + 2));
        v508 = (_BYTE *)(v507 - 1);
        do
        {
          if ((unint64_t)v508 < *(_QWORD *)(v18 + 8))
            break;
          v509 = (*v508--)++ + 1;
        }
        while ((v509 & 0x100) != 0);
        v507 = *(_QWORD *)v18;
      }
      *(_QWORD *)(*(_QWORD *)(v18 + 32) + 16) = v507;
      *(_DWORD *)(*(_QWORD *)(v18 + 32) + 32) = 0;
      *(_BYTE *)(*(_QWORD *)(v18 + 32) + 36) = 0;
      v510 = *(_QWORD *)(v18 + 32);
      v511 = *(_DWORD **)(v510 + 16);
      v512 = *(_DWORD *)(v510 + 32);
      LODWORD(v510) = *(unsigned __int8 *)(v510 + 36);
      v513 = (v506 << (30 - *(_BYTE *)(v18 + 24) - v510)) | v512;
      *v511 = bswap32(v513);
      v514 = v510 + *(_DWORD *)(v18 + 24) + 2;
      v515 = (char *)v511 + (v514 >> 3);
      v516 = v513 << (v514 & 0xF8);
      if (v514 >= 0x20)
        v516 = 0;
      *(_QWORD *)(*(_QWORD *)(v18 + 32) + 16) = v515;
      *(_DWORD *)(*(_QWORD *)(v18 + 32) + 32) = v516;
      *(_BYTE *)(*(_QWORD *)(v18 + 32) + 36) = v514 & 7;
    }
    else
    {
      v517 = *(_DWORD *)(v23 + 2480);
      if (v517 >= 1)
      {
        sub_1B68AD158(v863, v517);
        *(_DWORD *)(v23 + 2480) = 0;
      }
    }
    v518 = *(_DWORD **)(v14 + 14144);
    v519 = v16[1732];
    *v518 = bswap32((0x80000000 >> v519) | *(_DWORD *)(v14 + 14160));
    v520 = (char *)v518 + ((unint64_t)(v519 + 1) >> 3);
    v521 = (v519 + 1) & 7;
    if ((_DWORD)v521)
      *v520++ &= byte_1B693261C[v521];
    v505 = v857;
    v504 = v866;
    *(_QWORD *)(v14 + 14144) = v520;
    *(_DWORD *)(v14 + 14160) = 0;
    v16[1732] = 0;
  }
  v522 = v868 + 205856;
  if (*(_DWORD *)(v868 + 205924) != 1)
    goto LABEL_611;
  v523 = *v858;
  v524 = v853 / *v858;
  if (!*(_BYTE *)(v8 + 1394) && *(_BYTE *)(v868 + 207683))
    goto LABEL_609;
  v525 = v504 / v523;
  if (v504 / v523 && (v526 = v524 - v525, v524 > v525))
  {
    if (v525 >= 1)
    {
      v527 = (unsigned __int16)((v525 - 1) * v523);
      goto LABEL_586;
    }
  }
  else if ((v525 || v524 <= 1) && (v525 || v524 != 1 || v858[1] != 1))
  {
    goto LABEL_609;
  }
  v527 = 0;
  v526 = v524 + ~(_WORD)v525;
LABEL_586:
  v528 = v526 * v523;
  v529 = v858[1];
  v530 = v524 - 2;
  if (v524 <= 1)
    v530 = 0;
  v531 = v523 + v528;
  if (v524 == v529)
    v532 = v531;
  else
    v532 = v528;
  if (v524 == v529)
    v533 = v853 / *v858;
  else
    v533 = v530;
  v534 = *v852;
  if (*(_BYTE *)(*(_QWORD *)(*v852 + 48) + 9) != 1)
  {
    v535 = *(pthread_mutex_t **)(v534 + 160);
    if (v535)
      pthread_mutex_lock(v535);
    if (v532)
      memset((void *)(*(_QWORD *)(v534 + 168) + v527), 10, v532);
    v536 = *(pthread_mutex_t **)(v534 + 160);
    if (v536)
      pthread_mutex_unlock(v536);
    sub_1B68C7904(*v852, v8 + 96, v8 + 1152, v527, v532, v415, v416);
  }
  if (sub_1B68BB95C(*(unsigned __int8 **)(v8 + 488)))
  {
LABEL_613:
    v539 = *(pthread_mutex_t **)(v868 + 5448);
    if (v539)
      pthread_mutex_lock(v539);
    *(_BYTE *)(*(_QWORD *)(v868 + 5440) + (int)v882) = 0;
    v540 = *(pthread_mutex_t **)(v868 + 5448);
    if (v540)
      pthread_mutex_unlock(v540);
    return;
  }
  v537 = *(_QWORD *)(v8 + 488);
  *(_DWORD *)(v537 + 152) = 0;
  sub_1B68FE524(*(_QWORD *)(v537 + 16), (int)v527 / *v858, (int)(v527 + v532) / *v858);
  if (v525 <= 1)
    v538 = 0;
  else
    v538 = (unsigned __int16)(v525 - 2);
  v522 = v868 + 205856;
  if (v533 > v538)
  {
    *(_DWORD *)(v537 + 168) = *(_DWORD *)(v868 + 208092);
    *(_DWORD *)(v537 + 172) = *(_DWORD *)(v868 + 208096);
    sub_1B68FE254(v537, v538, v533);
  }
LABEL_609:
  v505 = v857;
  if (v524 == v858[1])
  {
    bzero(*(void **)(*(_QWORD *)v522 + 32), 4 * *(unsigned int *)(*(_QWORD *)v522 + 20));
    v505 = v857;
  }
LABEL_611:
  if (v853 == v850)
  {
    *(_DWORD *)(v505 + 68) = *(_DWORD *)(v851 + 14144) - *(_DWORD *)(v851 + 14128);
    goto LABEL_613;
  }
}

uint64_t sub_1B68D1E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  opaqueCMSampleBuffer *v13;
  OpaqueCMBlockBuffer *DataBuffer;
  unsigned int DataLength;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v21;
  uint64_t v22;
  size_t v23;
  const __CFArray *v24;
  const __CFDictionary *v25;
  const __CFDictionary *Value;
  const __CFDictionary *v27;
  unsigned int v28;
  const __CFArray *v29;
  CFIndex v30;
  const void *v31;
  uint64_t v32;
  int v33;
  const __CFDictionary *v34;
  signed int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t DataPointer;
  opaqueCMSampleBuffer *v43;
  OpaqueCMBlockBuffer *v44;
  OpaqueCMBlockBuffer *v45;
  size_t v46;
  uint64_t v47;
  const opaqueCMFormatDescription *FormatDescription;
  CFPropertyListRef Extension;
  const void *v50;
  CFTypeID TypeID;
  const void *v52;
  const void *v53;
  CFTypeID v54;
  CFTypeID v55;
  const UInt8 *BytePtr;
  CFIndex Length;
  __int16 v58;
  char *v59;
  uint64_t i;
  uint64_t v61;
  uint64_t j;
  uint64_t v63;
  const void *v64;
  uint64_t v66;
  char v67;
  size_t *v68;
  uint64_t v69;
  unsigned int *v70;
  int v71;
  size_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  size_t *v80;
  size_t *v81;
  int v82;
  size_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  int v90;
  size_t v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  size_t v95;
  size_t v96;
  UInt8 v97;
  int v98;
  unsigned int *v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  const UInt8 *v106;
  const UInt8 *v107;
  char *dataPointerOut;
  _DWORD v109[17];
  char v110;
  char v111;
  char v112;
  _BYTE v113[17];
  _DWORD v114[16];
  _QWORD v115[63];
  size_t v116[16];
  _QWORD __src[375];
  unsigned int __n[16];
  unsigned int __dst[375];
  uint64_t v120;

  v6 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6);
  v8 = v7;
  v10 = v9;
  v11 = v6;
  v120 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(v6 + 208120);
  v13 = *(opaqueCMSampleBuffer **)(v12 + 152);
  if (v13)
  {
    DataBuffer = CMSampleBufferGetDataBuffer(v13);
    DataLength = CMBlockBufferGetDataLength(DataBuffer);
  }
  else
  {
    DataLength = 0;
  }
  dataPointerOut = 0;
  v16 = *(unsigned int **)v8;
  if (!*(_QWORD *)v8)
  {
    v43 = *(opaqueCMSampleBuffer **)(v12 + 152);
    if (!v43)
    {
      DataPointer = 4294958324;
      goto LABEL_38;
    }
    v44 = CMSampleBufferGetDataBuffer(v43);
    DataPointer = CMBlockBufferGetDataPointer(v44, 0, 0, 0, &dataPointerOut);
    if ((_DWORD)DataPointer)
    {
LABEL_38:
      CFLog();
      goto LABEL_68;
    }
    v16 = (unsigned int *)dataPointerOut;
  }
  *(_BYTE *)(*(_QWORD *)(v11 + 152) + 212) = 0;
  v17 = *(unsigned int **)v8;
  if (*(_QWORD *)v8)
  {
    v18 = *(_DWORD *)(v8 + 12);
    if (v18)
    {
      if (DataLength <= v18)
      {
        v45 = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(v12 + 152));
        v46 = CMBlockBufferGetDataLength(v45);
        if (!v45 || v46 != DataLength)
        {
          CFLog();
          DataPointer = 4294954394;
          goto LABEL_38;
        }
        v47 = CMBlockBufferCopyDataBytes(v45, 0, v46, v17);
        if ((_DWORD)v47)
        {
          DataPointer = v47;
          CFLog();
          goto LABEL_38;
        }
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(v11 + 152) + 212) = 1;
      }
    }
  }
  v115[0] = 0;
  v116[0] = 0;
  v109[0] = 0;
  __n[0] = 0;
  v114[0] = 0;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)(v12 + 152), 0);
  if (SampleAttachmentsArray)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
    {
      v21 = ValueAtIndex;
      sub_1B6825CE0(ValueAtIndex, (const void *)*MEMORY[0x1E0CEDAE0], v115, __src);
      sub_1B6825CE0(v21, (const void *)*MEMORY[0x1E0CEDAE8], v116, __src);
      sub_1B6825EC8(v21, (const void *)*MEMORY[0x1E0CEDB08], v109, __dst);
      sub_1B6825EC8(v21, (const void *)*MEMORY[0x1E0CEDB10], __n, __dst);
      sub_1B6825EC8(v21, (const void *)*MEMORY[0x1E0CEDAD0], v114, __dst);
      v22 = v115[0];
      *(_QWORD *)(v12 + 3432) = v115[0];
      v23 = v116[0];
      *(_QWORD *)(v12 + 3424) = v116[0];
      *(_QWORD *)(v12 + 3400) = v23 + v22;
      *(_DWORD *)(v12 + 3440) = v109[0];
      *(_DWORD *)(v12 + 3444) = __n[0];
      *(_DWORD *)(v12 + 3448) = v114[0];
    }
  }
  if (!*(_BYTE *)(v11 + 5425))
    *(_DWORD *)(v10 + 1268) = *(_QWORD *)(v12 + 3424);
  v24 = CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)(v12 + 152), 0);
  if (v24)
  {
    v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, 0);
    if (v25)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(v25, (const void *)*MEMORY[0x1E0CEDB28]);
      if (Value)
      {
        v27 = Value;
        v105 = v10;
        *(_BYTE *)(v12 + 3545) = sub_1B68B2CB4(Value, (const void *)*MEMORY[0x1E0CED4D8]) == 1;
        v28 = sub_1B68B2CB4(v27, (const void *)*MEMORY[0x1E0CED4F0]);
        v29 = (const __CFArray *)CFDictionaryGetValue(v27, (const void *)*MEMORY[0x1E0CED4F8]);
        v30 = 0;
        v31 = (const void *)*MEMORY[0x1E0CED520];
        v32 = v28 + 1;
        v33 = -1;
        do
        {
          v34 = (const __CFDictionary *)CFArrayGetValueAtIndex(v29, v30);
          v35 = sub_1B68B2CB4(v34, v31);
          if (v35 > v33)
            v33 = v35;
          ++v30;
        }
        while (v32 != v30);
        *(_DWORD *)(v105 + 60) = v33;
        v10 = v105;
      }
    }
  }
  if (DataLength < 4 || !v16)
  {
    CFLog();
    DataPointer = 4294958324;
    goto LABEL_68;
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  do
  {
    if (v38 < DataLength - 4)
    {
      if (*(_BYTE *)(*(_QWORD *)(v11 + 152) + 212))
      {
        v39 = DataLength - 4;
        v38 = DataLength;
      }
      else
      {
        v39 = bswap32(*v16);
        v40 = v39 + 4;
        v38 += v40;
        v16 = (unsigned int *)((char *)v16 + v40);
      }
      *(_DWORD *)&v113[v36 + 1] = v39;
      ++v37;
    }
    v36 += 4;
  }
  while (v36 != 16);
  v41 = sub_1B68CD4AC(v8, v37);
  if ((_DWORD)v41)
  {
    DataPointer = v41;
    goto LABEL_38;
  }
  if (!*(_DWORD *)(v10 + 1276))
  {
    v110 = 0;
    FormatDescription = CMSampleBufferGetFormatDescription(*(CMSampleBufferRef *)(v12 + 152));
    if (!FormatDescription)
    {
      DataPointer = 4294954385;
      goto LABEL_57;
    }
    Extension = CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E0CA2240]);
    if (!Extension
      || (v50 = Extension, TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(v50))
      || (v52 = CFDictionaryGetValue((CFDictionaryRef)v50, CFSTR("avcC"))) == 0
      || (v53 = v52, v54 = CFArrayGetTypeID(), v54 == CFGetTypeID(v53))
      && (v53 = CFArrayGetValueAtIndex((CFArrayRef)v53, 0)) == 0
      || (v55 = CFDataGetTypeID(), v55 != CFGetTypeID(v53)))
    {
      DataPointer = FigSignalErrorAt();
      goto LABEL_57;
    }
    BytePtr = CFDataGetBytePtr((CFDataRef)v53);
    Length = CFDataGetLength((CFDataRef)v53);
    if (Length >= 0x80000000)
    {
      CFLog();
      v58 = -50;
      goto LABEL_75;
    }
    v113[0] = 0;
    if ((int)Length > 3000)
      goto LABEL_73;
    v66 = BytePtr[5] & 0x1F;
    if (v66 > 0x10)
      goto LABEL_73;
    v97 = BytePtr[4];
    v98 = BytePtr[1];
    v104 = Length;
    if ((BytePtr[5] & 0x1F) != 0)
    {
      v67 = 0;
      v101 = 0;
      v102 = (int)Length;
      v68 = (size_t *)__n;
      v69 = 6;
      v70 = __dst;
      v106 = BytePtr;
      while (1)
      {
        if (v69 > v102)
          goto LABEL_102;
        v71 = bswap32(*(unsigned __int16 *)&BytePtr[v69]);
        if (HIWORD(v71) > 0x1F4u)
          goto LABEL_73;
        v72 = (v71 >> 16);
        if ((int)(v72 + (_DWORD)v70 - __dst) > 1498)
          goto LABEL_73;
        v73 = v69 + 2;
        if ((int)v72 + (int)v69 + 2 > (int)Length)
        {
LABEL_117:
          v58 = -2;
          goto LABEL_74;
        }
        memcpy(v70, &v106[v73], v72);
        v74 = sub_1B68FB1C0((uint64_t)v70, v72);
        *(_DWORD *)v68 = v74;
        v75 = (unsigned int *)((char *)v70 + v74);
        *(_BYTE *)v75 = 0;
        v76 = *(_BYTE *)v70 & 0x1F;
        if (v76 == 7)
        {
          if (!BYTE4(v101))
          {
            v99 = (unsigned int *)((char *)v70 + v74);
            v77 = sub_1B68CD294(v70, v74, (uint64_t)v109, v113, &v112, &v111);
            LOBYTE(v101) = v113[0] != 0;
            v113[0] = v113[0] != 0;
            if (v77)
              goto LABEL_124;
            v76 = *(_BYTE *)v70 & 0x1F;
            BYTE4(v101) = 1;
            LODWORD(Length) = v104;
            v75 = v99;
            goto LABEL_86;
          }
          ++BYTE4(v101);
          v76 = 7;
        }
        LODWORD(Length) = v104;
LABEL_86:
        v69 = v73 + v72;
        if (v76 == 13)
          ++v67;
        v68 = (size_t *)((char *)v68 + 4);
        v70 = v75;
        --v66;
        BytePtr = v106;
        if (!v66)
          goto LABEL_93;
      }
    }
    v101 = 0;
    v67 = 0;
    v69 = 6;
LABEL_93:
    if (BytePtr[v69] <= 0x20u)
    {
      v100 = v67;
      v107 = BytePtr;
      v78 = v69 + 1;
      v103 = BytePtr[v69];
      if (BytePtr[v69])
      {
        v79 = BytePtr[v69];
        v80 = v116;
        v81 = __src;
        while (v78 <= v104)
        {
          v82 = bswap32(*(unsigned __int16 *)&v107[v78]);
          if (HIWORD(v82) > 0xBB8u)
            goto LABEL_73;
          v83 = (v82 >> 16);
          if ((int)(v83 + (_DWORD)v81 - __src) > 3000)
            goto LABEL_73;
          v84 = v78 + 2;
          if ((int)v83 + (int)v84 > v104)
            goto LABEL_117;
          memcpy(v81, &v107[v84], v83);
          v78 = v84 + v83;
          v85 = sub_1B68FB1C0((uint64_t)v81, v83);
          *(_DWORD *)v80 = v85;
          v80 = (size_t *)((char *)v80 + 4);
          v81 = (size_t *)((char *)v81 + v85);
          if (!--v79)
            goto LABEL_104;
        }
LABEL_102:
        v58 = -1;
        goto LABEL_74;
      }
      v103 = 0;
LABEL_104:
      LOBYTE(v86) = 0;
      if ((v98 - 100) <= 0x2C && ((1 << (v98 - 100)) & 0x100000400401) != 0)
      {
        if (v78 + 3 >= v104)
        {
          LOBYTE(v86) = 0;
        }
        else
        {
          v86 = v107[v78 + 3];
          if (v86 > 0x10)
            goto LABEL_73;
          if (v107[v78 + 3])
          {
            v87 = v78 + 4;
            if (v78 + 4 < v104)
            {
              v88 = 0;
              v89 = v115;
              while (1)
              {
                v90 = bswap32(*(unsigned __int16 *)&v107[v87]);
                v91 = (v90 >> 16);
                v114[v88] = v91;
                if (HIWORD(v90) > 0x1F4u || (int)(v91 + (_DWORD)v89 - v115) > 500)
                  goto LABEL_73;
                v92 = v87 + 2;
                if (v114[v103] + (int)v87 + 2 > v104)
                  goto LABEL_117;
                memcpy(v89, &v107[v92], v91);
                v93 = sub_1B68FB1C0((uint64_t)v89, v91);
                v114[v88++] = v93;
                if (v88 < v86)
                {
                  v87 = v92 + v91;
                  v89 = (_QWORD *)((char *)v89 + v93);
                  if ((uint64_t)(v92 + v91) < v104)
                    continue;
                }
                break;
              }
            }
          }
        }
      }
      if ((BYTE4(v101) < 2u || !(v101 | (v86 + v100)))
        && (v86 + v100) + v101 <= 1)
      {
        v110 = 0;
        if ((_BYTE)v101)
        {
          LOWORD(v77) = sub_1B68CD294(__dst, __n[0], (uint64_t)v109, &v110, &v112, &v111);
LABEL_124:
          v58 = v77;
          if ((_WORD)v77)
            goto LABEL_74;
        }
        else
        {
          v58 = 0;
        }
        if ((v97 & 3) != 0)
        {
          if ((v97 & 3) == 3)
          {
            v94 = 5;
          }
          else
          {
            if ((v97 & 3) != 1)
            {
              CFLog();
              v58 = -8969;
              goto LABEL_75;
            }
            v94 = 4;
          }
        }
        else
        {
          v94 = 3;
        }
        *(_DWORD *)(v12 + 160) = v94;
        v95 = __n[0];
        *(_DWORD *)(v12 + 200) = __n[0];
        memcpy(*(void **)(v12 + 192), __dst, v95);
        v96 = LODWORD(v116[0]);
        *(_DWORD *)(v12 + 216) = LODWORD(v116[0]) + 4;
        **(_BYTE **)(v12 + 208) = 0;
        *(_BYTE *)(*(_QWORD *)(v12 + 208) + 1) = 0;
        *(_BYTE *)(*(_QWORD *)(v12 + 208) + 2) = 0;
        *(_BYTE *)(*(_QWORD *)(v12 + 208) + 3) = 1;
        memcpy((void *)(*(_QWORD *)(v12 + 208) + 4), __src, v96);
LABEL_75:
        DataPointer = v58;
        goto LABEL_57;
      }
    }
LABEL_73:
    v58 = -666;
LABEL_74:
    CFLog();
    goto LABEL_75;
  }
  DataPointer = 0;
LABEL_57:
  *(_DWORD *)(v8 + 8) = DataLength;
  v59 = *(char **)v8;
  if (!*(_QWORD *)v8)
    v59 = dataPointerOut;
  if (*(_DWORD *)(v12 + 220))
  {
    if (v37 >= 1)
    {
      for (i = 0; i != v37; ++i)
      {
        v61 = (*(_DWORD *)&v113[4 * i + 1] + 4);
        *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * i) = v61;
        *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * i) = v59;
        v59 += v61;
      }
    }
  }
  else if (v37 >= 1)
  {
    for (j = 0; j != v37; ++j)
    {
      v63 = (*(_DWORD *)&v113[4 * j + 1] + 4);
      *(_DWORD *)(*(_QWORD *)(v8 + 48) + 4 * j) = v63;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * j) = v59;
      **(_BYTE **)(*(_QWORD *)(v8 + 56) + 8 * j) = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * j) + 1) = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * j) + 2) = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * j) + 3) = 1;
      v59 += v63;
    }
  }
  *(_DWORD *)(v8 + 36) = v37;
LABEL_68:
  v64 = *(const void **)(v12 + 8 * *(int *)(v12 + 64) + 3480);
  if (v64)
  {
    CFRelease(v64);
    *(_QWORD *)(v12 + 8 * *(int *)(v12 + 64) + 3480) = 0;
  }
  return DataPointer;
}

uint64_t sub_1B68D2920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a1 + 205864;
  v6 = 8 * *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 207888) = v6;
  if (*(_BYTE *)(a1 + 5424))
    *(_DWORD *)(a1 + 207884) = v6;
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_BYTE *)(v7 + 708) && *(float *)v5 < 30.0;
  *(_BYTE *)(v7 + 717) = v8;
  if ((*(_BYTE *)(a1 + 1619) || *(_BYTE *)(a1 + 1618) || *(_BYTE *)(a1 + 1620) || *(_BYTE *)(a1 + 1621))
    && *(_QWORD *)a2
    && (v9 = *(unsigned int *)(a2 + 8), (_DWORD)v9))
  {
    v10 = *(_QWORD *)a2 + v9;
    *(_DWORD *)(a1 + 207884) = *(_DWORD *)(a1 + 207888);
    v11 = sub_1B68D6168(a1, a3, 0, v10);
    if (v11 > 0x3D090)
    {
      CFLog();
      return 4294967246;
    }
    *(_QWORD *)(*(_QWORD *)(v5 + 2256) + 3528) = v10;
    *(_DWORD *)(*(_QWORD *)(v5 + 2256) + 3536) = v11;
    *(_DWORD *)(a2 + 8) += v11;
    *(_DWORD *)(v5 + 2020) = *(_DWORD *)(v5 + 2024) + 8 * v11;
  }
  else
  {
    v11 = 0;
  }
  v13 = *(_QWORD *)(a1 + 5392);
  if (v13)
    *(_BYTE *)(v13 + 728) = 0;
  v12 = 0;
  v14 = *(_QWORD *)(a2 + 48) + 4 * *(int *)(a2 + 36);
  *(_DWORD *)(v14 - 4) += v11;
  return v12;
}

void sub_1B68D2A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, double a9, double a10, char a11, char a12, char a13, char a14, char a15, char *a16, char *a17)
{
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  float v33;
  int v34;
  int v35;
  double v36;
  BOOL v37;
  int v38;
  unsigned int v39;
  long double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v49;
  char v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  int *v62;
  int v63;
  long double v64;
  unsigned int v65;
  float v66;
  double v67;
  float v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v78;
  float v79;
  double v80;
  int v81;
  int v82;
  int v83;
  double v84;
  float v85;
  uint64_t v86;
  int v87;
  int *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  unsigned int v97;
  unsigned int v98;
  _BOOL4 v99;
  uint64_t v100;
  int v101;
  _BOOL4 v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  double v107;
  int v108;
  int v109;

  v23 = a1 + 205840;
  if (*(_BYTE *)(a1 + 208087) && *(_QWORD *)(a1 + 144))
  {
    LODWORD(a10) = *(_DWORD *)(a1 + 207888);
    a10 = (double)*(unint64_t *)&a10;
    *(_DWORD *)(a1 + 207892) = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 464)
                             + (int)((*(double *)(*(_QWORD *)(a1 + 152) + 456) + 1.0) * a10);
  }
  v24 = *(float *)(a1 + 205864);
  v25 = v24;
  if (!a7 || (v25 = *(float *)(a1 + 205864), *a16))
  {
LABEL_6:
    if (!a14)
      goto LABEL_100;
    goto LABEL_7;
  }
  v25 = *(float *)(a1 + 205864);
  if (a11)
  {
    v31 = *(_QWORD *)(a1 + 205968);
    if (!v31)
    {
      v25 = -12.0;
      goto LABEL_54;
    }
    v32 = 8 * *(_DWORD *)(a4 + 8);
    v33 = *(float *)(*(_QWORD *)v23 + 4940);
    if (v33 <= 0.0)
      v34 = *(_DWORD *)(v31 + 52);
    else
      v34 = (int)(90000.0 / v33 + 0.5);
    v109 = 0;
    v25 = v24;
    if (sub_1B68CA848(v31, v32, v34, 0, 0, &v109, &v108))
    {
      if (v24 < 51.0)
      {
        if ((float)(v24 + 1.0) <= 51.0)
          v25 = v24 + 1.0;
        else
          v25 = 51.0;
        goto LABEL_53;
      }
      v25 = v24;
      if (a8)
      {
        v51 = (_BYTE *)(*(_QWORD *)v23 + 5001);
        v25 = v24;
        if (!*v51)
        {
          *v51 = 1;
          v25 = v24;
LABEL_53:
          *a16 = 1;
        }
      }
    }
LABEL_54:
    *(float *)(v23 + 24) = v25;
    if (*a16)
      goto LABEL_100;
  }
  if (a12)
  {
    if (a5 == 1)
    {
      v52 = 0;
      while (1)
      {
        v53 = *(_QWORD *)(v23 + 128);
        if (v53)
        {
          v54 = v53 + 4 * v52;
          if (*(_DWORD *)(v54 + 104))
          {
            if (*(_DWORD *)(v54 + 136))
            {
              sub_1B68D6014(a16, a1, a4, v52, a8);
              v25 = v55;
              *(float *)(v23 + 24) = v55;
              if (*a16)
                goto LABEL_100;
            }
          }
        }
        if (++v52 == 8)
          goto LABEL_66;
      }
    }
    sub_1B68D6014(a16, a1, a4, 0, a8);
    *(float *)(v23 + 24) = v56;
    if (*a16)
      goto LABEL_100;
    v25 = v56;
  }
LABEL_66:
  if (!a13)
    goto LABEL_6;
  v57 = *(_QWORD *)(a1 + 152);
  if (*(_DWORD *)v57 == 2)
  {
    v58 = (*(double *)(v57 + 272) * 100.0);
    if (v58 - 5000 >= 0x3E9)
      v59 = 3000;
    else
      v59 = (*(double *)(v57 + 272) * 100.0);
    if (v58 > 0xBB8)
      v58 = v59;
    a10 = (double)(8 * *(_DWORD *)(a4 + 8) * v58);
    if (*(double *)(v57 + 264) * 100.0 * 10.0 < a10)
    {
      v60 = *(unsigned int *)(v23 + 2220);
      v61 = 0;
      if ((_DWORD)v60)
      {
        v62 = (int *)(v23 + 1928);
        do
        {
          v63 = *v62++;
          v61 += v63;
          --v60;
        }
        while (v60);
      }
      v64 = exp2((v25 + -12.0) / 6.0);
      HIDWORD(a10) = 1072378675;
      v107 = v64 * 0.85;
      v65 = *(_DWORD *)(v23 + 2048) - v61;
      *a16 = 1;
      v66 = *(float *)(v23 + 24);
      v67 = (double)v65;
      v68 = v66 + 3.0;
      while (1)
      {
        v66 = v66 + 1.0;
        if (v66 > 28.0)
          break;
        v69 = exp2((v66 + -12.0) / 6.0) * 0.85;
        if (v69 < 0.100000001)
          v69 = 0.100000001;
        v70 = v107 / v69;
        v71 = pow(v107 / v69, 1.1) * (double)v61;
        v72 = fabs(sqrt(v70));
        if (v70 == -INFINITY)
          v72 = INFINITY;
        v73 = v71 + v72 * v67;
        v74 = *(double *)(v57 + 272) * 100.0;
        v75 = (unint64_t)v74;
        if ((unint64_t)v74 - 5000 >= 0x3E9)
          v76 = 3000;
        else
          v76 = (unint64_t)v74;
        if (v75 > 0xBB8)
          v75 = v76;
        a10 = (double)(9 * (*(double *)(v57 + 264) * 100.0 * 10.0 / (double)v75));
        if (v73 * 10.0 < a10 || v68 <= v66)
        {
          if (v66 <= v68)
            v25 = v66;
          else
            v25 = v68;
          goto LABEL_98;
        }
      }
      if (v66 <= 51.0)
        v25 = v66;
      else
        v25 = 51.0;
    }
  }
LABEL_98:
  *(float *)(v23 + 24) = v25;
  if (a14 && !*a16)
  {
LABEL_7:
    v26 = *(_QWORD *)(a1 + 5400);
    if (v26)
    {
      v27 = *(unsigned int *)(v23 + 2220);
      if ((_DWORD)v27)
      {
        v28 = 0;
        v29 = (int *)(v23 + 1928);
        do
        {
          v30 = *v29++;
          v28 += v30;
          --v27;
        }
        while (v27);
      }
      else
      {
        v28 = 0;
      }
      v35 = *(_DWORD *)(v23 + 2048);
      if (*(_DWORD *)(v26 + 44) < v35)
      {
        *a16 = 1;
        v36 = (float)(v25 + 1.0);
        if ((float)(v25 + 1.0) < 50.0)
        {
          v37 = __OFSUB__(v35, v28);
          v38 = v35 - v28;
          if ((v38 < 0) ^ v37 | (v38 == 0))
            v39 = 0;
          else
            v39 = v38;
          v40 = exp2((v25 + -12.0) / 6.0);
          v41 = (double)*(int *)(v26 + 44);
          v42 = v40 * 0.85;
          v43 = (float)(v25 + 3.0);
          while (1)
          {
            v44 = exp2((v36 + -12.0) / 6.0) * 0.85;
            if (v44 < 0.100000001)
              v44 = 0.100000001;
            v45 = v42 / v44;
            v46 = pow(v42 / v44, 1.1) * (double)v28;
            v47 = fabs(sqrt(v45));
            if (v45 == -INFINITY)
              v47 = INFINITY;
            a10 = v47 * (double)v39;
            if (v46 + a10 < v41 || v36 >= v43)
              break;
            v36 = v36 + 1.0;
            if (v36 >= 50.0)
              goto LABEL_43;
          }
          if (v36 > v43)
            v36 = (float)(v25 + 3.0);
        }
LABEL_43:
        v49 = 51.0;
        if (v36 <= 51.0)
          v49 = v36;
        v25 = v49;
      }
      *(float *)(v23 + 24) = v25;
      v50 = *a16;
      if (*a16)
        v50 = 1;
      else
        *a16 = 0;
      *a17 = v50;
    }
  }
LABEL_100:
  if (!*(_BYTE *)(v23 + 2247) || (v78 = *(_QWORD *)(a1 + 5392)) == 0)
  {
    if (!*a16 || !*(_BYTE *)(v23 + 2228) || *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + 676) < a5)
    {
      *(float *)(v23 + 24) = v24;
      *a16 = 0;
      goto LABEL_130;
    }
    *(_DWORD *)(v23 + 72) = 0;
    v86 = *(unsigned int *)(v23 + 2220);
    if ((_DWORD)v86)
    {
      v87 = 0;
      v88 = (int *)(v23 + 1928);
      do
      {
        v89 = *v88++;
        v87 += v89;
        --v86;
      }
      while (v86);
      *(_DWORD *)(v23 + 72) = v87;
    }
    *(_DWORD *)(v23 + 68) = *(_DWORD *)(v23 + 2048);
    *(float *)(v23 + 76) = v24;
    *(_BYTE *)(v23 + 80) = 1;
    if (a3)
    {
      v90 = *(unsigned int *)(a2 + 1276);
      if ((v90 & 0x80000000) == 0)
      {
        v91 = *(_QWORD *)(a3 + 16);
        if (v91)
        {
          if (*(_DWORD *)(a3 + 4) > v90)
            *(_DWORD *)(v91 + 8 * v90) = *(_DWORD *)(v23 + 24);
        }
      }
    }
    goto LABEL_128;
  }
  if ((**(_BYTE **)(v23 + 104) & 1) == 0 && **(_DWORD **)(v23 + 120) != 32 && **(_DWORD **)(a1 + 152) != 2)
  {
    if (!*a16)
      goto LABEL_130;
LABEL_128:
    v92 = *(_QWORD *)(v23 + 16);
    if (v92)
      bzero(*(void **)(v92 + 32), 4 * *(unsigned int *)(v92 + 20));
    goto LABEL_130;
  }
  v79 = *(float *)(v23 + 24);
  LODWORD(a10) = *(_DWORD *)(a2 + 4928);
  v80 = (double)*(unint64_t *)&a10;
  v81 = *(_DWORD *)(v23 + 2052);
  v82 = *a16;
  v83 = *(_DWORD *)(a2 + 1276);
  v84 = *(double *)(v78 + 136);
  *(_BYTE *)(v78 + 106) = *(_BYTE *)(v78 + 105);
  *(float *)(v78 + 4 * (v83 % 10) + 24) = v79;
  if (v82)
  {
    if (v83 >= 1)
    {
      v85 = *(float *)(v78 + 16);
      if (floorf(v79) > v85)
      {
        *(_BYTE *)(v78 + 105) = 1;
        v79 = v85;
      }
    }
  }
  *(_BYTE *)(v78 + 107) = (int)(v80 / v84) + ((int)(v80 / v84) >> 2) < v81;
  if (*a16)
  {
    if (a6 + 1 <= a5 || v24 >= v79)
    {
      *a16 = 0;
      *(float *)(v23 + 24) = v24;
      goto LABEL_130;
    }
    *(float *)(v23 + 24) = v79;
    goto LABEL_128;
  }
LABEL_130:
  if ((**(_BYTE **)(v23 + 104) & 1) != 0 || **(_DWORD **)(v23 + 120) == 32)
  {
    v93 = 0;
    if (!a15)
      return;
  }
  else
  {
    v93 = **(_DWORD **)(a1 + 152) != 2;
    if (!a15)
      return;
  }
  if (!*a16 && !v93)
  {
    if (*(_BYTE *)(v23 + 2247))
    {
      v94 = *(_QWORD *)(a1 + 5392);
      if (v94)
      {
        if (*(_QWORD *)(a1 + 5400))
        {
          v95 = *(_QWORD *)(a1 + 5416);
          *(_BYTE *)(v94 + 728) = 0;
          v96 = *(_DWORD **)(a1 + 5400);
          if (*(_BYTE *)(a1 + 5424) || *(float *)(v23 + 24) >= *(float *)(*(_QWORD *)(a1 + 5392) + 16) || v96[7])
            v97 = v96[11];
          else
            v97 = v96[11] - v96[12];
          v98 = *(_DWORD *)(v23 + 2052);
          v99 = v98 <= v97 || *(_DWORD *)(a2 + 1276) == 0;
          v100 = *(_QWORD *)(a1 + 5392);
          v102 = *(__int16 *)(*(_QWORD *)(v100 + 784) + 8 * *(char *)(v100 + 148) + 4) > *(__int16 *)(*(_QWORD *)(v100 + 784) + 8 * *(char *)(v100 + 150) + 4)
              && (*(_BYTE *)(*(_QWORD *)(a1 + 136) + 4850) ? (v101 = 1) : (v101 = 2), *(_DWORD *)(v100 + 808) <= v101)
              && *(float *)(v23 + 24) >= *(float *)(v100 + 16);
          v103 = *(unsigned __int8 *)(a2 + 1368);
          if (v103 > 7 || ((1 << v103) & 0x86) == 0)
          {
            if (*(_DWORD *)(v95 + 340) == 2)
              v99 = 1;
            if (v103 == 6)
              v99 = 1;
            if (!v99 && !v102 && (!*(_BYTE *)(a2 + 1352) || !*(_BYTE *)(v23 + 2236)))
              goto LABEL_158;
          }
          if (*(_BYTE *)(*(_QWORD *)(a1 + 152) + 212))
          {
LABEL_158:
            if (*(int *)(v95 + 376) < 6 || v98 >= v96[8])
            {
              *(_BYTE *)(a2 + 17) = 1;
              v104 = *(_QWORD *)(a1 + 5392);
              *(_BYTE *)(v104 + 728) = *(_DWORD *)(v23 + 2052) > *(_DWORD *)(*(_QWORD *)(a1 + 5400) + 40);
            }
            else
            {
              *(_DWORD *)(v95 + 376) = 4;
            }
          }
          v105 = *(_QWORD *)(v23 + 2280);
          if (v105 && *(_BYTE *)(v105 + 3545) && !*(_BYTE *)(a2 + 1393))
          {
            *(_BYTE *)(a2 + 17) = 1;
            *(_BYTE *)(*(_QWORD *)(a1 + 5392) + 728) = 0;
            *(_DWORD *)(*(_QWORD *)(a1 + 144) + 60) = 1;
          }
        }
      }
    }
  }
}

uint64_t sub_1B68D342C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  const __CFArray *v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  int8x8_t *v23;
  unint64_t v24;
  const void *v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  const void *v28;
  unsigned int v29;
  const void *v30;
  const void *v31;
  const __CFDictionary *v32;
  const __CFDictionary *v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v45;
  uint64_t v46;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  const __CFDictionary *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  _DWORD *v54;
  const void *v55;
  _DWORD *v56;
  unint64_t v57;
  const void *v58;
  const __CFDictionary *v59;
  const __CFDictionary *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  const __CFDictionary *v64;
  const __CFDictionary *v65;
  const void *v66;
  const void *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  _DWORD *v77;
  uint64_t v78;
  int v79;
  _WORD *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  size_t v84;
  _BYTE *v85;
  int v86;
  _BYTE *v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t result;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  int *v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  char v109;
  uint64_t v110;
  uint64_t i;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  __IOSurface *v127;
  __IOSurface *v128;
  uint64_t v129;
  char v130;
  char v131;
  size_t *v132;
  int v133;
  uint64_t v135;
  char v136;
  char v137;
  int v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  BOOL v142;
  int v143;
  int v144;
  _DWORD *v145;
  CFArrayRef v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  const void *v167;
  const void *v168;
  void *v169;
  void *v170;
  const void *v171;
  const void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *key;
  void *keya;
  const void *v179;
  const void *v180;
  const void *v181;
  const void *v182;
  const void *v183;
  const void *v184;
  const void *v185;
  const void *v186;
  IOSurfaceRef buffer;
  IOSurfaceRef buffera;
  const __CFArray *theArray;
  const __CFArray *theArraya;
  CFArrayRef theArrayb;
  _DWORD v192[8];
  size_t v193[4];
  _BYTE v194[40];
  unsigned __int8 v195[56];
  char v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD v201[4];

  v7 = a2;
  v8 = a1;
  v201[2] = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t *)(a1 + 205800);
  v10 = *(unsigned int *)(a4 + 36);
  v11 = *(int **)(a1 + 208120);
  if (!*(_BYTE *)(a1 + 205933))
  {
    if (!v11)
      goto LABEL_82;
    v38 = *(_QWORD *)(a1 + 144);
    if (v38)
    {
      if (*(_DWORD *)(v38 + 56))
      {
        v11[863] = 0;
        *(_DWORD *)(*(_QWORD *)(a1 + 208120) + 3456) = 0;
        v11 = *(int **)(a1 + 208120);
        if (!v11)
          goto LABEL_82;
      }
    }
    if (*(_BYTE *)(a2 + 17))
      goto LABEL_82;
    ++v11[863];
    if (*(_BYTE *)(a2 + 12))
      goto LABEL_82;
    v39 = *(_QWORD *)(a1 + 208120);
    v40 = *(_DWORD *)(v39 + 3456) + 1;
LABEL_81:
    *(_DWORD *)(v39 + 3456) = v40;
    goto LABEL_82;
  }
  v12 = a4;
  if (!v11[55])
  {
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)&v11[2 * v11[16] + 866], 0);
    v13 = *(const void **)&v11[2 * v11[16] + 866];
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)&v11[2 * v11[16] + 866] = 0;
    }
  }
  if (!*(_BYTE *)(v7 + 17))
  {
    if (*(_BYTE *)(v8 + 1600))
    {
      v41 = *(_QWORD *)(v8 + 136);
      v42 = *(_DWORD *)(v41 + 304);
      v43 = *(float *)(v41 + 60);
      if (v42 < 2 * v43 && v42 != 0)
        v43 = 0;
      if (*(_QWORD *)(v8 + 1608))
        v45 = v43;
      else
        v45 = 0;
    }
    else
    {
      v45 = 0;
    }
    v46 = v9[290];
    SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)(v46 + 152), 0);
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CEDB28]);
    if (Value)
    {
      v50 = Value;
      v148 = v45;
      v150 = v12;
      v152 = a5;
      v154 = a3;
      v156 = v9;
      v158 = v10;
      v160 = v8;
      v162 = v7;
      v147 = v46 + 224;
      *(_DWORD *)(v46 + 1584) = sub_1B68B2CB4(Value, (const void *)*MEMORY[0x1E0CED4D8]);
      *(_DWORD *)(v46 + 1588) = sub_1B68B2CB4(v50, (const void *)*MEMORY[0x1E0CED4E8]);
      *(_DWORD *)(v46 + 1596) = sub_1B68B2CB4(v50, (const void *)*MEMORY[0x1E0CED4E0]);
      *(_DWORD *)(v46 + 1592) = sub_1B68B2CB4(v50, (const void *)*MEMORY[0x1E0CED4F0]);
      theArraya = (const __CFArray *)CFDictionaryGetValue(v50, (const void *)*MEMORY[0x1E0CED4F8]);
      buffera = (IOSurfaceRef)*MEMORY[0x1E0CED520];
      v186 = (const void *)*MEMORY[0x1E0CED528];
      v184 = (const void *)*MEMORY[0x1E0CED550];
      v182 = (const void *)*MEMORY[0x1E0CED540];
      v180 = (const void *)*MEMORY[0x1E0CED538];
      keya = (void *)*MEMORY[0x1E0CED558];
      v176 = (void *)*MEMORY[0x1E0CED560];
      v51 = (const void *)*MEMORY[0x1E0C9AE50];
      v174 = (void *)*MEMORY[0x1E0CED580];
      v172 = (const void *)*MEMORY[0x1E0CED570];
      v170 = (void *)*MEMORY[0x1E0CED568];
      v168 = (const void *)*MEMORY[0x1E0CED578];
      v166 = (void *)*MEMORY[0x1E0CED530];
      v52 = (const void *)*MEMORY[0x1E0CED518];
      v53 = (const void *)*MEMORY[0x1E0CED500];
      v164 = (void *)*MEMORY[0x1E0CED548];
      v54 = (_DWORD *)v46;
      v55 = (const void *)*MEMORY[0x1E0CED510];
      v56 = v54 + 74;
      v57 = -1;
      v58 = (const void *)*MEMORY[0x1E0CED508];
      do
      {
        v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArraya, ++v57);
        *(v56 - 18) = sub_1B68B2CB4(v59, buffera);
        *(v56 - 17) = sub_1B68B2CB4(v59, v186);
        *(v56 - 16) = sub_1B68B2CB4(v59, v184);
        *((_QWORD *)v56 - 7) = sub_1B68B2CE8(v59, v182);
        *(v56 - 12) = sub_1B68B2CB4(v59, v180);
        v60 = (const __CFDictionary *)CFDictionaryGetValue(v59, keya);
        v61 = CFDictionaryGetValue(v60, v176);
        *(v56 - 7) = CFEqual(v61, v51) != 0;
        v62 = CFDictionaryGetValue(v60, v174);
        *(v56 - 6) = CFEqual(v62, v51) != 0;
        *(v56 - 5) = sub_1B68B2CB4(v60, v172);
        v63 = CFDictionaryGetValue(v60, v170);
        *(v56 - 4) = CFEqual(v63, v51) != 0;
        *(v56 - 3) = sub_1B68B2CB4(v60, v168);
        v64 = (const __CFDictionary *)CFDictionaryGetValue(v59, v166);
        *(v56 - 11) = sub_1B68B2CB4(v64, v52);
        *(v56 - 9) = sub_1B68B2CB4(v64, v53);
        v65 = (const __CFDictionary *)CFDictionaryGetValue(v59, v164);
        *(v56 - 10) = sub_1B68B2CB4(v65, v52);
        *(v56 - 8) = sub_1B68B2CB4(v65, v53);
        if (CFDictionaryContainsKey(v64, v55))
          v66 = v55;
        else
          v66 = v58;
        *(v56 - 1) = sub_1B68B2CB4(v64, v66);
        if (CFDictionaryContainsKey(v65, v55))
          v67 = v55;
        else
          v67 = v58;
        *v56 = sub_1B68B2CB4(v65, v67);
        v56 += 20;
        v68 = v54[398];
      }
      while (v57 < v68);
      theArrayb = (CFArrayRef)v54;
      v7 = v162;
      v45 = v148;
      if (!v148)
      {
        v76 = 0;
        v10 = v158;
        v8 = v160;
        a3 = v154;
        v9 = v156;
        a5 = v152;
        v12 = v150;
LABEL_57:
        if (*(_DWORD *)(v7 + 1276) && (v77 = (_DWORD *)v9[290], !memcmp(v77 + 56, v77 + 400, 0x560uLL)))
        {
          v77[36] = -12912;
          *(_BYTE *)(v7 + 17) = 1;
          *(_DWORD *)(*(_QWORD *)(v8 + 144) + 60) = 1;
          *(_BYTE *)(*(_QWORD *)(v8 + 5392) + 728) = 0;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(v8 + 144) + 60) = 0;
        }
        memcpy((void *)(v9[290] + 1600), (const void *)(v9[290] + 224), 0x560uLL);
        if (v45)
        {
          *(_WORD *)(v8 + 1616) = v76;
          **(_WORD **)(v8 + 1608) = __rev16(v76);
        }
        v78 = v9[290];
        v79 = *(_DWORD *)(v78 + 3536);
        if (v79)
        {
          v80 = *(_WORD **)(v78 + 3528);
          v81 = ((4 * v79) | 2u) / 3;
          if (v81 > *(_DWORD *)(v78 + 3520))
          {
            free(*(void **)(v78 + 3512));
            *(_QWORD *)(v9[290] + 3512) = malloc_type_calloc(v81, 1uLL, 0x4AE20AB7uLL);
            v82 = v9[290];
            if (!*(_QWORD *)(v82 + 3512))
              return 4294967188;
            *(_DWORD *)(v82 + 3520) = v81;
            v78 = v9[290];
          }
          v83 = 0;
          LODWORD(v84) = 0;
          v85 = *(_BYTE **)(v78 + 3512);
          if (*(v80 - 1))
            v86 = *((_BYTE *)v80 - 1) == 0;
          else
            v86 = 2;
          v87 = v85;
          do
          {
            v88 = *((unsigned __int8 *)v80 + v83);
            if (v86 == 2)
            {
              if (v88 > 3)
              {
                v86 = 2;
              }
              else
              {
                v86 = 0;
                *v87++ = 3;
                ++*(_DWORD *)(v12 + 8);
                v89 = *(_QWORD *)(v12 + 48) + 4 * *(int *)(v12 + 36);
                ++*(_DWORD *)(v89 - 4);
                LODWORD(v84) = v84 + 1;
                *((_DWORD *)v9 + 521) += 8;
                v88 = *((unsigned __int8 *)v80 + v83);
              }
            }
            if (v88)
              v86 = 0;
            else
              ++v86;
            *v87++ = v88;
            v84 = (v84 + 1);
            ++v83;
          }
          while (v79 != (_DWORD)v83);
          memcpy(v80, v85, v84);
          v78 = v9[290];
        }
        *(_DWORD *)(v78 + 3452) = *(_DWORD *)(v78 + 1584);
        v39 = v9[290];
        v40 = *(_DWORD *)(v39 + 1596);
        goto LABEL_81;
      }
      v69 = 0;
      v70 = (v68 + 1);
      v71 = -1;
      v72 = 56;
      v73 = -1;
      do
      {
        v74 = v54[v72];
        v75 = v73 < v74;
        if (v73 <= v74)
          v73 = v54[v72];
        if (v75)
          v71 = v69;
        ++v69;
        v72 += 20;
      }
      while (v70 != v69);
      v10 = v158;
      v8 = v160;
      a3 = v154;
      v9 = v156;
      a5 = v152;
      v12 = v150;
      if (v71 != -1 && !(v73 % v148))
      {
        v127 = IOSurfaceLookup(*(_DWORD *)(v147 + 80 * v71 + 68));
        if (v127)
        {
          v128 = v127;
          IOSurfaceLock(v127, 0, 0);
          *(_QWORD *)&v194[4] = v128;
          sub_1B68B0B54(v193, *((_BYTE *)theArrayb + 3544) == 0);
          v129 = 0;
          v201[0] = 0;
          v201[1] = 0;
          v130 = 1;
          v199 = 0;
          v200 = 0;
          do
          {
            v131 = v130;
            v132 = &v193[7 * v129];
            v201[v129] = v132[6];
            v133 = *((_DWORD *)v132 + 21);
            LODWORD(v132) = *((_DWORD *)v132 + 22);
            *((_DWORD *)&v201[-1] + v129) = v133;
            *((_DWORD *)&v199 + v129) = (_DWORD)v132;
            v129 = 1;
            v130 = 0;
          }
          while ((v131 & 1) != 0);
          if (v195[0] == 1 || v196 == 1)
          {
            v135 = 0;
            v146 = theArrayb;
            v192[0] = *((_DWORD *)theArrayb + 893);
            v136 = 1;
            do
            {
              v137 = v136;
              if (v195[56 * v135] == 1)
              {
                v138 = *((_DWORD *)theArrayb + 894);
                v139 = *(_QWORD *)&v194[56 * v135 + 20];
              }
              else
              {
                v138 = 0;
                v139 = 0;
              }
              v136 = 0;
              v145 = v192;
              v192[v135 + 1] = v138;
              *(_QWORD *)&v192[2 * v135 + 4] = v139;
              v135 = 1;
            }
            while ((v137 & 1) != 0);
          }
          else
          {
            v145 = 0;
            v146 = theArrayb;
          }
          v76 = sub_1B68AC574(v201, (int *)v146 + 895, (int *)v146 + 897, (int *)&v200, (uint64_t)&v199, v146, (uint64_t)v145);
          IOSurfaceUnlock(v128, 0, 0);
          CFRelease(v128);
          goto LABEL_57;
        }
      }
    }
    v76 = 0;
    goto LABEL_57;
  }
  if (*(_BYTE *)(v8 + 1057) == 1)
  {
    v14 = v9[290];
    v15 = CMSampleBufferGetSampleAttachmentsArray(*(CMSampleBufferRef *)(v14 + 152), 0);
    v16 = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, 0);
    v17 = (const __CFDictionary *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0CEDB28]);
    if (v17)
    {
      v18 = v17;
      v149 = v14;
      v151 = a5;
      v153 = a3;
      v155 = v9;
      v157 = v10;
      v159 = v8;
      v161 = v7;
      v197 = sub_1B68B2CB4(v17, (const void *)*MEMORY[0x1E0CED4D8]);
      sub_1B68B2CB4(v18, (const void *)*MEMORY[0x1E0CED4E8]);
      sub_1B68B2CB4(v18, (const void *)*MEMORY[0x1E0CED4E0]);
      v198 = sub_1B68B2CB4(v18, (const void *)*MEMORY[0x1E0CED4F0]);
      theArray = (const __CFArray *)CFDictionaryGetValue(v18, (const void *)*MEMORY[0x1E0CED4F8]);
      v185 = (const void *)*MEMORY[0x1E0CED528];
      buffer = (IOSurfaceRef)*MEMORY[0x1E0CED520];
      v181 = (const void *)*MEMORY[0x1E0CED540];
      v183 = (const void *)*MEMORY[0x1E0CED550];
      key = (void *)*MEMORY[0x1E0CED558];
      v179 = (const void *)*MEMORY[0x1E0CED538];
      v175 = (void *)*MEMORY[0x1E0CED560];
      v19 = (const void *)*MEMORY[0x1E0C9AE50];
      v171 = (const void *)*MEMORY[0x1E0CED570];
      v173 = (void *)*MEMORY[0x1E0CED580];
      v167 = (const void *)*MEMORY[0x1E0CED578];
      v169 = (void *)*MEMORY[0x1E0CED568];
      v165 = (void *)*MEMORY[0x1E0CED530];
      v20 = (const void *)*MEMORY[0x1E0CED518];
      v21 = (const void *)*MEMORY[0x1E0CED500];
      v163 = (void *)*MEMORY[0x1E0CED548];
      v22 = (const void *)*MEMORY[0x1E0CED510];
      v23 = (int8x8_t *)v194;
      v24 = -1;
      v25 = (const void *)*MEMORY[0x1E0CED508];
      do
      {
        v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, ++v24);
        v23[-5].i32[1] = sub_1B68B2CB4(v26, buffer);
        v23[-4].i32[0] = sub_1B68B2CB4(v26, v185);
        v23[-4].i32[1] = sub_1B68B2CB4(v26, v183);
        *(int8x8_t *)((char *)&v23[-3] + 4) = (int8x8_t)sub_1B68B2CE8(v26, v181);
        v23[-2].i32[1] = sub_1B68B2CB4(v26, v179);
        v27 = (const __CFDictionary *)CFDictionaryGetValue(v26, key);
        v28 = CFDictionaryGetValue(v27, v175);
        v29 = CFEqual(v28, v19);
        v30 = CFDictionaryGetValue(v27, v173);
        v23[1] = vbic_s8((int8x8_t)0x100000001, (int8x8_t)vceqz_s32((int32x2_t)__PAIR64__(CFEqual(v30, v19), v29)));
        v23[2].i32[0] = sub_1B68B2CB4(v27, v171);
        v31 = CFDictionaryGetValue(v27, v169);
        v23[2].i32[1] = CFEqual(v31, v19) != 0;
        v23[3].i32[0] = sub_1B68B2CB4(v27, v167);
        v32 = (const __CFDictionary *)CFDictionaryGetValue(v26, v165);
        v23[-1].i32[0] = sub_1B68B2CB4(v32, v20);
        v23->i32[0] = sub_1B68B2CB4(v32, v21);
        v33 = (const __CFDictionary *)CFDictionaryGetValue(v26, v163);
        v23[-1].i32[1] = sub_1B68B2CB4(v33, v20);
        v23->i32[1] = sub_1B68B2CB4(v33, v21);
        if (CFDictionaryContainsKey(v32, v22))
          v34 = v22;
        else
          v34 = v25;
        v23[4].i32[0] = sub_1B68B2CB4(v32, v34);
        if (CFDictionaryContainsKey(v33, v22))
          v35 = v22;
        else
          v35 = v25;
        v23[4].i32[1] = sub_1B68B2CB4(v33, v35);
        v23 += 10;
      }
      while (v24 < v198);
      v36 = (*(_DWORD *)(v149 + 1592) + 1);
      v37 = (_DWORD *)(v149 + 264);
      v8 = v159;
      v7 = v161;
      v9 = v155;
      v10 = v157;
      a3 = v153;
      a5 = v151;
      do
      {
        *(v37 - 2) = 0;
        *v37 = 0;
        v37 += 20;
        --v36;
      }
      while (v36);
    }
  }
  if (!*(_DWORD *)(*(_QWORD *)(v8 + 144) + 60))
    *(_DWORD *)(v9[290] + 2976) = 1;
LABEL_82:
  *(_BYTE *)(v7 + 18) = a5 - 1;
  if (*(_BYTE *)(v8 + 1057) == 1)
  {
    v90 = *(unsigned __int8 *)(v7 + 1368);
    v91 = v90 == 2 || v90 == 7;
    if (!v91 && !*(_BYTE *)(v7 + 17))
    {
      v92 = *v9;
      LODWORD(v93) = *(_BYTE *)(v7 + 16) ? *(unsigned __int8 *)(v7 + 22) : *(_DWORD *)(v92 + 23664);
      if ((int)v93 >= 1)
      {
        v95 = (uint64_t *)(v92 + 22840);
        v93 = v93;
        do
        {
          *(_WORD *)(*v95 + 19116) = *(_WORD *)(v7 + 19112);
          v96 = *v95++;
          *(_WORD *)(v96 + 19118) = *(_WORD *)(v7 + 19114);
          --v93;
        }
        while (v93);
      }
    }
  }
  *(_BYTE *)(v7 + 5001) = 0;
  if (a3)
  {
    if (a5 >= 2)
    {
      v97 = *(unsigned int *)(v7 + 1276);
      if ((v97 & 0x80000000) == 0)
      {
        v98 = *(_QWORD *)(a3 + 16);
        if (v98)
        {
          if (*(_DWORD *)(a3 + 4) > v97)
            *(_DWORD *)(v98 + 8 * v97) = *((_DWORD *)v9 + 16);
        }
      }
    }
  }
  v99 = *((unsigned __int8 *)v9 + 1882);
  if (*((_BYTE *)v9 + 1882))
  {
    v100 = *(_DWORD *)(*(_QWORD *)(v8 + 5456) + 14184);
    if (v100 == 5 || v100 == 0)
    {
      v102 = (int *)(v8 + 57096);
      if ((v99 | 2) == 3)
      {
        v103 = *((_DWORD *)v9 + 471);
        v104 = *v102;
        v105 = *(_DWORD *)(v8 + 57100) * *v102;
        if (*((_BYTE *)v9 + 2287))
        {
          v106 = v104 / 3;
          v107 = v105 >> (v99 == 3);
          v108 = v106 + v103;
          if (v106 + v103 >= v107)
          {
            v109 = *((_BYTE *)v9 + 1888);
            if (v106 - 1 >= (v109 + 1))
              LOBYTE(v108) = v109 + 1;
            else
              LOBYTE(v108) = 0;
            *((_BYTE *)v9 + 1888) = v108;
            v108 = v108;
          }
        }
        else
        {
          v108 = (v103 + 1) % (v105 >> (v99 != 1));
        }
        *((_DWORD *)v9 + 471) = v108;
      }
      else if ((int)v10 >= 1)
      {
        v110 = 0;
        for (i = 0; i != v10; ++i)
        {
          v112 = v9[237];
          v113 = *(_DWORD *)(v112 + 4 * i);
          v114 = *(_QWORD *)(v8 + 5480) + v110;
          v115 = *(_DWORD *)(v114 + 12);
          v116 = *(_DWORD *)(v114 + 16);
          if (*((_BYTE *)v9 + 2287))
          {
            v117 = *v102 / 3;
            v118 = v117 + v113;
            if (v118 >= v116 + v115)
            {
              ++*(_BYTE *)(v9[238] + i);
              v119 = v9[238];
              v120 = *(unsigned __int8 *)(v119 + i);
              if (v117 - 1 < v120)
              {
                *(_BYTE *)(v119 + i) = 0;
                v120 = *(unsigned __int8 *)(v9[238] + i);
              }
              v118 = v115 + v120;
              v112 = v9[237];
            }
          }
          else if (v113 + 1 < v116 + v115)
          {
            v118 = v113 + 1;
          }
          else
          {
            v118 = v115;
          }
          *(_DWORD *)(v112 + 4 * i) = v118;
          v110 += 88;
        }
      }
    }
  }
  if (*((_BYTE *)v9 + 2288))
    return 0;
  result = 0;
  if (v7 && *((_BYTE *)v9 + 2287))
  {
    if (!*(_QWORD *)(v8 + 152) || !*(_QWORD *)(v8 + 5392))
      return 0;
    if (*((_BYTE *)v9 + 133))
      goto LABEL_136;
    if ((int)v10 < 1)
    {
      v124 = 0;
      v123 = 0;
    }
    else
    {
      v122 = 0;
      v123 = 0;
      v124 = 0;
      do
      {
        v125 = *(_QWORD *)(v8 + 5480) + v122;
        v124 += *(_DWORD *)(v125 + 56);
        *(_DWORD *)(v125 + 56) = 0;
        v126 = *(_QWORD *)(v8 + 5480) + v122;
        v123 += *(_DWORD *)(v126 + 60);
        *(_DWORD *)(v126 + 60) = 0;
        v122 += 88;
      }
      while (88 * v10 != v122);
    }
    v140 = v123 + v124;
    if (!v140)
LABEL_136:
      v121 = 0;
    else
      v121 = 100 * v124 / v140;
    result = 0;
    v141 = *(_DWORD *)(v7 + 1276);
    v142 = -v141 < 0;
    v143 = -v141 & 3;
    v144 = v141 & 3;
    if (!v142)
      v144 = -v143;
    *(_DWORD *)(*(_QWORD *)(v8 + 5392) + 4 * v144 + 704) = v121;
  }
  return result;
}

void sub_1B68D4344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  double v31;
  int v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int v38;
  double v39;
  unsigned int v40;
  int v41;
  int v42;
  signed int v43;
  float v44;
  unsigned int v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  int v56;
  float v57;
  float v58;
  int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  int v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  int v86;
  double v87;
  double v88;
  int64x2_t v89;
  float v90;
  float v91;
  int v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  int v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  int v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  int v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  int *v116;
  int v117;
  uint64_t v118;
  int v119;
  float v120;
  int v121;
  __int128 v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  float v130;
  float v131;
  int v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  int32x2_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  float v142;
  int v143;
  int v144;
  unint64_t v145;
  double v146;
  float v147;
  BOOL v148;
  uint64_t v149;
  float v150;
  unsigned int v151;
  __int32 v152;
  unsigned int v153;
  float v154;
  int32x2_t v155;
  BOOL v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;

  v6 = a1 + 205864;
  v7 = (_BYTE *)(a1 + 5424);
  v8 = *(unsigned __int8 *)(a2 + 17);
  v9 = *(_QWORD *)(a1 + 152);
  v10 = *(_QWORD *)(a1 + 5392);
  if (*(_DWORD *)v9)
  {
    v11 = *(unsigned int *)(a1 + 208060);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = (int *)(a1 + 207768);
      do
      {
        v14 = *v13++;
        v12 += v14;
        --v11;
      }
      while (v11);
    }
    else
    {
      v12 = 0;
    }
    if (*(_DWORD *)v9 != 2)
      goto LABEL_131;
    if (*(_BYTE *)(a1 + 205936))
    {
      v25 = *(_DWORD *)(a2 + 4564);
      v26 = v25 >> 1;
      if (*(_DWORD *)(*(_QWORD *)(a1 + 136) + 4852) == 2)
        v27 = 0;
      else
        v27 = *(_DWORD *)(a2 + 1268);
      v40 = v26 + *(_DWORD *)(*(_QWORD *)(a1 + 208120) + 3400);
      sub_1B68A1E08(v9 + 1768, v40 / v25, (v26 + v27 * *(_DWORD *)(a2 + 19156)) / v25, v40 / v25, *(_DWORD *)(a2 + 1276));
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 136) + 577) == 1)
    {
      v41 = *(unsigned __int8 *)(a2 + 17);
      if (*(_BYTE *)(v6 + 56))
      {
        v159 = *(_QWORD *)(v6 + 44);
        v160 = *(_DWORD *)(v6 + 52);
        v42 = *(_DWORD *)(v6 + 2024);
        v43 = *(_DWORD *)(a2 + 1276);
        v44 = *(float *)v6;
        v45 = *(unsigned __int8 *)(a2 + 1368);
        v46 = *(_DWORD *)(v9 + 244);
        v47 = &v159;
        v48 = v9;
        v49 = v12;
        goto LABEL_32;
      }
    }
    else
    {
      v41 = *(unsigned __int8 *)(a2 + 17);
    }
    v42 = 8 * *(_DWORD *)(a3 + 8);
    v43 = *(_DWORD *)(a2 + 1276);
    v44 = *(float *)v6;
    v45 = *(unsigned __int8 *)(a2 + 1368);
    v46 = *(_DWORD *)(v9 + 244);
    v48 = v9;
    v49 = v12;
    v47 = 0;
LABEL_32:
    sub_1B68A3074(v48, v42, v49, v43, v45, (uint64_t)v47, v41, v46, v44);
    if (*v7)
    {
      v50 = !*(_BYTE *)(a2 + 17) && *(float *)v6 < (float)dword_1B6933F68[*(int *)(v9 + 216)];
      *(_BYTE *)(*(_QWORD *)(a1 + 5416) + 349) = v50;
      *(_BYTE *)(*(_QWORD *)(a1 + 5416) + 348) = *(_DWORD *)(*(_QWORD *)(a1 + 5416) + 344) > (8 * *(_DWORD *)(a3 + 8));
    }
    goto LABEL_131;
  }
  v15 = *(_QWORD *)(a1 + 205944);
  if (*(_DWORD *)v15)
  {
    if ((*(_DWORD *)v15 & 1) != 0)
    {
      v16 = 8 * *(_DWORD *)(a3 + 8);
      *(_QWORD *)(v15 + 24) = v16;
      v18 = *(_DWORD *)(v15 + 120);
      v17 = *(_DWORD *)(v15 + 124);
      v19 = (double)v17;
      *(double *)(v15 + 32) = *(float *)v6;
      *(double *)(v15 + 40) = (double)v17;
      if (v18 == 2)
      {
        *(_QWORD *)(v15 + 520) = v16;
        *(_DWORD *)(v15 + 536) = v17;
        *(_QWORD *)(v15 + 272) = v16;
        *(double *)(v15 + 280) = v19;
        v24 = *(double *)(v15 + 240);
        v21 = *(double *)(v15 + 248);
        v22 = *(double *)(v15 + 264);
        v23 = (double)v16;
        v20 = exp2((v19 + -12.0) / 6.0) * (double)v16;
      }
      else if (v18 == 1)
      {
        *(_QWORD *)(v15 + 512) = v16;
        *(_DWORD *)(v15 + 532) = v17;
        *(_QWORD *)(v15 + 272) = v16;
        *(double *)(v15 + 280) = v19;
        v24 = *(double *)(v15 + 240);
        v20 = *(double *)(v15 + 256);
        v22 = *(double *)(v15 + 264);
        v23 = (double)v16;
        v21 = exp2((v19 + -12.0) / 6.0) * (double)v16;
      }
      else if (v18)
      {
        *(_QWORD *)(v15 + 272) = v16;
        *(double *)(v15 + 280) = v19;
        v24 = *(double *)(v15 + 240);
        v21 = *(double *)(v15 + 248);
        v20 = *(double *)(v15 + 256);
        v22 = *(double *)(v15 + 264);
        v23 = (double)v16;
      }
      else
      {
        *(_QWORD *)(v15 + 504) = v16;
        *(_DWORD *)(v15 + 528) = v17;
        *(_QWORD *)(v15 + 272) = v16;
        *(double *)(v15 + 280) = v19;
        v21 = *(double *)(v15 + 248);
        v20 = *(double *)(v15 + 256);
        v22 = *(double *)(v15 + 264);
        v23 = (double)v16;
        v24 = exp2((v19 + -12.0) / 6.0) * (double)v16;
      }
      v51 = sub_1B68F7888(v24);
      v52 = sub_1B68F7888(v21);
      v53 = sub_1B68F7888(v20);
      v54 = sub_1B68F7888(v22);
      v55 = sub_1B68F7888(v54 - v23);
      sub_1B68B68D8((double *)(v15 + 176), v51, v52, v53, v55);
      *(_DWORD *)(v15 + 184) = 1;
      ++*(_DWORD *)(v15 + 3912);
      v56 = *(_DWORD *)(v15 + 120);
      if (v56)
      {
        *(_DWORD *)(v15 + 3796) = (*(_DWORD *)(v15 + 24) + 3 * *(_DWORD *)(v15 + 3796) + 2) >> 2;
        *(_DWORD *)(v15 + 152) = v16;
        *(_DWORD *)(v15 + 156) = 0;
        if (v56 == 1)
        {
          v71 = (float)v16;
          if (*(_DWORD *)(v15 + 64))
          {
            v72 = sub_1B68F7888(((double)v16 - (double)*(uint64_t *)(v15 + 224)) / 1000.0);
            v73 = *(float *)(v15 + 3724) + v72;
            v74 = 0;
            v75 = 100.0;
            if (v73 < 100.0)
              v75 = v73;
            if (v73 >= 0.0)
              v76 = v75;
            else
              v76 = 0.0;
            *(float *)(v15 + 3724) = v76;
            v77 = sub_1B68F7888(((double)v16 - *(double *)(v15 + 3896) / *(double *)(v15 + 3904)) / 1000.0);
            v78 = *(float *)(v15 + 3736) + v77;
            if (v78 >= 0.0)
            {
              v74 = 1120403456;
              if (v78 < 100.0)
                v74 = LODWORD(v78);
            }
            *(_DWORD *)(v15 + 3736) = v74;
            *(float *)(v15 + 3748) = v71;
          }
          v79 = *(_DWORD *)(v15 + 456);
          v80 = *(_QWORD *)(v15 + 448);
          *(_QWORD *)(v15 + 452) = v80;
          *(_QWORD *)(v15 + 448) = v80;
          *(_DWORD *)(v15 + 456) = v79;
          *(float *)(v15 + 460) = v71;
          ++*(_DWORD *)(v15 + 484);
        }
        else if (v56 == 2)
        {
          if (*(_DWORD *)(v15 + 64))
          {
            v57 = sub_1B68F7888(((double)v16 - (double)*(uint64_t *)(v15 + 232)) / 1000.0);
            v58 = *(float *)(v15 + 3724) + v57;
            v59 = 0;
            v60 = 100.0;
            if (v58 < 100.0)
              v60 = v58;
            if (v58 >= 0.0)
              v61 = v60;
            else
              v61 = 0.0;
            *(float *)(v15 + 3724) = v61;
            v62 = sub_1B68F7888(((double)v16 - *(double *)(v15 + 3896) / *(double *)(v15 + 3904)) / 1000.0);
            v63 = *(float *)(v15 + 3736) + v62;
            if (v63 >= 0.0)
            {
              v59 = 1120403456;
              if (v63 < 100.0)
                v59 = LODWORD(v63);
            }
            *(_DWORD *)(v15 + 3736) = v59;
          }
          ++*(_DWORD *)(v15 + 488);
        }
      }
      else
      {
        *(_DWORD *)(v15 + 152) = v16;
        *(_DWORD *)(v15 + 156) = 0;
        if (*(_DWORD *)(v15 + 64) && !*(_DWORD *)(v15 + 3824))
        {
          v64 = sub_1B68F7888(((double)v16 - (double)*(uint64_t *)(v15 + 216)) / 1000.0);
          v65 = *(float *)(v15 + 3724) + v64;
          v66 = 0;
          v67 = 100.0;
          if (v65 < 100.0)
            v67 = v65;
          if (v65 >= 0.0)
            v68 = v67;
          else
            v68 = 0.0;
          *(float *)(v15 + 3724) = v68;
          v69 = sub_1B68F7888(((double)v16 - *(double *)(v15 + 3896) / *(double *)(v15 + 3904)) / 1000.0);
          v70 = *(float *)(v15 + 3736) + v69;
          if (v70 >= 0.0)
          {
            v66 = 1120403456;
            if (v70 < 100.0)
              v66 = LODWORD(v70);
          }
          *(_DWORD *)(v15 + 3736) = v66;
          *(float *)(v15 + 3744) = (float)v16;
        }
        ++*(_DWORD *)(v15 + 480);
      }
      if (*(_DWORD *)(v15 + 3824))
        *(_DWORD *)(v15 + 3824) = 0;
      *(_DWORD *)(v15 + 3944) = *(_DWORD *)(v15 + 124);
      ++*(_DWORD *)(v15 + 3764);
    }
    goto LABEL_131;
  }
  v28 = *(_QWORD *)(a1 + 205960);
  if (*(_DWORD *)v28 != 32)
    goto LABEL_131;
  v29 = (int)*(float *)v6;
  v30 = 8 * *(_DWORD *)(a3 + 8);
  *(_DWORD *)(v28 + 116) = v29;
  *(_QWORD *)(v28 + 16) = v30;
  v31 = (double)v29;
  *(double *)(v28 + 24) = *(float *)v6;
  *(double *)(v28 + 32) = (double)v29;
  v32 = *(_DWORD *)(v28 + 112);
  v158 = v30;
  v157 = v30;
  if (v32 && !*(_DWORD *)(v28 + 132))
  {
    if (v32 == 2)
    {
      *(_QWORD *)(v28 + 568) = v30;
      *(_DWORD *)(v28 + 584) = v29;
      *(_QWORD *)(v28 + 256) = v30;
      *(double *)(v28 + 264) = v31;
      v34 = *(double *)(v28 + 224);
      v33 = *(double *)(v28 + 232);
      v35 = *(double *)(v28 + 248);
      v37 = exp2((v31 + -12.0) / 6.0);
      goto LABEL_87;
    }
    if (v32 == 1)
    {
      *(_QWORD *)(v28 + 448) = *(_QWORD *)(v28 + 560);
      *(_QWORD *)(v28 + 560) = v30;
      *(_DWORD *)(v28 + 580) = v29;
      *(_QWORD *)(v28 + 256) = v30;
      *(double *)(v28 + 264) = v31;
      v34 = *(double *)(v28 + 224);
      v33 = *(double *)(v28 + 232);
      v36 = *(double *)(v28 + 240);
      v35 = *(double *)(v28 + 248);
      v37 = exp2((v31 + -12.0) / 6.0);
LABEL_84:
      v38 = v157;
      v39 = (double)v157;
      v33 = (v37 * (double)v157 + v33 * 7.0) * 0.125;
      goto LABEL_88;
    }
  }
  else
  {
    *(_QWORD *)(v28 + 552) = v30;
    *(_DWORD *)(v28 + 576) = v29;
  }
  *(_QWORD *)(v28 + 256) = v30;
  *(double *)(v28 + 264) = v31;
  v34 = *(double *)(v28 + 224);
  v33 = *(double *)(v28 + 232);
  v36 = *(double *)(v28 + 240);
  v35 = *(double *)(v28 + 248);
  v37 = exp2((v31 + -12.0) / 6.0);
  switch(v32)
  {
    case 0:
      v38 = v157;
      v39 = (double)v157;
      v34 = v37 * (double)v157;
      goto LABEL_88;
    case 1:
      goto LABEL_84;
    case 2:
LABEL_87:
      v38 = v157;
      v39 = (double)v157;
      v36 = v37 * (double)v157;
      goto LABEL_88;
  }
  v38 = v157;
  v39 = (double)v157;
LABEL_88:
  v81 = sub_1B68F7888(v34);
  v82 = sub_1B68F7888(v33);
  v83 = sub_1B68F7888(v36);
  v84 = sub_1B68F7888(v35);
  v85 = sub_1B68F7888(v84 - v39);
  sub_1B68B68D8((double *)(v28 + 160), v81, v82, v83, v85);
  *(_DWORD *)(v28 + 168) = 1;
  ++*(_DWORD *)(v28 + 3984);
  v86 = *(_DWORD *)(v28 + 112);
  if (v86)
    *(_DWORD *)(v28 + 3860) = (*(_DWORD *)(v28 + 16) + 3 * *(_DWORD *)(v28 + 3860) + 2) >> 2;
  v87 = (double)v38;
  v88 = (double)v38 - *(double *)(v28 + 3968) / *(double *)(v28 + 3976);
  *(_QWORD *)(v28 + 3824) += (uint64_t)(v88 + 0.5);
  v89 = vdupq_n_s64(1uLL);
  v89.i64[0] = v158;
  *(int64x2_t *)(v28 + 3832) = vaddq_s64(*(int64x2_t *)(v28 + 3832), v89);
  *(_DWORD *)(v28 + 140) = v38;
  *(_DWORD *)(v28 + 144) = 0;
  switch(v86)
  {
    case 2:
      if (*(_DWORD *)(v28 + 56))
      {
        v97 = sub_1B68F7888((v87 - (double)*(uint64_t *)(v28 + 216)) / 1000.0);
        v98 = *(float *)(v28 + 3772) + v97;
        v99 = 0;
        v100 = 100.0;
        if (v98 < 100.0)
          v100 = v98;
        if (v98 >= 0.0)
          v101 = v100;
        else
          v101 = 0.0;
        *(float *)(v28 + 3772) = v101;
        v102 = sub_1B68F7888(v88 / 1000.0);
        v103 = *(float *)(v28 + 3784) + v102;
        if (v103 >= 0.0)
        {
          v99 = 1120403456;
          if (v103 < 100.0)
            v99 = LODWORD(v103);
        }
        *(_DWORD *)(v28 + 3784) = v99;
      }
      ++*(_DWORD *)(v28 + 536);
      break;
    case 1:
      if (*(_DWORD *)(v28 + 56))
      {
        v104 = sub_1B68F7888((v87 - (double)*(uint64_t *)(v28 + 208)) / 1000.0);
        v105 = *(float *)(v28 + 3772) + v104;
        v106 = 0;
        v107 = 100.0;
        if (v105 < 100.0)
          v107 = v105;
        if (v105 >= 0.0)
          v108 = v107;
        else
          v108 = 0.0;
        *(float *)(v28 + 3772) = v108;
        v109 = sub_1B68F7888(v88 / 1000.0);
        v110 = *(float *)(v28 + 3784) + v109;
        if (v110 >= 0.0)
        {
          v106 = 1120403456;
          if (v110 < 100.0)
            v106 = LODWORD(v110);
        }
        *(_DWORD *)(v28 + 3784) = v106;
        v111 = (float)v38;
        *(float *)(v28 + 3796) = (float)v38;
      }
      else
      {
        v111 = (float)v38;
      }
      v112 = *(_DWORD *)(v28 + 504);
      v113 = *(_QWORD *)(v28 + 496);
      *(_QWORD *)(v28 + 500) = v113;
      *(_QWORD *)(v28 + 496) = v113;
      *(_DWORD *)(v28 + 504) = v112;
      *(float *)(v28 + 508) = v111;
      ++*(_DWORD *)(v28 + 532);
      break;
    case 0:
      if (*(_DWORD *)(v28 + 56) && !*(_DWORD *)(v28 + 3888))
      {
        v90 = sub_1B68F7888((v87 - (double)*(uint64_t *)(v28 + 200)) / 1000.0);
        v91 = *(float *)(v28 + 3772) + v90;
        v92 = 0;
        v93 = 100.0;
        if (v91 < 100.0)
          v93 = v91;
        if (v91 >= 0.0)
          v94 = v93;
        else
          v94 = 0.0;
        *(float *)(v28 + 3772) = v94;
        v95 = sub_1B68F7888(v88 / 1000.0);
        v96 = *(float *)(v28 + 3784) + v95;
        if (v96 >= 0.0)
        {
          v92 = 1120403456;
          if (v96 < 100.0)
            v92 = LODWORD(v96);
        }
        *(_DWORD *)(v28 + 3784) = v92;
        *(float *)(v28 + 3792) = (float)v38;
      }
      ++*(_DWORD *)(v28 + 528);
      break;
  }
  if (*(_DWORD *)(v28 + 3888))
    *(_DWORD *)(v28 + 3888) = 0;
  *(_DWORD *)(v28 + 4016) = *(_DWORD *)(v28 + 116);
  ++*(_DWORD *)(v28 + 3812);
LABEL_131:
  if (*v7)
    v114 = v10 == 0;
  else
    v114 = 1;
  if (!v114)
  {
    v115 = *(_QWORD *)(v6 + 2256);
    if (v115)
      v116 = (int *)(v115 + 3448);
    else
      v116 = (int *)(a3 + 8);
    v117 = *v116;
    v118 = *(_QWORD *)(a1 + 5416);
    v119 = *(_DWORD *)(v6 + 2024);
    v120 = *(float *)v6;
    *(_BYTE *)(*(_QWORD *)(a1 + 136) + 4896) = 0;
    if (v8)
    {
      v121 = *(unsigned __int8 *)(v118 + 104);
      *(_DWORD *)(v118 + 316) -= v121;
      *(_DWORD *)(v118 + 328) -= v121;
      *(_DWORD *)(v118 + 324) = v121 + *(_DWORD *)(v118 + 324) - 1;
      *(float *)(v118 + 96) = v120;
    }
    else
    {
      v122 = *(_OWORD *)(v118 + 48);
      *(_OWORD *)(v118 + 64) = *(_OWORD *)(v118 + 32);
      *(_OWORD *)(v118 + 80) = v122;
      *(_DWORD *)(v118 + 32) = v119;
      *(_DWORD *)(v118 + 36) = v117;
      *(float *)(v118 + 40) = v120;
      *(_BYTE *)(v118 + 44) = 0;
      *(_OWORD *)(v118 + 48) = *(_OWORD *)(v118 + 224);
      *(_BYTE *)(v118 + 45) = *(_BYTE *)(v118 + 105);
      *(_WORD *)(v118 + 46) = *(_WORD *)(v118 + 106);
      if (!*(_BYTE *)(v118 + 104))
        ++*(_DWORD *)(v118 + 312);
    }
    *(_BYTE *)(v118 + 113) = *(_BYTE *)(v118 + 112);
    *(_BYTE *)(v118 + 112) = 0;
  }
  *(_DWORD *)(a2 + 1364) = *(_DWORD *)v6;
  switch(*(_BYTE *)(a2 + 1368))
  {
    case 0:
    case 5:
      v123 = (int)*(float *)v6;
      *(_DWORD *)(v6 + 1876) = v123;
      if (*(_DWORD *)(v6 + 1872) >= 0x34u)
        goto LABEL_147;
      break;
    case 1:
    case 6:
      v123 = (int)*(float *)v6;
LABEL_147:
      *(_DWORD *)(v6 + 1872) = v123;
      break;
    default:
      v126 = (int)*(float *)v6;
      *(_DWORD *)(v6 + 1880) = v126;
      if (*(_DWORD *)(v6 + 1876) >= 0x34u)
        *(_DWORD *)(v6 + 1876) = v126;
      break;
  }
  v124 = *(_DWORD *)(a2 + 4964) + *(_DWORD *)(v6 + 2020) + *(_DWORD *)(a2 + 4960);
  if (!*(_BYTE *)(v6 + 2223))
    goto LABEL_167;
  v125 = *(_QWORD *)(a1 + 5400);
  if (!v125)
    goto LABEL_167;
  if (v8)
  {
    *(_DWORD *)(v125 + 48) += (int)(*(double *)v125 / *(double *)(v125 + 16));
  }
  else
  {
    if (*(_DWORD *)(v125 + 64) == 2)
      *(_DWORD *)(v125 + 28) += v124;
    *(_DWORD *)(v125 + 48) = 0;
  }
  v127 = *(_QWORD *)(a1 + 5408);
  if (!v127 || (v128 = *(unsigned __int8 *)(a2 + 1368), v128 > 9) || ((1 << v128) & 0x294) == 0)
  {
LABEL_167:
    if (!*(_BYTE *)(a1 + 1024) || !v10)
      goto LABEL_190;
    if (v8)
    {
LABEL_169:
      v129 = *(_QWORD *)(a1 + 5400);
      v130 = *(double *)v129 * (double)*(int *)(v129 + 36) / 1000.0;
      v131 = (float)*(int *)(v129 + 28) / v130;
      *(_BYTE *)(v10 + 105) = *(_BYTE *)(v10 + 106);
      *(_WORD *)(v10 + 776) = 257;
      if (v131 > 2.0 || *(_BYTE *)(v10 + 728))
        ++*(_DWORD *)(v10 + 792);
      *(int32x2_t *)(v10 + 116) = vadd_s32(*(int32x2_t *)(v10 + 116), (int32x2_t)0x100000001);
      v132 = *(_DWORD *)(v10 + 808);
      if (v132 <= 0)
        v133 = 0;
      else
        v133 = v132 - 1;
      *(_DWORD *)(v10 + 808) = v133;
      v134 = *(_DWORD *)(v10 + 172);
      if (v134 <= 0)
        v135 = 0;
      else
        v135 = v134 - 1;
      *(_DWORD *)(v10 + 172) = v135;
      if (*v7)
        goto LABEL_193;
      goto LABEL_195;
    }
    goto LABEL_184;
  }
  if (v8)
  {
    *(_DWORD *)(v127 + 48) += (int)(*(double *)v127 / *(double *)(v127 + 16));
    if (!*(_BYTE *)(a1 + 1024) || !v10)
    {
      if (!*v7 || !v10)
        goto LABEL_195;
LABEL_193:
      ++*(_DWORD *)(v10 + 796);
      goto LABEL_195;
    }
    goto LABEL_169;
  }
  if (*(_DWORD *)(v127 + 64) == 2)
    *(_DWORD *)(v127 + 28) += v124;
  *(_DWORD *)(v127 + 48) = 0;
  if (*(_BYTE *)(a1 + 1024) && v10)
  {
LABEL_184:
    v136 = v10 + 4 * (*(_DWORD *)(a2 + 1276) % 10);
    *(_DWORD *)(v136 + 24) = *(_DWORD *)v6;
    *(_DWORD *)(v136 + 64) = v124;
    v137 = *(_DWORD *)(v10 + 108);
    *(_DWORD *)(v10 + 108) = v137 + 1;
    *(_DWORD *)(v10 + 792) = 0;
    *(_WORD *)(v10 + 776) = 0;
    if (*(_BYTE *)(v10 + 801) && *(_BYTE *)(v10 + 802) && v137 >= 1)
      *(_WORD *)(v10 + 801) = 0;
    v138 = vsub_s32(*(int32x2_t *)(v9 + 228), *(int32x2_t *)(v9 + 236));
    *(int32x2_t *)(v9 + 228) = vmax_s32(v138, 0);
    if (v138.i32[0] <= 0)
      *(_BYTE *)(v9 + 224) = 0;
  }
LABEL_190:
  if (*v7 && v10)
  {
    if (!v8)
    {
      *(_DWORD *)(v10 + 796) = 0;
      goto LABEL_195;
    }
    goto LABEL_193;
  }
LABEL_195:
  v139 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v139 + 211))
  {
    if (*(int *)(v10 + 808) >= 2 && !v8)
      *(_BYTE *)(v139 + 211) = 0;
  }
  else if (!v10)
  {
    goto LABEL_215;
  }
  if (*(_BYTE *)(v10 + 812))
  {
    v140 = *(_QWORD *)(v6 + 2256);
    v141 = *(_DWORD *)(v6 + 2020);
    v142 = *(float *)v6;
    v143 = *(_DWORD *)(a2 + 228);
    v144 = *(_DWORD *)(a2 + 196);
    v145 = *(_QWORD *)(v140 + 3424);
    if (v145)
    {
      v146 = pow((double)(v144 * v143), 0.3) * 0.001 * ((double)*(unint64_t *)(v140 + 3432) / (double)v145);
      v147 = *(float *)(v10 + 820);
      v148 = v146 <= (float)(v147 * 5.0) || v147 <= 0.0;
      if (!v148)
        v146 = (float)(v147 * 5.0);
      *(double *)&v149 = 64.0;
      if (v146 <= 64.0)
        goto LABEL_211;
    }
    else
    {
      v147 = *(float *)(v10 + 820);
      *(double *)&v149 = 32.0;
    }
    v146 = *(double *)&v149;
LABEL_211:
    v150 = v146 * 0.5 + v147 * 0.5;
    *(float *)(v10 + 820) = v150;
    v151 = (int)v150;
    v152 = 5;
    if ((int)v150 >= 1)
    {
      do
      {
        v153 = v152--;
        if (v153 < 2)
          break;
        v148 = v151 > 1;
        v151 >>= 1;
      }
      while (v148);
    }
    v154 = (double)v141 * 0.5 * exp2((v142 + -12.0) / 6.0) / (double)(v144 * v143) + *(float *)(v10 + 816) * 0.5;
    v155.i32[0] = (int)(v154 / 0.3 + 0.5);
    v155.i32[1] = v152;
    *(float *)(v10 + 816) = v154;
    *(int32x2_t *)(v10 + 824) = vmax_s32(vmin_s32(v155, (int32x2_t)0x500000005), 0);
  }
LABEL_215:
  if (v8)
  {
    *(_BYTE *)(v6 + 2078) = *(_BYTE *)(a2 + 24) != 0;
    v156 = *(_BYTE *)(a2 + 1393) != 0;
  }
  else
  {
    v156 = 0;
    *(_BYTE *)(v6 + 2078) = 0;
  }
  *(_BYTE *)(v6 + 2079) = v156;
}

void sub_1B68D52BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  long double v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  double *v36;
  __int128 *v37;
  double v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v51;
  long double v52;
  double v53;
  double v54;
  double v55;
  unsigned int v56;
  double v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  long double v76;
  long double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  float v85;
  float v86;
  float v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  _BOOL4 v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  float v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int **v107;
  int *v108;
  uint64_t v109;
  double v110;
  int *v111;
  uint64_t v112;
  int v113;
  int *v114;
  int v115;
  double v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  _BOOL4 v128;
  int v129;
  int v132;
  int v133;
  int v134;

  v5 = a5;
  v7 = a1 + 207748;
  v8 = a1 + 205834;
  v9 = *(_QWORD *)(a1 + 207760);
  if (!v9)
  {
LABEL_7:
    if (!a3)
      return;
    goto LABEL_8;
  }
  *(_DWORD *)(v9 + 12) += *(_DWORD *)(*(_QWORD *)(a1 + 128) + 8);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 205840) + 1368) - 2) > 7u)
    v11 = 0;
  else
    v11 = dword_1B6933FA4[(*(_BYTE *)(*(_QWORD *)(a1 + 205840) + 1368) - 2)];
  *(_DWORD *)(*(_QWORD *)(a1 + 207760) + 4) += v11;
  v12 = *(_QWORD *)(a1 + 207760);
  if (*(_BYTE *)(a2 + 17))
  {
    ++*(_BYTE *)(v12 + 389);
    goto LABEL_7;
  }
  ++*(_DWORD *)v12;
  *(_DWORD *)(*(_QWORD *)(a1 + 207760) + 20) = *(_DWORD *)(a2 + 19160);
  if (*(_BYTE *)(a1 + 1057))
  {
    if (*(_BYTE *)(a1 + 1057) == 2)
    {
      v28 = *(unsigned __int16 *)(a2 + 19124);
      v29 = *(unsigned __int16 *)(a2 + 19126);
    }
    else
    {
      v28 = *(unsigned __int16 *)(a2 + 19112);
      v29 = *(unsigned __int16 *)(a2 + 19114);
    }
  }
  else
  {
    v28 = *(_DWORD *)(a2 + 228);
    v29 = *(_DWORD *)(a2 + 196);
  }
  v30 = *(_QWORD *)(a1 + 5392);
  if (v30)
    v31 = *(double *)(v30 + 136);
  else
    v31 = *(float *)(a2 + 4940);
  v32 = *(_QWORD *)(a1 + 5400);
  if (v32)
    v132 = (int)((double)*(int *)(v32 + 28) * 1000.0 / *(double *)v32);
  else
    v132 = 0;
  v129 = *(unsigned __int8 *)(a2 + 18);
  if (*(_DWORD *)v7 || *(_DWORD *)(a1 + 207752))
  {
    v127 = v28;
    v33 = v28;
    v34 = v29;
    if (*(_BYTE *)(a1 + 205933))
    {
      v33 = *(_DWORD *)(a2 + 224);
      v34 = *(_DWORD *)(a2 + 192);
    }
    if (!*(_DWORD *)v7)
      goto LABEL_65;
    v35 = *(_QWORD *)(a1 + 205848);
    v36 = *(double **)(a1 + 207760);
    v37 = &xmmword_1B6918000;
    v38 = 99.0;
    v124 = *(unsigned __int8 *)(a2 + 1368);
    if ((int)v34 < 1)
    {
      v40 = 0;
    }
    else
    {
      v39 = 0;
      v40 = 0;
      v41 = *(unsigned __int8 **)(a2 + 128);
      v42 = *(unsigned __int8 **)(v35 + 128);
      v43 = *(int *)(a2 + 232);
      do
      {
        if ((int)v33 >= 1)
        {
          v44 = v41;
          v45 = v42;
          v46 = v33;
          do
          {
            v48 = *v44++;
            v47 = v48;
            v49 = *v45++;
            v40 += (v47 - v49) * (v47 - v49);
            --v46;
          }
          while (v46);
        }
        ++v39;
        v42 += v43;
        v41 += v43;
      }
      while (v39 != v34);
      if (v40 >= 1)
      {
        v125 = a1 + 205834;
        v51 = *(_QWORD *)(a1 + 205848);
        v52 = log10((double)(int)(v34 * v33) * 65025.0 / (double)v40);
        v53 = sub_1B68F7888(v52 * 10.0);
        v35 = v51;
        v5 = a5;
        v8 = v125;
        v37 = &xmmword_1B6918000;
        v54 = v53;
        goto LABEL_45;
      }
    }
    v54 = 99.0;
LABEL_45:
    v126 = v29;
    v55 = 0.0;
    if (v34 < 2)
    {
      v56 = 0;
      v57 = 99.0;
      goto LABEL_62;
    }
    v123 = v5;
    v58 = 0;
    v59 = 0;
    v56 = 0;
    v60 = *(_QWORD *)(v35 + 136);
    LODWORD(v61) = v33 >> 1;
    LODWORD(v62) = v34 >> 1;
    v63 = (double)(int)((v34 >> 1) * (v33 >> 1));
    if (v33 >> 1 <= 1)
      v61 = 1;
    else
      v61 = v61;
    if (v62 <= 1)
      v62 = 1;
    else
      v62 = v62;
    v64 = *(int *)(a2 + 248);
    v65 = 0x100000000;
    v66 = *(unsigned __int8 **)(a2 + 136);
    v67 = *(unsigned __int8 **)(v35 + 136);
    do
    {
      if (v33 >= 2)
      {
        v68 = v66;
        v69 = v67;
        v70 = v65;
        v71 = v61;
        do
        {
          v73 = *v68;
          v68 += 2;
          v72 = v73;
          v74 = *v69;
          v69 += 2;
          v75 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + (v70 >> 32)) - *(unsigned __int8 *)(v60 + (v70 >> 32));
          v56 += (v72 - v74) * (v72 - v74);
          v59 += v75 * v75;
          v70 += 0x200000000;
          --v71;
        }
        while (v71);
      }
      ++v58;
      v65 += v64 << 32;
      v67 += v64;
      v66 += v64;
    }
    while (v58 != v62);
    v57 = *((double *)v37 + 328);
    if (v56)
    {
      v76 = log10(v63 * 65025.0 / (double)v56);
      v38 = sub_1B68F7888(v76 * 10.0);
      if (!v59)
      {
LABEL_61:
        v5 = v123;
LABEL_62:
        *(double *)(v5 + 152) = sub_1B68F7888((v38 + v54 * 4.0 + v57) / 6.0);
        v78 = v36[7];
        v79 = v36[6] + (double)v40;
        v36[5] = v38;
        v36[6] = v79;
        v80 = v78 + (double)v56;
        v81 = v36[9];
        v82 = v36[8] + v55;
        v36[3] = v54;
        v36[4] = v57;
        v36[7] = v80;
        v36[8] = v82;
        v83 = v38 + v36[10];
        v84 = v57 + v36[11];
        v36[9] = sub_1B68F7888(v54 + v81);
        v36[10] = sub_1B68F7888(v83);
        v36[11] = sub_1B68F7888(v84);
        v29 = v126;
        switch(v124)
        {
          case 0:
          case 5:
            v36[14] = sub_1B68F7888(v54 + v36[14]);
            if (v124 == 1)
              goto LABEL_64;
            break;
          case 1:
          case 6:
LABEL_64:
            v36[16] = sub_1B68F7888(v54 + v36[16]);
            break;
          default:
            break;
        }
LABEL_65:
        v85 = *(double *)(*(_QWORD *)(v7 + 12) + 24);
        *(float *)(v5 + 160) = v85;
        v86 = *(double *)(*(_QWORD *)(v7 + 12) + 40);
        *(float *)(v5 + 164) = v86;
        v87 = *(double *)(*(_QWORD *)(v7 + 12) + 32);
        *(float *)(v5 + 168) = v87;
        v28 = v127;
        goto LABEL_66;
      }
    }
    else
    {
      v38 = *((double *)v37 + 328);
      if (!v59)
        goto LABEL_61;
    }
    v55 = (double)v59;
    v77 = log10(v63 * 65025.0 / (double)v59);
    v57 = sub_1B68F7888(v77 * 10.0);
    goto LABEL_61;
  }
LABEL_66:
  v88 = *(_QWORD *)(v7 + 12);
  v89 = *(unsigned __int8 *)(a2 + 1368);
  v90 = *(_QWORD *)(a1 + 144);
  if (v90)
    v91 = *(unsigned __int8 *)(v90 + 708) != 0;
  else
    v91 = 0;
  v92 = v132;
  v93 = *(_DWORD *)(a2 + 1332);
  v94 = *(_DWORD *)(a2 + 1336);
  v95 = *(_DWORD *)(a2 + 1276);
  v96 = *(float *)(v8 + 30);
  v97 = 8 * *(_DWORD *)(a4 + 8);
  v134 = v97;
  *(_DWORD *)(v88 + 96) += v97;
  if (v89 <= 9)
  {
    if (((1 << v89) & 0x294) != 0)
    {
LABEL_77:
      *(_DWORD *)(v88 + 100) += v97;
      goto LABEL_78;
    }
    if (((1 << v89) & 0x21) != 0)
    {
      *(_DWORD *)(v88 + 120) += v97;
      ++*(_DWORD *)(v88 + 104);
    }
    else
    {
      if (((1 << v89) & 0x42) == 0)
        goto LABEL_78;
      *(_DWORD *)(v88 + 136) += v97;
      ++*(_DWORD *)(v88 + 124);
    }
    if (v89 == 4 || v89 == 2)
      goto LABEL_77;
  }
LABEL_78:
  *(_DWORD *)(v88 + 232) = 0;
  *(double *)(v88 + 240) = v31;
  *(double *)(v88 + 248) = v31;
  if (v95 >= 1 && v94)
  {
    v98 = v28;
    v99 = v29;
    v100 = v5;
    v101 = v93 - *(_DWORD *)(v88 + 176);
    v133 = v101;
    v128 = v91;
    if (v101 > v94 && *(int *)(v88 + 16) >= 10)
    {
      v102 = *(_QWORD *)(v88 + 296) + *(_QWORD *)(v88 + 288) - 1;
      v101 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 264) + ((v102 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v102 & 0x3FF));
      v133 = v101;
    }
    sub_1B677A440((_QWORD *)(v88 + 184), &v134);
    sub_1B677A440((_QWORD *)(v88 + 256), &v133);
    v103 = *(_DWORD *)(v88 + 180) + v101;
    *(_DWORD *)(v88 + 180) = v103;
    v104 = *(_QWORD *)(v88 + 216);
    v105 = *(_QWORD *)(v88 + 192);
    v106 = *(_QWORD *)(v88 + 200);
    v107 = (int **)(v105 + 8 * (v104 >> 10));
    if (v106 == v105)
      v108 = 0;
    else
      v108 = &(*v107)[*(_QWORD *)(v88 + 216) & 0x3FFLL];
    v5 = v100;
    v29 = v99;
    v28 = v98;
    v92 = v132;
    v109 = *(_QWORD *)(v88 + 224);
    v110 = (double)v103 / (double)v94;
LABEL_87:
    v111 = v108 - 1024;
    while (1)
    {
      v112 = v106 == v105 ? 0 : *(_QWORD *)(v105 + 8 * ((v104 + v109) >> 10)) + 4 * ((v104 + v109) & 0x3FF);
      if (v108 == (int *)v112)
        break;
      v113 = *v108++;
      *(_DWORD *)(v88 + 232) += v113;
      if (*v107 == ++v111)
      {
        v114 = v107[1];
        ++v107;
        v108 = v114;
        goto LABEL_87;
      }
    }
    *(_DWORD *)(v88 + 232) = (int)((double)*(int *)(v88 + 232) / v110);
    *(double *)(v88 + 248) = (double)*(unint64_t *)(v88 + 296) / v110;
    if (v103 > v94)
    {
      *(_DWORD *)(v88 + 180) = v103
                             - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 264)
                                                     + ((*(_QWORD *)(v88 + 288) >> 7) & 0x1FFFFFFFFFFFFF8))
                                         + 4 * (*(_QWORD *)(v88 + 288) & 0x3FFLL));
      *(_QWORD *)(v88 + 216) = v104 + 1;
      *(_QWORD *)(v88 + 224) = v109 - 1;
      sub_1B677A4C4(v88 + 184);
      *(int64x2_t *)(v88 + 288) = vaddq_s64(*(int64x2_t *)(v88 + 288), (int64x2_t)xmmword_1B6917580);
      sub_1B677A4C4(v88 + 256);
    }
    v91 = v128;
  }
  *(_DWORD *)(v88 + 176) = v93;
  v115 = *(_DWORD *)v88;
  if (*(_DWORD *)v88 == 1)
  {
    *(_QWORD *)(v88 + 160) = 0x404E000000000000;
    *(_DWORD *)(v88 + 312) = 1112276992;
    *(_DWORD *)(v88 + 324) = 0x40000000;
    *(_QWORD *)(v88 + 344) = 0x4000000040000000;
    *(_DWORD *)(v88 + 372) = 0x40000000;
    v116 = 60.0;
  }
  else
  {
    v116 = *(double *)(v88 + 160);
  }
  *(double *)(v88 + 144) = *(double *)(v88 + 144) + v31;
  if (v116 > v31)
    *(double *)(v88 + 160) = v31;
  if (*(double *)(v88 + 168) < v31)
    *(double *)(v88 + 168) = v31;
  *(double *)(v88 + 304) = *(double *)(v88 + 304) + v96;
  if (*(float *)(v88 + 312) > v96)
    *(float *)(v88 + 312) = v96;
  if (*(float *)(v88 + 316) < v96)
    *(float *)(v88 + 316) = v96;
  *(_DWORD *)(v88 + 320) += v92;
  if (*(_DWORD *)(v88 + 324) > v92)
    *(_DWORD *)(v88 + 324) = v92;
  if (*(_DWORD *)(v88 + 328) < v92)
    *(_DWORD *)(v88 + 328) = v92;
  if (v115 >= 11 && *(_DWORD *)(v88 + 332) < v92)
    *(_DWORD *)(v88 + 332) = v92;
  *(_DWORD *)(v88 + 336) += v28;
  if (*(_DWORD *)(v88 + 344) > v28)
    *(_DWORD *)(v88 + 344) = v28;
  if (*(_DWORD *)(v88 + 352) < v28)
    *(_DWORD *)(v88 + 352) = v28;
  if (*(_DWORD *)(v88 + 360) == v28)
  {
    v117 = *(_DWORD *)(v88 + 364) + 1;
  }
  else
  {
    ++*(_DWORD *)(v88 + 368);
    if (v115 >= 2)
    {
      v118 = *(_DWORD *)(v88 + 364);
      if (v118 < *(_DWORD *)(v88 + 372))
        *(_DWORD *)(v88 + 372) = v118;
    }
    v117 = 1;
  }
  *(_DWORD *)(v88 + 364) = v117;
  *(_DWORD *)(v88 + 360) = v28;
  *(_DWORD *)(v88 + 340) += v29;
  if (*(_DWORD *)(v88 + 348) > v29)
    *(_DWORD *)(v88 + 348) = v29;
  if (*(_DWORD *)(v88 + 356) < v29)
    *(_DWORD *)(v88 + 356) = v29;
  if (v129)
  {
    ++*(_DWORD *)(v88 + 376);
    ++*(_BYTE *)(v88 + 388);
    if (v91)
    {
LABEL_131:
      v119 = *(_DWORD *)(v88 + 16) + 1;
      goto LABEL_136;
    }
  }
  else
  {
    v120 = *(unsigned __int8 *)(v88 + 388);
    if (*(_DWORD *)(v88 + 380) < v120)
      *(_DWORD *)(v88 + 380) = v120;
    *(_BYTE *)(v88 + 388) = 0;
    if (v91)
      goto LABEL_131;
  }
  v119 = 0;
LABEL_136:
  *(_DWORD *)(v88 + 16) = v119;
  if (*(_DWORD *)v7)
    fflush((FILE *)*MEMORY[0x1E0C80C20]);
  v121 = *(_QWORD *)(v7 + 12);
  v122 = *(unsigned __int8 *)(v121 + 389);
  if (*(_DWORD *)(v121 + 384) < v122)
  {
    *(_DWORD *)(v121 + 384) = v122;
    v121 = *(_QWORD *)(v7 + 12);
  }
  *(_BYTE *)(v121 + 389) = 0;
  if (a3)
  {
LABEL_8:
    if (*(_BYTE *)v8)
    {
      v13 = *(unsigned int *)(a2 + 196);
      v14 = 99.0;
      if ((int)v13 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = *(unsigned __int8 **)(a2 + 128);
        v18 = *(unsigned __int8 **)(*(_QWORD *)(v8 + 14) + 128);
        v19 = *(_DWORD *)(a2 + 228);
        v20 = *(int *)(a2 + 232);
        do
        {
          if (v19 >= 1)
          {
            v21 = v17;
            v22 = v18;
            v23 = *(unsigned int *)(a2 + 228);
            do
            {
              v25 = *v21++;
              v24 = v25;
              v26 = *v22++;
              v16 += (v24 - v26) * (v24 - v26);
              --v23;
            }
            while (v23);
          }
          ++v15;
          v18 += v20;
          v17 += v20;
        }
        while (v15 != v13);
        if (v16 >= 1)
        {
          v27 = log10((double)((int)v13 * v19) * 65025.0 / (double)v16);
          v14 = sub_1B68F7888(v27 * 10.0);
        }
      }
      *(double *)(v5 + 176) = v14;
    }
  }
}

float sub_1B68D5CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float *v4;
  int v5;
  char v6;
  char v7;
  float result;
  _BOOL4 v9;
  _BYTE *v10;
  __int16 v11;
  unsigned int v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;

  v4 = (float *)(a1 + 205864);
  *(_DWORD *)(a3 + 92) = *(_DWORD *)(a4 + 40);
  *(_BYTE *)(a3 + 2) = *(_BYTE *)(a4 + 1393);
  *(_BYTE *)(a3 + 3) = *(_BYTE *)(a4 + 1392);
  *(_BYTE *)(a3 + 5) = *(_BYTE *)(a4 + 1394);
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(a4 + 1368);
  v5 = *(unsigned __int8 *)(a4 + 1368);
  if (v5 != 7 && v5 != 2)
    goto LABEL_5;
  v6 = *(_BYTE *)(a4 + 1394);
  if (!v6)
    goto LABEL_7;
  if (!*(_BYTE *)(a4 + 1392))
    v6 = *(_BYTE *)(a4 + 1403) == 0;
  else
LABEL_5:
    v6 = 0;
LABEL_7:
  *(_BYTE *)(a3 + 4) = v6;
  if (*(_BYTE *)(a4 + 1393))
  {
    v7 = 0;
  }
  else
  {
    v7 = *(_BYTE *)(a4 + 1394);
    if (v7)
      v7 = *(_BYTE *)(a1 + 208076) != 0;
  }
  *(_BYTE *)(a3 + 6) = v7;
  *(_BYTE *)a3 = *(_BYTE *)(a4 + 5000);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 1328);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 1332);
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(a4 + 1288);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 1276);
  result = *v4;
  *(float *)(a3 + 12) = *v4;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 136) + 577) == 1)
  {
    *(_BYTE *)(a3 + 7) = *(_BYTE *)(a4 + 1356);
    if (*(_BYTE *)(a4 + 24))
      v9 = 1;
    else
      v9 = *(_BYTE *)(a4 + 1393) != 0;
    *(_BYTE *)(a3 + 8) = v9;
    if (*(_DWORD *)(a4 + 4928) > 0x12CC7u || (v10 = *(_BYTE **)(a1 + 5392)) == 0 || *v10 == 3)
    {
      if (*(_BYTE *)(a4 + 1393) || (v18 = *(unsigned __int8 *)(a4 + 26), v18 == 3))
      {
        v11 = 768;
LABEL_20:
        *(_WORD *)(a3 + 9) = v11;
        *(_BYTE *)(a3 + 11) = 1;
LABEL_21:
        if (*(_BYTE *)(a1 + 1024))
          *(_BYTE *)(a3 + 96) = **(_BYTE **)(a1 + 5392) == 3;
        *(_DWORD *)(a3 + 100) = *(unsigned __int16 *)(a4 + 19112);
        *(_DWORD *)(a3 + 104) = *(unsigned __int16 *)(a4 + 19114);
        goto LABEL_24;
      }
      if (v18 == 2)
      {
        v11 = 512;
        goto LABEL_20;
      }
      if (v18 == 1 || v9)
      {
        v11 = 256;
        goto LABEL_20;
      }
    }
    *(_WORD *)(a3 + 9) = 255;
    *(_BYTE *)(a3 + 11) = 0;
    goto LABEL_21;
  }
LABEL_24:
  if (!*(_BYTE *)(a1 + 205936))
  {
    *(_DWORD *)(a3 + 32) = 8 * *(_DWORD *)(a2 + 8);
    *(_WORD *)(a3 + 16) = *(_WORD *)(a4 + 4728);
    v12 = *(_DWORD *)(a4 + 4808);
    if (v12)
    {
      v13 = 0;
      v14 = (unsigned __int8 *)(*(_QWORD *)(a4 + 4920) + 63);
      v15 = *(unsigned int *)(a4 + 4808);
      do
      {
        v16 = *v14;
        v14 += 216;
        if (v16)
          ++v13;
        --v15;
      }
      while (v15);
      v17 = 100 * v13;
    }
    else
    {
      v17 = 0;
    }
    *(_WORD *)(a3 + 88) = (v17 + (v12 >> 1)) / v12;
    v19 = *(_DWORD *)(a4 + 4808);
    if (v19)
    {
      v20 = 0;
      v21 = (unsigned __int8 *)(*(_QWORD *)(a4 + 4920) + 58);
      v22 = *(unsigned int *)(a4 + 4808);
      do
      {
        v23 = *v21;
        v21 += 216;
        if (v23)
          ++v20;
        --v22;
      }
      while (v22);
      v24 = 100 * v20;
    }
    else
    {
      v24 = 0;
    }
    *(_WORD *)(a3 + 90) = (v24 + (v19 >> 1)) / v19;
    result = *(float *)(a4 + 4940);
    *(float *)(a3 + 48) = result;
    *(_DWORD *)(a3 + 52) = *(_DWORD *)(a4 + 4928);
    *(_WORD *)(a3 + 18) = *(_WORD *)(a4 + 4832);
    *(_WORD *)(a3 + 20) = *(_WORD *)(a4 + 4838);
  }
  return result;
}

_QWORD *sub_1B68D5F80(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *result;

  if (*(_BYTE *)(a1 + 17))
  {
    while (1)
    {
      result = *(_QWORD **)(a2 + 24544);
      if (!result)
        break;
      *(_QWORD *)(a2 + 24544) = result[3];
      free(result);
    }
  }
  else
  {
    *(_WORD *)(a1 + 1398) = 257;
    result = (_QWORD *)sub_1B68B95D0(a2);
    if ((_DWORD)result)
      return (_QWORD *)CFLog();
  }
  if (a4 == 1)
    *(_BYTE *)(a3 + 7) = *(_BYTE *)(a1 + 1356);
  return result;
}

_BYTE *sub_1B68D6014(_BYTE *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  _BYTE *v25;

  v5 = *(_QWORD *)(a2 + 205968);
  if (v5)
  {
    if (a4 <= 7)
    {
      if (*(_DWORD *)(v5 + 100))
      {
        v6 = *(_DWORD *)(v5 + 60);
        v7 = *(_DWORD *)(v5 + 92);
        if (v7 > v6)
        {
          v8 = *(_DWORD *)(v5 + 4 * a4 + 136);
          if (v8)
          {
            v9 = a4;
            v10 = *(_QWORD *)(v5 + 80);
            v11 = *(unsigned __int8 *)(v5 + 96);
            v12 = *(_DWORD *)(v5 + 60);
            if (*(_BYTE *)(v5 + 96))
              v12 = v6 % v7;
            v13 = 0;
            v14 = *(_DWORD *)(v10 + 20 * v12 + 12);
            v15 = *(_DWORD *)(v5 + 60);
            do
            {
              v16 = v15;
              if (*(_BYTE *)(v5 + 96))
                v16 = v15 % v7;
              v17 = v10 + 20 * v16;
              v19 = *(_DWORD *)(v17 + 12);
              v18 = *(_DWORD *)(v17 + 16);
              v20 = v14 - v19;
              v13 += v18;
              v21 = v15-- != 0;
            }
            while (v21 && v8 > v20);
            v22 = v8 >= v20 ? 0 : v18;
            v23 = v22 - v13;
            if (v23)
            {
              v24 = *(_DWORD *)(v5 + 4 * v9 + 104);
              if (v11)
                v6 %= v7;
              if (v23 + v24 + *(_DWORD *)(v10 + 20 * v6 + 16) < (8 * *(_DWORD *)(a3 + 8)))
              {
                if (*(float *)(a2 + 205864) < 51.0)
                  goto LABEL_27;
                if (a5)
                {
                  v25 = (_BYTE *)(*(_QWORD *)(a2 + 205840) + 5001);
                  if (!*v25)
                  {
                    *v25 = 1;
LABEL_27:
                    *result = 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B68D6168(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  float *v7;
  uint64_t v8;
  float v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  float v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  double v27;
  float v28;
  double v29;
  double v30;
  float v31;
  float v32;
  float v33;
  float v34;
  long double v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  signed int v56;
  BOOL v57;
  unsigned __int8 v58;
  char v59;
  char v60;
  char v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  char v65;
  int v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  char *v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  char *v80;
  uint64_t v82;
  uint64_t result;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned __int8 v87;
  unsigned int v88;
  unsigned int v89;
  unsigned __int8 v90;
  unsigned int v91;
  unsigned __int8 v92;
  unsigned int v93;
  unsigned __int8 v94;
  unsigned int v95;
  unsigned __int8 v96;
  unsigned int v97;
  unsigned __int8 v98;
  unsigned int v99;
  double v100;
  float v101;

  v7 = (float *)(a2 + 19112);
  v8 = a1 + 205864;
  v9 = *(float *)(a1 + 205864);
  if (v9 <= (float)(int)*(double *)(*(_QWORD *)(a1 + 152) + 384))
    v10 = (int)*(double *)(*(_QWORD *)(a1 + 152) + 384);
  else
    v10 = (int)v9;
  *(_DWORD *)(a2 + 19132) = v10 < 37;
  if (*(_BYTE *)(a1 + 1623))
  {
    v11 = *(_DWORD *)(a2 + 1372) - (a3 + (*(_DWORD *)(a1 + 207884) >> 3));
    v12 = v11 & ~(v11 >> 31);
  }
  else
  {
    v12 = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 136) + 2698))
  {
    if (*(_BYTE *)(a1 + 205933))
    {
      v13 = *(_DWORD *)(*(_QWORD *)(a1 + 208120) + 3448);
    }
    else
    {
      v14 = *(unsigned int *)(a1 + 208060);
      if ((_DWORD)v14)
      {
        v13 = 0;
        v15 = (int *)(a1 + 207768);
        do
        {
          v16 = *v15++;
          v13 += v16;
          --v14;
        }
        while (v14);
      }
      else
      {
        v13 = 0;
      }
    }
    v17 = *(_DWORD *)(a2 + 228);
    v18 = *(_DWORD *)(a2 + 196);
    v19 = *(unsigned __int16 *)(a2 + 19114) * *(unsigned __int16 *)v7;
    v20 = *(float *)v8;
    v21 = exp2((float)((float)(*(float *)v8 + -4.0) / 6.0)) * (double)(3 * v13) / (double)v19;
    v22 = 2.0;
    if (v21 >= 2.0)
    {
      v22 = 5.0;
      if (v21 <= 5.0)
        v22 = v21;
    }
    if (*(_DWORD *)(a2 + 1276))
    {
      v23 = pow((double)v19, 0.3)
          * 0.00025
          * ((double)*(unint64_t *)(*(_QWORD *)(v8 + 2256) + 3432)
           / (double)*(unint64_t *)(*(_QWORD *)(v8 + 2256) + 3424))
          + 1.5;
      v24 = 5.0;
      if (v23 <= 5.0)
        v24 = v23;
      if (v23 >= 2.0)
        v25 = v24;
      else
        v25 = 2.0;
      v26 = *(double *)(*(_QWORD *)(v8 + 1896) + 248);
      v101 = v26;
    }
    else
    {
      v101 = *(float *)(a2 + 4940);
      v25 = 5.0;
    }
    v100 = pow((double)(v18 * v17 / 76800), 0.2);
    v27 = pow(v22, 0.4);
    v28 = v20 + -34.0;
    if ((float)(v20 + -34.0) <= 0.0)
      v28 = 0.0;
    v29 = v28;
    if ((float)(v20 + -32.0) / 36.0 + 1.0 >= 1.0)
      v30 = (float)(v20 + -32.0) / 36.0 + 1.0;
    else
      v30 = 1.0;
    v31 = (float)(v20 + -25.0) * -0.12;
    v32 = expf(v31);
    v33 = (1.0 - 1.0 / pow((float)((float)(v22 * v32) + 1.0), 1.5)) * 27.0;
    v34 = v33 + 10.0;
    v35 = pow(v30, 1.6) * 10.0;
    v36 = v35 * log10f((float)v19 / (float)(v18 * v17));
    v37 = v34 + v36;
    v38 = exp(v29 / (v27 * 1.5)) * -0.24;
    if (v38 <= 0.0)
      v39 = v38;
    else
      v39 = 0.0;
    if (v38 >= -10.0)
      v40 = v39;
    else
      v40 = -10.0;
    v41 = v37 + v40;
    v42 = v100;
    v43 = (float)(1.0 - expf(-v42)) * v41;
    if (v43 <= 31.0)
      v44 = v43;
    else
      v44 = 31.0;
    if (v43 >= 0.0)
      v45 = v44;
    else
      v45 = 0.0;
    v46 = v45 * (float)(1.0 - expf((float)(v101 / -60.0) * v25));
    v47 = v46 / (float)(1.0 - expf(-v25));
    if (v47 <= 31.0)
      v48 = v47;
    else
      v48 = 31.0;
    if (v47 >= 0.0)
      v49 = v48;
    else
      v49 = 0.0;
    v7[12] = v49;
  }
  v50 = *((unsigned __int16 *)v7 + 4);
  v51 = *((unsigned __int16 *)v7 + 5);
  if (!*(_BYTE *)(a1 + 180))
  {
    v52 = *(_QWORD *)(a1 + 5392);
    if (v52)
    {
      v53 = *(_QWORD *)(v52 + 784);
      if (*(__int16 *)(v53 + 4) == *(unsigned __int16 *)v7 && *(__int16 *)(v53 + 6) == *((unsigned __int16 *)v7 + 1))
      {
        v50 = *(_DWORD *)(a2 + 224);
        v51 = *(_DWORD *)(a2 + 192);
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 144) + 719) && *(double *)(a2 + 19400) > 0.0 && *(double *)(a2 + 19408) > 0.0)
    v54 = *(_BYTE *)(a1 + 5076);
  else
    v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = v10 < 37;
  v58 = *(_BYTE *)(a1 + 1618);
  v59 = *(_BYTE *)(a1 + 1620);
  v60 = *(_BYTE *)(a1 + 1621);
  v61 = *(_BYTE *)(a1 + 1627);
  v62 = *(_DWORD *)(a2 + 1376);
  v63 = *(_DWORD *)(a2 + 1380);
  v64 = *(_DWORD *)(a2 + 1384);
  if (v58)
    v65 = 0;
  else
    v65 = *(_BYTE *)(a1 + 1619);
  v66 = *(_DWORD *)(a2 + 1388);
  if (!(v63 | v62 | v64 | v66))
    v61 = 0;
  v67 = *(_BYTE *)(a1 + 1600);
  byte_1EF138011 = v54;
  byte_1EF137E09 = v65;
  byte_1EF137E8B = v58;
  byte_1EF137F0D = v59;
  byte_1EF137F8F = v61;
  byte_1EF138093 = v60;
  byte_1EF138115 = v67;
  v68 = (v62 & 0xF) + v64 + 15;
  v69 = (v63 & 0xF) + v66 + 15;
  v70 = v51 >> 3;
  v71 = v50 >> 3;
  v72 = v63 >> 4;
  v73 = v62 >> 4;
  v74 = v69 >> 4;
  v75 = v68 >> 4;
  do
  {
    v76 = &aRvra_0[130 * v55];
    v77 = v76[129];
    if (v76[129])
    {
      v78 = 0;
      v79 = 0;
      v80 = &byte_1EF137E09;
      do
      {
        if (v55 != v78 && *v80 && *v80 < v77)
          v79 += *(v80 - 1);
        ++v78;
        v80 += 130;
      }
      while (v78 != 7);
      if (v56 <= (int)v77)
        v56 = v77;
      switch((int)v55)
      {
        case 0:
        case 1:
          *(_BYTE *)(a4 + v79) = v71;
          *(_BYTE *)(a4 + v79 + 1) = v70;
          break;
        case 2:
          *(_BYTE *)(a4 + v79) = v57;
          break;
        case 3:
          *(_BYTE *)(a4 + v79) = v75;
          *(_BYTE *)(a4 + v79 + 1) = v74;
          *(_BYTE *)(a4 + v79 + 2) = v73;
          *(_BYTE *)(a4 + v79 + 3) = v72;
          break;
        case 4:
          *(_BYTE *)(a4 + v79) = (int)(*(double *)(a2 + 19384) * 255.0 + 0.5);
          *(_BYTE *)(a4 + v79 + 1) = (int)(*(double *)(a2 + 19392) * 255.0 + 0.5);
          *(_BYTE *)(a4 + v79 + 2) = (int)(*(double *)(a2 + 19400) * 255.0 + 0.5);
          *(_BYTE *)(a4 + v79 + 3) = (int)(*(double *)(a2 + 19408) * 255.0 + 0.5);
          break;
        case 5:
          *(_BYTE *)(a4 + v79) = 0;
          break;
        case 6:
          *(_QWORD *)(a1 + 1608) = a4 + v79;
          break;
        default:
          break;
      }
    }
    ++v55;
  }
  while (v55 != 7);
  v82 = 0;
  result = 0;
  do
  {
    if (aRvra_0[v82 + 129])
      result = result + aRvra_0[v82 + 128];
    v82 += 130;
  }
  while (v82 != 910);
  v84 = (v56 - 1) / 7
      + ((v12 + ~((v56 - 1) / 7) - (_DWORD)result) & ~((v12 + ~((v56 - 1) / 7) - (int)result) >> 31))
      + 1;
  if ((int)v84 >= 1)
  {
    v85 = result;
    v86 = v84;
    do
    {
      *(_BYTE *)(a4 + v85++) = 0x80;
      --v86;
    }
    while (v86);
    *(_BYTE *)(a4 + result) = 0;
    if (v65)
    {
      v87 = v65 - 1;
      v88 = (((v87 - ((unsigned __int16)(37 * v87) >> 8)) >> 1) + ((37 * v87) >> 8)) >> 2;
      *(_BYTE *)(a4 + (_DWORD)result + (_DWORD)v84 + ~v88) |= 1 << (-7 * v88 + v87);
    }
    if (v58)
    {
      v89 = result + v84 + ~((v58 - 1) / 7);
      *(_BYTE *)(a4 + v89) |= 1 << ((v58 - 1) % 7);
    }
    if (v59)
    {
      v90 = v59 - 1;
      v91 = (((v90 - ((unsigned __int16)(37 * v90) >> 8)) >> 1) + ((37 * v90) >> 8)) >> 2;
      *(_BYTE *)(a4 + (_DWORD)result + (_DWORD)v84 + ~v91) |= 1 << (-7 * v91 + v90);
    }
    if (v61)
    {
      v92 = v61 - 1;
      v93 = (((v92 - ((unsigned __int16)(37 * v92) >> 8)) >> 1) + ((37 * v92) >> 8)) >> 2;
      *(_BYTE *)(a4 + (_DWORD)result + (_DWORD)v84 + ~v93) |= 1 << (-7 * v93 + v92);
    }
    if (v54)
    {
      v94 = v54 - 1;
      v95 = (((v94 - ((unsigned __int16)(37 * v94) >> 8)) >> 1) + ((37 * v94) >> 8)) >> 2;
      *(_BYTE *)(a4 + (_DWORD)result + (_DWORD)v84 + ~v95) |= 1 << (-7 * v95 + v94);
    }
    if (v60)
    {
      v96 = v60 - 1;
      v97 = (((v96 - ((unsigned __int16)(37 * v96) >> 8)) >> 1) + ((37 * v96) >> 8)) >> 2;
      *(_BYTE *)(a4 + (_DWORD)result + (_DWORD)v84 + ~v97) |= 1 << (-7 * v97 + v96);
    }
    if (v67)
    {
      v98 = v67 - 1;
      v99 = (((v98 - ((unsigned __int16)(37 * v98) >> 8)) >> 1) + ((37 * v98) >> 8)) >> 2;
      *(_BYTE *)(a4 + (_DWORD)result + (_DWORD)v84 + ~v99) |= 1 << (-7 * v99 + v98);
    }
    result = (v84 + result);
  }
  if (a2)
    *(_DWORD *)(a2 + 40) = result;
  return result;
}

uint64_t sub_1B68D6A54(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _BOOL4 v12;

  v2 = a1 + 205840;
  v3 = (_BYTE *)(a1 + 5424);
  v4 = *(_QWORD *)(a1 + 208120);
  v5 = *(_QWORD *)(a1 + 205840);
  if (v5)
  {
    v6 = sub_1B68B1630(*(_QWORD *)(a1 + 136), v4, v5, *(unsigned __int8 *)(a1 + 1057) == 2);
    if ((_DWORD)v6)
    {
      v7 = v6;
LABEL_10:
      CFLog();
      return v7;
    }
    if (v3[1] && *(_QWORD *)(v4 + 3408))
      sub_1B68B28D0(v4, v5);
  }
  if (*(_BYTE *)(v4 + 33))
  {
    v8 = sub_1B68B10D0(v4);
    if ((_DWORD)v8)
    {
      v7 = v8;
      goto LABEL_10;
    }
  }
  else if (*(_DWORD *)(*(_QWORD *)(a1 + 128) + 4))
  {
    **(_DWORD **)(v4 + 120) = 0;
    **(_DWORD **)(v4 + 136) = 0;
  }
  if (v5 && *(_DWORD *)(*(_QWORD *)(a1 + 128) + 8))
  {
    *(_DWORD *)(v5 + 1276) = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(v5 + 360) = *(_DWORD *)(a1 + 176);
  }
  if (*v3 && *(_QWORD *)(a1 + 5392) && v3[1])
  {
    v9 = *(int32x2_t **)(a1 + 136);
    v10 = *(_QWORD **)(a1 + 5416);
    v11 = 22;
    if (!v9[607].i8[0])
      v11 = 19;
    v12 = v10[v11] != 0;
    sub_1B68B87B8(v9, v10, **(_DWORD **)(a1 + 128) != 0, *(_DWORD *)(*(_QWORD *)(a1 + 128) + 8) != 0);
    sub_1B68B89B8(*(_QWORD *)(a1 + 5392), *(_QWORD *)(a1 + 5416), *(unsigned __int8 *)(v2 + 93), *(unsigned int *)(a1 + 57096), *(unsigned int *)(a1 + 57100), v12);
  }
  return 0;
}

uint64_t sub_1B68D6BD8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  __int16 v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  unsigned __int16 *v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  float v52;
  unint64_t v53;
  unsigned int v54;
  int v55;
  signed int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  int v61;
  float v62;
  float v63;
  uint64_t v64;
  _WORD *v65;
  float v66;
  unsigned int v67;
  float v68;
  uint64_t v69;
  float v70;
  int v71;
  int v73;
  int v74;
  float v75;
  double v76;
  int v77;
  int v78;
  unsigned int v79;
  _WORD *v80;
  __int16 v81;
  __int16 v82;
  int v83;
  unint64_t v84;
  BOOL v86;
  char v87;
  __int16 v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int i;
  uint64_t v94;
  unint64_t j;
  int v96;
  int v97;
  __int16 v98;
  __int16 v99;
  __int16 v100;
  unint64_t v101;
  _WORD *v102;
  int v103;
  char v104;
  unsigned int v105;
  unsigned int v106;
  BOOL v109;
  uint64_t v110;
  char v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unint64_t v116;
  _WORD *v117;
  unsigned int v118;
  unsigned int v119;
  _BOOL8 v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  __CFDictionary *Mutable;
  CFNumberRef v129;
  const void **v130;
  CFNumberRef v131;
  int v132;
  unint64_t v133;
  CFNumberRef v134;
  uint64_t v135;
  __CFArray *v136;
  uint64_t *v137;
  const CFDictionaryKeyCallBacks *v138;
  const CFDictionaryValueCallBacks *v139;
  uint64_t *v140;
  uint64_t v141;
  __CFDictionary *v142;
  CFNumberRef v143;
  CFNumberRef v144;
  __CFDictionary *v145;
  __CFDictionary *v146;
  CFNumberRef v147;
  CFNumberRef v148;
  CFNumberRef v149;
  CFNumberRef v150;
  const CFArrayCallBacks *v151;
  __CFArray *v152;
  __CFArray *v153;
  __CFArray *v154;
  uint64_t k;
  uint64_t v156;
  uint64_t v157;
  __int16 *v158;
  CFNumberRef v159;
  CFNumberRef v160;
  CFNumberRef v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  __int16 *v167;
  CFNumberRef v168;
  CFNumberRef v169;
  CFNumberRef v170;
  char v171;
  char v172;
  int v173;
  CFNumberRef v174;
  CFNumberRef v175;
  CFNumberRef v176;
  const UInt8 *v177;
  CFDataRef v178;
  uint64_t v179;
  int v180;
  int v181;
  CFNumberRef v184;
  CFNumberRef v185;
  const CFDictionaryKeyCallBacks *v186;
  const CFDictionaryValueCallBacks *v187;
  __CFDictionary *v188;
  int *v189;
  uint64_t v190;
  const void *v191;
  const void *v192;
  const void *v193;
  __CFDictionary *v194;
  CFNumberRef v195;
  CFNumberRef v196;
  __CFDictionary *v197;
  __CFDictionary *v198;
  CFMutableDictionaryRef v199;
  CFMutableDictionaryRef v200;
  CFMutableDictionaryRef v201;
  __CFDictionary *v202;
  __CFDictionary *v203;
  const CFDictionaryKeyCallBacks *v204;
  __CFDictionary *v205;
  __CFDictionary *v206;
  int v207;
  const __CFDictionary *v208;
  int v209;
  int v210;
  OpaqueVTCompressionSession *v211;
  __CVBuffer *v212;
  uint64_t v213;
  const __CFAllocator *v214;
  __CVPixelBufferPool *PixelBufferPool;
  uint64_t v216;
  uint64_t v217;
  OpaqueVTCompressionSession *v218;
  OpaqueVTCompressionSession *v219;
  uint64_t v220;
  uint64_t v221;
  const void *v222;
  __CFDictionary *v224;
  uint64_t v225;
  __CFDictionary *theDict;
  uint64_t v227;
  void *key;
  void *v229;
  void *v230;
  void *v231;
  const void *v232;
  __CFDictionary *v233;
  const void *v234;
  void *v235;
  const void *v236;
  void *v237;
  void *v238;
  int v239;
  const void *v240;
  int v241;
  int *v242;
  const void *v243;
  int v244;
  const void *v245;
  unsigned __int16 *v246;
  const void *v247;
  unsigned int v248;
  __CFDictionary *v249;
  CFMutableDictionaryRef v250;
  unsigned int theArray;
  __CFArray *theArraya;
  uint64_t v253;
  int v254;
  __int16 v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  char v261;
  char v262;
  CMTime completeUntilPresentationTimeStamp;
  CMTime duration;
  CMTime presentationTimeStamp;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  __int128 __pattern4;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  CMTime valuePtr;
  uint64_t v279;

  v7 = a1;
  v279 = *MEMORY[0x1E0C80C00];
  v8 = a1 + 205808;
  v9 = *(_QWORD *)(a1 + 205840);
  v10 = *(_QWORD *)(a1 + 208120);
  *(_BYTE *)(v10 + 3463) = *(_BYTE *)(a1 + 208132);
  if (v9)
  {
    v12 = (unsigned __int16 *)(v9 + 19112);
    v241 = *(_DWORD *)(v9 + 56);
    v244 = *(unsigned __int8 *)(v9 + 12);
    v248 = *(_DWORD *)(v9 + 19424);
    v13 = *(unsigned int *)(v9 + 19420);
    v14 = *(_QWORD *)(v9 + 19432);
    v15 = *(_QWORD *)(v9 + 19440);
    v268 = -1;
    v269 = -1;
    v267 = 0;
    if (v14)
      v16 = (_DWORD)v13 == 0;
    else
      v16 = 1;
    if (v16)
    {
LABEL_9:
      if (!v15)
        goto LABEL_18;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      while (*(_DWORD *)(v14 + 1276) != *(_DWORD *)(v9 + (v17 >> 54) + 18468))
      {
        ++v18;
        v17 += 0x100000000000000;
        if (v13 == v18)
          goto LABEL_9;
      }
      LODWORD(v267) = v18;
      if (!v15)
      {
LABEL_18:
        v21 = (_BYTE *)(a1 + 5424);
        v227 = v9;
        v246 = (unsigned __int16 *)(v9 + 19112);
        if (v14)
        {
          LODWORD(v269) = *(_DWORD *)(v14 + 60);
          if (*(unsigned __int16 *)(v14 + 19120) == *v12
            && *(unsigned __int16 *)(v14 + 19122) == *(unsigned __int16 *)(v9 + 19114))
          {
            LODWORD(v268) = 0;
            goto LABEL_40;
          }
        }
        else
        {
          v276 = 0u;
          v277 = 0u;
          v274 = 0u;
          v275 = 0u;
          v272 = 0u;
          v273 = 0u;
          __pattern4 = 0u;
          v271 = 0u;
          v22 = sub_1B68B436C(*(_QWORD *)v8, &__pattern4, 0, (_BYTE *)v9);
          v9 = v227;
          if (!v22)
            goto LABEL_35;
          v23 = 0;
          v24 = 0;
          v25 = 0;
          v26 = 0;
          do
          {
            v27 = *((_QWORD *)&__pattern4 + v23);
            if (v24 && v25 >= *(_DWORD *)(v27 + 1276))
            {
              v24 = 1;
            }
            else if (v27 != v227)
            {
              v25 = *(_DWORD *)(v27 + 1276);
              v24 = 1;
              v26 = v23;
            }
            ++v23;
          }
          while (v22 != v23);
          if (!v24)
          {
LABEL_35:
            v29 = *(unsigned __int8 *)(v227 + 1368);
            if (v29 == 7 || v29 == 2)
            {
              v14 = 0;
              v28 = 0;
              LODWORD(v269) = 0;
              v12 = v246;
            }
            else
            {
              v14 = 0;
              v28 = 0;
              v12 = v246;
              *((_BYTE *)v246 + 304) = 1;
              LODWORD(v269) = 0;
            }
            goto LABEL_39;
          }
          v14 = *((_QWORD *)&__pattern4 + v26);
          LODWORD(v269) = *(_DWORD *)(v14 + 60);
          v12 = v246;
          if (*(unsigned __int16 *)(v14 + 19120) == *v246 && *(unsigned __int16 *)(v14 + 19122) == v246[1])
          {
            v28 = 0;
LABEL_39:
            LODWORD(v268) = v28;
LABEL_40:
            HIDWORD(v269) = -1;
            HIDWORD(v268) = -1;
            if (*(_BYTE *)(v8 + 128))
            {
              if (*(_BYTE *)(v10 + 3392) && (a3 & 1) == 0)
              {
                LOBYTE(__pattern4) = 0;
                v30 = v13;
                v31 = v9;
                v32 = sub_1B68B1504(v10, v9, v14, v15, &v268, v30, *(_BYTE *)(v7 + 180), &__pattern4);
                if ((_DWORD)v32)
                {
                  v33 = v32;
LABEL_320:
                  CFLog();
                  return v33;
                }
                v9 = v31;
                v12 = v246;
              }
              if (*(_BYTE *)(v10 + 32))
              {
                v35 = v9;
                v36 = sub_1B68B1630(*(_QWORD *)(v7 + 136), v10, v9, *(unsigned __int8 *)(v7 + 1057) == 2);
                if ((_DWORD)v36)
                {
                  v33 = v36;
                  goto LABEL_320;
                }
                v12 = v246;
                if (v21[1] && *(_QWORD *)(v10 + 3408))
                  sub_1B68B28D0(v10, v35);
              }
              v37 = *(_QWORD *)(v10 + 56);
              if (v37)
                sub_1B68BEFF8(v37);
            }
            else
            {
              if (!*(_BYTE *)(v10 + 32))
              {
                CFLog();
                return 4294967246;
              }
              LOBYTE(__pattern4) = 0;
              if ((a3 & 1) == 0)
              {
                v34 = sub_1B68B1504(v10, v9, v14, v15, &v268, v13, *(_BYTE *)(v7 + 180), &__pattern4);
                if ((_DWORD)v34)
                {
                  v33 = v34;
                  goto LABEL_320;
                }
              }
              v12 = v246;
            }
            if (*((_BYTE *)v12 + 305))
              v38 = 1;
            else
              v38 = *((_BYTE *)v12 + 304) != 0;
            v39 = 0;
            v40 = *(_QWORD *)(v8 + 32);
            v41 = *(unsigned __int8 *)(v40 + 1368);
            v42 = 1;
            if (v41 == 2)
            {
              v254 = 0;
            }
            else
            {
              v254 = 0;
              if (v41 != 7)
              {
                if (v38)
                {
                  v42 = 0;
                  v39 = 1;
                  v254 = 1;
                }
                else if (*(_BYTE *)(v7 + 1057))
                {
                  if (*(_BYTE *)(v7 + 1057) == 1)
                  {
                    v39 = 0;
                    v254 = 0;
                  }
                  else
                  {
                    v254 = 0;
                    if ((_DWORD)v268)
                      v39 = 1;
                    else
                      v39 = 2;
                    LODWORD(v268) = 0;
                  }
                }
                else
                {
                  v254 = 0;
                  v39 = 2 * (*(_DWORD *)(*(_QWORD *)(v7 + 136) + 4852) == 1);
                }
              }
            }
            v43 = *(unsigned __int8 *)(v7 + 1057);
            v44 = v43 == 2;
            if (v43 == 2)
              v45 = (unsigned __int16 *)(v40 + 19124);
            else
              v45 = (unsigned __int16 *)(v40 + 19112);
            v46 = 14;
            if (!v44)
              v46 = 2;
            v255 = v39;
            if (*(_DWORD *)(v40 + 1384))
              v47 = *(_DWORD *)(v40 + 1388) == 0;
            else
              v47 = 1;
            v48 = *v45;
            v49 = *(unsigned int *)(v7 + 57096);
            v50 = *(_DWORD *)(v7 + 57100);
            v51 = v42 ^ 1;
            if (v39)
              v51 = 1;
            v258 = v7;
            v259 = v8;
            v253 = v10;
            v225 = a2;
            if ((v51 & 1) != 0 || !v47)
              goto LABEL_84;
            if (*(_DWORD *)(v8 + 96))
            {
              if (!*v21 || (v52 = *(float *)(v8 + 56), v52 <= 30.0) || *(_WORD *)(v7 + 5426) == 1)
              {
LABEL_84:
                v53 = (unint64_t)(v48 + 15) >> 4;
                v54 = (*(unsigned __int16 *)(v40 + 19112 + v46) + 15) >> 4;
                theArray = *(_DWORD *)(v7 + 57100);
                if (*(_BYTE *)(v8 + 128))
                {
                  if (*(_DWORD *)(*(_QWORD *)(v7 + 136) + 4852) == 1)
                  {
                    sub_1B68B26E4(v40, (int *)&__pattern4, (uint64_t)&valuePtr);
                    v55 = (valuePtr.timescale + 15) >> 4;
                    v56 = (signed int)(valuePtr.flags + 15) >> 4;
                    v57 = (unsigned __int16)(LODWORD(valuePtr.value) >> 4);
                    v58 = (unsigned __int16)(HIDWORD(valuePtr.value) >> 4);
                  }
                  else
                  {
                    v57 = 0;
                    v58 = 0;
                    LOWORD(v55) = v53 - 1;
                    LOWORD(v56) = v54 - 1;
                  }
                  if (*v21)
                    v62 = -2.0;
                  else
                    v62 = -5.0;
                  if (*v21)
                    v63 = 2.0;
                  else
                    v63 = 5.0;
                  v64 = *(_QWORD *)(v8 + 2312);
                  v65 = *(_WORD **)(v64 + 3408);
                  v66 = 0.0;
                  if (v65)
                  {
                    v67 = (unsigned __int16)*v65;
                    v68 = 0.0;
                    if (*v65)
                    {
                      v66 = (float)v67;
                      v68 = 4.0 / (float)v67;
                    }
                  }
                  else
                  {
                    v68 = 0.0;
                  }
                  v70 = *(float *)(v8 + 56);
                  v16 = v65 == 0;
                  v71 = *(_DWORD *)(v64 + 3416);
                  v73 = v16 || *(_DWORD *)(v8 + 96) == 0;
                  v74 = v73 ^ 1;
                  if (*v21 && (v73 & 1) == 0)
                    v74 = v70 <= 30.0 || *(unsigned __int16 *)(v7 + 5426) == 1;
                  v75 = v70 + v62;
                  *(float *)&v76 = v70 + v63;
                  if (*(_BYTE *)(v64 + 3544))
                  {
                    LODWORD(__pattern4) = v42 ^ 1;
                    LODWORD(valuePtr.value) = 0;
                    if (v255 == 2)
                    {
                      v77 = 0;
                      v78 = 1;
                    }
                    else
                    {
                      v77 = 0;
                      v78 = 0;
                      if (v255 == 1)
                      {
                        v78 = 0;
                        v77 = 1;
                      }
                    }
                    DWORD1(__pattern4) = v77;
                    HIDWORD(valuePtr.value) = v78;
                    if (*(_DWORD *)(v64 + 3548))
                    {
                      v101 = 0;
                      v102 = *(_WORD **)(v64 + 176);
                      v103 = (int)*(float *)&v76;
                      v104 = v74 ^ 1;
                      do
                      {
                        v105 = *(__int16 *)(*(_QWORD *)(v64 + 3552) + 2 * v101);
                        if (v50 > v105)
                        {
                          v106 = *(__int16 *)(*(_QWORD *)(v64 + 3560) + 2 * v101);
                          if (v49 > v106)
                          {
                            v109 = v58 <= v105
                                && (unsigned __int16)v56 >= v105
                                && v57 <= v106
                                && (unsigned __int16)v55 >= v106;
                            v110 = !v109;
                            if (v109)
                              v111 = v104;
                            else
                              v111 = 1;
                            if ((_DWORD)v110)
                              LOBYTE(v112) = 51;
                            else
                              LOBYTE(v112) = (int)(v70 + 0.5);
                            if ((v111 & 1) == 0)
                            {
                              v110 = 0;
                              LOWORD(v76) = *(_WORD *)(*(_QWORD *)(v64 + 3408) + 2 * (v106 + v71 * v105 + 8));
                              v76 = (float)(v70 + (float)(v68 * (float)((float)LODWORD(v76) - v66))) + 0.5;
                              v113 = (int)v76;
                              if ((int)v76 <= (int)v75)
                                v113 = (int)v75;
                              v112 = ((v103 - v113) & ((v103 - v113) >> 31)) + v113;
                            }
                            v114 = (char)v112 & ~((char)v112 >> 31);
                            v115 = *v102 & 0x3FF | ((((51 - v114) & ((51 - v114) >> 31)) + v114) << 10);
                            *v102 = v115;
                            LOWORD(v115) = v115 & 0xFFFE | *(_WORD *)((unint64_t)&__pattern4 | (4 * v110)) & 1;
                            *v102 = v115;
                            *v102 = v115 & 0xFFFD | (2
                                                   * (*(_WORD *)((unint64_t)&valuePtr & 0xFFFFFFFFFFFFFFFBLL | (4 * (v110 & 1))) & 1));
                            v102 += 8;
                            v64 = *(_QWORD *)(v8 + 2312);
                          }
                        }
                        ++v101;
                      }
                      while (v101 < *(unsigned int *)(v64 + 3548));
                    }
                  }
                  else if (v50)
                  {
                    v79 = 0;
                    v80 = *(_WORD **)(v64 + 176);
                    if (v255 == 1)
                      v81 = -13312;
                    else
                      v81 = -12880;
                    if (v255 == 2)
                      v82 = -12304;
                    else
                      v82 = v81;
                    v83 = 8;
                    do
                    {
                      if ((_DWORD)v49)
                      {
                        v84 = 0;
                        v86 = v79 < v58 || v79 > (unsigned __int16)v56;
                        do
                        {
                          v87 = v84 < v57 || v86;
                          v88 = v82;
                          if (v84 <= (unsigned __int16)v55)
                          {
                            v88 = v82;
                            if ((v87 & 1) == 0)
                            {
                              v89 = (int)v70;
                              if (v74)
                              {
                                LOWORD(v62) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 2312) + 3408)
                                                       + 2 * (v83 + v84));
                                v62 = v70 + (float)(int)(float)(v68 * (float)((float)LODWORD(v62) - v66));
                                v90 = (int)v62;
                                if ((int)v62 <= (int)v75)
                                  v90 = (int)v75;
                                v89 = (((int)*(float *)&v76 - v90) & (((int)*(float *)&v76 - v90) >> 31)) + v90;
                              }
                              v91 = (char)v89 & ~((char)v89 >> 31);
                              if (v42)
                                v88 = (((_WORD)v91
                                      + ((unsigned __int16)(51 - v91) & (unsigned __int16)((51 - v91) >> 31))) << 10) | 0x1B0;
                              else
                                v88 = ((_WORD)v91 + ((unsigned __int16)(51 - v91) & (unsigned __int16)((51 - v91) >> 31))) << 10;
                            }
                          }
                          *v80++ = v88;
                          ++v84;
                        }
                        while (v49 != v84);
                      }
                      ++v79;
                      v83 += v71;
                    }
                    while (v79 != v50);
                  }
                }
                else
                {
                  v59 = *(_QWORD *)(v8 + 2312);
                  if (*(_BYTE *)(v59 + 3544))
                  {
                    valuePtr.value = 0;
                    LODWORD(__pattern4) = v254;
                    if (v39 == 2)
                    {
                      v61 = 0;
                      v60 = 1;
                    }
                    else if (v39 == 1)
                    {
                      v60 = 0;
                      v61 = 1;
                    }
                    else
                    {
                      v61 = 0;
                      v60 = 0;
                    }
                    DWORD1(__pattern4) = v61;
                    HIDWORD(valuePtr.value) = v60;
                    if (*(_DWORD *)(v59 + 3548))
                    {
                      v116 = 0;
                      v117 = *(_WORD **)(v59 + 176);
                      do
                      {
                        v118 = *(unsigned __int16 *)(*(_QWORD *)(v59 + 3552) + 2 * v116);
                        if (v50 > v118)
                        {
                          v119 = *(unsigned __int16 *)(*(_QWORD *)(v59 + 3560) + 2 * v116);
                          if (v49 > v119)
                          {
                            v121 = v54 <= v118 || v53 <= v119;
                            v122 = v119 + v49 * v118;
                            if (*(_BYTE *)(*(_QWORD *)(v258 + 136) + 4813) == 2)
                              v123 = sub_1B68CD66C(v258, v122);
                            else
                              v123 = 0;
                            v124 = *v117 & 0x3FF | ((int)(sub_1B68CD554(v258, v122, v123, *(float *)(v259 + 56)) + 0.5) << 10);
                            *v117 = v124;
                            LOWORD(v124) = v124 & 0xFFFE | *(_WORD *)((unint64_t)&__pattern4 | (4 * v121)) & 1;
                            *v117 = v124;
                            *v117 = v124 & 0xFFFD | (2
                                                   * (*(_WORD *)((unint64_t)&valuePtr & 0xFFFFFFFFFFFFFFFBLL | (4 * v121)) & 1));
                            v117 += 8;
                            v59 = *(_QWORD *)(v259 + 2312);
                            v50 = theArray;
                          }
                        }
                        ++v116;
                      }
                      while (v116 < *(unsigned int *)(v59 + 3548));
                    }
                    v8 = v259;
                  }
                  else if (v50)
                  {
                    v92 = 0;
                    for (i = 0; i != v50; ++i)
                    {
                      v94 = v8;
                      if ((_DWORD)v49)
                      {
                        for (j = 0; j != v49; ++j)
                        {
                          v96 = sub_1B68CD66C(v258, v92 + (int)j);
                          v97 = (int)(sub_1B68CD554(v258, v92 + j, v96, *(float *)(v94 + 56)) + 0.5);
                          if (j >= v53 || i >= v54)
                          {
                            v99 = ((_WORD)v97 << 10) | 0x3F0;
                            v100 = (_WORD)v97 << 10;
                            v98 = ((_WORD)v97 << 10) | 0x1B0;
                            if (v255 == 1)
                              v98 = v100;
                            if (v255 == 2)
                              v98 = v99;
                          }
                          else if (v254)
                          {
                            v98 = (_WORD)v97 << 10;
                          }
                          else
                          {
                            v98 = ((_WORD)v97 << 10) | 0x1B0;
                          }
                          v94 = v259;
                          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v259 + 2312) + 176) + 2 * (v92 + (int)j)) = v98;
                        }
                      }
                      v92 += v49;
                      v8 = v94;
                    }
                  }
                }
LABEL_218:
                v125 = v241;
                if (!v244)
                  v125 = -1;
                if (*(_BYTE *)(v8 + 125) && *(_BYTE *)(v253 + 3462))
                  *(_DWORD *)(v253 + 2976) = 1;
                *(_BYTE *)(v253 + 3460) = *(_BYTE *)(v8 + 123);
                *(_BYTE *)(v253 + 3461) = *(_BYTE *)(v8 + 124);
                v126 = *(unsigned __int8 *)(v227 + 24);
                v239 = *(unsigned __int8 *)(v258 + 180);
                v242 = *(int **)(v258 + 144);
                v127 = *(_DWORD *)(*(_QWORD *)(v258 + 136) + 4952);
                LODWORD(valuePtr.value) = v125;
                Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                *(_QWORD *)(v253 + 24) = Mutable;
                if ((v127 & 0x80000000) == 0)
                {
                  LODWORD(__pattern4) = v127;
                  v129 = CFNumberCreate(0, kCFNumberSInt32Type, &__pattern4);
                  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED600], v129);
                  CFRelease(v129);
                }
                v130 = (const void **)MEMORY[0x1E0C9AE50];
                if (v244)
                  CFDictionarySetValue(Mutable, CFSTR("MarkCurrentFrameAsLTR"), (const void *)*MEMORY[0x1E0C9AE50]);
                if (v126)
                  CFDictionarySetValue(Mutable, CFSTR("ForceRefresh"), *v130);
                if (LODWORD(valuePtr.value) != -1)
                {
                  v131 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                  CFDictionarySetValue(Mutable, CFSTR("FrameNumForLTRToReplace"), v131);
                  CFRelease(v131);
                }
                if (*(_BYTE *)(v227 + 1393))
                {
                  v132 = 3;
                }
                else
                {
                  v133 = *(unsigned __int8 *)(v227 + 1368);
                  if (v133 > 7)
                    v132 = 2;
                  else
                    v132 = dword_1B692E090[v133];
                }
                LODWORD(presentationTimeStamp.value) = v132;
                v134 = CFNumberCreate(0, kCFNumberSInt32Type, &presentationTimeStamp);
                theDict = Mutable;
                CFDictionarySetValue(Mutable, CFSTR("UserFrameType"), v134);
                CFRelease(v134);
                if (v248 >= 2)
                  v135 = 2;
                else
                  v135 = v248;
                v136 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                v256 = v135;
                if ((_DWORD)v135)
                {
                  v137 = &v268;
                  v138 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
                  v139 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
                  v140 = &v269;
                  v141 = v256;
                  do
                  {
                    v142 = CFDictionaryCreateMutable(0, 0, v138, v139);
                    if (*(_DWORD *)v140 != -1)
                    {
                      v143 = CFNumberCreate(0, kCFNumberSInt32Type, v140);
                      CFDictionarySetValue(v142, CFSTR("ReferenceFrameNumDriver"), v143);
                      CFRelease(v143);
                    }
                    if (*(_DWORD *)v137 != -1)
                    {
                      v144 = CFNumberCreate(0, kCFNumberSInt32Type, v137);
                      CFDictionarySetValue(v142, CFSTR("ReferenceRVRAIndex"), v144);
                      CFRelease(v144);
                    }
                    CFArrayAppendValue(v136, v142);
                    CFRelease(v142);
                    v137 = (uint64_t *)((char *)v137 + 4);
                    v140 = (uint64_t *)((char *)v140 + 4);
                    --v141;
                  }
                  while (v141);
                }
                v145 = Mutable;
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CED618], v136);
                CFRelease(v136);
                v10 = v253;
                if (*(_BYTE *)(v253 + 3460) || *(_BYTE *)(v253 + 3461))
                {
                  v146 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  v262 = *(_BYTE *)(v253 + 3460);
                  v147 = CFNumberCreate(0, kCFNumberCharType, &v262);
                  CFDictionarySetValue(v146, CFSTR("WeightData_WeightedPredFlag"), v147);
                  CFRelease(v147);
                  v261 = *(_BYTE *)(v253 + 3461);
                  v148 = CFNumberCreate(0, kCFNumberCharType, &v261);
                  CFDictionarySetValue(v146, CFSTR("WeightData_WeightedBipredIdc"), v148);
                  CFRelease(v148);
                  LODWORD(__pattern4) = *(unsigned __int8 *)(v227 + 5024);
                  v149 = CFNumberCreate(0, kCFNumberSInt32Type, &__pattern4);
                  CFDictionarySetValue(v146, CFSTR("WeightData_LumaLog2WeightDenom"), v149);
                  CFRelease(v149);
                  LODWORD(duration.value) = *(unsigned __int8 *)(v227 + 5025);
                  v150 = CFNumberCreate(0, kCFNumberSInt32Type, &duration);
                  CFDictionarySetValue(v146, CFSTR("WeightData_ChromaLog2WeightDenom"), v150);
                  CFRelease(v150);
                  v151 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
                  v152 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                  v153 = CFArrayCreateMutable(0, 0, v151);
                  v154 = CFArrayCreateMutable(0, 0, v151);
                  v260 = 0;
                  LODWORD(completeUntilPresentationTimeStamp.value) = 0;
                  LODWORD(pixelBufferOut) = 0;
                  v249 = v146;
                  if (*(_BYTE *)(v253 + 3460) && LODWORD(presentationTimeStamp.value) == 1)
                  {
                    if ((_DWORD)v256)
                    {
                      for (k = 0; k != v256; ++k)
                      {
                        v156 = 0;
                        v157 = v227 + 5026 + 3 * *((char *)&v267 + 4 * k);
                        v158 = (__int16 *)(v227 + 5410 + 6 * *((char *)&v267 + 4 * k));
                        do
                        {
                          v260 = *(_BYTE *)(v157 + v156);
                          LODWORD(completeUntilPresentationTimeStamp.value) = *v158;
                          LODWORD(pixelBufferOut) = v158[192];
                          v159 = CFNumberCreate(0, kCFNumberCharType, &v260);
                          v160 = CFNumberCreate(0, kCFNumberSInt32Type, &completeUntilPresentationTimeStamp);
                          v161 = CFNumberCreate(0, kCFNumberSInt32Type, &pixelBufferOut);
                          CFArrayAppendValue(v152, v159);
                          CFArrayAppendValue(v153, v160);
                          CFArrayAppendValue(v154, v161);
                          CFRelease(v159);
                          CFRelease(v160);
                          CFRelease(v161);
                          ++v156;
                          ++v158;
                        }
                        while (v156 != 3);
                      }
                    }
                  }
                  else if (*(_BYTE *)(v253 + 3461) && LODWORD(presentationTimeStamp.value) == 2)
                  {
                    v162 = 0;
                    v163 = 1;
                    do
                    {
                      v164 = 0;
                      v165 = v163;
                      v166 = v227 + 5026 + 3 * *((char *)&v267 + 4 * v162) + 96 * v162;
                      v167 = (__int16 *)(v227 + 5410 + 192 * v162 + 6 * *((char *)&v267 + 4 * v162));
                      do
                      {
                        v260 = *(_BYTE *)(v166 + v164);
                        LODWORD(completeUntilPresentationTimeStamp.value) = *v167;
                        LODWORD(pixelBufferOut) = v167[192];
                        v168 = CFNumberCreate(0, kCFNumberCharType, &v260);
                        v169 = CFNumberCreate(0, kCFNumberSInt32Type, &completeUntilPresentationTimeStamp);
                        v170 = CFNumberCreate(0, kCFNumberSInt32Type, &pixelBufferOut);
                        CFArrayAppendValue(v152, v168);
                        CFArrayAppendValue(v153, v169);
                        CFArrayAppendValue(v154, v170);
                        CFRelease(v168);
                        CFRelease(v169);
                        CFRelease(v170);
                        ++v164;
                        ++v167;
                      }
                      while (v164 != 3);
                      v163 = 0;
                      v162 = 1;
                    }
                    while ((v165 & 1) != 0);
                  }
                  else
                  {
                    v171 = 1;
                    do
                    {
                      v172 = v171;
                      v173 = 3;
                      do
                      {
                        v174 = CFNumberCreate(0, kCFNumberCharType, &v260);
                        v175 = CFNumberCreate(0, kCFNumberSInt32Type, &completeUntilPresentationTimeStamp);
                        v176 = CFNumberCreate(0, kCFNumberSInt32Type, &pixelBufferOut);
                        CFArrayAppendValue(v152, v174);
                        CFArrayAppendValue(v153, v175);
                        CFArrayAppendValue(v154, v176);
                        CFRelease(v174);
                        CFRelease(v175);
                        CFRelease(v176);
                        --v173;
                      }
                      while (v173);
                      v171 = 0;
                    }
                    while ((v172 & 1) != 0);
                  }
                  CFDictionarySetValue(v249, CFSTR("WeightData_WeightFlagArray"), v152);
                  CFDictionarySetValue(v249, CFSTR("WeightData_Weight"), v153);
                  CFDictionarySetValue(v249, CFSTR("WeightData_Offset"), v154);
                  CFRelease(v152);
                  CFRelease(v153);
                  CFRelease(v154);
                  v145 = theDict;
                  CFDictionarySetValue(theDict, CFSTR("WeightedPredictionInfo"), v249);
                  CFRelease(v249);
                  v10 = v253;
                }
                v177 = *(const UInt8 **)(v10 + 176);
                if (v177)
                {
                  v178 = CFDataCreateWithBytesNoCopy(0, v177, *(unsigned int *)(v10 + 184), (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
                  CFDictionaryAddValue(v145, (const void *)*MEMORY[0x1E0CED660], v178);
                  CFRelease(v178);
                }
                v250 = (CFMutableDictionaryRef)*MEMORY[0x1E0C9AE50];
                CFDictionarySetValue(v145, CFSTR("AttachDPB"), (const void *)*MEMORY[0x1E0C9AE50]);
                v179 = v259;
                if (*(_BYTE *)(v10 + 3392))
                {
                  v180 = *v246;
                  v181 = v246[1];
                  if (!v239 && (*(_DWORD *)(v227 + 224) < v180 || *(_DWORD *)(v227 + 192) < v181))
                  {
                    v180 = *(_DWORD *)(v227 + 224);
                    v181 = *(_DWORD *)(v227 + 192);
                  }
                  LODWORD(__pattern4) = v181 | (v180 << 16);
                  LOWORD(duration.value) = v246[7];
                  WORD1(duration.value) = v246[6];
                  v184 = CFNumberCreate(0, kCFNumberSInt32Type, &__pattern4);
                  v185 = CFNumberCreate(0, kCFNumberSInt32Type, &duration);
                  CFDictionaryAddValue(v145, (const void *)*MEMORY[0x1E0CED668], v184);
                  CFDictionaryAddValue(v145, CFSTR("VRAActualDimension"), v185);
                  CFRelease(v184);
                  CFRelease(v185);
                }
                if (v242)
                  sub_1B68B2C50(v145, (const void *)*MEMORY[0x1E0CECEF0], *v242);
                if (*(_DWORD *)(v10 + 2976))
                {
                  v186 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
                  v187 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
                  v188 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  sub_1B68B2C50(v188, (const void *)*MEMORY[0x1E0CED4D8], *(_DWORD *)(v10 + 1584));
                  sub_1B68B2C50(v188, (const void *)*MEMORY[0x1E0CED4E8], *(_DWORD *)(v10 + 1588));
                  sub_1B68B2C50(v188, (const void *)*MEMORY[0x1E0CED4E0], *(_DWORD *)(v10 + 1596));
                  v224 = v188;
                  sub_1B68B2C50(v188, (const void *)*MEMORY[0x1E0CED4F0], *(_DWORD *)(v10 + 1592));
                  theArraya = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                  v247 = (const void *)*MEMORY[0x1E0CED520];
                  v245 = (const void *)*MEMORY[0x1E0CED528];
                  v243 = (const void *)*MEMORY[0x1E0CED550];
                  key = (void *)*MEMORY[0x1E0CED540];
                  v240 = (const void *)*MEMORY[0x1E0CED538];
                  v238 = (void *)*MEMORY[0x1E0CED560];
                  v233 = (__CFDictionary *)*MEMORY[0x1E0C9AE40];
                  v237 = (void *)*MEMORY[0x1E0CED580];
                  v236 = (const void *)*MEMORY[0x1E0CED570];
                  v235 = (void *)*MEMORY[0x1E0CED568];
                  v234 = (const void *)*MEMORY[0x1E0CED578];
                  v232 = (const void *)*MEMORY[0x1E0CED508];
                  v231 = (void *)*MEMORY[0x1E0CED558];
                  v230 = (void *)*MEMORY[0x1E0CED530];
                  v189 = (int *)(v10 + 296);
                  v190 = -1;
                  v229 = (void *)*MEMORY[0x1E0CED548];
                  v191 = (const void *)*MEMORY[0x1E0CED518];
                  v192 = (const void *)*MEMORY[0x1E0CED500];
                  v193 = (const void *)*MEMORY[0x1E0CED510];
                  do
                  {
                    v257 = v190;
                    v194 = CFDictionaryCreateMutable(0, 0, v186, v187);
                    sub_1B68B2C50(v194, v247, *(v189 - 18));
                    sub_1B68B2C50(v194, v245, *(v189 - 17));
                    sub_1B68B2C50(v194, v243, *(v189 - 16));
                    *(_QWORD *)&__pattern4 = *((_QWORD *)v189 - 7);
                    v195 = CFNumberCreate(0, kCFNumberSInt64Type, &__pattern4);
                    if (v195)
                    {
                      v196 = v195;
                      CFDictionaryAddValue(v194, key, v195);
                      CFRelease(v196);
                    }
                    sub_1B68B2C50(v194, v240, *(v189 - 12));
                    v197 = CFDictionaryCreateMutable(0, 0, v186, v187);
                    v198 = v197;
                    if (*(v189 - 7))
                      v199 = v250;
                    else
                      v199 = v233;
                    CFDictionaryAddValue(v197, v238, v199);
                    if (*(v189 - 6))
                      v200 = v250;
                    else
                      v200 = v233;
                    CFDictionaryAddValue(v198, v237, v200);
                    sub_1B68B2C50(v198, v236, *(v189 - 5));
                    if (*(v189 - 4))
                      v201 = v250;
                    else
                      v201 = v233;
                    CFDictionaryAddValue(v198, v235, v201);
                    sub_1B68B2C50(v198, v234, *(v189 - 3));
                    v202 = CFDictionaryCreateMutable(0, 0, v186, v187);
                    sub_1B68B2C50(v202, v191, *(v189 - 11));
                    sub_1B68B2C50(v202, v192, *(v189 - 9));
                    sub_1B68B2C50(v202, v232, *(v189 - 1));
                    sub_1B68B2C50(v202, v193, *(v189 - 1));
                    v203 = CFDictionaryCreateMutable(0, 0, v186, v187);
                    v204 = v186;
                    v205 = v203;
                    sub_1B68B2C50(v203, v191, *(v189 - 10));
                    sub_1B68B2C50(v205, v192, *(v189 - 8));
                    sub_1B68B2C50(v205, v232, *v189);
                    sub_1B68B2C50(v205, v193, *v189);
                    CFDictionaryAddValue(v194, v231, v198);
                    CFDictionaryAddValue(v194, v230, v202);
                    CFDictionaryAddValue(v194, v229, v205);
                    CFRelease(v198);
                    CFRelease(v202);
                    v206 = v205;
                    v186 = v204;
                    v187 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
                    CFRelease(v206);
                    CFArrayAppendValue(theArraya, v194);
                    CFRelease(v194);
                    v189 += 20;
                    v190 = v257 + 1;
                  }
                  while (v257 + 1 < (unint64_t)*(unsigned int *)(v253 + 1592));
                  CFDictionaryAddValue(v224, (const void *)*MEMORY[0x1E0CED4F8], theArraya);
                  CFRelease(theArraya);
                  if (v224)
                  {
                    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CED648], v224);
                    CFRelease(v224);
                  }
                  v10 = v253;
                  *(_DWORD *)(v253 + 2976) = 0;
                  v179 = v259;
                }
                v207 = *(unsigned __int8 *)(v179 + 128);
                v208 = *(const __CFDictionary **)(v10 + 24);
                __pattern4 = 0uLL;
                *(_QWORD *)&v271 = 0;
                CMTimeMake((CMTime *)&__pattern4, *(int *)(v227 + 1332), *(_DWORD *)(v227 + 1336));
                memset(&valuePtr, 0, sizeof(valuePtr));
                CMTimeMake(&valuePtr, *(int *)(v227 + 1328), *(_DWORD *)(v227 + 1336));
                pixelBufferOut = 0;
                v209 = *(_DWORD *)(v227 + 228);
                v210 = *(_DWORD *)(v227 + 196);
                *(_DWORD *)(v10 + 64) = *(_DWORD *)(v10 + 68);
                if (v207)
                {
                  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v10 + 3888), 0xFFFFFFFFFFFFFFFFLL);
                  *(_BYTE *)(v10 + 33) = 1;
                  v7 = v258;
                  if (!*(_BYTE *)(v10 + 32))
                  {
                    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v10 + 88), 0xFFFFFFFFFFFFFFFFLL);
                    *(_DWORD *)(v258 + 116) = *(_DWORD *)(v258 + 112);
                    *(_BYTE *)(*(_QWORD *)(v10 + 8 * *(int *)(v10 + 64) + 72) + 1402) = 1;
                    *(_DWORD *)(v10 + 68) = *(_DWORD *)(v10 + 68) == 0;
                  }
                  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v10 + 3888));
                  v211 = *(OpaqueVTCompressionSession **)v10;
                  v212 = *(__CVBuffer **)(v10 + 8 * *(int *)(v10 + 64) + 3480);
                  *(_OWORD *)&presentationTimeStamp.value = __pattern4;
                  presentationTimeStamp.epoch = v271;
                  duration = valuePtr;
                  v213 = VTCompressionSessionEncodeFrame(v211, v212, &presentationTimeStamp, &duration, v208, 0, 0);
                  v8 = v259;
                  if ((_DWORD)v213)
                    goto LABEL_304;
                }
                else
                {
                  v214 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                  PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)v10);
                  v216 = CVPixelBufferPoolCreatePixelBuffer(v214, PixelBufferPool, &pixelBufferOut);
                  if ((_DWORD)v216)
                  {
                    v217 = v216;
                    CFLog();
                    v33 = v217;
                    v7 = v258;
                    v8 = v259;
                    goto LABEL_313;
                  }
                  sub_1B68B02E0(pixelBufferOut, v227 + 96, v209, v210);
                  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v10 + 3888), 0xFFFFFFFFFFFFFFFFLL);
                  *(_BYTE *)(v10 + 33) = 1;
                  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v10 + 3888));
                  v218 = *(OpaqueVTCompressionSession **)v10;
                  presentationTimeStamp.epoch = v271;
                  *(_OWORD *)&presentationTimeStamp.value = __pattern4;
                  duration = valuePtr;
                  v213 = VTCompressionSessionEncodeFrame(v218, pixelBufferOut, &presentationTimeStamp, &duration, v208, 0, 0);
                  v7 = v258;
                  v8 = v259;
                  if ((_DWORD)v213)
                  {
LABEL_304:
                    v33 = v213;
                    CFLog();
                    goto LABEL_313;
                  }
                }
                if (*(_BYTE *)(v10 + 32))
                {
                  v219 = *(OpaqueVTCompressionSession **)v10;
                  *(_OWORD *)&completeUntilPresentationTimeStamp.value = __pattern4;
                  completeUntilPresentationTimeStamp.epoch = v271;
                  v220 = VTCompressionSessionCompleteFrames(v219, &completeUntilPresentationTimeStamp);
                  v221 = *(_DWORD *)(v10 + 144) | v220;
                  if ((_DWORD)v221)
                  {
                    CFLog();
                    v33 = v221;
                  }
                  else
                  {
                    v33 = v220;
                    *(_BYTE *)(v10 + 33) = 0;
                  }
                }
                else
                {
                  v33 = 0;
                }
LABEL_313:
                a2 = v225;
                if (pixelBufferOut)
                  CVPixelBufferRelease(pixelBufferOut);
                v222 = *(const void **)(v10 + 24);
                if (v222)
                  CFRelease(v222);
                if ((_DWORD)v33)
                  goto LABEL_320;
                goto LABEL_318;
              }
            }
            else
            {
              v52 = *(float *)(v8 + 56);
            }
            v69 = *(_QWORD *)(v8 + 2312);
            if (*(_BYTE *)(v69 + 3544))
            {
              memset(*(void **)(v69 + 176), 4 * (int)(float)(v52 + 0.5), *(unsigned int *)(v69 + 184));
            }
            else
            {
              LODWORD(__pattern4) = (((int)(float)(v52 + 0.5) & 0x3F) << 10) | ((int)(float)(v52 + 0.5) << 26) | 0x1B001B0;
              memset_pattern4(*(void **)(v69 + 176), &__pattern4, *(unsigned int *)(v69 + 184));
            }
            goto LABEL_218;
          }
        }
        v28 = 1;
        goto LABEL_39;
      }
    }
    if ((_DWORD)v13)
    {
      v19 = 0;
      v20 = 0;
      while (*(_DWORD *)(v15 + 1276) != *(_DWORD *)(v9 + (v19 >> 54) + 18468))
      {
        ++v20;
        v19 += 0x100000000000000;
        if (v13 == v20)
          goto LABEL_18;
      }
      HIDWORD(v267) = v20;
    }
    goto LABEL_18;
  }
LABEL_318:
  if (!*(_BYTE *)(v10 + 32))
    return 0;
  v33 = sub_1B68D1E44(v7, *(_QWORD *)(v8 + 32), a2, a4, a5, a6);
  if ((_DWORD)v33)
    goto LABEL_320;
  return v33;
}

uint64_t sub_1B68D8794(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  signed int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  int32x2_t *v27;
  int32x2_t v28;
  _BOOL4 v31;

  v9 = a1 + 25725;
  v10 = a1[25725];
  v11 = a1[17];
  v12 = *(_QWORD *)(v10 + 22824);
  v13 = *(_DWORD *)(v12 + 12);
  v14 = a1[25730];
  v31 = 0;
  if (v14)
  {
    sub_1B68D898C(a1[18], v14, a1[19], *(unsigned __int8 *)(v11 + 577));
    v15 = sub_1B68D8A1C((uint64_t)a1, v9[5], v11, a1[18], *(_DWORD *)(v9[5] + 1276));
    if ((_DWORD)v15)
    {
      v16 = v15;
      goto LABEL_8;
    }
    v18 = (_BYTE *)a1[17];
    v17 = v9[5];
  }
  else
  {
    v17 = 0;
    v18 = (_BYTE *)v11;
  }
  v19 = sub_1B689D9F0(a2, 0, v18, (uint64_t)a1, v17, a6);
  if ((_DWORD)v19)
  {
    v16 = v19;
  }
  else
  {
    *(_BYTE *)(v9[5] + 2) = 1;
    v21 = v9[5];
    v22 = *(_DWORD *)(v21 + 1280);
    if (!*(_BYTE *)(v21 + 1393))
    {
      if (*(_BYTE *)(a1[17] + 4848))
      {
        v23 = a1[674];
        if (v23)
          v22 += *(_DWORD *)(v23 + 116);
      }
    }
    *(_DWORD *)(v21 + 1280) = v22;
    v24 = *v9;
    v25 = *(int **)(*v9 + 22816);
    v26 = v22 << (*(_BYTE *)(v21 + 1354) == 0);
    *v25 = v26;
    v25[6] = v26;
    v25[7] = v26;
    v27 = *(int32x2_t **)(v24 + 22816);
    v28 = v27[3];
    *(_DWORD *)(v21 + 1288) = v27->i32[0];
    *(int32x2_t *)(v21 + 1292) = vrev64_s32(v28);
    *(_QWORD *)(v21 + 1300) = 0;
    *(_WORD *)(v21 + 1398) = 0;
    *(_BYTE *)(v21 + 1401) = 0;
    sub_1B68D8E04((uint64_t)a1, a1[18], a1[17]);
    if (v9[5] != sub_1B68CAAA4(v14, v10, v11, (uint64_t *)(v12 + 216), v13))
    {
      CFLog();
      return 4294967246;
    }
    v16 = sub_1B68D90A4((uint64_t)a1, a3, a4, a5, &v31);
    if (!(_DWORD)v16)
      return v16;
  }
LABEL_8:
  CFLog();
  return v16;
}

float sub_1B68D898C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int *v4;
  int v5;
  int *v6;
  int v7;
  uint64_t v8;
  float result;

  v4 = (int *)(a3 + 228);
  if (!a3)
    v4 = (int *)(a1 + 324);
  v5 = *v4;
  v6 = (int *)(a3 + 232);
  if (!a3)
    v6 = (int *)(a1 + 328);
  v7 = *v6;
  *(_DWORD *)(a2 + 4928) = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4932) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(a2 + 4944) = 0x2000000000000000;
  *(_DWORD *)(a2 + 4960) = *(_DWORD *)(a1 + 324);
  *(_DWORD *)(a2 + 4984) = v5;
  *(_DWORD *)(a2 + 4964) = *(_DWORD *)(a1 + 328);
  *(_DWORD *)(a2 + 4988) = v7;
  *(_QWORD *)(a2 + 4968) = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a2 + 4976) = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a2 + 4952) = 0x2000000000000000;
  v8 = 28;
  if (a4 == 1)
    v8 = 32;
  *(_DWORD *)(a2 + 4940) = *(_DWORD *)(a1 + v8);
  result = *(float *)(a1 + v8);
  *(float *)(a2 + 4936) = result;
  return result;
}

uint64_t sub_1B68D8A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  double v15;
  int v16;
  char v17;
  signed int v18;
  float v19;
  float v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;

  v10 = a1 + 207916;
  if (a4)
    v11 = *(_DWORD *)(a4 + 56);
  else
    v11 = 0;
  v12 = 0;
  v13 = *(unsigned __int8 *)(a1 + 207943);
  v14 = v11 | v13;
  *(_BYTE *)(a2 + 1357) = v11 | v13;
  *(_BYTE *)(a2 + 1358) = 0;
  if (*(_BYTE *)(a3 + 577) != 1)
    return v12;
  v15 = *(double *)(a4 + 312);
  if (v15 >= 1.0)
  {
    if (v15 >= 5.0)
    {
      if (v15 >= 10.0)
        v17 = 3;
      else
        v17 = 2;
      *(_BYTE *)(a1 + 207952) = v17;
      v16 = 1;
    }
    else
    {
      v16 = 0;
      *(_BYTE *)(a1 + 207952) = 1;
    }
  }
  else
  {
    v16 = 0;
    *(_BYTE *)(a1 + 207952) = 0;
  }
  v18 = *(_DWORD *)(a4 + 304);
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 136) + 4852) - 1) >= 2)
  {
    if (HIWORD(v18))
      v18 = (float)((float)((float)(v18 >> 16) * 0.00097656) * 1000.0) + 100;
    else
      v18 = *(_DWORD *)(a3 + 620);
  }
  *(_DWORD *)(a1 + 207956) = v18;
  *(_BYTE *)(a1 + 207960) = *(_DWORD *)(a4 + 372);
  *(_DWORD *)(a1 + 207964) = *(_DWORD *)(a4 + 376);
  *(_DWORD *)(a1 + 207968) = *(_DWORD *)(a4 + 380);
  *(_DWORD *)(a1 + 207972) = *(_DWORD *)(a4 + 384);
  if (v15 < 1.0)
    goto LABEL_25;
  v19 = *(float *)(a4 + 28);
  if (v19 <= 0.0)
    goto LABEL_25;
  if (*(int *)a4 > 76999)
  {
    if (!v16)
    {
LABEL_25:
      *(_DWORD *)(a1 + 207944) = 0;
      goto LABEL_26;
    }
    v20 = 3000.0 / v19;
    v21 = (v18 - 100) >> 1;
  }
  else
  {
    v20 = 3000.0 / v19;
    v21 = v18 - 100;
  }
  if (v20 >= (float)v21)
    goto LABEL_25;
  *(_DWORD *)(a1 + 207944) = 3;
LABEL_26:
  v22 = *(_BYTE *)(a1 + 207941);
  if (v22)
  {
    if (*(_BYTE *)(a4 + 69))
      v22 = 0;
    else
      v22 = *(_BYTE *)(a1 + 207942) != 0;
  }
  *(_BYTE *)(a4 + 68) |= v22;
  *(_BYTE *)(a1 + 207940) = 0;
  if (*(_DWORD *)(a1 + 207944))
  {
    if (v14 || *(_DWORD *)(a1 + 207948) == -1)
      *(_DWORD *)(a1 + 207948) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 207948) = -1;
    if (*(_DWORD *)v10)
    {
      *(_BYTE *)(a1 + 207940) = *(_BYTE *)(a4 + 68);
      *(_DWORD *)(a1 + 207920) = *(_DWORD *)(a4 + 88);
      v23 = *(unsigned int *)(a4 + 88);
      if (v23 > 8)
      {
        *(_DWORD *)(a1 + 207920) = 0;
        v12 = 4294958327;
        CFLog();
        return v12;
      }
      memcpy((void *)(a1 + 207924), (const void *)(a4 + 92), 2 * v23);
    }
  }
  v24 = -1;
  if (!a5 || v14)
    goto LABEL_41;
  if (*(_DWORD *)(v10 + 28))
  {
    v24 = a5;
    if (*(_DWORD *)(v10 + 32))
      goto LABEL_42;
    goto LABEL_41;
  }
  v24 = a5;
  if (*(_BYTE *)(v10 + 24))
LABEL_41:
    *(_DWORD *)(v10 + 60) = v24;
LABEL_42:
  v25 = *(_QWORD *)(a1 + 5392);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 5416);
    v27 = *(unsigned __int8 *)(a1 + 1057);
    v28 = v27 == 1;
    if (v27 == 1)
      v29 = 3;
    else
      v29 = *(_DWORD *)(v25 + 744);
    if (!v28 || *(_BYTE *)(a1 + 1624))
      goto LABEL_69;
    if (!*(_BYTE *)(v25 + 760))
    {
      v30 = *(_DWORD *)(a4 + 700);
      if (v30 >= 1)
      {
        v31 = *(_DWORD *)(a4 + 704);
        if (v31 >= 1)
        {
          if (v30 >= v31)
            v30 = *(_DWORD *)(a4 + 704);
          if (v30 <= 0x465)
            v29 = 1;
          else
            v29 = 2;
          goto LABEL_69;
        }
      }
      v32 = *(_DWORD *)(v25 + 748);
      if (v32 < 641)
      {
        if (v32 < 481)
        {
          v29 = 1;
          goto LABEL_69;
        }
        v33 = *(_DWORD *)(v25 + 752);
      }
      else
      {
        v33 = *(_DWORD *)(v25 + 752);
        if (v33 > 480)
        {
          v29 = 2;
          goto LABEL_69;
        }
      }
      if (v33 <= 640)
        v29 = 1;
      else
        v29 = 2;
LABEL_69:
      if (v29 != *(_DWORD *)(v25 + 744))
      {
        *(_DWORD *)(v25 + 744) = v29;
        sub_1B68B7684(v25, 1, *(_DWORD *)(v26 + 368));
      }
    }
  }
  *(_BYTE *)(a2 + 26) = *(_BYTE *)(v10 + 36);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(v10 + 40);
  *(_BYTE *)(a2 + 24) = 0;
  if (*(_BYTE *)(a3 + 615) && *(_BYTE *)(v10 + 25))
  {
    *(_BYTE *)(a2 + 24) = *(_BYTE *)(v10 + 24);
    if (*(_DWORD *)(a2 + 1276) && *(_DWORD *)(v10 + 28) && !*(_DWORD *)(v10 + 32))
      *(_BYTE *)(a2 + 24) = 1;
    v12 = 0;
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(v10 + 60);
  }
  else
  {
    v12 = 0;
    if (*(_BYTE *)(v10 + 24))
      *(_BYTE *)(a2 + 1357) = 1;
  }
  return v12;
}

void sub_1B68D8E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex v14;
  const __CFSet *ValueAtIndex;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  _DWORD *v34;
  uint64_t valuePtr;

  v3 = *(_DWORD *)(a2 + 168);
  if (v3)
  {
    v4 = a1 + 205800;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 205800) + 22824);
    if (v5)
    {
      v7 = *(unsigned int *)(v5 + 12);
      if (v3 >= 0x10)
        v3 = 16;
      *(_DWORD *)(a2 + 168) = v3;
      if (!*(_BYTE *)(a1 + 205832))
      {
        v9 = 0;
        do
        {
          valuePtr = *(_QWORD *)(a2 + 8 * v9 + 176);
          v10 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
          if (v10)
          {
            v11 = v10;
            Count = CFArrayGetCount(*(CFArrayRef *)(v4 + 16));
            if (Count >= 1)
            {
              v13 = Count;
              v14 = 0;
              while (1)
              {
                if (!*(_BYTE *)(*(_QWORD *)(v4 + 24) + v14))
                {
                  ValueAtIndex = (const __CFSet *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 16), v14);
                  if (ValueAtIndex)
                  {
                    if (CFSetContainsValue(ValueAtIndex, v11))
                      break;
                  }
                }
                if (v13 == ++v14)
                  goto LABEL_14;
              }
              *(_BYTE *)(*(_QWORD *)(v4 + 24) + v14) = 1;
            }
LABEL_14:
            CFRelease(v11);
          }
          ++v9;
        }
        while (v9 < *(unsigned int *)(a2 + 168));
        *(_BYTE *)(v4 + 32) = 1;
        if (*(_BYTE *)(a3 + 615))
        {
          v16 = 0;
          v17 = *(_QWORD *)(v4 + 24);
          v18 = 1;
          do
          {
            v18 &= *(_BYTE *)(v17 + v16);
            *(_BYTE *)(v4 + 32) = v18;
            ++v16;
          }
          while (v16 < *(unsigned __int8 *)(a3 + 615));
        }
      }
      v19 = v5 + 216;
      if ((_DWORD)v7)
      {
        for (i = 0; i != v7; ++i)
        {
          v21 = *(_QWORD *)(v19 + 8 * i);
          if (v21)
          {
            if (*(_BYTE *)(v21 + 1394))
            {
              if (*(_BYTE *)(v21 + 1356))
              {
                if (!*(_BYTE *)(v21 + 25))
                {
                  v22 = *(unsigned int *)(a2 + 168);
                  if ((_DWORD)v22)
                  {
                    v23 = (uint64_t *)(a2 + 176);
                    while (1)
                    {
                      v24 = *v23++;
                      if (v24 == *(_QWORD *)(v21 + 1408))
                        break;
                      if (!--v22)
                        goto LABEL_27;
                    }
                    *(_BYTE *)(v21 + 25) = 1;
                  }
                }
              }
            }
          }
LABEL_27:
          ;
        }
      }
      if (*(_BYTE *)(v4 + 133))
      {
        v25 = *(_QWORD *)(v4 + 2320);
        if (!*(_BYTE *)(v25 + 3462))
        {
          if (v7 >= 0x10)
            v26 = 16;
          else
            v26 = v7;
          v27 = (*(char *)(v25 + 32) + (_DWORD)v26 - 1);
          if (*(char *)(v25 + 32) + (int)v26 - 1 <= 0)
          {
            *(_DWORD *)(v25 + 2976) = 1;
          }
          else
          {
            v28 = 0;
            v29 = 0;
            do
            {
              if ((_DWORD)v26)
              {
                v30 = 0;
                v31 = *(_QWORD *)(v19 + 8 * v28);
                v32 = (int *)(v25 + 224);
                while (1)
                {
                  v33 = *v32;
                  v32 += 20;
                  if (v33 == *(_DWORD *)(v31 + 60))
                    break;
                  if (v26 == ++v30)
                  {
                    LODWORD(v30) = v26;
                    goto LABEL_50;
                  }
                }
                *(_DWORD *)(v25 + 224 + 80 * v30 + 44) = *(unsigned __int8 *)(v31 + 25);
              }
              else
              {
                LODWORD(v30) = 0;
              }
LABEL_50:
              if ((_DWORD)v30 == (_DWORD)v26)
                v29 = 1;
              ++v28;
            }
            while (v28 != v27);
            *(_DWORD *)(v25 + 2976) = 1;
            if (v29 == 1 && (_DWORD)v26)
            {
              v34 = (_DWORD *)(v25 + 268);
              do
              {
                *v34 = 0;
                v34 += 20;
                --v26;
              }
              while (v26);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1B68D90A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _BOOL4 *a5)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  BOOL v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int32x2_t *v82;
  int32x2_t *v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  BOOL v89;
  int32x2_t *v91;
  __int32 v92;
  __int32 v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int32x2_t *v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  _BOOL4 v109;
  uint64_t v110;
  _BOOL4 v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  _BOOL4 v118;
  uint64_t v119;
  _BOOL4 v120;
  uint64_t v121;
  uint64_t v122;
  __int32 *v123;
  _QWORD *v124;
  uint64_t v125;
  char v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int32x2_t *v134;
  int32x2_t *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  int v143;
  _QWORD *v144;
  _QWORD *v145;
  int v146;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  int v153;
  int v154;
  int v155;
  __int32 v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  _QWORD *v168;
  _QWORD *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int8x16_t *v180;
  uint64_t v181;
  int8x16_t *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  __int32 v191;
  int v192;
  __int32 v193;
  int v194;
  int v195;
  int v196;
  _BOOL4 v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  int v203;
  unsigned int v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int v213;
  int v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  int v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  __CFSet *ValueAtIndex;
  __CFSet *v230;
  CFNumberRef v231;
  CFNumberRef v232;
  int v233;
  _QWORD *v234;
  uint64_t v235;
  __CFSet *v236;
  __CFSet *v237;
  CFNumberRef v238;
  CFNumberRef v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  int v245;
  uint64_t v246;
  int v247;
  BOOL v248;
  _QWORD *v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  int v257;
  char j;
  _DWORD *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  _BOOL4 v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  int v268;
  int v269;
  int v270;
  unsigned int *v271;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unsigned int v278;
  int v279;
  _BYTE *v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  unsigned __int8 v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  _BYTE *v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  unsigned int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  const __CFArray *theArray;
  __int32 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v308;
  uint64_t v309;
  int v310;
  int8x16_t *v314;
  char v315;
  int8x16_t *v316;
  uint64_t v317;
  _BOOL4 v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  _QWORD valuePtr[4];

  v5 = 0;
  valuePtr[2] = *MEMORY[0x1E0C80C00];
  v6 = a1 + 205512;
  v7 = *(_QWORD *)(a1 + 205800);
  v8 = *(_QWORD *)(a1 + 205808);
  v9 = *(_QWORD *)(a1 + 205840);
  v10 = *(_QWORD *)(a1 + 136);
  v11 = *(unsigned __int8 *)(v9 + 1368);
  if (v11 <= 7)
  {
    if (((1 << v11) & 0x21) != 0)
    {
      if (!*(_BYTE *)(v10 + 233))
      {
        if (v11 == 1)
          goto LABEL_8;
        goto LABEL_45;
      }
LABEL_11:
      v5 = 1;
      goto LABEL_12;
    }
    if (((1 << v11) & 0x42) != 0)
      goto LABEL_8;
    if (((1 << v11) & 0x84) != 0)
    {
      if (!*(_BYTE *)(v10 + 232))
      {
        if (v11 == 5)
        {
          v12 = *(unsigned __int8 *)(v10 + 233);
          goto LABEL_9;
        }
        if (v11 == 6)
        {
LABEL_8:
          v12 = *(unsigned __int8 *)(v10 + 234);
LABEL_9:
          v5 = v12 != 0;
          goto LABEL_12;
        }
LABEL_45:
        v5 = 0;
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
LABEL_12:
  *(_BYTE *)(v9 + 1416) = v5;
  v317 = v10;
  if (*(_BYTE *)(v9 + 1393) && *(_DWORD *)(v9 + 1276))
  {
    v13 = *(_QWORD *)(v7 + 22824);
    v14 = *(unsigned int *)(v13 + 12);
    if ((int)v14 < 1)
      goto LABEL_28;
    v15 = (uint64_t *)(v13 + 216);
    v16 = v15;
    v17 = v14;
    do
    {
      v18 = *v16;
      if (*v16)
        v19 = v18 == v9;
      else
        v19 = 1;
      if (!v19)
      {
        *(_BYTE *)(v18 + 1394) = 0;
        *(_BYTE *)(v18 + 1398) = 0;
        *(_BYTE *)(v18 + 1356) = 0;
        *(_DWORD *)v18 = 0;
        *(_QWORD *)(v18 + 12) = 0;
        *(_QWORD *)(v18 + 19) = 0;
        *(_DWORD *)(v18 + 28) = 150;
        *(_BYTE *)(v18 + 4) = 1;
        *(_DWORD *)(v18 + 8) = 0;
        *(_DWORD *)(v18 + 64) = -1;
        *(_DWORD *)(v18 + 40) = 0;
        *(_QWORD *)(v18 + 56) = -1;
      }
      ++v16;
      --v17;
    }
    while (v17);
    v20 = 0;
    v21 = v15;
    v22 = v14;
    do
    {
      if (*v21 == v9)
        v15[v20++] = v9;
      ++v21;
      --v22;
    }
    while (v22);
    if (v20 == 1)
      *(_DWORD *)(*(_QWORD *)(v7 + 22824) + 12) = 1;
    else
LABEL_28:
      CFLog();
  }
  v322 = v7;
  v316 = (int8x16_t *)(v7 + 23112);
  v321 = v9;
  if (*(_BYTE *)(v10 + 577) != 1)
    goto LABEL_114;
  if (!*(_BYTE *)(v10 + 615))
    goto LABEL_114;
  v23 = *(_QWORD *)(v6 + 328);
  if (!v23)
    goto LABEL_114;
  v24 = *(_QWORD *)(v7 + 22824);
  v25 = (_QWORD *)(v24 + 216);
  v26 = *(unsigned int *)(v24 + 12);
  *(_BYTE *)(v23 + 25) = 0;
  if ((int)v26 >= 1)
  {
    v27 = (_QWORD *)(v24 + 216);
    v28 = v26;
    do
    {
      v29 = (_BYTE *)*v27;
      if (!*v27)
        break;
      if (v29[1394] && !v29[1356])
        v29[12] = 0;
      ++v27;
      --v28;
    }
    while (v28);
    for (i = 0; v26 != i; ++i)
    {
      v31 = v25[i];
      if (!v31)
        break;
      if (*(_BYTE *)(v31 + 13))
      {
        if ((_DWORD)i == -1)
          break;
        v32 = v25[(int)i];
        if (!v32)
          break;
        v33 = (_WORD *)(v32 + 20);
        if (*(__int16 *)(v32 + 20) >= 91)
        {
          v34 = 0;
          v35 = -2147483647;
          v36 = -1;
          do
          {
            v37 = v25[v34];
            if (!v37)
              break;
            if (*(_BYTE *)(v37 + 1394))
            {
              if (*(_BYTE *)(v37 + 1398))
              {
                if (*(_BYTE *)(v37 + 1356))
                {
                  if (*(_BYTE *)(v37 + 25))
                  {
                    if (!*(_BYTE *)(v37 + 14))
                    {
                      v38 = *(_DWORD *)(v37 + 1288);
                      if (v38 > *(_DWORD *)(v32 + 1288)
                        && *(_DWORD *)(v37 + 1264) < (3 * *(_DWORD *)(v6 + 372)) >> 1
                        && v38 > v35)
                      {
                        v35 = *(_DWORD *)(v37 + 1288);
                        v36 = v34;
                      }
                    }
                  }
                }
              }
            }
            ++v34;
          }
          while (v26 != v34);
          if (v36 != -1)
          {
            v39 = v25[v36];
            if (v39)
            {
              *(_BYTE *)(v39 + 13) = 1;
              *(_WORD *)(v39 + 20) = 0;
              *(_BYTE *)(v32 + 13) = 0;
              goto LABEL_66;
            }
          }
        }
        goto LABEL_67;
      }
    }
  }
  v40 = sub_1B68B903C(*(_DWORD *)(v23 + 1288), v26, (uint64_t)v25);
  if (v40 && *(_DWORD *)(v40 + 1276))
  {
    *(_BYTE *)(v40 + 13) = 1;
    v33 = (_WORD *)(v40 + 20);
LABEL_66:
    *v33 = 0;
  }
LABEL_67:
  v41 = *(unsigned __int8 *)(v10 + 4827);
  if (*(_BYTE *)(v10 + 4827))
  {
    v42 = sub_1B68B8EBC(v26, v25);
    if ((int)v26 >= 1)
    {
      v43 = 0;
      v44 = v25;
      v45 = v26;
      do
      {
        if (!*v44)
          break;
        if (*(_BYTE *)(*v44 + 14))
          ++v43;
        ++v44;
        --v45;
      }
      while (v45);
      if (v42 >= 2 && v43 < v41)
      {
        v46 = 0;
        v47 = 0x7FFFFFFF;
        v48 = -1;
        do
        {
          v49 = v25[v46];
          if (!v49)
            break;
          if (*(_BYTE *)(v49 + 1394))
          {
            if (*(_BYTE *)(v49 + 1398))
            {
              if (*(_BYTE *)(v49 + 1356))
              {
                if (*(_BYTE *)(v49 + 25))
                {
                  if (!*(_BYTE *)(v49 + 14) && !*(_BYTE *)(v49 + 13))
                  {
                    v50 = *(_DWORD *)(v49 + 1288);
                    if (v50 < *(_DWORD *)(v23 + 1288) && v50 < v47)
                    {
                      v47 = v50;
                      v48 = v46;
                    }
                  }
                }
              }
            }
          }
          ++v46;
        }
        while (v26 != v46);
        if (v48 != -1)
        {
          v51 = v25[v48];
          if (v51)
          {
            *(_BYTE *)(v51 + 14) = 1;
            *(_BYTE *)(v51 + 15) = v43;
          }
        }
      }
    }
  }
  v52 = *(unsigned __int8 *)(v23 + 1368);
  if (v52 == 7 || v52 == 2)
  {
    if ((*(_BYTE *)(v23 + 1393) || !*(_DWORD *)(v23 + 1276)) && *(_BYTE *)(v6 + 2575))
    {
LABEL_113:
      *(_BYTE *)(v23 + 12) = 1;
      goto LABEL_114;
    }
    goto LABEL_114;
  }
  v54 = *(_DWORD *)(v23 + 1288);
  if ((int)v26 < 1)
  {
    v55 = 0;
  }
  else
  {
    v55 = 0;
    v56 = v25;
    v57 = v26;
    do
    {
      v58 = *v56;
      if (!*v56)
        break;
      if (*(_BYTE *)(v58 + 1394) && *(_BYTE *)(v58 + 1398) && *(_BYTE *)(v58 + 1356) && *(_DWORD *)(v58 + 1288) < v54)
        ++v55;
      ++v56;
      --v57;
    }
    while (v57);
  }
  if (v55 < *(unsigned __int8 *)(v10 + 615))
    goto LABEL_113;
  if (!*(_BYTE *)(v6 + 320))
  {
    *(_BYTE *)(v23 + 12) = 1;
    v276 = sub_1B68B90C8(v54, v26, (uint64_t)v25);
    if (v276)
    {
      *(_BYTE *)(v276 + 12) = 0;
      *(_DWORD *)(v23 + 56) = *(_DWORD *)(v276 + 60);
    }
    else
    {
      *(_BYTE *)(v23 + 12) = 0;
    }
    goto LABEL_114;
  }
  v319 = *(_DWORD *)(v23 + 28);
  v139 = sub_1B68B459C(v8, v23);
  v140 = *(_DWORD *)(v23 + 1276);
  if (v140 < 0x1E)
  {
    v141 = 0;
    v142 = 0;
  }
  else
  {
    v141 = 0;
    if (*(_DWORD *)(v23 + 1300))
    {
      v142 = 0;
      if (v139)
      {
        v142 = *(_DWORD *)(v23 + 1264);
        if (*(double *)(*(_QWORD *)(a1 + 152) + 384) > (double)(int)*(float *)(v139 + 1364)
          && *(_BYTE *)(v6 + 380)
          && (v143 = *(_DWORD *)(v139 + 1264), 10 * v143 < (11 * *(_DWORD *)(v6 + 368)))
          && 10 * v142 < 11 * v143)
        {
          v141 = 1;
          *(_BYTE *)(v23 + 12) = 1;
          *(_DWORD *)(v6 + 368) = 0;
          v140 = *(_DWORD *)(v23 + 1276);
        }
        else
        {
          v141 = 0;
        }
        HIDWORD(v277) = -286331153 * v140;
        LODWORD(v277) = -286331153 * v140;
        if ((v277 >> 1) < 0x8888889)
        {
          v278 = -1;
          *(_DWORD *)(v6 + 368) = -1;
          *(_BYTE *)(v6 + 380) = 0;
        }
        else
        {
          v278 = *(_DWORD *)(v6 + 368);
        }
        if (v142 < v278)
        {
          *(_DWORD *)(v6 + 368) = v142;
LABEL_589:
          if (*(_DWORD *)(v23 + 1276) % 0x1Eu >= 0xF && !*(_BYTE *)(v6 + 380))
            *(_BYTE *)(v6 + 380) = 1;
          goto LABEL_592;
        }
        if (v142 <= v278)
          goto LABEL_589;
      }
    }
    else
    {
      v142 = 0;
    }
  }
LABEL_592:
  v280 = (_BYTE *)(v23 + 12);
  v279 = *(unsigned __int8 *)(v23 + 12);
  if (!*(_BYTE *)(v23 + 12))
  {
    if (*(_DWORD *)(v23 + 1276) < 0x1Eu)
      goto LABEL_114;
    if (*(_DWORD *)(v6 + 2432))
    {
      if (*(_DWORD *)(v6 + 2436))
        goto LABEL_114;
    }
    else
    {
      v295 = sub_1B68B9154(*(_DWORD *)(v23 + 1288), v26, (uint64_t)v25);
      if (!v295)
        goto LABEL_114;
      v296 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 288) + 24555);
      if (v296 < 2)
        goto LABEL_114;
      v297 = *(_DWORD *)(v23 + 1332) - *(_DWORD *)(v295 + 1332);
      v298 = *(_DWORD *)(v23 + 1336);
      v299 = v298 * v319 / 1000 / (int)(v296 - 1);
      v300 = v298 / 3;
      if (v297 < v299 || v297 <= v300)
        goto LABEL_114;
    }
    v141 = 0;
    v279 = 1;
    *v280 = 1;
  }
  v281 = sub_1B68B8EBC(v26, v25);
  v282 = *(unsigned __int8 *)(v10 + 615);
  if (v281 == v282)
  {
    v309 = v6;
    v283 = *(_DWORD *)(v23 + 1288);
    v284 = *(_DWORD *)(v23 + 1332);
    v285 = *(_DWORD *)(v23 + 1336);
    v286 = v282 - *(_BYTE *)(v10 + 4827);
    if ((int)v26 >= 1)
    {
      v287 = 0;
      while (1)
      {
        v288 = v25[v287];
        if (!v288)
          goto LABEL_613;
        if (*(_BYTE *)(v288 + 13))
          break;
        if (v26 == ++v287)
          goto LABEL_613;
      }
      if ((_DWORD)v287 == -1 || !v25[(int)v287])
        goto LABEL_613;
      v289 = *(_DWORD *)(v23 + 1288);
      if (v286 >= 3u)
      {
        v290 = sub_1B68B8FA8(*(_DWORD *)(v23 + 1288), v26, (uint64_t)v25);
        if (!v290)
          goto LABEL_610;
        v289 = *(_DWORD *)(v290 + 1288);
      }
      v291 = sub_1B68B8F14(v289, v26, (uint64_t)v25);
      if (v291)
        goto LABEL_618;
LABEL_610:
      v291 = sub_1B68B90C8(v283, v26, (uint64_t)v25);
      v292 = (_BYTE *)(v23 + 12);
      if (!v291)
        goto LABEL_619;
      v292 = (_BYTE *)(v23 + 12);
      if (v284 - *(_DWORD *)(v291 + 1332) <= 2 * v285 * v319 / 1000)
        goto LABEL_619;
      goto LABEL_618;
    }
LABEL_613:
    v291 = sub_1B68B90C8(*(_DWORD *)(v23 + 1288), v26, (uint64_t)v25);
    if (v291 && v284 - *(_DWORD *)(v291 + 1332) > 2 * v285 * v319 / 1000
      || (v292 = (_BYTE *)(v23 + 12), v286 >= 2u)
      && (v293 = sub_1B68B8FA8(v283, v26, (uint64_t)v25), v292 = (_BYTE *)(v23 + 12), v293)
      && (v291 = sub_1B68B8F14(*(_DWORD *)(v293 + 1288), v26, (uint64_t)v25), v292 = (_BYTE *)(v23 + 12), v291))
    {
LABEL_618:
      *(_DWORD *)(v23 + 56) = *(_DWORD *)(v291 + 60);
      v292 = (_BYTE *)(v291 + 12);
    }
LABEL_619:
    *v292 = 0;
    v279 = *v280;
    v6 = v309;
    v9 = v321;
  }
  if (v141 && v279)
  {
    v294 = *(_DWORD *)(v6 + 376);
    *(_DWORD *)(v6 + 376) = v294 + 1;
    *(_DWORD *)(v6 + 372) = (v142 + *(_DWORD *)(v6 + 372) * v294) / (v294 + 1);
  }
LABEL_114:
  if (!v9)
    goto LABEL_513;
  v59 = v322;
  v60 = (int8x16_t *)(v322 + 22840);
  theArray = *(const __CFArray **)(v6 + 304);
  v304 = *(_QWORD *)(v6 + 312);
  v61 = *(_QWORD *)(v322 + 22824);
  v62 = *(unsigned int *)(v61 + 12);
  v63 = *(unsigned __int8 *)(v9 + 1368);
  v303 = v316[36].i32[2];
  if (*(_BYTE *)(v9 + 1394) && (v63 == 5 || !*(_BYTE *)(v9 + 1368)) && (v64 = *(char *)(v10 + 239), v64 >= 1))
  {
    if (v64 > *(char *)(v10 + 238))
      LOBYTE(v64) = 0;
    v310 = v64;
  }
  else
  {
    v310 = 0;
  }
  v65 = v61 + 216;
  v66 = *(_DWORD *)(v10 + 372);
  bzero((void *)(v322 + 22840), 0x220uLL);
  v308 = v6;
  if (v63 != 6 && v63 != 1)
  {
    if (*(_BYTE *)(v9 + 1354))
    {
      switch(v63)
      {
        case 0:
        case 5:
          goto LABEL_134;
        case 2:
        case 7:
          goto LABEL_132;
        default:
          goto LABEL_133;
      }
    }
    switch(v63)
    {
      case 0:
      case 5:
        break;
      case 2:
      case 7:
        if (*(_BYTE *)(v9 + 1393))
          goto LABEL_133;
        break;
      default:
        goto LABEL_133;
    }
    if ((int)v62 < 1)
    {
      v94 = 0;
    }
    else
    {
      v94 = 0;
      v95 = 0;
      v96 = *(_DWORD *)(v321 + 1300);
      do
      {
        if (v66 == 1)
        {
          v97 = 0;
          v98 = -2147483647;
          v99 = -1;
          do
          {
            v100 = *(_QWORD *)(v65 + 8 * v97);
            if (!v100)
              break;
            if ((*(_BYTE *)(v100 + 1402) || *(_BYTE *)(v100 + 1398))
              && !*(_BYTE *)(v100 + 98)
              && *(_BYTE *)(v100 + 1394)
              && !*(_BYTE *)(v100 + 1356)
              && *(_DWORD *)(v100 + 1300) < v96
              && *(_DWORD *)(v100 + 1300) > v98)
            {
              v98 = *(_DWORD *)(v100 + 1300);
              v99 = v97;
            }
            ++v97;
          }
          while (v62 != v97);
        }
        else
        {
          v101 = 0;
          v98 = -2147483647;
          v99 = -1;
          do
          {
            v102 = *(_QWORD *)(v65 + 8 * v101);
            if (!v102)
              break;
            if (*(_BYTE *)(v102 + 1398))
            {
              if (!*(_BYTE *)(v102 + 98))
              {
                if (*(_BYTE *)(v102 + 1394))
                {
                  if (!*(_BYTE *)(v102 + 1356))
                  {
                    v103 = *(_DWORD *)(v102 + 1300);
                    if (v103 < v96 && v103 > v98)
                    {
                      v98 = v103;
                      v99 = v101;
                    }
                  }
                }
              }
            }
            ++v101;
          }
          while (v62 != v101);
        }
        v96 = v98;
        if (v99 == -1)
          break;
        v104 = *(int32x2_t **)(v65 + 8 * v99);
        if (!v104)
          break;
        if (!v104[12].i8[1] || *(_QWORD *)&v104[168])
        {
          if (sub_1B68B91D4(v104))
          {
LABEL_325:
            v126 = 0;
            v125 = 4294958327;
            v9 = v321;
            v59 = v322;
            goto LABEL_326;
          }
          if (v94 <= 33)
            v60->i64[v94++] = (uint64_t)v104;
        }
        ++v95;
      }
      while (v95 != (_DWORD)v62);
    }
    v67 = v94;
    v273 = -1000;
    v9 = v321;
    v59 = v322;
    while (1)
    {
      v274 = sub_1B68B8E40(v273, v62, v65);
      if (!v274)
        break;
      v275 = v274;
      v273 = *(_DWORD *)(v274 + 1308);
      if ((!*(_BYTE *)(v275 + 97) || *(_QWORD *)(v275 + 1344)) && v67 <= 33)
      {
        v60->i64[v67++] = v275;
        *(_BYTE *)(v275 + 1354) = 0;
        *(_BYTE *)(v275 + 96) = 0;
      }
    }
    v316[34].i32[0] = v67;
    v316[34].i32[2] = v67;
    v316[34].i32[1] = 0;
    v316[34].i32[3] = 0;
    goto LABEL_284;
  }
  if (!*(_BYTE *)(v9 + 1354))
  {
    if ((int)v62 < 1)
    {
      LODWORD(v67) = 0;
    }
    else
    {
      v76 = v9;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v80 = *(_DWORD *)(v76 + 1288);
      v81 = v80;
      do
      {
        v82 = (int32x2_t *)sub_1B68B8DBC(v80, v62, v65);
        if (v82)
        {
          v83 = v82;
          if (!v82[169].i8[4])
          {
            if (v82[12].i8[1] && !*(_QWORD *)&v82[168])
            {
              v80 = v82[161].i32[0];
            }
            else
            {
              if (v78 <= 33)
              {
                v60->i64[v78] = (uint64_t)v82;
                if (v80 >= v82[161].i32[0])
                  v80 = v82[161].i32[0];
                ++v78;
              }
              if (sub_1B68B91D4(v82))
                goto LABEL_325;
              if (v80 >= v83[161].i32[0])
                v80 = v83[161].i32[0];
            }
          }
        }
        v84 = 0;
        v85 = 0x7FFFFFFF;
        v86 = -1;
        do
        {
          v87 = *(_QWORD *)(v65 + 8 * v84);
          if (!v87)
            goto LABEL_178;
          if (*(_BYTE *)(v87 + 1398) || *(_BYTE *)(v87 + 1402))
          {
            if (*(_BYTE *)(v87 + 1394))
            {
              v88 = *(_DWORD *)(v87 + 1288);
              if (v88 > v81 && !*(_BYTE *)(v87 + 98))
              {
                v89 = v86 == -1 || v88 < v85;
                if (v89)
                {
                  v85 = v88;
                  v86 = v84;
                }
              }
            }
          }
          ++v84;
        }
        while (v62 != v84);
        if (v86 != -1)
        {
LABEL_178:
          v91 = *(int32x2_t **)(v65 + 8 * v86);
          if (v91 && !v91[169].i8[4])
          {
            if (v91[12].i8[1] && !*(_QWORD *)&v91[168])
            {
              v81 = v91[161].i32[0];
            }
            else
            {
              if (v77 <= 33)
              {
                *(_QWORD *)(v322 + 8 * v77 + 23112) = v91;
                if (v81 <= v91[161].i32[0])
                  v81 = v91[161].i32[0];
                ++v77;
              }
              if (sub_1B68B91D4(v91))
                goto LABEL_325;
              v92 = v91[161].i32[1];
              v93 = v91[162].i32[0];
              if (v92 <= v93)
              {
                if (v81 <= v93)
                  v81 = v91[162].i32[0];
              }
              else if (v81 <= v92)
              {
                v81 = v91[161].i32[1];
              }
            }
          }
        }
        ++v79;
      }
      while (v79 != (_DWORD)v62);
      LODWORD(v67) = v78;
      v59 = v322;
      if (v77 >= 1)
      {
        v127 = 0;
        LODWORD(v67) = v78;
        do
        {
          if ((int)v67 <= 33)
          {
            v128 = v322 + 8 * v127++;
            v60->i64[(int)v67] = *(_QWORD *)(v128 + 23112);
            LODWORD(v67) = v67 + 1;
          }
        }
        while (v127 < v77);
      }
      if (v78 >= 1)
      {
        v129 = 0;
        do
        {
          if (v77 <= 33)
          {
            v130 = v60->i64[v129++];
            v131 = v322 + 8 * v77++;
            *(_QWORD *)(v131 + 23112) = v130;
          }
        }
        while (v129 < v78);
      }
      v19 = v77 == (_DWORD)v67;
      v9 = v321;
      if (!v19)
      {
LABEL_298:
        v126 = 0;
        v125 = 4294958327;
        goto LABEL_326;
      }
    }
    v132 = -1000;
    v133 = v67;
    while (1)
    {
      v134 = (int32x2_t *)sub_1B68B8E40(v132, v62, v65);
      if (!v134)
      {
        if ((int)v67 >= 2)
        {
          v137 = v67;
          v138 = (_QWORD *)(v322 + 22840);
          do
          {
            if (*v138 != v138[34])
              goto LABEL_315;
            ++v138;
            --v137;
          }
          while (v137);
          *v316 = vextq_s8(*v60, *v60, 8uLL);
        }
LABEL_315:
        v316[34].i32[0] = v67;
        v316[34].i32[2] = v67;
        v316[34].i32[1] = v133;
        v316[34].i32[3] = v133;
        goto LABEL_284;
      }
      v135 = v134;
      if (!v134[12].i8[1] || *(_QWORD *)&v134[168])
      {
        if ((int)v67 <= 33)
        {
          v60->i64[(int)v67] = (uint64_t)v134;
          LODWORD(v67) = v67 + 1;
        }
        if (v133 <= 33)
        {
          v136 = v59 + 8 * v133++;
          *(_QWORD *)(v136 + 23112) = v134;
        }
        if (sub_1B68B91D4(v134))
          goto LABEL_298;
      }
      v132 = v135[163].i32[1];
    }
  }
  if (((1 << v63) & 0x21) != 0)
  {
LABEL_134:
    LODWORD(v67) = 0;
    v68 = *(_DWORD *)(v9 + 1300);
    v69 = *(unsigned __int8 *)(v9 + 101);
    v323 = v68 + 1;
    LODWORD(valuePtr[0]) = v68;
    v70 = 1;
    v71 = 1;
    while (1)
    {
      if (v71)
      {
        v72 = sub_1B68B9538(v69, (int *)valuePtr, v62, v65);
        v73 = v72;
        if (v72 && (int)v67 <= 33)
        {
          v60->i64[(int)v67] = v72;
          *(_DWORD *)(v322 + 4 * (int)v67 + 23384) = v69;
          sub_1B68B9428(v72);
          LODWORD(v67) = v67 + 1;
        }
        if (v70)
        {
LABEL_140:
          v74 = sub_1B68B9538(v69 == 0, &v323, v62, v65);
          v75 = v74;
          if (v74 && (int)v67 <= 33)
          {
            v60->i64[(int)v67] = v74;
            *(_DWORD *)(v322 + 4 * (int)v67 + 23384) = v69 == 0;
            sub_1B68B9428(v74);
            LODWORD(v67) = v67 + 1;
          }
          goto LABEL_145;
        }
      }
      else
      {
        v73 = 0;
        if (v70)
          goto LABEL_140;
      }
      v75 = 0;
LABEL_145:
      v71 = v73 != 0;
      v70 = v75 != 0;
      if (!(v73 | v75))
      {
        v316[34].i32[0] = v67;
        v316[34].i32[2] = v67;
        v316[34].i32[1] = 0;
        v316[34].i32[3] = 0;
        v9 = v321;
        goto LABEL_283;
      }
    }
  }
  if (((1 << v63) & 0x42) == 0)
  {
    if (((1 << v63) & 0x84) == 0)
      goto LABEL_133;
LABEL_132:
    if (*(_BYTE *)(v9 + 1393))
    {
LABEL_133:
      LODWORD(v67) = 0;
      *(_OWORD *)(v322 + 23656) = 0u;
      goto LABEL_284;
    }
    goto LABEL_134;
  }
  v314 = (int8x16_t *)(v322 + 22840);
  v105 = 0;
  v106 = 0;
  LODWORD(v67) = 0;
  v107 = *(unsigned __int8 *)(v9 + 101);
  v318 = *(_BYTE *)(v9 + 101) == 0;
  LODWORD(valuePtr[0]) = *(_DWORD *)(v9 + 1288);
  v323 = LODWORD(valuePtr[0]) + 1;
  v108 = v9;
  do
  {
    if (v106)
    {
      if (!v9)
      {
        v109 = 0;
        v106 = 1;
        goto LABEL_243;
      }
      goto LABEL_239;
    }
    v110 = sub_1B68B92F8(v107, (int *)valuePtr, v62, v65, v321);
    if (!v110)
    {
      LODWORD(valuePtr[0]) = *(_DWORD *)(v321 + 1288);
LABEL_239:
      v9 = sub_1B68B9390(v107, (int *)valuePtr, v62, v65);
      v106 = 1;
      goto LABEL_240;
    }
    v9 = v110;
    v106 = 0;
LABEL_240:
    v109 = v9 != 0;
    if (v9 && (int)v67 <= 33)
    {
      v314->i64[(int)v67] = v9;
      *(_DWORD *)(v322 + 4 * (int)v67 + 23384) = v107;
      sub_1B68B9428(v9);
      LODWORD(v67) = v67 + 1;
      v109 = 1;
    }
LABEL_243:
    if (v105)
    {
      if (!v108)
      {
        v111 = 0;
        v105 = 1;
        continue;
      }
      goto LABEL_249;
    }
    v112 = sub_1B68B92F8(v318, &v323, v62, v65, v321);
    if (!v112)
    {
      v323 = *(_DWORD *)(v321 + 1288);
LABEL_249:
      v108 = sub_1B68B9390(v318, &v323, v62, v65);
      v105 = 1;
      goto LABEL_250;
    }
    v108 = v112;
    v105 = 0;
LABEL_250:
    v111 = v108 != 0;
    if (v108 && (int)v67 <= 33)
    {
      v314->i64[(int)v67] = v108;
      *(_DWORD *)(v322 + 4 * (int)v67 + 23384) = v318;
      sub_1B68B9428(v108);
      LODWORD(v67) = v67 + 1;
      v111 = 1;
    }
  }
  while (v109 || v111);
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v116 = v321;
  v323 = *(_DWORD *)(v321 + 1288);
  LODWORD(valuePtr[0]) = v323;
  v305 = v322 + 22840;
  v117 = v321;
  do
  {
    if (v114)
    {
      if (!v116)
      {
        v118 = 0;
        v114 = 1;
        goto LABEL_265;
      }
      goto LABEL_261;
    }
    v119 = sub_1B68B9390(v107, (int *)valuePtr, v62, v65);
    if (!v119)
    {
      LODWORD(valuePtr[0]) = *(_DWORD *)(v321 + 1288);
LABEL_261:
      v116 = sub_1B68B92F8(v107, (int *)valuePtr, v62, v65, v321);
      v114 = 1;
      goto LABEL_262;
    }
    v116 = v119;
    v114 = 0;
LABEL_262:
    v118 = v116 != 0;
    if (v116 && v115 <= 33)
    {
      *(_QWORD *)(v305 + 8 * v115 + 272) = v116;
      *(_DWORD *)(v305 + 4 * v115 + 680) = v107;
      sub_1B68B9428(v116);
      ++v115;
      v118 = 1;
    }
LABEL_265:
    if (v113)
    {
      if (!v117)
      {
        v120 = 0;
        v113 = 1;
        continue;
      }
      goto LABEL_271;
    }
    v121 = sub_1B68B9390(v318, &v323, v62, v65);
    if (!v121)
    {
      v323 = *(_DWORD *)(v321 + 1288) + 1;
LABEL_271:
      v117 = sub_1B68B92F8(v318, &v323, v62, v65, v321);
      v113 = 1;
      goto LABEL_272;
    }
    v117 = v121;
    v113 = 0;
LABEL_272:
    v120 = v117 != 0;
    if (v117 && v115 <= 33)
    {
      *(_QWORD *)(v322 + 22840 + 8 * v115 + 272) = v117;
      *(_DWORD *)(v322 + 22840 + 4 * v115 + 680) = v318;
      sub_1B68B9428(v117);
      ++v115;
      v120 = 1;
    }
  }
  while (v118 || v120);
  v9 = v321;
  v60 = (int8x16_t *)(v322 + 22840);
  if ((int)v67 >= 2)
  {
    v122 = v67;
    v123 = &v316[25].i32[2];
    v124 = (_QWORD *)(v322 + 22840);
    while (*v124 == v124[34] && *(v123 - 34) == *v123)
    {
      ++v123;
      ++v124;
      if (!--v122)
      {
        *v316 = vextq_s8(*v314, *v314, 8uLL);
        *(int32x2_t *)(v322 + 23520) = vrev64_s32(*(int32x2_t *)(v322 + 23384));
        break;
      }
    }
  }
  v316[34].i32[0] = v67;
  v316[34].i32[2] = v67;
  v316[34].i32[1] = v115;
  v316[34].i32[3] = v115;
LABEL_283:
  v59 = v322;
LABEL_284:
  v125 = 0;
  v126 = 1;
  if (v310 && (int)v67 >= v310)
  {
    v125 = 0;
    v316[34].i32[2] = v310;
    v126 = 1;
  }
LABEL_326:
  v315 = v126;
  v144 = *(_QWORD **)(v59 + 24544);
  if (v144)
  {
    do
    {
      v145 = (_QWORD *)v144[3];
      free(v144);
      v144 = v145;
    }
    while (v145);
  }
  *(_WORD *)(v322 + 24536) = 0;
  *(_QWORD *)(v59 + 24544) = 0;
  if (*(unsigned __int8 *)(v10 + 235) >= 3u)
  {
    v146 = *(unsigned __int8 *)(v9 + 1368);
    if (v146 == 5 || v146 == 0)
    {
      v148 = v316[34].u32[0];
      v149 = sub_1B68B8DBC(*(_DWORD *)(v9 + 1288), *(_DWORD *)(*(_QWORD *)(v59 + 22824) + 12), *(_QWORD *)(v59 + 22824) + 216);
      if (v149)
      {
        if (v60->i64[0] != v149)
        {
          if ((int)v148 <= 0)
          {
            v60->i64[0] = v149;
          }
          else
          {
            v150 = v148;
            do
            {
              v89 = v150 > 1;
              v60->i64[v150] = v60->i64[(v150 - 1)];
              --v150;
            }
            while (v89);
            *(_QWORD *)(v59 + 22840) = v149;
            v151 = (v148 + 1) - 1;
            v152 = (uint64_t *)(v59 + 22848);
            v153 = 1;
            do
            {
              if (*v152 != v149)
                v60->i64[v153++] = *v152;
              ++v152;
              --v151;
            }
            while (v151);
          }
          v154 = *(_DWORD *)(v9 + 1304);
          v155 = *(_DWORD *)(v149 + 1304);
          if (v155 <= v154)
            v156 = 0;
          else
            v156 = v303 + 1;
          v157 = v155 - v156;
          *(_BYTE *)(v322 + 24536) = 1;
          v89 = v154 < v157;
          v158 = v154 + v303 + 1 + ~v157;
          v159 = v154 - v157 - 1;
          if (!v89)
            v158 = v159;
          *(_DWORD *)(v322 + 24008) = v158;
          *(_QWORD *)(v59 + 23744) = 0x300000000;
        }
      }
    }
  }
  v320 = v125;
  if (*(_BYTE *)(v10 + 614) && *(_BYTE *)(v9 + 1394) && !*(_BYTE *)(v10 + 615))
  {
    v160 = *(unsigned int *)(*(_QWORD *)(v59 + 22824) + 12);
    *(_QWORD *)(v59 + 24544) = 0;
    if ((int)v160 < 1)
    {
      v162 = 0;
      v161 = 0;
    }
    else
    {
      v161 = 0;
      v162 = 0;
      v163 = 0x7FFFFFFF;
      v164 = v65;
      do
      {
        v165 = *(_QWORD *)v164;
        if (*(_BYTE *)(*(_QWORD *)v164 + 1394)
          && (*(_DWORD *)(v10 + 372) == 1 && *(_BYTE *)(v165 + 1402) || *(_BYTE *)(v165 + 1398)))
        {
          if (*(_DWORD *)(v165 + 1288) < v163 && !*(_BYTE *)(v165 + 1356))
          {
            v161 = *(_DWORD *)(v165 + 1300);
            v163 = *(_DWORD *)(v165 + 1288);
          }
          ++v162;
        }
        v164 += 8;
        --v160;
      }
      while (v160);
    }
    v166 = v162 + 2;
    if (v162 >= -1)
      v166 = v162 + 1;
    v167 = v166 >> 1;
    if (*(_BYTE *)(*(_QWORD *)v65 + 1354))
      v162 = v167;
    if (v162 == *(_DWORD *)(v59 + 8))
    {
      v168 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
      v169 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
      v168[3] = 0;
      *(_DWORD *)v168 = 0;
      v169[3] = v168;
      *(_DWORD *)v169 = 1;
      *((_DWORD *)v169 + 1) = *(_DWORD *)(v9 + 1300) + ~v161;
      *((_DWORD *)v169 + 5) = v161;
      *(_QWORD *)(v59 + 24544) = v169;
    }
  }
  if (!*(_BYTE *)(v9 + 16) || (v170 = *(unsigned __int8 *)(v9 + 1368), v170 == 2) || v170 == 7)
  {
LABEL_418:
    if (*(_BYTE *)(v10 + 615))
    {
      if (*(_BYTE *)(v321 + 1393))
      {
        v202 = *(_BYTE *)(v321 + 1394);
        if (v202)
          v202 = *(_BYTE *)(v321 + 12) != 0;
        *(_BYTE *)(v322 + 24553) = v202;
      }
      if ((int)v62 > 0)
      {
        v203 = 0;
        v204 = 0;
        v205 = (uint64_t *)v65;
        v206 = v62;
        do
        {
          v207 = *v205;
          if (*v205)
          {
            if (*(_BYTE *)(v207 + 1394))
            {
              ++v204;
              if (*(_BYTE *)(v207 + 1356))
                ++v203;
            }
          }
          ++v205;
          --v206;
        }
        while (v206);
        v208 = 0;
        *(_QWORD *)(v322 + 24544) = 0;
        while (1)
        {
          v209 = *(_QWORD *)(v65 + 8 * v208);
          if (v209 && *(_BYTE *)(v209 + 1394) && !*(_BYTE *)(v209 + 1356) && *(_BYTE *)(v209 + 12))
          {
            v210 = *(unsigned __int8 *)(v317 + 615);
            v211 = *(_DWORD *)(v321 + 1288);
            if (v203 == (_DWORD)v210)
            {
              v212 = 0;
              v213 = 0x7FFFFFFF;
              v214 = -1;
              do
              {
                v215 = *(_QWORD *)(v65 + 8 * v212);
                if (*(_BYTE *)(v215 + 1394)
                  && (*(_DWORD *)(v317 + 372) == 1 && *(_BYTE *)(v215 + 1402) || *(_BYTE *)(v215 + 1398)))
                {
                  if (*(_BYTE *)(v215 + 1356))
                  {
                    if (!*(_BYTE *)(v215 + 12))
                    {
                      v216 = *(_DWORD *)(v215 + 1288);
                      if (v216 < v211 && v216 < v213)
                      {
                        v213 = v216;
                        v214 = v212;
                      }
                    }
                  }
                }
                ++v212;
              }
              while (v62 != v212);
              if (v214 == -1)
                goto LABEL_512;
              v217 = *(_QWORD *)(v65 + 8 * v214);
              if (!v217)
                goto LABEL_512;
              v218 = *(_DWORD *)(v217 + 1308);
              if (!*(_QWORD *)(v322 + 24544))
              {
                v219 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
                v219[3] = 0;
                *(_DWORD *)v219 = 0;
                *(_QWORD *)(v322 + 24544) = v219;
              }
              v220 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
              v220[3] = *(_QWORD *)(v322 + 24544);
              *((_DWORD *)v220 + 3) = v218;
              *((_DWORD *)v220 + 5) = *(_DWORD *)(v209 + 1300);
              if (*(_DWORD *)(v209 + 1304) == *(_DWORD *)(v321 + 1304))
              {
                *(_DWORD *)v220 = 6;
              }
              else
              {
                *(_DWORD *)v220 = 3;
                *((_DWORD *)v220 + 1) = *(_DWORD *)(v321 + 1300) + ~*(_DWORD *)(v209 + 1300);
              }
              *(_QWORD *)(v322 + 24544) = v220;
              if (*((_DWORD *)v220 + 3) > *(_DWORD *)(*(_QWORD *)(v322 + 22816) + 40))
              {
                v227 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
                v228 = *(_QWORD *)(v322 + 24544);
                v227[3] = v228;
                *((_DWORD *)v227 + 4) = *(_DWORD *)(v228 + 12) + 1;
                *(_DWORD *)v227 = 4;
                *(_QWORD *)(v322 + 24544) = v227;
              }
              v10 = v317;
              if (!*(_BYTE *)(v304 + v218))
              {
                ValueAtIndex = (__CFSet *)CFArrayGetValueAtIndex(theArray, v218);
                v10 = v317;
                if (ValueAtIndex)
                {
                  v230 = ValueAtIndex;
                  valuePtr[0] = *(_QWORD *)(v209 + 1408);
                  v231 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
                  if (v231)
                  {
                    v232 = v231;
                    CFSetAddValue(v230, v231);
                    CFRelease(v232);
                  }
                  v10 = v317;
                }
              }
              --v204;
              v233 = *(_DWORD *)(v217 + 60);
            }
            else
            {
              valuePtr[0] = 0;
              valuePtr[1] = 0;
              v221 = v65;
              v222 = v62;
              do
              {
                v223 = *(_QWORD *)v221;
                if (*(_BYTE *)(*(_QWORD *)v221 + 1394) && *(_BYTE *)(v223 + 1356) && *(_DWORD *)(v223 + 1288) < v211)
                  *((_BYTE *)valuePtr + *(int *)(v223 + 1308)) = 1;
                v221 += 8;
                --v222;
              }
              while (v222);
              if (!(_DWORD)v210)
                goto LABEL_544;
              v224 = 0;
              while (*((_BYTE *)valuePtr + v224))
              {
                if (v210 == ++v224)
                  goto LABEL_544;
              }
              if ((v224 & 0x80000000) != 0)
              {
LABEL_544:
                CFLog();
                v251 = 4294958327;
                goto LABEL_567;
              }
              if (!*(_QWORD *)(v322 + 24544))
              {
                v225 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
                v225[3] = 0;
                *(_DWORD *)v225 = 0;
                *(_QWORD *)(v322 + 24544) = v225;
              }
              v226 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
              v226[3] = *(_QWORD *)(v322 + 24544);
              *((_DWORD *)v226 + 3) = v224;
              *((_DWORD *)v226 + 5) = *(_DWORD *)(v209 + 1300);
              if (*(_DWORD *)(v209 + 1304) == *(_DWORD *)(v321 + 1304))
              {
                *(_DWORD *)v226 = 6;
              }
              else
              {
                *(_DWORD *)v226 = 3;
                *((_DWORD *)v226 + 1) = *(_DWORD *)(v321 + 1300) + ~*(_DWORD *)(v209 + 1300);
              }
              *(_QWORD *)(v322 + 24544) = v226;
              if (*((_DWORD *)v226 + 3) > *(_DWORD *)(*(_QWORD *)(v322 + 22816) + 40))
              {
                v234 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
                v235 = *(_QWORD *)(v322 + 24544);
                v234[3] = v235;
                *((_DWORD *)v234 + 4) = *(_DWORD *)(v235 + 12) + 1;
                *(_DWORD *)v234 = 4;
                *(_QWORD *)(v322 + 24544) = v234;
              }
              v10 = v317;
              if (!*(_BYTE *)(v304 + v224))
              {
                v236 = (__CFSet *)CFArrayGetValueAtIndex(theArray, v224);
                v10 = v317;
                if (v236)
                {
                  v237 = v236;
                  valuePtr[0] = *(_QWORD *)(v209 + 1408);
                  v238 = CFNumberCreate(0, kCFNumberSInt64Type, valuePtr);
                  if (v238)
                  {
                    v239 = v238;
                    CFSetAddValue(v237, v238);
                    CFRelease(v239);
                  }
                  v10 = v317;
                }
              }
              ++v203;
              v233 = -1;
            }
            *(_DWORD *)(v321 + 56) = v233;
            v240 = *(_DWORD *)(v322 + 8);
            if (v240 <= 1)
              v240 = 1;
            if (v204 > v240)
              break;
          }
LABEL_434:
          if (++v208 == v62)
            goto LABEL_512;
        }
        v241 = v321;
        while (1)
        {
          v242 = 0;
          v243 = 0;
          v244 = 0x7FFFFFFF;
          v245 = -1;
          do
          {
            v246 = *(_QWORD *)(v65 + 8 * v242);
            if (*(_BYTE *)(v246 + 1394)
              && (*(_DWORD *)(v317 + 372) == 1 && *(_BYTE *)(v246 + 1402) || *(_BYTE *)(v246 + 1398)))
            {
              v247 = *(_DWORD *)(v246 + 1288);
              v248 = v247 < *(_DWORD *)(v241 + 1288) && v247 < v244;
              if (v248 && !*(_BYTE *)(v246 + 1356))
              {
                v243 = *(_DWORD *)(v246 + 1300);
                v244 = *(_DWORD *)(v246 + 1288);
                v245 = v242;
              }
            }
            ++v242;
          }
          while (v62 != v242);
          if (v245 == -1 || !*(_QWORD *)(v65 + 8 * v245))
            break;
          v249 = malloc_type_calloc(0x20uLL, 1uLL, 0x4AE20AB7uLL);
          v10 = v317;
          v249[3] = *(_QWORD *)(v322 + 24544);
          *(_DWORD *)v249 = 1;
          v241 = v321;
          *((_DWORD *)v249 + 1) = *(_DWORD *)(v321 + 1300) + ~v243;
          *((_DWORD *)v249 + 5) = v243;
          *(_QWORD *)(v322 + 24544) = v249;
          --v204;
          v250 = *(_DWORD *)(v322 + 8);
          if (v250 <= 1)
            v250 = 1;
          if (v204 <= v250)
            goto LABEL_434;
        }
        v251 = 4294958324;
        goto LABEL_567;
      }
      *(_QWORD *)(v322 + 24544) = 0;
    }
LABEL_512:
    v6 = v308;
    v251 = v320;
    v9 = v321;
    if ((v315 & 1) == 0)
      goto LABEL_567;
LABEL_513:
    if (*(_BYTE *)(v6 + 2593))
    {
      if (*(_BYTE *)(v6 + 2592))
      {
        v252 = v316[34].u32[0];
        *(_WORD *)(v9 + 19376) = -1;
        if ((int)v252 >= 1)
        {
          v253 = 0;
          v254 = v322 + 22840;
          do
          {
            v255 = *(_QWORD *)(v254 + 8 * v253);
            if (v255)
            {
              v256 = *(_DWORD *)(v255 + 1276);
              if (v256 == *(_DWORD *)(v9 + 19356))
              {
                *(_BYTE *)(v9 + 19376) = v253;
                v256 = *(_DWORD *)(*(_QWORD *)(v254 + 8 * v253) + 1276);
              }
              if (v256 == *(_DWORD *)(v9 + 19360))
                *(_BYTE *)(v9 + 19377) = v253;
            }
            ++v253;
          }
          while (v252 != v253);
        }
      }
    }
    if (*(_BYTE *)(v6 + 2602))
    {
      v257 = v316[34].i32[0];
      if (v257 >= 1)
      {
        for (j = 0; j < v257; ++j)
        {
          v259 = (_DWORD *)(v9 + 4 * j + 18984);
          *v259 = 0;
          v260 = *(_QWORD *)(v322 + 22840 + 8 * j);
          if (v260)
          {
            v261 = *(unsigned int *)(v9 + 18980);
            if ((_DWORD)v261)
            {
              v262 = 0;
              v263 = *(_DWORD *)(v260 + 1276);
              while (*(_DWORD *)(v9 + 18852 + 4 * v262) != v263)
              {
                if (v261 == ++v262)
                  goto LABEL_533;
              }
              *v259 = *(_DWORD *)(v9 + 18724 + 4 * v262);
            }
          }
LABEL_533:
          ;
        }
      }
    }
    if (*(_DWORD *)(v6 + 412) == 1)
      *(_BYTE *)(v9 + 1402) = 1;
    if (a2 && (*(_DWORD *)(v9 + 1284) = *(_DWORD *)a2, *(_BYTE *)(v10 + 402)))
    {
      v264 = 0;
      v265 = *(unsigned int *)(v9 + 1276);
      if ((v265 & 0x80000000) == 0)
      {
        v266 = *(_QWORD *)(a2 + 16);
        if (v266)
          v264 = *(_DWORD *)(a2 + 4) > v265 && *(_BYTE *)(v266 + 8 * v265 + 7) != 0;
      }
      *a5 = v264;
      if (v264)
        return 0;
    }
    else if (*a5)
    {
      return 0;
    }
    if (!*(_BYTE *)(v10 + 317))
    {
      v267 = *(_DWORD *)(a1 + 64) | a3;
      *(_DWORD *)(a1 + 64) = v267;
      if (*(_BYTE *)(v9 + 1368) == 5 || !*(_BYTE *)(v9 + 1368))
      {
        *(_BYTE *)(v9 + 5000) = v267;
        *(_DWORD *)(a1 + 64) = 0;
      }
      if ((*(_DWORD *)v6 + 1) < 0x7FFFFFFF)
        v268 = *(_DWORD *)v6 + 1;
      else
        v268 = 0x7FFFFFFF;
      if (v316[34].i32[0] < v268)
        v268 = v316[34].i32[0];
      v316[34].i32[2] = v268;
      v269 = *(_DWORD *)(v6 + 4);
      if ((v269 + 1) < 0x7FFFFFFF)
        v270 = v269 + 1;
      else
        v270 = 0x7FFFFFFF;
      if (v316[34].i32[1] < v270)
        v270 = v316[34].i32[1];
      v316[34].i32[3] = v270;
      if (*(_DWORD *)(v6 + 412) == 1)
      {
        memcpy((void *)(a1 + 56256), (const void *)(*(_QWORD *)(v6 + 288) + 22840), 0x348uLL);
        v271 = *(unsigned int **)(a4 + 24);
        if (v271)
          MEMORY[0x1BCC98920](*v271);
      }
    }
    return 0;
  }
  v171 = v316[34].u32[0];
  if (*(_BYTE *)(v9 + 22))
  {
    v172 = 0;
    while (1)
    {
      v173 = v60->i64[v172];
      if (v172 != *(unsigned __int8 *)(v173 + 23) || *(_BYTE *)(v10 + 663) && *(_BYTE *)(v173 + 1356))
        break;
      if (*(unsigned __int8 *)(v9 + 22) == ++v172)
        goto LABEL_382;
    }
    *(_BYTE *)(v322 + 24536) = 1;
    if (!*(_BYTE *)(v9 + 22))
    {
LABEL_416:
      LODWORD(v174) = 0;
LABEL_417:
      *(_DWORD *)(v59 + 4 * (v174 + 1) + 23744) = 3;
      goto LABEL_418;
    }
  }
  else
  {
LABEL_382:
    if (!*(_BYTE *)(v322 + 24536))
      goto LABEL_418;
    if (!*(_BYTE *)(v9 + 22))
      goto LABEL_416;
  }
  v174 = 0;
  v175 = *(_DWORD *)(v9 + 1304);
  v176 = v59 + 23744;
  v177 = v59 + 22848;
  v178 = -1;
  v179 = 1;
  v180 = v60;
  v181 = v171;
  while (1)
  {
    v182 = v180;
    v183 = v181;
    if (v174 == (v171 & ~((int)v171 >> 31)))
      break;
    while (1)
    {
      v184 = v182->i64[0];
      if ((_DWORD)v174 == *(unsigned __int8 *)(v182->i64[0] + 23))
        break;
      v182 = (int8x16_t *)((char *)v182 + 8);
      if (!--v183)
        goto LABEL_566;
    }
    v185 = *(_DWORD *)(v9 + 1304);
    v186 = (_QWORD *)(v59 + 8 * v171 + 22840);
    v187 = v171;
    if ((int)v171 <= (int)v174)
    {
      v60->i64[v174] = v184;
    }
    else
    {
      do
      {
        --v187;
        *v186 = *(v186 - 1);
        --v186;
      }
      while (v187 > v174);
      v188 = 0;
      v60->i64[v174] = v184;
      v189 = v174 + 1;
      do
      {
        v190 = *(_QWORD *)(v177 + 8 * v188);
        if (v190 != v184)
          v60->i64[v189++] = v190;
        ++v188;
      }
      while ((_DWORD)v181 != (_DWORD)v188);
    }
    if (*(_BYTE *)(v184 + 1356))
    {
      *(_DWORD *)(v176 + 4 * v174) = 2;
      *(_DWORD *)(v59 + 24272 + 4 * v174) = *(_DWORD *)(v184 + 1308);
    }
    else
    {
      v191 = v316[36].i32[2];
      v192 = *(_DWORD *)(v184 + 1304);
      if (v192 > v185)
        v193 = v191 + 1;
      else
        v193 = 0;
      v194 = v192 - v193;
      v195 = (v175 + v191 + 1 + ~v194) & v191;
      v196 = (v191 - v175 + v194) & v191;
      v197 = v195 > v196;
      if (v195 < v196)
      {
        v198 = v191 - v195;
      }
      else
      {
        v195 = v196;
        v198 = v196 + 1;
      }
      *(_DWORD *)(v176 + 4 * v174) = v197;
      *(_DWORD *)(v59 + 24008 + 4 * v174) = v195;
      v175 = (v198 + v175) & v191;
    }
    v199 = *(unsigned __int8 *)(v9 + 22);
    if ((int)v174 + 1 < v199)
    {
      v200 = 0;
      while (1)
      {
        v201 = *(_QWORD *)(v177 + 8 * v200);
        if (v179 + v200 != *(unsigned __int8 *)(v201 + 23) || *(_BYTE *)(v10 + 663) && *(_BYTE *)(v201 + 1356))
          break;
        if (v178 + *(unsigned __int8 *)(v9 + 22) == ++v200)
          goto LABEL_417;
      }
      ++v174;
      ++v179;
      --v181;
      v180 = (int8x16_t *)((char *)v180 + 8);
      v177 += 8;
      --v178;
      if (v174 < v199)
        continue;
    }
    goto LABEL_417;
  }
LABEL_566:
  v251 = 4294954947;
LABEL_567:
  CFLog();
  return v251;
}

pthread_mutex_t *sub_1B68DB134(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  pthread_mutex_t *v10;
  pthread_cond_t *v11;
  pthread_mutex_t *v12;
  BOOL v13;
  pthread_mutex_t *result;

  v4 = (a3 >> 2) + 16 * a2;
  v5 = v4 + 15;
  v6 = v4 + 30;
  if (v5 >= 0)
    v6 = v5;
  v7 = v6 >> 4;
  v8 = *(_DWORD *)(a1 + 192);
  if (v7 >= (int)(v8 >> 4))
    v9 = (v8 >> 4) - 1;
  else
    v9 = v7;
  v10 = *(pthread_mutex_t **)(a1 + 72);
  if (v10)
    pthread_mutex_lock(v10);
  while (*(_DWORD *)(a1 + 64) < v9)
  {
    v12 = *(pthread_mutex_t **)(a1 + 72);
    v11 = *(pthread_cond_t **)(a1 + 80);
    if (v11)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (!v13)
      pthread_cond_wait(v11, v12);
  }
  result = *(pthread_mutex_t **)(a1 + 72);
  if (result)
    return (pthread_mutex_t *)pthread_mutex_unlock(result);
  return result;
}

uint64_t sub_1B68DB1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  unsigned __int8 v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  int v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  _DWORD *v99;
  _BOOL4 v100;
  uint64_t v101;
  int *v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  __n128 v115;
  unsigned int v116;
  double v117;
  double v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  float v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  float v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unsigned int v137;
  int v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  unsigned __int16 *v149;
  unsigned __int16 *v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  BOOL v161;
  char v162;
  unsigned __int16 *v163;
  unsigned __int16 *v164;
  uint64_t v165;
  unsigned int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  float v178;
  BOOL v179;
  BOOL v181;
  BOOL v183;
  BOOL v185;
  BOOL v187;
  BOOL v189;
  unsigned int v191;
  int v192;
  BOOL v193;
  int v194;
  unsigned int v195;
  float v196;
  unsigned int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  float v203;
  uint64_t v204;
  uint64_t v205;
  float v206;
  double v207;
  int v208;
  float *v209;
  float v210;
  int v211;
  uint64_t v212;
  int v213;
  float v214;
  float v215;
  float v216;
  int v217;
  int v218;
  _DWORD *v219;
  int v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v231;
  const void *v232;
  unint64_t v233;
  BOOL v234;
  uint64_t v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unint64_t v245;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  _DWORD *v261;
  _DWORD *v262;
  signed int v263;
  unsigned int v264;
  uint64_t v265;
  void *v266;
  _QWORD *v267;
  void *v268;
  size_t v269;
  void *v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  pthread_mutex_t *v280;
  int v281;
  pthread_cond_t *v282;
  pthread_mutex_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int *v293;
  int v294;
  void *v295;
  unsigned int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t i;
  uint64_t v300;
  uint64_t v301;
  _DWORD *v302;
  uint64_t (*v303)(uint64_t);
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t j;
  uint64_t v308;
  _DWORD *v309;
  uint64_t (*v310)(uint64_t);
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  void *v318;
  uint64_t v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  int v327;
  uint64_t v328;
  unint64_t v329;
  int v330;
  uint64_t v331;
  _BOOL4 v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  int v337;
  _BOOL4 v338;
  char v339;
  unsigned int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t *v344;
  uint64_t v345;
  int v346;
  int v347;
  double v348;
  float v349;
  uint64_t v350;
  _BOOL4 v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unsigned __int8 *v359;
  int v360;
  int v361;
  _BOOL4 v363;
  BOOL v364;
  char v365;
  char v366;
  size_t v367;
  pthread_mutex_t *v368;
  pthread_mutex_t *v369;
  _WORD *v370;
  uint64_t v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  const void *v376;
  void *v377;
  uint64_t v378;
  _QWORD *v379;
  int *v380;
  unsigned int *v381;
  _BYTE *v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned int v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char v397;
  uint64_t *v398;
  uint64_t v403;
  uint64_t *v405;
  unsigned __int8 v406;
  unsigned __int8 *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  _BOOL4 v414;
  _QWORD v415[2];
  int v416;
  _DWORD *v417;
  int v418;
  int v419;
  char v420[9];

  v11 = a1 + 205448;
  v403 = *(_QWORD *)(a1 + 205800);
  v12 = *(_QWORD *)(a1 + 136);
  *(_DWORD *)a4 = 0;
  v13 = a4 + 96;
  v414 = 0;
  if (*(_BYTE *)(v12 + 4850))
  {
    *(_DWORD *)(a4 + 24) = 0;
    v14 = (_BYTE *)(v12 + 4850);
    v15 = *(unsigned __int8 *)(v12 + 4850);
  }
  else
  {
    v14 = (_BYTE *)(v12 + 4850);
    v15 = 0;
  }
  v16 = atomic_load((unsigned __int8 *)&qword_1EF13A080);
  v410 = v12;
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1EF13A080))
  {
    qword_1EF13A078 = (uint64_t)malloc_type_calloc(8 * *(unsigned __int8 *)(v12 + 376), 1uLL, 0x4AE20AB7uLL);
    __cxa_guard_release(&qword_1EF13A080);
  }
  if (*(_DWORD *)(v12 + 372) == 1 && (v17 = *(unsigned __int8 *)(v12 + 376), *(_BYTE *)(v12 + 376)))
  {
    v18 = 0;
    v19 = 0;
    v20 = qword_1EF13A078;
    do
    {
      v21 = *(_QWORD *)(v20 + 8 * v18);
      if (v21)
      {
        v22 = *(unsigned int *)(v21 + 12);
        if ((_DWORD)v22)
        {
          v23 = v21 + 216;
          while (*(_BYTE *)(*(_QWORD *)v23 + 1399))
          {
            v23 += 8;
            if (!--v22)
              goto LABEL_13;
          }
        }
        else
        {
LABEL_13:
          v19 = sub_1B68B8CE0(1, *(_QWORD *)(v20 + 8 * v18));
          v20 = qword_1EF13A078;
          *(_QWORD *)(qword_1EF13A078 + 8 * v18) = 0;
          v17 = *(unsigned __int8 *)(v410 + 376);
        }
      }
      ++v18;
    }
    while (v18 < v17);
  }
  else
  {
    v19 = 0;
  }
  v24 = *(_QWORD *)(v403 + 22824);
  if (!v24)
  {
    v34 = 0;
    v25 = v410;
    goto LABEL_80;
  }
  v25 = v410;
  v26 = *(unsigned int *)(v24 + 12);
  if (*(_DWORD *)(v410 + 372) == 1)
  {
    if ((_DWORD)v26)
    {
      v27 = 0;
      v28 = 8 * v26;
      do
      {
        v29 = *(_QWORD *)(v24 + v27 + 216);
        if (!*(_BYTE *)(v29 + 1402) && !*(_BYTE *)(v29 + 1398))
          goto LABEL_46;
        v27 += 8;
      }
      while (v28 != v27);
    }
    v30 = *(_QWORD *)(v403 + 22816);
    if (v24 != v30 && v30 != 0)
    {
      v32 = *(unsigned int *)(v30 + 12);
      if ((_DWORD)v32)
      {
        v33 = v30 + 216;
        while (*(_BYTE *)(*(_QWORD *)v33 + 1402) || *(_BYTE *)(*(_QWORD *)v33 + 1398))
        {
          v33 += 8;
          if (!--v32)
            goto LABEL_33;
        }
        if (*(_BYTE *)(v410 + 376))
        {
          v84 = 0;
          while (*(_QWORD *)(qword_1EF13A078 + 8 * v84))
          {
            if (*(unsigned __int8 *)(v410 + 376) == ++v84)
              goto LABEL_164;
          }
          *(_QWORD *)(qword_1EF13A078 + 8 * v84) = v24;
          v24 = *(_QWORD *)(v403 + 22824);
        }
LABEL_164:
        v109 = v403 + 16;
        if (v24 && v24 != v403 + 22056)
        {
          v110 = v403 - 744;
          v111 = 1;
          while (1)
          {
            v110 += 760;
            if (v110 == v24)
              break;
            if (++v111 == 30)
            {
              v109 = 0;
              goto LABEL_183;
            }
          }
          v109 += 760 * v111;
        }
LABEL_183:
        *(_QWORD *)(v403 + 22824) = v109;
        v24 = v109;
        goto LABEL_46;
      }
    }
LABEL_33:
    sub_1B68B8CE0(0, v24);
LABEL_34:
    v34 = 0;
    goto LABEL_80;
  }
  if ((_DWORD)v26)
  {
    v35 = 0;
    v36 = 8 * v26;
    while (*(_BYTE *)(*(_QWORD *)(v24 + v35 + 216) + 1399))
    {
      v35 += 8;
      if (v36 == v35)
        goto LABEL_40;
    }
  }
  else
  {
LABEL_40:
    v37 = *(_QWORD *)(v403 + 22816);
    if (!v37 || (v38 = *(unsigned int *)(v37 + 12), !(_DWORD)v38))
    {
LABEL_45:
      v19 = sub_1B68B8CE0(0, v24);
      v24 = *(_QWORD *)(v403 + 22824);
      goto LABEL_46;
    }
    v39 = v37 + 216;
    while (*(_BYTE *)(*(_QWORD *)v39 + 1399))
    {
      v39 += 8;
      if (!--v38)
        goto LABEL_45;
    }
    v80 = sub_1B68B8CE0(1, v24);
    v81 = *(_QWORD *)(v403 + 22824);
    if (v81 == *(_QWORD *)(v403 + 22816))
      goto LABEL_34;
    v19 = v80;
    v24 = v403 + 16;
    if (v81 && v81 != v403 + 22056)
    {
      v82 = v403 - 744;
      v83 = 1;
      while (1)
      {
        v82 += 760;
        if (v82 == v81)
          break;
        if (++v83 == 30)
        {
          v24 = 0;
          goto LABEL_171;
        }
      }
      v24 += 760 * v83;
    }
LABEL_171:
    *(_QWORD *)(v403 + 22824) = v24;
  }
LABEL_46:
  v40 = (uint64_t *)(v24 + 216);
  v41 = *(unsigned int *)(v24 + 12);
  if (*v14 && *(_DWORD *)(v410 + 372) != 1)
  {
    if ((int)v41 < 1)
      goto LABEL_77;
    v49 = 0;
    v50 = 0x7FFFFFFF;
    v44 = -1;
    do
    {
      v51 = v40[v49];
      if (!*(_BYTE *)(v51 + 1398))
      {
        v52 = *(_DWORD *)(v51 + 1288);
        if (v44 == -1 || v52 < v50)
        {
          v50 = v52;
          v44 = v49;
        }
      }
      ++v49;
    }
    while (v41 != v49);
  }
  else
  {
    if ((int)v41 < 1)
      goto LABEL_77;
    v42 = 0;
    v43 = 0x7FFFFFFF;
    v44 = -1;
    do
    {
      v45 = v40[v42];
      if (!*(_BYTE *)(v45 + 1402) && !*(_BYTE *)(v45 + 1398))
      {
        v46 = *(_DWORD *)(v45 + 1288);
        v47 = v44 == -1 || v46 < v43;
        if (v47)
        {
          v43 = v46;
          v44 = v42;
        }
      }
      ++v42;
    }
    while (v41 != v42);
  }
  if (v44 != -1)
  {
    v34 = v40[v44];
    if (!v15)
      goto LABEL_80;
    goto LABEL_78;
  }
LABEL_77:
  v34 = 0;
  if (!v15)
    goto LABEL_80;
LABEL_78:
  v34 = sub_1B68CAAA4(v34, v403, v410, v40, v41);
  if (v19)
    CFLog();
LABEL_80:
  *(_QWORD *)(v11 + 392) = v34;
  v55 = *(_QWORD *)(v11 + 2672);
  v56 = v34;
  if (v55)
  {
    if (!*(_BYTE *)(v55 + 32))
    {
      if (v34)
        *(_QWORD *)(v55 + 8 * *(int *)(v55 + 68) + 72) = v34;
      v57 = *(_QWORD *)(a1 + 80);
      if (v57)
        *(_QWORD *)(*(_QWORD *)(v11 + 2672) + 8 * *(int *)(*(_QWORD *)(v11 + 2672) + 68) + 96) = v57;
    }
    v56 = *(_QWORD *)(v11 + 392);
  }
  if (v56)
  {
    if (*v14)
    {
      v58 = sub_1B68D90A4(a1, a3, a5, a8, &v414);
      if ((_DWORD)v58)
      {
        v59 = v58;
LABEL_618:
        CFLog();
        return v59;
      }
      if (v414)
      {
        *a7 = 4;
        if (*(_DWORD *)(v11 + 476) == 1)
        {
          v61 = *(unsigned int **)(a8 + 24);
          if (v61)
            MEMORY[0x1BCC98920](*v61);
        }
LABEL_177:
        v113 = *(_QWORD *)(v11 + 2672);
        if ((!v113 || *(_BYTE *)(v113 + 32)) && *(_DWORD *)(v11 + 476) != 1)
          sub_1B68D5F80(v34, v403, v13, *(unsigned __int8 *)(v25 + 577));
        return 0;
      }
    }
    v62 = a1 + 5076;
    v63 = (_DWORD *)a4;
    v398 = (uint64_t *)(a4 + 16);
    v64 = *(_QWORD *)(v11 + 2672);
    if (*(_BYTE *)(v25 + 317))
    {
      v65 = a1;
      if (v64)
        goto LABEL_100;
      goto LABEL_101;
    }
    v71 = *(_QWORD *)(v11 + 392);
    v72 = *(_DWORD *)(a4 + 52);
    if (*(_DWORD *)(v11 + 476) != 1 && v72 >= 9)
    {
      CFLog();
      v59 = 4294967188;
      goto LABEL_618;
    }
    v388 = *(_QWORD *)(v11 + 2672);
    v73 = sub_1B68CD4AC((uint64_t)v398, v72);
    if ((_DWORD)v73)
    {
      v59 = v73;
      CFLog();
      goto LABEL_618;
    }
    v85 = a1 + 56528;
    v86 = *(_DWORD *)(a4 + 52);
    if (v86 < 1)
    {
      v87 = 1;
      v88 = a4;
      v89 = v388;
    }
    else
    {
      v87 = *(_DWORD *)(a1 + 57100) * *(_DWORD *)(a1 + 57096);
      v47 = v86 <= v87;
      v88 = a4;
      v89 = v388;
      if (v47)
        goto LABEL_131;
    }
    *(_DWORD *)(v88 + 52) = v87;
LABEL_131:
    if (!*(_BYTE *)(v11 + 485) && (*(_DWORD *)(v11 + 2300) || *(_BYTE *)(v11 + 2620) || *(_BYTE *)(v11 + 386)))
    {
      v90 = v71;
      v91 = v34;
      v92 = *(_QWORD *)(v11 + 400);
      memcpy(*(void **)(v92 + 128), *(const void **)(v90 + 128), (*(_DWORD *)(v92 + 196) * *(_DWORD *)(v92 + 232)));
      v93 = *(void **)(v92 + 136);
      v94 = *(_DWORD *)(v92 + 248);
      v95 = *(_DWORD *)(v92 + 212);
      v34 = v91;
      v71 = v90;
      memcpy(v93, *(const void **)(v90 + 136), (v95 * v94));
      v85 = a1 + 56528;
      v89 = v388;
    }
    if (v89 && !*(_BYTE *)(v89 + 32))
    {
      if (!*(_BYTE *)(v11 + 488))
      {
        CFLog();
        v59 = 4294958327;
        goto LABEL_618;
      }
      v114 = sub_1B68D6A54(a1);
      if ((_DWORD)v114)
      {
        v59 = v114;
        goto LABEL_617;
      }
      v176 = sub_1B68D8794((uint64_t *)a1, a2, a3, a5, a8, v115);
      v85 = a1 + 56528;
      if ((_DWORD)v176)
      {
        v59 = v176;
        goto LABEL_617;
      }
    }
    v383 = v34;
    v96 = *(_QWORD *)(v11 + 392);
    v97 = *(unsigned __int8 *)(v96 + 1368);
    v98 = *(_QWORD *)(a1 + 5392);
    v99 = *(_DWORD **)(a1 + 152);
    v100 = !**(_DWORD **)(v11 + 496) && !**(_DWORD **)(v11 + 512) && *v99 == 0;
    v101 = a3;
    if (v97 <= 9)
    {
      if (((1 << v97) & 0x129) != 0)
      {
        v102 = (int *)(v11 + 424);
        goto LABEL_146;
      }
      if (((1 << v97) & 0x294) != 0)
      {
        v102 = (int *)(v11 + 420);
        goto LABEL_146;
      }
    }
    v102 = (int *)(v11 + 428);
LABEL_146:
    v375 = v71;
    v103 = *v102;
    if (v103 >= 0x33)
      v104 = 51;
    else
      v104 = v103;
    *(float *)&v77 = (float)v104;
    LODWORD(v78) = 0;
    if (v103 < 0)
      *(float *)&v77 = 0.0;
    *(_DWORD *)(v11 + 416) = LODWORD(v77);
    if (*(_BYTE *)(a1 + 1024) && v98)
    {
      v77 = *(double *)(v98 + 136);
      *(float *)&v77 = v77;
      *(_DWORD *)(v96 + 4940) = LODWORD(v77);
    }
    v411 = v98;
    v105 = v96;
    if (v99)
    {
      v106 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 304);
      v99[94] = v106;
      if (v106)
      {
        sub_1B68A3558((uint64_t)v99, v96 + 4928, v77, v78);
        v96 = v105;
        v85 = a1 + 56528;
      }
    }
    v412 = (uint64_t)v99;
    if (!*(_BYTE *)(v11 + 2639))
    {
LABEL_202:
      v407 = (unsigned __int8 *)(v96 + 4912);
      if (!a3)
        v100 = 0;
      if (v100)
      {
        v120 = *(_QWORD *)(v11 + 392);
        v121 = *(unsigned int *)(v120 + 1276);
        *(float *)&v77 = (float)*(char *)(a3 + 10);
        v25 = v410;
        if ((v121 & 0x80000000) == 0)
        {
          v122 = *(_QWORD *)(a3 + 16);
          if (v122)
          {
            if (*(_DWORD *)(a3 + 4) > v121)
              LODWORD(v77) = *(_DWORD *)(v122 + 8 * v121);
          }
        }
        *(_DWORD *)(v11 + 416) = LODWORD(v77);
        if (*(_WORD *)(a3 + 8))
        {
          LOWORD(v77) = *(_WORD *)(v120 + 4728);
          v123 = sub_1B68F7888((double)*(unint64_t *)&v77 / (double)*(unsigned __int16 *)(a3 + 8));
          v96 = v105;
          v85 = a1 + 56528;
          *(float *)&v123 = v123;
          LODWORD(v78) = 1.0;
          *(float *)(v120 + 4732) = fminf(*(float *)&v123, 1.0);
        }
      }
      else
      {
        v124 = *(float *)(v11 + 416);
        v125 = *(_QWORD *)(v11 + 392);
        v25 = v410;
        if ((*(__int16 *)(v11 + 452) - 0xFFFF) >= 0xFFFF0002)
        {
          v124 = sub_1B68AC340(*(unsigned __int16 *)(v11 + 452), *(unsigned __int16 *)(v125 + 4728), *(_BYTE *)(v125 + 1404) & 0xF, *(unsigned __int8 *)(v11 + 2623), *(unsigned __int8 *)(v125 + 1394), *(unsigned __int8 *)(v11 + 2624), v124);
          v96 = v105;
          v85 = a1 + 56528;
        }
        else
        {
          if (*(_BYTE *)(v11 + 2623))
          {
            *(float *)&v78 = (float)((*(_BYTE *)(v125 + 1404) & 0xF) * *(unsigned __int8 *)(v11 + 2623));
            v124 = v124 + *(float *)&v78;
          }
          v126 = *(unsigned __int8 *)(v11 + 2624);
          if (*(_BYTE *)(v11 + 2624) && !*(_BYTE *)(v125 + 1394))
          {
            *(float *)&v78 = (float)v126;
            v124 = v124 + (float)v126;
          }
        }
        *(float *)(v11 + 416) = (float)(int)v124;
      }
      v127 = *(_QWORD *)(v11 + 496);
      if (*(_DWORD *)v127)
      {
        v128 = *(float *)(v127 + 84);
        v407[80] = 0;
        v34 = v383;
        if ((*(_BYTE *)v127 & 1) == 0)
          goto LABEL_278;
        v129 = *(_QWORD *)(v96 + 128);
        v130 = *(_DWORD *)(v96 + 232);
        v131 = *(_DWORD *)(v11 + 2424);
        if (v131)
          *(_DWORD *)(v11 + 2420) = (float)((float)((float)*(unsigned int *)(v96 + 4928)
                                                                / *(float *)(v96 + 4940))
                                                        * (float)v131);
        *(double *)(v127 + 3920) = (float)*(unsigned int *)(v96 + 4928);
        *(double *)(v127 + 3928) = *(float *)(v96 + 4940);
        v132 = *(unsigned __int8 *)(v96 + 1368);
        if (*(_BYTE *)(v96 + 1368))
        {
          v133 = 0;
          if (v132 != 2 && v132 != 7)
          {
            if (v132 == 5)
              v133 = 1;
            else
              v133 = 2;
          }
        }
        else
        {
          v133 = 1;
        }
        *(_DWORD *)(v127 + 120) = v133;
        LOBYTE(v133) = *(_BYTE *)(v11 + 528);
        if ((_BYTE)v133)
        {
          if (!*(_WORD *)(*(_QWORD *)(a1 + 136) + 326))
          {
            LOBYTE(v133) = *(_BYTE *)(v11 + 2628);
            if (!(_BYTE)v133)
              goto LABEL_277;
            LOBYTE(v133) = 0;
            v171 = *(unsigned __int8 *)(v96 + 1368);
            if (v171 > 8 || ((1 << v171) & 0x129) == 0)
              goto LABEL_277;
            v172 = *(_QWORD *)(*(_QWORD *)(v11 + 352) + 22824);
            v173 = *(unsigned int *)(v172 + 12);
            if ((int)v173 >= 1)
            {
              v133 = 0;
              v174 = (uint64_t *)(v172 + 216);
              do
              {
                v175 = *v174;
                if (!*(_BYTE *)(*v174 + 1398) && !*(_BYTE *)(v175 + 1394))
                  v133 |= *(_DWORD *)(v175 + 5004);
                ++v174;
                --v173;
              }
              while (v173);
              goto LABEL_277;
            }
          }
          LOBYTE(v133) = 0;
        }
LABEL_277:
        sub_1B68BBDE8(v127 + 48, (int *)(v127 + 112), v129, v130, v127 + 176, v127 + 3824, v96, v133);
        v96 = v105;
        *(float *)(v11 + 416) = (float)*(int *)(v127 + 124);
        v85 = a1 + 56528;
LABEL_278:
        if ((**(_BYTE **)(v11 + 496) & 1) == 0 || *(_DWORD *)(v11 + 504) != 1)
          goto LABEL_384;
        if (v97 == 6 || v97 == 1)
        {
          v167 = *(_DWORD *)(v11 + 2292);
          if (v167 <= 0x33)
          {
            v79 = 1.75;
            v78 = (double)v167 * 1.75;
            if (v78 <= *(float *)(v11 + 416))
              *(float *)(v11 + 416) = (float)(v167 + 2);
          }
        }
        v168 = *(_DWORD *)(v127 + 88);
        v169 = *(_DWORD *)(v127 + 56);
        v170 = *(_DWORD *)(v127 + 60);
LABEL_312:
        v178 = (float)v168 / (float)(v128 * (float)(v170 * v169));
        if (v178 >= 0.2605 || v128 <= 0.0 || (LODWORD(v78) = 10.0, v128 > 10.0))
        {
          v179 = v178 >= 0.217 || v128 <= 10.0;
          LODWORD(v78) = 12.0;
          if (v179 || v128 > 12.0)
          {
            v181 = v178 >= 0.1736 || v128 <= 12.0;
            LODWORD(v78) = 15.0;
            if (v181 || v128 > 15.0)
            {
              v183 = v178 >= 0.13025 || v128 <= 15.0;
              LODWORD(v78) = 24.0;
              if (v183 || v128 > 24.0)
              {
                v185 = v178 >= 0.1085 || v128 <= 24.0;
                LODWORD(v78) = 30.0;
                if (v185 || v128 > 30.0)
                {
                  v187 = v178 >= 0.08683 || v128 <= 30.0;
                  LODWORD(v78) = 1112014848;
                  if (v187 || v128 > 50.0)
                  {
                    LODWORD(v78) = 1029007055;
                    v189 = v178 >= 0.0521 || v128 <= 50.0;
                    if (v189 || v128 > 60.0)
                      goto LABEL_384;
                  }
                }
              }
            }
          }
        }
        if (v97 > 7)
          goto LABEL_384;
        if (((1 << v97) & 0x21) != 0)
        {
          v191 = *(_DWORD *)(v11 + 2296);
          if (v191 <= 0x33)
          {
            v192 = v191 + 5;
            *(float *)&v78 = (float)(int)(v191 + 5);
            if (*(float *)(v11 + 416) > *(float *)&v78)
            {
              v193 = v191 >= 0x23;
              v194 = 40;
LABEL_375:
              if (!v193)
                v194 = v192;
              v196 = (float)v194;
LABEL_383:
              *(float *)(v11 + 416) = v196;
              goto LABEL_384;
            }
          }
          if (v97 == 2)
          {
LABEL_379:
            v197 = *(_DWORD *)(v11 + 2292);
            if (v197 > 0x33)
              goto LABEL_384;
            LODWORD(v78) = *(_DWORD *)(v11 + 416);
            v196 = (float)(int)(v197 + 5);
            if (*(float *)&v78 <= v196)
              goto LABEL_384;
            LODWORD(v78) = 1109393408;
            if (v197 >= 0x23)
              v196 = 40.0;
            goto LABEL_383;
          }
          if (v97 != 1)
            goto LABEL_384;
        }
        else if (((1 << v97) & 0x42) == 0)
        {
          if (((1 << v97) & 0x84) == 0)
          {
LABEL_384:
            v198 = byte_1B6932624[(int)*(float *)(v11 + 416) + 128];
            *(float *)(v11 + 416) = (float)(char)v198;
            *(_BYTE *)(v11 + 2233) = (v97 == 6 || v97 == 1) && v198 == 51;
            goto LABEL_389;
          }
          goto LABEL_379;
        }
        v195 = *(_DWORD *)(v11 + 2296);
        if (v195 <= 0x33)
        {
          v192 = v195 + 7;
          *(float *)&v78 = (float)(int)(v195 + 7);
          if (*(float *)(v11 + 416) > *(float *)&v78)
          {
            v193 = v195 >= 0x23;
            v194 = 42;
            goto LABEL_375;
          }
        }
        if (v97 != 2)
          goto LABEL_384;
        goto LABEL_379;
      }
      v134 = *(_QWORD *)(v11 + 512);
      v34 = v383;
      if (*(_DWORD *)v134)
      {
        v128 = *(float *)(v134 + 76);
        v407[80] = 0;
        if (*(_DWORD *)v134 != 32)
          goto LABEL_304;
        v135 = *(_QWORD *)(v96 + 128);
        v136 = *(_DWORD *)(v96 + 232);
        v137 = *(_DWORD *)(v11 + 2424);
        if (v137)
          *(_DWORD *)(v11 + 2420) = (float)((float)((float)*(unsigned int *)(v96 + 4928)
                                                                / *(float *)(v96 + 4940))
                                                        * (float)v137);
        *(double *)(v134 + 3992) = (float)*(unsigned int *)(v96 + 4928);
        *(double *)(v134 + 4000) = *(float *)(v96 + 4940);
        v138 = *(unsigned __int8 *)(v96 + 1368);
        if (*(_BYTE *)(v96 + 1368))
        {
          v139 = 0;
          if (v138 != 2 && v138 != 7)
          {
            if (v138 == 5)
              v139 = 1;
            else
              v139 = 2;
          }
        }
        else
        {
          v139 = 1;
        }
        *(_DWORD *)(v134 + 112) = v139;
        LOBYTE(v139) = *(_BYTE *)(v11 + 528);
        if ((_BYTE)v139)
        {
          if (!*(_WORD *)(*(_QWORD *)(a1 + 136) + 326))
          {
            LOBYTE(v139) = *(_BYTE *)(v11 + 2628);
            if (!(_BYTE)v139)
              goto LABEL_303;
            LOBYTE(v139) = 0;
            v341 = *(unsigned __int8 *)(v96 + 1368);
            if (v341 > 8 || ((1 << v341) & 0x129) == 0)
              goto LABEL_303;
            v342 = *(_QWORD *)(*(_QWORD *)(v11 + 352) + 22824);
            v343 = *(unsigned int *)(v342 + 12);
            if ((int)v343 >= 1)
            {
              v139 = 0;
              v344 = (uint64_t *)(v342 + 216);
              do
              {
                v345 = *v344;
                if (!*(_BYTE *)(*v344 + 1398) && !*(_BYTE *)(v345 + 1394))
                  v139 |= *(_DWORD *)(v345 + 5004);
                ++v344;
                --v343;
              }
              while (v343);
              goto LABEL_303;
            }
          }
          LOBYTE(v139) = 0;
        }
LABEL_303:
        sub_1B68B4E64(v134 + 40, v134 + 104, v135, v136, v134 + 160, (double *)(v134 + 3888), *(int **)(v11 + 520), (_DWORD *)v96, v139);
        v96 = v105;
        *(float *)(v11 + 416) = (float)*(int *)(v134 + 116);
        v85 = a1 + 56528;
LABEL_304:
        if (**(_DWORD **)(v11 + 512) != 32 || *(_DWORD *)(v11 + 504) != 1)
          goto LABEL_384;
        if (v97 == 6 || v97 == 1)
        {
          v177 = *(_DWORD *)(v11 + 2292);
          if (v177 <= 0x33)
          {
            v79 = 1.75;
            v78 = (double)v177 * 1.75;
            if (v78 <= *(float *)(v11 + 416))
              *(float *)(v11 + 416) = (float)(v177 + 2);
          }
        }
        v168 = *(_DWORD *)(v134 + 80);
        v169 = *(_DWORD *)(v134 + 48);
        v170 = *(_DWORD *)(v134 + 52);
        goto LABEL_312;
      }
      if (!*(_DWORD *)v412)
      {
        LODWORD(v78) = *(_DWORD *)(v11 + 416);
        *(float *)(v11 + 416) = *(float *)&v78 + (float)*(char *)(v96 + 1360);
LABEL_389:
        v199 = a1 + 5076;
        goto LABEL_390;
      }
      v140 = *(_QWORD *)(a1 + 152);
      v407[80] = 0;
      if (*(_DWORD *)v140 != 2)
      {
LABEL_673:
        v199 = a1 + 5076;
        *(_BYTE *)(v11 + 2233) = (v97 == 6 || v97 == 1) && (LODWORD(v78) = 1112276992, *(float *)(v11 + 416) == 51.0);
LABEL_390:
        if (v100)
        {
          v200 = *(unsigned int *)(*(_QWORD *)(v11 + 392) + 1276);
          if ((v200 & 0x80000000) == 0)
          {
            v201 = *(_QWORD *)(a3 + 16);
            if (v201)
            {
              if (*(_DWORD *)(a3 + 4) > v200)
                *(_DWORD *)(v201 + 8 * v200) = *(_DWORD *)(v11 + 416);
            }
          }
        }
        if (!*(_BYTE *)(a1 + 1024) || !v411)
        {
LABEL_410:
          v65 = a1;
          if (*(_BYTE *)(v11 + 2639))
          {
            v209 = *(float **)(a1 + 1040);
            v210 = *(float *)(v11 + 416);
            v211 = *(unsigned __int8 *)(a1 + 1026);
            v212 = (v211 - 1);
            if (v211 == 1)
            {
              v214 = 0.0;
            }
            else
            {
              v213 = v211 - 2;
              v214 = 0.0;
              do
              {
                v215 = v209[v213];
                v209[v212] = v215;
                v214 = v214 + v215;
                --v213;
                --v212;
              }
              while ((_DWORD)v212);
            }
            *v209 = v210;
            v216 = v210 + v214;
            LOBYTE(v214) = *(_BYTE *)(a1 + 1026);
            *(float *)&v78 = (float)LODWORD(v214);
            *(float *)(a1 + 1048) = v216 / *(float *)&v78;
            if (*(_BYTE *)(v11 + 2639))
            {
              if (*(_DWORD *)v412)
              {
                v217 = (int)*(double *)(v412 + 304);
              }
              else
              {
                LODWORD(v78) = *(_DWORD *)(v96 + 4940);
                v217 = (int)(float)((float)*(unsigned int *)(v96 + 4928) / *(float *)&v78);
              }
              v218 = 3;
              if (*(_BYTE *)(v199 + 348))
              {
                if (*(_BYTE *)(*(_QWORD *)(a1 + 5416) + 106))
                  v218 = 3;
                else
                  v218 = 5;
              }
              v219 = *(_DWORD **)(a1 + 5400);
              v220 = v218 * v217;
              v221 = v219[8];
              if (v220 < v221)
                v221 = v220;
              v222 = v221 + v219[12];
              v219[10] = v220;
              v219[11] = v222;
            }
          }
          v223 = *(unsigned int *)(a4 + 52);
          v420[0] = 0;
          v224 = *(_QWORD *)(v11 + 392);
          *(_BYTE *)(v224 + 5001) = 0;
          v408 = v224;
          if (*(_BYTE *)(v11 + 485))
          {
            *(_DWORD *)(v11 + 492) = 0;
            v225 = a4 + 16;
LABEL_429:
            v226 = *(_QWORD *)(v11 + 2672);
            if (!v226 || *(_BYTE *)(v226 + 32))
            {
              v227 = *(_QWORD *)(v11 + 392);
              if (*(_DWORD *)(v227 + 1276))
              {
                *(_BYTE *)(v11 + 2685) = *(_BYTE *)(a1 + 1024);
                if (*(_DWORD *)(v227 + 228) <= 0x1DFu)
                {
                  *(_DWORD *)(v11 + 2688) = 1;
                  *(_WORD *)(v11 + 2692) = 257;
                  *(_BYTE *)(v11 + 2694) = 0;
                }
              }
            }
            v385 = 0;
            v386 = 0;
            *(_BYTE *)(v224 + 17) = 0;
            goto LABEL_435;
          }
          v324 = v224;
          v325 = v85;
          v326 = malloc_type_calloc(32 * *(_DWORD *)(v85 + 572) * *(_DWORD *)(v85 + 568), 1uLL, 0x4AE20AB7uLL);
          *(_QWORD *)(v324 + 5016) = v326;
          v225 = a4 + 16;
          if (!v326)
          {
            v59 = 4294967188;
            goto LABEL_617;
          }
          v327 = *(_DWORD *)(v325 + 572) * *(_DWORD *)(v325 + 568);
          v85 = v325;
          v224 = v408;
          if (v327)
          {
            v328 = 0;
            v329 = 0;
            do
            {
              *(_BYTE *)(*(_QWORD *)(v408 + 5016) + v328 + 26) = 0;
              *(_BYTE *)(*(_QWORD *)(v408 + 5016) + v328 + 24) = 32;
              *(_BYTE *)(*(_QWORD *)(v408 + 5016) + v328 + 25) = 32;
              ++v329;
              v328 += 32;
            }
            while (v329 < (*(_DWORD *)(v85 + 572) * *(_DWORD *)(v85 + 568)));
          }
          v330 = *(unsigned __int8 *)(v11 + 485);
          *(_DWORD *)(v11 + 492) = 0;
          if (v330)
            goto LABEL_429;
          if (!*(_BYTE *)(v11 + 2620)
            || *(_BYTE *)(v11 + 2621)
            && ((v331 = *(_QWORD *)(a1 + 5392)) == 0 || (v78 = 4.0, *(double *)(v331 + 136) >= 4.0)))
          {
            v385 = 0;
            v386 = 0;
            goto LABEL_701;
          }
          if (*(_BYTE *)(v408 + 1393) || *(_BYTE *)(v408 + 1392))
          {
            v332 = 1;
          }
          else
          {
            v361 = *(unsigned __int8 *)(v408 + 1368);
            v332 = v361 == 2 || v361 == 7;
          }
          if (!*(_BYTE *)(v11 + 2622)
            || a3
            && ((v333 = *(_QWORD *)(a3 + 16)) == 0
             || (v334 = *(unsigned int *)(v408 + 1276), *(_DWORD *)(a3 + 4) <= v334)
             || !*(_BYTE *)(v333 + 8 * v334 + 4)))
          {
            v386 = 0;
            goto LABEL_695;
          }
          BYTE4(v386) = 1;
          *(_BYTE *)(v11 + 2692) = 1;
          v335 = *(_QWORD *)(v11 + 520);
          if (!v335)
          {
            LOBYTE(v386) = 0;
            v101 = a3;
            goto LABEL_695;
          }
          v336 = *(_DWORD *)(v335 + 104);
          if (v336)
          {
            v337 = *(_DWORD *)(v335 + 136);
            v338 = v337 != 0;
            if (a3 && v337 && *(_BYTE *)(a3 + 11))
            {
              v339 = 0;
              LOBYTE(v336) = 1;
              v338 = 1;
LABEL_688:
              v101 = a3;
              v363 = a3 == 0;
              v364 = !v363 || !v338;
              if (v363 && v338)
                v365 = 0;
              else
                v365 = v339;
              BYTE4(v386) = v365;
              if (v364)
                v366 = v336;
              else
                v366 = 1;
              LOBYTE(v386) = v366;
              v25 = v410;
              v65 = a1;
              v34 = v383;
              v225 = a4 + 16;
              v85 = a1 + 56528;
              v224 = v408;
LABEL_695:
              HIDWORD(v385) = !v332;
              if (**(_DWORD **)(v65 + 152) == 2 && *(_BYTE *)(v224 + 1393) && !*(_DWORD *)(v224 + 1276))
              {
                if (*(_BYTE *)(*(_QWORD *)(v65 + 136) + 577) == 1)
                {
                  LOBYTE(v385) = 0;
                }
                else
                {
                  LOBYTE(v385) = 1;
                  *(_BYTE *)(v11 + 2692) = 1;
                }
                v25 = v410;
                v65 = a1;
                v101 = a3;
                v34 = v383;
                v225 = a4 + 16;
                v85 = a1 + 56528;
                v224 = v408;
              }
              else
              {
                LOBYTE(v385) = 0;
              }
              if (!*(_BYTE *)(v11 + 2639))
              {
LABEL_435:
                v405 = (uint64_t *)(v65 + 56256);
                if (*(_BYTE *)(v224 + 1368) == 2)
                  v228 = *(_DWORD *)(v65 + 1028) + 1;
                else
                  v228 = 0;
                v391 = 0;
                *(_DWORD *)(v65 + 1028) = v228;
                v377 = (void *)(v65 + 205456);
                v378 = v224 + 1152;
                *(_BYTE *)(v11 + 472) = 0;
                v376 = (const void *)(v65 + 119432);
                v380 = (int *)(v65 + 5464);
                v379 = (_QWORD *)(v11 + 2436);
                v384 = (char *)(v65 + 208142);
                v413 = v65 + 207926;
                v389 = 88 * v223;
                v390 = 88 * (v223 - 1);
                v381 = (unsigned int *)(v65 + 5588);
                v229 = 1986688113;
                v409 = v11;
                v395 = v13;
                v382 = v14;
                while (1)
                {
                  ++v391;
                  if (*(_DWORD *)(v11 + 476) != 1)
                  {
                    v420[0] = 0;
                    if (!*(_BYTE *)(v11 + 485) && *(_BYTE *)(v11 + 2620) && v391 >= 2)
                    {
                      v231 = *(_QWORD *)(v11 + 400);
                      memcpy(*(void **)(v224 + 128), *(const void **)(v231 + 128), (*(_DWORD *)(v224 + 196) * *(_DWORD *)(v224 + 232)));
                      v232 = *(const void **)(v231 + 136);
                      v34 = v383;
                      memcpy(*(void **)(v224 + 136), v232, (*(_DWORD *)(v224 + 212) * *(_DWORD *)(v224 + 248)));
                      sub_1B68B8C80(v378);
                      v229 = 1986688113;
                      v85 = a1 + 56528;
                    }
                  }
                  v233 = *(unsigned int *)(v11 + 2472);
                  if ((_DWORD)v233)
                    v234 = (*(_DWORD *)(v11 + 2468) & *(_DWORD *)(v11 + 2384) & (*(_BYTE *)(*(_QWORD *)(v65 + 136)
                                                                                          + 577) == 1)) == 0;
                  else
                    v234 = 1;
                  if (!v234)
                  {
                    v235 = 0;
                    v236 = *(_DWORD *)(v11 + 2388);
                    v237 = *(_DWORD *)(v11 + 2612);
                    v238 = 4 * v236 / v237;
                    do
                    {
                      v74 = 0;
                      v239 = v235 + 1;
                      if (v237 >= 4)
                      {
                        v240 = v236 * v235;
                        v241 = v236 * v239 - 1;
                        v76 = v236 * (_DWORD)v235 + v238;
                        v242 = v76 - 1;
                        if ((int)v76 - 1 <= v241)
                        {
                          v243 = *(unsigned __int16 *)(v11 + 2476);
                          v244 = v237 >> 2;
                          while (1)
                          {
                            v75 = v76;
                            if (v242 < v243 || v240 > v243)
                              break;
LABEL_465:
                            v74 = 0;
                            if (--v244)
                            {
                              v76 = v75 + v238;
                              v242 = v76 - 1;
                              v240 = v75;
                              if ((int)v76 - 1 <= v241)
                                continue;
                            }
                            goto LABEL_469;
                          }
                          v245 = 0;
                          while (v233 - 1 != v245)
                          {
                            v76 = *(unsigned __int16 *)(v413 + 2 * v245++);
                            if (v240 <= v76 && v242 >= v76)
                            {
                              if (v245 < v233)
                                goto LABEL_465;
                              break;
                            }
                          }
                          v74 = 1;
                        }
                      }
LABEL_469:
                      *(_BYTE *)(v65 + v235++ + 208064) = v74;
                    }
                    while (v239 != 4);
                  }
                  v247 = *(_QWORD *)(v11 + 392);
                  if (*(_BYTE *)(v65 + 1057) == 1)
                  {
                    v248 = *(unsigned __int16 *)(v247 + 19112);
                    v249 = *(unsigned __int16 *)(v247 + 19114) + 32;
                    if (v249 >= *(_DWORD *)(v247 + 196))
                      v249 = *(_DWORD *)(v247 + 196);
                  }
                  else
                  {
                    v248 = *(_DWORD *)(v247 + 228);
                    v249 = *(_DWORD *)(v247 + 196);
                  }
                  *(_DWORD *)(v11 + 2644) = v248 >> 4;
                  *(_DWORD *)(v11 + 2648) = v249 >> 4;
                  if (!*(_BYTE *)(v11 + 485))
                    break;
                  if (*(_BYTE *)(v11 + 2620) && v391 >= 2)
                    *(_DWORD *)(*(_QWORD *)(v11 + 2672) + 2976) = 1;
                  v250 = sub_1B68D6BD8(v65, v225, 0, v74, v75, v76);
                  if ((_DWORD)v250)
                  {
LABEL_613:
                    v59 = v250;
                    goto LABEL_614;
                  }
                  v251 = *(_QWORD *)(v11 + 2672);
                  if (!v251 || *(_BYTE *)(v251 + 32))
                  {
                    v252 = sub_1B68D2920(v65, (uint64_t)v398, *(_QWORD *)(v11 + 392));
                    if ((_DWORD)v252)
                    {
                      v59 = v252;
LABEL_614:
                      CFLog();
                      goto LABEL_617;
                    }
                  }
LABEL_570:
                  v321 = *(_QWORD *)(v11 + 2672);
                  v225 = a4 + 16;
                  if (!v321 || *(_BYTE *)(v321 + 32))
                    sub_1B68D2A80(v65, *(_QWORD *)(v11 + 392), v101, (uint64_t)v398, v391, *(_DWORD *)(v11 + 2688), *(unsigned __int8 *)(v11 + 2692), SHIDWORD(v385), *(double *)&v229, v78, SBYTE4(v386), v386, v385, *(_BYTE *)(v11 + 2693), *(_BYTE *)(v11 + 2685), v420, v384);
                  v85 = a1 + 56528;
                  v229 = 1986688113;
                  if (v420[0] != 1)
                  {
                    v322 = *(_QWORD *)(v11 + 2672);
                    if (!v322
                      || (*(_BYTE *)(v322 + 3462) = 0, (v323 = *(_QWORD *)(v11 + 2672)) == 0)
                      || *(_BYTE *)(v323 + 32))
                    {
                      sub_1B68D342C(v65, *(_QWORD *)(v11 + 392), v101, (uint64_t)v398, v391);
                    }
                    if (!*(_BYTE *)(v11 + 485) && *(_DWORD *)(v11 + 476) != 1)
                    {
                      if (*(_BYTE *)(v375 + 17)
                        || *(_BYTE *)(v11 + 2235) && !*(_BYTE *)(*(_QWORD *)(v11 + 392) + 1394)
                        || (v357 = *(unsigned int *)(a4 + 52), !(_DWORD)v357))
                      {
LABEL_581:
                        bzero(*(void **)(*(_QWORD *)(v11 + 408) + 32), 4 * *(unsigned int *)(*(_QWORD *)(v11 + 408) + 20));
                        v34 = v383;
                      }
                      else
                      {
                        v358 = *(_QWORD *)(v11 + 408);
                        v359 = (unsigned __int8 *)(*(_QWORD *)(v358 + 48) + 9);
                        while (1)
                        {
                          v360 = *v359;
                          v359 += 12;
                          if (v360 != 1)
                            break;
                          if (!--v357)
                            goto LABEL_581;
                        }
                        v367 = *(unsigned int *)(v358 + 20);
                        v368 = *(pthread_mutex_t **)(v358 + 160);
                        if (v368)
                          pthread_mutex_lock(v368);
                        if ((_DWORD)v367)
                          memset(*(void **)(v358 + 168), 10, v367);
                        v369 = *(pthread_mutex_t **)(v358 + 160);
                        if (v369)
                          pthread_mutex_unlock(v369);
                        v59 = sub_1B68C552C(*(_QWORD *)(v11 + 408), (_DWORD *)(v375 + 96), v375 + 1152);
                        v65 = a1;
                        if (*(_BYTE *)(a1 + 1600))
                        {
                          v370 = *(_WORD **)(a1 + 1608);
                          if (v370)
                          {
                            v371 = *(_QWORD *)(a1 + 136);
                            v372 = (int)*(float *)(v371 + 60);
                            v373 = *(_DWORD *)(v371 + 304);
                            if (v373 && v373 < 2 * v372 || *(_DWORD *)(v375 + 1276) % v372)
                              v374 = 0;
                            else
                              v374 = sub_1B68AC3F8(*(_QWORD *)(v375 + 128), *(_QWORD *)(v375 + 136), *(_DWORD *)(v375 + 232), *(_DWORD *)(v375 + 248), *(_DWORD *)(v375 + 228), *(_DWORD *)(v375 + 196));
                            *v370 = __rev16(v374);
                            v65 = a1;
                          }
                        }
                        v25 = v410;
                        v101 = a3;
                        v34 = v383;
                        if ((_DWORD)v59)
                        {
LABEL_617:
                          CFLog();
                          goto LABEL_618;
                        }
                      }
                    }
                    if (!v388 || *(_BYTE *)(v388 + 32))
                    {
                      sub_1B68D4344(v65, *(_QWORD *)(v11 + 392), (uint64_t)v398);
                      sub_1B68D52BC(v65, *(_QWORD *)(v11 + 392), v101, (uint64_t)v398, a4);
                    }
                    v63 = (_DWORD *)a4;
                    *(_DWORD *)a4 = 1;
                    v64 = *(_QWORD *)(v11 + 2672);
                    v62 = a1 + 5076;
                    if (v64)
                    {
LABEL_100:
                      if (!*(_BYTE *)(v64 + 32))
                        goto LABEL_102;
                    }
LABEL_101:
                    *v63 = *(_BYTE *)(v25 + 317) == 0;
                    sub_1B68D5CF4(v65, (uint64_t)v398, v13, v34);
LABEL_102:
                    if (v14[1] && *(_BYTE *)(v62 + 349) && *v14 && !*(_BYTE *)(*(_QWORD *)(v11 + 392) + 17))
                    {
                      v66 = v34;
                      v67 = *(_QWORD *)(v65 + 5416);
                      v68 = *(_QWORD *)(v65 + 136);
                      if (*(_BYTE *)(v68 + 4856))
                      {
                        *(_BYTE *)(v68 + 4896) = 1;
                        v69 = *(_DWORD *)(v68 + 4860);
                        v70 = *(int *)(v68 + 4864);
                        *(_DWORD *)(v68 + 4860) = v70;
                        *(_DWORD *)(v68 + 4864) = v69;
                        *(_QWORD *)(v67 + 176) = *(_QWORD *)(v68 + 4872 + 8 * v70);
                        *(_QWORD *)(v67 + 168) = *(_QWORD *)(v68 + 4872 + 8 * *(int *)(v68 + 4864));
                      }
                      else
                      {
                        v112 = *(const void **)(v67 + 152);
                        if (v112)
                          CFRelease(v112);
                        *(_QWORD *)(v67 + 152) = CFRetain(*(CFTypeRef *)(v67 + 144));
                      }
                      v34 = v66;
                    }
                    *a7 = 2;
                    goto LABEL_177;
                  }
                }
                if (*(_BYTE *)(v11 + 487))
                {
                  if (*(_QWORD *)(v11 + 2672))
                  {
                    if (*(_DWORD *)(v247 + 60) == -1)
                    {
                      v250 = sub_1B68D6BD8(v65, (uint64_t)v398, 1, v74, v75, v76);
                      v229 = 1986688113;
                      v85 = a1 + 56528;
                      if ((_DWORD)v250)
                        goto LABEL_613;
                    }
                  }
                }
                v387 = *v398;
                if (!*v398)
                {
                  CFLog();
                  v59 = 4294958324;
                  goto LABEL_617;
                }
                if (*(_DWORD *)(v11 + 476) == 1)
                {
                  *(_DWORD *)(v11 + 2432) = 0;
                  v253 = *(unsigned int *)(v85 + 552);
                  v254 = *(unsigned int *)(v85 + 556);
                  v255 = v405;
                  if ((int)v253 >= 1)
                  {
                    do
                    {
                      v256 = *v255++;
                      ++*(_DWORD *)(v256 + 8);
                      --v253;
                    }
                    while (v253);
                  }
                  v257 = (uint64_t *)v85;
                  if ((int)v254 >= 1)
                  {
                    do
                    {
                      v258 = *v257++;
                      ++*(_DWORD *)(v258 + 8);
                      --v254;
                    }
                    while (v254);
                  }
                  v259 = *(_DWORD *)(v11 + 2612);
                  if (v259)
                  {
                    v260 = 0;
                    v392 = *(_DWORD *)(v85 + 572) * *(_DWORD *)(v85 + 568);
                    v393 = *(unsigned int *)(v11 + 2612);
                    v394 = v223;
                    while (1)
                    {
                      v261 = (_DWORD *)(v65 + 88 * v260);
                      v262 = v261 + 1380;
                      v263 = v392 * (int)v260 / v259;
                      v396 = v260 + 1;
                      v264 = v392 * ((int)v260 + 1) / v259;
                      v261[1383] = v263;
                      v261[1384] = v264 - v263;
                      v261[1382] = v260;
                      v265 = (uint64_t)&v261[22 * v260 + 1380];
                      v268 = *(void **)(v265 + 80);
                      v267 = (_QWORD *)(v265 + 80);
                      v266 = v268;
                      v269 = (388 * *((_DWORD *)v267 - 16) + 512);
                      if (!v268)
                        goto LABEL_498;
                      if (v262[22 * v260 + 18] < v269)
                        break;
LABEL_499:
                      v416 = 0;
                      v417 = v262;
                      v415[0] = v65;
                      v415[1] = v65 + 50640 * v260 + 5616;
                      v271 = *(_DWORD *)(v85 + 568);
                      v272 = v263 / v271;
                      v273 = (int)(v264 - 1) / v271;
                      v274 = v273 - v263 / v271;
                      v229 = 1986688113;
                      if (v273 >= v263 / v271)
                      {
                        v275 = 0;
                        do
                        {
                          v276 = v272 + v275;
                          v277 = v263;
                          if (v275)
                            v277 = *(_DWORD *)(v85 + 568) * v276;
                          v418 = v277;
                          v278 = v264;
                          if (v274 != v275)
                            v278 = *(_DWORD *)(v85 + 568) + *(_DWORD *)(v85 + 568) * (v272 + v275);
                          v279 = v278 - v277;
                          v419 = v278 - v277;
                          if (*v405)
                          {
                            sub_1B68DB134(*v405, v272 + v275, 4 * *(_DWORD *)(v409 + 540));
                            v85 = a1 + 56528;
                          }
                          if (*(_QWORD *)v85)
                            sub_1B68DB134(*(_QWORD *)v85, v272 + v275, 4 * *(_DWORD *)(v409 + 540));
                          sub_1B68CD758((uint64_t)v415);
                          v85 = a1 + 56528;
                          v229 = 1986688113;
                          if (v279 == *(_DWORD *)(a1 + 57096))
                          {
                            v280 = *(pthread_mutex_t **)(v408 + 72);
                            if (v280)
                            {
                              pthread_mutex_lock(v280);
                              v229 = 1986688113;
                              v85 = a1 + 56528;
                            }
                            v281 = v272 - 2 + v275;
                            if (v276 >= v273)
                              v281 = v273;
                            *(_DWORD *)(v408 + 64) = v281;
                            v282 = *(pthread_cond_t **)(v408 + 80);
                            if (v282)
                            {
                              pthread_cond_broadcast(v282);
                              v229 = 1986688113;
                              v85 = a1 + 56528;
                            }
                            v283 = *(pthread_mutex_t **)(v408 + 72);
                            if (v283)
                            {
                              pthread_mutex_unlock(v283);
                              v229 = 1986688113;
                              v85 = a1 + 56528;
                            }
                          }
                          ++v275;
                        }
                        while (v274 + 1 != v275);
                      }
                      v13 = v395;
                      v260 = v396;
                      v259 = v393;
                      v223 = v394;
                      v65 = a1;
                      if (v396 == v393)
                        goto LABEL_520;
                    }
                    free(v266);
LABEL_498:
                    v262[22 * v260 + 18] = v269;
                    v270 = malloc_type_malloc(v269, 0x82ECD37AuLL);
                    v85 = a1 + 56528;
                    *v267 = v270;
                    goto LABEL_499;
                  }
LABEL_520:
                  v284 = *(unsigned int *)(v85 + 552);
                  v285 = *(unsigned int *)(v85 + 556);
                  v286 = v405;
                  if ((int)v284 >= 1)
                  {
                    do
                    {
                      v287 = *v286++;
                      --*(_DWORD *)(v287 + 8);
                      --v284;
                    }
                    while (v284);
                  }
                  v288 = (uint64_t *)v85;
                  v11 = v409;
                  if ((int)v285 >= 1)
                  {
                    do
                    {
                      v289 = *v288++;
                      --*(_DWORD *)(v289 + 8);
                      --v285;
                    }
                    while (v285);
                  }
                  LODWORD(v290) = v387;
                  v291 = a4;
                  if ((int)v223 >= 1)
                  {
                    v292 = 0;
                    v293 = v381;
                    v290 = v387;
                    do
                    {
                      v294 = *v293 + 8;
                      *(_BYTE *)v290 = HIBYTE(v294);
                      *(_BYTE *)(v290 + 1) = BYTE2(v294);
                      *(_BYTE *)(v290 + 2) = BYTE1(v294);
                      *(_BYTE *)(v290 + 3) = v294;
                      *(_DWORD *)(v290 + 4) = 1986688113;
                      v295 = (void *)(v290 + 8);
                      *(_QWORD *)(*(_QWORD *)(a4 + 72) + 8 * v292) = v295;
                      *(_DWORD *)(*(_QWORD *)(a4 + 64) + 4 * v292) = *v293;
                      memcpy(v295, *(const void **)(v293 + 3), *v293);
                      v229 = 1986688113;
                      v296 = *v293;
                      v293 += 22;
                      v290 = (uint64_t)v295 + v296;
                      ++v292;
                    }
                    while (v223 != v292);
                  }
                }
                else
                {
                  v297 = *(_QWORD *)(v11 + 352);
                  v298 = *(unsigned int *)(v297 + 23656);
                  if ((int)v298 >= 1)
                  {
                    for (i = 0; i != v298; ++i)
                    {
                      v300 = *(_QWORD *)(v297 + 22840 + 8 * i);
                      if (v300)
                      {
                        v301 = sub_1B68BB95C(*(unsigned __int8 **)(v300 + 488));
                        if ((_DWORD)v301)
                        {
LABEL_610:
                          v59 = v301;
                          goto LABEL_617;
                        }
                        v302 = *(_DWORD **)(v300 + 488);
                        if (v302[38])
                        {
                          v303 = sub_1B68FE2A4;
                          if (!byte_1EF13A090)
                            v303 = 0;
                          v303(*(_QWORD *)(v300 + 488));
                          v304 = *(unsigned int *)(v65 + 5504);
                          v302[42] = *(_DWORD *)(v11 + 2644);
                          v302[43] = *(_DWORD *)(v11 + 2648);
                          if ((int)v304 >= 1)
                          {
                            v305 = 0;
                            do
                            {
                              *(_QWORD *)(*(_QWORD *)(v65 + 5496) + v305) = v302;
                              v305 += 16;
                            }
                            while (16 * v304 != v305);
                          }
                          sub_1B68CAEAC(*(_QWORD *)(v65 + 5512), *(_QWORD *)(v65 + 5488), v304);
                          v302[38] = 0;
                        }
                      }
                    }
                  }
                  v306 = *(unsigned int *)(v297 + 23660);
                  if ((int)v306 >= 1)
                  {
                    for (j = 0; j != v306; ++j)
                    {
                      v308 = *(_QWORD *)(v297 + 8 * j + 23112);
                      if (v308)
                      {
                        v301 = sub_1B68BB95C(*(unsigned __int8 **)(v308 + 488));
                        if ((_DWORD)v301)
                          goto LABEL_610;
                        v309 = *(_DWORD **)(v308 + 488);
                        if (v309[38])
                        {
                          v310 = sub_1B68FE2A4;
                          if (!byte_1EF13A090)
                            v310 = 0;
                          v310(*(_QWORD *)(v308 + 488));
                          v309[42] = *(_DWORD *)(v11 + 2644);
                          v309[43] = *(_DWORD *)(v11 + 2648);
                          v311 = *(unsigned int *)(v65 + 5504);
                          if ((int)v311 >= 1)
                          {
                            v312 = 0;
                            do
                            {
                              *(_QWORD *)(*(_QWORD *)(v65 + 5496) + v312) = v309;
                              v312 += 16;
                            }
                            while (16 * v311 != v312);
                          }
                          sub_1B68CAEAC(*(_QWORD *)(v65 + 5512), *(_QWORD *)(v65 + 5488), v311);
                          v309[38] = 0;
                        }
                      }
                    }
                  }
                  *(_DWORD *)(v11 + 2432) = 0;
                  if (*(_BYTE *)(v11 + 344) && *(_BYTE *)v11)
                  {
                    *(_BYTE *)(v11 + 344) = 0;
                    memcpy(v377, v376, 0x150uLL);
                  }
                  v313 = sub_1B68DD98C(v380, v65, v223, *(_BYTE *)(v11 + 2232) != 0, a6 != 0);
                  v13 = v395;
                  if ((_DWORD)v313)
                  {
                    v59 = v313;
                    goto LABEL_614;
                  }
                  sub_1B68CAEAC(*(_QWORD *)(v65 + 5512), *(_QWORD *)(v65 + 5472), v223);
                  *v379 = 0;
                  LODWORD(v290) = v387;
                  v291 = a4;
                  v229 = 1986688113;
                  if ((int)v223 >= 1)
                  {
                    v314 = 0;
                    v315 = 0;
                    v316 = *(_QWORD *)(v65 + 5480);
                    v290 = v387;
                    do
                    {
                      v317 = *(_DWORD *)(v316 + v314 + 68) + 8;
                      *(_BYTE *)v290 = HIBYTE(v317);
                      *(_BYTE *)(v290 + 1) = BYTE2(v317);
                      *(_BYTE *)(v290 + 2) = BYTE1(v317);
                      *(_BYTE *)(v290 + 3) = v317;
                      *(_DWORD *)(v290 + 4) = 1986688113;
                      v318 = (void *)(v290 + 8);
                      *(_QWORD *)(*(_QWORD *)(v291 + 72) + 8 * v315) = v318;
                      *(_DWORD *)(*(_QWORD *)(v291 + 64) + 4 * v315) = *(_DWORD *)(*(_QWORD *)(v65 + 5480) + v314 + 68);
                      memcpy(v318, *(const void **)(*(_QWORD *)(v65 + 5480) + v314 + 80), *(int *)(*(_QWORD *)(v65 + 5480) + v314 + 68));
                      v316 = *(_QWORD *)(v65 + 5480);
                      v319 = *(int *)(v316 + v314 + 68);
                      v290 = (uint64_t)v318 + v319;
                      if ((v390 == v314 || !*(_BYTE *)(v65 + 1622))
                        && (*(_BYTE *)(v65 + 1619)
                         || *(_BYTE *)(v65 + 1618)
                         || *(_BYTE *)(v65 + 1620)
                         || *(_BYTE *)(a1 + 5076)
                         || *(_BYTE *)(v65 + 1621)))
                      {
                        v320 = sub_1B68D6168(v65, v408, v319, v290);
                        if (v320 > 0x3D090)
                        {
                          CFLog();
                          v59 = 4294967246;
                          goto LABEL_617;
                        }
                        v290 += v320;
                        *(_DWORD *)(*(_QWORD *)(a4 + 64) + 4 * v315) += v320;
                        v316 = *(_QWORD *)(v65 + 5480);
                        LODWORD(v319) = *(_DWORD *)(v316 + v314 + 68);
                      }
                      else
                      {
                        v320 = 0;
                      }
                      *(_DWORD *)(v11 + 2436) += 8 * (v320 + v319);
                      *(_DWORD *)(v11 + 2440) += 8 * *(_DWORD *)(v316 + v314 + 68);
                      ++v315;
                      v314 += 88;
                      v291 = a4;
                      v229 = 1986688113;
                    }
                    while (v389 != v314);
                  }
                }
                *(_DWORD *)(v291 + 24) = v290 - v387;
                v25 = v410;
                v14 = v382;
                v34 = v383;
                v101 = a3;
                v224 = v408;
                goto LABEL_570;
              }
              *(_WORD *)(v11 + 2692) = 257;
              *(_BYTE *)(v11 + 2694) = 0;
LABEL_701:
              if (*(_BYTE *)(v11 + 2639))
              {
                *(_BYTE *)(v11 + 2685) = *(_BYTE *)(v65 + 1024);
                *(_BYTE *)(v224 + 17) = 0;
                *(_DWORD *)(v11 + 2688) = 1;
              }
              goto LABEL_435;
            }
            LOBYTE(v336) = 0;
          }
          else
          {
            v338 = 0;
          }
          v339 = 1;
          goto LABEL_688;
        }
        if (*(_BYTE *)(v11 + 2637))
        {
          if (!*(_BYTE *)(v199 + 348))
          {
            if (*v407)
              v202 = 3;
            else
              v202 = 0;
            v203 = (float)v202;
            goto LABEL_406;
          }
        }
        else if (!*(_BYTE *)(v199 + 348))
        {
          v203 = 0.0;
LABEL_406:
          v204 = a1;
          v205 = v411;
          goto LABEL_407;
        }
        v204 = a1;
        v205 = v411;
        *(_BYTE *)(v411 + 812) = *(unsigned __int16 *)(a1 + 5426) == 1;
        v203 = 0.0;
LABEL_407:
        LODWORD(v79) = *(_DWORD *)(v96 + 4928);
        v206 = sub_1B68B7CE4((unsigned __int8 *)v205, *(unsigned __int8 *)(v204 + 1025), *(_DWORD *)(v96 + 1276), *(unsigned __int8 *)(v96 + 1416), *(_QWORD *)(v204 + 5416), *(float *)(v11 + 416), *(float *)(v96 + 4936), (double)*(unint64_t *)&v79, v203);
        v96 = v105;
        *(float *)(v11 + 416) = v206;
        LODWORD(v78) = *(_DWORD *)(v105 + 4940);
        v207 = *(double *)(v205 + 136);
        *(float *)&v207 = v207;
        v85 = a1 + 56528;
        if (*(float *)&v78 != *(float *)&v207)
        {
          *(_DWORD *)(v105 + 4940) = LODWORD(v207);
          if (*(_DWORD *)v412)
          {
            sub_1B68A3438(v412, v105 + 4928, (char)v97, v207);
            v96 = v105;
            v85 = a1 + 56528;
            *(_DWORD *)(v412 + 236) = *(_DWORD *)(v105 + 4984);
            v208 = *(_DWORD *)(v412 + 248);
            *(_DWORD *)(v412 + 240) = *(_DWORD *)(v105 + 4988);
            *(_DWORD *)(v412 + 244) = v208;
          }
        }
        goto LABEL_410;
      }
      v141 = *(unsigned __int8 *)(v96 + 1368);
      if (v141 <= 9 && ((1 << v141) & 0x294) != 0)
        v142 = 4968;
      else
        v142 = 4976;
      v143 = *(double *)(v96 + v142);
      *(double *)(v140 + 456) = v143;
      v144 = *(_QWORD *)(a1 + 5400);
      if (v144)
      {
        *(_DWORD *)(v96 + 4944) = *(_DWORD *)(v144 + 28);
        *(_DWORD *)(v96 + 4948) = *(_DWORD *)(*(_QWORD *)(a1 + 5400) + 32);
      }
      v145 = *(_QWORD *)(a1 + 5408);
      if (v145)
      {
        *(_DWORD *)(v96 + 4952) = *(_DWORD *)(v145 + 28);
        *(_DWORD *)(v96 + 4956) = *(_DWORD *)(*(_QWORD *)(a1 + 5408) + 32);
      }
      sub_1B68A3438(v140, v96 + 4928, *(char *)(v96 + 1368), v143);
      *(_DWORD *)(v140 + 236) = *(_DWORD *)(v105 + 4984);
      v146 = *(_DWORD *)(v140 + 248);
      *(_DWORD *)(v140 + 240) = *(_DWORD *)(v105 + 4988);
      *(_DWORD *)(v140 + 244) = v146;
      if (*(_DWORD *)(v11 + 2424) && *(double *)(v140 + 272) != 0.0)
        *(_DWORD *)(v11 + 2420) = vcvts_n_u32_f32((float)*(unsigned int *)(v105 + 4928) / *(float *)(v105 + 4940), 2uLL);
      if (*(_BYTE *)(v11 + 528) && !*(_WORD *)(*(_QWORD *)(a1 + 136) + 326) && *(_BYTE *)(v11 + 2628))
      {
        LOBYTE(v147) = 0;
        v352 = *(unsigned __int8 *)(v105 + 1368);
        if (v352 > 8 || ((1 << v352) & 0x129) == 0)
          goto LABEL_254;
        v353 = *(_QWORD *)(*(_QWORD *)(v11 + 352) + 22824);
        v354 = *(unsigned int *)(v353 + 12);
        if ((int)v354 >= 1)
        {
          v147 = 0;
          v355 = (uint64_t *)(v353 + 216);
          do
          {
            v356 = *v355;
            if (!*(_BYTE *)(*v355 + 1398) && !*(_BYTE *)(v356 + 1394))
              v147 |= *(_DWORD *)(v356 + 5004);
            ++v355;
            --v354;
          }
          while (v354);
LABEL_254:
          v148 = *(unsigned __int8 *)(a1 + 1057);
          if (*(_BYTE *)(a1 + 1057))
          {
            v149 = (unsigned __int16 *)(v105 + 19112);
            v150 = (unsigned __int16 *)(v105 + 19126);
            if (v148 == 1)
              v150 = (unsigned __int16 *)(v105 + 19114);
            else
              v149 = (unsigned __int16 *)(v105 + 19124);
            v151 = *v150 * *v149;
            v152 = *(_QWORD *)(v11 + 352);
            v153 = *(_QWORD *)(v152 + 22840);
            if (v153)
            {
              v154 = *(unsigned int *)(v152 + 23656);
              if ((int)v154 >= 1)
              {
                v155 = (uint64_t *)(v152 + 22840);
                v156 = *(_DWORD *)(*(_QWORD *)(v11 + 392) + 1288);
                v157 = v156 - *(_DWORD *)(v153 + 1288);
                do
                {
                  v159 = *v155++;
                  v158 = v159;
                  v160 = v156 - *(_DWORD *)(v159 + 1288);
                  if (v159)
                    v161 = v160 <= 0;
                  else
                    v161 = 1;
                  v162 = !v161;
                  if ((v162 & (v160 < v157)) != 0)
                  {
                    v153 = v158;
                    v157 = v160;
                  }
                  --v154;
                }
                while (v154);
              }
              v163 = (unsigned __int16 *)(v153 + 19112);
              v164 = (unsigned __int16 *)(v153 + 19124);
              v165 = 7;
              if (v148 == 1)
              {
                v165 = 1;
                v164 = v163;
              }
              v166 = v163[v165] * *v164;
            }
            else
            {
              v166 = v151;
            }
            LOBYTE(v148) = v166 < v151;
          }
          v346 = *v407;
          v406 = v147;
          v397 = v148;
          if (v346 == 1)
            v347 = 1;
          else
            v347 = v346 == 2 && v407[3] < 2u;
          sub_1B68A21E4(v140, a1, *(_DWORD *)(v105 + 1276), v347);
          sub_1B68A227C(v140, v105, (uint64_t *)(*(_QWORD *)(v11 + 352) + 22840), (uint64_t *)(*(_QWORD *)(v11 + 352) + 23112), v397, v406, *(_DWORD *)(v11 + 476) == 1);
          v349 = v348;
          *(float *)(v11 + 416) = v349;
          if (*(_BYTE *)(a1 + 5424))
          {
            v34 = v383;
            v85 = a1 + 56528;
            v96 = v105;
            if (!*(_QWORD *)(a1 + 5392))
            {
LABEL_672:
              *(float *)(v96 + 1364) = v349;
              goto LABEL_673;
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 5416) + 344) = (int)*(double *)(v140 + 304);
            v350 = *(_QWORD *)(a1 + 5392);
            if (*(_BYTE *)(v350 + 801))
              v351 = *(unsigned __int8 *)(v350 + 802) != 0;
            else
              v351 = 0;
            v349 = sub_1B68A2D08(v140, *(_QWORD *)(a1 + 5416), a1, v351);
            if (v349 < 10.0)
              v349 = 10.0;
            LODWORD(v78) = 1112276992;
            if (v349 > 51.0)
              v349 = 51.0;
            *(float *)(v11 + 416) = v349;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 136) + 4852) == 2)
            {
              v96 = v105;
              LODWORD(v78) = *(_DWORD *)(v105 + 4940);
              v34 = v383;
              v85 = a1 + 56528;
              if (*(float *)&v78 <= 5000000.0)
              {
                LODWORD(v78) = 22.0;
                if (v349 < 22.0)
                  v349 = 22.0;
                *(float *)(v11 + 416) = v349;
              }
              goto LABEL_672;
            }
          }
          v34 = v383;
          v85 = a1 + 56528;
          v96 = v105;
          goto LABEL_672;
        }
      }
      LOBYTE(v147) = 0;
      goto LABEL_254;
    }
    v107 = 250;
    if (*(_BYTE *)(a1 + 1024) && v411)
    {
      if (v412)
      {
        v108 = *(int *)(v412 + 216);
        if ((v108 - 1) < 2)
        {
          v107 = dword_1B6933F7C[v108];
          goto LABEL_193;
        }
        v107 = dword_1B6933F7C[v108];
      }
      v77 = *(double *)(v411 + 136);
      if (v77 <= (double)(3000 / v107))
      {
        v77 = 1000.0 / v77;
        v107 = 3 * v77;
      }
    }
LABEL_193:
    LODWORD(v77) = *(_DWORD *)(v96 + 4928);
    v77 = sub_1B689CB50(*(_QWORD *)(a1 + 5400), v107, *(int *)(v96 + 1332), *(_DWORD *)(v96 + 1336), *(unsigned __int8 *)(a1 + 5424), (double)*(unint64_t *)&v77, *(float *)(v96 + 4940));
    v96 = v105;
    v85 = a1 + 56528;
    if (v412)
    {
      v116 = *(_DWORD *)(v412 + 376);
      if (v116)
      {
        v79 = *(double *)(v412 + 280);
        HIDWORD(v77) = 1083129856;
        v78 = (double)(*(_DWORD *)(v105 + 4928) * v107) / (*(double *)(v412 + 288) * 1000.0);
        if (v79 < v78)
          v78 = *(double *)(v412 + 280);
        *(double *)(v412 + 280) = v78;
        if (v97 <= 9 && ((1 << v97) & 0x294) != 0)
        {
          v117 = *(float *)(v105 + 4940);
          v118 = (double)v116 * 1000.0 / v117;
          if (v118 < (double)v107)
            v118 = (double)v107;
          v119 = (int)v118;
          LODWORD(v118) = *(_DWORD *)(v105 + 4932);
          v77 = sub_1B689CB50(*(_QWORD *)(a1 + 5408), v119, *(int *)(v105 + 1332), *(_DWORD *)(v105 + 1336), *(unsigned __int8 *)(a1 + 5424), (double)*(unint64_t *)&v118, v117 / (double)v116);
          v96 = v105;
          v85 = a1 + 56528;
        }
      }
    }
    goto LABEL_202;
  }
  v59 = 0;
  *a7 = 0;
  *(_DWORD *)(a4 + 24) = 4;
  if (*(_DWORD *)(v11 + 476) == 1)
  {
    v60 = *(unsigned int **)(a8 + 24);
    if (v60)
      MEMORY[0x1BCC98920](*v60);
    return 0;
  }
  return v59;
}

void sub_1B68DD974(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EF13A080);
  _Unwind_Resume(a1);
}

uint64_t sub_1B68DD98C(int *a1, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v5;
  _DWORD *v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  void *v44;
  int v45;
  _DWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;

  v10 = (_DWORD *)(a2 + 57096);
  v11 = *a1;
  if (*a1 < a3)
  {
    free(*((void **)a1 + 1));
    if (*a1 >= 1)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        free(*(void **)(*((_QWORD *)a1 + 2) + v13 + 80));
        *(_QWORD *)(*((_QWORD *)a1 + 2) + v13 + 80) = 0;
        *(_DWORD *)(*((_QWORD *)a1 + 2) + v13 + 72) = 0;
        ++v14;
        v13 += 88;
      }
      while (v14 < *a1);
    }
    free(*((void **)a1 + 2));
    free(*((void **)a1 + 3));
    free(*((void **)a1 + 4));
    *a1 = a3;
    v15 = malloc_type_malloc(16 * a3, 0x82ECD37AuLL);
    *((_QWORD *)a1 + 1) = v15;
    if (!v15)
      goto LABEL_49;
    v16 = malloc_type_calloc(88 * *a1, 1uLL, 0x4AE20AB7uLL);
    *((_QWORD *)a1 + 2) = v16;
    if (!v16)
      goto LABEL_49;
    v17 = sub_1B68A3908();
    a1[10] = v17;
    v18 = v10[1];
    v19 = v18 / v17;
    if (v18 / v17 <= 2)
    {
      v17 = v18 / 3;
      a1[10] = v18 / 3;
      v19 = 3;
    }
    v20 = malloc_type_malloc(16 * v17, 0x82ECD37AuLL);
    *((_QWORD *)a1 + 3) = v20;
    if (!v20)
      goto LABEL_49;
    v21 = malloc_type_malloc(16 * a1[10], 0x82ECD37AuLL);
    *((_QWORD *)a1 + 4) = v21;
    if (!v21)
      goto LABEL_49;
    if (*a1 >= 1)
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      do
      {
        *(_QWORD *)(*((_QWORD *)a1 + 2) + v22) = a2;
        *(_DWORD *)(*((_QWORD *)a1 + 2) + v22 + 8) = v24;
        *(_BYTE *)(*((_QWORD *)a1 + 2) + v22 + 64) = a5;
        *(_QWORD *)(*((_QWORD *)a1 + 1) + v23) = sub_1B68DDE94;
        *(_QWORD *)(*((_QWORD *)a1 + 1) + v23 + 8) = *((_QWORD *)a1 + 2) + v22;
        ++v24;
        v23 += 16;
        v22 += 88;
      }
      while (v24 < *a1);
    }
    if (a1[10] >= 1)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      do
      {
        *(_QWORD *)(*((_QWORD *)a1 + 3) + v26) = sub_1B68DDFB8;
        *(_QWORD *)(*((_QWORD *)a1 + 3) + v26 + 8) = *(_QWORD *)(a2 + 5496) + v26;
        *(_DWORD *)(*((_QWORD *)a1 + 4) + v26 + 8) = v25;
        v5 = v27 + 1;
        v25 += v19;
        if (v27 == a1[10] - 1)
          v28 = v18;
        else
          v28 = v25;
        *(_DWORD *)(*((_QWORD *)a1 + 4) + v26 + 12) = v28;
        v26 += 16;
        v27 = v5;
      }
      while (v5 < a1[10]);
    }
  }
  v29 = v10[1] * *v10;
  if (a3 >= 6 && (a4 & 1) != 0)
  {
    v30 = 0;
    v31 = 0;
    v32 = 80 * v29 / 100;
    do
    {
      *(_DWORD *)(*((_QWORD *)a1 + 2) + v31 + 12) = v30 / 4;
      v30 += v32;
      *(_DWORD *)(*((_QWORD *)a1 + 2) + v31 + 16) = v30 / 4 - ((int)v5 >> 2);
      v31 += 88;
    }
    while (v31 != 352);
    v33 = 0;
    v34 = 0;
    v35 = a3 - 4;
    v36 = v29 - v32;
    do
    {
      v37 = v33 / v35;
      *(_DWORD *)(*((_QWORD *)a1 + 2) + v34 + 364) = v33 / v35 + v32;
      v33 += v36;
      *(_DWORD *)(*((_QWORD *)a1 + 2) + v34 + 368) = v33 / v35 - v37;
      v34 += 88;
    }
    while (88 * (a3 - 4) != v34);
  }
  else
  {
    if (a3 < 1)
    {
      v45 = 0;
      goto LABEL_38;
    }
    v38 = 0;
    v39 = 0;
    do
    {
      v40 = v38 / a3;
      *(_DWORD *)(*((_QWORD *)a1 + 2) + v39 + 12) = v38 / a3;
      v38 += v29;
      *(_DWORD *)(*((_QWORD *)a1 + 2) + v39 + 16) = v38 / a3 - v40;
      v39 += 88;
    }
    while (88 * a3 != v39);
  }
  v41 = 0;
  do
  {
    v42 = *((_QWORD *)a1 + 2);
    v43 = (388 * *(_DWORD *)(v42 + v41 + 16) + 512);
    v44 = *(void **)(v42 + v41 + 80);
    if (v44)
    {
      if (*(_DWORD *)(v42 + v41 + 72) >= v43)
        goto LABEL_35;
      free(v44);
      v42 = *((_QWORD *)a1 + 2);
    }
    *(_DWORD *)(v42 + v41 + 72) = v43;
    *(_QWORD *)(*((_QWORD *)a1 + 2) + v41 + 80) = malloc_type_malloc(v43, 0x82ECD37AuLL);
LABEL_35:
    v41 += 88;
  }
  while (88 * a3 != v41);
  v45 = 1;
LABEL_38:
  if (v11 >= a3 || *(_BYTE *)(a2 + 207682) != 2)
    return 0;
  v46 = *(_DWORD **)(a2 + 207696);
  if (*(_DWORD *)(a2 + 207712) >= a3)
  {
LABEL_44:
    if (v45)
    {
      v48 = a3;
      v49 = 12;
      do
      {
        *v46++ = *(_DWORD *)(*((_QWORD *)a1 + 2) + v49);
        v49 += 88;
        --v48;
      }
      while (v48);
    }
    return 0;
  }
  free(v46);
  free(*(void **)(a2 + 207704));
  *(_DWORD *)(a2 + 207712) = 0;
  *(_QWORD *)(a2 + 207696) = malloc_type_malloc(4 * a3, 0x82ECD37AuLL);
  v47 = malloc_type_malloc(a3, 0x82ECD37AuLL);
  *(_QWORD *)(a2 + 207704) = v47;
  v46 = *(_DWORD **)(a2 + 207696);
  if (v46 && v47)
  {
    *(_DWORD *)(a2 + 207712) = a3;
    goto LABEL_44;
  }
  free(v46);
  free(*(void **)(a2 + 207704));
  *(_QWORD *)(a2 + 207696) = 0;
LABEL_49:
  free(*((void **)a1 + 1));
  *((_QWORD *)a1 + 1) = 0;
  free(*((void **)a1 + 2));
  *((_QWORD *)a1 + 2) = 0;
  free(*((void **)a1 + 3));
  *((_QWORD *)a1 + 3) = 0;
  free(*((void **)a1 + 4));
  *((_QWORD *)a1 + 4) = 0;
  return 4294967188;
}

void sub_1B68DDE94(uint64_t *a1)
{
  uint64_t v2;
  pthread_mutex_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int32x2_t *v8;
  pthread_mutex_t *v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  char v16;
  _QWORD v17[2];
  int v18;
  uint64_t *v19;
  uint64_t v20;

  v2 = *a1;
  v3 = *(pthread_mutex_t **)(*a1 + 5448);
  if (v3)
    pthread_mutex_lock(v3);
  v4 = 0;
  v5 = *(_QWORD *)(v2 + 5440);
  do
    v6 = v4;
  while (*(unsigned __int8 *)(v5 + v4++));
  if (*(_DWORD *)(v2 + 5432) == (_DWORD)v6)
  {
    LODWORD(v6) = 0;
    v8 = 0;
  }
  else
  {
    *(_BYTE *)(v5 + v6) = 1;
    v9 = *(pthread_mutex_t **)(v2 + 5448);
    if (v9)
      pthread_mutex_unlock(v9);
    v8 = (int32x2_t *)(*(_QWORD *)(v2 + 5456) + 50640 * v6);
  }
  v10 = *a1;
  v11 = (_BYTE *)(*a1 + 205840);
  v19 = a1;
  v17[0] = v10;
  v17[1] = v8;
  v18 = v6;
  v20 = *(uint64_t *)((char *)a1 + 12);
  if (v11[2247])
  {
    v12 = *(unsigned __int8 **)(v10 + 136);
    v13 = *(unsigned __int16 *)(*(_QWORD *)v11 + 19114) * *(unsigned __int16 *)(*(_QWORD *)v11 + 19112);
    if (v13 >= 0x4B000 && ((v14 = *(_DWORD *)(v10 + 184), v13 <= 0xAA000) ? (v15 = v14 == 0) : (v15 = 1), v15))
    {
      v16 = 1;
      v8->i8[7] = 1;
    }
    else
    {
      if (!v12[287])
        v8->i8[7] = 0;
      v16 = v12[271];
      if (v16)
        goto LABEL_22;
    }
    v8->i8[4] = v16;
LABEL_22:
    v8[1764].i8[6] = v11[81];
    sub_1B68A3E0C(v8, v12);
  }
  sub_1B68CD758((uint64_t)v17);
}

void sub_1B68DDFB8(uint64_t a1)
{
  sub_1B68FE254(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
}

uint64_t sub_1B68DDFC8(unsigned __int16 *a1, _QWORD *a2, int a3, int a4)
{
  signed int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  pthread_mutex_t *v14;
  pthread_mutex_t *v15;
  int v16;
  _BYTE *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  signed int *v23;
  unint64_t v24;
  signed int v25;
  signed int v26;
  uint64_t v28;
  void *v29;
  void *v30;
  int v31;
  int v32;
  char v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38;
  unsigned int v39;
  char v40;
  _BYTE *v41;
  int v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  _BYTE *v52;
  _BOOL4 v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  void *v65;
  unsigned int v66;
  void *v67;
  void *v68;
  unsigned int v69;
  const CFSetCallBacks *v70;
  CFMutableSetRef Mutable;
  void *v72;
  void *v73;
  void *v74;
  int v75;
  int v76;
  double v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  float v82;
  unsigned int v83;
  float v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  void *v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  uint64_t v99;
  float v100;
  pthread_mutex_t *v101;
  void *v102;
  int v103;
  unint64_t v104;
  char v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  unint64_t v112;
  unsigned __int16 *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  FILE *v127;
  FILE *v128;
  FILE *v129;
  FILE *v130;
  FILE *v131;
  FILE *v132;
  char v133;
  unsigned int *v134;
  void *__src;
  int *v136;
  _BYTE *v137;
  int v138;
  unsigned int v139;
  int v140;
  _BYTE *v141;
  signed int v142;
  int64x2_t v143;
  size_t v144;
  uint64_t v145;
  char __dst[2000];
  char v147[32];
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = a1[1];
  strcpy(v147, "hw.cachelinesize");
  v144 = 8;
  v145 = 0;
  sysctlbyname(v147, &v145, &v144, 0, 0);
  qword_1EF13A068 = v145;
  switch((_DWORD)v145)
  {
    case 0x20:
      v10 = 5;
      goto LABEL_7;
    case 0x80:
      v10 = 7;
      goto LABEL_7;
    case 0x40:
      v10 = 6;
LABEL_7:
      qword_1EF13A070 = v10;
      break;
  }
  v11 = 4294967246;
  if (!a2 || !a3)
    return v11;
  v12 = malloc_type_calloc(0x32D10uLL, 1uLL, 0x4AE20AB7uLL);
  v13 = (uint64_t)v12;
  if (!v12)
  {
    v11 = 4294967188;
    goto LABEL_24;
  }
  *a2 = v12;
  v14 = sub_1B68A37A0();
  *(_QWORD *)v13 = v14;
  if (!v14 || (v15 = sub_1B68A37A0(), (*(_QWORD *)(v13 + 8) = v15) == 0))
  {
    v11 = 4294967188;
LABEL_24:
    CFLog();
LABEL_25:
    sub_1B68E1558(v13, a4);
    *a2 = 0;
    return v11;
  }
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_QWORD *)(v13 + 136) = a1;
  *(_BYTE *)(v13 + 208070) = *((_BYTE *)a1 + 601);
  *(_BYTE *)(v13 + 208068) = *((_BYTE *)a1 + 599);
  *(_BYTE *)(v13 + 208069) = *((_BYTE *)a1 + 600);
  *(_DWORD *)(v13 + 208128) = 0;
  v141 = (_BYTE *)(v13 + 205448);
  *(_QWORD *)(v13 + 205968) = 0;
  *(_QWORD *)(v13 + 1728) = 0;
  *(_QWORD *)(v13 + 152) = 0;
  v139 = (-v9 & 0xF) + v9;
  v140 = (-v8 & 0xF) + v8;
  v142 = (unsigned __int16)((-(__int16)v9 & 0xF) + v9);
  *(_QWORD *)(v13 + 1072) = 0;
  *(_QWORD *)(v13 + 1064) = 0;
  *(_OWORD *)(v13 + 5336) = 0u;
  *(_OWORD *)(v13 + 5352) = 0u;
  *(_OWORD *)(v13 + 5368) = 0u;
  *(_DWORD *)(v13 + 5384) = 0;
  v17 = a1 + 2407;
  if (*((_BYTE *)a1 + 4816))
    v18 = *((_BYTE *)a1 + 4928) != 0;
  else
    v18 = 1;
  v19 = sub_1B68FEE08((unsigned __int16)((-(__int16)v8 & 0xF) + v8), v142, v13 + 1744, 0, v18);
  if ((_DWORD)v19)
  {
    v11 = v19;
    goto LABEL_24;
  }
  v20 = sub_1B68FEE08((unsigned __int16)((-(__int16)v8 & 0xF) + v8), v142, v13 + 2800, 0, *((_BYTE *)a1 + 4816) == 0);
  if ((_DWORD)v20)
  {
    v11 = v20;
    goto LABEL_24;
  }
  v21 = sub_1B68FEE08((unsigned __int16)((-(__int16)v8 & 0xF) + v8), v142, v13 + 3856, 0, *((_BYTE *)a1 + 4816) == 0);
  if ((_DWORD)v21)
  {
    v11 = v21;
    goto LABEL_24;
  }
  v16 = (unsigned __int16)((-(__int16)v8 & 0xF) + v8);
  v138 = v16;
  *(_BYTE *)(v13 + 5076) = 0;
  *(_BYTE *)(v13 + 1627) = 0;
  *(_WORD *)(v13 + 1616) = 0;
  *(_OWORD *)(v13 + 1708) = 0u;
  strncpy(__dst, (const char *)a1 + 696, 0x7D0uLL);
  if (*((_BYTE *)a1 + 663))
    sub_1B68DF94C((_BYTE *)v13, (uint64_t)a1, __dst);
  *(_BYTE *)(v13 + 207941) = *((_BYTE *)a1 + 616);
  *(_WORD *)(v13 + 207942) = 0;
  if (*(_BYTE *)(v13 + 1618))
  {
    *((_BYTE *)a1 + 677) = 1;
  }
  else
  {
    if (!*(_BYTE *)(v13 + 1619))
    {
      v137 = (char *)a1 + 677;
      if (!*((_BYTE *)a1 + 677))
        goto LABEL_41;
      goto LABEL_34;
    }
    *((_BYTE *)a1 + 677) = 2;
    *((_DWORD *)a1 + 11) = 1;
  }
  v137 = (char *)a1 + 677;
LABEL_34:
  *(_QWORD *)(v13 + 1696) = 0xA0000000B0;
  *(_OWORD *)(v13 + 1632) = xmmword_1B6933F20;
  *(_OWORD *)(v13 + 1648) = unk_1B6933F30;
  *(_OWORD *)(v13 + 1664) = xmmword_1B6933F40;
  *(_OWORD *)(v13 + 1680) = unk_1B6933F50;
  v23 = (signed int *)(v13 + 1632);
  v24 = -1;
  do
  {
    ++v24;
    v26 = *v23;
    v23 += 2;
    v25 = v26;
  }
  while (v24 <= 7 && v25 > v8);
  *(_BYTE *)(v13 + 1628) = v24;
  *(_DWORD *)(v13 + 1704) = 0;
LABEL_41:
  *(_DWORD *)(v13 + 1584) = 0;
  *(_QWORD *)(v13 + 1576) = 0;
  *(_BYTE *)(v13 + 1058) = 0;
  *(_DWORD *)(v13 + 64) = 0;
  *(_DWORD *)(v13 + 205880) = -1;
  *(_QWORD *)(v13 + 205884) = 0;
  *(_BYTE *)(v13 + 205892) = 0;
  *(_BYTE *)(v13 + 207682) = *((_BYTE *)a1 + 269);
  *(_DWORD *)(v13 + 207684) = 0;
  *(_BYTE *)(v13 + 207688) = 0;
  v28 = *((unsigned int *)a1 + 11);
  *(_DWORD *)(v13 + 207712) = v28;
  v29 = malloc_type_calloc(4 * v28, 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v13 + 207696) = v29;
  if (!v29)
  {
    v11 = 4294967188;
    goto LABEL_24;
  }
  v30 = malloc_type_calloc(*(unsigned int *)(v13 + 207712), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v13 + 207704) = v30;
  if (!v30)
  {
    v11 = 4294967188;
    goto LABEL_24;
  }
  *(_BYTE *)(v13 + 207683) = *((_BYTE *)a1 + 291);
  *(_BYTE *)(v13 + 207677) = *((_BYTE *)a1 + 261);
  *(_BYTE *)(v13 + 207676) = *((_BYTE *)a1 + 262);
  *(_BYTE *)(v13 + 207678) = *((_BYTE *)a1 + 263);
  *(_BYTE *)(v13 + 207679) = *((_BYTE *)a1 + 264);
  *(_BYTE *)(v13 + 207680) = *((_DWORD *)a1 + 12);
  *(_DWORD *)(v13 + 57104) = *((_DWORD *)a1 + 10);
  *(_BYTE *)(v13 + 208104) = *((_BYTE *)a1 + 4827);
  *(_BYTE *)(v13 + 208105) = *((_BYTE *)a1 + 4828);
  *(_DWORD *)(v13 + 208108) = *((_DWORD *)a1 + 1208);
  *(_BYTE *)(v13 + 208112) = *((_BYTE *)a1 + 4836);
  *(_BYTE *)(v13 + 208113) = *((_BYTE *)a1 + 4837);
  *(_BYTE *)(v13 + 208114) = *((_BYTE *)a1 + 4841);
  ++*(_BYTE *)(v13 + 117268);
  __src = (void *)(v13 + 57108);
  sub_1B68DFE94(v16, v142, v13 + 57108, *((_DWORD *)a1 + 1237));
  if (!*((_BYTE *)a1 + 6))
    *((_QWORD *)a1 + 1) = 0;
  *(_BYTE *)(v13 + 180) = ((v8 | v9) & 0xF) == 0;
  if (*((_BYTE *)a1 + 6) || v8 < (unsigned __int16)v140)
  {
    *(_BYTE *)(v13 + 58447) = 1;
  }
  else
  {
    *(_BYTE *)(v13 + 58447) = (unsigned __int16)v139 > v9;
    if ((unsigned __int16)v139 <= v9)
      goto LABEL_57;
  }
  *(_DWORD *)(v13 + 58448) = (__int16)a1[4];
  v31 = v16 - v8;
  if (v16 < v8)
    ++v31;
  *(_DWORD *)(v13 + 58452) = (__int16)a1[5] + (v31 >> 1);
  *(_DWORD *)(v13 + 58456) = (__int16)a1[6];
  v32 = v142 - v9;
  if (v142 < (int)v9)
    ++v32;
  *(_DWORD *)(v13 + 58460) = (__int16)a1[7] + (v32 >> 1);
LABEL_57:
  if (*((_BYTE *)a1 + 663))
  {
    *(_DWORD *)(v13 + 57380) = 8;
    *(_DWORD *)(v13 + 58976) = 4096;
    if (!*(_BYTE *)(v13 + 57384))
    {
      v33 = 13;
      v34 = 9;
      if (!*((_BYTE *)a1 + 4815))
      {
        if (*v17)
          v34 = 9;
        else
          v34 = 10;
        if (*v17)
          v33 = 13;
        else
          v33 = 14;
      }
      *(_DWORD *)(v13 + 57388) = v34;
      v35 = 1 << v33;
      goto LABEL_67;
    }
  }
  else
  {
    v36 = *((unsigned __int8 *)a1 + 235);
    if (v36 != 1 && v36 != 2)
    {
      if (v36 < 3)
        goto LABEL_75;
      if (!*((_BYTE *)a1 + 614))
        v36 = 1 << (v36 - 2);
    }
    *(_DWORD *)(v13 + 58428) = v36;
    v37 = *((unsigned __int8 *)a1 + 235);
    if (v37 >= 6)
    {
      *(_DWORD *)(v13 + 57380) = v37 - 4;
      *(_DWORD *)(v13 + 58976) = 1 << v37;
      if (!*(_BYTE *)(v13 + 57384))
      {
        v78 = *((unsigned __int8 *)a1 + 235);
        *(_DWORD *)(v13 + 57388) = v78 - 2;
        v35 = 4 << v78;
LABEL_67:
        *(_DWORD *)(v13 + 58980) = v35;
      }
    }
  }
LABEL_75:
  v38 = (_DWORD *)(v13 + 58428);
  v39 = *(_DWORD *)(v13 + 58428);
  if (*((_BYTE *)a1 + 324) == 1 && v39 >= 2)
    *v38 = --v39;
  *(_BYTE *)(v13 + 58446) = *((_BYTE *)a1 + 282);
  v40 = *((_BYTE *)a1 + 398) == 0;
  *(_BYTE *)(v13 + 58444) = v40;
  v41 = a1 + 119;
  v134 = (unsigned int *)(v13 + 58428);
  sub_1B68DFF58((_BYTE *)a1 + 238, v38, a1, v39, v40);
  *(_BYTE *)(v13 + 208071) = *((_BYTE *)a1 + 602);
  *(_BYTE *)(v13 + 208072) = *((_BYTE *)a1 + 603);
  *(_BYTE *)(v13 + 208073) = *((_DWORD *)a1 + 151);
  *(_BYTE *)(v13 + 58464) = 0;
  if (*((_DWORD *)a1 + 22))
  {
    *(_BYTE *)(v13 + 58464) = 1;
    sub_1B68DFFB4((uint64_t)a1, v13 + 58468);
    *(_OWORD *)(v13 + 119396) = 0u;
    *(_OWORD *)(v13 + 119412) = 0u;
    *(_OWORD *)(v13 + 119364) = 0u;
    *(_OWORD *)(v13 + 119380) = 0u;
    *(_OWORD *)(v13 + 119332) = 0u;
    *(_OWORD *)(v13 + 119348) = 0u;
    *(_OWORD *)(v13 + 119300) = 0u;
    *(_OWORD *)(v13 + 119316) = 0u;
    *(_OWORD *)(v13 + 119268) = 0u;
    *(_OWORD *)(v13 + 119284) = 0u;
    *(_OWORD *)(v13 + 119236) = 0u;
    *(_OWORD *)(v13 + 119252) = 0u;
    *(_OWORD *)(v13 + 119204) = 0u;
    *(_OWORD *)(v13 + 119220) = 0u;
    *(_OWORD *)(v13 + 119172) = 0u;
    *(_OWORD *)(v13 + 119188) = 0u;
    *(_OWORD *)(v13 + 119156) = 0u;
    *(_DWORD *)(v13 + 119164) = *(unsigned __int8 *)(v13 + 57125);
    *(_DWORD *)(v13 + 119168) = *(_DWORD *)(v13 + 58960);
  }
  v42 = *((unsigned __int8 *)a1 + 111);
  *(_BYTE *)(v13 + 205833) = v42;
  if (v42)
  {
    *(_BYTE *)(v13 + 205836) = *((_BYTE *)a1 + 112);
    *(_BYTE *)(v13 + 205837) = a1[56] & 0xF;
    *(_BYTE *)(v13 + 205838) = *((_BYTE *)a1 + 112) >> 4;
  }
  *(_BYTE *)(v13 + 205834) = *((_BYTE *)a1 + 113);
  *(_DWORD *)(v13 + 57108) = *((unsigned __int8 *)a1 + 24);
  v43 = *((unsigned __int8 *)a1 + 401);
  *(_BYTE *)(v13 + 57131) = v43;
  if (v43)
  {
    v44 = 0;
    v45 = 0;
    v46 = v13 + 57148;
    do
    {
      *(_BYTE *)(v46 + v45 - 16) = 1;
      if (v45 > 5)
      {
        v47 = (v45 - 6);
        v48 = (_OWORD *)(v13 + (v47 << 6) + 57244);
        v49 = (_OWORD *)((char *)&unk_1B6933E9E + 64 * v47);
        v50 = v49[1];
        *v48 = *v49;
        v48[1] = v50;
        v51 = v49[3];
        v48[2] = v49[2];
        v48[3] = v51;
      }
      else
      {
        *(_OWORD *)(v46 + v44 * 16) = xmmword_1B6933E3E[v44];
      }
      ++v45;
      ++v44;
    }
    while (v45 != 8);
  }
  v136 = (int *)(v13 + 119432);
  *(_BYTE *)(v13 + 119152) = 0;
  memcpy((void *)(v13 + 117272), __src, 0x758uLL);
  v133 = (*v141)++;
  v52 = a1 + 2407;
  if (*v17)
    v53 = 1;
  else
    v53 = *((_BYTE *)a1 + 4815) != 0;
  v54 = *((_DWORD *)a1 + 1238);
  *(_OWORD *)(v13 + 119440) = 0u;
  *(_QWORD *)(v13 + 119760) = 0;
  *(_OWORD *)(v13 + 119680) = 0u;
  *(_OWORD *)(v13 + 119664) = 0u;
  *(_OWORD *)(v13 + 119648) = 0u;
  *(_OWORD *)(v13 + 119632) = 0u;
  *(_OWORD *)(v13 + 119616) = 0u;
  *(_OWORD *)(v13 + 119600) = 0u;
  *(_OWORD *)(v13 + 119584) = 0u;
  *(_OWORD *)(v13 + 119568) = 0u;
  *(_OWORD *)(v13 + 119552) = 0u;
  *(_OWORD *)(v13 + 119536) = 0u;
  *(_OWORD *)(v13 + 119520) = 0u;
  *(_OWORD *)(v13 + 119504) = 0u;
  *(_OWORD *)(v13 + 119488) = 0u;
  *(_OWORD *)(v13 + 119472) = 0u;
  *(_OWORD *)(v13 + 119456) = 0u;
  *(_OWORD *)(v13 + 119728) = 0u;
  *(_OWORD *)(v13 + 119744) = 0u;
  *(_OWORD *)(v13 + 119696) = 0u;
  *(_OWORD *)(v13 + 119712) = 0u;
  v55 = *(unsigned __int8 *)(v13 + 57125);
  v93 = !v53;
  v56 = !v53;
  v57 = v54 & ~(v54 >> 31);
  if (!v93)
    v57 = 1;
  *v136 = v57;
  *(_DWORD *)(v13 + 119436) = v55;
  *(_BYTE *)(v13 + 119441) = v56;
  *(_QWORD *)(v13 + 119488) = 0x100000001;
  *(_QWORD *)(v13 + 119500) = 0x200000000;
  *(_QWORD *)(v13 + 119508) = 0;
  *(_DWORD *)(v13 + 119515) = 0;
  LOWORD(v58) = a1[209];
  if ((_WORD)v58)
  {
    v58 = (__int16)v58;
    if ((__int16)v58 >= 12)
      v58 = 12;
    if (v58 <= -12)
      v58 = -12;
    *(_DWORD *)(v13 + 119512) = v58;
    *(_BYTE *)(v13 + 119529) = v58;
  }
  if (*((_BYTE *)a1 + 653))
    *(_BYTE *)(v13 + 119496) = 1;
  if (*((_BYTE *)a1 + 654))
    *(_DWORD *)(v13 + 119500) = 1;
  if (*((_BYTE *)a1 + 269))
    *(_BYTE *)(v13 + 119517) = 1;
  if (*((_BYTE *)a1 + 240))
    *(_BYTE *)(v13 + 119440) = 1;
  if ((*((unsigned __int8 *)a1 + 262) | 2) == 3)
    *(_BYTE *)(v13 + 119516) = 1;
  v59 = (char)*v41;
  if (*v41)
  {
    if (*v134 < v59)
      v59 = *v134;
  }
  else
  {
    v59 = 1;
  }
  *(_DWORD *)(v13 + 119488) = v59 - 1;
  v60 = (char)*v41;
  if (*v41)
  {
    if (*v134 < v60)
      v60 = *v134;
  }
  else
  {
    v60 = 1;
  }
  *(_DWORD *)(v13 + 119492) = v60 - 1;
  *(_BYTE *)(v13 + 119519) = *((_BYTE *)a1 + 400);
  *(_BYTE *)(v13 + 205792) = 0;
  memcpy((void *)(v13 + 205456), v136, 0x150uLL);
  if (*((_BYTE *)a1 + 672))
  {
    memcpy((void *)(v13 + 119768), v136, 0x150uLL);
    *v141 = v133 + 2;
    *(_DWORD *)(v13 + 119768) = 1;
    *(_BYTE *)(v13 + 119776) = 1;
    *(_BYTE *)(v13 + 205792) = 1;
    v52 = a1 + 2407;
    memcpy((void *)(v13 + 205456), (const void *)(v13 + 119768), 0x150uLL);
  }
  *(_BYTE *)(v13 + 208078) = *((_BYTE *)a1 + 624);
  *(_BYTE *)(v13 + 208079) = *((_BYTE *)a1 + 625);
  *(_BYTE *)(v13 + 208080) = *((_BYTE *)a1 + 626);
  *(_BYTE *)(v13 + 208081) = *((_BYTE *)a1 + 627);
  *(_BYTE *)(v13 + 208082) = *((_BYTE *)a1 + 628);
  *(_BYTE *)(v13 + 208085) = *((_BYTE *)a1 + 669);
  *(_BYTE *)(v13 + 208086) = *((_BYTE *)a1 + 671);
  *(_BYTE *)(v13 + 208083) = *((_BYTE *)a1 + 629);
  *(_BYTE *)(v13 + 208084) = *((_BYTE *)a1 + 630);
  *(_BYTE *)(v13 + 205931) = *((_BYTE *)a1 + 653);
  *(_BYTE *)(v13 + 205932) = *((_BYTE *)a1 + 654);
  *(_DWORD *)(v13 + 205904) = *((char *)a1 + 290);
  v61 = *((char *)a1 + 229);
  if (v61 >= 51)
    v61 = 51;
  *(_DWORD *)(v13 + 205868) = v61 & ~(v61 >> 31);
  v62 = *((char *)a1 + 230);
  if (v62 >= 51)
    v62 = 51;
  *(_DWORD *)(v13 + 205872) = v62 & ~(v62 >> 31);
  v63 = *((char *)a1 + 231);
  if (v63 >= 51)
    v63 = 51;
  *(_DWORD *)(v13 + 205876) = v63 & ~(v63 >> 31);
  *(_DWORD *)(v13 + 205924) = *((_DWORD *)a1 + 93);
  *(_BYTE *)(v13 + 205928) = *((_BYTE *)a1 + 376);
  *(_BYTE *)(v13 + 205929) = *((_BYTE *)a1 + 655);
  *(_BYTE *)(v13 + 205930) = *((_BYTE *)a1 + 656);
  *(_BYTE *)(v13 + 205921) = *((_BYTE *)a1 + 368);
  *(_BYTE *)(v13 + 205933) = *v52;
  *(_BYTE *)(v13 + 205935) = v52[1];
  *(_BYTE *)(v13 + 205936) = v52[2];
  *(_BYTE *)(v13 + 208132) = v52[26];
  *(_WORD *)(v13 + 205900) = a1[208];
  *(int32x2_t *)(v13 + 57096) = vadd_s32(*(int32x2_t *)(v13 + 58436), (int32x2_t)0x100000001);
  *(_DWORD *)(v13 + 205996) = *((char *)a1 + 265);
  *(_DWORD *)(v13 + 205992) = *((_DWORD *)a1 + 64);
  v64 = *((_DWORD *)a1 + 61);
  if (v64 >= 0x7FF)
    v64 = 2047;
  *(_DWORD *)(v13 + 205980) = v64;
  *(_DWORD *)(v13 + 205988) = *((_DWORD *)a1 + 63);
  *(_DWORD *)(v13 + 205984) = *((_DWORD *)a1 + 62);
  if (*((unsigned __int8 *)a1 + 265) - 2 >= 4 && *((_BYTE *)a1 + 265))
    *(_DWORD *)(v13 + 205984) = 0;
  v65 = malloc_type_calloc(1uLL, 0x28uLL, 0x10E004050CAF3E4uLL);
  *(_QWORD *)(v13 + 5512) = v65;
  v66 = (unsigned __int16)((-(__int16)v9 & 0xF) + v9);
  if (!v65)
  {
    v11 = 4294967188;
    goto LABEL_24;
  }
  v11 = sub_1B68E0074((int *)(v13 + 5432), a3, v13);
  if ((_DWORD)v11)
    goto LABEL_25;
  *(_DWORD *)(v13 + 5464) = 0;
  *(_OWORD *)(v13 + 5472) = 0u;
  *(_OWORD *)(v13 + 5488) = 0u;
  if (a4)
  {
    v67 = malloc_type_calloc(0x5FF0uLL, 1uLL, 0x4AE20AB7uLL);
    *(_QWORD *)(v13 + 205800) = v67;
    if (!v67)
    {
      v11 = 4294967188;
      goto LABEL_24;
    }
    v68 = malloc_type_calloc(0x40uLL, 1uLL, 0x4AE20AB7uLL);
    *(_QWORD *)(v13 + 205808) = v68;
    if (!v68)
    {
      v11 = 4294967188;
      goto LABEL_24;
    }
    *(_BYTE *)(v13 + 205832) = 0;
    *(_QWORD *)(v13 + 205824) = malloc_type_calloc(*((unsigned __int8 *)a1 + 615), 1uLL, 0x4AE20AB7uLL);
    *(_QWORD *)(v13 + 205816) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (*((_BYTE *)a1 + 615))
    {
      v69 = 0;
      v70 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
      do
      {
        Mutable = CFSetCreateMutable(0, 0, v70);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v13 + 205816), Mutable);
        ++v69;
      }
      while (v69 < *((unsigned __int8 *)a1 + 615));
    }
    v72 = malloc_type_calloc(0x1080uLL, 1uLL, 0x4AE20AB7uLL);
    *(_QWORD *)(v13 + 205960) = v72;
    if (!v72)
    {
      v11 = 4294967188;
      goto LABEL_24;
    }
    v73 = malloc_type_calloc(0x800uLL, 1uLL, 0x4AE20AB7uLL);
    *(_QWORD *)(v13 + 152) = v73;
    if (!v73)
    {
      v11 = 4294967188;
      goto LABEL_24;
    }
    v74 = malloc_type_calloc(0xF80uLL, 1uLL, 0x4AE20AB7uLL);
    *(_QWORD *)(v13 + 205944) = v74;
    if (!v74)
    {
      v11 = 4294967188;
      goto LABEL_24;
    }
    *(_BYTE *)(v13 + 205976) = *((_DWORD *)a1 + 20);
    v75 = *((unsigned __int8 *)a1 + 236);
    sub_1B68CAE28((uint64_t)__src, *(_QWORD *)(v13 + 205800), *((_BYTE *)a1 + 614), *((_BYTE *)a1 + 615));
    v76 = *((unsigned __int8 *)a1 + 320);
    if (!*((_BYTE *)a1 + 320))
      v76 = a3;
    v11 = sub_1B68B4820(*(_QWORD *)(v13 + 205808), *v134 + 2 * v75 + *((unsigned __int8 *)a1 + 318) + *((unsigned __int8 *)a1 + 319) + v76, v8, v9, a3, v13, *(unsigned __int8 *)(v13 + 205936), *(unsigned __int8 *)(*(_QWORD *)(v13 + 136) + 4856), *(_BYTE *)(*(_QWORD *)(v13 + 136) + 241));
    if ((_DWORD)v11)
      goto LABEL_24;
    if ((*((_BYTE *)a1 + 211) & 0x23) != 0)
    {
      if (*((_DWORD *)a1 + 13))
      {
        LODWORD(v77) = *((_DWORD *)a1 + 15);
        if (*(float *)&v77 > 0.0000001)
        {
          if (!*((_BYTE *)a1 + 212) && *((_DWORD *)a1 + 18))
          {
            v81 = *((_DWORD *)a1 + 76);
            if ((v81 | 0x800000) == 0x800000)
            {
              v82 = 2.0;
              if (!*((_BYTE *)a1 + 398))
                v82 = 1.0;
              v81 = (float)(*(float *)&v77 * (float)(*((float *)a1 + 78) * v82));
              *((_DWORD *)a1 + 76) = v81;
            }
            v83 = *((_DWORD *)a1 + 75);
            if ((v83 | 0x800000) == 0x800000)
            {
              v84 = 2.0;
              if (!*((_BYTE *)a1 + 398))
                v84 = 1.0;
              *(float *)&v77 = *(float *)&v77 * (float)(*((float *)a1 + 77) * v84);
              v83 = *(float *)&v77;
              *((_DWORD *)a1 + 75) = *(float *)&v77;
            }
            if (v83)
              v85 = v81 > v83;
            else
              v85 = 0;
            if (v85)
              v81 = v83;
            if ((signed int)v81 < *((_DWORD *)a1 + 21))
              *((_DWORD *)a1 + 21) = v81;
          }
          **(_DWORD **)(v13 + 205960) = 0;
          **(_DWORD **)(v13 + 152) = 0;
          **(_DWORD **)(v13 + 205944) = 0;
          v79 = *((unsigned __int8 *)a1 + 211);
          if (v79 == 2)
          {
            sub_1B68E0664(*(_QWORD *)(v13 + 152), (uint64_t)a1, v138, v142, v77);
            v11 = v86;
            if ((_DWORD)v86)
              goto LABEL_24;
            v87 = *(_QWORD *)(v13 + 152);
            *(_QWORD *)(v13 + 205968) = v87 + 8;
            if (*((_BYTE *)a1 + 669))
              *(_BYTE *)(v87 + 200) = 1;
          }
          else if (v79 == 32)
          {
            sub_1B68E0194(*(_QWORD *)(v13 + 205960), (uint64_t)a1, v138, v142);
            v11 = v80;
            if ((_DWORD)v80)
              goto LABEL_24;
            *(_QWORD *)(v13 + 205968) = *(_QWORD *)(v13 + 205960) + 4032;
          }
          else
          {
            sub_1B68E0C70(*(_QWORD *)(v13 + 205944), (uint64_t)a1, v138, v142);
          }
        }
      }
    }
    v66 = (unsigned __int16)((-(__int16)v9 & 0xF) + v9);
    if (*((_BYTE *)a1 + 242) || *((_BYTE *)a1 + 241) || *((_BYTE *)a1 + 2698))
    {
      v88 = operator new();
      *(_QWORD *)(v88 + 384) = 0;
      *(_OWORD *)(v88 + 352) = 0u;
      *(_OWORD *)(v88 + 368) = 0u;
      *(_OWORD *)(v88 + 320) = 0u;
      *(_OWORD *)(v88 + 336) = 0u;
      *(_OWORD *)(v88 + 288) = 0u;
      *(_OWORD *)(v88 + 304) = 0u;
      *(_OWORD *)(v88 + 256) = 0u;
      *(_OWORD *)(v88 + 272) = 0u;
      *(_OWORD *)(v88 + 224) = 0u;
      *(_OWORD *)(v88 + 240) = 0u;
      *(_OWORD *)(v88 + 192) = 0u;
      *(_OWORD *)(v88 + 208) = 0u;
      *(_OWORD *)(v88 + 160) = 0u;
      *(_OWORD *)(v88 + 176) = 0u;
      *(_OWORD *)(v88 + 128) = 0u;
      *(_OWORD *)(v88 + 144) = 0u;
      *(_OWORD *)(v88 + 96) = 0u;
      *(_OWORD *)(v88 + 112) = 0u;
      *(_OWORD *)(v88 + 64) = 0u;
      *(_OWORD *)(v88 + 80) = 0u;
      *(_OWORD *)(v88 + 32) = 0u;
      *(_OWORD *)(v88 + 48) = 0u;
      *(_OWORD *)v88 = 0u;
      *(_OWORD *)(v88 + 16) = 0u;
      *(_QWORD *)(v13 + 207760) = v88;
    }
  }
  v89 = *((char *)a1 + 241);
  *(_DWORD *)(v13 + 207748) = v89;
  *(_DWORD *)(v13 + 207752) = *((char *)a1 + 242);
  *(_QWORD *)(v13 + 205848) = 0;
  if (v89 || *(_BYTE *)(v13 + 208068) && !*(_BYTE *)(v13 + 205933))
  {
    v11 = sub_1B68B3E0C((uint64_t *)(v13 + 205848), v138, v66, 0, a3, v13, 1);
    if ((_DWORD)v11)
      goto LABEL_24;
  }
  *(_DWORD *)(v13 + 205952) = *((_DWORD *)a1 + 56);
  *(_QWORD *)(v13 + 207736) = 0x6300000063;
  if (!*(_BYTE *)(v13 + 205936))
  {
    v94 = malloc_type_calloc(0x108uLL, 1uLL, 0x4AE20AB7uLL);
    *(_QWORD *)(v13 + 205856) = v94;
    if (!v94)
    {
      v11 = 4294967188;
      goto LABEL_24;
    }
    v11 = sub_1B68C34FC((uint64_t)v94, *(_DWORD *)(v13 + 57096), *(_DWORD *)(v13 + 57100));
    if ((_DWORD)v11)
      goto LABEL_24;
  }
  v90 = v13 + 205448;
  *(_DWORD *)(v13 + 207716) = 0;
  *(_DWORD *)(v13 + 207732) = 0;
  *(_DWORD *)(v13 + 207832) = 0;
  if (*(_BYTE *)(*(_QWORD *)(v13 + 136) + 577) != 1)
    goto LABEL_228;
  if ((unsigned __int16)v140 > 0x13Fu)
  {
    if ((unsigned __int16)v140 == 320)
    {
      v91 = 0x1400000012CLL;
      v92 = 240;
      if ((unsigned __int16)v139 == 480 || (unsigned __int16)v139 == 720)
        goto LABEL_229;
      v93 = (unsigned __int16)v139 == 960;
    }
    else if ((unsigned __int16)v140 == 352)
    {
      v91 = 0x1600000018CLL;
      v92 = 288;
      if ((unsigned __int16)v139 == 576 || (unsigned __int16)v139 == 864)
        goto LABEL_229;
      v93 = (unsigned __int16)v139 == 1152;
    }
    else
    {
      v90 = v13 + 205448;
      if ((unsigned __int16)v140 != 640)
        goto LABEL_228;
      v91 = 0x280000004B0;
      v92 = 480;
      if ((unsigned __int16)v139 == 960 || (unsigned __int16)v139 == 1440)
        goto LABEL_229;
      v93 = (unsigned __int16)v139 == 1920;
    }
  }
  else if ((unsigned __int16)v140 == 80)
  {
    v91 = 0x5000000014;
    v92 = 64;
    if ((unsigned __int16)v139 == 128 || (unsigned __int16)v139 == 192)
      goto LABEL_229;
    v93 = (unsigned __int16)v139 == 256;
  }
  else
  {
    if ((unsigned __int16)v140 != 160)
    {
      v90 = v13 + 205448;
      if ((unsigned __int16)v140 == 176)
      {
        v91 = 0xB000000063;
        v92 = 144;
        if ((unsigned __int16)v139 != 288 && (unsigned __int16)v139 != 432)
        {
          v93 = (unsigned __int16)v139 == 576;
          goto LABEL_227;
        }
LABEL_229:
        v95 = (unsigned __int16)((-(__int16)v9 & 0xF) + v9);
        v90 = v13 + 205448;
        goto LABEL_230;
      }
LABEL_228:
      v96 = 1;
      goto LABEL_231;
    }
    v91 = 0xA000000050;
    v92 = 128;
    if ((unsigned __int16)v139 == 256 || (unsigned __int16)v139 == 384)
      goto LABEL_229;
    v93 = (unsigned __int16)v139 == 512;
  }
LABEL_227:
  v95 = (unsigned __int16)((-(__int16)v9 & 0xF) + v9);
  v90 = v13 + 205448;
  if (!v93)
    goto LABEL_228;
LABEL_230:
  *(_DWORD *)(v90 + 2384) = 1;
  *(_QWORD *)(v90 + 2388) = v91;
  *(_DWORD *)(v90 + 2396) = v92;
  *(_BYTE *)(v13 + 119516) = 1;
  v96 = v95 * v138 / (v92 * HIDWORD(v91));
LABEL_231:
  *(_DWORD *)(v90 + 2400) = v96;
  *(_OWORD *)(v13 + 207852) = 0u;
  *(_DWORD *)(v13 + 208060) = *((_DWORD *)a1 + 11);
  *(_DWORD *)(v90 + 2432) = 0;
  *(_DWORD *)(v90 + 2420) = -1;
  v97 = *((_DWORD *)a1 + 105);
  *(_DWORD *)(v90 + 2424) = v97;
  v98 = *((unsigned __int8 *)a1 + 211);
  if ((v98 & 0x23) != 0)
  {
    if (*((_DWORD *)a1 + 13))
    {
      if (v98 != 2 && *((float *)a1 + 15) > 0.0000001)
      {
        if (v97)
        {
          v99 = *(_QWORD *)(v90 + 496);
          v100 = *(float *)(v99 + 84);
          if (v100 > 0.0)
            *(_DWORD *)(v90 + 2420) = (float)((float)((float)*(int *)(v99 + 88) / v100) * (float)v97);
        }
      }
    }
  }
  *(_DWORD *)(v13 + 207920) = 0;
  *(_DWORD *)(v13 + 207984) = 0;
  *(_DWORD *)(v13 + 208008) = 0;
  *(_DWORD *)(v13 + 207916) = *((_DWORD *)a1 + 145);
  *(_DWORD *)(v13 + 207980) = *((_DWORD *)a1 + 146);
  *(_DWORD *)(v13 + 208004) = *((_DWORD *)a1 + 147);
  *(_DWORD *)(v13 + 207956) = *((_DWORD *)a1 + 155);
  bzero((void *)(v13 + 280), 0x2E0uLL);
  v101 = sub_1B68A37A0();
  *(_QWORD *)(v13 + 1016) = v101;
  if (!v101)
  {
    v11 = 4294967188;
    goto LABEL_24;
  }
  *(_BYTE *)(v13 + 1024) = *((_BYTE *)a1 + 660);
  *(_BYTE *)(v13 + 1025) = *((_BYTE *)a1 + 2701);
  *(_BYTE *)(v13 + 1026) = *((_BYTE *)a1 + 661);
  *(_DWORD *)(v13 + 1028) = 0;
  *(_QWORD *)(v13 + 1040) = 0;
  *(_BYTE *)(v13 + 1052) = 0;
  *(_DWORD *)(v13 + 1048) = -1082130432;
  v102 = malloc_type_calloc(4 * *((unsigned __int8 *)a1 + 661) + 4, 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v13 + 1040) = v102;
  if (!v102)
  {
    v11 = 4294967188;
    goto LABEL_24;
  }
  *(_DWORD *)(v13 + 184) = (int)sub_1B68A3908() > 1;
  *(_BYTE *)(v13 + 1725) = 0;
  *(_DWORD *)(v13 + 5072) = -1;
  *(_OWORD *)(v13 + 4912) = 0u;
  *(_OWORD *)(v13 + 4928) = 0u;
  *(_OWORD *)(v13 + 4944) = 0u;
  *(_OWORD *)(v13 + 4960) = 0u;
  *(_OWORD *)(v13 + 4976) = 0u;
  *(_OWORD *)(v13 + 4992) = 0u;
  *(_OWORD *)(v13 + 5008) = 0u;
  *(_OWORD *)(v13 + 5024) = 0u;
  *(_OWORD *)(v13 + 5040) = 0u;
  *(_OWORD *)(v13 + 5056) = 0u;
  *(_BYTE *)(v13 + 5424) = *((_BYTE *)a1 + 4851);
  *(_BYTE *)(v13 + 5425) = 1;
  v103 = *((char *)a1 + 270);
  if (v103 != -1)
    *(_DWORD *)(v13 + 184) = v103;
  v104 = *v137;
  if (v104 <= 8)
  {
    v105 = byte_1B6933FC4[v104];
    v106 = byte_1B6933FCD[v104];
    *(_BYTE *)(v13 + 1053) = v105;
    *(_BYTE *)(v13 + 1054) = v106;
    LOBYTE(v104) = *v137;
  }
  *(_BYTE *)(v13 + 1057) = v104;
  *(_BYTE *)(v13 + 208074) = *((_BYTE *)a1 + 608);
  *(_BYTE *)(v13 + 208075) = *((_BYTE *)a1 + 609);
  *(_BYTE *)(v13 + 208076) = *((_BYTE *)a1 + 237);
  *(_BYTE *)(v13 + 208077) = *((_BYTE *)a1 + 324);
  if (*(_DWORD *)(v13 + 205924) == 1 && *(_DWORD *)(v13 + 208060))
  {
    v107 = 0;
    v108 = v13 + 5616;
    v109 = v13 + 5520;
    do
    {
      *(_QWORD *)v109 = v13;
      *(_QWORD *)(v109 + 8) = 0;
      *(_BYTE *)(v109 + 64) = 0;
      *(_DWORD *)(v109 + 16) = *(_DWORD *)(v13 + 58984) + 1;
      v11 = sub_1B68E0FD8(v108, v13);
      if ((_DWORD)v11)
        goto LABEL_25;
      ++v107;
      v108 += 50640;
      v109 += 88;
    }
    while (v107 < *(unsigned int *)(v13 + 208060));
  }
  if (*(_BYTE *)(*(_QWORD *)(v13 + 136) + 577) == 4 && a4 != 0)
  {
    v111 = *((unsigned __int8 *)a1 + 115);
    if (*((_BYTE *)a1 + 115))
    {
      v112 = 0;
      do
      {
        if (v112 <= 7)
        {
          v113 = &a1[2 * v112];
          v114 = *((_DWORD *)v113 + 38);
          v115 = *(_QWORD *)(v13 + 205968) + 4 * v112;
          *(_DWORD *)(v115 + 104) = *((_DWORD *)v113 + 30);
          *(_DWORD *)(v115 + 136) = (90000 * v114 + 500) / 0x3E8u;
        }
        ++v112;
      }
      while (v111 != v112);
    }
  }
  *(_BYTE *)(v13 + 208087) = *((_BYTE *)a1 + 663);
  *(_BYTE *)(v13 + 208088) = *((_BYTE *)a1 + 664);
  *(_QWORD *)(v13 + 80) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 112) = 0x100000001;
  *(_QWORD *)(v13 + 96) = operator new();
  if (!*((_BYTE *)a1 + 4850))
  {
    *(_QWORD *)(v13 + 104) = operator new();
    *(_QWORD *)(v13 + 120) = operator new();
  }
  v116 = operator new();
  *(_QWORD *)(v13 + 128) = v116;
  *(_QWORD *)v116 = 0;
  *(_DWORD *)(v116 + 8) = 0;
  *(_QWORD *)(v13 + 160) = 0;
  *(_QWORD *)(v13 + 168) = 0;
  if (*(_BYTE *)(v13 + 1024))
  {
    v117 = *(unsigned __int8 *)(v13 + 1057);
    if (v117 == 1)
      v118 = 1;
    else
      v118 = 4 * (v117 == 2);
    v119 = operator new();
    sub_1B68B74C0(v119, v118, v138, v142, *(unsigned __int8 *)(v13 + 5424), *((unsigned __int8 *)a1 + 4825), *(_QWORD *)(v13 + 152), *((float *)a1 + 15));
    *(_QWORD *)(v13 + 5392) = v120;
    v11 = sub_1B68B7684(v120, 0, *((unsigned __int8 *)a1 + 4928));
    if ((_DWORD)v11)
      goto LABEL_24;
    if (*((_BYTE *)a1 + 670) == 1)
      *(_BYTE *)(*(_QWORD *)(v13 + 5392) + 740) = 1;
    *(_BYTE *)(*(_QWORD *)(v13 + 5392) + 731) = *((_BYTE *)a1 + 665);
  }
  else
  {
    *(_QWORD *)(v13 + 5392) = 0;
  }
  v121 = operator new();
  sub_1B68C2644(v121);
  *(_QWORD *)(v13 + 5416) = v122;
  sub_1B68C2730(v122, v138, v142, *((_DWORD *)a1 + 1231), *((unsigned __int8 *)a1 + 4856), *((_DWORD *)a1 + 1213), *((unsigned __int8 *)a1 + 4928));
  if (*(_BYTE *)(v13 + 208087))
  {
    v123 = operator new();
    v124 = *(int *)(*(_QWORD *)(v13 + 136) + 4852);
    *(_QWORD *)(v123 + 16) = 0x403E000000000000;
    v143 = vdupq_n_s64(0x41124F8000000000uLL);
    *(int64x2_t *)v123 = v143;
    *(_QWORD *)(v123 + 24) = 1000;
    *(_DWORD *)(v123 + 36) = dword_1B6933F7C[v124];
    *(_QWORD *)(v123 + 40) = 0x2000000020000000;
    *(_DWORD *)(v123 + 48) = 0;
    *(_QWORD *)(v123 + 56) = 0;
    *(_DWORD *)(v123 + 64) = 2;
    *(_QWORD *)(v13 + 5400) = v123;
    v125 = operator new();
    v126 = *(int *)(*(_QWORD *)(v13 + 136) + 4852);
    *(_QWORD *)(v125 + 16) = 0x403E000000000000;
    *(int64x2_t *)v125 = v143;
    *(_QWORD *)(v125 + 24) = 1000;
    *(_DWORD *)(v125 + 36) = dword_1B6933F7C[v126];
    *(_QWORD *)(v125 + 40) = 0x2000000020000000;
    *(_DWORD *)(v125 + 48) = 0;
    *(_QWORD *)(v125 + 56) = 0;
    *(_DWORD *)(v125 + 64) = 2;
    *(_QWORD *)(v13 + 5408) = v125;
  }
  else
  {
    *(_OWORD *)(v13 + 5400) = 0u;
  }
  if (*((_BYTE *)a1 + 663) && *((_BYTE *)a1 + 2700))
    v127 = fopen((const char *)a1 + 2705, "rb");
  else
    v127 = 0;
  *(_QWORD *)(v13 + 232) = v127;
  if (*((_BYTE *)a1 + 663) && *((_BYTE *)a1 + 2701))
    v128 = fopen((const char *)a1 + 3006, "rb");
  else
    v128 = 0;
  *(_QWORD *)(v13 + 264) = v128;
  if (*((_BYTE *)a1 + 663) && *((_BYTE *)a1 + 2703))
    v129 = fopen((const char *)a1 + 3307, "r");
  else
    v129 = 0;
  *(_QWORD *)(v13 + 256) = v129;
  if (*((_BYTE *)a1 + 663) && *((_BYTE *)a1 + 2702))
    v130 = fopen((const char *)a1 + 3608, "r");
  else
    v130 = 0;
  *(_QWORD *)(v13 + 240) = v130;
  if (*((_BYTE *)a1 + 663) && *((_BYTE *)a1 + 4829))
    v131 = fopen((const char *)a1 + 3909, "r");
  else
    v131 = 0;
  *(_QWORD *)(v13 + 248) = v131;
  if (*((_BYTE *)a1 + 663) && *((_BYTE *)a1 + 2704))
    v132 = fopen((const char *)a1 + 4210, "r");
  else
    v132 = 0;
  v11 = 0;
  *(_QWORD *)(v13 + 272) = v132;
  *(_QWORD *)(v13 + 224) = 0;
  *(_QWORD *)(v13 + 192) = 0;
  *(_QWORD *)(v13 + 200) = 0;
  *(_OWORD *)(v13 + 207896) = xmmword_1B69178F0;
  *(_DWORD *)(v13 + 207912) = 0;
  return v11;
}

const char *sub_1B68DF94C(_BYTE *a1, uint64_t a2, char *__str)
{
  uint64_t v3;
  char v5;
  const char *result;
  const char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  char *v23;
  int v24;
  int v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  _BYTE *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD __dst[500];
  uint64_t v41;

  v3 = a2;
  v41 = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a2 + 240);
  LOBYTE(v37) = *(_BYTE *)(a2 + 616);
  result = strtok(__str, ";");
  if (result)
  {
    v7 = result;
    v33 = v5;
    v31 = a1;
    v32 = v3;
    v8 = 0;
    v9 = (char *)__dst;
    do
    {
      v10 = v8 + 1;
      strncpy(v9, v7, 0x14uLL);
      v11 = strtok(0, ";");
      if (!v11)
        break;
      v7 = v11;
      v9 += 20;
    }
    while (v8++ < 0x63);
    v13 = 0;
    v34 = 0;
    v35 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v38 = 0;
    memset(v36, 0, sizeof(v36));
    v39 = 0;
    v18 = ":";
    do
    {
      v19 = (char *)&__dst[5 * v13];
      while (1)
      {
        result = strtok(v19, v18);
        if (!result)
          break;
        v20 = result;
        result = (const char *)strcmp(result, "MS");
        if (!(_DWORD)result)
        {
          HIDWORD(v38) = 1;
          break;
        }
        result = (const char *)strcmp(v20, "LF");
        if (!(_DWORD)result)
        {
          LOBYTE(v38) = 1;
          break;
        }
        result = (const char *)strcmp(v20, "CABAC");
        if (!(_DWORD)result)
        {
          v33 = 1;
          break;
        }
        result = (const char *)strcmp(v20, "LTR");
        if (!(_DWORD)result)
        {
          LOBYTE(v37) = 1;
          break;
        }
        v21 = v18;
        result = strtok(0, v18);
        if (!result)
          goto LABEL_58;
        v22 = result;
        v23 = strtok(0, ",");
        if (!v23)
          v23 = (char *)v22;
        result = (const char *)atoi(v23);
        if (result > 0x63)
          goto LABEL_58;
        v24 = (int)result;
        result = (const char *)strcmp(v20, "RVRA7");
        if (!(_DWORD)result)
        {
          v17 = 0;
          v16 = 0;
          v15 = 0;
          LODWORD(v39) = 0;
          BYTE4(v39) = v24 + 1;
          v14 = 1;
LABEL_58:
          v18 = v21;
          break;
        }
        result = (const char *)strcmp(v20, "RVRA4");
        if (!(result | v14))
        {
          v17 = 0;
          v16 = 0;
          v14 = 0;
          LODWORD(v39) = 0;
          BYTE4(v39) = v24 + 1;
          v15 = 1;
          goto LABEL_58;
        }
        result = (const char *)strcmp(v20, "RVRA1");
        if (!(_DWORD)result && !v14 && !v15)
        {
          v16 = 0;
          v14 = 0;
          LODWORD(v39) = 0;
          BYTE4(v39) = v24 + 1;
          v17 = 1;
          goto LABEL_58;
        }
        result = (const char *)strcmp(v20, "RVRA3");
        if (!(_DWORD)result && !v14 && !v15 && !v17)
        {
          v15 = 0;
          v14 = 0;
          LODWORD(v39) = 0;
          BYTE4(v39) = v24 + 1;
          v16 = 1;
          goto LABEL_58;
        }
        result = (const char *)strcmp(v20, "RVRA2");
        if ((_DWORD)result || v14 || v15 || v16 || v17)
        {
          result = (const char *)strcmp(v20, "MVRA");
          if ((_DWORD)result)
          {
            result = (const char *)strcmp(v20, "VRA");
            if ((_DWORD)result)
            {
              result = (const char *)strcmp(v20, "UEP");
              if ((_DWORD)result)
              {
                result = (const char *)strcmp(v20, "AS");
                if ((_DWORD)result)
                {
                  result = (const char *)strcmp(v20, "QS");
                  if ((_DWORD)result)
                  {
                    result = (const char *)strcmp(v20, "CR");
                    if ((_DWORD)result)
                    {
                      result = (const char *)strcmp(v20, "CH");
                      if ((_DWORD)result && (result = (const char *)strcmp(v20, "CH1"), (_DWORD)result))
                      {
                        result = (const char *)strcmp(v20, "FA");
                        v25 = v35;
                        if (!(_DWORD)result)
                          v25 = v24 + 1;
                        LODWORD(v35) = v25;
                      }
                      else
                      {
                        BYTE4(v34) = v24 + 1;
                      }
                    }
                    else
                    {
                      LOBYTE(v34) = v24 + 1;
                    }
                  }
                  else
                  {
                    BYTE4(v35) = v24 + 1;
                  }
                }
                else
                {
                  v36[0] = v24 + 1;
                }
              }
            }
            else
            {
              *(_DWORD *)&v36[4] = v24 + 1;
            }
          }
          else
          {
            *(_DWORD *)&v36[8] = v24 + 1;
          }
          goto LABEL_58;
        }
        v14 = 0;
        v15 = 0;
        v16 = 0;
        ++v13;
        v19 += 20;
        LODWORD(v39) = 1;
        BYTE4(v39) = v24 + 1;
        v18 = v21;
        if (v10 == v13)
        {
          LOBYTE(v14) = 0;
          v15 = 0;
          LOBYTE(v16) = 0;
          v17 = 0;
          v26 = 0;
          a1 = v31;
          v3 = v32;
          v5 = v33;
          v27 = v37;
          v28 = 1;
          goto LABEL_65;
        }
      }
      ++v13;
    }
    while (v13 != v10);
    a1 = v31;
    v5 = v33;
    if ((_DWORD)v39 == 1)
    {
      v26 = 0;
      v28 = 1;
      v3 = v32;
      v27 = v37;
      goto LABEL_65;
    }
    v3 = v32;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    LOBYTE(v14) = 0;
    v15 = 0;
    LOBYTE(v16) = 0;
    v17 = 0;
    v38 = 0;
    memset(v36, 0, sizeof(v36));
    BYTE4(v39) = 0;
  }
  v27 = v37;
  v28 = 0;
  v26 = 1;
LABEL_65:
  a1[1724] = v26;
  a1[1627] = v34;
  a1[1623] = v38;
  a1[1622] = (HIDWORD(v38) | *(_DWORD *)&v36[8]) != 0;
  if (v15 == 1)
    v29 = 1;
  else
    v29 = v28;
  a1[1624] = v29;
  a1[1625] = v16;
  if (v17 == 1)
    v30 = 1;
  else
    v30 = v14;
  a1[1626] = v30;
  a1[1618] = BYTE4(v39);
  a1[1619] = *(_QWORD *)&v36[4] != 0;
  a1[1620] = v36[0];
  a1[1621] = BYTE4(v35);
  a1[5076] = v35;
  a1[1600] = BYTE4(v34);
  *(_BYTE *)(v3 + 240) = v5;
  *(_BYTE *)(v3 + 616) = v27;
  return result;
}

double sub_1B68DFE94(int a1, int a2, uint64_t a3, int a4)
{
  unsigned int v8;
  unsigned int v9;
  double result;

  bzero((void *)(a3 + 11), 0x741uLL);
  *(_WORD *)(a3 + 8) = 256;
  *(_BYTE *)(a3 + 10) = 0;
  *(_QWORD *)a3 = 0x200000004DLL;
  *(_BYTE *)(a3 + 17) = a4 & ~(a4 >> 31);
  v8 = (a2 + 15) >> 4;
  v9 = (a1 + 15) >> 4;
  *(_DWORD *)(a3 + 272) = 1;
  *(_DWORD *)(a3 + 280) = 3;
  *(_DWORD *)(a3 + 1320) = 2;
  *(_DWORD *)(a3 + 1328) = v9 - 1;
  *(_DWORD *)(a3 + 1332) = v8 - 1;
  *(_BYTE *)(a3 + 1336) = 1;
  result = 0.0;
  *(_OWORD *)(a3 + 1337) = 0u;
  *(_DWORD *)(a3 + 1353) = 0;
  *(_QWORD *)(a3 + 1868) = 0x8000000020;
  *(_DWORD *)(a3 + 1876) = v8 * v9 - 1;
  return result;
}

_BYTE *sub_1B68DFF58(_BYTE *result, _DWORD *a2, _BYTE *a3, signed int a4, char a5)
{
  int v5;
  int v6;
  signed int v7;

  v5 = (char)a3[238];
  if (v5 >= 32)
    v6 = 32;
  else
    v6 = (char)a3[238];
  if (v6 <= 1)
    v6 = 1;
  v7 = (v6 + 1) >> 1;
  if (a5)
    v7 = v6;
  if (a4 > v7)
    LOBYTE(v7) = a4;
  if (v5 >= 2 && !a3[281] && a3[236])
    LOBYTE(v7) = v7 + 1;
  *result = v6;
  *a2 = (char)v7;
  return result;
}

double sub_1B68DFFB4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 18) = 0;
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 108);
  *(_DWORD *)(a2 + 44) = *(unsigned __int8 *)(a1 + 109);
  *(_DWORD *)(a2 + 48) = *(unsigned __int8 *)(a1 + 110);
  *(_BYTE *)(a2 + 52) = 0;
  *(_WORD *)(a2 + 66) = 0;
  *(_BYTE *)(a2 + 68) = 0;
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 444);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 448);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 452);
  *(_BYTE *)(a2 + 18) = 1;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 456);
  *(_BYTE *)(a2 + 24) = *(_DWORD *)(a1 + 428);
  *(_BYTE *)(a2 + 25) = 1;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 432);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 436);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 440);
  *(_BYTE *)(a2 + 65) = 1;
  *(_DWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 108) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a2 + 236) = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a2 + 364) = 0;
  *(_QWORD *)&result = 0x1700000017;
  *(_OWORD *)(a2 + 492) = xmmword_1B6917E00;
  return result;
}

uint64_t sub_1B68E0074(int *a1, int a2, uint64_t a3)
{
  pthread_mutex_t *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  *a1 = a2;
  v5 = sub_1B68A37A0();
  *((_QWORD *)a1 + 2) = v5;
  if (!v5)
    return 4294967188;
  if (*a1 == -1)
  {
    v6 = a1 + 2;
LABEL_4:
    *v6 = 0;
    return 4294967188;
  }
  v7 = malloc_type_malloc(4 * (*a1 + 1), 0x4CF1F002uLL);
  *((_QWORD *)a1 + 1) = v7;
  if (!v7)
    return 4294967188;
  LODWORD(v8) = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    v9 = 0;
    do
    {
      *(_BYTE *)(*((_QWORD *)a1 + 1) + v9) = 0;
      v8 = *a1;
    }
    while (v9++ < v8);
    if (!(_DWORD)v8)
    {
      v6 = a1 + 6;
      goto LABEL_4;
    }
  }
  v11 = malloc_type_malloc(50640 * (int)v8, 0x4CF1F002uLL);
  *((_QWORD *)a1 + 3) = v11;
  if (!v11)
    return 4294967188;
  bzero(v11, 50640 * *a1);
  if (*a1 < 1)
    return 0;
  v12 = 0;
  v13 = 0;
  do
  {
    result = sub_1B68E0FD8(*((_QWORD *)a1 + 3) + v12, a3);
    if ((_DWORD)result)
      break;
    ++v13;
    v12 += 50640;
  }
  while (v13 < *a1);
  return result;
}

void sub_1B68E0194(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v5;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  float v13;
  int v14;
  int v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float v25;
  int v26;
  int v27;
  __int128 v28;
  double v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  char v38;
  int v39;
  unint64_t v40;
  double v41;
  double v42;
  BOOL v43;
  int v44;
  double v45;
  int v46;
  int v47;

  v5 = *(unsigned __int8 *)(a2 + 211);
  *(_DWORD *)a1 = (char)v5;
  if (v5)
  {
    if (v5 == 32)
    {
      v7 = 16 - (a4 & 0xF);
      if ((a4 & 0xF) == 0)
        v7 = 0;
      v8 = 16 - (a3 & 0xF);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      if ((a3 & 0xF) == 0)
        v8 = 0;
      v9 = v8 + a3;
      v10 = v7 + a4;
      v11 = *(_DWORD *)(a2 + 84);
      *(_DWORD *)(a1 + 64) = v11;
      if (*(_BYTE *)(a2 + 659))
      {
        v11 = *(unsigned __int8 *)(a2 + 662);
        *(_DWORD *)(a1 + 64) = v11;
      }
      if (*(_BYTE *)(a2 + 324))
        v12 = 0;
      else
        v12 = *(unsigned __int8 *)(a2 + 237);
      *(_DWORD *)(a1 + 68) = v12;
      *(_QWORD *)(a1 + 40) = 0x1D0000001DLL;
      *(_DWORD *)(a1 + 48) = v9;
      *(_DWORD *)(a1 + 52) = v10;
      *(_DWORD *)(a1 + 56) = *(char *)(a2 + 212);
      *(_DWORD *)(a1 + 60) = *(char *)(a2 + 213);
      *(_DWORD *)(a1 + 72) = 30;
      v13 = *(float *)(a2 + 60);
      *(float *)(a1 + 76) = v13;
      v14 = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a1 + 80) = v14;
      *(_QWORD *)(a1 + 84) = 0x200000001;
      *(_BYTE *)(a1 + 92) = *(_DWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 93) = *(_DWORD *)(a2 + 76);
      *(_BYTE *)(a1 + 94) = *(_DWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 660);
      *(_DWORD *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 108) = v10 * v9 / 256;
      *(_QWORD *)(a1 + 112) = 0x1E00000000;
      *(_DWORD *)(a1 + 120) = v9;
      *(_DWORD *)(a1 + 124) = v10;
      *(_DWORD *)(a1 + 128) = v9 / 16;
      *(_DWORD *)(a1 + 132) = 0;
      *(_BYTE *)(a1 + 136) = 0;
      v15 = *(_DWORD *)(a2 + 216);
      v16 = *(_DWORD *)(a2 + 220);
      *(_DWORD *)(a1 + 160) = v11 - 1;
      *(_DWORD *)(a1 + 164) = v12 + 1;
      *(_DWORD *)(a1 + 168) = 1;
      *(_OWORD *)(a1 + 176) = xmmword_1B6917EA0;
      v17 = (float)v14;
      v18 = v13;
      v19 = sub_1B68F7888(v17 / (v13 * 8.0));
      *(_QWORD *)(a1 + 192) = (uint64_t)v19;
      *(_QWORD *)(a1 + 200) = (uint64_t)v19;
      *(_QWORD *)(a1 + 208) = (uint64_t)v19;
      *(_QWORD *)(a1 + 216) = (uint64_t)v19;
      *(double *)(a1 + 224) = sub_1B68F7888(v17 * 160.0 / 115.0);
      v20 = sub_1B68F7888(v17 * 60.0 / 115.0);
      *(double *)(a1 + 232) = v20;
      *(double *)(a1 + 240) = sub_1B68F7888(v17 * 42.0 / 115.0);
      *(_QWORD *)(a1 + 248) = 0;
      *(_OWORD *)(a1 + 256) = 0u;
      v21 = sub_1B68F7888((v17 + v17) / v18);
      *(double *)(a1 + 272) = v21;
      v22 = sub_1B68F7888(v21 * 10.0 / 31.0);
      *(double *)(a1 + 280) = v22;
      *(double *)(a1 + 288) = sub_1B68F7888(v22);
      v23 = sub_1B68F7888(v22 * 1.40039253);
      *(double *)(a1 + 296) = v23;
      *(_OWORD *)(a1 + 472) = *(_OWORD *)(a1 + 280);
      *(double *)(a1 + 488) = v23;
      *(_QWORD *)(a1 + 456) = 0x4024000000000000;
      *(_QWORD *)(a1 + 464) = 0x4024000000000000;
      *(_DWORD *)(a1 + 3760) = v15;
      *(_DWORD *)(a1 + 3764) = v16;
      *(_QWORD *)(a1 + 392) = 0xFFFFFFFFLL;
      *(_DWORD *)(a1 + 400) = 0;
      *(_OWORD *)(a1 + 408) = 0u;
      *(double *)(a1 + 424) = v20;
      *(_QWORD *)(a1 + 432) = 0;
      *(_BYTE *)(a1 + 440) = 0;
      v24 = sub_1B68F7888((float)((float)v15 / *(float *)(a1 + 76)));
      *(double *)(a1 + 3752) = v24;
      v25 = sub_1B68F7888(v24 * v17 / 1000.0);
      *(float *)(a1 + 3780) = v25;
      *(float *)(a1 + 3768) = v25;
      *(_DWORD *)(a1 + 3776) = 0;
      *(float *)(a1 + 3772) = v25 * 0.0;
      v26 = *(_DWORD *)(a1 + 124) * *(_DWORD *)(a1 + 120) / 256;
      *(_OWORD *)(a1 + 304) = 0u;
      *(double *)(a1 + 320) = (double)v26 * 400.0;
      *(_DWORD *)(a1 + 128) = v26;
      v27 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)(a1 + 368) = 18;
      *(_DWORD *)(a1 + 372) = v27;
      *(_OWORD *)(a1 + 496) = 0u;
      memset_pattern16((void *)(a1 + 512), &unk_1B69181B0, 0x10uLL);
      *(_DWORD *)(a1 + 536) = 0;
      *(_QWORD *)(a1 + 528) = 0;
      *(double *)(a1 + 592) = sub_1B68F7888((double)(*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48) / 256) / 396.0);
      *(_QWORD *)(a1 + 3812) = 0;
      *(_DWORD *)(a1 + 3860) = (int)(v17 / (v18 + 0.001));
      *(_DWORD *)(a1 + 3884) = 0;
      *(_QWORD *)(a1 + 3824) = 0;
      *(_OWORD *)(a1 + 3832) = 0u;
      *(_OWORD *)(a1 + 3864) = 0u;
      *(_QWORD *)&v28 = 0x100000001;
      *((_QWORD *)&v28 + 1) = 0x100000001;
      *(_OWORD *)(a1 + 3888) = v28;
      *(_DWORD *)(a1 + 3920) = 0;
      *(_DWORD *)(a1 + 3988) = 30;
      *(_OWORD *)(a1 + 3992) = xmmword_1B6917EB0;
    }
    v29 = *(double *)(a2 + 184);
    if (v29 > 0.0)
    {
      v30 = *(_DWORD *)(a2 + 192);
      v31 = (int)(v29 * (double)v30 + 0.5);
      if (!v30)
        v30 = *(_DWORD *)(a2 + 52);
      if (*(_BYTE *)(a2 + 115))
      {
        v32 = 0;
        v33 = (unsigned int *)(a2 + 152);
        v34 = *(unsigned __int8 *)(a2 + 115);
        do
        {
          v36 = *v33++;
          v35 = v36;
          if (v36 > v32)
            v32 = v35;
          --v34;
        }
        while (v34);
        v37 = 60 * v32 / 0x3E8 + 1;
        v38 = 1;
      }
      else
      {
        v37 = 0;
        v38 = 0;
      }
      sub_1B68CA6CC(a1 + 4032, v30, v31, *(_BYTE *)(a2 + 210) == 1, v37, v38, *(_DWORD *)(a2 + 412), *(unsigned __int8 *)(a2 + 115), *(float *)(a2 + 60));
      if (!v39)
      {
        v40 = *(_QWORD *)(a2 + 196);
        v41 = 0.6;
        v42 = 1.0;
        if ((_DWORD)v40)
          v42 = 0.6;
        v43 = HIDWORD(v40) == 0;
        v44 = *(_DWORD *)(a1 + 4052);
        v45 = (double)v44;
        v46 = (int)(v42 * (double)v44 + 0.5);
        *(_DWORD *)(a1 + 4068) = v46;
        v47 = v44 - v46;
        if (v43)
          v41 = 0.0;
        *(_DWORD *)(a1 + 4072) = v47;
        *(_DWORD *)(a1 + 4076) = (int)(v41 * v45);
      }
    }
  }
}

double sub_1B68E0664(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, double result)
{
  int v6;
  double *v8;
  double v14;
  int v15;
  double v16;
  unsigned int v17;
  double v18;
  float v19;
  unsigned int v20;
  char v21;
  char v22;
  double v23;
  int v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  double v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  size_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  char v51;
  int v52;
  unint64_t v53;
  double v54;
  double v55;
  int v56;
  int v57;

  v6 = *(unsigned __int8 *)(a2 + 211);
  *(_DWORD *)a1 = (char)v6;
  if (v6)
  {
    if (v6 == 2)
    {
      v8 = (double *)(a1 + 264);
      *(_OWORD *)(a1 + 264) = xmmword_1B6917EC0;
      *(_DWORD *)(a1 + 296) = 0;
      *(_OWORD *)(a1 + 304) = xmmword_1B6917ED0;
      *(_QWORD *)(a1 + 320) = 0;
      *(_QWORD *)(a1 + 328) = 0;
      __asm { FMOV            V0.2D, #23.0 }
      *(_OWORD *)(a1 + 352) = _Q0;
      *(_QWORD *)(a1 + 368) = 0x4037000000000000;
      if (*(_BYTE *)(a2 + 577) == 1)
      {
        v14 = 28.0;
        if (!*(_BYTE *)(a2 + 599))
          v14 = 31.0;
        *(double *)(a1 + 352) = v14;
        *(double *)(a1 + 360) = v14;
        *(double *)(a1 + 368) = v14;
      }
      *(_DWORD *)(a1 + 376) = 120;
      *(_QWORD *)(a1 + 400) = 0;
      *(_DWORD *)(a1 + 407) = 0;
      *(_DWORD *)(a1 + 411) = 0x20000;
      *(_BYTE *)(a1 + 416) = 0;
      *(_DWORD *)(a1 + 420) = 0;
      *(_QWORD *)(a1 + 336) = 0;
      v15 = *(unsigned __int8 *)(a2 + 577);
      *(_DWORD *)(a1 + 468) = v15 == 1;
      *(_WORD *)(a1 + 252) = a3;
      *(_WORD *)(a1 + 254) = a4;
      HIDWORD(v16) = 0x20000000;
      *(_OWORD *)(a1 + 436) = xmmword_1B6917EE0;
      *(_DWORD *)(a1 + 220) = 0;
      *(_BYTE *)(a1 + 224) = 0;
      *(_QWORD *)(a1 + 456) = 0;
      *(_DWORD *)(a1 + 464) = 0;
      *(_QWORD *)(a1 + 228) = 0;
      *(_QWORD *)(a1 + 244) = 0;
      *(_QWORD *)(a1 + 236) = 0;
      LODWORD(v16) = *(_DWORD *)(a2 + 60);
      if (*(float *)&v16 > 0.0 && *(float *)&v16 < 61.0)
      {
        v16 = *(float *)&v16;
        *(double *)(a1 + 272) = v16;
      }
      v17 = *(_DWORD *)(a2 + 52);
      if (v17)
      {
        v18 = (double)v17;
        *v8 = (double)v17;
      }
      else
      {
        v18 = 3500000.0;
      }
      *(_BYTE *)(a1 + 412) = *(_BYTE *)(a2 + 212);
      *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 415) = v15 != 1;
      v19 = *(float *)(a2 + 312);
      if (v19 >= *(float *)(a2 + 308))
        v19 = *(float *)(a2 + 308);
      v20 = *(_DWORD *)(a2 + 304);
      if ((v20 | 0x800000) != 0x800000)
        v19 = -1.0;
      if (v20 >= *(_DWORD *)(a2 + 300))
        v20 = *(_DWORD *)(a2 + 300);
      if (v19 != -1.0)
        v20 = (float)(*(float *)(a2 + 60) * v19);
      *(_DWORD *)(a1 + 376) = v20;
      if (*(unsigned __int8 *)(a2 + 675) >= 8u)
        v21 = 8;
      else
        v21 = *(_BYTE *)(a2 + 675);
      if (*(_BYTE *)(a2 + 675))
        v22 = v21;
      else
        v22 = 5;
      *(_BYTE *)(a1 + 344) = v22;
      *(_BYTE *)(a1 + 213) = *(_BYTE *)(a2 + 4851);
      *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 4852);
      if (*(_BYTE *)(a2 + 115) && v15 == 1)
      {
        *(_BYTE *)(a1 + 416) = 1;
        *(_DWORD *)(a1 + 1880) = 0;
        *(_DWORD *)(a1 + 2008) = 0;
        *(_QWORD *)(a1 + 2016) = 0;
        *(_DWORD *)(a1 + 2024) = 100;
        *(_WORD *)(a1 + 2028) = 25700;
        *(_QWORD *)(a1 + 2040) = 0;
        *(_QWORD *)(a1 + 2032) = 0;
        LODWORD(v16) = *(_DWORD *)(a2 + 152);
        v23 = (double)*(unint64_t *)&v16 / 1000.0;
        *(double *)(a1 + 2032) = v23;
        v24 = *(_DWORD *)(a2 + 120);
        *(_DWORD *)(a1 + 2040) = v24;
        v25 = (double)v24 / (v18 * v23);
        if (v23 < 1.0)
        {
          *(_QWORD *)(a1 + 2032) = 0x3FF0000000000000;
          v23 = 1.0;
        }
        if (v25 < 1.2)
          *v8 = (double)v24 / (v23 * 1.2);
        v26 = (uint64_t)(v23 * 600.0);
        v27 = v26 / 3;
        v28 = (unsigned __int128)(v26 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
        v29 = v26 / 6;
        *(_QWORD *)(a1 + 1888) = v26;
        *(_QWORD *)(a1 + 1896) = 11 * v26 / 12;
        v30 = (int)(v23 * 61.0) + 1;
        *(_DWORD *)(a1 + 1880) = v30;
        *(_QWORD *)(a1 + 1904) = v27;
        *(_QWORD *)(a1 + 1912) = v29;
        *(_QWORD *)(a1 + 1920) = (v28 >> 1) + ((unint64_t)v28 >> 63);
        *(_QWORD *)(a1 + 1928) = (v28 >> 2) + ((unint64_t)v28 >> 63);
        *(_DWORD *)(a1 + 1968) = v24;
        *(_DWORD *)(a1 + 1972) = 11 * v24 / 12;
        *(_DWORD *)(a1 + 1976) = 5 * v24 / 12;
        *(_DWORD *)(a1 + 1980) = v24 / 6;
        *(_DWORD *)(a1 + 1984) = v24 / 11;
        *(_DWORD *)(a1 + 1988) = v24 / 21;
        if (v23 <= 3.0)
          v31 = 4;
        else
          v31 = 6;
        *(_DWORD *)(a1 + 2008) = v31;
        *(_QWORD *)(a1 + 2016) = malloc_type_calloc(16 * v30, 1uLL, 0x4AE20AB7uLL);
      }
      v32 = *(unsigned __int8 *)(a2 + 318) < 2u || *(_DWORD *)(a1 + 376) < 2u;
      v33 = 0;
      v34 = *(unsigned int *)(a1 + 296);
      v35 = *(_DWORD *)(a1 + 468);
      v36 = *(double *)(a1 + 264) / *(double *)(a1 + 272);
      do
      {
        v37 = a1 + v33;
        v38 = (_OWORD *)(a1 + v33 + 472);
        *v38 = 0uLL;
        v38[1] = 0uLL;
        *(double *)(v37 + 512) = v36;
        *(_QWORD *)(v37 + 552) = v34;
        *(_DWORD *)(v37 + 504) = 0;
        *(_QWORD *)(a1 + v33 + 564) = 0xA00000000;
        *(_OWORD *)(a1 + v33 + 520) = xmmword_1B6917EF0;
        *(_OWORD *)(a1 + v33 + 536) = 0uLL;
        *(_DWORD *)(v37 + 560) = v35;
        v33 += 432;
        *(_QWORD *)(v37 + 896) = 0;
      }
      while (v33 != 1296);
      *(_DWORD *)(a1 + 204) = 0;
      *(_BYTE *)(a1 + 209) = 0;
      *(_BYTE *)(a1 + 200) = 0;
      v39 = 2 * *(unsigned __int8 *)(a2 + 318) + 5;
      v40 = *(_DWORD *)(a1 + 216);
      v41 = *(_BYTE *)(a2 + 577) == 1;
      *(_QWORD *)(a1 + 1808) = 0;
      *(_QWORD *)(a1 + 1824) = 0;
      *(_QWORD *)(a1 + 1816) = 0;
      *(_QWORD *)(a1 + 1840) = 0;
      *(_QWORD *)(a1 + 1856) = 0;
      *(_QWORD *)(a1 + 1848) = 0;
      *(_WORD *)(a1 + 1864) = 0;
      *(_DWORD *)(a1 + 1876) = v32;
      *(_BYTE *)(a1 + 1866) = v41;
      *(_QWORD *)(a1 + 1868) = 0xFFFFFFFF00000000;
      v42 = 8 * v39;
      *(_DWORD *)(a1 + 1832) = v39;
      *(_QWORD *)(a1 + 1808) = malloc_type_calloc(8 * v39, 1uLL, 0x4AE20AB7uLL);
      *(_QWORD *)(a1 + 1824) = malloc_type_calloc(v42, 1uLL, 0x4AE20AB7uLL);
      if (v40 != 2)
        *(_QWORD *)(a1 + 1816) = malloc_type_calloc(v42, 1uLL, 0x4AE20AB7uLL);
    }
    result = *(double *)(a2 + 184);
    if (result > 0.0)
    {
      v43 = *(_DWORD *)(a2 + 192);
      v44 = (int)(result * (double)v43 + 0.5);
      if (!v43)
        v43 = *(_DWORD *)(a2 + 52);
      if (*(_BYTE *)(a2 + 115))
      {
        v45 = 0;
        v46 = (unsigned int *)(a2 + 152);
        v47 = *(unsigned __int8 *)(a2 + 115);
        do
        {
          v49 = *v46++;
          v48 = v49;
          if (v49 > v45)
            v45 = v48;
          --v47;
        }
        while (v47);
        v50 = 60 * v45 / 0x3E8 + 1;
        v51 = 1;
      }
      else
      {
        v50 = 0;
        v51 = 0;
      }
      result = sub_1B68CA6CC(a1 + 8, v43, v44, *(_BYTE *)(a2 + 210) == 1, v50, v51, *(_DWORD *)(a2 + 412), *(unsigned __int8 *)(a2 + 115), *(float *)(a2 + 60));
      if (!v52)
      {
        v53 = *(_QWORD *)(a2 + 196);
        v54 = 0.6;
        v55 = 1.0;
        if ((_DWORD)v53)
          v55 = 0.6;
        if (!HIDWORD(v53))
          v54 = 0.0;
        v56 = *(_DWORD *)(a1 + 28);
        v57 = (int)(v55 * (double)v56 + 0.5);
        *(_DWORD *)(a1 + 44) = v57;
        *(_DWORD *)(a1 + 48) = v56 - v57;
        *(_DWORD *)(a1 + 52) = (int)(v54 * (double)v56);
        result = (double)(5 * v56) * 0.01;
        *(_DWORD *)(a1 + 36) = (int)result;
      }
    }
  }
  return result;
}

void sub_1B68E0C70(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  int v6;
  int v7;
  int v8;
  _OWORD *v9;
  int v10;
  int v11;
  int v12;
  float v13;
  int v14;
  int v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float v24;
  int v25;

  v4 = *(char *)(a2 + 211);
  *(_DWORD *)a1 = v4;
  if ((v4 & 1) != 0)
  {
    v6 = 0;
    v7 = 16 - (a4 & 0xF);
    if ((a4 & 0xF) == 0)
      v7 = 0;
    v8 = 16 - (a3 & 0xF);
    v9 = (_OWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if ((a3 & 0xF) == 0)
      v8 = 0;
    v10 = v8 + a3;
    v11 = v7 + a4;
    v12 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a1 + 72) = v12;
    if (!*(_BYTE *)(a2 + 324))
      v6 = *(unsigned __int8 *)(a2 + 237);
    *(_DWORD *)(a1 + 76) = v6;
    *(_QWORD *)(a1 + 48) = 0x1D0000001DLL;
    *(_DWORD *)(a1 + 56) = v10;
    *(_DWORD *)(a1 + 60) = v11;
    *(_DWORD *)(a1 + 64) = *(char *)(a2 + 212);
    *(_DWORD *)(a1 + 68) = *(char *)(a2 + 213);
    *(_DWORD *)(a1 + 80) = 30;
    v13 = *(float *)(a2 + 60);
    *(float *)(a1 + 84) = v13;
    v14 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 88) = v14;
    *(_QWORD *)(a1 + 92) = 0x200000001;
    *(_BYTE *)(a1 + 100) = *(_DWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 101) = *(_DWORD *)(a2 + 76);
    *(_BYTE *)(a1 + 102) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 116) = v11 * v10 / 256;
    *(_QWORD *)(a1 + 120) = 0x1E00000000;
    *(_DWORD *)(a1 + 128) = v10;
    *(_DWORD *)(a1 + 132) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    *(_DWORD *)(a1 + 144) = v10 / 16;
    v15 = *(_DWORD *)(a2 + 216);
    v16 = *(_DWORD *)(a2 + 220);
    *(_DWORD *)(a1 + 176) = v12 - 1;
    *(_DWORD *)(a1 + 180) = v6 + 1;
    *(_DWORD *)(a1 + 184) = 1;
    *(_OWORD *)(a1 + 192) = xmmword_1B6917EA0;
    v17 = (float)v14;
    v18 = v13;
    v19 = sub_1B68F7888(v17 / (v13 * 8.0));
    *(_QWORD *)(a1 + 208) = (uint64_t)v19;
    *(_QWORD *)(a1 + 216) = (uint64_t)v19;
    *(_QWORD *)(a1 + 224) = (uint64_t)v19;
    *(_QWORD *)(a1 + 232) = (uint64_t)v19;
    *(double *)(a1 + 240) = sub_1B68F7888(v17 * 160.0 / 115.0);
    *(double *)(a1 + 248) = sub_1B68F7888(v17 * 60.0 / 115.0);
    *(double *)(a1 + 256) = sub_1B68F7888(v17 * 42.0 / 115.0);
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    v20 = sub_1B68F7888((v17 + v17) / v18);
    *(double *)(a1 + 288) = v20;
    v21 = sub_1B68F7888(v20 * 10.0 / 31.0);
    *(double *)(a1 + 296) = v21;
    *(double *)(a1 + 304) = sub_1B68F7888(v21);
    v22 = sub_1B68F7888(v21 * 1.40039253);
    *(double *)(a1 + 312) = v22;
    v9[8] = *v9;
    *(double *)(a1 + 440) = v22;
    *(_DWORD *)(a1 + 3712) = v15;
    *(_DWORD *)(a1 + 3716) = v16;
    *(_DWORD *)(a1 + 416) = -1;
    v23 = sub_1B68F7888((float)((float)v15 / *(float *)(a1 + 84)));
    *(double *)(a1 + 3704) = v23;
    v24 = sub_1B68F7888(v23 * v17 / 1000.0);
    *(float *)(a1 + 3732) = v24;
    *(float *)(a1 + 3720) = v24;
    *(_DWORD *)(a1 + 3728) = 0;
    *(float *)(a1 + 3724) = v24 * 0.0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    v25 = *(_DWORD *)(a1 + 132) * *(_DWORD *)(a1 + 128) / 256;
    *(double *)(a1 + 336) = (double)v25 * 400.0;
    *(_DWORD *)(a1 + 144) = v25;
    *(_DWORD *)(a1 + 384) = 18;
    *(_DWORD *)(a1 + 388) = *(_DWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 456) = 0;
    memset_pattern16((void *)(a1 + 464), &unk_1B69181B0, 0x10uLL);
    *(_DWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    *(double *)(a1 + 544) = sub_1B68F7888((double)(*(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56) / 256) / 396.0);
    *(_QWORD *)(a1 + 3764) = 0;
    *(_DWORD *)(a1 + 3796) = (int)(v17 / (v18 + 0.001));
    *(_DWORD *)(a1 + 3800) = -1;
    *(_QWORD *)(a1 + 3776) = 0;
    *(_DWORD *)(a1 + 3808) = 0;
    *(_QWORD *)(a1 + 3824) = 0x100000001;
    *(_DWORD *)(a1 + 3832) = 1;
    *(_DWORD *)(a1 + 3852) = 0;
    *(_DWORD *)(a1 + 3916) = 30;
    *(_OWORD *)(a1 + 3920) = xmmword_1B6917EB0;
  }
}

uint64_t sub_1B68E0FD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  __int16 v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int32x2_t v20;
  int32x2_t v21;
  char *v22;
  unsigned __int8 *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  char v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  char *v36;
  char *v37;
  char *v38;
  char *v39;

  v4 = (_QWORD *)(a1 + 48112);
  v5 = malloc_type_calloc(288 * *(int *)(a2 + 57096) + 288, 1uLL, 0x4AE20AB7uLL);
  v4[313] = v5;
  if (!v5)
    return 4294967188;
  v4[8] = a1 + 47360;
  v4[9] = a1 + 47426;
  v4[10] = a1 + 47472;
  v4[11] = a1 + 47800;
  v4[12] = a1 + 47841;
  v6 = *(unsigned __int8 *)(a2 + 205448);
  if (!*(_BYTE *)(a2 + 205448))
    goto LABEL_8;
  v7 = 0;
  v8 = (unsigned __int8 *)(a2 + 119440);
  do
  {
    v7 |= *v8;
    v8 += 336;
    --v6;
  }
  while (v6);
  if (v7 == 1)
  {
    v9 = malloc_type_calloc(0x3D0uLL, 1uLL, 0x4AE20AB7uLL);
    *v4 = v9;
    if (!v9)
      return 4294967188;
  }
  else
  {
LABEL_8:
    *v4 = 0;
  }
  if (!*(_BYTE *)(a2 + 205933))
  {
    v11 = *(_QWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 14104) = 16843009;
    *(_DWORD *)(a1 + 14107) = 16843009;
    *(_BYTE *)(a1 + 14111) = 0;
    *(_BYTE *)(a1 + 14117) = *(_BYTE *)(v11 + 4824);
    *(_BYTE *)(a1 + 14092) = *(_BYTE *)(v11 + 400);
    v12 = malloc_type_calloc(0xF30uLL, 1uLL, 0x4AE20AB7uLL);
    *(_QWORD *)(a1 + 14096) = v12;
    if (v12)
    {
      if (*(unsigned __int8 *)(v11 + 265) - 3 >= 2)
        v13 = 1;
      else
        v13 = 2;
      *(_DWORD *)(a1 + 13028) = v13;
      *(_BYTE *)(a1 + 14118) = *(_BYTE *)(v11 + 368);
      *(_BYTE *)(a1 + 31) = *(_BYTE *)(v11 + 266);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(v11 + 267);
      if (*(_BYTE *)(v11 + 663))
        v14 = 0;
      else
        v14 = *(unsigned __int8 *)(v11 + 292);
      *(_WORD *)(a1 + 2) = v14;
      *(_WORD *)a1 = *(_WORD *)(v11 + 294);
      *(_BYTE *)(a1 + 4) = *(_BYTE *)(v11 + 271);
      *(_BYTE *)(a1 + 6) = *(_BYTE *)(v11 + 273);
      *(_BYTE *)(a1 + 5) = *(_BYTE *)(v11 + 274);
      v15 = *(unsigned __int8 *)(v11 + 287);
      *(_BYTE *)(a1 + 7) = v15;
      *(_BYTE *)(a1 + 9) = *(_BYTE *)(v11 + 278);
      v16 = *(unsigned __int8 *)(v11 + 288);
      *(_BYTE *)(a1 + 11) = v16;
      *(_BYTE *)(a1 + 12) = *(_BYTE *)(v11 + 279);
      *(_BYTE *)(a1 + 13) = *(_BYTE *)(v11 + 280);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(v11 + 276);
      *(_BYTE *)(a1 + 25) = *(_BYTE *)(v11 + 277);
      *(_BYTE *)(a1 + 33) = *(_BYTE *)(v11 + 289);
      *(_BYTE *)(a1 + 10) = v15 == 0;
      if (v16)
        v17 = 0;
      else
        v17 = *(_BYTE *)(v11 + 283) != 0;
      *(_BYTE *)(a1 + 14) = v17;
      *(_BYTE *)(a1 + 34) = *(_BYTE *)(v11 + 398);
      *(_BYTE *)(a1 + 14113) = *(_BYTE *)(v11 + 653);
      *(_BYTE *)(a1 + 14114) = *(_BYTE *)(v11 + 654);
      *(_BYTE *)(a1 + 14115) = *(_BYTE *)(v11 + 655);
      *(_BYTE *)(a1 + 14112) = *(_BYTE *)(v11 + 612);
      *(_BYTE *)(a1 + 26) = *(_BYTE *)(v11 + 268);
      *(_BYTE *)(a1 + 27) = *(_BYTE *)(v11 + 268);
      *(_WORD *)(a1 + 15) = 257;
      *(_BYTE *)(v11 + 282) = 1;
      *(_DWORD *)(a1 + 20) = 0;
      v18 = *(unsigned __int8 *)(v11 + 284);
      if (!*(_BYTE *)(v11 + 284))
      {
        v19 = 4;
        goto LABEL_28;
      }
      if (v18 == 2)
      {
        *(_DWORD *)(a1 + 20) = 6;
      }
      else if (v18 == 1)
      {
        v19 = 5;
LABEL_28:
        *(_DWORD *)(a1 + 20) = v19;
        v20 = vdup_n_s32(0x1869Fu);
        *(int32x2_t *)(a1 + 52) = v20;
        *(int32x2_t *)(a1 + 64) = v20;
        *(_BYTE *)(a1 + 144) = 1;
        *(_QWORD *)(a1 + 13040) = a1 + 13048;
        v10 = 4294967246;
LABEL_33:
        sub_1B68A3C60(a1);
        return v10;
      }
      v21 = vdup_n_s32(0x1869Fu);
      *(int32x2_t *)(a1 + 52) = v21;
      *(int32x2_t *)(a1 + 64) = v21;
      *(_BYTE *)(a1 + 144) = 1;
      *(_QWORD *)(a1 + 13040) = a1 + 13048;
      *(_BYTE *)(a1 + 14116) = *(_BYTE *)(v11 + 633);
      v22 = (char *)malloc_type_calloc(0x1309E0uLL, 1uLL, 0x4AE20AB7uLL);
      *(_QWORD *)(a1 + 104) = v22;
      if (v22)
      {
        v23 = (unsigned __int8 *)v22;
        v24 = v22 + 148560;
        v38 = v22 + 91648;
        v39 = v22 + 121733;
        v36 = v22 + 61216;
        v37 = v22 + 91301;
        v25 = v22 + 60869;
        v26 = v22 + 30784;
        v27 = v22 + 30437;
        *(_DWORD *)(a1 + 100) = 41;
        *(_QWORD *)(a1 + 112) = v22;
        *(_QWORD *)(a1 + 120) = v22 + 182592;
        *(_QWORD *)(a1 + 128) = v22 + 426048;
        v28 = *(_BYTE *)(v11 + 399) != 1;
        *(_WORD *)(v22 + 5) = 256;
        v22[7] = 0;
        *((_QWORD *)v22 + 3354) = v22 + 26848;
        sub_1B68BA5B4(0, v28, (unsigned __int8 *)v22 + 4, (unsigned __int8 *)v22 + 64);
        v23[352] = 0;
        v29 = *(_BYTE *)(v11 + 399) != 1;
        *(_WORD *)v27 = 256;
        v27[2] = 0;
        *((_QWORD *)v26 + 3310) = v23 + 57280;
        sub_1B68BA5B4(0, v29, v23 + 30436, v23 + 30496);
        *v26 = 1;
        v30 = *(_BYTE *)(v11 + 399) != 1;
        *(_WORD *)v25 = 256;
        v25[2] = 0;
        *((_QWORD *)v36 + 3310) = v23 + 87712;
        sub_1B68BA5B4(0, v30, v23 + 60868, v23 + 60928);
        *v36 = 2;
        v31 = *(_BYTE *)(v11 + 399) != 1;
        *(_WORD *)v37 = 256;
        v37[2] = 0;
        *((_QWORD *)v38 + 3310) = v23 + 118144;
        sub_1B68BA5B4(0, v31, v23 + 91300, v23 + 91360);
        *v38 = 3;
        v32 = *(_BYTE *)(a1 + 14092);
        v33 = *(_BYTE *)(v11 + 399) != 1;
        *(_WORD *)v39 = 0;
        v39[2] = v32;
        *(_QWORD *)v24 = v23 + 148576;
        sub_1B68BA5B4(0, v33, v23 + 121732, v23 + 121792);
        v34 = *(_BYTE *)(v11 + 399) != 1;
        *(_WORD *)(v24 + 3605) = 0;
        v24[3607] = 0;
        *((_QWORD *)v24 + 3804) = v23 + 179008;
        sub_1B68BA5B4(0, v34, v23 + 152164, v23 + 152224);
        *(_DWORD *)(a1 + 88) = 6;
        sub_1B68A3E0C((int32x2_t *)a1, (unsigned __int8 *)v11);
        *(_BYTE *)(a1 + 29) = 0;
        *(_BYTE *)(a1 + 30) = *(_BYTE *)(v11 + 272);
        goto LABEL_10;
      }
    }
    v10 = 4294967188;
    goto LABEL_33;
  }
LABEL_10:
  v4[16] = 0;
  v4[17] = 0;
  v10 = 0;
  if (*(_BYTE *)(a1 + 144))
  {
    v4[16] = a1 + 12640;
    v4[17] = a1 + 12896;
  }
  return v10;
}

void sub_1B68E1558(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  FILE *v29;
  FILE *v30;
  FILE *v31;
  FILE *v32;
  FILE *v33;
  FILE *v34;
  FILE *v35;
  FILE *v36;
  FILE *v37;
  FILE *v38;
  FILE *v39;
  unint64_t v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  const __CFArray *v44;
  CFIndex j;
  CFIndex Count;
  const void *ValueAtIndex;
  void *v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;

  if (a1)
  {
    v4 = a1 + 205800;
    for (i = 280; i != 1016; i += 8)
    {
      v6 = *(void **)(a1 + i);
      if (v6)
      {
        free(v6);
        *(_QWORD *)(a1 + i) = 0;
      }
    }
    v7 = *(void **)(a1 + 1016);
    if (v7)
      pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 1016));
    free(v7);
    *(_QWORD *)(a1 + 1016) = 0;
    v8 = *(void **)(a1 + 1040);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(a1 + 1040) = 0;
    }
    v9 = *(_QWORD *)(a1 + 96);
    if (v9)
    {
      MEMORY[0x1BCC9814C](v9, 0x1090C409089D355);
      *(_QWORD *)(a1 + 96) = 0;
    }
    v10 = *(_QWORD *)(a1 + 104);
    if (v10)
    {
      MEMORY[0x1BCC9814C](v10, 0x1090C409089D355);
      *(_QWORD *)(a1 + 104) = 0;
    }
    v11 = *(_QWORD *)(a1 + 120);
    if (v11)
    {
      MEMORY[0x1BCC9814C](v11, 0x1020C407CB6107DLL);
      *(_QWORD *)(a1 + 120) = 0;
    }
    v12 = *(_QWORD *)(a1 + 128);
    if (v12)
    {
      MEMORY[0x1BCC9814C](v12, 0x1000C403E1C8BA9);
      *(_QWORD *)(a1 + 128) = 0;
    }
    v13 = *(_QWORD *)(a1 + 5392);
    if (v13)
    {
      MEMORY[0x1BCC9814C](v13, 0x10A0C40342BB1B8);
      *(_QWORD *)(a1 + 5392) = 0;
    }
    v14 = *(_QWORD *)(a1 + 5400);
    if (v14)
    {
      MEMORY[0x1BCC9814C](v14, 0x1000C4081AB84E2);
      *(_QWORD *)(a1 + 5400) = 0;
    }
    v15 = *(_QWORD *)(a1 + 5408);
    if (v15)
    {
      MEMORY[0x1BCC9814C](v15, 0x1000C4081AB84E2);
      *(_QWORD *)(a1 + 5408) = 0;
    }
    v16 = *(_QWORD **)(a1 + 5416);
    if (v16)
    {
      v17 = (const void *)v16[19];
      if (v17)
      {
        CFRelease(v17);
        v16[19] = 0;
      }
      v18 = (const void *)v16[18];
      if (v18)
      {
        CFRelease(v18);
        v16[18] = 0;
      }
      v19 = (const void *)v16[20];
      if (v19)
      {
        CFRelease(v19);
        v16[20] = 0;
      }
      v16[15] = 0;
      v16[16] = 0;
      v16[17] = 0;
      v16[22] = 0;
      v16[23] = 0;
      v16[21] = 0;
      v20 = v16[24];
      if (v20)
      {
        MEMORY[0x1BCC9811C](v20, 0x1000C8077774924);
        v16[24] = 0;
      }
      v21 = v16[48];
      if (v21)
      {
        MEMORY[0x1BCC9811C](v21, 0x1000C8052888210);
        v16[48] = 0;
      }
      MEMORY[0x1BCC9814C](v16, 0x10B0C40501F5998);
      *(_QWORD *)(a1 + 5416) = 0;
    }
    v22 = *(_QWORD *)(v4 + 48);
    if (v22)
    {
      sub_1B68B4134(v22);
      *(_QWORD *)(v4 + 48) = 0;
    }
    sub_1B68FF21C(a1 + 1744);
    sub_1B68FF21C(a1 + 2800);
    sub_1B68FF21C(a1 + 3856);
    v23 = *(_QWORD *)(v4 + 56);
    if (v23)
    {
      sub_1B68C7A4C(v23);
      free(*(void **)(v4 + 56));
      *(_QWORD *)(v4 + 56) = 0;
    }
    free(*(void **)(a1 + 5512));
    *(_QWORD *)(a1 + 5512) = 0;
    free(*(void **)(a1 + 5472));
    *(_QWORD *)(a1 + 5472) = 0;
    if (*(int *)(a1 + 5464) >= 1)
    {
      v24 = 0;
      v25 = 0;
      do
      {
        free(*(void **)(*(_QWORD *)(a1 + 5480) + v24 + 80));
        *(_QWORD *)(*(_QWORD *)(a1 + 5480) + v24 + 80) = 0;
        *(_DWORD *)(*(_QWORD *)(a1 + 5480) + v24 + 72) = 0;
        ++v25;
        v24 += 88;
      }
      while (v25 < *(int *)(a1 + 5464));
    }
    free(*(void **)(a1 + 5480));
    *(_QWORD *)(a1 + 5480) = 0;
    free(*(void **)(a1 + 5488));
    *(_QWORD *)(a1 + 5488) = 0;
    free(*(void **)(a1 + 5496));
    *(_QWORD *)(a1 + 5496) = 0;
    free(*(void **)(a1 + 5440));
    *(_QWORD *)(a1 + 5440) = 0;
    if (*(int *)(a1 + 5432) >= 1)
    {
      v26 = 0;
      v27 = 0;
      do
      {
        sub_1B68E1AFC(*(_QWORD *)(a1 + 5456) + v26);
        ++v27;
        v26 += 50640;
      }
      while (v27 < *(int *)(a1 + 5432));
    }
    free(*(void **)(a1 + 5456));
    *(_QWORD *)(a1 + 5456) = 0;
    v28 = *(void **)(a1 + 5448);
    if (v28)
      pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 5448));
    free(v28);
    *(_QWORD *)(a1 + 5448) = 0;
    free(*(void **)(v4 + 1896));
    *(_QWORD *)(v4 + 1896) = 0;
    v29 = *(FILE **)(a1 + 192);
    if (v29)
      fclose(v29);
    v30 = *(FILE **)(a1 + 232);
    if (v30)
      fclose(v30);
    v31 = *(FILE **)(a1 + 264);
    if (v31)
      fclose(v31);
    v32 = *(FILE **)(a1 + 256);
    if (v32)
      fclose(v32);
    v33 = *(FILE **)(a1 + 240);
    if (v33)
      fclose(v33);
    v34 = *(FILE **)(a1 + 248);
    if (v34)
      fclose(v34);
    v35 = *(FILE **)(a1 + 272);
    if (v35)
      fclose(v35);
    v36 = *(FILE **)(a1 + 200);
    if (v36)
      fclose(v36);
    v37 = *(FILE **)(a1 + 216);
    if (v37)
      fclose(v37);
    v38 = *(FILE **)(a1 + 224);
    if (v38)
      fclose(v38);
    v39 = *(FILE **)(a1 + 208);
    if (v39)
      fclose(v39);
    if (*(_DWORD *)(v4 + 124) == 1 && *(_DWORD *)(v4 + 2260))
    {
      v40 = 0;
      v41 = a1 + 5616;
      v42 = (void **)(a1 + 5600);
      do
      {
        free(*v42);
        *v42 = 0;
        *((_DWORD *)v42 - 2) = 0;
        sub_1B68E1AFC(v41);
        ++v40;
        v41 += 50640;
        v42 += 11;
      }
      while (v40 < *(unsigned int *)(v4 + 2260));
    }
    if (a2)
    {
      v43 = *(_QWORD *)(v4 + 8);
      if (v43)
      {
        sub_1B68B4AF4(v43);
        free(*(void **)(v4 + 8));
        *(_QWORD *)(v4 + 8) = 0;
      }
      if (*(_QWORD *)v4)
      {
        free(*(void **)v4);
        *(_QWORD *)v4 = 0;
      }
      v44 = *(const __CFArray **)(v4 + 16);
      if (v44)
      {
        for (j = 0; ; ++j)
        {
          Count = CFArrayGetCount(v44);
          v44 = *(const __CFArray **)(v4 + 16);
          if (Count <= j)
            break;
          ValueAtIndex = CFArrayGetValueAtIndex(v44, j);
          CFRelease(ValueAtIndex);
          v44 = *(const __CFArray **)(v4 + 16);
        }
      }
      CFRelease(v44);
      *(_QWORD *)(v4 + 16) = 0;
      v48 = *(void **)(v4 + 24);
      if (v48)
      {
        free(v48);
        *(_QWORD *)(v4 + 24) = 0;
      }
      v49 = *(void **)(v4 + 160);
      if (v49)
      {
        free(v49);
        *(_QWORD *)(v4 + 160) = 0;
      }
      v50 = *(_QWORD **)(a1 + 152);
      if (v50)
      {
        v51 = (void *)v50[252];
        if (v51)
          free(v51);
        v52 = (void *)v50[226];
        if (v52)
          free(v52);
        v53 = (void *)v50[228];
        if (v53)
          free(v53);
        v54 = (void *)v50[227];
        if (v54)
          free(v54);
        free(*(void **)(a1 + 152));
        *(_QWORD *)(a1 + 152) = 0;
      }
      v55 = *(void **)(v4 + 144);
      if (v55)
      {
        free(v55);
        *(_QWORD *)(v4 + 144) = 0;
      }
      v56 = *(_QWORD *)(v4 + 1960);
      if (v56)
      {
        sub_1B67867B4(v56 + 256);
        sub_1B67867B4(v56 + 184);
        MEMORY[0x1BCC9814C](v56, 0x1080C40386BD8C1);
        *(_QWORD *)(v4 + 1960) = 0;
      }
    }
    v57 = *(void **)(v4 + 1904);
    if (v57)
    {
      free(v57);
      *(_QWORD *)(v4 + 1904) = 0;
    }
    v58 = *(_QWORD **)(a1 + 1064);
    if (v58)
      sub_1B68F8260(v58);
    v59 = *(_QWORD **)(a1 + 1072);
    if (v59)
      sub_1B68F8260(v59);
    sub_1B68B89F8(a1);
    free((void *)a1);
  }
}

void sub_1B68E1AFC(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    v2 = a1 + 48112;
    free(*(void **)(a1 + 50616));
    free(*(void **)v2);
    *(_QWORD *)(v2 + 2504) = 0;
    *(_QWORD *)v2 = 0;
    sub_1B68A3C60(a1);
  }
}

_BYTE *sub_1B68E1B44(uint64_t a1, int a2, _WORD *a3, unsigned int a4)
{
  double v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  double v12;
  int v13;
  uint64_t v14;
  double v15;
  long double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  double v25;
  double v26;
  __int16 v27;
  uint64_t v28;
  __int16 *v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *result;
  double v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _WORD *v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  int v55;
  _WORD *v56;
  _WORD *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  __int16 v62;
  _QWORD v63[256];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v7 = (double)a2 * 0.125;
  v8 = 16 * a4;
  bzero(v63, 16 * a4);
  v9 = 0;
  v10 = *(_DWORD *)(a1 + 22388);
  v11 = v8 - 2;
  v12 = (double)v10;
  if (v8 <= 2)
    v13 = 2;
  else
    v13 = v8;
  v14 = (v13 - 1);
  do
  {
    v15 = ((double)(int)v9 - (double)v11 * 0.5) * 3.1415926;
    if (v15 == 0.0)
    {
      v17 = 1.0;
    }
    else
    {
      v16 = sin(v7 * (v15 * 0.0625)) / v15 * 16.0 / v7 * v12;
      v17 = v16 * (sin(v7 * (v15 * 0.0625 / v12)) / v15 * 16.0 / v7);
    }
    *(double *)&v63[++v9] = v17;
  }
  while (v14 != v9);
  v63[(v11 >> 1) + 1] = 0x3FF0000000000000;
  v18 = a4;
  v19 = a4 - 1;
  v20 = 0.0;
  v21 = 16;
  v22 = v19;
  do
  {
    v20 = v20 + *(double *)&v63[v21];
    v21 += 16;
    --v22;
  }
  while (v22);
  v23 = 16;
  v24 = a3;
  do
  {
    v25 = *(double *)&v63[v23] * 64.0 / v20;
    if (v25 <= 0.0)
      v26 = -0.5;
    else
      v26 = 0.5;
    *v24++ = (int)(v25 + v26);
    v23 += 16;
    --v19;
  }
  while (v19);
  v27 = 0;
  v28 = a4 - 1;
  a3[v28] = 0;
  v29 = a3;
  v30 = a4;
  do
  {
    v31 = *v29++;
    v27 += v31;
    --v30;
  }
  while (v30);
  v32 = a4 >> 1;
  v33 = (v32 - 1);
  a3[v33] = a3[v33] - v27 + 64;
  v34 = a4 + 1 - 1;
  v35 = a3 + 8;
  v36 = 1;
  v37 = 120;
  result = v63;
  do
  {
    v39 = 0.0;
    v40 = v37;
    v41 = v34;
    do
    {
      v39 = v39 + *(double *)((char *)v63 + v40);
      v40 += 128;
      --v41;
    }
    while (v41);
    v42 = v63;
    v43 = v35;
    v44 = v34;
    do
    {
      v45 = *(double *)&v42[v37] * 64.0 / v39;
      if (v45 <= 0.0)
        v46 = -0.5;
      else
        v46 = 0.5;
      *v43++ = (int)(v45 + v46);
      v42 += 128;
      --v44;
    }
    while (v44);
    v47 = 0;
    v48 = 0;
    do
    {
      if (v48 <= (__int16)v35[v47])
        v48 = (__int16)v35[v47];
      ++v47;
    }
    while (v18 != v47);
    if (v48 <= 100)
    {
      v58 = 0;
      v55 = 0;
      do
        v55 += (__int16)v35[v58++];
      while (v18 != v58);
      if (v36 == 8)
      {
        v59 = 64 - v55;
        v52 = v55 > 64;
        v60 = 65 - v55;
        if (v52)
          v59 = v60;
        v55 = v59 >> 1;
        a3[v32 + 64] += v59 >> 1;
        v57 = &a3[v33 + 64];
      }
      else
      {
        LOWORD(v55) = 64 - v55;
        if (v36 <= 7)
          v57 = &a3[8 * v36 + v28];
        else
          v57 = &a3[8 * v36];
      }
    }
    else
    {
      v49 = 0;
      do
      {
        v35[v49] = (int)(100.0 / (double)v48 * (double)(__int16)v35[v49]);
        ++v49;
      }
      while (v34 != v49);
      v50 = 0;
      v51 = 0;
      do
        v51 += (__int16)v35[v50++];
      while (v18 != v50);
      v53 = 64 - v51;
      v52 = v51 > 64;
      v54 = 65 - v51;
      if (v52)
        v53 = v54;
      v55 = v53 >> 1;
      v56 = &a3[8 * v36];
      v56[v32] += v53 >> 1;
      v57 = &v56[v33];
    }
    v61 = 0;
    v62 = 0;
    *v57 += v55;
    do
      v62 += v35[v61++];
    while (v18 != v61);
    a3[8 * v36 + v33] = a3[8 * v36 + v33] - v62 + 64;
    ++v36;
    v37 -= 8;
    v35 += 8;
  }
  while (v36 != 16);
  return result;
}

uint64_t sub_1B68E1F40(uint64_t result)
{
  uint64_t (**v1)(uint64_t);

  v1 = (uint64_t (**)(uint64_t))result;
  if ((byte_1EF139D54 & 1) == 0)
    byte_1EF139D54 = 1;
  *(_QWORD *)(result + 208) = sub_1B68B9AD4;
  *(_QWORD *)(result + 216) = sub_1B68B9B08;
  *(_QWORD *)(result + 224) = sub_1B68B9B50;
  *(_QWORD *)result = sub_1B68C82CC;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = sub_1B68C86E8;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = sub_1B68C8B44;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = sub_1B68E2044;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = sub_1B68E2044;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = sub_1B68E2044;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = sub_1B68C94F8;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 128) = sub_1B68C9760;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 112) = sub_1B68E2044;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 144) = sub_1B68E2044;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = sub_1B68E2044;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = sub_1B68C9148;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = sub_1B68C9978;
  *(_QWORD *)(result + 200) = 0;
  if (!*(_BYTE *)(result + 245))
  {
    result = sub_1B68A3978();
    if ((result & 1) == 0)
    {
      *v1 = sub_1B68B35A0;
      v1[1] = 0;
    }
    v1[24] = sub_1B68C1460;
    v1[25] = 0;
    v1[20] = sub_1B68C1024;
    v1[21] = 0;
    v1[22] = sub_1B68C107C;
    v1[23] = 0;
  }
  return result;
}

uint64_t sub_1B68E2044()
{
  return 0;
}

uint64_t sub_1B68E204C(uint64_t a1, int a2)
{
  uint64_t v3;
  _WORD *v4;
  int v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint16x8_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t i;

  v3 = 0;
  *(_BYTE *)(a1 + 245) = 0;
  *(_DWORD *)(a1 + 241) = 22020864;
  *(_QWORD *)(a1 + 272) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 480) = a2;
  *(_DWORD *)(a1 + 492) = 9;
  *(_BYTE *)(a1 + 22320) = 0;
  *(_BYTE *)(a1 + 22360) = 0;
  *(_QWORD *)(a1 + 22328) = 0;
  *(_QWORD *)(a1 + 22344) = 0;
  *(_DWORD *)(a1 + 22361) = 16843009;
  *(_OWORD *)(a1 + 22368) = xmmword_1B6917F00;
  *(_DWORD *)(a1 + 22304) = 1280;
  *(_DWORD *)(a1 + 22312) = 1280;
  *(_QWORD *)(a1 + 22384) = 0x200000000;
  *(_DWORD *)(a1 + 22396) = -65536;
  *(_DWORD *)(a1 + 22414) = 1376255;
  *(_WORD *)(a1 + 22418) = -1;
  *(_DWORD *)(a1 + 22440) = 1;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 22432) = 0x100000000;
  *(_WORD *)(a1 + 22400) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 488) = 1;
  *(_OWORD *)(a1 + 22456) = 0u;
  *(_OWORD *)(a1 + 22488) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 22504) = 0;
  *(_DWORD *)(a1 + 22448) = 30;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 22272) = 10;
  *(_DWORD *)(a1 + 22282) = 1024;
  *(_QWORD *)(a1 + 22274) = 1024;
  v4 = (_WORD *)(a1 + 11776);
  *(_BYTE *)(a1 + 264) = 0;
  do
  {
    v5 = dword_1B6933FD8[v3];
    sub_1B68E1B44(a1, v5, v4 - 1024, 4u);
    sub_1B68E1B44(a1, v5, v4, 8u);
    ++v3;
    v4 += 128;
  }
  while (v3 != 8);
  v6 = 0;
  v7 = &unk_1B6933FF8;
  v8 = 13824;
  v9 = (char *)&unk_1B69347F8;
  do
  {
    v10 = 0;
    v11 = v8;
    do
    {
      v12 = a1 + v11;
      *(_OWORD *)(v12 + 2048) = v7[v10];
      *(uint16x8_t *)v12 = vmovl_u8(*(uint8x8_t *)&v9[8 * v10++]);
      v11 += 16;
    }
    while (v10 != 16);
    ++v6;
    v7 += 16;
    v8 += 256;
    v9 += 128;
  }
  while (v6 != 8);
  v13 = 0;
  v14 = (char *)&unk_1B6934BF8;
  v15 = 17920;
  v16 = (char *)&unk_1B6934FF8;
  do
  {
    v17 = 0;
    v18 = v15;
    do
    {
      v19 = (uint16x8_t *)(a1 + v18);
      v19[128] = vmovl_u8(*(uint8x8_t *)&v14[v17]);
      *v19 = vmovl_u8(*(uint8x8_t *)&v16[v17]);
      v17 += 8;
      v18 += 16;
    }
    while (v17 != 128);
    ++v13;
    v14 += 128;
    v15 += 256;
    v16 += 128;
  }
  while (v13 != 8);
  v20 = 0;
  v21 = a1 + 22016;
  v22 = (char *)&unk_1B69353F8;
  do
  {
    for (i = 0; i != 6; ++i)
      *(_WORD *)(v21 + 2 * i) = v22[i];
    ++v20;
    v21 += 16;
    v22 += 8;
  }
  while (v20 != 16);
  sub_1B68E1F40(a1);
  return a1;
}

void sub_1B68E22D4(uint64_t a1, unsigned int *a2, int a3)
{
  unsigned int v4;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t j;

  v4 = *a2;
  *(_DWORD *)(a1 + 22384) = *a2;
  if (*a2 <= 7 && ((1 << *a2) & 0xC1) != 0 || v4 == 11)
  {
LABEL_9:
    v7 = 3;
LABEL_10:
    *(_DWORD *)(a1 + 22388) = v7;
    v8 = 6;
  }
  else
  {
    switch(*a2)
    {
      case 1u:
        v7 = 2;
        goto LABEL_10;
      case 2u:
      case 5u:
      case 8u:
        *(_DWORD *)(a1 + 22388) = 3;
        goto LABEL_53;
      case 3u:
        goto LABEL_9;
      case 9u:
        *(_DWORD *)(a1 + 22388) = 2;
        v8 = 8;
        break;
      case 0xCu:
        if (a2[1] < 8)
          goto LABEL_12;
LABEL_53:
        v8 = 7;
        break;
      default:
        goto LABEL_12;
    }
  }
  a2[1] = v8;
LABEL_12:
  v9 = *(_DWORD *)(a1 + 22368);
  v10 = *(_DWORD *)(a1 + 22376);
  if (v9 >= v10)
    v11 = *(_DWORD *)(a1 + 22376);
  else
    v11 = *(_DWORD *)(a1 + 22368);
  if (v9 <= v10)
    v12 = *(_DWORD *)(a1 + 22376);
  else
    v12 = *(_DWORD *)(a1 + 22368);
  if (v11)
  {
    do
    {
      v13 = v11;
      v11 = v12 % v11;
      v12 = v13;
    }
    while (v11);
  }
  else
  {
    v13 = v12;
  }
  v14 = *(_DWORD *)(a1 + 22372);
  v15 = *(_DWORD *)(a1 + 22380);
  if (v13)
  {
    v16 = v10 / v13;
    v17 = v9 / v13;
  }
  else
  {
    v16 = 1;
    v17 = 1;
  }
  *(_DWORD *)(a1 + 22288) = v16;
  *(_DWORD *)(a1 + 22292) = v17;
  if (v14 >= v15)
    v18 = v15;
  else
    v18 = v14;
  if (v14 <= v15)
    v19 = v15;
  else
    v19 = v14;
  if (v18)
  {
    do
    {
      v20 = v18;
      v18 = v19 % v18;
      v19 = v20;
    }
    while (v18);
    goto LABEL_33;
  }
  v20 = v19;
  if (v19)
  {
LABEL_33:
    v21 = v15 / v20;
    v22 = v14 / v20;
    goto LABEL_36;
  }
  v21 = 1;
  v22 = 1;
LABEL_36:
  *(_DWORD *)(a1 + 22296) = v21;
  *(_DWORD *)(a1 + 22300) = v22;
  v23 = a2[1];
  *(_BYTE *)(a1 + 240) = v23;
  *(_DWORD *)(a1 + 480) = a3;
  if (*(_BYTE *)(a1 + 297))
    v24 = 16;
  else
    v24 = 8;
  if (*(_BYTE *)(a1 + 297))
    v25 = 8;
  else
    v25 = 4;
  if (*(_DWORD *)(a1 + 22384) == 12)
  {
    v26 = 0;
    v27 = a1 + 512;
    v28 = a1 + 768;
    do
    {
      for (i = 0; i != v24; ++i)
        *(_WORD *)(v27 + 2 * i) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v26) + 4 * i);
      for (j = 0; j != v25; ++j)
        *(_WORD *)(v28 + 2 * j) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v26) + 4 * j);
      ++v26;
      v27 += 16;
      v28 += 16;
    }
    while (v26 != 16);
  }
  else
  {
    sub_1B68E24F0((_DWORD *)a1, (_WORD *)(a1 + 512), v24, v23);
    sub_1B68E24F0((_DWORD *)a1, (_WORD *)(a1 + 768), v25, *(_BYTE *)(a1 + 240));
  }
}

void sub_1B68E24F0(_DWORD *a1, _WORD *a2, unsigned int a3, char a4)
{
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  double v33;
  int v34;
  double v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  int32x2_t v39;
  char v40;
  int64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int32x2_t v48;
  int64x2_t v49;
  int8x16_t v50;
  int32x2_t v51;
  int32x2_t v52;
  int64x2_t v53;
  float64x2_t v54;
  double v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int32x2_t v59;
  int64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t m;
  uint64_t v69;
  unint64_t v70;
  uint64_t j;
  uint64_t v72;
  unint64_t v73;
  uint64_t ii;
  unint64_t v75;
  signed int v76;
  uint64_t v77;
  uint32x2_t v78;
  int64x2_t v79;
  int32x2_t v80;
  int64x2_t v81;
  float64x2_t v82;
  double v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  double *v87;
  double v88;
  uint64_t v89;
  double v90;
  double v91;
  double *v92;
  _WORD *v93;
  double v94;
  double v95;
  double v96;
  __int16 v97;
  uint64_t v98;
  __int16 *v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;
  _WORD *v106;
  unint64_t jj;
  double v108;
  double *v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  _WORD *v113;
  uint64_t v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  BOOL v123;
  int v124;
  int v125;
  int v126;
  _WORD *v127;
  _WORD *v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t k;
  uint64_t v137;
  unint64_t v138;
  uint64_t i;
  uint64_t v140;
  unint64_t v141;
  uint64_t n;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  uint64x2_t v151;
  uint64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  double v155;
  float64x2_t v156;
  double v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  long double v162;
  float64x2_t v163;
  float64x2_t v164;
  int32x2_t v165;
  uint64x2_t v166;
  int32x2_t v167;
  uint64x2_t v168;
  long double v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  long double v175;
  float64x2_t v176;
  long double v177;
  float64x2_t __xc;
  int32x2_t __x;
  float64x2_t __xa;
  int32x2_t __xb;
  double v182[15];
  uint64_t v183;
  _QWORD v184[242];

  v184[240] = *MEMORY[0x1E0C80C00];
  v7 = a1 + 5592;
  v8 = a1[5596];
  if ((v8 - 5) < 3)
    goto LABEL_4;
  if (v8 == 8)
  {
    v18 = (a1[5592] << 16) / a1[5594];
    v19 = (a1[5593] << 16) / a1[5595];
    if (v18 >= 0x2AAAB)
      v20 = v18 <= 0x40000;
    else
      v20 = 2;
    if (v18 > 0x20000)
      v21 = v20;
    else
      v21 = 3;
    if (v18 >= 0x1999A)
      v22 = v21;
    else
      v22 = 4;
    if (v18 >= 0x15556)
      v23 = v22;
    else
      v23 = 5;
    if (v18 >= 0x12493)
      v24 = v23;
    else
      v24 = 6;
    if ((int)v18 > 0x10000)
      v16 = v24;
    else
      v16 = 7;
    if (v19 >= 0x2AAAB)
      v25 = v19 <= 0x40000;
    else
      v25 = 2;
    if (v19 > 0x20000)
      v26 = v25;
    else
      v26 = 3;
    if (v19 >= 0x1999A)
      v27 = v26;
    else
      v27 = 4;
    if (v19 >= 0x15556)
      v28 = v27;
    else
      v28 = 5;
    if (v19 >= 0x12493)
      v29 = v28;
    else
      v29 = 6;
    if ((int)v19 >= 65537)
      v17 = v29;
    else
      v17 = 7;
    goto LABEL_72;
  }
  if (v8 == 11)
  {
LABEL_4:
    v9 = (a1[5594] << 16) / a1[5592];
    v10 = (a1[5595] << 16) / a1[5593];
    if (v9 < 20480)
      v11 = v9 >= 12288;
    else
      v11 = 2;
    if (v9 < 28672)
      v12 = v11;
    else
      v12 = 3;
    if (v9 < 36864)
      v13 = v12;
    else
      v13 = 4;
    if (v9 < 45056)
      v14 = v13;
    else
      v14 = 5;
    if (v9 < 53248)
      v15 = v14;
    else
      v15 = 6;
    if (v9 < 61440)
      v16 = v15;
    else
      v16 = 7;
    if (v10 < 61440)
    {
      if (v10 < 53248)
      {
        if (v10 < 45056)
        {
          if (v10 < 36864)
          {
            if (v10 < 28672)
            {
              if (v10 < 20480)
                v17 = v10 >= 12288;
              else
                v17 = 2;
            }
            else
            {
              v17 = 3;
            }
          }
          else
          {
            v17 = 4;
          }
        }
        else
        {
          v17 = 5;
        }
      }
      else
      {
        v17 = 6;
      }
    }
    else
    {
      v17 = 7;
    }
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
LABEL_72:
  v30 = a1[120];
  if (v30 != 0 && v30 < 0xFFFFFFF0)
    v31 = v30 + 16;
  else
    v31 = 16;
  v32 = 16 * a3;
  bzero(v182, 16 * a3);
  v33 = (double)v31;
  v34 = 16 * a3 - 1;
  v35 = (double)(int)(16 * a3 - 2) * 0.5;
  v157 = (double)v31;
  switch(v8)
  {
    case 0:
    case 1:
      v36 = v32 - 2;
      v37 = 0;
      if (v34 <= 1)
        v38 = 1;
      else
        v38 = v34;
      v150 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
      v152 = (uint64x2_t)vdupq_n_s64(v38 - 1);
      v155 = (double)(int)v7[5];
      v146 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v155, 0);
      v148 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0);
      v39 = (int32x2_t)0x100000000;
      v144 = (float64x2_t)vdupq_n_s64(0x400921FB4D12D84AuLL);
      v40 = a4;
      do
      {
        v165 = vmovn_s64((int64x2_t)vcgeq_u64(v152, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v37), (int8x16_t)xmmword_1B6917590)));
        v41.i64[0] = v39.i32[0];
        v41.i64[1] = v39.i32[1];
        v174 = vmulq_f64(vsubq_f64(vcvtq_f64_s64(v41), v150), v144);
        __xc = vdivq_f64(v174, v148);
        v169 = sin(__xc.f64[1]);
        v42.f64[0] = sin(__xc.f64[0]);
        v42.f64[1] = v169;
        v170 = v42;
        v160 = vdivq_f64(__xc, v146);
        __xc.f64[0] = sin(v160.f64[1]);
        v43.f64[0] = sin(v160.f64[0]);
        v43.f64[1] = __xc.f64[0];
        if ((v165.i8[0] & 1) != 0)
          v182[v37 + 1] = v157 * vdivq_f64(v170, v174).f64[0] * v155 * (v157 * vdivq_f64(v43, v174).f64[0]);
        if ((v165.i8[4] & 1) != 0)
        {
          v44 = vmulq_n_f64(vdivq_f64((float64x2_t)vzip2q_s64((int64x2_t)v170, (int64x2_t)v43), (float64x2_t)vdupq_laneq_s64((int64x2_t)v174, 1)), v157);
          v182[v37 + 2] = vmuld_lane_f64(v155 * v44.f64[0], v44, 1);
        }
        v39 = vadd_s32(v39, (int32x2_t)0x200000002);
        v45 = v37 + 1;
        v37 += 2;
      }
      while (v45 != v38);
      goto LABEL_139;
    case 2:
      v36 = v32 - 2;
      v46 = 0;
      if (v34 <= 1)
        v47 = 1;
      else
        v47 = v34;
      v161 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
      v166 = (uint64x2_t)vdupq_n_s64(v47 - 1);
      v48 = vdup_n_s32(v30 == 0);
      v49.i64[0] = v48.u32[0];
      v49.i64[1] = v48.u32[1];
      v50 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v49, 0x3FuLL));
      v51 = vdup_n_s32(8 * v31);
      v49.i64[0] = v51.i32[0];
      v49.i64[1] = v51.i32[1];
      v158 = (float64x2_t)vbslq_s8(v50, (int8x16_t)vdupq_n_s64(0x4040000000000000uLL), (int8x16_t)vcvtq_f64_s64(v49));
      v52 = (int32x2_t)0x100000000;
      v40 = a4;
      do
      {
        __x = vmovn_s64((int64x2_t)vcgeq_u64(v166, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v46), (int8x16_t)xmmword_1B6917590)));
        v53.i64[0] = v52.i32[0];
        v53.i64[1] = v52.i32[1];
        v54 = vsubq_f64(vcvtq_f64_s64(v53), v161);
        v171 = vdivq_f64(vmulq_f64(v54, vnegq_f64(v54)), v158);
        v175 = exp(v171.f64[1]);
        v55 = exp(v171.f64[0]);
        if ((__x.i8[0] & 1) != 0)
          v182[v46 + 1] = v55;
        if ((__x.i8[4] & 1) != 0)
          v182[v46 + 2] = v175;
        v52 = vadd_s32(v52, (int32x2_t)0x200000002);
        v56 = v46 + 1;
        v46 += 2;
      }
      while (v56 != v47);
      goto LABEL_139;
    case 3:
      v36 = v32 - 2;
      v57 = 0;
      if (v34 <= 1)
        v58 = 1;
      else
        v58 = v34;
      __xa = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
      v149 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0);
      v151 = (uint64x2_t)vdupq_n_s64(v58 - 1);
      v59 = (int32x2_t)0x100000000;
      v176 = (float64x2_t)vdupq_n_s64(0x400921FB4D12D84AuLL);
      v147 = (float64x2_t)vdupq_n_s64(0xBFDD70A3D70A3D71);
      v145 = (float64x2_t)vdupq_n_s64(0x3FE147AE147AE148uLL);
      v40 = a4;
      do
      {
        v167 = vmovn_s64((int64x2_t)vcgeq_u64(v151, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v57), (int8x16_t)xmmword_1B6917590)));
        v60.i64[0] = v59.i32[0];
        v60.i64[1] = v59.i32[1];
        v156 = vcvtq_f64_s64(v60);
        v172 = vmulq_f64(vsubq_f64(v156, __xa), v176);
        v153 = vdivq_f64(v172, v149);
        v162 = sin(v153.f64[1]);
        v61.f64[0] = sin(v153.f64[0]);
        v61.f64[1] = v162;
        v163 = v61;
        v154 = vdivq_f64(vmulq_f64(v156, v176), __xa);
        v156.f64[0] = cos(v154.f64[1]);
        v62.f64[0] = cos(v154.f64[0]);
        v62.f64[1] = v156.f64[0];
        v63 = vmlaq_f64(v145, v147, v62);
        v64 = vdivq_f64(v163, v172);
        if ((v167.i8[0] & 1) != 0)
          *(double *)((char *)v182 + ((8 * v57) | 8)) = v157 * v64.f64[0] * v63.f64[0];
        if ((v167.i8[4] & 1) != 0)
          v182[v57 + 2] = vmuld_lane_f64(vmuld_lane_f64(v157, v64, 1), v63, 1);
        v59 = vadd_s32(v59, (int32x2_t)0x200000002);
        v65 = v57 | 1;
        v57 += 2;
      }
      while (v65 != v58);
      goto LABEL_139;
    case 5:
      if (a3 == 4)
      {
        v137 = 0;
        v138 = (unint64_t)&a1[64 * (unint64_t)v17 + 3456];
        do
        {
          for (i = 0; i != 4; ++i)
            a2[i] = *(_WORD *)(v138 + i * 2);
          ++v137;
          a2 += 8;
          v138 += 16;
        }
        while (v137 != 16);
      }
      else if (a3 == 8)
      {
        v69 = 0;
        v70 = (unint64_t)&a1[64 * (unint64_t)v16 + 3968];
        do
        {
          for (j = 0; j != 8; ++j)
            a2[j] = *(_WORD *)(v70 + j * 2);
          ++v69;
          a2 += 8;
          v70 += 16;
        }
        while (v69 != 16);
      }
      return;
    case 6:
LABEL_107:
      if (a3 == 4)
      {
        v134 = 0;
        v135 = (unint64_t)&a1[64 * (unint64_t)v17 + 2432];
        do
        {
          for (k = 0; k != 4; ++k)
            a2[k] = *(_WORD *)(v135 + k * 2);
          ++v134;
          a2 += 8;
          v135 += 16;
        }
        while (v134 != 16);
      }
      else if (a3 == 8)
      {
        v66 = 0;
        v67 = (unint64_t)&a1[64 * (unint64_t)v16 + 2944];
        do
        {
          for (m = 0; m != 8; ++m)
            a2[m] = *(_WORD *)(v67 + m * 2);
          ++v66;
          a2 += 8;
          v67 += 16;
        }
        while (v66 != 16);
      }
      return;
    case 8:
      if (a3 == 4)
      {
        v140 = 0;
        v141 = (unint64_t)&a1[64 * (unint64_t)v17 + 4480];
        do
        {
          for (n = 0; n != 4; ++n)
            a2[n] = *(_WORD *)(v141 + n * 2);
          ++v140;
          a2 += 8;
          v141 += 16;
        }
        while (v140 != 16);
      }
      else if (a3 == 8)
      {
        v72 = 0;
        v73 = (unint64_t)&a1[64 * (unint64_t)v16 + 4992];
        do
        {
          for (ii = 0; ii != 8; ++ii)
            a2[ii] = *(_WORD *)(v73 + ii * 2);
          ++v72;
          a2 += 8;
          v73 += 16;
        }
        while (v72 != 16);
      }
      return;
    case 9:
      v36 = v32 - 2;
      v75 = 0;
      v76 = 8 * v30 + 16;
      if (v31 > v76)
        v76 = v31;
      if (v34 <= 1)
        v77 = 1;
      else
        v77 = v34;
      v164 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
      v168 = (uint64x2_t)vdupq_n_s64(v77 - 1);
      v78 = vshl_u32((uint32x2_t)vdup_n_s32(v76), (uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(8 * v30 == 0), 0x1FuLL)), (int8x8_t)0x100000001, (int8x8_t)0x300000003));
      v79.i64[0] = v78.i32[0];
      v79.i64[1] = v78.i32[1];
      v159 = vcvtq_f64_s64(v79);
      v80 = (int32x2_t)0x100000000;
      v40 = a4;
      do
      {
        __xb = vmovn_s64((int64x2_t)vcgeq_u64(v168, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v75), (int8x16_t)xmmword_1B6917590)));
        v81.i64[0] = v80.i32[0];
        v81.i64[1] = v80.i32[1];
        v82 = vsubq_f64(vcvtq_f64_s64(v81), v164);
        v173 = vdivq_f64(vmulq_f64(v82, vnegq_f64(v82)), v159);
        v177 = exp(v173.f64[1]);
        v83 = exp(v173.f64[0]);
        if ((__xb.i8[0] & 1) != 0)
          v182[v75 + 1] = v83;
        if ((__xb.i8[4] & 1) != 0)
          v182[v75 + 2] = v177;
        v80 = vadd_s32(v80, (int32x2_t)0x200000002);
        v84 = v75 + 1;
        v75 += 2;
      }
      while (v84 != v77);
LABEL_139:
      v182[(v36 >> 1) + 1] = 1.0;
      v85 = 1 << v40;
      v86 = a3 - 1;
      v87 = (double *)v184;
      v88 = 0.0;
      v89 = v86;
      do
      {
        v90 = *v87;
        v87 += 16;
        v88 = v88 + v90;
        --v89;
      }
      while (v89);
      v91 = (double)v85;
      v92 = (double *)v184;
      v93 = a2;
      do
      {
        v94 = *v92;
        v92 += 16;
        v95 = v94 * v91 / v88;
        if (v94 <= 0.0)
          v96 = -0.5;
        else
          v96 = 0.5;
        *v93++ = (int)(v95 + v96);
        --v86;
      }
      while (v86);
      v97 = 0;
      v98 = a3 - 1;
      a2[v98] = 0;
      v99 = a2;
      v100 = a3;
      do
      {
        v101 = *v99++;
        v97 += v101;
        --v100;
      }
      while (v100);
      v102 = (unsigned __int16)(v85 - v97);
      v103 = a3 >> 1;
      v104 = (v103 - 1);
      a2[v104] += v102;
      v105 = (double *)&v183;
      v106 = a2 + 8;
      for (jj = 1; jj != 16; ++jj)
      {
        v108 = 0.0;
        v109 = v105;
        v110 = a3 + 1 - 1;
        do
        {
          v111 = *v109;
          v109 += 16;
          v108 = v108 + v111;
          --v110;
        }
        while (v110);
        v112 = 0;
        v113 = v106;
        v114 = a3 + 1 - 1;
        do
        {
          v115 = v105[v112];
          v116 = v115 * v91 / v108;
          if (v115 <= 0.0)
            v117 = -0.5;
          else
            v117 = 0.5;
          *v113++ = (int)(v116 + v117);
          v112 += 16;
          --v114;
        }
        while (v114);
        v118 = 0;
        v119 = 0;
        do
        {
          if (v119 <= (__int16)v106[v118])
            v119 = (__int16)v106[v118];
          ++v118;
        }
        while (a3 != v118);
        if (v119 <= 100)
        {
          v129 = 0;
          v126 = 0;
          do
            v126 += (__int16)v106[v129++];
          while (a3 != v129);
          if (jj == 8)
          {
            v123 = __OFSUB__(v85, v126);
            v130 = v85 - v126;
            if (v130 < 0 != v123)
              v131 = v130 + 1;
            else
              v131 = v130;
            v126 = v131 >> 1;
            a2[v103 + 64] += v131 >> 1;
            v128 = &a2[v104 + 64];
          }
          else
          {
            LOWORD(v126) = v85 - v126;
            if (jj <= 7)
              v128 = &a2[8 * jj + v98];
            else
              v128 = &a2[8 * jj];
          }
        }
        else
        {
          v120 = 0;
          do
          {
            v106[v120] = (int)(100.0 / (double)v119 * (double)(__int16)v106[v120]);
            ++v120;
          }
          while (a3 + 1 - 1 != v120);
          v121 = 0;
          v122 = 0;
          do
            v122 += (__int16)v106[v121++];
          while (a3 != v121);
          v123 = __OFSUB__(v85, v122);
          v124 = v85 - v122;
          if (v124 < 0 != v123)
            v125 = v124 + 1;
          else
            v125 = v124;
          v126 = v125 >> 1;
          v127 = &a2[8 * jj];
          v127[v103] += v125 >> 1;
          v128 = &v127[v104];
        }
        v132 = 0;
        v133 = 0;
        *v128 += v126;
        do
          v133 += v106[v132++];
        while (a3 != v132);
        a2[8 * jj + v104] += v85 - v133;
        --v105;
        v106 += 8;
      }
      return;
    default:
      switch(v8)
      {
        case 4:
        case 10:
          return;
        case 7:
        case 11:
          goto LABEL_107;
        default:
          puts("Wrong filter type!");
          exit(0);
      }
  }
}

BOOL sub_1B68E3170(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, int a9, int a10, _DWORD *a11)
{
  unsigned int *v11;
  unsigned int v12;

  v11 = (unsigned int *)(a1 + 22304);
  v12 = *(_DWORD *)(a1 + 22368);
  if (v12 < a2
    || *(_DWORD *)(a1 + 22372) < a3
    || *v11 < a4
    || *(_DWORD *)(a1 + 22376) < a5
    || *(_DWORD *)(a1 + 22380) < a6
    || *(_DWORD *)(a1 + 22312) < a7)
  {
    *(_BYTE *)(a1 + 488) = 1;
  }
  return v12 != a2
      || *(_DWORD *)(a1 + 22372) != a3
      || *v11 != a4
      || *(_DWORD *)(a1 + 22376) != a5
      || *(_DWORD *)(a1 + 22380) != a6
      || *(_DWORD *)(a1 + 22312) != a7
      || *(_DWORD *)(a1 + 22436) != a8
      || *(_DWORD *)(a1 + 480) != a9
      || *(_DWORD *)(a1 + 22384) != *a11
      || *(_DWORD *)(a1 + 22432) != a10
      || a11[1] != *(unsigned __int8 *)(a1 + 240);
}

_WORD *sub_1B68E326C(uint64_t a1, int a2, _QWORD *a3, int a4, unsigned int a5)
{
  _BYTE *v5;
  char v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  _WORD *v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int16 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  __int16 *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  __int16 *v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  _WORD *v77;
  int v78;
  int v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  __int16 *v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  _WORD *v100;
  int v101;
  int v102;
  uint64_t v103;
  _WORD *v104;
  uint64_t v105;
  _WORD *v106;
  uint64_t v107;
  uint64_t v108;
  _WORD *v109;
  _WORD *v110;
  uint64_t v111;
  _WORD *v112;
  uint64_t v113;
  _WORD *result;

  v5 = (_BYTE *)(a1 + 22320);
  v6 = *(_BYTE *)(a1 + 240);
  *(_DWORD *)(a1 + 22432) = a2;
  *(_DWORD *)(a1 + 22436) = a4;
  if (a5 >= 9)
    v7 = 9;
  else
    v7 = a5;
  v8 = 16;
  switch(a2)
  {
    case 0:
      *(_WORD *)(a1 + 22396) = -(__int16)a4;
      *(_WORD *)(a1 + 22398) = 2 * a4 + 16;
      *(_WORD *)(a1 + 22400) = -(__int16)a4;
      *(_WORD *)(a1 + 22414) = -(__int16)a4;
      *(_WORD *)(a1 + 22416) = 2 * a4 + 16;
      *(_WORD *)(a1 + 22418) = -(__int16)a4;
      v7 = 3;
      goto LABEL_11;
    case 1:
      *(_WORD *)(a1 + 22396) = -(__int16)a4;
      *(_WORD *)(a1 + 22398) = -2 * a4;
      *(_WORD *)(a1 + 22400) = 6 * a4 + 32;
      *(_WORD *)(a1 + 22402) = -2 * a4;
      *(_WORD *)(a1 + 22404) = -(__int16)a4;
      *(_WORD *)(a1 + 22414) = -(__int16)a4;
      *(_WORD *)(a1 + 22416) = -2 * a4;
      *(_WORD *)(a1 + 22418) = 6 * a4 + 32;
      *(_WORD *)(a1 + 22420) = -2 * a4;
      *(_WORD *)(a1 + 22422) = -(__int16)a4;
      v7 = 5;
      v8 = 32;
      break;
    case 2:
      *(_WORD *)(a1 + 22396) = -2 * a4;
      *(_WORD *)(a1 + 22398) = 16;
      *(_WORD *)(a1 + 22400) = 2 * a4;
      *(_WORD *)(a1 + 22414) = -2 * a4;
      *(_WORD *)(a1 + 22416) = 16;
      *(_WORD *)(a1 + 22418) = 2 * a4;
      v7 = 3;
      break;
    case 4:
      if (v7)
      {
        v9 = 0;
        v10 = (_WORD *)(a1 + 22414);
        do
        {
          *(v10 - 9) = *(_DWORD *)(*a3 + v9);
          *v10++ = *(_DWORD *)(a3[1] + v9);
          v9 += 4;
        }
        while (4 * v7 != v9);
LABEL_11:
        v8 = 16;
      }
      break;
    default:
      break;
  }
  v11 = 1 << v6;
  v12 = v7 >> 1;
  if (*(_DWORD *)(a1 + 22384) == 5)
  {
    v13 = 0;
    v14 = v8 >> 1;
    v15 = a1 + 1024;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = -v12;
      do
      {
        v19 = 0;
        if (v7)
        {
          v20 = v18;
          v21 = (__int16 *)(a1 + 22396);
          v22 = v7;
          do
          {
            v23 = v20 & ~(v20 >> 31);
            if (v23 >= 7)
              v23 = 7;
            v24 = *v21++;
            v19 += v24 * *(__int16 *)(a1 + 16 * v13 + 2 * v23 + 512);
            ++v20;
            --v22;
          }
          while (v22);
        }
        v25 = (int)(v19 + v14) / v8;
        *(_WORD *)(a1 + 16 * v13 + 2 * v16 + 1024) = v25;
        v17 += (__int16)v25;
        ++v16;
        ++v18;
      }
      while (v16 != 8);
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      if (v17 >= 0)
        v30 = v17;
      else
        v30 = v17 + 1;
      v31 = v30 >> 1;
      do
      {
        v32 = ((*(__int16 *)(v15 + 2 * v26) << v6) + v31) / v17;
        *(_WORD *)(v15 + 2 * v26) = v32;
        v33 = v29 < (__int16)v32;
        if (v29 <= (__int16)v32)
          v29 = (__int16)v32;
        if (v33)
          v28 = v26;
        v27 += v32;
        ++v26;
      }
      while (v26 != 8);
      v34 = a1 + 16 * v13;
      *(_WORD *)(v34 + 2 * v28 + 1024) += v11 - v27;
      if (v13 <= 7)
        *(_OWORD *)(v34 + 512) = *(_OWORD *)(v34 + 1024);
      ++v13;
      v15 += 16;
    }
    while (v13 != 16);
    v35 = 0;
    v36 = -v12;
    v37 = a1 + 1280;
    do
    {
      v38 = 0;
      v39 = 0;
      v40 = v36;
      do
      {
        v41 = 0;
        if (v7)
        {
          v42 = v40;
          v43 = (__int16 *)(a1 + 22414);
          v44 = v7;
          do
          {
            v45 = v42 & ~(v42 >> 31);
            if (v45 >= 3)
              v45 = 3;
            v46 = *v43++;
            v41 += v46 * *(__int16 *)(a1 + 16 * v35 + 2 * v45 + 768);
            ++v42;
            --v44;
          }
          while (v44);
        }
        v47 = (int)(v41 + v14) / v8;
        *(_WORD *)(a1 + 16 * v35 + 2 * v38 + 1280) = v47;
        v39 += (__int16)v47;
        ++v38;
        ++v40;
      }
      while (v38 != 4);
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      if (v39 >= 0)
        v52 = v39;
      else
        v52 = v39 + 1;
      v53 = v52 >> 1;
      do
      {
        v54 = ((*(__int16 *)(v37 + 2 * v48) << v6) + v53) / v39;
        *(_WORD *)(v37 + 2 * v48) = v54;
        v55 = v51 < (__int16)v54;
        if (v51 <= (__int16)v54)
          v51 = (__int16)v54;
        if (v55)
          v50 = v48;
        v49 += v54;
        ++v48;
      }
      while (v48 != 4);
      v56 = a1 + 16 * v35;
      *(_WORD *)(v56 + 2 * v50 + 1280) += v11 - v49;
      if (v35 <= 7)
        *(_QWORD *)(v56 + 768) = *(_QWORD *)(v56 + 1280);
      ++v35;
      v37 += 16;
    }
    while (v35 != 16);
  }
  else if (*(_DWORD *)(a1 + 22436))
  {
    v57 = 0;
    v58 = v8 >> 1;
    v59 = a1;
    do
    {
      v60 = 0;
      v61 = 0;
      v62 = -v12;
      do
      {
        v63 = 0;
        if (!v7)
          goto LABEL_63;
        v64 = v62;
        v65 = (__int16 *)(a1 + 22396);
        v66 = v7;
        do
        {
          v67 = v64 & ~(v64 >> 31);
          if (v67 >= 7)
            v67 = 7;
          v68 = *v65++;
          v63 += v68 * *(__int16 *)(a1 + 16 * v57 + 2 * v67 + 512);
          ++v64;
          --v66;
        }
        while (v66);
        if (v63 < 0)
          v69 = v63 - v58;
        else
LABEL_63:
          v69 = v63 + v58;
        v70 = v69 / v8;
        *(_WORD *)(a1 + 16 * v57 + 2 * v60 + 1024) = v70;
        v61 += (__int16)v70;
        ++v60;
        ++v62;
      }
      while (v60 != 8);
      if (v61 == v11)
      {
        *(_OWORD *)(a1 + 16 * v57 + 512) = *(_OWORD *)(a1 + 16 * v57 + 1024);
      }
      else
      {
        v71 = 0;
        v72 = 0;
        if (v61 >= 0)
          v73 = v61;
        else
          v73 = v61 + 1;
        v74 = v73 >> 1;
        do
        {
          v75 = ((*(__int16 *)(v59 + v71 + 1024) << v6) + v74) / v61;
          *(_WORD *)(v59 + v71 + 512) = v75;
          v72 += (__int16)v75;
          v71 += 2;
        }
        while (v71 != 16);
        v76 = v11 - v72;
        if (v57 > 7)
        {
          if (v57 == 8)
          {
            if (v76 >= 0)
              v78 = v11 - v72;
            else
              v78 = v76 + 1;
            v79 = v78 >> 1;
            *(_WORD *)(a1 + 646) += v76 - (v78 >> 1);
            v77 = (_WORD *)(a1 + 648);
            LOWORD(v76) = v79;
          }
          else
          {
            v77 = (_WORD *)(a1 + 16 * v57 + 520);
          }
        }
        else
        {
          v77 = (_WORD *)(a1 + 16 * v57 + 518);
        }
        *v77 += v76;
      }
      ++v57;
      v59 += 16;
    }
    while (v57 != 16);
    v80 = 0;
    v81 = -v12;
    v82 = a1;
    do
    {
      v83 = 0;
      v84 = 0;
      v85 = v81;
      do
      {
        v86 = 0;
        if (!v7)
          goto LABEL_91;
        v87 = v85;
        v88 = (__int16 *)(a1 + 22414);
        v89 = v7;
        do
        {
          v90 = v87 & ~(v87 >> 31);
          if (v90 >= 3)
            v90 = 3;
          v91 = *v88++;
          v86 += v91 * *(__int16 *)(a1 + 16 * v80 + 2 * v90 + 768);
          ++v87;
          --v89;
        }
        while (v89);
        if (v86 < 0)
          v92 = v86 - v58;
        else
LABEL_91:
          v92 = v86 + v58;
        v93 = v92 / v8;
        *(_WORD *)(a1 + 16 * v80 + 2 * v83 + 1280) = v93;
        v84 += (__int16)v93;
        ++v83;
        ++v85;
      }
      while (v83 != 4);
      if (v84 == v11)
      {
        *(_QWORD *)(a1 + 16 * v80 + 768) = *(_QWORD *)(a1 + 16 * v80 + 1280);
      }
      else
      {
        v94 = 0;
        v95 = 0;
        if (v84 >= 0)
          v96 = v84;
        else
          v96 = v84 + 1;
        v97 = v96 >> 1;
        do
        {
          v98 = ((*(__int16 *)(v82 + v94 + 1280) << v6) + v97) / v84;
          *(_WORD *)(v82 + v94 + 768) = v98;
          v95 += (__int16)v98;
          v94 += 2;
        }
        while (v94 != 8);
        v99 = v11 - v95;
        if (v80 > 7)
        {
          if (v80 == 8)
          {
            if (v99 >= 0)
              v101 = v11 - v95;
            else
              v101 = v99 + 1;
            v102 = v101 >> 1;
            *(_WORD *)(a1 + 898) += v99 - (v101 >> 1);
            v100 = (_WORD *)(a1 + 900);
            LOWORD(v99) = v102;
          }
          else
          {
            v100 = (_WORD *)(a1 + 16 * v80 + 772);
          }
        }
        else
        {
          v100 = (_WORD *)(a1 + 16 * v80 + 770);
        }
        *v100 += v99;
      }
      ++v80;
      v82 += 16;
    }
    while (v80 != 16);
  }
  v103 = 0;
  v104 = (_WORD *)(a1 + 3584);
  v105 = a1 + 768;
  v106 = (_WORD *)(a1 + 1536);
  v107 = a1 + 512;
  do
  {
    v108 = 0;
    v109 = v106;
    v110 = v104;
    do
    {
      v111 = 0;
      v112 = v110;
      do
      {
        *v112 = *(_WORD *)(v105 + v111);
        v112 += 8;
        v111 += 2;
      }
      while (v111 != 8);
      v113 = 0;
      result = v109;
      do
      {
        *result = *(_WORD *)(v107 + v113);
        result += 8;
        v113 += 2;
      }
      while (v113 != 16);
      ++v108;
      ++v110;
      ++v109;
    }
    while (v108 != 8);
    ++v103;
    v104 += 64;
    v105 += 16;
    v106 += 64;
    v107 += 16;
  }
  while (v103 != 16);
  *v5 = 1;
  return result;
}

void *sub_1B68E3934(uint64_t a1)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  void *result;
  int v18;

  v2 = *(_DWORD *)(a1 + 22304);
  if (v2 <= *(_DWORD *)(a1 + 22312))
    v2 = *(_DWORD *)(a1 + 22312);
  v3 = *(_DWORD *)(a1 + 22368);
  v4 = *(_DWORD *)(a1 + 22380);
  if (v3 <= *(_DWORD *)(a1 + 22376))
    v3 = *(_DWORD *)(a1 + 22376);
  if (*(_DWORD *)(a1 + 22372) > v4)
    v4 = *(_DWORD *)(a1 + 22372);
  v5 = 2 * v3;
  if (v5 > v2)
    v2 = v5;
  v6 = v2 + 15;
  v7 = v4 + 15;
  if (*(_BYTE *)(a1 + 488))
  {
    v8 = *(void **)(a1 + 352);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(a1 + 352) = 0;
    }
    v9 = *(void **)(a1 + 368);
    if (v9)
    {
      free(v9);
      *(_QWORD *)(a1 + 368) = 0;
    }
    v10 = *(void **)(a1 + 272);
    if (v10)
    {
      free(v10);
      *(_QWORD *)(a1 + 272) = 0;
    }
    *(_BYTE *)(a1 + 488) = 0;
  }
  v11 = v6 & 0xFFFFFFF0;
  v12 = v7 & 0xFFFFFFF0;
  if (!*(_QWORD *)(a1 + 352))
  {
    v13 = (2 * v12 + 64) * (v11 + 32);
    if (v13)
      v14 = malloc_type_malloc(2 * v13, 0x4CF1F002uLL);
    else
      v14 = 0;
    *(_QWORD *)(a1 + 352) = v14;
  }
  if (!*(_QWORD *)(a1 + 368))
  {
    v15 = (2 * v12 + 64) * (v11 + 32);
    if (v15)
      v16 = malloc_type_malloc(2 * v15, 0x4CF1F002uLL);
    else
      v16 = 0;
    *(_QWORD *)(a1 + 368) = v16;
  }
  result = *(void **)(a1 + 272);
  if (!result)
  {
    v18 = (2 * v12 + 64) * (v11 + 32);
    if (v18)
      result = malloc_type_malloc(v18, 0x4CF1F002uLL);
    else
      result = 0;
    *(_QWORD *)(a1 + 272) = result;
  }
  *(_QWORD *)(a1 + 288) = result;
  if (!*(_QWORD *)(a1 + 22456))
  {
    if (v12 * v11)
      result = malloc_type_malloc((uint64_t)(int)(v12 * v11) >> 6, 0x4CF1F002uLL);
    else
      result = 0;
    *(_QWORD *)(a1 + 22456) = result;
  }
  if (!*(_QWORD *)(a1 + 22464))
  {
    if (v12 * v11)
      result = malloc_type_malloc((uint64_t)(int)(v12 * v11) >> 6, 0x4CF1F002uLL);
    else
      result = 0;
    *(_QWORD *)(a1 + 22464) = result;
  }
  if (!*(_QWORD *)(a1 + 22488))
  {
    if (v12 * v11)
      result = malloc_type_malloc(4 * ((int)(v12 * v11) >> 6), 0x4CF1F002uLL);
    else
      result = 0;
    *(_QWORD *)(a1 + 22488) = result;
  }
  if (!*(_QWORD *)(a1 + 22504))
  {
    if (v12 * v11)
      result = malloc_type_malloc(4 * ((int)(v12 * v11) >> 6), 0x4CF1F002uLL);
    else
      result = 0;
    *(_QWORD *)(a1 + 22504) = result;
  }
  if (!*(_QWORD *)(a1 + 22496))
  {
    if (v12 * v11)
      result = malloc_type_malloc(4 * ((int)(v12 * v11) >> 6), 0x4CF1F002uLL);
    else
      result = 0;
    *(_QWORD *)(a1 + 22496) = result;
  }
  return result;
}

void sub_1B68E3B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  void (*v21)(_QWORD *);
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(_QWORD *);
  uint64_t v25;
  _QWORD *v26;
  char v27;
  int v28;

  v12 = (_DWORD *)(a1 + 22368);
  sub_1B68E3934(a1);
  *(_QWORD *)(a1 + 22328) = a2;
  *(_QWORD *)(a1 + 22344) = a4;
  *(_QWORD *)(a1 + 22336) = a3;
  *(_QWORD *)(a1 + 22352) = a5;
  if (v12[2] == *v12 && v12[3] == v12[1])
  {
    v18 = *(_DWORD *)(a1 + 480);
    v19 = v18 == 0;
    v20 = v18 != 0;
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  if (*(_BYTE *)(a1 + 246))
  {
    v21 = *(void (**)(_QWORD *))a1;
    v22 = *(_QWORD *)(a1 + 8);
LABEL_9:
    v23 = (_QWORD *)(a1 + (v22 >> 1));
    if ((v22 & 1) != 0)
      v21 = *(void (**)(_QWORD *))(*v23 + v21);
    v21(v23);
    return;
  }
  if (v12[4] == 10)
  {
    v21 = *(void (**)(_QWORD *))(a1 + 176);
    v22 = *(_QWORD *)(a1 + 184);
    goto LABEL_9;
  }
  if (!a6)
  {
    if (v20)
    {
      if (*(_BYTE *)(a1 + 312))
      {
        v21 = *(void (**)(_QWORD *))(a1 + 112);
        v22 = *(_QWORD *)(a1 + 120);
      }
      else
      {
        v21 = *(void (**)(_QWORD *))(a1 + 48);
        v22 = *(_QWORD *)(a1 + 56);
      }
    }
    else
    {
      if (*(int *)(a1 + 492) < 1)
        return;
      v21 = *(void (**)(_QWORD *))(a1 + 144);
      v22 = *(_QWORD *)(a1 + 152);
    }
    goto LABEL_9;
  }
  if (*(_BYTE *)(a1 + 243) && *(_BYTE *)(a1 + 242))
  {
    if (*(_BYTE *)(a1 + 312))
    {
      v24 = *(void (**)(_QWORD *))(a1 + 192);
      v25 = *(_QWORD *)(a1 + 200);
    }
    else
    {
      v24 = *(void (**)(_QWORD *))(a1 + 128);
      v25 = *(_QWORD *)(a1 + 136);
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 312))
      goto LABEL_28;
    v24 = *(void (**)(_QWORD *))(a1 + 96);
    v25 = *(_QWORD *)(a1 + 104);
  }
  v26 = (_QWORD *)(a1 + (v25 >> 1));
  if ((v25 & 1) != 0)
    v24 = *(void (**)(_QWORD *))(*v26 + v24);
  v24(v26);
LABEL_28:
  if (!*(_BYTE *)(a1 + 243) && !*(_BYTE *)(a1 + 242))
  {
    v27 = *(_BYTE *)(a1 + 312) || v19;
    if ((v27 & 1) == 0)
    {
      v28 = v12[4];
      if ((v28 - 5) < 2)
      {
        v21 = *(void (**)(_QWORD *))(a1 + 32);
        v22 = *(_QWORD *)(a1 + 40);
      }
      else
      {
        if (v28 == 4)
        {
          sub_1B68B9BB8(a1, v13, v14, v15, v16, v17);
          return;
        }
        if (v28 == 9)
        {
          v21 = *(void (**)(_QWORD *))(a1 + 160);
          v22 = *(_QWORD *)(a1 + 168);
        }
        else
        {
          v21 = *(void (**)(_QWORD *))(a1 + 16);
          v22 = *(_QWORD *)(a1 + 24);
        }
      }
      goto LABEL_9;
    }
  }
}

uint64_t sub_1B68E3D4C()
{
  io_registry_entry_t v0;
  io_object_t v1;
  const __CFData *CFProperty;
  const __CFData *v3;
  CFTypeID v4;
  unint64_t Length;
  const UInt8 *BytePtr;
  uint64_t v7;
  int v9;

  v0 = IORegistryEntryFromPath(*MEMORY[0x1E0CBBAB8], "IODeviceTree:/arm-io");
  if (v0)
  {
    v1 = v0;
    CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v0, CFSTR("compatible"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (CFProperty)
    {
      v3 = CFProperty;
      v4 = CFGetTypeID(CFProperty);
      if (v4 != CFDataGetTypeID())
      {
        v7 = 0;
        goto LABEL_124;
      }
      Length = CFDataGetLength(v3);
      BytePtr = CFDataGetBytePtr(v3);
      if ((uint64_t)Length >= 11)
      {
        if (*BytePtr != 97)
        {
          if (Length > 0xD)
            goto LABEL_120;
          goto LABEL_123;
        }
        if (BytePtr[1] != 114)
        {
          if (Length >= 0xC && Length > 0xD)
            goto LABEL_120;
          goto LABEL_123;
        }
        if (BytePtr[2] == 109 && BytePtr[3] == 45 && BytePtr[4] == 105)
        {
          if (BytePtr[5] == 111
            && BytePtr[6] == 44
            && BytePtr[7] == 116
            && BytePtr[8] == 55
            && BytePtr[9] == 48
            && BytePtr[10] == 48)
          {
            v7 = 7;
LABEL_124:
            IOObjectRelease(v1);
            CFRelease(v3);
            return v7;
          }
          if (BytePtr[4] == 105
            && BytePtr[5] == 111
            && BytePtr[6] == 44
            && BytePtr[7] == 115
            && BytePtr[8] == 56
            && BytePtr[9] == 48
            && BytePtr[10] == 48)
          {
            v7 = 8;
            goto LABEL_124;
          }
        }
        if (Length <= 0xB)
          goto LABEL_123;
        if (BytePtr[2] == 109 && BytePtr[3] == 45 && BytePtr[4] == 105)
        {
          if (BytePtr[5] == 111
            && BytePtr[6] == 44
            && BytePtr[7] == 116
            && BytePtr[8] == 56
            && BytePtr[9] == 48
            && BytePtr[10] == 49
            && BytePtr[11] - 48 < 3)
          {
            v7 = 9;
            goto LABEL_124;
          }
          if (BytePtr[4] == 105)
          {
            if (BytePtr[5] == 111
              && BytePtr[6] == 44
              && BytePtr[7] == 116
              && BytePtr[8] == 56
              && BytePtr[9] == 48
              && BytePtr[10] == 49
              && BytePtr[11] == 53)
            {
              v7 = 10;
              goto LABEL_124;
            }
            if (BytePtr[4] == 105)
            {
              if (BytePtr[5] == 111
                && BytePtr[6] == 44
                && BytePtr[7] == 116
                && BytePtr[8] == 56
                && BytePtr[9] == 48
                && BytePtr[10] == 50)
              {
                v9 = BytePtr[11];
                v7 = 11;
                if (v9 == 48 || v9 == 55)
                  goto LABEL_124;
              }
              if (BytePtr[4] == 105)
              {
                if (BytePtr[5] == 111
                  && BytePtr[6] == 44
                  && BytePtr[7] == 116
                  && BytePtr[8] == 56
                  && BytePtr[9] == 48
                  && BytePtr[10] == 51
                  && BytePtr[11] == 48)
                {
                  v7 = 12;
                  goto LABEL_124;
                }
                if (BytePtr[4] == 105)
                {
                  if (BytePtr[5] == 111
                    && BytePtr[6] == 44
                    && BytePtr[7] == 116
                    && BytePtr[8] == 56
                    && BytePtr[9] == 49
                    && BytePtr[10] == 48
                    && (BytePtr[11] | 2) == 0x33)
                  {
                    v7 = 13;
                    goto LABEL_124;
                  }
                  if (BytePtr[4] == 105)
                  {
                    if (BytePtr[5] == 111
                      && BytePtr[6] == 44
                      && BytePtr[7] == 116
                      && BytePtr[8] == 56
                      && BytePtr[9] == 49
                      && BytePtr[10] == 49
                      && (BytePtr[11] | 2) == 0x32)
                    {
                      v7 = 14;
                      goto LABEL_124;
                    }
                    if (BytePtr[4] == 105)
                    {
                      if (BytePtr[5] == 111
                        && BytePtr[6] == 44
                        && BytePtr[7] == 116
                        && BytePtr[8] == 56
                        && BytePtr[9] == 49
                        && BytePtr[10] == 50
                        && BytePtr[11] == 48)
                      {
                        v7 = 15;
                        goto LABEL_124;
                      }
                      if (BytePtr[4] == 105)
                      {
                        if (BytePtr[5] == 111
                          && BytePtr[6] == 44
                          && BytePtr[7] == 116
                          && BytePtr[8] == 56
                          && BytePtr[9] == 49
                          && BytePtr[10] == 51
                          && BytePtr[11] == 48)
                        {
                          v7 = 16;
                          goto LABEL_124;
                        }
                        if (BytePtr[4] == 105
                          && BytePtr[5] == 111
                          && BytePtr[6] == 44
                          && BytePtr[7] == 116
                          && BytePtr[8] == 56
                          && BytePtr[9] == 49
                          && BytePtr[10] == 52
                          && BytePtr[11] == 48)
                        {
                          v7 = 17;
                          goto LABEL_124;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (Length >= 0xE)
      {
LABEL_120:
        if (!strncmp((const char *)BytePtr, "arm-io,vmapple", 0xEuLL))
          v7 = 254;
        else
          v7 = 255;
        goto LABEL_124;
      }
LABEL_123:
      v7 = 255;
      goto LABEL_124;
    }
    IOObjectRelease(v1);
  }
  return 0;
}

void sub_1B68E431C(int a1)
{
  void *v1;
  void *v2;

  if ((byte_1EF13A088 & 1) == 0)
  {
    off_1EF13A3D0 = sub_1B690E494;
    off_1EF13A3D8 = sub_1B690E614;
    off_1EF13A3E0 = sub_1B690E61C;
    off_1EF13A3E8 = sub_1B690E718;
    off_1EF13A3F0 = sub_1B690E720;
    off_1EF13A3F8 = sub_1B690E8D4;
    off_1EF13A400 = sub_1B690E8DC;
    off_1EF13A408 = sub_1B690EA0C;
    off_1EF13A410 = sub_1B690E40C;
    off_1EF13A418 = sub_1B690EDD0;
    off_1EF13A420 = sub_1B690EA14;
    off_1EF13A428 = sub_1B690ECA0;
    off_1EF13A430 = sub_1B690F118;
    off_1EF13A438 = sub_1B690EF28;
    memset_pattern16(&qword_1EF13A1D8, &off_1E6A17DB0, 0x38uLL);
    memset_pattern16(&qword_1EF13A1A0, &off_1E6A17DB0, 0x38uLL);
    memset_pattern16(&qword_1EF13A168, &off_1E6A17DC0, 0x38uLL);
    memset_pattern16(&qword_1EF13A0C0, &off_1E6A17DC0, 0x38uLL);
    memset_pattern16(&qword_1EF13A0F8, &off_1E6A17DB0, 0x38uLL);
    memset_pattern16(&qword_1EF13A130, &off_1E6A17DB0, 0x38uLL);
    memset_pattern16(&qword_1EF13A328, &off_1E6A17DB0, 0x38uLL);
    memset_pattern16(&qword_1EF13A2F0, &off_1E6A17DB0, 0x38uLL);
    memset_pattern16(&qword_1EF13A2B8, &off_1E6A17DC0, 0x38uLL);
    memset_pattern16(&qword_1EF13A210, &off_1E6A17DC0, 0x38uLL);
    memset_pattern16(&qword_1EF13A248, &off_1E6A17DB0, 0x38uLL);
    memset_pattern16(&qword_1EF13A280, &off_1E6A17DB0, 0x38uLL);
    memset_pattern16(&qword_1EF13A360, &off_1E6A17DC0, 0x38uLL);
    off_1EF13A0A8 = nullsub_32;
    off_1EF13A0B0 = nullsub_33;
    off_1EF13A0B8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))nullsub_34;
    qword_1EF13A0C0 = (uint64_t)sub_1B6908654;
    *(_QWORD *)algn_1EF13A0C8 = sub_1B69086D4;
    qword_1EF13A0D0 = (uint64_t)sub_1B6908748;
    unk_1EF13A0D8 = sub_1B69087BC;
    qword_1EF13A0F8 = (uint64_t)sub_1B69088B0;
    unk_1EF13A100 = sub_1B69088CC;
    qword_1EF13A108 = (uint64_t)sub_1B69088E8;
    unk_1EF13A110 = sub_1B6908904;
    qword_1EF13A130 = (uint64_t)sub_1B6908920;
    *(_QWORD *)algn_1EF13A138 = sub_1B690893C;
    qword_1EF13A140 = (uint64_t)sub_1B6908958;
    unk_1EF13A148 = sub_1B6908974;
    qword_1EF13A168 = (uint64_t)sub_1B6908990;
    unk_1EF13A170 = sub_1B6908A8C;
    qword_1EF13A178 = (uint64_t)sub_1B6908B88;
    unk_1EF13A180 = sub_1B6908C84;
    qword_1EF13A1A0 = (uint64_t)sub_1B6908D80;
    *(_QWORD *)algn_1EF13A1A8 = sub_1B6908DDC;
    qword_1EF13A1B0 = (uint64_t)sub_1B6908E38;
    unk_1EF13A1B8 = sub_1B6908E94;
    qword_1EF13A1D8 = (uint64_t)sub_1B6908EF0;
    unk_1EF13A1E0 = sub_1B6908F4C;
    qword_1EF13A1E8 = (uint64_t)sub_1B6908FA8;
    unk_1EF13A1F0 = sub_1B6909004;
    qword_1EF13A210 = (uint64_t)sub_1B6909060;
    *(_QWORD *)algn_1EF13A218 = sub_1B6909138;
    qword_1EF13A220 = (uint64_t)sub_1B6909204;
    unk_1EF13A228 = sub_1B6909354;
    qword_1EF13A248 = (uint64_t)sub_1B69094F8;
    unk_1EF13A250 = sub_1B69095C0;
    qword_1EF13A258 = (uint64_t)sub_1B6909688;
    unk_1EF13A260 = sub_1B690980C;
    qword_1EF13A280 = (uint64_t)sub_1B6909988;
    *(_QWORD *)algn_1EF13A288 = sub_1B6909A54;
    qword_1EF13A290 = (uint64_t)sub_1B6909B20;
    unk_1EF13A298 = sub_1B6909C4C;
    qword_1EF13A2B8 = (uint64_t)sub_1B6909D78;
    unk_1EF13A2C0 = sub_1B6909EB0;
    qword_1EF13A2C8 = (uint64_t)sub_1B6909FE8;
    unk_1EF13A2D0 = sub_1B690A1A0;
    qword_1EF13A2F0 = (uint64_t)sub_1B690A358;
    *(_QWORD *)algn_1EF13A2F8 = sub_1B690A47C;
    qword_1EF13A300 = (uint64_t)sub_1B690A5A0;
    unk_1EF13A308 = sub_1B690A85C;
    qword_1EF13A328 = (uint64_t)sub_1B690AB10;
    unk_1EF13A330 = sub_1B690AC40;
    qword_1EF13A338 = (uint64_t)sub_1B690AD70;
    unk_1EF13A340 = sub_1B690AFA4;
    qword_1EF13A360 = (uint64_t)sub_1B690B1D8;
    *(_QWORD *)algn_1EF13A368 = sub_1B690B2B4;
    qword_1EF13A370 = (uint64_t)sub_1B690B388;
    unk_1EF13A378 = sub_1B690B4E0;
    qword_1EF13A398 = (uint64_t)sub_1B690F9B8;
    qword_1EF13A3A0 = (uint64_t)sub_1B690FB70;
    qword_1EF13A3A8 = (uint64_t)sub_1B690FC08;
    qword_1EF13A3B0 = (uint64_t)sub_1B690FC3C;
    qword_1EF13A3B8 = (uint64_t)sub_1B690FCD0;
    qword_1EF13A3C0 = (uint64_t)sub_1B690FF6C;
    off_1EF13A3C8 = sub_1B690F2C0;
    off_1EF137C38[0] = (uint64_t (*)())sub_1B690DF90;
    off_1EF137C40[0] = (uint64_t (*)())sub_1B690DDF4;
    off_1EF137C20[0] = (uint64_t (*)())sub_1B690E29C;
    off_1EF137C28 = (uint64_t (*)())sub_1B690E12C;
    off_1EF13A4B0 = sub_1B690CF1C;
    off_1EF13A4B8 = sub_1B690D0C4;
    off_1EF13A4C0 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B690CD04;
    off_1EF13A4C8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B690D4CC;
    off_1EF13A4D0 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B690D188;
    off_1EF13A4D8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1B690D43C;
    qword_1EF13A4E0 = (uint64_t)sub_1B690D694;
    off_1EF13A4E8 = (uint64_t (*)(_QWORD, _QWORD))sub_1B690D608;
    off_1EF13A4F0 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B690D730;
    off_1EF13A4F8 = sub_1B690B638;
    off_1EF13A500 = sub_1B690B834;
    off_1EF13A508 = sub_1B690D868;
    off_1EF13A510 = sub_1B690D914;
    off_1EF13A468 = sub_1B691062C;
    off_1EF13A470 = sub_1B69104FC;
    off_1EF137BF8[0] = (uint64_t (*)())sub_1B6911768;
    off_1EF13A518 = sub_1B69113C8;
    off_1EF13A520 = sub_1B6910F6C;
    qword_1EF13A528 = (uint64_t)sub_1B6910BD4;
    unk_1EF13A530 = sub_1B6910BFC;
    qword_1EF13A538 = (uint64_t)sub_1B6910C3C;
    unk_1EF13A540 = sub_1B6910DEC;
    off_1EF13A548 = sub_1B691149C;
    off_1EF13A550 = sub_1B691145C;
    off_1EF13A558 = sub_1B6911440;
    off_1EF13A560 = sub_1B6911644;
    off_1EF137BB0[0] = (uint64_t (*)())sub_1B6911874;
    off_1EF137BB8[0] = (uint64_t (*)())sub_1B69118B8;
    off_1EF137BC0[0] = (uint64_t (*)())sub_1B691191C;
    off_1EF137BC8[0] = (uint64_t (*)())sub_1B69119C4;
    off_1EF137BD0[0] = (uint64_t (*)())sub_1B6911A34;
    off_1EF137BD8[0] = (uint64_t (*)())sub_1B6911AA8;
    off_1EF137BE0[0] = (uint64_t (*)())sub_1B6911B2C;
    off_1EF137BE8[0] = (uint64_t (*)())sub_1B6911BB0;
    off_1EF137BF0[0] = (uint64_t (*)())sub_1B6911C20;
    off_1EF13A478 = sub_1B69107A0;
    off_1EF13A480 = sub_1B690D974;
    off_1EF13A488 = sub_1B690D9B8;
    off_1EF13A490 = sub_1B6910BA8;
    off_1EF13A498 = sub_1B690D9FC;
    off_1EF13A4A0 = sub_1B69109DC;
    off_1EF13A5A8 = sub_1B6910928;
    off_1EF13A5B0 = sub_1B6910984;
    off_1EF13A5B8 = sub_1B6910888;
    off_1EF13A5C0 = sub_1B69108E0;
    off_1EF13A5C8 = sub_1B6910A18;
    qword_1EF137B58 = (uint64_t)sub_1B690DCF8;
    off_1EF137B98[0] = (uint64_t (*)())sub_1B690DB34;
    off_1EF137BA0 = (uint64_t (*)())sub_1B690DA38;
    off_1EF137B80[0] = (uint64_t (*)())sub_1B690DC94;
    off_1EF137B88 = (uint64_t (*)())sub_1B690DB98;
    off_1EF137B30[0] = (uint64_t (*)())sub_1B690DB90;
    off_1EF137B38 = (uint64_t (*)())sub_1B690DA94;
    off_1EF137B18[0] = (uint64_t (*)())sub_1B690DCF0;
    off_1EF137B20 = (uint64_t (*)())sub_1B690DBF4;
    byte_1EF13A090 = 1;
    byte_1EF13A098 = 1;
    byte_1EF13A0A0 = 1;
    off_1EF13A440 = sub_1B690BA50;
    off_1EF13A448 = sub_1B690BAE4;
    off_1EF13A450 = sub_1B690BB68;
    off_1EF13A458 = (uint64_t (*)(_QWORD))sub_1B690BC00;
    off_1EF13A460 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B690BEC8;
    off_1EF13A568 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B690C160;
    off_1EF13A570 = sub_1B690C2A8;
    off_1EF13A578 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B690C550;
    off_1EF13A580 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B690C6CC;
    off_1EF13A588 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B690C9B0;
    off_1EF13A590 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B690CA60;
    off_1EF13A598 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B690CBA0;
    off_1EF13A5A0 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1B690CC08;
    off_1EF13A4A8 = sub_1B6910AB0;
    if (a1 <= 6)
      v1 = sub_1B68AFE98;
    else
      v1 = sub_1B68B00F8;
    off_1EF13A058 = v1;
    v2 = sub_1B68B01F0;
    if (a1 <= 6)
      v2 = sub_1B68AFFC8;
    off_1EF13A060 = v2;
  }
  byte_1EF13A088 = 1;
}

void JVTLibDecoDispose(pthread_mutex_t **a1)
{
  pthread_mutex_t **v2;
  pthread_mutex_t *v3;
  pthread_mutex_t *v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *sig;
  void *v17;
  void *v18;
  pthread_mutex_t *v19;
  pthread_mutex_t *v20;
  pthread_mutex_t *v21;
  pthread_mutex_t *v22;

  if (!a1)
    return;
  v2 = a1 + 36648;
  v3 = a1[39735];
  if (v3)
  {
    v4 = *v2;
    if (*v2)
      pthread_mutex_destroy(*v2);
    free(v4);
    *v2 = 0;
    v5 = v2[3078];
    if (v5)
      pthread_mutex_destroy(v2[3078]);
    free(v5);
    v2[3078] = 0;
    v6 = *(_QWORD *)&v3->__opaque[24];
    if (v6)
    {
      sub_1B68C7A4C(v6);
      free(*(void **)&v3->__opaque[24]);
      *(_QWORD *)&v3->__opaque[24] = 0;
    }
    v7 = *(_QWORD *)&v3[6].__opaque[32];
    if (v7)
    {
      sub_1B68C7A4C(v7);
      free(*(void **)&v3[6].__opaque[32]);
      *(_QWORD *)&v3[6].__opaque[32] = 0;
    }
    v8 = *(_DWORD *)&v3->__opaque[36];
    if (v8 >= 1)
    {
      for (i = 0; i < v8; ++i)
      {
        v10 = *(_QWORD *)(*(_QWORD *)&v3->__opaque[40] + 8 * i);
        if (v10)
        {
          v11 = *(uint64_t ***)(v10 + 1160);
          if (v11)
          {
            v12 = *v11;
            if (*v11)
            {
              if (v12[1])
              {
                MEMORY[0x1BCC9814C](v12[1], 0x1030C40B34BA92BLL);
                (*v11)[1] = 0;
                v12 = *v11;
              }
              v13 = *v12;
              if (*v12)
              {
                v14 = *(_QWORD *)(v13 + 96);
                if (v14)
                {
                  MEMORY[0x1BCC9811C](v14, 0x1000C807B7DF2DDLL);
                  *(_QWORD *)(v13 + 96) = 0;
                  *(_QWORD *)(v13 + 104) = 0;
                }
                MEMORY[0x1BCC9814C](v13, 0x1030C40708365FFLL);
                **v11 = 0;
                v12 = *v11;
              }
              free(v12);
              *v11 = 0;
              v11 = *(uint64_t ***)(v10 + 1160);
            }
            free(v11);
            *(_QWORD *)(v10 + 1160) = 0;
          }
          v15 = *(void **)(v10 + 1168);
          if (v15)
          {
            free(v15);
            *(_QWORD *)(v10 + 1168) = 0;
          }
          if (*(_QWORD *)(v10 + 35712))
          {
            free(*(void **)(v10 + 35728));
            free(*(void **)(v10 + 35736));
            *(_OWORD *)(v10 + 35712) = 0u;
            *(_OWORD *)(v10 + 35728) = 0u;
          }
          free(*(void **)(v10 + 1024));
          free((void *)v10);
          *(_QWORD *)(*(_QWORD *)&v3->__opaque[40] + 8 * i) = 0;
          v8 = *(_DWORD *)&v3->__opaque[36];
        }
      }
    }
    free(*(void **)&v3->__opaque[40]);
    *(_QWORD *)&v3->__opaque[40] = 0;
    free(*(void **)&v3->__opaque[48]);
    *(_QWORD *)&v3->__opaque[48] = 0;
    sig = (void *)v3[1].__sig;
    if (sig)
      pthread_mutex_destroy((pthread_mutex_t *)v3[1].__sig);
    free(sig);
    v3[1].__sig = 0;
    if (*(_DWORD *)&v3[6].__opaque[24] == -4)
    {
      free(*(void **)v3[1].__opaque);
      *(_QWORD *)v3[1].__opaque = 0;
    }
    v17 = *(void **)&v3[1].__opaque[24];
    if (v17)
    {
      if (!*(_DWORD *)&v3[1].__opaque[16])
      {
LABEL_40:
        free(v3);
        sub_1B68B4AF4((uint64_t)(a1 + 39718));
        goto LABEL_41;
      }
      free(v17);
      *(_QWORD *)&v3[1].__opaque[24] = 0;
      *(_DWORD *)&v3[1].__opaque[32] = 0;
    }
    v18 = *(void **)&v3[1].__opaque[48];
    if (v18 && *(_DWORD *)&v3[1].__opaque[36])
      free(v18);
    goto LABEL_40;
  }
LABEL_41:
  v19 = v2[3166];
  if (v19)
    free(v19);
  v20 = v2[3088];
  if (v20)
  {
    free((char *)v20 - *(int *)&v20[-1].__opaque[52]);
    v2[3088] = 0;
  }
  v21 = v2[3100];
  if (v21)
    sub_1B68F8260(v21);
  v22 = v2[3101];
  if (v22)
    sub_1B68F8260(v22);
  sub_1B68B89F8((uint64_t)(a1 + 39727));
  free(a1);
}

uint64_t sub_1B68E4F8C(unsigned int a1, const void *a2, __int16 **a3, int a4, char a5)
{
  __int16 *v9;
  __int16 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  double v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  _BOOL4 v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  __int16 *v41;
  __int16 *v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  void *v48;
  _BYTE *v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  void *v68;
  _QWORD *v69;
  pthread_mutex_t **v70;
  pthread_t *v71;
  thread_inspect_t v72;
  kern_return_t v73;
  integer_t *v74;
  kern_return_t v75;
  kern_return_t v76;
  thread_act_t v77;
  kern_return_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char v84;
  int v85;
  int v86;
  int v87;
  int v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t (**v94)();
  uint64_t v95;
  unsigned __int8 v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  int v102;
  int v103;
  void *v104;
  void *v105;
  int v106;
  float v107;
  float v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  _DWORD *v113;
  uint64_t v114;
  int v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  size_t v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  _BYTE *v140;
  unint64_t v141;
  void *v142;
  void *v143;
  void *v144;
  double v145;
  unsigned int v146;
  int v147;
  int v148;
  unsigned int v149;
  float v150;
  int v151;
  int v152;
  void *v153;
  uint64_t v154;
  _DWORD *v155;
  unint64_t v156;
  double v157;
  double v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  unint64_t v163;
  __int16 *v164;
  int v165;
  uint64_t v166;
  int v167;
  int *v168;
  int *v169;
  int v170;
  int v171;
  int v172;
  int v173;
  _BOOL4 v174;
  _BOOL4 v175;
  int v176;
  CFTypeRef *v177;
  uint64_t i;
  uint64_t v179;
  char v180;
  char v181;
  const void **v182;
  __CFDictionary *v183;
  const void *v184;
  int v185;
  int v186;
  uint32x2_t v187;
  uint32x2_t v188;
  int v189;
  __int16 v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  __int16 v197;
  int v198;
  __int16 v199;
  __int16 v200;
  __int16 v201;
  int v202;
  uint64_t v203;
  int v204;
  int v205;
  int v206;
  int v207;
  BOOL v209;
  int v210;
  int v211;
  int v212;
  __CFDictionary *v213;
  const void *v214;
  int v215;
  int v216;
  signed int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  uint64_t *v222;
  uint64_t v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  const void *v234;
  char v235;
  uint64_t v236;
  int v237;
  char v238;
  __CFDictionary *v239;
  __CFDictionary *v240;
  mach_msg_type_number_t v241;
  int v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  signed int v249;
  signed int v250;
  int v251;
  int v252;
  int v253;
  char v254;
  int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  char v265;
  char v266;
  CFArrayRef v267;
  char v268;
  uint64_t v269;
  char v270;
  char v271;
  const void *v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  char v277;
  int v278;
  signed int v279;
  int v280;
  CFNumberRef v281;
  char v282;
  uint64_t v283;
  char v284;
  __IOSurface *v285;
  uint64_t v286;
  int v287;
  int v288;
  uint64_t v289;
  char v290;
  char v291;
  uint64_t v292;
  int CompressedTileHeightOfPlane;
  int WidthInCompressedTilesOfPlane;
  int HeightInCompressedTilesOfPlane;
  unsigned int v296;
  int v297;
  int j;
  IOSurfaceID ID;
  CFNumberRef v300;
  __CFArray *v301;
  CFNumberRef v302;
  CFNumberRef v303;
  const void *v304;
  const void *v305;
  int v306;
  const void *v307;
  const void *v308;
  const void *v309;
  const void *v310;
  const void *v311;
  uint64_t v312;
  unsigned int v313;
  const __CFString *v314;
  int v315;
  CFAllocatorRef *v316;
  CFNumberRef v317;
  int v318;
  CFStringRef *v319;
  CFStringRef Copy;
  int v321;
  CFStringRef StringForIntegerCodePoint;
  CFStringRef v323;
  int v324;
  CFStringRef *v325;
  CFStringRef v326;
  CFTypeRef v327;
  void *v328;
  dispatch_semaphore_t v329;
  dispatch_semaphore_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  void *v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  const void *v340;
  const void *v341;
  const void *v342;
  const void *v343;
  const void *v344;
  const void *v345;
  const void *v346;
  const void *v347;
  VTSessionRef session;
  signed int v349;
  const void *v350;
  const void *v351;
  const void *v352;
  const void *v353;
  const void *v354;
  const void *v355;
  const void *v356;
  const void *v357;
  const void *v358;
  int v359;
  int v360;
  const void *v361;
  const void *v362;
  int v363;
  const void *v364;
  const void *v365;
  const void *v366;
  const void *v367;
  const void *v368;
  CFStringRef key;
  const __CFString *keya;
  char theArray;
  int theArrayb;
  __CFArray *theArraya;
  _BYTE *v374;
  int v375;
  IOSurfaceRef *v376;
  __CFDictionary *properties;
  int v378;
  unint64_t v379;
  char v380;
  int buffer;
  __IOSurface *buffera;
  _BOOL4 v383;
  int v384;
  uint64_t v385;
  char v386;
  uint64_t v387;
  CFMutableDictionaryRef theDict;
  void *value;
  uint64_t v390;
  __CFDictionary *v391;
  int v392;
  int CompressedTileWidthOfPlane;
  __CFDictionary *Mutable;
  unsigned int v395;
  int v396;
  int v397;
  char v398;
  int v399;
  int v400;
  __int16 *v401;
  int v403;
  CFTypeRef *v404;
  int v405;
  int v406;
  integer_t policy_info[4];
  __int128 v408;
  __int128 v409;
  uint64_t v410;
  integer_t thread_info_out[4];
  __int128 v412;
  uint64_t v413;
  uint64_t v414;
  unsigned int v415;
  int v416;
  uint64_t v417;
  mach_msg_type_number_t thread_info_outCnt[2];
  pthread_attr_t valuePtr;
  uint64_t v420;

  v420 = *MEMORY[0x1E0C80C00];
  v9 = (__int16 *)malloc_type_calloc(0x1430uLL, 1uLL, 0x4AE20AB7uLL);
  if (!v9)
  {
LABEL_188:
    CFLog();
    v46 = 4294967188;
LABEL_292:
    *a3 = 0;
    return v46;
  }
  v10 = v9;
  memcpy(v9, a2, 0x1430uLL);
  if ((byte_1EF139D54 & 1) == 0)
    byte_1EF139D54 = 1;
  sub_1B68E431C(*((_DWORD *)v10 + 1205));
  if (*((_BYTE *)v10 + 577) == 1)
    *((_DWORD *)v10 + 22) = 0;
  v11 = 0;
  v12 = *((unsigned __int8 *)v10 + 16);
  *(_DWORD *)(v10 + 13) = 0;
  v10[15] = 0;
  if (v12 > 87)
  {
    if (v12 == 88)
    {
      v14 = 0;
      *(__int16 *)((char *)v10 + 27) = 257;
      v12 = 77;
      v11 = 1;
      v13 = 1;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      if (v12 == 101)
      {
        v11 = 0;
        v13 = 0;
        v14 = 0;
        v10[15] = 257;
        v12 = 101;
      }
    }
  }
  else if (v12 == 66)
  {
    v11 = 1;
    *((_BYTE *)v10 + 28) = 1;
    v10[13] = 257;
    v13 = 1;
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    if (v12 == 77)
    {
      v11 = 0;
      v14 = 0;
      v13 = 1;
      *((_BYTE *)v10 + 27) = 1;
    }
  }
  *((_BYTE *)v10 + 24) = v12;
  if (!*((_BYTE *)v10 + 18))
  {
    v20 = 0;
    v21 = *((unsigned __int8 *)v10 + 17);
    goto LABEL_83;
  }
  v15 = *((_DWORD *)v10 + 48);
  if (!v15)
    v15 = *((_DWORD *)v10 + 13);
  v16 = ((-v10[2] & 0xF) + v10[2]) * ((-*v10 & 0xF) + *v10) / 256;
  v17 = *((float *)v10 + 16);
  if (v17 <= 0.0)
  {
    v17 = *((float *)v10 + 15);
    if (v17 == 0.0)
      v17 = 30.0;
  }
  v18 = *((double *)v10 + 23) * (double)v15;
  if (*((_BYTE *)v10 + 17))
  {
    v19 = 0;
    while (*((unsigned __int8 *)v10 + 17) != byte_1B693579C[v19])
    {
      if (++v19 == 17)
        goto LABEL_26;
    }
    if (v19 <= 0x10)
      v19 = (int)v19;
    else
      v19 = 0;
  }
  else
  {
LABEL_26:
    v19 = 0;
  }
  v22 = v18;
  if ((v12 & 0xFE) == 0x64)
    v23 = 5000;
  else
    v23 = 4000;
  do
  {
    if (v12 == 77 || v12 == 100)
    {
      if (v19 >= 8)
        goto LABEL_40;
      v24 = 1;
    }
    else
    {
      v24 = 1;
      if (v19 >= 8 && v12 == 101)
      {
LABEL_40:
        LOBYTE(v18) = byte_1B6935478[v19];
        *(float *)&v18 = v17 * (float)LODWORD(v18);
        v24 = *((_DWORD *)v10 + 11) <= (int)(float)((float)dword_1B693548C[v19] / *(float *)&v18);
      }
    }
    if (v15 <= (dword_1B6935758[v19] * v23) >> 2
      && 1000 * dword_1B6935714[v19] >= v22
      && v16 <= word_1B69354D0[v19]
      && dword_1B693548C[v19] >= ((float)(v17 * (float)v16) + 0.5)
      && v16 * *((char *)v10 + 238) <= dword_1B69354F4[v19]
      && v24)
    {
      goto LABEL_49;
    }
    ++v19;
  }
  while ((_DWORD)v19 != 17);
  LODWORD(v19) = 17;
LABEL_49:
  if ((int)v19 >= 16)
    LODWORD(v19) = 16;
  if (!v15 && v19 <= 0xB && !*((_BYTE *)v10 + 392))
  {
    v25 = dword_1B6935758[v19];
    if (*((char *)v10 + 228) < 8)
    {
      v26 = 4;
      goto LABEL_60;
    }
    v27 = *((unsigned __int8 *)v10 + 228);
    if (v27 < 0xF)
    {
      v26 = 3;
      goto LABEL_60;
    }
    if (v27 > 0x12)
    {
      if (v27 < 0x18)
        LODWORD(v19) = v19 + 1;
      if (v27 <= 0x17)
        goto LABEL_61;
    }
    else
    {
      v26 = 2;
LABEL_60:
      LODWORD(v19) = v26 + v19;
LABEL_61:
      if (dword_1B6935758[v19] == v25)
        LODWORD(v19) = v19 + 1;
    }
  }
  v21 = byte_1B693579C[(int)v19];
  *((_BYTE *)v10 + 25) = v21;
  v20 = v19 == 1;
  *((_BYTE *)v10 + 29) = v20;
  v28 = *((unsigned __int8 *)v10 + 32);
  if (v28 > v21)
  {
    *((_BYTE *)v10 + 25) = v28;
    v20 = *((unsigned __int8 *)v10 + 33);
    v21 = v28;
    goto LABEL_70;
  }
  if ((v19 - 1) <= 1 && v28 == v21 && (_DWORD)v19 == 1 && !*((_BYTE *)v10 + 33))
  {
    v20 = 0;
LABEL_70:
    *((_BYTE *)v10 + 29) = v20;
  }
  v29 = 0;
  v30 = 17;
  while (byte_1B693579C[v29] != v21)
  {
    if (++v29 == 17)
      goto LABEL_80;
  }
  v31 = 1;
  if (!v20)
    v31 = 2;
  if ((_DWORD)v29 == 1)
    v30 = v31;
  else
    v30 = v29;
LABEL_80:
  *((_DWORD *)v10 + 5) = 1000 * dword_1B6935714[v30];
  if (*((_BYTE *)v10 + 398) && v21 <= 0x1D)
  {
    v21 = 30;
LABEL_83:
    *((_BYTE *)v10 + 25) = v21;
  }
  if (v12 == 66)
  {
    v14 = 1;
    if (v21)
      goto LABEL_89;
  }
  else
  {
    if (v12 == 77)
    {
      v13 = 1;
      if (!v21)
        goto LABEL_111;
    }
    else if (!v21)
    {
      goto LABEL_111;
    }
LABEL_89:
    v32 = *((_DWORD *)v10 + 63);
    if (!v32)
    {
      if (v21 == 11)
      {
        v32 = 63;
        if (v20)
          goto LABEL_102;
LABEL_98:
        v32 = 127;
        goto LABEL_102;
      }
      if (v21 == 10)
      {
        v32 = 63;
        goto LABEL_102;
      }
      if (v21 <= 0x14)
        goto LABEL_98;
      if (v21 >= 0x1F)
        v32 = 511;
      else
        v32 = 255;
LABEL_102:
      *((_DWORD *)v10 + 63) = v32;
    }
    v33 = *((_DWORD *)v10 + 62);
    if (v33 + *((_DWORD *)v10 + 61) > v32)
      *((_DWORD *)v10 + 61) = v32 - v33;
    if (v21 != 30)
    {
      if (v21 < 0x1F)
        goto LABEL_111;
      if (!*((_BYTE *)v10 + 285))
        *((_BYTE *)v10 + 285) = 1;
    }
    if (!*((_BYTE *)v10 + 286))
      *((_BYTE *)v10 + 286) = 1;
  }
LABEL_111:
  v34 = v12 & 0xFE;
  if (v14)
  {
    if (*((_BYTE *)v10 + 240))
      *((_BYTE *)v10 + 240) = 0;
    if (*((_BYTE *)v10 + 236) && !*((_BYTE *)v10 + 324))
      v10[118] = 0;
    if (v21 - 1 <= 0x1D && *((_DWORD *)v10 + 64) != 576 && (!*((_BYTE *)v10 + 286) || !*((_BYTE *)v10 + 285)))
      *((_DWORD *)v10 + 64) = 576;
  }
  if (v34 == 100)
    v13 = 1;
  if (v21 && v13)
  {
    if (v21 >= 0x1F && !*((_BYTE *)v10 + 286))
      *((_BYTE *)v10 + 286) = 1;
    if (v21 >= 0x1E && !*((_BYTE *)v10 + 282))
      *((_BYTE *)v10 + 282) = 1;
    if (v34 != 100 && *((_BYTE *)v10 + 400))
      *((_BYTE *)v10 + 400) = 0;
  }
  if (v11)
  {
    if (*((_BYTE *)v10 + 282) != 1)
      *((_BYTE *)v10 + 282) = 1;
    if (*((_BYTE *)v10 + 240))
      *((_BYTE *)v10 + 240) = 0;
    if (v21)
    {
      if (v21 > 0x1E)
      {
        if (!*((_BYTE *)v10 + 286))
          *((_BYTE *)v10 + 286) = 1;
      }
      else if (*((_DWORD *)v10 + 64) != 576 && (!*((_BYTE *)v10 + 286) || !*((_BYTE *)v10 + 285)))
      {
        *((_DWORD *)v10 + 64) = 576;
      }
    }
  }
  *((_BYTE *)v10 + 282) = 1;
  if (!*((_BYTE *)v10 + 286))
    *((_BYTE *)v10 + 286) = 1;
  if (!(*((unsigned __int8 *)v10 + 285) | *((unsigned __int8 *)v10 + 281)))
    *((_BYTE *)v10 + 285) = 1;
  if (*((_BYTE *)v10 + 4816))
  {
    v35 = *((char *)v10 + 238) + 1;
    v36 = *v10 + 15;
    v37 = v10[2] + 15;
    switch(v21)
    {
      case 0xAu:
        v38 = 384 * (v36 >> 4) * (v37 >> 4);
        if (v38 < 0x2501)
          goto LABEL_178;
        v39 = 151552;
        goto LABEL_177;
      case 0xBu:
        v38 = 384 * (v36 >> 4) * (v37 >> 4);
        if (v38 < 0x5441)
          goto LABEL_178;
        v39 = 345088;
        goto LABEL_177;
      case 0xCu:
      case 0xDu:
      case 0x14u:
        v38 = 384 * (v36 >> 4) * (v37 >> 4);
        if (v38 < 0xDEC1)
          goto LABEL_178;
        v39 = 912384;
        goto LABEL_177;
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
        goto LABEL_179;
      case 0x15u:
        v38 = 384 * (v36 >> 4) * (v37 >> 4);
        if (v38 < 0x1BD81)
          goto LABEL_178;
        v39 = 1824768;
        goto LABEL_177;
      case 0x16u:
      case 0x1Eu:
        v38 = 384 * (v36 >> 4) * (v37 >> 4);
        if (v38 <= 0x2F740)
          goto LABEL_178;
        v39 = 3109888;
        goto LABEL_177;
      case 0x1Fu:
        v38 = 384 * (v36 >> 4) * (v37 >> 4);
        if (v38 < 0x69781)
          goto LABEL_178;
        v39 = 6912000;
        goto LABEL_177;
      case 0x20u:
        v38 = 384 * (v36 >> 4) * (v37 >> 4);
        if (v38 <= 0x78000)
        {
LABEL_178:
          v35 = 16;
        }
        else
        {
          v39 = 7864320;
LABEL_177:
          v35 = v39 / v38;
        }
LABEL_179:
        if (v35 >= 4)
          v40 = 4;
        else
          v40 = v35;
        if ((*((_DWORD *)v10 + 1213) - 1) < 2)
          LOBYTE(v35) = v40;
        *((_BYTE *)v10 + 615) = v35 - 1;
        *((_BYTE *)v10 + 238) = v35;
        break;
      default:
        switch(v21)
        {
          case '(':
          case ')':
            v38 = 384 * (v36 >> 4) * (v37 >> 4);
            if (v38 <= 0xC0000)
              goto LABEL_178;
            v39 = 12582912;
            goto LABEL_177;
          case '*':
            v38 = 384 * (v36 >> 4) * (v37 >> 4);
            if (v38 <= 0xCC000)
              goto LABEL_178;
            v39 = 13369344;
            goto LABEL_177;
          case '2':
            v38 = 384 * (v36 >> 4) * (v37 >> 4);
            if (v38 < 0x286E01)
              goto LABEL_178;
            v39 = 42393600;
            goto LABEL_177;
          case '3':
            v38 = 384 * (v36 >> 4) * (v37 >> 4);
            if (v38 <= 0x438000)
              goto LABEL_178;
            v39 = 70778880;
            goto LABEL_177;
          default:
            goto LABEL_179;
        }
        goto LABEL_179;
    }
  }
  v41 = (__int16 *)malloc_type_calloc(0x2988uLL, 1uLL, 0x4AE20AB7uLL);
  if (!v41)
    goto LABEL_188;
  v42 = v41;
  *a3 = v41;
  memcpy(v41, v10, 0x1430uLL);
  free(v10);
  *((_DWORD *)v42 + 1312) = 0;
  *((_DWORD *)v42 + 1304) = 0;
  *((_QWORD *)v42 + 658) = 0;
  *((_QWORD *)v42 + 657) = 0;
  v43 = (*v42 + 15) >> 4;
  v44 = (v42[2] + 15) >> 4;
  if (*((_DWORD *)v42 + 1213) == 2)
  {
    v45 = 0;
    *((_DWORD *)v42 + 1304) = 0;
    *((_QWORD *)v42 + 651) = 0;
    goto LABEL_192;
  }
  v47 = 388 * v43 * v44 + (*((_DWORD *)v42 + 11) << 9);
  *((_DWORD *)v42 + 1304) = v47;
  if (!v47)
  {
    *((_QWORD *)v42 + 651) = 0;
    goto LABEL_236;
  }
  v48 = malloc_type_malloc(v47, 0x4CF1F002uLL);
  *((_QWORD *)v42 + 651) = v48;
  if (!v48)
  {
LABEL_236:
    CFLog();
    goto LABEL_237;
  }
  v45 = *((_DWORD *)v42 + 1304);
LABEL_192:
  v49 = v42 + 2407;
  *((_DWORD *)v42 + 1305) = v45;
  *((_DWORD *)v42 + 1311) = *((_DWORD *)v42 + 11);
  *(int8x8_t *)(v42 + 2474) = vand_s8(vand_s8((int8x8_t)vdup_n_s32(*((_DWORD *)v42 + 1239)), (int8x8_t)0xFF0000001FLL), (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*((_DWORD *)v42 + 1239) >= 0), 0x1FuLL)));
  v50 = *((_DWORD *)v42 + 93);
  *((_DWORD *)v42 + 2653) = v50;
  v51 = *((unsigned __int8 *)v42 + 376);
  *((_BYTE *)v42 + 10616) = v51;
  if (v50 == 1)
  {
    v52 = v42[1];
    if (v52 / v51 < *((_DWORD *)v42 + 63))
    {
      v53 = (__int16)((__int16)v52 / v51);
      *((_DWORD *)v42 + 63) = v53;
      v54 = *((_DWORD *)v42 + 62);
      if (v54 + *((_DWORD *)v42 + 61) > v53)
        *((_DWORD *)v42 + 61) = v53 - v54;
    }
  }
  if (*((char *)v42 + 394) < 1)
    v55 = sub_1B68A3908();
  else
    v55 = *((unsigned __int8 *)v42 + 394);
  v56 = sub_1B68DDFC8((unsigned __int16 *)v42, (_QWORD *)v42 + 647, v55, 1);
  if ((_DWORD)v56)
  {
    v46 = v56;
    CFLog();
    goto LABEL_287;
  }
  v399 = v44;
  v400 = v43;
  v401 = v42 + 2588;
  v398 = a5;
  *(_QWORD *)(*((_QWORD *)v42 + 647) + 72) = v42 + 2596;
  if (*(_DWORD *)(*((_QWORD *)v42 + 647) + 205924) == 1)
  {
    *((_DWORD *)v42 + 2651) = 0;
    v57 = *((unsigned __int8 *)v42 + 376);
    *((_DWORD *)v42 + 2652) = v57;
    v58 = malloc_type_calloc(320 * v57, 1uLL, 0x4AE20AB7uLL);
    *((_QWORD *)v42 + 1328) = v58;
    if (!v58)
    {
LABEL_286:
      v46 = 4294967188;
      goto LABEL_287;
    }
    if (*((int *)v42 + 2652) >= 1)
    {
      v59 = 0;
      v60 = 248;
      v395 = a1;
      while (1)
      {
        v61 = v49;
        v62 = *((_QWORD *)v42 + 1328);
        v63 = v62 + v60;
        if (v60 == 248)
        {
          *(_QWORD *)(v62 + 32) = *(_QWORD *)v401;
        }
        else
        {
          v64 = v63 - 216;
          v65 = sub_1B68DDFC8((unsigned __int16 *)v42, (_QWORD *)(v63 - 216), v55, 0);
          if ((_DWORD)v65)
          {
            v46 = v65;
            goto LABEL_287;
          }
          *(_QWORD *)(*(_QWORD *)v64 + 205800) = *(_QWORD *)(*(_QWORD *)v401 + 205800);
          *(_QWORD *)(*(_QWORD *)v64 + 205808) = *(_QWORD *)(*(_QWORD *)v401 + 205808);
          *(_QWORD *)(*(_QWORD *)v64 + 205944) = *(_QWORD *)(*(_QWORD *)v401 + 205944);
          *(_QWORD *)(*(_QWORD *)v64 + 205960) = *(_QWORD *)(*(_QWORD *)v401 + 205960);
          *(_QWORD *)(*(_QWORD *)v64 + 152) = *(_QWORD *)(*(_QWORD *)v401 + 152);
          *(_QWORD *)(*(_QWORD *)v64 + 205968) = *(_QWORD *)(*(_QWORD *)v401 + 205968);
          *(_QWORD *)(*(_QWORD *)v64 + 207760) = *(_QWORD *)(*(_QWORD *)v401 + 207760);
        }
        v66 = v62 + v60;
        *(_DWORD *)(v66 - 152) = 0;
        *(_DWORD *)(v66 - 184) = 0;
        *(_QWORD *)(v66 - 144) = 0;
        *(_QWORD *)(v66 - 136) = 0;
        v67 = 32 * *v42 * v42[2];
        *(_DWORD *)(v66 - 184) = v67;
        if (!v67)
        {
          *(_QWORD *)(v66 - 192) = 0;
          goto LABEL_286;
        }
        v68 = malloc_type_malloc(v67, 0x4CF1F002uLL);
        *(_QWORD *)(v66 - 192) = v68;
        if (!v68)
          goto LABEL_286;
        v69 = (_QWORD *)(v63 - 248);
        v70 = (pthread_mutex_t **)(v62 + v60);
        *((_DWORD *)v70 - 39) = *((_DWORD *)v42 + 11);
        *v69 = 0;
        *(pthread_mutex_t **)((char *)v70 + 60) = 0;
        *(v70 - 29) = (pthread_mutex_t *)sub_1B68A3860();
        *(v70 - 28) = (pthread_mutex_t *)sub_1B68A3860();
        *v70 = sub_1B68A37A0();
        v70[1] = (pthread_mutex_t *)sub_1B68A3800();
        v71 = (pthread_t *)malloc_type_malloc(8uLL, 0x2004093837F09uLL);
        if (v71)
          break;
LABEL_218:
        *(v70 - 30) = (pthread_mutex_t *)v71;
        if (!*(v70 - 29) || !*(v70 - 28) || !*(_QWORD *)(v62 + v60))
          goto LABEL_286;
        v46 = 4294967188;
        if (!v70[1] || !v71)
          goto LABEL_287;
        ++v59;
        v60 += 320;
        v49 = v61;
        a1 = v395;
        if (v59 >= *((int *)v42 + 2652))
          goto LABEL_238;
      }
      memset(&valuePtr, 0, sizeof(valuePtr));
      if (!pthread_attr_init(&valuePtr))
      {
        if (pthread_attr_setdetachstate(&valuePtr, 1))
          goto LABEL_216;
        if (pthread_create(v71, &valuePtr, (void *(__cdecl *)(void *))sub_1B68E8A84, v69))
          goto LABEL_216;
        v72 = pthread_mach_thread_np(*v71);
        v413 = 0;
        *(_OWORD *)thread_info_out = 0u;
        v412 = 0u;
        v410 = 0;
        v408 = 0u;
        v409 = 0u;
        *(_OWORD *)policy_info = 0u;
        thread_info_outCnt[0] = 10;
        if (thread_info(v72, 3u, thread_info_out, thread_info_outCnt))
        {
LABEL_216:
          pthread_attr_destroy(&valuePtr);
        }
        else
        {
          switch(DWORD1(v412))
          {
            case 4:
              thread_info_outCnt[0] = 4;
              v75 = thread_info(v72, 0xCu, (thread_info_t)&v409 + 2, thread_info_outCnt);
              v74 = (integer_t *)&v409 + 3;
              if (v75)
                goto LABEL_216;
              break;
            case 2:
              thread_info_outCnt[0] = 5;
              v76 = thread_info(v72, 0xBu, (thread_info_t)&v408 + 1, thread_info_outCnt);
              v74 = (integer_t *)&v408 + 2;
              if (v76)
                goto LABEL_216;
              break;
            case 1:
              thread_info_outCnt[0] = 5;
              v73 = thread_info(v72, 0xAu, policy_info, thread_info_outCnt);
              v74 = &policy_info[1];
              if (v73)
                goto LABEL_216;
              break;
            default:
              goto LABEL_216;
          }
          policy_info[0] = a4 - *v74;
          v77 = pthread_mach_thread_np(*v71);
          v78 = thread_policy_set(v77, 3u, policy_info, 1u);
          pthread_attr_destroy(&valuePtr);
          if (!v78)
            goto LABEL_218;
        }
      }
      free(v71);
      v71 = 0;
      goto LABEL_218;
    }
  }
LABEL_238:
  v79 = *((_QWORD *)v42 + 647);
  v80 = *(_QWORD *)(v79 + 5512);
  v81 = *(_QWORD *)(v79 + 152);
  v82 = malloc_type_calloc(0x100uLL, 1uLL, 0x4AE20AB7uLL);
  if (!v82)
  {
    v46 = 4294967188;
LABEL_280:
    *((_QWORD *)v42 + 646) = 0;
    goto LABEL_287;
  }
  v83 = (uint64_t)v82;
  v82[28] = v80;
  if (*((_BYTE *)v42 + 398))
    v84 = 2;
  else
    v84 = 1;
  v85 = *((unsigned __int8 *)v42 + 318);
  v86 = *((unsigned __int8 *)v42 + 319);
  v87 = (*((_BYTE *)v42 + 237) + v84);
  v88 = v85 + v87 + v86;
  *((_DWORD *)v82 + 2) = v88;
  *v82 = 0;
  *((_DWORD *)v82 + 6) = v87;
  *((_DWORD *)v82 + 8) = v85;
  *((_DWORD *)v82 + 9) = v86;
  v89 = (char *)malloc_type_calloc((16 * v88), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)v83 = v89;
  if (!v89)
  {
    sub_1B689D7D0((uint64_t *)v83);
    free(*(void **)v83);
LABEL_278:
    v46 = 1;
LABEL_279:
    sub_1B689D924(v83);
    sub_1B689D924(v83);
    free((void *)v83);
    goto LABEL_280;
  }
  *(_QWORD *)(v83 + 16) = &v89[16 * v85];
  *(_DWORD *)(v83 + 28) = 0;
  *(_QWORD *)(v83 + 40) = 0;
  *(_DWORD *)(v83 + 48) = v85;
  if (*(_DWORD *)(v83 + 8))
  {
    v90 = 0;
    v91 = 0;
    do
    {
      v92 = (_QWORD *)(*(_QWORD *)v83 + v90);
      *v92 = 0;
      v92[1] = 0;
      ++v91;
      v90 += 16;
    }
    while (v91 < *(unsigned int *)(v83 + 8));
  }
  if (*((_BYTE *)v42 + 322) && *((_BYTE *)v42 + 318))
  {
    v93 = operator new();
    *(_DWORD *)(v93 + 8) = *((unsigned __int8 *)v42 + 318);
    *(_DWORD *)(v93 + 12) = 2;
    v94 = &off_1E6A15920;
  }
  else
  {
    v93 = operator new();
    *(_DWORD *)(v93 + 8) = *((unsigned __int8 *)v42 + 318);
    *(_DWORD *)(v93 + 12) = 2;
    v94 = &off_1E6A158F0;
  }
  *(_QWORD *)v93 = v94;
  *(_QWORD *)(v83 + 56) = v93;
  v95 = *((unsigned __int8 *)v42 + 318);
  *(_BYTE *)(v83 + 216) = v95;
  v96 = *((_BYTE *)v42 + 237) + *((_BYTE *)v42 + 319) + 1;
  *(_BYTE *)(v83 + 217) = v96;
  v97 = (char *)malloc_type_malloc(2 * (v95 + v96), 0x82ECD37AuLL);
  *(_QWORD *)(v83 + 168) = v97;
  if (!v97)
    goto LABEL_278;
  v98 = *(unsigned __int8 *)(v83 + 217);
  *(_QWORD *)(v83 + 176) = &v97[2 * v98 - 2];
  v99 = (char *)malloc_type_malloc(2 * (*(unsigned __int8 *)(v83 + 216) + v98), 0x82ECD37AuLL);
  *(_QWORD *)(v83 + 184) = v99;
  if (!v99)
    goto LABEL_278;
  v100 = *(unsigned __int8 *)(v83 + 217);
  *(_QWORD *)(v83 + 192) = &v99[2 * v100 - 2];
  v101 = (char *)malloc_type_malloc(*(unsigned __int8 *)(v83 + 216) + v100, 0x82ECD37AuLL);
  *(_QWORD *)(v83 + 200) = v101;
  if (!v101)
    goto LABEL_278;
  *(_QWORD *)(v83 + 208) = &v101[*(unsigned __int8 *)(v83 + 217) - 1];
  if (*((_BYTE *)v42 + 325) != 1)
    goto LABEL_258;
  v102 = *v42;
  v103 = v42[1];
  v46 = 1;
  v104 = malloc_type_calloc(0x80uLL, 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v83 + 72) = v104;
  if (!v104)
    goto LABEL_279;
  sub_1B68BF31C((uint64_t)v104, *v42, v42[1]);
  v105 = malloc_type_calloc(2 * (v103 * v102 / 256), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v83 + 112) = v105;
  if (!v105)
  {
    v46 = 4294967188;
    goto LABEL_279;
  }
  *(_BYTE *)(v83 + 104) = 0;
  *(_WORD *)(v83 + 128) = 1536;
  *(_BYTE *)(v83 + 130) = 7;
LABEL_258:
  *(_BYTE *)(v83 + 82) = *((_BYTE *)v42 + 237);
  *(_QWORD *)(v83 + 136) = 0;
  *(_DWORD *)(v83 + 132) = 0;
  v106 = *((unsigned __int8 *)v42 + 235);
  *(_BYTE *)(v83 + 144) = v106;
  if (!v106)
  {
    if (*((_BYTE *)v42 + 236))
      LOBYTE(v106) = 2;
    else
      LOBYTE(v106) = 1;
    *(_BYTE *)(v83 + 144) = v106;
  }
  *(_BYTE *)(v83 + 145) = 1 << (v106 - 1);
  *(_BYTE *)(v83 + 146) = 0;
  v107 = *((float *)v42 + 77);
  v108 = *((float *)v42 + 15);
  *(_DWORD *)(v83 + 92) = *((_DWORD *)v42 + 76);
  *(_DWORD *)(v83 + 100) = *((_DWORD *)v42 + 78);
  *(_DWORD *)(v83 + 88) = *((_DWORD *)v42 + 75);
  *(_DWORD *)(v83 + 96) = *((_DWORD *)v42 + 77);
  if ((*((_DWORD *)v42 + 75) | 0x800000) == 0x800000 && v107 != -1.0)
  {
    v109 = (float)(v107 * v108);
    *(_DWORD *)(v83 + 88) = v109;
    if (*((_BYTE *)v42 + 398))
      *(_DWORD *)(v83 + 88) = 2 * v109;
  }
  v110 = operator new();
  v111 = v110;
  v112 = v55;
  *(_QWORD *)(v110 + 40) = *(_QWORD *)(v83 + 224);
  *(_BYTE *)(v110 + 9) = 0;
  if (*((_BYTE *)v42 + 320))
    v112 = *((unsigned __int8 *)v42 + 320);
  *(_BYTE *)(v110 + 8) = v112;
  *(_QWORD *)(v110 + 24) = 0;
  *(_DWORD *)(v110 + 32) = 0;
  *(_QWORD *)v110 = malloc_type_calloc(56 * v112, 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v111 + 48) = malloc_type_calloc(16 * *(unsigned __int8 *)(v111 + 8), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v111 + 56) = malloc_type_calloc(16 * *(unsigned __int8 *)(v111 + 8), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v111 + 64) = malloc_type_calloc((unint64_t)*(unsigned __int8 *)(v111 + 8) << 6, 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v83 + 232) = v111;
  *(_QWORD *)(v83 + 240) = v81;
  *(_DWORD *)(v83 + 248) = -1;
  *((_QWORD *)v42 + 646) = v83;
  *((_DWORD *)v42 + 1311) = *((_DWORD *)v42 + 11);
  *((_QWORD *)v42 + 648) = 0;
  if (*((char *)v42 + 392) < 1)
    goto LABEL_364;
  v113 = malloc_type_calloc(0x240uLL, 1uLL, 0x4AE20AB7uLL);
  v114 = (uint64_t)v113;
  if (!v113)
  {
    v46 = 4294967188;
LABEL_287:
    CFLog();
LABEL_288:
    v120 = *((_QWORD *)v42 + 647);
    if (v120)
    {
      if (*(_QWORD *)(v120 + 208120))
      {
        sub_1B68B0720((CFTypeRef **)(v120 + 208120));
        v120 = *((_QWORD *)v42 + 647);
      }
      sub_1B68E1558(v120, 1);
      *((_QWORD *)v42 + 647) = 0;
    }
    goto LABEL_292;
  }
  v113[124] = a1;
  *((_BYTE *)v113 + 533) = v42[208] > 0;
  *((_BYTE *)v113 + 532) = *((char *)v42 + 392) > 0;
  *((_BYTE *)v113 + 534) = *((_BYTE *)v42 + 325) == 1;
  *((_QWORD *)v113 + 67) = 0;
  *((_BYTE *)v113 + 500) = *((_BYTE *)v42 + 393) != 0;
  *((_BYTE *)v113 + 532) = *((char *)v42 + 392) > 0;
  v115 = *((unsigned __int8 *)v42 + 576);
  v113[10] = 0;
  *((_OWORD *)v113 + 3) = 0u;
  *((_OWORD *)v113 + 4) = 0u;
  if (!v115)
  {
    *((_QWORD *)v113 + 4) = 0;
    goto LABEL_298;
  }
  v113[8] = 1;
  v113[9] = a1 + 2;
  v116 = malloc_type_calloc(8 * (a1 + 2), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 56) = v116;
  if (!v116)
    goto LABEL_347;
  v117 = malloc_type_calloc(4 * *(unsigned int *)(v114 + 36), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 64) = v117;
  if (!v117)
    goto LABEL_347;
  v118 = malloc_type_calloc(8 * *(unsigned int *)(v114 + 36), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 48) = v118;
  if (!v118)
    goto LABEL_347;
  v119 = malloc_type_calloc(4 * *(unsigned int *)(v114 + 36), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 72) = v119;
  if (!v119)
    goto LABEL_347;
  a1 = *(_DWORD *)(v114 + 496);
LABEL_298:
  *(_DWORD *)(v114 + 192) = a1;
  *(_QWORD *)(v114 + 100) = 0x424C000000000000;
  *(int32x2_t *)(v114 + 116) = vdup_n_s32(0x42C60000u);
  *(_DWORD *)(v114 + 124) = 1120272384;
  *(int64x2_t *)(v114 + 152) = vdupq_n_s64(0x40C0000000000000uLL);
  *(_QWORD *)(v114 + 88) = 0xFFFFFFFFLL;
  *(_QWORD *)(v114 + 144) = -1;
  *(int64x2_t *)(v114 + 128) = vdupq_n_s64(0x4058C00000000000uLL);
  *(_DWORD *)(v114 + 108) = 0;
  *(_DWORD *)(v114 + 112) = 0;
  *(_QWORD *)(v114 + 168) = 0x6300000000;
  *(_DWORD *)(v114 + 176) = -1;
  *(_QWORD *)(v114 + 184) = 0;
  v122 = malloc_type_calloc(4 * a1, 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 200) = v122;
  if (!v122)
    goto LABEL_328;
  v123 = malloc_type_calloc(4 * *(unsigned int *)(v114 + 192), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 208) = v123;
  if (!v123)
    goto LABEL_328;
  v124 = malloc_type_calloc(4 * *(unsigned int *)(v114 + 192), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 216) = v124;
  if (!v124)
    goto LABEL_328;
  v125 = malloc_type_calloc(8 * *(unsigned int *)(v114 + 192), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 472) = v125;
  if (!v125)
    goto LABEL_328;
  v126 = malloc_type_calloc(4 * (*(_DWORD *)(v114 + 192) + 4), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 232) = v126;
  if (!v126)
    goto LABEL_328;
  v127 = malloc_type_calloc(4 * (*(_DWORD *)(v114 + 192) + 4), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 224) = v127;
  if (!v127)
    goto LABEL_328;
  v128 = malloc_type_calloc(4 * (*(_DWORD *)(v114 + 192) + 4), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 240) = v128;
  if (!v128)
    goto LABEL_328;
  if (*(_DWORD *)(v114 + 192) == -4)
  {
    v129 = 0x3FFFFFFF0;
  }
  else
  {
    v130 = 0;
    do
    {
      *(_DWORD *)(*(_QWORD *)(v114 + 240) + 4 * v130++) = 1120272384;
      v131 = *(unsigned int *)(v114 + 192);
    }
    while (v130 < (v131 + 4));
    v129 = 4 * v131;
  }
  *(_QWORD *)(v114 + 456) = 0;
  *(_QWORD *)(v114 + 464) = 0;
  v132 = malloc_type_calloc(v129, 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 248) = v132;
  if (!v132)
    goto LABEL_328;
  v133 = malloc_type_malloc(*(unsigned int *)(v114 + 192), 0x82ECD37AuLL);
  *(_QWORD *)(v114 + 264) = v133;
  if (!v133)
    goto LABEL_328;
  v134 = malloc_type_malloc(*(unsigned int *)(v114 + 192), 0x82ECD37AuLL);
  *(_QWORD *)(v114 + 272) = v134;
  if (!v134)
    goto LABEL_328;
  v135 = malloc_type_calloc(*(unsigned int *)(v114 + 192), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 368) = v135;
  if (!v135)
    goto LABEL_328;
  v136 = malloc_type_calloc(*(unsigned int *)(v114 + 192), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 360) = v136;
  if (!v136)
    goto LABEL_328;
  v137 = malloc_type_calloc(2 * *(unsigned int *)(v114 + 192), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 376) = v137;
  if (!v137)
    goto LABEL_328;
  *(_QWORD *)(v114 + 400) = 0xFFFFFFFFLL;
  *(_BYTE *)(v114 + 448) = 0;
  v138 = malloc_type_calloc(*(unsigned int *)(v114 + 192), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 440) = v138;
  if (!v138)
    goto LABEL_328;
  v139 = malloc_type_calloc(8 * *(unsigned int *)(v114 + 192), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 408) = v139;
  if (!v139)
    goto LABEL_328;
  v140 = malloc_type_calloc(*(unsigned int *)(v114 + 192), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 416) = v140;
  if (!v140)
    goto LABEL_328;
  if (*(_DWORD *)(v114 + 192))
  {
    v141 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v114 + 440) + v141) = 9;
      *(_QWORD *)(*(_QWORD *)(v114 + 408) + 8 * v141) = 0x408F380000000000;
      *(_BYTE *)(*(_QWORD *)(v114 + 416) + v141++) = 0;
    }
    while (v141 < *(unsigned int *)(v114 + 192));
    v140 = *(_BYTE **)(v114 + 416);
  }
  *v140 = 1;
  v142 = malloc_type_calloc(*(unsigned int *)(v114 + 192), 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)(v114 + 480) = v142;
  if (!v142)
    goto LABEL_328;
  *(_BYTE *)(v114 + 488) = *((_BYTE *)v42 + 602);
  *(_BYTE *)(v114 + 489) = *((_BYTE *)v42 + 603);
  if (*((_BYTE *)v42 + 316) != 1)
  {
    *(_DWORD *)(v114 + 196) = 0;
    *(_DWORD *)(v114 + 348) = 0;
    *(_DWORD *)(v114 + 452) = 0;
    *(_OWORD *)(v114 + 280) = 0u;
    *(_OWORD *)(v114 + 296) = 0u;
    *(_OWORD *)(v114 + 312) = 0u;
    *(_OWORD *)(v114 + 328) = 0u;
    goto LABEL_330;
  }
  v143 = malloc_type_malloc(2 * *(unsigned int *)(v114 + 192), 0x82ECD37AuLL);
  *(_QWORD *)(v114 + 384) = v143;
  if (!v143)
  {
LABEL_328:
    *(_DWORD *)(v114 + 196) = 0;
    *(_DWORD *)(v114 + 348) = 0;
    *(_DWORD *)(v114 + 452) = 0;
    *(_OWORD *)(v114 + 280) = 0u;
    *(_OWORD *)(v114 + 296) = 0u;
    *(_OWORD *)(v114 + 312) = 0u;
    *(_OWORD *)(v114 + 328) = 0u;
    goto LABEL_329;
  }
  v144 = malloc_type_malloc(2 * *(unsigned int *)(v114 + 192), 0x82ECD37AuLL);
  *(_QWORD *)(v114 + 392) = v144;
  *(_DWORD *)(v114 + 196) = 0;
  *(_DWORD *)(v114 + 348) = 0;
  *(_DWORD *)(v114 + 452) = 0;
  *(_OWORD *)(v114 + 280) = 0u;
  *(_OWORD *)(v114 + 296) = 0u;
  *(_OWORD *)(v114 + 312) = 0u;
  *(_OWORD *)(v114 + 328) = 0u;
  if (!v144)
LABEL_329:
    sub_1B68F7914(v114 + 80);
LABEL_330:
  *(_QWORD *)v114 = 0;
  *(_DWORD *)(v114 + 528) = -1;
  *(_DWORD *)(v114 + 501) = 0;
  v145 = *((double *)v42 + 23);
  if (v145 <= 0.0)
    goto LABEL_349;
  v146 = *((_DWORD *)v42 + 48);
  v147 = *((unsigned __int8 *)v42 + 210);
  v148 = *(_DWORD *)(v114 + 496);
  *(_BYTE *)(v114 + 502) = *((_DWORD *)v42 + 51);
  v149 = v146;
  if (!*((_DWORD *)v42 + 48))
    v149 = *((_DWORD *)v42 + 13);
  v150 = *((float *)v42 + 15);
  v151 = *((_DWORD *)v42 + 103);
  v152 = *((unsigned __int8 *)v42 + 115);
  v153 = malloc_type_calloc(0xC0uLL, 1uLL, 0x4AE20AB7uLL);
  *(_QWORD *)v114 = v153;
  if (!v153)
  {
LABEL_347:
    v46 = 4294967188;
    goto LABEL_348;
  }
  sub_1B68CA6CC((uint64_t)v153, v149, (int)(v145 * (double)v146 + 0.5), v147 == 1, v148, 0, v151, v152, v150);
  v46 = v154;
  if ((_DWORD)v154)
  {
LABEL_348:
    sub_1B68F8454(v114);
    goto LABEL_362;
  }
  v155 = *(_DWORD **)v114;
  v156 = *(_QWORD *)(v42 + 98);
  v157 = 0.6;
  v158 = 1.0;
  if ((_DWORD)v156)
    v158 = 0.6;
  if (!HIDWORD(v156))
    v157 = 0.0;
  v159 = v155[5];
  v160 = (int)(v158 * (double)v159 + 0.5);
  v155[9] = v160;
  v155[10] = v159 - v160;
  v155[11] = (int)(v157 * (double)v159);
  v161 = *(unsigned __int8 *)(v114 + 533);
  *(_BYTE *)(v114 + 501) = v161;
  if (!v161)
  {
LABEL_349:
    *(_OWORD *)(v114 + 512) = 0u;
    v168 = (int *)(v114 + 548);
    *(_QWORD *)(v114 + 544) = 0x200000001;
    v169 = (int *)(v114 + 552);
    *(_DWORD *)(v114 + 552) = 1;
    goto LABEL_350;
  }
  v162 = *((unsigned __int8 *)v42 + 115);
  if (*((_BYTE *)v42 + 115))
  {
    v163 = 0;
    do
    {
      if (v163 <= 7)
      {
        v164 = &v42[2 * v163];
        v165 = *((_DWORD *)v164 + 38);
        v166 = *(_QWORD *)v114 + 4 * v163;
        *(_DWORD *)(v166 + 104) = *((_DWORD *)v164 + 30);
        *(_DWORD *)(v166 + 136) = (90000 * v165 + 500) / 0x3E8u;
      }
      ++v163;
    }
    while (v162 != v163);
    v167 = *(unsigned __int8 *)(v114 + 501);
    *(_OWORD *)(v114 + 512) = 0u;
    v168 = (int *)(v114 + 548);
    *(_QWORD *)(v114 + 544) = 0x200000001;
    v169 = (int *)(v114 + 552);
    *(_DWORD *)(v114 + 552) = 1;
    if (!v167)
    {
LABEL_350:
      v170 = 2;
      goto LABEL_351;
    }
  }
  else
  {
    *(_OWORD *)(v114 + 512) = 0u;
    v168 = (int *)(v114 + 548);
    *(_QWORD *)(v114 + 544) = 0x200000001;
    v169 = (int *)(v114 + 552);
    *(_DWORD *)(v114 + 552) = 1;
  }
  if (*((_DWORD *)v42 + 48) >= (3 * *((_DWORD *)v42 + 13)))
    goto LABEL_350;
  v170 = 4;
  *v168 = 4;
LABEL_351:
  v171 = *((char *)v42 + 392);
  if (v170 > v171)
  {
    *v168 = v171;
    v170 = v171;
  }
  if (!*((_BYTE *)v42 + 393) || (v170 = *((unsigned __int8 *)v42 + 392), v170 == 1))
  {
    *v169 = v170;
    *v168 = 0;
  }
  *(_DWORD *)(v114 + 12) = *(_DWORD *)(v114 + 496);
  *(_WORD *)(v114 + 16) = v42[208];
  *(_BYTE *)(v114 + 18) = *((_BYTE *)v42 + 228);
  *(_BYTE *)(v114 + 19) = *((_BYTE *)v42 + 116);
  *(_QWORD *)(v114 + 24) = 0;
  v172 = *((unsigned __int8 *)v42 + 229);
  if (v172 != *((unsigned __int8 *)v42 + 228)
    || *((unsigned __int8 *)v42 + 230) != v172
    || *((unsigned __int8 *)v42 + 231) != v172)
  {
    v46 = 4294967246;
LABEL_362:
    sub_1B68F8454(v114);
    free((void *)v114);
    goto LABEL_287;
  }
  if (*((_QWORD *)v42 + 48))
  {
    v46 = 0xFFFFFFFFLL;
    goto LABEL_362;
  }
  *(_BYTE *)(v114 + 556) = *((_BYTE *)v42 + 235);
  *(_BYTE *)(v114 + 558) = *((_BYTE *)v42 + 236);
  *(_BYTE *)(v114 + 557) = *((_BYTE *)v42 + 324);
  *(_DWORD *)(v114 + 560) = *((_DWORD *)v42 + 76);
  *(_DWORD *)(v114 + 564) = *((_DWORD *)v42 + 75);
  *(_BYTE *)(v114 + 569) = *((_BYTE *)v42 + 631);
  *(_BYTE *)(v114 + 568) = *((_BYTE *)v42 + 632);
  *((_QWORD *)v42 + 648) = v114;
  *(_QWORD *)(*((_QWORD *)v42 + 647) + 205968) = *(_QWORD *)v114;
LABEL_364:
  if (!*v49 && !v49[1])
  {
    *(_QWORD *)(*(_QWORD *)v401 + 208120) = 0;
    goto LABEL_649;
  }
  v390 = *((_QWORD *)v42 + 647);
  v173 = *(_DWORD *)(v390 + 57096);
  v403 = 60;
  v174 = v49[37] == 0;
  v378 = v173;
  v175 = *((_BYTE *)v42 + 241) || *((_BYTE *)v42 + 2698) || *((_BYTE *)v42 + 243) || *((_QWORD *)v42 + 60) != 0;
  v383 = v175;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  sub_1B689B4D4(Mutable, (const void *)*MEMORY[0x1E0CA90E0], *v42);
  sub_1B689B4D4(Mutable, (const void *)*MEMORY[0x1E0CA8FD8], v42[2]);
  if (v49[37])
    v176 = 875704422;
  else
    v176 = 875704438;
  sub_1B689B4D4(Mutable, (const void *)*MEMORY[0x1E0CA9040], v176);
  v177 = (CFTypeRef *)malloc_type_calloc(0xF38uLL, 1uLL, 0x4AE20AB7uLL);
  v404 = v177;
  if (v177)
  {
    for (i = 0; i != 17; ++i)
    {
      v179 = 0;
      v180 = 1;
      do
      {
        v181 = v180;
        *(&v177[2 * i + 373] + v179) = 0;
        v177 = v404;
        *((_DWORD *)&v404[i + 407] + v179) = 0;
        v179 = 1;
        v180 = 0;
      }
      while ((v181 & 1) != 0);
    }
    if (*((_DWORD *)v42 + 1205))
    {
      v374 = v49;
      v182 = (const void **)MEMORY[0x1E0C9AE50];
      if (v49[24]
        && (v183 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (theDict = v183) != 0))
      {
        v184 = (const void *)*((_QWORD *)v42 + 617);
        if (v184)
        {
          CFDictionarySetValue(v183, (const void *)*MEMORY[0x1E0CEDD18], v184);
          v183 = theDict;
        }
        CFDictionarySetValue(v183, (const void *)*MEMORY[0x1E0CED1A0], *v182);
      }
      else
      {
        theDict = 0;
      }
      v391 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      value = (void *)*v182;
      CFDictionaryAddValue(v391, (const void *)*MEMORY[0x1E0CED2B0], *v182);
      v186 = VTCompressionSessionCreateWithOptions();
      if (v186)
      {
        CFLog();
        goto LABEL_626;
      }
      v189 = *((_DWORD *)v42 + 1205);
      *((_DWORD *)v177 + 885) = v189;
      *((_BYTE *)v177 + 3392) = *((_BYTE *)v42 + 677) != 0;
      *((_BYTE *)v177 + 3544) = v189 > 6;
      if (v189 < 7)
      {
        qword_1EF137D80 = 0x1000000020;
      }
      else
      {
        v190 = 0;
        v191 = 0;
        v187.i32[0] = 10;
        v188.i32[0] = v189;
        qword_1EF137D80 = (uint64_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vcgt_u32(v188, v187), 0), (int8x8_t)0x800000008, (int8x8_t)0x800000010);
        v192 = *(_DWORD *)(v390 + 58436);
        v193 = v192 + 1;
        v194 = *(_DWORD *)(v390 + 58440);
        v195 = v194 + 1;
        v196 = (v192 + 1) << 16;
        v197 = 8;
        do
        {
          v198 = v191 - (v185 & 0xFFFFFFFC);
          if (v198 < 0)
            v199 = v198 + 4;
          else
            v199 = v198;
          if (v198 < 0)
            v200 = (int)v191 / 4 + (~(v197 - 8 * ((int)v191 / 4)) | 1);
          else
            v200 = v190 + 9 * ((int)v191 / 4);
          if (v196 < 1)
          {
            v201 = 0;
            v185 = 0;
          }
          else
          {
            v201 = v199 + 4 * (v200 / (__int16)v193);
            v185 = v200 % (__int16)v193;
          }
          if (2 * (v192 + 1) * (v194 + 1) == (_DWORD)v191)
            goto LABEL_425;
          ++v191;
          v197 += 2;
          v190 -= 2;
        }
        while (v194 != v201 || v192 != v185);
        v177[444] = (CFTypeRef)operator new[]();
        v177[445] = (CFTypeRef)operator new[]();
        if (!v177[444])
        {
LABEL_425:
          CFLog();
          goto LABEL_426;
        }
        v202 = 0;
        v203 = 0;
        v204 = v196 >> 16;
        *((_DWORD *)v177 + 887) = v191;
        do
        {
          if (v196 < 1)
          {
            LOWORD(v206) = 0;
            LOWORD(v207) = 0;
          }
          else
          {
            v205 = (int)((v202 & 0xFFFF0000) - ((v203 & 3) << 17)) >> 16;
            v206 = v203 & 3 | (4 * (v205 / v204));
            v207 = v205 - v205 / v204 * v193;
          }
          v209 = v195 > (__int16)v206 && ((v206 | v207) & 0x8000u) == 0;
          if (!v209 || v193 <= (__int16)v207)
          {
            LOWORD(v206) = v195;
            LOWORD(v207) = v193;
          }
          *((_WORD *)v177[444] + v203) = v206;
          *((_WORD *)v177[445] + v203++) = v207;
          v202 += 0x4000;
          --v191;
        }
        while (v191);
      }
LABEL_426:
      sub_1B68B0938(*v177, CFSTR("OffsetScaleMode"), v174);
      *((_DWORD *)v177 + 745) = *((char *)v42 + 238) + 1;
      v384 = *v42;
      v392 = v42[2];
      v210 = v374[37];
      session = *v177;
      v211 = sub_1B68E3D4C();
      if (v211 == 254)
      {
        if (v210)
          v212 = 875704422;
        else
          v212 = 875704438;
        v213 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        sub_1B68B0998(v213, CFSTR("DPBPixelFormat"), v212);
        sub_1B68B0998(v213, (const void *)*MEMORY[0x1E0CED2C0], *((_DWORD *)v177 + 745));
        if (*((_BYTE *)v177 + 3392))
          v214 = value;
        else
          v214 = (const void *)*MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(v213, (const void *)*MEMORY[0x1E0CED2B8], v214);
        VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x1E0CECF70], v213);
        CFRelease(v213);
        goto LABEL_557;
      }
      v215 = v384 + 15;
      v177[446] = 0;
      v216 = v392 + 15;
      v217 = (v392 + 15) & 0xFFFFFFF0;
      *((_DWORD *)v177 + 894) = 0;
      *((_DWORD *)v177 + 895) = (v384 + 15) & 0xFFFFFFF0;
      v349 = (v384 + 15) & 0xFFFFFFF0;
      *((_DWORD *)v177 + 896) = v349;
      *((_DWORD *)v177 + 897) = v217;
      v218 = v217 >> 1;
      *((_DWORD *)v177 + 898) = v217 >> 1;
      *(_OWORD *)((char *)v177 + 3596) = 0u;
      switch((char)v211)
      {
        case 6:
          *((_DWORD *)v177 + 892) = ((v392 + 31) & 0xFFFFFFE0) * v349;
          *(CFTypeRef *)((char *)v177 + 3612) = (CFTypeRef)0x1000000020;
          v279 = ((v392 + 63) & 0xFFFFFFC0) * ((v384 + 63) & 0xFFFFFFC0);
          v415 = v279;
          v416 = v279 >> 1;
          v414 = 0;
          properties = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (properties)
          {
            sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBC1E0], v384);
            sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBC008], v392);
            sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBBF10], 1024);
            if (v210)
              v280 = 875704422;
            else
              v280 = 875704438;
            sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBC070], v280);
            CFDictionarySetValue(properties, (const void *)*MEMORY[0x1E0CBC018], value);
            valuePtr.__sig = (v279 >> 1) + v279;
            v281 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
            CFDictionarySetValue(properties, (const void *)*MEMORY[0x1E0CBBEE0], v281);
            CFRelease(v281);
            goto LABEL_533;
          }
          goto LABEL_557;
        case 7:
        case 8:
          v219 = 0;
          v220 = v217 * v349;
          v221 = (v217 * v349) >> 1;
          *((_DWORD *)v177 + 892) = v217 * v349;
          v222 = (uint64_t *)((char *)v177 + 3612);
          v223 = 0x800000010;
          goto LABEL_444;
        case 9:
        case 10:
          v219 = 0;
          v224 = v215 | 0xF;
          if (v215 < 0)
            v224 = (v215 | 0xF) + 15;
          v225 = (v224 >> 4) * ((v216 | 0xF) / 16);
          *(CFTypeRef *)((char *)v177 + 3612) = (CFTypeRef)0x800000010;
          v220 = ((v225 << 8) + 511) & 0xFFFFFE00;
          v221 = v225 << 7;
          *((_DWORD *)v177 + 892) = v220;
          goto LABEL_445;
        case 11:
        case 12:
          v220 = (8 * v349 * ((v217 >> 3) | 1) + 511) & 0xFFFFFE00;
          v221 = ((((v215 | 0xF) + (v215 < 0 ? 0xF : 0)) >> 4)
                * (((v216 | 0xF) + (v216 < 0 ? 0xF : 0)) >> 4)) << 7;
          v226 = (v217 >> 3) + 15;
          if (v217 >> 3 >= -8)
            v226 = (v217 >> 3) + 8;
          v227 = v226 >> 3;
          v228 = 2 * v349 + 254;
          if (2 * v349 >= -127)
            v228 = 2 * v349 + 127;
          v229 = v228 & 0xFFFFFF80;
          *((_DWORD *)v177 + 892) = v220;
          *((_DWORD *)v177 + 893) = 3;
          v219 = (v227 * v229 + 511) & 0xFFFFFE00;
          *((_DWORD *)v177 + 894) = v229;
          *((_DWORD *)v177 + 897) = v217 | 8;
          *((_DWORD *)v177 + 901) = 4;
          v222 = (uint64_t *)((char *)v177 + 3612);
          v223 = 0x800000008;
LABEL_444:
          *v222 = v223;
          goto LABEL_445;
        default:
          v273 = v217 + 35;
          v274 = (v349 + 31) & 0xFFFFFFE0;
          v220 = 32 * v274 * ((v217 + 35) >> 5);
          v275 = v218 + 19;
          v221 = ((v218 + 19) >> 4) * ((16 * v349 + 480) & 0xFFFFFE00);
          v276 = v349 + 62;
          if (v349 >= -31)
            v276 = v349 + 31;
          v277 = __clz((v276 >> 5) - 1);
          v278 = v217 + 66;
          if (v273 >= 0)
            v278 = v273;
          v219 = ((32 << -(char)(v277 + __clz((v278 >> 5) - 1))) + 127) & 0xFFFFFF80;
          *((_DWORD *)v177 + 895) = v274;
          *((_DWORD *)v177 + 897) = v273 & 0xFFFFFFE0;
          *((_DWORD *)v177 + 898) = v275 & 0xFFFFFFF0;
LABEL_445:
          v415 = v220;
          v416 = v221;
          LODWORD(v414) = v219;
          HIDWORD(v414) = v219;
          valuePtr.__sig = 0;
          *(_QWORD *)valuePtr.__opaque = 0;
          *(_QWORD *)policy_info = 0;
          *(_QWORD *)thread_info_out = 0;
          v406 = v384;
          v405 = v392;
          if (v211 - 7 < 4)
          {
            v363 = 0;
            if (v210)
              v230 = 875704422;
            else
              v230 = 875704438;
            *(_QWORD *)thread_info_outCnt = 0x400000004;
            v417 = 0;
            v231 = 1;
            v360 = 4;
            v232 = 4;
LABEL_455:
            v233 = 4;
            goto LABEL_456;
          }
          if (v211 - 11 < 2)
          {
            v363 = 0;
            v417 = 1;
            *(_QWORD *)thread_info_outCnt = 0x400000001;
            if (v210)
              v230 = 1563977264;
            else
              v230 = 1563981360;
            v360 = 4;
            policy_info[0] = 4;
            v232 = 1;
            v231 = 1;
            goto LABEL_455;
          }
          v231 = 0;
          v233 = 0;
          v417 = 0x300000003;
          *(_QWORD *)thread_info_outCnt = 0x500000005;
          if (v210)
            v230 = 641230384;
          else
            v230 = 641234480;
          *(_QWORD *)policy_info = 0x400000004;
          v363 = 1;
          v360 = 5;
          v232 = 5;
LABEL_456:
          properties = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (properties)
          {
            sub_1B68B09F8(&v406, v384, &v405, v232, v363);
            sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBC1E0], v384);
            sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBC008], v392);
            v340 = (const void *)*MEMORY[0x1E0CBBF08];
            v375 = v406;
            sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBBF08], v406);
            sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBBF00], 1);
            sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBBF10], 0);
            sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBC070], v230);
            LODWORD(v379) = v405;
            if (v231)
              v234 = value;
            else
              v234 = (const void *)*MEMORY[0x1E0C9AE40];
            CFDictionarySetValue(properties, (const void *)*MEMORY[0x1E0CBBEF8], v234);
            sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBBEF0], v233);
            v235 = 0;
            v236 = 0;
            v396 = 0;
            v359 = 0;
            theArray = 0;
            v356 = (const void *)*MEMORY[0x1E0CBC088];
            v358 = (const void *)*MEMORY[0x1E0CBC0E8];
            v237 = (v379 * v375 + 511) & 0xFFFFFE00;
            v357 = (const void *)*MEMORY[0x1E0CBC0E0];
            v355 = (const void *)*MEMORY[0x1E0CBC180];
            v354 = (const void *)*MEMORY[0x1E0CBC148];
            v353 = (const void *)*MEMORY[0x1E0CBC0D0];
            v347 = (const void *)*MEMORY[0x1E0CBC0B0];
            v346 = (const void *)*MEMORY[0x1E0CBC0A8];
            v362 = (const void *)*MEMORY[0x1E0CBC098];
            v361 = (const void *)*MEMORY[0x1E0CBC090];
            v345 = (const void *)*MEMORY[0x1E0CBC110];
            v344 = (const void *)*MEMORY[0x1E0CBC108];
            v352 = (const void *)*MEMORY[0x1E0CBC170];
            v350 = (const void *)*MEMORY[0x1E0CBC150];
            v351 = (const void *)*MEMORY[0x1E0CBC0D8];
            v343 = (const void *)*MEMORY[0x1E0CBC0A0];
            v342 = (const void *)*MEMORY[0x1E0CBC128];
            v341 = (const void *)*MEMORY[0x1E0CBC130];
            key = (CFStringRef)*MEMORY[0x1E0CBC178];
            v368 = (const void *)*MEMORY[0x1E0CBC140];
            v366 = (const void *)*MEMORY[0x1E0CBC168];
            v367 = (const void *)*MEMORY[0x1E0CBC160];
            v364 = (const void *)*MEMORY[0x1E0CBC0F8];
            v365 = (const void *)*MEMORY[0x1E0CBBED8];
            v238 = 1;
            while (1)
            {
              v386 = v238;
              if ((v235 & 1) != 0)
              {
                v392 >>= 1;
                v405 = v392;
                sub_1B68B09F8(&v406, v384, &v405, v360, v363 & 1);
                v375 = v406;
                LODWORD(v379) = v405;
                v237 = v405 * v406;
              }
              v239 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v240 = v239;
              *(&valuePtr.__sig + v236) = (uint64_t)v239;
              if (!v239)
                break;
              v241 = thread_info_outCnt[v236 - 2];
              buffer = v241;
              if (v241)
              {
                if (v241 == 3)
                {
                  if ((v386 & 1) != 0)
                    v252 = -32;
                  else
                    v252 = -16;
                  if ((v386 & 1) != 0)
                    v253 = 32;
                  else
                    v253 = 16;
                  if ((v386 & 1) != 0)
                    v254 = 5;
                  else
                    v254 = 4;
                  if ((v386 & 1) != 0)
                    v255 = 1024;
                  else
                    v255 = 256;
                  if ((v386 & 1) != 0)
                    v256 = 32;
                  else
                    v256 = 8;
                  theArrayb = policy_info[v236];
                  sub_1B68B0998(v239, v356, v256);
                  sub_1B68B0998(v240, v358, v253);
                  sub_1B68B0998(v240, v357, v253);
                  v257 = (v253 - 1 + v384) & v252;
                  sub_1B68B0998(v240, v355, v257 >> v254);
                  v258 = (v379 + v253 - 1 + theArrayb) & v252;
                  sub_1B68B0998(v240, v354, v258 >> v254);
                  sub_1B68B0998(v240, v353, v396);
                  sub_1B68B0998(v240, v347, v255);
                  v359 = v257 << v254;
                  sub_1B68B0998(v240, v346, v257 << v254);
                  sub_1B68B0998(v240, v362, v257 << v254);
                  sub_1B68B0998(v240, v361, v255);
                  sub_1B68B0998(v240, v345, v253);
                  sub_1B68B0998(v240, v344, v253);
                  sub_1B68B0998(v240, v352, theArrayb);
                  sub_1B68B0998(v240, v350, thread_info_out[v236]);
                  v259 = ((int)(v258 * v375) + 127) & 0xFFFFFFFFFFFFFF80;
                  v260 = (int)*(&v415 + v236);
                  if (v259 <= v260)
                    v261 = (int)*(&v415 + v236);
                  else
                    v261 = v259;
                  if ((v386 & 1) != 0)
                    v262 = 31;
                  else
                    v262 = 15;
                  v263 = (v262 + v384) >> v254;
                  v264 = (v392 + v262) >> v254;
                  if ((v386 & 1) != 0)
                    v265 = 5;
                  else
                    v265 = 3;
                  v266 = vcvtps_u32_f32(log2f((float)v263));
                  v379 = ((((1 << v266 << vcvtps_u32_f32(log2f((float)v264)) << v265) + 127) & 0x1FFFFFF80)
                        + v375
                        + v261
                        - 1)
                       / v375;
                  v405 = v379;
                  sub_1B68B0998(v240, v351, v396 + v261);
                  if ((int)((v375 * v379 + 127) & 0xFFFFFF80) <= *((_DWORD *)&v414 + v236) + (int)v260)
                    v237 = *((_DWORD *)&v414 + v236) + v260;
                  else
                    v237 = (v375 * v379 + 127) & 0xFFFFFF80;
                  theArray = 1;
                  LOBYTE(v363) = v386;
                }
                else if (v241 == 1)
                {
                  sub_1B68B0998(v239, v358, 16);
                  sub_1B68B0998(v240, v357, 8);
                  if ((v379 & 7) != 0)
                    break;
                  v242 = thread_info_out[v236];
                  v243 = ((v242 + 15) & 0xFFFFFFF0) + v349;
                  v244 = policy_info[v236];
                  sub_1B68B0998(v240, v355, v243 >> 4);
                  v245 = (int)(v379 + ((v244 + 7) & 0xFFFFFFF8) + 63) >> 3;
                  v246 = v245 & 0xFFFFFFF8;
                  sub_1B68B0998(v240, v354, v245 & 0xFFFFFFF8);
                  sub_1B68B0998(v240, v356, 4);
                  v247 = (2 * v243 + 127) & 0xFFFFFF80;
                  sub_1B68B0998(v240, v343, v247);
                  sub_1B68B0998(v240, v342, 1);
                  sub_1B68B0998(v240, v341, 3);
                  sub_1B68B0998(v240, v351, v396);
                  sub_1B68B0998(v240, v352, v244);
                  sub_1B68B0998(v240, v350, v242);
                  v248 = v245 | 7;
                  if (v245 < 0)
                    v248 = (v245 | 7) + 7;
                  v249 = ((v248 >> 3) * v247 + 511) & 0xFFFFFE00;
                  if (v249 <= *((_DWORD *)&v414 + v236))
                    v250 = *((_DWORD *)&v414 + v236);
                  else
                    v250 = v249;
                  sub_1B68B0998(v240, v353, v250 + v396);
                  v251 = 8 * v243 * v246;
                  if (v251 <= (int)*(&v415 + v236))
                    v251 = *(&v415 + v236);
                  v237 = v251 + v250;
                }
              }
              else if (v237 <= (int)*(&v415 + v236))
              {
                v237 = *(&v415 + v236);
              }
              sub_1B68B0998(v240, key, v384);
              sub_1B68B0998(v240, v368, v392);
              sub_1B68B0998(v240, v367, v396);
              if ((theArray & 1) == 0)
              {
                sub_1B68B0998(v240, v362, v375);
                sub_1B68B0998(v240, v361, 1);
              }
              sub_1B68B0998(v240, v366, v237);
              sub_1B68B0998(v240, v365, thread_info_outCnt[v236]);
              sub_1B68B0998(v240, v364, buffer);
              v238 = 0;
              v237 += v396;
              v235 = 1;
              v236 = 1;
              v396 = v237;
              if ((v386 & 1) == 0)
              {
                if ((theArray & 1) != 0)
                  sub_1B68B0998(properties, v340, v359);
                v267 = CFArrayCreate(0, (const void **)&valuePtr, 2, MEMORY[0x1E0C9B378]);
                if (v267)
                {
                  CFDictionarySetValue(properties, (const void *)*MEMORY[0x1E0CBC158], v267);
                  sub_1B68B0998(properties, (const void *)*MEMORY[0x1E0CBBEE0], v237);
                  CFDictionarySetValue(properties, (const void *)*MEMORY[0x1E0CBC018], value);
                  CFRelease(v267);
                  v268 = 1;
                  goto LABEL_514;
                }
                break;
              }
            }
          }
          v268 = 0;
LABEL_514:
          v269 = 0;
          v270 = 1;
          do
          {
            v271 = v270;
            v272 = (const void *)*(&valuePtr.__sig + v269);
            if (v272)
              CFRelease(v272);
            v270 = 0;
            v269 = 1;
          }
          while ((v271 & 1) != 0);
          if ((v268 & 1) != 0)
          {
            if (!properties)
              goto LABEL_557;
LABEL_533:
            theArraya = CFArrayCreateMutable(0, 2 * *((int *)v177 + 745), MEMORY[0x1E0C9B378]);
            if (theArraya)
            {
              if (*((int *)v177 + 745) >= 1)
              {
                v387 = 0;
                keya = (const __CFString *)*MEMORY[0x1E0CBC048];
                do
                {
                  v282 = 0;
                  v283 = 0;
                  v284 = 1;
                  do
                  {
                    v380 = v284;
                    if ((v284 & 1) != 0 || *((_BYTE *)v177 + 3392))
                    {
                      v385 = v283;
                      v285 = IOSurfaceCreate(properties);
                      buffera = v285;
                      v286 = (uint64_t)(&v177[2 * v387] + v385);
                      *(_QWORD *)(v286 + 2984) = v285;
                      if (!v285)
                        goto LABEL_555;
                      v376 = (IOSurfaceRef *)(v286 + 2984);
                      if ((v282 & 1) != 0)
                      {
                        v287 = *((_DWORD *)v177 + 894);
                        v288 = *((_DWORD *)v177 + 893);
                        IOSurfaceLock(v285, 0, 0);
                        *(_QWORD *)&valuePtr.__opaque[32] = buffera;
                        sub_1B68B0B54((size_t *)&valuePtr, 0);
                        v289 = 0;
                        v290 = 1;
                        do
                        {
                          v291 = v290;
                          if (*((_DWORD *)&valuePtr + 14 * v289 + 20) == 1)
                          {
                            v292 = *(_QWORD *)&valuePtr.__opaque[56 * v289 + 48];
                            CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
                            CompressedTileHeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
                            WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
                            HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
                            if (HeightInCompressedTilesOfPlane >= 1)
                            {
                              v296 = 0;
                              v297 = 0;
                              do
                              {
                                if (WidthInCompressedTilesOfPlane >= 1)
                                {
                                  for (j = 0; j != WidthInCompressedTilesOfPlane; ++j)
                                  {
                                    *(_DWORD *)(v292 + (v296 >> v288) * v287
                                                     + 4 * ((j << v288) + (v296 & ~(-1 << v288)))) = v297 & 0xFFFFFFF;
                                    v297 += CompressedTileHeightOfPlane * CompressedTileWidthOfPlane;
                                  }
                                }
                                ++v296;
                              }
                              while (v296 != HeightInCompressedTilesOfPlane);
                            }
                          }
                          v290 = 0;
                          v289 = 1;
                        }
                        while ((v291 & 1) != 0);
                        IOSurfaceUnlock(buffera, 0, 0);
                        v285 = *v376;
                      }
                      IOSurfaceSetValue(v285, keya, CFSTR("dpb"));
                      ID = IOSurfaceGetID(*v376);
                      v283 = v385;
                      *((_DWORD *)&v177[v387 + 407] + v385) = ID;
                    }
                    v300 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v177[v387 + 407] + 4 * v283);
                    CFArrayAppendValue(theArraya, v300);
                    CFRelease(v300);
                    v284 = 0;
                    v282 = 1;
                    v283 = 1;
                  }
                  while ((v380 & 1) != 0);
                  ++v387;
                }
                while (v387 < *((int *)v177 + 745));
              }
              VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x1E0CED250], theArraya);
LABEL_555:
              CFRelease(properties);
              CFRelease(theArraya);
LABEL_557:
              sub_1B68B0938(*v177, (const __CFString *)*MEMORY[0x1E0CED248], 1);
              if ((*(_DWORD *)(v374 + 134) & 0x80000000) == 0 && (*((_DWORD *)v42 + 1238) & 0x80000000) == 0)
              {
                v301 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
                v397 = HIDWORD(*(_QWORD *)(v374 + 134));
                LODWORD(valuePtr.__sig) = *(_QWORD *)(v374 + 134);
                v302 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                CFArrayAppendValue(v301, v302);
                CFRelease(v302);
                LODWORD(valuePtr.__sig) = v397;
                v303 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                CFArrayAppendValue(v301, v303);
                CFRelease(v303);
                VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CED258], v301);
                CFRelease(v301);
              }
              VTSessionSetProperty(*v177, CFSTR("EnableUserQPForFacetime"), value);
              VTSessionSetProperty(*v177, CFSTR("EnableUserRefForFacetime"), value);
              VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CECEC8], value);
              v304 = (const void *)*MEMORY[0x1E0C9AE40];
              VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CECEB0], (CFTypeRef)*MEMORY[0x1E0C9AE40]);
              if (v383)
                v305 = value;
              else
                v305 = v304;
              VTSessionSetProperty(*v177, CFSTR("ForceRefUncompressed"), v305);
              v306 = *((unsigned __int8 *)v42 + 16);
              if (v306 == 100)
              {
                VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CED180], (CFTypeRef)*MEMORY[0x1E0CED930]);
                if (*((_BYTE *)v42 + 400))
                  v307 = value;
                else
                  v307 = v304;
                VTSessionSetProperty(*v177, CFSTR("EnableTransform8x8"), v307);
                v306 = *((unsigned __int8 *)v42 + 16);
              }
              if (v306 == 101)
              {
                VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CED180], (CFTypeRef)*MEMORY[0x1E0CED8D0]);
                if (*((_BYTE *)v42 + 400))
                  v308 = value;
                else
                  v308 = v304;
                VTSessionSetProperty(*v177, CFSTR("EnableTransform8x8"), v308);
              }
              v309 = value;
              if (!*((_BYTE *)v42 + 653))
              {
                if (*((_BYTE *)v42 + 654))
                  v309 = value;
                else
                  v309 = v304;
              }
              VTSessionSetProperty(*v177, CFSTR("EnableWeightedPrediction"), v309);
              sub_1B68B0938(*v177, CFSTR("log2_max_minus4"), *(_DWORD *)(v390 + 57380));
              sub_1B68B0938(*v177, CFSTR("EnableStatsCollect"), 0);
              if (*((_BYTE *)v42 + 677))
                v310 = value;
              else
                v310 = v304;
              VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CED270], v310);
              if (*((_BYTE *)v42 + 616))
                v311 = value;
              else
                v311 = v304;
              VTSessionSetProperty(*v177, CFSTR("UseLongTermReference"), v311);
              if (*(_BYTE *)(v390 + 5424)
                && (v312 = *(_QWORD *)(v390 + 152)) != 0
                && (v313 = *(_DWORD *)(v312 + 216) - 1, v313 <= 3))
              {
                v314 = off_1E6A17C80[v313];
              }
              else
              {
                v314 = CFSTR("FaceTime");
              }
              VTSessionSetProperty(*v177, CFSTR("iChatUsageString"), v314);
              v315 = sub_1B68A3908();
              v316 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
              if (v315 >= 2)
              {
                v317 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v403);
                if (v317)
                {
                  VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CED178], v317);
                  CFRelease(v317);
                }
              }
              v318 = *((_DWORD *)v42 + 108);
              switch(v318)
              {
                case 1:
                  v319 = (CFStringRef *)MEMORY[0x1E0CA8D88];
                  break;
                case 6:
                  v319 = (CFStringRef *)MEMORY[0x1E0CA8DA0];
                  break;
                case 5:
                  v319 = (CFStringRef *)MEMORY[0x1E0CA8D78];
                  break;
                default:
                  goto LABEL_599;
              }
              Copy = CFStringCreateCopy(*v316, *v319);
              if (Copy)
              {
                VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CECF48], Copy);
                CFRelease(Copy);
              }
LABEL_599:
              v321 = *((_DWORD *)v42 + 109);
              if (v321 == 2)
                StringForIntegerCodePoint = CFStringCreateCopy(*v316, (CFStringRef)*MEMORY[0x1E0CA8ED8]);
              else
                StringForIntegerCodePoint = CVTransferFunctionGetStringForIntegerCodePoint(v321);
              v323 = StringForIntegerCodePoint;
              if (StringForIntegerCodePoint)
              {
                VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CED238], StringForIntegerCodePoint);
                CFRelease(v323);
              }
              v324 = *((_DWORD *)v42 + 110);
              switch(v324)
              {
                case 1:
                  v325 = (CFStringRef *)MEMORY[0x1E0CA8F18];
                  break;
                case 7:
                  v325 = (CFStringRef *)MEMORY[0x1E0CA8F30];
                  break;
                case 6:
                  v325 = (CFStringRef *)MEMORY[0x1E0CA8F10];
                  break;
                default:
                  goto LABEL_612;
              }
              v326 = CFStringCreateCopy(*v316, *v325);
              if (v326)
              {
                VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CED290], v326);
                CFRelease(v326);
              }
LABEL_612:
              if (v374[130])
                VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CECFC0], value);
              sub_1B68B0938(*v177, (const __CFString *)*MEMORY[0x1E0CECFD0], (int)*((float *)v42 + 15));
              sub_1B68B0938(*v177, (const __CFString *)*MEMORY[0x1E0CECEF0], *((_DWORD *)v42 + 13));
              VTSessionSetProperty(*v177, (CFStringRef)*MEMORY[0x1E0CED000], (CFTypeRef)*MEMORY[0x1E0CED678]);
              if ((IOSurfaceAcceleratorCreate() || !v177[5])
                && (v186 = VTPixelTransferSessionCreate(0, (VTPixelTransferSessionRef *)v177 + 6)) != 0
                || (v327 = v177[7], *((_BYTE *)v177 + 3462) = 0, *((_DWORD *)v177 + 744) = 0, !v327)
                && *((_BYTE *)v177 + 3392)
                && (v186 = sub_1B68BE0B8((char **)v177 + 7)) != 0)
              {
                CFLog();
              }
              else
              {
                v328 = malloc_type_malloc(0x58uLL, 0x1010040AFB8C972uLL);
                v177[453] = v328;
                *((_DWORD *)v328 + 7) = 7;
                sub_1B68B2E6C((uint64_t)v177[453]);
                *((_DWORD *)v177 + 854) = (v378 + 7) & 0xFFFFFFF8;
                v177[9] = 0;
                v177[10] = 0;
                v177[8] = 0;
                v177[12] = 0;
                v177[13] = 0;
                v329 = dispatch_semaphore_create(1);
                v177[11] = v329;
                if (v329 && (v330 = dispatch_semaphore_create(1), (v177[486] = v330) != 0))
                {
                  v186 = 0;
                }
                else
                {
                  CFLog();
                  v186 = -108;
                }
              }
LABEL_626:
              if (theDict)
                CFRelease(theDict);
              goto LABEL_628;
            }
          }
          else if (!properties)
          {
            goto LABEL_557;
          }
          CFRelease(properties);
          goto LABEL_557;
      }
    }
    CFLog();
  }
  else
  {
    CFLog();
    v177 = 0;
  }
  v391 = 0;
  v186 = -108;
LABEL_628:
  if (Mutable)
    CFRelease(Mutable);
  if (v186 && v177)
    sub_1B68B0720(&v404);
  if (v391)
    CFRelease(v391);
  *(_QWORD *)(*(_QWORD *)v401 + 208120) = v404;
  v331 = *(_QWORD *)(*(_QWORD *)v401 + 208120);
  if (!v331)
    goto LABEL_638;
  if (*(_BYTE *)(v331 + 3544))
  {
    *(_DWORD *)(v331 + 184) = ((v42[2] + 15) & 0xFFFFFFF0) * ((*v42 + 15) >> 4);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 647) + 208120) + 176) = malloc_type_calloc(*(unsigned int *)(*(_QWORD *)(*((_QWORD *)v42 + 647) + 208120)+ 184), 1uLL, 0x4AE20AB7uLL);
    if (!*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 647) + 208120) + 176))
    {
LABEL_638:
      CFLog();
      goto LABEL_237;
    }
  }
  else
  {
    *(_DWORD *)(v331 + 184) = 2 * ((v400 + 7) & 0xFFFFFFF8) * v399;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v401 + 208120) + 176) = malloc_type_calloc(*(unsigned int *)(*(_QWORD *)(*(_QWORD *)v401+ 208120)+ 184), 1uLL, 0x4AE20AB7uLL);
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v401 + 208120) + 176))
      goto LABEL_638;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v401 + 208120) + 3512) = malloc_type_calloc(0xFAuLL, 1uLL, 0x4AE20AB7uLL);
  v332 = *(_QWORD *)(*(_QWORD *)v401 + 208120);
  if (!*(_QWORD *)(v332 + 3512))
    goto LABEL_237;
  *(_DWORD *)(v332 + 3520) = 250;
  if (*(_DWORD *)(*(_QWORD *)v401 + 205904) || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v401 + 136) + 4852) != 2)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v401 + 208120) + 3408) = malloc_type_calloc(2 * ((v400 + 7) & 0xFFFFFFF8) * v399 + 16, 1uLL, 0x4AE20AB7uLL);
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v401 + 208120) + 3408))
      goto LABEL_237;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v401 + 208120) + 3408) = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v401 + 208120) + 192) = malloc_type_malloc(0x5DCuLL, 0x82ECD37AuLL);
  v333 = *(_QWORD *)(*(_QWORD *)v401 + 208120);
  if (!*(_QWORD *)(v333 + 192))
    goto LABEL_237;
  *(_DWORD *)(v333 + 200) = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v401 + 208120) + 208) = malloc_type_malloc(0xBB8uLL, 0x82ECD37AuLL);
  v334 = *(_QWORD *)(*(_QWORD *)v401 + 208120);
  if (!*(_QWORD *)(v334 + 208))
    goto LABEL_237;
  *(_DWORD *)(v334 + 216) = 0;
LABEL_649:
  v335 = 3 * *v42 * v42[2];
  *((_DWORD *)v42 + 2642) = v335;
  *((_DWORD *)v42 + 2646) = 0;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 647) + 136) + 4852) == 2 && !*((_BYTE *)v42 + 2698))
  {
    *((_QWORD *)v42 + 1322) = 0;
  }
  else
  {
    v336 = malloc_type_calloc(v335, 1uLL, 0x4AE20AB7uLL);
    *((_QWORD *)v42 + 1322) = v336;
    if (!v336)
      goto LABEL_237;
  }
  *((_DWORD *)v42 + 2647) = 112;
  v337 = malloc_type_calloc(0x70uLL, 1uLL, 0x4AE20AB7uLL);
  *((_QWORD *)v42 + 1324) = v337;
  *((_DWORD *)v42 + 2650) = 0;
  if (!v337)
  {
LABEL_237:
    v46 = 4294967188;
    goto LABEL_288;
  }
  v338 = *(_QWORD *)(*(_QWORD *)v401 + 208120);
  if (v338)
  {
    *(_BYTE *)(v338 + 32) = v398;
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v42 + 647) + 208120) + 33) = 0;
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 647) + 208120) + 112) = *((_QWORD *)v42 + 1322);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 647) + 208120) + 120) = v42 + 5292;
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 647) + 208120) + 128) = *((_QWORD *)v42 + 1324);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v42 + 647) + 208120) + 136) = v42 + 5300;
  }
  *a3 = v42;
  v339 = *((_QWORD *)v42 + 647);
  v46 = 0;
  if (v339)
    *(_QWORD *)(v339 + 136) = v42;
  return v46;
}

void sub_1B68E8A58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1BCC9814C](v1, 0x1020C40699F9AC8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B68E8A84(uint64_t a1)
{
  pthread_setname_np("com.apple.coremedia.JVTlib");
  while (1)
  {
    MEMORY[0x1BCC9892C](**(unsigned int **)(a1 + 16));
    if (*(_DWORD *)(a1 + 4))
      break;
    *(_DWORD *)(a1 + 264) = sub_1B68E8AF8(*(__int16 **)(a1 + 272), a1, *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 288), *(_BYTE **)(a1 + 296), *(unsigned __int8 *)(a1 + 304), (_DWORD *)(a1 + 308), (_DWORD *)(a1 + 312));
  }
  return 0;
}

uint64_t sub_1B68E8AF8(__int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, int a6, _DWORD *a7, _DWORD *a8)
{
  _DWORD *v8;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  __n128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  BOOL v40;
  int v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  _DWORD *v48;
  unint64_t i;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  float v55;
  float v56;
  float v57;
  _DWORD *v58;
  CMTimeValue v59;
  int v60;
  double v61;
  double v62;
  float v63;
  float v64;
  float *v65;
  double v66;
  double v67;
  float v68;
  double v69;
  float v70;
  FILE *v71;
  int v72;
  int v73;
  FILE *v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  FILE *v77;
  int v78;
  uint64_t v79;
  FILE *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int v85;
  int v86;
  unsigned __int8 v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  float v114;
  float v115;
  unsigned int *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BOOL4 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  size_t v133;
  char *v134;
  int v135;
  _DWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  char v148;
  int v149;
  int32x2_t *v150;
  unint64_t v151;
  double v152;
  unint64_t v153;
  double v154;
  float v155;
  int v156;
  unsigned int v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  float v173;
  float v174;
  uint64_t v175;
  size_t v176;
  char *v177;
  unsigned int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  unsigned int v190;
  char *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  BOOL v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  unsigned int v226;
  _QWORD *v227;
  int *v228;
  int v229;
  int32x2_t *v230;
  int32x2_t v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  pthread_mutex_t *v236;
  pthread_cond_t *v237;
  pthread_mutex_t *v238;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  float *v245;
  float v246;
  float v247;
  int v248;
  uint64_t v249;
  int v250;
  char v251;
  float *v252;
  int v253;
  int v254;
  int v255;
  int v256;
  char v257;
  int v258;
  int v259;
  unsigned __int8 *v260;
  int v261;
  uint64_t v262;
  int v263;
  unsigned __int8 *v264;
  int v265;
  int v266;
  int v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  int v271;
  int v272;
  unsigned int v273;
  unsigned int v274;
  BOOL v275;
  int v276;
  BOOL v277;
  int v278;
  int v279;
  __CVBuffer *v280;
  uint64_t v281;
  _QWORD *v282;
  char *v283;
  CMTimeValue value;
  uint64_t v285;
  uint64_t v286;
  CMTimeValue v287;
  int v288;
  char *v289;
  char *v290;
  char *v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  int v295;
  int v296;
  uint64_t v297;
  int v298;
  uint64_t *v299;
  uint64_t v300;
  int8x8_t *v301;
  uint64_t v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  unsigned int v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  int v313;
  unsigned int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  int v329;
  int v330;
  int v331;
  char *v332;
  char *v333;
  char *v334;
  char *v335;
  unsigned int v336;
  uint64_t v337;
  int v338;
  int v339;
  uint64_t v340;
  int v341;
  int v342;
  int v343;
  int v344;
  uint64_t v345;
  int8x8_t *v346;
  int v347;
  uint64_t v348;
  unsigned int v349;
  int v350;
  BOOL v351;
  int v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  int v356;
  char *v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  __int32 v362;
  __int32 v363;
  __CVPixelBufferPool *v364;
  CVReturn PixelBuffer;
  unsigned int v366;
  unsigned int v367;
  int v368;
  char *v369;
  char *v370;
  unsigned int v371;
  char *v372;
  char *v373;
  int v374;
  int v375;
  char *v376;
  uint64_t v377;
  char *v378;
  unsigned int v379;
  char *v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  unsigned int v384;
  int v385;
  int8x8_t *v386;
  int v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  uint64_t v394;
  _BOOL4 v396;
  unsigned __int16 v397;
  unsigned __int16 v398;
  int v399;
  int v400;
  signed int v401;
  signed int v402;
  unsigned int v403;
  unsigned int v404;
  int v405;
  unsigned int v406;
  unsigned int v407;
  signed int v408;
  int v409;
  int v410;
  unsigned int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  unsigned int v418;
  signed int v419;
  unsigned int v420;
  unsigned int v421;
  char *v422;
  size_t v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  char *v427;
  unint64_t v428;
  unint64_t v429;
  char *v430;
  int v431;
  int v432;
  char *v433;
  unsigned int v434;
  int v435;
  unint64_t v436;
  char *v437;
  int v438;
  char *v439;
  unsigned int v440;
  int v441;
  char *v442;
  unint64_t v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  char *v447;
  uint64_t v448;
  char *v449;
  unsigned int v450;
  char *v451;
  uint64_t v452;
  int v453;
  _BYTE *v454;
  int v455;
  char v456;
  unsigned __int16 v457;
  unsigned __int16 v458;
  uint64_t v459;
  unsigned int v460;
  uint64_t v461;
  int v462;
  int v463;
  int v464;
  int v465;
  unsigned __int16 v466;
  int v467;
  char *__b;
  char *__src;
  uint64_t *v470;
  uint64_t v471;
  size_t __n;
  int __na;
  char *v474;
  int v475;
  uint64_t *v476;
  int v477;
  int v478;
  int v479;
  __int16 v480;
  unsigned __int16 v481;
  char v482;
  char v483;
  char v484;
  char v485;
  char v486;
  char v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unsigned int v512;
  int8x8_t *v513;
  uint64_t v514;
  _DWORD *v515;
  _DWORD *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  _BYTE *v521;
  int v522;
  char *v523;
  __int16 *v524;
  __int16 *v525;
  __int16 *v526;
  __int16 *v527;
  _DWORD *v528;
  _DWORD *v529;
  _DWORD *v530;
  _QWORD *v531;
  _QWORD *v532;
  _QWORD *v533;
  unsigned __int8 *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  __int16 *v541;
  unsigned int v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unsigned int v548;
  uint64_t v549;
  _BYTE *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int32x2_t *v554;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  char *v560;
  char v561;
  unsigned int v562;
  int v563;
  CMTime v564;
  _QWORD v565[2];
  uint64_t v566;
  uint64_t v567;
  _QWORD v568[4];

  v8 = a8;
  v11 = a3;
  v12 = a2;
  v13 = a1;
  v568[2] = *MEMORY[0x1E0C80C00];
  v554 = (int32x2_t *)*((_QWORD *)a1 + 646);
  v562 = 0;
  if (a3)
    v544 = *(_DWORD *)(a3 + 64);
  else
    v544 = 0;
  v14 = *((_QWORD *)a1 + 648);
  v15 = v14 + 8;
  if (!v14)
    v15 = 0;
  v540 = v15;
  if (*((_BYTE *)a1 + 398))
    v16 = 2;
  else
    v16 = 1;
  v17 = v16 + *((unsigned __int8 *)a1 + 237);
  *a8 = 0;
  v18 = *((_DWORD *)a1 + 93);
  v19 = v18 == 1;
  if (v18 == 1)
    v20 = a2 + 40;
  else
    v20 = (uint64_t)(a1 + 2596);
  v539 = v20;
  v541 = a1 + 2588;
  if (v19)
    v21 = (uint64_t *)(a2 + 32);
  else
    v21 = (uint64_t *)(a1 + 2588);
  v22 = *v21;
  v23 = *v21 + 205808;
  v545 = *(_QWORD *)(*v21 + 152);
  v24 = *(_QWORD *)(*v21 + 208120);
  if (a3)
    v25 = *(_DWORD *)(a3 + 616);
  else
    v25 = 0;
  v559 = v23;
  *(_DWORD *)(v23 + 2292) = v25;
  *(_QWORD *)(v22 + 144) = a3;
  v548 = v17;
  v26 = malloc_type_calloc((8 * v17), 1uLL, 0x4AE20AB7uLL);
  if (!v26)
  {
    CFLog();
LABEL_32:
    v43 = 4294967188;
    goto LABEL_389;
  }
  v550 = v13 + 2406;
  v553 = v22 + 207896;
  v556 = v22 + 205800;
  v557 = v22;
  v536 = v24;
  v558 = v11;
  if (a4)
  {
    v29 = *(_QWORD *)v559;
    v30 = *(_DWORD *)(*(_QWORD *)v559 + 24);
    if (v30)
      goto LABEL_21;
    v47 = *(unsigned int *)(v29 + 48);
    if ((_DWORD)v47)
    {
      v48 = a7;
      for (i = 0; i < v47; ++i)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(v29 + 40) + 8 * i);
        if (v50)
        {
          if (!*(_BYTE *)(v50 + 1) && !*(_BYTE *)(v50 + 2))
          {
            sub_1B68B4998(v50, *(unsigned __int8 *)(v29 + 60));
            v51 = *(unsigned int *)(v29 + 24);
            v47 = *(unsigned int *)(v29 + 48);
            if (v51 < v47)
            {
              v52 = *(_QWORD *)(v29 + 32);
              *(_DWORD *)(v29 + 24) = v51 + 1;
              *(_QWORD *)(v52 + 8 * v51) = v50;
              v47 = *(unsigned int *)(v29 + 48);
            }
          }
        }
        else
        {
          ++*(_DWORD *)(v29 + 56);
        }
      }
      v30 = *(_DWORD *)(v29 + 24);
      a7 = v48;
      v22 = v557;
      v11 = v558;
      if (v30)
      {
LABEL_21:
        v31 = *(_QWORD *)(v29 + 32);
        v32 = v30 - 1;
        *(_DWORD *)(v29 + 24) = v32;
        v33 = *(_QWORD *)(v31 + 8 * v32);
        *(_QWORD *)(v31 + 8 * v32) = 0;
        if (v33)
        {
          v34 = *(__n128 *)(v33 + 144);
          *(__n128 *)(v33 + 128) = v34;
          v534 = *(unsigned __int8 **)(v22 + 5392);
          v508 = *(_DWORD *)(a4 + 60);
          v520 = *(unsigned int *)(a4 + 104);
          v521 = (_BYTE *)(v22 + 5076);
          v510 = *(_QWORD *)(v22 + 5416);
          if (*(_BYTE *)(v22 + 5076))
          {
            v35 = *(_QWORD *)(v22 + 144);
            if (*(_BYTE *)(v35 + 719))
            {
              v36 = *((float *)v13 + 15);
              v37 = *(float *)(v35 + 412);
              v38 = 0.5;
              v39 = *(float *)(v35 + 416);
              v40 = v37 < 0.00000011921 || v39 < 0.00000011921;
              if (v40 || *(_DWORD *)(v35 + 540) >= 2u)
              {
                v41 = *(_DWORD *)(v553 + 16);
                LODWORD(v28) = 1.0;
                v42 = 0.5;
                if (v41 <= 8)
                {
                  v38 = *(float *)v553;
                  v42 = *(float *)(v553 + 4);
                  *(float *)&v28 = fmaxf(*(float *)(v553 + 8), *(float *)(v553 + 12));
                  *(_DWORD *)(v553 + 16) = v41 + 1;
                }
              }
              else
              {
                v55 = fmaxf(*(float *)(v35 + 404) + (float)(v37 * 0.5), 0.0);
                v56 = fmaxf(*(float *)(v35 + 408) + (float)(v39 * 0.5), 0.0);
                *(_DWORD *)(v553 + 16) = 0;
                *(_QWORD *)&v28 = 1.0;
                v57 = fmin(fmaxf(*(float *)(v35 + 416), *(float *)(v35 + 412)) * 1.80000001, 1.0);
                *(float *)&v28 = fmaxf(v57, 0.5);
                v42 = *(float *)&v28 * 0.5;
                v38 = *(float *)&v28 * 0.5;
                if ((float)(v55 - (float)(*(float *)&v28 * 0.5)) >= 0.0)
                {
                  v38 = v55;
                  if ((float)(v55 + v42) >= 1.0)
                    v38 = 1.0 - v42;
                }
                if ((float)(v56 - v42) >= 0.0)
                {
                  if ((float)(v56 + v42) >= 1.0)
                    v42 = 1.0 - v42;
                  else
                    v42 = v56;
                }
              }
              v61 = v36;
              if (v36 > 30.0)
                v61 = 30.0;
              if (v36 >= 1.0)
                v62 = v61;
              else
                v62 = 1.0;
              if ((_DWORD)v520)
              {
                v63 = *(float *)(v553 + 4);
                v64 = *(float *)(v553 + 8);
                if ((float)(vabds_f32(v38, *(float *)v553) + vabds_f32(v42, v63)) > 0.007
                  || vabds_f32(v64, *(float *)&v28) > 0.009)
                {
                  v66 = v62 * -0.00332999998 + 0.219999999;
                  v67 = v62 * -0.00332999998 + 0.150000006;
                  v38 = (1.0 - v66) * *(float *)v553 + v66 * v38;
                  v68 = (1.0 - v66) * v63 + v66 * v42;
                  v65 = (float *)v553;
                  *(float *)v553 = v38;
                  *(float *)(v553 + 4) = v68;
                  v69 = *(float *)&v28;
                  *(double *)&v28 = (1.0 - v67) * v64 + v67 * *(float *)&v28;
                  *(float *)&v28 = *(double *)&v28;
                  v70 = (1.0 - v67) * *(float *)(v553 + 12) + v67 * v69;
                  *(_DWORD *)(v553 + 8) = v28;
                  *(float *)(v553 + 12) = v70;
                }
                else
                {
                  LODWORD(v28) = *(_DWORD *)(v553 + 8);
                  v38 = *(float *)v553;
                  v65 = (float *)v553;
                }
              }
              else
              {
                v65 = (float *)v553;
                *(float *)v553 = v38;
                *(float *)(v553 + 4) = v42;
                *(_DWORD *)(v553 + 8) = v28;
                *(_DWORD *)(v553 + 12) = v28;
              }
              *(double *)(v33 + 19384) = (float)(v38 - (float)(*(float *)&v28 * 0.5));
              *(double *)(v33 + 19392) = (float)(v65[1] - (float)(v65[3] * 0.5));
              *(double *)(v33 + 19400) = v65[2];
              v34.n128_f64[0] = v65[3];
              *(_QWORD *)(v33 + 19408) = v34.n128_u64[0];
            }
          }
          v506 = v11 + 324;
          v537 = v33;
          v515 = a7;
          if (!*(_BYTE *)(v553 + 191))
            goto LABEL_156;
          v71 = *(FILE **)(v22 + 232);
          if (v71)
          {
            LODWORD(v568[0]) = 0;
            LODWORD(v566) = 0;
            if (!*(_DWORD *)(a4 + 104))
              fgets((char *)&v564, 300, v71);
            fscanf(v71, "%d", v568);
            fscanf(v71, "%d", v568);
            v72 = *(_DWORD *)(a4 + 104);
            v73 = v568[0];
            if (v72)
              v72 = LODWORD(v568[0]) - *(_DWORD *)(a4 + 96);
            *(_DWORD *)(a4 + 84) = v72;
            *(_DWORD *)(a4 + 88) = v73;
            *(_DWORD *)(a4 + 96) = v73;
            fscanf(v71, "%d", v568);
            *(_DWORD *)(a4 + 100) = v568[0];
            fscanf(v71, "%d", v568);
            *(_DWORD *)v11 = v568[0];
            fscanf(v71, "%d", v568);
            *(_DWORD *)(v11 + 56) = v568[0];
            fscanf(v71, "%d", v568);
            *(_BYTE *)(v11 + 68) = v568[0];
            fscanf(v71, "%d", v568);
            *(_DWORD *)(v11 + 324) = v568[0];
            fscanf(v71, "%d", v568);
            *(_DWORD *)(v11 + 328) = v568[0];
            fscanf(v71, "%d", v568);
            fscanf(v71, "%f", &v566);
            *(double *)(v11 + 312) = *(float *)&v566;
            fscanf(v71, "%d", v568);
            *(_DWORD *)(v11 + 320) = v568[0];
            fscanf(v71, "%d", v568);
            *(_DWORD *)(v11 + 304) = v568[0];
            fscanf(v71, "%d", v568);
            *(_WORD *)(v11 + 148) = v568[0];
            fscanf(v71, "%d", v568);
            fscanf(v71, "%d", v568);
            fscanf(v71, "%d", v568);
            fscanf(v71, "%d", v568);
            if (v534 && v534[776])
              *(_QWORD *)v506 = 0;
            v544 = *(_DWORD *)(v11 + 64);
            v22 = v557;
          }
          if (*((_BYTE *)v13 + 4850))
            sub_1B68D8E04(v22, v11, (uint64_t)v13);
          v74 = *(FILE **)(v22 + 264);
          if (v74)
          {
            if (!*(_DWORD *)(a4 + 120))
              fgets((char *)&v564, 300, *(FILE **)(v22 + 264));
            LODWORD(v568[0]) = 0;
            LODWORD(v566) = 0;
            LODWORD(v565[0]) = 0;
            v563 = 0;
            fscanf(v74, "%ud", v568);
            while (*(_DWORD *)(a4 + 120) > SLODWORD(v568[0]))
            {
              fgets((char *)&v564, 300, v74);
              fscanf(v74, "%ud", v568);
            }
            fscanf(v74, "%ud", &v566);
            fscanf(v74, "%ud", v565);
            fscanf(v74, "%ud", &v563);
            v75 = v565[0];
            v534[149] = v565[0];
            v534[148] = v75;
            v76 = v563;
            v534[2] = v563;
            *v534 = v76;
            v22 = v557;
          }
          v77 = *(FILE **)(v22 + 200);
          v33 = v537;
          if (v77)
          {
            v78 = *(_DWORD *)(a4 + 104);
            v79 = *(_QWORD *)(v22 + 5392);
            if (v79)
              v78 += *(_DWORD *)(v79 + 116);
            fprintf(v77, "%11d ", v78);
            fprintf(v77, "%9d ", *(_DWORD *)(a4 + 88));
            fprintf(v77, "%9d ", *(_DWORD *)(a4 + 100));
            fprintf(v77, "%13d ", *(_DWORD *)v11);
            fprintf(v77, "%13d ", *(_DWORD *)(v11 + 56));
            fprintf(v77, "%17d ", *(unsigned __int8 *)(v11 + 68));
            fprintf(v77, "%12d ", *(_DWORD *)(v11 + 324));
            fprintf(v77, "%15d ", *(_DWORD *)(v11 + 328));
            fprintf(v77, "%8d ", 0);
            fprintf(v77, "%10.7lf ", *(double *)(v11 + 312));
            fprintf(v77, "%10d ", *(_DWORD *)(v11 + 320));
            fprintf(v77, "%10d ", *(_DWORD *)(v11 + 304));
            fprintf(v77, "%14d ", *(unsigned __int16 *)(v11 + 148));
            fprintf(v77, "%15d ", 0);
            fprintf(v77, "%11d ", 0);
            fprintf(v77, "%10d ", 0);
            fprintf(v77, "%11d ", 0);
            fputc(10, v77);
            v22 = v557;
            v33 = v537;
          }
          v80 = *(FILE **)(v22 + 216);
          if (v80)
          {
            v81 = v22;
            v82 = *(_DWORD *)(a4 + 104);
            v83 = *(_QWORD *)(v81 + 5392);
            if (v83)
              v82 += *(_DWORD *)(v83 + 116);
            if (*v8)
              fprintf(v80, "x ");
            else
              fprintf(v80, "  ");
            fprintf(v80, "%10d ", v82);
            fprintf(v80, "%10d ", *(_DWORD *)(a4 + 88));
            fprintf(v80, "%7d ", *(_DWORD *)(a4 + 100));
            fprintf(v80, "%10d ", *(_DWORD *)(v11 + 304));
            fprintf(v80, "%13d ", *(_DWORD *)(v11 + 376));
            fprintf(v80, "%11d ", *(_DWORD *)(v11 + 384));
            fprintf(v80, "%11d ", *(_DWORD *)(v11 + 380));
            v22 = v557;
            fprintf(v80, "%11d ", *(_DWORD *)(*(_QWORD *)(v557 + 5400) + 28));
            fprintf(v80, "%11d ", (int)*(float *)(v556 + 64));
            fputc(10, v80);
            v33 = v537;
          }
          if (!*((_BYTE *)v13 + 660) || !v534)
            goto LABEL_156;
          if (!v521[348])
          {
LABEL_132:
            v88 = v545;
            if (v545)
            {
              if (!*(_BYTE *)(v545 + 224))
                *(_BYTE *)(v545 + 224) = *(_DWORD *)(v11 + 324) > 0;
              v89 = *(_DWORD *)(v11 + 324);
              if (v89 >= 1)
              {
                v88 = v545;
                *(_DWORD *)(v545 + 248) += *(_DWORD *)(v545 + 220);
                *(_DWORD *)(v545 + 220) = 0;
                v89 = *(_DWORD *)(v11 + 324);
              }
              v90 = *(_DWORD *)(v88 + 232);
              v91 = *(_DWORD *)(v88 + 228) + v89;
              *(_DWORD *)(v88 + 228) = v91;
              *(_DWORD *)(v88 + 232) = v90 + *(_DWORD *)(v11 + 328);
              *(_DWORD *)(v11 + 324) = v91;
              *(_DWORD *)(v11 + 328) = *(_DWORD *)(v88 + 232);
            }
            if (!v508 || !*(_BYTE *)(v553 + 180))
            {
              v92 = *(_QWORD *)(v22 + 5416);
              v93 = *((_DWORD *)v534 + 43);
              if (*(_BYTE *)(v92 + 350)
                || (*(_DWORD *)(v92 + 340) - 3) <= 0xFFFFFFFD
                && (v100 = *((_QWORD *)v534 + 87),
                    v101 = (char)v534[104],
                    v102 = *(__int16 *)(v100 + 4 * v101 + 2),
                    v93 % v102 < v102 - *(__int16 *)(v100 + 4 * v101)))
              {
                ++*((_DWORD *)v534 + 29);
                v534[776] = 1;
                ++*((_DWORD *)v534 + 202);
                *((_DWORD *)v534 + 43) = v93 + 1;
                ++*v8;
                if (*((_BYTE *)v13 + 4850))
                {
                  v94 = *(_QWORD *)(v22 + 144);
                  *(_BYTE *)(v553 + 46) = *(_BYTE *)(v94 + 68);
                  *(_BYTE *)(v553 + 47) |= *(_BYTE *)(v94 + 56);
                  v95 = v556;
                }
                else
                {
                  v95 = v556;
                  if (*(_BYTE *)(v536 + 33))
                  {
                    v124 = sub_1B68B10D0(v536);
                    if ((_DWORD)v124)
                    {
                      v43 = v124;
LABEL_388:
                      CFLog();
                      goto LABEL_389;
                    }
                    v168 = *(unsigned __int8 *)(*(_QWORD *)(v536 + 8 * *(int *)(v536 + 64) + 72) + 24);
                  }
                  else
                  {
                    v168 = *(_DWORD *)(*(_QWORD *)(v22 + 128) + 4);
                  }
                  v243 = *(_QWORD *)(v22 + 144);
                  if (!v168)
                    *(_BYTE *)(v553 + 46) = *(_BYTE *)(v243 + 68);
                  *(_BYTE *)(v553 + 47) |= *(_BYTE *)(v243 + 56);
                  if (v521[348])
                    sub_1B68B87B8(*(int32x2_t **)(v22 + 136), *(_QWORD **)(v22 + 5416), 1, *(_DWORD *)(*(_QWORD *)(v22 + 128) + 8) != 0);
                }
                **(_DWORD **)(v22 + 128) = 1;
                v96 = *(_QWORD *)(v95 + 1960);
                if (v96)
                {
                  v43 = 0;
                  ++*(_DWORD *)(v96 + 8);
                  goto LABEL_389;
                }
                goto LABEL_409;
              }
              ++*((_DWORD *)v534 + 202);
              *((_DWORD *)v534 + 43) = v93 + 1;
            }
            **(_DWORD **)(v22 + 128) = 0;
LABEL_156:
            *(_DWORD *)(v33 + 1328) = *(_DWORD *)(a4 + 84);
            *(_DWORD *)(v33 + 1332) = *(_DWORD *)(a4 + 88);
            *(_DWORD *)(v33 + 1336) = *(_DWORD *)(a4 + 100);
            v103 = *(_DWORD *)(a4 + 64);
            *(_BYTE *)(v33 + 96) = v103;
            *(_BYTE *)(v33 + 1354) = v103;
            v511 = v33 + 96;
            *(_BYTE *)(v33 + 97) = *(_DWORD *)(a4 + 64);
            if ((_BYTE)v103)
            {
              *(_BYTE *)(v33 + 101) = *(_DWORD *)(a4 + 68);
              *(_BYTE *)(v33 + 102) = *(_DWORD *)(a4 + 68);
              v104 = *(_DWORD *)(a4 + 72);
            }
            else
            {
              LOBYTE(v104) = 0;
              *(_WORD *)(v33 + 101) = 0;
            }
            *(_BYTE *)(v33 + 98) = v104;
            if (v13 && v11)
            {
              v105 = *(_DWORD *)(a4 + 84);
              v106 = *(_DWORD *)(a4 + 100);
              if (v105 < 1)
              {
                v107 = *(_DWORD *)(a4 + 104);
                if (v107 && (v108 = *(_DWORD *)(a4 + 88)) != 0)
                {
                  v34.n128_f32[0] = (float)((float)v106 * (float)v107) / (float)v108;
                  v105 = v108 / v107;
                }
                else
                {
                  v34.n128_u32[0] = *(_DWORD *)(v11 + 28);
                  v105 = (int)(float)((float)v106 / v34.n128_f32[0]);
                }
              }
              else
              {
                v34.n128_f32[0] = (float)v106 / (float)v105;
                v107 = *(_DWORD *)(a4 + 104);
              }
              v109 = 0;
              v110 = 0;
              v111 = 0;
              *(_DWORD *)(v11 + 4 * (v107 % 5) + 36) = v105;
              *(_DWORD *)(v11 + 28) = v34.n128_u32[0];
              v112 = *(_DWORD *)(a4 + 104);
              v113 = v112;
              do
              {
                if ((int)(v112 + v109) >= 0)
                {
                  ++v110;
                  v111 += *(_DWORD *)(v11 + 4 * (v109 + v112 - 5 * (v113 / 5)) + 36);
                }
                --v109;
                --v113;
              }
              while (v109 != -5);
              v114 = v34.n128_f32[0];
              if (v111 > 0)
                v114 = (float)((float)v106 * (float)v110) / (float)v111;
              *(float *)(v11 + 32) = v114;
              v115 = *((float *)v13 + 17);
              if (*((float *)v13 + 16) < v115 && *(_DWORD *)(a4 + 104))
                *((float *)v13 + 16) = v115;
              *((_DWORD *)v13 + 17) = v34.n128_u32[0];
            }
            if (v521[348] && v534 && v521[349])
            {
              v116 = (unsigned int *)(v22 + 57096);
              if (*((_BYTE *)v13 + 4850))
              {
                v117 = *(_QWORD **)(v22 + 5416);
                v118 = *(unsigned __int8 *)(v556 + 133);
                v119 = *v116;
                v120 = *(unsigned int *)(v22 + 57100);
                v121 = (uint64_t)v534;
                v122 = 1;
LABEL_190:
                sub_1B68B89B8(v121, (unint64_t)v117, v118, v119, v120, v122);
                v33 = v537;
                goto LABEL_191;
              }
              if (*(_DWORD *)(*(_QWORD *)(v22 + 128) + 4))
              {
                v117 = *(_QWORD **)(v22 + 5416);
                if (*((_BYTE *)v13 + 4856))
                {
                  v123 = v117[22];
                }
                else
                {
                  v123 = v117[19];
                  v117[18] = v117[*(int *)(*(_QWORD *)(v22 + 136) + 4868) + 15];
                  v117 = *(_QWORD **)(v22 + 5416);
                }
                v122 = v123 != 0;
                v118 = *(unsigned __int8 *)(v556 + 133);
                v119 = *v116;
                v120 = *(unsigned int *)(v22 + 57100);
                v121 = (uint64_t)v534;
                goto LABEL_190;
              }
            }
LABEL_191:
            if (*((_BYTE *)v13 + 4850))
            {
              v125 = sub_1B68D8A1C(v22, v33, *(_QWORD *)(v22 + 136), *(_QWORD *)(v22 + 144), v520);
              v33 = v537;
              if ((_DWORD)v125)
              {
                v43 = v125;
                goto LABEL_388;
              }
            }
            v546 = v33 + 19112;
            if (!v14
              || !*((_BYTE *)v13 + 402)
              || (v520 & 0x80000000) != 0
              || (v126 = *(_QWORD *)(v14 + 24)) == 0
              || *(_DWORD *)(v14 + 12) <= v520
              || !*(_BYTE *)(v126 + 8 * v520 + 7))
            {
              if (a6)
              {
                v528 = v8;
                v127 = v26;
                v128 = v12;
                v129 = *(_DWORD *)(a4 + 32);
                if (v129)
                {
                  v130 = *(unsigned int *)(v537 + 232);
                  v131 = *(char **)(v537 + 144);
                  v132 = *(unsigned int *)(a4 + 16);
                  v133 = *(unsigned int *)(a4 + 24);
                  v134 = *(char **)a4;
                  do
                  {
                    memcpy(v131, v134, v133);
                    v134 += v132;
                    v131 += v130;
                    --v129;
                  }
                  while (v129);
                }
                v12 = v128;
                v26 = v127;
                v22 = v557;
                v11 = v558;
                v8 = v528;
                v33 = v537;
                if (*(_BYTE *)(a4 + 156))
                {
                  v135 = *(_DWORD *)(a4 + 36) * *(_DWORD *)(a4 + 24);
                  memset(*(void **)(v537 + 136), 128, (uint64_t)(v135 + (v135 < 0)) >> 1);
                  v33 = v537;
                }
              }
              else if ((*(_DWORD *)(a4 + 20) | 0x10) != 0x34323076)
              {
                v167 = sub_1B68B4B60(a4, v33);
                v33 = v537;
                if ((_DWORD)v167)
                {
                  v43 = v167;
                  goto LABEL_388;
                }
              }
              if (*((_BYTE *)v13 + 4850))
              {
                sub_1B68D898C(v11, v33, *(_QWORD *)(v22 + 152), *((unsigned __int8 *)v13 + 577));
                v33 = v537;
              }
              v34 = *(__n128 *)(v11 + 568);
              v28 = *(_OWORD *)(v11 + 584);
              *(__n128 *)(v33 + 19320) = v34;
              *(_OWORD *)(v33 + 19336) = v28;
              *(_BYTE *)(v546 + 266) = 0;
              *(_DWORD *)(v546 + 240) = *(_DWORD *)(v11 + 600);
            }
            v136 = v8;
            v517 = v12;
            v137 = *(_QWORD *)(a4 + 112);
            v138 = *((_QWORD *)v13 + 647);
            v139 = *(_QWORD *)(v22 + 5416);
            v140 = *(_QWORD *)(v559 + 2312);
            v141 = *(_DWORD *)(v33 + 228);
            v142 = *(_DWORD *)(v33 + 196);
            v143 = *(_DWORD *)(a4 + 60);
            *(_DWORD *)(v546 + 28) = 0;
            *(_QWORD *)(v546 + 32) = v141;
            *(_DWORD *)(v546 + 40) = v142;
            *(_BYTE *)(v546 + 24) = 0;
            v144 = *(_DWORD *)(a4 + 24) + 4095;
            *(_BYTE *)(v546 + 25) = v144 >> 4;
            *(_BYTE *)(v546 + 26) = 0;
            v145 = *(_DWORD *)(a4 + 36) + 4095;
            *(_BYTE *)(v546 + 27) = v145 >> 4;
            *(_DWORD *)(v546 + 44) = (v144 >> 4)
                                   + 1
                                   + ((v144 >> 4) + 1) * (v145 >> 4);
            if (!*((_BYTE *)v13 + 663)
              || (v146 = *(unsigned __int8 *)(v22 + 1057), !*(_BYTE *)(v22 + 1057))
              && *((char *)v13 + 682) <= 0
              && *((char *)v13 + 686) < 1
              || (v141 & 0xF) != 0
              || (v142 & 0xF) != 0
              || (int)v141 < 1
              || v142 < 1)
            {
              if ((*(_DWORD *)(a4 + 20) | 0x10) != 0x34323076)
              {
                v12 = v517;
                v8 = v136;
LABEL_219:
                v150 = v554;
                goto LABEL_220;
              }
              v147 = v138;
              v148 = v143;
              v149 = sub_1B68B4B60(a4, v33);
              LOBYTE(v143) = v148;
              v138 = v147;
              v33 = v537;
              v12 = v517;
              v8 = v136;
              v150 = v554;
              if (v149)
              {
                CFLog();
                v33 = v537;
                v11 = v558;
                goto LABEL_223;
              }
LABEL_220:
              *(_BYTE *)(v546 + 16) = *(_BYTE *)(v138 + 1057);
              *(_WORD *)(v546 + 4) = v141;
              *(_WORD *)v546 = v141;
              *(_WORD *)(v546 + 8) = v141;
              *(_WORD *)(v546 + 6) = v142;
              *(_WORD *)(v546 + 2) = v142;
              *(_WORD *)(v546 + 10) = v142;
              *(_WORD *)(v546 + 12) = *(_DWORD *)(v138 + 1576);
              *(_WORD *)(v546 + 14) = *(_DWORD *)(v138 + 1580);
              *(_BYTE *)(v546 + 17) = 0;
              *(_BYTE *)(v33 + 1395) = v143;
              *(_DWORD *)(v33 + 1276) = v520;
              *(_QWORD *)(v33 + 1408) = v137;
              *(_BYTE *)(v33 + 1352) = v143;
              v11 = v558;
              if (v558)
              {
                *(_BYTE *)(v33 + 1369) = *(_DWORD *)(v558 + 152);
                *(_DWORD *)(v33 + 1372) = *(_DWORD *)(v558 + 352);
                *(_DWORD *)(v33 + 1376) = *(_DWORD *)(v558 + 364);
                *(_DWORD *)(v33 + 1380) = *(_DWORD *)(v558 + 368);
                *(_DWORD *)(v33 + 1384) = *(_DWORD *)(v558 + 356);
                *(_DWORD *)(v33 + 1388) = *(_DWORD *)(v558 + 360);
              }
              else
              {
                *(_DWORD *)(v33 + 1372) = 0;
              }
LABEL_223:
              if (*((_BYTE *)v13 + 577) == 1 && *((_BYTE *)v13 + 657) == 1)
              {
                LODWORD(v28) = *(_DWORD *)(v11 + 632);
                *(double *)&v151 = (double)(unint64_t)v28;
                v152 = *(double *)(v11 + 624) * *(double *)&v151;
                LODWORD(v151) = *(_DWORD *)(v11 + 640);
                *(double *)&v153 = (double)v151;
                v154 = v152 * *(double *)&v153;
                LODWORD(v153) = *(_DWORD *)(v11 + 636);
                v34.n128_f64[0] = v154 * (double)v153;
                *(_QWORD *)(v33 + 48) = v34.n128_u64[0];
              }
              if (v550[38])
              {
                v53 = sub_1B689D9F0((uint64_t)v150, *((_QWORD *)v13 + 648), v13, v22, v33, v34);
                if ((_DWORD)v53)
                  goto LABEL_228;
              }
              else
              {
                sub_1B689D824((uint64_t)v150, v33);
              }
              sub_1B68A17B8(v150, (uint64_t)v26, v548, &v562);
              v24 = v536;
              a7 = v515;
              if (!*((_BYTE *)v13 + 663))
                goto LABEL_266;
              if (!v534)
                goto LABEL_266;
              if (*((_BYTE *)v13 + 262) != 3)
                goto LABEL_266;
              v155 = *(float *)(v22 + 1048);
              if (v155 < 0.0)
                goto LABEL_266;
              v156 = *v534;
              if (v156 != 3)
              {
                if (v156 == 2)
                {
                  v157 = (1049 * (*(unsigned __int16 *)(v537 + 4832) >> 5)) >> 17;
                  v158 = (_BYTE *)(*(_QWORD *)v541 + 207678);
                  goto LABEL_237;
                }
                if ((*(__int16 *)(*((_QWORD *)v534 + 98) + 8 * (char)v534[148] + 4) - 1) <= 0x13E)
                {
                  v157 = (1049 * (*(unsigned __int16 *)(v537 + 4832) >> 5)) >> 17;
                  v158 = (_BYTE *)(*(_QWORD *)v541 + 207678);
                  if (*(unsigned __int16 *)(*((_QWORD *)v534 + 98) + 8 * (char)v534[148] + 4) < 0x100u)
                  {
                    if (v157 >= 2)
                      LOBYTE(v157) = 2;
                    LOBYTE(v157) = v157 | 4;
                    goto LABEL_240;
                  }
LABEL_237:
                  if (v157 >= 3)
                    LOBYTE(v157) = 3;
                  LOBYTE(v157) = v157 + 3;
LABEL_240:
                  *v158 = v157;
                  goto LABEL_265;
                }
              }
              v170 = (int)(v155 + 0.5);
              if (v170 < 28)
              {
LABEL_266:
                if ((a6 & 1) != 0)
                {
                  v171 = *(unsigned __int8 *)(a4 + 156);
                  v45 = v556;
                  if (v171)
                  {
                    *(_BYTE *)(v537 + 1368) = 7;
                    *(_BYTE *)(v537 + 1394) = 1;
                  }
                }
                else
                {
                  v45 = v556;
                  if (a5 && *(_BYTE *)(v537 + 1393))
                    *a5 = 1;
                }
                *(_WORD *)(v546 + 196) = 0;
                *(_BYTE *)(v22 + 1725) = 0;
                if (*(_BYTE *)(*(_QWORD *)(v22 + 136) + 577) == 1)
                {
                  if (*v550)
                  {
                    v172 = *(_QWORD *)(*(_QWORD *)v541 + 5392);
                    if (v172)
                    {
                      if (*(_BYTE *)(v546 + 52)
                        && (v173 = *(float *)(v546 + 200), v173 > 1.0e-10)
                        && (v174 = *(double *)(v172 + 136), v174 < 14.0)
                        && *v534 != 3)
                      {
                        *(_BYTE *)(v546 + 197) = 5;
                        *(_BYTE *)(v546 + 196) = (int)(float)-fminf(log2f((float)(v173 * 0.43877) + 1.0) * 6.0, 5.0);
                        if (v173 > 1.0
                          && !*(_BYTE *)(v537 + 4913)
                          && !*(_DWORD *)(v559 + 2292)
                          && (v174 < 11.0 || *(_BYTE *)(v45 + 133)))
                        {
                          if (v174 <= 9.0)
                          {
                            LOBYTE(v248) = 5;
                          }
                          else
                          {
                            v245 = *(float **)(*(_QWORD *)v541 + 5392);
                            v246 = (float)((float)(v245[36] - v245[5]) * 5.0) / (float)(v245[4] - v245[5]);
                            v247 = 0.0;
                            if (v246 >= 0.0)
                            {
                              v247 = 5.0;
                              if (v246 <= 5.0)
                                v247 = (float)((float)(v245[36] - v245[5]) * 5.0) / (float)(v245[4] - v245[5]);
                            }
                            v248 = (int)v247;
                          }
                          *(_BYTE *)(v22 + 1725) = v248;
                        }
                        if (*v550 == 1)
                        {
                          *(_WORD *)(v546 + 196) = 1531;
                          *(_BYTE *)(v22 + 1725) = 5;
                        }
                      }
                      else if (*(_DWORD *)(v22 + 5072) != -1)
                      {
                        *(_OWORD *)(v22 + 5056) = 0u;
                        *(_OWORD *)(v22 + 5040) = 0u;
                        *(_OWORD *)(v22 + 5024) = 0u;
                        *(_OWORD *)(v22 + 5008) = 0u;
                        *(_OWORD *)(v22 + 4992) = 0u;
                        *(_OWORD *)(v22 + 4976) = 0u;
                        *(_OWORD *)(v22 + 4960) = 0u;
                        *(_OWORD *)(v22 + 4944) = 0u;
                        *(_OWORD *)(v22 + 4928) = 0u;
                        *(_OWORD *)(v22 + 4912) = 0u;
                        *(_DWORD *)(v22 + 5072) = -1;
                      }
                    }
                  }
                }
                goto LABEL_281;
              }
              v157 = (v170 - 27) >> 1;
              if (v157 >= 6)
                LOBYTE(v157) = 6;
              *(_BYTE *)(*(_QWORD *)v541 + 207678) = v157;
LABEL_265:
              *(_BYTE *)(*(_QWORD *)v541 + 207679) = v157;
              goto LABEL_266;
            }
            v509 = v137;
            v159 = *(unsigned __int16 *)(v33 + 232);
            v160 = *(unsigned __int16 *)(v33 + 248);
            if ((_DWORD)v520 || (v161 = *(_QWORD *)(v22 + 5392)) == 0)
            {
LABEL_478:
              v258 = v141;
              v259 = v142;
              v137 = v509;
              if (!v146)
                goto LABEL_525;
              v260 = *(unsigned __int8 **)(v22 + 5392);
              v258 = v141;
              v259 = v142;
              if (!v260)
                goto LABEL_525;
              v261 = *v260;
              if (v261 == 2)
              {
                v259 = 192;
                v258 = 256;
              }
              else
              {
                if (v261 == 3)
                {
                  v258 = 320;
                  v259 = 240;
LABEL_487:
                  if (v141 >= v142 || v258 <= v259)
                  {
LABEL_490:
                    if (v146 == 1)
                    {
                      *(_DWORD *)(v138 + 1576) = v258;
                      *(_DWORD *)(v138 + 1580) = v259;
                    }
                    else
                    {
                      v258 = v141;
                      v259 = v142;
                      if (v146 == 2)
                      {
                        v496 = v159;
                        v502 = v160;
                        v484 = v143;
                        v490 = v138;
                        sub_1B68B86C0((uint64_t)v260, v520);
                        v264 = *(unsigned __int8 **)(v22 + 5392);
                        v265 = v264[730];
                        v266 = *v264;
                        if ((int)(v142 * v141) < 76801)
                        {
                          if (v266 == 3)
                            v265 = 0;
                          v267 = 160;
                          v268 = 176;
                          v269 = 240;
                          v270 = 320;
                        }
                        else if (v266 == 3 || *((_BYTE *)v13 + 666))
                        {
                          v267 = 240;
                          v268 = 320;
                          v269 = 480;
                          v270 = 640;
                          v265 = 1;
                        }
                        else
                        {
                          v267 = 240;
                          v268 = 320;
                          v269 = 480;
                          v270 = 640;
                        }
                        v33 = v537;
                        v138 = v490;
                        v159 = v496;
                        LOBYTE(v143) = v484;
                        v160 = v502;
                        if (!(_DWORD)v520)
                        {
                          *(_DWORD *)(v22 + 1576) = v270;
                          *(_DWORD *)(v22 + 1580) = v269;
                        }
                        if (v265 == 1)
                        {
                          *(_DWORD *)(v490 + 1576) = v268;
                          *(_DWORD *)(v490 + 1580) = v267;
                          v258 = v268;
                          v259 = v267;
                        }
                        else
                        {
                          v258 = v141;
                          v259 = v142;
                          if (!v265)
                          {
                            v271 = *(_DWORD *)(v490 + 1576);
                            if (v268 > v271)
                              v271 = v268;
                            v272 = *(_DWORD *)(v490 + 1580);
                            if (v267 > v272)
                              v272 = v267;
                            v273 = v271 + 16;
                            v274 = v272 + 16;
                            v275 = v270 > v273;
                            if (v270 < v273)
                              v273 = v270;
                            *(_DWORD *)(v490 + 1576) = v273;
                            v276 = v275;
                            v277 = v269 > v274;
                            if (v269 < v274)
                              v274 = v269;
                            *(_DWORD *)(v490 + 1580) = v274;
                            if (v277)
                              v276 = 1;
                            if (v276)
                              v258 = v268;
                            else
                              v258 = v270;
                            if (v276)
                              v259 = v267;
                            else
                              v259 = v269;
                          }
                        }
                      }
                    }
LABEL_525:
                    if (!v140)
                    {
LABEL_532:
                      if (!v521[348] || !*(_DWORD *)(v139 + 368))
                      {
LABEL_552:
                        if (*(_BYTE *)(v556 + 136))
                        {
                          v303 = *(_DWORD *)(v558 + 356);
                          v8 = v136;
                          if (v303 < 1
                            || (v304 = *(_DWORD *)(v558 + 360), v304 < 1)
                            || (v305 = *(_DWORD *)(v558 + 364), v305 <= -((unsigned __int16)v141 >> 1))
                            || v303 > (unsigned __int16)v141
                            || (v306 = *(_DWORD *)(v558 + 368), v306 <= -((unsigned __int16)v142 >> 1))
                            || v304 > (unsigned __int16)v142
                            || (v307 = (unsigned __int16)v141 >> 1, v305 >= v307)
                            || (v308 = (unsigned __int16)v142 >> 1, v306 >= v308))
                          {
                            v325 = (unsigned __int16)v258 - 1;
                            *(_DWORD *)(v546 + 28) = 0;
                            *(_DWORD *)(v546 + 32) = v325;
                            v326 = (unsigned __int16)v259 - 1;
                            *(_DWORD *)(v546 + 36) = 0;
                            *(_DWORD *)(v546 + 40) = v326;
                            *(_BYTE *)(v546 + 24) = 0;
                            *(_BYTE *)(v546 + 26) = 0;
                            v327 = v325 >> 4;
                            *(_BYTE *)(v546 + 25) = v325 >> 4;
                            v328 = v326 >> 4;
                            *(_BYTE *)(v546 + 27) = v326 >> 4;
                            v329 = 1;
                            v330 = 1;
                            v12 = v517;
                            v150 = v554;
LABEL_590:
                            v331 = (v330 + v327) * (v329 + v328);
LABEL_591:
                            *(_DWORD *)(v546 + 44) = v331;
                            LOWORD(v142) = v259;
                            LOWORD(v141) = v258;
                            goto LABEL_220;
                          }
                          v309 = v307 - (v303 >> 1) + v305;
                          v310 = (int)(v309 * (unsigned __int16)v258) / (unsigned __int16)v141;
                          v311 = v310 & 0xFFFFFFF0;
                          v312 = (v310 & 0xFFFFFFF0) - 16;
                          if ((int)(v310 & 0xFFFFFFF0) < 17)
                            v312 = 0;
                          if ((v310 & 0xC) == 0)
                            v311 = v312;
                          v12 = v517;
                          v150 = v554;
                          if ((v311 & 0x80000000) != 0)
                          {
                            v318 = (unsigned __int16)v258 - 1;
                            v313 = (unsigned __int16)v259 - 1;
                          }
                          else
                          {
                            v313 = (unsigned __int16)v259 - 1;
                            v314 = v308 - (v304 >> 1) + v306;
                            v315 = (int)((unsigned __int16)v142 + (v304 + v314 - 1) * (unsigned __int16)v259 - 1)
                                 / (unsigned __int16)v142;
                            if ((v315 | 0xF) - v315 <= 3)
                              v316 = (v315 | 0xF) + 16;
                            else
                              v316 = v315 | 0xF;
                            if (v313 >= v316)
                              v317 = v316;
                            else
                              v317 = (unsigned __int16)v259 - 1;
                            v318 = (unsigned __int16)v258 - 1;
                            v319 = (int)((unsigned __int16)v141 + (v303 + v309 - 1) * (unsigned __int16)v258 - 1)
                                 / (unsigned __int16)v141;
                            if ((v319 | 0xF) - v319 <= 3)
                              v320 = (v319 | 0xF) + 16;
                            else
                              v320 = v319 | 0xF;
                            if (v318 >= v320)
                              v321 = v320;
                            else
                              v321 = (unsigned __int16)v258 - 1;
                            v322 = (int)(v314 * (unsigned __int16)v259) / (unsigned __int16)v142;
                            v323 = (v322 & 0xFFFFFFF0) - 16;
                            if ((int)(v322 & 0xFFFFFFF0) < 17)
                              v323 = 0;
                            if ((v322 & 0xC) != 0)
                              v324 = v322 & 0xFFFFFFF0;
                            else
                              v324 = v323;
                            if (v311 < (unsigned __int16)v258
                              && (v324 & 0x80000000) == 0
                              && (int)v324 < (unsigned __int16)v259
                              && v321 >= (int)v311
                              && v317 >= (int)v324)
                            {
                              v318 = v321;
                              v313 = v317;
LABEL_638:
                              v366 = v311 >> 4;
                              *(_DWORD *)(v546 + 28) = v311;
                              *(_DWORD *)(v546 + 32) = v318;
                              v367 = v324 >> 4;
                              v327 = v318 >> 4;
                              *(_DWORD *)(v546 + 36) = v324;
                              *(_DWORD *)(v546 + 40) = v313;
                              v328 = v313 >> 4;
                              *(_BYTE *)(v546 + 24) = v366;
                              *(_BYTE *)(v546 + 26) = v324 >> 4;
                              v330 = 1 - v366;
                              *(_BYTE *)(v546 + 25) = v327;
                              *(_BYTE *)(v546 + 27) = v328;
                              v329 = 1 - v367;
                              goto LABEL_590;
                            }
                          }
                          v311 = 0;
                          v324 = 0;
                          goto LABEL_638;
                        }
                        v333 = *(char **)(v33 + 128);
                        v332 = *(char **)(v33 + 136);
                        v334 = v333;
                        v335 = v332;
                        v336 = v159;
                        v337 = v160;
                        v8 = v136;
                        if ((*(_DWORD *)(a4 + 20) | 0x10) == 0x34323076)
                        {
                          v334 = *(char **)(a4 + 184);
                          v335 = *(char **)(a4 + 208);
                          v336 = *(unsigned __int16 *)(a4 + 192);
                          LODWORD(v160) = *(unsigned __int16 *)(a4 + 216);
                        }
                        v512 = v336;
                        v338 = *(_DWORD *)(v33 + 224);
                        v339 = *(_DWORD *)(v33 + 192);
                        if (v338 < v258)
                          v258 = *(_DWORD *)(v33 + 224);
                        if (v339 < v259)
                          LOWORD(v259) = *(_DWORD *)(v33 + 192);
                        v340 = *(_QWORD *)(a4 + 176);
                        v461 = *(_QWORD *)(v22 + 1776);
                        v474 = *(char **)(v22 + 1784);
                        v341 = (unsigned __int16)*(_DWORD *)(v33 + 192);
                        v467 = *(_DWORD *)(v138 + 1576);
                        v342 = *(_DWORD *)(v138 + 1580);
                        v343 = *((unsigned __int8 *)v13 + 683);
                        v344 = *((unsigned __int8 *)v13 + 684);
                        __src = v335;
                        v470 = (uint64_t *)(v138 + 1064);
                        v345 = *((_QWORD *)v13 + 647);
                        v465 = *(_DWORD *)(v33 + 1276);
                        v346 = (int8x8_t *)(v345 + 1080);
                        *(_QWORD *)(v345 + 1080) = v334;
                        *(_QWORD *)(v345 + 1096) = v333;
                        *(_QWORD *)(v345 + 1088) = v335;
                        *(_QWORD *)(v345 + 1104) = v332;
                        *(_QWORD *)(v345 + 1112) = v340;
                        *(_DWORD *)(v345 + 1120) = 1;
                        *(_DWORD *)(v345 + 1128) = 2;
                        *(_QWORD *)(v345 + 1152) = 0x400000008;
                        *(_DWORD *)(v345 + 1164) = v343;
                        *(_DWORD *)(v345 + 1172) = v344;
                        *(_QWORD *)(v345 + 1176) = 1;
                        *(_DWORD *)(v345 + 1188) = 0;
                        *(_DWORD *)(v345 + 1220) = 0;
                        v34 = 0uLL;
                        *(_QWORD *)(v345 + 1224) = 0;
                        *(_DWORD *)(v345 + 1232) = (unsigned __int16)v338;
                        v347 = (unsigned __int16)v258;
                        *(_DWORD *)(v345 + 1236) = (unsigned __int16)v258;
                        v466 = v339;
                        v348 = (unsigned __int16)v339;
                        v349 = v512;
                        *(_DWORD *)(v345 + 1240) = v348;
                        *(_WORD *)(v345 + 1320) = 1;
                        v350 = (unsigned __int16)v259;
                        *(_DWORD *)(v345 + 1244) = (unsigned __int16)v259;
                        *(_DWORD *)(v345 + 1248) = v512;
                        *(_DWORD *)(v345 + 1252) = v159;
                        v460 = v160;
                        *(_DWORD *)(v345 + 1256) = v160;
                        *(_DWORD *)(v345 + 1260) = v337;
                        *(_DWORD *)(v345 + 1272) = 0;
                        *(_QWORD *)(v345 + 1264) = 0;
                        *(_DWORD *)(v345 + 1168) = 0;
                        v351 = (unsigned __int16)v258 == (unsigned __int16)v338 && (unsigned __int16)v259 == v341;
                        v352 = v351;
                        *(_DWORD *)(v345 + 1160) = 0;
                        if (v351)
                        {
                          if (!v333)
                            goto LABEL_618;
                          v459 = v345 + 1080;
                          v458 = v342;
                          v457 = v338;
                          __n = (unsigned __int16)v338;
                          v471 = v348;
                          __b = v333;
                          v499 = v159;
                          v505 = v337;
                          v523 = v332;
                          v353 = v461;
                          if (!v332)
                            goto LABEL_618;
                        }
                        else
                        {
                          *(_DWORD *)(v345 + 1160) = 2;
                          if (*(_BYTE *)(*((_QWORD *)v13 + 647) + 1624))
                            v354 = 6;
                          else
                            v354 = 7;
                          *(_DWORD *)(v345 + 1128) = v354;
                          if (*((_BYTE *)v13 + 667))
                            v354 = 4;
                          *(_DWORD *)(v345 + 1128) = v354;
                          if (!v333 || !v332)
                            goto LABEL_618;
                          v455 = v352;
                          v463 = (unsigned __int16)v258;
                          v458 = v342;
                          v457 = v338;
                          __n = (unsigned __int16)v338;
                          v471 = v348;
                          __b = v333;
                          v523 = v332;
                          v480 = v258;
                          v499 = v159;
                          v505 = v337;
                          v487 = v143;
                          v493 = v138;
                          v353 = v461;
                          *(_QWORD *)(v345 + 1096) = v461;
                          *(_QWORD *)(v345 + 1104) = v474;
                          v355 = *v470;
                          v459 = v345 + 1080;
                          if (!*v470)
                          {
                            if (sub_1B68F7CC0(v470, (uint64_t)v346))
                            {
                              LOWORD(v142) = v259;
                              LOWORD(v141) = v480;
                              v12 = v517;
LABEL_744:
                              v150 = v554;
                              v33 = v537;
                              v138 = v493;
                              LOBYTE(v143) = v487;
                              goto LABEL_220;
                            }
                            v355 = *v470;
                            v346 = (int8x8_t *)(v345 + 1080);
                          }
                          v356 = sub_1B68F7E7C(v355, v346);
                          v33 = v537;
                          v138 = v493;
                          LOWORD(v258) = v480;
                          LOBYTE(v143) = v487;
                          v350 = (unsigned __int16)v259;
                          v347 = v463;
                          v349 = v512;
                          v352 = v455;
                          if (v356)
                          {
LABEL_618:
                            LOWORD(v142) = v259;
                            LOWORD(v141) = v258;
                            v12 = v517;
                            goto LABEL_219;
                          }
                        }
                        v462 = v350;
                        v464 = v347;
                        v481 = v258;
                        v487 = v143;
                        v493 = v138;
                        v533 = v26;
                        v357 = __src;
                        if (!*v550 || !*(_DWORD *)(v558 + 540) && !*(_DWORD *)(v558 + 544))
                        {
LABEL_648:
                          if ((v352 & 1) != 0)
                          {
                            if (v334 != __b || v357 != v523)
                            {
                              if ((_DWORD)v471)
                              {
                                v375 = v471;
                                v376 = __b;
                                v377 = v349;
                                do
                                {
                                  memcpy(v376, v334, __n);
                                  v376 += v499;
                                  v334 += v377;
                                  --v375;
                                }
                                while (v375);
                                v378 = __src;
                                if (v471 >= 2)
                                {
                                  v379 = v471 >> 1;
                                  v380 = v523;
                                  do
                                  {
                                    memcpy(v380, v378, __n);
                                    v380 += v505;
                                    v378 += v460;
                                    --v379;
                                  }
                                  while (v379);
                                }
                              }
                            }
                          }
                          else if ((_DWORD)v471)
                          {
                            v381 = 0;
                            v382 = v471;
                            do
                            {
                              memcpy(&__b[v381], (const void *)(v461 + v381), __n);
                              v381 += v499;
                              --v382;
                            }
                            while (v382);
                            if (v471 >= 2)
                            {
                              v383 = 0;
                              v384 = v471 >> 1;
                              do
                              {
                                memcpy(&v523[v383], &v474[v383], __n);
                                v383 += v505;
                                --v384;
                              }
                              while (v384);
                            }
                          }
LABEL_664:
                          v12 = v517;
                          v26 = v533;
                          v22 = v557;
                          v137 = v509;
                          if (v550[27] == 1)
                            goto LABEL_679;
                          v8 = v136;
                          v385 = *(_DWORD *)(v345 + 5336);
                          if (v385)
                            *(_DWORD *)(v345 + 5336) = --v385;
                          v386 = (int8x8_t *)v459;
                          v387 = *(_DWORD *)(v345 + 5340);
                          if (v387)
                          {
                            v388 = 0.0;
                            v389 = 0.0;
                            if (*(_BYTE *)(v558 + 673))
                              v389 = vaddvq_f64(vabdq_f64(vcvtq_f64_f32(*(float32x2_t *)(v345 + 5344)), *(float64x2_t *)(v506 + 244)))+ vabdd_f64(*(float *)(v345 + 5352), *(double *)(v558 + 584))+ vabdd_f64(*(float *)(v345 + 5356), *(double *)(v558 + 592));
                            if (*(_DWORD *)(v558 + 540) && *(float *)(v345 + 5384) > 0.0)
                              v388 = (float)((float)(vabds_f32(*(float *)(v345 + 5360), *(float *)(v558 + 404))
                                                   + vabds_f32(*(float *)(v345 + 5364), *(float *)(v558 + 408)))
                                           + vabds_f32(*(float *)(v345 + 5368), *(float *)(v558 + 412)))
                                   + vabds_f32(*(float *)(v345 + 5372), *(float *)(v558 + 416));
                          }
                          else
                          {
                            v389 = 0.0;
                            v388 = 0.0;
                          }
                          if ((float)(v389 + *(float *)(v345 + 5380)) > 0.025
                            || (float)(v388 + *(float *)(v345 + 5376)) > 0.1)
                          {
                            v385 = 5;
                            *(_DWORD *)(v345 + 5336) = 5;
                          }
                          v390 = *(double *)(v558 + 568);
                          *(float *)(v345 + 5344) = v390;
                          v391 = *(double *)(v558 + 576);
                          *(float *)(v345 + 5348) = v391;
                          v392 = *(double *)(v558 + 584);
                          *(float *)(v345 + 5352) = v392;
                          v393 = *(double *)(v558 + 592);
                          *(float *)(v345 + 5356) = v393;
                          *(_DWORD *)(v345 + 5360) = *(_DWORD *)(v558 + 404);
                          *(_DWORD *)(v345 + 5364) = *(_DWORD *)(v558 + 408);
                          *(_DWORD *)(v345 + 5368) = *(_DWORD *)(v558 + 412);
                          *(_DWORD *)(v345 + 5372) = *(_DWORD *)(v558 + 416);
                          *(float *)(v345 + 5384) = (float)*(unsigned int *)(v558 + 540);
                          *(float *)(v345 + 5380) = v389;
                          *(float *)(v345 + 5376) = v388;
                          *(_DWORD *)(v345 + 1168) = 64;
                          *(_DWORD *)(v345 + 1160) = 2;
                          *(_QWORD *)(v345 + 1080) = __b;
                          *(_QWORD *)(v345 + 1088) = v523;
                          *(_QWORD *)(v345 + 1264) = 0x100000001;
                          *(_DWORD *)(v345 + 1280) = (int)*(double *)(v558 + 664);
                          *(_BYTE *)(v345 + 1288) = *(_BYTE *)(v558 + 672);
                          *(_QWORD *)(v345 + 1112) = 0;
                          *(_DWORD *)(v345 + 1128) = 2;
                          *(_DWORD *)(v345 + 1232) = v464;
                          *(_DWORD *)(v345 + 1236) = v464;
                          *(_DWORD *)(v345 + 1240) = v462;
                          *(_DWORD *)(v345 + 1244) = v462;
                          *(_DWORD *)(v345 + 1248) = v499;
                          *(_DWORD *)(v345 + 1252) = v499;
                          *(_DWORD *)(v345 + 1256) = v505;
                          *(_DWORD *)(v345 + 1260) = v505;
                          *(_QWORD *)(v345 + 1096) = __b;
                          *(_QWORD *)(v345 + 1104) = v523;
                          *(_DWORD *)(v345 + 5340) = v387 + 1;
                          *(_DWORD *)(v345 + 1284) = v387;
                          *(_DWORD *)(v345 + 1316) = v385;
                          *(_BYTE *)(v345 + 1320) = 0;
                          v394 = *v470;
                          if (!*v470)
                          {
                            if (sub_1B68F7CC0(v470, v459))
                            {
LABEL_743:
                              LOWORD(v142) = v259;
                              LOWORD(v141) = v481;
                              goto LABEL_744;
                            }
                            v394 = *v470;
                            v386 = (int8x8_t *)v459;
                          }
                          if (!sub_1B68F7E7C(v394, v386))
                          {
LABEL_679:
                            v396 = (unsigned __int16)v467 > v481
                                || v458 > (unsigned __int16)v259;
                            if (v396)
                              v397 = v458;
                            else
                              v397 = v259;
                            if (v396)
                              v398 = v467;
                            else
                              v398 = v481;
                            v399 = *(_DWORD *)(v558 + 356);
                            if (v399 < 1
                              || (v400 = *(_DWORD *)(v558 + 360), v400 < 1)
                              || (v401 = *(_DWORD *)(v558 + 364), v401 <= (signed int)-(__n >> 1))
                              || v399 > __n
                              || (v402 = *(_DWORD *)(v558 + 368), v402 <= (signed int)-(v471 >> 1))
                              || v400 > v471
                              || v401 >= (int)(__n >> 1)
                              || v402 >= (int)(v471 >> 1))
                            {
                              *(_DWORD *)(v546 + 28) = 0;
                              *(_DWORD *)(v546 + 32) = v398 - 1;
                              v420 = v397 - 1;
                              *(_DWORD *)(v546 + 36) = 0;
                              *(_DWORD *)(v546 + 40) = v420;
                              *(_BYTE *)(v546 + 24) = 0;
                              *(_WORD *)(v546 + 25) = ((v398 - 1) >> 4);
                              *(_BYTE *)(v546 + 27) = v420 >> 4;
                              v421 = v397 >> 1;
                              if (v398 != v457)
                              {
                                if (v397)
                                {
                                  v514 = v398;
                                  v422 = &__b[v398];
                                  v423 = (int)(__n - v398);
                                  v424 = v397;
                                  do
                                  {
                                    memset(v422, 128, v423);
                                    v422 += v499;
                                    --v424;
                                  }
                                  while (v424);
                                  if (v397 >= 2u)
                                  {
                                    v425 = &v523[v514];
                                    if (v421 <= 1)
                                      v426 = 1;
                                    else
                                      v426 = v421;
                                    do
                                    {
                                      memset(v425, 128, v423);
                                      v425 += v505;
                                      --v426;
                                    }
                                    while (v426);
                                  }
                                }
                              }
                              if (v397 < v466)
                              {
                                v427 = &__b[v397 * (unint64_t)v499];
                                v428 = v471 - (unint64_t)v397;
                                do
                                {
                                  memset(v427, 128, __n);
                                  v427 += v499;
                                  --v428;
                                }
                                while (v428);
                              }
                              v12 = v517;
                              if (v421 < v471 >> 1)
                              {
                                v429 = (v471 >> 1) + (v397 >> 1) - v421 - (unint64_t)(v397 >> 1);
                                v430 = &v523[(v397 >> 1) * (unint64_t)v505];
                                do
                                {
                                  memset(v430, 128, __n);
                                  v430 += v505;
                                  --v429;
                                }
                                while (v429);
                              }
                              goto LABEL_792;
                            }
                            v527 = v13;
                            v403 = (__n >> 1) - (v399 >> 1) + v401;
                            v404 = v398;
                            v405 = (int)(v403 * v398) / (int)__n;
                            v406 = (v405 & 0xFFFFFFF0) - 16;
                            if ((int)(v405 & 0xFFFFFFF0) < 17)
                              v406 = 0;
                            if ((v405 & 0xC) != 0)
                              v407 = v405 & 0xFFFFFFF0;
                            else
                              v407 = v406;
                            v408 = v397;
                            v409 = __n - 1;
                            v507 = v471 >> 1;
                            if ((v407 & 0x80000000) != 0)
                            {
                              v416 = v404 - 1;
                              v410 = v397 - 1;
                            }
                            else
                            {
                              v410 = v397 - 1;
                              v411 = (v471 >> 1) - (v400 >> 1) + v402;
                              v412 = (int)(v471 - 1 + (v400 + v411 - 1) * v397) / (int)v471;
                              if ((v412 | 0xF) - v412 <= 3)
                                v413 = (v412 | 0xF) + 16;
                              else
                                v413 = v412 | 0xF;
                              if (v410 < v413)
                                v413 = v397 - 1;
                              v414 = (int)(v409 + (v399 + v403 - 1) * v404) / (int)__n;
                              if ((v414 | 0xF) - v414 <= 3)
                                v415 = (v414 | 0xF) + 16;
                              else
                                v415 = v414 | 0xF;
                              v416 = v404 - 1;
                              if ((int)(v404 - 1) < v415)
                                v415 = v404 - 1;
                              v417 = (int)(v411 * v397) / (int)v471;
                              v418 = (v417 & 0xFFFFFFF0) - 16;
                              if ((int)(v417 & 0xFFFFFFF0) < 17)
                                v418 = 0;
                              if ((v417 & 0xC) != 0)
                                v419 = v417 & 0xFFFFFFF0;
                              else
                                v419 = v418;
                              if (v407 < v404
                                && (v419 & 0x80000000) == 0
                                && v419 < v408
                                && v415 >= (int)v407
                                && v413 >= v419)
                              {
                                v416 = v415;
                                v410 = v413;
                                goto LABEL_755;
                              }
                            }
                            v407 = 0;
                            v419 = 0;
LABEL_755:
                            if (v416 >= 1 && v416 < v409)
                            {
                              if (v419 <= v410)
                              {
                                v432 = v410 - v419 + 1;
                                v433 = &__b[v416
                                          + 1
                                          + v419 * (unint64_t)v499];
                                do
                                {
                                  memset(v433, 128, (int)__n + ~v416);
                                  v433 += v499;
                                  --v432;
                                }
                                while (v432);
                              }
                              v434 = v419 >> 1;
                              if (v410 >= 0)
                                v435 = v410;
                              else
                                v435 = v410 + 1;
                              if ((int)v434 <= v435 >> 1)
                              {
                                v436 = ((v435 >> 1) + 1) - (unint64_t)v434;
                                v437 = &v523[v416 + 1 + v434 * (unint64_t)v505];
                                do
                                {
                                  memset(v437, 128, (int)__n + ~v416);
                                  v437 += v505;
                                  --v436;
                                }
                                while (v436);
                              }
                            }
                            if ((int)v407 >= 1 && (int)v407 < (int)__n)
                            {
                              if (v419 <= v410)
                              {
                                v438 = v410 - v419 + 1;
                                v439 = &__b[(int)v499 * (uint64_t)v419];
                                do
                                {
                                  memset(v439, 128, v407);
                                  v439 += v499;
                                  --v438;
                                }
                                while (v438);
                              }
                              v440 = v419 >> 1;
                              if (v410 >= 0)
                                v441 = v410;
                              else
                                v441 = v410 + 1;
                              if ((int)v440 <= v441 >> 1)
                              {
                                v442 = &v523[v440 * (unint64_t)v505];
                                v443 = ((v441 >> 1) + 1) - (unint64_t)v440;
                                do
                                {
                                  memset(v442, 128, v407);
                                  v442 += v505;
                                  --v443;
                                }
                                while (v443);
                              }
                            }
                            if (v419 >= 1 && v419 < (int)v471)
                            {
                              v444 = v419;
                              v445 = __b;
                              do
                              {
                                memset(v445, 128, __n);
                                v445 += v499;
                                --v444;
                              }
                              while (v444);
                              if (v419 >= 2)
                              {
                                v446 = v419 >> 1;
                                v447 = v523;
                                do
                                {
                                  memset(v447, 128, __n);
                                  v447 += v505;
                                  --v446;
                                }
                                while (v446);
                              }
                            }
                            if (v410 >= 1 && v410 < (int)v471 - 1)
                            {
                              v448 = ~(unint64_t)v410 + v471;
                              v449 = &__b[v499 + v499 * (unint64_t)v410];
                              do
                              {
                                memset(v449, 128, __n);
                                v449 += v499;
                                --v448;
                              }
                              while (v448);
                              v450 = (v410 + 1) >> 1;
                              if (v450 < v507)
                              {
                                v451 = &v523[v450 * (unint64_t)v505];
                                v452 = v507 - v450;
                                do
                                {
                                  memset(v451, 128, __n);
                                  v451 += v505;
                                  --v452;
                                }
                                while (v452);
                              }
                            }
                            *(_DWORD *)(v546 + 28) = v407;
                            *(_DWORD *)(v546 + 32) = v416;
                            *(_DWORD *)(v546 + 36) = v419;
                            *(_DWORD *)(v546 + 40) = v410;
                            *(_BYTE *)(v546 + 24) = v407 >> 4;
                            *(_BYTE *)(v546 + 26) = v419 >> 4;
                            *(_BYTE *)(v546 + 25) = v416 >> 4;
                            *(_BYTE *)(v546 + 27) = v410 >> 4;
                            v12 = v517;
                            v13 = v527;
LABEL_792:
                            v453 = *(unsigned __int8 *)(v546 + 25) - *(unsigned __int8 *)(v546 + 24) + 1;
                            v331 = v453 + v453 * (*(unsigned __int8 *)(v546 + 27) - *(unsigned __int8 *)(v546 + 26));
                            v26 = v533;
                            v22 = v557;
                            v8 = v136;
                            v150 = v554;
                            v33 = v537;
                            v137 = v509;
                            v138 = v493;
                            LOWORD(v258) = v481;
                            LOBYTE(v143) = v487;
                            goto LABEL_591;
                          }
                          goto LABEL_743;
                        }
                        v526 = v13;
                        v454 = (_BYTE *)(v546 + 52);
                        v358 = v505;
                        v456 = v352;
                        if (v352)
                        {
                          if (v334 != __b && __src != v523)
                          {
                            v353 = *(_QWORD *)(v345 + 1080);
                            v359 = *(_QWORD *)(v345 + 1096);
                            v360 = *(_QWORD *)(v345 + 1088);
                            v361 = *(_QWORD *)(v345 + 1104);
                            v362 = *(_DWORD *)(v345 + 1248);
                            v363 = *(_DWORD *)(v345 + 1252);
                            goto LABEL_647;
                          }
                          v358 = v505;
                          if ((_DWORD)v471)
                          {
                            v368 = v471;
                            v369 = (char *)v353;
                            v370 = v334;
                            do
                            {
                              memcpy(v369, v370, __n);
                              v369 += v499;
                              v370 += v512;
                              --v368;
                            }
                            while (v368);
                            v353 = v461;
                            v358 = v505;
                            if (v471 >= 2)
                            {
                              v371 = v471 >> 1;
                              v372 = v474;
                              v373 = __src;
                              do
                              {
                                memcpy(v372, v373, __n);
                                v372 += v505;
                                v373 += v460;
                                --v371;
                              }
                              while (v371);
                            }
                          }
                        }
                        *(_QWORD *)(v345 + 1112) = 0;
                        *(_QWORD *)(v345 + 1080) = v353;
                        v360 = (uint64_t)v474;
                        v359 = (uint64_t)__b;
                        *(_QWORD *)(v345 + 1088) = v474;
                        *(_QWORD *)(v345 + 1096) = __b;
                        v361 = (uint64_t)v523;
                        *(_QWORD *)(v345 + 1104) = v523;
                        *(_DWORD *)(v345 + 1248) = v499;
                        *(_DWORD *)(v345 + 1252) = v499;
                        v363 = v499;
                        *(_DWORD *)(v345 + 1256) = v358;
                        v362 = v499;
                        LODWORD(v505) = v358;
                        *(_DWORD *)(v345 + 1260) = v358;
LABEL_647:
                        v374 = sub_1B68EC740(v353, v359, v360, v361, v464, v462, v362, v363, v558, v470, (int8x8_t *)(v345 + 1040), v454, v537 + 19168, v465);
                        *(_DWORD *)(v558 + 544) = *v454;
                        v13 = v526;
                        v357 = __src;
                        v349 = v512;
                        LOBYTE(v352) = v456;
                        if (v374)
                          goto LABEL_664;
                        goto LABEL_648;
                      }
                      v281 = v22;
                      v282 = v26;
                      v283 = *(char **)(v33 + 136);
                      v564.value = *(_QWORD *)(v33 + 128);
                      value = v564.value;
                      *(_QWORD *)&v564.timescale = v283;
                      v285 = *(unsigned int *)(v33 + 232);
                      v286 = *(unsigned int *)(v33 + 248);
                      v568[0] = v285;
                      v568[1] = v286;
                      v566 = v285;
                      v567 = v286;
                      v287 = *(_QWORD *)(v281 + 1776);
                      v288 = *(_DWORD *)(a4 + 20) | 0x10;
                      v289 = *(char **)(v281 + 1784);
                      v290 = v283;
                      v291 = (char *)v564.value;
                      LODWORD(v292) = v286;
                      v293 = v285;
                      v565[0] = v287;
                      v565[1] = v289;
                      if (v288 == 875704438)
                      {
                        v291 = *(char **)(a4 + 184);
                        v290 = *(char **)(a4 + 208);
                        v293 = *(_DWORD *)(a4 + 192);
                        v292 = *(int *)(a4 + 216);
                        v566 = v293;
                        v567 = v292;
                      }
                      v294 = *(_QWORD *)(v557 + 5416);
                      if (!*(_DWORD *)(v294 + 368) || !v291 || !v290 || !v564.value || !v283 || !v287 || !v289)
                      {
LABEL_551:
                        v26 = v282;
                        v22 = v557;
                        v137 = v509;
                        goto LABEL_552;
                      }
                      v479 = v258;
                      v498 = v159;
                      v504 = v160;
                      v486 = v143;
                      v295 = *(_DWORD *)(v33 + 228);
                      v296 = *(_DWORD *)(v33 + 196);
                      v297 = *(_QWORD *)(a4 + 176);
                      v298 = *((unsigned __int8 *)v13 + 684);
                      v492 = v138;
                      v299 = (uint64_t *)(v138 + 1064);
                      v300 = *((_QWORD *)v13 + 647);
                      v301 = (int8x8_t *)(v300 + 1080);
                      *(_QWORD *)(v300 + 1080) = v291;
                      *(_QWORD *)(v300 + 1088) = v290;
                      *(_DWORD *)(v300 + 1248) = v293;
                      *(_DWORD *)(v300 + 1256) = v292;
                      if (*(_DWORD *)(v294 + 368) != 1)
                        value = v287;
                      *(_QWORD *)(v300 + 1096) = value;
                      if (*(_DWORD *)(v294 + 368) != 1)
                        v283 = v289;
                      *(_QWORD *)(v300 + 1104) = v283;
                      *(_DWORD *)(v300 + 1252) = v285;
                      *(_DWORD *)(v300 + 1260) = v286;
                      *(_DWORD *)(v300 + 1232) = v295;
                      v522 = v295;
                      *(_DWORD *)(v300 + 1236) = v295;
                      *(_DWORD *)(v300 + 1240) = v296;
                      *(_DWORD *)(v300 + 1244) = v296;
                      *(_QWORD *)(v300 + 1112) = v297;
                      *(_DWORD *)(v300 + 1120) = 1;
                      *(_DWORD *)(v300 + 1128) = 2;
                      *(_OWORD *)(v300 + 1152) = xmmword_1B6917F10;
                      *(_DWORD *)(v300 + 1172) = v298;
                      *(_QWORD *)(v300 + 1176) = 1;
                      *(_DWORD *)(v300 + 1188) = 0;
                      *(_DWORD *)(v300 + 1220) = 0;
                      *(_QWORD *)(v300 + 1224) = 0;
                      *(_DWORD *)(v300 + 1272) = 0;
                      *(_QWORD *)(v300 + 1264) = 0;
                      *(_DWORD *)(v300 + 1168) = 0;
                      *(_WORD *)(v300 + 1320) = 0;
                      v302 = *v299;
                      if (!*v299)
                      {
                        v476 = (uint64_t *)(v138 + 1064);
                        v513 = v301;
                        if (sub_1B68F7CC0((uint64_t *)(v138 + 1064), (uint64_t)v301))
                        {
LABEL_630:
                          CFLog();
                          v12 = v517;
                          v26 = v282;
                          v22 = v557;
LABEL_635:
                          v8 = v136;
                          v150 = v554;
                          v11 = v558;
                          v33 = v537;
                          goto LABEL_223;
                        }
                        v302 = *v476;
                        v301 = v513;
                      }
                      if (!sub_1B68F7E7C(v302, v301))
                      {
                        v33 = v537;
                        v138 = v492;
                        v159 = v498;
                        v258 = v479;
                        LOBYTE(v143) = v486;
                        v160 = v504;
                        if (*(_DWORD *)(v294 + 368) == 2)
                        {
                          sub_1B68C30F0(v291, v290, &v566, v565, v568, (char **)&v564, v568, v522, v296, v522, v296, *(_QWORD *)(v294 + 208), *(_QWORD *)(v294 + 216));
                          v258 = v479;
                          v159 = v498;
                          v160 = v504;
                          LOBYTE(v143) = v486;
                          v138 = v492;
                          v33 = v537;
                        }
                        goto LABEL_551;
                      }
                      goto LABEL_630;
                    }
                    if ((*(_DWORD *)(a4 + 20) | 0x10) == 0x34323076)
                    {
                      *(_QWORD *)(v140 + 8 * *(int *)(v140 + 68) + 3464) = *(_QWORD *)(a4 + 176);
                      goto LABEL_532;
                    }
                    v478 = v258;
                    v497 = v159;
                    v503 = v160;
                    v485 = v143;
                    v278 = v141;
                    v279 = v142;
                    if (!*(_BYTE *)(v22 + 180))
                    {
                      v278 = *(_DWORD *)(v33 + 224);
                      v279 = *(_DWORD *)(v33 + 192);
                    }
                    v280 = *(__CVBuffer **)(a4 + 176);
                    v491 = v138;
                    if (v280)
                    {
LABEL_531:
                      sub_1B68B02E0(v280, v511, v278, v279);
                      *(_QWORD *)(v140 + 3464 + 8 * *(int *)(v140 + 68)) = *(_QWORD *)(a4 + 176);
                      *(_QWORD *)(a4 + 176) = 0;
                      CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(v140 + 3464 + 8 * *(int *)(v140 + 68)), 0);
                      v138 = v491;
                      v159 = v497;
                      v33 = v537;
                      v258 = v478;
                      LOBYTE(v143) = v485;
                      v160 = v503;
                      goto LABEL_532;
                    }
                    v564.value = 0;
                    v364 = *(__CVPixelBufferPool **)(v140 + 16);
                    v475 = v278;
                    __na = v279;
                    if (!v364)
                    {
                      if (sub_1B68B0E10((CVPixelBufferPoolRef *)(v140 + 16), v278, v279, *((unsigned __int8 *)v13 + 4851)))goto LABEL_634;
                      v364 = *(__CVPixelBufferPool **)(v140 + 16);
                    }
                    PixelBuffer = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v364, (CVPixelBufferRef *)&v564);
                    v280 = (__CVBuffer *)v564.value;
                    *(_QWORD *)(a4 + 176) = v564.value;
                    if (!PixelBuffer)
                    {
                      v137 = v509;
                      v278 = v475;
                      v279 = __na;
                      goto LABEL_531;
                    }
LABEL_634:
                    CFLog();
                    v12 = v517;
                    goto LABEL_635;
                  }
LABEL_489:
                  v263 = v258;
                  v258 = v259;
                  v259 = v263;
                  goto LABEL_490;
                }
                v262 = *((_QWORD *)v260 + 98) + 8 * (char)v260[148];
                v258 = *(__int16 *)(v262 + 4);
                v259 = *(__int16 *)(v262 + 6);
              }
              if (v141 > v142 && v258 < v259)
                goto LABEL_489;
              goto LABEL_487;
            }
            v162 = *(_DWORD *)(v161 + 744);
            if (!v162)
            {
              *(_BYTE *)(v161 + 148) = 0;
LABEL_477:
              v146 = *(unsigned __int8 *)(v22 + 1057);
              goto LABEL_478;
            }
            v163 = *(_DWORD *)v558;
            if (v162 == 4)
            {
              v164 = *(_DWORD *)(v161 + 804);
              if ((v164 - 2) >= 4)
              {
                if (v164 == 1)
                {
                  if (v163 <= 300000)
                  {
                    v165 = (300000 - v163) / 0xC350u;
                    goto LABEL_251;
                  }
                }
                else if (!v164 && v163 <= 200000)
                {
                  v166 = 6 * (200000 - v163) / 200000 + 1;
                  goto LABEL_458;
                }
              }
              else if (v163 <= 420000)
              {
                v165 = (420000 - v163) / 0x11170u;
LABEL_251:
                v166 = v165 + 1;
LABEL_458:
                if (v166 >= 31)
                  LOBYTE(v166) = 31;
                *(_BYTE *)(v161 + 148) = v166;
                goto LABEL_477;
              }
              v166 = 0;
              goto LABEL_458;
            }
            if (*(_BYTE *)(v161 + 760))
            {
              v249 = *(unsigned int *)(v161 + 804);
              v488 = v138;
              v494 = *(unsigned __int16 *)(v33 + 232);
              v477 = *(_DWORD *)v558;
              v482 = v143;
              v500 = *(unsigned __int16 *)(v33 + 248);
              v250 = sub_1B68B7A48(*(_QWORD *)(v161 + 784), v163, dword_1B6931AE8[v249], dword_1B6931B00[v249], dword_1B6931B18[v249], dword_1B6931B30[v249], dword_1B6931B48[v249], dword_1B6931B60[v249], *(_BYTE *)(v161 + 761));
              v163 = v477;
              LOBYTE(v143) = v482;
              v159 = v494;
              v160 = v500;
              v138 = v488;
              v33 = v537;
LABEL_436:
              if (v250 >= 31)
                v251 = 31;
              else
                v251 = v250;
              *(_BYTE *)(v161 + 148) = v251;
              *(_BYTE *)(v161 + 150) = v251;
              if (v163 > 269999)
              {
LABEL_473:
                if (v163 > 0x5F36F)
                  v257 = 2;
                else
                  v257 = 1;
                *(_BYTE *)(v161 + 725) = v257;
                goto LABEL_477;
              }
              goto LABEL_440;
            }
            switch(*(_DWORD *)(v161 + 804))
            {
              case 0:
                if (v163 < 30000 || *(_BYTE *)(v161 + 741))
                {
                  v250 = 0;
                  v252 = (float *)(*(_QWORD *)(v161 + 784) + 4);
                  v34.n128_u32[0] = 4.0;
                  while (*(__int16 *)v252 > 192 || *(v252 - 1) > 4.0)
                  {
                    ++v250;
                    v252 += 2;
                  }
                }
                else
                {
                  if (v163 <= 0x30D40)
                  {
                    *(_BYTE *)(v161 + 148) = 6 * (200000 - v163) / 0x30D40u + 1;
                    *(_BYTE *)(v161 + 150) = 6 * (200000 - v163) / 0x30D40u + 1;
                    v22 = v557;
                    v33 = v537;
LABEL_440:
                    *(_BYTE *)(v161 + 725) = 0;
                    goto LABEL_477;
                  }
                  v250 = 0;
                }
                v22 = v557;
                v33 = v537;
                goto LABEL_436;
              case 1:
                v495 = *(unsigned __int16 *)(v33 + 232);
                v501 = *(unsigned __int16 *)(v33 + 248);
                v483 = v143;
                v489 = v138;
                if (*(_BYTE *)(v161 + 800))
                {
                  v253 = *(_DWORD *)v558;
                  v250 = sub_1B68B7A48(*(_QWORD *)(v161 + 784), v163, 192, 4, 30000, 320, 15, 200000, *(_BYTE *)(v161 + 761));
                  v163 = v253;
                  v22 = v557;
                  v33 = v537;
                  v138 = v489;
                  v159 = v495;
                  LOBYTE(v143) = v483;
                  v160 = v501;
                  goto LABEL_436;
                }
                v254 = 300000;
                v22 = v557;
                v33 = v537;
                v159 = v495;
                if (v163 > 300000)
                {
LABEL_472:
                  *(_BYTE *)(v161 + 148) = 0;
                  *(_BYTE *)(v161 + 150) = 0;
                  goto LABEL_473;
                }
                v431 = 14 * (300000 - v163);
LABEL_752:
                v250 = v431 / v254 + 1;
                goto LABEL_436;
              case 2:
                if (v163 > 420000)
                  goto LABEL_472;
                v250 = (420000 - v163) / 0x6D60u + 1;
                goto LABEL_436;
              case 3:
                v254 = 660000;
                if (v163 > 660000)
                  goto LABEL_472;
                v255 = 660000 - v163;
                v256 = 21;
                goto LABEL_751;
              case 4:
                v254 = 650000;
                goto LABEL_471;
              case 5:
                v254 = 1000000;
LABEL_471:
                if (v163 > v254)
                  goto LABEL_472;
                v255 = v254 - v163;
                v256 = 22;
LABEL_751:
                v431 = v255 * v256;
                goto LABEL_752;
              default:
                v250 = 0;
                goto LABEL_436;
            }
          }
          if (*(_BYTE *)(v510 + 28) || !*(_BYTE *)(v11 + 708))
          {
            *(_DWORD *)(v510 + 332) = 0;
            *(_QWORD *)(v510 + 336) = 0;
            *(_BYTE *)(v510 + 349) = 0;
            v84 = v534;
            goto LABEL_120;
          }
          v84 = v534;
          if (!*(_BYTE *)(*(_QWORD *)(v22 + 136) + 4850))
          {
            v169 = 1;
LABEL_422:
            *(_DWORD *)(v510 + 340) = v169;
LABEL_120:
            if (*(_BYTE *)(v510 + 349) && (v85 = *(_DWORD *)(v510 + 332), v85 >= 1))
            {
              v86 = *(_DWORD *)(v510 + 24);
              *(_BYTE *)(v510 + 350) = v85 > v86;
              if (v85 > v86)
                *(_BYTE *)(*(_QWORD *)(v22 + 144) + 716) = 1;
            }
            else
            {
              *(_BYTE *)(v510 + 350) = 0;
            }
            if (*(_BYTE *)(*(_QWORD *)(v22 + 144) + 716) && !*((_DWORD *)v84 + 186))
            {
              v87 = v84[148];
              if (v87)
              {
                *((_DWORD *)v84 + 27) = 0;
                *((_DWORD *)v84 + 202) = 0;
                v84[150] = v87;
                v84[148] = 0;
              }
              if (v84[104])
              {
                *((_DWORD *)v84 + 43) = 0;
                *((_DWORD *)v84 + 202) = 0;
                v84[104] = 0;
              }
            }
            CMTimeMake(&v564, *(int *)(a4 + 88), *(_DWORD *)(a4 + 100));
            v34 = *(__n128 *)&v564.value;
            *(CMTime *)(v510 + 240) = v564;
            v33 = v537;
            goto LABEL_132;
          }
          v97 = *(_DWORD *)(v510 + 332);
          if (!v534[776])
            ++v97;
          *(_DWORD *)(v510 + 332) = v97;
          v98 = *(_DWORD *)(v510 + 336) + v534[776];
          *(_DWORD *)(v510 + 336) = v98;
          if (v97)
          {
            if (v97 <= dword_1B69355D8[*(int *)(v545 + 216)])
            {
              *(_DWORD *)(v510 + 340) = 0;
LABEL_419:
              v244 = *(_DWORD *)(v510 + 24);
              if (v97 >= v244 || v98 + v97 < ((28 - v244) & ~((28 - v244) >> 31)))
                goto LABEL_120;
              v169 = 2;
              goto LABEL_422;
            }
            v99 = 3;
          }
          else
          {
            v99 = 2;
          }
          *(_DWORD *)(v510 + 340) = v99;
          goto LABEL_419;
        }
LABEL_72:
        v43 = 1;
        goto LABEL_389;
      }
      v564.value = 0;
      if (v47 - 255 < 0xFFFFFF00)
        goto LABEL_72;
    }
    else
    {
      v564.value = 0;
    }
    v54 = !*(_BYTE *)(v29 + 60) || *(_BYTE *)(v29 + 61) || *(_BYTE *)(v29 + 62) != 0;
    if (sub_1B68B3E0C(&v564.value, *(_DWORD *)(v29 + 8), *(_DWORD *)(v29 + 12), *(_DWORD *)(v29 + 16), *(_DWORD *)(v29 + 20), *(_QWORD *)v29, v54))goto LABEL_72;
    v58 = a7;
    v59 = v564.value;
    *(_BYTE *)(v564.value + 1355) = 0;
    *(_BYTE *)(v59 + 99) = 0;
    sub_1B68B4998(v59, *(unsigned __int8 *)(v29 + 60));
    *(_QWORD *)(*(_QWORD *)(v29 + 40) + 8 * *(unsigned int *)(v29 + 48)) = v59;
    *(_QWORD *)(*(_QWORD *)(v29 + 32) + 8 * *(unsigned int *)(v29 + 24)) = v59;
    a7 = v58;
    v11 = v558;
    ++*(_DWORD *)(v29 + 48);
    v60 = *(_DWORD *)(v29 + 24);
    v30 = v60 + 1;
    *(_DWORD *)(v29 + 24) = v60 + 1;
    if (v60 == -1)
      goto LABEL_72;
    goto LABEL_21;
  }
  **(_DWORD **)(v22 + 128) = 1;
  v44 = *(_QWORD *)(v22 + 144);
  if (v44)
    *(_BYTE *)(v22 + 207942) = *(_BYTE *)(v44 + 68);
  v45 = v22 + 205800;
  if (*(_BYTE *)(*(_QWORD *)(v22 + 136) + 577) == 1)
  {
    if (*(_BYTE *)(v22 + 208076))
      v46 = v554 == 0;
    else
      v46 = 1;
    if (v46)
      goto LABEL_281;
  }
  else if (!v554)
  {
    goto LABEL_281;
  }
  if (!*((_BYTE *)v13 + 4850))
    goto LABEL_62;
  v53 = sub_1B689D9F0((uint64_t)v554, *((_QWORD *)v13 + 648), v13, v22, 0, v27);
  if ((_DWORD)v53)
  {
LABEL_228:
    v43 = v53;
    goto LABEL_388;
  }
  sub_1B68A17B8(v554, (uint64_t)v26, v548, &v562);
LABEL_281:
  v175 = v562;
  if (v562 > v548)
  {
    v43 = 4294958327;
    goto LABEL_389;
  }
  v516 = a7;
  if (!*((_BYTE *)v13 + 317) || !v562 || !*((_BYTE *)v13 + 336))
  {
    *((_DWORD *)v13 + 88) = 0;
    *((_QWORD *)v13 + 43) = 0;
    goto LABEL_309;
  }
  if (!v550[38])
  {
LABEL_62:
    CFLog();
    v43 = 4294967246;
    goto LABEL_389;
  }
  *((_DWORD *)v13 + 88) = v562;
  v176 = *v13;
  v543 = v13[1];
  v538 = (int)(v543 * v176);
  v177 = (char *)malloc_type_calloc((unint64_t)(3 * v175 * v538) >> 1, 1uLL, 0x4AE20AB7uLL);
  if (!v177)
    goto LABEL_32;
  v531 = v26;
  v524 = v13;
  *((_QWORD *)v13 + 43) = v177;
  v178 = v543;
  if ((int)v175 >= 1)
  {
    v179 = 0;
    v180 = v538 + 3;
    if ((int)v538 >= 0)
      v180 = v543 * v176;
    v535 = (uint64_t)v180 >> 2;
    v181 = (uint64_t)(int)(3 * v538 + (3 * (int)v538 < 0)) >> 1;
    v182 = v175;
    v183 = v176 >> 1;
    if (v183 <= 1)
      v184 = 1;
    else
      v184 = v183;
    v518 = v12;
    v529 = v8;
    do
    {
      if (v177)
      {
        if (v178)
        {
          v549 = v182;
          v551 = v179;
          v185 = &v177[v538];
          v186 = &v177[v538 + v535];
          v187 = v531[v179];
          v188 = *(char **)(v187 + 128);
          v547 = v187;
          v189 = *(unsigned int *)(v187 + 232);
          v190 = v178;
          v560 = v177;
          v191 = v177;
          do
          {
            memcpy(v191, v188, v176);
            v191 += v176;
            v188 += v189;
            --v190;
          }
          while (v190);
          v178 = v543;
          v12 = v518;
          v8 = v529;
          v45 = v556;
          v11 = v558;
          v177 = v560;
          v182 = v549;
          v179 = v551;
          v181 = (uint64_t)(int)(3 * v538 + (3 * (int)v538 < 0)) >> 1;
          if (v543 >= 2)
          {
            v192 = 0;
            v193 = *(unsigned int *)(v547 + 248);
            v194 = *(_QWORD *)(v547 + 136) + 1;
            do
            {
              if (v176 >= 2)
              {
                v195 = 0;
                v196 = (char *)v194;
                do
                {
                  v185[v195] = *(v196 - 1);
                  v197 = *v196;
                  v196 += 2;
                  v186[v195++] = v197;
                }
                while (v184 != v195);
              }
              v185 += v183;
              v186 += v183;
              ++v192;
              v194 += v193;
            }
            while (v192 != v543 >> 1);
            v182 = v562;
          }
        }
      }
      ++v179;
      v177 += v181;
      v22 = v557;
    }
    while (v179 < (int)v182);
  }
  LODWORD(v175) = 0;
  v562 = 0;
  v13 = v524;
  v26 = v531;
  v24 = v536;
LABEL_309:
  if (v24)
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v24 + 3888), 0xFFFFFFFFFFFFFFFFLL);
  if ((_DWORD)v175)
  {
    v525 = v13;
    v530 = v8;
    v519 = v12;
    v198 = 0;
    v552 = v175;
    v532 = v26;
    while (1)
    {
      v199 = v26[v198];
      if (*(_BYTE *)(v199 + 1354) && *(_BYTE *)(v199 + 98) && (a6 & 1) == 0)
      {
        v200 = v26[(v198 - 1)];
        *(_QWORD *)(v199 + 1344) = v200;
        *(_QWORD *)(v200 + 1344) = v199;
      }
      v201 = *(_QWORD *)v45;
      v202 = *(_DWORD *)(v199 + 1280);
      v203 = *(unsigned __int8 *)(v199 + 1393);
      if (!*(_BYTE *)(v199 + 1393))
      {
        if (*(_BYTE *)(*(_QWORD *)(v22 + 136) + 4848))
        {
          v212 = *(_QWORD *)(v22 + 5392);
          if (v212)
            v202 += *(_DWORD *)(v212 + 116);
        }
      }
      *(_DWORD *)(v199 + 1280) = v202;
      v561 = *(_BYTE *)(*(_QWORD *)(v22 + 136) + 4850);
      v204 = *(_QWORD *)(v201 + 22816);
      if (v203)
        v205 = 1;
      else
        v205 = v204 == 0;
      if (v205)
      {
        v206 = v201 + 16;
        v207 = v201 + 22056;
        if (v204)
          v208 = v204 == v207;
        else
          v208 = 1;
        v209 = v201 + 16;
        if (!v208)
        {
          v210 = v201 - 744;
          v211 = 1;
          while (1)
          {
            v210 += 760;
            if (v210 == v204)
              break;
            if (++v211 == 30)
            {
              v204 = 0;
              *(_QWORD *)(v201 + 22816) = 0;
              goto LABEL_356;
            }
          }
          v209 = v206 + 760 * v211;
        }
        *(_QWORD *)(v201 + 22816) = v209;
        if (v209 == *(_QWORD *)(v201 + 22824))
        {
          v213 = 0;
          v214 = v209;
          while (1)
          {
            v215 = v201 + 16;
            if (v214)
            {
              v215 = v201 + 16;
              if (v214 != v207)
              {
                v216 = v201 - 744;
                v217 = 1;
                while (1)
                {
                  v216 += 760;
                  if (v216 == v214)
                    break;
                  if (++v217 == 30)
                  {
                    v214 = 0;
                    goto LABEL_349;
                  }
                }
                v215 = v206 + 760 * v217;
              }
            }
            v218 = *(unsigned int *)(v215 + 12);
            if ((_DWORD)v218)
              break;
LABEL_348:
            v214 = v215;
LABEL_349:
            if (v214 != v209 && ++v213 != 30)
              continue;
            goto LABEL_353;
          }
          v219 = 0;
          v220 = 8 * v218;
          while (*(_BYTE *)(*(_QWORD *)(v215 + v219 + 216) + 1399))
          {
            v219 += 8;
            if (v220 == v219)
              goto LABEL_348;
          }
          v214 = v215;
LABEL_353:
          *(_QWORD *)(v201 + 22824) = v214;
        }
        *(_DWORD *)(v209 + 208) = 0;
        *(_QWORD *)v209 = 0;
        *(_QWORD *)(v209 + 8) = 0;
        *(_DWORD *)(v209 + 16) = 0;
        *(_QWORD *)(v209 + 24) = 0;
        *(_QWORD *)(v209 + 32) = 0;
        *(_QWORD *)(v209 + 40) = 0xFFFFFFFFLL;
        v204 = *(_QWORD *)(v201 + 22816);
        if (!*(_QWORD *)(v201 + 22824))
          *(_QWORD *)(v201 + 22824) = v204;
      }
LABEL_356:
      v221 = *(unsigned int *)(v204 + 12);
      if (v221 >= 0x44)
      {
        v222 = (uint64_t *)(v204 + 216);
        v223 = *(unsigned int *)(v204 + 12);
        while (1)
        {
          v224 = *v222;
          if (!*v222)
            break;
          if (!*(_BYTE *)(v224 + 1394))
          {
            v225 = *(void **)(v224 + 5016);
            if (v225)
            {
              free(v225);
              *(_QWORD *)(v224 + 5016) = 0;
            }
            *(_BYTE *)(v224 + 2) = 0;
            *v222 = 0;
          }
          ++v222;
          if (!--v223)
          {
            v226 = 0;
            v227 = (_QWORD *)(v204 + 216);
            do
            {
              if (*v227)
                *(_QWORD *)(v204 + 216 + 8 * v226++) = *v227;
              ++v227;
              --v221;
            }
            while (v221);
            *(_DWORD *)(v204 + 12) = v226;
            break;
          }
        }
        v204 = *(_QWORD *)(v201 + 22816);
        v221 = *(unsigned int *)(v204 + 12);
        v13 = v525;
        v26 = v532;
        v45 = v556;
        v22 = v557;
        if (v221 >= 0x44)
          break;
      }
      *(_BYTE *)(v199 + 2) = v561;
      *(_QWORD *)(v204 + 8 * v221 + 216) = v199;
      ++*(_DWORD *)(*(_QWORD *)(v201 + 22816) + 12);
      v228 = *(int **)(v201 + 22816);
      v229 = v202 << (*(_BYTE *)(v199 + 1354) == 0);
      *v228 = v229;
      v228[6] = v229;
      v228[7] = v229;
      v230 = *(int32x2_t **)(v201 + 22816);
      v231 = v230[3];
      *(_DWORD *)(v199 + 1288) = v230->i32[0];
      *(int32x2_t *)(v199 + 1292) = vrev64_s32(v231);
      *(_QWORD *)(v199 + 1300) = 0;
      *(_WORD *)(v199 + 1398) = 0;
      *(_BYTE *)(v199 + 1401) = 0;
      ++v198;
      v11 = v558;
      if (v198 == v552)
      {
        v43 = 0;
        v232 = 1;
        v12 = v519;
        v8 = v530;
        goto LABEL_374;
      }
    }
    v43 = 4294958327;
    CFLog();
    v232 = 0;
    v12 = v519;
    v8 = v530;
    v11 = v558;
  }
  else
  {
    v43 = 0;
    v232 = 1;
  }
LABEL_374:
  if (v536)
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v536 + 3888));
  if ((v232 & 1) == 0)
    goto LABEL_388;
  if (*(_DWORD *)(v553 + 20))
  {
    if (!v11)
      goto LABEL_385;
    *(_DWORD *)(v553 + 24) = *(_DWORD *)(v11 + 88);
    v233 = *(unsigned int *)(v11 + 88);
    if (v233 > 8)
    {
      *(_DWORD *)(v553 + 24) = 0;
      v43 = 4294958327;
      goto LABEL_388;
    }
    memcpy((void *)(v22 + 207924), (const void *)(v11 + 92), 2 * v233);
  }
  if (v11 && *(_DWORD *)(v553 + 84))
  {
    *(_DWORD *)(v553 + 88) = *(_DWORD *)(v11 + 108);
    v234 = *(unsigned int *)(v11 + 108);
    if (v234 > 8)
    {
      *(_DWORD *)(v553 + 88) = 0;
      v43 = 4294958327;
      goto LABEL_388;
    }
    memcpy((void *)(v22 + 207988), (const void *)(v11 + 112), 2 * v234);
  }
LABEL_385:
  if (*(_DWORD *)(v553 + 108))
  {
    v235 = sub_1B68EC570(v11, v22);
    if ((_DWORD)v235)
    {
      v43 = v235;
      goto LABEL_388;
    }
  }
  v240 = *((_DWORD *)v13 + 105);
  *(_DWORD *)(v45 + 2076) = *((_DWORD *)v13 + 106);
  if (v11 && *(_WORD *)(v11 + 148))
    v240 = *(unsigned __int16 *)(v11 + 148);
  *(_DWORD *)(v45 + 2072) = v240;
  v241 = sub_1B68DB1C4(v22, (uint64_t)v554, v540, v539, v544, a6, v516, v12);
  if ((_DWORD)v241)
  {
    v43 = v241;
    goto LABEL_388;
  }
  v242 = *(_QWORD *)(v45 + 40);
  if (v242)
  {
    *(_DWORD *)(*(_QWORD *)v541 + 1584) = *(_DWORD *)(v242 + 1276);
    *(double *)(*(_QWORD *)v541 + 1592) = *(float *)(v242 + 4940);
  }
  if (!v536 || *(_BYTE *)(v536 + 32))
  {
    *(_DWORD *)(*(_QWORD *)(v22 + 128) + 8) = 0;
    sub_1B68EC5FC((uint64_t)v13, *((_QWORD *)v13 + 646), v22, *(_QWORD *)(v45 + 40), (_DWORD *)(*(_QWORD *)(v22 + 128) + 8));
    v43 = 0;
    *v8 = *(_DWORD *)(*(_QWORD *)(v22 + 128) + 8);
    goto LABEL_389;
  }
LABEL_409:
  v43 = 0;
LABEL_389:
  free(v26);
  if (*((_DWORD *)v13 + 93) == 1)
  {
    v236 = *(pthread_mutex_t **)(v12 + 248);
    if (v236)
      pthread_mutex_lock(v236);
    *(_DWORD *)v12 = 0;
    v237 = *(pthread_cond_t **)(v12 + 256);
    if (v237)
      pthread_cond_signal(v237);
    v238 = *(pthread_mutex_t **)(v12 + 248);
    if (v238)
      pthread_mutex_unlock(v238);
  }
  return v43;
}

uint64_t sub_1B68EC570(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if (result)
  {
    v3 = result;
    *(_DWORD *)(a2 + 208008) = *(_DWORD *)(result + 128);
    v4 = *(unsigned int *)(result + 128);
    if (v4 > 8)
    {
      *(_DWORD *)(a2 + 208008) = 0;
      return 4294958327;
    }
    else
    {
      memcpy((void *)(a2 + 208012), (const void *)(result + 132), 2 * v4);
      if (*(_DWORD *)(v3 + 128))
      {
        v5 = 0;
        do
          *(_DWORD *)(a2 + 208028 + 4 * v5++) = 0;
        while (v5 < *(unsigned int *)(v3 + 128));
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B68EC5FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  _DWORD *v6;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;

  if (a4)
  {
    v6 = (_DWORD *)(a3 + 205800);
    if (*(_BYTE *)(result + 660) && *(_BYTE *)(a4 + 17))
    {
      *a5 = 1;
      v8 = *(_QWORD *)v6;
      v9 = (_DWORD *)(*(_QWORD *)v6 + 23700);
      *(_WORD *)(a4 + 1398) = 257;
      *(_BYTE *)(a4 + 2) = 0;
      *(_BYTE *)(a4 + 1394) = 0;
      *(_BYTE *)(a4 + 1356) = 0;
      *v9 = v9[1];
      result = sub_1B68B8CE0(0, *(_QWORD *)(v8 + 22824));
      if ((_DWORD)result)
        return CFLog();
      if (*(_BYTE *)(a4 + 1368) == 5 || !*(_BYTE *)(a4 + 1368))
      {
        v10 = *(unsigned int *)(a2 + 32);
        if (v10 < *(_DWORD *)(a2 + 8) - 1)
        {
          v11 = 16 * v10;
          do
          {
            ++v10;
            *(_OWORD *)(*(_QWORD *)a2 + v11) = *(_OWORD *)(*(_QWORD *)a2 + v11 + 16);
            *(_DWORD *)(*(_QWORD *)a2 + v11 + 8) &= ~2u;
            v11 += 16;
          }
          while (v10 < (*(_DWORD *)(a2 + 8) - 1));
        }
        v12 = *(_DWORD *)(a2 + 24) - 1;
        *(_DWORD *)(a2 + 40) = v12;
        *(_DWORD *)(a2 + 44) = v12;
        *(_DWORD *)(a2 + 28) = 0;
        *(_BYTE *)(a2 + 83) = *(_BYTE *)(a2 + 82);
      }
    }
    v13 = v6[536];
    if (v13)
    {
      if (!*(_BYTE *)(a4 + 17))
        v6[537] = (v6[537] + 1) % v13;
    }
  }
  return result;
}

uint64_t sub_1B68EC740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, __int32 a7, __int32 a8, uint64_t a9, uint64_t *a10, int8x8_t *a11, _BYTE *a12, uint64_t a13, char a14)
{
  int v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  float v28;
  unsigned int v29;
  int8x8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  float v34;
  unsigned int v35;
  float v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  __int32 v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  BOOL v51;
  BOOL v52;
  int8x8_t *v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  _BYTE *v69;
  uint64_t v70;
  unsigned int v71;
  _BYTE *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  __int16 v75;
  __int16 v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  __int16 v81;
  size_t v82;
  int v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 *v131;
  _BYTE *v132;
  unsigned int v133;
  unsigned __int8 *v134;
  _BYTE *v135;
  unsigned int v136;
  _BYTE *v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  signed int v149;
  int v150;
  int v153;
  int v154;
  uint64_t v155;
  signed int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  int v166;

  v18 = a14 & 0xF;
  if (*(_DWORD *)(a9 + 540))
    v19 = *(_QWORD *)(a9 + 420);
  else
    v19 = 270;
  v20 = *(float *)(a9 + 408);
  v21 = *(float *)(a9 + 416);
  v22 = *(float *)(a9 + 412);
  v23 = *(float *)(a9 + 404);
  *(float *)&a11[505].i32[4 * v18] = v20;
  *(float *)&a11[505].i32[(4 * (a14 & 0xF)) | 1] = v23;
  *(float *)&a11[505].i32[(4 * (a14 & 0xF)) | 2] = v21;
  *(float *)&a11[505].i32[(4 * (a14 & 0xF)) | 3] = v22;
  if (v22 == 0.0)
  {
    v24 = 4 * v18 - 4;
    v25 = -1;
    while (1)
    {
      v26 = v18 + v25;
      v27 = v24 + 64;
      if ((int)(v18 + v25) >= 0)
        v27 = v24;
      v28 = *(float *)((char *)a11[505].i32 + ((4 * v27) | 8));
      if (v28 > 0.0)
        break;
      --v25;
      v24 -= 4;
      if (v25 < 0xFFFFFFF7)
        goto LABEL_10;
    }
    v29 = v26 + 15;
    if ((int)(v26 - 1) >= 0)
      v29 = v26 - 1;
    v30 = a11 + 505;
    v20 = *(float *)&a11[505].i32[v27];
    v31 = 4 * v27;
    if (*(float *)a11[2 * (int)v29 + 506].i32 <= 0.0)
    {
      v23 = *(float *)((char *)a11[505].i32 + (v31 | 4));
    }
    else
    {
      v32 = (int)(4 * v29);
      v20 = v20 + vabds_f32(v20, *(float *)&v30->i32[v32]);
      v23 = *(float *)((char *)v30->i32 + (v31 | 4))
          + vabds_f32(*(float *)((char *)v30->i32 + (v31 | 4)), *(float *)((char *)v30->i32 + ((v32 * 4) | 4)));
    }
    v22 = *(float *)((char *)a11[505].i32 + (v31 | 0xC));
  }
  else
  {
LABEL_10:
    v28 = v21;
  }
  result = 0;
  v34 = (float)a5;
  v35 = (int)(float)(v23 * (float)a5);
  if ((v35 & 0x80000000) != 0)
    return result;
  v36 = (float)a6;
  v37 = (int)(float)(v20 * (float)a6);
  if (v37 < 0)
    return result;
  v38 = (int)(float)(v22 * v34);
  if ((v38 & 0x80000000) != 0)
    return result;
  v39 = (int)(float)(v28 * v36);
  if ((v39 & 0x80000000) != 0)
    return result;
  if ((int)(v35 + v38) > a5 - 20 || (int)(v37 + v39) > a6 - 20)
    return 0;
  if (v38 == a5 && v39 == a6 || (v38 | v39) == 0)
  {
    *a12 = 0;
    *(_OWORD *)(a13 + 124) = 0u;
    *(_OWORD *)(a13 + 96) = 0u;
    *(_OWORD *)(a13 + 112) = 0u;
    *(_OWORD *)(a13 + 64) = 0u;
    *(_OWORD *)(a13 + 80) = 0u;
    *(_OWORD *)(a13 + 32) = 0u;
    *(_OWORD *)(a13 + 48) = 0u;
    *(_OWORD *)a13 = 0u;
    *(_OWORD *)(a13 + 16) = 0u;
  }
  else
  {
    *a12 = 1;
    *(_DWORD *)(a13 + 4) = v35;
    *(_DWORD *)(a13 + 8) = v37;
    *(_DWORD *)(a13 + 12) = v38;
    *(_DWORD *)(a13 + 16) = v39;
    *(_QWORD *)(a13 + 20) = v19;
  }
  v42 = a11[11].i32[0];
  a11[11].i32[0] = 9;
  v43 = a11[86].u32[0];
  if (!*a12 || v22 <= 0.0)
  {
    v43 >>= 1;
    a11[86].i32[0] = v43;
    goto LABEL_67;
  }
  v44 = a11[85].u8[5];
  if (v43 < v44)
  {
    if (v43 <= 1)
      v45 = 1;
    else
      v45 = a11[86].i32[0];
    v46 = 2 * v45;
    if (v46 >= v44)
      v43 = a11[85].u8[5];
    else
      v43 = v46;
    goto LABEL_47;
  }
  if (v43 > v44)
  {
    if (v43 >> 1 <= v44)
      v43 = a11[85].u8[5];
    else
      v43 >>= 1;
LABEL_47:
    a11[86].i32[0] = v43;
  }
  if (!v43)
    goto LABEL_67;
  if ((int)v19 <= 269 && (v19 <= 0x59 || (v19 - 90) >= 0x5A))
  {
    v49 = (int)(10 * v38) >> 3;
    v48 = (int)(float)(v28 * v36);
    v47 = (int)(float)(v20 * (float)a6);
  }
  else
  {
    v47 = v37 - (v39 >> 3);
    if (v47 < 0)
      goto LABEL_67;
    v48 = (int)(10 * v39) >> 3;
    v49 = (int)(float)(v22 * v34);
  }
  v50 = v35 - (v38 >> 3);
  if (v50 < 0 || ((v49 | v35 | v48) & 0x80000000) != 0)
    goto LABEL_67;
  v51 = v50 < a5 && v47 < a6;
  v52 = v51 && v48 < a6;
  if (!v52 || v49 >= a5)
    goto LABEL_67;
  v165 = v19;
  v54 = a11 + 5;
  if (v47 + v48 > a6 - 2)
    v47 = a6 - 2 - v48;
  v164 = v47;
  v154 = v48;
  v147 = a6 - 2;
  v145 = v48 + v37;
  if (v48 + v37 > a6 - 2)
    v37 = a6 - 2 - v48;
  v150 = v37;
  v153 = v49;
  if ((int)(v50 + ((3 * v49) >> 1)) <= a5 - 2)
    v55 = v35 - (v38 >> 3);
  else
    v55 = a5 - 2 - ((3 * v49) >> 1);
  v149 = v55;
  v161 = 3 * v49;
  if ((int)(v35 + ((3 * v49) >> 1)) > a5 - 2)
    v35 = a5 - 2 - ((3 * v49) >> 1);
  v156 = v35;
  a11[15].i32[0] = v43;
  a11[24].i32[0] = a5;
  a11[24].i32[1] = a5;
  a11[25].i32[0] = a6;
  a11[25].i32[1] = a6;
  a11[26].i32[0] = a7;
  a11[26].i32[1] = a8;
  a11[27].i32[0] = a7;
  a11[27].i32[1] = a8;
  a11[35].i16[0] = 0;
  v56 = *a10;
  if (!*a10)
  {
    if (sub_1B68F7CC0(a10, (uint64_t)v54))
      goto LABEL_67;
    v54 = a11 + 5;
    v56 = *a10;
  }
  if (sub_1B68F7E7C(v56, v54))
  {
LABEL_67:
    result = 0;
    a11[11].i32[0] = v42;
    a11[15].i32[0] = v43;
    return result;
  }
  v57 = v154 + 31;
  if (v154 >= 0)
    v57 = v154;
  v58 = v153 + 31;
  if (v153 >= 0)
    v58 = v153;
  if (!*a12)
    return 1;
  v59 = v154 >> 4;
  v143 = v154 >> 4;
  if (v165 <= 269 && (v165 - 90) > 0x59)
  {
    v146 = v164 + v154;
    v60 = v58 >> 5;
    v61 = (v58 >> 5) - v149 + v156;
    if (v61 <= 2)
      v61 = 2;
    v162 = (v61 - 1);
    if ((int)(0x100 / v162) <= 1)
      v62 = 1;
    else
      v62 = 0x100 / v162;
    v63 = v156 + v38;
    v64 = v149 + v153 - (v156 + v38);
    v148 = v58 >> 5;
    v65 = v64 + v60;
    if (v64 + v60 <= 1)
      v65 = 1;
    if (v65 > 0x100)
      v66 = 1;
    else
      v66 = 0x100 / v65;
    v144 = v164 + v59;
    if (v59 < v154)
    {
      v67 = v144;
      v68 = (unsigned __int8 *)(a1 + v149 + a7 * (uint64_t)v144 + v162);
      v69 = (_BYTE *)(a2 + v149 + a8 * (uint64_t)v144 + v162);
      do
      {
        v71 = v62;
        v72 = v69;
        v73 = v68;
        v74 = v162;
        do
        {
          if (v71 >= 0xFF)
            v75 = 255;
          else
            v75 = v71;
          v76 = *v73--;
          *v72 = (unsigned __int16)((256 - v75) * v76 + v75 * *v72 + 128) >> 8;
          if ((v67 & 1) != 0)
          {
            v70 = a4 + v149 + a8 * (uint64_t)((int)v67 >> 1);
            *(_BYTE *)(v70 + v74) = (unsigned __int16)((256 - v75)
                                                     * *(unsigned __int8 *)(a3
                                                                          + v149
                                                                          + a7 * (uint64_t)((int)v67 >> 1)
                                                                          + v74)
                                                     + v75 * *(unsigned __int8 *)(v70 + v74)
                                                     + 128) >> 8;
          }
          --v72;
          v71 += v62;
          v51 = v74-- <= 0;
        }
        while (!v51);
        if (v64 > -v148)
        {
          v78 = v66;
          v79 = -v148;
          do
          {
            if ((int)(v79 + v63) < 0 != __OFADD__(v79, v63))
              v80 = -v63;
            else
              v80 = v79;
            if (v78 >= 0xFF)
              v81 = 255;
            else
              v81 = v78;
            *(_BYTE *)(a2 + v156 + v38 + v67 * a8 + v80) = (unsigned __int16)((256 - v81)
                                                                            * *(unsigned __int8 *)(a1
                                                                                                 + v156
                                                                                                 + v38
                                                                                                 + v67 * a7
                                                                                                 + v80)
                                                                            + v81
                                                                            * *(unsigned __int8 *)(a2
                                                                                                 + v156
                                                                                                 + v38
                                                                                                 + v67 * a8
                                                                                                 + v80)
                                                                            + 128) >> 8;
            if ((v67 & 1) != 0)
            {
              v77 = a4 + v156 + v38 + a8 * (uint64_t)((int)v67 >> 1);
              *(_BYTE *)(v77 + v80) = (unsigned __int16)((256 - v81)
                                                       * *(unsigned __int8 *)(a3
                                                                            + v156
                                                                            + v38
                                                                            + a7 * (uint64_t)((int)v67 >> 1)
                                                                            + v80)
                                                       + v81 * *(unsigned __int8 *)(v77 + v80)
                                                       + 128) >> 8;
            }
            v79 = v80 + 1;
            v78 += v66;
          }
          while (v80 + 1 < v64);
        }
        ++v67;
        v68 += a7;
        v69 += a8;
      }
      while (v67 < v146);
    }
    v82 = v38 - 2 * v148;
    if (v156 + v148 + (int)v82 >= a5)
      v83 = ~(_DWORD)v82 + a5;
    else
      v83 = v156 + v148;
    if ((int)v82 >= 1)
    {
      if (v143 < v154)
      {
        v84 = v144;
        v85 = (char *)(a1 + v83 + a7 * (uint64_t)v144);
        v86 = (char *)(a2 + v83 + a8 * (uint64_t)v144);
        do
        {
          memcpy(v86, v85, v82);
          ++v84;
          v85 += a7;
          v86 += a8;
        }
        while (v84 < v146);
      }
      v87 = v144 >= 0 ? v144 : v144 + 1;
      v88 = v87 >> 1;
      v89 = v146 >= 0 ? v164 + v154 : v146 + 1;
      if (v88 < v89 >> 1)
      {
        v90 = (v89 >> 1) - (uint64_t)v88;
        v91 = (char *)(a3 + v83 + v88 * (uint64_t)a7);
        v92 = (char *)(a4 + v83 + v88 * (uint64_t)a8);
        do
        {
          memcpy(v92, v91, v82);
          v91 += a7;
          v92 += a8;
          result = 1;
          --v90;
        }
        while (v90);
        return result;
      }
    }
    return 1;
  }
  v93 = v57 >> 5;
  v94 = v153 >> 4;
  v142 = v153 >> 2;
  if ((int)(v164 + v154 - (v150 + v39)) <= 1)
    v95 = 1;
  else
    v95 = v164 + v154 - (v150 + v39);
  v96 = v150 - v164;
  if (v150 - v164 <= 1)
    v96 = 1;
  v97 = v150 + v93;
  v98 = v150 + v39 - v93;
  if (v98 <= 1)
    v99 = 1;
  else
    v99 = v98;
  v100 = v97 + (v96 >> 1);
  if (v100 >= v147)
    v100 = v147;
  v160 = v100;
  v101 = v99 + (v95 >> 1);
  if (v101 >= v147)
    v101 = v147;
  v159 = v101;
  if (v94 < v161 / 2)
  {
    v102 = (v97 - (v96 >> 1)) & ~((int)(v97 - (v96 >> 1)) >> 31);
    v166 = (v99 - (v95 >> 1)) & ~((int)(v99 - (v95 >> 1)) >> 31);
    v103 = ((v95 >> 1) + 4096) / v95 + 1;
    v158 = v149 + ((7 * v153) >> 3);
    v104 = v94 - ((7 * v153) >> 3);
    v157 = v149 + v153 + ~v158;
    v105 = v149 + v94;
    v155 = v149 + v161 / 2;
    v106 = ((v96 >> 1) + 4096) / v96 - 1;
    do
    {
      v107 = v104 & ~(v104 >> 31);
      if (v157 >= v107)
        v108 = v104 & ~(v104 >> 31);
      else
        v108 = v149 + v153 + ~v158;
      if ((int)v107 >= (int)v157)
        LODWORD(v107) = v149 + v153 + ~v158;
      v163 = v107;
      if (((v105 - v158) & ~(((int)v105 - v158) >> 31)) >= (int)v157)
        v109 = v149 + v153 + ~v158;
      else
        v109 = (v105 - v158) & ~(((int)v105 - v158) >> 31);
      v110 = v109 + v160;
      if (v109 + v160 >= a6)
        v111 = (a6 - 1);
      else
        v111 = v110;
      if ((int)v111 >= (int)v102)
      {
        v112 = a1 + a7 * v111;
        v113 = v106;
        v114 = a2 + a8 * v111;
        do
        {
          if (v113 >= 4095)
            v115 = 4095;
          else
            v115 = v113;
          *(_BYTE *)(v114 + v105) = ((4096 - v115) * *(unsigned __int8 *)(v112 + v105)
                                   + v115 * *(unsigned __int8 *)(v114 + v105)
                                   + 2048) >> 12;
          if ((v111 & 1) != 0)
            *(_BYTE *)(a4 + v105 + a8 * (uint64_t)((int)v111 >> 1)) = ((4096 - v115)
                                                                    * *(unsigned __int8 *)(a3
                                                                                         + v105
                                                                                         + a7
                                                                                         * (uint64_t)((int)v111 >> 1))
                                                                    + v115
                                                                    * *(unsigned __int8 *)(a4 + v105 + a8 * (uint64_t)((int)v111 >> 1))
                                                                    + 2048) >> 12;
          v112 -= a7;
          v114 -= a8;
          v113 += v106;
          v51 = v111-- <= v102;
        }
        while (!v51);
      }
      v116 = v166 - v109;
      if ((v116 & ~(v116 >> 31)) < v159)
      {
        v117 = (v166 - v163) & ~((v166 - v163) >> 31);
        v118 = a1 + a7 * v117;
        v119 = a2 + a8 * v117;
        v120 = v103;
        do
        {
          if (v120 >= 0xFFF)
            v121 = 4095;
          else
            v121 = v120;
          *(_BYTE *)(v119 + v105) = ((4096 - v121) * *(unsigned __int8 *)(v118 + v105)
                                   + v121 * *(unsigned __int8 *)(v119 + v105)
                                   + 2048) >> 12;
          if ((v117 & 1) != 0)
            *(_BYTE *)(a4 + v105 + (v117 >> 1) * (uint64_t)a8) = ((4096 - v121)
                                                                             * *(unsigned __int8 *)(a3
                                                                                                  + v105
                                                                                                  + (v117 >> 1) * (uint64_t)a7)
                                                                             + v121
                                                                             * *(unsigned __int8 *)(a4 + v105 + (v117 >> 1) * (uint64_t)a8)
                                                                             + 2048) >> 12;
          v118 += a7;
          ++v117;
          v119 += a8;
          v120 += v103;
        }
        while (v117 < v159);
      }
      if (v110 < v116)
      {
        v122 = v160 + v108;
        v123 = a2 + a8 * v122;
        v124 = a1 + a7 * v122;
        do
        {
          *(_BYTE *)(v123 + v105) = *(_BYTE *)(v124 + v105);
          if ((v122 & 1) != 0)
            *(_BYTE *)(a4 + v105 + a8 * (uint64_t)((int)v122 >> 1)) = *(_BYTE *)(a3
                                                                              + v105
                                                                              + a7 * (uint64_t)((int)v122 >> 1));
          v124 += a7;
          ++v122;
          v123 += a8;
        }
        while (v122 < v116);
      }
      ++v105;
      ++v104;
    }
    while (v105 < v155);
  }
  if (v142 <= 1)
    v125 = 1;
  else
    v125 = v153 >> 2;
  v126 = v150 + v143;
  if (v150 + v143 >= (int)(v150 + v39 - v143))
    return 1;
  v127 = v126;
  v128 = v147;
  if (v145 < v147)
    v128 = v145;
  v129 = (int)(v128 + v39 - (v154 + v143));
  v130 = (v142 - 1) + (uint64_t)v149;
  v131 = (unsigned __int8 *)(a1 + v130 + a7 * (uint64_t)v126);
  v132 = (_BYTE *)(a2 + v130 + a8 * (uint64_t)v126);
  v133 = ((v125 >> 1) + 4096) / v125;
  do
  {
    if (v153 >= 4)
    {
      v134 = (unsigned __int8 *)(a3 + v130 + a7 * (uint64_t)((int)v127 >> 1));
      v135 = (_BYTE *)(a4 + v130 + a8 * (uint64_t)((int)v127 >> 1));
      v136 = v133;
      v137 = v132;
      v138 = v131;
      v139 = v142 + 1;
      do
      {
        if (v136 >= 0xFFF)
          v140 = 4095;
        else
          v140 = v136;
        v141 = *v138--;
        *v137 = ((4096 - v140) * v141 + v140 * *v137 + 2048) >> 12;
        if ((v127 & 1) != 0)
          *v135 = ((4096 - v140) * *v134 + v140 * *v135 + 2048) >> 12;
        --v139;
        --v134;
        --v135;
        --v137;
        v136 += v133;
      }
      while (v139 > 1);
    }
    ++v127;
    v131 += a7;
    v132 += a8;
    result = 1;
  }
  while (v127 != v129);
  return result;
}

_QWORD *sub_1B68ED36C(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = result[647];
  if (*(_BYTE *)(v2 + 5425))
  {
    v3 = *(_QWORD **)(v2 + 5416);
    if (v3[15] != a2 && v3[16] != a2 && v3[17] != a2)
    {
      v4 = *(int *)(*(_QWORD *)(v2 + 136) + 4868);
      v3[v4 + 15] = a2;
      return CFRetain(*(CFTypeRef *)(*(_QWORD *)(result[647] + 5416) + 8 * v4 + 120));
    }
  }
  return result;
}

uint64_t sub_1B68ED3CC(uint64_t a1, int a2, uint64_t a3, float *a4, float *a5, int *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  float v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unint64_t v18;
  char v19;
  float v20;
  float v21;
  int v22;
  unsigned int v23;
  __int16 v24;
  float v25;
  float v26;
  char *v27;
  const char **v28;
  const char *v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  int *v33;
  int v34;
  char v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  char AppIntegerValue;
  int v46;
  char *v47;
  char *v48;
  const char *v49;
  char v50;
  uint64_t v52;
  int *v53;
  char *__dst;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v64;
  Boolean v65;
  uint64_t v66;
  uint64_t v67;

  if (a2 < 1)
    return 0;
  v66 = v6;
  v67 = v7;
  LODWORD(v11) = 0;
  v12 = a1 + 4812;
  v60 = (char *)(a1 + 4210);
  v58 = (char *)(a1 + 3608);
  v59 = (char *)(a1 + 3909);
  v56 = (char *)(a1 + 3006);
  v57 = (char *)(a1 + 3307);
  __dst = (char *)(a1 + 696);
  v55 = (char *)(a1 + 2705);
  v53 = (int *)(a1 + 152);
  v64 = a1 + 635;
  while (1)
  {
    v13 = *(const char **)(a3 + 8 * (int)v11);
    if (!v13)
      return 0;
    if (!strcmp(*(const char **)(a3 + 8 * (int)v11), "-00"))
      goto LABEL_684;
    v14 = (int)v11;
    if (!strcmp(v13, "-20"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 52) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 157) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-283"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 56) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-21"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      v15 = atof(*(const char **)(a3 + 8 * v11));
      *(float *)(a1 + 60) = v15;
      *(_BYTE *)(v12 + 158) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-100001"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 4844) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-34"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 44) = atoi(*(const char **)(a3 + 8 * v11));
      *(_DWORD *)(a1 + 48) = 0;
      *(_BYTE *)(v12 + 289) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-35"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 394) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 291) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-36"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 404) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 292) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-01"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_WORD *)(a1 + 408) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 170) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-11"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 412) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 171) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-69"))
    {
      *(_BYTE *)(a1 + 6) = 1;
      *(_BYTE *)(v12 + 160) = 1;
      if ((int)v11 + 1 >= a2)
        goto LABEL_684;
      *(_WORD *)(a1 + 8) = atoi(*(const char **)(a3 + 8 * ((int)v11 + 1)));
      if ((int)v11 + 2 >= a2)
        goto LABEL_684;
      *(_WORD *)(a1 + 10) = atoi(*(const char **)(a3 + 8 * ((int)v11 + 2)));
      if ((int)v11 + 3 >= a2)
        goto LABEL_684;
      *(_WORD *)(a1 + 12) = atoi(*(const char **)(a3 + 8 * ((int)v11 + 3)));
      v11 = (int)v11 + 4;
      if ((int)v14 + 4 >= a2)
        goto LABEL_684;
      *(_WORD *)(a1 + 14) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-118"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 235) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 165) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-119"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 602) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 166) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-184"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 603) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 167) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-214"))
    {
      if ((int)v11 + 2 >= a2)
        goto LABEL_684;
      LODWORD(v11) = v11 + 1;
      v16 = atoi(*(const char **)(a3 + 8 * (v14 + 1)));
      v17 = v16 <= 0x10u ? v16 : 16;
      *(_BYTE *)(a1 + 651) = v17;
      *(_BYTE *)(v12 + 179) = 1;
      if ((int)(v11 + 2 * v17) >= a2)
        goto LABEL_684;
      if (v17)
      {
        v18 = 0;
        do
        {
          if ((int)v11 + 1 < a2)
          {
            *(_BYTE *)(v64 + v18) = atoi(*(const char **)(a3 + 8 * ((int)v11 + 1)));
            v17 = *(_BYTE *)(a1 + 651);
            LODWORD(v11) = v11 + 1;
          }
          ++v18;
        }
        while (v18 < v17);
      }
      goto LABEL_321;
    }
    if (!strcmp(v13, "-215"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 652) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 180) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-111"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 236) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 169) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-24"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      v19 = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(a1 + 262) = v19;
      *(_BYTE *)(v12 + 293) = 1;
      if (v19 == 3)
      {
        *(_BYTE *)(a1 + 263) = atoi(*(const char **)(a3 + 8 * v14 + 16));
        LODWORD(v11) = v14 + 3;
        *(_BYTE *)(a1 + 264) = atoi(*(const char **)(a3 + 8 * (v14 + 3)));
      }
      goto LABEL_321;
    }
    if (!strcmp(v13, "-113"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 261) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 294) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-135"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 609) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 307) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-134"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 608) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 306) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-43"))
    {
      *(_BYTE *)(a1 + 291) = 1;
      *(_BYTE *)(v12 + 301) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-37"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 240) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 295) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-38"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 213) = atoi(*(const char **)(a3 + 8 * v11)) > 0;
      *(_BYTE *)(v12 + 296) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-110"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_WORD *)(a1 + 596) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 297) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-08"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 228) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 155) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-27"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 229) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(a1 + 232) = 1;
      *(_BYTE *)(v12 + 152) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-28"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 230) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(a1 + 233) = 1;
      *(_BYTE *)(v12 + 153) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-29"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 231) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(a1 + 234) = 1;
      *(_BYTE *)(v12 + 154) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-63"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_WORD *)(a1 + 418) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 156) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-22"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 304) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 161) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-23"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 300) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 164) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-75"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      v20 = atof(*(const char **)(a3 + 8 * v11));
      *(float *)(a1 + 312) = v20;
      *(_BYTE *)(v12 + 162) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-76"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      v21 = atof(*(const char **)(a3 + 8 * v11));
      *(float *)(a1 + 308) = v21;
      *(_BYTE *)(v12 + 163) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-30"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 211) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 181) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-31"))
    {
      *(_BYTE *)(a1 + 212) = 1;
      *(_BYTE *)(v12 + 182) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-106"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 72) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 185) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-108"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 76) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 186) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-109"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 80) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 187) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-103"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 420) = atol(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 188) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-218"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 424) = atol(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 189) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-25"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 244) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 240) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-26"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 248) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 241) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-105"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 252) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 242) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-32"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      v22 = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(a1 + 238) = v22;
      *(_BYTE *)(v12 + 172) = 1;
      goto LABEL_327;
    }
    if (!strcmp(v13, "-97"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      v22 = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(a1 + 239) = v22;
      *(_BYTE *)(v12 + 173) = 1;
LABEL_327:
      if (v22 << 24 >= 268435457)
        goto LABEL_684;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-16"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 266) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 244) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-15"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 265) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 243) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-17"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 267) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 245) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-92"))
    {
      *(_DWORD *)(a1 + 88) = 1;
      *(_BYTE *)(v12 + 303) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-41"))
    {
      *(_BYTE *)(a1 + 271) = 1;
      *(_BYTE *)(v12 + 260) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-42"))
    {
      *(_BYTE *)(a1 + 273) = 1;
      *(_BYTE *)(v12 + 264) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-42.0"))
    {
      *(_BYTE *)(a1 + 289) = 1;
      *(_BYTE *)(v12 + 265) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-93"))
    {
      *(_BYTE *)(a1 + 274) = 1;
      *(_BYTE *)(v12 + 262) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-95"))
    {
      *(_BYTE *)(a1 + 275) = 1;
      *(_BYTE *)(v12 + 263) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-48"))
    {
      *(_BYTE *)(a1 + 268) = 1;
      *(_BYTE *)(v12 + 248) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-49"))
    {
      *(_BYTE *)(a1 + 276) = 1;
      *(_BYTE *)(v12 + 249) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-50"))
    {
      *(_BYTE *)(a1 + 277) = 1;
      *(_BYTE *)(v12 + 250) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-51"))
    {
      *(_BYTE *)(a1 + 278) = 0;
      *(_BYTE *)(v12 + 251) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-52"))
    {
      *(_BYTE *)(a1 + 279) = 0;
      *(_BYTE *)(v12 + 252) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-53"))
    {
      *(_BYTE *)(a1 + 280) = 0;
      *(_BYTE *)(v12 + 253) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-54"))
    {
      *(_BYTE *)(a1 + 283) = 0;
      *(_BYTE *)(v12 + 254) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-55"))
    {
      *(_BYTE *)(a1 + 285) = 1;
      *(_BYTE *)(v12 + 255) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-56"))
    {
      *(_BYTE *)(a1 + 286) = 1;
      *(_BYTE *)(v12 + 256) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-57"))
    {
      *(_BYTE *)(a1 + 287) = 1;
      *(_BYTE *)(v12 + 257) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-58"))
    {
      *(_BYTE *)(a1 + 288) = 1;
      *(_BYTE *)(v12 + 258) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-59"))
    {
      *(_BYTE *)(a1 + 284) = 2;
      *(_BYTE *)(v12 + 259) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-96"))
    {
      *(_BYTE *)(a1 + 612) = 1;
      *(_BYTE *)(v12 + 269) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-91"))
    {
      *(_BYTE *)(a1 + 272) = 1;
      *(_BYTE *)(v12 + 246) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-44"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 281) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 302) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-47"))
    {
      *(_BYTE *)(a1 + 282) = 1;
      *(_BYTE *)(v12 + 247) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-131"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      v23 = atoi(*(const char **)(a3 + 8 * v11));
      if (v23 >= 0xFFFF)
        v24 = -1;
      else
        v24 = v23;
      *(_WORD *)(a1 + 294) = v24;
      *(_BYTE *)(v12 + 267) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-132"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 292) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 268) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-40"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 269) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 299) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-253"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 270) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 300) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-182"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 316) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 209) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-45"))
    {
      *(_BYTE *)(a1 + 317) = 1;
      *(_BYTE *)(v12 + 218) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-148"))
    {
      LODWORD(v11) = v11 + 1;
      if ((int)v11 >= a2)
      {
        *(_QWORD *)(a1 + 328) = 0;
        *(_BYTE *)(a1 + 336) = 0;
        *(_BYTE *)(v12 + 222) = 0;
LABEL_684:
        puts("SetErrAndBail()");
        return 1;
      }
      strlcpy(*(char **)(a1 + 328), *(const char **)(a3 + 8), 0x12CuLL);
      *(_BYTE *)(a1 + 336) = 1;
      *(_BYTE *)(v12 + 222) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-46"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 318) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 210) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-65"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *a6 = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 211) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-88"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      v25 = atof(*(const char **)(a3 + 8 * v11));
      *a4 = v25;
      *(_BYTE *)(v12 + 212) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-77"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      v26 = atof(*(const char **)(a3 + 8 * v11));
      *a5 = v26;
      *(_BYTE *)(v12 + 213) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-123"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 379) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 216) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-66"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 322) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 214) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-71"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 323) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 215) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-73"))
    {
      v11 = (int)v11 + 2;
      if ((int)v14 + 2 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 325) = atoi(*(const char **)(a3 + 8 * v14 + 8));
      *(_WORD *)(a1 + 326) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 217) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-120"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 324) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 219) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-126"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 320) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 221) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-10"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 392) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 224) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-09"))
    {
      LODWORD(v11) = v11 + 1;
      if ((int)v11 >= a2)
        goto LABEL_684;
      v27 = *(char **)(a1 + 384);
LABEL_398:
      strlcpy(v27, *(const char **)(a3 + 8), 0x12CuLL);
      goto LABEL_321;
    }
    if (!strcmp(v13, "-72"))
    {
      v11 = (int)v11 + 5;
      if ((int)v14 + 5 >= a2)
        goto LABEL_684;
      v28 = (const char **)(a3 + 8 * v14);
      *(double *)(a1 + 184) = atof(v28[1]);
      *(_DWORD *)(a1 + 192) = atoi(v28[2]);
      *(_BYTE *)(v12 + 229) = 1;
      v29 = *(const char **)(a3 + 8 * v11);
      if (strcmp(v29, "0"))
      {
        if (strcmp(v29, "1"))
          goto LABEL_684;
      }
      *(_DWORD *)(a1 + 196) = atoi(v28[3]);
      *(_DWORD *)(a1 + 200) = atoi(v28[4]);
      *(_DWORD *)(a1 + 204) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-90"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 210) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 231) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-137"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 209) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 232) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-181"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 116) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 192) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-180"))
    {
      if ((int)v11 + 3 >= a2)
        goto LABEL_684;
      LODWORD(v11) = v11 + 1;
      v30 = atoi(*(const char **)(a3 + 8 * (v14 + 1)));
      v31 = v30 <= 8u ? v30 : 8;
      *(_BYTE *)(a1 + 115) = v31;
      *(_BYTE *)(v12 + 234) = 1;
      if ((int)(v11 + 2 * v31) >= a2)
        goto LABEL_684;
      if (v31)
      {
        v32 = v31;
        v33 = v53;
        do
        {
          v52 = (int)v11 + 2;
          if ((int)v52 < a2)
          {
            *(v33 - 8) = atoi(*(const char **)(a3 + 8 * (int)v11 + 8));
            LODWORD(v11) = v11 + 2;
            *v33 = atoi(*(const char **)(a3 + 8 * v52));
          }
          ++v33;
          --v32;
        }
        while (v32);
      }
      goto LABEL_321;
    }
    if (!strcmp(v13, "-183"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 114) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 235) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-186"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      v34 = atoi(*(const char **)(a3 + 8 * v11));
      *(_DWORD *)(a1 + 444) = v34;
      if (v34 == 255)
      {
        *(_DWORD *)(a1 + 448) = atoi(*(const char **)(a3 + 8 * v14 + 16));
        LODWORD(v11) = v14 + 3;
        *(_DWORD *)(a1 + 452) = atoi(*(const char **)(a3 + 8 * (v14 + 3)));
      }
      goto LABEL_321;
    }
    if (!strcmp(v13, "-256"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(v12 + 12) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 346) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-62"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_WORD *)(a1 + 416) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 225) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-64"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 290) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 226) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-150"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 398) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 174) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-151"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 399) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 175) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-152"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 400) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 176) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-156"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 401) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 337) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-153"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 16) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 177) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-273"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 17) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 178) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-104"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 402) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 227) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-89"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 393) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 228) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-130"))
      goto LABEL_321;
    if (!strcmp(v13, "-112"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_DWORD *)(a1 + 592) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 233) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-13"))
    {
      *(_BYTE *)(a1 + 397) = 1;
      *(_BYTE *)(a1 + 241) = 0;
      *(_BYTE *)(v12 + 287) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-33"))
    {
      *(_WORD *)(a1 + 265) = 257;
      *(_BYTE *)(a1 + 267) = 1;
      *(_BYTE *)(v12 + 304) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-39"))
    {
      *(_BYTE *)(a1 + 395) = 1;
      *(_BYTE *)(v12 + 298) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-61"))
    {
      *(_BYTE *)(a1 + 241) = 1;
      *(_BYTE *)(v12 + 288) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-102"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 598) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 305) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-114"))
    {
      LODWORD(v11) = v11 + 1;
      if ((int)v11 >= a2)
        goto LABEL_684;
      v27 = *(char **)(a1 + 488);
      goto LABEL_398;
    }
    if (!strcmp(v13, "-115"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 599) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 191) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-251"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 660) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 207) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-248"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 666) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 332) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-138"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 601) = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(v12 + 190) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-133"))
    {
      *(_BYTE *)(v12 + 308) = 1;
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(a1 + 610) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-144"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(v12 + 309) = 1;
      v35 = atoi(*(const char **)(a3 + 8 * v11));
      *(_BYTE *)(a1 + 112) = v35;
      *(_BYTE *)(a1 + 111) = 1;
      if ((v35 & 0xFu) > 0xC || (v35 & 0xF0) != 0)
      {
        *(_BYTE *)(a1 + 111) = 0;
        goto LABEL_684;
      }
      if ((v35 & 0xF) == 0)
        *(_BYTE *)(a1 + 111) = 0;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-145"))
    {
      v11 = (int)v11 + 1;
      if ((int)v14 + 1 >= a2)
        goto LABEL_684;
      *(_BYTE *)(v12 + 310) = 1;
      *(_BYTE *)(a1 + 113) = atoi(*(const char **)(a3 + 8 * v11));
      goto LABEL_321;
    }
    if (!strcmp(v13, "-67"))
    {
      *(_BYTE *)(v12 + 315) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-68"))
    {
      *(_BYTE *)(v12 + 316) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-74"))
    {
      *(_BYTE *)(v12 + 317) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-116"))
    {
      *(_BYTE *)(v12 + 318) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-129"))
    {
      *(_BYTE *)(v12 + 319) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-117"))
    {
      *(_BYTE *)(v12 + 321) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-128"))
    {
      *(_BYTE *)(v12 + 320) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-139"))
    {
      *(_BYTE *)(v12 + 323) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-221"))
    {
      *(_BYTE *)(v12 + 324) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-140"))
    {
      *(_BYTE *)(v12 + 325) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-141"))
    {
      *(_BYTE *)(v12 + 326) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-142"))
    {
      *(_BYTE *)(v12 + 327) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-216"))
    {
      *(_BYTE *)(v12 + 328) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-217"))
    {
      *(_BYTE *)(v12 + 329) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-220"))
    {
      *(_BYTE *)(v12 + 330) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-252"))
    {
      *(_BYTE *)(v12 + 331) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-249"))
    {
      *(_BYTE *)(v12 + 333) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-258"))
    {
      *(_BYTE *)(v12 + 335) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-272"))
    {
      *(_BYTE *)(v12 + 350) = 1;
      goto LABEL_321;
    }
    if (!strcmp(v13, "-257"))
    {
      *(_BYTE *)(v12 + 334) = 1;
      goto LABEL_321;
    }
    if (strcmp(v13, "-101"))
      break;
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_675;
    *(_BYTE *)(v12 + 322) = 1;
    v36 = **(char **)(a3 + 8 * v11);
    if (v36 <= 104)
    {
      if (v36 == 98)
      {
        v50 = 2;
      }
      else
      {
        if (v36 != 99)
        {
LABEL_675:
          *(_BYTE *)(a1 + 577) = 0;
          goto LABEL_321;
        }
        v50 = 3;
      }
      goto LABEL_674;
    }
    if (v36 == 115)
    {
      v50 = 4;
LABEL_674:
      *(_BYTE *)(a1 + 577) = v50;
      goto LABEL_321;
    }
    if (v36 == 109)
    {
      v50 = 5;
      goto LABEL_674;
    }
    if (v36 != 105)
      goto LABEL_675;
    *(_BYTE *)(a1 + 577) = 1;
LABEL_321:
    LODWORD(v11) = v11 + 1;
    if ((int)v11 >= a2)
      return 0;
  }
  if (!strcmp(v13, "-160"))
    goto LABEL_321;
  if (!strcmp(v13, "-161"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 368) = atoi(*(const char **)(a3 + 8 * v11)) != 0;
    *(_BYTE *)(v12 + 312) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-190"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    v37 = atoi(*(const char **)(a3 + 8 * v11));
    *(_DWORD *)(a1 + 372) = v37;
    *(_BYTE *)(v12 + 313) = 1;
    if (v37 == 1)
    {
      *(_BYTE *)(a1 + 378) = 1;
    }
    else if (v37 >= 2)
    {
      goto LABEL_684;
    }
    goto LABEL_321;
  }
  if (!strcmp(v13, "-209"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 376) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 314) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-208"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 377) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-170"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 380) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-244"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(v12 + 340) = 1;
    strlcpy(__dst, *(const char **)(a3 + 8 * v11), 0x7D0uLL);
    goto LABEL_321;
  }
  if (!strcmp(v13, "-192"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 614) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 338) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-194"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 615) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 339) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-266"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(v12 + 15) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 348) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-277"))
  {
    *(_BYTE *)(v12 + 28) = 2;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-195"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 624) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 278) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-196"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 625) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 277) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-197"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 626) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 276) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-210"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 631) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 236) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-211"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 632) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 237) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-212"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    v38 = atoi(*(const char **)(a3 + 8 * v11));
    if (v38 >= 255)
      v39 = 255;
    else
      v39 = v38;
    *(_BYTE *)(a1 + 633) = v39 & ~(v39 >> 31);
    *(_BYTE *)(v12 + 238) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-213"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    v40 = atoi(*(const char **)(a3 + 8 * v11));
    if (v40 >= 255)
      v41 = 255;
    else
      v41 = v40;
    *(_BYTE *)(a1 + 634) = v41 & ~(v41 >> 31);
    *(_BYTE *)(v12 + 239) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-200"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 653) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 272) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-201"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 654) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 273) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-206"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 657) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 274) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-275"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 658) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 275) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-202"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 655) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 271) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-203"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 656) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 270) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-219"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 675) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 193) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-230"))
  {
    *(_BYTE *)(a1 + 672) = 1;
    *(_BYTE *)(v12 + 261) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-205"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 673) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 223) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-233"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 677) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 198) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-234"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 682) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 199) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-237"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_DWORD *)(a1 + 692) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 200) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-235"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 683) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 201) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-240"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 686) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 202) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-238"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 684) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 203) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-239"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 685) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 204) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-236"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 687) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 205) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-241"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 688) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 206) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-232"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 2697) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 194) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-242"))
  {
    LODWORD(v11) = v11 + 1;
    if ((int)v11 >= a2)
      goto LABEL_684;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-243"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D)
      goto LABEL_684;
    strncpy(v55, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(_BYTE *)(a1 + 2700) = 1;
    *(_BYTE *)(v12 + 195) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-263"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D)
      goto LABEL_684;
    strncpy(v56, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(_BYTE *)(a1 + 2701) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-259"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D)
      goto LABEL_684;
    strncpy(v57, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(_BYTE *)(a1 + 2703) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-260"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D)
      goto LABEL_684;
    strncpy(v58, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(_BYTE *)(a1 + 2702) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-268"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D)
      goto LABEL_684;
    strncpy(v59, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(_BYTE *)(v12 + 17) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-274"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2 || strlen(*(const char **)(a3 + 8 * v11)) >= 0x12D)
      goto LABEL_684;
    strncpy(v60, *(const char **)(a3 + 8 * v11), 0x12CuLL);
    *(_BYTE *)(a1 + 2704) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-250"))
  {
    LODWORD(v11) = v11 + 1;
    if ((int)v11 >= a2)
      goto LABEL_684;
    v42 = sub_1B68E3D4C();
    sub_1B68E431C(v42);
    goto LABEL_321;
  }
  if (!strcmp(v13, "-264"))
  {
    v43 = (int)v11 + 1;
    if ((int)v11 + 1 >= a2)
      goto LABEL_684;
    LODWORD(v11) = v11 + 1;
    *(_BYTE *)(v12 + 1) = atoi(*(const char **)(a3 + 8 * v43));
    v44 = sub_1B68E3D4C();
    *(_DWORD *)(a1 + 4820) = v44;
    if (!v44)
      goto LABEL_684;
    if (*(_BYTE *)(v12 + 13))
      *(_BYTE *)(v12 + 13) = v44 > 6;
    v65 = 0;
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("UnifiedEncoderMode"), CFSTR("com.apple.VideoProcessing"), &v65);
    if (v65)
      *(_BYTE *)(v12 + 1) = AppIntegerValue;
    else
      AppIntegerValue = *(_BYTE *)(v12 + 1);
    switch(AppIntegerValue)
    {
      case 0:
        *(_WORD *)(v12 + 2) = 0;
        goto LABEL_677;
      case 1:
      case 2:
        *(_WORD *)(v12 + 2) = 1;
LABEL_677:
        *(_BYTE *)(v12 + 4) = 0;
        break;
      case 3:
        *(_WORD *)(v12 + 2) = 1;
        *(_BYTE *)(v12 + 4) = 1;
        *(_BYTE *)v12 = 0;
        break;
      default:
        goto LABEL_684;
    }
    *(_BYTE *)(v12 + 349) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-261"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 321) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 347) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-262"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 627) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 279) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-279"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 628) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 280) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-281"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 629) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 282) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-282"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 630) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 283) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-245"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 678) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 341) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-246"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 679) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 342) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-280"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 260) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 281) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-247"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 680) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 343) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-254"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 681) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 344) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-255"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_DWORD *)(a1 + 620) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 345) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100000"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(v12 + 14) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-267"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(v12 + 16) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-269"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_DWORD *)(a1 + 4832) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-270"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(v12 + 24) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-271"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(v12 + 25) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-265"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(a1 + 670) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 208) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-278"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(v12 + 29) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 284) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100002"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(v12 + 36) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 352) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100003"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(v12 + 37) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 351) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100004"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    v46 = atoi(*(const char **)(a3 + 8 * v11));
    *(_DWORD *)(a1 + 4852) = v46;
    *(_BYTE *)(v12 + 39) = v46 != 0;
    *(_BYTE *)(v12 + 285) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100005"))
  {
    LODWORD(v11) = v11 + 1;
    if ((int)v11 >= a2)
      goto LABEL_684;
    strlcpy(*(char **)(a1 + 4904), *(const char **)(a3 + 8), 0x12CuLL);
    *(_BYTE *)(v12 + 286) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100006"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_DWORD *)(a1 + 4924) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100007"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_BYTE *)(v12 + 116) = atoi(*(const char **)(a3 + 8 * v11)) != 0;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100009"))
  {
    LODWORD(v11) = v11 + 1;
    if ((int)v11 >= a2)
      goto LABEL_684;
    strlcpy(*(char **)(a1 + 480), *(const char **)(a3 + 8), 0x12CuLL);
    *(_BYTE *)(v12 + 150) = 1;
    goto LABEL_321;
  }
  if (!strcmp(v13, "-100008"))
  {
    v11 = (int)v11 + 1;
    if ((int)v14 + 1 >= a2)
      goto LABEL_684;
    *(_DWORD *)(a1 + 4956) = atoi(*(const char **)(a3 + 8 * v11));
    goto LABEL_321;
  }
  if (!*(_BYTE *)(v12 + 149))
  {
    v47 = (char *)malloc_type_malloc(0x12CuLL, 0x100004077774924uLL);
    *(_QWORD *)(a1 + 464) = v47;
    strlcpy(v47, *(const char **)(a3 + 8 * (int)v11), 0x12CuLL);
    *(_BYTE *)(v12 + 149) = 1;
    if ((int)v11 + 1 >= a2)
      goto LABEL_684;
    v48 = (char *)malloc_type_malloc(0x12CuLL, 0x100004077774924uLL);
    *(_QWORD *)(a1 + 472) = v48;
    strlcpy(v48, *(const char **)(a3 + 8 * ((int)v11 + 1)), 0x12CuLL);
    if ((int)v11 + 2 >= a2)
      goto LABEL_684;
    *(_WORD *)a1 = atoi(*(const char **)(a3 + 8 * ((int)v11 + 2)));
    v11 = (int)v11 + 3;
    if ((int)v14 + 3 >= a2)
      goto LABEL_684;
    *(_WORD *)(a1 + 4) = atoi(*(const char **)(a3 + 8 * v11));
    *(_BYTE *)(v12 + 151) = 1;
    *(_DWORD *)(a1 + 40) = 0;
    if ((int)v14 + 4 < a2)
    {
      v49 = *(const char **)(a3 + 8 * (v14 + 4));
      if (*v49 != 45)
      {
        *(_DWORD *)(a1 + 40) = atoi(v49);
        LODWORD(v11) = v14 + 4;
      }
    }
    goto LABEL_321;
  }
  if (!*(_BYTE *)(v12 + 151))
  {
    *(_BYTE *)(v12 + 151) = 1;
    if ((int)v11 + 2 >= a2)
      goto LABEL_684;
    *(_WORD *)a1 = atoi(*(const char **)(a3 + 8 * (int)v11));
    LODWORD(v11) = v11 + 1;
    *(_WORD *)(a1 + 4) = atoi(*(const char **)(a3 + 8 * (v14 + 1)));
    goto LABEL_321;
  }
  CFLog();
  return 4294967246;
}

__int16 *sub_1B68F0134(__int16 *result, _DWORD *a2)
{
  __int16 *v2;
  _BYTE *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v2 = result;
  v3 = (char *)result + 4969;
  if (!*((_BYTE *)result + 5021))
    *((_BYTE *)result + 316) = 0;
  if (!*((_BYTE *)result + 5036))
    *((_BYTE *)result + 392) = 10;
  if (!*((_BYTE *)result + 4974))
    *((_DWORD *)result + 78) = 0x40000000;
  if (!*((_BYTE *)result + 5039))
    *((_BYTE *)result + 402) = 1;
  if (!*((_BYTE *)result + 5022))
    *((_BYTE *)result + 318) = 6;
  if (!*((_BYTE *)result + 5023))
    *a2 = 6;
  v4 = *((unsigned __int8 *)result + 5026);
  if (!*((_BYTE *)result + 5026))
    *((_BYTE *)result + 322) = 1;
  if (!*((_BYTE *)result + 5027))
    *((_BYTE *)result + 323) = 1;
  if (!*((_BYTE *)result + 5037))
    result[208] = 800;
  if (!*((_BYTE *)result + 5038))
    *((_BYTE *)result + 290) = 1;
  if (!*((_BYTE *)result + 4978) && !*((_BYTE *)result + 602))
    *((_BYTE *)result + 602) = 2;
  if (!*((_BYTE *)result + 5099))
    *((_BYTE *)result + 397) = 0;
  v5 = *((unsigned __int8 *)result + 5100);
  if (!*((_BYTE *)result + 5100))
    *((_BYTE *)result + 241) = 0;
  if (!*((_BYTE *)result + 5040))
    *((_BYTE *)result + 393) = 1;
  if (!*((_BYTE *)result + 5045))
    *((_DWORD *)result + 148) = 1;
  if (!*((_BYTE *)result + 4973))
  {
    if (*((_BYTE *)result + 5029))
    {
      if (v4)
        goto LABEL_35;
    }
    else
    {
      *((_BYTE *)result + 325) = 0;
      result[163] = 1;
      if (v4)
        goto LABEL_35;
    }
    *((_BYTE *)result + 322) = 1;
LABEL_35:
    if (!*((_BYTE *)result + 5022) && !*((_BYTE *)result + 318))
    {
      *((_BYTE *)result + 318) = 1;
      *((_BYTE *)result + 5022) = 1;
    }
    if (*((_BYTE *)result + 316) == 1 && *((_BYTE *)result + 632) == 2)
    {
      *((_DWORD *)result + 76) = -1;
    }
    else
    {
      v6 = result[2] * *result;
      if (v6 > 101376)
      {
        if (v6 > 0x70800)
        {
          if (v6 > 0xE1000)
          {
            *((_DWORD *)result + 76) = 60;
            v7 = 0x40000000;
          }
          else
          {
            *((_DWORD *)result + 76) = 90;
            v7 = 1077936128;
          }
        }
        else
        {
          *((_DWORD *)result + 76) = 120;
          v7 = 1082130432;
        }
      }
      else
      {
        *((_DWORD *)result + 76) = 150;
        v7 = 1084227584;
      }
      *((_DWORD *)result + 78) = v7;
    }
  }
  if (*((_BYTE *)result + 4993))
  {
    v8 = *((_DWORD *)result + 13);
    if (*v3)
    {
      if (!v8)
      {
LABEL_51:
        if (!*((_BYTE *)result + 5109))
          result[298] = 767;
        result = (__int16 *)sub_1B68F03C0((uint64_t)result, 7);
        v5 = v3[131];
        goto LABEL_60;
      }
    }
    else if (!v8)
    {
      goto LABEL_60;
    }
  }
  else
  {
    if (!*v3 || !*((_DWORD *)result + 13))
      goto LABEL_51;
    *((_BYTE *)result + 211) = 1;
  }
  if (!*((_BYTE *)result + 4995))
    *((_DWORD *)result + 54) = 3;
  if (!*((_BYTE *)result + 4996))
    *((_DWORD *)result + 55) = 1069547520;
  *((_DWORD *)result + 21) = *((_DWORD *)result + 10);
LABEL_60:
  if (!v5)
    *((_BYTE *)v2 + 241) = 0;
  return result;
}

uint64_t sub_1B68F03C0(uint64_t a1, signed int a2)
{
  uint64_t result;

  *(_DWORD *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 211) = 0;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 40);
  if (*(char *)(a1 + 392) >= 1)
    *(_BYTE *)(a1 + 392) = 1;
  result = sub_1B68F0418(*(unsigned __int16 *)(a1 + 596), a2);
  *(_DWORD *)(a1 + 228) = 16843009 * result;
  return result;
}

uint64_t sub_1B68F0418(int a1, signed int a2)
{
  int v2;
  unsigned int v3;
  signed int v4;
  unsigned int v5;

  if (1023 - a1 >= 1023)
    v2 = 1023;
  else
    v2 = 1023 - a1;
  if (a1 > 1023)
    v2 = 0;
  v3 = a2 + ((v2 * (19 - a2) + 128) >> 8);
  if (v2 >= 255)
    v3 = ((7 * v2 - 1657) >> 8) + 19;
  if (v2 >= 511)
    v4 = ((14 * v2 - 6898) >> 9) + 26;
  else
    v4 = v3;
  if (v4 >= 40)
    v5 = 40;
  else
    v5 = v4;
  if (v4 >= a2)
    return v5;
  else
    return a2;
}

__int16 *sub_1B68F0494(__int16 *result)
{
  int v1;
  int v2;
  int v3;
  int v4;
  char v5;
  char v6;

  *((_BYTE *)result + 381) = 1;
  *((_BYTE *)result + 320) = 1;
  v1 = *result;
  v2 = result[2];
  v3 = v2 * v1;
  if (!*((_BYTE *)result + 4969))
  {
    if (v3 <= 101376)
      v4 = 800000;
    else
      v4 = 1500000;
    *((_DWORD *)result + 13) = v4;
  }
  if (!*((_BYTE *)result + 4970))
    *((_DWORD *)result + 15) = 1106247680;
  if (!*((_BYTE *)result + 4981))
    result[118] = 0;
  *((_BYTE *)result + 396) = 1;
  *((_BYTE *)result + 228) = 19;
  if (!*((_BYTE *)result + 4993))
    *((_BYTE *)result + 211) = 1;
  if (!*((_BYTE *)result + 4994))
    *((_BYTE *)result + 212) = 1;
  *((_DWORD *)result + 21) = 31;
  if (!*((_BYTE *)result + 4995))
    *((_DWORD *)result + 54) = 3;
  if (!*((_BYTE *)result + 4996))
    *((_DWORD *)result + 55) = 1069547520;
  if (!*((_BYTE *)result + 5000))
    *((_DWORD *)result + 105) = 2;
  if (v2 > v1)
  {
    if (v1 < 320)
    {
      if (v1 >= 160)
      {
        if (!*((_BYTE *)result + 5101))
          *((_DWORD *)result + 11) = 8;
        if (*((_BYTE *)result + 5111))
          goto LABEL_59;
        v5 = 2;
LABEL_58:
        *((_BYTE *)result + 269) = v5;
LABEL_59:
        if (!*((_BYTE *)result + 5067))
          *((_BYTE *)result + 285) = 1;
LABEL_61:
        if (!*((_BYTE *)result + 5055))
          *((_BYTE *)result + 265) = 5;
        return result;
      }
      if (!*((_BYTE *)result + 5101))
        *((_DWORD *)result + 11) = 4;
      if (!*((_BYTE *)result + 5111))
      {
        v6 = 2;
LABEL_69:
        *((_BYTE *)result + 269) = v6;
        return result;
      }
      return result;
    }
LABEL_28:
    if (!*((_BYTE *)result + 5101))
      *((_DWORD *)result + 11) = 8;
    if (!*((_BYTE *)result + 5111))
      *((_BYTE *)result + 269) = 2;
    if (!*((_BYTE *)result + 5053))
      *((_DWORD *)result + 62) = 1;
    if (!*((_BYTE *)result + 5069))
      *((_BYTE *)result + 287) = 1;
    if (!*((_BYTE *)result + 5055))
      *((_BYTE *)result + 265) = 5;
    if (!*((_BYTE *)result + 5072))
      *((_BYTE *)result + 271) = 1;
    return result;
  }
  if (v3 > 101376)
    goto LABEL_28;
  if (v3 == 101376)
  {
    if (!*((_BYTE *)result + 5101))
      *((_DWORD *)result + 11) = 5;
    if (!*((_BYTE *)result + 5111))
      *((_BYTE *)result + 269) = 3;
    if (!*((_BYTE *)result + 5053))
      *((_DWORD *)result + 62) = 1;
    if (!*((_BYTE *)result + 5069))
      *((_BYTE *)result + 287) = 1;
    goto LABEL_61;
  }
  if (v3 >= 25345)
  {
    if (!*((_BYTE *)result + 5101))
      *((_DWORD *)result + 11) = 5;
    if (*((_BYTE *)result + 5111))
      goto LABEL_59;
    v5 = 3;
    goto LABEL_58;
  }
  if (v3 < 5121)
  {
    if (!*((_BYTE *)result + 5101))
      *((_DWORD *)result + 11) = 1;
    if (!*((_BYTE *)result + 5111))
      *((_BYTE *)result + 269) = 0;
    if (!*((_BYTE *)result + 5052))
      *((_DWORD *)result + 61) = 48;
  }
  else
  {
    if (!*((_BYTE *)result + 5101))
      *((_DWORD *)result + 11) = 1;
    if (!*((_BYTE *)result + 5111))
    {
      v6 = 1;
      goto LABEL_69;
    }
  }
  return result;
}

__int16 *sub_1B68F0720(__int16 *result)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  __int16 v8;

  v1 = (uint64_t)result;
  v2 = (char *)result + 4967;
  v3 = result[2] * *result;
  v4 = *((unsigned __int8 *)result + 4969);
  if (!*((_BYTE *)result + 4969))
  {
    if (v3 <= 101376)
      v5 = 800000;
    else
      v5 = 1500000;
    *((_DWORD *)result + 13) = v5;
  }
  if (!*((_BYTE *)result + 4970))
    *((_DWORD *)result + 15) = 1106247680;
  if (!*v2 && !*((_BYTE *)result + 5109))
    *((_BYTE *)result + 228) = 19;
  *((_BYTE *)result + 396) = 1;
  if (!*((_BYTE *)result + 4973))
  {
    result = sub_1B68F0A4C(result);
    v4 = v2[2];
  }
  if (v2[26])
  {
    v6 = *(_DWORD *)(v1 + 52);
    if (v4)
    {
      if (!v6)
      {
LABEL_20:
        if (!v2[142])
          *(_WORD *)(v1 + 596) = 767;
        result = (__int16 *)sub_1B68F03C0(v1, 12);
        goto LABEL_27;
      }
    }
    else if (!v6)
    {
      goto LABEL_27;
    }
  }
  else
  {
    if (!v4 || !*(_DWORD *)(v1 + 52))
      goto LABEL_20;
    *(_BYTE *)(v1 + 211) = 1;
  }
  if (!v2[27])
    *(_BYTE *)(v1 + 212) = 1;
  *(_DWORD *)(v1 + 84) = 31;
  result = (__int16 *)sub_1B68F0AD4((_DWORD *)v1);
LABEL_27:
  if (v3 > 307200)
  {
    if (!v2[134])
      *(_DWORD *)(v1 + 44) = 9;
    if (!v2[144])
      *(_BYTE *)(v1 + 269) = 2;
    if (!v2[86])
      *(_DWORD *)(v1 + 248) = 1;
    if (!v2[95])
      *(_BYTE *)(v1 + 277) = 1;
    if (!v2[102])
      *(_BYTE *)(v1 + 287) = 1;
    if (!v2[99])
      *(_BYTE *)(v1 + 283) = 0;
    goto LABEL_75;
  }
  if (v3 > 101376)
  {
    if (!v2[134])
      *(_DWORD *)(v1 + 44) = 8;
    if (!v2[144])
      *(_BYTE *)(v1 + 269) = 2;
    if (!v2[86])
      *(_DWORD *)(v1 + 248) = 1;
    if (!v2[95])
      *(_BYTE *)(v1 + 277) = 1;
    if (!v2[102])
      *(_BYTE *)(v1 + 287) = 1;
LABEL_67:
    if (!v2[101])
      *(_BYTE *)(v1 + 286) = 1;
    goto LABEL_75;
  }
  if (v3 >= 25345)
  {
    if (!v2[134])
      *(_DWORD *)(v1 + 44) = 5;
    if (!v2[144])
      *(_BYTE *)(v1 + 269) = 3;
    if (!v2[95])
      *(_BYTE *)(v1 + 277) = 1;
    if (!v2[100])
      *(_BYTE *)(v1 + 285) = 1;
    goto LABEL_67;
  }
  if (v3 >= 5121)
  {
    if (!v2[134])
      *(_DWORD *)(v1 + 44) = 1;
    if (!v2[144])
      *(_BYTE *)(v1 + 269) = 1;
    if (!v2[95])
      *(_BYTE *)(v1 + 277) = 1;
    goto LABEL_67;
  }
  if (!v2[134])
    *(_DWORD *)(v1 + 44) = 1;
  if (!v2[144])
    *(_BYTE *)(v1 + 269) = 0;
  if (!v2[85])
    *(_DWORD *)(v1 + 244) = 48;
LABEL_75:
  v7 = *(_DWORD *)(v1 + 52);
  if ((v7 - 1) < 0x186A0)
  {
    if (v2[1])
      return result;
    v8 = -8;
    goto LABEL_84;
  }
  if ((v7 - 100001) <= 0x155CBF)
  {
    if (v2[1])
      return result;
    v8 = -5;
    goto LABEL_84;
  }
  if ((v7 - 1500001) <= 0x44AA1F && !v2[1])
  {
    v8 = -3;
LABEL_84:
    *(_WORD *)(v1 + 418) = v8;
  }
  return result;
}

__int16 *sub_1B68F0A4C(__int16 *result)
{
  int v1;
  int v2;
  int v3;

  v1 = result[2] * *result;
  if (v1 > 101376)
  {
    if (v1 > 0x70800)
    {
      if (v1 > 0xE1000)
      {
        v2 = 60;
        *((_DWORD *)result + 76) = 60;
        v3 = 0x40000000;
      }
      else
      {
        v2 = 90;
        *((_DWORD *)result + 76) = 90;
        v3 = 1077936128;
      }
    }
    else
    {
      v2 = 120;
      *((_DWORD *)result + 76) = 120;
      v3 = 1082130432;
    }
  }
  else
  {
    v2 = 150;
    *((_DWORD *)result + 76) = 150;
    v3 = 1084227584;
  }
  *((_DWORD *)result + 78) = v3;
  *((_DWORD *)result + 21) = v2;
  return result;
}

_DWORD *sub_1B68F0AD4(_DWORD *result)
{
  unsigned int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;

  result[56] = 1;
  v1 = result[76];
  if (v1 == 1)
  {
    result[21] = 1;
    v2 = 0x3FC0000000000001;
  }
  else
  {
    if (v1 <= 5)
    {
      v3 = (float)((float)v1 * 0.5) + 1.0;
      result[21] = (int)v3;
      result[54] = (int)v3;
      result[55] = 1069547520;
      return result;
    }
    if (v1 > 0x1F)
    {
      result[21] = 31;
      v4 = 31;
    }
    else
    {
      result[21] = v1;
      v4 = 5;
    }
    v2 = v4 & 0xFFFFFFFFFFFFLL | 0x3FA0000000000000;
  }
  *((_QWORD *)result + 27) = v2;
  return result;
}

uint64_t sub_1B68F0B50(int a1, uint64_t a2, __int16 *a3)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _BYTE *v20;
  int v21;
  unsigned int v22;
  double v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  double v31;
  int v32;
  char v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v48;
  char v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  float v66;
  char v67;
  _BYTE *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;

  v75 = 0;
  v74 = 0;
  if (!*((_BYTE *)a3 + 4960))
  {
    *(_OWORD *)((char *)a3 + 5149) = 0u;
    *((_OWORD *)a3 + 320) = 0u;
    *((_OWORD *)a3 + 321) = 0u;
    *((_OWORD *)a3 + 318) = 0u;
    *((_OWORD *)a3 + 319) = 0u;
    *((_OWORD *)a3 + 316) = 0u;
    *((_OWORD *)a3 + 317) = 0u;
    *((_OWORD *)a3 + 314) = 0u;
    *((_OWORD *)a3 + 315) = 0u;
    *((_OWORD *)a3 + 312) = 0u;
    *((_OWORD *)a3 + 313) = 0u;
    *((_OWORD *)a3 + 310) = 0u;
    *((_OWORD *)a3 + 311) = 0u;
  }
  *((_BYTE *)a3 + 4961) = 1;
  *((_QWORD *)a3 + 58) = 0;
  *((_QWORD *)a3 + 59) = 0;
  *((_QWORD *)a3 + 61) = 0;
  result = sub_1B68ED3CC((uint64_t)a3, a1, a2, (float *)&v75 + 1, (float *)&v75, (int *)&v74);
  if ((_DWORD)result)
    return CFLog();
  if (*((_BYTE *)a3 + 113))
    *((_BYTE *)a3 + 111) = 1;
  v5 = *((unsigned __int8 *)a3 + 5135);
  if (*((_BYTE *)a3 + 5135)
    || *((_BYTE *)a3 + 5137)
    || *((_BYTE *)a3 + 5138)
    || *((_BYTE *)a3 + 5139)
    || *((_BYTE *)a3 + 5136))
  {
    if (!*((_BYTE *)a3 + 5079))
      a3[147] = 500;
    if (!*((_BYTE *)a3 + 5080))
      *((_BYTE *)a3 + 292) = 1;
    v6 = *a3;
    v7 = a3[2];
    if (!*((_BYTE *)a3 + 4970))
      *((_DWORD *)a3 + 15) = 1103101952;
    v8 = v7 * v6;
    if (!*((_BYTE *)a3 + 4969))
    {
      if (v5 || *((_BYTE *)a3 + 5137))
      {
        v9 = 6000000;
      }
      else
      {
        v9 = 6000000;
        if (!*((_BYTE *)a3 + 5136))
        {
          if (v8 <= 101376)
            v9 = 500000;
          else
            v9 = 1000000;
        }
      }
      *((_DWORD *)a3 + 13) = v9;
      *((_BYTE *)a3 + 4969) = 1;
    }
    if (!*((_BYTE *)a3 + 5042))
      *((_BYTE *)a3 + 208) = 1;
    if (!*((_BYTE *)a3 + 5044))
      *((_BYTE *)a3 + 209) = 1;
    if (*((_BYTE *)a3 + 5041))
    {
      if (*((_BYTE *)a3 + 5137))
      {
        if (v8 < 345601)
        {
LABEL_29:
          if (!*((_BYTE *)a3 + 5004))
            *((_BYTE *)a3 + 116) = 1;
          if (*((_BYTE *)a3 + 5046))
            goto LABEL_55;
          *((_BYTE *)a3 + 115) = 1;
          v10 = 10000000;
          goto LABEL_54;
        }
        goto LABEL_50;
      }
    }
    else
    {
      if (!*((_BYTE *)a3 + 5138) && !*((_BYTE *)a3 + 5139))
      {
        if (v5)
        {
          v11 = 0;
          if (v8 >= 345601)
            v12 = 12000000;
          else
            v12 = 10000000;
          *((_QWORD *)a3 + 23) = qword_1B6917F20[v8 < 345601];
          *((_DWORD *)a3 + 48) = v12;
          goto LABEL_59;
        }
        if (!*((_BYTE *)a3 + 5137) && !*((_BYTE *)a3 + 5136))
          goto LABEL_67;
        if (v8 < 345601)
        {
          *((_QWORD *)a3 + 23) = 0x3FB999999999999ALL;
          *((_DWORD *)a3 + 48) = 9090909;
          goto LABEL_29;
        }
        *((_QWORD *)a3 + 23) = 0x3FB999999999999ALL;
        *((_DWORD *)a3 + 48) = 12727272;
LABEL_50:
        if (!*((_BYTE *)a3 + 5004))
          *((_BYTE *)a3 + 116) = 1;
        if (*((_BYTE *)a3 + 5046))
          goto LABEL_55;
        *((_BYTE *)a3 + 115) = 1;
        v10 = 14000000;
LABEL_54:
        *((_DWORD *)a3 + 30) = v10;
        *((_DWORD *)a3 + 38) = 1000;
        goto LABEL_55;
      }
      *((_QWORD *)a3 + 23) = 0x3FF0000000000000;
      *((_DWORD *)a3 + 48) = 4000000;
    }
LABEL_55:
    if (v5)
    {
      v11 = 0;
LABEL_59:
      if (!*((_BYTE *)a3 + 4993))
      {
        *((_BYTE *)a3 + 211) = 32;
        *((_BYTE *)a3 + 4993) = 1;
      }
      if (!*((_BYTE *)a3 + 4997))
        *((_DWORD *)a3 + 18) = 1;
      if (!*((_BYTE *)a3 + 5002))
        *((_BYTE *)a3 + 601) = 1;
      if (!*((_BYTE *)a3 + 5003))
        *((_BYTE *)a3 + 599) = 1;
      goto LABEL_71;
    }
    if (*((_BYTE *)a3 + 5138))
    {
      v11 = 1;
      goto LABEL_59;
    }
LABEL_67:
    if (!*((_BYTE *)a3 + 4993))
    {
      *((_BYTE *)a3 + 211) = 2;
      *((_BYTE *)a3 + 4993) = 1;
    }
    v11 = 1;
    if (*((_BYTE *)a3 + 5136))
    {
      *((_BYTE *)a3 + 325) = 0;
      a3[163] = 1;
    }
LABEL_71:
    if (!*((_BYTE *)a3 + 5118))
      *((_BYTE *)a3 + 608) = 1;
    if (*((_BYTE *)a3 + 5119))
    {
      if (!v11)
        goto LABEL_79;
    }
    else
    {
      *((_BYTE *)a3 + 609) = 0;
      if (!v11)
      {
LABEL_79:
        if (!*((_BYTE *)a3 + 4981))
          a3[118] = 257;
        if (!*((_BYTE *)a3 + 5031))
          *((_BYTE *)a3 + 324) = 0;
        if (!*((_BYTE *)a3 + 4978) && *((_BYTE *)a3 + 5137))
          *((_BYTE *)a3 + 602) = 2;
        if (!*((_BYTE *)a3 + 5054))
          *((_DWORD *)a3 + 63) = 511;
LABEL_88:
        v13 = *((unsigned __int8 *)a3 + 5138);
        if ((*((_BYTE *)a3 + 5138) || *((_BYTE *)a3 + 5139)) && !*((_BYTE *)a3 + 5054))
          *((_DWORD *)a3 + 63) = 255;
        if (!*((_BYTE *)a3 + 5117))
        {
          *((_BYTE *)a3 + 598) = 1;
          *((_BYTE *)a3 + 5117) = 1;
        }
        if (v8 > 696320)
        {
          if (*((_BYTE *)a3 + 5136))
          {
            *((_BYTE *)a3 + 5077) = 1;
            *((_BYTE *)a3 + 287) = 1;
            *(__int16 *)((char *)a3 + 5069) = 257;
            a3[144] = 257;
            *((_BYTE *)a3 + 292) = 1;
          }
          if (!*((_BYTE *)a3 + 4989))
          {
            *((_BYTE *)a3 + 16) = 100;
            *((_BYTE *)a3 + 4989) = 1;
          }
          if (!*((_BYTE *)a3 + 4988))
          {
            *((_BYTE *)a3 + 400) = 1;
            *((_BYTE *)a3 + 4988) = 1;
          }
          if (!*((_BYTE *)a3 + 5149))
          {
            *((_BYTE *)a3 + 401) = 1;
            *((_BYTE *)a3 + 5149) = 1;
          }
        }
        if (!*((_BYTE *)a3 + 5022))
        {
          *((_BYTE *)a3 + 318) = 12;
          *((_BYTE *)a3 + 5022) = 1;
        }
        *((_BYTE *)a3 + 5129) = 1;
        *((_BYTE *)a3 + 5134) = 1;
        if (v11)
        {
          if (*((_BYTE *)a3 + 5137))
          {
            if (*((_BYTE *)a3 + 5136))
              v14 = 4;
            else
              v14 = 5;
          }
          else
          {
            v14 = 4;
            if (!*((_BYTE *)a3 + 5136))
            {
              if (v13)
                v24 = 4;
              else
                v24 = 5;
              *((_BYTE *)a3 + 577) = v24;
              *((_BYTE *)a3 + 16) = 66;
LABEL_113:
              if (*((_BYTE *)a3 + 460))
              {
                *((_BYTE *)a3 + 316) = 0;
                *((_BYTE *)a3 + 325) = 0;
                a3[163] = 1;
                a3[118] = 257;
              }
              goto LABEL_115;
            }
          }
        }
        else
        {
          v14 = 4;
        }
        *((_BYTE *)a3 + 577) = v14;
        if (!*((_BYTE *)a3 + 5021))
        {
          *((_BYTE *)a3 + 316) = v14 != 4;
          *((_BYTE *)a3 + 5021) = 1;
        }
        goto LABEL_113;
      }
    }
    if (!*((_BYTE *)a3 + 5137) && !*((_BYTE *)a3 + 5136))
      goto LABEL_88;
    goto LABEL_79;
  }
LABEL_115:
  if (!*((_BYTE *)a3 + 5130) && !*((_BYTE *)a3 + 5131))
    goto LABEL_214;
  if (!*((_BYTE *)a3 + 4970))
    *((_DWORD *)a3 + 15) = 1103101952;
  v15 = (char *)a3 + 4969;
  v16 = *((unsigned __int8 *)a3 + 4969);
  if (!*((_BYTE *)a3 + 4969))
  {
    if (a3[2] * *a3 <= 101376)
      v17 = 500000;
    else
      v17 = 6000000;
    *((_DWORD *)a3 + 13) = v17;
  }
  v18 = *((unsigned __int8 *)a3 + 4993);
  if (*((_BYTE *)a3 + 4993) && *((_BYTE *)a3 + 211))
    *((_DWORD *)a3 + 21) = 31;
  if (!*((_BYTE *)a3 + 5057))
    *((_BYTE *)a3 + 267) = 4;
  if (!*((_BYTE *)a3 + 5113))
    *((_BYTE *)a3 + 291) = 1;
  v19 = *((unsigned __int8 *)a3 + 5056);
  if (!*((_BYTE *)a3 + 5056))
    *((_BYTE *)a3 + 266) = 2;
  if (!*((_BYTE *)a3 + 5052))
    *((_DWORD *)a3 + 61) = 128;
  if (!*((_BYTE *)a3 + 5066))
    *((_BYTE *)a3 + 283) = 0;
  if (!*((_BYTE *)a3 + 5101))
    *((_DWORD *)a3 + 11) = 2;
  if (!*((_BYTE *)a3 + 5055))
    *((_BYTE *)a3 + 265) = 5;
  if (!*((_BYTE *)a3 + 5053))
    *((_DWORD *)a3 + 62) = 2;
  if (!*((_BYTE *)a3 + 4981))
    a3[118] = 0;
  if (!*((_BYTE *)a3 + 5067))
    *((_BYTE *)a3 + 285) = 1;
  if (!*((_BYTE *)a3 + 5002))
    *((_BYTE *)a3 + 601) = 1;
  if (!*((_BYTE *)a3 + 5003))
    *((_BYTE *)a3 + 599) = 1;
  v20 = (char *)a3 + 5041;
  v21 = *((unsigned __int8 *)a3 + 5041);
  if (!*((_BYTE *)a3 + 5041))
  {
    *((_QWORD *)a3 + 23) = 0x4004CCCCCCCCCCCDLL;
    *((_DWORD *)a3 + 48) = 768000;
  }
  if (*((_BYTE *)a3 + 5131))
  {
    if (!*((_BYTE *)a3 + 5079))
      a3[147] = 500;
    if (!*((_BYTE *)a3 + 5080))
      *((_BYTE *)a3 + 292) = 1;
    v22 = a3[2] * *a3;
    if (!v21)
    {
      v23 = 2.6;
      if (v22 >= 0x12C01)
        v23 = 1.0;
      *((double *)a3 + 23) = v23;
    }
    if (!*((_BYTE *)a3 + 5118))
      *((_BYTE *)a3 + 608) = 1;
    if ((int)v22 < 76801)
    {
      if (!v21)
        *((_DWORD *)a3 + 48) = 768000;
      if (!v16)
      {
        *((_DWORD *)a3 + 13) = 700000;
        *v15 = 1;
      }
      goto LABEL_207;
    }
    if (v22 < 0x25801)
    {
      if (!v21)
        *((_DWORD *)a3 + 48) = 4000000;
      if (!v16)
      {
        *((_DWORD *)a3 + 13) = 1500000;
        *v15 = 1;
      }
      if (v22 > 0x20800)
      {
        if (!*((_BYTE *)a3 + 5105))
          *((_BYTE *)a3 + 262) = 1;
        if (!*((_BYTE *)a3 + 5119))
          *((_BYTE *)a3 + 609) = 1;
      }
      goto LABEL_207;
    }
    if (v22 > 0x4B000)
    {
LABEL_207:
      if (!*((_BYTE *)a3 + 5117))
      {
        *((_BYTE *)a3 + 598) = 1;
        *((_BYTE *)a3 + 5117) = 1;
      }
      goto LABEL_209;
    }
    if (!*((_BYTE *)a3 + 5031))
      *((_BYTE *)a3 + 324) = 1;
    if (!*((_BYTE *)a3 + 4978))
      *((_BYTE *)a3 + 602) = 0;
    if (*((_BYTE *)a3 + 5119))
    {
      if (v16)
        goto LABEL_193;
    }
    else
    {
      *((_BYTE *)a3 + 609) = 1;
      if (v16)
      {
LABEL_193:
        if (v21)
        {
LABEL_194:
          if (!*((_BYTE *)a3 + 5069))
            *((_BYTE *)a3 + 287) = 1;
          if (!*((_BYTE *)a3 + 5105))
            *((_BYTE *)a3 + 262) = 1;
          if (!*((_BYTE *)a3 + 5054))
            *((_DWORD *)a3 + 63) = 26;
          if (!*((_BYTE *)a3 + 5072))
            *((_BYTE *)a3 + 271) = 1;
          if (!v19)
            *((_BYTE *)a3 + 266) = 3;
          if (v22 > 0x37000 && !*((_BYTE *)a3 + 4977))
            *((_BYTE *)a3 + 235) = 2;
          goto LABEL_207;
        }
LABEL_538:
        *((_DWORD *)a3 + 48) = 4000000;
        goto LABEL_194;
      }
    }
    *((_DWORD *)a3 + 13) = 1500000;
    *v15 = 1;
    if (v21)
      goto LABEL_194;
    goto LABEL_538;
  }
  if (!v16)
  {
    *((_DWORD *)a3 + 13) = 700000;
    v20 = (char *)a3 + 4969;
LABEL_209:
    *v20 = 1;
  }
  *((_BYTE *)a3 + 16) = 66;
  *((_BYTE *)a3 + 5134) = 1;
  *((_BYTE *)a3 + 577) = 6;
  if (!v18)
  {
    *((_BYTE *)a3 + 211) = 32;
    *((_BYTE *)a3 + 4993) = 1;
  }
  if (!*((_BYTE *)a3 + 5047))
    *((_BYTE *)a3 + 114) = 4;
LABEL_214:
  if (*((_BYTE *)a3 + 5133))
  {
    if (!*((_BYTE *)a3 + 4970))
      *((_DWORD *)a3 + 15) = 1103101952;
    v25 = *((unsigned __int8 *)a3 + 4969);
    if (!*((_BYTE *)a3 + 4969))
    {
      if (a3[2] * *a3 <= 101376)
        v26 = 500000;
      else
        v26 = 6000000;
      *((_DWORD *)a3 + 13) = v26;
    }
    if (*((_BYTE *)a3 + 4993) && *((_BYTE *)a3 + 211))
      *((_DWORD *)a3 + 21) = 31;
    if (!*((_BYTE *)a3 + 5057))
      *((_BYTE *)a3 + 267) = 4;
    if (!*((_BYTE *)a3 + 5113))
      *((_BYTE *)a3 + 291) = 1;
    if (!*((_BYTE *)a3 + 5055))
      *((_BYTE *)a3 + 265) = 3;
    if (!*((_BYTE *)a3 + 5056))
      *((_BYTE *)a3 + 266) = 2;
    if (!*((_BYTE *)a3 + 5052))
      *((_DWORD *)a3 + 61) = 128;
    if (!*((_BYTE *)a3 + 5053))
      *((_DWORD *)a3 + 62) = 4;
    if (!*((_BYTE *)a3 + 5066))
      *((_BYTE *)a3 + 283) = 0;
    if (!*((_BYTE *)a3 + 5101))
      *((_DWORD *)a3 + 11) = 2;
    if (*((_BYTE *)a3 + 4981))
    {
      if (v25)
      {
LABEL_243:
        if (!*((_BYTE *)a3 + 5041))
        {
          *((_QWORD *)a3 + 23) = 0x4004CCCCCCCCCCCDLL;
          *((_DWORD *)a3 + 48) = 768000;
        }
        if (!*((_BYTE *)a3 + 5003))
          *((_BYTE *)a3 + 599) = 1;
        *((_BYTE *)a3 + 16) = 66;
        *((_BYTE *)a3 + 577) = 5;
        result = (uint64_t)sub_1B68F0134(a3, &v74);
        if (!*((_BYTE *)a3 + 5047))
          *((_BYTE *)a3 + 114) = 4;
        goto LABEL_250;
      }
    }
    else
    {
      a3[118] = 0;
      if (v25)
        goto LABEL_243;
    }
    *((_DWORD *)a3 + 13) = 600000;
    *((_BYTE *)a3 + 4969) = 1;
    goto LABEL_243;
  }
  if (!*((_BYTE *)a3 + 5132))
    goto LABEL_342;
LABEL_250:
  if (!*((_BYTE *)a3 + 5132))
    goto LABEL_342;
  if (!*((_BYTE *)a3 + 4970))
    *((_DWORD *)a3 + 15) = 1103101952;
  v27 = *((unsigned __int8 *)a3 + 4969);
  if (!*((_BYTE *)a3 + 4969))
  {
    if (a3[2] * *a3 <= 101376)
      v28 = 500000;
    else
      v28 = 6000000;
    *((_DWORD *)a3 + 13) = v28;
  }
  if (*((_BYTE *)a3 + 4993) && *((_BYTE *)a3 + 211))
    *((_DWORD *)a3 + 21) = 31;
  if (!*((_BYTE *)a3 + 5057))
    *((_BYTE *)a3 + 267) = 4;
  if (!*((_BYTE *)a3 + 5113))
    *((_BYTE *)a3 + 291) = 1;
  if (!*((_BYTE *)a3 + 5055))
    *((_BYTE *)a3 + 265) = 3;
  v29 = *((unsigned __int8 *)a3 + 5056);
  if (!*((_BYTE *)a3 + 5056))
    *((_BYTE *)a3 + 266) = 2;
  if (!*((_BYTE *)a3 + 5052))
    *((_DWORD *)a3 + 61) = 128;
  if (!*((_BYTE *)a3 + 5053))
    *((_DWORD *)a3 + 62) = 4;
  if (!*((_BYTE *)a3 + 5066))
    *((_BYTE *)a3 + 283) = 0;
  if (!*((_BYTE *)a3 + 5101))
    *((_DWORD *)a3 + 11) = 2;
  if (!*((_BYTE *)a3 + 5003))
    *((_BYTE *)a3 + 599) = 1;
  if (!*((_BYTE *)a3 + 4981))
    a3[118] = 0;
  if (!*((_BYTE *)a3 + 5031))
    *((_BYTE *)a3 + 324) = 1;
  if (!*((_BYTE *)a3 + 4978))
    *((_BYTE *)a3 + 602) = 1;
  if (!*((_BYTE *)a3 + 5118))
    *((_BYTE *)a3 + 608) = 1;
  if (!*((_BYTE *)a3 + 5079))
    a3[147] = 500;
  if (!*((_BYTE *)a3 + 5080))
    *((_BYTE *)a3 + 292) = 1;
  v30 = a3[2] * *a3;
  if (*((_BYTE *)a3 + 5041))
  {
    if ((int)v30 >= 76801)
    {
      if (v30 >= 0x25801)
        goto LABEL_313;
LABEL_305:
      if (!v27)
      {
        *((_DWORD *)a3 + 13) = 1500000;
        *((_BYTE *)a3 + 4969) = 1;
      }
      if (v30 > 0x20800)
      {
        if (!*((_BYTE *)a3 + 5105))
          *((_BYTE *)a3 + 262) = 1;
        if (!*((_BYTE *)a3 + 5119))
          *((_BYTE *)a3 + 609) = 1;
      }
      goto LABEL_336;
    }
LABEL_301:
    if (!v27)
    {
      *((_DWORD *)a3 + 13) = 600000;
      *((_BYTE *)a3 + 4969) = 1;
    }
    goto LABEL_336;
  }
  v31 = 2.6;
  if (v30 >= 0x12C01)
    v31 = 1.0;
  *((double *)a3 + 23) = v31;
  if ((int)v30 < 76801)
  {
    *((_DWORD *)a3 + 48) = 768000;
    goto LABEL_301;
  }
  if (v30 < 0x25801)
  {
    *((_DWORD *)a3 + 48) = 4000000;
    goto LABEL_305;
  }
  *((_DWORD *)a3 + 48) = 4000000;
LABEL_313:
  if (v30 >= 0x2A801)
  {
    if (!v27)
    {
      *((_DWORD *)a3 + 13) = 1500000;
      *((_BYTE *)a3 + 4969) = 1;
    }
    if (!*((_BYTE *)a3 + 5042))
      *((_BYTE *)a3 + 208) = 1;
    if (!*((_BYTE *)a3 + 5105))
      *((_BYTE *)a3 + 262) = 1;
    if (!*((_BYTE *)a3 + 5119))
      *((_BYTE *)a3 + 609) = 1;
    if (!*((_BYTE *)a3 + 5054))
      *((_DWORD *)a3 + 63) = 26;
    if (!v29)
      *((_BYTE *)a3 + 266) = 3;
  }
  else
  {
    if (!v27)
    {
      *((_DWORD *)a3 + 13) = 1500000;
      *((_BYTE *)a3 + 4969) = 1;
    }
    if (!*((_BYTE *)a3 + 5054))
      *((_DWORD *)a3 + 63) = 26;
    if (!*((_BYTE *)a3 + 5105))
      *((_BYTE *)a3 + 262) = 1;
    if (!*((_BYTE *)a3 + 5119))
      *((_BYTE *)a3 + 609) = 1;
  }
  if (!*((_BYTE *)a3 + 4977))
    *((_BYTE *)a3 + 235) = 2;
LABEL_336:
  if (!*((_BYTE *)a3 + 5117))
  {
    *((_BYTE *)a3 + 598) = 1;
    *((_BYTE *)a3 + 5117) = 1;
  }
  *((_BYTE *)a3 + 5041) = 1;
  *((_BYTE *)a3 + 16) = 66;
  *((_BYTE *)a3 + 577) = 5;
  result = (uint64_t)sub_1B68F0134(a3, &v74);
  if (!*((_BYTE *)a3 + 5047))
    *((_BYTE *)a3 + 114) = 4;
  if (!*((_BYTE *)a3 + 5100))
    *((_BYTE *)a3 + 241) = 1;
LABEL_342:
  if (*((_BYTE *)a3 + 5127))
  {
    if (!*((_BYTE *)a3 + 5102) && !*((_BYTE *)a3 + 5101))
      *(_QWORD *)(a3 + 22) = 0x100000003;
    if (!*((_BYTE *)a3 + 5066))
      *((_BYTE *)a3 + 283) = 0;
    if (!*((_BYTE *)a3 + 5056))
      *((_BYTE *)a3 + 266) = 2;
    if (!*((_BYTE *)a3 + 5055))
      *((_BYTE *)a3 + 265) = 2;
    if (!*((_BYTE *)a3 + 5057))
      *((_BYTE *)a3 + 267) = 4;
    if (!*((_BYTE *)a3 + 5052))
      *((_DWORD *)a3 + 61) = 128;
    if (!*((_BYTE *)a3 + 5053))
      *((_DWORD *)a3 + 62) = 2;
  }
  if (*((_BYTE *)a3 + 5128))
  {
    if (!*((_BYTE *)a3 + 4970))
      *((_DWORD *)a3 + 15) = 1106247680;
    if (!*((_BYTE *)a3 + 4969))
    {
      if (a3[2] * *a3 <= 101376)
        v32 = 800000;
      else
        v32 = 1500000;
      *((_DWORD *)a3 + 13) = v32;
    }
    if (!*((_BYTE *)a3 + 4981))
    {
      *((_BYTE *)a3 + 236) = 1;
      if (*((_BYTE *)a3 + 398))
        v33 = 2;
      else
        v33 = 1;
      *((_BYTE *)a3 + 237) = v33;
    }
    if (*((_BYTE *)a3 + 4993) && *((_BYTE *)a3 + 211))
      *((_DWORD *)a3 + 21) = 31;
    if (!*((_BYTE *)a3 + 5056))
      *((_BYTE *)a3 + 266) = 2;
    if (!*((_BYTE *)a3 + 5055))
      *((_BYTE *)a3 + 265) = 2;
    if (!*((_BYTE *)a3 + 5057))
      *((_BYTE *)a3 + 267) = 4;
    if (!*((_BYTE *)a3 + 5052))
      *((_DWORD *)a3 + 61) = 128;
    if (!*((_BYTE *)a3 + 5053))
      *((_DWORD *)a3 + 62) = 2;
    if (!*((_BYTE *)a3 + 5105))
    {
      a3[131] = 3;
      *((_BYTE *)a3 + 264) = 6;
    }
    if (!*((_BYTE *)a3 + 5113))
      *((_BYTE *)a3 + 291) = 1;
    if (!*((_BYTE *)a3 + 5102))
      *((_DWORD *)a3 + 12) = 0;
    if (!*((_BYTE *)a3 + 5108))
      *((_BYTE *)a3 + 213) = 1;
    if (!*((_BYTE *)a3 + 5100))
      *((_BYTE *)a3 + 241) = 0;
  }
  if (*((_BYTE *)a3 + 5129))
  {
    if (!*((_BYTE *)a3 + 5079))
      a3[147] = 500;
    if (!*((_BYTE *)a3 + 5080))
      *((_BYTE *)a3 + 292) = 1;
    v34 = *a3;
    v35 = a3[2];
    if (!*((_BYTE *)a3 + 4970))
      *((_DWORD *)a3 + 15) = 1103101952;
    v36 = v35 * v34;
    if (!*((_BYTE *)a3 + 4969))
    {
      if (v36 <= 101376)
        v37 = 500000;
      else
        v37 = 6000000;
      *((_DWORD *)a3 + 13) = v37;
    }
    if (*((_BYTE *)a3 + 4993) && *((_BYTE *)a3 + 211))
      *((_DWORD *)a3 + 21) = 31;
    if (!*((_BYTE *)a3 + 5057))
      *((_BYTE *)a3 + 267) = 4;
    if (!*((_BYTE *)a3 + 5113))
      *((_BYTE *)a3 + 291) = 1;
    if (v36 <= 25344)
    {
      if (!*((_BYTE *)a3 + 5055))
        *((_BYTE *)a3 + 265) = 3;
      if (!*((_BYTE *)a3 + 5056))
        *((_BYTE *)a3 + 266) = 2;
      if (*((_BYTE *)a3 + 5052))
        goto LABEL_428;
      v38 = 64;
LABEL_427:
      *((_DWORD *)a3 + 61) = v38;
LABEL_428:
      if (!*((_BYTE *)a3 + 5053))
        *((_DWORD *)a3 + 62) = 4;
      if (!*((_BYTE *)a3 + 5066))
        *((_BYTE *)a3 + 283) = 0;
      if (!*((_BYTE *)a3 + 5101))
        *((_DWORD *)a3 + 11) = 2;
      goto LABEL_474;
    }
    if (v36 < 0x21001)
    {
      if (!*((_BYTE *)a3 + 5055))
        *((_BYTE *)a3 + 265) = 3;
      if (!*((_BYTE *)a3 + 5056))
        *((_BYTE *)a3 + 266) = 2;
      if (*((_BYTE *)a3 + 5052))
        goto LABEL_428;
      v38 = 128;
      goto LABEL_427;
    }
    if (v36 >= 0x70801)
    {
      if (!*((_BYTE *)a3 + 5055))
        *((_BYTE *)a3 + 265) = 4;
      if (!*((_BYTE *)a3 + 5056))
        *((_BYTE *)a3 + 266) = 3;
      if (!*((_BYTE *)a3 + 5052))
        *((_DWORD *)a3 + 61) = 256;
      if (!*((_BYTE *)a3 + 5053))
        *((_DWORD *)a3 + 62) = 16;
      if (!*((_BYTE *)a3 + 5068) && !*((_BYTE *)a3 + 288))
        *((_BYTE *)a3 + 286) = 1;
      if (!*((_BYTE *)a3 + 5067) && !*((_BYTE *)a3 + 287))
        *((_BYTE *)a3 + 285) = 1;
      if (*((_BYTE *)a3 + 5102) || *((_BYTE *)a3 + 5101))
        goto LABEL_470;
      v39 = 8;
    }
    else
    {
      if (!*((_BYTE *)a3 + 5055))
        *((_BYTE *)a3 + 265) = 4;
      if (!*((_BYTE *)a3 + 5056))
        *((_BYTE *)a3 + 266) = 3;
      if (!*((_BYTE *)a3 + 5052))
        *((_DWORD *)a3 + 61) = 256;
      if (!*((_BYTE *)a3 + 5053))
        *((_DWORD *)a3 + 62) = 16;
      if (!*((_BYTE *)a3 + 5068) && !*((_BYTE *)a3 + 288))
        *((_BYTE *)a3 + 286) = 1;
      if (!*((_BYTE *)a3 + 5067) && !*((_BYTE *)a3 + 287))
        *((_BYTE *)a3 + 285) = 1;
      if (*((_BYTE *)a3 + 5102) || *((_BYTE *)a3 + 5101))
        goto LABEL_470;
      v39 = 0x100000005;
    }
    *(_QWORD *)(a3 + 22) = v39;
LABEL_470:
    if (!*((_BYTE *)a3 + 5105))
    {
      a3[131] = 3;
      *((_BYTE *)a3 + 264) = 0;
    }
    if (!*((_BYTE *)a3 + 5106))
      *((_BYTE *)a3 + 261) = 20;
  }
LABEL_474:
  if (!*((_BYTE *)a3 + 5134))
    goto LABEL_551;
  switch(*((_BYTE *)a3 + 577))
  {
    case 1:
      result = (uint64_t)sub_1B68F0494(a3);
      goto LABEL_551;
    case 2:
      result = (uint64_t)sub_1B68F0720(a3);
      goto LABEL_551;
    case 3:
      result = (uint64_t)sub_1B68F0720(a3);
      if (!*((_BYTE *)a3 + 4993))
        *((_BYTE *)a3 + 211) = 0;
      *((_DWORD *)a3 + 56) = 0;
      if (!*((_BYTE *)a3 + 5111))
        *((_BYTE *)a3 + 269) = 0;
      if (!*((_BYTE *)a3 + 4973))
        result = (uint64_t)sub_1B68F0A4C(a3);
      if (!*((_BYTE *)a3 + 4969) || !*((_DWORD *)a3 + 13))
      {
        if (!*((_BYTE *)a3 + 5109))
          a3[298] = 767;
        result = sub_1B68F03C0((uint64_t)a3, 12);
      }
      goto LABEL_551;
    case 4:
    case 6:
    case 7:
      if (!*((_BYTE *)a3 + 5021))
        *((_BYTE *)a3 + 316) = 0;
      if (!*((_BYTE *)a3 + 4974))
        *((_DWORD *)a3 + 78) = 0x40000000;
      if (!*((_BYTE *)a3 + 5022))
        *((_BYTE *)a3 + 318) = 6;
      if (!*((_BYTE *)a3 + 5023))
        v74 = 6;
      if (!*((_BYTE *)a3 + 5026))
        *((_BYTE *)a3 + 322) = 1;
      if (!*((_BYTE *)a3 + 5027))
        *((_BYTE *)a3 + 323) = 1;
      if (!*((_BYTE *)a3 + 5038))
        *((_BYTE *)a3 + 290) = 1;
      if (!*((_BYTE *)a3 + 4973))
      {
        v40 = *((unsigned __int8 *)a3 + 211);
        if (v40 == 32 || v40 == 2)
        {
          v41 = a3[2] * *a3;
          *((_BYTE *)a3 + 325) = 0;
          a3[163] = 1;
          *((_BYTE *)a3 + 322) = 1;
          if (!*((_BYTE *)a3 + 318))
            *((_BYTE *)a3 + 318) = 1;
          if (v41 > 101376)
          {
            if (v41 >= 0x70801)
            {
              if (v41 > 0xE1000)
              {
                v42 = 60;
                *((_DWORD *)a3 + 76) = 60;
                v43 = 0x40000000;
              }
              else
              {
                v42 = 90;
                *((_DWORD *)a3 + 76) = 90;
                v43 = 1077936128;
              }
            }
            else
            {
              v42 = 120;
              *((_DWORD *)a3 + 76) = 120;
              v43 = 1082130432;
            }
          }
          else
          {
            v42 = 150;
            *((_DWORD *)a3 + 76) = 150;
            v43 = 1084227584;
          }
          *((_DWORD *)a3 + 78) = v43;
          *((_DWORD *)a3 + 21) = v42;
        }
        else
        {
          result = (uint64_t)sub_1B68F0A4C(a3);
        }
      }
      if (*((_BYTE *)a3 + 4993))
      {
        v44 = *((_DWORD *)a3 + 13);
        if (*((_BYTE *)a3 + 4969))
        {
          if (!v44)
          {
LABEL_520:
            if (!*((_BYTE *)a3 + 5109))
              a3[298] = 767;
            result = sub_1B68F03C0((uint64_t)a3, 7);
            goto LABEL_546;
          }
        }
        else if (!v44)
        {
          goto LABEL_546;
        }
      }
      else
      {
        if (!*((_BYTE *)a3 + 4969) || !*((_DWORD *)a3 + 13))
          goto LABEL_520;
        *((_BYTE *)a3 + 211) = 1;
      }
      if (!*((_BYTE *)a3 + 4997))
        *((_DWORD *)a3 + 18) = 1;
      if (!*((_BYTE *)a3 + 4998))
        *((_DWORD *)a3 + 19) = 0;
      if (!*((_BYTE *)a3 + 4999))
        *((_DWORD *)a3 + 20) = 1;
      v45 = *((_DWORD *)a3 + 76);
      if (v45 == 1)
      {
        v46 = 1;
      }
      else
      {
        v46 = *((_DWORD *)a3 + 75);
        if (v46 == 1)
        {
          v45 = 1;
        }
        else if (v45 == 0x800000)
        {
          v46 = 30;
          v45 = 31;
        }
        else
        {
          if (v46 < v45 && v46 > 1)
            v45 = *((_DWORD *)a3 + 75);
          v46 = 30;
        }
      }
      *((_DWORD *)a3 + 21) = v45;
      *((_DWORD *)a3 + 54) = v46;
      *((_DWORD *)a3 + 55) = 1069547520;
LABEL_546:
      if (!*((_BYTE *)a3 + 5100))
        *((_BYTE *)a3 + 241) = 0;
      if (*((_BYTE *)a3 + 211) == 2 && !*((_BYTE *)a3 + 5003))
        *((_BYTE *)a3 + 599) = 1;
LABEL_551:
      if (*((_BYTE *)a3 + 5147))
      {
        *((_BYTE *)a3 + 668) = 1;
        if (!*((_BYTE *)a3 + 4989))
        {
          *((_BYTE *)a3 + 4989) = 1;
          *((_BYTE *)a3 + 16) = 100;
        }
        if (!*((_BYTE *)a3 + 4988))
        {
          *((_BYTE *)a3 + 4988) = 1;
          *((_BYTE *)a3 + 400) = 1;
        }
        if (!*((_BYTE *)a3 + 5084))
        {
          *((_BYTE *)a3 + 5084) = 1;
          *((_BYTE *)a3 + 653) = 1;
        }
        if (!*((_BYTE *)a3 + 5086))
        {
          *((_BYTE *)a3 + 5086) = 1;
          *((_BYTE *)a3 + 657) = 1;
        }
        if (!*((_BYTE *)a3 + 5087))
        {
          *((_BYTE *)a3 + 5087) = 1;
          *((_BYTE *)a3 + 658) = 1;
        }
        if (!*((_BYTE *)a3 + 5145))
          *((_BYTE *)a3 + 5145) = 1;
        if (!*((_BYTE *)a3 + 5151))
        {
          *((_BYTE *)a3 + 5151) = 1;
          *((_BYTE *)a3 + 615) = 3;
        }
        if (!*((_BYTE *)a3 + 5155))
        {
          *((_BYTE *)a3 + 5155) = 1;
          *((_BYTE *)a3 + 680) = 3;
        }
        if (!*((_BYTE *)a3 + 5058))
        {
          *((_BYTE *)a3 + 5058) = 1;
          *((_BYTE *)a3 + 272) = 1;
        }
        if (!*((_BYTE *)a3 + 5090))
        {
          *((_BYTE *)a3 + 5090) = 1;
          *((_BYTE *)a3 + 624) = 1;
        }
        if (!*((_BYTE *)a3 + 5101))
        {
          *((_BYTE *)a3 + 5101) = 1;
          *(_QWORD *)(a3 + 22) = 1;
        }
        if (!*((_BYTE *)a3 + 5163))
        {
          *((_BYTE *)a3 + 5163) = 1;
          *((_BYTE *)a3 + 4849) = 1;
        }
        *((_BYTE *)a3 + 600) = 1;
        *((_BYTE *)a3 + 671) = 0;
        if (!*((_BYTE *)a3 + 5124))
          *((_BYTE *)a3 + 368) = 1;
        if (!*((_BYTE *)a3 + 5159))
        {
          *((_BYTE *)a3 + 321) = 2;
          *((_BYTE *)a3 + 5159) = 1;
        }
        if (!*((_BYTE *)a3 + 5091))
        {
          *((_BYTE *)a3 + 627) = 1;
          *((_BYTE *)a3 + 5091) = 1;
        }
        *((_BYTE *)a3 + 669) = 1;
        if (!*((_BYTE *)a3 + 5161))
        {
          a3[2407] = 0;
          *((_BYTE *)a3 + 5161) = 1;
        }
        if (!*((_BYTE *)a3 + 5093))
        {
          *((_BYTE *)a3 + 260) = 5;
          *((_BYTE *)a3 + 5093) = 1;
        }
        if (!*((_BYTE *)a3 + 5095))
        {
          *((_BYTE *)a3 + 630) = 1;
          *((_BYTE *)a3 + 5095) = 1;
        }
        if (!*((_BYTE *)a3 + 5094))
        {
          *((_BYTE *)a3 + 629) = 1;
          *((_BYTE *)a3 + 5094) = 1;
        }
        if (!*((_BYTE *)a3 + 5092))
        {
          *((_BYTE *)a3 + 628) = 3;
          *((_BYTE *)a3 + 5092) = 1;
        }
      }
      if (*((_BYTE *)a3 + 5142))
      {
        *((_BYTE *)a3 + 663) = 1;
        result = (uint64_t)sub_1B68F0494(a3);
        if (!*((_BYTE *)a3 + 5001))
          *((_DWORD *)a3 + 106) = 0;
        if (!*((_BYTE *)a3 + 5006))
          *((_BYTE *)a3 + 2697) = 1;
        if (*((_BYTE *)a3 + 5143))
          *((_BYTE *)a3 + 664) = 1;
        if (*((_BYTE *)a3 + 5146))
          *((_BYTE *)a3 + 667) = 1;
        if (!*((_BYTE *)a3 + 5015))
          *((_BYTE *)a3 + 684) = 3;
        if (!*((_BYTE *)a3 + 5016))
          *((_BYTE *)a3 + 685) = 40;
        if (!*((_BYTE *)a3 + 5013))
          *((_BYTE *)a3 + 683) = 3;
        if (!*((_BYTE *)a3 + 5017))
          *((_BYTE *)a3 + 687) = 0;
        if (!*((_BYTE *)a3 + 5011))
          *((_BYTE *)a3 + 682) = 26;
        if (!*((_BYTE *)a3 + 5012))
          *((_DWORD *)a3 + 173) = 0;
        if (!*((_BYTE *)a3 + 5014))
          *((_BYTE *)a3 + 686) = 20;
        if (!*((_BYTE *)a3 + 5018))
          *((_BYTE *)a3 + 688) = 51;
        if (!*((_BYTE *)a3 + 5010))
          *((_BYTE *)a3 + 677) = 0;
        if (!*((_BYTE *)a3 + 4989) && !*((_BYTE *)a3 + 4988))
        {
          *((_BYTE *)a3 + 16) = 100;
          *((_BYTE *)a3 + 400) = 1;
        }
        if (!*((_BYTE *)a3 + 5105))
        {
          a3[131] = 3;
          *((_BYTE *)a3 + 264) = 0;
        }
        *((_BYTE *)a3 + 228) = 28;
        if (!*((_BYTE *)a3 + 4981))
          *((_BYTE *)a3 + 237) = 0;
        if (!*((_BYTE *)a3 + 5005))
          *((_BYTE *)a3 + 675) = 1;
        if (!*((_BYTE *)a3 + 5033))
          *((_BYTE *)a3 + 320) = 1;
        if (!*((_BYTE *)a3 + 5022))
          *((_BYTE *)a3 + 318) = 0;
        if (!*((_BYTE *)a3 + 4977))
          *((_BYTE *)a3 + 235) = 0;
        if (!*((_BYTE *)a3 + 5111))
          *((_BYTE *)a3 + 269) = 0;
        if (!*((_BYTE *)a3 + 5026))
          *((_BYTE *)a3 + 322) = 1;
        if (!*((_BYTE *)a3 + 5027))
          *((_BYTE *)a3 + 323) = 1;
        if (!*((_BYTE *)a3 + 5038))
          *((_BYTE *)a3 + 290) = 1;
        if (!*((_BYTE *)a3 + 5100))
          *((_BYTE *)a3 + 241) = 0;
        if (!*((_BYTE *)a3 + 4993))
          *((_BYTE *)a3 + 211) = 2;
        if (!*((_BYTE *)a3 + 5151))
          *((_BYTE *)a3 + 615) = 4;
        if (*((_BYTE *)a3 + 237))
        {
          v48 = *((unsigned __int8 *)a3 + 615);
          if (v48 >= 3)
            v48 = 3;
          *((_BYTE *)a3 + 615) = v48;
          if ((int)(v48 + 1) < *((char *)a3 + 238))
            goto LABEL_656;
          v49 = v48 + 2;
        }
        else
        {
          v48 = *((unsigned __int8 *)a3 + 615);
          if (*((char *)a3 + 238) > (int)v48)
          {
LABEL_656:
            if (!*((_BYTE *)a3 + 5093))
            {
              *((_BYTE *)a3 + 260) = 5;
              *((_BYTE *)a3 + 5093) = 1;
            }
            if (!*((_BYTE *)a3 + 5095))
            {
              *((_BYTE *)a3 + 630) = 1;
              *((_BYTE *)a3 + 5095) = 1;
            }
            if (v48)
              *((_BYTE *)a3 + 292) = 0;
            if (!*((_BYTE *)a3 + 5019))
              *((_BYTE *)a3 + 660) = 1;
            if (!*((_BYTE *)a3 + 5003))
              *((_BYTE *)a3 + 599) = 1;
            *((_BYTE *)a3 + 661) = 3;
            *((_BYTE *)a3 + 676) = 1;
            *((_DWORD *)a3 + 12) = 0;
            *((_BYTE *)a3 + 674) = 0;
            if (!*((_BYTE *)a3 + 5084))
              *((_BYTE *)a3 + 653) = 1;
            if (!*((_BYTE *)a3 + 5112))
              *((_BYTE *)a3 + 270) = -1;
            if (!*((_BYTE *)a3 + 5090))
              *((_BYTE *)a3 + 624) = 2;
            if (!*((_BYTE *)a3 + 5069))
              *((_BYTE *)a3 + 287) = 0;
            v50 = *a3;
            v51 = a3[2];
            if (!*((_BYTE *)a3 + 5072))
              *((_BYTE *)a3 + 271) = 0;
            if (v51 <= v50 && !*((_BYTE *)a3 + 5101))
            {
              if (v51 * v50 <= 101375)
                v52 = 1;
              else
                v52 = 4;
              *((_DWORD *)a3 + 11) = v52;
            }
            if (*((_BYTE *)a3 + 5162))
              *((_BYTE *)a3 + 4839) = 1;
            if (!*((_BYTE *)a3 + 5153))
              *((_BYTE *)a3 + 678) = 1;
            if (!*((_BYTE *)a3 + 5154))
              *((_BYTE *)a3 + 679) = 1;
            goto LABEL_688;
          }
          v49 = v48 + 1;
        }
        *((_BYTE *)a3 + 238) = v49;
        goto LABEL_656;
      }
LABEL_688:
      if (*((_BYTE *)a3 + 5140))
      {
        *((_BYTE *)a3 + 316) = *((_BYTE *)a3 + 577) != 4;
        if (!*((_BYTE *)a3 + 4978))
        {
          *((_BYTE *)a3 + 602) = 0;
          *((_BYTE *)a3 + 4978) = 1;
        }
        if (!*((_BYTE *)a3 + 5107))
        {
          *((_BYTE *)a3 + 240) = 1;
          *((_BYTE *)a3 + 5107) = 1;
        }
        if (!*((_BYTE *)a3 + 5101))
        {
          *((_DWORD *)a3 + 11) = 1;
          *((_BYTE *)a3 + 5101) = 1;
        }
        if (!*((_BYTE *)a3 + 5040))
        {
          *((_BYTE *)a3 + 393) = 0;
          *((_BYTE *)a3 + 5040) = 1;
        }
        if (!*((_BYTE *)a3 + 4977))
        {
          *((_BYTE *)a3 + 235) = 6;
          *((_BYTE *)a3 + 4977) = 1;
        }
        if (!*((_BYTE *)a3 + 4992))
        {
          *((_BYTE *)a3 + 652) = 1;
          *((_BYTE *)a3 + 4992) = 1;
        }
        if (!*((_BYTE *)a3 + 5050))
        {
          *((_BYTE *)a3 + 633) = 80;
          *((_BYTE *)a3 + 5050) = 1;
        }
        if (!*((_BYTE *)a3 + 5051))
        {
          *((_BYTE *)a3 + 634) = 100;
          *((_BYTE *)a3 + 5051) = 1;
        }
        if (!*((_BYTE *)a3 + 5150))
        {
          *((_BYTE *)a3 + 614) = 1;
          *((_BYTE *)a3 + 5150) = 1;
        }
        if (!*((_BYTE *)a3 + 5049))
        {
          *((_BYTE *)a3 + 632) = 2;
          *((_BYTE *)a3 + 5049) = 1;
        }
        if (!*((_BYTE *)a3 + 4973))
        {
          *((_DWORD *)a3 + 76) = -1;
          *((_BYTE *)a3 + 4973) = 1;
        }
        if (!*((_BYTE *)a3 + 4976))
        {
          *((_DWORD *)a3 + 75) = 64;
          *((_BYTE *)a3 + 4976) = 1;
        }
        goto LABEL_714;
      }
      if (*((_BYTE *)a3 + 5141))
      {
LABEL_714:
        if (*((_BYTE *)a3 + 5141))
        {
          *((_BYTE *)a3 + 316) = *((_BYTE *)a3 + 577) != 4;
          if (!*((_BYTE *)a3 + 4978))
          {
            *((_BYTE *)a3 + 602) = 2;
            *((_BYTE *)a3 + 4978) = 1;
          }
          if (!*((_BYTE *)a3 + 5107))
          {
            *((_BYTE *)a3 + 240) = 1;
            *((_BYTE *)a3 + 5107) = 1;
          }
          if (!*((_BYTE *)a3 + 5101))
          {
            *((_DWORD *)a3 + 11) = 1;
            *((_BYTE *)a3 + 5101) = 1;
          }
          if (!*((_BYTE *)a3 + 5040))
          {
            *((_BYTE *)a3 + 393) = 0;
            *((_BYTE *)a3 + 5040) = 1;
          }
          if (!*((_BYTE *)a3 + 4977))
          {
            *((_BYTE *)a3 + 235) = 0;
            *((_BYTE *)a3 + 4977) = 1;
          }
          if (!*((_BYTE *)a3 + 4992))
          {
            *((_BYTE *)a3 + 652) = 0;
            *((_BYTE *)a3 + 4992) = 1;
          }
          if (!*((_BYTE *)a3 + 5150))
          {
            *((_BYTE *)a3 + 614) = 0;
            *((_BYTE *)a3 + 5150) = 1;
          }
          if (!*((_BYTE *)a3 + 5049))
          {
            *((_BYTE *)a3 + 632) = 0;
            *((_BYTE *)a3 + 5049) = 1;
          }
          if (!*((_BYTE *)a3 + 4976))
          {
            *((_DWORD *)a3 + 75) = 64;
            *((_BYTE *)a3 + 4976) = 1;
          }
          if (!*((_BYTE *)a3 + 4973))
          {
            *((_DWORD *)a3 + 76) = -1;
            *((_BYTE *)a3 + 4973) = 1;
          }
          if (!*((_BYTE *)a3 + 5048))
          {
            *((_BYTE *)a3 + 631) = 1;
            *((_BYTE *)a3 + 5048) = 1;
          }
          if (!*((_BYTE *)a3 + 4981))
          {
            *((_BYTE *)a3 + 236) = 1;
            *((_BYTE *)a3 + 4981) = 1;
          }
        }
      }
      if (*((_BYTE *)a3 + 4970))
        *((_DWORD *)a3 + 16) = *((_DWORD *)a3 + 15);
      v53 = v74;
      v54 = v75;
      a3[16] = 0;
      v55 = (unsigned __int16)a3[2];
      if ((v55 & 1) != 0 || (*a3 & 1) != 0 || (v55 & 3) != 0 && *((_BYTE *)a3 + 398))
        goto LABEL_787;
      if (*((_BYTE *)a3 + 398))
      {
        LOBYTE(v56) = 2 * *((_BYTE *)a3 + 236);
        *((_BYTE *)a3 + 237) = v56;
        a3[1] = (__int16)(v55 + (v55 >> 15)) >> 1;
        if (*((char *)a3 + 238) <= 3)
          *((_BYTE *)a3 + 238) = 4;
        v57 = *((_DWORD *)a3 + 76);
        if ((v57 | 0x800000) == 0x800000)
        {
          v57 = 63;
          *((_DWORD *)a3 + 76) = 63;
        }
        v58 = (v57 - 2) & 3;
        if (2 - v57 >= 0)
          v58 = -((2 - v57) & 3);
        if (v57 < 0x800000 && v57 != 1 && v58)
        {
          v59 = v57 - v58;
          if (v59 <= 6)
            v59 = 6;
          *((_DWORD *)a3 + 76) = v59;
        }
        if (*((int *)a3 + 75) < 0x800000)
          *((_DWORD *)a3 + 75) = 0x800000;
      }
      else
      {
        a3[1] = v55;
        LOBYTE(v56) = *((_BYTE *)a3 + 236);
        *((_BYTE *)a3 + 237) = v56;
      }
      if ((*((_BYTE *)a3 + 281) == 1 || *((_BYTE *)a3 + 285) == 1) && *((_BYTE *)a3 + 286) == 1)
        *((_BYTE *)a3 + 282) = 1;
      if (!*((_BYTE *)a3 + 282))
        *((_BYTE *)a3 + 282) = 1;
      if (*((_BYTE *)a3 + 316))
      {
        if (*((_BYTE *)a3 + 632) == 2 && !*((_BYTE *)a3 + 4977))
          *((_BYTE *)a3 + 235) = 6;
      }
      else if (*((_BYTE *)a3 + 632))
      {
        *((_BYTE *)a3 + 632) = 0;
      }
      v60 = *((unsigned __int8 *)a3 + 235);
      if (v60 >= 6 && !*((_BYTE *)a3 + 5150))
        *((_BYTE *)a3 + 614) = 1;
      if (*((_BYTE *)a3 + 288))
        *((_BYTE *)a3 + 286) = 0;
      if (*((_BYTE *)a3 + 287))
        *((_BYTE *)a3 + 285) = 0;
      if (v60 >= 6)
        v60 = 6;
      *((_BYTE *)a3 + 235) = v60;
      if (v60)
      {
        v56 = (1 << (v60 - 1)) - 1;
        *((_BYTE *)a3 + 236) = v56;
        *((_BYTE *)a3 + 237) = v56;
      }
      if (*((_BYTE *)a3 + 266) == 1 || *((_BYTE *)a3 + 265) == 1 || *((_BYTE *)a3 + 267) == 1)
        goto LABEL_787;
      if (!*((_BYTE *)a3 + 4961) || !*((_BYTE *)a3 + 4963))
      {
        CFLog();
        return CFLog();
      }
      v61 = *((unsigned __int8 *)a3 + 4964);
      if (!*((_BYTE *)a3 + 4964))
        *((_BYTE *)a3 + 229) = *((_BYTE *)a3 + 228);
      v62 = *((unsigned __int8 *)a3 + 4965);
      if (!*((_BYTE *)a3 + 4965))
        *((_BYTE *)a3 + 230) = *((_BYTE *)a3 + 228);
      v63 = *((unsigned __int8 *)a3 + 4966);
      if (!*((_BYTE *)a3 + 4966))
        *((_BYTE *)a3 + 231) = *((_BYTE *)a3 + 228);
      v64 = *((unsigned __int8 *)a3 + 5109);
      if (*((_BYTE *)a3 + 5109))
      {
        if (v61 | *((unsigned __int8 *)a3 + 4967) | v62 | v63)
          goto LABEL_787;
      }
      v65 = *((unsigned __int8 *)a3 + 211);
      if (*((_BYTE *)a3 + 211))
      {
        if (!*((_DWORD *)a3 + 13))
          goto LABEL_787;
        v66 = *((float *)a3 + 15);
        if (v66 <= 0.0)
          goto LABEL_787;
        if (v65 == 2)
        {
          if (*((double *)a3 + 23) > 0.0 && !*((_BYTE *)a3 + 392))
            *((_BYTE *)a3 + 601) = 1;
          if (*((_BYTE *)a3 + 5128))
          {
            v65 = 0;
            *((_BYTE *)a3 + 211) = 0;
          }
          else
          {
            v65 = 2;
          }
          if (!*((_BYTE *)a3 + 322))
            *((_BYTE *)a3 + 322) = 1;
          if (!*((_BYTE *)a3 + 5022) && *((unsigned __int8 *)a3 + 318) <= 5u && *((_BYTE *)a3 + 577) != 1)
            *((_BYTE *)a3 + 318) = 6;
        }
        else
        {
          v65 = 1;
        }
      }
      else
      {
        v66 = *((float *)a3 + 15);
      }
      if (v66 > 0.0)
      {
        if (*((float *)&v54 + 1) > 0.0)
          *((_BYTE *)a3 + 318) = (float)(v66 * *((float *)&v54 + 1));
        if (*(float *)&v54 > 0.0)
          v53 = (float)(v66 * *(float *)&v54);
      }
      if (v53 <= v56)
        v67 = 0;
      else
        v67 = v53 - v56;
      *((_BYTE *)a3 + 319) = v67;
      if (*((_BYTE *)a3 + 323) && !*((_BYTE *)a3 + 322))
        goto LABEL_787;
      if (*((_BYTE *)a3 + 663))
      {
        v68 = (char *)a3 + 325;
        v69 = *((unsigned __int8 *)a3 + 325);
        if (*((_BYTE *)a3 + 325) && v65)
          goto LABEL_837;
        goto LABEL_838;
      }
      if (*((_BYTE *)a3 + 322) && !*((_BYTE *)a3 + 318) || a3[163] < 0)
        goto LABEL_787;
      if (a3[163])
      {
        if (!*((_BYTE *)a3 + 322))
          goto LABEL_787;
        v73 = *((unsigned __int8 *)a3 + 318);
        if (!*((_BYTE *)a3 + 318))
          goto LABEL_787;
        v69 = *((unsigned __int8 *)a3 + 325);
        if (!*((_BYTE *)a3 + 325))
          goto LABEL_878;
      }
      else
      {
        v69 = *((unsigned __int8 *)a3 + 325);
        if (!*((_BYTE *)a3 + 325))
        {
LABEL_878:
          v69 = 0;
          v68 = (char *)a3 + 325;
          goto LABEL_838;
        }
        if (!*((_BYTE *)a3 + 322))
          goto LABEL_787;
        v73 = *((unsigned __int8 *)a3 + 318);
      }
      if (v73 <= 1)
        *((_BYTE *)a3 + 318) = 2;
      v68 = (char *)a3 + 325;
      if (v65)
      {
LABEL_837:
        if (*((_BYTE *)a3 + 392))
          goto LABEL_838;
LABEL_787:
        puts("SetErrAndBail()");
        return CFLog();
      }
LABEL_838:
      v70 = *((_DWORD *)a3 + 10);
      if (v70 == 2 || *((float *)a3 + 78) == 0.0 || *((_DWORD *)a3 + 75) == 1 || 1.0 / v66 == *((float *)a3 + 77))
      {
        a3[118] = 0;
LABEL_843:
        *v68 = 0;
        goto LABEL_844;
      }
      if (v70 <= 5 && v69 == 1)
        goto LABEL_843;
LABEL_844:
      if (v64 && *((_BYTE *)a3 + 577) == 1)
        goto LABEL_787;
      if (*((_BYTE *)a3 + 286) && !*((_BYTE *)a3 + 5066))
        *((_BYTE *)a3 + 283) = 1;
      if (!*((_BYTE *)a3 + 4856) && (*((_DWORD *)a3 + 1213) - 3) <= 1)
      {
        *((_BYTE *)a3 + 4850) = 0;
        *((_DWORD *)a3 + 1215) = 0;
        *((_QWORD *)a3 + 608) = 0x200000001;
      }
      v71 = *((_DWORD *)a3 + 1233);
      if (v71 == 1)
      {
        v72 = 0;
      }
      else
      {
        if (v71 != 2)
        {
          v72 = *((unsigned __int8 *)a3 + 4850);
          goto LABEL_866;
        }
        v72 = 1;
      }
      *((_BYTE *)a3 + 4850) = v72;
LABEL_866:
      if (!v72 && *((_BYTE *)a3 + 4813) != 3)
        return CFLog();
      if (!*((_BYTE *)a3 + 4851))
        *((_BYTE *)a3 + 4928) = 0;
      return result;
    case 5:
      result = (uint64_t)sub_1B68F0134(a3, &v74);
      goto LABEL_551;
    default:
      goto LABEL_551;
  }
}

uint64_t sub_1B68F2BEC(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int *a5, _BYTE *a6, int a7)
{
  int v10;
  _DWORD *v11;
  int v12;
  uint64_t result;
  int v14;
  _QWORD v15[2];
  _BYTE *v16;
  int v17;
  char v18;
  _BYTE __src[1024];
  uint64_t v20;

  v10 = 0;
  v20 = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  if (*(double *)(a2 + 184) > 0.0)
    v10 = *(_DWORD *)(*(_QWORD *)a3 + 20) - a7;
  a1[29793] = a7 & ~((v10 | a7) >> 31);
  a1[29825] = v10 & ~((v10 | a7) >> 31);
  v14 = 0;
  v11 = a1 + 29789;
  v15[0] = __src;
  v16 = __src;
  v17 = 0;
  v18 = 0;
  sub_1B68BDE9C(a1 + 29789, (uint64_t)v15, &v14);
  v15[0] = __src;
  v16 = __src;
  v17 = 0;
  v18 = 0;
  sub_1B68BDE9C(v11, (uint64_t)v15, &v14);
  v12 = (_DWORD)v16 - LODWORD(v15[0]);
  if (a4 == 1)
  {
    memcpy(a6, __src, v12);
LABEL_5:
    result = 0;
    *a5 = v12;
  }
  else
  {
    v12 = sub_1B68F3BDC(__src, (int)v16 - LODWORD(v15[0]), (uint64_t)a6);
    result = 4294958327;
    switch(a4)
    {
      case 0:
        goto LABEL_5;
      case 3:
        memcpy(a6 + 1, a6 + 4, v12 - 4);
        *a6 = v12 - 4;
        v12 -= 3;
        goto LABEL_5;
      case 4:
        memcpy(a6 + 2, a6 + 4, v12 - 4);
        *(_WORD *)a6 = bswap32(v12 - 4) >> 16;
        v12 -= 2;
        goto LABEL_5;
      case 5:
        *(_DWORD *)a6 = bswap32(v12 - 4);
        goto LABEL_5;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1B68F2DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, char *__dst, _DWORD *a11, uint64_t a12, int a13, int a14, _BYTE *a15)
{
  uint64_t v16;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  float v50;
  uint64_t v51;
  int v52;
  BOOL v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  BOOL v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  char *v79;
  unsigned __int8 *v80;
  size_t v81;
  unsigned __int8 *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unsigned __int8 *v91;
  int v92;
  int v93;
  unsigned __int8 *v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  _DWORD *v98;
  _BYTE *v99;
  float v100;
  uint64_t v101;
  _BOOL4 v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;

  v16 = a5;
  v20 = a9;
  if (a5)
    v21 = a5 + 8;
  else
    v21 = 0;
  if (a15)
    *a15 = 0;
  if (a14 || !a13)
  {
    v22 = 0;
    *a9 = 0;
    *a11 = 0;
    return v22;
  }
  v24 = a2 + 205800;
  v115 = a4;
  if (a3)
  {
    if (*(_DWORD *)(a4 + 372) == 1 && !*(_BYTE *)(a3 + 17))
    {
      *(_WORD *)(a3 + 1398) = 257;
      v45 = a6;
      v114 = a2 + 205800;
      v110 = a8;
      v47 = sub_1B68B95D0(*(_QWORD *)v24);
      v16 = a5;
      a8 = v110;
      v20 = a9;
      v24 = v114;
      a6 = v45;
      a4 = v115;
      if ((_DWORD)v47)
      {
        v22 = v47;
LABEL_160:
        CFLog();
        return v22;
      }
    }
  }
  v22 = a12;
  v25 = a7;
  v26 = (_DWORD *)a2;
  if (a1)
  {
    v26 = *(_DWORD **)(a1 + 5176);
    v25 = a1 + 5192;
  }
  v27 = v26 + 51460;
  if (a13 != 2)
  {
    if (!v16 || a13 != 4)
      goto LABEL_138;
    *a15 = 1;
    v43 = *(unsigned int *)(v16 + 196);
    v44 = *(_QWORD *)(v16 + 216);
    if (v44)
    {
      if (*(_DWORD *)(v16 + 192) <= v43)
        LODWORD(v44) = 0;
      else
        LODWORD(v44) = *(_DWORD *)(v44 + 4 * v43);
    }
    *(_DWORD *)(v25 + 128) = v44;
    *(_DWORD *)(v25 + 144) = *(_DWORD *)(*(_QWORD *)(v16 + 248) + 4 * v43);
    v48 = *(unsigned int *)(*(_QWORD *)(v16 + 208) + 4 * v43);
    v49 = *(unsigned __int8 *)(*(_QWORD *)(v16 + 360) + v48);
    v50 = (float)*(char *)(v21 + 10);
    if ((v48 & 0x80000000) == 0)
    {
      v51 = *(_QWORD *)(v21 + 16);
      if (v51)
      {
        if (*(_DWORD *)(v21 + 4) > v48)
          v50 = *(float *)(v51 + 8 * v48);
      }
    }
    v52 = (int)v50;
    if (v49 - 9 <= 3)
      goto LABEL_50;
    if (v49 - 8 <= 0xFFFFFFFC && v49 != 8)
    {
      v54 = v49 > 0x17 || ((1 << v49) & 0xCE001F) == 0;
      if (!v54 && *(_DWORD *)(v24 + 1940) >= 0x34u)
        *(_DWORD *)(v24 + 1940) = v52;
      goto LABEL_51;
    }
    v26[51935] = v52;
    if (v26[51934] >= 0x34u)
LABEL_50:
      v26[51934] = v52;
LABEL_51:
    *(_DWORD *)(a6 + 8) = (int)v44 / 8;
    *(float *)(a12 + 12) = (float)v52;
    goto LABEL_138;
  }
  v28 = *(_OWORD *)(a7 + 96);
  v29 = *(_OWORD *)(a7 + 128);
  *(_OWORD *)(a12 + 16) = *(_OWORD *)(a7 + 112);
  *(_OWORD *)(a12 + 32) = v29;
  *(_OWORD *)a12 = v28;
  v30 = *(_OWORD *)(a7 + 144);
  v31 = *(_OWORD *)(a7 + 160);
  v32 = *(_OWORD *)(a7 + 192);
  *(_OWORD *)(a12 + 80) = *(_OWORD *)(a7 + 176);
  *(_OWORD *)(a12 + 96) = v32;
  *(_OWORD *)(a12 + 48) = v30;
  *(_OWORD *)(a12 + 64) = v31;
  *a11 = 112;
  if (*(_DWORD *)a7)
  {
    v33 = __dst;
    *v20 = 0;
    if (v16 && *(_BYTE *)(a4 + 113))
    {
      v34 = *(unsigned int *)(*(_QWORD *)v27 + 1276);
      v35 = *(_DWORD *)(v16 + 192);
      if (v35 > v34)
      {
        *(_QWORD *)&v30 = *(_QWORD *)(a12 + 80);
        *(_QWORD *)(*(_QWORD *)(v16 + 408) + 8 * v34) = v30;
        LODWORD(v34) = *(_DWORD *)(*(_QWORD *)v27 + 1276);
        v35 = *(_DWORD *)(v16 + 192);
      }
      if (v35 > v34)
        *(_BYTE *)(*(_QWORD *)(v16 + 416) + v34) = *(_BYTE *)(a12 + 2);
    }
    if (__dst)
    {
      v113 = v25;
      if (!*(_BYTE *)(v25 + 98) || !*(_DWORD *)(a4 + 88))
        goto LABEL_67;
      v117 = 0;
      v36 = *(_DWORD *)(a3 + 1276);
      if (v16 && (v37 = *(_QWORD *)v16) != 0 && *(float *)(v25 + 144) > 0.0)
      {
        v38 = v20;
        v39 = v24;
        v40 = a6;
        v41 = a12;
        if (v36)
          v42 = *(_DWORD *)(v37 + 48);
        else
          v42 = *(_DWORD *)(v37 + 36);
      }
      else
      {
        if (v36)
        {
          v55 = 0;
LABEL_66:
          v33 = &__dst[v55];
          *v20 += v55;
LABEL_67:
          v59 = (int *)(a2 + 207852);
          v60 = *(unsigned __int8 *)(a2 + 208074);
          if ((*(_BYTE *)(a2 + 208075) | *(_BYTE *)(a4 + 610)) | v60)
          {
            v61 = v60 == 0;
            if (*(_BYTE *)(a2 + 208074))
              v62 = 3;
            else
              v62 = 0;
            v63 = 1;
            if (v61)
              v64 = 2;
            else
              v64 = 1;
            if (*(_BYTE *)(a2 + 208075))
              v65 = v64;
            else
              v65 = v62;
            *((_WORD *)v33 + 2) = 1286;
            v33[6] = 17;
            *(_OWORD *)(v33 + 7) = xmmword_1B69356E8;
            v33[23] = v65;
            v33[24] = 0x80;
            if ((_DWORD)a8)
            {
              if ((_DWORD)a8 != 5)
              {
                puts("unsupported case");
                exit(1);
              }
              v63 = 21;
            }
            *(_WORD *)v33 = 0;
            v33[2] = 0;
            v33[3] = v63;
            v33 += 25;
            *v20 += 25;
          }
          if (*(_BYTE *)(a7 + 98) && *(_BYTE *)(a4 + 111))
          {
            v66 = *(_BYTE *)(v24 + 36);
            *((_WORD *)v33 + 2) = 1286;
            v33[6] = 17;
            *(_OWORD *)(v33 + 7) = xmmword_1B6931C98;
            v33[23] = v66;
            v33[24] = 0x80;
            if ((_DWORD)a8)
            {
              if ((_DWORD)a8 != 5)
              {
                v22 = 4294966630;
                goto LABEL_159;
              }
              v67 = 21;
            }
            else
            {
              v67 = 1;
            }
            v111 = v16;
            *(_WORD *)v33 = 0;
            v33[2] = 0;
            v33[3] = v67;
            v33 += 25;
            *v20 += 25;
          }
          else
          {
            v111 = v16;
          }
          if (*(_DWORD *)(v24 + 2032) && *(_BYTE *)(*(_QWORD *)(a2 + 136) + 577) == 1)
          {
            v68 = *(_DWORD *)(a2 + 208060);
            v69 = *(_DWORD *)(v24 + 2048);
            v70 = v68 / v69;
            if (v69 <= v68)
            {
              v71 = 0;
              if (v70 <= 1)
                v72 = 1;
              else
                v72 = v70;
              v73 = *v59;
              v74 = 4 * v72;
              do
              {
                v73 += *(_DWORD *)(*(_QWORD *)(a6 + 48) + v71);
                *v59 = v73;
                v71 += 4;
              }
              while (v74 != v71);
            }
            if (v70 < v68)
            {
              v75 = *(_DWORD *)(a2 + 207856);
              do
              {
                v75 += *(_DWORD *)(*(_QWORD *)(a6 + 48) + 4 * v70);
                *(_DWORD *)(a2 + 207856) = v75;
                ++v70;
              }
              while ((_DWORD)v70 != v68);
            }
          }
          v112 = v22;
          v76 = *(unsigned __int8 *)(v24 + 133);
          if ((a8 - 3) < 3)
            goto LABEL_103;
          if ((_DWORD)a8 == 2)
          {
            v78 = *(_DWORD *)(a6 + 8);
            v97 = v24;
            v98 = v20;
            memcpy(v33, *(const void **)a6, v78);
            v20 = v98;
            v24 = v97;
            v25 = v113;
            a4 = v115;
LABEL_137:
            *v20 += v78;
            v16 = v111;
            v22 = v112;
            goto LABEL_138;
          }
          if (!(_DWORD)a8)
          {
LABEL_103:
            if (*(int *)(a6 + 36) >= 1)
            {
              v77 = 0;
              v78 = 0;
              while (1)
              {
                v79 = &v33[v78];
                v80 = *(unsigned __int8 **)(*(_QWORD *)(a6 + 56) + 8 * v77);
                v81 = *(unsigned int *)(*(_QWORD *)(a6 + 48) + 4 * v77);
                if (v76)
                {
                  LODWORD(v82) = (_DWORD)v33 + v78;
                  if ((_DWORD)v81)
                  {
                    v83 = &v33[v78];
                    v84 = a6;
                    v85 = v24;
                    v86 = v20;
                    v87 = v33;
                    v88 = a8;
                    memcpy(v83, v80, v81);
                    a8 = v88;
                    v33 = v87;
                    v20 = v86;
                    v24 = v85;
                    a6 = v84;
                    v25 = v113;
                    a4 = v115;
                    LODWORD(v82) = (_DWORD)v79 + v81;
                  }
                  goto LABEL_127;
                }
                v89 = &v33[v78];
                if ((_DWORD)a8 != 3)
                {
                  v90 = &v33[v78];
                  if ((_DWORD)a8 != 4)
                  {
                    if ((_DWORD)a8 != 5)
                    {
                      *(_DWORD *)v79 = 0x1000000;
                      v91 = (unsigned __int8 *)(v79 + 4);
                      if ((_DWORD)v81)
                      {
LABEL_114:
                        *v91 = *v80;
                        v82 = v91 + 1;
                        v92 = v81 - 1;
                        if ((_DWORD)v81 != 1)
                        {
                          v93 = 0;
                          v94 = v80 + 1;
                          do
                          {
                            v95 = *v94;
                            if (v93 == 2)
                            {
                              if (v95 > 3)
                              {
                                v93 = 2;
                              }
                              else
                              {
                                v93 = 0;
                                *v82 = 3;
                                v82 = v91 + 2;
                                v95 = *v94;
                              }
                            }
                            v91 = v82;
                            if (v95)
                              v93 = 0;
                            else
                              ++v93;
                            *v82++ = v95;
                            ++v94;
                            --v92;
                          }
                          while (v92);
                        }
                        goto LABEL_127;
                      }
                      goto LABEL_126;
                    }
                    *(_WORD *)v79 = -30584;
                    v90 = v79 + 2;
                  }
                  *v90 = -120;
                  v89 = v90 + 1;
                }
                *v89 = -120;
                v91 = (unsigned __int8 *)(v89 + 1);
                if ((_DWORD)v81)
                  goto LABEL_114;
LABEL_126:
                LODWORD(v82) = (_DWORD)v91;
LABEL_127:
                v96 = (_DWORD)v82 - (_DWORD)v79;
                switch((_DWORD)a8)
                {
                  case 3:
                    *v79 = v96 - 1;
                    break;
                  case 4:
                    *(_WORD *)v79 = bswap32(v96 - 2) >> 16;
                    break;
                  case 5:
                    *(_DWORD *)v79 = bswap32(v96 - 4);
                    break;
                }
                v78 += v96;
                if (++v77 >= *(int *)(a6 + 36))
                  goto LABEL_137;
              }
            }
            v78 = 0;
            goto LABEL_137;
          }
          v22 = 4294958327;
LABEL_159:
          CFLog();
          goto LABEL_160;
        }
        v38 = v20;
        *(_QWORD *)(a4 + 184) = 0;
        v56 = *(_DWORD *)(a4 + 52);
        v39 = v24;
        v40 = a6;
        v41 = a12;
        if (v56)
        {
          LODWORD(v30) = *(_DWORD *)(a4 + 20);
          v42 = (int)((double)(unint64_t)v30 * 90000.0 / (double)v56 + 0.5);
        }
        else
        {
          v42 = 90000;
        }
      }
      v57 = v16;
      v58 = a8;
      v22 = sub_1B68F2BEC(v26, a4, v16, a8, &v117, __dst, v42);
      if ((_DWORD)v22)
        goto LABEL_159;
      a6 = v40;
      v24 = v39;
      v20 = v38;
      v55 = v117;
      v22 = v41;
      v25 = v113;
      a4 = v115;
      a8 = v58;
      v16 = v57;
      goto LABEL_66;
    }
  }
LABEL_138:
  v99 = *(_BYTE **)(v24 + 168);
  if (v99)
  {
    if (*v99)
    {
      v100 = *(float *)(v25 + 144);
      if (v100 > 0.0)
      {
        v116 = 0;
        v101 = v16;
        if (*(_BYTE *)(v25 + 98))
          v102 = 1;
        else
          v102 = *(_BYTE *)(v25 + 100) != 0;
        sub_1B68CA848((uint64_t)v99, *(_DWORD *)(v25 + 128), (int)(90000.0 / v100 + 0.5), v102, 1, (_DWORD *)(v25 + 140), &v116);
        a4 = v115;
        v16 = v101;
      }
    }
  }
  if (!v16)
    return 0;
  *(_DWORD *)(v16 + 256) = *(unsigned __int8 *)(a4 + 317);
  if (!v22)
    return v22;
  v104 = *(_DWORD *)(v16 + 192);
  v103 = *(_DWORD *)(v16 + 196);
  if (v103 >= v104)
    return 0;
  v105 = *(unsigned int *)(v22 + 40);
  if (v105 >= v104)
    return 0;
  *(_DWORD *)(*(_QWORD *)(v16 + 200) + 4 * v105) = v103;
  *(_DWORD *)(*(_QWORD *)(v16 + 208) + 4 * *(unsigned int *)(v16 + 196)) = *(_DWORD *)(v22 + 40);
  *(_QWORD *)(*(_QWORD *)(v16 + 472) + 8 * *(unsigned int *)(v22 + 40)) = *(int *)(v22 + 28);
  if (!*(_DWORD *)(v16 + 256))
  {
    *(_DWORD *)(*(_QWORD *)(v16 + 216) + 4 * *(unsigned int *)(v16 + 196)) = *(_DWORD *)(v22 + 32);
    v106 = *(_QWORD *)(v16 + 216);
    v107 = *(unsigned int *)(v16 + 196);
    *(_QWORD *)(v16 + 280) += *(unsigned int *)(v106 + 4 * v107);
    if (*(_BYTE *)(v22 + 5))
      *(_QWORD *)(v16 + 288) += *(unsigned int *)(v106 + 4 * v107);
    *(double *)(v16 + 304) = *(double *)(v16 + 304)
                           + (double)((100 - *(unsigned __int16 *)(v22 + 88)) * (int)*(float *)(v22 + 12));
    *(_QWORD *)(v16 + 312) += 100 - *(unsigned __int16 *)(v22 + 88);
    *(_DWORD *)(*(_QWORD *)(v16 + 232) + 4 * (int)v107) = *(_DWORD *)(v22 + 12);
    *(double *)(v16 + 296) = *(double *)(v16 + 296) + *(float *)(v22 + 12);
    *(_QWORD *)(v16 + 328) += *(unsigned __int16 *)(v22 + 88);
    *(_BYTE *)(*(_QWORD *)(v16 + 264) + *(unsigned int *)(v22 + 40)) = *(_BYTE *)(v22 + 88);
    *(_BYTE *)(*(_QWORD *)(v16 + 272) + *(unsigned int *)(v22 + 40)) = *(_BYTE *)(v22 + 90);
  }
  *(_DWORD *)(*(_QWORD *)(v16 + 248) + 4 * *(unsigned int *)(v16 + 196)) = *(_DWORD *)(v22 + 48);
  if (!*(_DWORD *)(v16 + 348))
  {
    v108 = vcvts_n_u32_f32(*(float *)(v22 + 48), 0xAuLL);
    *(_DWORD *)(v16 + 344) = v108;
    *(_DWORD *)(v16 + 348) = *(_DWORD *)(v22 + 24) * v108;
  }
  v109 = v22;
  v22 = 0;
  *(_QWORD *)(v16 + 320) += *(int *)(v109 + 24);
  ++*(_DWORD *)(v16 + 196);
  return v22;
}

uint64_t sub_1B68F3788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, char *a6, _DWORD *a7, uint64_t a8, _BYTE *a9, _DWORD *a10, _BYTE *a11, _BYTE *a12)
{
  uint64_t v13;
  uint64_t v14;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v23;
  pthread_mutex_t *v24;
  pthread_mutex_t **v25;
  pthread_cond_t **v26;
  pthread_mutex_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v63;
  int v68;

  v13 = a3;
  v14 = a2;
  v16 = a11;
  v17 = a12;
  v68 = 0;
  v18 = *(_QWORD *)(a1 + 10624);
  v19 = *(_DWORD *)(a1 + 10604);
  if (*(_DWORD *)(a1 + 372) == 1)
  {
    v63 = (uint64_t)a11;
    v20 = a12;
    v21 = a2;
    v23 = v18 + 320 * v19;
    v25 = (pthread_mutex_t **)(v23 + 248);
    v24 = *(pthread_mutex_t **)(v23 + 248);
    if (v24)
      pthread_mutex_lock(v24);
    if (*(_DWORD *)v23)
    {
      v26 = (pthread_cond_t **)(v18 + 320 * v19 + 256);
      do
      {
        v27 = *v25;
        if (*v26)
          v28 = v27 == 0;
        else
          v28 = 1;
        if (!v28)
          pthread_cond_wait(*v26, v27);
      }
      while (*(_DWORD *)v23);
    }
    *(_DWORD *)v23 = 1;
    if (*v25)
      pthread_mutex_unlock(*v25);
    v29 = v18 + 320 * v19;
    v68 = *(_DWORD *)(v29 + 308);
    v30 = *(_QWORD *)(v29 + 32);
    v31 = v29 + 40;
    v32 = v29 + 56;
    v13 = a3;
    goto LABEL_45;
  }
  v30 = *(_QWORD *)(a1 + 5176);
  v33 = v30 + 205840;
  *(_DWORD *)(*(_QWORD *)(v30 + 128) + 4) = **(_DWORD **)(v30 + 128);
  if (!*(_BYTE *)(a1 + 4850))
  {
    v34 = *(_QWORD *)(a1 + 5168);
    *(_QWORD *)(v30 + 80) = a3;
    *(_QWORD *)(v30 + 88) = v34;
  }
  if (*(_BYTE *)(v30 + 205935))
  {
    if (*(_QWORD *)v33)
    {
      v35 = *(_DWORD **)(v30 + 144);
      if (v35)
      {
        if (v35[97])
        {
          if (!*(_BYTE *)(v30 + 205933))
          {
            v35[5] = 0;
            goto LABEL_39;
          }
        }
        else
        {
          v37 = *(_DWORD *)(*(_QWORD *)v33 + 1332);
          if (v35[154] < 3u && *(double *)(*(_QWORD *)(v30 + 5392) + 136) <= 10.5)
          {
            v35[4] = 0;
            v39 = *(_QWORD *)(v30 + 144);
            if (!*(_DWORD *)(v39 + 20))
              *(_DWORD *)(v39 + 20) = v37;
          }
          else
          {
            v35[5] = 0;
            v38 = *(_QWORD *)(v30 + 144);
            if (!*(_DWORD *)(v38 + 16))
              *(_DWORD *)(v38 + 16) = v37;
          }
          v40 = 5 * *(_DWORD *)(*(_QWORD *)v33 + 1336);
          v41 = *(_QWORD *)(v30 + 144);
          v42 = *(_DWORD *)(v41 + 16);
          if (v42 && v37 - v42 >= v40)
          {
            if (*(_BYTE *)(v30 + 205933))
              goto LABEL_39;
            v36 = *(_QWORD *)(v30 + 208120);
            if (*(_DWORD *)(*(_QWORD *)v33 + 1276) <= *(_DWORD *)(v36 + 2980))
              goto LABEL_39;
            *(_BYTE *)(v30 + 205934) = 1;
            goto LABEL_23;
          }
          v43 = *(_DWORD *)(v41 + 20);
          if (!v43 || v37 - v43 < v40 || !*(_BYTE *)(v30 + 205933))
            goto LABEL_39;
        }
        *(_BYTE *)(v30 + 205934) = 0;
        v36 = *(_QWORD *)(v30 + 208120);
LABEL_23:
        *(_BYTE *)(v36 + 3462) = 1;
      }
    }
  }
LABEL_39:
  v44 = *(_QWORD *)(v30 + 208120);
  if (v44)
    *(_DWORD *)(v44 + 220) = a4;
  v45 = sub_1B68E8AF8((__int16 *)a1, 0, a2, a3, a12, 0, &v68, a10);
  if ((_DWORD)v45)
  {
    v46 = v45;
    CFLog();
    if (a11)
      goto LABEL_51;
    goto LABEL_66;
  }
  v63 = (uint64_t)a11;
  v20 = a12;
  v21 = v14;
  v31 = a1 + 5192;
  v32 = a1 + 5208;
LABEL_45:
  v47 = *(_QWORD *)(v30 + 208120);
  if (v47 && !*(_BYTE *)(v47 + 32))
  {
    v46 = 0;
  }
  else
  {
    v46 = sub_1B68F2DA0(a1, v30, *(_QWORD *)(v30 + 205840), a1, *(_QWORD *)(a1 + 5184), v32, v31, a4, a5, a6, a7, a8, v68, *(_DWORD *)(*(_QWORD *)(v30 + 128) + 8), a9);
    if ((_DWORD)v46)
      CFLog();
  }
  v14 = v21;
  v17 = v20;
  v16 = (_BYTE *)v63;
  if (v63)
  {
LABEL_51:
    v48 = *(_QWORD *)(*(_QWORD *)(a1 + 5176) + 205800);
    v49 = *(_QWORD *)(v48 + 22824);
    if (v49 && (v50 = *(unsigned int *)(v49 + 12), (_DWORD)v50))
    {
      v51 = v49 + 216;
      while (*(_BYTE *)(*(_QWORD *)v51 + 1399))
      {
        v51 += 8;
        if (!--v50)
          goto LABEL_56;
      }
    }
    else
    {
LABEL_56:
      v52 = *(_QWORD *)(v48 + 22816);
      if (!v52 || (v53 = *(unsigned int *)(v52 + 12), !(_DWORD)v53))
      {
LABEL_61:
        v55 = *(_QWORD *)(a1 + 5168);
        v56 = *(_DWORD *)(v55 + 40);
        v57 = *(_QWORD *)(v55 + 232);
        if (v57)
          v56 += *(unsigned __int8 *)(v57 + 9);
        v58 = v56 != 0;
        goto LABEL_65;
      }
      v54 = v52 + 216;
      while (*(_BYTE *)(*(_QWORD *)v54 + 1399))
      {
        v54 += 8;
        if (!--v53)
          goto LABEL_61;
      }
    }
    v58 = 1;
LABEL_65:
    *v16 = v58;
  }
LABEL_66:
  if (*(_DWORD *)(a1 + 372) == 1)
  {
    v59 = v18 + 320 * v19;
    *(_QWORD *)(v59 + 272) = a1;
    *(_QWORD *)(v59 + 280) = v14;
    *(_QWORD *)(v59 + 288) = v13;
    *(_QWORD *)(v59 + 296) = v17;
    *(_BYTE *)(v59 + 304) = 0;
    *(_DWORD *)(v59 + 312) = 0;
    *(_DWORD *)(v59 + 308) = 0;
    v60 = *(unsigned int **)(v59 + 16);
    if (v60)
      MEMORY[0x1BCC98920](*v60);
    MEMORY[0x1BCC9892C](**(unsigned int **)(v18 + 320 * v19 + 24));
    *(_DWORD *)(a1 + 10604) = (*(_DWORD *)(a1 + 10604) + 1) % *(_DWORD *)(a1 + 10608);
  }
  v61 = *(_QWORD *)(v30 + 144);
  if (v61)
    *(_BYTE *)(v61 + 24) = *(_BYTE *)(v30 + 205933);
  return v46;
}

uint64_t sub_1B68F3BDC(_BYTE *a1, int a2, uint64_t a3)
{
  _BYTE *v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;

  *(_DWORD *)a3 = 0x1000000;
  LODWORD(v3) = a3 + 4;
  if (a2)
  {
    v3 = (_BYTE *)(a3 + 5);
    *(_BYTE *)(a3 + 4) = *a1;
    v4 = a2 - 1;
    if (a2 != 1)
    {
      v5 = 0;
      v6 = a1 + 1;
      do
      {
        v7 = *v6;
        if (v5 == 2)
        {
          if (v7 > 3)
          {
            v5 = 2;
          }
          else
          {
            v5 = 0;
            *v3++ = 3;
            v7 = *v6;
          }
        }
        if (v7)
          v5 = 0;
        else
          ++v5;
        *v3++ = v7;
        ++v6;
        --v4;
      }
      while (v4);
    }
  }
  return ((_DWORD)v3 - a3);
}

uint64_t sub_1B68F3C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  int v17;
  BOOL v18;
  char v19;
  int v20;
  int v21;
  unsigned int v22;
  int32x4_t v23;
  __int128 v24;
  uint64_t v25;
  pthread_mutex_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t i;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  __int16 v33;
  __int16 v34;
  BOOL v35;
  __int16 v36;
  __int16 v37;
  pthread_mutex_t *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t result;

  v9 = a2;
  v11 = a3 + 205800;
  *(_QWORD *)(a1 + 1856) = a2;
  v12 = *(_DWORD *)(a3 + 205988);
  *(_DWORD *)(a1 + 3332) = v12;
  *(_DWORD *)(a1 + 3336) = 4 * v12;
  *(_DWORD *)(a1 + 3328) = *(unsigned __int8 *)(*(_QWORD *)(a3 + 205840) + 1394);
  *(_DWORD *)(a1 + 1812) = 0;
  v13 = a1 + 2416;
  if (a6)
    v13 = a6;
  *(_QWORD *)(a1 + 2928) = v13;
  *(_DWORD *)(a1 + 1840) = a7;
  v14 = *(_DWORD *)(a4 + 20);
  *(_DWORD *)(a1 + 3324) = v14 == 6;
  *(_DWORD *)(a1 + 1900) = *(_DWORD *)(a5 + 14176);
  *(_BYTE *)(a1 + 3884) = *(_BYTE *)(*(_QWORD *)(a3 + 136) + 633);
  *(_DWORD *)(a1 + 3308) = *(unsigned __int8 *)(a3 + 208080);
  *(_DWORD *)(a1 + 3312) = *(unsigned __int8 *)(a3 + 208078);
  *(_DWORD *)(a1 + 3316) = *(unsigned __int8 *)(a3 + 208079);
  *(_BYTE *)(a1 + 3871) = *(_BYTE *)(a3 + 208081);
  *(_BYTE *)(a1 + 3872) = *(_BYTE *)(a3 + 208082);
  *(_BYTE *)(a1 + 3873) = *(_BYTE *)(a3 + 208083);
  *(_BYTE *)(a1 + 3874) = *(_BYTE *)(a3 + 208084);
  *(_BYTE *)(a1 + 3885) = *(_BYTE *)(*(_QWORD *)(a3 + 136) + 260);
  *(_BYTE *)(a1 + 3887) = *(_BYTE *)(a3 + 208114);
  *(_DWORD *)(a1 + 3320) = *(unsigned __int8 *)(a4 + 14118);
  if (*(_BYTE *)(a4 + 14118))
    *(_DWORD *)(a1 + 3312) = 0;
  *(_BYTE *)(a1 + 3870) = *(_BYTE *)(*(_QWORD *)v11 + 24555);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 1);
  if (v15 == 5 || v15 == 3)
  {
    v16 = *(_BYTE *)(a4 + 14114);
    if (v16)
      v16 = 1;
  }
  else
  {
    v16 = *(_BYTE *)(a4 + 14113) != 0;
  }
  *(_BYTE *)(a1 + 3869) = v16;
  v17 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 1);
  if (v17 == 5 || v17 == 3)
  {
    if (*(_BYTE *)(a4 + 14115))
      v18 = v14 == 6;
    else
      v18 = 1;
    v19 = !v18;
  }
  else
  {
    v19 = 0;
  }
  *(_BYTE *)(a1 + 3868) = v19;
  *(_QWORD *)(a1 + 3792) = *(_QWORD *)(a2 + 112);
  if (*(_BYTE *)(a4 + 34))
  {
    v20 = 1;
    *(_DWORD *)(a1 + 3876) = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 3876) = *(_DWORD *)(a2 + 248);
    v20 = *(_DWORD *)(a2 + 252);
  }
  *(_DWORD *)(a1 + 3880) = v20;
  if (*(_BYTE *)(a3 + 208087))
  {
    v21 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 1);
    if (v21 == 5 || v21 == 3)
      *(_QWORD *)(a1 + 3876) = 0x100000001;
  }
  *(_QWORD *)(a1 + 1872) = *(_QWORD *)(*(_QWORD *)(a2 + 216) + 128)
                         + (16 * *(_DWORD *)a2)
                         + (16 * *(_DWORD *)(a2 + 4) * *(_DWORD *)(*(_QWORD *)(a2 + 216) + 232));
  *(_QWORD *)(a1 + 1880) = *(_QWORD *)(a2 + 216);
  v22 = *(_DWORD *)(*(_QWORD *)(a2 + 216) + 232);
  *(_DWORD *)(a1 + 1888) = v22;
  *(_DWORD *)(a1 + 1892) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 1896) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 1864) = *(_DWORD *)(a2 + 16);
  if (!*(_DWORD *)(a1 + 3800))
  {
    *(_DWORD *)(a1 + 3800) = v22;
    v23 = vdupq_n_s32(v22);
    *(int32x4_t *)(a1 + 3804) = vmlaq_s32((int32x4_t)xmmword_1B6917F50, v23, (int32x4_t)xmmword_1B6917F40);
    *(int32x4_t *)(a1 + 3820) = vmlaq_s32((int32x4_t)xmmword_1B6917F60, v23, (int32x4_t)xmmword_1B6917F30);
    *(int32x4_t *)(a1 + 3836) = vmlaq_s32((int32x4_t)xmmword_1B6917F90, v23, (int32x4_t)xmmword_1B6917F80);
    *(int32x4_t *)(a1 + 3852) = vmlaq_s32((int32x4_t)xmmword_1B6917FA0, v23, (int32x4_t)xmmword_1B6917F70);
  }
  *(_QWORD *)&v24 = -1;
  *((_QWORD *)&v24 + 1) = -1;
  *(_OWORD *)(a1 + 3776) = v24;
  *(_OWORD *)(a1 + 3760) = v24;
  *(_OWORD *)(a1 + 3744) = v24;
  *(_OWORD *)(a1 + 3728) = v24;
  *(_OWORD *)(a1 + 3712) = v24;
  memset((void *)(a1 + 80), 255, 0x5D0uLL);
  *(_OWORD *)(a1 + 3616) = 0u;
  *(_OWORD *)(a1 + 3632) = 0u;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3664) = 0u;
  v25 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 8 * a7);
  if (!v25)
  {
    v26 = *(pthread_mutex_t **)(v9 + 104);
    if (!v26
      || (pthread_mutex_lock(v26),
          v9 = *(_QWORD *)(a1 + 1856),
          !*(_QWORD *)(*(_QWORD *)(v9 + 96) + 8 * *(unsigned int *)(a1 + 1840))))
    {
      v27 = (char *)malloc_type_malloc(0x10002uLL, 0x1000040BDFB0063uLL);
      v28 = 0;
      for (i = 0x8000; i != -2; i -= 2)
      {
        v30 = v28 - 1;
        if (!v28)
          v30 = 0;
        v31 = (v30 + 1) >> 16;
        v32 = v31 - 1;
        v18 = v31 == 0;
        v33 = v31 != 0;
        if (v18)
          v32 = v30 + 1;
        v34 = 32 * v33;
        if (v32 >= 0x100)
        {
          v32 = (v32 >> 8) - 1;
          v34 |= 0x10u;
        }
        v35 = v30 >= 0xFF;
        if (v30 >= 0xFF)
          v30 = v32;
        v36 = byte_1B693C048[v30];
        if (!v35)
          v34 = 0;
        v37 = (v34 + v36) * *(_DWORD *)(a1 + 1840);
        *(_WORD *)&v27[v28 + 0x8000] = v37;
        *(_WORD *)&v27[i] = v37;
        v28 += 2;
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1856) + 96) + 8 * *(unsigned int *)(a1 + 1840)) = v27;
      v9 = *(_QWORD *)(a1 + 1856);
    }
    v38 = *(pthread_mutex_t **)(v9 + 104);
    if (v38)
    {
      pthread_mutex_unlock(v38);
      v9 = *(_QWORD *)(a1 + 1856);
    }
    v25 = *(_QWORD *)(*(_QWORD *)(v9 + 96) + 8 * *(unsigned int *)(a1 + 1840));
  }
  *(_QWORD *)(a1 + 1816) = v25 + 0x8000;
  if (*(_BYTE *)(a3 + 1057) != 1
    || (v39 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 40) + 19112),
        v40 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 40) + 19114) >> 4,
        *(_DWORD *)(v9 + 20) == v39 >> 4)
    && *(_DWORD *)(v9 + 84) == v40)
  {
    *(_BYTE *)(a1 + 3886) = 0;
    v41 = *(_DWORD *)(v9 + 20);
    v40 = *(_DWORD *)(v9 + 84);
  }
  else
  {
    v41 = v39 >> 4;
    *(_BYTE *)(a1 + 3886) = 1;
  }
  sub_1B68F4110(a1, v41, v40);
  off_1EF13A478(a1 + 1904, *(_QWORD *)(*(_QWORD *)(a1 + 1880) + 128)+ (16 * *(_DWORD *)(a1 + 1892))+ (16 * *(_DWORD *)(a1 + 1896) * *(_DWORD *)(*(_QWORD *)(a1 + 1880) + 232)));
  result = off_1EF13A0A8(a1 + 1904, a1 + 2160);
  *(_DWORD *)(a1 + 3472) = *(unsigned __int8 *)(v11 + 2313);
  return result;
}

uint64_t sub_1B68F4110(uint64_t result, __int16 a2, __int16 a3)
{
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  int v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  __int16 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  __int16 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;

  v3 = *(_WORD *)(result + 3332);
  v4 = 4 * v3;
  v5 = -4 * v3;
  v6 = v5;
  v7 = *(_DWORD *)(result + 1892);
  v8 = *(_DWORD *)(result + 1896);
  if ((__int16)(-128 - ((_WORD)v7 << 6)) <= v5)
    v9 = v5;
  else
    v9 = -128 - ((_WORD)v7 << 6);
  if ((__int16)(-128 - ((_WORD)v8 << 6)) > v5)
    v6 = -128 - ((_WORD)v8 << 6);
  v10 = *(unsigned __int8 *)(result + 3886);
  v11 = 16 * (~(_WORD)v7 + a2);
  v12 = 16 * (~(_WORD)v8 + a3);
  if (!*(_BYTE *)(result + 3886))
  {
    v11 += 32;
    v12 += 32;
  }
  v13 = (__int16)(4 * v11);
  v14 = (__int16)(4 * v12);
  if (v13 >= v4)
    LOWORD(v13) = v4;
  if (v14 < v4)
    v4 = v14;
  *(_WORD *)(result + 3376) = v13;
  *(_WORD *)(result + 3378) = v4;
  *(_WORD *)(result + 3380) = v9;
  *(_WORD *)(result + 3382) = v6;
  v15 = *(_DWORD *)(result + 3308);
  v16 = *(_DWORD *)(result + 3316);
  v17 = 2 * v16;
  v18 = *(_DWORD *)(result + 3312);
  v19 = 2 * v16 + 8 * v15 + v18 + 4;
  v20 = ((v6 - v9) & ((v6 - v9) >> 31)) - v6;
  v21 = (__int16)(((v13 - v4) & (((__int16)v13 - v4) >> 31)) + v4) - v20;
  v22 = v19 - ((v21 & (v21 >> 31)) + v20);
  v23 = (__int16)(2 * v16 + 8 * v15 + v18 + 4 - v20);
  v24 = v23 & ~(v23 >> 31);
  if (!v10)
    v24 = v22;
  if (v24 << 16 >= 1)
  {
    v25 = (_DWORD *)(result + 3308);
    v26 = 8 * v15 - 8;
    if (v26 >= (__int16)v24)
    {
      v29 = v15 - (((__int16)v24 + 7) >> 3);
      *v25 = v29;
      v30 = (8 * v29) | 4;
    }
    else
    {
      if (v26 + v17 >= (__int16)v24)
      {
        v16 -= ((__int16)v24 - 8 * v15 + 9) >> 1;
        *(_DWORD *)(result + 3316) = v16;
        *(_DWORD *)(result + 3308) = 1;
      }
      else
      {
        v27 = v26 + v17 + v18;
        v28 = v27 >= (__int16)v24;
        v18 = v27 - (__int16)v24;
        if (v18 != 0 && v28)
        {
          LOWORD(v16) = 0;
          *(_DWORD *)(result + 3312) = v18;
          *(_DWORD *)(result + 3308) = 1;
          *(_DWORD *)(result + 3316) = 0;
        }
        else
        {
          LOWORD(v18) = 0;
          LOWORD(v16) = 0;
          *(_DWORD *)(result + 3316) = 0;
          *(_QWORD *)v25 = 1;
        }
      }
      v30 = 12;
    }
    LOWORD(v19) = v30 + 2 * v16 + v18;
  }
  v31 = v9 + v19;
  *(_WORD *)(result + 3344) = v31;
  *(_WORD *)(result + 3356) = v31;
  *(_WORD *)(result + 3352) = v31;
  *(_WORD *)(result + 3348) = v31;
  v32 = v6 + v19;
  *(_WORD *)(result + 3346) = v32;
  *(_WORD *)(result + 3358) = v32;
  *(_WORD *)(result + 3354) = v32;
  *(_WORD *)(result + 3350) = v32;
  if (v10)
    v33 = 0;
  else
    v33 = v19;
  v34 = v13 - v33;
  v35 = v4 - v33;
  *(_WORD *)(result + 3360) = v34;
  *(_WORD *)(result + 3372) = v34;
  *(_WORD *)(result + 3368) = v34;
  *(_WORD *)(result + 3364) = v34;
  *(_WORD *)(result + 3362) = v35;
  *(_WORD *)(result + 3374) = v35;
  *(_WORD *)(result + 3370) = v35;
  *(_WORD *)(result + 3366) = v35;
  return result;
}

_QWORD *sub_1B68F431C(int32x2_t *a1, int a2)
{
  _QWORD *result;
  int v5;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  int v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  int v30;
  __int16 v31;
  __int16 v32;
  unsigned __int16 v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  unsigned __int16 v36;

  result = (_QWORD *)a1[232];
  v5 = *(unsigned __int8 *)(result[5] + 1);
  if (v5 == 3 || v5 == 5)
  {
    switch(a1[433].i32[0])
    {
      case 0:
        sub_1B68FB254(result, 0, &v33);
        v7 = v33;
        v8 = v34;
        a1[70].i32[24 * a2] = v33 | (v34 << 16);
        v9 = v35;
        v10 = v36;
        a1[70].i32[24 * a2 + 12] = v35 | (v36 << 16);
        a1[384].i16[0] = v7;
        a1[384].i16[1] = v8;
        a1[392].i16[0] = v9;
        a1[392].i16[1] = v10;
        a1[408] = (int32x2_t)0x100000001;
LABEL_10:
        result = sub_1B68F59EC(a1, a2);
        break;
      case 1:
        result = (_QWORD *)sub_1B68FB254(result, 0, &v33);
        v13 = v33;
        v14 = v35;
        v15 = v34;
        a1[70].i32[(24 * a2) | 4] = v33 | (v34 << 16);
        v16 = v36;
        a1[70].i32[24 * a2 + 16] = v14 | (v36 << 16);
        a1[384].i16[0] = v13;
        a1[384].i16[1] = v15;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        a1[408].i32[0] = 2;
        a1[385].i32[0] = a1[10].i32[24 * a2 + 8];
        a1[408].i32[0] = 3;
        a1[385].i32[1] = a1[10].i32[24 * a2 + 9];
        a1[408].i32[0] = 4;
        a1[392].i16[0] = v14;
        a1[392].i16[1] = v16;
        a1[392].i32[1] = a1[10].i32[24 * a2 + 12];
        a1[408].i32[1] = 2;
        a1[393].i32[0] = a1[10].i32[24 * a2 + 20];
        a1[408].i32[1] = 3;
        a1[393].i32[1] = a1[10].i32[24 * a2 + 21];
        a1[408].i32[1] = 4;
        break;
      case 2:
        result = (_QWORD *)sub_1B68FB254(result, 0, &v33);
        v17 = v33;
        v18 = v35;
        v19 = v34;
        a1[70].i32[(24 * a2) | 6] = v33 | (v34 << 16);
        v20 = v36;
        a1[70].i32[24 * a2 + 18] = v18 | (v36 << 16);
        a1[384].i16[0] = v17;
        a1[384].i16[1] = v19;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        a1[408].i32[0] = 2;
        a1[385].i32[0] = a1[10].i32[24 * a2 + 8];
        a1[408].i32[0] = 3;
        a1[385].i32[1] = a1[10].i32[24 * a2 + 10];
        a1[408].i32[0] = 4;
        a1[392].i16[0] = v18;
        a1[392].i16[1] = v20;
        a1[392].i32[1] = a1[10].i32[24 * a2 + 12];
        a1[408].i32[1] = 2;
        a1[393].i32[0] = a1[10].i32[24 * a2 + 20];
        a1[408].i32[1] = 3;
        a1[393].i32[1] = a1[10].i32[24 * a2 + 22];
        a1[408].i32[1] = 4;
        break;
      case 3:
        result = (_QWORD *)sub_1B68FB254(result, 0, &v33);
        v21 = v33;
        v22 = v35;
        v23 = v34;
        v24 = 24 * a2;
        a1[70].i32[v24 + 8] = v33 | (v34 << 16);
        v25 = v36;
        a1[70].i32[v24 + 20] = v22 | (v36 << 16);
        a1[384].i16[0] = v21;
        a1[384].i16[1] = v23;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        a1[408].i32[0] = 2;
        a1[392].i16[0] = v22;
        a1[392].i16[1] = v25;
        a1[392].i32[1] = a1[10].i32[24 * a2 + 12];
        a1[408].i32[1] = 2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(a1[433].i32[0])
    {
      case 0:
        sub_1B68FB254(result, 0, &v33);
        v11 = v33;
        v12 = v34;
        a1[70].i32[24 * a2] = v33 | (v34 << 16);
        a1[384].i16[0] = v11;
        a1[384].i16[1] = v12;
        a1[408].i32[0] = 1;
        a1[400].i32[0] = 0;
        goto LABEL_10;
      case 1:
        result = (_QWORD *)sub_1B68FB254(result, 0, &v33);
        v26 = v33;
        v27 = v34;
        a1[70].i32[(24 * a2) | 4] = v33 | (v34 << 16);
        a1[384].i16[0] = v26;
        a1[384].i16[1] = v27;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        a1[408].i32[0] = 2;
        a1[385].i32[0] = a1[10].i32[24 * a2 + 8];
        a1[408].i32[0] = 3;
        a1[385].i32[1] = a1[10].i32[24 * a2 + 9];
        a1[408].i32[0] = 4;
        return result;
      case 2:
        result = (_QWORD *)sub_1B68FB254(result, 0, &v33);
        v28 = v33;
        v29 = v34;
        a1[70].i32[(24 * a2) | 6] = v33 | (v34 << 16);
        a1[384].i16[0] = v28;
        a1[384].i16[1] = v29;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        a1[408].i32[0] = 2;
        a1[385].i32[0] = a1[10].i32[24 * a2 + 8];
        a1[408].i32[0] = 3;
        a1[385].i32[1] = a1[10].i32[24 * a2 + 10];
        v30 = 4;
        goto LABEL_17;
      case 3:
        result = (_QWORD *)sub_1B68FB254(result, 0, &v33);
        v31 = v33;
        v32 = v34;
        a1[70].i32[24 * a2 + 8] = v33 | (v34 << 16);
        a1[384].i16[0] = v31;
        a1[384].i16[1] = v32;
        a1[384].i32[1] = a1[10].i32[24 * a2];
        v30 = 2;
LABEL_17:
        a1[408].i32[0] = v30;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1B68F477C(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v6 = result;
  v7 = *(unsigned int *)(result + 3464);
  v8 = byte_1B6935658[4 * v7 + a4];
  v9 = byte_1B6935668[4 * v7 + a4];
  *(_DWORD *)(result + 3384) = v9 + 16 * *(_DWORD *)(result + 1892);
  *(_DWORD *)(result + 3388) = v8 + 16 * *(_DWORD *)(result + 1896);
  v10 = result + 16 * v8;
  *(_QWORD *)(result + 3440) = v10 + v9 + 1904;
  *(_QWORD *)(result + 3448) = v10 + 8 * v9 + 2160;
  v11 = *(_QWORD *)(result + 1816);
  v12 = result + 4 * (24 * a2 + 12 * a3 + a4 + dword_1B69356A8[v7]);
  *(_QWORD *)(result + 1824) = v11 + 2 * -*(__int16 *)(v12 + 560);
  *(_QWORD *)(result + 1832) = v11 + 2 * -*(__int16 *)(v12 + 562);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 1856) + 8 * a3 + 224) + 8 * a2);
  v14 = *(_QWORD *)(v13 + 488);
  if (*(_DWORD *)(v14 + 152))
  {
    *(_DWORD *)(v14 + 168) = *(_DWORD *)(result + 1844);
    *(_DWORD *)(v14 + 172) = *(_DWORD *)(result + 1848);
    result = sub_1B68BBBC8(v14);
  }
  v15 = *(_DWORD *)(v13 + 232);
  *(_DWORD *)(v6 + 3400) = v15;
  v16 = (32 * v15);
  *(_QWORD *)(v6 + 3408) = *(_QWORD *)(v14 + 72);
  *(_QWORD *)(v6 + 3416) = *(_QWORD *)(v14 + 80) + v16 + 32;
  *(_QWORD *)(v6 + 3424) = *(_QWORD *)(v14 + 88) + v16 + 32;
  *(_QWORD *)(v6 + 3432) = *(_QWORD *)(v14 + 96) + v16 + 32;
  if (*(_BYTE *)(v6 + 3869)
    && (v17 = *(_QWORD *)(v6 + 3792), *(_BYTE *)(v17 + 32 * a3 + a2 + 12))
    && ((v18 = v17 + 384 * a3 + 12 * a2,
         v20 = *(_DWORD *)(v18 + 140),
         v19 = (_DWORD *)(v18 + 140),
         v20 != 1 << *(_DWORD *)(v17 + 4))
     || *(_DWORD *)(v17 + 384 * a3 + 12 * a2 + 908)))
  {
    *(_QWORD *)v6 = &qword_1EF13A328;
    *(_QWORD *)(v6 + 8) = &qword_1EF13A2F0;
    *(_QWORD *)(v6 + 16) = &qword_1EF13A2B8;
    *(_QWORD *)(v6 + 24) = &qword_1EF13A360;
    *(_QWORD *)(v6 + 32) = &qword_1EF13A210;
    *(_QWORD *)(v6 + 40) = &qword_1EF13A248;
    v21 = qword_1EF13A3A0;
    *(_QWORD *)(v6 + 48) = &qword_1EF13A280;
    *(_QWORD *)(v6 + 56) = v21;
    *(_QWORD *)(v6 + 64) = qword_1EF13A3C0;
    *(_BYTE *)(v6 + 3456) = *v19;
    *(_BYTE *)(v6 + 3457) = *(_DWORD *)(v17 + 384 * a3 + 12 * a2 + 908);
    *(_BYTE *)(v6 + 3458) = *(_DWORD *)(v17 + 4);
  }
  else
  {
    *(_QWORD *)v6 = &qword_1EF13A1D8;
    *(_QWORD *)(v6 + 8) = &qword_1EF13A1A0;
    *(_QWORD *)(v6 + 16) = &qword_1EF13A168;
    *(_QWORD *)(v6 + 24) = off_1E6A14728;
    *(_QWORD *)(v6 + 32) = &qword_1EF13A0C0;
    *(_QWORD *)(v6 + 40) = &qword_1EF13A0F8;
    v22 = qword_1EF13A398;
    *(_QWORD *)(v6 + 48) = &qword_1EF13A130;
    *(_QWORD *)(v6 + 56) = v22;
    *(_QWORD *)(v6 + 64) = qword_1EF13A3B8;
  }
  return result;
}

uint64_t sub_1B68F4A14(uint64_t result, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int16x8_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  unint64_t v16;
  unsigned int v17;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  unint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  unsigned int *v34;
  unsigned int v35;
  __int16 *v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  _WORD *v51;
  __int16 *v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned __int16 v65;
  _DWORD v66[16];
  uint64_t v67;

  v6 = result;
  v67 = *MEMORY[0x1E0C80C00];
  v65 = 0;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 1856) + 40) + 1);
  v8 = a2;
  if (!*(_DWORD *)(result + 3464))
    result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 56))(result + 3384, result + 32 * a2 + 2938);
  v9 = (int16x8_t *)(v6 + (v8 << 6));
  v10 = *(int16x8_t *)(v6 + 3344);
  v11 = *(int16x8_t *)(v6 + 3360);
  v12 = vminq_s16(vmaxq_s16(v9[192], v10), v11);
  v13 = vminq_s16(vmaxq_s16(v9[193], v10), v11);
  v14 = vminq_s16(vmaxq_s16(v9[194], v10), v11);
  v15 = vminq_s16(vmaxq_s16(v9[195], v10), v11);
  v9[192] = v12;
  v9[193] = v13;
  v9[194] = v14;
  v9[195] = v15;
  v16 = v12.u32[0];
  v17 = *(_DWORD *)(v6 + 3200);
  *(_BYTE *)(v6 + v8 + 2936) = 0;
  *(_DWORD *)(v6 + 3292) = 0;
  if (a4)
    goto LABEL_24;
  if (v7 != 3 && v7 != 5)
  {
    if (!*(_DWORD *)(v6 + 3464) && v12.i32[0] == *(_DWORD *)(v6 + 48 * a2 + 560))
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, unsigned __int16 *))(v6 + 64))(v12.u32[0], v6 + 3384, *(_QWORD *)(v6 + 2928), &v65);
      *(_BYTE *)(v6 + v8 + 2936) = 1;
      v22 = *(unsigned __int8 *)(v6 + 3886);
      if (!*(_BYTE *)(v6 + 3886)
        || *(__int16 *)(v6 + 3376) >= (__int16)v16 && *(__int16 *)(v6 + 3378) >= (int)v16 >> 16)
      {
        v23 = v16 >> 16;
        v24 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 1824) + 2 * (__int16)v16)
            + v65
            + *(unsigned __int16 *)(*(_QWORD *)(v6 + 1832) + ((uint64_t)(v16 >> 16 << 48) >> 47));
        if (v24 < *(_DWORD *)(v6 + 3296))
        {
          *(_DWORD *)(v6 + 3296) = v24;
LABEL_30:
          *(_WORD *)(v6 + 3304) = v16;
          *(_WORD *)(v6 + 3306) = v23;
          *(_DWORD *)(v6 + 3468) = 0;
          goto LABEL_31;
        }
      }
      goto LABEL_31;
    }
    if (v7 != 5)
      goto LABEL_24;
  }
  if (!*(_BYTE *)(v6 + 3869)
    && *(_BYTE *)(v6 + 3560)
    && v12.i32[0] == *(_DWORD *)(v6 + 8 * a3 + 4 * v8 + 3476)
    && v12.i32[0] == *(_DWORD *)(v6 + 48 * a2 + 560))
  {
    v19 = *(_DWORD *)(v6 + 3464);
    if (!v19)
    {
      result = off_1EF13A0B8(v6 + 3384, v6 + (v8 << 8) + 2416, v6 + 32 * v8 + 3002);
      v19 = *(_DWORD *)(v6 + 3464);
    }
    v20 = v6 + 32 * v8 + 2 * (a3 + 4 * v19);
    v21 = *(unsigned __int16 *)(v20 + 3002);
    v65 = *(_WORD *)(v20 + 3002);
  }
  else
  {
LABEL_24:
    result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *))(*(_QWORD *)(v6 + 32)
                                                                            + 8 * *(unsigned int *)(v6 + 3464)))(v12.u32[0], v6 + 3384, &v65);
    v21 = v65;
  }
  v22 = *(unsigned __int8 *)(v6 + 3886);
  if (!*(_BYTE *)(v6 + 3886) || *(__int16 *)(v6 + 3376) >= (__int16)v16 && *(__int16 *)(v6 + 3378) >= (int)v16 >> 16)
  {
    v25 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 1824) + 2 * (__int16)v16)
        + v21
        + *(unsigned __int16 *)(*(_QWORD *)(v6 + 1832) + ((uint64_t)(v16 >> 16 << 48) >> 47));
    if (v25 < *(_DWORD *)(v6 + 3296))
    {
      *(_DWORD *)(v6 + 3296) = v25;
      v23 = v16 >> 16;
      goto LABEL_30;
    }
  }
LABEL_31:
  v66[0] = 0;
  v26 = (_DWORD *)(v6 + 4 * v8);
  LODWORD(v27) = v26[816];
  if (v27 >= 2)
  {
    v28 = v26 + 816;
    v29 = 1;
    v30 = 1;
    while (1)
    {
      v66[v30] = v29;
      if (v30)
      {
        v31 = v30;
        v32 = v6 + (v8 << 6);
        v33 = (__int16 *)(v32 + 4 * v29 + 3072);
        v34 = v66;
        while (1)
        {
          v35 = *v34++;
          v36 = (__int16 *)(v32 + 4 * v35 + 3072);
          if ((*(_BYTE *)(v6 + 3872) & 1) != 0)
          {
            v37 = *v36 - *v33;
            if (v37 < 0)
              v37 = *v33 - *v36;
            if (v37 <= 6)
            {
              v38 = v36[1] - *(__int16 *)(v32 + 4 * v29 + 3074);
              if (v38 < 0)
                v38 = *(__int16 *)(v32 + 4 * v29 + 3074) - v36[1];
              if (v38 <= 6)
              {
                v39 = 3 * *(_DWORD *)(v6 + 3288);
                if (v39 >= 0x7D0)
                  v39 = 2000;
                if (v39 > 2 * *(_DWORD *)(v6 + 3296))
                  goto LABEL_71;
              }
            }
          }
          v40 = *(_DWORD *)v33;
          if (*(_DWORD *)v36 == *(_DWORD *)v33)
            goto LABEL_71;
          if (!--v31)
            goto LABEL_49;
        }
      }
      v40 = *(_DWORD *)(v6 + (v8 << 6) + 4 * v29 + 3072);
LABEL_49:
      ++v30;
      v17 = *(_DWORD *)(v6 + 4 * v29 + 3200);
      v41 = *(unsigned int *)(v6 + 3464);
      if (!(_DWORD)v41
        && (*(_BYTE *)(v6 + 3872) & 2) != 0
        && v17 >= 2
        && *(int *)(v6 + 1892) >= 2
        && *(int *)(v6 + 1896) >= 2)
      {
        v44 = *(_DWORD *)(v6 + 3288);
        if (v44 != -1)
        {
          v45 = 2 * v44;
          if (v45 >= 0xFA0)
            v45 = 4000;
          if (*(_DWORD *)(v6 + 3296) < v45)
            goto LABEL_71;
        }
      }
      if (v40)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *))(*(_QWORD *)(v6 + 32) + 8 * v41))(v40, v6 + 3384, &v65);
        v22 = *(unsigned __int8 *)(v6 + 3886);
        if (*(_BYTE *)(v6 + 3886) && (*(__int16 *)(v6 + 3376) < (__int16)v40 || *(__int16 *)(v6 + 3378) < v40 >> 16))
          goto LABEL_71;
        v42 = (unint64_t)v40 >> 16;
        v43 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 1824) + 2 * (__int16)v40)
            + v65
            + *(unsigned __int16 *)(*(_QWORD *)(v6 + 1832) + 2 * (__int16)v42);
        if (v43 >= *(_DWORD *)(v6 + 3296))
          goto LABEL_71;
      }
      else
      {
        v46 = *(unsigned __int16 *)(v6 + 32 * v8 + 2 * (a3 + 4 * (_DWORD)v41) + 2938);
        v65 = v46;
        if (v22 && (*(__int16 *)(v6 + 3376) < 0 || *(__int16 *)(v6 + 3378) < 0))
          goto LABEL_71;
        v43 = **(unsigned __int16 **)(v6 + 1824) + **(unsigned __int16 **)(v6 + 1832) + v46;
        if (v43 >= *(_DWORD *)(v6 + 3296))
          goto LABEL_71;
        LOWORD(v40) = 0;
        LOWORD(v42) = 0;
      }
      *(_DWORD *)(v6 + 3296) = v43;
      *(_WORD *)(v6 + 3304) = v40;
      *(_WORD *)(v6 + 3306) = v42;
      *(_DWORD *)(v6 + 3468) = 0;
LABEL_71:
      ++v29;
      v27 = *v28;
      if (v29 >= v27)
      {
        v26 = (_DWORD *)(v6 + 4 * v8);
        break;
      }
    }
  }
  v26[818] = *(_DWORD *)(v6 + 3296);
  v47 = *(_DWORD *)(v6 + 3304);
  v26[820] = v47;
  v48 = HIWORD(v47);
  if (*(_BYTE *)(v6 + 3873) && !*(_DWORD *)(v6 + 3464) && (_DWORD)v27)
  {
    v49 = 0;
    v50 = 0;
    v51 = v26 + 820;
    v27 = v27;
    v52 = (__int16 *)(v6 + (v8 << 6) + 3074);
    do
    {
      if (v17 <= 1)
      {
        v53 = *(v52 - 1) - *(__int16 *)(v6 + 3304);
        if (v53 < 0)
          v53 = *(__int16 *)(v6 + 3304) - *(v52 - 1);
        v54 = *v52 - *(__int16 *)(v6 + 3306);
        if (v54 < 0)
          v54 = *(__int16 *)(v6 + 3306) - *v52;
        v50 += v53 + v54;
        ++v49;
      }
      v52 += 2;
      --v27;
    }
    while (v27);
    if (v49 >= 3 && v50 <= 4 * v49)
    {
      v55 = 2 * *(_DWORD *)(v6 + 3288);
      if (v55 >= 0x7D0)
        v55 = 2000;
      if (*(_DWORD *)(v6 + 3296) < v55)
      {
        *(_DWORD *)(v6 + 3292) = 1;
        LOWORD(v47) = *v51;
        LOWORD(v48) = v51[1];
      }
    }
  }
  v56 = ((_WORD)v47 + 2) & 0xFFFC;
  v57 = v56 & 0x3FFFF | ((unsigned __int16)((unsigned __int16)((v48 + 2) & 0xFFFC) >> 2) << 18);
  if ((_DWORD)v57 == *(_DWORD *)(v6 + 3304))
  {
    v58 = *(unsigned __int8 *)(v6 + 3886);
  }
  else
  {
    v59 = (__int16)v56;
    *(_DWORD *)(v6 + 3296) = -1;
    result = (*(uint64_t (**)(unint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)(v6 + 32)
                                                                                      + 8
                                                                                      * *(unsigned int *)(v6 + 3464)))(v57, v6 + 3384, &v65);
    v58 = *(unsigned __int8 *)(v6 + 3886);
    if (*(_BYTE *)(v6 + 3886) && (*(__int16 *)(v6 + 3376) < v59 || *(__int16 *)(v6 + 3378) < (int)v57 >> 16))
    {
      v58 = 1;
    }
    else
    {
      v60 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 1824) + 2 * (__int16)v57)
          + v65
          + *(unsigned __int16 *)(*(_QWORD *)(v6 + 1832) + ((uint64_t)(v57 >> 16 << 48) >> 47));
      if (v60 < *(_DWORD *)(v6 + 3296))
      {
        *(_DWORD *)(v6 + 3296) = v60;
        *(_WORD *)(v6 + 3304) = v59;
        *(_WORD *)(v6 + 3306) = WORD1(v57);
        *(_DWORD *)(v6 + 3468) = 0;
      }
    }
  }
  v61 = v6 + 32 * v8;
  v62 = *(unsigned __int16 *)(v61 + 2 * (a3 + 4 * *(_DWORD *)(v6 + 3464)) + 2938);
  v65 = *(_WORD *)(v61 + 2 * (a3 + 4 * *(_DWORD *)(v6 + 3464)) + 2938);
  if (!v58 || (*(__int16 *)(v6 + 3376) & 0x80000000) == 0 && (*(__int16 *)(v6 + 3378) & 0x80000000) == 0)
  {
    v63 = **(unsigned __int16 **)(v6 + 1824) + **(unsigned __int16 **)(v6 + 1832) + v62;
    if (v63 < *(_DWORD *)(v6 + 3296))
    {
      *(_DWORD *)(v6 + 3296) = v63;
      *(_DWORD *)(v6 + 3304) = 0;
      *(_DWORD *)(v6 + 3468) = 0;
    }
  }
  return result;
}

uint64_t sub_1B68F5100(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _WORD *v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unsigned int i;
  uint64_t v21;
  _WORD *v22;
  __int16 v23;
  __int16 v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  __int16 v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t *v39;
  const __int16 *v40;
  const __int16 *v41;
  int16x8_t v42;
  int16x8_t v43;
  __int16 *v44;
  int32x4_t v45;
  int32x4_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  int v54;
  int v55;
  __int16 v56;
  __int128 v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned __int16 v65;
  unsigned __int16 v66;
  unsigned __int16 v67;
  uint64_t v68;
  int16x8x2_t v69;

  v68 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(result + 3292))
  {
    v2 = result;
    v62 = 0uLL;
    v3 = *(_WORD *)(result + 3306);
    v4 = *(_WORD *)(result + 3304);
    v5 = result + 3384;
    v6 = *(_QWORD *)(result + 3408)
       + *(int *)(result + 3400) * (*(int *)(result + 3388) + (uint64_t)(v3 >> 2))
       + *(int *)(result + 3384)
       + (uint64_t)(v4 >> 2);
    v7 = (unint64_t *)(result + 3696);
    *(_QWORD *)(result + 3696) = v6;
    *(_DWORD *)(result + 3468) = -2;
    v8 = v6 + *(int *)(result + 3828);
    v9 = v6 + *(int *)(result + 3820);
    v61.i64[0] = v6 + *(int *)(result + 3824);
    v61.i64[1] = v8;
    v10 = v6 + *(int *)(result + 3812);
    v59.i64[0] = v6 + *(int *)(result + 3808);
    v59.i64[1] = v10;
    v60.i64[0] = v6 + *(int *)(result + 3816);
    v60.i64[1] = v9;
    (*(void (**)(int64x2_t *, uint64_t, unsigned __int16 *))(*(_QWORD *)(result + 8)
                                                                     + 8 * *(unsigned int *)(result + 3464)))(&v59, result + 3384, &v65);
    v12 = 0;
    v13 = 0;
    v14 = *(unsigned __int8 *)(v2 + 3886);
    do
    {
      v15 = (_WORD *)((char *)&v63 + v12);
      *v15 = *(_WORD *)((char *)&unk_1B69356B8 + v12 + 4) + v4;
      v15[1] = *(_WORD *)((char *)&unk_1B69356B8 + v12 + 6) + v3;
      v16 = *(unsigned int *)((char *)&v63 + v12);
      if (!v14 || *(__int16 *)(v2 + 3376) >= (__int16)v16 && *(__int16 *)(v2 + 3378) >= (int)v16 >> 16)
      {
        v17 = *(unsigned __int16 *)(*(_QWORD *)(v2 + 1824) + 2 * (__int16)v16)
            + *(&v65 + v13)
            + *(unsigned __int16 *)(*(_QWORD *)(v2 + 1832) + ((uint64_t)(v16 >> 16 << 48) >> 47));
        if (v17 < *(_DWORD *)(v2 + 3296))
        {
          *(_DWORD *)(v2 + 3296) = v17;
          *(_DWORD *)(v2 + 3304) = v16;
          *(_DWORD *)(v2 + 3468) = v13;
        }
      }
      ++v13;
      v12 += 4;
    }
    while (v13 != 6);
    v18 = *(_DWORD *)(v2 + 3468);
    if (v18 == -2)
      v19 = *v7;
    else
      v19 = *(_QWORD *)(v2 + 3696) + *(int *)(v2 + 4 * (v18 + 1) + 3804);
    *(_QWORD *)(v2 + 3696) = v19;
    if (*(_DWORD *)(v2 + 3308) >= 2u)
    {
      for (i = 1; i < *(_DWORD *)(v2 + 3308); ++i)
      {
        if (v18 == -2)
          break;
        v21 = dword_1B6935678[v18 + 1];
        *(_DWORD *)(v2 + 3468) = -2;
        LOWORD(v11) = *(_WORD *)(v2 + 3304);
        WORD2(v11) = *(_WORD *)(v2 + 3306);
        v22 = (_WORD *)((char *)&unk_1B69356B8 + 4 * (int)v21 + 8);
        v23 = WORD2(v11);
        v24 = *v22 + v11;
        *(int16x4_t *)&v11 = vadd_s16(*(int16x4_t *)((char *)&unk_1B69356B8 + 4 * v21), vuzp1_s16(*(int16x4_t *)&v11, *(int16x4_t *)&v11));
        v58 = v11;
        v63 = v11;
        LOWORD(v64) = v24;
        HIWORD(v64) = v22[1] + v23;
        v25 = v19 + *(int *)(v2 + 3804 + 4 * ((int)v21 + 1));
        v59.i64[0] = v19 + *(int *)(v2 + 3804 + 4 * v21);
        v59.i64[1] = v25;
        v60.i64[0] = v19 + *(int *)(v2 + 3804 + 4 * ((int)v21 + 2));
        (*(void (**)(int64x2_t *, uint64_t, unsigned __int16 *))(*(_QWORD *)(v2 + 40)
                                                                         + 8 * *(unsigned int *)(v2 + 3464)))(&v59, v5, &v65);
        v11 = v58;
        v26 = *(unsigned __int8 *)(v2 + 3886);
        if (*(_BYTE *)(v2 + 3886)
          && ((v27 = *(__int16 *)(v2 + 3376), v27 < (__int16)v58) || *(__int16 *)(v2 + 3378) < (int)v58 >> 16))
        {
          v28 = v66;
          v29 = (unint64_t)DWORD1(v58) >> 16;
        }
        else
        {
          v30 = *(_QWORD *)(v2 + 1824);
          v31 = *(_QWORD *)(v2 + 1832);
          v32 = *(unsigned __int16 *)(v30 + 2 * (__int16)v58) + v65 + *(unsigned __int16 *)(v31 + 2 * SWORD1(v58));
          v33 = *(_DWORD *)(v2 + 3296);
          if (v32 < v33)
          {
            *(_DWORD *)(v2 + 3296) = v32;
            *(_DWORD *)(v2 + 3304) = v58;
            *(_DWORD *)(v2 + 3468) = v21 - 1;
            v33 = v32;
          }
          v28 = v66;
          v29 = (unint64_t)DWORD1(v58) >> 16;
          if (!v26)
            goto LABEL_27;
          LOWORD(v27) = *(_WORD *)(v2 + 3376);
        }
        if ((__int16)v27 < SWORD2(v58) || *(__int16 *)(v2 + 3378) < (__int16)v29)
        {
          v34 = v64;
          v35 = v67;
          v36 = (unint64_t)v64 >> 16;
          goto LABEL_31;
        }
        v30 = *(_QWORD *)(v2 + 1824);
        v31 = *(_QWORD *)(v2 + 1832);
        v33 = *(_DWORD *)(v2 + 3296);
LABEL_27:
        v37 = *(unsigned __int16 *)(v30 + 2 * SWORD2(v58)) + v28 + *(unsigned __int16 *)(v31 + 2 * (__int16)v29);
        if (v37 < v33)
        {
          *(_DWORD *)(v2 + 3296) = v37;
          *(_WORD *)(v2 + 3304) = WORD2(v58);
          *(_WORD *)(v2 + 3306) = v29;
          v33 = v37;
          *(_DWORD *)(v2 + 3468) = v21;
        }
        v34 = v64;
        v35 = v67;
        v36 = (unint64_t)v64 >> 16;
        if (!v26)
          goto LABEL_34;
        LOWORD(v27) = *(_WORD *)(v2 + 3376);
LABEL_31:
        if ((__int16)v27 >= v34 && *(__int16 *)(v2 + 3378) >= (__int16)v36)
        {
          v30 = *(_QWORD *)(v2 + 1824);
          v31 = *(_QWORD *)(v2 + 1832);
          v33 = *(_DWORD *)(v2 + 3296);
LABEL_34:
          v38 = *(unsigned __int16 *)(v30 + 2 * v34) + v35 + *(unsigned __int16 *)(v31 + 2 * (__int16)v36);
          if (v38 < v33)
          {
            *(_DWORD *)(v2 + 3296) = v38;
            *(_WORD *)(v2 + 3304) = v34;
            *(_WORD *)(v2 + 3306) = v36;
            *(_DWORD *)(v2 + 3468) = v21 + 1;
          }
        }
        v18 = *(_DWORD *)(v2 + 3468);
        v39 = &v59.u64[v18 - (int)v21 + 1];
        if (v18 == -2)
          v39 = v7;
        v19 = *v39;
        *(_QWORD *)(v2 + 3696) = v19;
      }
    }
    v40 = (const __int16 *)(v2 + 3306);
    v41 = (const __int16 *)(v2 + 3304);
    v42 = vld1q_dup_s16(v41);
    v43 = vld1q_dup_s16(v40);
    v69.val[0] = vaddq_s16(v42, (int16x8_t)xmmword_1B6917FB0);
    v69.val[1] = vaddq_s16(v43, (int16x8_t)xmmword_1B6917FC0);
    v44 = (__int16 *)&v63;
    vst2q_s16(v44, v69);
    *(_DWORD *)(v2 + 3468) = -2;
    v45 = *(int32x4_t *)(v2 + 3836);
    v46 = *(int32x4_t *)(v2 + 3852);
    v69.val[0] = (int16x8_t)vdupq_n_s64(v19);
    v61 = vaddw_s32((int64x2_t)v69.val[0], *(int32x2_t *)v46.i8);
    v62 = vaddw_high_s32((int64x2_t)v69.val[0], v46);
    v59 = vaddw_s32((int64x2_t)v69.val[0], *(int32x2_t *)v45.i8);
    v60 = vaddw_high_s32((int64x2_t)v69.val[0], v45);
    result = (*(uint64_t (**)(int64x2_t *, uint64_t, unsigned __int16 *))(*(_QWORD *)v2
                                                                                 + 8 * *(unsigned int *)(v2 + 3464)))(&v59, v5, &v65);
    v47 = 0;
    v48 = *(unsigned __int8 *)(v2 + 3886);
    do
    {
      v49 = *((unsigned int *)&v63 + v47);
      if (!v48 || *(__int16 *)(v2 + 3376) >= (__int16)v49 && *(__int16 *)(v2 + 3378) >= (int)v49 >> 16)
      {
        v50 = *(unsigned __int16 *)(*(_QWORD *)(v2 + 1824) + 2 * (__int16)v49)
            + *(&v65 + v47)
            + *(unsigned __int16 *)(*(_QWORD *)(v2 + 1832) + ((uint64_t)(v49 >> 16 << 48) >> 47));
        if (v50 < *(_DWORD *)(v2 + 3296))
        {
          *(_DWORD *)(v2 + 3296) = v50;
          *(_DWORD *)(v2 + 3304) = v49;
          *(_DWORD *)(v2 + 3468) = v47;
        }
      }
      ++v47;
    }
    while (v47 != 8);
    v51 = *(_QWORD *)(v2 + 1856);
    if (*(_DWORD *)(v51 + 2652))
    {
      v52 = 16 * *(_WORD *)(v51 + 4);
      if (*(_DWORD *)(v51 + 2656))
      {
        *(_QWORD *)(v2 + 3312) = 0;
        *(_DWORD *)(v2 + 4 * a2 + 3272) = -1;
        v53 = *(__int16 *)(v2 + 3306) + v52;
        v54 = *(_DWORD *)(v51 + 2676);
        if (v53 + 15 <= v54)
        {
          v55 = *(_DWORD *)(v51 + 2672);
LABEL_53:
          if (v53 >= v55)
            return result;
          v56 = v55 - v52;
          goto LABEL_55;
        }
      }
      else
      {
        v53 = *(__int16 *)(v2 + 3306) + v52;
        v54 = *(_DWORD *)(v51 + 2668);
        if (v53 + 15 <= v54)
        {
          v55 = *(_DWORD *)(v51 + 2664);
          goto LABEL_53;
        }
      }
      v56 = v54 - v52 - 15;
LABEL_55:
      *(_WORD *)(v2 + 3306) = v56;
    }
  }
  return result;
}

uint64_t sub_1B68F56D8(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _WORD *v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t result;
  __int16 v18;
  unsigned int v19;
  _WORD v20[32];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 4 * a2 + 3272);
  if (v3 < *(_DWORD *)(a1 + 3296))
  {
    *(_DWORD *)(a1 + 3296) = v3;
    *(_DWORD *)(a1 + 3304) = *(_DWORD *)(a1 + 4 * a2 + 3280);
  }
  if (*(_DWORD *)(a1 + 3316))
  {
    v4 = 0;
    do
    {
      v5 = *(unsigned __int16 *)(a1 + 3304);
      v6 = *(unsigned __int16 *)(a1 + 3306);
      (*(void (**)(uint64_t, uint64_t, _WORD *))(*(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 3464)))(v5 | (v6 << 16), a1 + 3384, v20);
      v7 = 0;
      v8 = *(unsigned __int8 *)(a1 + 3886);
      do
      {
        v9 = (_WORD *)((char *)&unk_1B69356D8 + 1 * v7);
        v10 = (__int16)(*v9 + v5);
        v11 = (__int16)(v9[1] + v6);
        if (!v8 || *(__int16 *)(a1 + 3376) >= v10 && *(__int16 *)(a1 + 3378) >= v11)
        {
          v12 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 1824) + 2 * v10)
              + (unsigned __int16)v20[v7]
              + *(unsigned __int16 *)(*(_QWORD *)(a1 + 1832) + 2 * v11);
          if (v12 < *(_DWORD *)(a1 + 3296))
          {
            *(_DWORD *)(a1 + 3296) = v12;
            *(_WORD *)(a1 + 3304) = v10;
            *(_WORD *)(a1 + 3306) = v11;
            *(_DWORD *)(a1 + 3468) = 0;
          }
        }
        ++v7;
      }
      while (v7 != 4);
      ++v4;
    }
    while (v4 < *(_DWORD *)(a1 + 3316));
  }
  *(_DWORD *)(a1 + 3296) = -1;
  v13 = *(unsigned __int16 *)(a1 + 3304);
  v14 = *(_WORD *)(a1 + 3304);
  v15 = *(unsigned __int16 *)(a1 + 3306);
  v16 = *(_WORD *)(a1 + 3306);
  result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *))(*(_QWORD *)(a1 + 24)
                                                                + 8 * *(unsigned int *)(a1 + 3464)))(v13 | (v15 << 16), a1 + 3384, v20);
  v18 = v20[0];
  if (!*(_BYTE *)(a1 + 3886) || *(__int16 *)(a1 + 3376) >= (__int16)v13 && *(__int16 *)(a1 + 3378) >= (__int16)v15)
  {
    v19 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 1824) + 2 * (__int16)v13)
        + v20[0]
        + *(unsigned __int16 *)(*(_QWORD *)(a1 + 1832) + 2 * (__int16)v15);
    if (v19 < *(_DWORD *)(a1 + 3296))
    {
      *(_DWORD *)(a1 + 3296) = v19;
      *(_WORD *)(a1 + 3304) = v14;
      *(_WORD *)(a1 + 3306) = v16;
      *(_DWORD *)(a1 + 3468) = 0;
      *(_WORD *)(a1 + 3300) = v18;
    }
  }
  return result;
}

uint64_t sub_1B68F58D4(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  int v8;
  int v9;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  v1 = *(_QWORD *)(result + 1856);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 40) + 1);
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(unsigned int *)(result + 1864);
  v5 = v3 + 32 * v4;
  *(_WORD *)(v5 + 24) = 8224;
  v6 = (_BYTE *)(v5 + 24);
  *(_WORD *)(v5 + 27) = 0;
  v7 = *(_DWORD *)(result + 128);
  v8 = *(_DWORD *)(result + 608);
  v9 = *(_DWORD *)(result + 1040)
     - (*(unsigned __int16 *)(*(_QWORD *)(result + 1816)
                            + 2 * ((__int16)*(_DWORD *)(result + 80) - (__int16)*(_DWORD *)(result + 560)))
      + *(unsigned __int16 *)(*(_QWORD *)(result + 1816)
                            + 2 * ((*(int *)(result + 80) >> 16) - (*(int *)(result + 560) >> 16))));
  *(_DWORD *)(v5 + 8) = v9 & ~(v9 >> 31);
  if (v2 != 3 && v2 != 5)
  {
    *(_DWORD *)v5 = *(_DWORD *)(result + 80);
    *(_BYTE *)(v5 + 26) = 4;
LABEL_10:
    *v6 = 0;
    goto LABEL_11;
  }
  *(_DWORD *)v5 = *(_DWORD *)(result + 80);
  *(_DWORD *)(v5 + 4) = *(_DWORD *)(result + 128);
  v11 = *(unsigned __int8 *)(result + 3561);
  *(_BYTE *)(v5 + 26) = v11 + 3;
  v12 = *(_QWORD *)(result + 1816);
  v13 = *(unsigned __int16 *)(v12 + 2 * ((__int16)v7 - (__int16)v8));
  v14 = *(unsigned __int16 *)(v12 + 2 * ((v7 >> 16) - (v8 >> 16)));
  *(_DWORD *)(v5 + 12) = (*(_DWORD *)(result + 1088) - (v13 + v14)) & ~((*(_DWORD *)(result + 1088) - (v13 + v14)) >> 31);
  if (v11 != 2)
  {
    if (v11 == 1)
      goto LABEL_10;
    *v6 = 0;
  }
  *(_BYTE *)(v5 + 25) = 0;
LABEL_11:
  *(_DWORD *)(v3 + 32 * v4 + 16) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 1856) + 216) + 1332)
                                 - *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(result + 1856) + 224) + 1332);
  return result;
}

int32x2_t *sub_1B68F59EC(int32x2_t *result, int a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int32x2_t *v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int32 v12;
  __int32 v13;
  int v14;
  __int32 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  __int32 v32;
  __int32 v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  char v37;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  char v47;
  BOOL v48;
  _BOOL4 v49;
  BOOL v50;
  BOOL v51;
  __int16 *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  char *v57;
  __int32 v58;
  __int32 v59;
  int v60;
  __int32 v61;
  uint64_t v62;
  uint64_t v63;
  __int16 *v64;
  uint64_t v65;
  __int32 v66;
  unsigned __int32 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unint64_t v78;
  __int32 v79;
  __int32 v80;
  int v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  BOOL v85;
  char v86;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  BOOL v94;
  BOOL v95;
  char v96;
  BOOL v97;
  _BOOL4 v98;
  BOOL v99;
  BOOL v100;
  __int16 *v101;
  uint64_t v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  BOOL v111;
  char v112;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  BOOL v117;
  BOOL v118;
  BOOL v119;
  BOOL v120;
  BOOL v121;
  char v122;
  BOOL v123;
  BOOL v124;
  _BOOL4 v125;
  BOOL v126;
  __int16 *v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  __int32 v143;
  __int32 v144;
  int v145;
  int v146;
  uint64_t *v147;
  uint64_t v148;
  BOOL v149;
  char v150;
  BOOL v152;
  BOOL v153;
  BOOL v154;
  BOOL v155;
  BOOL v156;
  BOOL v157;
  BOOL v158;
  BOOL v159;
  char v160;
  BOOL v161;
  _BOOL4 v162;
  BOOL v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  uint64_t v171;
  int v172;
  int v173;
  int v174;
  int v175;
  uint64_t *v176;
  uint64_t v177;
  BOOL v178;
  char v179;
  BOOL v181;
  BOOL v182;
  BOOL v183;
  BOOL v184;
  BOOL v185;
  BOOL v186;
  BOOL v187;
  BOOL v188;
  char v189;
  BOOL v190;
  BOOL v191;
  _BOOL4 v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  int v204;
  uint64_t *v205;
  uint64_t v206;
  BOOL v207;
  char v208;
  BOOL v210;
  BOOL v211;
  BOOL v212;
  BOOL v213;
  BOOL v214;
  BOOL v215;
  BOOL v216;
  BOOL v217;
  char v218;
  BOOL v219;
  BOOL v220;
  _BOOL4 v221;
  BOOL v222;
  __int16 *v223;
  uint64_t v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  _DWORD v230[4];
  uint64_t v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;

  v245 = *MEMORY[0x1E0C80C00];
  v2 = result[232];
  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v2 + 40) + 1);
  v4 = *(_DWORD *)(*(_QWORD *)&v2 + 20);
  v5 = *(_DWORD *)(*(_QWORD *)&v2 + 84);
  v230[0] = 1;
  v230[1] = v4;
  v6 = v4 - 1;
  v230[2] = v4 - 1;
  v230[3] = v4 + 1;
  v7 = result + 384;
  if (v3 == 3 || v3 == 5)
  {
    if (!a2)
    {
      if (result[438].i32[1] != 32)
      {
        v7->i16[2 * result[408].u32[0]] = result[434].i16[2];
        v7->i16[2 * result[408].i32[0]++ + 1] = result[434].i16[3];
      }
      if (result[439].i32[0] != 32)
      {
        result[392].i16[2 * result[408].u32[1]] = result[435].i16[0];
        result[392].i16[2 * result[408].i32[1]++ + 1] = result[435].i16[1];
      }
    }
    v9 = 0;
    v10 = (char *)&result[384] + 2;
    v11 = (char *)result + 2;
    v12 = result[233].i32[0];
    v13 = result[237].i32[1];
    v14 = a2 + 1;
    while (1)
    {
      v15 = v12 - v230[v9];
      if (v15 >= v13)
      {
        if ((_DWORD)v9 == 2)
        {
          if (result[236].i32[1] != v6)
            goto LABEL_21;
        }
        else
        {
          if ((_DWORD)v9 == 1)
            goto LABEL_21;
          if ((_DWORD)v9)
          {
            if (!result[236].i32[1])
              goto LABEL_30;
LABEL_21:
            v16 = *(_QWORD *)(*(_QWORD *)&v2 + 72);
            v17 = v15;
            v18 = (__int16 *)(v16 + 32 * v15);
            if (!*((_BYTE *)v18 + 27))
            {
              v19 = *((unsigned __int8 *)v18 + 26);
              switch(v19)
              {
                case 6:
                  v21 = v16 + 32 * v17;
                  v7->i16[2 * result[408].u32[0]] = v14 * *v18 / (*(unsigned __int8 *)(v21 + 24) + 1);
                  *(_WORD *)&v10[4 * result[408].u32[0]] = v14 * v18[1] / (*(unsigned __int8 *)(v21 + 24) + 1);
                  result[392].i16[2 * result[408].u32[1]] = v14 * v18[2] / (*(unsigned __int8 *)(v21 + 25) + 1);
                  *(_WORD *)&v11[4 * result[408].u32[1] + 3136] = v14 * v18[3] / (*(unsigned __int8 *)(v21 + 25) + 1);
                  result[408] = vadd_s32(result[408], (int32x2_t)0x100000001);
                  break;
                case 5:
                  v22 = v16 + 32 * v17;
                  result[392].i16[2 * result[408].u32[1]] = v14 * v18[2] / (*(unsigned __int8 *)(v22 + 25) + 1);
                  *(_WORD *)&v11[4 * result[408].i32[1]++ + 3136] = v14 * v18[3] / (*(unsigned __int8 *)(v22 + 25) + 1);
                  break;
                case 4:
                  v20 = v16 + 32 * v17;
                  v7->i16[2 * result[408].u32[0]] = v14 * *v18 / (*(unsigned __int8 *)(v20 + 24) + 1);
                  *(_WORD *)&v10[4 * result[408].i32[0]++] = v14 * v18[1] / (*(unsigned __int8 *)(v20 + 24) + 1);
                  break;
              }
            }
            goto LABEL_22;
          }
          if (result[236].i32[1])
            goto LABEL_21;
        }
      }
LABEL_22:
      if (++v9 == 4)
      {
LABEL_30:
        v23 = **(_QWORD **)(*(_QWORD *)&v2 + 224);
        if (!v23)
          goto LABEL_285;
        v24 = *(_QWORD *)(*(_QWORD *)&v2 + 216);
        if (*(_DWORD *)(v24 + 1332) - *(_DWORD *)(v23 + 1332) > *(_DWORD *)(v24 + 1336))
          goto LABEL_285;
        v25 = *(_QWORD *)(v23 + 5016);
        if (!v25)
          goto LABEL_285;
        v26 = v23 + 19120;
        v27 = v24 + 19112;
        v28 = *(unsigned __int16 *)(v23 + 19120);
        v29 = *(unsigned __int16 *)(v24 + 19112);
        if (v28 == v29)
        {
          v228 = *(unsigned __int16 *)(v27 + 2);
          v229 = *(unsigned __int16 *)(v26 + 2);
          if (v229 == v228)
          {
            v30 = result[485].u8[5];
            if (result[485].i8[5])
            {
              v31 = 0;
              v32 = result[236].i32[1];
              v33 = result[237].i32[0];
              do
              {
                v240 = 0x100000000;
                v241 = v4;
                v242 = -1;
                v243 = v4 + 1;
                v244 = v4 - 1;
                v231 = 0x100000000;
                v232 = v4;
                v233 = -1;
                v234 = -v4;
                v235 = v4 + 1;
                v236 = v4 - 1;
                v237 = 1 - v4;
                v238 = ~v4;
                v239 = 0;
                if (result[484].i8[2])
                  v34 = &v231;
                else
                  v34 = &v240;
                v35 = (v12 - *((_DWORD *)v34 + v31));
                v36 = v31 == 1 && v32 == 0;
                if (result[484].i8[2])
                {
                  v37 = v36;
                  v39 = v31 == 3 && v6 == v32;
                  if ((v35 & 0x80000000) == 0 && (int)v35 < v5 * v4 && (v37 & 1) == 0 && !v39)
                  {
                    v40 = v31 == 4 && v5 - 1 == v33;
                    v41 = v40;
                    v42 = !v32 && v31 == 5;
                    if (!v42 && !v41)
                    {
                      v43 = v31 == 7 && v32 == 0;
                      v44 = v43;
                      v45 = v31 == 8 || v31 == 6;
                      v46 = v45 && v6 == v32;
                      if (!v46 && !v44)
                        goto LABEL_102;
                    }
                  }
                }
                else
                {
                  v47 = v36;
                  if ((v35 & 0x80000000) == 0 && (v47 & 1) == 0)
                  {
                    v48 = v31 == 4 && v32 == 0;
                    v49 = v48;
                    v50 = v31 == 5 || v31 == 3;
                    v51 = v50 && v6 == v32;
                    if (!v51 && !v49)
                    {
LABEL_102:
                      v52 = (__int16 *)(v25 + 32 * v35);
                      if (!*((_BYTE *)v52 + 27) && (*((unsigned __int8 *)v52 + 26) | 2) == 6)
                      {
                        v53 = v25 + 32 * v35;
                        if (!*(_BYTE *)(v53 + 28))
                        {
                          v54 = *(_DWORD *)(v53 + 16);
                          if (v54 < 1)
                          {
                            v7->i32[result[408].u32[0]] = *(_DWORD *)v52;
                          }
                          else
                          {
                            v55 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v2 + 216) + 1332)
                                - *(_DWORD *)(**(_QWORD **)(*(_QWORD *)&v2 + 224) + 1332);
                            v7->i16[2 * result[408].u32[0]] = v55 * *v52 / v54;
                            *(_WORD *)&v10[4 * result[408].u32[0]] = v55 * v52[1] / v54;
                          }
                          ++result[408].i32[0];
                          v30 = result[485].u8[5];
                        }
                      }
                    }
                  }
                }
                ++v31;
              }
              while (v31 < v30);
            }
LABEL_285:
            v132 = **(_QWORD **)(*(_QWORD *)&v2 + 232);
            if (!v132)
              return result;
            v133 = *(_QWORD *)(*(_QWORD *)&v2 + 216);
            if (*(_DWORD *)(v133 + 1332) - *(_DWORD *)(v132 + 1332) > *(_DWORD *)(v133 + 1336))
              return result;
            v134 = *(_QWORD *)(v132 + 5016);
            if (!v134)
              return result;
            v135 = v132 + 19120;
            v136 = v133 + 19112;
            v137 = *(unsigned __int16 *)(v132 + 19120);
            v138 = *(unsigned __int16 *)(v133 + 19112);
            if (v137 == v138)
            {
              v139 = *(unsigned __int16 *)(v135 + 2);
              v140 = *(unsigned __int16 *)(v136 + 2);
              if (v139 == v140)
              {
                v141 = result[485].u8[5];
                if (!result[485].i8[5])
                  return result;
                v142 = 0;
                v143 = result[236].i32[1];
                v144 = result[237].i32[0];
                v145 = v5 * v4;
                v146 = v5 - 1;
                while (2)
                {
                  v240 = 0x100000000;
                  v241 = v4;
                  v242 = -1;
                  v243 = v4 + 1;
                  v244 = v4 - 1;
                  v231 = 0x100000000;
                  v232 = v4;
                  v233 = -1;
                  v234 = -v4;
                  v235 = v4 + 1;
                  v236 = v4 - 1;
                  v237 = 1 - v4;
                  v238 = ~v4;
                  v239 = 0;
                  if (result[484].i8[2])
                    v147 = &v231;
                  else
                    v147 = &v240;
                  v148 = (v12 - *((_DWORD *)v147 + v142));
                  v149 = v142 == 1 && v143 == 0;
                  if (result[484].i8[2])
                  {
                    v150 = v149;
                    v152 = v142 == 3 && v6 == v143;
                    if ((v148 & 0x80000000) != 0 || (int)v148 >= v145 || (v150 & 1) != 0 || v152)
                      goto LABEL_364;
                    v153 = v142 == 4 && v146 == v144;
                    v154 = v153;
                    v155 = !v143 && v142 == 5;
                    if (v155 || v154)
                      goto LABEL_364;
                    v156 = v142 == 7 && v143 == 0;
                    v157 = v156;
                    v158 = v142 == 8 || v142 == 6;
                    v159 = v158 && v6 == v143;
                    if (v159 || v157)
                      goto LABEL_364;
LABEL_357:
                    v165 = v134 + 32 * v148;
                    if (!*(_BYTE *)(v165 + 27) && *(unsigned __int8 *)(v165 + 26) - 5 <= 1)
                    {
                      v166 = v134 + 32 * v148;
                      if (!*(_BYTE *)(v166 + 28))
                      {
                        v167 = *(_DWORD *)(v166 + 16);
                        if (v167 < 1)
                        {
                          result[392].i16[2 * result[408].u32[1]] = -*(_WORD *)(v165 + 4);
                          LOWORD(v169) = *(_WORD *)(v165 + 6);
                        }
                        else
                        {
                          v168 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v2 + 216) + 1332)
                               - *(_DWORD *)(**(_QWORD **)(*(_QWORD *)&v2 + 232) + 1332);
                          result[392].i16[2 * result[408].u32[1]] = -(__int16)(v168 * *(__int16 *)(v165 + 4) / v167);
                          v169 = v168 * *(__int16 *)(v165 + 6) / v167;
                        }
                        *(_WORD *)&v11[4 * result[408].i32[1]++ + 3136] = -(__int16)v169;
                        v141 = result[485].u8[5];
                      }
                    }
                  }
                  else
                  {
                    v160 = v149;
                    if ((v148 & 0x80000000) == 0 && (v160 & 1) == 0)
                    {
                      v161 = v142 == 4 && v143 == 0;
                      v162 = v161;
                      v163 = v142 == 5 || v142 == 3;
                      v164 = v163 && v6 == v143;
                      if (!v164 && !v162)
                        goto LABEL_357;
                    }
                  }
LABEL_364:
                  if (++v142 >= (unint64_t)v141)
                    return result;
                  continue;
                }
              }
            }
            else
            {
              v140 = *(unsigned __int16 *)(v136 + 2);
              v139 = *(unsigned __int16 *)(v135 + 2);
            }
            v170 = result[485].u8[5];
            if (!result[485].i8[5])
              return result;
            v171 = 0;
            v172 = ((16 * result[236].i32[1]) | 8) * v137 / (16 * v138);
            v173 = ((16 * result[237].i32[0]) | 8) * v139 / (16 * v140);
            v174 = v5 * v4;
            v175 = v5 - 1;
            while (2)
            {
              v240 = 0x100000000;
              v241 = v4;
              v242 = -1;
              v243 = v4 + 1;
              v244 = v4 - 1;
              v231 = 0x100000000;
              v232 = v4;
              v233 = -1;
              v234 = -v4;
              v235 = v4 + 1;
              v236 = v4 - 1;
              v237 = 1 - v4;
              v238 = ~v4;
              v239 = 0;
              if (result[484].i8[2])
                v176 = &v231;
              else
                v176 = &v240;
              v177 = (v172 + v173 * v4 - *((_DWORD *)v176 + v171));
              if (v172)
                v178 = 0;
              else
                v178 = v171 == 1;
              if (result[484].i8[2])
              {
                v179 = v178;
                v181 = v6 == v172 && v171 == 3;
                if ((v177 & 0x80000000) != 0 || (int)v177 >= v174 || (v179 & 1) != 0 || v181)
                  goto LABEL_441;
                v182 = !v172 && v171 == 5;
                v183 = v182;
                v184 = v175 == v173 && v171 == 4;
                if (v184 || v183)
                  goto LABEL_441;
                v185 = v171 == 6 || v171 == 8;
                v186 = v185 && v6 == v172;
                v187 = v186;
                v188 = v171 == 7 && v172 == 0;
                if (v188 || v187)
                  goto LABEL_441;
LABEL_434:
                v194 = v134 + 32 * v177;
                if (!*(_BYTE *)(v194 + 27) && *(unsigned __int8 *)(v194 + 26) - 5 <= 1)
                {
                  v195 = v134 + 32 * v177;
                  if (!*(_BYTE *)(v195 + 28))
                  {
                    v196 = *(_DWORD *)(v195 + 16);
                    if (v196 < 1)
                    {
                      result[392].i16[2 * result[408].u32[1]] = -(__int16)(*(__int16 *)(v194 + 4) * v138 / v137);
                      v198 = *(__int16 *)(v194 + 6) * v140;
                    }
                    else
                    {
                      v197 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v2 + 216) + 1332)
                           - *(_DWORD *)(**(_QWORD **)(*(_QWORD *)&v2 + 232) + 1332);
                      result[392].i16[2 * result[408].u32[1]] = -(__int16)(v197
                                                                         * v138
                                                                         / v196
                                                                         * *(__int16 *)(v194 + 4)
                                                                         / v137);
                      v198 = v197 * v140 / v196 * *(__int16 *)(v194 + 6);
                    }
                    *(_WORD *)&v11[4 * result[408].i32[1]++ + 3136] = -(__int16)(v198 / v139);
                    v170 = result[485].u8[5];
                  }
                }
              }
              else
              {
                v189 = v178;
                if ((v177 & 0x80000000) == 0 && (v189 & 1) == 0)
                {
                  v190 = v171 == 3 || v171 == 5;
                  v191 = v190 && v6 == v172;
                  v192 = v191;
                  v193 = v171 == 4 && v172 == 0;
                  if (!v193 && !v192)
                    goto LABEL_434;
                }
              }
LABEL_441:
              if (++v171 >= (unint64_t)v170)
                return result;
              continue;
            }
          }
        }
        else
        {
          v228 = *(unsigned __int16 *)(v27 + 2);
          v229 = *(unsigned __int16 *)(v26 + 2);
        }
        v105 = result[485].u8[5];
        if (!result[485].i8[5])
          goto LABEL_285;
        v106 = 0;
        v107 = ((16 * result[236].i32[1]) | 8) * v28 / (16 * v29);
        v108 = ((16 * result[237].i32[0]) | 8) * v229 / (16 * v228);
        while (2)
        {
          v240 = 0x100000000;
          v241 = v4;
          v242 = -1;
          v243 = v4 + 1;
          v244 = v4 - 1;
          v231 = 0x100000000;
          v232 = v4;
          v233 = -1;
          v234 = -v4;
          v235 = v4 + 1;
          v236 = v4 - 1;
          v237 = 1 - v4;
          v238 = ~v4;
          v239 = 0;
          if (result[484].i8[2])
            v109 = &v231;
          else
            v109 = &v240;
          v110 = (v107 + v108 * v4 - *((_DWORD *)v109 + v106));
          if (v107)
            v111 = 0;
          else
            v111 = v106 == 1;
          if (result[484].i8[2])
          {
            v112 = v111;
            v114 = v6 == v107 && v106 == 3;
            if ((v110 & 0x80000000) != 0 || (int)v110 >= v5 * v4 || (v112 & 1) != 0 || v114)
              goto LABEL_284;
            v115 = !v107 && v106 == 5;
            v116 = v115;
            v117 = v5 - 1 == v108 && v106 == 4;
            if (v117 || v116)
              goto LABEL_284;
            v118 = v106 == 6 || v106 == 8;
            v119 = v118 && v6 == v107;
            v120 = v119;
            v121 = v106 == 7 && v107 == 0;
            if (v121 || v120)
              goto LABEL_284;
LABEL_277:
            v127 = (__int16 *)(v25 + 32 * v110);
            if (!*((_BYTE *)v127 + 27) && (*((unsigned __int8 *)v127 + 26) | 2) == 6)
            {
              v128 = v25 + 32 * v110;
              if (!*(_BYTE *)(v128 + 28))
              {
                v129 = *(_DWORD *)(v128 + 16);
                if (v129 < 1)
                {
                  v7->i16[2 * result[408].u32[0]] = *v127 * v29 / v28;
                  v131 = v127[1] * v228;
                }
                else
                {
                  v130 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v2 + 216) + 1332)
                       - *(_DWORD *)(**(_QWORD **)(*(_QWORD *)&v2 + 224) + 1332);
                  v7->i16[2 * result[408].u32[0]] = v130 * v29 / v129 * *v127 / v28;
                  v131 = v130 * v228 / v129 * v127[1];
                }
                *(_WORD *)&v10[4 * result[408].i32[0]++] = v131 / v229;
                v105 = result[485].u8[5];
              }
            }
          }
          else
          {
            v122 = v111;
            if ((v110 & 0x80000000) == 0 && (v122 & 1) == 0)
            {
              v123 = v106 == 3 || v106 == 5;
              v124 = v123 && v6 == v107;
              v125 = v124;
              v126 = v106 == 4 && v107 == 0;
              if (!v126 && !v125)
                goto LABEL_277;
            }
          }
LABEL_284:
          if (++v106 >= (unint64_t)v105)
            goto LABEL_285;
          continue;
        }
      }
    }
  }
  v56 = 0;
  result[411].i32[0] = -1;
  v57 = (char *)&result[384] + 2;
  v58 = result[233].i32[0];
  v59 = result[237].i32[1];
  v60 = a2 + 1;
  do
  {
    v61 = v58 - v230[v56];
    if (v61 < v59)
      goto LABEL_125;
    if ((_DWORD)v56 == 2)
    {
      if (result[236].i32[1] == v6)
        goto LABEL_125;
    }
    else if ((_DWORD)v56 != 1)
    {
      if ((_DWORD)v56)
      {
        if (!result[236].i32[1])
          break;
      }
      else if (!result[236].i32[1])
      {
        goto LABEL_125;
      }
    }
    v62 = *(_QWORD *)(*(_QWORD *)&v2 + 72);
    v63 = v61;
    v64 = (__int16 *)(v62 + 32 * v61);
    if (!*((_BYTE *)v64 + 27) && *((_BYTE *)v64 + 26) == 4)
    {
      v65 = v62 + 32 * v63;
      v7->i16[2 * result[408].u32[0]] = v60 * *v64 / (*(unsigned __int8 *)(v65 + 24) + 1);
      *(_WORD *)&v57[4 * result[408].u32[0]] = v60 * v64[1] / (*(unsigned __int8 *)(v65 + 24) + 1);
      result[400].i32[result[408].u32[0]] = 1;
      v66 = result[408].i32[0];
      v67 = *(_DWORD *)(v65 + 20);
      if (result[411].i32[0] < v67)
        v67 = result[411].u32[0];
      result[411].i32[0] = v67;
      result[408].i32[0] = v66 + 1;
    }
LABEL_125:
    ++v56;
  }
  while (v56 != 4);
  if (result[485].i8[7])
  {
    v7->i32[result[408].u32[0]] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v2 + 216) + 4 * (char)a2 + 18984);
    result[400].i32[result[408].i32[0]++] = 3;
  }
  v68 = **(_QWORD **)(*(_QWORD *)&v2 + 224);
  if (!v68)
    return result;
  v69 = *(_QWORD *)(*(_QWORD *)&v2 + 216);
  if (*(_DWORD *)(v69 + 1332) - *(_DWORD *)(v68 + 1332) > *(_DWORD *)(v69 + 1336))
    return result;
  v70 = *(_QWORD *)(v68 + 5016);
  if (!v70)
    return result;
  v71 = v68 + 19120;
  v72 = v69 + 19112;
  v73 = *(unsigned __int16 *)(v68 + 19120);
  v74 = *(unsigned __int16 *)(v69 + 19112);
  if (v73 != v74)
  {
    v76 = *(unsigned __int16 *)(v72 + 2);
    v75 = *(unsigned __int16 *)(v71 + 2);
    goto LABEL_444;
  }
  v75 = *(unsigned __int16 *)(v71 + 2);
  v76 = *(unsigned __int16 *)(v72 + 2);
  if (v75 != v76)
  {
LABEL_444:
    v199 = result[485].u8[5];
    if (!result[485].i8[5])
      return result;
    v200 = 0;
    v201 = ((16 * result[236].i32[1]) | 8) * v73 / (16 * v74);
    v202 = ((16 * result[237].i32[0]) | 8) * v75 / (16 * v76);
    v203 = v5 * v4;
    v204 = v5 - 1;
    while (1)
    {
      v240 = 0x100000000;
      v241 = v4;
      v242 = -1;
      v243 = v4 + 1;
      v244 = v4 - 1;
      v231 = 0x100000000;
      v232 = v4;
      v233 = -1;
      v234 = -v4;
      v235 = v4 + 1;
      v236 = v4 - 1;
      v237 = 1 - v4;
      v238 = ~v4;
      v239 = 0;
      if (result[484].i8[2])
        v205 = &v231;
      else
        v205 = &v240;
      v206 = (v201 + v202 * v4 - *((_DWORD *)v205 + v200));
      if (v201)
        v207 = 0;
      else
        v207 = v200 == 1;
      if (result[484].i8[2])
      {
        v208 = v207;
        v210 = v6 == v201 && v200 == 3;
        if ((v206 & 0x80000000) == 0 && (int)v206 < v203 && (v208 & 1) == 0 && !v210)
        {
          v211 = !v201 && v200 == 5;
          v212 = v211;
          v213 = v204 == v202 && v200 == 4;
          if (!v213 && !v212)
          {
            v214 = v200 == 6 || v200 == 8;
            v215 = v214 && v6 == v201;
            v216 = v215;
            v217 = v200 == 7 && v201 == 0;
            if (!v217 && !v216)
              goto LABEL_511;
          }
        }
      }
      else
      {
        v218 = v207;
        if ((v206 & 0x80000000) == 0 && (v218 & 1) == 0)
        {
          v219 = v200 == 3 || v200 == 5;
          v220 = v219 && v6 == v201;
          v221 = v220;
          v222 = v200 == 4 && v201 == 0;
          if (!v222 && !v221)
          {
LABEL_511:
            v223 = (__int16 *)(v70 + 32 * v206);
            if (!*((_BYTE *)v223 + 27) && *((_BYTE *)v223 + 26) == 4)
            {
              v224 = v70 + 32 * v206;
              if (!*(_BYTE *)(v224 + 28))
              {
                v225 = *(_DWORD *)(v224 + 16);
                if (v225 < 1)
                {
                  v7->i16[2 * result[408].u32[0]] = *v223 * v74 / v73;
                  v227 = v223[1] * v76;
                }
                else
                {
                  v226 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v2 + 216) + 1332)
                       - *(_DWORD *)(**(_QWORD **)(*(_QWORD *)&v2 + 224) + 1332);
                  v7->i16[2 * result[408].u32[0]] = v226 * v74 / v225 * *v223 / v73;
                  v227 = v226 * v76 / v225 * v223[1];
                }
                *(_WORD *)&v57[4 * result[408].u32[0]] = v227 / v75;
                result[400].i32[result[408].i32[0]++] = 2;
                v199 = result[485].u8[5];
              }
            }
          }
        }
      }
      if (++v200 >= (unint64_t)v199)
        return result;
    }
  }
  v77 = result[485].u8[5];
  if (result[485].i8[5])
  {
    v78 = 0;
    v79 = result[236].i32[1];
    v80 = result[237].i32[0];
    v81 = v5 * v4;
    v82 = v5 - 1;
    do
    {
      v240 = 0x100000000;
      v241 = v4;
      v242 = -1;
      v243 = v4 + 1;
      v244 = v4 - 1;
      v231 = 0x100000000;
      v232 = v4;
      v233 = -1;
      v234 = -v4;
      v235 = v4 + 1;
      v236 = v4 - 1;
      v237 = 1 - v4;
      v238 = ~v4;
      v239 = 0;
      if (result[484].i8[2])
        v83 = &v231;
      else
        v83 = &v240;
      v84 = (v58 - *((_DWORD *)v83 + v78));
      v85 = v78 == 1 && v79 == 0;
      if (result[484].i8[2])
      {
        v86 = v85;
        v88 = v78 == 3 && v6 == v79;
        if ((v84 & 0x80000000) == 0 && (int)v84 < v81 && (v86 & 1) == 0 && !v88)
        {
          v89 = v78 == 4 && v82 == v80;
          v90 = v89;
          v91 = !v79 && v78 == 5;
          if (!v91 && !v90)
          {
            v92 = v78 == 7 && v79 == 0;
            v93 = v92;
            v94 = v78 == 8 || v78 == 6;
            v95 = v94 && v6 == v79;
            if (!v95 && !v93)
              goto LABEL_200;
          }
        }
      }
      else
      {
        v96 = v85;
        if ((v84 & 0x80000000) == 0 && (v96 & 1) == 0)
        {
          v97 = v78 == 4 && v79 == 0;
          v98 = v97;
          v99 = v78 == 5 || v78 == 3;
          v100 = v99 && v6 == v79;
          if (!v100 && !v98)
          {
LABEL_200:
            v101 = (__int16 *)(v70 + 32 * v84);
            if (!*((_BYTE *)v101 + 27) && *((_BYTE *)v101 + 26) == 4)
            {
              v102 = v70 + 32 * v84;
              if (!*(_BYTE *)(v102 + 28))
              {
                v103 = *(_DWORD *)(v102 + 16);
                if (v103 < 1)
                {
                  v7->i32[result[408].u32[0]] = *(_DWORD *)v101;
                }
                else
                {
                  v104 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v2 + 216) + 1332)
                       - *(_DWORD *)(**(_QWORD **)(*(_QWORD *)&v2 + 224) + 1332);
                  v7->i16[2 * result[408].u32[0]] = v104 * *v101 / v103;
                  *(_WORD *)&v57[4 * result[408].u32[0]] = v104 * v101[1] / v103;
                }
                result[400].i32[result[408].i32[0]++] = 2;
                v77 = result[485].u8[5];
              }
            }
          }
        }
      }
      ++v78;
    }
    while (v78 < v77);
  }
  return result;
}

uint64_t sub_1B68F6B04(uint64_t result, unsigned int a2, char a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  __int16 *v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned __int16 v15;
  int v16;
  __int16 *v17;
  unint64_t v18;
  int v19;
  unsigned __int16 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int16 v26;

  if (!*(_DWORD *)(result + 3320))
  {
    v4 = result;
    v26 = 0;
    *(_DWORD *)(result + 3468) = -2;
    if (*(_DWORD *)(result + 3312))
    {
      v5 = 0;
      v6 = *(_WORD *)(result + 3304);
      v7 = *(_WORD *)(result + 3306);
      v8 = &word_1B693569A;
      do
      {
        v9 = (__int16)(*(v8 - 1) + v6);
        v10 = (__int16)(*v8 + v7);
        result = (*(uint64_t (**)(unint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)(v4 + 24)
                                                                                          + 8
                                                                                          * *(unsigned int *)(v4 + 3464)))((unsigned __int16)(*(v8 - 1) + v6) | ((unint64_t)(unsigned __int16)(*v8 + v7) << 16), v4 + 3384, &v26);
        v11 = v26;
        if (!*(_BYTE *)(v4 + 3886) || *(__int16 *)(v4 + 3376) >= v9 && *(__int16 *)(v4 + 3378) >= v10)
        {
          v12 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 1824) + 2 * v9)
              + v26
              + *(unsigned __int16 *)(*(_QWORD *)(v4 + 1832) + 2 * v10);
          if (v12 < *(_DWORD *)(v4 + 3296))
          {
            *(_DWORD *)(v4 + 3296) = v12;
            *(_WORD *)(v4 + 3304) = v9;
            *(_WORD *)(v4 + 3306) = v10;
            *(_DWORD *)(v4 + 3468) = v5;
            *(_WORD *)(v4 + 3300) = v11;
          }
        }
        v8 += 2;
        ++v5;
      }
      while (v5 != 4);
      if (*(_DWORD *)(v4 + 3468) != -2)
      {
        if (*(_DWORD *)(v4 + 3312) == 1)
        {
LABEL_24:
          v22 = v4 + 16 * a4 + 2 * *(unsigned int *)(v4 + 3464) + a2;
          if (*(unsigned __int8 *)(v22 + 3712) == 255)
            *(_BYTE *)(v22 + 3712) = a3;
        }
        else
        {
          v13 = 0;
          while (1)
          {
            v14 = 0;
            v15 = v6;
            v6 = *(_WORD *)(v4 + 3304);
            v16 = v15 | (v7 << 16);
            v7 = *(_WORD *)(v4 + 3306);
            *(_DWORD *)(v4 + 3468) = -2;
            v17 = &word_1B693569A;
            do
            {
              v18 = (unsigned __int16)(*(v17 - 1) + v6) | ((unsigned __int16)(*v17 + v7) << 16);
              if ((_DWORD)v18 != v16)
              {
                v19 = (__int16)(*(v17 - 1) + v6);
                result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned __int16 *))(*(_QWORD *)(v4 + 24)
                                                                                        + 8
                                                                                        * *(unsigned int *)(v4 + 3464)))((unsigned __int16)(*(v17 - 1) + v6) | ((unsigned __int16)(*v17 + v7) << 16), v4 + 3384, &v26);
                v20 = v26;
                if (!*(_BYTE *)(v4 + 3886)
                  || *(__int16 *)(v4 + 3376) >= v19 && *(__int16 *)(v4 + 3378) >= (int)v18 >> 16)
                {
                  v21 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 1824) + 2 * (__int16)v18)
                      + v26
                      + *(unsigned __int16 *)(*(_QWORD *)(v4 + 1832) + ((uint64_t)(v18 >> 16 << 48) >> 47));
                  if (v21 < *(_DWORD *)(v4 + 3296))
                  {
                    *(_DWORD *)(v4 + 3296) = v21;
                    *(_WORD *)(v4 + 3304) = v19;
                    *(_WORD *)(v4 + 3306) = WORD1(v18);
                    *(_DWORD *)(v4 + 3468) = v14;
                    *(_WORD *)(v4 + 3300) = v20;
                  }
                }
              }
              v17 += 2;
              ++v14;
            }
            while (v14 != 4);
            if (*(_DWORD *)(v4 + 3468) == -2)
              break;
            if (++v13 >= (*(_DWORD *)(v4 + 3312) - 1))
              goto LABEL_24;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B68F6D74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  char *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  _BOOL4 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  __int16 *v47;
  int v48;
  int v49;
  __int16 v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int16 v56;
  int v57;
  __int16 *v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  __int16 v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  __int16 v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  int v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t *v92;
  __int32 v93;
  __int32 v94;
  int32x4_t v95;
  int32x4_t v96;
  uint64_t v97;
  uint64_t result;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  unsigned __int8 *v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  _QWORD v117[3];
  _QWORD v118[3];

  v118[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 1856);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(unsigned __int8 *)(v3 + 1);
  v5 = *(unsigned __int8 *)(v3 + 2);
  v118[0] = 0;
  v6 = v4 == 5 || v4 == 3;
  v7 = (char *)&unk_1B693560A + v5;
  v8 = (unsigned __int8 *)&unk_1B69355F3 + v5;
  if (!v6)
    v8 = (unsigned __int8 *)v7;
  v9 = *v8;
  *(_DWORD *)(a1 + 3464) = v9;
  *(_DWORD *)(a1 + 4 * v9 + 3568) = 0;
  *(_WORD *)(a1 + 2 * v9 + 3596) = 0;
  v10 = *(_QWORD *)(v2 + 48);
  v11 = byte_1B69355EC[v9];
  v112 = *(_DWORD *)(a1 + 3312) + *(_DWORD *)(a1 + 3312) * *(_DWORD *)(a1 + 3320);
  v12 = a1 + 8 * v9;
  v13 = dword_1B69356A8[v9];
  v14 = *(__int16 *)(a1 + 3380);
  v15 = *(__int16 *)(a1 + 3382);
  v16 = *(unsigned __int8 *)(a1 + 3886);
  v17 = v13 + 24 * *(_DWORD *)(v12 + 3616);
  v18 = v11;
  do
  {
    v19 = *(_DWORD *)(a1 + 4 * v17 + 80);
    *(_DWORD *)(a1 + 3304) = v19;
    v20 = (__int16)v19;
    v21 = (__int16)v19 - v14;
    if (v112 < v21)
      v21 = v112;
    v22 = v19 >> 16;
    if (v21 >= v22 - v15)
      v21 = v22 - v15;
    v112 = v21;
    if (!v16)
    {
      v23 = *(__int16 *)(a1 + 3376) - v20;
      if (v21 < v23)
        v23 = v21;
      v24 = *(__int16 *)(a1 + 3378) - v22;
      if (v23 >= v24)
        v23 = v24;
      v112 = v23;
    }
    ++v17;
    --v18;
  }
  while (v18);
  v25 = 0;
  v106 = 0;
  v26 = v10 + 16;
  v114 = a1 + 3384;
  v104 = (v11 - 1);
  v105 = 0;
  v27 = 1;
  v103 = v4;
  v101 = v10 + 16;
  v102 = v11;
  do
  {
    v28 = (unsigned __int8 *)(v26 + 16 * v25);
    v29 = *(unsigned int *)(a1 + 3464);
    v30 = a1 + 8 * v29;
    *(_DWORD *)(v30 + 3616) = v28[8];
    v107 = v28;
    *(_DWORD *)(v30 + 3620) = v28[9];
    if (!v112)
      goto LABEL_75;
    if (v4 != 5 && v4 != 3)
      goto LABEL_29;
    if ((_DWORD)v29 == 3 && !*(_BYTE *)(a1 + v25 + 1808))
    {
      v27 = 0;
      goto LABEL_71;
    }
    v31 = v28[15];
    if (v31 == 4)
    {
      v27 = 1;
      goto LABEL_29;
    }
    if (v31 != 5)
    {
      v106 = 1;
      v27 = 2;
LABEL_29:
      if (v105 >= v27)
        goto LABEL_71;
      goto LABEL_30;
    }
    v105 = 1;
    v27 = 2;
LABEL_30:
    v108 = v25;
    v109 = v27;
    v32 = v105;
    do
    {
      v33 = *(unsigned int *)(a1 + 3464);
      v34 = a1 + 4 * v32;
      v35 = *(unsigned int *)(v34 + 8 * v33 + 3616);
      v36 = *(_DWORD *)(v34 + 3876);
      if (v36 < 2)
      {
        LOWORD(v37) = 0;
      }
      else if (v36 == 2)
      {
        LOWORD(v37) = *(_WORD *)(a1 + 1840);
      }
      else
      {
        v38 = (v35 + 1) >> 16;
        v39 = v38 - 1;
        v40 = v38 == 0;
        v41 = v38 != 0;
        if (v40)
          v39 = v35 + 1;
        v42 = 32 * v41;
        if (v39 >= 0x100)
        {
          v39 = (v39 >> 8) - 1;
          v42 |= 0x10u;
        }
        if (v35 < 0xFF)
        {
          v39 = v35;
          v42 = 0;
        }
        v37 = (v42 + byte_1B693C048[v39]) * *(_DWORD *)(a1 + 1840);
      }
      if (*(_DWORD *)(a1 + 3320)
        || *((_DWORD *)v118 + v32)
        || v25 >= *(unsigned __int8 *)(a1 + 16 * v35 + 2 * v33 + v32 + 3712))
      {
        sub_1B68F477C(a1, v35, v32, v25);
        v43 = 0;
        v111 = v32;
        v110 = 12 * v32 + 24 * v35 + v25;
        v44 = a1 + 4 * (v110 + dword_1B69356A8[*(unsigned int *)(a1 + 3464)]);
        v45 = *(_DWORD *)(v44 + 80);
        *(_DWORD *)(a1 + 3304) = v45;
        v46 = *(_DWORD *)(v44 + 1040);
        *(_DWORD *)(a1 + 3296) = v46;
        *(_DWORD *)(a1 + 3468) = -2;
        v115 = (unsigned __int16)v37;
        v47 = &word_1B693569A;
        do
        {
          LOWORD(v116) = 0;
          v48 = (__int16)(*(v47 - 1) + v45);
          v49 = (__int16)(*v47 + HIWORD(v45));
          if (!*(_BYTE *)(a1 + 3886) || v48 <= *(__int16 *)(a1 + 3376) && v49 <= *(__int16 *)(a1 + 3378))
          {
            (*(void (**)(unint64_t, uint64_t, uint64_t *))(*(_QWORD *)(a1 + 24)
                                                                         + 8 * *(unsigned int *)(a1 + 3464)))((unsigned __int16)(*(v47 - 1) + v45) | ((unint64_t)(unsigned __int16)(*v47 + HIWORD(v45)) << 16), v114, &v116);
            v50 = v116;
            v51 = v115
                + (unsigned __int16)v116
                + *(unsigned __int16 *)(*(_QWORD *)(a1 + 1824) + 2 * v48)
                + *(unsigned __int16 *)(*(_QWORD *)(a1 + 1832) + 2 * v49);
            v46 = *(_DWORD *)(a1 + 3296);
            if (v51 < v46)
            {
              *(_DWORD *)(a1 + 3296) = v51;
              *(_WORD *)(a1 + 3300) = v50;
              *(_WORD *)(a1 + 3304) = v48;
              *(_WORD *)(a1 + 3306) = v49;
              v46 = v51;
              *(_DWORD *)(a1 + 3468) = v43;
            }
          }
          v47 += 2;
          ++v43;
        }
        while (v43 != 4);
        if (*(_DWORD *)(a1 + 3468) != -2)
        {
          if (v112 >= 2)
          {
            v52 = HIWORD(v45);
            v53 = *((_DWORD *)v118 + v32);
            v54 = 1;
            do
            {
              v113 = v54;
              v55 = 0;
              v56 = v45;
              LOWORD(v45) = *(_WORD *)(a1 + 3304);
              v57 = v56 | ((unsigned __int16)v52 << 16);
              LOWORD(v52) = *(_WORD *)(a1 + 3306);
              *(_DWORD *)(a1 + 3468) = -2;
              v58 = &word_1B693569A;
              do
              {
                LOWORD(v116) = 0;
                v59 = (__int16)(*(v58 - 1) + v45);
                v60 = (__int16)(*v58 + v52);
                if ((v53 || ((unsigned __int16)v59 | ((unsigned __int16)v60 << 16)) != v57)
                  && (!*(_BYTE *)(a1 + 3886) || v59 <= *(__int16 *)(a1 + 3376) && v60 <= *(__int16 *)(a1 + 3378)))
                {
                  v61 = (__int16)(*(v58 - 1) + v45);
                  v62 = (unsigned __int16)(*(v58 - 1) + v45) | ((unsigned __int16)v60 << 16);
                  (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)(a1 + 24)
                                                                     + 8 * *(unsigned int *)(a1 + 3464)))(v62, v114, &v116);
                  v63 = v116;
                  v64 = v115
                      + (unsigned __int16)v116
                      + *(unsigned __int16 *)(*(_QWORD *)(a1 + 1824) + 2 * v61)
                      + *(unsigned __int16 *)(*(_QWORD *)(a1 + 1832) + 2 * v60);
                  v46 = *(_DWORD *)(a1 + 3296);
                  if (v64 < v46)
                  {
                    *(_DWORD *)(a1 + 3296) = v64;
                    *(_WORD *)(a1 + 3300) = v63;
                    *(_DWORD *)(a1 + 3304) = v62;
                    v46 = v64;
                    *(_DWORD *)(a1 + 3468) = v55;
                  }
                }
                v58 += 2;
                ++v55;
              }
              while (v55 != 4);
              if (*(_DWORD *)(a1 + 3468) == -2)
                break;
              v54 = v113 + 1;
            }
            while (v113 + 1 < v112);
          }
          v32 = v111;
          *((_DWORD *)v118 + v111) = 1;
          *(_DWORD *)(a1 + 4 * (v110 + dword_1B69356A8[*(unsigned int *)(a1 + 3464)]) + 1040) = v46;
          *(_WORD *)(a1 + 2 * (v110 + dword_1B69356A8[*(unsigned int *)(a1 + 3464)]) + 1568) = *(_WORD *)(a1 + 3300);
          *(_DWORD *)(a1 + 4 * (v110 + dword_1B69356A8[*(unsigned int *)(a1 + 3464)]) + 80) = *(_DWORD *)(a1 + 3304);
          v25 = v108;
        }
      }
      ++v32;
      v27 = v109;
    }
    while (v109 != v32);
    v4 = v103;
    v26 = v101;
    v11 = v102;
LABEL_71:
    if (v106)
    {
      v29 = *(unsigned int *)(a1 + 3464);
      if (v118[0])
        *(_WORD *)(a1 + 2 * v29 + 3596) = -1;
      v106 = 1;
LABEL_75:
      if ((_DWORD)v29)
        goto LABEL_77;
LABEL_76:
      sub_1B68F58D4(a1);
      LODWORD(v29) = *(_DWORD *)(a1 + 3464);
      goto LABEL_77;
    }
    v106 = 0;
    LODWORD(v29) = *(_DWORD *)(a1 + 3464);
    if (!(_DWORD)v29)
      goto LABEL_76;
LABEL_77:
    if ((_DWORD)v29 == 3)
    {
      if (v4 == 3 || v4 == 5)
      {
        switch(*(_BYTE *)(a1 + v25 + 1808))
        {
          case 0:
            *(_DWORD *)(a1 + 3580) += *(_DWORD *)(a1 + 1840) + *(_DWORD *)(a1 + 4 * v25 + 3540);
            v107[15] = 3;
            v65 = *(unsigned int *)(a1 + 3464);
            goto LABEL_102;
          case 1:
            v75 = v25 + 24 * *(_DWORD *)(a1 + 3640) + 8;
            goto LABEL_98;
          case 2:
            v75 = v25 + 24 * *(_DWORD *)(a1 + 3644) + 20;
LABEL_98:
            v76 = *(_DWORD *)(a1 + 3580) + 3 * *(_DWORD *)(a1 + 1840) + *(_DWORD *)(a1 + 4 * v75 + 1040);
            goto LABEL_100;
          case 3:
            v76 = *(_DWORD *)(a1 + 3580) + *(_DWORD *)(a1 + 4 * v25 + 1552) + 5 * *(_DWORD *)(a1 + 1840);
LABEL_100:
            *(_DWORD *)(a1 + 3580) = v76;
            break;
          default:
            break;
        }
        v65 = 3;
LABEL_102:
        if (v25 == 3)
          *(_DWORD *)(a1 + 4 * v65 + 3568) += 9 * *(_DWORD *)(a1 + 1840);
        *(_WORD *)(a1 + 2 * v65 + 3596) = -1;
      }
      else
      {
        v69 = v25 + 24 * *(_DWORD *)(a1 + 3640) + 8;
        *(_DWORD *)(a1 + 3580) += *(_DWORD *)(a1 + 1840) + *(_DWORD *)(a1 + 4 * v69 + 1040);
        *(_WORD *)(a1 + 3602) += *(_WORD *)(a1 + 2 * v69 + 1568);
        v65 = 3;
      }
    }
    else
    {
      v66 = a1 + 2 * v29;
      if (v4 == 5 || v4 == 3)
      {
        if ((_DWORD)v29)
        {
          if (v106)
          {
            v67 = a1 + 4 * v29;
            v68 = *(_DWORD *)(v67 + 3568)
                + *(_DWORD *)(a1 + 4 * (dword_1B69356A8[v29] + v25) + 1520);
            *(_DWORD *)(v67 + 3568) = v68;
          }
          else
          {
            v73 = dword_1B69356A8[v29];
            if (v105)
              v74 = v25 + 24 * *(_DWORD *)(a1 + 8 * v29 + 3620) + v73 + 12;
            else
              v74 = v73 + v25 + 24 * *(_DWORD *)(a1 + 8 * v29 + 3616);
            v78 = a1 + 4 * v29;
            v68 = *(_DWORD *)(v78 + 3568) + *(_DWORD *)(a1 + 4 * v74 + 1040);
            *(_DWORD *)(v78 + 3568) = v68;
          }
          if (v25 == 1)
          {
            v79 = dword_1B6935610[3 * (3 * v29 + *(_DWORD *)(a1 + 3688) - 3)
                                                 + *(unsigned int *)(a1 + 3692)];
            *(_BYTE *)(a1 + v29 + 3561) = dword_1B6935610[3
                                                                      * (3 * v29
                                                                                     + *(_DWORD *)(a1 + 3688)
                                                                                     - 3)
                                                                      + *(unsigned int *)(a1 + 3692)];
            *(_DWORD *)(a1 + 4 * v29 + 3568) = v68
                                                             + *(_DWORD *)(a1 + 1840)
                                                             * byte_1B693C048[v79];
          }
        }
        else
        {
          if (v106)
          {
            v72 = *(_DWORD *)(a1 + 3568) + *(_DWORD *)(a1 + 4 * v25 + 1520) + 5 * *(_DWORD *)(a1 + 1840);
          }
          else
          {
            if (v105)
              v77 = v25 + 24 * *(_DWORD *)(a1 + 3620) + 12;
            else
              v77 = v25 + 24 * *(_DWORD *)(a1 + 3616);
            v72 = *(_DWORD *)(a1 + 3568) + 3 * *(_DWORD *)(a1 + 1840) + *(_DWORD *)(a1 + 4 * v77 + 1040);
          }
          *(_DWORD *)(a1 + 3568) = v72;
        }
        v65 = v29;
        v71 = -1;
      }
      else
      {
        v65 = v29;
        v70 = dword_1B69356A8[v29] + v25 + 24 * *(_DWORD *)(a1 + 8 * v29 + 3616);
        *(_DWORD *)(a1 + 4 * v29 + 3568) += *(_DWORD *)(a1 + 4 * v70 + 1040);
        v71 = *(_WORD *)(v66 + 3596) + *(_WORD *)(a1 + 2 * v70 + 1568);
      }
      *(_WORD *)(v66 + 3596) = v71;
    }
    v107[8] = *(_DWORD *)(a1 + 3616 + 8 * v65);
    v107[9] = *(_DWORD *)(a1 + 3616 + 8 * *(unsigned int *)(a1 + 3464) + 4);
    v80 = *(unsigned int *)(a1 + 3464);
    v81 = (_DWORD *)(a1 + 3616 + 8 * v80);
    v82 = dword_1B69356A8[v80] + v25;
    v83 = v81[1];
    v84 = (v82 + 24 * *v81);
    v85 = *(_DWORD *)(a1 + 560 + 4 * v84);
    v86 = (v82 + 24 * v83 + 12);
    v117[0] = __PAIR64__(*(_DWORD *)(a1 + 560 + 4 * v86), v85);
    if (v107[15] == 3)
    {
      v117[0] = *(_QWORD *)(a1 + 8 * v25 + 3476);
      v107[15] = *(_BYTE *)(a1 + v25 + 3556);
      v87 = *(_QWORD *)(a1 + 1856);
      *(_WORD *)(*(_QWORD *)(v87 + 48) + 16 * (int)v25 + 16) = 0;
      *(_WORD *)(*(_QWORD *)(v87 + 48) + 16 * (int)v25 + 18) = 0;
      *(_WORD *)(*(_QWORD *)(v87 + 48) + 16 * (int)v25 + 20) = 0;
      *(_WORD *)(*(_QWORD *)(v87 + 48) + 16 * (int)v25 + 22) = 0;
      v88 = *(_QWORD *)(a1 + 1856);
      v89 = v107[15];
      v90 = v107[8];
      v91 = v107[9];
      v92 = v117;
    }
    else
    {
      v93 = *(_DWORD *)(a1 + 80 + 4 * v84);
      v94 = *(_DWORD *)(a1 + 80 + 4 * v86);
      v95.i32[0] = v93 << 16;
      v95.i32[1] = v93;
      v95.i32[2] = v94 << 16;
      v95.i32[3] = v94;
      v96.i64[0] = 0x700000007;
      v96.i64[1] = 0x700000007;
      *(int16x4_t *)v95.i8 = vmovn_s32(vmaxq_s32(vminq_s32(vshrq_n_s32(v95, 0x10uLL), v96), v96));
      v116 = v95.i64[0];
      v97 = *(_QWORD *)(a1 + 1856);
      *(_WORD *)(*(_QWORD *)(v97 + 48) + 16 * (int)v25 + 16) = v95.i16[0] - v85;
      *(_WORD *)(*(_QWORD *)(v97 + 48) + 16 * (int)v25 + 18) = v95.i16[1] - WORD1(v117[0]);
      *(_WORD *)(*(_QWORD *)(v97 + 48) + 16 * (int)v25 + 20) = v95.i16[2] - WORD2(v117[0]);
      *(_WORD *)(*(_QWORD *)(v97 + 48) + 16 * (int)v25 + 22) = v95.i16[3] - HIWORD(v117[0]);
      v88 = *(_QWORD *)(a1 + 1856);
      v89 = v107[15];
      v90 = v107[8];
      v91 = v107[9];
      v92 = &v116;
    }
    result = sub_1B689CBF8(v88, v92, v89, v90, v91, v25);
    if (v118[0] && v25 < v104)
    {
      result = sub_1B68FB254(*(_QWORD **)(a1 + 1856), (int)v25 + 1, v117);
      v99 = v26 + 16 * (v25 + 1);
      v100 = HIDWORD(v117[0]);
      *(_DWORD *)(a1
                + 560
                + 4
                * (dword_1B69356A8[*(unsigned int *)(a1 + 3464)]
                 + (_DWORD)v25
                 + 1
                 + 24 * *(unsigned __int8 *)(v99 + 8))) = v117[0];
      *(_DWORD *)(a1
                + 560
                + 4
                * (v25++
                 + 24 * *(unsigned __int8 *)(v99 + 9)
                 + dword_1B69356A8[*(unsigned int *)(a1 + 3464)]
                 + 13)) = v100;
    }
    else
    {
      ++v25;
    }
  }
  while (v25 != v11);
  return result;
}

double sub_1B68F7888(double result)
{
  double v1;

  if (result > 0.0 && result < 9.0e15)
  {
    v1 = (double)(uint64_t)(result * 1024.0 + 0.5) + 0.001953125;
    return v1 * 0.0009765625;
  }
  if (result > -9.0e15 && result < 0.0)
  {
    v1 = -0.001953125 - (double)(uint64_t)(result * -1024.0 + 0.5);
    return v1 * 0.0009765625;
  }
  return result;
}

double sub_1B68F7914(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  double result;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    free(v2);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v3 = *(void **)(a1 + 128);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v4 = *(void **)(a1 + 136);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v5 = *(void **)(a1 + 392);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 392) = 0;
  }
  v6 = *(void **)(a1 + 144);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v7 = *(void **)(a1 + 160);
  if (v7)
  {
    free(v7);
    *(_QWORD *)(a1 + 160) = 0;
  }
  v8 = *(void **)(a1 + 376);
  if (v8)
  {
    free(v8);
    *(_QWORD *)(a1 + 376) = 0;
  }
  v9 = *(void **)(a1 + 384);
  if (v9)
  {
    free(v9);
    *(_QWORD *)(a1 + 384) = 0;
  }
  v10 = *(void **)(a1 + 152);
  if (v10)
  {
    free(v10);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v11 = *(void **)(a1 + 168);
  if (v11)
  {
    free(v11);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v12 = *(void **)(a1 + 184);
  if (v12)
  {
    free(v12);
    *(_QWORD *)(a1 + 184) = 0;
  }
  v13 = *(void **)(a1 + 192);
  if (v13)
  {
    free(v13);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v14 = *(void **)(a1 + 288);
  if (v14)
  {
    free(v14);
    *(_QWORD *)(a1 + 288) = 0;
  }
  v15 = *(void **)(a1 + 280);
  if (v15)
  {
    free(v15);
    *(_QWORD *)(a1 + 280) = 0;
  }
  v16 = *(void **)(a1 + 296);
  if (v16)
  {
    free(v16);
    *(_QWORD *)(a1 + 296) = 0;
  }
  v17 = *(void **)(a1 + 400);
  if (v17)
  {
    free(v17);
    *(_QWORD *)(a1 + 400) = 0;
  }
  v18 = *(void **)(a1 + 304);
  if (v18)
  {
    free(v18);
    *(_QWORD *)(a1 + 304) = 0;
  }
  v19 = *(void **)(a1 + 312);
  if (v19)
  {
    free(v19);
    *(_QWORD *)(a1 + 312) = 0;
  }
  v20 = *(void **)(a1 + 328);
  if (v20)
  {
    free(v20);
    *(_QWORD *)(a1 + 328) = 0;
  }
  v21 = *(void **)(a1 + 336);
  if (v21)
  {
    free(v21);
    *(_QWORD *)(a1 + 336) = 0;
  }
  *(_BYTE *)(a1 + 368) = 0;
  v22 = *(void **)(a1 + 360);
  if (v22)
  {
    free(v22);
    *(_QWORD *)(a1 + 360) = 0;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 268) = 0;
  *(_DWORD *)(a1 + 372) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  return result;
}

uint64_t sub_1B68F7AA4(uint64_t a1)
{
  unsigned int v1;
  _BOOL4 v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v16;

  if (!a1)
    return 4294943591;
  v1 = *(_DWORD *)(a1 + 152);
  v2 = (v1 & 0xF) == 0
    && (*(_BYTE *)(a1 + 160) & 0xF) == 0
    && (*(_BYTE *)(a1 + 156) & 0xF) == 0
    && (*(_BYTE *)(a1 + 164) & 0xF) == 0
    && (*(_BYTE *)(a1 + 168) & 0xF) == 0
    && (*(_BYTE *)(a1 + 172) & 0xF) == 0;
  if (v1 <= 0xBB8
    && *(_DWORD *)(a1 + 160) <= 0xBB8u
    && (v3 = *(_DWORD *)(a1 + 156), v3 <= 0xBB8)
    && *(_DWORD *)(a1 + 164) <= 0xBB8u
    && (v4 = *(_DWORD *)(a1 + 168), v4 <= 0x1770))
  {
    v14 = *(_DWORD *)(a1 + 172);
    v16 = v4 >= v1 && v14 <= 0x1770 && v14 >= v3;
    v5 = !v16;
  }
  else
  {
    v5 = 1;
  }
  if (!*(_BYTE *)(a1 + 240) && ((v5 | !v2) & 1) != 0)
    return 4294943588;
  v7 = *(_DWORD *)(a1 + 40);
  v16 = v7 != 0;
  v8 = v7 - 1;
  if (v8 != 0 && v16)
    return 4294943596;
  v9 = *(_DWORD *)(a1 + 48);
  if (v9 > 0xC)
    return 4294943589;
  v10 = *(_DWORD *)(a1 + 72);
  if (v10 == 16)
  {
    if (*(_DWORD *)(a1 + 76) == 8)
      goto LABEL_24;
    return 4294943589;
  }
  if (v10 != 8 || *(_DWORD *)(a1 + 76) != 4)
    return 4294943589;
LABEL_24:
  v11 = *(_DWORD *)(a1 + 112);
  v12 = v11 == 4;
  if (v11 > 4)
    return 4294943596;
  v13 = *(_DWORD *)(a1 + 108);
  if (v12 && v13 && (*(_DWORD *)(a1 + 136) - 10) < 0xFFFFFFF9)
    return 4294943596;
  if (!*(_QWORD *)a1 || !*(_QWORD *)(a1 + 16) || v8 <= 1 && (!*(_QWORD *)(a1 + 8) || !*(_QWORD *)(a1 + 24)))
    return 4294943591;
  if (*(_DWORD *)(a1 + 96) > 1u)
    return 4294943593;
  if (*(_DWORD *)(a1 + 140))
    return 4294943596;
  if (*(_DWORD *)(a1 + 84) > 5u || *(_DWORD *)(a1 + 88) > 0x7Fu || *(_DWORD *)(a1 + 92) > 5u)
    return 4294943593;
  v6 = 4294943593;
  if (v13 <= 0x10 && *(_DWORD *)(a1 + 100) <= 0xCu)
  {
    if (*(_DWORD *)(a1 + 144) > 6u || *(_DWORD *)(a1 + 148) > 0x7Fu)
      return 4294943593;
    if (v9 != 12)
      return 0;
    if (*(_QWORD *)(a1 + 56) && *(_QWORD *)(a1 + 64))
    {
      if ((*(_DWORD *)(a1 + 52) - 8) < 0xFFFFFFF9)
        return 4294943589;
      return 0;
    }
    return 4294943591;
  }
  return v6;
}

uint64_t sub_1B68F7CC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  signed int v12;
  signed int v13;
  int16x8_t v14;

  v4 = sub_1B68F7AA4(a2);
  if (!(_DWORD)v4)
  {
    v5 = *a1;
    if (*(_DWORD *)(a2 + 192))
    {
      if (v5)
        goto LABEL_4;
    }
    else
    {
      *(_QWORD *)(a2 + 144) = 0;
      if (v5)
      {
LABEL_4:
        if (sub_1B68E3170(v5, *(_DWORD *)(a2 + 152), *(_DWORD *)(a2 + 160), *(_DWORD *)(a2 + 168), *(_DWORD *)(a2 + 156), *(_DWORD *)(a2 + 164), *(_DWORD *)(a2 + 172), *(_DWORD *)(a2 + 108), *(_DWORD *)(a2 + 80), *(_DWORD *)(a2 + 112), (_DWORD *)(a2 + 48)))
        {
LABEL_20:
          *(_DWORD *)(v5 + 492) = *(_DWORD *)(a2 + 100);
          return v4;
        }
LABEL_8:
        *(_DWORD *)(v5 + 480) = *(_DWORD *)(a2 + 80);
        v6 = *(_DWORD *)(a2 + 160);
        v7 = *(_DWORD *)(a2 + 168);
        v8 = *(_DWORD *)(a2 + 176);
        *(_DWORD *)(v5 + 22368) = *(_DWORD *)(a2 + 152);
        *(_DWORD *)(v5 + 22372) = v6;
        *(_DWORD *)(v5 + 22304) = v7;
        *(_DWORD *)(v5 + 22308) = v8;
        v9 = *(_DWORD *)(a2 + 164);
        v10 = *(_DWORD *)(a2 + 172);
        v11 = *(_DWORD *)(a2 + 180);
        *(_DWORD *)(v5 + 22376) = *(_DWORD *)(a2 + 156);
        *(_DWORD *)(v5 + 22380) = v9;
        *(_DWORD *)(v5 + 22312) = v10;
        *(_DWORD *)(v5 + 22316) = v11;
        sub_1B68E22D4(v5, (unsigned int *)(a2 + 48), *(_DWORD *)(a2 + 80));
        v12 = *(__int16 *)(a2 + 144);
        v13 = *(__int16 *)(a2 + 148);
        if (v12 <= -127)
          v12 = -127;
        if (v12 >= 127)
          LOWORD(v12) = 127;
        if ((v12 & 0xFFFE) != 0)
          v12 = (unsigned __int16)v12;
        else
          v12 = 1;
        if (v13 <= -255)
          v13 = -255;
        if (v13 >= 255)
          v13 = 255;
        v14 = vdupq_n_s16(v13);
        *(int16x8_t *)(v5 + 416) = vdupq_n_s16(v12);
        *(int16x8_t *)(v5 + 432) = vdupq_n_s16(4096 / (__int16)v12);
        *(int16x8_t *)(v5 + 448) = v14;
        *(int16x8_t *)(v5 + 464) = v14;
        sub_1B68E326C(v5, *(_DWORD *)(a2 + 112), (_QWORD *)(a2 + 120), *(_DWORD *)(a2 + 108), *(_DWORD *)(a2 + 136));
        goto LABEL_20;
      }
    }
    v5 = operator new();
    *a1 = sub_1B68E204C(v5, *(_DWORD *)(a2 + 80));
    goto LABEL_8;
  }
  return v4;
}

void sub_1B68F7E44(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  v2 = operator new();
  *(_DWORD *)(sub_1B68E204C(v2, *(_DWORD *)(v1 + 80)) + 492) = *(_DWORD *)(v1 + 100);
  JUMPOUT(0x1B68F7D64);
}

uint64_t sub_1B68F7E7C(uint64_t a1, int8x8_t *a2)
{
  __int32 v4;
  __int32 v5;
  uint32x2_t v6;
  uint64_t result;
  __int32 v8;
  uint64_t v9;
  uint64_t i;
  __int32 v11;
  __int32 v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  __int32 v16;
  signed int v17;
  signed int v18;
  int16x8_t v19;
  __int32 v20;
  __int32 v21;
  __CVBuffer *v22;
  uint64_t v23;
  uint64_t v24;
  CVPixelBufferPoolRef *v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 4294943592;
  if (!*(_QWORD *)a2
    || !*(_QWORD *)&a2[2]
    || (a2[5].i32[0] - 1) <= 1 && (!*(_QWORD *)&a2[1] || !*(_QWORD *)&a2[3]))
  {
    return 4294943591;
  }
  v4 = a2[23].i32[1];
  if (v4)
  {
    v4 = a2[25].i32[1];
    v5 = a2[29].i32[1];
    v6 = vmin_u32((uint32x2_t)vand_s8(a2[11], (int8x8_t)0xFF000000FFLL), (uint32x2_t)0x60000007FLL);
  }
  else
  {
    v5 = 0;
    v6.i8[0] = 0;
    v6.i8[4] = 0;
  }
  *(_BYTE *)(a1 + 243) = v6.i8[0];
  *(_BYTE *)(a1 + 242) = v6.i8[4];
  *(_DWORD *)(a1 + 248) = v4;
  *(_DWORD *)(a1 + 256) = v5;
  v8 = a2[23].i32[0];
  if (v8)
    v8 = a2[10].i32[1];
  v9 = a1 + 22304;
  *(_BYTE *)(a1 + 312) = v8;
  *(_BYTE *)(a1 + 245) = a2[24].i32[1] != 0;
  sub_1B68E1F40(a1);
  *(_BYTE *)(a1 + 246) = a2[6].i32[0] == 8;
  if (!a2[24].i32[0])
    a2[18] = 0;
  if (a2[6].i32[0] == 10)
  {
    for (i = 0; i != 6; ++i)
      *(_WORD *)(a1 + 22274 + 2 * i) = a2[26].i32[i + 1];
  }
  *(_DWORD *)(v9 + 144) = a2[25].i32[0];
  *(_BYTE *)(v9 + 208) = a2[26].i8[0];
  if (sub_1B68E3170(a1, a2[19].u32[0], a2[20].u32[0], a2[21].u32[0], a2[19].u32[1], a2[20].u32[1], a2[21].u32[1], a2[13].i32[1], a2[10].i32[0], a2[14].i32[0], &a2[6]))
  {
    result = sub_1B68F7AA4((uint64_t)a2);
    if ((_DWORD)result)
      return result;
    v11 = a2[20].i32[0];
    v12 = a2[21].i32[0];
    v13 = a2[22].i32[0];
    *(_DWORD *)(v9 + 64) = a2[19].i32[0];
    *(_DWORD *)(v9 + 68) = v11;
    *(_DWORD *)v9 = v12;
    *(_DWORD *)(v9 + 4) = v13;
    v14 = a2[20].i32[1];
    v15 = a2[21].i32[1];
    v16 = a2[22].i32[1];
    *(_DWORD *)(v9 + 72) = a2[19].i32[1];
    *(_DWORD *)(v9 + 76) = v14;
    *(_DWORD *)(v9 + 8) = v15;
    *(_DWORD *)(v9 + 12) = v16;
    sub_1B68E22D4(a1, (unsigned int *)&a2[6], a2[10].i32[0]);
    v17 = a2[18].i16[0];
    v18 = a2[18].i16[2];
    if (v17 <= -127)
      v17 = -127;
    if (v17 >= 127)
      LOWORD(v17) = 127;
    if ((v17 & 0xFFFE) != 0)
      v17 = (unsigned __int16)v17;
    else
      v17 = 1;
    if (v18 <= -255)
      v18 = -255;
    if (v18 >= 255)
      v18 = 255;
    v19 = vdupq_n_s16(v18);
    *(int16x8_t *)(a1 + 416) = vdupq_n_s16(v17);
    *(int16x8_t *)(a1 + 432) = vdupq_n_s16(4096 / (__int16)v17);
    *(int16x8_t *)(a1 + 448) = v19;
    *(int16x8_t *)(a1 + 464) = v19;
    sub_1B68E326C(a1, a2[14].i32[0], &a2[15], a2[13].i32[1], a2[17].u32[0]);
  }
  v20 = a2[12].i32[1];
  if ((v20 - 1) <= 0xB)
    *(_DWORD *)(a1 + 492) = v20;
  v21 = a2[5].i32[0];
  *(_BYTE *)(a1 + 489) = a2[13].i8[0];
  v22 = (__CVBuffer *)a2[4];
  if (!v22)
  {
    v26 = v21 == 1;
    v27 = (uint64_t)*a2;
    v28 = (uint64_t)a2[1];
    v29 = (uint64_t)a2[2];
    v30 = (uint64_t)a2[3];
    v31 = a1;
LABEL_48:
    sub_1B68E3B74(v31, v27, v28, v29, v30, v26);
    return 0;
  }
  v24 = (uint64_t)a2[2];
  v23 = (uint64_t)a2[3];
  sub_1B68E3934(a1);
  *(_QWORD *)(a1 + 22344) = v24;
  *(_QWORD *)(a1 + 22352) = v23;
  if ((CVPixelBufferGetPixelFormatType(v22) | 0x10) != 0x34323076)
  {
    fwrite("Unsupported CVPixelBuffer format\n", 0x21uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    return 0;
  }
  if (v21 != 1)
    return 0;
  *(_QWORD *)(a1 + 22328) = CVPixelBufferGetBaseAddressOfPlane(v22, 0);
  *(_QWORD *)(a1 + 22336) = CVPixelBufferGetBaseAddressOfPlane(v22, 1uLL);
  *(_DWORD *)v9 = CVPixelBufferGetBytesPerRowOfPlane(v22, 0);
  *(_DWORD *)(v9 + 4) = CVPixelBufferGetBytesPerRowOfPlane(v22, 1uLL);
  if (!*(_BYTE *)(a1 + 246) && (v32 = *(_DWORD *)(v9 + 80), v32 != 11) && v32 != 7
    || (v25 = *(CVPixelBufferPoolRef **)(a1 + 232)) == 0
    && (v25 = (CVPixelBufferPoolRef *)malloc_type_calloc(0x38uLL, 1uLL, 0x4AE20AB7uLL),
        (*(_QWORD *)(a1 + 232) = v25) == 0)
    || (v34 = *(_OWORD *)(v9 + 40),
        v33 = *(_QWORD *)(a1 + 22312),
        result = sub_1B68B39A4(v25, v22, (char **)&v34, (unsigned int *)&v33, *(_DWORD *)(v9 + 64), *(_DWORD *)(v9 + 68), *(_DWORD *)(v9 + 72), *(_DWORD *)(v9 + 76), *(_DWORD *)(v9 + 80)), (_DWORD)result))
  {
    v27 = *(_QWORD *)(a1 + 22328);
    v28 = *(_QWORD *)(a1 + 22336);
    v31 = a1;
    v29 = v24;
    v30 = v23;
    v26 = 1;
    goto LABEL_48;
  }
  return result;
}

void sub_1B68F8260(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v2 = a1[29];
  if (v2)
  {
    if (*(_QWORD *)v2)
      CFRelease(*(CFTypeRef *)v2);
    v3 = *(const void **)(v2 + 16);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(v2 + 32);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(v2 + 40);
    if (v5)
      CFRelease(v5);
    v6 = *(char **)(v2 + 48);
    if (v6)
      sub_1B68B3DD4(v6);
    free((void *)v2);
  }
  a1[29] = 0;
  v7 = (void *)a1[44];
  if (v7)
    free(v7);
  v8 = (void *)a1[46];
  if (v8)
    free(v8);
  v9 = (void *)a1[34];
  if (v9)
    free(v9);
  v10 = (void *)a1[2807];
  if (v10)
    free(v10);
  v11 = (void *)a1[2808];
  if (v11)
    free(v11);
  v12 = (void *)a1[2811];
  if (v12)
    free(v12);
  v13 = (void *)a1[2813];
  if (v13)
    free(v13);
  v14 = (void *)a1[2812];
  if (v14)
    free(v14);
  v15 = (void *)a1[62];
  if (v15)
  {
    free(v15);
    a1[62] = 0;
  }
  JUMPOUT(0x1BCC9814CLL);
}

uint64_t sub_1B68F8354(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v4 = (unsigned __int8 *)&unk_1B693C018 + a1;
  v5 = *v4;
  v6 = v4[16];
  v7 = a2;
  if ((v5 & 1) != 0 || (v7 = a3) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + ((v5 >> 1) & 0xF));
    LODWORD(v7) = 1;
    if ((v6 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    v8 = 0;
    if ((v6 & 1) != 0)
      goto LABEL_7;
  }
  a2 = a4;
  if (!a4)
  {
    v10 = 0;
    v9 = 0;
    return byte_1B69356F8[(unint64_t)((v10 & v7) + v8 + v9) >> (v10 & v7)];
  }
LABEL_7:
  v9 = *(unsigned __int8 *)(a2 + ((v6 >> 1) & 0xF));
  v10 = 1;
  return byte_1B69356F8[(unint64_t)((v10 & v7) + v8 + v9) >> (v10 & v7)];
}

uint64_t sub_1B68F83D4(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v4 = a2;
  if ((a1 & 1) != 0 || (v4 = a3) != 0)
  {
    v5 = *(unsigned __int8 *)(v4 + byte_1B6935709[a1]);
    LODWORD(v4) = 1;
  }
  else
  {
    v5 = 0;
  }
  if ((a1 & 0xFFFFFFFE) == 2 || (a2 = a4) != 0)
  {
    v6 = *(unsigned __int8 *)(a2 + byte_1B6935709[a1 + 4]);
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  return byte_1B69356F8[(unint64_t)((v7 & v4) + v5 + v6) >> (v7 & v4)];
}

FILE *sub_1B68F8454(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  unint64_t i;
  void *v5;
  void *v6;
  unint64_t v7;
  unint64_t j;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  FILE *result;

  *(_BYTE *)(a1 + 532) = 1;
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    v3 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v3)
    {
      for (i = 0; i < v3; ++i)
      {
        v5 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * i);
        if (v5)
        {
          free(v5);
          v3 = *(unsigned int *)(a1 + 36);
        }
      }
      v2 = *(void **)(a1 + 48);
    }
    free(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v6 = *(void **)(a1 + 56);
  if (v6)
  {
    v7 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v7)
    {
      for (j = 0; j < v7; ++j)
      {
        v9 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * j);
        if (v9)
        {
          free(v9);
          v7 = *(unsigned int *)(a1 + 36);
        }
      }
      v6 = *(void **)(a1 + 56);
    }
    free(v6);
    *(_QWORD *)(a1 + 56) = 0;
    free(*(void **)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
  }
  v10 = *(void **)(a1 + 72);
  if (v10)
  {
    free(v10);
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  sub_1B68F7914(a1 + 80);
  if (*(_QWORD *)a1)
  {
    sub_1B68CA64C(*(_QWORD *)a1);
    free(*(void **)a1);
  }
  *(_QWORD *)a1 = 0;
  v11 = *(void **)(a1 + 24);
  if (v11)
    free(v11);
  *(_QWORD *)(a1 + 24) = 0;
  v12 = *(void **)(a1 + 520);
  if (v12)
    free(v12);
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  result = *(FILE **)(a1 + 536);
  if (result)
  {
    result = (FILE *)fclose(result);
    *(_QWORD *)(a1 + 536) = 0;
  }
  return result;
}

uint64_t sub_1B68F8570(uint64_t a1, uint64_t *a2, int a3, unsigned __int8 a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t result;

  v6 = *a2;
  if (*a2)
    LODWORD(v6) = *(unsigned __int8 *)(v6 + 176) != 1;
  v7 = a2[1];
  if (v7)
    LODWORD(v7) = *(unsigned __int8 *)(v7 + 176) != 1;
  v8 = v7 + v6;
  if (a3 == 6 || a3 == 1)
    v9 = v8 | 0x18;
  else
    v9 = v8 + 11;
  result = sub_1B68A39E8(a1, a4, (_BYTE *)(a1 + 2 * v9 + 48));
  *(_BYTE *)(a2[2] + 176) = a4;
  return result;
}

uint64_t sub_1B68F85F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  if (!a2)
  {
    v4 = 399;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    return sub_1B68A39E8(a1, a4 != 0, (_BYTE *)(a1 + 2 * (v4 + v5) + 48));
  }
  v4 = *(unsigned __int8 *)(a2 + 199) + 399;
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v5 = *(unsigned __int8 *)(a3 + 199);
  return sub_1B68A39E8(a1, a4 != 0, (_BYTE *)(a1 + 2 * (v4 + v5) + 48));
}

uint64_t sub_1B68F862C(uint64_t a1, int a2, _BYTE *a3)
{
  _BYTE *v3;
  uint64_t v4;
  int v5;

  v3 = a3;
  v4 = a1;
  if (a2)
  {
    v5 = a2;
    sub_1B68A39E8(a1, 1, a3);
    for (v3 += 2; --v5; sub_1B68A39E8(v4, 1, v3))
      ;
    a1 = v4;
  }
  return sub_1B68A39E8(a1, 0, v3);
}

uint64_t sub_1B68F86A0(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, unsigned __int16 a5, int a6, int a7)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  _BYTE *v23;

  if (((0x505uLL >> a4) & 1) != 0)
  {
    v10 = *a3;
    if (!*a3)
      goto LABEL_10;
    v12 = *(unsigned __int8 *)(v10 + 177);
    if (v12 < 6 && ((0x33u >> v12) & 1) != 0)
      goto LABEL_10;
    v11 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 160) + 10);
  }
  else
  {
    v10 = a3[2];
    v11 = a5;
  }
  v13 = *((unsigned __int8 *)&unk_1B69360A0 + 80 * v11 + byte_1B6935FA4[a4]);
  if ((*(_BYTE *)(v10 + 16 * (a6 != 0) + v13 + 128) & 0xDF) == 0)
  {
LABEL_10:
    v15 = 0;
    goto LABEL_12;
  }
  v14 = *(unsigned __int8 *)(v10 + v13 + 183);
  if (a6)
    v15 = (v14 - 5) < 2;
  else
    v15 = (v14 & 0xFFFFFFFD) == 4;
LABEL_12:
  if (((0x33uLL >> a4) & 1) != 0)
  {
    v16 = a3[1];
    if (!v16)
      goto LABEL_21;
    v18 = *(unsigned __int8 *)(v16 + 177);
    if (v18 < 6 && ((0x33u >> v18) & 1) != 0)
      goto LABEL_21;
    v17 = *(unsigned __int16 *)(*(_QWORD *)(v16 + 160) + 10);
  }
  else
  {
    v16 = a3[2];
    v17 = a5;
  }
  v19 = *((unsigned __int8 *)&unk_1B69360A0 + 80 * v17 + byte_1B6935FC4[a4]);
  if ((*(_BYTE *)(v16 + 16 * (a6 != 0) + v19 + 128) & 0xDF) == 0)
  {
LABEL_21:
    v22 = 0;
    goto LABEL_24;
  }
  v20 = *(unsigned __int8 *)(v16 + v19 + 183);
  if (a6)
    v21 = (v20 - 7) > 0xFFFFFFFD;
  else
    v21 = (v20 & 0xFFFFFFFD) == 4;
  v22 = 2 * v21;
LABEL_24:
  v23 = (_BYTE *)(a2 + 2 * (v22 | v15) + 156);
  if (!a7)
    return sub_1B68A39E8(a1, 0, v23);
  sub_1B68A39E8(a1, 1, v23);
  return sub_1B68F862C(a1, a7 - 1, (_BYTE *)(a2 + 164));
}

uint64_t sub_1B68F8868(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned int a4, unsigned __int16 a5, unsigned int a6, int a7, int a8)
{
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t result;
  int v36;

  v15 = byte_1B6935FC4[a4];
  if (((0x33uLL >> a4) & 1) != 0)
  {
    v19 = a3[1];
    if (!v19
      || ((v20 = *(unsigned __int8 *)(v19 + 177), !*(_BYTE *)(v19 + 178)) ? (v21 = v20 == 3) : (v21 = 0),
          v21 || v20 < 6 && ((0x33u >> v20) & 1) != 0))
    {
      v18 = 0;
      goto LABEL_15;
    }
    v16 = *((unsigned __int8 *)&unk_1B69360A0 + 80 * *(unsigned __int16 *)(*(_QWORD *)(v19 + 160) + 10) + v15);
    v17 = v19 + ((unint64_t)(a7 != 0) << 6);
  }
  else
  {
    v16 = *((unsigned __int8 *)&unk_1B69360A0 + 80 * a5 + v15);
    v17 = a3[2] + ((unint64_t)(a7 != 0) << 6);
  }
  v18 = *(__int16 *)(v17 + 4 * v16 + 2 * a6);
  if (v18 < 0)
    v18 = -v18;
  else
    v18 = (unsigned __int16)v18;
LABEL_15:
  v22 = byte_1B6935FA4[a4];
  if (((0x505uLL >> a4) & 1) != 0)
  {
    v24 = *a3;
    if (!*a3)
      goto LABEL_29;
    v25 = *(unsigned __int8 *)(v24 + 177);
    if (*(_BYTE *)(v24 + 178))
      v26 = 0;
    else
      v26 = v25 == 3;
    if (v26 || v25 < 6 && ((0x33u >> v25) & 1) != 0)
    {
      LODWORD(v24) = 0;
      goto LABEL_29;
    }
    v23 = *((unsigned __int8 *)&unk_1B69360A0 + 80 * *(unsigned __int16 *)(*(_QWORD *)(v24 + 160) + 10) + v22);
    v24 += (unint64_t)(a7 != 0) << 6;
  }
  else
  {
    v23 = *((unsigned __int8 *)&unk_1B69360A0 + 80 * a5 + v22);
    v24 = a3[2] + ((unint64_t)(a7 != 0) << 6);
  }
  LODWORD(v24) = *(__int16 *)(v24 + 4 * v23 + 2 * a6);
  if ((v24 & 0x80000000) != 0)
    LODWORD(v24) = -(int)v24;
  else
    LODWORD(v24) = (unsigned __int16)v24;
LABEL_29:
  v27 = v24 + v18;
  v28 = 7 * a6;
  v29 = 7 * a6 + 41;
  if (v27 >= 0x21)
    v29 = 7 * a6 + 42;
  if (v27 <= 2)
    v30 = v28 + 40;
  else
    v30 = v29;
  if (a8)
  {
    if (a8 >= 0)
      LOWORD(v31) = a8;
    else
      v31 = -a8;
    v32 = (unsigned __int16)v31;
    v33 = a2 + 48;
    sub_1B68A39E8(a1, 1, (_BYTE *)(a2 + 48 + 2 * v30));
    v34 = (_BYTE *)(v33 + 2 * (v28 + 43));
    if (v32 == 1)
      goto LABEL_39;
    sub_1B68A39E8(a1, 1, v34);
    v34 += 2;
    if (v32 == 2)
      goto LABEL_39;
    v36 = 0;
    do
    {
      if (v36 == 7)
        break;
      sub_1B68A39E8(a1, 1, v34);
      v34 += 2 * (v36 == 0) + 2 * (v36 == 1);
      ++v36;
    }
    while (v32 - 2 != v36);
    if (v32 <= 8)
LABEL_39:
      sub_1B68A39E8(a1, 0, v34);
    else
      sub_1B68F8B80(a1, v32 - 9, 3);
    result = sub_1B68A3ABC(a1, (a8 >> 15) & 1);
  }
  else
  {
    result = sub_1B68A39E8(a1, 0, (_BYTE *)(a2 + 2 * v30 + 48));
  }
  *(_WORD *)(a3[2]
           + ((unint64_t)(a7 != 0) << 6)
           + 4 * *((unsigned __int8 *)&unk_1B69360A0 + 80 * a5 + a4)
           + 2 * a6) = a8;
  return result;
}

uint64_t sub_1B68F8B80(uint64_t a1, unsigned int a2, int a3)
{
  int v3;
  unsigned int v4;
  int i;
  uint64_t result;
  int v8;

  v3 = a3;
  v4 = a2;
  for (i = 1 << a3; v4 >= 1 << v3; i = 1 << v3)
  {
    sub_1B68A3ABC(a1, 1);
    v4 -= i;
    ++v3;
  }
  result = sub_1B68A3ABC(a1, 0);
  if (v3)
  {
    v8 = v3 - 1;
    do
      result = sub_1B68A3ABC(a1, (v4 >> v8--) & 1);
    while (v8 != -1);
  }
  return result;
}

uint64_t sub_1B68F8C14(uint64_t a1, _QWORD *a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  uint64_t v20;
  int v21;
  int *v22;
  _UNKNOWN **v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  int *v29;
  char *v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 *v61;
  uint64_t v62;
  uint64_t v63;

  v12 = 0;
  v13 = 0;
  LODWORD(v14) = 0;
  do
  {
    v15 = v14;
    v16 = *(unsigned __int16 *)(a9 + 2 * v12);
    v17 = 1 << v12;
    if (*(_WORD *)(a9 + 2 * v12))
      v14 = (v14 + 1);
    else
      v14 = v14;
    if (!*(_WORD *)(a9 + 2 * v12))
      v17 = 0;
    v13 |= v17;
    ++v12;
  }
  while (a10 != v12);
  if ((_DWORD)v14)
  {
    sub_1B68F9018(a1, a1, a2, a3, a4, a5, a6, a7, 1, a10);
    v55 = a3;
    v18 = (int *)&unk_1B69357F0;
    v20 = a3 == 1 || a3 == 7;
    v21 = dword_1B69357D0[a3] - (v20 ^ 1);
    if (a8)
      v18 = (int *)&unk_1B6935810;
    v22 = (int *)&unk_1B6935830;
    if (a8)
      v22 = (int *)&unk_1B6935850;
    v23 = &off_1E6A17D30;
    if (!a8)
      v23 = &off_1E6A17CF0;
    if (v21 > (int)v20)
    {
      v57 = a1 + 48 + 2 * v18[a3];
      v56 = a1 + 48 + 2 * v22[a3];
      v24 = (char *)v23[a3];
      v25 = v20 << 63 >> 63;
      v26 = (uint64_t)*(&off_1E6A17D70 + a3);
      if ((a3 == 7) <= (a3 == 1))
        v27 = a3 == 1;
      else
        v27 = a3 == 7;
      v28 = v27 - (v27 + (_DWORD)v25 + v21);
      v29 = (int *)(v26 + 4 * v27);
      v30 = &v24[4 * v27];
      v31 = (unsigned __int16 *)(a9 + 2 * v25 + 2 * v27);
      v32 = v14;
      do
      {
        v33 = *v31;
        v61 = v31 + 1;
        v34 = *(int *)v30;
        v30 += 4;
        sub_1B68A39E8(a1, v33 != 0, (_BYTE *)(v57 + 2 * v34));
        if (v33)
        {
          sub_1B68A39E8(a1, --v32 == 0, (_BYTE *)(v56 + 2 * *v29));
          v31 = v61;
          if (!v32)
            break;
        }
        else
        {
          v31 = v61;
        }
        ++v29;
      }
      while (!__CFADD__(v28++, 1));
    }
    if (a10 > 16)
    {
      v45 = 0;
      v63 = a1 + 48 + 2 * dword_1B6935DE4[v55];
      v59 = a1 + 48 + 2 * dword_1B6935E04[v55];
      if (v16)
        v46 = v15 + 1;
      else
        v46 = v15;
      v47 = v46 + 1;
      v48 = 1;
      do
      {
        v49 = __clz(v13);
        v50 = *(__int16 *)(a9 + 2 * (63 - v49));
        if (v50 >= 0)
          v51 = *(__int16 *)(a9 + 2 * (63 - v49));
        else
          v51 = -v50;
        if (v48 >= 4)
          v52 = 4;
        else
          v52 = v48;
        sub_1B68A39E8(a1, v51 > 1, (_BYTE *)(v63 + 2 * v52));
        if (v51 < 2)
        {
          if (v48)
            ++v48;
          else
            v48 = 0;
        }
        else
        {
          if (v45 >= 4)
            v53 = 4;
          else
            v53 = v45;
          sub_1B68F920C(a1, v51 - 2, (_BYTE *)(v59 + 2 * v53));
          v48 = 0;
          ++v45;
        }
        v13 ^= 1 << ~(_BYTE)v49;
        sub_1B68A3ABC(a1, v50 >> 31);
        --v47;
      }
      while (v47 > 1);
    }
    else
    {
      v36 = 0;
      v62 = a1 + 48 + 2 * dword_1B6935DE4[v55];
      v58 = a1 + 48 + 2 * dword_1B6935E04[v55];
      if (v16)
        v37 = v15 + 1;
      else
        v37 = v15;
      v38 = v37 + 1;
      v39 = 1;
      do
      {
        v40 = __clz(v13);
        v41 = *(__int16 *)(a9 + 2 * (int)(31 - v40));
        if (v41 >= 0)
          v42 = *(__int16 *)(a9 + 2 * (int)(31 - v40));
        else
          v42 = -v41;
        if (v39 >= 4)
          v43 = 4;
        else
          v43 = v39;
        sub_1B68A39E8(a1, v42 > 1, (_BYTE *)(v62 + 2 * v43));
        if (v42 < 2)
        {
          if (v39)
            ++v39;
          else
            v39 = 0;
        }
        else
        {
          if (v36 >= 4)
            v44 = 4;
          else
            v44 = v36;
          sub_1B68F920C(a1, v42 - 2, (_BYTE *)(v58 + 2 * v44));
          v39 = 0;
          ++v36;
        }
        LODWORD(v13) = (0x80000000 >> v40) ^ v13;
        sub_1B68A3ABC(a1, v41 >> 31);
        --v38;
      }
      while (v38 > 1);
    }
  }
  else
  {
    sub_1B68F9018(a1, a1, a2, a3, a4, a5, a6, a7, 0, a10);
  }
  return v14;
}

uint64_t sub_1B68F9018(uint64_t result, uint64_t a2, _QWORD *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  char v11;
  char v12;
  _BOOL4 v13;
  BOOL v14;
  _BOOL4 v15;
  char v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  char v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;

  v11 = a4 == 7;
  if (a4 == 7)
    v12 = -2;
  else
    v12 = 0;
  if (a5)
    v13 = 0;
  else
    v13 = a4 == 7;
  v14 = a4 == 2 || (a4 & 0xFFFFFFFB) == 1;
  v15 = v14 || a4 == 7;
  if (v14)
    v16 = 12;
  else
    v16 = 2 * v11;
  if (v14)
  {
    v11 = 3;
    v17 = -4;
  }
  else
  {
    v17 = v12;
  }
  LODWORD(v18) = a6 != 0;
  v19 = !v15;
  if (!v15)
    a8 = 0;
  if (v19)
    a7 = 0;
  if ((a4 - 1) < 2)
    goto LABEL_28;
  v22 = a4;
  if (!a4)
    goto LABEL_29;
  if (a4 == 5)
  {
LABEL_28:
    v22 = a7 + 4 * a8 + 1;
  }
  else
  {
    if (a5)
      v25 = 0;
    else
      v25 = a4 == 6;
    if (v25)
      v22 = 17;
    else
      v22 = 18;
    if (a4 != 6)
    {
      v26 = a7 + 2 * a8;
      v27 = v26 + 23;
      v28 = v26 + 19;
      if (v13)
        v22 = v28;
      else
        v22 = v27;
    }
  }
LABEL_29:
  if (a10 == 64)
  {
    v23 = a3 + 2;
    *(_DWORD *)(a3[2] + 172) |= 1 << (v22 + 1);
    *(_DWORD *)(a3[2] + 172) |= 1 << (v22 + 4);
    v22 += 5;
LABEL_51:
    *(_DWORD *)(*v23 + 172) |= 1 << v22;
    return result;
  }
  if (a8)
  {
    v24 = ((1 << (v22 + v17)) & (unint64_t)*(unsigned int *)(a3[2] + 172)) >> (v22 + v17);
  }
  else
  {
    v29 = a3[1];
    LODWORD(v24) = a6 != 0;
    if (v29)
      v24 = ((1 << (v22 + v16)) & (unint64_t)*(unsigned int *)(v29 + 172)) >> (v22 + v16);
  }
  if (a7)
  {
    v18 = ((1 << (v22 - 1)) & (unint64_t)*(unsigned int *)(a3[2] + 172)) >> (v22 - 1);
  }
  else if (*a3)
  {
    v18 = ((1 << (v22 + v11)) & (unint64_t)*(unsigned int *)(*a3 + 172)) >> (v22 + v11);
  }
  result = sub_1B68A39E8(result, a9, (_BYTE *)(a2 + 2 * ((int)v18 + 2 * (int)v24 + 4 * dword_1B69357B0[a4] + 85) + 48));
  if (a9)
  {
    v23 = a3 + 2;
    goto LABEL_51;
  }
  return result;
}

uint64_t sub_1B68F920C(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v4;
  int v6;

  v4 = a1;
  if (!a2)
    return sub_1B68A39E8(a1, 0, a3);
  sub_1B68A39E8(a1, 1, a3);
  if (a2 == 1)
    goto LABEL_7;
  v6 = 1;
  do
  {
    if (v6 == 13)
      break;
    ++v6;
    sub_1B68A39E8(v4, 1, a3);
  }
  while (a2 != v6);
  if (a2 <= 0xC)
  {
LABEL_7:
    a1 = v4;
    return sub_1B68A39E8(a1, 0, a3);
  }
  return sub_1B68F8B80(v4, a2 - 13, 0);
}

uint64_t sub_1B68F92B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t v12;
  int16x8_t v13;
  int16x8_t v14;
  uint64_t i;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;

  if (a6 < 1)
  {
    v20 = 0uLL;
    v21 = 0uLL;
  }
  else
  {
    v6 = 0;
    v7 = 2 * a3;
    v8 = 2 * a4;
    v9 = a2 + a4;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = a1 + a3;
    v13 = 0uLL;
    v14 = 0uLL;
    do
    {
      if (a5 >= 1)
      {
        for (i = 0; i < a5; i += 16)
        {
          v16 = *(uint8x16_t *)(a1 + i);
          v17 = *(uint8x16_t *)(a2 + i);
          v18 = *(uint8x16_t *)(v12 + i);
          v19 = *(uint8x16_t *)(v9 + i);
          v14 = (int16x8_t)vabal_u8((uint16x8_t)v14, *(uint8x8_t *)v16.i8, *(uint8x8_t *)v17.i8);
          v13 = (int16x8_t)vabal_high_u8((uint16x8_t)v13, v16, v17);
          v11 = (int16x8_t)vabal_u8((uint16x8_t)v11, *(uint8x8_t *)v18.i8, *(uint8x8_t *)v19.i8);
          v10 = (int16x8_t)vabal_high_u8((uint16x8_t)v10, v18, v19);
        }
      }
      v6 += 2;
      a1 += v7;
      a2 += v8;
      v9 += v8;
      v12 += v7;
    }
    while (v6 < a6);
    v20 = (uint16x8_t)vaddq_s16(v13, v14);
    v21 = (uint16x8_t)vaddq_s16(v10, v11);
  }
  return vaddlvq_u16(v21) + vaddlvq_u16(v20);
}

uint64_t sub_1B68F9364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  int v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t i;
  uint8x16_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  uint8x16_t v16;
  uint16x8_t v17;
  uint16x8_t v18;

  if (a6 < 1)
  {
    v17 = 0uLL;
    v18 = 0uLL;
  }
  else
  {
    v7 = 0;
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    do
    {
      if (a5 >= 1)
      {
        for (i = 0; i < a5; i += 32)
        {
          v13 = *(uint8x16_t *)(a1 + i);
          v14 = *(uint8x16_t *)(a1 + i + 16);
          v15 = *(uint8x16_t *)(a2 + i);
          v16 = *(uint8x16_t *)(a2 + i + 16);
          v11 = (int16x8_t)vabal_u8((uint16x8_t)v11, *(uint8x8_t *)v13.i8, *(uint8x8_t *)v15.i8);
          v10 = (int16x8_t)vabal_high_u8((uint16x8_t)v10, v13, v15);
          v9 = (int16x8_t)vabal_u8((uint16x8_t)v9, *(uint8x8_t *)v14.i8, *(uint8x8_t *)v16.i8);
          v8 = (int16x8_t)vabal_high_u8((uint16x8_t)v8, v14, v16);
        }
      }
      v7 += a7;
      a1 += a7 * a3;
      a2 += a7 * a4;
    }
    while (v7 < a6);
    v17 = (uint16x8_t)vaddq_s16(v10, v11);
    v18 = (uint16x8_t)vaddq_s16(v8, v9);
  }
  return vaddlvq_u16(v18) + vaddlvq_u16(v17);
}

uint64_t sub_1B68F9408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  uint64_t i;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  uint8x16_t v22;

  if (a6 < 1)
    return 0;
  v7 = a7 * a3;
  v8 = a7 * a4;
  v9 = v7 >= 0 ? a7 * a3 : v7 + 1;
  v10 = v8 >= 0 ? a7 * a4 : v8 + 1;
  if (a5 < 1)
    return 0;
  v11 = 0;
  v12 = (v10 >> 1) + a2 + 16;
  v13 = (v9 >> 1) + a1 + 16;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  do
  {
    for (i = 0; i < a5; i += 32)
    {
      v19 = *(uint8x16_t *)(a1 + i);
      v20 = *(uint8x16_t *)(a2 + i);
      v21 = *(uint8x16_t *)(v13 + i);
      v22 = *(uint8x16_t *)(v12 + i);
      v17 = (int16x8_t)vabal_u8((uint16x8_t)v17, *(uint8x8_t *)v19.i8, *(uint8x8_t *)v20.i8);
      v16 = (int16x8_t)vabal_high_u8((uint16x8_t)v16, v19, v20);
      v15 = (int16x8_t)vabal_u8((uint16x8_t)v15, *(uint8x8_t *)v21.i8, *(uint8x8_t *)v22.i8);
      v14 = (int16x8_t)vabal_high_u8((uint16x8_t)v14, v21, v22);
    }
    v11 += a7;
    a1 += v7;
    a2 += v8;
    v12 += v8;
    v13 += v7;
  }
  while (v11 < a6);
  return vaddlvq_u16((uint16x8_t)vaddq_s16(v16, v17)) + vaddlvq_u16((uint16x8_t)vaddq_s16(v14, v15));
}

uint64_t sub_1B68F94D8()
{
  return 0;
}

pthread_mutex_t *sub_1B68F94E0(uint64_t a1, unsigned int a2, char a3, char a4, char a5, char a6)
{
  pthread_mutex_t *result;
  pthread_mutex_t *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;

  if (*(_DWORD *)(a1 + 20) < a2)
    return (pthread_mutex_t *)4294958327;
  v13 = *(pthread_mutex_t **)(a1 + 64);
  if (v13)
    pthread_mutex_lock(v13);
  v14 = *(_DWORD *)(a1 + 56);
  if (v14 >= a2 + 1)
  {
    v16 = *(_BYTE **)(a1 + 48);
    goto LABEL_17;
  }
  if (2 * (a2 + 1) >= *(_DWORD *)(a1 + 20))
    v15 = *(_DWORD *)(a1 + 20);
  else
    v15 = 2 * (a2 + 1);
  if (v15)
  {
    v16 = malloc_type_malloc(12 * v15, 0x4CF1F002uLL);
    if (!*(_DWORD *)(a1 + 56))
      goto LABEL_16;
LABEL_14:
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v17);
      v20 = &v16[v17];
      v21 = *v19;
      *((_DWORD *)v20 + 2) = *((_DWORD *)v19 + 2);
      *(_QWORD *)v20 = v21;
      ++v18;
      v17 += 12;
    }
    while (v18 < *(unsigned int *)(a1 + 56));
    goto LABEL_16;
  }
  v16 = 0;
  if (v14)
    goto LABEL_14;
LABEL_16:
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = v16;
  *(_DWORD *)(a1 + 56) = v15;
LABEL_17:
  v16[12 * a2 + 9] = a4;
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 12 * a2 + 10) = 2 * a5;
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 12 * a2 + 11) = 2 * a6;
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 12 * a2 + 8) = a3;
  result = *(pthread_mutex_t **)(a1 + 64);
  if (result)
  {
    pthread_mutex_unlock(result);
    return 0;
  }
  return result;
}

uint64_t sub_1B68F9630(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  void (**v7)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *);
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  char *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  unint64_t v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t k;
  unint64_t v51;
  uint64_t v52;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  _BYTE v64[16];
  _BYTE v65[16];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v63 = a4;
  if (a4 < a5)
  {
    v5 = a3;
    v6 = *(unsigned int *)(*(_QWORD *)(result + 80) + 136);
    v56 = 2 * v6;
    v7 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))&unk_1EF13A000;
    v58 = result;
    v57 = v6;
    do
    {
      if (a2 < a3)
      {
        v8 = (unsigned __int8 *)(*(_QWORD *)(result + 152) + 48 * (a2 + *(_DWORD *)(result + 12) * v63));
        v9 = 16 * v63;
        v10 = a2;
        do
        {
          v11 = *(unsigned __int8 **)(result + 80);
          if (*(_DWORD *)(result + 188) && v11[3])
          {
            v12 = v11[5];
            v13 = *v11;
            v14 = *((_QWORD *)v11 + 4) + (16 * v10);
            v15 = *((_DWORD *)v11 + 34);
            v16 = v14 + (v9 * v15);
            v17 = v56;
            if (v13)
            {
              v16 = v14 + 32 * v63 * v15;
              v18 = 32 * v63;
            }
            else
            {
              v18 = v9;
            }
            v19 = v14 + v6 + (v18 * v15);
            if (v12)
              v20 = v19;
            else
              v20 = v16;
          }
          else
          {
            v20 = *((_QWORD *)v11 + 4) + (16 * v10) + (v9 * *((_DWORD *)v11 + 34));
            v17 = v6;
          }
          if ((v8[16] & 0xC0) + *v8 <= 0x7F)
          {
            v62 = (int)(v10 + *(_DWORD *)(result + 12) * v63);
            v21 = *(_QWORD *)(result + 48) + 12 * *(unsigned __int16 *)(*(_QWORD *)(result + 72) + 2 * v62);
            v22 = *(char *)(v21 + 10);
            v23 = *(char *)(v21 + 11);
            v24 = *(_QWORD *)(result + 112);
            v25 = *(unsigned __int8 *)(v24 + v62);
            v60 = v22;
            v61 = v23;
            v26 = v25 + v22;
            if (v25 + v22 >= 51)
              v26 = 51;
            v27 = v26 & ~(v26 >> 31);
            v59 = *(unsigned __int8 *)(v24 + v62);
            v28 = v25 + v23;
            if (v28 >= 51)
              v28 = 51;
            v29 = byte_1B6935E24[v27];
            v30 = byte_1B6935E64[v28 & ~(v28 >> 31)];
            for (i = 4; i != 16; ++i)
            {
              v32 = &byte_1B6935EA4[4 * v27];
              v65[i] = v32[v8[i]];
              v64[i] = v32[v8[i + 16]];
            }
            v33 = *v8;
            if (v33 <= 0x3F)
            {
              if (v10 && v33 <= 0x1F)
              {
                v34 = v25 + *(unsigned __int8 *)(v62 + v24 - 1) + 1;
                v35 = v22 + (v34 >> 1);
                if (v35 >= 51)
                  v35 = 51;
                v36 = v35 & ~(v35 >> 31);
                v37 = v61 + (v34 >> 1);
                if (v37 >= 51)
                  v37 = 51;
                v38 = byte_1B6935E24[v36];
                v39 = byte_1B6935E64[v37 & ~(v37 >> 31)];
                if (v33 > 3)
                {
                  off_1EF13A580(v20, v17, v38, v39);
                }
                else
                {
                  for (j = 0; j != 4; ++j)
                    v65[j] = byte_1B6935EA4[4 * v36 + v8[j]];
                  v7[174](v20, v17, v38, v39, v65);
                }
              }
              v41 = 4;
              do
              {
                if (v8[v41] <= 0x1Fu)
                  v7[174](v20 + v41, v17, v29, v30, &v65[v41]);
                v42 = v41 >= 0xC;
                v41 += 4;
              }
              while (!v42);
            }
            v43 = v8[16];
            if (v43 <= 0x3F)
            {
              if (v63 && v43 <= 0x1F)
              {
                v44 = v59
                    + *(unsigned __int8 *)(*(_QWORD *)(v58 + 112) + (v62 - *(_DWORD *)(v58 + 12)))
                    + 1;
                v45 = v60 + (v44 >> 1);
                if (v45 >= 51)
                  v45 = 51;
                v46 = v45 & ~(v45 >> 31);
                v47 = v61 + (v44 >> 1);
                if (v47 >= 51)
                  v47 = 51;
                v48 = byte_1B6935E24[v46];
                v49 = byte_1B6935E64[v47 & ~(v47 >> 31)];
                if (v43 > 3)
                {
                  off_1EF13A578(v20, v17, v48, v49);
                }
                else
                {
                  for (k = 0; k != 4; ++k)
                    v64[k] = byte_1B6935EA4[4 * v46 + v8[k + 16]];
                  off_1EF13A568(v20, v17, v48, v49, v64);
                }
              }
              v51 = 0;
              v52 = v20 + 4 * (int)v17;
              do
              {
                if (v8[v51 + 20] <= 0x1Fu)
                  off_1EF13A568(v52, v17, v29, v30, &v64[v51 + 4]);
                v51 += 4;
                v52 += 4 * (int)v17;
              }
              while (v51 < 0xC);
            }
            result = v58;
            v6 = v57;
            v5 = a3;
            v7 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))&unk_1EF13A000;
            v9 = 16 * v63;
          }
          v8 += 48;
          ++v10;
        }
        while (v10 != v5);
      }
      ++v63;
    }
    while (v63 != a5);
  }
  return result;
}

uint64_t sub_1B68F9AE8(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t i;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  int v46;
  _BYTE *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned __int8 v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned __int8 v76;
  _BYTE *v77;
  uint64_t j;
  uint64_t v79;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  _BYTE v96[2];
  _BYTE v97[2];
  char v98;
  _BYTE v99[7];
  uint64_t v100;
  char v101;
  _BYTE v102[7];
  _QWORD v103[4];

  v103[2] = *MEMORY[0x1E0C80C00];
  v89 = a4;
  if (a4 < a5)
  {
    v5 = result;
    v6 = (unsigned __int8 *)(*(_QWORD *)(result + 152) + 48 * (a2 + *(_DWORD *)(result + 12) * a4));
    result = *(unsigned int *)(*(_QWORD *)(result + 80) + 152);
    v87 = 2 * result;
    v7 = a3;
    v88 = result;
    do
    {
      if (a2 < a3)
      {
        v8 = 8 * v89;
        v9 = v6 + 24;
        v10 = a2;
        do
        {
          v11 = *(unsigned __int8 **)(v5 + 80);
          if (*(_DWORD *)(v5 + 188) && v11[3])
          {
            v12 = v11[5];
            v13 = *v11;
            v14 = *((_QWORD *)v11 + 5) + (16 * v10);
            v15 = *((_DWORD *)v11 + 38);
            v16 = v14 + (v8 * v15);
            if (v13)
            {
              v16 = v14 + 16 * v89 * v15;
              v17 = 16 * v89;
            }
            else
            {
              v17 = v8;
            }
            v18 = v14 + result + (v17 * v15);
            if (v12)
              v19 = v18;
            else
              v19 = v16;
            v20 = v87;
          }
          else
          {
            v19 = *((_QWORD *)v11 + 5) + (16 * v10) + (v8 * *((_DWORD *)v11 + 38));
            v20 = result;
          }
          if ((v6[16] & 0xC0) + *v6 <= 0x7F)
          {
            v90 = v19;
            v91 = v20;
            v21 = v10 + *(_DWORD *)(v5 + 12) * v89;
            v22 = *(_QWORD *)(v5 + 48) + 12 * *(unsigned __int16 *)(*(_QWORD *)(v5 + 72) + 2 * v21);
            v23 = *(char *)(v22 + 10);
            v24 = *(char *)(v22 + 11);
            v25 = *(_QWORD *)(v5 + 120);
            v26 = *(_QWORD *)(v5 + 128);
            v27 = *(unsigned __int8 *)(v25 + v21);
            v28 = *(unsigned __int8 *)(v26 + v21);
            v29 = v27 + v23;
            if (v27 + v23 >= 51)
              v29 = 51;
            v30 = v29 & ~(v29 >> 31);
            v31 = v28 + v23;
            if (v28 + v23 >= 51)
              v31 = 51;
            v32 = v31 & ~(v31 >> 31);
            v33 = v27 + v24;
            if (v27 + v24 >= 51)
              v33 = 51;
            v34 = v33 & ~(v33 >> 31);
            v35 = v28 + v24;
            if (v28 + v24 >= 51)
              v35 = 51;
            v36 = byte_1B6935E24[v32];
            v37 = byte_1B6935E64[v34];
            v38 = byte_1B6935E64[v35 & ~(v35 >> 31)];
            v97[0] = byte_1B6935E24[v30];
            v97[1] = v36;
            v39 = v21;
            v96[0] = v37;
            v96[1] = v38;
            v40 = v9;
            for (i = 16; i != 24; i += 2)
            {
              v42 = *(v40 - 16);
              v43 = &byte_1B6935EA4[4 * v30];
              v44 = &v102[i - 1];
              *v44 = v43[v42];
              v45 = &byte_1B6935EA4[4 * v32];
              v44[1] = v45[v42];
              v46 = *v40++;
              v47 = &v99[i - 1];
              *v47 = v43[v46];
              v47[1] = v45[v46];
            }
            v48 = *v6;
            if (v48 < 0x40)
            {
              if (v10 && v48 <= 0x1F)
              {
                v49 = v27 + *(unsigned __int8 *)(v25 + v39 - 1) + 1;
                v50 = v28 + *(unsigned __int8 *)(v26 + v39 - 1) + 1;
                v51 = v23 + (v49 >> 1);
                if (v51 >= 51)
                  v51 = 51;
                v52 = v51 & ~(v51 >> 31);
                v53 = v23 + (v50 >> 1);
                if (v53 >= 51)
                  v53 = 51;
                v54 = v53 & ~(v53 >> 31);
                v55 = v24 + (v49 >> 1);
                if (v55 >= 51)
                  v55 = 51;
                v56 = v55 & ~(v55 >> 31);
                v57 = v24 + (v50 >> 1);
                if (v57 >= 51)
                  v57 = 51;
                v94 = byte_1B6935E24[v52];
                v58 = byte_1B6935E64[v56];
                v95 = byte_1B6935E24[v54];
                v92 = v58;
                v93 = byte_1B6935E64[v57 & ~(v57 >> 31)];
                v86 = v28;
                v84 = v39;
                if (v48 > 3)
                {
                  off_1EF13A5A0(v90, v91, &v94, &v92);
                }
                else
                {
                  v59 = 0;
                  v60 = v102;
                  do
                  {
                    v61 = v6[v59];
                    *(v60 - 1) = byte_1B6935EA4[4 * v52 + v61];
                    *v60 = byte_1B6935EA4[4 * v54 + v61];
                    v60 += 2;
                    ++v59;
                  }
                  while (v59 != 4);
                  off_1EF13A590(v90, v91, &v94, &v92, &v101);
                }
                v7 = a3;
                result = v88;
                v8 = 8 * v89;
                v28 = v86;
                LODWORD(v39) = v84;
              }
              if (v6[8] <= 0x1Fu)
              {
                v85 = v24;
                v83 = v27;
                v62 = v28;
                v63 = v23;
                v64 = v39;
                off_1EF13A590(v90 + 8, v91, v97, v96, v103);
                LODWORD(v39) = v64;
                v23 = v63;
                v28 = v62;
                v27 = v83;
                v24 = v85;
                v8 = 8 * v89;
                v7 = a3;
                result = v88;
              }
            }
            v65 = v6[16];
            if (v65 <= 0x3F)
            {
              if (v89 && v65 <= 0x1F)
              {
                v66 = v39 - *(_DWORD *)(v5 + 12);
                v67 = v27 + *(unsigned __int8 *)(*(_QWORD *)(v5 + 120) + v66) + 1;
                v68 = v28 + *(unsigned __int8 *)(*(_QWORD *)(v5 + 128) + v66) + 1;
                v69 = v23 + (v67 >> 1);
                if (v69 >= 51)
                  v69 = 51;
                v70 = v69 & ~(v69 >> 31);
                v71 = v23 + (v68 >> 1);
                if (v71 >= 51)
                  v71 = 51;
                v72 = v71 & ~(v71 >> 31);
                v73 = v24 + (v67 >> 1);
                if (v73 >= 51)
                  v73 = 51;
                v74 = v73 & ~(v73 >> 31);
                v75 = v24 + (v68 >> 1);
                if (v75 >= 51)
                  v75 = 51;
                v94 = byte_1B6935E24[v70];
                v76 = byte_1B6935E64[v74];
                v95 = byte_1B6935E24[v72];
                v92 = v76;
                v93 = byte_1B6935E64[v75 & ~(v75 >> 31)];
                if (v65 > 3)
                {
                  off_1EF13A598(v90, v91, &v94, &v92);
                  v8 = 8 * v89;
                  v7 = a3;
                  result = v88;
                }
                else
                {
                  v77 = v99;
                  for (j = 16; j != 20; ++j)
                  {
                    v79 = v6[j];
                    *(v77 - 1) = byte_1B6935EA4[4 * v70 + v79];
                    *v77 = byte_1B6935EA4[4 * v72 + v79];
                    v77 += 2;
                  }
                  off_1EF13A588(v90, v91, &v94, &v92, &v98);
                  v7 = a3;
                  result = v88;
                  v8 = 8 * v89;
                }
              }
              if (v6[24] <= 0x1Fu)
              {
                off_1EF13A588(v90 + (int)(4 * v91), v91, v97, v96, &v100);
                v8 = 8 * v89;
                v7 = a3;
                result = v88;
              }
            }
          }
          v6 += 48;
          ++v10;
          v9 += 48;
        }
        while (v10 != v7);
      }
      ++v89;
    }
    while (v89 != a5);
  }
  return result;
}

uint64_t sub_1B68FA0D8(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, double a7, int8x8_t a8)
{
  int v8;
  int v9;
  int v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _OWORD *v18;
  unint64_t *v19;
  unsigned int *v20;
  unsigned __int16 *v21;
  unsigned __int8 v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int8x16_t v29;
  __int128 v30;
  unsigned int v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  char v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  _BYTE *v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  __int16 *v61;
  __int16 *v62;
  unsigned __int16 v63;
  int v64;
  __int16 v65;
  __int16 v66;
  int v67;
  __int16 v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  BOOL v73;
  int v74;
  unsigned int v75;
  unsigned __int8 v76;
  BOOL v77;
  int v78;
  char v79;
  unsigned int v80;
  int v81;
  int v82;
  char v83;
  int v84;
  char v85;
  int v86;
  int v87;
  char v88;
  char v89;
  char v90;
  char v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unsigned __int8 v96;
  int v97;
  char v98;
  char v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned __int16 v103;
  unsigned __int16 v104;
  unsigned int v105;
  char v106;
  unsigned __int8 v107;
  char v108;
  unsigned __int8 v109;
  char v110;
  unsigned __int8 v111;
  char v112;
  char v113;
  BOOL v115;
  int v116;
  unsigned int v118;
  int v119;
  int v120;
  _BYTE *v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  __int16 *v130;
  __int16 *v131;
  int v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  __int16 v137;
  int v138;
  int v139;
  unsigned int v140;
  __int16 v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  int v149;
  __int16 v150;
  int v151;
  char v152;
  int v153;
  char v154;
  int v155;
  char v156;
  char v157;
  int v158;
  char v159;
  char v160;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  int v166;
  int v167;
  unsigned int v168;
  char v169;
  char v170;
  int v171;
  int v172;
  char v173;
  int v174;
  unsigned __int16 v176;
  int v177;
  int v178;
  unsigned __int16 v179;
  unsigned int v180;
  BOOL v181;
  BOOL v182;
  unsigned int v183;
  char v184;
  unsigned int v185;
  char v186;
  char v187;
  unsigned __int8 v188;
  char v189;
  unsigned __int8 v190;
  char v191;
  unsigned __int8 v192;
  char v193;
  BOOL v194;
  char v195;
  uint64_t v197;
  char v198;
  uint64_t v199;
  int v200;
  int v201;
  int v202;
  int v203;
  uint64_t v204;
  _BYTE *v205;
  char v206;
  int v207;
  uint64_t *v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned __int16 *v213;
  unsigned __int16 *v214;
  unsigned int *v215;
  unsigned int *v216;
  unint64_t *v217;
  unint64_t *v218;
  unsigned int v219;
  int v220;
  int v221;
  signed int v222;
  unint64_t v223;
  unint64_t v224;
  unsigned __int8 v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  uint64_t v234;
  int v235;
  int v236;
  __int16 v237;
  __int16 v238;
  __int16 v239;
  __int16 v240;
  __int16 v241;
  __int16 v242;
  __int16 v243;
  __int16 v244;
  int v245;
  __int16 v246;
  __int16 v247;
  char v248;
  char v249;
  char v250;
  char v251;
  char v252;
  unsigned __int8 v253;
  char v254;
  int v255;
  char v256;
  char v257;
  uint64_t v258;
  char v259;
  int v260;
  char v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  unsigned int v269;
  int v270;
  uint64_t v271;
  char v272;
  _BYTE *v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  _BYTE *v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  char v282;
  _DWORD *v283;

  v8 = *((unsigned __int8 *)a1 + 221);
  v9 = *((_DWORD *)a1 + 47);
  if (v9)
    v10 = 2;
  else
    v10 = 4;
  if (v9)
    v11 = 3;
  else
    v11 = 4;
  if (a5 >= a6)
    return 0;
  v222 = v10;
  v12 = &byte_1B693B900[dword_1EF13A08C];
  v13 = *(unsigned int *)(a2 + 16);
  v14 = 4 * v13;
  v15 = a1[6];
  v16 = *a1;
  v17 = v13 * a5 + a3;
  v18 = (_OWORD *)(a1[19] + 48 * v17);
  v19 = (unint64_t *)(*(_QWORD *)(a2 + 104) + 8 * v17);
  v20 = (unsigned int *)(a1[4] + 4 * v17);
  v21 = (unsigned __int16 *)(a1[9] + 2 * v17);
  if (a5)
    v22 = v11;
  else
    v22 = 32;
  if (a5)
    v23 = *(_DWORD *)(a2 + 16);
  else
    v23 = 0;
  if (a3)
    v24 = -1;
  else
    v24 = 0;
  v199 = v24;
  if (a3)
    v25 = 4;
  else
    v25 = 32;
  v198 = v25;
  v26 = a2 + 32;
  v27 = a2 + 64;
  v197 = -v13;
  v266 = *((_DWORD *)a1 + 47);
  if (v9)
    v28 = 1;
  else
    v28 = 3;
  v226 = v28;
  v220 = 16 * v13 * a5;
  v221 = 4 * a5;
  v219 = v13;
  v203 = 16 * v13;
  v29.i64[0] = 50529027;
  v30 = xmmword_1B6917DD0;
  v210 = a4;
  v211 = a6;
  v209 = a3;
  v208 = a1;
  v206 = v11;
  v207 = *((unsigned __int8 *)a1 + 221);
  v205 = &byte_1B693B900[dword_1EF13A08C];
  v235 = 4 * v13;
  v204 = a1[6];
  v234 = *a1;
  v223 = v27;
  v224 = v26;
  while (a3 >= a4)
  {
LABEL_361:
    ++a5;
    v220 += v203;
    v221 += 4;
    v22 = v11;
    v23 = v219;
    if (a5 == a6)
      return 0;
  }
  v202 = 4 * a5;
  v201 = a5 * v219 - 1;
  v200 = (a5 - 1) * v219;
  v31 = a3;
  v32 = v198;
  v33 = v199;
  v271 = -(uint64_t)v23;
  v225 = v22;
  v212 = a5;
  while (1)
  {
    if (*(_BYTE *)(a1[17] + v31 + *((_DWORD *)a1 + 3) * a5))
    {
      *v18 = v30;
      v18[1] = v30;
    }
    else
    {
      v29.i64[0] = 0x202020202020202;
      v29.i64[1] = 0x202020202020202;
      *v18 = v29;
      v18[1] = v29;
    }
    v34 = *v21;
    if (*(_BYTE *)(v15 + 12 * v34 + 9) == 1)
    {
      *(_BYTE *)v18 = 0x80;
      goto LABEL_74;
    }
    v35 = *v19;
    if (!*v19)
      return 4294958324;
    v281 = *(unsigned __int8 *)(v15 + 12 * *v21 + 9);
    v283 = v18 + 1;
    v36 = v21[v33];
    v275 = v21[v271];
    v37 = v26 > v35 || v35 > v27;
    v38 = !v37;
    if (!(v8 | v38))
    {
      v39 = bswap32(*v20);
      v268 = *(unsigned __int8 *)(a1[17] + v31 + *((_DWORD *)a1 + 3) * a5);
      if (*(_BYTE *)(a1[17] + v31 + *((_DWORD *)a1 + 3) * a5))
      {
        v29 = vbicq_s8((int8x16_t)xmmword_1B6917DC0, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v39), (int8x16_t)xmmword_1B6917DB0)));
        a8 = (int8x8_t)vextq_s8(v29, v29, 8uLL).u64[0];
        *(int8x8_t *)v29.i8 = vorr_s8(*(int8x8_t *)v29.i8, a8);
        v39 |= v29.i32[0] | v29.i32[1];
      }
      v40 = *(unsigned __int8 *)(v15 + 12 * v34 + 8);
      v41 = *(unsigned __int16 *)(v35 + 10);
      v42 = v19[v33];
      v43 = (v39 >> 4) & 0xFFF0FFF | v39;
      if (v43)
      {
        v44 = ((v39 >> 4) & 0xFFF0000 | v39 & 0xFFF0000) == 268369920;
        if (((v39 >> 4) & 0xFFF0000 | v39 & 0xFFF0000) == 0xFFF0000)
          v45 = 1;
        else
          v45 = 4;
        v269 = v45;
        v236 = -1;
      }
      else
      {
        if ((v41 & 0xFFFFFFFD) == 0x100)
        {
          v236 = 0;
          v44 = 0;
          v29.i64[0] = 0x2020202002020202;
          *v18 = xmmword_1B6917DE0;
          v46 = 1;
        }
        else
        {
          v44 = 0;
          v236 = -1;
          v46 = 4;
        }
        v269 = v46;
      }
      v47 = v12[v40];
      v267 = 4 * v31;
      v272 = v47;
      if (v281 == 2 && v36 != (_DWORD)v34)
      {
        v48 = 0;
        v49 = 0;
        goto LABEL_58;
      }
      if (v26 > v42 || v42 > v27)
      {
        v49 = 4 * v31;
        if (v267)
        {
          v50 = bswap32(*(v20 - 1));
          if (*(_BYTE *)(a1[17] + v201 + v31))
          {
            if ((v50 & 0xCC0000) != 0)
              v51 = 13382400;
            else
              v51 = 0;
            if ((v50 & 0x330000) != 0)
              v52 = 3342387;
            else
              v52 = 0;
            v50 |= v52 | v51;
          }
          v48 = 0;
          v279 = v43 | (HIWORD(v50) << 28);
          v277 = v18;
          goto LABEL_78;
        }
        v48 = 0;
LABEL_58:
        *(_BYTE *)v18 = 32;
      }
      else
      {
        v48 = 0;
        *(_DWORD *)v18 = 67372036;
        v49 = 1;
      }
      v273 = v18;
      v279 = v43;
      while (1)
      {
        v44 |= v49;
        *(_BYTE *)v18 |= (32 * v49) ^ 0x20;
        v53 = (char *)v18 + 4;
        if (++v48 >= v269)
          break;
        v277 = v53;
        v279 *= 16;
        v18 = v273;
LABEL_78:
        v273 = v18;
        if ((v48 & v268) != 0)
        {
          v49 = 0;
          v18 = v277;
          *v277 = 32;
        }
        else
        {
          v270 = v48;
          v49 = v236 | (v279 >> 28) | (v48 == 0);
          if (v49)
          {
            v49 = 1;
            if (v279 >> 28 == 15)
            {
              v18 = v277;
            }
            else
            {
              v230 = v43;
              v262 = v31;
              v213 = v21;
              v215 = v20;
              v217 = v19;
              v57 = 0;
              v58 = v220 + v48;
              v59 = v279;
              v60 = v267;
              v260 = v44;
              v18 = v277;
              v258 = v34;
              v233 = v41;
              do
              {
                if ((v59 & 0x80000000) == 0)
                {
                  v61 = *(__int16 **)(v16 + 8 * (v60 + v58));
                  v62 = *(__int16 **)(v16 + 8 * (v60 + v58 - 1));
                  if (v61 == v62)
                  {
                    v99 = 0;
                  }
                  else if ((v47 & 2) != 0)
                  {
                    v100 = *v61 - *v62;
                    if (v100 < 0)
                      v100 = *v62 - *v61;
                    if (v100 <= 3)
                    {
                      v116 = v61[1] - v62[1];
                      if (v116 < 0)
                        v116 = v62[1] - v61[1];
                      v37 = v116 > v226;
                      v48 = v270;
                      v44 = v260;
                      v99 = v37 || v61[6] != v62[6];
                    }
                    else
                    {
                      v99 = 1;
                    }
                  }
                  else
                  {
                    v244 = v61[1];
                    v247 = *v61;
                    v63 = *v61 - *v62;
                    v238 = v62[1];
                    v240 = *v62;
                    v64 = (__int16)(v244 - v238);
                    v65 = v62[2];
                    v242 = v61[2];
                    v66 = v61[3];
                    v67 = (__int16)(v242 - v65);
                    v68 = v62[3];
                    v69 = (unsigned __int16)v61[6];
                    v70 = (unsigned __int16)v62[6];
                    v71 = (__int16)(v66 - v68);
                    v72 = (__int16)(v69 - v70);
                    v73 = (v63 & 0x8000u) != 0;
                    if ((v63 & 0x8000u) != 0)
                      v74 = -v63;
                    else
                      LOBYTE(v74) = *(_BYTE *)v61 - *(_BYTE *)v62;
                    v256 = v74;
                    v75 = -v63 >> 8;
                    if (v73)
                      v76 = v75;
                    else
                      v76 = (unsigned __int16)(*v61 - *v62) >> 8;
                    v253 = v76;
                    v77 = v64 < 0;
                    if (v64 < 0)
                      v78 = -(unsigned __int16)(v244 - v238);
                    else
                      LOBYTE(v78) = v244 - v238;
                    if (v77)
                      v79 = (unsigned __int16)(v238 - v244) >> 8;
                    else
                      v79 = (unsigned __int16)(v244 - v238) >> 8;
                    LOBYTE(v80) = (unsigned __int16)(v242 - v65) >> 8;
                    if (v67 < 0)
                      v81 = -(unsigned __int16)(v242 - v65);
                    else
                      LOBYTE(v81) = v242 - v65;
                    if (v67 < 0)
                      v80 = -(unsigned __int16)(v242 - v65) >> 8;
                    v249 = v80;
                    v251 = v81;
                    if (v71 < 0)
                      v82 = -(unsigned __int16)(v66 - v68);
                    else
                      LOBYTE(v82) = v66 - v68;
                    if (v71 >= 0)
                      v83 = (unsigned __int16)(v66 - v68) >> 8;
                    else
                      v83 = (unsigned __int16)(v68 - v66) >> 8;
                    if (v72 < 0)
                      v84 = -(unsigned __int16)(v69 - v70);
                    else
                      LOBYTE(v84) = v69 - v70;
                    if (v72 >= 0)
                      v85 = (unsigned __int16)(v69 - v70) >> 8;
                    else
                      v85 = (unsigned __int16)(v70 - v69) >> 8;
                    v86 = v61[6];
                    v87 = (*((unsigned __int8 *)v61 + 8) >> 4) & 2 | (*((unsigned __int8 *)v61 + 9) >> 5);
                    if (v87)
                      v88 = 0;
                    else
                      v88 = -1;
                    if (v87 == 1)
                      v89 = -1;
                    else
                      v89 = v88;
                    if (v87 == 2)
                      v90 = -1;
                    else
                      v90 = v88;
                    if (v87 == 2)
                      v91 = -1;
                    else
                      v91 = v89;
                    v92 = v89 & 1;
                    v93 = v90 & 3;
                    if (!v266)
                      v92 = v89 & 3;
                    v264 = v92;
                    if (v266)
                      v94 = v90 & 1;
                    else
                      v94 = v90 & 3;
                    if (v86 == v70)
                    {
                      v96 = v253;
                      LOBYTE(v95) = v256;
                      v98 = v249;
                      LOBYTE(v97) = v251;
                    }
                    else
                    {
                      v101 = v69 - (bswap32(v70) >> 16);
                      v102 = (__int16)(v247 - v65);
                      v103 = v244 - v68;
                      v245 = (__int16)(v242 - v240);
                      v104 = v66 - v238;
                      if (v102 < 0)
                        v95 = -(unsigned __int16)(v247 - v65);
                      else
                        LOBYTE(v95) = v247 - v65;
                      if (v102 >= 0)
                        v96 = (unsigned __int16)(v247 - v65) >> 8;
                      else
                        v96 = (unsigned __int16)(v65 - v247) >> 8;
                      v93 = v90 & 3;
                      if ((v103 & 0x8000u) != 0)
                        v78 = -v103;
                      else
                        LOBYTE(v78) = v103;
                      if ((v103 & 0x8000u) == 0)
                        v79 = HIBYTE(v103);
                      else
                        v79 = (unsigned __int16)-v103 >> 8;
                      if (v245 < 0)
                        v97 = -(unsigned __int16)(v242 - v240);
                      else
                        LOBYTE(v97) = v242 - v240;
                      if (v245 >= 0)
                        v98 = (unsigned __int16)(v242 - v240) >> 8;
                      else
                        v98 = (unsigned __int16)(v240 - v242) >> 8;
                      if ((v104 & 0x8000u) != 0)
                        v82 = -v104;
                      else
                        LOBYTE(v82) = v104;
                      if ((v104 & 0x8000u) == 0)
                        v83 = HIBYTE(v104);
                      else
                        v83 = (unsigned __int16)-v104 >> 8;
                      if ((v101 & 0x8000u) != 0)
                        v84 = -(unsigned __int16)v101;
                      else
                        LOBYTE(v84) = v101;
                      if ((v101 & 0x8000u) == 0)
                        v85 = BYTE1(v101);
                      else
                        v85 = (unsigned __int16)-(__int16)v101 >> 8;
                    }
                    v105 = v70 >> 8;
                    v106 = v79 & v89;
                    v107 = v78 & v89;
                    v108 = v98 & v90;
                    v109 = v97 & v90;
                    v110 = v83 & v90;
                    v111 = v82 & v90;
                    v112 = v85 & v91;
                    v113 = v84 & v91;
                    v115 = (v96 & v89) != 0 || (v89 & 3u) < (v95 & v89);
                    if (v106)
                      v115 = 1;
                    if (v264 < v107)
                      v115 = 1;
                    if (v108)
                      v115 = 1;
                    if (v93 < v109)
                      v115 = 1;
                    if (v110)
                      v115 = 1;
                    if (v94 < v111)
                      v115 = 1;
                    v34 = v258;
                    if ((v86 - v105) | ((v69 >> 8) - v62[6]))
                    {
                      v99 = v115 || v112 != 0 || v113 != 0;
                    }
                    else
                    {
                      v99 = sub_1B68C53CC(v61, v62, v222, 0, 0, *(int32x2_t *)v29.i8, (int32x2_t)a8);
                      v34 = v258;
                      v30 = xmmword_1B6917DD0;
                    }
                    v14 = v235;
                    v16 = v234;
                    v47 = v272;
                    v60 = v267;
                    v41 = v233;
                    v44 = v260;
                    v48 = v270;
                    v18 = v277;
                  }
                  *((_BYTE *)v18 + v57) = v99;
                }
                v59 *= 2;
                ++v57;
                v58 += v14;
              }
              while (v57 != 4);
              v49 = 1;
              a4 = v210;
              a6 = v211;
              a5 = v212;
              a3 = v209;
              a1 = v208;
              v11 = v206;
              v8 = v207;
              v15 = v204;
              v12 = v205;
              v20 = v215;
              v19 = v217;
              v21 = v213;
              v27 = v223;
              v26 = v224;
              v22 = v225;
              v31 = v262;
              v43 = v230;
            }
          }
          else
          {
            v18 = v277;
            *v277 = 32;
          }
        }
      }
      v18 = v273;
      *v273 |= ((_BYTE)v44 << 6) ^ 0x40;
      v54 = v19[v271];
      if (v43)
      {
        v55 = (v43 & 0xFFF) == 4095;
        if ((v43 & 0xFFF) == 0xFFF)
          v56 = 1;
        else
          v56 = 4;
        v280 = v56;
        v232 = -1;
      }
      else if ((v41 & 0xFFFE) == 0x100)
      {
        v232 = 0;
        v55 = 0;
        *v283 = 33686018;
        memset(v273 + 20, 32, 12);
        v280 = 1;
      }
      else
      {
        v55 = 0;
        v232 = -1;
        v280 = 4;
      }
      v118 = v43 << 16;
      v263 = v31;
      if (v281 == 2 && v275 != (_DWORD)v34)
      {
        v119 = 0;
        v120 = 0;
        goto LABEL_215;
      }
      if (v26 <= v54 && v54 <= v27)
      {
        v119 = 0;
        v121 = v283;
        *(_BYTE *)v283 = v22;
        v273[17] = v22;
        v273[18] = v22;
        v120 = 1;
        v273[19] = v22;
        goto LABEL_231;
      }
      v120 = v202;
      if (v202)
      {
        v122 = bswap32(v20[v197]);
        if ((v122 & 0x33000000) != 0)
          v123 = 855638220;
        else
          v123 = 0;
        if ((v122 & 0x330000) != 0)
          v124 = 3342387;
        else
          v124 = 0;
        v125 = v124 | v123 | v122;
        if (*(_BYTE *)(a1[17] + v31 + v200))
          v122 = v125;
        v119 = 0;
        v118 |= v122 << 28;
        v121 = v283;
        while ((v119 & v268) == 0)
        {
          v231 = v119;
          v120 = v232 | (v118 >> 28) | (v119 == 0);
          if (v120)
          {
            v120 = 1;
            if (v118 >> 28 != 15)
            {
              v214 = v21;
              v216 = v20;
              v218 = v19;
              v126 = 0;
              v127 = v16 + 8 * (v267 + v14 * (v221 + v119));
              v128 = v16 + 8 * (v267 + v219 * (4 * (v221 + v119) - 4));
              v129 = v118;
              v265 = v55;
              v229 = v118;
              v227 = v128;
              v228 = v127;
              do
              {
                if ((v129 & 0x80000000) == 0)
                {
                  v130 = *(__int16 **)(v127 + 8 * v126);
                  v131 = *(__int16 **)(v128 + 8 * v126);
                  if (v130 == v131)
                  {
                    v160 = 0;
                  }
                  else if ((v47 & 2) != 0)
                  {
                    v161 = *v130 - *v131;
                    if (v161 < 0)
                      v161 = *v131 - *v130;
                    if (v161 <= 3)
                    {
                      v174 = v130[1] - v131[1];
                      if (v174 < 0)
                        v174 = v131[1] - v130[1];
                      v160 = v174 > v226 || v130[6] != v131[6];
                    }
                    else
                    {
                      v160 = 1;
                    }
                  }
                  else
                  {
                    v243 = *v131;
                    v246 = *v130;
                    v132 = (__int16)(*v130 - *v131);
                    v239 = v130[1];
                    v241 = v131[1];
                    v133 = (__int16)(v239 - v241);
                    v134 = v131[2];
                    v237 = v130[2];
                    v135 = (__int16)(v237 - v134);
                    v136 = v130[3];
                    v137 = v131[3];
                    v138 = (__int16)(v136 - v137);
                    v139 = (unsigned __int16)v130[4];
                    v140 = (unsigned __int16)v131[4];
                    v141 = v139 - v140;
                    if (v132 < 0)
                      v142 = -(unsigned __int16)(v246 - v243);
                    else
                      LOBYTE(v142) = *v130 - v243;
                    if (v132 >= 0)
                      LOBYTE(v143) = (unsigned __int16)(v246 - v243) >> 8;
                    else
                      v143 = -(unsigned __int16)(v246 - v243) >> 8;
                    v261 = v143;
                    LOBYTE(v143) = (unsigned __int16)(v239 - v241) >> 8;
                    v144 = (unsigned __int16)v130[6];
                    if (v133 < 0)
                      v145 = -(unsigned __int16)(v239 - v241);
                    else
                      LOBYTE(v145) = v239 - v241;
                    v259 = v145;
                    v146 = (unsigned __int16)v131[6];
                    if (v133 < 0)
                      v143 = -(unsigned __int16)(v239 - v241) >> 8;
                    v257 = v143;
                    LOBYTE(v143) = (unsigned __int16)(v237 - v134) >> 8;
                    if (v135 < 0)
                      v147 = -(unsigned __int16)(v237 - v134);
                    else
                      LOBYTE(v147) = v237 - v134;
                    if (v135 < 0)
                      v143 = -(unsigned __int16)(v237 - v134) >> 8;
                    v252 = v143;
                    v254 = v147;
                    LOBYTE(v148) = (unsigned __int16)(v136 - v137) >> 8;
                    if (v138 < 0)
                      v149 = -(unsigned __int16)(v136 - v137);
                    else
                      LOBYTE(v149) = v136 - v137;
                    if (v138 < 0)
                      v148 = -(unsigned __int16)(v136 - v137) >> 8;
                    v248 = v148;
                    v250 = v149;
                    v150 = v144 - v146;
                    if (v141 < 0)
                      v151 = -(unsigned __int16)(v139 - v140);
                    else
                      LOBYTE(v151) = v139 - v140;
                    if (v141 >= 0)
                      v152 = (unsigned __int16)(v139 - v140) >> 8;
                    else
                      v152 = (unsigned __int16)(v140 - v139) >> 8;
                    if (v150 < 0)
                      v153 = -(unsigned __int16)(v144 - v146);
                    else
                      LOBYTE(v153) = v144 - v146;
                    if (v150 >= 0)
                      v154 = (unsigned __int16)(v144 - v146) >> 8;
                    else
                      v154 = (unsigned __int16)(v146 - v144) >> 8;
                    v155 = (*((unsigned __int8 *)v130 + 8) >> 4) & 2 | (*((unsigned __int8 *)v130 + 9) >> 5);
                    if (v155)
                      v156 = 0;
                    else
                      v156 = -1;
                    if (v155 == 1)
                      v157 = -1;
                    else
                      v157 = v156;
                    LOBYTE(v158) = v151;
                    if (v155 == 2)
                    {
                      v157 = 0;
                      v159 = 0;
                      v156 = -1;
                      v282 = -1;
                    }
                    else
                    {
                      v159 = v156;
                      v282 = v157;
                    }
                    v162 = v130[6];
                    v163 = v144 >> 8;
                    v164 = v146 >> 8;
                    v165 = v157 & 1;
                    if (!v266)
                      v165 = v157 & 3;
                    v274 = v165;
                    if (v266)
                      v166 = v156 & 1;
                    else
                      v166 = v156 & 3;
                    v276 = v156 & 3;
                    v278 = v166;
                    if (v162 == v146)
                    {
                      LOBYTE(v167) = v142;
                      v55 = v265;
                      LOBYTE(v168) = v261;
                      v169 = v257;
                      LOBYTE(v140) = v259;
                      v170 = v252;
                      LOBYTE(v171) = v254;
                      v173 = v248;
                      LOBYTE(v172) = v250;
                    }
                    else
                    {
                      v158 = v139 - (bswap32(v140) >> 16);
                      v176 = v246 - v134;
                      v177 = (__int16)(v246 - v134);
                      LOWORD(v140) = v239 - v137;
                      v178 = (__int16)(v237 - v243);
                      v179 = v136 - v241;
                      v255 = (__int16)v158;
                      v180 = v144 - (bswap32(v146) >> 16);
                      v168 = -v176 >> 8;
                      v181 = v177 < 0;
                      v182 = v177 < 0;
                      v169 = (unsigned __int16)(v239 - v137) >> 8;
                      if (v181)
                        v167 = -v176;
                      else
                        LOBYTE(v167) = v176;
                      if (!v182)
                        LOBYTE(v168) = HIBYTE(v176);
                      v183 = -(unsigned __int16)v140 >> 8;
                      if ((__int16)(v239 - v137) < 0)
                      {
                        v140 = -(unsigned __int16)(v239 - v137);
                        v169 = v183;
                      }
                      if (v178 < 0)
                        v171 = -(unsigned __int16)(v237 - v243);
                      else
                        LOBYTE(v171) = v237 - v243;
                      if (v178 >= 0)
                        v170 = (unsigned __int16)(v237 - v243) >> 8;
                      else
                        v170 = (unsigned __int16)(v243 - v237) >> 8;
                      if ((v179 & 0x8000u) != 0)
                        v172 = -v179;
                      else
                        LOBYTE(v172) = v179;
                      if ((v179 & 0x8000u) == 0)
                        v173 = HIBYTE(v179);
                      else
                        v173 = (unsigned __int16)-v179 >> 8;
                      v184 = BYTE1(v158);
                      v185 = -(unsigned __int16)v158 >> 8;
                      if ((v158 & 0x8000u) != 0)
                        v158 = -(unsigned __int16)v158;
                      if (v255 >= 0)
                        v152 = v184;
                      else
                        v152 = v185;
                      if ((v180 & 0x8000u) != 0)
                        v153 = -(unsigned __int16)v180;
                      else
                        LOBYTE(v153) = v180;
                      if ((v180 & 0x8000u) == 0)
                        v154 = BYTE1(v180);
                      else
                        v154 = (unsigned __int16)-(__int16)v180 >> 8;
                      v55 = v265;
                    }
                    v186 = v168 & v157;
                    v187 = v169 & v157;
                    v188 = v140 & v157;
                    v189 = v170 & v156;
                    v190 = v171 & v156;
                    v191 = v173 & v156;
                    v192 = v172 & v156;
                    v193 = v158 & v159;
                    if (v186)
                      v194 = 0;
                    else
                      v194 = (v157 & 3u) >= (v167 & v157);
                    v195 = !v194;
                    if (v187)
                      v195 = 1;
                    if (v274 < v188)
                      v195 = 1;
                    if (v189)
                      v195 = 1;
                    if (v276 < v190)
                      v195 = 1;
                    if (v191)
                      v195 = 1;
                    if (v278 < v192)
                      v195 = 1;
                    if ((v162 - v164) | (v163 - v131[6]))
                    {
                      v160 = v195 & 1 | ((v152 & v159) != 0
                                      || v193 != 0
                                      || (v154 & v282) != 0
                                      || (v153 & v282) != 0);
                    }
                    else
                    {
                      v160 = sub_1B68C53CC(v130, v131, v222, 0, 0, *(int32x2_t *)v29.i8, (int32x2_t)a8);
                      v55 = v265;
                      v30 = xmmword_1B6917DD0;
                    }
                    v47 = v272;
                    v118 = v229;
                    v128 = v227;
                    v127 = v228;
                  }
                  v121[v126] = v160;
                }
                v129 *= 2;
                ++v126;
              }
              while (v126 != 4);
              v120 = 1;
              a4 = v210;
              a6 = v211;
              a5 = v212;
              a3 = v209;
              a1 = v208;
              v11 = v206;
              v8 = v207;
              v15 = v204;
              v12 = v205;
              v14 = v235;
              v16 = v234;
              v20 = v216;
              v19 = v218;
              v21 = v214;
            }
          }
          else
          {
            *v121 = 32;
          }
          v119 = v231;
LABEL_231:
          v55 |= v120;
          *v121 |= (32 * v120) ^ 0x20;
          v121 += 4;
          v118 *= 16;
          if (++v119 >= v280)
          {
            *(_BYTE *)v283 |= ((_BYTE)v55 << 6) ^ 0x40;
            v27 = v223;
            v26 = v224;
            v22 = v225;
            v31 = v263;
            goto LABEL_74;
          }
        }
        v120 = 0;
      }
      else
      {
        v119 = 0;
LABEL_215:
        v121 = v283;
      }
      *v121 = 32;
      goto LABEL_231;
    }
    if (*(_BYTE *)(a1[17] + v31 + *((_DWORD *)a1 + 3) * a5))
    {
      v29 = (int8x16_t)xmmword_1B6917FD0;
    }
    else
    {
      v29.i64[0] = 0x303030303030303;
      v29.i64[1] = 0x303030303030303;
    }
    *v18 = v29;
    v18[1] = v29;
    *(_DWORD *)v18 = 16843009 * v32;
    *v283 = 16843009 * v22;
    if (v281 == 2)
    {
      *(_BYTE *)v18 = v32 | (32 * (v36 != (_DWORD)v34));
      *((_BYTE *)v18 + 16) = v22 | (32 * (v275 != (_DWORD)v34));
    }
LABEL_74:
    ++v21;
    ++v20;
    ++v19;
    v18 += 3;
    ++v31;
    v33 = -1;
    v32 = 4;
    if (v31 >= a4)
      goto LABEL_361;
  }
}

uint64_t sub_1B68FB1C0(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  BOOL v5;
  size_t v6;

  if (a2)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      if (v3 == 2)
      {
        if (*(_BYTE *)(a1 + v2) == 3)
        {
          if (++v2 >= a2)
            break;
          v3 = 0;
        }
        else
        {
          v3 = 2;
        }
      }
      *(_BYTE *)(a1 + v4) = *(_BYTE *)(a1 + v2);
      if (*(_BYTE *)(a1 + v2))
        v3 = 0;
      else
        ++v3;
      v4 = (v4 + 1);
      ++v2;
    }
    while (v2 < a2);
  }
  else
  {
    v4 = 0;
  }
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if ((_DWORD)v6 != 0 && v5)
    bzero((void *)(a1 + v4), v6);
  return v4;
}

uint64_t sub_1B68FB254(_QWORD *a1, unsigned int a2, _WORD *a3)
{
  uint64_t result;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  _WORD v13[32];
  int v14[3];
  int v15[6];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  result = sub_1B68FB2FC(a1, a2, v14, v15, v13, &v12);
  if (!v12)
    return sub_1B68FB668(*(unsigned __int8 *)(a1[5] + 1), a1[6], a2, v14, v15, v13, a3, v7, v8, v9, v10, v11);
  *(_DWORD *)a3 = 0;
  return result;
}

uint64_t sub_1B68FB2FC(_QWORD *a1, unsigned int a2, _DWORD *a3, _DWORD *a4, _WORD *a5, _DWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  unsigned int v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  v9 = a1[16];
  if (v9)
    v10 = *(_QWORD *)(v9 + 272);
  else
    v10 = 0;
  v11 = a1[17];
  if (v11)
    v12 = *(_QWORD *)(v11 + 272);
  else
    v12 = 0;
  v13 = a1[6];
  v14 = a1[18];
  if (v14)
    v38 = *(_QWORD *)(v14 + 272);
  else
    v38 = 0;
  v15 = *(_QWORD *)(a1[22] + 272);
  v16 = a1[19];
  if (v16)
    v37 = *(_QWORD *)(v16 + 272);
  else
    v37 = 0;
  v17 = *(unsigned __int8 *)(a1[5] + 1);
  v18 = *(unsigned __int8 *)(v13 + 16 + 16 * (int)a2 + 15);
  v41 = 0;
  v42 = 0;
  v19 = *(unsigned __int16 *)(v13 + 26);
  if (v18 == 3)
  {
    v20 = 0;
    v21 = 16;
  }
  else
  {
    v20 = a2;
    v21 = *((unsigned __int8 *)&unk_1B69360A0 + 80 * v19 + 2 * a2 + 48);
  }
  v22 = *((unsigned __int8 *)&unk_1B69360A0 + 80 * v19 + v20 + 32);
  v40 = v10;
  sub_1B68FB914(byte_1B6935FB4[v22], *((unsigned __int8 *)&unk_1B69360A0 + 80 * v19 + v20 + 32), byte_1B6935FA4[v22], v15, v10, (uint64_t)a5, (uint64_t)a4, (_DWORD *)&v42 + 1);
  result = sub_1B68FB914(byte_1B6935FD4[v22], v22, byte_1B6935FC4[v22], v15, v12, (uint64_t)(a5 + 4), (uint64_t)(a4 + 2), &v42);
  if (v17 == 4)
  {
    if (HIDWORD(v42) && (_DWORD)v42 && (*a4 || *a5 || a5[1]))
    {
      if (a4[2] || a5[4] || !a6 || a5[5])
        goto LABEL_26;
    }
    else if (!a6)
    {
      goto LABEL_26;
    }
    *a6 = 1;
    return result;
  }
LABEL_26:
  v24 = a4 + 4;
  v25 = v21 + byte_1B693C147[v22];
  v26 = a5 + 8;
  if (v25 > 0xF)
  {
    if (((0x33uLL >> v22) & 1) == 0)
    {
      *v26 = 0;
      *v24 = 0x2000000020;
      HIDWORD(v41) = 0;
      goto LABEL_34;
    }
    v27 = v22;
    v28 = v15;
    v29 = v38;
  }
  else
  {
    v27 = v22;
    v28 = v15;
    v29 = v12;
  }
  sub_1B68FB914((v25 < 0x10) & (0xFFCCuLL >> v22), v27, dword_1B6935FE4[4 * dword_1B6936024[byte_1B693C157[v22]] + dword_1B6936024[v25 + 1]], v28, v29, (uint64_t)v26, (uint64_t)(a4 + 4), (_DWORD *)&v41 + 1);
LABEL_34:
  HIDWORD(v31) = v22;
  LODWORD(v31) = v22;
  v30 = v31 >> 1;
  if ((v30 - 4) < 2 || v30 == 1)
  {
    v32 = v22;
    v33 = v15;
    v34 = v40;
  }
  else if (v30)
  {
    v32 = v22;
    v33 = v15;
    v34 = v12;
  }
  else
  {
    v32 = 0;
    v33 = v15;
    v34 = v37;
  }
  result = sub_1B68FB914(byte_1B693607C[v22], v32, byte_1B693606C[v22], v33, v34, (uint64_t)&v43, (uint64_t)v44, &v41);
  v35 = HIDWORD(v41);
  if ((_DWORD)v41)
  {
    if (!HIDWORD(v41))
    {
      *v26 = v43;
      *v24 = v44[0];
    }
  }
  v36 = v42;
  *a3 = HIDWORD(v42);
  a3[1] = v36;
  a3[2] = v35;
  return result;
}

